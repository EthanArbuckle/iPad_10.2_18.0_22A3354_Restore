void llvm::SourceMgr::PrintMessage(llvm *a1, const char *a2, int a3, llvm::Twine *a4, unint64_t *a5, uint64_t a6, __int128 *a7, uint64_t a8, BOOL a9)
{
  llvm::raw_ostream *v17;
  uint64_t v18;

  v17 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::SourceMgr::PrintMessage((uint64_t *)a1, v17, a2, a3, a4, a5, a6, v18, a7, a8, a9);
}

llvm::raw_ostream *printSourceLine(llvm::raw_ostream *result, uint64_t a2, unint64_t a3)
{
  llvm::raw_ostream *v4;
  unsigned int v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v12;
  char *v13;
  const void *v14;
  char *v15;
  _BYTE *v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  const void *v26;
  size_t v27;
  _BYTE *v28;

  v4 = result;
  if (!(_DWORD)a3)
    goto LABEL_60;
  v6 = 0;
  v7 = 0;
  while (1)
  {
    v8 = v6;
    if (a3 <= v6)
      break;
    v9 = (char *)memchr((void *)(a2 + v6), 9, a3 - v6);
    v10 = &v9[-a2];
    if (!v9 || v10 + 1 == 0)
      break;
    if (a3 >= v8)
      v12 = v8;
    else
      v12 = a3;
    if (v12 <= (unint64_t)v10)
      v13 = &v9[-a2];
    else
      v13 = (char *)v8;
    if ((unint64_t)v13 >= a3)
      v13 = (char *)a3;
    v14 = (const void *)(a2 + v12);
    v15 = &v13[-v12];
    result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
    if ((unint64_t)&v13[-v12] <= *((_QWORD *)v4 + 3) - (_QWORD)result)
    {
      if (v13 != (char *)v12)
      {
        result = (llvm::raw_ostream *)memcpy(result, v14, (size_t)&v13[-v12]);
        *((_QWORD *)v4 + 4) += v15;
      }
    }
    else
    {
      result = llvm::raw_ostream::write(v4, (const char *)v14, (size_t)&v13[-v12]);
    }
    v16 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 32);
      v17 = v7 - v8 + (_DWORD)v10;
      v7 = v17 + 1;
      if (((v17 + 1) & 7) == 0)
        goto LABEL_5;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v16 + 1;
      *v16 = 32;
      v17 = v7 - v8 + (_DWORD)v10;
      v7 = v17 + 1;
      if (((v17 + 1) & 7) == 0)
        goto LABEL_5;
    }
    v18 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 32);
      v7 = v17 + 2;
      if (((v17 + 2) & 7) == 0)
        goto LABEL_5;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v18 + 1;
      *v18 = 32;
      v7 = v17 + 2;
      if (((v17 + 2) & 7) == 0)
        goto LABEL_5;
    }
    v19 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v19 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 32);
      v7 = v17 + 3;
      if (((v17 + 3) & 7) == 0)
        goto LABEL_5;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v19 + 1;
      *v19 = 32;
      v7 = v17 + 3;
      if (((v17 + 3) & 7) == 0)
        goto LABEL_5;
    }
    v20 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v20 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 32);
      v7 = v17 + 4;
      if (((v17 + 4) & 7) == 0)
        goto LABEL_5;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v20 + 1;
      *v20 = 32;
      v7 = v17 + 4;
      if (((v17 + 4) & 7) == 0)
        goto LABEL_5;
    }
    v21 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v21 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 32);
      v7 = v17 + 5;
      if (((v17 + 5) & 7) == 0)
        goto LABEL_5;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v21 + 1;
      *v21 = 32;
      v7 = v17 + 5;
      if (((v17 + 5) & 7) == 0)
        goto LABEL_5;
    }
    v22 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 32);
      v7 = v17 + 6;
      if (((v17 + 6) & 7) == 0)
        goto LABEL_5;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v22 + 1;
      *v22 = 32;
      v7 = v17 + 6;
      if (((v17 + 6) & 7) == 0)
        goto LABEL_5;
    }
    v23 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v23 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 32);
      v7 = v17 + 7;
      if (((v17 + 7) & 7) != 0)
      {
LABEL_51:
        v24 = (_BYTE *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v24 >= *((_QWORD *)v4 + 3))
        {
          result = llvm::raw_ostream::write(v4, 32);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v24 + 1;
          *v24 = 32;
        }
        v7 = v17 + 8;
      }
    }
    else
    {
      *((_QWORD *)v4 + 4) = v23 + 1;
      *v23 = 32;
      v7 = v17 + 7;
      if (((v17 + 7) & 7) != 0)
        goto LABEL_51;
    }
LABEL_5:
    v6 = (_DWORD)v10 + 1;
    if ((_DWORD)v10 + 1 == (_DWORD)a3)
      goto LABEL_60;
  }
  if (a3 >= v8)
    v25 = v8;
  else
    v25 = a3;
  v26 = (const void *)(a2 + v25);
  v27 = a3 - v25;
  result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
  if (a3 - v25 <= *((_QWORD *)v4 + 3) - (_QWORD)result)
  {
    if (a3 > v8)
    {
      result = (llvm::raw_ostream *)memcpy(result, v26, v27);
      *((_QWORD *)v4 + 4) += v27;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(v4, (const char *)v26, v27);
  }
LABEL_60:
  v28 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v28 >= *((_QWORD *)v4 + 3))
    return llvm::raw_ostream::write(v4, 10);
  *((_QWORD *)v4 + 4) = v28 + 1;
  *v28 = 10;
  return result;
}

_QWORD *std::vector<llvm::SourceMgr::SrcBuffer>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t i;
  void **v4;
  unint64_t v5;
  void *v6;

  v1 = result;
  v2 = *result;
  for (i = result[1]; i != v2; i -= 24)
  {
    v4 = *(void ***)(i - 16);
    if (!v4)
      goto LABEL_12;
    v5 = *(_QWORD *)(*(_QWORD *)(i - 24) + 16) - *(_QWORD *)(*(_QWORD *)(i - 24) + 8);
    if (v5 > 0xFF && v5 >> 16)
    {
      v6 = *v4;
      if (!*v4)
        goto LABEL_11;
LABEL_10:
      v4[1] = v6;
      operator delete(v6);
      goto LABEL_11;
    }
    v6 = *v4;
    if (*v4)
      goto LABEL_10;
LABEL_11:
    operator delete(v4);
    *(_QWORD *)(i - 16) = 0;
LABEL_12:
    result = *(_QWORD **)(i - 24);
    *(_QWORD *)(i - 24) = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v1[1] = v2;
  return result;
}

unint64_t *GetOrCreateOffsetCache<unsigned char>(unint64_t **a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  char v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;

  v2 = *a1;
  if (!*a1)
  {
    v2 = (unint64_t *)operator new(0x18uLL);
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16) - v5;
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      if (v6 <= 1)
        v9 = 1;
      else
        v9 = *(_QWORD *)(a2 + 16) - v5;
      while (1)
      {
        if (*(_BYTE *)(v5 + v8) != 10)
          goto LABEL_8;
        v11 = v2[2];
        if ((unint64_t)v7 >= v11)
          break;
        *v7 = v8;
        v10 = (uint64_t)(v7 + 1);
LABEL_7:
        v2[1] = v10;
        v7 = (_BYTE *)v10;
LABEL_8:
        if (++v8 == v9)
          goto LABEL_42;
      }
      v12 = *v2;
      v13 = (unint64_t)&v7[-*v2];
      v14 = v13 + 1;
      if ((uint64_t)(v13 + 1) < 0)
        abort();
      v15 = v11 - v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = operator new(v16);
        v18 = (char *)v17 + v13;
        *((_BYTE *)v17 + v13) = v8;
        v10 = (uint64_t)v17 + v13 + 1;
        if (v7 == (_BYTE *)v12)
        {
LABEL_29:
          *v2 = (unint64_t)v18;
          v2[1] = v10;
          v2[2] = (unint64_t)v17 + v16;
          if (v7)
            operator delete(v7);
          goto LABEL_7;
        }
      }
      else
      {
        v17 = 0;
        v18 = &v7[-*v2];
        *(_BYTE *)v13 = v8;
        v10 = v13 + 1;
        if (v7 == (_BYTE *)v12)
          goto LABEL_29;
      }
      if (v13 < 8
        || (char *)v17 + v13 + v12 - (_QWORD)v7 > (char *)v17 + v13 - 1
        || v12 > (unint64_t)(v7 - 1)
        || v12 - (unint64_t)v17 < 0x20)
      {
        v19 = v7;
        goto LABEL_26;
      }
      if (v13 >= 0x20)
      {
        v22 = v13 & 0xFFFFFFFFFFFFFFE0;
        v23 = (char *)v17 + v13 - 16;
        v24 = (__int128 *)(v7 - 16);
        v25 = v13 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 2;
          v25 -= 32;
        }
        while (v25);
        if (v13 == v22)
          goto LABEL_28;
        if ((v13 & 0x18) == 0)
        {
          v18 -= v22;
          v19 = &v7[-v22];
LABEL_26:
          v20 = v18 - 1;
          do
          {
            v21 = *--v19;
            *v20-- = v21;
          }
          while (v19 != (_BYTE *)v12);
LABEL_28:
          v7 = (_BYTE *)*v2;
          v18 = (char *)v17;
          goto LABEL_29;
        }
      }
      else
      {
        v22 = 0;
      }
      v19 = &v7[-(v13 & 0xFFFFFFFFFFFFFFF8)];
      v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
      v27 = &v7[-v22 - v12 - 8 + (_QWORD)v17];
      v28 = (uint64_t *)&v7[-v22 - 8];
      v29 = v22 - (v13 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v30 = *v28--;
        *v27-- = v30;
        v29 += 8;
      }
      while (v29);
      if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      goto LABEL_26;
    }
LABEL_42:
    *a1 = v2;
  }
  return v2;
}

_QWORD *GetOrCreateOffsetCache<unsigned short>(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  __int16 v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v29;

  v2 = *a1;
  if (!*a1)
  {
    v2 = operator new(0x18uLL);
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16) - v4;
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      if (v5 <= 1)
        v10 = 1;
      else
        v10 = *(_QWORD *)(a2 + 16) - v4;
      v29 = v10;
      while (1)
      {
        if (*(_BYTE *)(v4 + v9) != 10)
          goto LABEL_9;
        if (v8 >= v7)
          break;
        *(_WORD *)v8 = v9;
        v11 = (uint64_t)(v8 + 2);
LABEL_8:
        v2[1] = v11;
        v8 = (char *)v11;
LABEL_9:
        if (++v9 == v10)
          goto LABEL_40;
      }
      v12 = v8 - v6;
      if (v8 - v6 <= -3)
        abort();
      v13 = v12 >> 1;
      if (v7 - v6 <= (unint64_t)((v12 >> 1) + 1))
        v14 = v13 + 1;
      else
        v14 = v7 - v6;
      if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFELL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 < 0)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v16 = operator new(2 * v15);
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (uint64_t)(v17 + 2);
        if (v8 == v6)
          goto LABEL_27;
      }
      else
      {
        v16 = 0;
        v17 = (char *)(2 * v13);
        *(_WORD *)(2 * v13) = v9;
        v11 = 2 * v13 + 2;
        if (v8 == v6)
          goto LABEL_27;
      }
      v18 = v8 - 2 - v6;
      if (v18 >= 0x5E)
      {
        if (&v16[(v12 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v18 & 0xFFFFFFFFFFFFFFFELL)] > &v16[(v12 & 0xFFFFFFFFFFFFFFFELL)
                                                                                        - 2])
        {
          v19 = v8;
        }
        else if (&v8[-(v18 & 0xFFFFFFFFFFFFFFFELL) - 2] > v8 - 2)
        {
          v19 = v8;
        }
        else if (v8 - v16 - (v12 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
        {
          v21 = (v18 >> 1) + 1;
          v22 = 2 * (v21 & 0xFFFFFFFFFFFFFFF0);
          v19 = &v8[-v22];
          v17 -= v22;
          v23 = &v16[2 * v13 - 16];
          v24 = v8 - 16;
          v25 = v21 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 16;
          }
          while (v25);
          if (v21 == (v21 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_27;
        }
        else
        {
          v19 = v8;
        }
      }
      else
      {
        v19 = v8;
      }
      do
      {
        v20 = *((_WORD *)v19 - 1);
        v19 -= 2;
        *((_WORD *)v17 - 1) = v20;
        v17 -= 2;
      }
      while (v19 != v6);
LABEL_27:
      v7 = &v16[2 * v15];
      *v2 = v17;
      v2[1] = v11;
      v2[2] = v7;
      if (v6)
        operator delete(v6);
      v6 = v17;
      v10 = v29;
      goto LABEL_8;
    }
LABEL_40:
    *a1 = v2;
  }
  return v2;
}

_QWORD *GetOrCreateOffsetCache<unsigned int>(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v28;

  v2 = *a1;
  if (!*a1)
  {
    v2 = operator new(0x18uLL);
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16) - v4;
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      if (v5 <= 1)
        v10 = 1;
      else
        v10 = *(_QWORD *)(a2 + 16) - v4;
      v28 = v10;
      while (1)
      {
        if (*(_BYTE *)(v4 + v9) != 10)
          goto LABEL_9;
        if (v8 >= v7)
          break;
        *(_DWORD *)v8 = v9;
        v11 = (uint64_t)(v8 + 4);
LABEL_8:
        v2[1] = v11;
        v8 = (char *)v11;
LABEL_9:
        if (++v9 == v10)
          goto LABEL_39;
      }
      v12 = (v8 - v6) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        abort();
      if ((v7 - v6) >> 1 > v13)
        v13 = (v7 - v6) >> 1;
      if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        if (v14 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v15 = operator new(4 * v14);
        v16 = &v15[4 * v12];
        *(_DWORD *)v16 = v9;
        v11 = (uint64_t)(v16 + 4);
        if (v8 == v6)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(4 * v12);
        *(_DWORD *)(4 * v12) = v9;
        v11 = 4 * v12 + 4;
        if (v8 == v6)
          goto LABEL_26;
      }
      v17 = v8 - 4 - v6;
      if (v17 >= 0xBC)
      {
        if (&v15[v8 - v6 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v8 - v6 - 4])
        {
          v18 = v8;
        }
        else if (&v8[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v8 - 4)
        {
          v18 = v8;
        }
        else if ((unint64_t)(v6 - v15) >= 0x20)
        {
          v20 = (v17 >> 2) + 1;
          v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          v18 = &v8[-v21];
          v16 -= v21;
          v22 = &v15[4 * v12 - 16];
          v23 = v8 - 16;
          v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            *v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_26;
        }
        else
        {
          v18 = v8;
        }
      }
      else
      {
        v18 = v8;
      }
      do
      {
        v19 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v16 - 1) = v19;
        v16 -= 4;
      }
      while (v18 != v6);
LABEL_26:
      v7 = &v15[4 * v14];
      *v2 = v16;
      v2[1] = v11;
      v2[2] = v7;
      if (v6)
        operator delete(v6);
      v6 = v16;
      v10 = v28;
      goto LABEL_8;
    }
LABEL_39:
    *a1 = v2;
  }
  return v2;
}

_QWORD *GetOrCreateOffsetCache<unsigned long long>(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v28;

  v2 = *a1;
  if (!*a1)
  {
    v2 = operator new(0x18uLL);
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16) - v4;
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      if (v5 <= 1)
        v10 = 1;
      else
        v10 = *(_QWORD *)(a2 + 16) - v4;
      v28 = v10;
      while (1)
      {
        if (*(_BYTE *)(v4 + v9) != 10)
          goto LABEL_9;
        if (v8 >= v7)
          break;
        *(_QWORD *)v8 = v9;
        v11 = (uint64_t)(v8 + 8);
LABEL_8:
        v2[1] = v11;
        v8 = (char *)v11;
LABEL_9:
        if (++v9 == v10)
          goto LABEL_39;
      }
      v12 = (v8 - v6) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      if ((v7 - v6) >> 2 > v13)
        v13 = (v7 - v6) >> 2;
      if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v12];
        *(_QWORD *)v16 = v9;
        v11 = (uint64_t)(v16 + 8);
        if (v8 == v6)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v12);
        *(_QWORD *)(8 * v12) = v9;
        v11 = 8 * v12 + 8;
        if (v8 == v6)
          goto LABEL_26;
      }
      v17 = v8 - 8 - v6;
      if (v17 >= 0x168)
      {
        if (&v15[v8 - v6 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v8 - v6 - 8])
        {
          v18 = v8;
        }
        else if (&v8[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
        {
          v18 = v8;
        }
        else if ((unint64_t)(v6 - v15) >= 0x20)
        {
          v20 = (v17 >> 3) + 1;
          v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v18 = &v8[-v21];
          v16 -= v21;
          v22 = &v15[8 * v12 - 16];
          v23 = v8 - 16;
          v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            *v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_26;
        }
        else
        {
          v18 = v8;
        }
      }
      else
      {
        v18 = v8;
      }
      do
      {
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v19;
        v16 -= 8;
      }
      while (v18 != v6);
LABEL_26:
      v7 = &v15[8 * v14];
      *v2 = v16;
      v2[1] = v11;
      v2[2] = v7;
      if (v6)
        operator delete(v6);
      v6 = v16;
      v10 = v28;
      goto LABEL_8;
    }
LABEL_39:
    *a1 = v2;
  }
  return v2;
}

void llvm::SmallVectorImpl<llvm::SMFixIt>::append<llvm::SMFixIt const*,void>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  std::string *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 *v23;
  unint64_t v24;

  v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
  v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 <= *(unsigned int *)(a1 + 12))
  {
    v10 = *(char **)a1;
    if (a2 == a3)
      goto LABEL_21;
  }
  else
  {
    v24 = 0;
    v8 = (char *)(a1 + 16);
    v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v6 + v7, 40, &v24);
    v10 = v9;
    v11 = *(char **)a1;
    v12 = *(_DWORD *)(a1 + 8);
    if (v12)
    {
      v13 = &v11[40 * v12];
      v14 = v9;
      do
      {
        *(_OWORD *)v14 = *(_OWORD *)v11;
        v15 = *((_OWORD *)v11 + 1);
        *((_QWORD *)v14 + 4) = *((_QWORD *)v11 + 4);
        *((_OWORD *)v14 + 1) = v15;
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = 0;
        *((_QWORD *)v11 + 2) = 0;
        v11 += 40;
        v14 += 40;
      }
      while (v11 != v13);
      v11 = *(char **)a1;
      v16 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v16)
      {
        v17 = 40 * v16;
        do
        {
          if (v11[v17 - 1] < 0)
            operator delete(*(void **)&v11[v17 - 24]);
          v17 -= 40;
        }
        while (v17);
        v11 = *(char **)a1;
      }
    }
    v18 = v24;
    if (v11 != v8)
      free(v11);
    *(_QWORD *)a1 = v10;
    *(_DWORD *)(a1 + 12) = v18;
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
    if (a2 == a3)
      goto LABEL_21;
  }
  v19 = (std::string *)&v10[40 * v7 + 16];
  v20 = a2 + 1;
  do
  {
    while (1)
    {
      *(_OWORD *)&v19[-1].__r_.__value_.__r.__words[1] = *(v20 - 1);
      if ((*((char *)v20 + 23) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
      v21 = v20 - 1;
      v19 = (std::string *)((char *)v19 + 40);
      v20 = (__int128 *)((char *)v20 + 40);
      if ((__int128 *)((char *)v21 + 40) == a3)
        goto LABEL_20;
    }
    v22 = *v20;
    v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v22;
    v19 = (std::string *)((char *)v19 + 40);
    v23 = v20 - 1;
    v20 = (__int128 *)((char *)v20 + 40);
  }
  while ((__int128 *)((char *)v23 + 40) != a3);
LABEL_20:
  LODWORD(v7) = *(_DWORD *)(a1 + 8);
LABEL_21:
  *(_DWORD *)(a1 + 8) = v7 + v6;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(unint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  int v30;
  __int128 *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  const void *v35;
  size_t v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  __int128 *v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  int v47;
  int v48;
  size_t v49;
  char *v50;
  size_t v51;
  const void *v52;
  size_t v53;
  int v54;
  _BOOL4 v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  int v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const void *v33;
  const void *v34;
  int v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  _BOOL4 v43;
  int v44;
  int v45;
  size_t v46;
  const void *v47;
  size_t v48;
  const void *v49;
  size_t v50;
  int v51;
  _BOOL4 v52;
  size_t v53;
  int v54;
  const void *v55;
  size_t v56;
  int v57;
  _BOOL4 v58;
  size_t v59;
  uint64_t v61;
  const void *v62;
  size_t v63;
  __int128 v64;
  _QWORD v65[2];
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;

  if (a1 != a2)
  {
    v67 = v2;
    v68 = v3;
    v4 = a2;
    v5 = a1;
    v6 = a1 + 40;
    if (a1 + 40 != a2)
    {
      v7 = 0;
      v8 = v65;
      v9 = a1;
      do
      {
        v10 = v9;
        v9 = v6;
        v12 = *(_QWORD *)(v10 + 40);
        v13 = v12 >= *(_QWORD *)v10;
        if (v12 == *(_QWORD *)v10
          && (v14 = *(_QWORD *)(v10 + 48), v15 = *(_QWORD *)(v10 + 8), v13 = v14 >= v15, v14 == v15))
        {
          v44 = *(char *)(v10 + 39);
          v45 = *(char *)(v10 + 79);
          if (v45 >= 0)
            v46 = *(unsigned __int8 *)(v10 + 79);
          else
            v46 = *(_QWORD *)(v10 + 64);
          if (v45 >= 0)
            v47 = (const void *)(v10 + 56);
          else
            v47 = *(const void **)(v10 + 56);
          if (v44 >= 0)
            v48 = *(unsigned __int8 *)(v10 + 39);
          else
            v48 = *(_QWORD *)(v10 + 24);
          if (v44 >= 0)
            v49 = (const void *)(v10 + 16);
          else
            v49 = *(const void **)(v10 + 16);
          if (v48 >= v46)
            v50 = v46;
          else
            v50 = v48;
          v51 = memcmp(v47, v49, v50);
          v52 = v46 < v48;
          if (v51)
            v52 = v51 < 0;
          if (!v52)
            goto LABEL_6;
        }
        else if (v13)
        {
          goto LABEL_6;
        }
        v64 = *(_OWORD *)v9;
        v8[2] = *(_QWORD *)(v10 + 72);
        *(_OWORD *)v8 = *(_OWORD *)(v10 + 56);
        *(_QWORD *)(v10 + 56) = 0;
        *(_QWORD *)(v10 + 64) = 0;
        *(_QWORD *)(v10 + 72) = 0;
        v16 = *((_QWORD *)&v64 + 1);
        if ((v66 & 0x80u) == 0)
          v17 = v66;
        else
          v17 = v65[1];
        if ((v66 & 0x80u) == 0)
          v18 = v8;
        else
          v18 = (_QWORD *)v65[0];
        v62 = v18;
        v63 = v17;
        v19 = *(char *)(v9 + 39);
        *(_OWORD *)v9 = *(_OWORD *)v10;
        v20 = (void **)(v9 + 16);
        if (v19 < 0)
          operator delete(*v20);
        v21 = v10 + 16;
        *(_OWORD *)v20 = *(_OWORD *)(v10 + 16);
        *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
        *(_BYTE *)(v10 + 39) = 0;
        *(_BYTE *)(v10 + 16) = 0;
        if (v10 == v5)
        {
          v10 = v5;
        }
        else
        {
          v22 = *(_QWORD *)(v10 - 40);
          v23 = (unint64_t)v64 >= v22;
          if ((_QWORD)v64 == v22
            && (v24 = *(_QWORD *)(v10 - 32), v23 = *((_QWORD *)&v64 + 1) >= v24, *((_QWORD *)&v64 + 1) == v24))
          {
            v53 = *(unsigned __int8 *)(v10 - 1);
            v54 = (char)v53;
            if ((v53 & 0x80u) != 0)
              v53 = *(_QWORD *)(v10 - 16);
            if (v54 >= 0)
              v55 = (const void *)(v10 - 24);
            else
              v55 = *(const void **)(v10 - 24);
            v59 = v53;
            if (v53 >= v63)
              v56 = v63;
            else
              v56 = v53;
            v57 = memcmp(v62, v55, v56);
            v58 = v63 < v59;
            if (v57)
              v58 = v57 < 0;
            if (v58)
            {
LABEL_22:
              v25 = v7;
              v61 = v9;
              while (1)
              {
                v26 = v5 + v25;
                v27 = *(_OWORD *)(v5 + v25 - 24);
                *(_OWORD *)v26 = *(_OWORD *)(v5 + v25 - 40);
                *(_OWORD *)(v26 + 16) = v27;
                *(_QWORD *)(v26 + 32) = *(_QWORD *)(v5 + v25 - 8);
                *(_BYTE *)(v26 - 1) = 0;
                *(_BYTE *)(v26 - 24) = 0;
                if (v25 == 40)
                  break;
                v28 = *(_QWORD *)(v26 - 80);
                v29 = (unint64_t)v64 >= v28;
                if ((_QWORD)v64 == v28
                  && (v30 = v5 + v25, v31 = *(_QWORD *)(v5 + v25 - 72), v29 = v16 >= v31, v16 == v31))
                {
                  v34 = *(const void **)(v30 - 64);
                  v32 = v30 - 64;
                  v33 = v34;
                  v35 = *(char *)(v32 + 23);
                  v36 = v16;
                  v37 = v8;
                  v38 = v4;
                  if (v35 >= 0)
                    v39 = *(unsigned __int8 *)(v32 + 23);
                  else
                    v39 = *(_QWORD *)(v32 + 8);
                  if (v35 >= 0)
                    v40 = (const void *)v32;
                  else
                    v40 = v33;
                  if (v39 >= v63)
                    v41 = v63;
                  else
                    v41 = v39;
                  v42 = memcmp(v62, v40, v41);
                  v13 = v63 >= v39;
                  v4 = v38;
                  v8 = v37;
                  v16 = v36;
                  v5 = a1;
                  v9 = v61;
                  v43 = !v13;
                  if (v42)
                    v43 = v42 < 0;
                  if (!v43)
                  {
LABEL_43:
                    v10 = v5 + v25 - 40;
                    v21 = v26 - 24;
                    goto LABEL_5;
                  }
                }
                else if (v29)
                {
                  goto LABEL_43;
                }
                v25 -= 40;
              }
              v10 = v5;
              v21 = v26 - 24;
            }
          }
          else if (!v23)
          {
            goto LABEL_22;
          }
        }
LABEL_5:
        *(_OWORD *)v10 = v64;
        v11 = *(_OWORD *)v8;
        *(_QWORD *)(v21 + 16) = v8[2];
        *(_OWORD *)v21 = v11;
LABEL_6:
        v6 = v9 + 40;
        v7 += 40;
      }
      while (v9 + 40 != v4);
    }
  }
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  __int128 *v16;
  int v17;
  void **v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  __int128 *i;
  __int128 v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  int v27;
  size_t v28;
  __int128 *v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  size_t v39;
  int v40;
  _BOOL4 v41;
  int v42;
  size_t v43;
  char *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (a1 != a2)
  {
    v52 = v2;
    v53 = v3;
    v4 = a2;
    v5 = a1;
    v6 = (__int128 *)((char *)a1 + 40);
    if ((__int128 *)((char *)a1 + 40) != a2)
    {
      v7 = a1 + 1;
      do
      {
        v9 = v5;
        v5 = v6;
        v11 = *((_QWORD *)v9 + 5);
        v12 = v11 >= *(_QWORD *)v9;
        if (v11 == *(_QWORD *)v9
          && (v13 = *((_QWORD *)v9 + 6), v14 = *((_QWORD *)v9 + 1), v12 = v13 >= v14, v13 == v14))
        {
          v33 = *((char *)v9 + 39);
          v34 = *((char *)v9 + 79);
          if (v34 >= 0)
            v35 = *((unsigned __int8 *)v9 + 79);
          else
            v35 = *((_QWORD *)v9 + 8);
          if (v34 >= 0)
            v36 = (char *)v9 + 56;
          else
            v36 = (const void *)*((_QWORD *)v9 + 7);
          if (v33 >= 0)
            v37 = *((unsigned __int8 *)v9 + 39);
          else
            v37 = *((_QWORD *)v9 + 3);
          if (v33 >= 0)
            v38 = v9 + 1;
          else
            v38 = (const void *)*((_QWORD *)v9 + 2);
          if (v37 >= v35)
            v39 = v35;
          else
            v39 = v37;
          v40 = memcmp(v36, v38, v39);
          v41 = v35 < v37;
          if (v40)
            v41 = v40 < 0;
          if (!v41)
            goto LABEL_6;
        }
        else if (v12)
        {
          goto LABEL_6;
        }
        v49 = *v5;
        v51 = *((_QWORD *)v9 + 9);
        v50 = *(__int128 *)((char *)v9 + 56);
        *((_QWORD *)v9 + 7) = 0;
        *((_QWORD *)v9 + 8) = 0;
        *((_QWORD *)v9 + 9) = 0;
        if (v51 >= 0)
          v15 = HIBYTE(v51);
        else
          v15 = *((_QWORD *)&v50 + 1);
        if (v51 >= 0)
          v16 = &v50;
        else
          v16 = (__int128 *)v50;
        v17 = *((char *)v5 + 39);
        *v5 = *v9;
        v18 = (void **)(v5 + 1);
        if (v17 < 0)
          operator delete(*v18);
        v8 = v9 + 1;
        *(_OWORD *)v18 = v9[1];
        *((_QWORD *)v5 + 4) = *((_QWORD *)v9 + 4);
        *((_BYTE *)v9 + 39) = 0;
        *((_BYTE *)v9 + 16) = 0;
        v19 = *((_QWORD *)v9 - 5);
        v20 = (unint64_t)v49 >= v19;
        if ((_QWORD)v49 == v19
          && (v21 = *((_QWORD *)v9 - 4), v20 = *((_QWORD *)&v49 + 1) >= v21, *((_QWORD *)&v49 + 1) == v21))
        {
          v42 = *((char *)v9 - 1);
          if (v42 >= 0)
            v43 = *((unsigned __int8 *)v9 - 1);
          else
            v43 = *((_QWORD *)v9 - 2);
          if (v42 >= 0)
            v44 = (char *)v9 - 24;
          else
            v44 = (char *)*((_QWORD *)v9 - 3);
          if (v43 >= v15)
            v45 = v15;
          else
            v45 = v43;
          v46 = memcmp(v16, v44, v45);
          v47 = v15 < v43;
          if (v46)
            v47 = v46 < 0;
          if (v47)
          {
LABEL_21:
            for (i = v7; ; i = (__int128 *)((char *)i - 40))
            {
              v23 = *(__int128 *)((char *)i - 40);
              *(i - 1) = *(__int128 *)((char *)i - 56);
              *i = v23;
              *((_QWORD *)i + 2) = *((_QWORD *)i - 3);
              *((_BYTE *)i - 17) = 0;
              *((_BYTE *)i - 40) = 0;
              v24 = *((_QWORD *)i - 12);
              v25 = (unint64_t)v49 >= v24;
              if ((_QWORD)v49 == v24
                && (v26 = *((_QWORD *)i - 11), v25 = *((_QWORD *)&v49 + 1) >= v26, *((_QWORD *)&v49 + 1) == v26))
              {
                v27 = *((char *)i - 57);
                if (v27 >= 0)
                  v28 = *((unsigned __int8 *)i - 57);
                else
                  v28 = *((_QWORD *)i - 9);
                if (v27 >= 0)
                  v29 = i - 5;
                else
                  v29 = (__int128 *)*((_QWORD *)i - 10);
                if (v28 >= v15)
                  v30 = v15;
                else
                  v30 = v28;
                v31 = memcmp(v16, v29, v30);
                v32 = v15 < v28;
                if (v31)
                  v32 = v31 < 0;
                if (!v32)
                {
LABEL_4:
                  v8 = (__int128 *)((char *)i - 40);
                  v9 = (__int128 *)((char *)i - 56);
                  break;
                }
              }
              else if (v25)
              {
                goto LABEL_4;
              }
            }
          }
        }
        else if (!v20)
        {
          goto LABEL_21;
        }
        *v9 = v49;
        v10 = v50;
        *((_QWORD *)v8 + 2) = v51;
        *v8 = v10;
        v4 = a2;
LABEL_6:
        v6 = (__int128 *)((char *)v5 + 40);
        v7 = (__int128 *)((char *)v7 + 40);
      }
      while ((__int128 *)((char *)v5 + 40) != v4);
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(__int128 *a1, uint64_t *a2, __int128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void *v27;
  size_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  size_t *v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  size_t v48;
  const void *v49;
  size_t v50;
  const void *v51;
  size_t v52;
  int v53;
  _BOOL4 v54;
  int v55;
  int v56;
  size_t v57;
  const void *v58;
  size_t v59;
  const void *v60;
  size_t v61;
  int v62;
  _BOOL4 v63;
  int v64;
  int v65;
  size_t v66;
  const void *v67;
  size_t v68;
  const void *v69;
  size_t v70;
  int v71;
  _BOOL4 v72;
  int v73;
  size_t v74;
  const void *v75;
  size_t v76;
  const void *v77;
  size_t v78;
  int v79;
  _BOOL4 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v6 = *a2;
  if (*a2 == *(_QWORD *)a1)
  {
    v11 = a2[1];
    v12 = *((_QWORD *)a1 + 1);
    if (v11 == v12)
    {
      v37 = *((char *)a1 + 39);
      v38 = *((char *)a2 + 39);
      if (v38 >= 0)
        v39 = *((unsigned __int8 *)a2 + 39);
      else
        v39 = a2[3];
      if (v38 >= 0)
        v40 = a2 + 2;
      else
        v40 = (const void *)a2[2];
      if (v37 >= 0)
        v41 = *((unsigned __int8 *)a1 + 39);
      else
        v41 = *((_QWORD *)a1 + 3);
      if (v37 >= 0)
        v42 = a1 + 1;
      else
        v42 = (const void *)*((_QWORD *)a1 + 2);
      if (v41 >= v39)
        v43 = v39;
      else
        v43 = v41;
      v44 = memcmp(v40, v42, v43);
      v45 = v39 < v41;
      if (v44)
        v45 = v44 < 0;
      if (!v45)
        goto LABEL_8;
    }
    else if (v11 >= v12)
    {
      goto LABEL_8;
    }
LABEL_3:
    if (*(_QWORD *)a3 == v6)
    {
      v25 = *((_QWORD *)a3 + 1);
      v26 = a2[1];
      if (v25 == v26)
      {
        v55 = *((char *)a2 + 39);
        v56 = *((char *)a3 + 39);
        if (v56 >= 0)
          v57 = *((unsigned __int8 *)a3 + 39);
        else
          v57 = *((_QWORD *)a3 + 3);
        if (v56 >= 0)
          v58 = a3 + 1;
        else
          v58 = (const void *)*((_QWORD *)a3 + 2);
        if (v55 >= 0)
          v59 = *((unsigned __int8 *)a2 + 39);
        else
          v59 = a2[3];
        if (v55 >= 0)
          v60 = a2 + 2;
        else
          v60 = (const void *)a2[2];
        if (v59 >= v57)
          v61 = v57;
        else
          v61 = v59;
        v62 = memcmp(v58, v60, v61);
        v63 = v57 < v59;
        if (v62)
          v63 = v62 < 0;
        if (v63)
          goto LABEL_5;
      }
      else if (v25 < v26)
      {
        goto LABEL_5;
      }
    }
    else if (*(_QWORD *)a3 < v6)
    {
LABEL_5:
      v81 = *a1;
      v7 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v86 = *((_QWORD *)a1 + 3);
      *(_QWORD *)((char *)&v86 + 7) = *(_QWORD *)((char *)a1 + 31);
      v8 = *((_BYTE *)a1 + 39);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *a1 = *a3;
      v9 = *((_QWORD *)a3 + 4);
      a1[1] = a3[1];
      *((_QWORD *)a1 + 4) = v9;
      *a3 = v81;
      *((_QWORD *)a3 + 2) = v7;
      *((_QWORD *)a3 + 3) = v86;
      *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v86 + 7);
      result = 1;
      *((_BYTE *)a3 + 39) = v8;
      return result;
    }
    v84 = *a1;
    v27 = (const void *)*((_QWORD *)a1 + 2);
    *(_QWORD *)&v89 = *((_QWORD *)a1 + 3);
    *(_QWORD *)((char *)&v89 + 7) = *(_QWORD *)((char *)a1 + 31);
    v28 = *((unsigned __int8 *)a1 + 39);
    v29 = v28;
    *((_QWORD *)a1 + 2) = 0;
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 4) = 0;
    *a1 = *(_OWORD *)a2;
    v30 = a2 + 2;
    v31 = a2[4];
    a1[1] = *((_OWORD *)a2 + 1);
    *((_QWORD *)a1 + 4) = v31;
    *(_OWORD *)a2 = v84;
    a2[2] = (uint64_t)v27;
    a2[3] = v89;
    v32 = (size_t *)(a2 + 3);
    *(uint64_t *)((char *)a2 + 31) = *(_QWORD *)((char *)&v89 + 7);
    *((_BYTE *)a2 + 39) = v28;
    v33 = *(_QWORD *)a3 >= (unint64_t)*a2;
    if (*(_QWORD *)a3 == *a2 && (v34 = *((_QWORD *)a3 + 1), v35 = a2[1], v33 = v34 >= v35, v34 == v35))
    {
      v73 = *((char *)a3 + 39);
      if (v73 >= 0)
        v74 = *((unsigned __int8 *)a3 + 39);
      else
        v74 = *((_QWORD *)a3 + 3);
      if (v73 >= 0)
        v75 = a3 + 1;
      else
        v75 = (const void *)*((_QWORD *)a3 + 2);
      if ((v28 & 0x80u) == 0)
        v76 = v28;
      else
        v76 = *v32;
      if ((v28 & 0x80u) == 0)
        v77 = a2 + 2;
      else
        v77 = v27;
      if (v76 >= v74)
        v78 = v74;
      else
        v78 = v76;
      v79 = memcmp(v75, v77, v78);
      v80 = v74 < v76;
      if (v79)
        v80 = v79 < 0;
      if (v80)
        goto LABEL_20;
    }
    else if (!v33)
    {
LABEL_20:
      v85 = *(_OWORD *)a2;
      *(_QWORD *)&v90 = *v32;
      *(_QWORD *)((char *)&v90 + 7) = *(uint64_t *)((char *)a2 + 31);
      a2[3] = 0;
      a2[4] = 0;
      *v30 = 0;
      *(_OWORD *)a2 = *a3;
      v36 = *((_QWORD *)a3 + 4);
      *(_OWORD *)v30 = a3[1];
      a2[4] = v36;
      *a3 = v85;
      *((_QWORD *)a3 + 2) = v27;
      *((_QWORD *)a3 + 3) = v90;
      *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v90 + 7);
      result = 2;
      *((_BYTE *)a3 + 39) = v29;
      return result;
    }
    return 1;
  }
  if ((unint64_t)*a2 < *(_QWORD *)a1)
    goto LABEL_3;
LABEL_8:
  v13 = *(_QWORD *)a3 >= v6;
  if (*(_QWORD *)a3 != v6 || (v14 = *((_QWORD *)a3 + 1), v15 = a2[1], v13 = v14 >= v15, v14 != v15))
  {
    if (!v13)
      goto LABEL_11;
    return 0;
  }
  v46 = *((char *)a2 + 39);
  v47 = *((char *)a3 + 39);
  if (v47 >= 0)
    v48 = *((unsigned __int8 *)a3 + 39);
  else
    v48 = *((_QWORD *)a3 + 3);
  if (v47 >= 0)
    v49 = a3 + 1;
  else
    v49 = (const void *)*((_QWORD *)a3 + 2);
  if (v46 >= 0)
    v50 = *((unsigned __int8 *)a2 + 39);
  else
    v50 = a2[3];
  if (v46 >= 0)
    v51 = a2 + 2;
  else
    v51 = (const void *)a2[2];
  if (v50 >= v48)
    v52 = v48;
  else
    v52 = v50;
  v53 = memcmp(v49, v51, v52);
  v54 = v48 < v50;
  if (v53)
    v54 = v53 < 0;
  if (!v54)
    return 0;
LABEL_11:
  v82 = *(_OWORD *)a2;
  v16 = a2[2];
  *(_QWORD *)&v87 = a2[3];
  *(_QWORD *)((char *)&v87 + 7) = *(uint64_t *)((char *)a2 + 31);
  v17 = *((_BYTE *)a2 + 39);
  a2[2] = 0;
  a2[4] = 0;
  a2[3] = 0;
  *(_OWORD *)a2 = *a3;
  v18 = *((_QWORD *)a3 + 4);
  *((_OWORD *)a2 + 1) = a3[1];
  a2[4] = v18;
  *a3 = v82;
  *((_QWORD *)a3 + 2) = v16;
  *((_QWORD *)a3 + 3) = v87;
  *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v87 + 7);
  *((_BYTE *)a3 + 39) = v17;
  v19 = (unint64_t)*a2 >= *(_QWORD *)a1;
  if (*a2 == *(_QWORD *)a1 && (v20 = a2[1], v21 = *((_QWORD *)a1 + 1), v19 = v20 >= v21, v20 == v21))
  {
    v64 = *((char *)a1 + 39);
    v65 = *((char *)a2 + 39);
    if (v65 >= 0)
      v66 = *((unsigned __int8 *)a2 + 39);
    else
      v66 = a2[3];
    if (v65 >= 0)
      v67 = a2 + 2;
    else
      v67 = (const void *)a2[2];
    if (v64 >= 0)
      v68 = *((unsigned __int8 *)a1 + 39);
    else
      v68 = *((_QWORD *)a1 + 3);
    if (v64 >= 0)
      v69 = a1 + 1;
    else
      v69 = (const void *)*((_QWORD *)a1 + 2);
    if (v68 >= v66)
      v70 = v66;
    else
      v70 = v68;
    v71 = memcmp(v67, v69, v70);
    v72 = v66 < v68;
    if (v71)
      v72 = v71 < 0;
    if (v72)
      goto LABEL_14;
  }
  else if (!v19)
  {
LABEL_14:
    v83 = *a1;
    v22 = *((_QWORD *)a1 + 2);
    *(_QWORD *)&v88 = *((_QWORD *)a1 + 3);
    *(_QWORD *)((char *)&v88 + 7) = *(_QWORD *)((char *)a1 + 31);
    v23 = *((_BYTE *)a1 + 39);
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 4) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *a1 = *(_OWORD *)a2;
    v24 = a2[4];
    a1[1] = *((_OWORD *)a2 + 1);
    *((_QWORD *)a1 + 4) = v24;
    *(_OWORD *)a2 = v83;
    a2[2] = v22;
    a2[3] = v88;
    *(uint64_t *)((char *)a2 + 31) = *(_QWORD *)((char *)&v88 + 7);
    result = 2;
    *((_BYTE *)a2 + 39) = v23;
    return result;
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,llvm::SMFixIt *,std::__less<void,void> &>(__int128 *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  __int128 *v8;
  unint64_t i;
  BOOL v10;
  unint64_t v11;
  int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  BOOL v17;
  int v18;
  size_t v19;
  __int128 *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  size_t v26;
  __int128 *v27;
  BOOL v28;
  unint64_t v29;
  int v30;
  size_t v31;
  const void *v32;
  size_t v33;
  int v34;
  BOOL v35;
  size_t v36;
  __int128 *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  int v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  size_t v51;
  __int128 *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  int v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int v60;
  BOOL v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  int v65;
  size_t v66;
  const void *v67;
  size_t v68;
  int v69;
  _BOOL4 v70;
  __int128 *v71;
  __int128 *v72;
  unint64_t v73;
  __int128 v74;
  int v75;
  __int128 v76;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  _QWORD v82[3];

  v2 = a2;
  v82[2] = *MEMORY[0x1E0C80C00];
  v78 = *a1;
  v79 = a1[1];
  v80 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v4 = *(_QWORD *)(a2 - 40);
  if ((_QWORD)v78 == v4)
  {
    v5 = *((_QWORD *)&v78 + 1);
    v6 = *(_QWORD *)(a2 - 32);
    if (*((_QWORD *)&v78 + 1) == v6)
    {
      v18 = *(char *)(a2 - 1);
      if (v80 >= 0)
        v19 = HIBYTE(v80);
      else
        v19 = *((_QWORD *)&v79 + 1);
      if (v80 >= 0)
        v20 = &v79;
      else
        v20 = (__int128 *)v79;
      if (v18 >= 0)
        v21 = *(unsigned __int8 *)(a2 - 1);
      else
        v21 = *(_QWORD *)(a2 - 16);
      if (v18 >= 0)
        v22 = (const void *)(a2 - 24);
      else
        v22 = *(const void **)(a2 - 24);
      if (v21 >= v19)
        v23 = v19;
      else
        v23 = v21;
      v24 = memcmp(v20, v22, v23);
      v25 = v19 < v21;
      if (v24)
        v25 = v24 < 0;
      if (v25)
        goto LABEL_6;
    }
    else if (*((_QWORD *)&v78 + 1) < v6)
    {
      goto LABEL_6;
    }
  }
  else if ((unint64_t)v78 < v4)
  {
    v5 = *((_QWORD *)&v78 + 1);
LABEL_6:
    if (v80 >= 0)
      v7 = HIBYTE(v80);
    else
      v7 = *((_QWORD *)&v79 + 1);
    if (v80 >= 0)
      v8 = &v79;
    else
      v8 = (__int128 *)v79;
    for (i = (unint64_t)a1 + 40; ; i += 40)
    {
      v10 = (unint64_t)v78 >= *(_QWORD *)i;
      if ((_QWORD)v78 == *(_QWORD *)i && (v11 = *(_QWORD *)(i + 8), v10 = v5 >= v11, v5 == v11))
      {
        v12 = *(char *)(i + 39);
        if (v12 >= 0)
          v13 = *(unsigned __int8 *)(i + 39);
        else
          v13 = *(_QWORD *)(i + 24);
        if (v12 >= 0)
          v14 = (const void *)(i + 16);
        else
          v14 = *(const void **)(i + 16);
        if (v13 >= v7)
          v15 = v7;
        else
          v15 = v13;
        v16 = memcmp(v8, v14, v15);
        v17 = v7 < v13;
        if (v16)
          v17 = v16 < 0;
        if (v17)
          goto LABEL_73;
      }
      else if (!v10)
      {
        goto LABEL_73;
      }
    }
  }
  i = (unint64_t)a1 + 40;
  if ((unint64_t)a1 + 40 < v2)
  {
    if (v80 >= 0)
      v26 = HIBYTE(v80);
    else
      v26 = *((_QWORD *)&v79 + 1);
    if (v80 >= 0)
      v27 = &v79;
    else
      v27 = (__int128 *)v79;
    do
    {
      v28 = (unint64_t)v78 >= *(_QWORD *)i;
      if ((_QWORD)v78 == *(_QWORD *)i
        && (v29 = *(_QWORD *)(i + 8), v28 = *((_QWORD *)&v78 + 1) >= v29, *((_QWORD *)&v78 + 1) == v29))
      {
        v30 = *(char *)(i + 39);
        if (v30 >= 0)
          v31 = *(unsigned __int8 *)(i + 39);
        else
          v31 = *(_QWORD *)(i + 24);
        if (v30 >= 0)
          v32 = (const void *)(i + 16);
        else
          v32 = *(const void **)(i + 16);
        if (v31 >= v26)
          v33 = v26;
        else
          v33 = v31;
        v34 = memcmp(v27, v32, v33);
        v35 = v26 < v31;
        if (v34)
          v35 = v34 < 0;
        if (v35)
          break;
      }
      else if (!v28)
      {
        break;
      }
      i += 40;
    }
    while (i < v2);
  }
LABEL_73:
  if (i < v2)
  {
    if (v80 >= 0)
      v36 = HIBYTE(v80);
    else
      v36 = *((_QWORD *)&v79 + 1);
    if (v80 >= 0)
      v37 = &v79;
    else
      v37 = (__int128 *)v79;
    for (v2 -= 40; ; v2 -= 40)
    {
      v39 = (unint64_t)v78 >= v4;
      if ((_QWORD)v78 == v4
        && (v40 = *(_QWORD *)(v2 + 8), v39 = *((_QWORD *)&v78 + 1) >= v40, *((_QWORD *)&v78 + 1) == v40))
      {
        v41 = *(char *)(v2 + 39);
        if (v41 >= 0)
          v42 = *(unsigned __int8 *)(v2 + 39);
        else
          v42 = *(_QWORD *)(v2 + 24);
        if (v41 >= 0)
          v43 = (const void *)(v2 + 16);
        else
          v43 = *(const void **)(v2 + 16);
        if (v42 >= v36)
          v44 = v36;
        else
          v44 = v42;
        v45 = memcmp(v37, v43, v44);
        v46 = v36 < v42;
        if (v45)
          v46 = v45 < 0;
        if (!v46)
          break;
      }
      else if (v39)
      {
        break;
      }
      v38 = *(_QWORD *)(v2 - 40);
      v4 = v38;
    }
  }
LABEL_140:
  while (i < v2)
  {
    v81 = *(_OWORD *)i;
    v47 = *(_QWORD *)(i + 16);
    v82[0] = *(_QWORD *)(i + 24);
    *(_QWORD *)((char *)v82 + 7) = *(_QWORD *)(i + 31);
    v48 = *(_BYTE *)(i + 39);
    *(_QWORD *)(i + 24) = 0;
    *(_QWORD *)(i + 32) = 0;
    *(_QWORD *)(i + 16) = 0;
    *(_OWORD *)i = *(_OWORD *)v2;
    v49 = *(_OWORD *)(v2 + 16);
    *(_QWORD *)(i + 32) = *(_QWORD *)(v2 + 32);
    *(_OWORD *)(i + 16) = v49;
    *(_OWORD *)v2 = v81;
    *(_QWORD *)(v2 + 31) = *(_QWORD *)((char *)v82 + 7);
    v50 = v82[0];
    *(_QWORD *)(v2 + 16) = v47;
    *(_QWORD *)(v2 + 24) = v50;
    *(_BYTE *)(v2 + 39) = v48;
    if (v80 >= 0)
      v51 = HIBYTE(v80);
    else
      v51 = *((_QWORD *)&v79 + 1);
    if (v80 >= 0)
      v52 = &v79;
    else
      v52 = (__int128 *)v79;
    do
    {
      while (1)
      {
        while (1)
        {
          v53 = *(_QWORD *)(i + 40);
          i += 40;
          v54 = (unint64_t)v78 >= v53;
          if ((_QWORD)v78 == v53)
            break;
          if (!v54)
            goto LABEL_124;
        }
        v55 = *(_QWORD *)(i + 8);
        if (*((_QWORD *)&v78 + 1) == v55)
          break;
        if (*((_QWORD *)&v78 + 1) < v55)
          goto LABEL_124;
      }
      v56 = *(char *)(i + 39);
      if (v56 >= 0)
        v57 = *(unsigned __int8 *)(i + 39);
      else
        v57 = *(_QWORD *)(i + 24);
      if (v56 >= 0)
        v58 = (const void *)(i + 16);
      else
        v58 = *(const void **)(i + 16);
      if (v57 >= v51)
        v59 = v51;
      else
        v59 = v57;
      v60 = memcmp(v52, v58, v59);
      v61 = v51 < v57;
      if (v60)
        v61 = v60 < 0;
    }
    while (!v61);
    do
    {
      while (1)
      {
LABEL_124:
        while (1)
        {
          v62 = *(_QWORD *)(v2 - 40);
          v2 -= 40;
          v63 = (unint64_t)v78 >= v62;
          if ((_QWORD)v78 == v62)
            break;
          if (v63)
            goto LABEL_140;
        }
        v64 = *(_QWORD *)(v2 + 8);
        if (*((_QWORD *)&v78 + 1) == v64)
          break;
        if (*((_QWORD *)&v78 + 1) >= v64)
          goto LABEL_140;
      }
      v65 = *(char *)(v2 + 39);
      if (v65 >= 0)
        v66 = *(unsigned __int8 *)(v2 + 39);
      else
        v66 = *(_QWORD *)(v2 + 24);
      if (v65 >= 0)
        v67 = (const void *)(v2 + 16);
      else
        v67 = *(const void **)(v2 + 16);
      if (v66 >= v51)
        v68 = v51;
      else
        v68 = v66;
      v69 = memcmp(v52, v67, v68);
      v70 = v51 < v66;
      if (v69)
        v70 = v69 < 0;
    }
    while (v70);
  }
  v71 = (__int128 *)(i - 40);
  if ((__int128 *)(i - 40) == a1)
  {
    v75 = *(char *)(i - 1);
    *v71 = v78;
    v73 = i - 24;
    if (v75 < 0)
      operator delete(*(void **)v73);
  }
  else
  {
    v72 = a1 + 1;
    *a1 = *v71;
    if (*((char *)a1 + 39) < 0)
      operator delete(*(void **)v72);
    v73 = i - 24;
    v74 = *(_OWORD *)(i - 24);
    *((_QWORD *)v72 + 2) = *(_QWORD *)(i - 8);
    *v72 = v74;
    *(_BYTE *)(i - 1) = 0;
    *(_BYTE *)(i - 24) = 0;
    *v71 = v78;
  }
  v76 = v79;
  *(_QWORD *)(v73 + 16) = v80;
  *(_OWORD *)v73 = v76;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,llvm::SMFixIt *,std::__less<void,void> &>(__int128 *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  __int128 *v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  size_t v13;
  char *v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  BOOL v27;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  int v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  _BOOL4 v37;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  size_t v45;
  __int128 *v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  int v50;
  size_t v51;
  const void *v52;
  size_t v53;
  int v54;
  _BOOL4 v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  int v59;
  size_t v60;
  const void *v61;
  size_t v62;
  int v63;
  BOOL v64;
  __int128 *v65;
  unint64_t v66;
  __int128 v67;
  int v68;
  __int128 v69;
  __int128 *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  _QWORD v76[3];

  v4 = 0;
  v76[2] = *MEMORY[0x1E0C80C00];
  v71 = a1 + 1;
  v74 = *((_QWORD *)a1 + 4);
  v5 = v74;
  v72 = *a1;
  v73 = a1[1];
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  v6 = HIBYTE(v5);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  else
    v7 = *((_QWORD *)&v73 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = &v73;
  else
    v8 = (__int128 *)v73;
  while (1)
  {
    v9 = *(_QWORD *)((char *)a1 + v4 + 40);
    v10 = v9 >= (unint64_t)v72;
    if (v9 == (_QWORD)v72)
    {
      v11 = *(_QWORD *)((char *)a1 + v4 + 48);
      v10 = v11 >= *((_QWORD *)&v72 + 1);
      if (v11 == *((_QWORD *)&v72 + 1))
        break;
    }
    if (v10)
      goto LABEL_23;
LABEL_8:
    v4 += 40;
  }
  v12 = *((char *)a1 + v4 + 79);
  if (v12 >= 0)
    v13 = *((unsigned __int8 *)a1 + v4 + 79);
  else
    v13 = *(_QWORD *)((char *)a1 + v4 + 64);
  if (v12 >= 0)
    v14 = (char *)a1 + v4 + 56;
  else
    v14 = *(char **)((char *)a1 + v4 + 56);
  if (v7 >= v13)
    v15 = v13;
  else
    v15 = v7;
  v16 = memcmp(v14, v8, v15);
  v17 = v13 < v7;
  if (v16)
    v17 = v16 < 0;
  if (v17)
    goto LABEL_8;
LABEL_23:
  v18 = (unint64_t)a1 + v4 + 40;
  if (v4)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          v19 = *(_QWORD *)(a2 - 40);
          a2 -= 40;
          v20 = v19 >= (unint64_t)v72;
          if (v19 == (_QWORD)v72)
            break;
          if (!v20)
            goto LABEL_67;
        }
        v21 = *(_QWORD *)(a2 + 8);
        if (v21 == *((_QWORD *)&v72 + 1))
          break;
        if (v21 < *((_QWORD *)&v72 + 1))
          goto LABEL_67;
      }
      v22 = *(char *)(a2 + 39);
      if (v22 >= 0)
        v23 = *(unsigned __int8 *)(a2 + 39);
      else
        v23 = *(_QWORD *)(a2 + 24);
      if (v22 >= 0)
        v24 = (const void *)(a2 + 16);
      else
        v24 = *(const void **)(a2 + 16);
      if (v7 >= v23)
        v25 = v23;
      else
        v25 = v7;
      v26 = memcmp(v24, v8, v25);
      v27 = v23 < v7;
      if (v26)
        v27 = v26 < 0;
    }
    while (!v27);
  }
  else if (v18 < a2)
  {
    do
    {
      while (1)
      {
        v29 = *(_QWORD *)(a2 - 40);
        a2 -= 40;
        v30 = v29 >= (unint64_t)v72;
        if (v29 == (_QWORD)v72)
        {
          v31 = *(_QWORD *)(a2 + 8);
          v30 = v31 >= *((_QWORD *)&v72 + 1);
          if (v31 == *((_QWORD *)&v72 + 1))
            break;
        }
        if (!v30 || v18 >= a2)
          goto LABEL_67;
      }
      v32 = *(char *)(a2 + 39);
      if (v32 >= 0)
        v33 = *(unsigned __int8 *)(a2 + 39);
      else
        v33 = *(_QWORD *)(a2 + 24);
      if (v32 >= 0)
        v34 = (const void *)(a2 + 16);
      else
        v34 = *(const void **)(a2 + 16);
      if (v7 >= v33)
        v35 = v33;
      else
        v35 = v7;
      v36 = memcmp(v34, v8, v35);
      v37 = v33 >= v7;
      if (v36)
        v37 = v36 >= 0;
    }
    while (v37 && v18 < a2);
  }
LABEL_67:
  v39 = v18;
  if (v18 < a2)
  {
    v40 = a2;
    do
    {
      v75 = *(_OWORD *)v39;
      v41 = *(_QWORD *)(v39 + 16);
      v76[0] = *(_QWORD *)(v39 + 24);
      *(_QWORD *)((char *)v76 + 7) = *(_QWORD *)(v39 + 31);
      v42 = *(_BYTE *)(v39 + 39);
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 16) = 0;
      *(_OWORD *)v39 = *(_OWORD *)v40;
      v43 = *(_OWORD *)(v40 + 16);
      *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
      *(_OWORD *)(v39 + 16) = v43;
      *(_OWORD *)v40 = v75;
      *(_QWORD *)(v40 + 31) = *(_QWORD *)((char *)v76 + 7);
      v44 = v76[0];
      *(_QWORD *)(v40 + 16) = v41;
      *(_QWORD *)(v40 + 24) = v44;
      *(_BYTE *)(v40 + 39) = v42;
      if (v74 >= 0)
        v45 = HIBYTE(v74);
      else
        v45 = *((_QWORD *)&v73 + 1);
      if (v74 >= 0)
        v46 = &v73;
      else
        v46 = (__int128 *)v73;
      do
      {
        while (1)
        {
          while (1)
          {
            v47 = *(_QWORD *)(v39 + 40);
            v39 += 40;
            v48 = v47 >= (unint64_t)v72;
            if (v47 == (_QWORD)v72)
              break;
            if (v48)
              goto LABEL_96;
          }
          v49 = *(_QWORD *)(v39 + 8);
          if (v49 == *((_QWORD *)&v72 + 1))
            break;
          if (v49 >= *((_QWORD *)&v72 + 1))
            goto LABEL_96;
        }
        v50 = *(char *)(v39 + 39);
        if (v50 >= 0)
          v51 = *(unsigned __int8 *)(v39 + 39);
        else
          v51 = *(_QWORD *)(v39 + 24);
        if (v50 >= 0)
          v52 = (const void *)(v39 + 16);
        else
          v52 = *(const void **)(v39 + 16);
        if (v45 >= v51)
          v53 = v51;
        else
          v53 = v45;
        v54 = memcmp(v52, v46, v53);
        v55 = v51 < v45;
        if (v54)
          v55 = v54 < 0;
      }
      while (v55);
      do
      {
        while (1)
        {
LABEL_96:
          while (1)
          {
            v56 = *(_QWORD *)(v40 - 40);
            v40 -= 40;
            v57 = v56 >= (unint64_t)v72;
            if (v56 == (_QWORD)v72)
              break;
            if (!v57)
              goto LABEL_69;
          }
          v58 = *(_QWORD *)(v40 + 8);
          if (v58 == *((_QWORD *)&v72 + 1))
            break;
          if (v58 < *((_QWORD *)&v72 + 1))
            goto LABEL_69;
        }
        v59 = *(char *)(v40 + 39);
        if (v59 >= 0)
          v60 = *(unsigned __int8 *)(v40 + 39);
        else
          v60 = *(_QWORD *)(v40 + 24);
        if (v59 >= 0)
          v61 = (const void *)(v40 + 16);
        else
          v61 = *(const void **)(v40 + 16);
        if (v45 >= v60)
          v62 = v60;
        else
          v62 = v45;
        v63 = memcmp(v61, v46, v62);
        v64 = v60 < v45;
        if (v63)
          v64 = v63 < 0;
      }
      while (!v64);
LABEL_69:
      ;
    }
    while (v39 < v40);
  }
  v65 = (__int128 *)(v39 - 40);
  if ((__int128 *)(v39 - 40) == a1)
  {
    v68 = *(char *)(v39 - 1);
    *v65 = v72;
    v66 = v39 - 24;
    if (v68 < 0)
      operator delete(*(void **)v66);
  }
  else
  {
    *a1 = *v65;
    if (*((char *)a1 + 39) < 0)
      operator delete(*(void **)v71);
    v66 = v39 - 24;
    v67 = *(_OWORD *)(v39 - 24);
    *((_QWORD *)v71 + 2) = *(_QWORD *)(v39 - 8);
    *v71 = v67;
    *(_BYTE *)(v39 - 1) = 0;
    *(_BYTE *)(v39 - 24) = 0;
    *v65 = v72;
  }
  v69 = v73;
  *(_QWORD *)(v66 + 16) = v74;
  *(_OWORD *)v66 = v69;
  return v39 - 40;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  _OWORD *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  __int128 *v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  _BOOL4 v37;
  int v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  int v47;
  int v48;
  size_t v49;
  const void *v50;
  size_t v51;
  const void *v52;
  size_t v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];

  v2 = a2;
  v63[2] = *MEMORY[0x1E0C80C00];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (_OWORD *)(a2 - 40);
      v6 = *(_QWORD *)(a2 - 40);
      v8 = v6 >= *(_QWORD *)a1;
      if (v6 == *(_QWORD *)a1 && (v9 = *(_QWORD *)(a2 - 32), v10 = *(_QWORD *)(a1 + 8), v8 = v9 >= v10, v9 == v10))
      {
        v47 = *(char *)(a1 + 39);
        v48 = *(char *)(a2 - 1);
        if (v48 >= 0)
          v49 = *(unsigned __int8 *)(a2 - 1);
        else
          v49 = *(_QWORD *)(a2 - 16);
        if (v48 >= 0)
          v50 = (const void *)(a2 - 24);
        else
          v50 = *(const void **)(a2 - 24);
        if (v47 >= 0)
          v51 = *(unsigned __int8 *)(a1 + 39);
        else
          v51 = *(_QWORD *)(a1 + 24);
        if (v47 >= 0)
          v52 = (const void *)(a1 + 16);
        else
          v52 = *(const void **)(a1 + 16);
        if (v51 >= v49)
          v53 = v49;
        else
          v53 = v51;
        v54 = memcmp(v50, v52, v53);
        v55 = v49 < v51;
        if (v54)
          v55 = v54 < 0;
        if (!v55)
          return 1;
      }
      else if (v8)
      {
        return result;
      }
      v59 = *(_OWORD *)a1;
      v11 = *(_QWORD *)(a1 + 16);
      v63[0] = *(_QWORD *)(a1 + 24);
      *(_QWORD *)((char *)v63 + 7) = *(_QWORD *)(a1 + 31);
      v12 = *(_BYTE *)(a1 + 39);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *v7;
      v13 = *(_QWORD *)(v2 - 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 - 24);
      *(_QWORD *)(a1 + 32) = v13;
      *v7 = v59;
      v14 = v63[0];
      *(_QWORD *)(v2 - 24) = v11;
      *(_QWORD *)(v2 - 16) = v14;
      *(_QWORD *)(v2 - 9) = *(_QWORD *)((char *)v63 + 7);
      result = 1;
      *(_BYTE *)(v2 - 1) = v12;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)a1, (uint64_t *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), (__int128 *)(a2 - 40));
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v15 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)a1, (uint64_t *)(a1 + 40), (__int128 *)(a1 + 80));
      v16 = a1 + 120;
      if (a1 + 120 == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v56 = v2;
      break;
  }
  while (1)
  {
    v20 = *(_QWORD *)v16 >= *(_QWORD *)v15;
    if (*(_QWORD *)v16 == *(_QWORD *)v15)
    {
      v21 = *(_QWORD *)(v16 + 8);
      v22 = *(_QWORD *)(v15 + 8);
      v20 = v21 >= v22;
      if (v21 == v22)
        break;
    }
    if (!v20)
      goto LABEL_14;
LABEL_10:
    v15 = v16;
    v17 += 40;
    v16 += 40;
    if (v16 == v2)
      return 1;
  }
  v38 = *(char *)(v15 + 39);
  v39 = *(char *)(v16 + 39);
  if (v39 >= 0)
    v40 = *(unsigned __int8 *)(v16 + 39);
  else
    v40 = *(_QWORD *)(v16 + 24);
  if (v39 >= 0)
    v41 = (const void *)(v16 + 16);
  else
    v41 = *(const void **)(v16 + 16);
  if (v38 >= 0)
    v42 = *(unsigned __int8 *)(v15 + 39);
  else
    v42 = *(_QWORD *)(v15 + 24);
  if (v38 >= 0)
    v43 = (const void *)(v15 + 16);
  else
    v43 = *(const void **)(v15 + 16);
  if (v42 >= v40)
    v44 = v40;
  else
    v44 = v42;
  v45 = memcmp(v41, v43, v44);
  v46 = v40 < v42;
  if (v45)
    v46 = v45 < 0;
  if (!v46)
    goto LABEL_10;
LABEL_14:
  v23 = *(_OWORD *)(v16 + 16);
  v60 = *(_OWORD *)v16;
  v62 = *(_QWORD *)(v16 + 32);
  v61 = v23;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_OWORD *)v16 = *(_OWORD *)v15;
  v24 = v15 + 16;
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v15 + 32);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(v15 + 16);
  *(_BYTE *)(v15 + 39) = 0;
  *(_BYTE *)(v15 + 16) = 0;
  if (v15 == a1)
  {
    v15 = a1;
  }
  else
  {
    v58 = v18;
    v57 = v17;
    do
    {
      v26 = *(_QWORD *)(a1 + v17 + 40);
      v27 = (unint64_t)v60 >= v26;
      if ((_QWORD)v60 == v26
        && (v28 = *(_QWORD *)(a1 + v17 + 48), v27 = *((_QWORD *)&v60 + 1) >= v28, *((_QWORD *)&v60 + 1) == v28))
      {
        v29 = a1 + v17;
        v30 = *(char *)(a1 + v17 + 79);
        if (v62 >= 0)
          v31 = HIBYTE(v62);
        else
          v31 = *((_QWORD *)&v61 + 1);
        if (v62 >= 0)
          v32 = &v61;
        else
          v32 = (__int128 *)v61;
        if (v30 >= 0)
          v33 = *(unsigned __int8 *)(a1 + v17 + 79);
        else
          v33 = *(_QWORD *)(a1 + v17 + 64);
        if (v30 >= 0)
          v34 = (const void *)(a1 + v17 + 56);
        else
          v34 = *(const void **)(a1 + v17 + 56);
        if (v33 >= v31)
          v35 = v31;
        else
          v35 = v33;
        v36 = memcmp(v32, v34, v35);
        v37 = v31 < v33;
        if (v36)
          v37 = v36 < 0;
        if (!v37)
        {
          v24 = v29 + 96;
          v15 = v29 + 80;
          goto LABEL_40;
        }
      }
      else if (v27)
      {
        goto LABEL_40;
      }
      v24 = v15 - 24;
      v15 -= 40;
      *(_OWORD *)(a1 + v17 + 80) = *(_OWORD *)(a1 + v17 + 40);
      v25 = a1 + v17;
      *(_OWORD *)(v25 + 96) = *(_OWORD *)(a1 + v17 + 56);
      *(_QWORD *)(v25 + 112) = *(_QWORD *)(a1 + v17 + 72);
      *(_BYTE *)(v25 + 79) = 0;
      *(_BYTE *)(v25 + 56) = 0;
      v17 -= 40;
    }
    while (v17 != -80);
    v24 = a1 + 16;
    v15 = a1;
LABEL_40:
    v2 = v56;
    v17 = v57;
    v18 = v58;
  }
  *(_OWORD *)v15 = v60;
  v19 = v61;
  *(_QWORD *)(v24 + 16) = v62;
  *(_OWORD *)v24 = v19;
  if (++v18 != 8)
    goto LABEL_10;
  return v16 + 40 == v2;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t result;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  const void *v32;
  size_t v33;
  _BOOL4 v34;
  int v35;
  int v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  _BOOL4 v42;
  int v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  const void *v48;
  size_t v49;
  _BOOL4 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)a1, (uint64_t *)a2, a3);
  v9 = *(_QWORD *)a4 >= *(_QWORD *)a3;
  if (*(_QWORD *)a4 == *(_QWORD *)a3
    && (v10 = *((_QWORD *)a4 + 1), v11 = *((_QWORD *)a3 + 1), v9 = v10 >= v11, v10 == v11))
  {
    v27 = *((char *)a3 + 39);
    v28 = *((char *)a4 + 39);
    if (v28 >= 0)
      v29 = *((unsigned __int8 *)a4 + 39);
    else
      v29 = *((_QWORD *)a4 + 3);
    if (v28 >= 0)
      v30 = a4 + 1;
    else
      v30 = (const void *)*((_QWORD *)a4 + 2);
    if (v27 >= 0)
      v31 = *((unsigned __int8 *)a3 + 39);
    else
      v31 = *((_QWORD *)a3 + 3);
    if (v27 >= 0)
      v32 = a3 + 1;
    else
      v32 = (const void *)*((_QWORD *)a3 + 2);
    if (v31 >= v29)
      v33 = v29;
    else
      v33 = v31;
    result = memcmp(v30, v32, v33);
    v34 = v29 < v31;
    if ((_DWORD)result)
      v34 = (int)result < 0;
    if (!v34)
      return result;
  }
  else if (v9)
  {
    return result;
  }
  v51 = *a3;
  v12 = *((_QWORD *)a3 + 2);
  *(_QWORD *)&v54 = *((_QWORD *)a3 + 3);
  *(_QWORD *)((char *)&v54 + 7) = *(_QWORD *)((char *)a3 + 31);
  v13 = *((_BYTE *)a3 + 39);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *a3 = *a4;
  v14 = *((_QWORD *)a4 + 4);
  a3[1] = a4[1];
  *((_QWORD *)a3 + 4) = v14;
  *a4 = v51;
  *((_QWORD *)a4 + 2) = v12;
  *((_QWORD *)a4 + 3) = v54;
  *(_QWORD *)((char *)a4 + 31) = *(_QWORD *)((char *)&v54 + 7);
  *((_BYTE *)a4 + 39) = v13;
  v15 = *(_QWORD *)a3 >= *(_QWORD *)a2;
  if (*(_QWORD *)a3 == *(_QWORD *)a2
    && (v16 = *((_QWORD *)a3 + 1), v17 = *((_QWORD *)a2 + 1), v15 = v16 >= v17, v16 == v17))
  {
    v35 = *((char *)a2 + 39);
    v36 = *((char *)a3 + 39);
    if (v36 >= 0)
      v37 = *((unsigned __int8 *)a3 + 39);
    else
      v37 = *((_QWORD *)a3 + 3);
    if (v36 >= 0)
      v38 = a3 + 1;
    else
      v38 = (const void *)*((_QWORD *)a3 + 2);
    if (v35 >= 0)
      v39 = *((unsigned __int8 *)a2 + 39);
    else
      v39 = *((_QWORD *)a2 + 3);
    if (v35 >= 0)
      v40 = a2 + 1;
    else
      v40 = (const void *)*((_QWORD *)a2 + 2);
    if (v39 >= v37)
      v41 = v37;
    else
      v41 = v39;
    result = memcmp(v38, v40, v41);
    v42 = v37 < v39;
    if ((_DWORD)result)
      v42 = (int)result < 0;
    if (!v42)
      return result;
  }
  else if (v15)
  {
    return result;
  }
  v52 = *a2;
  v18 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v55 = *((_QWORD *)a2 + 3);
  *(_QWORD *)((char *)&v55 + 7) = *(_QWORD *)((char *)a2 + 31);
  v19 = *((_BYTE *)a2 + 39);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *a2 = *a3;
  v20 = *((_QWORD *)a3 + 4);
  a2[1] = a3[1];
  *((_QWORD *)a2 + 4) = v20;
  *a3 = v52;
  *((_QWORD *)a3 + 2) = v18;
  *((_QWORD *)a3 + 3) = v55;
  *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v55 + 7);
  *((_BYTE *)a3 + 39) = v19;
  v21 = *(_QWORD *)a2 >= *(_QWORD *)a1;
  if (*(_QWORD *)a2 != *(_QWORD *)a1
    || (v22 = *((_QWORD *)a2 + 1), v23 = *(_QWORD *)(a1 + 8), v21 = v22 >= v23, v22 != v23))
  {
    if (v21)
      return result;
    goto LABEL_10;
  }
  v43 = *(char *)(a1 + 39);
  v44 = *((char *)a2 + 39);
  if (v44 >= 0)
    v45 = *((unsigned __int8 *)a2 + 39);
  else
    v45 = *((_QWORD *)a2 + 3);
  if (v44 >= 0)
    v46 = a2 + 1;
  else
    v46 = (const void *)*((_QWORD *)a2 + 2);
  if (v43 >= 0)
    v47 = *(unsigned __int8 *)(a1 + 39);
  else
    v47 = *(_QWORD *)(a1 + 24);
  if (v43 >= 0)
    v48 = (const void *)(a1 + 16);
  else
    v48 = *(const void **)(a1 + 16);
  if (v47 >= v45)
    v49 = v45;
  else
    v49 = v47;
  result = memcmp(v46, v48, v49);
  v50 = v45 < v47;
  if ((_DWORD)result)
    v50 = (int)result < 0;
  if (v50)
  {
LABEL_10:
    v53 = *(_OWORD *)a1;
    v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v56 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)((char *)&v56 + 7) = *(_QWORD *)(a1 + 31);
    v25 = *(_BYTE *)(a1 + 39);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *a2;
    v26 = *((_QWORD *)a2 + 4);
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_QWORD *)(a1 + 32) = v26;
    *a2 = v53;
    *((_QWORD *)a2 + 2) = v24;
    *((_QWORD *)a2 + 3) = v56;
    *(_QWORD *)((char *)a2 + 31) = *(_QWORD *)((char *)&v56 + 7);
    *((_BYTE *)a2 + 39) = v25;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  _BOOL4 v42;
  int v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  const void *v48;
  size_t v49;
  _BOOL4 v50;
  int v51;
  int v52;
  size_t v53;
  const void *v54;
  size_t v55;
  const void *v56;
  size_t v57;
  _BOOL4 v58;
  int v59;
  int v60;
  size_t v61;
  const void *v62;
  size_t v63;
  const void *v64;
  size_t v65;
  _BOOL4 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, (__int128 *)a2, (__int128 *)a3, (__int128 *)a4);
  v11 = *(_QWORD *)a5 >= *(_QWORD *)a4;
  if (*(_QWORD *)a5 == *(_QWORD *)a4
    && (v12 = *(_QWORD *)(a5 + 8), v13 = *(_QWORD *)(a4 + 8), v11 = v12 >= v13, v12 == v13))
  {
    v35 = *(char *)(a4 + 39);
    v36 = *(char *)(a5 + 39);
    if (v36 >= 0)
      v37 = *(unsigned __int8 *)(a5 + 39);
    else
      v37 = *(_QWORD *)(a5 + 24);
    if (v36 >= 0)
      v38 = (const void *)(a5 + 16);
    else
      v38 = *(const void **)(a5 + 16);
    if (v35 >= 0)
      v39 = *(unsigned __int8 *)(a4 + 39);
    else
      v39 = *(_QWORD *)(a4 + 24);
    if (v35 >= 0)
      v40 = (const void *)(a4 + 16);
    else
      v40 = *(const void **)(a4 + 16);
    if (v39 >= v37)
      v41 = v37;
    else
      v41 = v39;
    result = memcmp(v38, v40, v41);
    v42 = v37 < v39;
    if ((_DWORD)result)
      v42 = (int)result < 0;
    if (!v42)
      return result;
  }
  else if (v11)
  {
    return result;
  }
  v67 = *(_OWORD *)a4;
  v14 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)&v71 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)((char *)&v71 + 7) = *(_QWORD *)(a4 + 31);
  v15 = *(_BYTE *)(a4 + 39);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  v16 = *(_QWORD *)(a5 + 32);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
  *(_QWORD *)(a4 + 32) = v16;
  *(_OWORD *)a5 = v67;
  *(_QWORD *)(a5 + 16) = v14;
  *(_QWORD *)(a5 + 24) = v71;
  *(_QWORD *)(a5 + 31) = *(_QWORD *)((char *)&v71 + 7);
  *(_BYTE *)(a5 + 39) = v15;
  v17 = *(_QWORD *)a4 >= *(_QWORD *)a3;
  if (*(_QWORD *)a4 == *(_QWORD *)a3
    && (v18 = *(_QWORD *)(a4 + 8), v19 = *(_QWORD *)(a3 + 8), v17 = v18 >= v19, v18 == v19))
  {
    v43 = *(char *)(a3 + 39);
    v44 = *(char *)(a4 + 39);
    if (v44 >= 0)
      v45 = *(unsigned __int8 *)(a4 + 39);
    else
      v45 = *(_QWORD *)(a4 + 24);
    if (v44 >= 0)
      v46 = (const void *)(a4 + 16);
    else
      v46 = *(const void **)(a4 + 16);
    if (v43 >= 0)
      v47 = *(unsigned __int8 *)(a3 + 39);
    else
      v47 = *(_QWORD *)(a3 + 24);
    if (v43 >= 0)
      v48 = (const void *)(a3 + 16);
    else
      v48 = *(const void **)(a3 + 16);
    if (v47 >= v45)
      v49 = v45;
    else
      v49 = v47;
    result = memcmp(v46, v48, v49);
    v50 = v45 < v47;
    if ((_DWORD)result)
      v50 = (int)result < 0;
    if (!v50)
      return result;
  }
  else if (v17)
  {
    return result;
  }
  v68 = *(_OWORD *)a3;
  v20 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)&v72 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)((char *)&v72 + 7) = *(_QWORD *)(a3 + 31);
  v21 = *(_BYTE *)(a3 + 39);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  v22 = *(_QWORD *)(a4 + 32);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(a3 + 32) = v22;
  *(_OWORD *)a4 = v68;
  *(_QWORD *)(a4 + 16) = v20;
  *(_QWORD *)(a4 + 24) = v72;
  *(_QWORD *)(a4 + 31) = *(_QWORD *)((char *)&v72 + 7);
  *(_BYTE *)(a4 + 39) = v21;
  v23 = *(_QWORD *)a3 >= *(_QWORD *)a2;
  if (*(_QWORD *)a3 == *(_QWORD *)a2
    && (v24 = *(_QWORD *)(a3 + 8), v25 = *(_QWORD *)(a2 + 8), v23 = v24 >= v25, v24 == v25))
  {
    v51 = *(char *)(a2 + 39);
    v52 = *(char *)(a3 + 39);
    if (v52 >= 0)
      v53 = *(unsigned __int8 *)(a3 + 39);
    else
      v53 = *(_QWORD *)(a3 + 24);
    if (v52 >= 0)
      v54 = (const void *)(a3 + 16);
    else
      v54 = *(const void **)(a3 + 16);
    if (v51 >= 0)
      v55 = *(unsigned __int8 *)(a2 + 39);
    else
      v55 = *(_QWORD *)(a2 + 24);
    if (v51 >= 0)
      v56 = (const void *)(a2 + 16);
    else
      v56 = *(const void **)(a2 + 16);
    if (v55 >= v53)
      v57 = v53;
    else
      v57 = v55;
    result = memcmp(v54, v56, v57);
    v58 = v53 < v55;
    if ((_DWORD)result)
      v58 = (int)result < 0;
    if (!v58)
      return result;
  }
  else if (v23)
  {
    return result;
  }
  v69 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v73 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)((char *)&v73 + 7) = *(_QWORD *)(a2 + 31);
  v27 = *(_BYTE *)(a2 + 39);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  v28 = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = v28;
  *(_OWORD *)a3 = v69;
  *(_QWORD *)(a3 + 16) = v26;
  *(_QWORD *)(a3 + 24) = v73;
  *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)&v73 + 7);
  *(_BYTE *)(a3 + 39) = v27;
  v29 = *(_QWORD *)a2 >= *(_QWORD *)a1;
  if (*(_QWORD *)a2 != *(_QWORD *)a1
    || (v30 = *(_QWORD *)(a2 + 8), v31 = *(_QWORD *)(a1 + 8), v29 = v30 >= v31, v30 != v31))
  {
    if (v29)
      return result;
    goto LABEL_13;
  }
  v59 = *(char *)(a1 + 39);
  v60 = *(char *)(a2 + 39);
  if (v60 >= 0)
    v61 = *(unsigned __int8 *)(a2 + 39);
  else
    v61 = *(_QWORD *)(a2 + 24);
  if (v60 >= 0)
    v62 = (const void *)(a2 + 16);
  else
    v62 = *(const void **)(a2 + 16);
  if (v59 >= 0)
    v63 = *(unsigned __int8 *)(a1 + 39);
  else
    v63 = *(_QWORD *)(a1 + 24);
  if (v59 >= 0)
    v64 = (const void *)(a1 + 16);
  else
    v64 = *(const void **)(a1 + 16);
  if (v63 >= v61)
    v65 = v61;
  else
    v65 = v63;
  result = memcmp(v62, v64, v65);
  v66 = v61 < v63;
  if ((_DWORD)result)
    v66 = (int)result < 0;
  if (v66)
  {
LABEL_13:
    v70 = *(_OWORD *)a1;
    v32 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v74 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)((char *)&v74 + 7) = *(_QWORD *)(a1 + 31);
    v33 = *(_BYTE *)(a1 + 39);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v34 = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = v34;
    *(_OWORD *)a2 = v70;
    *(_QWORD *)(a2 + 16) = v32;
    *(_QWORD *)(a2 + 24) = v74;
    *(_QWORD *)(a2 + 31) = *(_QWORD *)((char *)&v74 + 7);
    *(_BYTE *)(a2 + 39) = v33;
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,llvm::SMFixIt *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  const void *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  int64_t v30;
  uint64_t v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  __n128 v43;
  __int128 v44;
  _BYTE v45[15];

  if ((__int128 *)a1 == a2)
    return a3;
  v8 = (uint64_t)a2 - a1;
  v9 = ((uint64_t)a2 - a1) / 40;
  if ((uint64_t)a2 - a1 >= 41)
  {
    v10 = (unint64_t)(v9 - 2) >> 1;
    v11 = v10 + 1;
    v12 = (__n128 *)(a1 + 40 * v10);
    do
    {
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a4, v9, v12);
      v12 = (__n128 *)((char *)v12 - 40);
      --v11;
    }
    while (v11);
  }
  v13 = a2;
  if (a2 == a3)
    goto LABEL_34;
  v40 = v8;
  v14 = a2;
  do
  {
    v18 = *(_QWORD *)v14 >= *(_QWORD *)a1;
    if (*(_QWORD *)v14 == *(_QWORD *)a1
      && (v19 = *((_QWORD *)v14 + 1), v20 = *(_QWORD *)(a1 + 8), v18 = v19 >= v20, v19 == v20))
    {
      v21 = *(char *)(a1 + 39);
      v22 = *((char *)v14 + 39);
      if (v22 >= 0)
        v23 = *((unsigned __int8 *)v14 + 39);
      else
        v23 = *((_QWORD *)v14 + 3);
      if (v22 >= 0)
        v24 = v14 + 1;
      else
        v24 = (const void *)*((_QWORD *)v14 + 2);
      if (v21 >= 0)
        v25 = *(unsigned __int8 *)(a1 + 39);
      else
        v25 = *(_QWORD *)(a1 + 24);
      if (v21 >= 0)
        v26 = (const void *)(a1 + 16);
      else
        v26 = *(const void **)(a1 + 16);
      if (v25 >= v23)
        v27 = v23;
      else
        v27 = v25;
      v28 = memcmp(v24, v26, v27);
      v29 = v23 < v25;
      if (v28)
        v29 = v28 < 0;
      if (v29)
      {
LABEL_7:
        v42 = *v14;
        v15 = *((_QWORD *)v14 + 2);
        *(_QWORD *)&v44 = *((_QWORD *)v14 + 3);
        *(_QWORD *)((char *)&v44 + 7) = *(_QWORD *)((char *)v14 + 31);
        v16 = *((_BYTE *)v14 + 39);
        *((_QWORD *)v14 + 3) = 0;
        *((_QWORD *)v14 + 4) = 0;
        *((_QWORD *)v14 + 2) = 0;
        *v14 = *(_OWORD *)a1;
        v17 = *(_QWORD *)(a1 + 32);
        v14[1] = *(_OWORD *)(a1 + 16);
        *((_QWORD *)v14 + 4) = v17;
        *(_OWORD *)a1 = v42;
        *(_QWORD *)(a1 + 16) = v15;
        *(_QWORD *)(a1 + 24) = v44;
        *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)&v44 + 7);
        *(_BYTE *)(a1 + 39) = v16;
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a4, v9, (__n128 *)a1);
      }
    }
    else if (!v18)
    {
      goto LABEL_7;
    }
    v14 = (__int128 *)((char *)v14 + 40);
  }
  while (v14 != a3);
  v13 = a3;
  v8 = v40;
LABEL_34:
  if (v8 < 41)
    return v13;
  v41 = v13;
  v30 = v8 / 0x28uLL;
  v31 = (uint64_t)a2 - 40;
  do
  {
    while (1)
    {
      v43 = *(__n128 *)a1;
      v34 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)&v45[7] = *(_QWORD *)(a1 + 31);
      v35 = *(_BYTE *)(a1 + 39);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v36 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a4, v30);
      v37 = v36;
      v38 = v36 + 16;
      if (v31 == v36)
        break;
      *(_OWORD *)v36 = *(_OWORD *)v31;
      if (*(char *)(v36 + 39) < 0)
        operator delete(*(void **)v38);
      v32 = *(_OWORD *)(v31 + 16);
      *(_QWORD *)(v38 + 16) = *(_QWORD *)(v31 + 32);
      *(_OWORD *)v38 = v32;
      *(__n128 *)v31 = v43;
      *(_QWORD *)(v31 + 16) = v34;
      *(_QWORD *)(v31 + 24) = *(_QWORD *)v45;
      *(_QWORD *)(v31 + 31) = *(_QWORD *)&v45[7];
      *(_BYTE *)(v31 + 39) = v35;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, v37 + 40, a4, 0xCCCCCCCCCCCCCCCDLL * ((v37 + 40 - a1) >> 3));
      v31 -= 40;
      v33 = v30-- <= 2;
      if (v33)
        return v41;
    }
    *(__n128 *)v36 = v43;
    if (*(char *)(v36 + 39) < 0)
      operator delete(*(void **)v38);
    *(_QWORD *)(v37 + 16) = v34;
    *(_QWORD *)(v37 + 24) = *(_QWORD *)v45;
    *(_QWORD *)(v37 + 31) = *(_QWORD *)&v45[7];
    *(_BYTE *)(v37 + 39) = v35;
    v31 -= 40;
    v33 = v30-- <= 2;
  }
  while (!v33);
  return v41;
}

__n128 std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v9;
  int64_t v11;
  __n128 *v12;
  int64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  unint64_t v25;
  __n128 *v26;
  BOOL v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  size_t v38;
  __n128 *v39;
  size_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  int v45;
  const void *v46;
  const void *v47;
  size_t v48;
  size_t v49;
  const void *v50;
  size_t v51;
  __int8 *v52;
  size_t v53;
  int v54;
  _BOOL4 v55;
  int v56;
  int v57;
  size_t v58;
  __n128 *v59;
  size_t v60;
  __n128 *v61;
  size_t v62;
  int v63;
  __n128 result;
  BOOL v65;
  uint64_t v66;
  int v67;
  int v68;
  const void *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  const void *v73;
  size_t v74;
  __int8 *v75;
  size_t v76;
  int v77;
  _BOOL4 v78;
  int64_t v79;
  __n128 *v80;
  size_t v81;
  __n128 v82;
  __n128 v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = a3 - 2;
  if (a3 < 2)
    return result;
  v85 = v4;
  v86 = v5;
  v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    return result;
  v11 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
  v12 = (__n128 *)(a1 + 40 * v11);
  v13 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
  if (v13 >= a3)
    goto LABEL_8;
  v14 = v12[2].n128_u64[1];
  v15 = v12->n128_u64[0] >= v14;
  if (v12->n128_u64[0] == v14 && (v16 = v12->n128_u64[1], v17 = v12[3].n128_u64[0], v15 = v16 >= v17, v16 == v17))
  {
    v66 = a1 + 40 * v11;
    v67 = v12[4].n128_i8[15];
    v68 = v12[2].n128_i8[7];
    v70 = *(const void **)(v66 + 16);
    v71 = *(_QWORD *)(v66 + 24);
    v69 = (const void *)(v66 + 16);
    if (v68 >= 0)
      v72 = v12[2].n128_u8[7];
    else
      v72 = v71;
    if (v68 >= 0)
      v73 = v69;
    else
      v73 = v70;
    if (v67 >= 0)
      v74 = v12[4].n128_u8[15];
    else
      v74 = v12[4].n128_u64[0];
    if (v67 >= 0)
      v75 = &v12[3].n128_i8[8];
    else
      v75 = (__int8 *)v12[3].n128_u64[1];
    if (v74 >= v72)
      v76 = v72;
    else
      v76 = v74;
    v77 = memcmp(v73, v75, v76);
    v78 = v72 < v74;
    if (v77)
      v78 = v77 < 0;
    if (!v78)
      goto LABEL_8;
  }
  else if (v15)
  {
    goto LABEL_8;
  }
  v12 = (__n128 *)((char *)v12 + 40);
  v11 = v13;
LABEL_8:
  v18 = v12->n128_u64[0] >= a4->n128_u64[0];
  if (v12->n128_u64[0] == a4->n128_u64[0]
    && (v19 = v12->n128_u64[1], v20 = a4->n128_u64[1], v18 = v19 >= v20, v19 == v20))
  {
    v56 = a4[2].n128_i8[7];
    v57 = v12[2].n128_i8[7];
    if (v57 >= 0)
      v58 = v12[2].n128_u8[7];
    else
      v58 = v12[1].n128_u64[1];
    if (v57 >= 0)
      v59 = v12 + 1;
    else
      v59 = (__n128 *)v12[1].n128_u64[0];
    if (v56 >= 0)
      v60 = a4[2].n128_u8[7];
    else
      v60 = a4[1].n128_u64[1];
    if (v56 >= 0)
      v61 = a4 + 1;
    else
      v61 = (__n128 *)a4[1].n128_u64[0];
    if (v60 >= v58)
      v62 = v58;
    else
      v62 = v60;
    v63 = memcmp(v59, v61, v62);
    v65 = v58 < v60;
    if (v63)
      v65 = v63 < 0;
    if (v65)
      return result;
  }
  else if (!v18)
  {
    return result;
  }
  v82 = *a4;
  v83 = a4[1];
  v84 = a4[2].n128_i64[0];
  a4[1].n128_u64[0] = 0;
  a4[1].n128_u64[1] = 0;
  a4[2].n128_u64[0] = 0;
  v22 = v82.n128_u64[1];
  v21 = v82.n128_u64[0];
  *a4 = *v12;
  v23 = v12 + 1;
  v24 = v12[2].n128_u64[0];
  a4[1] = v12[1];
  a4[2].n128_u64[0] = v24;
  v12[2].n128_u8[7] = 0;
  v12[1].n128_u8[0] = 0;
  if (v9 < v11)
    goto LABEL_87;
  if (v84 >= 0)
    v25 = HIBYTE(v84);
  else
    v25 = v83.n128_u64[1];
  if (v84 >= 0)
    v26 = &v83;
  else
    v26 = (__n128 *)v83.n128_u64[0];
  v80 = v26;
  v81 = v25;
  v79 = v9;
  while (1)
  {
    v29 = v12;
    v30 = 2 * v11;
    v11 = (2 * v11) | 1;
    v12 = (__n128 *)(a1 + 40 * v11);
    v31 = v30 + 2;
    if (v30 + 2 >= a3)
      goto LABEL_21;
    v32 = v12[2].n128_u64[1];
    v33 = v12->n128_u64[0] >= v32;
    if (v12->n128_u64[0] != v32 || (v34 = v12->n128_u64[1], v35 = v12[3].n128_u64[0], v33 = v34 >= v35, v34 != v35))
    {
      if (v33)
        goto LABEL_21;
LABEL_20:
      v12 = (__n128 *)((char *)v12 + 40);
      v11 = v31;
      goto LABEL_21;
    }
    v43 = a1 + 40 * v11;
    v44 = v12[4].n128_i8[15];
    v45 = v12[2].n128_i8[7];
    v47 = *(const void **)(v43 + 16);
    v48 = *(_QWORD *)(v43 + 24);
    v46 = (const void *)(v43 + 16);
    if (v45 >= 0)
      v49 = v12[2].n128_u8[7];
    else
      v49 = v48;
    if (v45 >= 0)
      v50 = v46;
    else
      v50 = v47;
    if (v44 >= 0)
      v51 = v12[4].n128_u8[15];
    else
      v51 = v12[4].n128_u64[0];
    if (v44 >= 0)
      v52 = &v12[3].n128_i8[8];
    else
      v52 = (__int8 *)v12[3].n128_u64[1];
    if (v51 >= v49)
      v53 = v49;
    else
      v53 = v51;
    v54 = memcmp(v50, v52, v53);
    v22 = v82.n128_u64[1];
    v21 = v82.n128_u64[0];
    v15 = v49 >= v51;
    v9 = v79;
    v55 = !v15;
    if (v54)
      v55 = v54 < 0;
    if (v55)
      goto LABEL_20;
LABEL_21:
    v27 = v12->n128_u64[0] >= v21;
    if (v12->n128_u64[0] == v21)
    {
      v36 = v12->n128_u64[1];
      v27 = v36 >= v22;
      if (v36 == v22)
        break;
    }
    if (!v27)
      goto LABEL_86;
LABEL_24:
    *v29 = *v12;
    v23 = v12 + 1;
    v28 = v12[1];
    v29[2].n128_u64[0] = v12[2].n128_u64[0];
    v29[1] = v28;
    v12[2].n128_u8[7] = 0;
    v12[1].n128_u8[0] = 0;
    if (v9 < v11)
      goto LABEL_87;
  }
  v37 = v12[2].n128_i8[7];
  if (v37 >= 0)
    v38 = v12[2].n128_u8[7];
  else
    v38 = v12[1].n128_u64[1];
  if (v37 >= 0)
    v39 = v12 + 1;
  else
    v39 = (__n128 *)v12[1].n128_u64[0];
  if (v81 >= v38)
    v40 = v38;
  else
    v40 = v81;
  v41 = memcmp(v39, v80, v40);
  v22 = v82.n128_u64[1];
  v21 = v82.n128_u64[0];
  v42 = v38 < v81;
  if (v41)
    v42 = v41 < 0;
  if (!v42)
    goto LABEL_24;
LABEL_86:
  v12 = v29;
LABEL_87:
  *v12 = v82;
  result = v83;
  v23[1].n128_u64[0] = v84;
  *v23 = result;
  return result;
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  const void *v21;
  const void *v22;
  size_t v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  _BOOL4 v30;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v11 = v5 + 1;
    v8 = a1 + 40 * (v5 + 1);
    v12 = 2 * v5;
    v5 = (2 * v5) | 1;
    v13 = v12 + 2;
    if (v12 + 2 < a3)
    {
      v14 = *(_QWORD *)(v8 + 40);
      v15 = *(_QWORD *)v8 >= v14;
      if (*(_QWORD *)v8 == v14 && (v16 = *(_QWORD *)(v8 + 8), v17 = *(_QWORD *)(v8 + 48), v15 = v16 >= v17, v16 == v17))
      {
        v18 = a1 + 40 * v11;
        v19 = *(char *)(v8 + 79);
        v20 = *(char *)(v8 + 39);
        v22 = *(const void **)(v18 + 16);
        v23 = *(_QWORD *)(v18 + 24);
        v21 = (const void *)(v18 + 16);
        if (v20 >= 0)
          v24 = *(unsigned __int8 *)(v8 + 39);
        else
          v24 = v23;
        if (v20 >= 0)
          v25 = v21;
        else
          v25 = v22;
        if (v19 >= 0)
          v26 = *(unsigned __int8 *)(v8 + 79);
        else
          v26 = *(_QWORD *)(v8 + 64);
        if (v19 >= 0)
          v27 = (const void *)(v8 + 56);
        else
          v27 = *(const void **)(v8 + 56);
        if (v26 >= v24)
          v28 = v24;
        else
          v28 = v26;
        v29 = memcmp(v25, v27, v28);
        v30 = v24 < v26;
        if (v29)
          v30 = v29 < 0;
        if (v30)
        {
LABEL_4:
          v8 += 40;
          v5 = v13;
        }
      }
      else if (!v15)
      {
        goto LABEL_4;
      }
    }
    *(_OWORD *)a1 = *(_OWORD *)v8;
    v9 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v9);
    v10 = *(_OWORD *)(v8 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 32);
    *(_OWORD *)v9 = v10;
    *(_BYTE *)(v8 + 39) = 0;
    *(_BYTE *)(v8 + 16) = 0;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  size_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  const void *v33;
  const void *v34;
  size_t v35;
  size_t v36;
  const void *v37;
  size_t v38;
  unint64_t v39;
  _BOOL4 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  int v44;
  const void *v45;
  const void *v46;
  size_t v47;
  size_t v48;
  const void *v49;
  size_t v50;
  const void *v51;
  size_t v52;
  _BOOL4 v53;
  __int128 *__s2;
  size_t v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;

  v4 = a4 - 2;
  if (a4 < 2)
    return result;
  v6 = result;
  v7 = v4 >> 1;
  v8 = result + 40 * (v4 >> 1);
  v10 = (__int128 *)(a2 - 40);
  v9 = *(_QWORD *)(a2 - 40);
  v11 = *(_QWORD *)v8 >= v9;
  if (*(_QWORD *)v8 == v9 && (v12 = *(_QWORD *)(v8 + 8), v13 = *(_QWORD *)(a2 - 32), v11 = v12 >= v13, v12 == v13))
  {
    v42 = result + 40 * v7;
    v43 = *(char *)(a2 - 1);
    v44 = *(char *)(v8 + 39);
    v46 = *(const void **)(v42 + 16);
    v47 = *(_QWORD *)(v42 + 24);
    v45 = (const void *)(v42 + 16);
    if (v44 >= 0)
      v48 = *(unsigned __int8 *)(v8 + 39);
    else
      v48 = v47;
    if (v44 >= 0)
      v49 = v45;
    else
      v49 = v46;
    if (v43 >= 0)
      v50 = *(unsigned __int8 *)(a2 - 1);
    else
      v50 = *(_QWORD *)(a2 - 16);
    if (v43 >= 0)
      v51 = (const void *)(a2 - 24);
    else
      v51 = *(const void **)(a2 - 24);
    if (v50 >= v48)
      v52 = v48;
    else
      v52 = v50;
    result = memcmp(v49, v51, v52);
    v53 = v48 < v50;
    if ((_DWORD)result)
      v53 = (int)result < 0;
    if (!v53)
      return result;
  }
  else if (v11)
  {
    return result;
  }
  v14 = *v10;
  v58 = *(_QWORD *)(a2 - 8);
  v15 = v58;
  v56 = v14;
  v57 = *(_OWORD *)(a2 - 24);
  *(_QWORD *)(a2 - 24) = 0;
  *(_QWORD *)(a2 - 16) = 0;
  *(_QWORD *)(a2 - 8) = 0;
  v17 = *((_QWORD *)&v14 + 1);
  v16 = v14;
  v18 = HIBYTE(v15);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  else
    v19 = *((_QWORD *)&v57 + 1);
  if ((v18 & 0x80u) == 0)
    v20 = &v57;
  else
    v20 = (__int128 *)v57;
  __s2 = v20;
  v55 = v19;
  *v10 = *(_OWORD *)v8;
  v21 = v6 + 40 * v7;
  v22 = v21 + 16;
  v23 = *(_QWORD *)(v21 + 32);
  *(_OWORD *)(a2 - 24) = *(_OWORD *)(v21 + 16);
  *(_QWORD *)(a2 - 8) = v23;
  *(_BYTE *)(v8 + 39) = 0;
  *(_BYTE *)(v21 + 16) = 0;
  if (v4 >= 2)
  {
    do
    {
      v27 = v8;
      v28 = v7 - 1;
      v7 = (v7 - 1) >> 1;
      v8 = v6 + 40 * v7;
      v29 = *(_QWORD *)v8 >= v16;
      if (*(_QWORD *)v8 == v16 && (v30 = *(_QWORD *)(v8 + 8), v29 = v30 >= v17, v30 == v17))
      {
        v31 = v6 + 40 * v7;
        v32 = *(char *)(v8 + 39);
        v34 = *(const void **)(v31 + 16);
        v35 = *(_QWORD *)(v31 + 24);
        v33 = (const void *)(v31 + 16);
        if (v32 >= 0)
          v36 = *(unsigned __int8 *)(v8 + 39);
        else
          v36 = v35;
        if (v32 >= 0)
          v37 = v33;
        else
          v37 = v34;
        if (v55 >= v36)
          v38 = v36;
        else
          v38 = v55;
        v39 = v16;
        result = memcmp(v37, __s2, v38);
        v16 = v39;
        v40 = v36 < v55;
        if ((_DWORD)result)
          v40 = (int)result < 0;
        if (!v40)
        {
LABEL_29:
          v8 = v27;
          break;
        }
      }
      else if (v29)
      {
        goto LABEL_29;
      }
      v24 = v6 + 40 * v7;
      v22 = v24 + 16;
      v25 = *(_QWORD *)(v24 + 32);
      v26 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)v27 = *(_OWORD *)v8;
      *(_OWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 32) = v25;
      *(_BYTE *)(v8 + 39) = 0;
      *(_BYTE *)(v24 + 16) = 0;
    }
    while (v28 > 1);
  }
  *(_OWORD *)v8 = v56;
  v41 = v57;
  *(_QWORD *)(v22 + 16) = v58;
  *(_OWORD *)v22 = v41;
  return result;
}

void llvm::initStatisticOptions(llvm *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  int v3;
  _BYTE *v4;
  __int128 v5;

  v1 = atomic_load((unsigned __int8 *)&qword_1ECD33208);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD33208))
  {
    *(_QWORD *)&v5 = "Enable statistics output from program (available with Asserts)";
    *((_QWORD *)&v5 + 1) = 62;
    v4 = &_MergedGlobals_51;
    v3 = 1;
    llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [6],llvm::cl::desc,llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden>((uint64_t)&qword_1ECD33210[7], (int8x16_t *)"stats", &v5, &v4, &v3);
    __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_1ECD33210[7], &dword_18013D000);
    __cxa_guard_release(&qword_1ECD33208);
  }
  v2 = atomic_load((unsigned __int8 *)qword_1ECD33210);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(qword_1ECD33210))
    {
      *(_QWORD *)&v5 = "Display statistics as json data";
      *((_QWORD *)&v5 + 1) = 31;
      v4 = &unk_1ECD33201;
      v3 = 1;
      llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [6],llvm::cl::desc,llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden>((uint64_t)&qword_1ECD33210[31], (int8x16_t *)"stats-json", &v5, &v4, &v3);
      __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_1ECD33210[31], &dword_18013D000);
      __cxa_guard_release(qword_1ECD33210);
    }
  }
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [6],llvm::cl::desc,llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _BYTE **a4, _WORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  llvm *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  const char *v19;
  __int16 v20;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 145) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)a1 = &off_1E0E23588;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FB40;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_OWORD *)(a1 + 32) = *a3;
  if (*(_QWORD *)(a1 + 128))
  {
    v19 = "cl::location(x) specified more than once!";
    v20 = 259;
    v16 = (llvm::raw_ostream *)llvm::errs(v15);
    llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v19, 0, 0, v16);
  }
  else
  {
    v17 = *a4;
    *(_QWORD *)(a1 + 128) = *a4;
    *(_BYTE *)(a1 + 145) = 1;
    *(_BYTE *)(a1 + 144) = *v17;
  }
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

unint64_t llvm::SplitString(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t first_not_of;
  unint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v23 = a1;
  v24 = a2;
  first_not_of = llvm::StringRef::find_first_not_of(&v23, a4, a5, 0);
  result = llvm::StringRef::find_first_of(&v23, a4, a5, first_not_of);
  if (v24 >= first_not_of)
    v10 = first_not_of;
  else
    v10 = v24;
  if (v10 <= result)
    v11 = result;
  else
    v11 = first_not_of;
  if (v11 >= v24)
    v11 = v24;
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = v23 + v10;
    if (v24 >= result)
      v14 = result;
    else
      v14 = v24;
    v15 = v23 + v14;
    v16 = v24 - v14;
    do
    {
      v17 = *(unsigned int *)(a3 + 8);
      if (v17 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v17 + 1, 16);
        v17 = *(unsigned int *)(a3 + 8);
      }
      v18 = (_QWORD *)(*(_QWORD *)a3 + 16 * v17);
      *v18 = v13;
      v18[1] = v12;
      ++*(_DWORD *)(a3 + 8);
      v23 = v15;
      v24 = v16;
      v19 = llvm::StringRef::find_first_not_of(&v23, a4, a5, 0);
      result = llvm::StringRef::find_first_of(&v23, a4, a5, v19);
      if (v24 >= v19)
        v20 = v19;
      else
        v20 = v24;
      if (v20 <= result)
        v21 = result;
      else
        v21 = v19;
      if (v21 >= v24)
        v21 = v24;
      v13 = v23 + v20;
      if (v24 >= result)
        v22 = result;
      else
        v22 = v24;
      v15 = v23 + v22;
      v16 = v24 - v22;
      v12 = v21 - v20;
    }
    while (v21 != v20);
  }
  return result;
}

llvm::raw_ostream *llvm::printEscapedString(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4;
  char *v5;
  char v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  char v12;
  char *v13;
  char *v14;

  if (a2)
  {
    v4 = a2;
    v5 = (char *)result;
    do
    {
      v7 = *v5;
      if (v7 == 92)
      {
        v8 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v8 >= *((_QWORD *)a3 + 3))
        {
          result = llvm::raw_ostream::write(a3, 92);
          v9 = (_BYTE *)*((_QWORD *)result + 4);
          if ((unint64_t)v9 < *((_QWORD *)result + 3))
          {
LABEL_19:
            *((_QWORD *)result + 4) = v9 + 1;
            *v9 = 92;
            goto LABEL_5;
          }
        }
        else
        {
          *((_QWORD *)a3 + 4) = v8 + 1;
          *v8 = 92;
          result = a3;
          v9 = (_BYTE *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v9 < *((_QWORD *)a3 + 3))
            goto LABEL_19;
        }
        v6 = 92;
        goto LABEL_4;
      }
      v11 = *((_QWORD *)a3 + 3);
      v10 = (_BYTE *)*((_QWORD *)a3 + 4);
      if ((_DWORD)v7 == 34 || (v7 - 32) > 0x5Eu)
      {
        if ((unint64_t)v10 >= v11)
        {
          result = llvm::raw_ostream::write(a3, 92);
          v12 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 >> 4];
          v13 = (char *)*((_QWORD *)result + 4);
          if ((unint64_t)v13 < *((_QWORD *)result + 3))
          {
LABEL_21:
            *((_QWORD *)result + 4) = v13 + 1;
            *v13 = v12;
            v6 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 & 0xF];
            v14 = (char *)*((_QWORD *)result + 4);
            if ((unint64_t)v14 < *((_QWORD *)result + 3))
            {
LABEL_22:
              *((_QWORD *)result + 4) = v14 + 1;
              *v14 = v6;
              goto LABEL_5;
            }
            goto LABEL_4;
          }
        }
        else
        {
          *((_QWORD *)a3 + 4) = v10 + 1;
          *v10 = 92;
          result = a3;
          v12 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 >> 4];
          v13 = (char *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v13 < *((_QWORD *)a3 + 3))
            goto LABEL_21;
        }
        result = llvm::raw_ostream::write(result, v12);
        v6 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 & 0xF];
        v14 = (char *)*((_QWORD *)result + 4);
        if ((unint64_t)v14 < *((_QWORD *)result + 3))
          goto LABEL_22;
      }
      else
      {
        if ((unint64_t)v10 < v11)
        {
          *((_QWORD *)a3 + 4) = v10 + 1;
          *v10 = v7;
          goto LABEL_5;
        }
        result = a3;
        v6 = *v5;
      }
LABEL_4:
      result = llvm::raw_ostream::write(result, v6);
LABEL_5:
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::StringMapImpl::StringMapImpl(uint64_t this, int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v3 = this;
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = a3;
  if (a2)
  {
    v4 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = v5 | (v5 >> 8) | ((v5 | (v5 >> 8)) >> 16);
    *(_DWORD *)(this + 16) = 0;
    v7 = calloc(v6 + 2, 0xCuLL);
    if (!v7)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v7[(v6 + 1)] = 2;
    *(_QWORD *)v3 = v7;
    *(_DWORD *)(v3 + 8) = v6 + 1;
    return v3;
  }
  else
  {
    *(_QWORD *)this = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  return this;
}

_QWORD *llvm::StringMapImpl::init(llvm::StringMapImpl *this, unsigned int a2)
{
  unsigned int v3;
  _QWORD *result;

  if (a2)
    v3 = a2;
  else
    v3 = 16;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  result = calloc(v3 + 1, 0xCuLL);
  if (!result && (v3 != -1 || (result = malloc(1uLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  result[v3] = 2;
  *(_QWORD *)this = result;
  *((_DWORD *)this + 2) = v3;
  return result;
}

_QWORD *createTable(int a1)
{
  int v2;
  _QWORD *result;

  v2 = a1 + 1;
  result = calloc((a1 + 1), 0xCuLL);
  if (!result && (v2 || (result = malloc(1uLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  result[a1] = 2;
  return result;
}

uint64_t llvm::StringMapImpl::FindKey(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const unsigned __int8 **v13;
  int v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  if (!*((_DWORD *)a1 + 2))
    return 0xFFFFFFFFLL;
  v6 = llvm::xxh3_64bits(a2, (unint64_t)a3, a3);
  v7 = *((unsigned int *)a1 + 2);
  v8 = v7 - 1;
  result = ((_DWORD)v7 - 1) & v6;
  v10 = *a1;
  v11 = *a1 + 8 * v7 + 8;
  if (a3)
  {
    v12 = 1;
    v13 = *(const unsigned __int8 ***)(v10 + 8 * result);
    if (!v13)
      return 0xFFFFFFFFLL;
    while (1)
    {
      if (v13 != (const unsigned __int8 **)-8
        && *(_DWORD *)(v11 + 4 * result) == (_DWORD)v6
        && a3 == *v13)
      {
        v23 = result;
        v21 = v10;
        v22 = v6;
        v19 = v8;
        v20 = v12;
        v18 = v11;
        v16 = memcmp(a2, (char *)v13 + *((unsigned int *)a1 + 5), (size_t)a3);
        v8 = v19;
        v12 = v20;
        v11 = v18;
        v10 = v21;
        v6 = v22;
        v17 = v16;
        result = v23;
        if (!v17)
          break;
      }
      LODWORD(result) = (result + v12++) & v8;
      v13 = *(const unsigned __int8 ***)(v10 + 8 * result);
      if (!v13)
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v14 = 1;
    v15 = *(_QWORD **)(v10 + 8 * result);
    if (!v15)
      return 0xFFFFFFFFLL;
    while (v15 == (_QWORD *)-8 || *(_DWORD *)(v11 + 4 * result) != (_DWORD)v6 || *v15)
    {
      result = ((_DWORD)result + v14++) & v8;
      v15 = *(_QWORD **)(v10 + 8 * result);
      if (!v15)
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

int32x2_t llvm::StringMapImpl::RemoveKey(uint64_t a1, const unsigned __int8 **a2)
{
  int Key;
  int32x2_t result;

  Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, (int8x16_t *)((char *)a2 + *(unsigned int *)(a1 + 20)), *a2);
  if (Key != -1)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * Key) = -8;
    result = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 12) = result;
  }
  return result;
}

uint64_t llvm::StringMapImpl::RehashTable(llvm::StringMapImpl *this, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  _QWORD *Table;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = a2;
  v5 = *((_DWORD *)this + 2);
  v4 = *((_DWORD *)this + 3);
  if (3 * v5 < 4 * v4)
  {
    v5 *= 2;
  }
  else if (v5 - (v4 + *((_DWORD *)this + 4)) > v5 >> 3)
  {
    return a2;
  }
  Table = createTable(v5);
  v8 = *(_DWORD **)this;
  v9 = *((unsigned int *)this + 2);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = v5 - 1;
    v12 = v2;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)this + 8 * v10);
      if (v13 != -8 && v13 != 0)
      {
        v15 = v8[2 * v9 + 2 + v10];
        v16 = v15 & v11;
        if (Table[v16])
        {
          v17 = 1;
          do
          {
            v18 = v16 + v17++;
            v16 = v18 & v11;
          }
          while (Table[v16]);
        }
        Table[v16] = v13;
        *((_DWORD *)&Table[v5 + 1] + v16) = v15;
        if (v10 == v12)
          v2 = v16;
        else
          v2 = v2;
      }
      ++v10;
    }
    while (v10 != v9);
    v8 = *(_DWORD **)this;
  }
  free(v8);
  *(_QWORD *)this = Table;
  *((_DWORD *)this + 2) = v5;
  *((_DWORD *)this + 4) = 0;
  return v2;
}

_BYTE *llvm::StringSaver::save(uint64_t **a1, const void *a2, size_t a3)
{
  _BYTE *v5;
  _BYTE *v6;

  v5 = (_BYTE *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1, a3 + 1, 0);
  v6 = v5;
  if (a3)
    memcpy(v5, a2, a3);
  v6[a3] = 0;
  return v6;
}

_BYTE *llvm::UniqueStringSaver::save(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v10;
  _QWORD *v11;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  v4 = a1 + 8;
  v11 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 8), (uint64_t)&v10, &v11))return (_BYTE *)*v11;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(v4, (uint64_t)&v10, (uint64_t)&v10, v11);
  *(_OWORD *)v6 = v10;
  v7 = v10;
  v8 = (_BYTE *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(uint64_t **)a1, *((_QWORD *)&v10 + 1) + 1, 0);
  v5 = v8;
  if (*((_QWORD *)&v7 + 1))
    memcpy(v8, (const void *)v7, *((size_t *)&v7 + 1));
  v5[*((_QWORD *)&v7 + 1)] = 0;
  *v6 = v5;
  v6[1] = *((_QWORD *)&v7 + 1);
  return v5;
}

uint64_t llvm::StringRef::compare_insensitive(unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 v11;
  BOOL v12;
  unsigned int v13;

  v3 = (unint64_t)a1[1];
  if (a3 >= v3)
    v4 = (unint64_t)a1[1];
  else
    v4 = a3;
  if (v4)
  {
    v5 = *a1;
    while (1)
    {
      v7 = *v5++;
      v6 = v7;
      v8 = v7 + 32;
      if ((v7 - 65) < 0x1A)
        v6 = v8;
      v10 = *a2++;
      v9 = v10;
      v11 = v10 + 32;
      if ((v10 - 65) < 0x1A)
        v9 = v11;
      if (v6 != v9)
        break;
      if (!--v4)
        goto LABEL_12;
    }
    if (v6 < v9)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  else
  {
LABEL_12:
    v12 = v3 == a3;
    if (v3 < a3)
      v13 = -1;
    else
      v13 = 1;
    if (v12)
      return 0;
    else
      return v13;
  }
}

BOOL llvm::StringRef::starts_with_insensitive(unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  _BOOL8 result;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;
  int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  BOOL v15;

  if ((unint64_t)a1[1] < a3)
    return 0;
  if (!a3)
    return 1;
  v4 = *a1;
  v5 = a3 - 1;
  do
  {
    v7 = *v4++;
    v6 = v7;
    v8 = v7 + 32;
    if ((v7 - 65) < 0x1A)
      v6 = v8;
    v9 = v6;
    v11 = *a2++;
    v10 = v11;
    v12 = v11 + 32;
    if ((v11 - 65) >= 0x1A)
      v13 = v10;
    else
      v13 = v12;
    v15 = v5-- != 0;
    result = v9 == v13;
  }
  while (v9 == v13 && v15);
  return result;
}

uint64_t llvm::StringRef::edit_distance(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4, unsigned int a5)
{
  return llvm::ComputeMappedEditDistance<char,unsigned int llvm::ComputeEditDistance<char>(llvm::ArrayRef<char>,llvm::ArrayRef<char>,BOOL,unsigned int)::{lambda(char const&)#1}>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2, a3, a4, a5);
}

_QWORD *llvm::StringRef::lower@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  uint8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  char v16;
  int v17;
  char v18;

  v2 = (_QWORD *)a2;
  v3 = this[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = (int8x16_t *)*this;
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    this = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = this;
    v2 = this;
    if (v3 >= 0x20 && (unint64_t)((char *)this - (char *)v4) >= 0x20)
    {
      v7 = (_QWORD *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      v8 = &v4->u8[v3 & 0xFFFFFFFFFFFFFFE0];
      v9 = v4 + 1;
      v10 = (int8x16_t *)(this + 2);
      v11.i64[0] = 0xBFBFBFBFBFBFBFBFLL;
      v11.i64[1] = 0xBFBFBFBFBFBFBFBFLL;
      v12.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
      v12.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
      v13.i64[0] = 0x2020202020202020;
      v13.i64[1] = 0x2020202020202020;
      v14 = v3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v15 = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(*v9, v11)), vaddq_s8(*v9, v13), *v9);
        v10[-1] = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(v9[-1], v11)), vaddq_s8(v9[-1], v13), v9[-1]);
        *v10 = v15;
        v9 += 2;
        v10 += 2;
        v14 -= 32;
      }
      while (v14);
      v2 = (_QWORD *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      if (v3 == (v3 & 0x7FFFFFFFFFFFFFE0))
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v3;
    if (!v3)
      goto LABEL_18;
  }
  v7 = v2;
  v8 = (unsigned __int8 *)v4;
LABEL_14:
  v2 = v7;
  do
  {
    v17 = *v8++;
    v16 = v17;
    v18 = v17 + 32;
    if ((v17 - 65) < 0x1A)
      v16 = v18;
    *(_BYTE *)v2 = v16;
    v2 = (_QWORD *)((char *)v2 + 1);
  }
  while (v8 != (unsigned __int8 *)&v4->i8[v3]);
LABEL_18:
  *(_BYTE *)v2 = 0;
  return this;
}

_QWORD *llvm::StringRef::upper@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  uint8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  char v16;
  int v17;
  char v18;

  v2 = (_QWORD *)a2;
  v3 = this[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = (int8x16_t *)*this;
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    this = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = this;
    v2 = this;
    if (v3 >= 0x20 && (unint64_t)((char *)this - (char *)v4) >= 0x20)
    {
      v7 = (_QWORD *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      v8 = &v4->u8[v3 & 0xFFFFFFFFFFFFFFE0];
      v9 = v4 + 1;
      v10 = (int8x16_t *)(this + 2);
      v11.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
      v11.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
      v12.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
      v12.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
      v13.i64[0] = 0xE0E0E0E0E0E0E0E0;
      v13.i64[1] = 0xE0E0E0E0E0E0E0E0;
      v14 = v3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v15 = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(*v9, v11)), vaddq_s8(*v9, v13), *v9);
        v10[-1] = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(v9[-1], v11)), vaddq_s8(v9[-1], v13), v9[-1]);
        *v10 = v15;
        v9 += 2;
        v10 += 2;
        v14 -= 32;
      }
      while (v14);
      v2 = (_QWORD *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      if (v3 == (v3 & 0x7FFFFFFFFFFFFFE0))
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v3;
    if (!v3)
      goto LABEL_18;
  }
  v7 = v2;
  v8 = (unsigned __int8 *)v4;
LABEL_14:
  v2 = v7;
  do
  {
    v17 = *v8++;
    v16 = v17;
    v18 = v17 - 32;
    if ((v17 - 97) < 0x1A)
      v16 = v18;
    *(_BYTE *)v2 = v16;
    v2 = (_QWORD *)((char *)v2 + 1);
  }
  while (v8 != (unsigned __int8 *)&v4->i8[v3]);
LABEL_18:
  *(_BYTE *)v2 = 0;
  return this;
}

uint64_t llvm::StringRef::find(uint64_t *a1, char *a2, size_t a3, unint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  _OWORD v21[14];
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = v5 - a4;
  if (v5 < a4)
    return -1;
  v7 = a4;
  if (!a3)
    return v7;
  if (v6 < a3)
    return -1;
  v10 = *a1;
  v11 = (unsigned __int8 *)(*a1 + a4);
  v12 = a3 - 1;
  if (a3 == 1)
  {
    v13 = memchr((void *)(*a1 + a4), *a2, v6);
    if (v13)
      return (uint64_t)v13 - v10;
    else
      return -1;
  }
  v14 = (unint64_t)&v11[v6 - a3 + 1];
  v15 = a3 - 2;
  if (a3 == 2)
  {
    result = -1;
    while (*(unsigned __int16 *)(v10 + v7) != *(unsigned __int16 *)a2)
    {
      ++v7;
      if (v10 + v7 >= v14)
        return result;
    }
    return v7;
  }
  if (a3 > 0xFF || v6 <= 0xF)
  {
    while (memcmp((const void *)(v10 + v7), a2, a3))
    {
      ++v7;
      result = -1;
      if (v10 + v7 >= v14)
        return result;
    }
    return v7;
  }
  v16 = 0;
  v22 = vdupq_n_s8(a3);
  v23 = v22;
  v21[12] = v22;
  v21[13] = v22;
  v21[10] = v22;
  v21[11] = v22;
  v21[8] = v22;
  v21[9] = v22;
  v21[6] = v22;
  v21[7] = v22;
  v21[4] = v22;
  v21[5] = v22;
  v21[2] = v22;
  v21[3] = v22;
  v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v21[0] = v22;
  v21[1] = v22;
  do
  {
    *((_BYTE *)v21 + a2[v16]) = v15 + 1;
    *((_BYTE *)v21 + a2[v16 + 1]) = v15;
    v16 += 2;
    v15 -= 2;
  }
  while (v17 != v16);
  if (v12 != v17)
  {
    v18 = v17 + 1;
    do
    {
      *((_BYTE *)v21 + a2[v17]) = v12 - v17;
      v17 = v18++;
    }
    while (v12 != v17);
  }
  v19 = a2[v12];
  while (1)
  {
    v20 = v11[v12];
    if ((_DWORD)v20 == v19 && !memcmp(v11, a2, v12))
      break;
    v11 += *((unsigned __int8 *)v21 + v20);
    if ((unint64_t)v11 >= v14)
      return -1;
  }
  return (uint64_t)&v11[-v10];
}

uint64_t llvm::StringRef::rfind(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;

  v3 = a1[1];
  v4 = (unsigned __int8 *)(*a1 + v3);
  if (a3)
  {
    if (!v3)
      return -1;
    v5 = (unsigned __int8 *)*a1;
    v6 = (unsigned __int8 *)(*a1 + v3);
    do
    {
      if (*v5 == *a2)
      {
        v7 = 1;
        while (a3 != v7)
        {
          if (&v5[v7] == v4)
            goto LABEL_14;
          v8 = v5[v7];
          v9 = a2[v7++];
          if (v8 != v9)
            goto LABEL_5;
        }
        v6 = v5;
      }
LABEL_5:
      ++v5;
    }
    while (v5 != v4);
  }
  else
  {
    v6 = (unsigned __int8 *)(*a1 + v3);
  }
LABEL_14:
  if (v6 != v4 || a3 == 0)
    return (uint64_t)&v6[-*a1];
  else
    return -1;
}

uint64_t llvm::StringRef::find_first_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  __int128 v7;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  v5 = a1[1];
  if (v5 <= a4)
    return -1;
  while (((*(_QWORD *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4)
      return -1;
  }
  return a4;
}

uint64_t llvm::StringRef::find_first_not_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  __int128 v7;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  v5 = a1[1];
  if (v5 <= a4)
    return -1;
  while (((*(_QWORD *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4)
      return -1;
  }
  return a4;
}

uint64_t llvm::StringRef::find_last_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  while (v5)
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    v8 = *(_QWORD *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    v5 = v6;
    if ((v8 & 1) != 0)
      return v6;
  }
  return -1;
}

unint64_t llvm::StringRef::find_last_not_of(llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (*((_QWORD *)this + 1) >= a3)
    v3 = a3;
  else
    v3 = *((_QWORD *)this + 1);
  while (v3)
  {
    v4 = v3 - 1;
    v5 = *(unsigned __int8 *)(*(_QWORD *)this + v3-- - 1);
    if (v5 != a2)
      return v4;
  }
  return -1;
}

uint64_t llvm::StringRef::find_last_not_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  while (v5)
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    v8 = *(_QWORD *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    v5 = v6;
    if ((v8 & 1) == 0)
      return v6;
  }
  return -1;
}

void llvm::StringRef::split(__int128 *a1, uint64_t a2, char *a3, size_t a4, int a5, char a6)
{
  int v8;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;

  v29 = *a1;
  if (a5)
  {
    v8 = a5;
    v11 = *((_QWORD *)&v29 + 1);
    if ((a6 & 1) != 0)
    {
      do
      {
        v12 = llvm::StringRef::find((uint64_t *)&v29, a3, a4, 0);
        if (v12 == -1)
          break;
        v13 = v12;
        if (v12 >= v11)
          v14 = v11;
        else
          v14 = v12;
        v15 = v29;
        v16 = *(unsigned int *)(a2 + 8);
        if (v16 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16 + 1, 16);
          v16 = *(unsigned int *)(a2 + 8);
        }
        v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v16);
        *v17 = v15;
        v17[1] = v14;
        ++*(_DWORD *)(a2 + 8);
        v18 = v13 + a4;
        if (v11 < v13 + a4)
          v18 = v11;
        v11 -= v18;
        *(_QWORD *)&v29 = v15 + v18;
        *((_QWORD *)&v29 + 1) = v11;
        --v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v21 = llvm::StringRef::find((uint64_t *)&v29, a3, a4, 0);
        v22 = v21;
        if (v21)
        {
          if (v21 == -1)
            break;
          if (v21 >= v11)
            v23 = v11;
          else
            v23 = v21;
          v19 = v29;
          v24 = *(unsigned int *)(a2 + 8);
          if (v24 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v24 + 1, 16);
            v24 = *(unsigned int *)(a2 + 8);
          }
          v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v24);
          *v25 = v19;
          v25[1] = v23;
          ++*(_DWORD *)(a2 + 8);
        }
        else
        {
          v19 = v29;
        }
        v20 = v22 + a4;
        if (v11 < v22 + a4)
          v20 = v11;
        v11 -= v20;
        *(_QWORD *)&v29 = v19 + v20;
        *((_QWORD *)&v29 + 1) = v11;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v11 = *((_QWORD *)&v29 + 1);
  }
  if ((a6 & 1) != 0 || v11)
  {
    v26 = v29;
    v27 = *(unsigned int *)(a2 + 8);
    if (v27 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v27 + 1, 16);
      LODWORD(v27) = *(_DWORD *)(a2 + 8);
    }
    v28 = (_QWORD *)(*(_QWORD *)a2 + 16 * v27);
    *v28 = v26;
    v28[1] = v11;
    ++*(_DWORD *)(a2 + 8);
  }
}

void llvm::StringRef::split(char **a1, uint64_t a2, int __c, int a4, int a5)
{
  char *v7;
  size_t v8;
  int v9;
  _BYTE *v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  size_t v18;
  _BYTE *v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v7 = *a1;
  v8 = (size_t)a1[1];
  if (a4)
  {
    v9 = a4;
    if ((a5 & 1) != 0)
    {
      while (v8)
      {
        v11 = memchr(v7, __c, v8);
        if (!v11)
          goto LABEL_32;
        v12 = v11 - v7;
        if (v11 - v7 == -1)
          goto LABEL_32;
        if (v12 >= v8)
          v13 = v8;
        else
          v13 = v11 - v7;
        v14 = *(unsigned int *)(a2 + 8);
        if (v14 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v14 + 1, 16);
          v14 = *(unsigned int *)(a2 + 8);
        }
        v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
        *v15 = v7;
        v15[1] = v13;
        ++*(_DWORD *)(a2 + 8);
        if (v8 >= v12 + 1)
          v16 = v12 + 1;
        else
          v16 = v8;
        v7 += v16;
        v8 -= v16;
        if (!--v9)
          goto LABEL_30;
      }
    }
    else
    {
      while (v8)
      {
        v19 = memchr(v7, __c, v8);
        if (!v19)
          goto LABEL_32;
        v20 = v19 - v7;
        if (v19 - v7 == -1)
          goto LABEL_32;
        if (v19 != v7)
        {
          if (v20 >= v8)
            v21 = v8;
          else
            v21 = v19 - v7;
          v22 = *(unsigned int *)(a2 + 8);
          if (v22 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v22 + 1, 16);
            v22 = *(unsigned int *)(a2 + 8);
          }
          v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v22);
          *v17 = v7;
          v17[1] = v21;
          ++*(_DWORD *)(a2 + 8);
        }
        if (v8 >= v20 + 1)
          v18 = v20 + 1;
        else
          v18 = v8;
        v7 += v18;
        v8 -= v18;
        if (!--v9)
          goto LABEL_30;
      }
    }
    if (a5)
    {
      v8 = 0;
      v23 = *(unsigned int *)(a2 + 8);
      if (v23 >= *(_DWORD *)(a2 + 12))
        goto LABEL_37;
      goto LABEL_33;
    }
  }
  else
  {
LABEL_30:
    if ((a5 & 1) != 0 || v8)
    {
LABEL_32:
      v23 = *(unsigned int *)(a2 + 8);
      if (v23 >= *(_DWORD *)(a2 + 12))
      {
LABEL_37:
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23 + 1, 16);
        LODWORD(v23) = *(_DWORD *)(a2 + 8);
      }
LABEL_33:
      v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
      *v24 = v7;
      v24[1] = v8;
      ++*(_DWORD *)(a2 + 8);
    }
  }
}

uint64_t llvm::consumeUnsignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t result;

  if ((_DWORD)a2)
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      return 1;
  }
  else
  {
    LODWORD(a2) = GetAutoSenseRadix(this);
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      return 1;
  }
  v7 = 0;
  v8 = *(unsigned __int8 **)this;
  *a3 = 0;
  v9 = v6;
  do
  {
    if ((char)*v8 < 48)
      break;
    v10 = *v8;
    if (v10 >= 0x3A)
    {
      if (v10 < 0x61)
      {
        if (v10 - 65 > 0x19)
          break;
        v11 = v10 - 55;
        if (v11 >= a2)
          break;
      }
      else
      {
        if (v10 >= 0x7B)
          break;
        v11 = v10 - 87;
        if (v11 >= a2)
          break;
      }
    }
    else
    {
      v11 = v10 - 48;
      if (v11 >= a2)
        break;
    }
    v12 = v7 * a2 + v11;
    *a3 = v12;
    if (v12 / a2 < v7)
      return 1;
    ++v8;
    v7 = v12;
    --v9;
  }
  while (v9);
  if (v6 == v9)
    return 1;
  result = 0;
  *(_QWORD *)this = v8;
  *((_QWORD *)this + 1) = v9;
  return result;
}

uint64_t GetAutoSenseRadix(llvm::StringRef *a1)
{
  unint64_t v1;
  _BYTE *v3;
  _BYTE *v4;
  int v5;

  v1 = *((_QWORD *)a1 + 1);
  if (v1 < 2)
    return 10;
  v3 = *(_BYTE **)a1;
  if (**(_WORD **)a1 == 30768 || *(_WORD *)v3 == 22576)
  {
    *(_QWORD *)a1 = v3 + 2;
    *((_QWORD *)a1 + 1) = v1 - 2;
    return 16;
  }
  else if (*(_WORD *)v3 == 25136 || *(_WORD *)v3 == 16944)
  {
    *(_QWORD *)a1 = v3 + 2;
    *((_QWORD *)a1 + 1) = v1 - 2;
    return 2;
  }
  else if (*(_WORD *)v3 == 28464)
  {
    *(_QWORD *)a1 = v3 + 2;
    *((_QWORD *)a1 + 1) = v1 - 2;
    return 8;
  }
  else
  {
    if (*v3 != 48)
      return 10;
    v5 = v3[1];
    v4 = v3 + 1;
    if ((v5 - 48) > 9)
      return 10;
    *(_QWORD *)a1 = v4;
    *((_QWORD *)a1 + 1) = v1 - 1;
    return 8;
  }
}

double llvm::consumeSignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  double result;
  __int128 v24;

  v6 = *((_QWORD *)this + 1);
  if (v6 && **(_BYTE **)this == 45)
  {
    v7 = v6 - 1;
    *(_QWORD *)&v24 = *(_QWORD *)this + 1;
    *((_QWORD *)&v24 + 1) = v7;
    if ((_DWORD)a2)
    {
      if (!v7)
        return result;
    }
    else
    {
      LODWORD(a2) = GetAutoSenseRadix((llvm::StringRef *)&v24);
      v7 = *((_QWORD *)&v24 + 1);
      if (!*((_QWORD *)&v24 + 1))
        return result;
    }
    v8 = 0;
    v9 = (char *)v24;
    v10 = (char *)(v24 + v7);
    v11 = v7;
    while (*v9 >= 48)
    {
      v12 = *v9;
      if (v12 >= 0x3A)
      {
        if (v12 < 0x61)
        {
          if (v12 - 65 > 0x19)
            break;
          v13 = -55;
        }
        else
        {
          if (v12 >= 0x7B)
            break;
          v13 = -87;
        }
      }
      else
      {
        v13 = -48;
      }
      v14 = v13 + v12;
      if (v14 >= a2)
        break;
      v15 = v8 * a2 + v14;
      if (v15 / a2 < v8)
        return result;
      ++v9;
      v8 = v15;
      if (!--v11)
      {
        if (!v7)
          return result;
        goto LABEL_44;
      }
    }
    v15 = v8;
    v10 = v9;
    if (v7 == v11)
      return result;
LABEL_44:
    *(_QWORD *)&v24 = v10;
    *((_QWORD *)&v24 + 1) = v11;
    if (v15 <= 0x8000000000000000)
    {
      result = *(double *)&v24;
      *(_OWORD *)this = v24;
      *a3 = -(uint64_t)v15;
    }
  }
  else
  {
    if ((_DWORD)a2)
    {
      if (!v6)
        return result;
    }
    else
    {
      LODWORD(a2) = GetAutoSenseRadix(this);
      v6 = *((_QWORD *)this + 1);
      if (!v6)
        return result;
    }
    v16 = 0;
    v17 = *(char **)this;
    v18 = (char *)(*(_QWORD *)this + v6);
    v19 = v6;
    while (*v17 >= 48)
    {
      v20 = *v17;
      if (v20 >= 0x3A)
      {
        if (v20 < 0x61)
        {
          if (v20 - 65 > 0x19)
            break;
          v21 = v20 - 55;
          if (v21 >= a2)
            break;
        }
        else
        {
          if (v20 >= 0x7B)
            break;
          v21 = v20 - 87;
          if (v21 >= a2)
            break;
        }
      }
      else
      {
        v21 = v20 - 48;
        if (v21 >= a2)
          break;
      }
      v22 = v16 * a2 + v21;
      if (v22 / a2 < v16)
        return result;
      ++v17;
      v16 = v22;
      if (!--v19)
        goto LABEL_39;
    }
    v22 = v16;
    v18 = v17;
    if (v6 == v19)
      return result;
LABEL_39:
    *(_QWORD *)this = v18;
    *((_QWORD *)this + 1) = v19;
    if ((v22 & 0x8000000000000000) == 0)
      *a3 = v22;
  }
  return result;
}

uint64_t llvm::getAsUnsignedInteger(unsigned __int8 *a1, uint64_t a2, unsigned int AutoSenseRadix, unint64_t *a4)
{
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned __int8 *v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  if (AutoSenseRadix)
  {
    if (!a2)
      return 1;
  }
  else
  {
    AutoSenseRadix = GetAutoSenseRadix((llvm::StringRef *)&v11);
    a2 = v12;
    if (!v12)
      return 1;
  }
  v5 = 0;
  v6 = v11;
  *a4 = 0;
  do
  {
    if ((char)*v6 < 48)
      break;
    v7 = *v6;
    if (v7 >= 0x3A)
    {
      if (v7 < 0x61)
      {
        if (v7 - 65 > 0x19)
          return a2 != 0;
        v8 = v7 - 55;
        if (v8 >= AutoSenseRadix)
          return a2 != 0;
      }
      else
      {
        if (v7 >= 0x7B)
          return a2 != 0;
        v8 = v7 - 87;
        if (v8 >= AutoSenseRadix)
          return a2 != 0;
      }
    }
    else
    {
      v8 = v7 - 48;
      if (v8 >= AutoSenseRadix)
        return a2 != 0;
    }
    v9 = v5 * AutoSenseRadix + v8;
    *a4 = v9;
    if (v9 / AutoSenseRadix < v5)
      return 1;
    ++v6;
    v5 = v9;
    --a2;
  }
  while (a2);
  return a2 != 0;
}

uint64_t llvm::getAsSignedInteger(uint64_t a1, uint64_t a2, llvm::StringRef *a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a1;
  v6 = a2;
  llvm::consumeSignedInteger((llvm *)&v5, a3, a4, (uint64_t *)a4);
  if (v6)
    return 1;
  else
    return result;
}

BOOL llvm::StringRef::consumeInteger(llvm::StringRef *this, unsigned int a2, llvm::APInt *a3)
{
  unsigned int AutoSenseRadix;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  char *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  unsigned int v34;
  void *v35;
  unsigned int v36;
  void *__p;
  unsigned int v38;
  __int128 v39;

  AutoSenseRadix = a2;
  v39 = *(_OWORD *)this;
  if (a2)
  {
    v6 = *((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
      goto LABEL_3;
    return 1;
  }
  AutoSenseRadix = GetAutoSenseRadix((llvm::StringRef *)&v39);
  v6 = *((_QWORD *)&v39 + 1);
  if (!*((_QWORD *)&v39 + 1))
    return 1;
LABEL_3:
  v7 = (char *)v39;
  if (*(_BYTE *)v39 != 48)
  {
    v8 = v39;
LABEL_11:
    *(_QWORD *)&v39 = v8;
    *((_QWORD *)&v39 + 1) = v6;
    v11 = -(int)v6;
    v12 = -1;
    do
    {
      v13 = 1 << ++v12;
      v11 += v6;
    }
    while (1 << v12 < AutoSenseRadix);
    v14 = *((_DWORD *)a3 + 2);
    if (v11 >= v14)
    {
      if (v11 > v14)
      {
        llvm::APInt::zext((const void **)a3, v11, (uint64_t)&__p);
        if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
          operator delete[](*(void **)a3);
        *(_QWORD *)a3 = __p;
        v14 = v38;
        *((_DWORD *)a3 + 2) = v38;
      }
    }
    else
    {
      v11 = *((_DWORD *)a3 + 2);
    }
    v38 = 1;
    __p = 0;
    v36 = 1;
    v35 = 0;
    if (v13 != AutoSenseRadix)
    {
      v34 = v11;
      if (v11 >= 0x41)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v33, AutoSenseRadix, 0);
        if (v38 >= 0x41 && __p)
          operator delete[](__p);
        __p = v33;
        v38 = v34;
        v34 = v11;
        llvm::APInt::initSlowCase((llvm::APInt *)&v33, 0, 0);
        if (v36 >= 0x41 && v35)
          operator delete[](v35);
      }
      else
      {
        v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
        if (!v11)
          LODWORD(v15) = 0;
        __p = (void *)(v15 & AutoSenseRadix);
        v38 = v34;
        v34 = v11;
        v33 = 0;
      }
      v35 = v33;
      v36 = v34;
      v14 = *((_DWORD *)a3 + 2);
    }
    if (v14 > 0x40)
    {
      **(_QWORD **)a3 = 0;
      bzero((void *)(*(_QWORD *)a3 + 8), ((((unint64_t)v14 + 63) >> 3) - 8) & 0xFFFFFFF8);
      v16 = (unsigned __int8 *)v39;
      if (v13 != AutoSenseRadix)
        goto LABEL_38;
    }
    else
    {
      *(_QWORD *)a3 = 0;
      v16 = (unsigned __int8 *)v39;
      if (v13 != AutoSenseRadix)
      {
LABEL_38:
        v17 = v7;
        while (*v7 >= 48)
        {
          v18 = *v7;
          if (v18 >= 0x3A)
          {
            if (v18 < 0x61)
            {
              if (v18 - 65 > 0x19)
                break;
              v19 = -55;
            }
            else
            {
              if (v18 >= 0x7B)
                break;
              v19 = -87;
            }
          }
          else
          {
            v19 = -48;
          }
          v20 = v19 + v18;
          if (v20 >= AutoSenseRadix)
            break;
          llvm::APInt::operator*=((uint64_t)a3, (const unint64_t **)&__p);
          v21 = v36;
          if (v36 > 0x40)
          {
            *(_QWORD *)v35 = v20;
            bzero((char *)v35 + 8, (((unint64_t)(v21 + 63) >> 3) - 8) & 0xFFFFFFF8);
          }
          else
          {
            if (v36)
              v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
            else
              v22 = 0;
            v35 = (void *)(v22 & v20);
          }
          llvm::APInt::operator+=((uint64_t)a3, (_QWORD **)&v35);
          v16 = (unsigned __int8 *)(v7 + 1);
          ++v17;
          ++v7;
          if (!--v6)
            goto LABEL_78;
        }
LABEL_80:
        *(_QWORD *)&v39 = v16;
        *((_QWORD *)&v39 + 1) = v6;
        v31 = *((_QWORD *)this + 1);
        v10 = v31 == v6;
        if (v31 != v6)
LABEL_81:
          *(_OWORD *)this = v39;
LABEL_82:
        if (v36 >= 0x41 && v35)
          operator delete[](v35);
        if (v38 >= 0x41 && __p)
          operator delete[](__p);
        return v10;
      }
    }
    v17 = v7;
    while (1)
    {
      if (*v7 < 48)
        goto LABEL_80;
      v23 = *v7;
      if (v23 >= 0x3A)
      {
        if (v23 <= 0x60)
        {
          if (v23 - 65 >= 0x1A)
            goto LABEL_80;
          v24 = -55;
        }
        else
        {
          if (v23 > 0x7A)
            goto LABEL_80;
          v24 = -87;
        }
      }
      else
      {
        v24 = -48;
      }
      v25 = v24 + v23;
      if (v25 >= AutoSenseRadix)
        goto LABEL_80;
      v26 = *((_DWORD *)a3 + 2);
      if (v26 <= 0x40)
        break;
      llvm::APInt::shlSlowCase((const void **)a3, v12);
      v26 = *((_DWORD *)a3 + 2);
      if (v26 >= 0x41)
      {
        **(_QWORD **)a3 |= v25;
        v16 = (unsigned __int8 *)(v7 + 1);
        ++v17;
        ++v7;
        if (!--v6)
          goto LABEL_78;
      }
      else
      {
LABEL_74:
        if (v26)
          v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
        else
          v29 = 0;
        *(_QWORD *)a3 = (*(_QWORD *)a3 | v25) & v29;
        v16 = (unsigned __int8 *)(v7 + 1);
        ++v17;
        ++v7;
        if (!--v6)
        {
LABEL_78:
          *(_QWORD *)&v39 = v17;
          *((_QWORD *)&v39 + 1) = v6;
          v30 = *((_QWORD *)this + 1);
          v10 = v30 == v6;
          if (v30 != v6)
            goto LABEL_81;
          goto LABEL_82;
        }
      }
    }
    v27 = *(_QWORD *)a3 << v12;
    if (v26 == v12)
      v27 = 0;
    v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
    if (!v26)
      v28 = 0;
    *(_QWORD *)a3 = v27 & v28;
    goto LABEL_74;
  }
  v8 = v39;
  while (--v6)
  {
    v9 = *++v7;
    ++v8;
    if (v9 != 48)
      goto LABEL_11;
  }
  v39 = (unint64_t)(v8 + 1);
  if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
    operator delete[](*(void **)a3);
  v10 = 0;
  *(_QWORD *)a3 = 0;
  *((_DWORD *)a3 + 2) = 64;
  *(_OWORD *)this = v39;
  return v10;
}

uint64_t llvm::StringRef::getAsInteger(llvm::StringRef *this, unsigned int a2, llvm::APInt *a3)
{
  uint64_t result;
  __int128 v4;

  v4 = *(_OWORD *)this;
  LODWORD(result) = llvm::StringRef::consumeInteger((llvm::StringRef *)&v4, a2, a3);
  if (*((_QWORD *)&v4 + 1))
    return 1;
  else
    return result;
}

uint64_t llvm::StringRef::getAsDouble(llvm::StringRef *this, double *a2, int a3)
{
  llvm::APFloatBase *v6;
  void *v7;
  llvm::APFloatBase *v8;
  uint64_t v9;
  llvm::APFloatBase *v10;
  void *v11;
  llvm::APFloatBase *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[3];
  llvm::APFloatBase *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v17, 0.0);
  v7 = llvm::APFloatBase::IEEEdouble(v6);
  llvm::APFloat::Storage::Storage(v16, &v17, v7);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v17);
  llvm::APFloat::convertFromString((uint64_t)&v15, *(unsigned __int8 **)this, *((_QWORD *)this + 1), 1, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v10 = v17;
    v17 = 0;
    if (v10)
    {
      v13 = v10;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v13, &v14);
      v8 = v13;
      if (v13)
        v8 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v13 + 8))(v13);
      v9 = 1;
LABEL_10:
      if ((v18 & 1) == 0)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else if ((_DWORD)v17)
  {
    v9 = 1;
    if ((v17 & 0x10) == 0 || !a3)
      goto LABEL_10;
  }
  v9 = 0;
  *a2 = llvm::APFloat::convertToDouble(&v15);
  if ((v18 & 1) == 0)
    goto LABEL_15;
LABEL_13:
  v8 = v17;
  v17 = 0;
  if (v8)
    v8 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v8 + 8))(v8);
LABEL_15:
  v11 = (void *)v16[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v8) == v11)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
  return v9;
}

unint64_t llvm::hash_value(_QWORD *a1, uint64_t a2)
{
  return llvm::hashing::detail::hash_combine_range_impl<char const>(a1, (uint64_t)a1 + a2);
}

unint64_t llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(_QWORD *a1, uint64_t a2)
{
  return llvm::hashing::detail::hash_combine_range_impl<char const>(a1, (uint64_t)a1 + a2);
}

uint64_t llvm::ComputeMappedEditDistance<char,unsigned int llvm::ComputeEditDistance<char>(llvm::ArrayRef<char>,llvm::ArrayRef<char>,BOOL,unsigned int)::{lambda(char const&)#1}>(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, int a5, unsigned int a6)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int *v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int *v57;
  _QWORD *v59;
  uint64_t v60;
  _QWORD v61[34];

  v61[32] = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    v12 = a4 - a2;
    if (a2 > a4)
      v12 = a2 - a4;
    if (v12 > a6)
      return a6 + 1;
  }
  v59 = v61;
  v60 = 0x4000000000;
  v14 = a4 + 1;
  if (a4 == -1)
  {
    if (!a2)
      return HIDWORD(v60);
    v13 = a6 + 1;
    v15 = v61;
    goto LABEL_19;
  }
  if (v14 < 0x41)
  {
    v16 = 0;
    v15 = v61;
    v17 = a4 + 1;
    goto LABEL_13;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, a4 + 1, 4);
  v16 = v60;
  v15 = v59;
  v17 = v14 - v60;
  if (v14 != v60)
LABEL_13:
    bzero((char *)v15 + 4 * v16, 4 * v17);
  LODWORD(v60) = v14;
  if (v14 >= 2)
  {
    v18 = 1;
    do
    {
      *((_DWORD *)v15 + v18) = v18;
      ++v18;
    }
    while (v60 > v18);
  }
  if (!a2)
    goto LABEL_85;
  v13 = a6 + 1;
  if (a4)
  {
LABEL_19:
    if (v14 <= 2)
      v19 = 2;
    else
      v19 = a4 + 1;
    if (a5)
    {
      if (a6)
      {
        v20 = v19 - 1;
        v21 = 1;
        while (1)
        {
          v22 = 0;
          *(_DWORD *)v15 = v21;
          v23 = v21;
          v24 = v21 - 1;
          v25 = v21;
          do
          {
            v26 = (char *)v15 + 4 * v22;
            if (*(unsigned __int8 *)(a1 + v21 - 1) != a3[v22])
              ++v24;
            v27 = *((_DWORD *)v26 + 1);
            if (v27 < v23)
              v23 = *((_DWORD *)v26 + 1);
            if (v23 + 1 < v24)
              ++v23;
            else
              v23 = v24;
            *((_DWORD *)v26 + 1) = v23;
            if (v23 < v25)
              v25 = v23;
            ++v22;
            v24 = v27;
          }
          while (v20 != v22);
          if (v25 > a6)
            goto LABEL_86;
          if (++v21 > a2)
            goto LABEL_85;
        }
      }
      v39 = 2;
      if (a2 + 1 > 2)
        v39 = a2 + 1;
      v40 = v19 - 1;
      v41 = 1;
      do
      {
        v42 = 0;
        *(_DWORD *)v15 = v41;
        v43 = v41;
        v44 = v41 - 1;
        do
        {
          v45 = (char *)v15 + 4 * v42;
          if (*(unsigned __int8 *)(a1 + v41 - 1) != a3[v42])
            ++v44;
          v46 = *((_DWORD *)v45 + 1);
          if (v46 < v43)
            v43 = *((_DWORD *)v45 + 1);
          if (v43 + 1 < v44)
            ++v43;
          else
            v43 = v44;
          *((_DWORD *)v45 + 1) = v43;
          ++v42;
          v44 = v46;
        }
        while (v40 != v42);
        ++v41;
      }
      while (v41 != v39);
    }
    else
    {
      if (a6)
      {
        v28 = 1;
        while (1)
        {
          v29 = a3;
          *(_DWORD *)v15 = v28;
          v30 = (unsigned int *)v15 + 1;
          v31 = v19 - 1;
          v32 = v28;
          v33 = v28 - 1;
          v34 = v28;
          do
          {
            v35 = *v30;
            v36 = *v29++;
            if (*(unsigned __int8 *)(a1 + v28 - 1) != v36)
            {
              v37 = v30 - 1;
              if (v35 < v32)
                v37 = v30;
              v33 = *v37 + 1;
            }
            *v30++ = v33;
            if (v33 < v34)
              v34 = v33;
            v32 = v33;
            v33 = v35;
            --v31;
          }
          while (v31);
          if (v34 > a6)
            break;
          if (++v28 > a2)
            goto LABEL_85;
        }
LABEL_86:
        if (v15 == v61)
          return v13;
LABEL_87:
        free(v15);
        return v13;
      }
      v47 = 2;
      if (a2 + 1 > 2)
        v47 = a2 + 1;
      v48 = v19 - 1;
      v49 = 1;
      do
      {
        v50 = a3;
        *(_DWORD *)v15 = v49;
        v51 = (int *)v15 + 1;
        v52 = v48;
        v53 = v49;
        v54 = v49 - 1;
        do
        {
          v55 = *v51;
          v56 = *v50++;
          if (*(unsigned __int8 *)(a1 + v49 - 1) != v56)
          {
            v57 = v51 - 1;
            if (v55 < v53)
              v57 = v51;
            v54 = *v57 + 1;
          }
          *v51++ = v54;
          v53 = v54;
          v54 = v55;
          --v52;
        }
        while (v52);
        ++v49;
      }
      while (v49 != v47);
    }
LABEL_85:
    v13 = *((unsigned int *)v15 + a4);
    goto LABEL_86;
  }
  if (!a6)
  {
    LODWORD(v38) = 2;
    if (a2 + 1 > 2)
      LODWORD(v38) = a2 + 1;
LABEL_84:
    *(_DWORD *)v15 = v38 - 1;
    goto LABEL_85;
  }
  v38 = 1;
  while (v38 <= a6)
  {
    if (++v38 > a2)
      goto LABEL_84;
  }
  *(_DWORD *)v15 = v38;
  if (v15 != v61)
    goto LABEL_87;
  return v13;
}

uint64_t llvm::ThreadPool::ThreadPool(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  llvm::sys::RWMutexImpl::RWMutexImpl((llvm::sys::RWMutexImpl *)(a1 + 40));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 850045863;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 1018212795;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 1018212795;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_BYTE *)(a1 + 296) = 1;
  *(_QWORD *)(a1 + 300) = a2;
  *(_DWORD *)(a1 + 308) = llvm::ThreadPoolStrategy::compute_thread_count((llvm::ThreadPoolStrategy *)&v5);
  return a1;
}

BOOL llvm::ThreadPool::grow(pthread_rwlock_t **this, int a2)
{
  pthread_rwlock_t *v4;
  pthread_rwlock_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int i;
  _DWORD *v10;
  pthread_t v11;
  pthread_rwlock_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  pthread_t *v17;
  _DWORD *v18;
  pthread_t v19;
  pthread_rwlock_t *v20;
  pthread_rwlock_t *v21;
  char *v22;
  unint64_t v23;
  pthread_rwlock_t *v24;
  pthread_rwlock_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  pthread_rwlock_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  pthread_rwlock_t **v39;

  v39 = this + 5;
  llvm::sys::RWMutexImpl::lock(this + 5);
  v4 = this[2];
  v5 = this[3];
  v6 = ((char *)v5 - (char *)v4) >> 3;
  v7 = *((unsigned int *)this + 77);
  if (v6 < v7)
  {
    v8 = (unint64_t)((char *)v5 - (char *)v4) >> 3;
    for (i = (int)v7 >= a2 ? a2 : *((_DWORD *)this + 77); i > (int)v8; v6 = v8)
    {
      v12 = this[4];
      if (v5 < v12)
      {
        v10 = operator new(0x10uLL);
        *(_QWORD *)v10 = this;
        v10[2] = v8;
        v11 = llvm::llvm_execute_on_thread_impl((void *(__cdecl *)(void *))llvm::thread::ThreadProxy<std::tuple<llvm::ThreadPool::grow(int)::$_0>>, v10, 0x100800000);
        v5->__sig = (uint64_t)v11;
        if (!v11)
          operator delete(v10);
        v5 = (pthread_rwlock_t *)((char *)v5 + 8);
        goto LABEL_10;
      }
      if ((v6 + 1) >> 61)
        abort();
      v13 = (char *)v12 - (char *)v4;
      v14 = v13 >> 2;
      if (v13 >> 2 <= v6 + 1)
        v14 = v6 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (pthread_t *)&v16[8 * v6];
      v18 = operator new(0x10uLL);
      *(_QWORD *)v18 = this;
      v18[2] = v8;
      v19 = llvm::llvm_execute_on_thread_impl((void *(__cdecl *)(void *))llvm::thread::ThreadProxy<std::tuple<llvm::ThreadPool::grow(int)::$_0>>, v18, 0x100800000);
      *v17 = v19;
      if (v19)
      {
        v21 = this[2];
        v20 = this[3];
        v22 = (char *)((char *)v20 - (char *)v21);
        if (v20 != v21)
          goto LABEL_24;
      }
      else
      {
        operator delete(v18);
        v21 = this[2];
        v20 = this[3];
        v22 = (char *)((char *)v20 - (char *)v21);
        if (v20 != v21)
        {
LABEL_24:
          v23 = (unint64_t)(v22 - 8);
          if (v23 < 0x78)
          {
            v24 = (pthread_rwlock_t *)&v16[8 * v6];
            goto LABEL_33;
          }
          v26 = v23 >> 3;
          if ((char *)v20 - 8 * (v23 >> 3) - 8 < (char *)v17)
          {
            v27 = (unint64_t)&v16[8 * v6 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8];
            v24 = (pthread_rwlock_t *)&v16[8 * v6];
            if (v27 < (unint64_t)v20)
              goto LABEL_46;
          }
          v28 = v26 + 1;
          v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
          v30 = (pthread_rwlock_t *)((char *)v20 - v29);
          v24 = (pthread_rwlock_t *)&v17[v29 / 0xFFFFFFFFFFFFFFF8];
          v31 = &v16[8 * v6 - 16];
          v32 = &v20[-1].__opaque[176];
          v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v35 = *((_OWORD *)v32 - 1);
            v34 = *(_OWORD *)v32;
            *((_OWORD *)v32 - 1) = 0uLL;
            *(_OWORD *)v32 = 0uLL;
            *((_OWORD *)v31 - 1) = v35;
            *(_OWORD *)v31 = v34;
            v31 -= 32;
            v32 -= 32;
            v33 -= 4;
          }
          while (v33);
          v20 = v30;
          if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_46:
            do
            {
LABEL_33:
              v36 = *(_QWORD *)&v20[-1].__opaque[184];
              v20 = (pthread_rwlock_t *)((char *)v20 - 8);
              v20->__sig = 0;
              *(_QWORD *)&v24[-1].__opaque[184] = v36;
              v24 = (pthread_rwlock_t *)((char *)v24 - 8);
            }
            while (v20 != v21);
          }
          v25 = this[2];
          v20 = this[3];
          goto LABEL_35;
        }
      }
      v25 = v20;
      v24 = (pthread_rwlock_t *)&v16[8 * v6];
LABEL_35:
      v5 = (pthread_rwlock_t *)(v17 + 1);
      this[2] = v24;
      this[3] = (pthread_rwlock_t *)(v17 + 1);
      this[4] = (pthread_rwlock_t *)&v16[8 * v15];
      while (v20 != v25)
      {
        v37 = *(_QWORD *)&v20[-1].__opaque[184];
        v20 = (pthread_rwlock_t *)((char *)v20 - 8);
        if (v37)
          std::terminate();
      }
      if (v25)
        operator delete(v25);
LABEL_10:
      this[3] = v5;
      v4 = this[2];
      v8 = ((char *)v5 - (char *)v4) >> 3;
    }
  }
  return llvm::sys::RWMutexImpl::unlock_shared(v39);
}

_QWORD *llvm::ThreadPool::processTasks(uint64_t a1, uint64_t a2)
{
  qos_class_t v4;
  NSObject *v5;
  std::mutex *v6;
  std::condition_variable *v7;
  _QWORD *result;
  uint64_t v9;
  qos_class_t v10;
  BOOL v11;
  NSObject *v12;
  _BOOL4 v13;
  BOOL v14;
  char v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  std::condition_variable *v87;
  std::condition_variable *v88;
  unsigned int v89;
  std::unique_lock<std::mutex> __lk;
  os_activity_scope_state_s state;
  _BYTE v92[24];
  _BYTE *v93;
  uint64_t v94;

  v4 = QOS_CLASS_UNSPECIFIED;
  v5 = 0;
  v94 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)(a1 + 104);
  v7 = (std::condition_variable *)(a1 + 168);
  v89 = (a2 >> 4) ^ (a2 >> 9);
  v86 = a1 + 272;
  v87 = (std::condition_variable *)(a1 + 216);
  v88 = (std::condition_variable *)(a1 + 168);
  do
  {
    v93 = 0;
    __lk.__m_ = v6;
    __lk.__owns_ = 1;
    std::mutex::lock(v6);
    v10 = *(_DWORD *)(a1 + 12);
    v11 = v10 == v4;
    v12 = *(NSObject **)a1;
    v13 = *(_QWORD *)a1 != (_QWORD)v5;
    if (*(_BYTE *)(a1 + 296) && (!*(_QWORD *)(a1 + 96) ? (v14 = v12 == v5) : (v14 = 0), v14))
    {
      while (1)
      {
        if (!v11)
        {
          pthread_set_qos_class_self_np(v10, 0);
          goto LABEL_36;
        }
        if (a2)
        {
          v16 = *(_DWORD *)(a1 + 288);
          if (!v16)
            goto LABEL_49;
          v17 = *(_QWORD *)(a1 + 272);
          v18 = v16 - 1;
          v19 = v18 & v89;
          v20 = *(_QWORD *)(v17 + 16 * (v18 & v89));
          if (v20 != a2)
            break;
        }
LABEL_18:
        std::condition_variable::wait(v7, &__lk);
        v10 = *(_DWORD *)(a1 + 12);
        v11 = v10 == v4;
        v12 = *(NSObject **)a1;
        v13 = *(_QWORD *)a1 != (_QWORD)v5;
        if (!*(_BYTE *)(a1 + 296) || *(_QWORD *)(a1 + 96) || v12 != v5)
          goto LABEL_10;
      }
      v21 = 1;
      while (v20 != -4096)
      {
        v22 = v19 + v21++;
        v19 = v22 & v18;
        v20 = *(_QWORD *)(v17 + 16 * (v22 & v18));
        if (v20 == a2)
          goto LABEL_18;
      }
LABEL_49:
      v15 = 0;
      if (*(_BYTE *)(a1 + 296))
        goto LABEL_51;
    }
    else
    {
LABEL_10:
      if (!v11)
      {
        pthread_set_qos_class_self_np(v10, 0);
        if (!v13)
        {
LABEL_36:
          v23 = 0;
          v24 = 0;
          v25 = 2;
          v4 = v10;
          if (!__lk.__owns_)
            goto LABEL_38;
LABEL_37:
          std::mutex::unlock(__lk.__m_);
          goto LABEL_38;
        }
        v4 = v10;
LABEL_28:
        if (v5)
          os_activity_scope_leave(&state);
        if (v12)
        {
          os_activity_scope_enter(v12, &state);
          v23 = 0;
          v24 = 0;
          v25 = 2;
          v5 = v12;
          if (__lk.__owns_)
            goto LABEL_37;
        }
        else
        {
          v5 = 0;
          v23 = 0;
          v24 = 0;
          v25 = 2;
          if (__lk.__owns_)
            goto LABEL_37;
        }
        goto LABEL_38;
      }
      if (v13)
        goto LABEL_28;
      v15 = 1;
      if (*(_BYTE *)(a1 + 296))
        goto LABEL_51;
    }
    if (!*(_QWORD *)(a1 + 96))
      goto LABEL_57;
LABEL_51:
    if (!a2)
      v15 = 1;
    if ((v15 & 1) == 0)
    {
LABEL_57:
      if (v5)
      {
        os_activity_scope_leave(&state);
        v5 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 1;
        if (__lk.__owns_)
          goto LABEL_37;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 1;
        if (__lk.__owns_)
          goto LABEL_37;
      }
      goto LABEL_38;
    }
    ++*(_DWORD *)(a1 + 264);
    v34 = *(_QWORD *)(a1 + 88);
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * (v34 / 0x66));
    v36 = v93;
    v93 = 0;
    if (v36 == v92)
    {
      v36 = v92;
      v37 = 4;
    }
    else
    {
      if (!v36)
        goto LABEL_64;
      v37 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_64:
    v38 = v35 + 40 * (v34 % 0x66);
    v39 = *(_QWORD *)(v38 + 24);
    if (v39)
    {
      if (v39 == v38)
      {
        v93 = v92;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v38 + 24) + 24))(*(_QWORD *)(v38 + 24), v92);
      }
      else
      {
        v93 = *(_BYTE **)(v38 + 24);
        *(_QWORD *)(v38 + 24) = 0;
      }
    }
    else
    {
      v93 = 0;
    }
    v40 = *(_QWORD *)(a1 + 88);
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * (v40 / 0x66));
    v42 = v40 % 0x66;
    v23 = *(_QWORD *)(v41 + 40 * (v40 % 0x66) + 32);
    if (v23)
    {
      v43 = *(_DWORD *)(a1 + 288);
      if (!v43)
        goto LABEL_128;
      v44 = *(_QWORD *)(a1 + 272);
      v45 = v43 - 1;
      v46 = (v43 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v47 = (uint64_t *)(v44 + 16 * v46);
      v48 = *v47;
      if (v23 == *v47)
      {
LABEL_86:
        ++*((_DWORD *)v47 + 2);
        goto LABEL_87;
      }
      v49 = 0;
      v50 = 1;
      while (v48 != -4096)
      {
        if (v49)
          v51 = 0;
        else
          v51 = v48 == -8192;
        if (v51)
          v49 = v47;
        v52 = v46 + v50++;
        v46 = v52 & v45;
        v47 = (uint64_t *)(v44 + 16 * (v52 & v45));
        v48 = *v47;
        if (v23 == *v47)
          goto LABEL_86;
      }
      if (v49)
        v47 = v49;
      v76 = *(_DWORD *)(a1 + 280);
      if (4 * v76 + 4 < 3 * v43)
      {
        if (v43 + ~v76 - *(_DWORD *)(a1 + 284) > v43 >> 3)
        {
          v53 = *v47;
          ++*(_DWORD *)(a1 + 280);
          if (v53 == -4096)
          {
LABEL_85:
            *v47 = v23;
            *((_DWORD *)v47 + 2) = 0;
            v40 = *(_QWORD *)(a1 + 88);
            v41 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * (v40 / 0x66));
            v42 = v40 % 0x66;
            goto LABEL_86;
          }
LABEL_84:
          --*(_DWORD *)(a1 + 284);
          goto LABEL_85;
        }
      }
      else
      {
LABEL_128:
        v43 *= 2;
      }
      llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v86, v43);
      v77 = *(_QWORD *)(a1 + 272);
      v78 = *(_DWORD *)(a1 + 288) - 1;
      v79 = v78 & ((v23 >> 4) ^ (v23 >> 9));
      v47 = (uint64_t *)(v77 + 16 * v79);
      v80 = *v47;
      if (v23 == *v47)
      {
LABEL_130:
        ++*(_DWORD *)(a1 + 280);
        if (v23 == -4096)
          goto LABEL_85;
      }
      else
      {
        v81 = 0;
        v82 = 1;
        while (v80 != -4096)
        {
          if (v81)
            v83 = 0;
          else
            v83 = v80 == -8192;
          if (v83)
            v81 = v47;
          v84 = v79 + v82++;
          v79 = v84 & v78;
          v47 = (uint64_t *)(v77 + 16 * (v84 & v78));
          v80 = *v47;
          if (v23 == *v47)
            goto LABEL_130;
        }
        if (v81)
          v47 = v81;
        v85 = *v47;
        ++*(_DWORD *)(a1 + 280);
        if (v85 == -4096)
          goto LABEL_85;
      }
      goto LABEL_84;
    }
LABEL_87:
    v54 = (_QWORD *)(v41 + 40 * v42);
    v55 = (_QWORD *)v54[3];
    if (v55 == v54)
    {
      v55 = (_QWORD *)(v41 + 40 * v42);
      v56 = 4;
    }
    else
    {
      if (!v55)
        goto LABEL_92;
      v56 = 5;
    }
    (*(void (**)(void))(*v55 + 8 * v56))();
    v40 = *(_QWORD *)(a1 + 88);
LABEL_92:
    v57 = *(_QWORD *)(a1 + 96) - 1;
    v58 = v40 + 1;
    *(_QWORD *)(a1 + 88) = v58;
    *(_QWORD *)(a1 + 96) = v57;
    if (v58 >= 0xCC)
    {
      operator delete(**(void ***)(a1 + 64));
      v25 = 0;
      *(_QWORD *)(a1 + 64) += 8;
      *(_QWORD *)(a1 + 88) -= 102;
      v24 = 1;
      if (__lk.__owns_)
        goto LABEL_37;
    }
    else
    {
      v25 = 0;
      v24 = 1;
      if (__lk.__owns_)
        goto LABEL_37;
    }
LABEL_38:
    if (!v24)
      goto LABEL_107;
    if (!v93)
      std::__throw_bad_function_call[abi:nn180100]();
    (*(void (**)(_BYTE *))(*(_QWORD *)v93 + 48))(v93);
    std::mutex::lock(v6);
    v26 = *(_DWORD *)(a1 + 264) - 1;
    *(_DWORD *)(a1 + 264) = v26;
    if (!v23)
    {
      if (!v26 && !*(_QWORD *)(a1 + 96))
        goto LABEL_120;
      goto LABEL_105;
    }
    v27 = *(_QWORD *)(a1 + 272);
    v28 = *(unsigned int *)(a1 + 288);
    v29 = v23 >> 4;
    if ((_DWORD)v28)
    {
      LODWORD(v30) = (v28 - 1) & (v29 ^ (v23 >> 9));
      v31 = (uint64_t *)(v27 + 16 * v30);
      v32 = *v31;
      if (*v31 == v23)
      {
        v33 = *((_DWORD *)v31 + 2) - 1;
        *((_DWORD *)v31 + 2) = v33;
        if (v33)
          goto LABEL_44;
        goto LABEL_103;
      }
      v59 = 1;
      while (v32 != -4096)
      {
        v60 = v30 + v59++;
        v30 = v60 & (v28 - 1);
        v32 = *(_QWORD *)(v27 + 16 * v30);
        if (v32 == v23)
        {
          v31 = (uint64_t *)(v27 + 16 * v30);
          v61 = *((_DWORD *)v31 + 2) - 1;
          *((_DWORD *)v31 + 2) = v61;
          if (v61)
            goto LABEL_44;
          goto LABEL_103;
        }
      }
    }
    v31 = (uint64_t *)(v27 + 16 * v28);
    v62 = *((_DWORD *)v31 + 2) - 1;
    *((_DWORD *)v31 + 2) = v62;
    if (v62)
    {
LABEL_44:
      if (!(_DWORD)v28)
        goto LABEL_114;
      goto LABEL_104;
    }
LABEL_103:
    *v31 = -8192;
    *(int32x2_t *)(a1 + 280) = vadd_s32(*(int32x2_t *)(a1 + 280), (int32x2_t)0x1FFFFFFFFLL);
    v27 = *(_QWORD *)(a1 + 272);
    if (!(_DWORD)v28)
      goto LABEL_114;
LABEL_104:
    v63 = v28 - 1;
    v64 = v63 & (v29 ^ (v23 >> 9));
    v65 = *(_QWORD *)(v27 + 16 * v64);
    if (v65 != v23)
    {
      v66 = 1;
      while (v65 != -4096)
      {
        v67 = v64 + v66++;
        v64 = v67 & v63;
        v65 = *(_QWORD *)(v27 + 16 * v64);
        if (v65 == v23)
          goto LABEL_105;
      }
LABEL_114:
      v68 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(a1 + 72) != v68)
      {
        v69 = *(_QWORD *)(a1 + 88);
        v70 = (unint64_t *)(v68 + 8 * (v69 / 0x66));
        v71 = *v70;
        v72 = *v70 + 40 * (v69 % 0x66);
        v73 = *(_QWORD *)(v68 + 8 * ((*(_QWORD *)(a1 + 96) + v69) / 0x66)) + 40 * ((*(_QWORD *)(a1 + 96) + v69) % 0x66);
        while (v72 != v73)
        {
          if (*(_QWORD *)(v72 + 32) == v23)
            goto LABEL_105;
          v72 += 40;
          if (v72 - v71 == 4080)
          {
            v74 = v70[1];
            ++v70;
            v71 = v74;
            v72 = v74;
          }
        }
      }
LABEL_120:
      v75 = *(unsigned __int8 *)(a1 + 8);
      if (*(_BYTE *)(a1 + 8))
      {
        os_release(*(void **)a1);
        *(_QWORD *)a1 = 0;
      }
      std::mutex::unlock(v6);
      std::condition_variable::notify_all(v87);
      if (v23 || v75)
        std::condition_variable::notify_all(v88);
      goto LABEL_106;
    }
LABEL_105:
    std::mutex::unlock(v6);
LABEL_106:
    v25 = 0;
LABEL_107:
    result = v93;
    if (v93 == v92)
    {
      result = v92;
      v9 = 4;
      v7 = v88;
LABEL_3:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
      continue;
    }
    v7 = v88;
    if (v93)
    {
      v9 = 5;
      goto LABEL_3;
    }
  }
  while ((v25 | 2) == 2);
  return result;
}

void llvm::ThreadPool::wait(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t **v4;
  pthread_t current_id_impl;
  mlir::GenericProgramPoint **v6;
  mlir::GenericProgramPoint **v7;
  pthread_t v8;
  _opaque_pthread_t *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::unique_lock<std::mutex> v25;

  v4 = (pthread_rwlock_t **)(a1 + 40);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 40));
  current_id_impl = llvm::llvm_thread_get_current_id_impl();
  v6 = *(mlir::GenericProgramPoint ***)(a1 + 16);
  v7 = *(mlir::GenericProgramPoint ***)(a1 + 24);
  if (v6 == v7)
  {
LABEL_5:
    llvm::sys::RWMutexImpl::unlock_shared(v4);
    v25.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 104);
    v25.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 104));
    v10 = (a2 >> 4) ^ (a2 >> 9);
    v11 = *(_DWORD *)(a1 + 288);
    if (v11)
    {
      while (1)
      {
        v12 = *(_QWORD *)(a1 + 272);
        v13 = v11 - 1;
        v14 = v13 & v10;
        v15 = *(_QWORD *)(v12 + 16 * (v13 & v10));
        if (v15 != a2)
          break;
LABEL_7:
        std::condition_variable::wait((std::condition_variable *)(a1 + 216), &v25);
        v11 = *(_DWORD *)(a1 + 288);
        if (!v11)
          goto LABEL_13;
      }
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v14 + v16++;
        v14 = v17 & v13;
        v15 = *(_QWORD *)(v12 + 16 * v14);
        if (v15 == a2)
          goto LABEL_7;
      }
    }
LABEL_13:
    v18 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) != v18)
    {
      v19 = *(_QWORD *)(a1 + 88);
      v20 = (unint64_t *)(v18 + 8 * (v19 / 0x66));
      v21 = *v20;
      v22 = *v20 + 40 * (v19 % 0x66);
      v23 = *(_QWORD *)(v18 + 8 * ((*(_QWORD *)(a1 + 96) + v19) / 0x66)) + 40 * ((*(_QWORD *)(a1 + 96) + v19) % 0x66);
      while (v22 != v23)
      {
        if (*(_QWORD *)(v22 + 32) == a2)
          goto LABEL_7;
        v22 += 40;
        if (v22 - v21 == 4080)
        {
          v24 = v20[1];
          ++v20;
          v21 = v24;
          v22 = v24;
        }
      }
    }
    if (v25.__owns_)
      std::mutex::unlock(v25.__m_);
  }
  else
  {
    v8 = current_id_impl;
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(*v6);
      if (v8 == v9)
        break;
      if (++v6 == v7)
        goto LABEL_5;
    }
    llvm::sys::RWMutexImpl::unlock_shared(v4);
    llvm::ThreadPool::processTasks(a1, a2);
  }
}

void llvm::ThreadPool::~ThreadPool(llvm::ThreadPool *this)
{
  std::mutex *v2;
  _opaque_pthread_t *v3;
  _opaque_pthread_t **v4;
  _opaque_pthread_t **i;

  v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  *((_BYTE *)this + 296) = 0;
  std::mutex::unlock(v2);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 168));
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)this + 5);
  v4 = (_opaque_pthread_t **)*((_QWORD *)this + 2);
  for (i = (_opaque_pthread_t **)*((_QWORD *)this + 3); v4 != i; ++v4)
  {
    llvm::llvm_thread_join_impl(*v4, v3);
    *v4 = 0;
  }
  llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)this + 5);
  llvm::deallocate_buffer(*((llvm **)this + 34), (void *)(16 * *((unsigned int *)this + 72)));
}

BOOL llvm::ThreadPool::setActivity(llvm::ThreadPool *this, void *a2, char a3)
{
  std::mutex *v6;

  v6 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  *(_QWORD *)this = a2;
  os_retain(a2);
  *((_BYTE *)this + 8) = a3;
  std::mutex::unlock(v6);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 168));
  return llvm::ThreadPool::grow((pthread_rwlock_t **)this, *((_DWORD *)this + 77));
}

void llvm::ThreadPool::clearActivity(llvm::ThreadPool *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  if (*((_DWORD *)this + 66) || *((_QWORD *)this + 12))
  {
    *((_BYTE *)this + 8) = 1;
    std::mutex::unlock(v2);
  }
  else
  {
    os_release(*(void **)this);
    *(_QWORD *)this = 0;
    std::mutex::unlock(v2);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 168));
  }
}

void llvm::ThreadPool::raiseQOSIfNeeded(llvm::ThreadPool *this, qos_class_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  if (*((_DWORD *)this + 3) >= a2)
  {
    std::mutex::unlock(v4);
  }
  else
  {
    *((_DWORD *)this + 3) = a2;
    std::mutex::unlock(v4);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 168));
  }
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_15;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0x66];
  v6 = (unint64_t)*v5;
  v7 = (unint64_t)*v5 + 40 * (v4 % 0x66);
  v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x66] + 40 * ((*(_QWORD *)(a1 + 40) + v4) % 0x66);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *(_QWORD **)(v7 + 24);
    if (v9 == (_QWORD *)v7)
    {
      v9 = (_QWORD *)v7;
      v10 = 4;
    }
    else
    {
      if (!v9)
        goto LABEL_10;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    v6 = (unint64_t)*v5;
LABEL_10:
    v7 += 40;
    if (v7 - v6 == 4080)
    {
      v11 = (unint64_t)v5[1];
      ++v5;
      v6 = v11;
      v7 = v11;
    }
  }
  while (v7 != v8);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_13:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_15:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 51;
LABEL_20:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 102;
    goto LABEL_20;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::thread::ThreadProxy<std::tuple<llvm::ThreadPool::grow(int)::$_0>>(uint64_t *a1, const llvm::Twine *a2)
{
  uint64_t v3;
  _QWORD v5[4];
  _QWORD v6[2];
  _QWORD *v7;
  _QWORD *v8;
  __int16 v9;

  v3 = *a1;
  v5[0] = "llvm-worker-{0}";
  v5[1] = 15;
  v5[2] = &v7;
  v5[3] = 1;
  v6[0] = &unk_1E0E23D40;
  v6[1] = a1 + 1;
  v7 = v6;
  v8 = v5;
  v9 = 263;
  llvm::set_thread_name((llvm *)&v8, a2);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)(v3 + 300));
  llvm::ThreadPool::processTasks(v3, 0);
  operator delete(a1);
  return 0;
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<int const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

void llvm::initTimerOptions(llvm *this)
{
  if (atomic_load(qword_1ECD333D0))
  {
    if (atomic_load((unint64_t *)&qword_1ECD333E8))
      goto LABEL_3;
  }
  else
  {
    if (atomic_load((unint64_t *)&qword_1ECD333E8))
    {
LABEL_3:
      if (atomic_load(qword_1ECD33400))
        return;
LABEL_7:
      return;
    }
  }
  if (!atomic_load(qword_1ECD33400))
    goto LABEL_7;
}

llvm *llvm::CreateInfoOutputFile@<X0>(llvm **a1@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  llvm *v7;
  llvm *v8;
  char v9;
  char *v10;
  uint64_t v11;
  llvm *result;
  llvm::raw_ostream *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  size_t v19;
  llvm::raw_ostream *v20;
  _OWORD *v21;
  void *v22;
  int v23;
  const std::error_category *v24;

  if (atomic_load(qword_1ECD33418))
  {
    v4 = qword_1ECD33418[0];
    v5 = *(char *)(qword_1ECD33418[0] + 23);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ECD33418, (void *(*)(void))llvm::object_creator<std::string>::call, (void (*)(void *))llvm::object_deleter<std::string>::call);
    v4 = qword_1ECD33418[0];
    v5 = *(char *)(qword_1ECD33418[0] + 23);
    if ((v5 & 0x80000000) == 0)
    {
LABEL_3:
      if (v5 != 1)
      {
        if ((_BYTE)v5)
          goto LABEL_10;
        goto LABEL_19;
      }
      if (*(_BYTE *)v4 == 45)
        goto LABEL_21;
      goto LABEL_10;
    }
  }
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6)
  {
LABEL_19:
    v15 = operator new(0x60uLL);
    v16 = 2;
LABEL_22:
    result = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream(v15, v16, 0, 0, 0);
    *a1 = result;
    return result;
  }
  if (v6 == 1 && **(_BYTE **)v4 == 45)
  {
LABEL_21:
    v15 = operator new(0x60uLL);
    v16 = 1;
    goto LABEL_22;
  }
LABEL_10:
  v23 = 0;
  v24 = std::system_category();
  v7 = (llvm *)operator new(0x60uLL);
  v8 = v7;
  v9 = *(_BYTE *)(v4 + 23);
  if (v9 >= 0)
    v10 = (char *)v4;
  else
    v10 = *(char **)v4;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v4 + 23);
  else
    v11 = *(_QWORD *)(v4 + 8);
  result = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v7, v10, v11, (uint64_t)&v23, 7);
  if (v23)
  {
    v13 = (llvm::raw_ostream *)llvm::errs(result);
    v14 = (void *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 0x1FuLL)
    {
      qmemcpy(v14, "Error opening info-output-file '", 32);
      *((_QWORD *)v13 + 4) += 32;
    }
    else
    {
      v13 = llvm::raw_ostream::write(v13, "Error opening info-output-file '", 0x20uLL);
    }
    v17 = *(char *)(v4 + 23);
    if (v17 >= 0)
      v18 = (const char *)v4;
    else
      v18 = *(const char **)v4;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v4 + 23);
    else
      v19 = *(_QWORD *)(v4 + 8);
    v20 = llvm::raw_ostream::write(v13, v18, v19);
    v21 = (_OWORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 0xFuLL)
    {
      *v21 = *(_OWORD *)" for appending!\n";
      *((_QWORD *)v20 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v20, " for appending!\n", 0x10uLL);
    }
    v22 = operator new(0x60uLL);
    *a1 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream(v22, 2, 0, 0, 0);
    return (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    *a1 = v8;
  }
  return result;
}

_QWORD *llvm::object_creator<std::string>::call()
{
  _QWORD *result;

  result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

void llvm::object_deleter<std::string>::call(void **__p)
{
  void **v1;

  if (__p)
  {
    v1 = __p;
    if (*((char *)__p + 23) < 0)
    {
      operator delete(*__p);
      __p = v1;
    }
    operator delete(__p);
  }
}

uint64_t `anonymous namespace'::CreateTrackSpace::call(_anonymous_namespace_::CreateTrackSpace *this)
{
  void *v1;
  int v3;
  __int128 v4;

  v1 = operator new(0xC0uLL);
  *(_QWORD *)&v4 = "Enable -time-passes memory tracking (this may be slow)";
  *((_QWORD *)&v4 + 1) = 54;
  v3 = 1;
  return llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [13],llvm::cl::desc,llvm::cl::OptionHidden>((uint64_t)v1, (int8x16_t *)"track-memory", &v4, &v3);
}

uint64_t llvm::object_deleter<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>>::call(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [13],llvm::cl::desc,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _WORD *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t *GeneralCategory;
  uint64_t v11;
  const unsigned __int8 *v12;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v8 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v9 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v11 = *(unsigned int *)(a1 + 72);
  if (v11 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v12 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v12);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t `anonymous namespace'::CreateInfoOutputFilename::call(_anonymous_namespace_::CreateInfoOutputFilename *this)
{
  void *v1;
  const std::string *v4;
  int v5;
  __int128 v6;
  __int128 v7;

  v1 = operator new(0xD8uLL);
  *(_QWORD *)&v7 = "filename";
  *((_QWORD *)&v7 + 1) = 8;
  *(_QWORD *)&v6 = "File to append -stats and -timer output to";
  *((_QWORD *)&v6 + 1) = 42;
  v5 = 1;
  if (!atomic_load(qword_1ECD33418))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ECD33418, (void *(*)(void))llvm::object_creator<std::string>::call, (void (*)(void *))llvm::object_deleter<std::string>::call);
  v4 = (const std::string *)qword_1ECD33418[0];
  return llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::opt<char [17],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::LocationClass<std::string>>((uint64_t)v1, (int8x16_t *)"info-output-file", &v7, &v6, &v5, &v4);
}

uint64_t llvm::object_deleter<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>>::call(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::opt<char [17],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::LocationClass<std::string>>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _OWORD *a4, _WORD *a5, const std::string **a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E0E22F48;
  *(_QWORD *)a1 = &unk_1E0E234B8;
  *(_QWORD *)(a1 + 176) = &unk_1E0E23B38;
  *(_QWORD *)(a1 + 184) = &unk_1E0E4FAA0;
  *(_QWORD *)(a1 + 208) = a1 + 184;
  llvm::cl::apply<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>,char [17],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::LocationClass<std::string>>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

std::string *llvm::cl::apply<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>,char [17],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::LocationClass<std::string>>(uint64_t a1, int8x16_t *__s, _OWORD *a3, _OWORD *a4, _WORD *a5, const std::string **a6)
{
  const unsigned __int8 *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  const std::string *v16;
  const char *v17;
  __int16 v18;

  v12 = (const unsigned __int8 *)strlen(__s->i8);
  llvm::cl::Option::setArgStr(a1, __s, v12);
  *(_OWORD *)(a1 + 48) = *a3;
  *(_OWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  if (*(_QWORD *)(a1 + 128))
  {
    v17 = "cl::location(x) specified more than once!";
    v18 = 259;
    v14 = (llvm::raw_ostream *)llvm::errs(v13);
    return (std::string *)llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v17, 0, 0, v14);
  }
  else
  {
    v16 = *a6;
    *(_QWORD *)(a1 + 128) = *a6;
    *(_BYTE *)(a1 + 168) = 1;
    return std::string::operator=((std::string *)(a1 + 144), v16);
  }
}

uint64_t llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  std::string __p;
  std::string __dst;

  memset(&__p, 0, sizeof(__p));
  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_18;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
    memmove(p_dst, __src, __len);
    p_dst->__r_.__value_.__s.__data_[__len] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
    goto LABEL_11;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_12:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
  __p = __dst;
  std::string::operator=(*(std::string **)(a1 + 128), &__p);
  *(_WORD *)(a1 + 12) = a2;
  v13 = *(_QWORD *)(a1 + 208);
  if (!v13)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_18:
    abort();
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 48))(v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::~opt(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &unk_1E0E234B8;
  v2 = (_QWORD *)(a1 + 184);
  v3 = *(_QWORD **)(a1 + 208);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 136) = &off_1E0E23088;
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  *(_QWORD *)a1 = &unk_1E0E23930;
  v5 = *(void **)(a1 + 96);
  if (v5 != *(void **)(a1 + 88))
    free(v5);
  v6 = *(void **)(a1 + 64);
  if (v6 != (void *)(a1 + 80))
    free(v6);
  return a1;
}

void llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &unk_1E0E234B8;
  v2 = __p + 184;
  v3 = (char *)*((_QWORD *)__p + 26);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)__p + 17) = &off_1E0E23088;
  if (__p[167] < 0)
    operator delete(*((void **)__p + 18));
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 176, a1);
}

llvm::raw_ostream *llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 176), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  uint64_t v4;
  const void **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  int v12;
  const void *v13;
  size_t v14;

  v4 = (uint64_t)result;
  v5 = (const void **)*((_QWORD *)result + 16);
  if ((a3 & 1) == 0 && *((_BYTE *)result + 168))
  {
    v6 = *((unsigned __int8 *)result + 167);
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)*((unsigned __int8 *)result + 167);
    else
      v7 = (unsigned __int8 *)*((_QWORD *)result + 19);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = (unsigned __int8 *)v5[1];
    if (v7 == v8)
    {
      v10 = (const void **)((char *)result + 144);
      if (v9 >= 0)
        v11 = (unsigned __int8 *)*((_QWORD *)result + 16);
      else
        v11 = (unsigned __int8 *)*v5;
      if ((v6 & 0x80) != 0)
      {
        result = (llvm::raw_ostream *)memcmp(*v10, v11, *((_QWORD *)result + 19));
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (!*((_BYTE *)result + 167))
          return result;
        while (*(unsigned __int8 *)v10 == *v11)
        {
          v10 = (const void **)((char *)v10 + 1);
          ++v11;
          if (!--v6)
            return result;
        }
      }
    }
  }
  v12 = *((char *)v5 + 23);
  if (v12 >= 0)
    v13 = v5;
  else
    v13 = *v5;
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)v5 + 23);
  else
    v14 = (size_t)v5[1];
  return llvm::cl::parser<std::string>::printOptionDiff((llvm *)(v4 + 176), v4, v13, v14, v4 + 136, a2);
}

void llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::setDefault(uint64_t a1)
{
  std::string __str;

  if (*(_BYTE *)(a1 + 168))
  {
    std::string::operator=(*(std::string **)(a1 + 128), (const std::string *)(a1 + 144));
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
    std::string::operator=(*(std::string **)(a1 + 128), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

_QWORD *std::__function::__func<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E0E4FAA0;
  return result;
}

void std::__function::__func<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E0E4FAA0;
}

uint64_t std::__function::__func<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018125E715)
    return a1 + 8;
  if (((v3 & 0x800000018125E715 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018125E715))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018125E715 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target_type()
{
}

uint64_t `anonymous namespace'::CreateSortTimers::call(_anonymous_namespace_::CreateSortTimers *this)
{
  void *v1;
  int v3;
  char v4;
  char *v5;
  __int128 v6;

  v1 = operator new(0xC0uLL);
  *(_QWORD *)&v6 = "In the report, sort the timers in each group in wall clock time order";
  *((_QWORD *)&v6 + 1) = 69;
  v4 = 1;
  v5 = &v4;
  v3 = 1;
  return llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [12],llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((uint64_t)v1, (int8x16_t *)"sort-timers", &v6, &v5, &v3);
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [12],llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _BYTE **a4, _WORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  _BYTE *v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_OWORD *)(a1 + 32) = *a3;
  v15 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v15;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::format_object<long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller(llvm::ToolOutputFile::CleanupInstaller *this)
{
  size_t v2;
  char v3;
  size_t v4;
  uint64_t v5;
  llvm::ToolOutputFile::CleanupInstaller *v6;
  llvm::ToolOutputFile::CleanupInstaller *v7;
  size_t v8;
  llvm::ToolOutputFile::CleanupInstaller *v9;
  __int16 v10;

  v2 = *((unsigned __int8 *)this + 23);
  v3 = v2;
  v4 = *((_QWORD *)this + 1);
  if ((v2 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)this + 23);
  else
    v5 = *((_QWORD *)this + 1);
  if (v5 == 1)
  {
    v6 = *(llvm::ToolOutputFile::CleanupInstaller **)this;
    if ((v2 & 0x80u) == 0)
      v6 = this;
    if (*(_BYTE *)v6 == 45)
    {
      if ((v2 & 0x80) == 0)
        return;
LABEL_19:
      operator delete(*(void **)this);
      return;
    }
  }
  if (!*((_BYTE *)this + 24))
  {
    v10 = 260;
    v9 = this;
    llvm::sys::fs::remove((llvm::sys::fs *)&v9, (const llvm::Twine *)1);
    v2 = *((unsigned __int8 *)this + 23);
    v4 = *((_QWORD *)this + 1);
    v3 = *((_BYTE *)this + 23);
  }
  if (v3 >= 0)
    v7 = this;
  else
    v7 = *(llvm::ToolOutputFile::CleanupInstaller **)this;
  if (v3 >= 0)
    v8 = v2;
  else
    v8 = v4;
  llvm::sys::DontRemoveFileOnSignal(v7, v8);
  if ((*((_BYTE *)this + 23) & 0x80) != 0)
    goto LABEL_19;
}

_QWORD *llvm::ToolOutputFile::ToolOutputFile(_QWORD *__dst, _BYTE *__src, size_t __len, uint64_t a4, int a5)
{
  char *v10;
  llvm *v11;
  size_t v12;
  size_t v13;
  char *v14;
  const std::error_category *v15;
  uint64_t v16;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v14 = (char *)operator new(v12 + 1);
    __dst[1] = __len;
    __dst[2] = v13 | 0x8000000000000000;
    *__dst = v14;
    memmove(v14, __src, __len);
    v10 = &v14[__len];
    goto LABEL_10;
  }
  *((_BYTE *)__dst + 23) = __len;
  v10 = (char *)__dst;
  if (!__len)
  {
LABEL_10:
    *v10 = 0;
    *((_BYTE *)__dst + 24) = 0;
    goto LABEL_11;
  }
  memmove(__dst, __src, __len);
  *((_BYTE *)__dst + __len) = 0;
  *((_BYTE *)__dst + 24) = 0;
  if (__len != 1 || *__src != 45)
  {
LABEL_11:
    llvm::sys::RemoveFileOnSignal(__src, __len);
    *((_BYTE *)__dst + 32) = 0;
    v11 = (llvm *)(__dst + 4);
    *((_BYTE *)__dst + 128) = 0;
    if (__len != 1)
      goto LABEL_14;
    goto LABEL_12;
  }
  *((_BYTE *)__dst + 32) = 0;
  v11 = (llvm *)(__dst + 4);
  *((_BYTE *)__dst + 128) = 0;
LABEL_12:
  if (*__src == 45)
  {
    __dst[17] = llvm::outs(v11);
    v15 = std::system_category();
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v15;
    return __dst;
  }
LABEL_14:
  v16 = llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v11, __src, __len, a4, a5);
  *((_BYTE *)__dst + 128) = 1;
  __dst[17] = v16;
  if (*(_DWORD *)a4)
    *((_BYTE *)__dst + 24) = 1;
  return __dst;
}

void llvm::Twine::str(llvm::Twine *this@<X0>, std::string *a2@<X8>)
{
  int v3;
  __int128 *v4;
  __int128 v5;
  llvm::formatv_object_base *v6;
  const char *v7;
  unint64_t v8;
  size_t v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)this + 32);
  if (v3 != 7)
  {
    if (v3 == 4 && *((_BYTE *)this + 33) == 1)
    {
      v4 = *(__int128 **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      }
      else
      {
        v5 = *v4;
        a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
      }
      return;
    }
LABEL_10:
    v15 = &v17;
    v16 = xmmword_181236410;
    v7 = llvm::Twine::toStringRef((uint64_t)this, (uint64_t)&v15);
    if (!v7)
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      v11 = v15;
      if (v15 == &v17)
        return;
LABEL_22:
      free(v11);
      return;
    }
    v9 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v10 = v7;
    if (v8 >= 0x17)
    {
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      v14 = (std::string *)operator new(v12 + 1);
      a2->__r_.__value_.__l.__size_ = v9;
      a2->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      a2 = v14;
    }
    else
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v8;
      if (!v8)
      {
LABEL_21:
        a2->__r_.__value_.__s.__data_[v9] = 0;
        v11 = v15;
        if (v15 == &v17)
          return;
        goto LABEL_22;
      }
    }
    memmove(a2, v10, v9);
    goto LABEL_21;
  }
  if (*((_BYTE *)this + 33) != 1)
    goto LABEL_10;
  v6 = *(llvm::formatv_object_base **)this;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v16) = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  v17 = 0;
  v18 = 0;
  *((_QWORD *)&v16 + 1) = 0;
  v15 = &unk_1E0E22B10;
  v22 = a2;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v15, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v15, v6);
  if (v18 != *((_QWORD *)&v16 + 1))
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v15);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
}

const char *llvm::Twine::toStringRef(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *result;
  void *v6;
  void *v7;
  const char *v8;
  void (**v10)(llvm::raw_svector_ostream *__hidden);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 33) == 1)
  {
    v4 = 0;
    switch(*(_BYTE *)(a1 + 32))
    {
      case 1:
        goto LABEL_4;
      case 3:
        v8 = *(const char **)a1;
        if (!*(_QWORD *)a1)
          return 0;
        strlen(*(const char **)a1);
        return v8;
      case 4:
        if (*(char *)(*(_QWORD *)a1 + 23) >= 0)
          return *(const char **)a1;
        else
          return **(const char ***)a1;
      case 5:
      case 6:
        v4 = *(const char **)a1;
LABEL_4:
        result = v4;
        break;
      default:
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v10 = off_1E0E22B88;
    v18 = a2;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v10, 0, 0, 0);
    v7 = llvm::Twine::printOneChild(v6, (llvm::raw_ostream *)&v10, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 32));
    llvm::Twine::printOneChild(v7, (llvm::raw_ostream *)&v10, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 33));
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v10);
    return *(const char **)a2;
  }
  return result;
}

void llvm::Twine::toVector(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void (**v5)(llvm::raw_svector_ostream *__hidden);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = off_1E0E22B88;
  v13 = a2;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v5, 0, 0, 0);
  v4 = llvm::Twine::printOneChild(v3, (llvm::raw_ostream *)&v5, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 32));
  llvm::Twine::printOneChild(v4, (llvm::raw_ostream *)&v5, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 33));
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
}

void *llvm::Twine::print(llvm::Twine *this, llvm::raw_ostream *a2)
{
  void *v4;

  v4 = llvm::Twine::printOneChild(this, a2, *(_QWORD *)this, *((_QWORD *)this + 1), *((_BYTE *)this + 32));
  return llvm::Twine::printOneChild(v4, a2, *((_QWORD *)this + 2), *((_QWORD *)this + 3), *((_BYTE *)this + 33));
}

_QWORD *llvm::Twine::toNullTerminatedStringRef(unsigned __int8 *a1, _QWORD *a2)
{
  _QWORD *v2;
  unsigned int v4;
  uint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  void (**v10)(llvm::raw_svector_ostream *__hidden);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;

  v2 = a2;
  if (a1[33] != 1)
    goto LABEL_8;
  v4 = a1[32];
  if (v4 < 2)
    goto LABEL_8;
  if (v4 == 6)
    return *(_QWORD **)a1;
  if (v4 == 4)
  {
    v2 = *(_QWORD **)a1;
    if ((*(char *)(*(_QWORD *)a1 + 23) & 0x80000000) == 0)
      return *(_QWORD **)a1;
    return (_QWORD *)*v2;
  }
  if (v4 != 3)
  {
LABEL_8:
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v10 = off_1E0E22B88;
    v18 = a2;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v10, 0, 0, 0);
    v8 = llvm::Twine::printOneChild(v7, (llvm::raw_ostream *)&v10, *(_QWORD *)a1, *((_QWORD *)a1 + 1), a1[32]);
    llvm::Twine::printOneChild(v8, (llvm::raw_ostream *)&v10, *((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), a1[33]);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v10);
    v9 = v2[1];
    if ((unint64_t)(v9 + 1) > v2[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v2, v2 + 3, v9 + 1, 1);
      v9 = v2[1];
    }
    *(_BYTE *)(*v2 + v9) = 0;
    return (_QWORD *)*v2;
  }
  v5 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  strlen(*(const char **)a1);
  return (_QWORD *)v5;
}

void *llvm::Twine::printOneChild(void *result, llvm::raw_ostream *a2, uint64_t a3, size_t a4, unsigned __int8 a5)
{
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  const char *v12;
  size_t v13;
  int v14;
  _BYTE *v15;

  v8 = a5;
  if (a5 == 2)
  {
    do
    {
      result = (void *)llvm::Twine::printOneChild(result, a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(unsigned __int8 *)(a3 + 32));
      v9 = *(_BYTE *)(a3 + 33);
      v10 = a3 + 16;
      a3 = *(_QWORD *)(a3 + 16);
      a4 = *(_QWORD *)(v10 + 8);
      v8 = v9;
    }
    while (v9 == 2);
  }
  switch(v8)
  {
    case 3:
      if (a3)
      {
        a4 = strlen((const char *)a3);
        result = (void *)*((_QWORD *)a2 + 4);
        if (a4 > *((_QWORD *)a2 + 3) - (_QWORD)result)
          goto LABEL_5;
        goto LABEL_9;
      }
      break;
    case 4:
      v14 = *(char *)(a3 + 23);
      if (v14 >= 0)
        v12 = (const char *)a3;
      else
        v12 = *(const char **)a3;
      if (v14 >= 0)
        v13 = *(unsigned __int8 *)(a3 + 23);
      else
        v13 = *(_QWORD *)(a3 + 8);
      v11 = a2;
      goto LABEL_6;
    case 5:
    case 6:
      result = (void *)*((_QWORD *)a2 + 4);
      if (a4 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
      {
LABEL_9:
        if (a4)
        {
          result = memcpy(result, (const void *)a3, a4);
          *((_QWORD *)a2 + 4) += a4;
        }
      }
      else
      {
LABEL_5:
        v11 = a2;
        v12 = (const char *)a3;
        v13 = a4;
LABEL_6:
        result = llvm::raw_ostream::write(v11, v12, v13);
      }
      break;
    case 7:
      result = llvm::raw_ostream::operator<<(a2, (llvm::formatv_object_base *)a3);
      break;
    case 8:
      v15 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)a2 + 3))
      {
        result = llvm::raw_ostream::write(a2, a3);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v15 + 1;
        *v15 = a3;
      }
      break;
    case 9:
      result = llvm::raw_ostream::operator<<(a2, a3);
      break;
    case 10:
      result = llvm::raw_ostream::operator<<(a2, (int)a3);
      break;
    case 11:
    case 13:
      result = llvm::raw_ostream::operator<<(a2, *(_QWORD *)a3);
      break;
    case 12:
    case 14:
      result = llvm::raw_ostream::operator<<(a2, *(_QWORD *)a3);
      break;
    case 15:
      result = llvm::raw_ostream::write_hex(a2, *(_QWORD *)a3);
      break;
    default:
      return result;
  }
  return result;
}

void llvm::initTypeSizeOptions(llvm *this)
{
  if (!atomic_load((unint64_t *)&ScalableErrorAsWarning))
}

llvm::raw_ostream *llvm::reportInvalidSizeRequest(llvm *this, const char *a2)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v5;
  void *v6;
  unint64_t v7;
  _BYTE *v8;

  if (!atomic_load((unint64_t *)&ScalableErrorAsWarning))
  if (!*(_BYTE *)(ScalableErrorAsWarning + 128))
    llvm::report_fatal_error((llvm *)"Invalid size request on a scalable vector.", (const char *)1);
  result = llvm::WithColor::warning(this);
  v5 = result;
  v6 = (void *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v6 > 0x2AuLL)
  {
    qmemcpy(v6, "Invalid size request on a scalable vector; ", 43);
    *((_QWORD *)result + 4) += 43;
    if (!this)
      goto LABEL_12;
  }
  else
  {
    result = llvm::raw_ostream::write(result, "Invalid size request on a scalable vector; ", 0x2BuLL);
    v5 = result;
    if (!this)
      goto LABEL_12;
  }
  v7 = strlen((const char *)this);
  result = (llvm::raw_ostream *)*((_QWORD *)v5 + 4);
  if (v7 <= *((_QWORD *)v5 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      result = (llvm::raw_ostream *)memcpy(result, this, v7);
      *((_QWORD *)v5 + 4) += v7;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(v5, (const char *)this, v7);
    v5 = result;
  }
LABEL_12:
  v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v8)
    return llvm::raw_ostream::write(v5, "\n", 1uLL);
  *v8 = 10;
  ++*((_QWORD *)v5 + 4);
  return result;
}

uint64_t llvm::TypeSize::operator unsigned long long(_BYTE *a1, const char *a2)
{
  if (a1[8])
  return *(_QWORD *)a1;
}

uint64_t `anonymous namespace'::CreateScalableErrorAsWarning::call(_anonymous_namespace_::CreateScalableErrorAsWarning *this)
{
  void *v1;
  __int128 v3;
  int v4;

  v1 = operator new(0xC0uLL);
  v4 = 1;
  *(_QWORD *)&v3 = "Treat issues where a fixed-width property is requested from a scalable type as a warning, instead of an error";
  *((_QWORD *)&v3 + 1) = 109;
  return llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [38],llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)v1, (int8x16_t *)"treat-scalable-fixed-error-as-warning", &v4, &v3);
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [38],llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _WORD *a3, _OWORD *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t *GeneralCategory;
  uint64_t v11;
  const unsigned __int8 *v12;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v8 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v9 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v11 = *(unsigned int *)(a1 + 72);
  if (v11 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v12 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v12);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::sys::unicode::columnWidthUTF8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned int NumBytesForUTF8;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  char *v25;
  int v26;
  unsigned int *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;

  if (!a2)
    return 0;
  v4 = 0;
  LODWORD(v5) = 0;
  while (1)
  {
    while (1)
    {
      v6 = (char *)(a1 + v4);
      NumBytesForUTF8 = llvm::getNumBytesForUTF8((llvm *)*(unsigned __int8 *)(a1 + v4));
      if (NumBytesForUTF8 != 1)
        break;
      if (*v6 - 32 > 0x5E)
        return 0xFFFFFFFFLL;
      v5 = (v5 + 1);
      if (++v4 >= a2)
        return v5;
    }
    if (!NumBytesForUTF8)
      return 4294967294;
    v4 += NumBytesForUTF8;
    if (v4 > a2)
      return 4294967294;
    v28 = &v30;
    v29 = v6;
    if (llvm::ConvertUTF8toUTF32(&v29, &v6[NumBytesForUTF8], &v28, (unint64_t)&v31, 0))
      return 4294967294;
    if (v30 != 173)
    {
      v8 = (char *)&llvm::sys::unicode::isPrintable(int)::PrintableRanges;
      v9 = 711;
      do
      {
        v10 = v9 >> 1;
        v11 = &v8[8 * (v9 >> 1)];
        v12 = *((_DWORD *)v11 + 1);
        v13 = v11 + 8;
        v9 += ~(v9 >> 1);
        if (v30 > v12)
          v8 = v13;
        else
          v9 = v10;
      }
      while (v9);
      if (v8 == (char *)&llvm::sys::unicode::charWidth(int)::CombiningCharacterRanges || v30 < *(_DWORD *)v8)
        break;
    }
    v14 = (char *)&llvm::sys::unicode::charWidth(int)::CombiningCharacterRanges;
    v15 = 343;
    do
    {
      v16 = v15 >> 1;
      v17 = &v14[8 * (v15 >> 1)];
      v18 = *((_DWORD *)v17 + 1);
      v19 = v17 + 8;
      v15 += ~(v15 >> 1);
      if (v30 > v18)
        v14 = v19;
      else
        v15 = v16;
    }
    while (v15);
    if (v14 == (char *)&llvm::sys::unicode::charWidth(int)::DoubleWidthCharacterRanges || v30 < *(_DWORD *)v14)
    {
      v20 = (char *)&llvm::sys::unicode::charWidth(int)::DoubleWidthCharacterRanges;
      v21 = 101;
      do
      {
        v22 = v21 >> 1;
        v23 = &v20[8 * (v21 >> 1)];
        v24 = *((_DWORD *)v23 + 1);
        v25 = v23 + 8;
        v21 += ~(v21 >> 1);
        if (v30 > v24)
          v20 = v25;
        else
          v21 = v22;
      }
      while (v21);
      if (v20 == (char *)&unk_181260BCC)
      {
        v5 = (v5 + 1);
        if (v4 >= a2)
          return v5;
      }
      else
      {
        if (v30 < *(_QWORD *)v20)
          v26 = 1;
        else
          v26 = 2;
        v5 = (v26 + v5);
        if (v4 >= a2)
          return v5;
      }
    }
    else
    {
      v5 = v5;
      if (v4 >= a2)
        return v5;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::VersionTuple::tryParse(unint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  unint64_t v23;
  unsigned int v24[2];
  _BYTE *v25;
  uint64_t v26;

  *(_QWORD *)v24 = 0;
  if (!a3)
    return 1;
  v5 = *a2;
  v3 = a2 + 1;
  v4 = v5;
  if ((v5 - 58) < 0xFFFFFFF6)
    return 1;
  v8 = v4 - 48;
  v9 = a3 - 1;
  if (a3 == 1)
    goto LABEL_15;
  v10 = *v3;
  if ((v10 - 58) >= 0xFFFFFFF6)
  {
    while (1)
    {
      v8 = v10 + 10 * v8 - 48;
      if (!--v9)
        break;
      v11 = *++v3;
      v10 = v11;
      if ((v11 - 58) < 0xFFFFFFF6)
        goto LABEL_9;
    }
LABEL_15:
    v14 = 0;
    v15 = v8;
LABEL_16:
    result = 0;
    *a1 = v15;
    a1[1] = v14;
    return result;
  }
LABEL_9:
  if (*v3 != 46 || v9 == 1)
    return 1;
  v13 = v3[1];
  if ((v13 - 58) < 0xFFFFFFF6)
    return 1;
  v16 = (v13 - 48);
  v17 = v9 - 2;
  if (v9 == 2)
    goto LABEL_30;
  v18 = v3 + 2;
  v19 = v3[2];
  if ((v19 - 58) >= 0xFFFFFFF6)
  {
    v20 = 2 - v9;
    while (1)
    {
      v16 = (v19 + 10 * v16 - 48);
      if (v20 == -1)
        break;
      v21 = *++v18;
      v19 = v21;
      ++v20;
      if ((v21 - 58) < 0xFFFFFFF6)
      {
        v17 = -v20;
        goto LABEL_23;
      }
    }
LABEL_30:
    v14 = 0;
    v23 = v8 | (unint64_t)(v16 << 32);
    goto LABEL_31;
  }
LABEL_23:
  if (*v18 != 46)
    return 1;
  v25 = v18 + 1;
  v26 = v17 - 1;
  if ((parseInt((llvm::StringRef *)&v25, &v24[1]) & 1) != 0)
    return 1;
  if (!v26)
  {
    v15 = v8 | (unint64_t)(v16 << 32) | 0x8000000000000000;
    v14 = v24[1] | 0x80000000;
    goto LABEL_16;
  }
  if (*v25 != 46)
    return 1;
  ++v25;
  --v26;
  v22 = parseInt((llvm::StringRef *)&v25, v24);
  result = 1;
  if ((v22 & 1) == 0 && !v26)
  {
    v23 = v8 | (unint64_t)(v16 << 32);
    v14 = v24[1] | ((unint64_t)v24[0] << 32) | 0x8000000080000000;
LABEL_31:
    v15 = v23 | 0x8000000000000000;
    goto LABEL_16;
  }
  return result;
}

uint64_t parseInt(llvm::StringRef *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;

  v2 = *((_QWORD *)a1 + 1);
  if (!v2)
    return 1;
  v3 = *(unsigned __int8 **)a1;
  v4 = (unsigned __int8 *)(*(_QWORD *)a1 + 1);
  v5 = **(unsigned __int8 **)a1;
  *(_QWORD *)a1 = v4;
  *((_QWORD *)a1 + 1) = v2 - 1;
  if ((v5 - 58) < 0xFFFFFFF6)
    return 1;
  v7 = v5 - 48;
  *a2 = v7;
  if (v2 != 1)
  {
    v8 = v3 + 2;
    v9 = v2 - 2;
    do
    {
      v10 = *v4;
      if ((v10 - 58) < 0xFFFFFFF6)
        break;
      ++v4;
      *(_QWORD *)a1 = v8;
      *((_QWORD *)a1 + 1) = v9;
      v7 = v10 + 10 * v7 - 48;
      *a2 = v7;
      ++v8;
      --v9;
    }
    while (v9 != -1);
  }
  return 0;
}

BOOL llvm::vfs::Status::equivalent(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

BOOL llvm::vfs::Status::exists(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) > 1u;
}

void llvm::vfs::File::getObjectRefForContent(_BYTE *a1@<X8>)
{
  a1[16] &= ~1u;
  *a1 = 0;
  a1[8] = 0;
}

_QWORD *llvm::vfs::FileSystem::getBufferForFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v19);
  if ((v20 & 1) != 0)
  {
    v14 = v19[0];
    v15 = v19[1];
  }
  else
  {
    if (!a6)
      goto LABEL_5;
    result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v19[0] + 40))(&v16);
    if ((v18 & 1) == 0)
    {
      *(_QWORD *)a6 = v16;
      *(_BYTE *)(a6 + 8) = v17;
LABEL_5:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[0] + 32))(v19[0], a2, a3, a4, a5);
      if ((v20 & 1) != 0)
        return result;
      goto LABEL_10;
    }
    v14 = v16;
    v15 = v17;
  }
  *(_BYTE *)(a7 + 16) |= 1u;
  *(_QWORD *)a7 = v14;
  *(_QWORD *)(a7 + 8) = v15;
  if ((v20 & 1) != 0)
    return result;
LABEL_10:
  result = (_QWORD *)v19[0];
  v19[0] = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

unint64_t llvm::vfs::FileSystem::makeAbsolute(uint64_t a1, uint64_t a2)
{
  const char *v4;
  unint64_t v5;
  unsigned int v6;
  const char *v8[4];
  __int16 v9;
  void *__p;
  char v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 261;
  v4 = *(const char **)(a2 + 8);
  v8[0] = *(const char **)a2;
  v8[1] = v4;
  if (llvm::sys::path::is_absolute(v8, 0))
  {
    std::system_category();
    v5 = 0;
    v6 = 0;
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&__p, a1);
    if ((v12 & 1) != 0)
    {
      v6 = __p;
      v5 = (unint64_t)__p & 0xFFFFFFFF00000000;
    }
    else
    {
      v9 = 260;
      v8[0] = (const char *)&__p;
      llvm::sys::fs::make_absolute((uint64_t)v8, (char **)a2);
      std::system_category();
      v5 = 0;
      v6 = 0;
      if ((v12 & 1) == 0 && v11 < 0)
        operator delete(__p);
    }
  }
  return v5 & 0xFFFFFFFF00000000 | v6;
}

BOOL llvm::vfs::FileSystem::exists(uint64_t a1)
{
  _BOOL8 v1;
  void *__p;
  char v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  if ((v6 & 1) != 0)
    return 0;
  v1 = v5 > 1;
  if (v4 < 0)
    operator delete(__p);
  return v1;
}

void llvm::vfs::getRealFileSystem(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  int v8;
  char *v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = atomic_load((unsigned __int8 *)&qword_1ECD33498);
  v3 = &unk_1ECD33000;
  if ((v2 & 1) == 0)
  {
    v7 = a1;
    v8 = __cxa_guard_acquire(&qword_1ECD33498);
    a1 = v7;
    if (v8)
    {
      v9 = (char *)operator new(0x150uLL);
      *(_QWORD *)v9 = off_1E0E15BB8;
      v9[16] = 0;
      v9[328] = 0;
      _MergedGlobals_53 = (uint64_t)v9;
      *((_DWORD *)v9 + 2) = 0;
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      __cxa_atexit((void (*)(void *))llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>::~IntrusiveRefCntPtr, &_MergedGlobals_53, &dword_18013D000);
      __cxa_guard_release(&qword_1ECD33498);
      a1 = v7;
      v3 = (_QWORD *)&unk_1ECD33000;
    }
  }
  v4 = v3[146];
  *a1 = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

unsigned int **llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>::~IntrusiveRefCntPtr(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t llvm::vfs::FileSystem::getDirectoryEntry@<X0>(const llvm::Twine *a1@<X1>, uint64_t a2@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::error_code v14;

  *(_QWORD *)&v14.__val_ = std::generic_category();
  llvm::errorCodeToError((llvm *)0x2D, v14, &v9);
  v11 = 0;
  v12 = v9;
  v9 = 0;
  v10 = &v11;
  llvm::handleErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>((uint64_t)&v12, &v10, &v13);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v5 = (char *)operator new(0x38uLL);
  v6 = v11;
  v11 = 0;
  *(_QWORD *)v5 = &unk_1E0E25888;
  v5[40] = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v5[32] = 0;
  *((_QWORD *)v5 + 1) = 0;
  llvm::Twine::str(a1, (std::string *)(v5 + 8));
  *((_QWORD *)v5 + 6) = v6;
  v7 = v11;
  *((_QWORD *)v5 + 4) = 0;
  v5[40] = 0;
  v11 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  result = v9;
  if (v9)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v5;
  return result;
}

uint64_t llvm::vfs::FileSystem::isCASFS(llvm::vfs::FileSystem *this)
{
  return 0;
}

uint64_t std::optional<llvm::ErrorOr<`anonymous namespace'::RealFileSystem::WorkingDirectory>>::operator=[abi:nn180100]<`anonymous namespace'::RealFileSystem::WorkingDirectory,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v7;
  __int128 v8;
  _BYTE v9[128];
  void *v10;
  __int128 v11;
  _BYTE v12[128];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 312))
  {
    v13 = 0;
    v7 = v9;
    v4 = xmmword_181236BB0;
    v8 = xmmword_181236BB0;
    if (*(_QWORD *)(a2 + 8))
    {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v7, a2);
      v4 = xmmword_181236BB0;
    }
    v10 = v12;
    v11 = v4;
    if (*(_QWORD *)(a2 + 160))
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v10, a2 + 152);
    if ((v13 & 1) == 0)
    {
      if (v10 != v12)
        free(v10);
      if (v7 != v9)
        free(v7);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 304) &= ~1u;
    *(_QWORD *)a1 = a1 + 24;
    v5 = xmmword_181236BB0;
    *(_OWORD *)(a1 + 8) = xmmword_181236BB0;
    if (*(_QWORD *)(a2 + 8))
    {
      llvm::SmallVectorImpl<char>::operator=(a1, a2);
      v5 = xmmword_181236BB0;
    }
    *(_QWORD *)(a1 + 152) = a1 + 176;
    *(_OWORD *)(a1 + 160) = v5;
    if (*(_QWORD *)(a2 + 160))
      llvm::SmallVectorImpl<char>::operator=(a1 + 152, a2 + 152);
    *(_BYTE *)(a1 + 312) = 1;
  }
  return a1;
}

void `anonymous namespace'::RealFileSystem::~RealFileSystem(_anonymous_namespace_::RealFileSystem *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = off_1E0E15BB8;
  if (*((_BYTE *)this + 328) && (*((_BYTE *)this + 320) & 1) == 0)
  {
    v2 = (char *)*((_QWORD *)this + 21);
    if (v2 != (char *)this + 192)
      free(v2);
    v3 = (char *)*((_QWORD *)this + 2);
    if (v3 != (char *)this + 40)
      free(v3);
  }
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = off_1E0E15BB8;
  if (*((_BYTE *)this + 328) && (*((_BYTE *)this + 320) & 1) == 0)
  {
    v2 = (char *)*((_QWORD *)this + 21);
    if (v2 != (char *)this + 192)
      free(v2);
    v3 = (char *)*((_QWORD *)this + 2);
    if (v3 != (char *)this + 40)
      free(v3);
  }
  operator delete(this);
}

void `anonymous namespace'::RealFileSystem::status(_anonymous_namespace_::RealFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t UniqueID;
  uint64_t v10;
  uint64_t v11;
  uint64_t LastModificationTime;
  __darwin_time_t v13;
  uint64_t v14;
  uint64_t tv_nsec;
  void *tv_sec;
  __int128 v17;
  timespec st_ctimespec;
  _BYTE v19[24];
  __int128 v20;
  __int128 v21;
  stat v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v22[0].st_mtimespec.tv_nsec = 0;
  v22[0].st_ctimespec.tv_sec = (__darwin_time_t)&v22[0].st_birthtimespec.tv_nsec;
  *(_OWORD *)&v22[0].st_ctimespec.tv_nsec = xmmword_181236410;
  memset(v22, 0, 44);
  *(uint64_t *)((char *)&v22[0].st_atimespec.tv_nsec + 4) = 0xFFFFLL;
  WORD2(v22[0].st_mtimespec.tv_sec) = 0;
  if (*((_BYTE *)this + 328) && (*((_BYTE *)this + 320) & 1) == 0)
  {
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v22[0].st_ctimespec);
    *(_WORD *)&v19[16] = 261;
    v6 = *((_QWORD *)this + 22);
    st_ctimespec.tv_sec = *((_QWORD *)this + 21);
    st_ctimespec.tv_nsec = v6;
    llvm::sys::fs::make_absolute((uint64_t)&st_ctimespec, (char **)&v22[0].st_ctimespec);
    *(_WORD *)&v19[16] = 261;
    st_ctimespec = v22[0].st_ctimespec;
    v7 = llvm::sys::fs::status((llvm::sys::fs *)&st_ctimespec, v22, (llvm::sys::fs::file_status *)1);
    if (!(_DWORD)v7)
      goto LABEL_4;
LABEL_7:
    *(_BYTE *)(a3 + 80) |= 1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
    tv_sec = (void *)v22[0].st_ctimespec.tv_sec;
    if ((uint64_t *)v22[0].st_ctimespec.tv_sec == &v22[0].st_birthtimespec.tv_nsec)
      return;
    goto LABEL_8;
  }
  v17 = *((_OWORD *)a2 + 1);
  st_ctimespec = *(timespec *)a2;
  *(_OWORD *)v19 = v17;
  *(_QWORD *)&v19[16] = *((_QWORD *)a2 + 4);
  v7 = llvm::sys::fs::status((llvm::sys::fs *)&st_ctimespec, v22, (llvm::sys::fs::file_status *)1);
  if ((_DWORD)v7)
    goto LABEL_7;
LABEL_4:
  UniqueID = llvm::sys::fs::file_status::getUniqueID((llvm::sys::fs::file_status *)v22);
  v11 = v10;
  LastModificationTime = llvm::sys::fs::basic_file_status::getLastModificationTime((llvm::sys::fs::basic_file_status *)v22);
  v13 = v22[0].st_atimespec.tv_sec;
  v14 = *(_QWORD *)&v22[0].st_rdev;
  tv_nsec = v22[0].st_atimespec.tv_nsec;
  llvm::Twine::str(a2, (std::string *)&st_ctimespec);
  *(_QWORD *)&v19[8] = UniqueID;
  *(_QWORD *)&v19[16] = v11;
  *(_QWORD *)&v20 = LastModificationTime;
  *((_QWORD *)&v20 + 1) = v14;
  *(_QWORD *)&v21 = v13;
  *((_QWORD *)&v21 + 1) = tv_nsec;
  *(_BYTE *)(a3 + 80) &= ~1u;
  *(timespec *)a3 = st_ctimespec;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)v19;
  *(_WORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 56) = v21;
  *(_OWORD *)(a3 + 40) = v20;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&v19[8];
  tv_sec = (void *)v22[0].st_ctimespec.tv_sec;
  if ((uint64_t *)v22[0].st_ctimespec.tv_sec != &v22[0].st_birthtimespec.tv_nsec)
LABEL_8:
    free(tv_sec);
}

void `anonymous namespace'::RealFileSystem::openFileForRead(_anonymous_namespace_::RealFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  char *v8;
  int v9;
  std::string *p_p;
  std::string::size_type size;
  size_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::string __p;
  _QWORD *v22;
  _OWORD v23[2];
  uint64_t v24;
  _QWORD *v25;
  char v26;
  void *v27;
  __int128 v28;
  _BYTE v29[9];
  void *v30;
  __int128 v31;
  _QWORD v32[33];

  v32[32] = *MEMORY[0x1E0C80C00];
  v30 = v32;
  v31 = xmmword_181236410;
  v27 = v29;
  v28 = xmmword_181236410;
  if (!*((_BYTE *)this + 328) || (*((_BYTE *)this + 320) & 1) != 0)
  {
    v7 = *((_OWORD *)a2 + 1);
    v23[0] = *(_OWORD *)a2;
    v23[1] = v7;
    v24 = *((_QWORD *)a2 + 4);
  }
  else
  {
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v27);
    LOWORD(v24) = 261;
    v6 = *((_QWORD *)this + 22);
    *(_QWORD *)&v23[0] = *((_QWORD *)this + 21);
    *((_QWORD *)&v23[0] + 1) = v6;
    llvm::sys::fs::make_absolute((uint64_t)v23, (char **)&v27);
    LOWORD(v24) = 261;
    v23[0] = __PAIR128__(v28, (unint64_t)v27);
  }
  llvm::sys::fs::openNativeFileForRead((unsigned __int8 *)v23, 0, &v30, (uint64_t)&v25);
  if ((v26 & 1) != 0)
  {
    v15 = v25;
    v25 = 0;
    v22 = v15;
    v16 = llvm::errorToErrorCode(&v22);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v17;
    if (v22)
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
    goto LABEL_23;
  }
  v8 = (char *)operator new(0x78uLL);
  v9 = (int)v25;
  llvm::Twine::str(a2, &__p);
  size = __p.__r_.__value_.__l.__size_;
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    p_p = &__p;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  v13 = v30;
  v12 = v31;
  *(_QWORD *)v8 = off_1E0E1A6F0;
  *((_DWORD *)v8 + 2) = v9;
  LOWORD(v24) = 261;
  *(_QWORD *)&v23[0] = p_p;
  *((_QWORD *)&v23[0] + 1) = size;
  llvm::Twine::str((llvm::Twine *)v23, (std::string *)(v8 + 16));
  *((_WORD *)v8 + 44) = 0;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  v14 = v8 + 96;
  if (!v13)
  {
    *v14 = 0;
    *((_QWORD *)v8 + 13) = 0;
    *((_QWORD *)v8 + 14) = 0;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_22;
    goto LABEL_23;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v12 >= 0x17)
  {
    v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v18 = v12 | 7;
    v19 = v18 + 1;
    v14 = operator new(v18 + 1);
    *((_QWORD *)v8 + 13) = v12;
    *((_QWORD *)v8 + 14) = v19 | 0x8000000000000000;
    *((_QWORD *)v8 + 12) = v14;
    goto LABEL_20;
  }
  v8[119] = v12;
  if (v12)
LABEL_20:
    memmove(v14, v13, v12);
  *((_BYTE *)v14 + v12) = 0;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_22:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
  if ((v26 & 1) != 0)
  {
    v20 = v25;
    v25 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  }
  if (v27 != v29)
    free(v27);
  if (v30 != v32)
    free(v30);
}

void `anonymous namespace'::RealFileSystem::dir_begin(_anonymous_namespace_::RealFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, std::error_code *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  uint64_t *p_shared_weak_owners;
  uint64_t *v12;
  BOOL v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t shared_weak_owners;
  unint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  std::string v30;
  void *v31;
  __int128 v32;
  _BYTE v33[128];
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v31 = v33;
  v32 = xmmword_181236BB0;
  if (!*((_BYTE *)this + 328) || (*((_BYTE *)this + 320) & 1) != 0)
  {
    v8 = *((_OWORD *)a2 + 1);
    v28[0] = *(_OWORD *)a2;
    v28[1] = v8;
    v29 = *((_QWORD *)a2 + 4);
  }
  else
  {
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v31);
    v36 = 261;
    v7 = *((_QWORD *)this + 22);
    *(_QWORD *)&v34 = *((_QWORD *)this + 21);
    *((_QWORD *)&v34 + 1) = v7;
    llvm::sys::fs::make_absolute((uint64_t)&v34, (char **)&v31);
    LOWORD(v29) = 261;
    v28[0] = __PAIR128__(v32, (unint64_t)v31);
  }
  v9 = (std::__shared_weak_count *)operator new(0x58uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E51C88;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E15938;
  v9[1].__shared_owners_ = 0;
  v9[1].__shared_weak_owners_ = 0;
  LODWORD(v9[2].__shared_owners_) = 9;
  p_shared_weak_owners = &v9[2].__shared_weak_owners_;
  v9[2].__vftable = 0;
  v12 = (uint64_t *)llvm::sys::fs::directory_iterator::directory_iterator((llvm::sys::fs::directory_iterator *)&v9[2].__shared_weak_owners_, (const char **)v28, a3, 1);
  v35 = 1;
  v34 = 0uLL;
  v13 = llvm::sys::fs::directory_iterator::operator==(v12, (uint64_t *)&v34);
  v14 = v13;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_9;
  v16 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v14)
      goto LABEL_23;
  }
  else
  {
LABEL_9:
    if (v13)
      goto LABEL_23;
  }
  v18 = *p_shared_weak_owners;
  if (*(char *)(*p_shared_weak_owners + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v18 + 8), *(_QWORD *)(v18 + 16));
    v18 = *p_shared_weak_owners;
    v20 = *(_DWORD *)(*p_shared_weak_owners + 32);
    if (v20 != 9)
      goto LABEL_15;
  }
  else
  {
    v19 = *(_OWORD *)(v18 + 8);
    v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 24);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
    v20 = *(_DWORD *)(v18 + 32);
    if (v20 != 9)
      goto LABEL_15;
  }
  llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v18 + 8), (uint64_t)&v34);
  if ((v38 & 1) != 0)
    v20 = 9;
  else
    v20 = v37;
LABEL_15:
  *(_QWORD *)&v34 = v30.__r_.__value_.__l.__size_;
  v21 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v34 + 7) = *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  memset(&v30, 0, sizeof(v30));
  if (SHIBYTE(v9[2].__vftable) < 0)
  {
    operator delete((void *)v9[1].__shared_owners_);
    v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
    v25 = v34;
    v9[1].__shared_owners_ = v21;
    v9[1].__shared_weak_owners_ = v25;
    *(uint64_t *)((char *)&v9[1].__shared_weak_owners_ + 7) = *(_QWORD *)((char *)&v34 + 7);
    HIBYTE(v9[2].__vftable) = v22;
    LODWORD(v9[2].__shared_owners_) = v20;
    if (v24 < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = v34;
    v9[1].__shared_owners_ = v21;
    v9[1].__shared_weak_owners_ = v23;
    *(uint64_t *)((char *)&v9[1].__shared_weak_owners_ + 7) = *(_QWORD *)((char *)&v34 + 7);
    HIBYTE(v9[2].__vftable) = v22;
    LODWORD(v9[2].__shared_owners_) = v20;
  }
LABEL_23:
  *a4 = v9 + 1;
  a4[1] = v9;
  shared_weak_owners = HIBYTE(v9[2].__vftable);
  if ((shared_weak_owners & 0x80u) != 0)
    shared_weak_owners = v9[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    *a4 = 0;
    a4[1] = 0;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v31 != v33)
    free(v31);
}

unint64_t `anonymous namespace'::RealFileSystem::setCurrentWorkingDirectory(_anonymous_namespace_::RealFileSystem *this, const llvm::Twine *a2)
{
  uint64_t v3;
  unint64_t is_directory;
  unsigned int v5;
  __int128 v6;
  BOOL *v7;
  uint64_t v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  char v15;
  _BYTE v16[32];
  uint64_t v17;
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[128];
  char *v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE *v24;
  __int128 v25;
  _BYTE v26[128];
  _QWORD *v27;
  __int128 v28;
  _QWORD v29[19];

  v29[16] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 328))
  {
    is_directory = llvm::sys::fs::set_current_path(a2, a2);
    v5 = is_directory;
    return is_directory & 0xFFFFFFFF00000000 | v5;
  }
  v27 = v29;
  v28 = xmmword_181236BB0;
  v24 = v26;
  v25 = xmmword_181236BB0;
  v21 = v23;
  v22 = xmmword_181236BB0;
  if ((*((_BYTE *)this + 320) & 1) != 0)
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v16 = *(_OWORD *)a2;
    *(_OWORD *)&v16[16] = v6;
    v17 = *((_QWORD *)a2 + 4);
  }
  else
  {
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v21);
    LOWORD(v17) = 261;
    v3 = *((_QWORD *)this + 22);
    *(_QWORD *)v16 = *((_QWORD *)this + 21);
    *(_QWORD *)&v16[8] = v3;
    llvm::sys::fs::make_absolute((uint64_t)v16, &v21);
    LOWORD(v17) = 261;
    *(_QWORD *)v16 = v21;
    *(_QWORD *)&v16[8] = v22;
  }
  llvm::Twine::toVector((uint64_t)v16, (uint64_t)&v27);
  v15 = 0;
  LOWORD(v17) = 261;
  *(_QWORD *)v16 = v27;
  *(_QWORD *)&v16[8] = v28;
  is_directory = llvm::sys::fs::is_directory((llvm::sys::fs *)v16, (const llvm::Twine *)&v15, v7);
  if (!(_DWORD)is_directory)
  {
    if (!v15)
    {
      is_directory = 20;
      std::generic_category();
      v5 = 20;
      goto LABEL_8;
    }
    LOWORD(v17) = 261;
    *(_QWORD *)v16 = v27;
    *(_QWORD *)&v16[8] = v28;
    is_directory = llvm::sys::fs::real_path(v16, &v24, 0);
    if (!(_DWORD)is_directory)
    {
      *(_QWORD *)v16 = &v16[24];
      *(_OWORD *)&v16[8] = xmmword_181236BB0;
      v9 = v28;
      if (!(_QWORD)v28)
        goto LABEL_25;
      if ((unint64_t)v28 < 0x81)
      {
        v11 = &v16[24];
        v10 = v28;
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v16, &v16[24], v28, 1);
        v10 = v28;
        if (!(_QWORD)v28)
        {
LABEL_24:
          *(_QWORD *)&v16[8] = v9;
LABEL_25:
          v18 = v20;
          v19 = xmmword_181236BB0;
          v12 = v25;
          if (!(_QWORD)v25)
          {
LABEL_32:
            if (v18 != v20)
              free(v18);
            if (*(_BYTE **)v16 != &v16[24])
              free(*(void **)v16);
            std::system_category();
            v5 = 0;
            goto LABEL_8;
          }
          if ((unint64_t)v25 < 0x81)
          {
            v14 = v20;
            v13 = v25;
          }
          else
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v18, v20, v25, 1);
            v13 = v25;
            if (!(_QWORD)v25)
            {
LABEL_31:
              *(_QWORD *)&v19 = v12;
              goto LABEL_32;
            }
            v14 = v18;
          }
          memcpy(v14, v24, v13);
          goto LABEL_31;
        }
        v11 = *(_BYTE **)v16;
      }
      memcpy(v11, v27, v10);
      goto LABEL_24;
    }
  }
  v5 = is_directory;
LABEL_8:
  if (v21 != v23)
    free(v21);
  if (v24 != v26)
    free(v24);
  if (v27 != v29)
    free(v27);
  return is_directory & 0xFFFFFFFF00000000 | v5;
}

void `anonymous namespace'::RealFileSystem::getCurrentWorkingDirectory(_anonymous_namespace_::RealFileSystem *this@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  const void *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  _BYTE __dst[24];
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 328))
  {
    if ((*((_BYTE *)this + 320) & 1) != 0)
    {
      v10 = *((_QWORD *)this + 2);
      v9 = *((_QWORD *)this + 3);
      *(_BYTE *)(a2 + 24) |= 1u;
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v9;
      return;
    }
    v3 = *((_QWORD *)this + 3);
    if (v3 <= 0x7FFFFFFFFFFFFFF7)
    {
      v4 = (const void *)*((_QWORD *)this + 2);
      if (v3 >= 0x17)
      {
        v11 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v3 | 7) != 0x17)
          v11 = v3 | 7;
        v12 = v11 + 1;
        v5 = operator new(v11 + 1);
        *(_QWORD *)&__dst[8] = v3;
        *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
        *(_QWORD *)__dst = v5;
      }
      else
      {
        __dst[23] = *((_QWORD *)this + 3);
        v5 = __dst;
        if (!v3)
          goto LABEL_15;
      }
      memmove(v5, v4, v3);
LABEL_15:
      v5[v3] = 0;
      *(_BYTE *)(a2 + 24) &= ~1u;
      *(_OWORD *)a2 = *(_OWORD *)__dst;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[16];
      return;
    }
LABEL_27:
    abort();
  }
  *(_QWORD *)__dst = v21;
  *(_OWORD *)&__dst[8] = xmmword_181236BB0;
  v6 = llvm::sys::fs::current_path((uint64_t)__dst);
  if (!(_DWORD)v6)
  {
    v13 = *(_QWORD *)&__dst[8];
    if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
      goto LABEL_27;
    v14 = *(const void **)__dst;
    if (*(_QWORD *)&__dst[8] >= 0x17uLL)
    {
      v16 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
        v16 = *(_QWORD *)&__dst[8] | 7;
      v17 = v16 + 1;
      v15 = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&v18 + 1) = v13;
      v19 = v17 | 0x8000000000000000;
      *(_QWORD *)&v18 = v15;
    }
    else
    {
      HIBYTE(v19) = __dst[8];
      v15 = &v18;
      if (!*(_QWORD *)&__dst[8])
      {
LABEL_24:
        *((_BYTE *)v15 + v13) = 0;
        *(_BYTE *)(a2 + 24) &= ~1u;
        *(_OWORD *)a2 = v18;
        v8 = *(_QWORD **)__dst;
        *(_QWORD *)(a2 + 16) = v19;
        if (v8 == v21)
          return;
        goto LABEL_25;
      }
    }
    memmove(v15, v14, v13);
    goto LABEL_24;
  }
  *(_BYTE *)(a2 + 24) |= 1u;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = *(_QWORD **)__dst;
  if (*(_QWORD **)__dst == v21)
    return;
LABEL_25:
  free(v8);
}

unint64_t `anonymous namespace'::RealFileSystem::getRealPath(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  void *v11;
  __int128 v12;
  _QWORD v13[33];

  v13[32] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = xmmword_181236410;
  if (!*(_BYTE *)(a1 + 328) || (*(_BYTE *)(a1 + 320) & 1) != 0)
  {
    v6 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v6;
    v10 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    llvm::Twine::toVector(a2, (uint64_t)&v11);
    LOWORD(v10) = 261;
    v5 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)&v9[0] = *(_QWORD *)(a1 + 168);
    *((_QWORD *)&v9[0] + 1) = v5;
    llvm::sys::fs::make_absolute((uint64_t)v9, (char **)&v11);
    LOWORD(v10) = 261;
    v9[0] = __PAIR128__(v12, (unint64_t)v11);
  }
  v7 = llvm::sys::fs::real_path((unsigned __int8 *)v9, a3, 0);
  if (v11 != v13)
    free(v11);
  return v7;
}

uint64_t `anonymous namespace'::RealFileSystem::isLocal(_anonymous_namespace_::RealFileSystem *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t is_local;
  _OWORD v9[2];
  uint64_t v10;
  void *v11;
  __int128 v12;
  _QWORD v13[33];

  v13[32] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = xmmword_181236410;
  if (!*((_BYTE *)this + 328) || (*((_BYTE *)this + 320) & 1) != 0)
  {
    v6 = *((_OWORD *)a2 + 1);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v6;
    v10 = *((_QWORD *)a2 + 4);
  }
  else
  {
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v11);
    LOWORD(v10) = 261;
    v5 = *((_QWORD *)this + 22);
    *(_QWORD *)&v9[0] = *((_QWORD *)this + 21);
    *((_QWORD *)&v9[0] + 1) = v5;
    llvm::sys::fs::make_absolute((uint64_t)v9, (char **)&v11);
    LOWORD(v10) = 261;
    v9[0] = __PAIR128__(v12, (unint64_t)v11);
  }
  is_local = llvm::sys::fs::is_local((llvm::sys::fs *)v9, a3, (BOOL *)a3);
  if (v11 != v13)
    free(v11);
  return is_local;
}

llvm::raw_ostream *`anonymous namespace'::RealFileSystem::printImpl(llvm::raw_ostream *result, llvm::raw_ostream *this, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  _WORD *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = (uint64_t)result;
  if (a4)
  {
    v6 = a4;
    do
    {
      while (1)
      {
        v7 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v7 <= 1uLL)
          break;
        *v7 = 8224;
        *((_QWORD *)this + 4) += 2;
        if (!--v6)
          goto LABEL_6;
      }
      result = llvm::raw_ostream::write(this, "  ", 2uLL);
      --v6;
    }
    while (v6);
  }
LABEL_6:
  v8 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v8 > 0x14uLL)
  {
    qmemcpy(v8, "RealFileSystem using ", 21);
    *((_QWORD *)this + 4) += 21;
    v9 = *((_QWORD *)this + 4);
    v10 = *((_QWORD *)this + 3) - v9;
    if (*(_BYTE *)(v5 + 328))
    {
LABEL_8:
      if (v10 > 2)
      {
        *(_BYTE *)(v9 + 2) = 110;
        *(_WORD *)v9 = 30575;
        *((_QWORD *)this + 4) += 3;
        v11 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v11) <= 4)
          return llvm::raw_ostream::write(this, " CWD\n", 5uLL);
      }
      else
      {
        result = llvm::raw_ostream::write(this, "own", 3uLL);
        v11 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v11) <= 4)
          return llvm::raw_ostream::write(this, " CWD\n", 5uLL);
      }
LABEL_14:
      *(_BYTE *)(v11 + 4) = 10;
      *(_DWORD *)v11 = 1146569504;
      *((_QWORD *)this + 4) += 5;
      return result;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(this, "RealFileSystem using ", 0x15uLL);
    v9 = *((_QWORD *)this + 4);
    v10 = *((_QWORD *)this + 3) - v9;
    if (*(_BYTE *)(v5 + 328))
      goto LABEL_8;
  }
  if (v10 > 6)
  {
    *(_DWORD *)(v9 + 3) = 1936942435;
    *(_DWORD *)v9 = 1668248176;
    *((_QWORD *)this + 4) += 7;
    v11 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 4)
      goto LABEL_14;
  }
  else
  {
    result = llvm::raw_ostream::write(this, "process", 7uLL);
    v11 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 4)
      goto LABEL_14;
  }
  return llvm::raw_ostream::write(this, " CWD\n", 5uLL);
}

uint64_t llvm::ErrorOr<`anonymous namespace'::RealFileSystem::WorkingDirectory>::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  __int128 v6;
  const std::error_category *v8;

  if (a1 == a2)
    return a1;
  if ((*(_BYTE *)(a1 + 304) & 1) == 0)
  {
    v4 = *(void **)(a1 + 152);
    if (v4 != (void *)(a1 + 176))
      free(v4);
    if (*(_QWORD *)a1 != a1 + 24)
      free(*(void **)a1);
  }
  v5 = *(_BYTE *)(a1 + 304);
  if ((*(_BYTE *)(a2 + 304) & 1) == 0)
  {
    *(_BYTE *)(a1 + 304) = v5 & 0xFE;
    *(_QWORD *)a1 = a1 + 24;
    v6 = xmmword_181236BB0;
    *(_OWORD *)(a1 + 8) = xmmword_181236BB0;
    if (*(_QWORD *)(a2 + 8))
    {
      llvm::SmallVectorImpl<char>::operator=(a1, a2);
      v6 = xmmword_181236BB0;
    }
    *(_QWORD *)(a1 + 152) = a1 + 176;
    *(_OWORD *)(a1 + 160) = v6;
    if (*(_QWORD *)(a2 + 160))
      llvm::SmallVectorImpl<char>::operator=(a1 + 152, a2 + 152);
    return a1;
  }
  *(_BYTE *)(a1 + 304) = v5 | 1;
  if ((*(_BYTE *)(a2 + 304) & 1) != 0)
  {
    v8 = *(const std::error_category **)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  else
  {
    v8 = std::system_category();
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return a1;
}

void `anonymous namespace'::RealFile::~RealFile(_anonymous_namespace_::RealFile *this, int *a2)
{
  *(_QWORD *)this = off_1E0E1A6F0;
  llvm::sys::fs::closeFile((_anonymous_namespace_::RealFile *)((char *)this + 8), a2);
  *((_DWORD *)this + 2) = -1;
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*((void **)this + 2));
    return;
  }
  operator delete(*((void **)this + 12));
  if (*((char *)this + 39) < 0)
    goto LABEL_5;
}

{
  *(_QWORD *)this = off_1E0E1A6F0;
  llvm::sys::fs::closeFile((_anonymous_namespace_::RealFile *)((char *)this + 8), a2);
  *((_DWORD *)this + 2) = -1;
  if (*((char *)this + 119) < 0)
  {
    operator delete(*((void **)this + 12));
    if ((*((char *)this + 39) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*((void **)this + 2));
    operator delete(this);
    return;
  }
  if (*((char *)this + 39) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(this);
}

void `anonymous namespace'::RealFile::status(_anonymous_namespace_::RealFile *this@<X0>, llvm::sys::fs::file_status *a2@<X2>, uint64_t a3@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  uint64_t UniqueID;
  uint64_t v13;
  uint64_t v14;
  uint64_t LastModificationTime;
  __darwin_time_t tv_sec;
  uint64_t v17;
  uint64_t tv_nsec;
  __int128 v19;
  _QWORD v20[4];
  __int16 v21;
  std::string v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;
  stat v27;

  v5 = (char *)this + 16;
  if (!*((_DWORD *)this + 20))
  {
    memset(&v27, 0, 44);
    *(uint64_t *)((char *)&v27.st_atimespec.tv_nsec + 4) = 0xFFFFLL;
    WORD2(v27.st_mtimespec.tv_sec) = 0;
    v27.st_mtimespec.tv_nsec = 0;
    v6 = llvm::sys::fs::status((llvm::sys::fs *)*((unsigned int *)this + 2), &v27, a2);
    if ((_DWORD)v6)
    {
      *(_BYTE *)(a3 + 80) |= 1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
      return;
    }
    v8 = *((char *)this + 39);
    v9 = v8 < 0;
    v10 = (char *)*((_QWORD *)this + 2);
    if (v8 >= 0)
      v10 = v5;
    v11 = *((unsigned __int8 *)this + 39);
    if (v9)
      v11 = *((_QWORD *)this + 3);
    v21 = 261;
    v20[0] = v10;
    v20[1] = v11;
    UniqueID = llvm::sys::fs::file_status::getUniqueID((llvm::sys::fs::file_status *)&v27);
    v14 = v13;
    LastModificationTime = llvm::sys::fs::basic_file_status::getLastModificationTime((llvm::sys::fs::basic_file_status *)&v27);
    tv_sec = v27.st_atimespec.tv_sec;
    v17 = *(_QWORD *)&v27.st_rdev;
    tv_nsec = v27.st_atimespec.tv_nsec;
    llvm::Twine::str((llvm::Twine *)v20, &v22);
    *(_QWORD *)&v23 = UniqueID;
    *((_QWORD *)&v23 + 1) = v14;
    *(_QWORD *)&v24 = LastModificationTime;
    *((_QWORD *)&v24 + 1) = v17;
    *(_QWORD *)&v25 = tv_sec;
    *((_QWORD *)&v25 + 1) = tv_nsec;
    v26 = 0;
    if (*((char *)this + 39) < 0)
      operator delete(*(void **)v5);
    *(std::string *)v5 = v22;
    v19 = v24;
    *(_OWORD *)((char *)this + 40) = v23;
    *(_OWORD *)((char *)this + 56) = v19;
    *(_OWORD *)((char *)this + 72) = v25;
    *((_WORD *)this + 44) = v26;
    *(_BYTE *)(a3 + 80) &= ~1u;
    if ((*((char *)this + 39) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_13:
    std::string::__init_copy_ctor_external((std::string *)a3, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
    goto LABEL_14;
  }
  *(_BYTE *)(a3 + 80) &= ~1u;
  if (*((char *)this + 39) < 0)
    goto LABEL_13;
LABEL_3:
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
LABEL_14:
  *(_OWORD *)(a3 + 24) = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)((char *)this + 72);
  *(_WORD *)(a3 + 72) = *((_WORD *)this + 44);
}

double `anonymous namespace'::RealFile::getName@<D0>(_anonymous_namespace_::RealFile *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type **v3;
  std::string::size_type v4;
  std::string::size_type *v5;
  std::string::size_type *v6;
  std::string::size_type *v7;
  int v8;
  std::string::size_type *v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  std::string v15;

  v3 = (const std::string::value_type **)((char *)this + 96);
  if (*((char *)this + 119) < 0)
  {
    v4 = *((_QWORD *)this + 13);
    if (v4)
    {
      std::string::__init_copy_ctor_external(&v15, *v3, v4);
      goto LABEL_23;
    }
LABEL_6:
    v7 = (std::string::size_type *)*((_QWORD *)this + 2);
    v5 = (std::string::size_type *)((char *)this + 16);
    v6 = v7;
    v8 = *((char *)v5 + 23);
    if (v8 >= 0)
      v9 = v5;
    else
      v9 = v6;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)v5 + 23);
    else
      v10 = v5[1];
    if (!v9)
    {
      memset(&v15, 0, sizeof(v15));
      goto LABEL_23;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v10 >= 0x17)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = (std::string *)operator new(v12 + 1);
      v15.__r_.__value_.__l.__size_ = v10;
      v15.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      *((_BYTE *)&v15.__r_.__value_.__s + 23) = v10;
      v11 = &v15;
      if (!v10)
        goto LABEL_22;
    }
    memmove(v11, v9, v10);
LABEL_22:
    v11->__r_.__value_.__s.__data_[v10] = 0;
    goto LABEL_23;
  }
  if (!*((_BYTE *)this + 119))
    goto LABEL_6;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)v3;
  v15.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
LABEL_23:
  a2[1].__r_.__value_.__s.__data_[0] &= ~1u;
  result = *(double *)&v15.__r_.__value_.__l.__data_;
  *a2 = v15;
  return result;
}

void `anonymous namespace'::RealFile::getBuffer(_anonymous_namespace_::RealFile *this@<X0>, const llvm::Twine *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  llvm::MemoryBuffer::getOpenFile((llvm::sys::fs *)*((unsigned int *)this + 2), a2, a3, a4, a5, 0, a6);
}

uint64_t `anonymous namespace'::RealFile::close(_anonymous_namespace_::RealFile *this, int *a2)
{
  uint64_t result;

  result = llvm::sys::fs::closeFile((_anonymous_namespace_::RealFile *)((char *)this + 8), a2);
  *((_DWORD *)this + 2) = -1;
  return result;
}

void `anonymous namespace'::RealFile::setPath(_anonymous_namespace_::RealFile *this, const llvm::Twine *a2)
{
  void **v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  __int128 v11;
  __int128 v12;
  std::string v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  std::string __p;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(a2, &__p);
  v4 = (void **)((char *)this + 96);
  if (*((char *)this + 119) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 14) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  (*(void (**)(std::string *__return_ptr, _anonymous_namespace_::RealFile *))(*(_QWORD *)this + 16))(&__p, this);
  v5 = v24;
  if ((v24 & 1) == 0)
  {
    v12 = v19;
    v6 = v20;
    v7 = v22;
    v8 = v21;
    v9 = v23;
    llvm::Twine::str(a2, &v13);
    v14 = v12;
    *(_QWORD *)&v15 = v6;
    *((_QWORD *)&v15 + 1) = v8;
    *(_QWORD *)&v16 = v7;
    *((_QWORD *)&v16 + 1) = v9;
    v17 = 0;
    v10 = (void **)((char *)this + 16);
    if (*((char *)this + 39) < 0)
      operator delete(*v10);
    *(_OWORD *)v10 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 4) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
    v11 = v15;
    *(_OWORD *)((char *)this + 40) = v14;
    *(_OWORD *)((char *)this + 56) = v11;
    *(_OWORD *)((char *)this + 72) = v16;
    *((_WORD *)this + 44) = v17;
    v5 = v24;
  }
  if ((v5 & 1) == 0 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void std::__shared_ptr_emplace<`anonymous namespace'::RealFSDirIter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E51C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::RealFSDirIter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E51C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::RealFSDirIter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::RealFSDirIter::~RealFSDirIter(_anonymous_namespace_::RealFSDirIter *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E0E15938;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    *(_QWORD *)this = off_1E0E23C88;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*((void **)this + 1));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E0E23C88;
  if (*((char *)this + 31) < 0)
    goto LABEL_8;
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E0E15938;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *(_QWORD *)this = off_1E0E23C88;
      if ((*((char *)this + 31) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_9:
      operator delete(*((void **)this + 1));
      operator delete(this);
      return;
    }
  }
  *(_QWORD *)this = off_1E0E23C88;
  if (*((char *)this + 31) < 0)
    goto LABEL_9;
LABEL_6:
  operator delete(this);
}

unint64_t `anonymous namespace'::RealFSDirIter::increment(_anonymous_namespace_::RealFSDirIter *this)
{
  char *v2;
  unint64_t v3;
  _BOOL4 v4;
  std::string::size_type v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string __p;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  _QWORD v22[5];
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::system_category();
  v2 = (char *)this + 40;
  v3 = llvm::sys::fs::detail::directory_iterator_increment(*((_QWORD *)this + 5));
  v20 = 0;
  v19 = 0;
  v21 = 1;
  v4 = llvm::sys::fs::directory_iterator::operator==((uint64_t *)this + 5, &v19);
  if (!v4)
  {
    v9 = *(_QWORD *)v2;
    if (*(char *)(*(_QWORD *)v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
      v9 = *(_QWORD *)v2;
      v7 = *(_DWORD *)(*(_QWORD *)v2 + 32);
      if (v7 != 9)
        goto LABEL_9;
    }
    else
    {
      v10 = *(_OWORD *)(v9 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      v7 = *(_DWORD *)(v9 + 32);
      if (v7 != 9)
        goto LABEL_9;
    }
    llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v9 + 8), (uint64_t)v22);
    if ((v24 & 1) != 0)
      v7 = 9;
    else
      v7 = v23;
LABEL_9:
    v22[0] = __p.__r_.__value_.__l.__size_;
    v5 = __p.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
    goto LABEL_10;
  }
  v5 = 0;
  v6 = 0;
  *(_QWORD *)((char *)v22 + 7) = 0;
  v22[0] = 0;
  v7 = 9;
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
LABEL_3:
    v8 = v22[0];
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = v8;
    *(_QWORD *)((char *)this + 23) = *(_QWORD *)((char *)v22 + 7);
    *((_BYTE *)this + 31) = v6;
    *((_DWORD *)this + 8) = v7;
    goto LABEL_15;
  }
LABEL_10:
  operator delete(*((void **)this + 1));
  v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  v12 = v22[0];
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = v12;
  *(_QWORD *)((char *)this + 23) = *(_QWORD *)((char *)v22 + 7);
  *((_BYTE *)this + 31) = v6;
  *((_DWORD *)this + 8) = v7;
  v13 = !v11 || v4;
  if ((v13 & 1) == 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_15:
  v14 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v3;
}

llvm::sys::fs::directory_iterator *llvm::sys::fs::directory_iterator::directory_iterator(llvm::sys::fs::directory_iterator *this, const char **a2, std::error_code *a3, char a4)
{
  char v4;
  char *v8;
  uint64_t v9;
  int v10;
  size_t v11;
  const void *v12;
  const std::error_category *v13;
  int v15;
  void *v16;
  __int128 v17;
  _QWORD v18[17];

  v4 = a4;
  v18[16] = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 16) = a4;
  v8 = (char *)operator new(0x70uLL);
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &unk_1E0E51CF8;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 7) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 14) = 9;
  v8[60] = 1;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *(_OWORD *)(v8 + 92) = 0u;
  *((_DWORD *)v8 + 27) = 0xFFFF;
  *(_OWORD *)(v8 + 24) = 0u;
  v9 = (uint64_t)(v8 + 24);
  *(_QWORD *)this = v8 + 24;
  *((_QWORD *)this + 1) = v8;
  v10 = *((unsigned __int8 *)a2 + 33);
  v16 = v18;
  v17 = xmmword_181236BB0;
  if (v10 == 1)
  {
    v11 = 0;
    v12 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v12 = *a2;
        if (*a2)
          v11 = strlen(*a2);
        else
          v11 = 0;
        break;
      case 4:
        v15 = (*a2)[23];
        if (v15 >= 0)
          v12 = *a2;
        else
          v12 = *(const void **)*a2;
        if (v15 >= 0)
          v11 = *((unsigned __int8 *)*a2 + 23);
        else
          v11 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
      case 6:
        v12 = *a2;
        v11 = (size_t)a2[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v16);
    v12 = v16;
    v11 = v17;
    v4 = *((_BYTE *)this + 16) != 0;
  }
  *(_QWORD *)&a3->__val_ = llvm::sys::fs::detail::directory_iterator_construct(v9, v12, v11, v4);
  a3->__cat_ = v13;
  if (v16 != v18)
    free(v16);
  return this;
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::__on_zero_shared(uint64_t a1)
{
  llvm::sys::fs::detail::directory_iterator_destruct(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

BOOL llvm::sys::fs::directory_iterator::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  _BOOL8 result;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  const void **v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[28];
  int v46;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 1;
  if (v3)
  {
    if (v2)
    {
      v4 = *(unsigned __int8 *)(v2 + 31);
      v5 = *(_QWORD *)(v2 + 16);
      if ((v4 & 0x80u) == 0)
        v6 = *(unsigned __int8 *)(v2 + 31);
      else
        v6 = *(_QWORD *)(v2 + 16);
      v7 = *(unsigned __int8 *)(v3 + 31);
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v3 + 16);
      if (v6 == v7)
      {
        v9 = (const void **)(v2 + 8);
        v12 = *(unsigned __int8 **)(v3 + 8);
        v10 = (unsigned __int8 *)(v3 + 8);
        v11 = v12;
        if (v8 >= 0)
          v13 = v10;
        else
          v13 = v11;
        if ((v4 & 0x80) != 0)
          return memcmp(*v9, v13, v5) == 0;
        if ((_DWORD)v4)
        {
          v14 = v4 - 1;
          do
          {
            v16 = *(unsigned __int8 *)v9;
            v9 = (const void **)((char *)v9 + 1);
            v15 = v16;
            v18 = *v13++;
            v17 = v18;
            v19 = v14-- != 0;
            v20 = v19;
            result = v15 == v17;
          }
          while (v15 == v17 && (v20 & 1) != 0);
          return result;
        }
        return 1;
      }
      return 0;
    }
    v42 = 0u;
    v43 = 0u;
    DWORD2(v43) = 9;
    BYTE12(v43) = 1;
    v44 = 0u;
    memset(v45, 0, sizeof(v45));
    v46 = 0xFFFF;
    v33 = *(unsigned __int8 *)(v3 + 31);
    v23 = *(_QWORD *)(v3 + 16);
    if ((v33 & 0x80u) == 0)
      v34 = *(unsigned __int8 *)(v3 + 31);
    else
      v34 = *(_QWORD *)(v3 + 16);
    if (v34)
      return 0;
    v25 = (const void **)(v3 + 8);
    if ((v33 & 0x80) == 0)
    {
      if (!(_DWORD)v33)
        return 1;
      v35 = v33 - 1;
      v36 = (unsigned __int8 *)&v42;
      do
      {
        v38 = *(unsigned __int8 *)v25;
        v25 = (const void **)((char *)v25 + 1);
        v37 = v38;
        v40 = *v36++;
        v39 = v40;
        v19 = v35-- != 0;
        v41 = v19;
        result = v37 == v39;
      }
      while (v37 == v39 && (v41 & 1) != 0);
      return result;
    }
    return memcmp(*v25, &v42, v23) == 0;
  }
  v42 = 0u;
  v43 = 0u;
  DWORD2(v43) = 9;
  BYTE12(v43) = 1;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  v46 = 0xFFFF;
  v22 = *(unsigned __int8 *)(v2 + 31);
  v23 = *(_QWORD *)(v2 + 16);
  if ((v22 & 0x80u) == 0)
    v24 = *(unsigned __int8 *)(v2 + 31);
  else
    v24 = *(_QWORD *)(v2 + 16);
  if (v24)
    return 0;
  v25 = (const void **)(v2 + 8);
  if ((v22 & 0x80) != 0)
    return memcmp(*v25, &v42, v23) == 0;
  if (!*(_BYTE *)(v2 + 31))
    return 1;
  v26 = v22 - 1;
  v27 = (unsigned __int8 *)&v42;
  do
  {
    v29 = *(unsigned __int8 *)v25;
    v25 = (const void **)((char *)v25 + 1);
    v28 = v29;
    v31 = *v27++;
    v30 = v31;
    v19 = v26-- != 0;
    v32 = v19;
    result = v28 == v30;
  }
  while (v28 == v30 && (v32 & 1) != 0);
  return result;
}

uint64_t llvm::handleErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      v6 = (uint64_t **)v4[1];
      v7 = (uint64_t **)v4[2];
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v12 = v8;
          v9 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(uint64_t *, void *))(*v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
          {
            v10 = **a2;
            **a2 = (uint64_t)v9;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            v9 = 0;
          }
          v11 = v9;
          llvm::ErrorList::join(&v12, &v11, &v13);
          v8 = v13;
          *a3 = v13;
          v13 = 0;
          if (v11)
            (*(void (**)(uint64_t *))(*v11 + 8))(v11);
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD *, void *))(*v4 + 48))(v4, &llvm::ErrorInfoBase::ID);
      if ((_DWORD)result)
      {
        result = **a2;
        **a2 = (uint64_t)v4;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v4 = 0;
      }
      *a3 = (uint64_t)v4;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void llvm::initWithColorOptions(llvm *this)
{
  if (!atomic_load(UseColor))
}

uint64_t DefaultAutoDetectFunction(const llvm::raw_ostream *a1)
{
  if (!atomic_load(UseColor))
  {
    if (*(_DWORD *)(UseColor[0] + 128))
      goto LABEL_3;
    return (*(uint64_t (**)(const llvm::raw_ostream *))(*(_QWORD *)a1 + 56))(a1);
  }
  if (!*(_DWORD *)(UseColor[0] + 128))
    return (*(uint64_t (**)(const llvm::raw_ostream *))(*(_QWORD *)a1 + 56))(a1);
LABEL_3:
  if (!atomic_load(UseColor))
  return *(_DWORD *)(UseColor[0] + 128) == 1;
}

llvm::raw_ostream *llvm::WithColor::error(llvm::raw_ostream *a1, const void *a2, size_t a3, char a4)
{
  void *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  uint64_t (**v10)();
  _DWORD *v11;
  llvm::raw_ostream *v12;

  if (!a3)
  {
LABEL_5:
    v10 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    if ((a4 & 1) != 0)
      goto LABEL_11;
    goto LABEL_9;
  }
  v7 = (void *)*((_QWORD *)a1 + 4);
  if (a3 <= *((_QWORD *)a1 + 3) - (_QWORD)v7)
  {
    memcpy(v7, a2, a3);
    v9 = (_WORD *)(*((_QWORD *)a1 + 4) + a3);
    *((_QWORD *)a1 + 4) = v9;
    v8 = a1;
    if (*((_QWORD *)a1 + 3) - (_QWORD)v9 > 1uLL)
      goto LABEL_4;
  }
  else
  {
    v8 = llvm::raw_ostream::write(a1, (const char *)a2, a3);
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
    {
LABEL_4:
      *v9 = 8250;
      *((_QWORD *)v8 + 4) += 2;
      goto LABEL_5;
    }
  }
  llvm::raw_ostream::write(v8, ": ", 2uLL);
  v10 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((a4 & 1) != 0)
    goto LABEL_11;
LABEL_9:
  if (((unsigned int (*)(const llvm::raw_ostream *))v10[383])(a1))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 1, 1, 0);
LABEL_11:
  v11 = (_DWORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v11 > 6uLL)
  {
    *(_DWORD *)((char *)v11 + 3) = 540701295;
    *v11 = 1869771365;
    *((_QWORD *)a1 + 4) += 7;
    v12 = a1;
    if ((a4 & 1) != 0)
      return v12;
  }
  else
  {
    v12 = llvm::raw_ostream::write(a1, "error: ", 7uLL);
    if ((a4 & 1) != 0)
      return v12;
  }
  if (!((unsigned int (*)(const llvm::raw_ostream *))v10[383])(a1))
    return v12;
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  return v12;
}

llvm::raw_ostream *llvm::WithColor::warning(llvm::WithColor *this)
{
  llvm::raw_ostream *v1;

  v1 = (llvm::raw_ostream *)llvm::errs(this);
  return llvm::WithColor::warning(v1, "", 0, 0);
}

llvm::raw_ostream *llvm::WithColor::warning(llvm::raw_ostream *a1, const void *a2, size_t a3, char a4)
{
  void *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  uint64_t (**v10)();
  uint64_t v11;
  llvm::raw_ostream *v12;

  if (!a3)
  {
LABEL_5:
    v10 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    if ((a4 & 1) != 0)
      goto LABEL_11;
    goto LABEL_9;
  }
  v7 = (void *)*((_QWORD *)a1 + 4);
  if (a3 <= *((_QWORD *)a1 + 3) - (_QWORD)v7)
  {
    memcpy(v7, a2, a3);
    v9 = (_WORD *)(*((_QWORD *)a1 + 4) + a3);
    *((_QWORD *)a1 + 4) = v9;
    v8 = a1;
    if (*((_QWORD *)a1 + 3) - (_QWORD)v9 > 1uLL)
      goto LABEL_4;
  }
  else
  {
    v8 = llvm::raw_ostream::write(a1, (const char *)a2, a3);
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
    {
LABEL_4:
      *v9 = 8250;
      *((_QWORD *)v8 + 4) += 2;
      goto LABEL_5;
    }
  }
  llvm::raw_ostream::write(v8, ": ", 2uLL);
  v10 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((a4 & 1) != 0)
    goto LABEL_11;
LABEL_9:
  if (((unsigned int (*)(const llvm::raw_ostream *))v10[383])(a1))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 5, 1, 0);
LABEL_11:
  v11 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(*((_QWORD *)a1 + 3) - v11) > 8)
  {
    *(_BYTE *)(v11 + 8) = 32;
    *(_QWORD *)v11 = *(_QWORD *)"warning: ";
    *((_QWORD *)a1 + 4) += 9;
    v12 = a1;
    if ((a4 & 1) != 0)
      return v12;
  }
  else
  {
    v12 = llvm::raw_ostream::write(a1, "warning: ", 9uLL);
    if ((a4 & 1) != 0)
      return v12;
  }
  if (!((unsigned int (*)(const llvm::raw_ostream *))v10[383])(a1))
    return v12;
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  return v12;
}

llvm::raw_ostream *llvm::WithColor::note(llvm::raw_ostream *a1, const void *a2, size_t a3, char a4)
{
  void *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  uint64_t (**v10)();
  uint64_t v11;
  llvm::raw_ostream *v12;

  if (!a3)
  {
LABEL_5:
    v10 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    if ((a4 & 1) != 0)
      goto LABEL_11;
    goto LABEL_9;
  }
  v7 = (void *)*((_QWORD *)a1 + 4);
  if (a3 <= *((_QWORD *)a1 + 3) - (_QWORD)v7)
  {
    memcpy(v7, a2, a3);
    v9 = (_WORD *)(*((_QWORD *)a1 + 4) + a3);
    *((_QWORD *)a1 + 4) = v9;
    v8 = a1;
    if (*((_QWORD *)a1 + 3) - (_QWORD)v9 > 1uLL)
      goto LABEL_4;
  }
  else
  {
    v8 = llvm::raw_ostream::write(a1, (const char *)a2, a3);
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
    {
LABEL_4:
      *v9 = 8250;
      *((_QWORD *)v8 + 4) += 2;
      goto LABEL_5;
    }
  }
  llvm::raw_ostream::write(v8, ": ", 2uLL);
  v10 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((a4 & 1) != 0)
    goto LABEL_11;
LABEL_9:
  if (((unsigned int (*)(const llvm::raw_ostream *))v10[383])(a1))
    (*(void (**)(llvm::raw_ostream *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0, 1, 0);
LABEL_11:
  v11 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(*((_QWORD *)a1 + 3) - v11) > 5)
  {
    *(_WORD *)(v11 + 4) = 8250;
    *(_DWORD *)v11 = 1702129518;
    *((_QWORD *)a1 + 4) += 6;
    v12 = a1;
    if ((a4 & 1) != 0)
      return v12;
  }
  else
  {
    v12 = llvm::raw_ostream::write(a1, "note: ", 6uLL);
    if ((a4 & 1) != 0)
      return v12;
  }
  if (!((unsigned int (*)(const llvm::raw_ostream *))v10[383])(a1))
    return v12;
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  return v12;
}

llvm::raw_ostream *llvm::WithColor::remark(llvm::raw_ostream *a1, const void *a2, size_t a3, char a4)
{
  void *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  uint64_t (**v10)();
  _QWORD *v11;
  llvm::raw_ostream *v12;

  if (!a3)
  {
LABEL_5:
    v10 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    if ((a4 & 1) != 0)
      goto LABEL_11;
    goto LABEL_9;
  }
  v7 = (void *)*((_QWORD *)a1 + 4);
  if (a3 <= *((_QWORD *)a1 + 3) - (_QWORD)v7)
  {
    memcpy(v7, a2, a3);
    v9 = (_WORD *)(*((_QWORD *)a1 + 4) + a3);
    *((_QWORD *)a1 + 4) = v9;
    v8 = a1;
    if (*((_QWORD *)a1 + 3) - (_QWORD)v9 > 1uLL)
      goto LABEL_4;
  }
  else
  {
    v8 = llvm::raw_ostream::write(a1, (const char *)a2, a3);
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
    {
LABEL_4:
      *v9 = 8250;
      *((_QWORD *)v8 + 4) += 2;
      goto LABEL_5;
    }
  }
  llvm::raw_ostream::write(v8, ": ", 2uLL);
  v10 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((a4 & 1) != 0)
    goto LABEL_11;
LABEL_9:
  if (((unsigned int (*)(const llvm::raw_ostream *))v10[383])(a1))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 4, 1, 0);
LABEL_11:
  v11 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v11 > 7uLL)
  {
    *v11 = 0x203A6B72616D6572;
    *((_QWORD *)a1 + 4) += 8;
    v12 = a1;
    if ((a4 & 1) != 0)
      return v12;
  }
  else
  {
    v12 = llvm::raw_ostream::write(a1, "remark: ", 8uLL);
    if ((a4 & 1) != 0)
      return v12;
  }
  if (!((unsigned int (*)(const llvm::raw_ostream *))v10[383])(a1))
    return v12;
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  return v12;
}

void llvm::WithColor::~WithColor(llvm::WithColor *this)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    if (v2 != 1)
      return;
  }
  else if (!llvm::WithColor::AutoDetectFunction(*(const llvm::raw_ostream **)this))
  {
    return;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
}

_QWORD *llvm::WithColor::changeColor(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;

  v8 = *((_DWORD *)a1 + 2);
  if (!v8)
  {
    if (!llvm::WithColor::AutoDetectFunction((const llvm::raw_ostream *)*a1))
      return a1;
    goto LABEL_3;
  }
  if (v8 == 1)
LABEL_3:
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a2, a3, a4);
  return a1;
}

uint64_t `anonymous namespace'::CreateUseColor::call(_anonymous_namespace_::CreateUseColor *this)
{
  void *v1;
  unsigned __int8 v2;
  int v4;
  int *v5;
  __int128 v6;
  llvm::cl::OptionCategory *v7;

  v1 = operator new(0xC0uLL);
  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_54);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_54))
  {
    qword_1ECD334A8 = (uint64_t)"Color Options";
    qword_1ECD334B0 = 13;
    unk_1ECD334B8 = "";
    qword_1ECD334C0 = 0;
    llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&qword_1ECD334A8);
    __cxa_guard_release(&_MergedGlobals_54);
  }
  v7 = (llvm::cl::OptionCategory *)&qword_1ECD334A8;
  *(_QWORD *)&v6 = "Use colors in output (default=autodetect)";
  *((_QWORD *)&v6 + 1) = 41;
  v4 = 0;
  v5 = &v4;
  return llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::opt<char [6],llvm::cl::cat,llvm::cl::desc,llvm::cl::initializer<llvm::cl::BOOLOrDefault>>((uint64_t)v1, (int8x16_t *)"color", &v7, &v6, &v5);
}

uint64_t llvm::object_deleter<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>>::call(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::opt<char [6],llvm::cl::cat,llvm::cl::desc,llvm::cl::initializer<llvm::cl::BOOLOrDefault>>(uint64_t a1, int8x16_t *a2, llvm::cl::OptionCategory **a3, _OWORD *a4, _DWORD **a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  _DWORD *v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E0E22F08;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23380;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23AB8;
  *(_QWORD *)(a1 + 160) = &unk_1E0E4FA00;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  llvm::cl::Option::addCategory((llvm::cl::Option *)a1, *a3);
  *(_OWORD *)(a1 + 32) = *a4;
  v15 = *a5;
  *(_DWORD *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v15;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v11;

  v11 = 0;
  v8 = llvm::cl::parser<llvm::cl::BOOLOrDefault>::parse((int)a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getValueExpectedFlagDefault()
{
  return 1;
}

_QWORD *llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_1E0E23380;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &unk_1E0E23380;
  v2 = __p + 160;
  v3 = (char *)*((_QWORD *)__p + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 148) || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a1 + 128))
  {
    v3 = *(_DWORD *)(a1 + 128);
    v5 = *(_DWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 148);
    v4 = &unk_1E0E22F08;
    llvm::cl::parser<llvm::cl::BOOLOrDefault>::printOptionDiff((llvm *)(a1 + 152), a1, v3, (uint64_t)&v4, a2);
  }
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E0E4FA00;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E0E4FA00;
}

uint64_t std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181260E2BLL)
    return a1 + 8;
  if (((v3 & 0x8000000181260E2BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181260E2BLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181260E2BLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::target_type()
{
}

uint64_t llvm::format_object<unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

void llvm::raw_ostream::~raw_ostream(llvm::raw_ostream *this)
{
  void *v1;

  *(_QWORD *)this = off_1E0E200A8;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = (void *)*((_QWORD *)this + 2);
    if (v1)
      operator delete[](v1);
  }
}

uint64_t llvm::raw_ostream::preferred_buffer_size(llvm::raw_ostream *this)
{
  return 1024;
}

void llvm::raw_ostream::SetBuffered(llvm::raw_ostream *this)
{
  uint64_t v2;
  const char *v3;
  void **v4;
  const char *v5;
  size_t v6;
  char *v7;

  v2 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)this + 88))(this);
  v4 = (void **)((char *)this + 16);
  v3 = (const char *)*((_QWORD *)this + 2);
  v5 = (const char *)*((_QWORD *)this + 4);
  if (v2)
  {
    v6 = v2;
    if (v5 != v3)
    {
      *((_QWORD *)this + 4) = v3;
      llvm::raw_ostream::flush_tied_then_write(this, v3, v5 - v3);
    }
    v7 = (char *)operator new[](v6);
    if (*((_DWORD *)this + 14) == 1)
    {
      if (*v4)
        operator delete[](*v4);
    }
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = &v7[v6];
    *((_QWORD *)this + 4) = v7;
    *((_DWORD *)this + 14) = 1;
  }
  else
  {
    if (v5 != v3)
    {
      *((_QWORD *)this + 4) = v3;
      llvm::raw_ostream::flush_tied_then_write(this, v3, v5 - v3);
    }
    if (*((_DWORD *)this + 14) == 1 && *v4)
      operator delete[](*v4);
    *((_DWORD *)this + 14) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *v4 = 0;
  }
}

void llvm::raw_ostream::SetBufferAndMode(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v8;

  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v8 = *(void **)(a1 + 16);
    if (v8)
      operator delete[](v8);
  }
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a2 + a3;
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 56) = a4;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, unint64_t a2)
{
  llvm::write_integer(a1, a2, 0, 0);
  return a1;
}

{
  llvm::write_integer(a1, a2, 0, 0);
  return a1;
}

{
  llvm::write_hex(a1, a2, 3, 0, 0);
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::write_hex(llvm::raw_ostream *this, unint64_t a2)
{
  llvm::write_hex(this, a2, 1, 0, 0);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  char *v14;
  __int128 v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 4);
  if (v4 < 4)
  {
    v7 = 127;
  }
  else
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    if (v5 < v4)
      v6 = v5;
    else
      v6 = v5 + 1;
    if (v5 >= 0)
      v7 = v6;
    else
      v7 = (2 * v4);
    if (v4 >= v7)
    {
      *((_QWORD *)a1 + 4) += v7;
      return a1;
    }
  }
  v14 = (char *)v16;
  v15 = xmmword_181236BB0;
  do
  {
    v12 = v15;
    if ((_QWORD)v15 != v7)
    {
      if ((unint64_t)v15 <= v7)
      {
        if (*((_QWORD *)&v15 + 1) < v7)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v14, v16, v7, 1);
          v12 = v15;
        }
        if (v7 != v12)
          bzero(&v14[v12], v7 - v12);
      }
      *(_QWORD *)&v15 = v7;
    }
    v8 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 8))(a2, v14, v7);
    if (v8 < v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v8 >= 0)
      v10 = v9;
    else
      v10 = (2 * v7);
    v11 = v7 >= v10;
    v7 = v10;
  }
  while (!v11);
  llvm::raw_ostream::write(a1, v14, v10);
  if (v14 != (char *)v16)
    free(v14);
  return a1;
}

{
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  size_t v12;
  void (**v14)(llvm::raw_ostream *__hidden);
  int v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *v23;
  __int128 v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 20))
  {
    v4 = *(unsigned __int8 *)(a2 + 22);
    if (*(_BYTE *)(a2 + 22))
      v5 = *(_BYTE *)(a2 + 21) == 0;
    else
      v5 = 0;
    if (v5)
      v6 = 3;
    else
      v6 = 1;
    if (*(_BYTE *)(a2 + 21))
      v7 = v4 == 0;
    else
      v7 = 0;
    if (v7)
      v6 = 0;
    if (*(_BYTE *)(a2 + 21))
      v8 = v4 == 0;
    else
      v8 = 1;
    if (v8)
      v9 = v6;
    else
      v9 = 2;
    llvm::write_hex(a1, *(_QWORD *)a2, v9, *(unsigned int *)(a2 + 16), 1);
  }
  else
  {
    v22 = &v23;
    v23 = v25;
    v24 = xmmword_181236BC0;
    v15 = 0;
    v19 = 0;
    v20 = 0;
    v14 = (void (**)(llvm::raw_ostream *__hidden))off_1E0E22B88;
    v21 = 0;
    v17 = 0;
    v18 = 0;
    __p = 0;
    llvm::write_integer((llvm::raw_ostream *)&v14, *(_QWORD *)(a2 + 8), 0, 0);
    v10 = *(unsigned int *)(a2 + 16);
    if ((unint64_t)v24 < v10)
    {
      v11 = v10 - v24;
      if ((v10 - v24) >= 0x50)
      {
        do
        {
          if (v11 >= 0x4F)
            v12 = 79;
          else
            v12 = v11;
          llvm::raw_ostream::write(a1, "                                                                                ", v12);
          v11 -= v12;
        }
        while (v11);
      }
      else
      {
        llvm::raw_ostream::write(a1, "                                                                                ", (v10 - v24));
      }
    }
    llvm::raw_ostream::write(a1, (const char *)v23, v24);
    v14 = off_1E0E200A8;
    if (v21 == 1 && __p)
      operator delete[](__p);
    if (v23 != v25)
      free(v23);
  }
  return a1;
}

uint64_t llvm::raw_ostream::write_escaped(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  const char *v9;
  unint64_t v10;
  _BYTE *v11;
  const char *v12;
  _BYTE *v13;
  const char *v14;
  _BYTE *v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  _BYTE *v19;
  const char *v20;
  _BYTE *v21;
  const char *v22;
  const char *v23;
  _BYTE *v24;
  const char *v25;
  unsigned int v26;
  _BYTE *v27;
  const char *v28;
  char v29;
  char *v30;
  const char *v31;
  unsigned int v32;
  _BYTE *v33;
  const char *v34;
  char v35;
  char *v36;
  const char *v37;
  char v38;
  char *v39;
  const char *v40;
  _BYTE *v41;
  const char *v42;
  _BYTE *v43;
  const char *v44;
  _BYTE *v45;
  const char *v46;
  char v48;

  if (a3)
  {
    v6 = a2;
    v7 = &a2[a3];
    do
    {
      v10 = *v6;
      if (*v6 > 0x21u)
      {
        if ((_DWORD)v10 == 34)
        {
          while (1)
          {
            v45 = *(_BYTE **)(a1 + 32);
            if ((unint64_t)v45 < *(_QWORD *)(a1 + 24))
              goto LABEL_122;
            v46 = *(const char **)(a1 + 16);
            if (v46)
              break;
            if (!*(_DWORD *)(a1 + 56))
            {
              v48 = 92;
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
              goto LABEL_3;
            }
            llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
          }
          *(_QWORD *)(a1 + 32) = v46;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v46, v45 - v46);
          v45 = *(_BYTE **)(a1 + 32);
LABEL_122:
          *(_QWORD *)(a1 + 32) = v45 + 1;
          *v45 = 92;
          while (1)
          {
LABEL_3:
            v8 = *(_BYTE **)(a1 + 32);
            if ((unint64_t)v8 < *(_QWORD *)(a1 + 24))
              goto LABEL_8;
            v9 = *(const char **)(a1 + 16);
            if (v9)
              break;
            if (!*(_DWORD *)(a1 + 56))
            {
              v48 = 34;
              goto LABEL_141;
            }
            llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
          }
          *(_QWORD *)(a1 + 32) = v9;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v9, v8 - v9);
          v8 = *(_BYTE **)(a1 + 32);
LABEL_8:
          *(_QWORD *)(a1 + 32) = v8 + 1;
          *v8 = 34;
          goto LABEL_9;
        }
        if ((_DWORD)v10 == 92)
        {
          v13 = *(_BYTE **)(a1 + 32);
          if ((unint64_t)v13 >= *(_QWORD *)(a1 + 24))
          {
            while (1)
            {
              v14 = *(const char **)(a1 + 16);
              if (v14)
                break;
              if (!*(_DWORD *)(a1 + 56))
              {
                v48 = 92;
                llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
                while (1)
                {
LABEL_45:
                  v21 = *(_BYTE **)(a1 + 32);
                  if ((unint64_t)v21 < *(_QWORD *)(a1 + 24))
                    goto LABEL_52;
                  v22 = *(const char **)(a1 + 16);
                  if (v22)
                    break;
                  if (!*(_DWORD *)(a1 + 56))
                  {
                    v48 = 92;
                    goto LABEL_141;
                  }
                  llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
                }
                *(_QWORD *)(a1 + 32) = v22;
                llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v22, v21 - v22);
                v21 = *(_BYTE **)(a1 + 32);
LABEL_52:
                *(_QWORD *)(a1 + 32) = v21 + 1;
                *v21 = 92;
                goto LABEL_9;
              }
              llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
              v13 = *(_BYTE **)(a1 + 32);
              if ((unint64_t)v13 < *(_QWORD *)(a1 + 24))
                goto LABEL_44;
            }
            *(_QWORD *)(a1 + 32) = v14;
            llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v14, v13 - v14);
            v13 = *(_BYTE **)(a1 + 32);
          }
LABEL_44:
          *(_QWORD *)(a1 + 32) = v13 + 1;
          *v13 = 92;
          goto LABEL_45;
        }
LABEL_25:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(_BYTE **)(a1 + 32);
        if ((v10 - 32) <= 0x5E)
        {
          if ((unint64_t)v15 >= v16)
          {
            while (1)
            {
              v17 = *(const char **)(a1 + 16);
              if (v17)
                break;
              if (!*(_DWORD *)(a1 + 56))
              {
                v48 = v10;
                goto LABEL_141;
              }
              llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
              v15 = *(_BYTE **)(a1 + 32);
              if ((unint64_t)v15 < *(_QWORD *)(a1 + 24))
                goto LABEL_59;
            }
            *(_QWORD *)(a1 + 32) = v17;
            llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v17, v15 - v17);
            v15 = *(_BYTE **)(a1 + 32);
          }
LABEL_59:
          *(_QWORD *)(a1 + 32) = v15 + 1;
          *v15 = v10;
          goto LABEL_9;
        }
        if (a4)
        {
          if ((unint64_t)v15 >= v16)
          {
            while (1)
            {
              v18 = *(const char **)(a1 + 16);
              if (v18)
                break;
              if (!*(_DWORD *)(a1 + 56))
              {
                v48 = 92;
                llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
                while (1)
                {
LABEL_62:
                  v24 = *(_BYTE **)(a1 + 32);
                  if ((unint64_t)v24 < *(_QWORD *)(a1 + 24))
                    goto LABEL_73;
                  v25 = *(const char **)(a1 + 16);
                  if (v25)
                    break;
                  if (!*(_DWORD *)(a1 + 56))
                  {
                    v48 = 120;
                    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
                    goto LABEL_74;
                  }
                  llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
                }
                *(_QWORD *)(a1 + 32) = v25;
                llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v25, v24 - v25);
                v24 = *(_BYTE **)(a1 + 32);
LABEL_73:
                *(_QWORD *)(a1 + 32) = v24 + 1;
                *v24 = 120;
LABEL_74:
                v29 = llvm::hexdigit(unsigned int,BOOL)::LUT[v10 >> 4];
                v30 = *(char **)(a1 + 32);
                if ((unint64_t)v30 >= *(_QWORD *)(a1 + 24))
                {
                  while (1)
                  {
                    v31 = *(const char **)(a1 + 16);
                    if (v31)
                      break;
                    if (!*(_DWORD *)(a1 + 56))
                    {
                      v48 = v29;
                      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
LABEL_87:
                      v35 = llvm::hexdigit(unsigned int,BOOL)::LUT[v10 & 0xF];
                      v36 = *(char **)(a1 + 32);
                      if ((unint64_t)v36 >= *(_QWORD *)(a1 + 24))
                      {
                        while (1)
                        {
                          v37 = *(const char **)(a1 + 16);
                          if (v37)
                            break;
                          if (!*(_DWORD *)(a1 + 56))
                          {
                            v48 = v35;
                            goto LABEL_141;
                          }
                          llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
                          v36 = *(char **)(a1 + 32);
                          if ((unint64_t)v36 < *(_QWORD *)(a1 + 24))
                            goto LABEL_99;
                        }
                        *(_QWORD *)(a1 + 32) = v37;
                        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v37, v36 - v37);
                        v36 = *(char **)(a1 + 32);
                      }
LABEL_99:
                      *(_QWORD *)(a1 + 32) = v36 + 1;
                      *v36 = v35;
                      goto LABEL_9;
                    }
                    llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
                    v30 = *(char **)(a1 + 32);
                    if ((unint64_t)v30 < *(_QWORD *)(a1 + 24))
                      goto LABEL_86;
                  }
                  *(_QWORD *)(a1 + 32) = v31;
                  llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v31, v30 - v31);
                  v30 = *(char **)(a1 + 32);
                }
LABEL_86:
                *(_QWORD *)(a1 + 32) = v30 + 1;
                *v30 = v29;
                goto LABEL_87;
              }
              llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
              v15 = *(_BYTE **)(a1 + 32);
              if ((unint64_t)v15 < *(_QWORD *)(a1 + 24))
                goto LABEL_61;
            }
            *(_QWORD *)(a1 + 32) = v18;
            llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v18, v15 - v18);
            v15 = *(_BYTE **)(a1 + 32);
          }
LABEL_61:
          *(_QWORD *)(a1 + 32) = v15 + 1;
          *v15 = 92;
          goto LABEL_62;
        }
        if ((unint64_t)v15 >= v16)
        {
          while (1)
          {
            v23 = *(const char **)(a1 + 16);
            if (v23)
              break;
            if (!*(_DWORD *)(a1 + 56))
            {
              v48 = 92;
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
              v26 = (v10 >> 6) | 0x30;
              v27 = *(_BYTE **)(a1 + 32);
              if ((unint64_t)v27 >= *(_QWORD *)(a1 + 24))
              {
LABEL_68:
                while (1)
                {
                  v28 = *(const char **)(a1 + 16);
                  if (v28)
                    break;
                  if (!*(_DWORD *)(a1 + 56))
                  {
                    v48 = v26;
                    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
                    v32 = (v10 >> 3) & 7 | 0x30;
                    v33 = *(_BYTE **)(a1 + 32);
                    if ((unint64_t)v33 >= *(_QWORD *)(a1 + 24))
                    {
LABEL_81:
                      while (1)
                      {
                        v34 = *(const char **)(a1 + 16);
                        if (v34)
                          break;
                        if (!*(_DWORD *)(a1 + 56))
                        {
                          v48 = v32;
                          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
                          v38 = v10 & 7 | 0x30;
                          v39 = *(char **)(a1 + 32);
                          if ((unint64_t)v39 >= *(_QWORD *)(a1 + 24))
                          {
LABEL_94:
                            while (1)
                            {
                              v40 = *(const char **)(a1 + 16);
                              if (v40)
                                break;
                              if (!*(_DWORD *)(a1 + 56))
                              {
                                v48 = v38;
                                goto LABEL_141;
                              }
                              llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
                              v39 = *(char **)(a1 + 32);
                              if ((unint64_t)v39 < *(_QWORD *)(a1 + 24))
                                goto LABEL_101;
                            }
                            *(_QWORD *)(a1 + 32) = v40;
                            llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v40, v39 - v40);
                            v39 = *(char **)(a1 + 32);
                          }
LABEL_101:
                          *(_QWORD *)(a1 + 32) = v39 + 1;
                          *v39 = v38;
                          goto LABEL_9;
                        }
                        llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
                        v33 = *(_BYTE **)(a1 + 32);
                        if ((unint64_t)v33 < *(_QWORD *)(a1 + 24))
                          goto LABEL_93;
                      }
                      *(_QWORD *)(a1 + 32) = v34;
                      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v34, v33 - v34);
                      v33 = *(_BYTE **)(a1 + 32);
                    }
LABEL_93:
                    *(_QWORD *)(a1 + 32) = v33 + 1;
                    *v33 = v32;
                    v38 = v10 & 7 | 0x30;
                    v39 = *(char **)(a1 + 32);
                    if ((unint64_t)v39 >= *(_QWORD *)(a1 + 24))
                      goto LABEL_94;
                    goto LABEL_101;
                  }
                  llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
                  v27 = *(_BYTE **)(a1 + 32);
                  if ((unint64_t)v27 < *(_QWORD *)(a1 + 24))
                    goto LABEL_80;
                }
                *(_QWORD *)(a1 + 32) = v28;
                llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v28, v27 - v28);
                v27 = *(_BYTE **)(a1 + 32);
              }
LABEL_80:
              *(_QWORD *)(a1 + 32) = v27 + 1;
              *v27 = v26;
              v32 = (v10 >> 3) & 7 | 0x30;
              v33 = *(_BYTE **)(a1 + 32);
              if ((unint64_t)v33 >= *(_QWORD *)(a1 + 24))
                goto LABEL_81;
              goto LABEL_93;
            }
            llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
            v15 = *(_BYTE **)(a1 + 32);
            if ((unint64_t)v15 < *(_QWORD *)(a1 + 24))
              goto LABEL_67;
          }
          *(_QWORD *)(a1 + 32) = v23;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v23, v15 - v23);
          v15 = *(_BYTE **)(a1 + 32);
        }
LABEL_67:
        *(_QWORD *)(a1 + 32) = v15 + 1;
        *v15 = 92;
        v26 = (v10 >> 6) | 0x30;
        v27 = *(_BYTE **)(a1 + 32);
        if ((unint64_t)v27 >= *(_QWORD *)(a1 + 24))
          goto LABEL_68;
        goto LABEL_80;
      }
      if ((_DWORD)v10 == 9)
      {
        while (1)
        {
          v41 = *(_BYTE **)(a1 + 32);
          if ((unint64_t)v41 < *(_QWORD *)(a1 + 24))
            goto LABEL_109;
          v42 = *(const char **)(a1 + 16);
          if (v42)
            break;
          if (!*(_DWORD *)(a1 + 56))
          {
            v48 = 92;
            llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
            v43 = *(_BYTE **)(a1 + 32);
            if ((unint64_t)v43 >= *(_QWORD *)(a1 + 24))
            {
LABEL_110:
              while (1)
              {
                v44 = *(const char **)(a1 + 16);
                if (v44)
                  break;
                if (!*(_DWORD *)(a1 + 56))
                {
                  v48 = 116;
                  goto LABEL_141;
                }
                llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
                v43 = *(_BYTE **)(a1 + 32);
                if ((unint64_t)v43 < *(_QWORD *)(a1 + 24))
                  goto LABEL_115;
              }
              *(_QWORD *)(a1 + 32) = v44;
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v44, v43 - v44);
              v43 = *(_BYTE **)(a1 + 32);
            }
            goto LABEL_115;
          }
          llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
        }
        *(_QWORD *)(a1 + 32) = v42;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v42, v41 - v42);
        v41 = *(_BYTE **)(a1 + 32);
LABEL_109:
        *(_QWORD *)(a1 + 32) = v41 + 1;
        *v41 = 92;
        v43 = *(_BYTE **)(a1 + 32);
        if ((unint64_t)v43 >= *(_QWORD *)(a1 + 24))
          goto LABEL_110;
LABEL_115:
        *(_QWORD *)(a1 + 32) = v43 + 1;
        *v43 = 116;
        goto LABEL_9;
      }
      if ((_DWORD)v10 != 10)
        goto LABEL_25;
      v11 = *(_BYTE **)(a1 + 32);
      if ((unint64_t)v11 < *(_QWORD *)(a1 + 24))
        goto LABEL_38;
      while (1)
      {
        v12 = *(const char **)(a1 + 16);
        if (v12)
        {
          *(_QWORD *)(a1 + 32) = v12;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v12, v11 - v12);
          v11 = *(_BYTE **)(a1 + 32);
LABEL_38:
          *(_QWORD *)(a1 + 32) = v11 + 1;
          *v11 = 92;
          goto LABEL_39;
        }
        if (!*(_DWORD *)(a1 + 56))
          break;
        llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
        v11 = *(_BYTE **)(a1 + 32);
        if ((unint64_t)v11 < *(_QWORD *)(a1 + 24))
          goto LABEL_38;
      }
      v48 = 92;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
      while (1)
      {
LABEL_39:
        v19 = *(_BYTE **)(a1 + 32);
        if ((unint64_t)v19 < *(_QWORD *)(a1 + 24))
          goto LABEL_50;
        v20 = *(const char **)(a1 + 16);
        if (v20)
        {
          *(_QWORD *)(a1 + 32) = v20;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v20, v19 - v20);
          v19 = *(_BYTE **)(a1 + 32);
LABEL_50:
          *(_QWORD *)(a1 + 32) = v19 + 1;
          *v19 = 110;
          goto LABEL_9;
        }
        if (!*(_DWORD *)(a1 + 56))
          break;
        llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a1);
      }
      v48 = 110;
LABEL_141:
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, &v48, 1);
LABEL_9:
      ++v6;
    }
    while (v6 != v7);
  }
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, double a2)
{
  llvm::write_double(a1, 0, 0, 0, a2);
  return a1;
}

uint64_t llvm::raw_ostream::flush_nonempty(llvm::raw_ostream *this)
{
  const char *v1;
  uint64_t v2;

  v1 = (const char *)*((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 4) - (_QWORD)v1;
  *((_QWORD *)this + 4) = v1;
  return llvm::raw_ostream::flush_tied_then_write(this, v1, v2);
}

uint64_t llvm::raw_ostream::flush_tied_then_write(llvm::raw_ostream *this, const char *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  const char *v7;
  const char *v8;

  v6 = (llvm::raw_ostream *)*((_QWORD *)this + 6);
  if (v6)
  {
    v7 = (const char *)*((_QWORD *)v6 + 4);
    v8 = (const char *)*((_QWORD *)v6 + 2);
    if (v7 != v8)
    {
      *((_QWORD *)v6 + 4) = v8;
      llvm::raw_ostream::flush_tied_then_write(v6, v8, v7 - v8);
    }
  }
  return (*(uint64_t (**)(llvm::raw_ostream *, const char *, uint64_t))(*(_QWORD *)this + 72))(this, a2, a3);
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, char a2)
{
  char *v4;
  const char *v6;
  char v7;

  v4 = (char *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    while (1)
    {
      v6 = (const char *)*((_QWORD *)this + 2);
      if (v6)
      {
        *((_QWORD *)this + 4) = v6;
        llvm::raw_ostream::flush_tied_then_write(this, v6, v4 - v6);
        v4 = (char *)*((_QWORD *)this + 4);
        goto LABEL_2;
      }
      if (!*((_DWORD *)this + 14))
        break;
      llvm::raw_ostream::SetBuffered(this);
      v4 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v4 < *((_QWORD *)this + 3))
        goto LABEL_2;
    }
    v7 = a2;
    llvm::raw_ostream::flush_tied_then_write(this, &v7, 1);
    return this;
  }
  else
  {
LABEL_2:
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = a2;
    return this;
  }
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, const char *a2, size_t a3)
{
  size_t v3;
  _BYTE *v6;
  uint64_t v7;
  size_t v8;
  size_t v10;
  _BYTE *v11;
  const char *v12;
  uint64_t v13;

  v3 = a3;
  v7 = *((_QWORD *)this + 3);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  v8 = v7 - (_QWORD)v6;
  if (v7 - (uint64_t)v6 < a3)
  {
    while (1)
    {
      while (1)
      {
        v11 = (_BYTE *)*((_QWORD *)this + 2);
        if (!v11)
          break;
        if (v6 == v11)
        {
          v8 *= v3 / v8;
          v3 -= v8;
          llvm::raw_ostream::flush_tied_then_write(this, a2, v8);
          v6 = (_BYTE *)*((_QWORD *)this + 4);
          v10 = *((_QWORD *)this + 3) - (_QWORD)v6;
          if (v3 <= v10)
          {
            llvm::raw_ostream::copy_to_buffer((void **)this, &a2[v8], v3);
            return this;
          }
        }
        else
        {
          llvm::raw_ostream::copy_to_buffer((void **)this, a2, v8);
          v12 = (const char *)*((_QWORD *)this + 2);
          v13 = *((_QWORD *)this + 4) - (_QWORD)v12;
          *((_QWORD *)this + 4) = v12;
          llvm::raw_ostream::flush_tied_then_write(this, v12, v13);
          v3 -= v8;
          v6 = (_BYTE *)*((_QWORD *)this + 4);
          v10 = *((_QWORD *)this + 3) - (_QWORD)v6;
        }
        a2 += v8;
        v8 = v10;
        if (v10 >= v3)
          goto LABEL_2;
      }
      if (!*((_DWORD *)this + 14))
        break;
      llvm::raw_ostream::SetBuffered(this);
      v6 = (_BYTE *)*((_QWORD *)this + 4);
      v8 = *((_QWORD *)this + 3) - (_QWORD)v6;
      if (v8 >= v3)
        goto LABEL_2;
    }
    llvm::raw_ostream::flush_tied_then_write(this, a2, v3);
    return this;
  }
  else
  {
LABEL_2:
    switch(v3)
    {
      case 0uLL:
        break;
      case 1uLL:
        goto LABEL_6;
      case 2uLL:
        goto LABEL_5;
      case 3uLL:
        goto LABEL_4;
      case 4uLL:
        v6[3] = a2[3];
        v6 = (_BYTE *)*((_QWORD *)this + 4);
LABEL_4:
        v6[2] = a2[2];
        v6 = (_BYTE *)*((_QWORD *)this + 4);
LABEL_5:
        v6[1] = a2[1];
        v6 = (_BYTE *)*((_QWORD *)this + 4);
LABEL_6:
        *v6 = *a2;
        break;
      default:
        memcpy(v6, a2, v3);
        break;
    }
    *((_QWORD *)this + 4) += v3;
    return this;
  }
}

void **llvm::raw_ostream::copy_to_buffer(void **this, const char *a2, size_t __n)
{
  void **v4;

  v4 = this;
  switch(__n)
  {
    case 0uLL:
      goto LABEL_6;
    case 1uLL:
      goto LABEL_5;
    case 2uLL:
      goto LABEL_4;
    case 3uLL:
      goto LABEL_3;
    case 4uLL:
      *((_BYTE *)this[4] + 3) = a2[3];
LABEL_3:
      *((_BYTE *)this[4] + 2) = a2[2];
LABEL_4:
      *((_BYTE *)this[4] + 1) = a2[1];
LABEL_5:
      *(_BYTE *)this[4] = *a2;
LABEL_6:
      this[4] = (char *)this[4] + __n;
      break;
    default:
      this = (void **)memcpy(this[4], a2, __n);
      v4[4] = (char *)v4[4] + __n;
      break;
  }
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, llvm::formatv_object_base *a2)
{
  llvm::formatv_object_base::format(a2, a1);
  return a1;
}

void llvm::formatv_object_base::format(llvm::formatv_object_base *this, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  const char *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  void *v19;
  unsigned int v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  llvm::formatv_object_base::parseFormatString(*(_BYTE **)this, *((_QWORD *)this + 1), (uint64_t)&v19);
  v4 = v19;
  if (v20)
  {
    v5 = (char *)v19 + 32;
    v6 = (unint64_t)v20 << 6;
    do
    {
      v7 = *((_DWORD *)v5 - 8);
      if (v7)
      {
        if (v7 == 2 || (v8 = *((_QWORD *)v5 - 1), v8 >= *((_QWORD *)this + 3)))
        {
          v12 = (const char *)*((_QWORD *)v5 - 3);
          v13 = *((_QWORD *)v5 - 2);
          v14 = (void *)*((_QWORD *)a2 + 4);
          if (v13 > *((_QWORD *)a2 + 3) - (_QWORD)v14)
          {
            llvm::raw_ostream::write(a2, v12, *((_QWORD *)v5 - 2));
          }
          else if (v13)
          {
            memcpy(v14, v12, *((_QWORD *)v5 - 2));
            *((_QWORD *)a2 + 4) += v13;
          }
        }
        else
        {
          v9 = *((_DWORD *)v5 + 2);
          v10 = *(_QWORD *)v5;
          v11 = v5[12];
          v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v8);
          v16 = v9;
          v17 = v10;
          v18 = v11;
          llvm::FmtAlign::format(&v15, (uint64_t)a2);
        }
      }
      v5 += 64;
      v6 -= 64;
    }
    while (v6);
    v4 = v19;
  }
  if (v4 != v21)
    free(v4);
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *this, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  size_t v7;
  const char *v8;
  size_t v9;
  void *v10;
  size_t v11;

  v4 = *(unsigned int *)(a2 + 16) - *(_QWORD *)(a2 + 8);
  if (v4 < 1)
  {
    LODWORD(v4) = 0;
    v6 = 0;
    goto LABEL_17;
  }
  v5 = *(_DWORD *)(a2 + 20);
  if (v5 == 3)
  {
    v6 = v4 - ((unint64_t)v4 >> 1);
    v4 = (unint64_t)v4 >> 1;
    if (v4 < 0x50)
      goto LABEL_17;
  }
  else
  {
    if (v5 != 2)
    {
      if (v5 == 1)
        v6 = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
      else
        v6 = 0;
      LODWORD(v4) = 0;
LABEL_17:
      llvm::raw_ostream::write(this, "                                                                                ", v4);
      v8 = *(const char **)a2;
      v9 = *(_QWORD *)(a2 + 8);
      v10 = (void *)*((_QWORD *)this + 4);
      if (v9 <= *((_QWORD *)this + 3) - (_QWORD)v10)
        goto LABEL_18;
LABEL_15:
      llvm::raw_ostream::write(this, v8, v9);
      goto LABEL_20;
    }
    v6 = 0;
    if (v4 < 0x50)
      goto LABEL_17;
  }
  do
  {
    if (v4 >= 0x4F)
      v7 = 79;
    else
      v7 = v4;
    llvm::raw_ostream::write(this, "                                                                                ", v7);
    LODWORD(v4) = v4 - v7;
  }
  while ((_DWORD)v4);
  v8 = *(const char **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = (void *)*((_QWORD *)this + 4);
  if (v9 > *((_QWORD *)this + 3) - (_QWORD)v10)
    goto LABEL_15;
LABEL_18:
  if (v9)
  {
    memcpy(v10, v8, v9);
    *((_QWORD *)this + 4) += v9;
  }
LABEL_20:
  if (v6 >= 0x50)
  {
    do
    {
      if (v6 >= 0x4F)
        v11 = 79;
      else
        v11 = v6;
      llvm::raw_ostream::write(this, "                                                                                ", v11);
      v6 -= v11;
    }
    while (v6);
  }
  else
  {
    llvm::raw_ostream::write(this, "                                                                                ", v6);
  }
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::indent(llvm::raw_ostream *this, unsigned int a2)
{
  unsigned int v2;
  size_t v3;

  v2 = a2;
  if (a2 < 0x50)
    return llvm::raw_ostream::write(this, "                                                                                ", a2);
  do
  {
    if (v2 >= 0x4F)
      v3 = 79;
    else
      v3 = v2;
    this = llvm::raw_ostream::write(this, "                                                                                ", v3);
    v2 -= v3;
  }
  while (v2);
  return this;
}

void llvm::raw_svector_ostream::~raw_svector_ostream(llvm::raw_svector_ostream *this)
{
  void *v1;

  *(_QWORD *)this = off_1E0E200A8;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = (void *)*((_QWORD *)this + 2);
    if (v1)
      operator delete[](v1);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E0E200A8;
  if (*((_DWORD *)this + 14) == 1)
  {
    v2 = (void *)*((_QWORD *)this + 2);
    if (v2)
      operator delete[](v2);
  }
  operator delete(this);
}

uint64_t llvm::raw_ostream::changeColor(uint64_t a1, int a2, int a3, llvm::sys::Process *a4)
{
  const char *v8;
  const char *v9;
  const char *v10;
  size_t v11;

  if (*(_BYTE *)(a1 + 40)
    && (!mlir::Diagnostic::operator mlir::LogicalResult()
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1)))
  {
    if (mlir::Diagnostic::operator mlir::LogicalResult())
    {
      v8 = *(const char **)(a1 + 32);
      v9 = *(const char **)(a1 + 16);
      if (v8 != v9)
      {
        *(_QWORD *)(a1 + 32) = v9;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v9, v8 - v9);
      }
    }
    if (a2 == 8)
    {
      v10 = llvm::sys::Process::OutputBold(a4);
      if (!v10)
        return a1;
      goto LABEL_11;
    }
    v10 = llvm::sys::Process::OutputColor((llvm::sys::Process *)(char)a2, a3, (int)a4);
    if (v10)
    {
LABEL_11:
      v11 = strlen(v10);
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, v10, v11);
    }
  }
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::resetColor(llvm::raw_ostream *this)
{
  llvm::sys::Process *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  size_t v7;

  if (*((_BYTE *)this + 40)
    && (!mlir::Diagnostic::operator mlir::LogicalResult()
     || (*(unsigned int (**)(llvm::raw_ostream *))(*(_QWORD *)this + 48))(this)))
  {
    v2 = (llvm::sys::Process *)mlir::Diagnostic::operator mlir::LogicalResult();
    if ((_DWORD)v2)
    {
      v3 = (const char *)*((_QWORD *)this + 4);
      v4 = (const char *)*((_QWORD *)this + 2);
      if (v3 != v4)
      {
        *((_QWORD *)this + 4) = v4;
        v2 = (llvm::sys::Process *)llvm::raw_ostream::flush_tied_then_write(this, v4, v3 - v4);
      }
    }
    v5 = llvm::sys::Process::ResetColor(v2);
    if (v5)
    {
      v6 = v5;
      v7 = strlen(v5);
      llvm::raw_ostream::write(this, v6, v7);
    }
  }
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::reverseColor(llvm::raw_ostream *this)
{
  llvm::sys::Process *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  size_t v7;

  if (*((_BYTE *)this + 40)
    && (!mlir::Diagnostic::operator mlir::LogicalResult()
     || (*(unsigned int (**)(llvm::raw_ostream *))(*(_QWORD *)this + 48))(this)))
  {
    v2 = (llvm::sys::Process *)mlir::Diagnostic::operator mlir::LogicalResult();
    if ((_DWORD)v2)
    {
      v3 = (const char *)*((_QWORD *)this + 4);
      v4 = (const char *)*((_QWORD *)this + 2);
      if (v3 != v4)
      {
        *((_QWORD *)this + 4) = v4;
        v2 = (llvm::sys::Process *)llvm::raw_ostream::flush_tied_then_write(this, v4, v3 - v4);
      }
    }
    v5 = llvm::sys::Process::OutputReverse(v2);
    if (v5)
    {
      v6 = v5;
      v7 = strlen(v5);
      llvm::raw_ostream::write(this, v6, v7);
    }
  }
  return this;
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, int a5, char a6, int a7)
{
  int FD;

  FD = getFD(a2, a3, a4, a5, a6, a7);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, FD, 1, 0, 0);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, int a5)
{
  const std::error_category *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  __int16 v13;
  int v14;

  if (a3 == 1 && *a2 == 45)
  {
    v7 = std::system_category();
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v7;
    llvm::sys::ChangeStdinMode();
    v8 = 1;
  }
  else
  {
    v14 = 0;
    v13 = 261;
    v12[0] = a2;
    v12[1] = a3;
    v9 = llvm::sys::fs::openFile((unsigned __int8 *)v12, &v14, 0, 2, a5, 438);
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v10;
    if ((_DWORD)v9)
      v8 = -1;
    else
      v8 = v14;
  }
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v8, 1, 0, 0);
}

uint64_t getFD(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6)
{
  const std::error_category *v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  unsigned int v15;

  if (a2 == 1 && *a1 == 45)
  {
    v7 = std::system_category();
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    llvm::sys::ChangeStdinMode();
    return 1;
  }
  else
  {
    v15 = 0;
    v14 = 261;
    v13[0] = a1;
    v13[1] = a2;
    if ((a5 & 1) != 0)
      v10 = 3;
    else
      v10 = 2;
    v11 = llvm::sys::fs::openFile((unsigned __int8 *)v13, (int *)&v15, a4, v10, a6, 438);
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    if ((_DWORD)v11)
      return 0xFFFFFFFFLL;
    else
      return v15;
  }
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, int a2, char a3, int a4, int a5)
{
  int v6;
  off_t v7;
  llvm::sys::fs::file_status *v8;
  int v9;
  off_t v10;
  _BYTE v12[44];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  *(_DWORD *)(a1 + 8) = a5;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E0E20B08;
  *(_DWORD *)(a1 + 56) = a4 ^ 1;
  *(_DWORD *)(a1 + 60) = a2;
  *(_BYTE *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 65) = 0;
  *(_QWORD *)(a1 + 80) = std::system_category();
  *(_QWORD *)(a1 + 88) = 0;
  if ((*(_DWORD *)(a1 + 60) & 0x80000000) != 0)
  {
    *(_BYTE *)(a1 + 64) = 0;
    return a1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 1);
    v6 = *(_DWORD *)(a1 + 60);
    if (v6 <= 2)
      *(_BYTE *)(a1 + 64) = 0;
    v7 = lseek(v6, 0, 1);
    memset(v12, 0, sizeof(v12));
    v13 = 0xFFFFLL;
    v14 = 0;
    v15 = 0;
    v9 = llvm::sys::fs::status((llvm::sys::fs *)*(unsigned int *)(a1 + 60), (const stat *)v12, v8);
    *(_BYTE *)(a1 + 66) = *(_DWORD *)&v12[40] == 2;
    *(_BYTE *)(a1 + 65) = v9 == 0 && v7 != -1;
    if (v9 == 0 && v7 != -1)
      v10 = v7;
    else
      v10 = 0;
    *(_QWORD *)(a1 + 88) = v10;
    return a1;
  }
}

void llvm::raw_fd_ostream::~raw_fd_ostream(llvm::raw_fd_ostream *this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::error_code v7;
  std::string v8;
  std::string *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  _BYTE v13[40];

  *(_QWORD *)this = off_1E0E20B08;
  if ((*((_DWORD *)this + 15) & 0x80000000) == 0)
  {
    v2 = (const char *)*((_QWORD *)this + 4);
    v3 = (const char *)*((_QWORD *)this + 2);
    if (v2 != v3)
    {
      *((_QWORD *)this + 4) = v3;
      llvm::raw_ostream::flush_tied_then_write(this, v3, v2 - v3);
    }
    if (*((_BYTE *)this + 64))
    {
      v4 = llvm::sys::Process::SafelyCloseFileDescriptor((llvm::sys::Process *)*((unsigned int *)this + 15));
      if ((_DWORD)v4)
      {
        *((_QWORD *)this + 9) = v4;
        *((_QWORD *)this + 10) = v5;
      }
    }
  }
  if (*((_DWORD *)this + 18))
  {
    v11 = "IO failure on output stream: ";
    v12 = 259;
    v7 = *(std::error_code *)((char *)this + 72);
    std::error_code::message(&v8, &v7);
    v10 = 260;
    v9 = &v8;
    llvm::operator+((uint64_t *)&v11, (uint64_t *)&v9, (uint64_t)v13);
    llvm::report_fatal_error((llvm::Twine *)v13, 0);
  }
  *(_QWORD *)this = off_1E0E200A8;
  if (*((_DWORD *)this + 14) == 1)
  {
    v6 = (void *)*((_QWORD *)this + 2);
    if (v6)
      operator delete[](v6);
  }
}

{
  void *v1;

  llvm::raw_fd_ostream::~raw_fd_ostream(this);
  operator delete(v1);
}

uint64_t llvm::raw_fd_ostream::write_impl(llvm::raw_fd_ostream *this, const char *__buf, unint64_t a3)
{
  unint64_t v3;
  size_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = a3;
  *((_QWORD *)this + 11) += a3;
  while (1)
  {
    v6 = v3 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v3;
    result = write(*((_DWORD *)this + 15), __buf, v6);
    if (result < 0)
      break;
    __buf += result;
    v3 -= result;
LABEL_3:
    if (!v3)
      return result;
  }
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 4)
    goto LABEL_3;
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 35)
    goto LABEL_3;
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 35)
    goto LABEL_3;
  v8 = *__error();
  result = (uint64_t)std::generic_category();
  *((_QWORD *)this + 9) = v8;
  *((_QWORD *)this + 10) = result;
  return result;
}

const char *llvm::raw_fd_ostream::pwrite_impl(const char **this, const char *a2, size_t a3, off_t a4)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  off_t v12;
  off_t v13;
  const char *v14;
  const std::error_category *v15;
  const char *v16;
  const char *v17;
  const char *result;
  const char *v19;

  v8 = (*((uint64_t (**)(const char **))*this + 10))(this);
  v9 = this[4];
  v10 = this[2];
  v11 = &v9[v8];
  if (v9 != v10)
  {
    this[4] = v10;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v10, v9 - v10);
  }
  v12 = v11 - v10;
  v13 = lseek(*((_DWORD *)this + 15), a4, 0);
  this[11] = (const char *)v13;
  if (v13 == -1)
  {
    v14 = (const char *)*__error();
    v15 = std::generic_category();
    this[9] = v14;
    this[10] = (const char *)v15;
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)this, a2, a3);
  v16 = this[4];
  v17 = this[2];
  if (v16 != v17)
  {
    this[4] = v17;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v17, v16 - v17);
  }
  result = (const char *)lseek(*((_DWORD *)this + 15), v12, 0);
  this[11] = result;
  if (result == (const char *)-1)
  {
    v19 = (const char *)*__error();
    result = (const char *)std::generic_category();
    this[9] = v19;
    this[10] = result;
  }
  return result;
}

uint64_t llvm::raw_fd_ostream::preferred_buffer_size(llvm::raw_fd_ostream *this)
{
  stat v3;

  if (fstat(*((_DWORD *)this + 15), &v3))
    return 0;
  if ((v3.st_mode & 0xF000) == 0x2000
    && ((*(uint64_t (**)(llvm::raw_fd_ostream *))(*(_QWORD *)this + 48))(this) & 1) != 0)
  {
    return 0;
  }
  return v3.st_blksize;
}

BOOL llvm::raw_fd_ostream::is_displayed(llvm::raw_fd_ostream *this)
{
  return llvm::sys::Process::FileDescriptorIsDisplayed((llvm::sys::Process *)*((unsigned int *)this + 15));
}

BOOL llvm::raw_fd_ostream::has_colors(llvm::raw_fd_ostream *this)
{
  _BOOL8 result;

  if (*((_BYTE *)this + 68))
    return *((_BYTE *)this + 67) != 0;
  result = llvm::sys::Process::FileDescriptorHasColors((llvm::sys::Process *)*((unsigned int *)this + 15));
  *(_WORD *)((char *)this + 67) = result | 0x100;
  return result;
}

llvm *llvm::raw_fd_ostream::lock@<X0>(llvm::raw_fd_ostream *this@<X0>, uint64_t a2@<X8>)
{
  llvm *result;
  std::error_code v5;
  int v6;
  uint64_t v7;

  result = (llvm *)llvm::sys::fs::lockFile((llvm::sys::fs *)*((unsigned int *)this + 15), 1);
  if ((_DWORD)result)
  {
    result = (llvm *)llvm::errorCodeToError(result, v5, &v7);
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v7;
  }
  else
  {
    v6 = *((_DWORD *)this + 15);
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_DWORD *)a2 = v6;
  }
  return result;
}

void *llvm::outs(llvm *this)
{
  unsigned __int8 v1;
  int v3;
  const std::error_category *v4;

  v3 = 0;
  v4 = std::system_category();
  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_55);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_55))
    return &unk_1ECD33520;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&unk_1ECD33520, "-", 1, (uint64_t)&v3, 0);
  __cxa_atexit((void (*)(void *))llvm::raw_fd_ostream::~raw_fd_ostream, &unk_1ECD33520, &dword_18013D000);
  __cxa_guard_release(&_MergedGlobals_55);
  return &unk_1ECD33520;
}

void *llvm::errs(llvm *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1ECD334D0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_1ECD334D0))
    return &unk_1ECD33580;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&unk_1ECD33580, 2, 0, 1, 0);
  __cxa_atexit((void (*)(void *))llvm::raw_fd_ostream::~raw_fd_ostream, &unk_1ECD33580, &dword_18013D000);
  __cxa_guard_release(&qword_1ECD334D0);
  return &unk_1ECD33580;
}

uint64_t *llvm::nulls(llvm *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1ECD334D8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_1ECD334D8))
    return &qword_1ECD334E0;
  dword_1ECD334E8 = 0;
  byte_1ECD33508 = 0;
  qword_1ECD33510 = 0;
  dword_1ECD33518 = 1;
  qword_1ECD334F8 = 0;
  unk_1ECD33500 = 0;
  qword_1ECD334F0 = 0;
  qword_1ECD334E0 = (uint64_t)off_1E0E229B8;
  __cxa_atexit((void (*)(void *))llvm::raw_null_ostream::~raw_null_ostream, &qword_1ECD334E0, &dword_18013D000);
  __cxa_guard_release(&qword_1ECD334D8);
  return &qword_1ECD334E0;
}

void llvm::raw_null_ostream::~raw_null_ostream(llvm::raw_null_ostream *this)
{
  void *v1;

  *(_QWORD *)this = off_1E0E200A8;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = (void *)*((_QWORD *)this + 2);
    if (v1)
      operator delete[](v1);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E0E200A8;
  if (*((_DWORD *)this + 14) == 1)
  {
    v2 = (void *)*((_QWORD *)this + 2);
    if (v2)
      operator delete[](v2);
  }
  operator delete(this);
}

std::string *llvm::raw_string_ostream::write_impl(std::string **this, const char *a2, std::string::size_type a3)
{
  return std::string::append(this[8], a2, a3);
}

uint64_t llvm::raw_svector_ostream::current_pos(llvm::raw_svector_ostream *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 8);
}

void llvm::raw_svector_ostream::write_impl(llvm::raw_svector_ostream *this, const char *__src, size_t __n)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (_QWORD *)*((_QWORD *)this + 8);
  v6 = v5[1];
  v7 = v6 + __n;
  if (v5[2] < v7)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*((_QWORD *)this + 8), v5 + 3, v7, 1);
    v6 = v5[1];
  }
  if (__n)
  {
    memcpy((void *)(*v5 + v6), __src, __n);
    v6 = v5[1];
  }
  v5[1] = v6 + __n;
}

void *llvm::raw_svector_ostream::pwrite_impl(llvm::raw_svector_ostream *this, const char *a2, size_t a3, uint64_t a4)
{
  return memcpy((void *)(**((_QWORD **)this + 8) + a4), a2, a3);
}

uint64_t llvm::raw_null_ostream::current_pos(llvm::raw_null_ostream *this)
{
  return 0;
}

void llvm::raw_string_ostream::~raw_string_ostream(llvm::raw_string_ostream *this)
{
  void *v2;

  *(_QWORD *)this = off_1E0E200A8;
  if (*((_DWORD *)this + 14) == 1)
  {
    v2 = (void *)*((_QWORD *)this + 2);
    if (v2)
      operator delete[](v2);
  }
  operator delete(this);
}

void llvm::raw_string_ostream::reserveExtraSpace(llvm::raw_string_ostream *this, uint64_t a2)
{
  std::string *v2;
  std::string::size_type v3;

  v2 = (std::string *)*((_QWORD *)this + 8);
  v3 = (*(uint64_t (**)(llvm::raw_string_ostream *))(*(_QWORD *)this + 80))(this)
     + a2
     + *((_QWORD *)this + 4)
     - *((_QWORD *)this + 2);
  std::string::reserve(v2, v3);
}

uint64_t llvm::raw_string_ostream::current_pos(llvm::raw_string_ostream *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (*(char *)(v1 + 23) < 0)
    return *(_QWORD *)(v1 + 8);
  else
    return *(unsigned __int8 *)(v1 + 23);
}

void llvm::raw_svector_ostream::reserveExtraSpace(llvm::raw_svector_ostream *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 8);
  v3 = (*(uint64_t (**)(llvm::raw_svector_ostream *))(*(_QWORD *)this + 80))(this)
     + a2
     + *((_QWORD *)this + 4)
     - *((_QWORD *)this + 2);
  if (*(_QWORD *)(v2 + 16) < v3)
    llvm::SmallVectorBase<unsigned long long>::grow_pod(v2, (void *)(v2 + 24), v3, 1);
}

uint64_t llvm::raw_fd_ostream::current_pos(llvm::raw_fd_ostream *this)
{
  return *((_QWORD *)this + 11);
}

void llvm::FmtAlign::format(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  int v7;
  int v8;
  char v9;
  char *v10;
  const char *v11;
  unint64_t v12;
  int v13;
  char v14;
  char *v15;
  const char *v16;
  int v17;
  int i;
  char v19;
  char *v20;
  const char *v21;
  int v22;
  char v23;
  char *v24;
  const char *v25;
  void (**v26)(llvm::raw_ostream *__hidden);
  int v27;
  void *__p;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  char **v34;
  char v35;
  char *v36;
  unint64_t v37[2];
  _QWORD v38[9];

  v38[8] = *MEMORY[0x1E0C80C00];
  if (!a1[2])
  {
    (*(void (**)(void))(*(_QWORD *)*a1 + 24))();
    return;
  }
  v36 = (char *)v38;
  *(_OWORD *)v37 = xmmword_181236C00;
  v27 = 0;
  v31 = 0;
  v32 = 0;
  v26 = (void (**)(llvm::raw_ostream *__hidden))off_1E0E22B88;
  v34 = &v36;
  v33 = 0;
  v29 = 0;
  v30 = 0;
  __p = 0;
  (*(void (**)(_QWORD, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)*a1 + 24))(*a1, &v26);
  v4 = a1[2];
  v5 = v37[0];
  v6 = v4 - v37[0];
  if (v4 > v37[0])
  {
    v7 = *((_DWORD *)a1 + 2);
    if (v7 == 1)
    {
      v12 = v6 >> 1;
      if ((v6 >> 1))
      {
        v13 = 0;
        do
        {
          while (1)
          {
            v14 = *((_BYTE *)a1 + 24);
            v15 = *(char **)(a2 + 32);
            if ((unint64_t)v15 >= *(_QWORD *)(a2 + 24))
              break;
LABEL_26:
            *(_QWORD *)(a2 + 32) = v15 + 1;
            *v15 = v14;
            if (++v13 == (_DWORD)v12)
              goto LABEL_29;
          }
          while (1)
          {
            v16 = *(const char **)(a2 + 16);
            if (v16)
            {
              *(_QWORD *)(a2 + 32) = v16;
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a2, v16, v15 - v16);
              v15 = *(char **)(a2 + 32);
              goto LABEL_26;
            }
            if (!*(_DWORD *)(a2 + 56))
              break;
            llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a2);
            v15 = *(char **)(a2 + 32);
            if ((unint64_t)v15 < *(_QWORD *)(a2 + 24))
              goto LABEL_26;
          }
          v35 = v14;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a2, &v35, 1);
          ++v13;
        }
        while (v13 != (_DWORD)v12);
LABEL_29:
        v5 = v37[0];
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, v36, v5);
      v17 = v6 - v12;
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          while (1)
          {
            v19 = *((_BYTE *)a1 + 24);
            v20 = *(char **)(a2 + 32);
            if ((unint64_t)v20 >= *(_QWORD *)(a2 + 24))
              break;
LABEL_38:
            *(_QWORD *)(a2 + 32) = v20 + 1;
            *v20 = v19;
            if (++i == v17)
              goto LABEL_55;
          }
          while (1)
          {
            v21 = *(const char **)(a2 + 16);
            if (v21)
            {
              *(_QWORD *)(a2 + 32) = v21;
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a2, v21, v20 - v21);
              v20 = *(char **)(a2 + 32);
              goto LABEL_38;
            }
            if (!*(_DWORD *)(a2 + 56))
              break;
            llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a2);
            v20 = *(char **)(a2 + 32);
            if ((unint64_t)v20 < *(_QWORD *)(a2 + 24))
              goto LABEL_38;
          }
          v35 = v19;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a2, &v35, 1);
        }
      }
      goto LABEL_55;
    }
    if (!v7)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, v36, v37[0]);
      if ((_DWORD)v6)
      {
        v8 = 0;
        do
        {
          while (1)
          {
            v9 = *((_BYTE *)a1 + 24);
            v10 = *(char **)(a2 + 32);
            if ((unint64_t)v10 >= *(_QWORD *)(a2 + 24))
              break;
LABEL_13:
            *(_QWORD *)(a2 + 32) = v10 + 1;
            *v10 = v9;
            if (++v8 == (_DWORD)v6)
              goto LABEL_55;
          }
          while (1)
          {
            v11 = *(const char **)(a2 + 16);
            if (v11)
            {
              *(_QWORD *)(a2 + 32) = v11;
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a2, v11, v10 - v11);
              v10 = *(char **)(a2 + 32);
              goto LABEL_13;
            }
            if (!*(_DWORD *)(a2 + 56))
              break;
            llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a2);
            v10 = *(char **)(a2 + 32);
            if ((unint64_t)v10 < *(_QWORD *)(a2 + 24))
              goto LABEL_13;
          }
          v35 = v9;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a2, &v35, 1);
          ++v8;
        }
        while (v8 != (_DWORD)v6);
      }
      goto LABEL_55;
    }
    if ((_DWORD)v6)
    {
      v22 = 0;
      do
      {
        while (1)
        {
          v23 = *((_BYTE *)a1 + 24);
          v24 = *(char **)(a2 + 32);
          if ((unint64_t)v24 >= *(_QWORD *)(a2 + 24))
            break;
LABEL_50:
          *(_QWORD *)(a2 + 32) = v24 + 1;
          *v24 = v23;
          if (++v22 == (_DWORD)v6)
            goto LABEL_53;
        }
        while (1)
        {
          v25 = *(const char **)(a2 + 16);
          if (v25)
          {
            *(_QWORD *)(a2 + 32) = v25;
            llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a2, v25, v24 - v25);
            v24 = *(char **)(a2 + 32);
            goto LABEL_50;
          }
          if (!*(_DWORD *)(a2 + 56))
            break;
          llvm::raw_ostream::SetBuffered((llvm::raw_ostream *)a2);
          v24 = *(char **)(a2 + 32);
          if ((unint64_t)v24 < *(_QWORD *)(a2 + 24))
            goto LABEL_50;
        }
        v35 = v23;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a2, &v35, 1);
        ++v22;
      }
      while (v22 != (_DWORD)v6);
LABEL_53:
      v5 = v37[0];
    }
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)a2, v36, v5);
LABEL_55:
  v26 = off_1E0E200A8;
  if (v33 == 1 && __p)
    operator delete[](__p);
  if (v36 != (char *)v38)
    free(v36);
}

uint64_t llvm_regcomp(uint64_t a1, char *__s, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  size_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  _QWORD *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE *v59;
  char v60;
  uint64_t v61;
  char *v63;
  char *v64;
  uint64_t v65;
  void *__ptr;
  __int128 v67;
  uint64_t v68;
  _DWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;

  if ((~a3 & 0x11) == 0)
    return 16;
  v80 = v3;
  v81 = v4;
  v7 = __s;
  if ((a3 & 0x20) != 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = v10 - (_QWORD)__s;
    if (v10 < (unint64_t)__s)
      return 16;
  }
  else
  {
    v9 = strlen(__s);
  }
  v11 = malloc(0x18FuLL);
  if (!v11)
    return 12;
  v12 = v11;
  v68 = 0;
  v65 = 0;
  v67 = 0u;
  v13 = 3 * (v9 >> 1);
  v14 = v13 + 1;
  *(_QWORD *)&v67 = v13 + 1;
  v15 = calloc(v13 + 1, 8uLL);
  __ptr = v15;
  if (!v15)
  {
    free(v12);
    return 12;
  }
  v16 = v15;
  v69 = v12;
  v17 = &v7[v9];
  v63 = v7;
  v64 = &v7[v9];
  LODWORD(v65) = 0;
  LODWORD(v68) = 0;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v12[4] = 256;
  *(_QWORD *)(v12 + 5) = 0;
  v18 = v12 + 5;
  *(_QWORD *)(v12 + 7) = 0;
  v12[9] = 0;
  *(_OWORD *)(v12 + 34) = 0u;
  *(_OWORD *)(v12 + 66) = 0u;
  v12[10] = a3 & 0xFFFFFF7F;
  v12[26] = 0;
  *((_QWORD *)v12 + 14) = 0;
  *(_OWORD *)(v12 + 18) = xmmword_181260F90;
  *((_QWORD *)v12 + 11) = v12 + 66;
  *((_QWORD *)v12 + 12) = 0;
  *(_OWORD *)(v12 + 38) = 0u;
  *(_OWORD *)(v12 + 42) = 0u;
  *(_OWORD *)(v12 + 46) = 0u;
  *(_OWORD *)(v12 + 50) = 0u;
  *(_OWORD *)(v12 + 54) = 0u;
  *(_OWORD *)(v12 + 58) = 0u;
  *(_OWORD *)(v12 + 62) = 0u;
  *(_OWORD *)(v12 + 70) = 0u;
  *(_OWORD *)(v12 + 74) = 0u;
  *(_OWORD *)(v12 + 78) = 0u;
  *(_OWORD *)(v12 + 82) = 0u;
  *(_OWORD *)(v12 + 86) = 0u;
  *(_OWORD *)(v12 + 90) = 0u;
  *(_OWORD *)(v12 + 94) = 0u;
  v12[30] = 0;
  if (v13 < 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_17;
  v19 = v13 + 3;
  if ((uint64_t)(v13 + 2) >= 0)
    v19 = v13 + 2;
  v20 = (v19 & 0xFFFFFFFFFFFFFFFELL) + (v19 >> 1);
  if (v14 >= (uint64_t)v20)
  {
LABEL_17:
    v22 = 1;
  }
  else if (v20 >> 61 || (v21 = realloc(v15, 24 * (v19 >> 1))) == 0)
  {
    v22 = 0;
    LODWORD(v65) = 12;
    v7 = &nuls;
    v63 = &nuls;
    v64 = &nuls;
    v17 = &nuls;
  }
  else
  {
    __ptr = v21;
    *(_QWORD *)&v67 = v20;
    v22 = 1;
    v16 = v21;
  }
  *((_QWORD *)&v67 + 1) = 1;
  *v16 = 0x8000000;
  *((_QWORD *)v12 + 7) = *((_QWORD *)&v67 + 1) - 1;
  if ((a3 & 1) != 0)
  {
    p_ere((uint64_t)&v63, 128);
  }
  else if ((a3 & 0x10) != 0)
  {
    if (v17 - v7 <= 0)
    {
      if (v22)
        LODWORD(v65) = 14;
      v7 = &nuls;
      v63 = &nuls;
      v64 = &nuls;
      v17 = &nuls;
    }
    if (v17 - v7 >= 1)
    {
      do
      {
        v63 = v7 + 1;
        ordinary((uint64_t)&v63, *v7);
        v7 = v63;
      }
      while (v64 - v63 > 0);
    }
  }
  else
  {
    p_bre((uint64_t)&v63, 128, 128);
  }
  v23 = *((_QWORD *)&v67 + 1);
  if (!(_DWORD)v65)
  {
    if (*((uint64_t *)&v67 + 1) < (uint64_t)v67
      || ((uint64_t)v67 >= -1 ? (v24 = v67 + 1) : (v24 = v67 + 2),
          v25 = (v24 & 0xFFFFFFFFFFFFFFFELL) + (v24 >> 1),
          (uint64_t)v67 >= (uint64_t)v25))
    {
      v26 = 0;
    }
    else
    {
      if (v25 >> 61)
      {
LABEL_37:
        v26 = 12;
        LODWORD(v65) = 12;
LABEL_38:
        v63 = &nuls;
        v64 = &nuls;
        goto LABEL_40;
      }
      v57 = realloc(__ptr, 24 * (v24 >> 1));
      if (!v57)
      {
        v26 = v65;
        if ((_DWORD)v65)
          goto LABEL_38;
        goto LABEL_37;
      }
      __ptr = v57;
      *(_QWORD *)&v67 = v25;
      v26 = v65;
    }
LABEL_40:
    v27 = (*((_QWORD *)&v67 + 1))++;
    *((_QWORD *)__ptr + v27) = 0x8000000;
    v23 = *((_QWORD *)&v67 + 1);
    *((_QWORD *)v12 + 8) = *((_QWORD *)&v67 + 1) - 1;
    if (!v26)
    {
      v28 = *((_QWORD *)v12 + 11);
      for (i = -128; i != 128; ++i)
      {
        if (!*(_BYTE *)(v28 + i) && *v18 >= 1)
        {
          v30 = (*v18 + 7) >> 3;
          v31 = *((_QWORD *)v12 + 4);
          while (!*(_BYTE *)(v31 + i))
          {
            v31 += (int)v12[4];
            if (!--v30)
              goto LABEL_42;
          }
          v32 = v12[21];
          v12[21] = v32 + 1;
          *(_BYTE *)(v28 + i) = v32;
          if (i <= 126)
          {
            v33 = i;
            do
            {
              ++v33;
              if (!*(_BYTE *)(v28 + v33))
              {
                if (*v18 < 1)
                {
LABEL_51:
                  *(_BYTE *)(v28 + v33) = v32;
                }
                else
                {
                  v34 = (*v18 + 7) >> 3;
                  v35 = *((_QWORD *)v12 + 4);
                  while (*(unsigned __int8 *)(v35 + i) == *(unsigned __int8 *)(v35
                                                                                               + v33))
                  {
                    v35 += (int)v12[4];
                    if (!--v34)
                      goto LABEL_51;
                  }
                }
              }
            }
            while (v33 != 127);
          }
        }
LABEL_42:
        ;
      }
      v23 = *((_QWORD *)&v67 + 1);
    }
    goto LABEL_61;
  }
  *((_QWORD *)v12 + 8) = *((_QWORD *)&v67 + 1) - 1;
LABEL_61:
  *((_QWORD *)v12 + 6) = v23;
  if (v23 >> 61)
  {
    *((_QWORD *)v12 + 1) = __ptr;
    v36 = v65;
    if (!(_DWORD)v65)
    {
      v36 = 12;
      LODWORD(v65) = 12;
    }
    v63 = &nuls;
    v64 = &nuls;
    goto LABEL_87;
  }
  v37 = (char *)realloc(__ptr, 8 * v23);
  *((_QWORD *)v12 + 1) = v37;
  v36 = v65;
  if (!v37)
  {
    if (!(_DWORD)v65)
    {
      v36 = 12;
      LODWORD(v65) = 12;
    }
    v63 = &nuls;
    v64 = &nuls;
    *((_QWORD *)v12 + 1) = __ptr;
    goto LABEL_87;
  }
  if ((_DWORD)v65)
  {
LABEL_87:
    v48 = 0;
    v49 = 0;
    v50 = v12[18];
    goto LABEL_88;
  }
  v38 = v37;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = (uint64_t *)(v37 + 8);
  v43 = (uint64_t *)(v37 + 8);
  do
  {
    v45 = *v43++;
    LODWORD(v44) = v45;
    v46 = ((unint64_t)(v45 & 0xF8000000) - 0x10000000) >> 27;
    if (v46 > 0xD)
      goto LABEL_82;
    if (((1 << v46) & 0x1880) != 0)
      goto LABEL_69;
    if (((1 << v46) & 0x2200) != 0)
    {
      v43 = v42;
      while (1)
      {
        v43 += v44 & 0x7FFFFFF;
        v44 = *v43;
        v47 = *v43 & 0xF8000000;
        if (v47 == 1610612736)
          break;
        if ((_DWORD)v47 != -2013265920)
        {
          if ((_DWORD)v47 == -1879048192)
            break;
          v12[18] |= 4u;
          goto LABEL_96;
        }
      }
LABEL_82:
      if (v41 > (int)v12[26])
      {
        v12[26] = v41;
        v39 = v40;
      }
      v41 = 0;
      goto LABEL_69;
    }
    if (v46)
      goto LABEL_82;
    if (!v41)
      v40 = v42;
    ++v41;
LABEL_69:
    v42 = v43;
  }
  while ((v44 & 0xF8000000) != 0x8000000);
  v58 = (int)v12[26];
  if ((_DWORD)v58)
  {
    v59 = malloc(v58 + 1);
    *((_QWORD *)v12 + 12) = v59;
    if (v59)
    {
      if ((int)v58 >= 1)
      {
        do
        {
          do
          {
            v61 = *v39++;
            v60 = v61;
          }
          while ((v61 & 0xF8000000) != 0x10000000);
          *v59++ = v60;
        }
        while (v58-- > 1);
      }
      *v59 = 0;
    }
    else
    {
      v12[26] = 0;
    }
  }
LABEL_96:
  v51 = 0;
  v49 = 0;
  v52 = (uint64_t *)(v38 + 8);
  do
  {
    v53 = *v52++;
    v54 = v53 & 0xF8000000;
    if (v51 <= v49)
      v55 = v49;
    else
      v55 = v51;
    v56 = v51 - 1;
    if ((_DWORD)v54 == 1207959552)
      ++v51;
    if ((_DWORD)v54 == 1342177280)
    {
      v51 = v56;
      v49 = v55;
    }
  }
  while (v54 != 0x8000000);
  v50 = v12[18];
  if (v51)
  {
    v50 |= 4u;
    v12[18] = v50;
  }
  v48 = 1;
LABEL_88:
  *((_QWORD *)v12 + 16) = v49;
  *v12 = 53829;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)v12 + 14);
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)a1 = 62053;
  if ((v50 & 4) != 0)
  {
    if (v48)
    {
      v36 = 15;
      LODWORD(v65) = 15;
    }
    v63 = &nuls;
    v64 = &nuls;
  }
  if (!v36)
    return 0;
  llvm_regfree(a1);
  return v65;
}

void p_ere(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int32x2_t *v50;
  int32x2_t v51;
  int32x2_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  BOOL v122;
  int v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;

  v156 = 0;
  v157 = 0;
  v158 = 0;
LABEL_5:
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(char **)a1;
  v8 = *(char **)(a1 + 8);
  v4 = v6;
  if ((uint64_t)&v8[-*(_QWORD *)a1] < 1)
    goto LABEL_343;
  while (2)
  {
    v9 = *v7;
    v4 = *(_QWORD *)(a1 + 40);
    if (v9 == 124 || v9 == a2)
      goto LABEL_342;
    v11 = v7 + 1;
    *(_QWORD *)a1 = v7 + 1;
    v12 = *v7;
    switch(*v7)
    {
      case '$':
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_101;
        v13 = *(_QWORD *)(a1 + 32);
        if (v4 < v13)
          goto LABEL_100;
        v14 = v13 >= -1 ? v13 + 1 : v13 + 2;
        v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) + (v14 >> 1);
        if (v13 >= (uint64_t)v15)
          goto LABEL_100;
        if (v15 >> 61)
          goto LABEL_25;
        v42 = realloc(*(void **)(a1 + 24), 24 * (v14 >> 1));
        if (v42)
        {
          *(_QWORD *)(a1 + 24) = v42;
          *(_QWORD *)(a1 + 32) = v15;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16))
LABEL_25:
            *(_DWORD *)(a1 + 16) = 12;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
LABEL_100:
        v43 = *(_QWORD *)(a1 + 24);
        v44 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v44 + 1;
        *(_QWORD *)(v43 + 8 * v44) = 0x20000000;
LABEL_101:
        v45 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)(v45 + 72) |= 2u;
        ++*(_DWORD *)(v45 + 80);
        v24 = 1;
        v7 = *(char **)a1;
        v8 = *(char **)(a1 + 8);
        v25 = (uint64_t)&v8[-*(_QWORD *)a1];
        if (v25 >= 1)
          goto LABEL_146;
        goto LABEL_10;
      case '(':
        if (v8 - v11 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 8;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v11 = &nuls;
          v8 = &nuls;
          v30 = *(_QWORD *)(a1 + 56);
          v17 = *(_QWORD *)(v30 + 112) + 1;
          *(_QWORD *)(v30 + 112) = v17;
          if (v17 <= 9)
          {
LABEL_29:
            *(_QWORD *)(a1 + 8 * v17 + 64) = v4;
            if (*(_DWORD *)(a1 + 16))
              goto LABEL_76;
            goto LABEL_30;
          }
        }
        else
        {
          v16 = *(_QWORD *)(a1 + 56);
          v17 = *(_QWORD *)(v16 + 112) + 1;
          *(_QWORD *)(v16 + 112) = v17;
          if (v17 <= 9)
            goto LABEL_29;
        }
        if (*(_DWORD *)(a1 + 16))
        {
LABEL_76:
          if (v8 - v11 < 1)
            goto LABEL_131;
          goto LABEL_120;
        }
LABEL_30:
        v18 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(a1 + 40) >= v18)
        {
          v19 = v18 >= -1 ? v18 + 1 : v18 + 2;
          v20 = (v19 & 0xFFFFFFFFFFFFFFFELL) + (v19 >> 1);
          if (v18 < (uint64_t)v20)
          {
            if (v20 >> 61)
            {
              *(_DWORD *)(a1 + 16) = 12;
              v11 = &nuls;
              v8 = &nuls;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
            else
            {
              v46 = realloc(*(void **)(a1 + 24), 24 * (v19 >> 1));
              if (v46)
              {
                *(_QWORD *)(a1 + 24) = v46;
                *(_QWORD *)(a1 + 32) = v20;
                v11 = *(char **)a1;
                v8 = *(char **)(a1 + 8);
              }
              else
              {
                if (!*(_DWORD *)(a1 + 16))
                  *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
                v11 = &nuls;
                v8 = &nuls;
              }
            }
          }
        }
        v56 = *(_QWORD *)(a1 + 24);
        v57 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v57 + 1;
        *(_QWORD *)(v56 + 8 * v57) = v17 | 0x68000000;
        if (v8 - v11 < 1)
          goto LABEL_131;
LABEL_120:
        if (*v11 == 41)
        {
          if (v17 <= 9)
            goto LABEL_122;
          goto LABEL_132;
        }
LABEL_131:
        p_ere(a1, 41);
        if (v17 <= 9)
        {
LABEL_122:
          *(_QWORD *)(a1 + 8 * v17 + 144) = *(_QWORD *)(a1 + 40);
          if (*(_DWORD *)(a1 + 16))
            goto LABEL_133;
          goto LABEL_123;
        }
LABEL_132:
        if (*(_DWORD *)(a1 + 16))
        {
LABEL_133:
          v61 = *(char **)a1;
          if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 1)
            goto LABEL_141;
          goto LABEL_138;
        }
LABEL_123:
        v58 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(a1 + 40) < v58)
          goto LABEL_137;
        v59 = v58 >= -1 ? v58 + 1 : v58 + 2;
        v60 = (v59 & 0xFFFFFFFFFFFFFFFELL) + (v59 >> 1);
        if (v58 >= (uint64_t)v60)
          goto LABEL_137;
        if (v60 >> 61)
          goto LABEL_129;
        v62 = realloc(*(void **)(a1 + 24), 24 * (v59 >> 1));
        if (v62)
        {
          *(_QWORD *)(a1 + 24) = v62;
          *(_QWORD *)(a1 + 32) = v60;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16))
LABEL_129:
            *(_DWORD *)(a1 + 16) = 12;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
LABEL_137:
        v63 = *(_QWORD *)(a1 + 24);
        v64 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64) = v17 | 0x70000000;
        v61 = *(char **)a1;
        if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 1)
          goto LABEL_141;
LABEL_138:
        *(_QWORD *)a1 = v61 + 1;
        if (*v61 != 41)
        {
LABEL_141:
          if (*(_DWORD *)(a1 + 16))
            goto LABEL_144;
          goto LABEL_142;
        }
        v24 = 1;
        v7 = *(char **)a1;
        v8 = *(char **)(a1 + 8);
        v25 = (uint64_t)&v8[-*(_QWORD *)a1];
        if (v25 >= 1)
          goto LABEL_146;
        goto LABEL_10;
      case ')':
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_144;
LABEL_142:
        v29 = 8;
        goto LABEL_143;
      case '*':
      case '+':
      case '?':
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 13;
        goto LABEL_144;
      case '.':
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 40) & 8) != 0)
        {
          *(_QWORD *)a1 = &nonnewline_bracket;
          *(_QWORD *)(a1 + 8) = &unk_181261079;
          p_bracket(a1);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v8;
          v24 = 1;
          v7 = *(char **)a1;
          v8 = *(char **)(a1 + 8);
          v25 = (uint64_t)&v8[-*(_QWORD *)a1];
          if (v25 >= 1)
            goto LABEL_146;
          goto LABEL_10;
        }
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_145;
        v21 = *(_QWORD *)(a1 + 32);
        if (v4 < v21)
          goto LABEL_112;
        v22 = v21 >= -1 ? v21 + 1 : v21 + 2;
        v23 = (v22 & 0xFFFFFFFFFFFFFFFELL) + (v22 >> 1);
        if (v21 >= (uint64_t)v23)
          goto LABEL_112;
        if (v23 >> 61)
          goto LABEL_47;
        v53 = realloc(*(void **)(a1 + 24), 24 * (v22 >> 1));
        if (v53)
        {
          *(_QWORD *)(a1 + 24) = v53;
          *(_QWORD *)(a1 + 32) = v23;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16))
LABEL_47:
            *(_DWORD *)(a1 + 16) = 12;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
LABEL_112:
        v54 = *(_QWORD *)(a1 + 24);
        v55 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v55 + 1;
        *(_QWORD *)(v54 + 8 * v55) = 671088640;
        v24 = 1;
        v7 = *(char **)a1;
        v8 = *(char **)(a1 + 8);
        v25 = (uint64_t)&v8[-*(_QWORD *)a1];
        if (v25 >= 1)
          goto LABEL_146;
        goto LABEL_10;
      case '[':
        p_bracket(a1);
        v24 = 1;
        v7 = *(char **)a1;
        v8 = *(char **)(a1 + 8);
        v25 = (uint64_t)&v8[-*(_QWORD *)a1];
        if (v25 < 1)
          goto LABEL_10;
        goto LABEL_146;
      case '\\':
        if (v8 - v11 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 5;
          *(_QWORD *)a1 = &byte_1EDC0BE41;
          *(_QWORD *)(a1 + 8) = &nuls;
          v12 = nuls;
          if ((nuls - 49) > 8)
          {
LABEL_86:
            ordinary(a1, v12);
            v24 = 1;
            v7 = *(char **)a1;
            v8 = *(char **)(a1 + 8);
            v25 = (uint64_t)&v8[-*(_QWORD *)a1];
            if (v25 < 1)
              goto LABEL_10;
            goto LABEL_146;
          }
        }
        else
        {
          *(_QWORD *)a1 = v7 + 2;
          v12 = *v11;
          if ((v12 - 49) > 8)
            goto LABEL_86;
        }
        v31 = (v12 - 48);
        v32 = a1 + 8 * v31;
        v35 = *(_QWORD *)(v32 + 144);
        v34 = (_QWORD *)(v32 + 144);
        v33 = v35;
        v36 = *(_DWORD *)(a1 + 16);
        if (v35)
        {
          if (v36)
          {
            v37 = *(_QWORD *)(a1 + 8 * v31 + 64) + 1;
            v38 = v33 - v37;
            if (v33 == v37)
              goto LABEL_84;
LABEL_304:
            if (v38 >= 1)
            {
              v128 = *(_QWORD *)(a1 + 32) + v38;
              if (v128 >> 61 || (v129 = realloc(*(void **)(a1 + 24), 8 * v128)) == 0)
              {
                if (!*(_DWORD *)(a1 + 16))
                  *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
              }
              else
              {
                *(_QWORD *)(a1 + 24) = v129;
                *(_QWORD *)(a1 + 32) = v128;
              }
            }
            memmove((void *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(a1 + 40)), (const void *)(*(_QWORD *)(a1 + 24) + 8 * v37), 8 * v38);
            *(_QWORD *)(a1 + 40) += v38;
            if (!*(_DWORD *)(a1 + 16))
              goto LABEL_312;
LABEL_323:
            v24 = 1;
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + 120) = 1;
            v7 = *(char **)a1;
            v8 = *(char **)(a1 + 8);
            v25 = (uint64_t)&v8[-*(_QWORD *)a1];
            if (v25 < 1)
              goto LABEL_10;
LABEL_146:
            v65 = *v7;
            if ((v65 - 42) >= 2 && v65 != 63)
            {
              v66 = v65 == 123 && (unint64_t)v25 >= 2;
              if (!v66 || v7[1] - 48 > 9)
                goto LABEL_10;
            }
            v67 = v7 + 1;
            *(_QWORD *)a1 = v67;
            if ((v24 & 1) == 0)
            {
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 13;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
              v67 = &nuls;
              v8 = &nuls;
            }
            if ((char)v65 <= 62)
            {
              if ((char)v65 != 42)
              {
                if ((char)v65 != 43)
                  goto LABEL_276;
                doinsert((void *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v4 + 1, v4);
                if (*(_DWORD *)(a1 + 16))
                  goto LABEL_276;
                v68 = *(_QWORD *)(a1 + 32);
                v69 = *(_QWORD *)(a1 + 40);
                if (v69 < v68)
                  goto LABEL_225;
                v70 = v68 >= -1 ? v68 + 1 : v68 + 2;
                v71 = (v70 & 0xFFFFFFFFFFFFFFFELL) + (v70 >> 1);
                if (v68 >= (uint64_t)v71)
                  goto LABEL_225;
                if (v71 >> 61)
                  goto LABEL_168;
                v92 = realloc(*(void **)(a1 + 24), 24 * (v70 >> 1));
                if (v92)
                {
                  *(_QWORD *)(a1 + 24) = v92;
                  *(_QWORD *)(a1 + 32) = v71;
                  goto LABEL_225;
                }
                if (!*(_DWORD *)(a1 + 16))
LABEL_168:
                  *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
LABEL_225:
                v93 = (v69 - v4) | 0x50000000;
LABEL_259:
                v112 = *(_QWORD *)(a1 + 24);
                v113 = *(_QWORD *)(a1 + 40);
                *(_QWORD *)(a1 + 40) = v113 + 1;
                *(_QWORD *)(v112 + 8 * v113) = v93;
                goto LABEL_276;
              }
              doinsert((void *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v4 + 1, v4);
              v77 = *(_QWORD *)(a1 + 40);
              v78 = v77 - v4;
              if (*(_DWORD *)(a1 + 16))
              {
LABEL_229:
                doinsert((void *)a1, 1476395008, v78 + 1, v4);
                if (!*(_DWORD *)(a1 + 16))
                {
                  v97 = *(_QWORD *)(a1 + 32);
                  v98 = *(_QWORD *)(a1 + 40);
                  if (v98 < v97)
                    goto LABEL_258;
                  v99 = v97 >= -1 ? v97 + 1 : v97 + 2;
                  v100 = (v99 & 0xFFFFFFFFFFFFFFFELL) + (v99 >> 1);
                  if (v97 >= (uint64_t)v100)
                    goto LABEL_258;
                  if (v100 >> 61)
                    goto LABEL_236;
                  v111 = realloc(*(void **)(a1 + 24), 24 * (v99 >> 1));
                  if (v111)
                  {
                    *(_QWORD *)(a1 + 24) = v111;
                    *(_QWORD *)(a1 + 32) = v100;
                    goto LABEL_258;
                  }
                  if (!*(_DWORD *)(a1 + 16))
LABEL_236:
                    *(_DWORD *)(a1 + 16) = 12;
                  *(_QWORD *)a1 = &nuls;
                  *(_QWORD *)(a1 + 8) = &nuls;
LABEL_258:
                  v93 = (v98 - v4) | 0x60000000;
                  goto LABEL_259;
                }
LABEL_276:
                v7 = *(char **)a1;
                v8 = *(char **)(a1 + 8);
                v120 = (uint64_t)&v8[-*(_QWORD *)a1];
                if (v120 >= 1)
                {
                  if ((v121 = *v7, (v121 - 42) < 2)
                    || v121 == 63
                    || (v121 == 123 ? (v122 = (unint64_t)v120 >= 2) : (v122 = 0),
                        v122 && v7[1] - 48 <= 9))
                  {
                    if (!*(_DWORD *)(a1 + 16))
                      *(_DWORD *)(a1 + 16) = 13;
                    *(_QWORD *)a1 = &nuls;
                    *(_QWORD *)(a1 + 8) = &nuls;
                    v7 = &nuls;
                    v8 = &nuls;
                  }
                }
                goto LABEL_10;
              }
              v79 = *(_QWORD *)(a1 + 32);
              if (v77 >= v79)
              {
                v80 = v79 >= -1 ? v79 + 1 : v79 + 2;
                v81 = (v80 & 0xFFFFFFFFFFFFFFFELL) + (v80 >> 1);
                if (v79 < (uint64_t)v81)
                {
                  if (v81 >> 61)
                    goto LABEL_186;
                  v94 = realloc(*(void **)(a1 + 24), 24 * (v80 >> 1));
                  if (v94)
                  {
                    *(_QWORD *)(a1 + 24) = v94;
                    *(_QWORD *)(a1 + 32) = v81;
                    goto LABEL_228;
                  }
                  if (!*(_DWORD *)(a1 + 16))
LABEL_186:
                    *(_DWORD *)(a1 + 16) = 12;
                  *(_QWORD *)a1 = &nuls;
                  *(_QWORD *)(a1 + 8) = &nuls;
                }
              }
LABEL_228:
              v95 = *(_QWORD *)(a1 + 24);
              v96 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v96 + 1;
              *(_QWORD *)(v95 + 8 * v96) = v78 | 0x50000000;
              v78 = *(_QWORD *)(a1 + 40) - v4;
              goto LABEL_229;
            }
            if ((char)v65 != 63)
            {
              if ((char)v65 != 123)
                goto LABEL_276;
              v72 = v8 - v67;
              if (v8 - v67 < 1)
              {
                v74 = 0;
              }
              else
              {
                v73 = 0;
                v74 = 0;
                while (v67[v73] - 48 <= 9 && (int)v74 <= 255)
                {
                  *(_QWORD *)a1 = &v67[v73 + 1];
                  v74 = (v67[v73++] + 10 * v74 - 48);
                  if (v72-- <= 1)
                  {
                    v76 = &v67[v73];
                    goto LABEL_193;
                  }
                }
                v76 = &v67[v73];
                if ((_DWORD)v73)
                {
LABEL_193:
                  if ((int)v74 < 256)
                    goto LABEL_197;
                }
              }
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 10;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
              v76 = &nuls;
              v8 = &nuls;
LABEL_197:
              v85 = v74;
              if (v8 - v76 < 1)
                goto LABEL_264;
              v85 = v74;
              if (*v76 != 44)
                goto LABEL_264;
              v86 = v76 + 1;
              *(_QWORD *)a1 = v76 + 1;
              if (v76[1] - 48 > 9)
              {
                v85 = 256;
                goto LABEL_264;
              }
              v87 = v8 - v86;
              if (v8 - v86 < 1)
              {
                v85 = 0;
              }
              else
              {
                v88 = 0;
                v85 = 0;
                do
                {
                  v89 = &v86[v88];
                  if (v86[v88] - 48 > 9 || (int)v85 > 255)
                    goto LABEL_206;
                  *(_QWORD *)a1 = v89 + 1;
                  v85 = (*v89 + 10 * v85 - 48);
                  ++v88;
                  --v87;
                }
                while (v87 > 0);
                LODWORD(v88) = 1;
LABEL_206:
                if ((_DWORD)v88 && (int)v85 < 256)
                {
                  if ((int)v74 <= (int)v85)
                    goto LABEL_264;
LABEL_261:
                  if (!*(_DWORD *)(a1 + 16))
                    *(_DWORD *)(a1 + 16) = 10;
                  *(_QWORD *)a1 = &nuls;
                  *(_QWORD *)(a1 + 8) = &nuls;
LABEL_264:
                  repeat((uint64_t *)a1, v4, v74, v85);
                  v115 = *(char **)a1;
                  v114 = *(_QWORD *)(a1 + 8);
                  if (v114 - *(_QWORD *)a1 < 1)
                  {
LABEL_272:
                    if (!*(_DWORD *)(a1 + 16))
                    {
                      v119 = 9;
                      goto LABEL_274;
                    }
                  }
                  else
                  {
                    if (*v115 == 125)
                    {
                      *(_QWORD *)a1 = v115 + 1;
                      goto LABEL_276;
                    }
                    v116 = (unsigned __int8 *)(v115 + 1);
                    v117 = ~(unint64_t)v115 + v114;
                    do
                    {
                      *(_QWORD *)a1 = v116;
                      if (v117 <= 0)
                        goto LABEL_272;
                      v118 = *v116++;
                      --v117;
                    }
                    while (v118 != 125);
                    if (!*(_DWORD *)(a1 + 16))
                    {
                      v119 = 10;
LABEL_274:
                      *(_DWORD *)(a1 + 16) = v119;
                    }
                  }
                  *(_QWORD *)a1 = &nuls;
                  *(_QWORD *)(a1 + 8) = &nuls;
                  goto LABEL_276;
                }
              }
              if (*(_DWORD *)(a1 + 16))
              {
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
                if ((int)v74 <= (int)v85)
                  goto LABEL_264;
              }
              else
              {
                *(_DWORD *)(a1 + 16) = 10;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
                if ((int)v74 <= (int)v85)
                  goto LABEL_264;
              }
              goto LABEL_261;
            }
            doinsert((void *)a1, 2013265920, *(_QWORD *)(a1 + 40) - v4 + 1, v4);
            if (*(_DWORD *)(a1 + 16))
              goto LABEL_276;
            v82 = *(_QWORD *)(a1 + 32);
            v83 = *(_QWORD *)(a1 + 40);
            if (v83 < v82)
            {
              v84 = 0;
              goto LABEL_240;
            }
            if (v82 >= -1)
              v90 = v82 + 1;
            else
              v90 = v82 + 2;
            v91 = (v90 & 0xFFFFFFFFFFFFFFFELL) + (v90 >> 1);
            if (v82 >= (uint64_t)v91)
            {
              v84 = 0;
            }
            else
            {
              if (v91 >> 61)
              {
LABEL_215:
                v84 = 12;
                *(_DWORD *)(a1 + 16) = 12;
LABEL_216:
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
                goto LABEL_240;
              }
              v101 = realloc(*(void **)(a1 + 24), 24 * (v90 >> 1));
              if (!v101)
              {
                v84 = *(_DWORD *)(a1 + 16);
                if (v84)
                  goto LABEL_216;
                goto LABEL_215;
              }
              *(_QWORD *)(a1 + 24) = v101;
              *(_QWORD *)(a1 + 32) = v91;
              v84 = *(_DWORD *)(a1 + 16);
            }
LABEL_240:
            v102 = *(_QWORD **)(a1 + 24);
            v103 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v103 + 1;
            v102[v103] = (v83 - v4) | 0x80000000;
            if (v84)
              goto LABEL_276;
            v102[v4] = v102[v4] & 0xF8000000 | (*(_QWORD *)(a1 + 40) - v4);
            v104 = *(_QWORD *)(a1 + 32);
            if (*(_QWORD *)(a1 + 40) < v104
              || (v104 >= -1 ? (v105 = v104 + 1) : (v105 = v104 + 2),
                  v106 = (v105 & 0xFFFFFFFFFFFFFFFELL) + (v105 >> 1),
                  v104 >= (uint64_t)v106))
            {
              v107 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v107 + 1;
              v102[v107] = 2281701376;
            }
            else
            {
              if (v106 >> 61)
              {
                *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
LABEL_332:
                v136 = *(_QWORD *)(a1 + 40);
                *(_QWORD *)(a1 + 40) = v136 + 1;
                v102[v136] = 2281701376;
                goto LABEL_276;
              }
              v102 = realloc(v102, 24 * (v105 >> 1));
              if (!v102)
              {
                if (!*(_DWORD *)(a1 + 16))
                  *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
                v102 = *(_QWORD **)(a1 + 24);
                goto LABEL_332;
              }
              *(_QWORD *)(a1 + 24) = v102;
              *(_QWORD *)(a1 + 32) = v106;
              v123 = *(_DWORD *)(a1 + 16);
              v124 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v124 + 1;
              v102[v124] = 2281701376;
              if (v123)
                goto LABEL_276;
            }
            v102[*(_QWORD *)(a1 + 40) - 1] = v102[*(_QWORD *)(a1 + 40) - 1] & 0xF8000000 | 1;
            v108 = *(_QWORD *)(a1 + 32);
            if (*(_QWORD *)(a1 + 40) >= v108)
            {
              v109 = v108 >= -1 ? v108 + 1 : v108 + 2;
              v110 = (v109 & 0xFFFFFFFFFFFFFFFELL) + (v109 >> 1);
              if (v108 < (uint64_t)v110)
              {
                if (v110 >> 61)
                {
                  *(_DWORD *)(a1 + 16) = 12;
                  *(_QWORD *)a1 = &nuls;
                  *(_QWORD *)(a1 + 8) = &nuls;
                }
                else
                {
                  v102 = realloc(v102, 24 * (v109 >> 1));
                  if (v102)
                  {
                    *(_QWORD *)(a1 + 24) = v102;
                    *(_QWORD *)(a1 + 32) = v110;
                  }
                  else
                  {
                    if (!*(_DWORD *)(a1 + 16))
                      *(_DWORD *)(a1 + 16) = 12;
                    *(_QWORD *)a1 = &nuls;
                    *(_QWORD *)(a1 + 8) = &nuls;
                    v102 = *(_QWORD **)(a1 + 24);
                  }
                }
              }
            }
            v137 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v137 + 1;
            v102[v137] = 2415919106;
            goto LABEL_276;
          }
          v39 = *(_QWORD *)(a1 + 32);
          if (v4 >= v39)
          {
            v40 = v39 >= -1 ? v39 + 1 : v39 + 2;
            v41 = (v40 & 0xFFFFFFFFFFFFFFFELL) + (v40 >> 1);
            if (v39 < (uint64_t)v41)
            {
              if (v41 >> 61)
                goto LABEL_96;
              v125 = realloc(*(void **)(a1 + 24), 24 * (v40 >> 1));
              if (v125)
              {
                *(_QWORD *)(a1 + 24) = v125;
                *(_QWORD *)(a1 + 32) = v41;
              }
              else
              {
                if (!*(_DWORD *)(a1 + 16))
LABEL_96:
                  *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
              }
            }
          }
          v126 = *(_QWORD *)(a1 + 24);
          v127 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v127 + 1;
          *(_QWORD *)(v126 + 8 * v127) = v31 | 0x38000000;
          v37 = *(_QWORD *)(a1 + 8 * v31 + 64) + 1;
          v38 = *v34 - v37;
          if (v38)
            goto LABEL_304;
LABEL_84:
          if (*(_DWORD *)(a1 + 16))
            goto LABEL_323;
LABEL_312:
          v130 = *(_QWORD *)(a1 + 32);
          if (*(_QWORD *)(a1 + 40) >= v130)
          {
            v131 = v130 >= -1 ? v130 + 1 : v130 + 2;
            v132 = (v131 & 0xFFFFFFFFFFFFFFFELL) + (v131 >> 1);
            if (v130 < (uint64_t)v132)
            {
              if (v132 >> 61)
                goto LABEL_318;
              v133 = realloc(*(void **)(a1 + 24), 24 * (v131 >> 1));
              if (v133)
              {
                *(_QWORD *)(a1 + 24) = v133;
                *(_QWORD *)(a1 + 32) = v132;
              }
              else
              {
                if (!*(_DWORD *)(a1 + 16))
LABEL_318:
                  *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
              }
            }
          }
          v134 = *(_QWORD *)(a1 + 24);
          v135 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v135 + 1;
          *(_QWORD *)(v134 + 8 * v135) = v31 | 0x40000000;
          goto LABEL_323;
        }
        if (!v36)
        {
          v29 = 6;
LABEL_143:
          *(_DWORD *)(a1 + 16) = v29;
        }
LABEL_144:
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
LABEL_145:
        v24 = 1;
        v7 = *(char **)a1;
        v8 = *(char **)(a1 + 8);
        v25 = (uint64_t)&v8[-*(_QWORD *)a1];
        if (v25 >= 1)
          goto LABEL_146;
LABEL_10:
        if (v8 - v7 > 0)
          continue;
        v4 = *(_QWORD *)(a1 + 40);
LABEL_342:
        if (v4 == v6)
        {
LABEL_343:
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 14;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v7 = &nuls;
          v8 = &nuls;
        }
        if (v8 - v7 >= 1 && *v7 == 124)
        {
          *(_QWORD *)a1 = v7 + 1;
          if ((v158 & 1) == 0)
          {
            doinsert((void *)a1, 2013265920, v4 - v6 + 1, v6);
            v4 = *(_QWORD *)(a1 + 40);
            v157 = v6;
            if (*(_DWORD *)(a1 + 16))
              goto LABEL_3;
LABEL_350:
            v138 = *(_QWORD *)(a1 + 32);
            if (v4 < v138
              || (v138 >= -1 ? (v139 = v138 + 1) : (v139 = v138 + 2),
                  v140 = (v139 & 0xFFFFFFFFFFFFFFFELL) + (v139 >> 1),
                  v138 >= (uint64_t)v140))
            {
              v141 = 0;
            }
            else
            {
              if (v140 >> 61)
              {
LABEL_356:
                v141 = 12;
                *(_DWORD *)(a1 + 16) = 12;
LABEL_357:
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
                goto LABEL_359;
              }
              v147 = realloc(*(void **)(a1 + 24), 24 * (v139 >> 1));
              if (!v147)
              {
                v141 = *(_DWORD *)(a1 + 16);
                if (v141)
                  goto LABEL_357;
                goto LABEL_356;
              }
              *(_QWORD *)(a1 + 24) = v147;
              *(_QWORD *)(a1 + 32) = v140;
              v141 = *(_DWORD *)(a1 + 16);
            }
LABEL_359:
            v142 = *(_QWORD **)(a1 + 24);
            v143 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v143 + 1;
            v142[v143] = (v4 - v6) | 0x80000000;
            v5 = *(_QWORD *)(a1 + 40);
            if (v141)
            {
              v4 = *(_QWORD *)(a1 + 40);
            }
            else
            {
              v142[v157] = v142[v157] & 0xF8000000 | (v5 - v157);
              v144 = *(_QWORD *)(a1 + 32);
              v4 = *(_QWORD *)(a1 + 40);
              if (v4 >= v144)
              {
                v145 = v144 >= -1 ? v144 + 1 : v144 + 2;
                v146 = (v145 & 0xFFFFFFFFFFFFFFFELL) + (v145 >> 1);
                if (v144 < (uint64_t)v146)
                {
                  if (v146 >> 61)
                  {
                    *(_DWORD *)(a1 + 16) = 12;
                    *(_QWORD *)a1 = &nuls;
                    *(_QWORD *)(a1 + 8) = &nuls;
                  }
                  else
                  {
                    v142 = realloc(v142, 24 * (v145 >> 1));
                    if (v142)
                    {
                      *(_QWORD *)(a1 + 24) = v142;
                      *(_QWORD *)(a1 + 32) = v146;
                    }
                    else
                    {
                      if (!*(_DWORD *)(a1 + 16))
                        *(_DWORD *)(a1 + 16) = 12;
                      *(_QWORD *)a1 = &nuls;
                      *(_QWORD *)(a1 + 8) = &nuls;
                      v142 = *(_QWORD **)(a1 + 24);
                    }
                  }
                }
              }
              v148 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v148 + 1;
              v142[v148] = 2281701376;
            }
            goto LABEL_4;
          }
          v6 = v156;
          if (!*(_DWORD *)(a1 + 16))
            goto LABEL_350;
LABEL_3:
          v5 = v4;
LABEL_4:
          v156 = v5 - 1;
          v157 = v4;
          v158 = 1;
          goto LABEL_5;
        }
        if ((v158 & 1) != 0 && !*(_DWORD *)(a1 + 16))
        {
          v149 = *(_QWORD **)(a1 + 24);
          v149[v157] = v149[v157] & 0xF8000000 | (v4 - v157);
          v150 = *(_QWORD *)(a1 + 32);
          v151 = *(_QWORD *)(a1 + 40);
          v152 = v151 - v156;
          if (v151 >= v150)
          {
            v153 = v150 >= -1 ? v150 + 1 : v150 + 2;
            v154 = (v153 & 0xFFFFFFFFFFFFFFFELL) + (v153 >> 1);
            if (v150 < (uint64_t)v154)
            {
              if (v154 >> 61)
              {
                *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
              }
              else
              {
                v149 = realloc(v149, 24 * (v153 >> 1));
                if (v149)
                {
                  *(_QWORD *)(a1 + 24) = v149;
                  *(_QWORD *)(a1 + 32) = v154;
                }
                else
                {
                  if (!*(_DWORD *)(a1 + 16))
                    *(_DWORD *)(a1 + 16) = 12;
                  *(_QWORD *)a1 = &nuls;
                  *(_QWORD *)(a1 + 8) = &nuls;
                  v149 = *(_QWORD **)(a1 + 24);
                }
              }
            }
          }
          v155 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v155 + 1;
          v149[v155] = v152 | 0x90000000;
        }
        return;
      case '^':
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_108;
        v26 = *(_QWORD *)(a1 + 32);
        if (v4 < v26)
          goto LABEL_107;
        v27 = v26 >= -1 ? v26 + 1 : v26 + 2;
        v28 = (v27 & 0xFFFFFFFFFFFFFFFELL) + (v27 >> 1);
        if (v26 >= (uint64_t)v28)
          goto LABEL_107;
        if (v28 >> 61)
          goto LABEL_61;
        v47 = realloc(*(void **)(a1 + 24), 24 * (v27 >> 1));
        if (v47)
        {
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v28;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16))
LABEL_61:
            *(_DWORD *)(a1 + 16) = 12;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
LABEL_107:
        v48 = *(_QWORD *)(a1 + 24);
        v49 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v49 + 1;
        *(_QWORD *)(v48 + 8 * v49) = 402653184;
LABEL_108:
        v24 = 0;
        v50 = *(int32x2_t **)(a1 + 56);
        v51 = v50[9];
        v52 = vadd_s32(v51, (int32x2_t)0x100000001);
        v51.i32[0] |= 1u;
        v51.i32[1] = v52.i32[1];
        v50[9] = v51;
        v7 = *(char **)a1;
        v8 = *(char **)(a1 + 8);
        v25 = (uint64_t)&v8[-*(_QWORD *)a1];
        if (v25 < 1)
          goto LABEL_10;
        goto LABEL_146;
      case '{':
        if (v8 - v11 >= 1 && *v11 - 48 <= 9)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 13;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
        goto LABEL_86;
      case '|':
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_144;
        v29 = 14;
        goto LABEL_143;
      default:
        goto LABEL_86;
    }
  }
}

void p_bre(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t *v16;
  int32x2_t v17;
  int32x2_t v18;
  int v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  char *v77;
  uint64_t v78;
  _BYTE *v79;
  int v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(char **)a1;
  v6 = *(char **)(a1 + 8);
  v7 = (uint64_t)&v6[-*(_QWORD *)a1];
  if (v7 < 1)
    goto LABEL_17;
  if (*v5 == 94)
  {
    *(_QWORD *)a1 = ++v5;
    if (*(_DWORD *)(a1 + 16))
      goto LABEL_15;
    v10 = *(_QWORD *)(a1 + 32);
    if (v4 >= v10)
    {
      v11 = v10 >= -1 ? v10 + 1 : v10 + 2;
      v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) + (v11 >> 1);
      if (v10 < (uint64_t)v12)
      {
        if (v12 >> 61)
          goto LABEL_10;
        v13 = realloc(*(void **)(a1 + 24), 24 * (v11 >> 1));
        if (v13)
        {
          *(_QWORD *)(a1 + 24) = v13;
          *(_QWORD *)(a1 + 32) = v12;
          v5 = *(char **)a1;
          v6 = *(char **)(a1 + 8);
          goto LABEL_14;
        }
        if (!*(_DWORD *)(a1 + 16))
LABEL_10:
          *(_DWORD *)(a1 + 16) = 12;
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        v5 = &nuls;
        v6 = &nuls;
      }
    }
LABEL_14:
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v15 + 1;
    *(_QWORD *)(v14 + 8 * v15) = 402653184;
LABEL_15:
    v16 = *(int32x2_t **)(a1 + 56);
    v17 = v16[9];
    v18 = vadd_s32(v17, (int32x2_t)0x100000001);
    v17.i32[0] |= 1u;
    v17.i32[1] = v18.i32[1];
    v16[9] = v17;
    v7 = v6 - v5;
    if (v6 - v5 >= 1)
      goto LABEL_16;
LABEL_17:
    if (*(_QWORD *)(a1 + 40) == v4)
      goto LABEL_251;
    return;
  }
LABEL_16:
  v110 = v4;
  v19 = 0;
  v20 = 0;
  while (v7 == 1 || *v5 != a2 || v5[1] != (_DWORD)a3)
  {
    v24 = *(_QWORD *)(a1 + 40);
    v25 = v5 + 1;
    *(_QWORD *)a1 = v5 + 1;
    v26 = *v5;
    if (v26 == 92)
    {
      if (v6 - v25 <= 0)
      {
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 5;
        *(_QWORD *)(a1 + 8) = &nuls;
        v6 = &nuls;
        v25 = &nuls;
      }
      *(_QWORD *)a1 = v25 + 1;
      v26 = *v25++ | 0x100;
    }
    if (v26 <= 295)
    {
      if (v26 == 42)
      {
        if ((v20 & 1) != 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 13;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
LABEL_76:
        ordinary(a1, (char)v26);
        goto LABEL_112;
      }
      if (v26 != 46)
      {
        if (v26 == 91)
        {
          p_bracket(a1);
          goto LABEL_112;
        }
        goto LABEL_76;
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 40) & 8) != 0)
      {
        *(_QWORD *)a1 = &nonnewline_bracket;
        *(_QWORD *)(a1 + 8) = &unk_181261079;
        p_bracket(a1);
        *(_QWORD *)a1 = v25;
        *(_QWORD *)(a1 + 8) = v6;
        goto LABEL_112;
      }
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_112;
      v46 = *(_QWORD *)(a1 + 32);
      if (v24 >= v46)
      {
        v47 = v46 >= -1 ? v46 + 1 : v46 + 2;
        v48 = (v47 & 0xFFFFFFFFFFFFFFFELL) + (v47 >> 1);
        if (v46 < (uint64_t)v48)
        {
          if (v48 >> 61)
            goto LABEL_85;
          v89 = realloc(*(void **)(a1 + 24), 24 * (v47 >> 1));
          if (v89)
          {
            *(_QWORD *)(a1 + 24) = v89;
            *(_QWORD *)(a1 + 32) = v48;
          }
          else
          {
            if (!*(_DWORD *)(a1 + 16))
LABEL_85:
              *(_DWORD *)(a1 + 16) = 12;
            *(_QWORD *)a1 = &nuls;
            *(_QWORD *)(a1 + 8) = &nuls;
          }
        }
      }
      v90 = *(_QWORD *)(a1 + 24);
      v91 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v91 + 1;
      *(_QWORD *)(v90 + 8 * v91) = 671088640;
      goto LABEL_112;
    }
    switch(v26)
    {
      case 296:
        v39 = *(_QWORD *)(a1 + 56);
        v40 = *(_QWORD *)(v39 + 112) + 1;
        *(_QWORD *)(v39 + 112) = v40;
        if (v40 > 9)
        {
          if (*(_DWORD *)(a1 + 16))
          {
LABEL_70:
            v45 = v6 - v25 == 1;
            if (v6 - v25 < 1)
              goto LABEL_209;
LABEL_205:
            if (v45 || *v25 != 92 || v25[1] != 41)
              p_bre(a1, 92, 41);
            goto LABEL_209;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 8 * v40 + 64) = v24;
          if (*(_DWORD *)(a1 + 16))
            goto LABEL_70;
        }
        v41 = *(_QWORD *)(a1 + 32);
        v42 = a3;
        if (*(_QWORD *)(a1 + 40) >= v41)
        {
          v43 = v41 >= -1 ? v41 + 1 : v41 + 2;
          v44 = (v43 & 0xFFFFFFFFFFFFFFFELL) + (v43 >> 1);
          if (v41 < (uint64_t)v44)
          {
            if (v44 >> 61)
            {
              *(_DWORD *)(a1 + 16) = 12;
              v25 = &nuls;
              v6 = &nuls;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
            else
            {
              v88 = realloc(*(void **)(a1 + 24), 24 * (v43 >> 1));
              if (v88)
              {
                *(_QWORD *)(a1 + 24) = v88;
                *(_QWORD *)(a1 + 32) = v44;
                v25 = *(char **)a1;
                v6 = *(char **)(a1 + 8);
              }
              else
              {
                if (!*(_DWORD *)(a1 + 16))
                  *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
                v25 = &nuls;
                v6 = &nuls;
              }
            }
          }
        }
        v92 = *(_QWORD *)(a1 + 24);
        v93 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v93 + 1;
        *(_QWORD *)(v92 + 8 * v93) = v40 | 0x68000000;
        a3 = v42;
        v45 = v6 - v25 == 1;
        if (v6 - v25 >= 1)
          goto LABEL_205;
LABEL_209:
        if (v40 > 9)
        {
          if (*(_DWORD *)(a1 + 16))
          {
LABEL_220:
            v97 = *(char **)a1;
            if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 2)
              goto LABEL_228;
            goto LABEL_225;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 8 * v40 + 144) = *(_QWORD *)(a1 + 40);
          if (*(_DWORD *)(a1 + 16))
            goto LABEL_220;
        }
        v94 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(a1 + 40) < v94)
          goto LABEL_224;
        v95 = v94 >= -1 ? v94 + 1 : v94 + 2;
        v96 = (v95 & 0xFFFFFFFFFFFFFFFELL) + (v95 >> 1);
        if (v94 >= (uint64_t)v96)
          goto LABEL_224;
        if (v96 >> 61)
          goto LABEL_217;
        v98 = realloc(*(void **)(a1 + 24), 24 * (v95 >> 1));
        if (v98)
        {
          *(_QWORD *)(a1 + 24) = v98;
          *(_QWORD *)(a1 + 32) = v96;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16))
LABEL_217:
            *(_DWORD *)(a1 + 16) = 12;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
LABEL_224:
        v99 = *(_QWORD *)(a1 + 24);
        v100 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v100 + 1;
        *(_QWORD *)(v99 + 8 * v100) = v40 | 0x70000000;
        v97 = *(char **)a1;
        if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 2)
          goto LABEL_228;
LABEL_225:
        if (*v97 == 92 && v97[1] == 41)
        {
          *(_QWORD *)a1 = v97 + 2;
          break;
        }
LABEL_228:
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 8;
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        break;
      case 297:
      case 381:
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_68;
        v38 = 8;
        goto LABEL_67;
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
        v27 = (v26 & 0xFFFFFEFF) - 48;
        v28 = a1 + 8 * v27;
        v31 = *(_QWORD *)(v28 + 144);
        v30 = (_QWORD *)(v28 + 144);
        v29 = v31;
        v32 = *(_DWORD *)(a1 + 16);
        if (!v31)
        {
          if (!v32)
            *(_DWORD *)(a1 + 16) = 6;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          goto LABEL_111;
        }
        if (v32)
        {
          v33 = *(_QWORD *)(a1 + 8 * v27 + 64) + 1;
          v34 = v29 - v33;
          if (v29 == v33)
            goto LABEL_37;
          goto LABEL_91;
        }
        v35 = *(_QWORD *)(a1 + 32);
        if (v24 < v35)
          goto LABEL_90;
        v36 = v35 >= -1 ? v35 + 1 : v35 + 2;
        v37 = (v36 & 0xFFFFFFFFFFFFFFFELL) + (v36 >> 1);
        if (v35 >= (uint64_t)v37)
          goto LABEL_90;
        if (v37 >> 61)
          goto LABEL_52;
        v49 = realloc(*(void **)(a1 + 24), 24 * (v36 >> 1));
        if (v49)
        {
          *(_QWORD *)(a1 + 24) = v49;
          *(_QWORD *)(a1 + 32) = v37;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16))
LABEL_52:
            *(_DWORD *)(a1 + 16) = 12;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
LABEL_90:
        v50 = *(_QWORD *)(a1 + 24);
        v51 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v51 + 1;
        *(_QWORD *)(v50 + 8 * v51) = v27 | 0x38000000;
        v33 = *(_QWORD *)(a1 + 8 * v27 + 64) + 1;
        v34 = *v30 - v33;
        if (!v34)
        {
LABEL_37:
          if (*(_DWORD *)(a1 + 16))
            goto LABEL_111;
LABEL_100:
          v55 = *(_QWORD *)(a1 + 32);
          if (*(_QWORD *)(a1 + 40) >= v55)
          {
            v56 = v55 >= -1 ? v55 + 1 : v55 + 2;
            v57 = (v56 & 0xFFFFFFFFFFFFFFFELL) + (v56 >> 1);
            if (v55 < (uint64_t)v57)
            {
              if (v57 >> 61)
                goto LABEL_106;
              v58 = realloc(*(void **)(a1 + 24), 24 * (v56 >> 1));
              if (v58)
              {
                *(_QWORD *)(a1 + 24) = v58;
                *(_QWORD *)(a1 + 32) = v57;
              }
              else
              {
                if (!*(_DWORD *)(a1 + 16))
LABEL_106:
                  *(_DWORD *)(a1 + 16) = 12;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
              }
            }
          }
          v59 = *(_QWORD *)(a1 + 24);
          v60 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v60 + 1;
          *(_QWORD *)(v59 + 8 * v60) = v27 | 0x40000000;
          goto LABEL_111;
        }
LABEL_91:
        if (v34 >= 1)
        {
          v52 = a3;
          v53 = *(_QWORD *)(a1 + 32) + v34;
          if (v53 >> 61 || (v54 = realloc(*(void **)(a1 + 24), 8 * v53)) == 0)
          {
            if (!*(_DWORD *)(a1 + 16))
              *(_DWORD *)(a1 + 16) = 12;
            *(_QWORD *)a1 = &nuls;
            *(_QWORD *)(a1 + 8) = &nuls;
          }
          else
          {
            *(_QWORD *)(a1 + 24) = v54;
            *(_QWORD *)(a1 + 32) = v53;
          }
          a3 = v52;
        }
        memmove((void *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(a1 + 40)), (const void *)(*(_QWORD *)(a1 + 24) + 8 * v33), 8 * v34);
        *(_QWORD *)(a1 + 40) += v34;
        if (!*(_DWORD *)(a1 + 16))
          goto LABEL_100;
LABEL_111:
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 120) = 1;
        break;
      case 379:
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_68;
        v38 = 13;
LABEL_67:
        *(_DWORD *)(a1 + 16) = v38;
LABEL_68:
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        break;
      default:
        goto LABEL_76;
    }
LABEL_112:
    v5 = *(char **)a1;
    v6 = *(char **)(a1 + 8);
    v7 = (uint64_t)&v6[-*(_QWORD *)a1];
    if (v7 < 1)
      goto LABEL_132;
    v61 = *v5;
    if (v61 == 42)
    {
      *(_QWORD *)a1 = v5 + 1;
      doinsert((void *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v24 + 1, v24);
      v62 = *(_QWORD *)(a1 + 40);
      v63 = v62 - v24;
      if (!*(_DWORD *)(a1 + 16))
      {
        v64 = *(_QWORD *)(a1 + 32);
        if (v62 >= v64)
        {
          v65 = v64 >= -1 ? v64 + 1 : v64 + 2;
          v66 = (v65 & 0xFFFFFFFFFFFFFFFELL) + (v65 >> 1);
          if (v64 < (uint64_t)v66)
          {
            if (v66 >> 61)
              goto LABEL_121;
            v81 = realloc(*(void **)(a1 + 24), 24 * (v65 >> 1));
            if (v81)
            {
              *(_QWORD *)(a1 + 24) = v81;
              *(_QWORD *)(a1 + 32) = v66;
            }
            else
            {
              if (!*(_DWORD *)(a1 + 16))
LABEL_121:
                *(_DWORD *)(a1 + 16) = 12;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
          }
        }
        v82 = *(_QWORD *)(a1 + 24);
        v83 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v83 + 1;
        *(_QWORD *)(v82 + 8 * v83) = v63 | 0x50000000;
        v63 = *(_QWORD *)(a1 + 40) - v24;
      }
      doinsert((void *)a1, 1476395008, v63 + 1, v24);
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_22;
      v84 = *(_QWORD *)(a1 + 32);
      v85 = *(_QWORD *)(a1 + 40);
      if (v85 >= v84)
      {
        v86 = v84 >= -1 ? v84 + 1 : v84 + 2;
        v87 = (v86 & 0xFFFFFFFFFFFFFFFELL) + (v86 >> 1);
        if (v84 < (uint64_t)v87)
        {
          if (v87 >> 61)
            goto LABEL_186;
          v21 = realloc(*(void **)(a1 + 24), 24 * (v86 >> 1));
          if (v21)
          {
            *(_QWORD *)(a1 + 24) = v21;
            *(_QWORD *)(a1 + 32) = v87;
          }
          else
          {
            if (!*(_DWORD *)(a1 + 16))
LABEL_186:
              *(_DWORD *)(a1 + 16) = 12;
            *(_QWORD *)a1 = &nuls;
            *(_QWORD *)(a1 + 8) = &nuls;
          }
        }
      }
      v22 = *(_QWORD *)(a1 + 24);
      v23 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23 + 1;
      *(_QWORD *)(v22 + 8 * v23) = (v85 - v24) | 0x60000000;
      goto LABEL_22;
    }
    if ((unint64_t)v7 >= 2 && v61 == 92 && v5[1] == 123)
    {
      *(_QWORD *)a1 = v5 + 2;
      v67 = v6 - (v5 + 2);
      if (v67 < 1)
      {
        v69 = 0;
      }
      else
      {
        v68 = 0;
        v69 = 0;
        while (1)
        {
          v70 = &v5[v68];
          if (v5[v68 + 2] - 48 > 9 || (int)v69 > 255)
            break;
          *(_QWORD *)a1 = &v5[v68 + 3];
          v69 = (v70[2] + 10 * v69 - 48);
          ++v68;
          if (--v67 <= 0)
          {
            v71 = &v5[v68 + 2];
            goto LABEL_137;
          }
        }
        v71 = v70 + 2;
        if (!(_DWORD)v68)
          goto LABEL_138;
LABEL_137:
        if ((int)v69 < 256)
          goto LABEL_141;
      }
LABEL_138:
      if (!*(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = 10;
      *(_QWORD *)a1 = &nuls;
      *(_QWORD *)(a1 + 8) = &nuls;
      v71 = &nuls;
      v6 = &nuls;
LABEL_141:
      v72 = v69;
      if (v6 - v71 >= 1)
      {
        v72 = v69;
        if (*v71 == 44)
        {
          v73 = v71 + 1;
          *(_QWORD *)a1 = v73;
          v74 = v6 - v73;
          if (v6 - v73 < 1 || *v73 - 48 > 9)
          {
            v72 = 256;
          }
          else
          {
            v75 = 0;
            v72 = 0;
            while (1)
            {
              v76 = (unsigned __int8 *)&v73[v75];
              if (v73[v75] - 48 > 9 || (int)v72 > 255)
                break;
              *(_QWORD *)a1 = v76 + 1;
              v72 = ((char)*v76 + 10 * v72 - 48);
              ++v75;
              if (--v74 <= 0)
              {
                LODWORD(v75) = 1;
                break;
              }
            }
            if (!(_DWORD)v75 || (int)v72 >= 256)
            {
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 10;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
            if ((int)v69 > (int)v72)
            {
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 10;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
          }
        }
      }
      repeat((uint64_t *)a1, v24, v69, v72);
      v77 = *(char **)a1;
      v78 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
      if (v78 <= 1)
      {
        if (v78 == 1)
        {
LABEL_165:
          v79 = v77 + 1;
          while (1)
          {
            if (--v78)
            {
              if (*(v79 - 1) == 92 && *v79 == 125)
                break;
            }
            *(_QWORD *)a1 = v79++;
            if (v78 <= 0)
              goto LABEL_172;
          }
          if (!*(_DWORD *)(a1 + 16))
          {
            v80 = 10;
            goto LABEL_174;
          }
        }
        else
        {
LABEL_172:
          if (!*(_DWORD *)(a1 + 16))
          {
            v80 = 9;
LABEL_174:
            *(_DWORD *)(a1 + 16) = v80;
          }
        }
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        goto LABEL_22;
      }
      if (*v77 != 92 || v77[1] != 125)
        goto LABEL_165;
      *(_QWORD *)a1 = v77 + 2;
LABEL_22:
      v19 = 0;
      v5 = *(char **)a1;
      v6 = *(char **)(a1 + 8);
      v7 = (uint64_t)&v6[-*(_QWORD *)a1];
      v20 = 1;
      if (v7 <= 0)
        break;
    }
    else
    {
LABEL_132:
      if (v26 != 36)
        goto LABEL_22;
      v19 = 1;
      v20 = 1;
      if (v7 <= 0)
        break;
    }
  }
  v101 = *(_QWORD *)(a1 + 40);
  if (v19)
  {
    v102 = v101 - 1;
    *(_QWORD *)(a1 + 40) = v101 - 1;
    if (!*(_DWORD *)(a1 + 16))
    {
      v103 = *(_QWORD *)(a1 + 32);
      if (v101 > v103)
      {
        v104 = v103 >= -1 ? v103 + 1 : v103 + 2;
        v105 = (v104 & 0xFFFFFFFFFFFFFFFELL) + (v104 >> 1);
        if (v103 < (uint64_t)v105)
        {
          if (v105 >> 61)
            goto LABEL_243;
          v106 = realloc(*(void **)(a1 + 24), 24 * (v104 >> 1));
          if (v106)
          {
            *(_QWORD *)(a1 + 24) = v106;
            *(_QWORD *)(a1 + 32) = v105;
          }
          else
          {
            if (!*(_DWORD *)(a1 + 16))
LABEL_243:
              *(_DWORD *)(a1 + 16) = 12;
            *(_QWORD *)a1 = &nuls;
            *(_QWORD *)(a1 + 8) = &nuls;
          }
        }
      }
      v107 = *(_QWORD *)(a1 + 24);
      v108 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v108 + 1;
      *(_QWORD *)(v107 + 8 * v108) = 0x20000000;
      v102 = *(_QWORD *)(a1 + 40);
    }
    v109 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(v109 + 72) |= 2u;
    ++*(_DWORD *)(v109 + 80);
    if (v102 == v110)
    {
LABEL_251:
      if (!*(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = 14;
      *(_QWORD *)a1 = &nuls;
      *(_QWORD *)(a1 + 8) = &nuls;
    }
  }
  else if (v101 == v110)
  {
    goto LABEL_251;
  }
}

void *doinsert(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!*((_DWORD *)result + 4))
  {
    v7 = result;
    v8 = *((_QWORD *)result + 4);
    v9 = *((_QWORD *)result + 5);
    if (v9 >= v8)
    {
      v10 = v8 >= -1 ? v8 + 1 : v8 + 2;
      v11 = (v10 & 0xFFFFFFFFFFFFFFFELL) + (v10 >> 1);
      if (v8 < (uint64_t)v11)
      {
        if (v11 >> 61)
        {
LABEL_8:
          v7[4] = 12;
LABEL_9:
          *(_QWORD *)v7 = &nuls;
          *((_QWORD *)v7 + 1) = &nuls;
          goto LABEL_12;
        }
        v12 = realloc(*((void **)result + 3), 24 * (v10 >> 1));
        if (!v12)
        {
          if (v7[4])
            goto LABEL_9;
          goto LABEL_8;
        }
        *((_QWORD *)v7 + 3) = v12;
        *((_QWORD *)v7 + 4) = v11;
      }
    }
LABEL_12:
    v13 = *((_QWORD *)v7 + 3);
    v14 = *((_QWORD *)v7 + 5);
    *((_QWORD *)v7 + 5) = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14) = a3 | a2;
    v15 = *(_QWORD *)(v13 + 8 * v9);
    v16 = *((_QWORD *)v7 + 9);
    if (v16 >= a4)
    {
      *((_QWORD *)v7 + 9) = v16 + 1;
      v17 = *((_QWORD *)v7 + 19);
      if (v17 < a4)
      {
LABEL_14:
        v18 = *((_QWORD *)v7 + 10);
        if (v18 < a4)
          goto LABEL_15;
        goto LABEL_34;
      }
    }
    else
    {
      v17 = *((_QWORD *)v7 + 19);
      if (v17 < a4)
        goto LABEL_14;
    }
    *((_QWORD *)v7 + 19) = v17 + 1;
    v18 = *((_QWORD *)v7 + 10);
    if (v18 < a4)
    {
LABEL_15:
      v19 = *((_QWORD *)v7 + 20);
      if (v19 < a4)
        goto LABEL_16;
      goto LABEL_35;
    }
LABEL_34:
    *((_QWORD *)v7 + 10) = v18 + 1;
    v19 = *((_QWORD *)v7 + 20);
    if (v19 < a4)
    {
LABEL_16:
      v20 = *((_QWORD *)v7 + 11);
      if (v20 < a4)
        goto LABEL_17;
      goto LABEL_36;
    }
LABEL_35:
    *((_QWORD *)v7 + 20) = v19 + 1;
    v20 = *((_QWORD *)v7 + 11);
    if (v20 < a4)
    {
LABEL_17:
      v21 = *((_QWORD *)v7 + 21);
      if (v21 < a4)
        goto LABEL_18;
      goto LABEL_37;
    }
LABEL_36:
    *((_QWORD *)v7 + 11) = v20 + 1;
    v21 = *((_QWORD *)v7 + 21);
    if (v21 < a4)
    {
LABEL_18:
      v22 = *((_QWORD *)v7 + 12);
      if (v22 < a4)
        goto LABEL_19;
      goto LABEL_38;
    }
LABEL_37:
    *((_QWORD *)v7 + 21) = v21 + 1;
    v22 = *((_QWORD *)v7 + 12);
    if (v22 < a4)
    {
LABEL_19:
      v23 = *((_QWORD *)v7 + 22);
      if (v23 < a4)
        goto LABEL_20;
      goto LABEL_39;
    }
LABEL_38:
    *((_QWORD *)v7 + 12) = v22 + 1;
    v23 = *((_QWORD *)v7 + 22);
    if (v23 < a4)
    {
LABEL_20:
      v24 = *((_QWORD *)v7 + 13);
      if (v24 < a4)
        goto LABEL_21;
      goto LABEL_40;
    }
LABEL_39:
    *((_QWORD *)v7 + 22) = v23 + 1;
    v24 = *((_QWORD *)v7 + 13);
    if (v24 < a4)
    {
LABEL_21:
      v25 = *((_QWORD *)v7 + 23);
      if (v25 < a4)
        goto LABEL_22;
      goto LABEL_41;
    }
LABEL_40:
    *((_QWORD *)v7 + 13) = v24 + 1;
    v25 = *((_QWORD *)v7 + 23);
    if (v25 < a4)
    {
LABEL_22:
      v26 = *((_QWORD *)v7 + 14);
      if (v26 < a4)
        goto LABEL_23;
      goto LABEL_42;
    }
LABEL_41:
    *((_QWORD *)v7 + 23) = v25 + 1;
    v26 = *((_QWORD *)v7 + 14);
    if (v26 < a4)
    {
LABEL_23:
      v27 = *((_QWORD *)v7 + 24);
      if (v27 < a4)
        goto LABEL_24;
      goto LABEL_43;
    }
LABEL_42:
    *((_QWORD *)v7 + 14) = v26 + 1;
    v27 = *((_QWORD *)v7 + 24);
    if (v27 < a4)
    {
LABEL_24:
      v28 = *((_QWORD *)v7 + 15);
      if (v28 < a4)
        goto LABEL_25;
      goto LABEL_44;
    }
LABEL_43:
    *((_QWORD *)v7 + 24) = v27 + 1;
    v28 = *((_QWORD *)v7 + 15);
    if (v28 < a4)
    {
LABEL_25:
      v29 = *((_QWORD *)v7 + 25);
      if (v29 < a4)
        goto LABEL_26;
      goto LABEL_45;
    }
LABEL_44:
    *((_QWORD *)v7 + 15) = v28 + 1;
    v29 = *((_QWORD *)v7 + 25);
    if (v29 < a4)
    {
LABEL_26:
      v30 = *((_QWORD *)v7 + 16);
      if (v30 < a4)
        goto LABEL_27;
      goto LABEL_46;
    }
LABEL_45:
    *((_QWORD *)v7 + 25) = v29 + 1;
    v30 = *((_QWORD *)v7 + 16);
    if (v30 < a4)
    {
LABEL_27:
      v31 = *((_QWORD *)v7 + 26);
      if (v31 < a4)
        goto LABEL_28;
      goto LABEL_47;
    }
LABEL_46:
    *((_QWORD *)v7 + 16) = v30 + 1;
    v31 = *((_QWORD *)v7 + 26);
    if (v31 < a4)
    {
LABEL_28:
      v32 = *((_QWORD *)v7 + 17);
      if (v32 < a4)
        goto LABEL_29;
      goto LABEL_48;
    }
LABEL_47:
    *((_QWORD *)v7 + 26) = v31 + 1;
    v32 = *((_QWORD *)v7 + 17);
    if (v32 < a4)
    {
LABEL_29:
      v33 = *((_QWORD *)v7 + 27);
      if (v33 < a4)
      {
LABEL_31:
        result = memmove((void *)(v13 + 8 * a4 + 8), (const void *)(v13 + 8 * a4), 8 * (*((_QWORD *)v7 + 5) + ~a4));
        *(_QWORD *)(*((_QWORD *)v7 + 3) + 8 * a4) = v15;
        return result;
      }
LABEL_30:
      *((_QWORD *)v7 + 27) = v33 + 1;
      goto LABEL_31;
    }
LABEL_48:
    *((_QWORD *)v7 + 17) = v32 + 1;
    v33 = *((_QWORD *)v7 + 27);
    if (v33 < a4)
      goto LABEL_31;
    goto LABEL_30;
  }
  return result;
}

void p_bracket(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t *v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v38;
  int v39;
  const char *v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  const char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  char **v57;
  const char *v58;
  char *v59;
  unsigned int v60;
  char *v61;
  size_t v62;
  char **v63;
  char *v64;
  unsigned __int8 v65;
  unsigned __int8 *v66;
  int v67;
  const char *v68;
  const char *v69;
  int v70;
  uint64_t v71;
  size_t v72;
  char *v73;
  const char *v74;
  int v75;
  const char *v76;
  int v77;
  uint64_t v78;
  char **v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t j;
  unint64_t v91;
  uint64_t v92;
  int v93;
  unsigned __int8 v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  int8x16_t v118;
  int32x4_t v119;
  int8x16_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int8x16_t *v128;
  uint8x16_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  uint8x16_t v132;
  uint16x8_t v133;
  uint16x8_t v134;
  unint64_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int8x8_t v138;
  int8x16_t v139;
  uint16x8_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  char v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t i;
  unsigned int v172;
  void **v173;
  uint64_t v174;

  v2 = *(char **)a1;
  if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >= 6)
  {
    if (strncmp(*(const char **)a1, "[:<:]]", 6uLL))
    {
      if (strncmp(v2, "[:>:]]", 6uLL))
        goto LABEL_4;
      if (!*(_DWORD *)(a1 + 16))
      {
        v29 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(a1 + 40) < v29)
          goto LABEL_258;
        v30 = v29 >= -1 ? v29 + 1 : v29 + 2;
        v31 = (v30 & 0xFFFFFFFFFFFFFFFELL) + (v30 >> 1);
        if (v29 >= (uint64_t)v31)
          goto LABEL_258;
        if (v31 >> 61)
          goto LABEL_36;
        v116 = realloc(*(void **)(a1 + 24), 24 * (v30 >> 1));
        if (v116)
        {
          *(_QWORD *)(a1 + 24) = v116;
          *(_QWORD *)(a1 + 32) = v31;
          v2 = *(char **)a1;
          goto LABEL_258;
        }
        if (!*(_DWORD *)(a1 + 16))
LABEL_36:
          *(_DWORD *)(a1 + 16) = 12;
        v2 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
LABEL_258:
        v96 = *(_QWORD *)(a1 + 24);
        v97 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v97 + 1;
        v98 = 2684354560;
        goto LABEL_259;
      }
LABEL_260:
      *(_QWORD *)a1 = v2 + 6;
      return;
    }
    if (*(_DWORD *)(a1 + 16))
      goto LABEL_260;
    v26 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(a1 + 40) >= v26)
    {
      v27 = v26 >= -1 ? v26 + 1 : v26 + 2;
      v28 = (v27 & 0xFFFFFFFFFFFFFFFELL) + (v27 >> 1);
      if (v26 < (uint64_t)v28)
      {
        if (v28 >> 61)
          goto LABEL_27;
        v95 = realloc(*(void **)(a1 + 24), 24 * (v27 >> 1));
        if (v95)
        {
          *(_QWORD *)(a1 + 24) = v95;
          *(_QWORD *)(a1 + 32) = v28;
          v2 = *(char **)a1;
          goto LABEL_234;
        }
        if (!*(_DWORD *)(a1 + 16))
LABEL_27:
          *(_DWORD *)(a1 + 16) = 12;
        v2 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
      }
    }
LABEL_234:
    v96 = *(_QWORD *)(a1 + 24);
    v97 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v97 + 1;
    v98 = 2550136832;
LABEL_259:
    *(_QWORD *)(v96 + 8 * v97) = v98;
    goto LABEL_260;
  }
LABEL_4:
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(unsigned int *)(v3 + 20);
  v5 = *(int *)(v3 + 16);
  *(_DWORD *)(v3 + 20) = v4 + 1;
  v6 = *(_DWORD *)(a1 + 48);
  if ((int)v4 < v6)
  {
    v7 = *(_QWORD *)(v3 + 24);
    if (!v7)
      goto LABEL_195;
    goto LABEL_6;
  }
  v20 = (v6 + 8);
  *(_DWORD *)(a1 + 48) = v20;
  if (v6 < -8)
    goto LABEL_195;
  v21 = realloc(*(void **)(v3 + 24), 32 * (v6 + 8));
  v3 = *(_QWORD *)(a1 + 56);
  if (!v21)
    goto LABEL_195;
  v22 = (int)(v20 >> 3) * (uint64_t)(int)v5;
  *(_QWORD *)(v3 + 24) = v21;
  v23 = (char *)realloc(*(void **)(v3 + 32), v22);
  v3 = *(_QWORD *)(a1 + 56);
  if (!v23)
    goto LABEL_195;
  *(_QWORD *)(v3 + 32) = v23;
  if ((int)v4 >= 1)
  {
    v24 = *(_QWORD *)(v3 + 24);
    if ((_DWORD)v4 == 1)
    {
      v25 = 0;
LABEL_192:
      v81 = (_QWORD *)(v24 + 32 * v25);
      do
      {
        *v81 = &v23[(v25 >> 3) * (uint64_t)(int)v5];
        v81 += 4;
        ++v25;
      }
      while (v4 != v25);
      goto LABEL_194;
    }
    v78 = 0;
    v25 = v4 & 0xFFFFFFFE;
    v79 = (char **)(v24 + 32);
    do
    {
      v80 = &v23[(v78 >> 3) * (uint64_t)(int)v5];
      *(v79 - 4) = v80;
      *v79 = v80;
      v79 += 8;
      v78 += 2;
    }
    while (v25 != v78);
    if (v25 != v4)
      goto LABEL_192;
  }
LABEL_194:
  bzero(&v23[v22 - v5], v5);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    goto LABEL_195;
LABEL_6:
  v8 = *(_QWORD *)(v3 + 32);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 32 * (int)v4);
    v10 = v8 + (int)v5 * (uint64_t)((int)v4 / 8);
    v11 = 1;
    v12 = 1 << (v4 & 7);
    *((_BYTE *)v9 + 8) = v12;
    v13 = v9 + 1;
    *((_BYTE *)v9 + 9) = 0;
    v14 = (char *)v9 + 9;
    v9[2] = 0;
    v15 = v9 + 2;
    *v9 = v10;
    v9[3] = 0;
    v16 = *(const char **)a1;
    v17 = *(_QWORD *)(a1 + 8);
    if (v17 - *(_QWORD *)a1 < 1)
      goto LABEL_40;
    v18 = *(unsigned __int8 *)v16;
    v11 = v18 != 94;
    if (v18 == 94)
    {
      *(_QWORD *)a1 = ++v16;
      if (v17 - (uint64_t)v16 < 1)
      {
        v11 = 0;
        v33 = *(char **)a1;
        v32 = *(char **)(a1 + 8);
        v34 = (uint64_t)&v32[-*(_QWORD *)a1];
        if (v34 >= 1)
          goto LABEL_41;
        goto LABEL_199;
      }
      v18 = *(unsigned __int8 *)v16;
    }
    if (v18 == 93)
    {
      v19 = 93;
    }
    else
    {
      if (v18 != 45)
        goto LABEL_40;
      v19 = 45;
    }
    *(_QWORD *)a1 = v16 + 1;
    *(_BYTE *)(v10 + v19) |= v12;
    *v14 += v18;
LABEL_40:
    v33 = *(char **)a1;
    v32 = *(char **)(a1 + 8);
    v34 = (uint64_t)&v32[-*(_QWORD *)a1];
    if (v34 >= 1)
    {
LABEL_41:
      v35 = v7 + 32 * (int)v4 + 24;
      while (1)
      {
        v36 = *v33;
        if (v36 == 93)
          goto LABEL_199;
        if ((unint64_t)v34 >= 2 && v36 == 45)
        {
          if (v33[1] == 93)
          {
            *(_QWORD *)a1 = v33 + 1;
            *(_BYTE *)(*v9 + 45) |= *v13;
            *v14 += 45;
            v33 = *(char **)a1;
            v32 = *(char **)(a1 + 8);
            goto LABEL_199;
          }
          goto LABEL_81;
        }
        if (v36 == 45)
          goto LABEL_81;
        if (v36 != 91 || (unint64_t)v34 <= 1)
        {
LABEL_55:
          v38 = p_b_symbol(a1);
          v39 = v38;
          v40 = *(const char **)a1;
          v41 = *(_QWORD *)(a1 + 8);
          if (v41 - *(_QWORD *)a1 < 2
            || *v40 != 45
            || (v42 = v40 + 1, v40[1] == 93)
            || ((*(_QWORD *)a1 = v42, v41 - (uint64_t)v42 < 1) || *v42 != 45
              ? (v38 = p_b_symbol(a1))
              : (*(_QWORD *)a1 = v40 + 2, v38 = 45),
                v39 <= v38))
          {
            do
            {
              *(_BYTE *)(*v9 + v39) |= *v13;
              *v14 += v39++;
            }
            while (v38 + 1 != v39);
            v33 = *(char **)a1;
            v32 = *(char **)(a1 + 8);
            goto LABEL_44;
          }
LABEL_81:
          if (*(_DWORD *)(a1 + 16))
            goto LABEL_43;
          v51 = 11;
LABEL_42:
          *(_DWORD *)(a1 + 16) = v51;
          goto LABEL_43;
        }
        v43 = v33[1];
        if (v43 != 61)
          break;
        v52 = v33 + 2;
        *(_QWORD *)a1 = v33 + 2;
        if (v32 - (v33 + 2) <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v32 = &nuls;
          v52 = &nuls;
        }
        v53 = *(unsigned __int8 *)v52;
        if (v53 == 93 || v53 == 45)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 3;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v32 = &nuls;
          v52 = &nuls;
        }
        v174 = v35;
        v54 = v32 - v52;
        if (v54 < 1)
        {
LABEL_105:
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          v60 = 0;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
LABEL_108:
          v35 = v174;
        }
        else
        {
          v55 = 0;
          v56 = 0;
          while (v54 - 1 == v56 || v52[v56] != 61 || v52[v56 + 1] != 93)
          {
            *(_QWORD *)a1 = &v52[++v56];
            --v55;
            if (v54 + v55 <= 0)
              goto LABEL_105;
          }
          v172 = v11;
          v57 = &off_1E0E569C8;
          v58 = "NUL";
          do
          {
            if (!strncmp(v58, v52, v56) && strlen(v58) == v56)
            {
              v60 = *((unsigned __int8 *)v57 - 8);
LABEL_153:
              v11 = v172;
              goto LABEL_108;
            }
            v59 = *v57;
            v57 += 2;
            v58 = v59;
          }
          while (v59);
          if (v56 == 1)
          {
            v60 = *(unsigned __int8 *)v52;
            goto LABEL_153;
          }
          v11 = v172;
          v35 = v174;
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 3;
          v60 = 0;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
        *(_BYTE *)(*v9 + v60) |= *v13;
        *v14 += v60;
        v61 = *(char **)a1;
        v32 = *(char **)(a1 + 8);
        if ((uint64_t)&v32[-*(_QWORD *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v61 = &nuls;
          v32 = &nuls;
        }
        if (v32 - v61 > 1 && *v61 == 61 && v61[1] == 93)
        {
LABEL_177:
          v33 = v61 + 2;
          *(_QWORD *)a1 = v33;
          goto LABEL_44;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          v51 = 3;
          goto LABEL_42;
        }
LABEL_43:
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        v33 = &nuls;
        v32 = &nuls;
LABEL_44:
        v34 = v32 - v33;
        if (v32 - v33 <= 0)
          goto LABEL_199;
      }
      if (v43 != 58)
        goto LABEL_55;
      v173 = (void **)v35;
      v44 = (uint64_t)(v33 + 2);
      *(_QWORD *)a1 = v33 + 2;
      if (v32 - (v33 + 2) <= 0)
      {
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 7;
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        v32 = &nuls;
        v44 = (uint64_t)&nuls;
      }
      v45 = *(unsigned __int8 *)v44;
      if (v45 == 93 || v45 == 45)
      {
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 4;
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        v32 = &nuls;
        v44 = (uint64_t)&nuls;
      }
      if ((uint64_t)&v32[-v44] < 1)
      {
        v50 = v44;
      }
      else
      {
        v46 = v11;
        v47 = -v44;
        v48 = (const char *)(v44 + 1);
        do
        {
          v49 = *((unsigned __int8 *)v48 - 1);
          if (*(v48 - 1) < 0)
          {
            if (!__maskrune(v49, 0x100uLL))
              goto LABEL_78;
          }
          else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v49 + 60) & 0x100) == 0)
          {
LABEL_78:
            v50 = *(_QWORD *)a1;
            goto LABEL_120;
          }
          *(_QWORD *)a1 = v48;
          --v47;
          ++v48;
        }
        while (*(_QWORD *)(a1 + 8) + v47 > 0);
        v50 = -v47;
LABEL_120:
        v11 = v46;
      }
      v62 = v50 - v44;
      if (!strncmp("alnum", (const char *)v44, v50 - v44) && !aAlnum[v62])
      {
        v63 = cclasses;
      }
      else if (!strncmp("alpha", (const char *)v44, v62) && !aAlpha[v62])
      {
        v63 = off_1E0E56898;
      }
      else if (!strncmp("blank", (const char *)v44, v62) && !aBlank[v62])
      {
        v63 = off_1E0E568B0;
      }
      else if (!strncmp("cntrl", (const char *)v44, v62) && !aCntrl[v62])
      {
        v63 = off_1E0E568C8;
      }
      else if (!strncmp("digit", (const char *)v44, v62) && !aDigit[v62])
      {
        v63 = off_1E0E568E0;
      }
      else if (!strncmp("graph", (const char *)v44, v62) && !aGraph[v62])
      {
        v63 = off_1E0E568F8;
      }
      else if (!strncmp("lower", (const char *)v44, v62) && !aLower[v62])
      {
        v63 = off_1E0E56910;
      }
      else if (!strncmp("print", (const char *)v44, v62) && !aPrint[v62])
      {
        v63 = off_1E0E56928;
      }
      else if (!strncmp("punct", (const char *)v44, v62) && !aPunct[v62])
      {
        v63 = off_1E0E56940;
      }
      else if (!strncmp("space", (const char *)v44, v62) && !aSpace[v62])
      {
        v63 = off_1E0E56958;
      }
      else if (!strncmp("upper", (const char *)v44, v62) && !aUpper[v62])
      {
        v63 = off_1E0E56970;
      }
      else
      {
        if (strncmp("xdigit", (const char *)v44, v62) || aXdigit[v62])
        {
          v35 = (uint64_t)v173;
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 4;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          goto LABEL_170;
        }
        v63 = off_1E0E56988;
      }
      v35 = (uint64_t)v173;
      v64 = v63[1];
      v65 = *v64;
      if (*v64)
      {
        v66 = (unsigned __int8 *)(v64 + 1);
        do
        {
          *(_BYTE *)(*v9 + v65) |= *v13;
          *v14 += v65;
          v67 = *v66++;
          v65 = v67;
        }
        while (v67);
      }
      v68 = v63[2];
      if (*v68)
      {
        do
        {
          while (1)
          {
            while (1)
            {
              v71 = *v15;
              v72 = *v15 + strlen(v68) + 1;
              *v15 = v72;
              v73 = (char *)realloc(*v173, v72);
              if (!v73)
                break;
              *v173 = v73;
              llvm_strlcpy(&v73[v71 - 1], (unint64_t)v68, *v15 - v71 + 1);
              v69 = &v68[strlen(v68)];
              v70 = *((unsigned __int8 *)v69 + 1);
              v68 = v69 + 1;
              if (!v70)
                goto LABEL_170;
            }
            if (*v173)
              free(*v173);
            *v173 = 0;
            if (!*(_DWORD *)(a1 + 16))
              break;
            *(_QWORD *)a1 = &nuls;
            *(_QWORD *)(a1 + 8) = &nuls;
            v74 = &v68[strlen(v68)];
            v75 = *((unsigned __int8 *)v74 + 1);
            v68 = v74 + 1;
            if (!v75)
              goto LABEL_170;
          }
          *(_DWORD *)(a1 + 16) = 12;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v76 = &v68[strlen(v68)];
          v77 = *((unsigned __int8 *)v76 + 1);
          v68 = v76 + 1;
        }
        while (v77);
      }
LABEL_170:
      v61 = *(char **)a1;
      v32 = *(char **)(a1 + 8);
      if ((uint64_t)&v32[-*(_QWORD *)a1] < 1)
      {
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 7;
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        v61 = &nuls;
        v32 = &nuls;
      }
      if (v32 - v61 > 1 && *v61 == 58 && v61[1] == 93)
        goto LABEL_177;
      if (!*(_DWORD *)(a1 + 16))
      {
        v51 = 4;
        goto LABEL_42;
      }
      goto LABEL_43;
    }
LABEL_199:
    if (v32 - v33 >= 1 && (*(_QWORD *)a1 = v33 + 1, *v33 == 93))
    {
      if (!*(_DWORD *)(a1 + 16))
      {
        v83 = *(_QWORD *)(a1 + 56);
        if ((*(_BYTE *)(v83 + 40) & 2) != 0)
        {
          v84 = *(unsigned int *)(v83 + 16);
          if ((int)v84 >= 1)
          {
            v85 = v11;
            v86 = MEMORY[0x1E0C80978];
            while (1)
            {
              v91 = v84 - 1;
              v92 = (v84 - 1);
              if ((*v13 & *(_BYTE *)(*v9 + v92)) == 0)
                goto LABEL_214;
              if (v84 > 0x80)
              {
                if (!__maskrune(v84 - 1, 0x100uLL))
                  goto LABEL_214;
              }
              else if ((*(_DWORD *)(v86 + 4 * v84 + 56) & 0x100) == 0)
              {
                goto LABEL_214;
              }
              if (v91 > 0x7Fu)
              {
                if (__maskrune(v91, 0x8000uLL))
                {
LABEL_224:
                  v94 = __tolower(v91);
                  if ((_DWORD)v91 == (char)v94)
                    goto LABEL_214;
                  goto LABEL_213;
                }
                v93 = __maskrune(v91, 0x1000uLL);
              }
              else
              {
                if ((*(_DWORD *)(v86 + 4 * v92 + 60) & 0x8000) != 0)
                  goto LABEL_224;
                v93 = *(_DWORD *)(v86 + 4 * v92 + 60) & 0x1000;
              }
              if (v93)
              {
                v94 = __toupper(v91);
                if ((_DWORD)v91 == (char)v94)
                  goto LABEL_214;
              }
              else
              {
                v94 = v91;
                if ((_DWORD)v91 == (char)v91)
                  goto LABEL_214;
              }
LABEL_213:
              *(_BYTE *)(*v9 + v94) |= *v13;
              *v14 += v94;
LABEL_214:
              v84 = v91;
              if (v91 + 1 <= 1)
              {
                v83 = *(_QWORD *)(a1 + 56);
                LOBYTE(v11) = v85;
                break;
              }
            }
          }
        }
        if ((v11 & 1) == 0)
        {
          v99 = *(_DWORD *)(v83 + 16);
          if (v99 >= 1)
          {
            v100 = v99 + 1;
            do
            {
              while (1)
              {
                v101 = v100 - 2;
                v102 = *v9;
                v103 = (v100 - 2);
                v104 = *(unsigned __int8 *)(*v9 + v103);
                v105 = *v13;
                if ((v105 & v104) != 0)
                  break;
                *(_BYTE *)(v102 + v103) = v105 | v104;
                *v14 += v101;
                if (--v100 <= 1)
                  goto LABEL_242;
              }
              *(_BYTE *)(v102 + v103) = v104 & ~(_BYTE)v105;
              *v14 -= v101;
              --v100;
            }
            while (v100 > 1);
LABEL_242:
            v83 = *(_QWORD *)(a1 + 56);
          }
          if ((*(_BYTE *)(v83 + 40) & 8) != 0)
          {
            *(_BYTE *)(*v9 + 10) &= ~*v13;
            *v14 -= 10;
            v83 = *(_QWORD *)(a1 + 56);
          }
        }
        v106 = *(_DWORD *)(v83 + 16);
        v107 = v106;
        if (!v106)
        {
          v112 = *(int *)(v83 + 20);
          if ((int)v112 >= 1)
          {
            v113 = *(uint64_t **)(v83 + 24);
            v114 = (unint64_t)&v113[4 * v112];
            while (v113 == v9 || *((unsigned __int8 *)v113 + 9) != *v14)
            {
              v113 += 4;
              if ((unint64_t)v113 >= v114)
                goto LABEL_295;
            }
            v115 = 0;
            goto LABEL_289;
          }
LABEL_295:
          v113 = v9;
          goto LABEL_296;
        }
        v108 = 0;
        v109 = 0;
        v110 = *v9;
        v111 = *v13;
        if (v107 >= 8 && (unint64_t)(v107 - 257) >= 0xFFFFFFFFFFFFFF00)
        {
          if (v107 < 0x20)
          {
            v109 = 0;
            v108 = 0;
LABEL_268:
            v135 = v108;
            v108 = v107 & 0xFFFFFFFFFFFFFFF8;
            v136 = 0uLL;
            v137 = (int32x4_t)v109;
            v138 = vdup_n_s8(v111);
            v139.i64[0] = 0x100000001;
            v139.i64[1] = 0x100000001;
            do
            {
              v140 = vmovl_u8((uint8x8_t)vtst_s8(*(int8x8_t *)(v110 + (v135 & 0xF8)), v138));
              v136 = vaddq_s32(v136, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v140), v139));
              v137 = vaddq_s32(v137, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v140.i8), v139));
              v135 += 8;
            }
            while (v108 != v135);
            v109 = vaddvq_s32(vaddq_s32(v137, v136));
            if (v108 == v107)
              goto LABEL_274;
            goto LABEL_271;
          }
          v117 = 0;
          v118 = vdupq_n_s8(v111);
          v119 = 0uLL;
          v120.i64[0] = 0x100000001;
          v120.i64[1] = 0x100000001;
          v108 = v107 & 0xFFFFFFFFFFFFFFE0;
          v121 = 0uLL;
          v122 = 0uLL;
          v123 = 0uLL;
          v124 = 0uLL;
          v125 = 0uLL;
          v126 = 0uLL;
          v127 = 0uLL;
          do
          {
            v128 = (int8x16_t *)(v110 + (v117 & 0xE0));
            v129 = (uint8x16_t)vtstq_s8(*v128, v118);
            v130 = vmovl_u8(*(uint8x8_t *)v129.i8);
            v131 = vmovl_high_u8(v129);
            v132 = (uint8x16_t)vtstq_s8(v128[1], v118);
            v133 = vmovl_u8(*(uint8x8_t *)v132.i8);
            v134 = vmovl_high_u8(v132);
            v123 = vaddq_s32(v123, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v131), v120));
            v122 = vaddq_s32(v122, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v131.i8), v120));
            v121 = vaddq_s32(v121, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v130), v120));
            v119 = vaddq_s32(v119, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v130.i8), v120));
            v127 = vaddq_s32(v127, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v134), v120));
            v126 = vaddq_s32(v126, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v134.i8), v120));
            v125 = vaddq_s32(v125, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v133), v120));
            v124 = vaddq_s32(v124, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v133.i8), v120));
            v117 += 32;
          }
          while (v108 != v117);
          v109 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v124, v119), vaddq_s32(v126, v122)), vaddq_s32(vaddq_s32(v125, v121), vaddq_s32(v127, v123))));
          if (v108 == v107)
            goto LABEL_274;
          if ((v107 & 0x18) != 0)
            goto LABEL_268;
        }
        do
        {
LABEL_271:
          if ((*(_BYTE *)(v110 + v108) & v111) != 0)
            ++v109;
          ++v108;
        }
        while (v107 != v108);
LABEL_274:
        if (v109 == 1)
        {
          v141 = 0;
          v142 = 0;
          while ((*(_BYTE *)(v110 + v142) & v111) == 0)
          {
            ++v142;
            v141 += 0x1000000;
            if (v107 == v142)
            {
              v143 = 0;
              goto LABEL_306;
            }
          }
          v143 = v141 >> 24;
LABEL_306:
          v151 = *(_QWORD *)(v83 + 88);
          if ((*(_BYTE *)(v83 + 40) & 2) == 0)
            goto LABEL_323;
          if (v143 > 0x7Fu)
          {
            if (!__maskrune(v143, 0x100uLL))
              goto LABEL_323;
            if (!__maskrune(v143, 0x8000uLL))
            {
              v153 = __maskrune(v143, 0x1000uLL);
LABEL_320:
              v154 = v143;
              if (v153)
                v154 = __toupper(v143);
LABEL_322:
              if (v143 != v154)
              {
                bothcases((__n128 *)a1, v143);
                v164 = *(_QWORD *)(a1 + 56);
                v160 = *(int *)(v164 + 16);
                v89 = *(_QWORD *)(v164 + 24) + 32 * *(int *)(v164 + 20);
                if (!(_DWORD)v160)
                {
LABEL_211:
                  if ((uint64_t *)(v89 - 32) == v9)
                    --*(_DWORD *)(*(_QWORD *)(a1 + 56) + 20);
                  return;
                }
LABEL_341:
                for (i = 0; i != v160; ++i)
                {
                  *(_BYTE *)(*v9 + i) &= ~*v13;
                  *v14 -= i;
                }
                goto LABEL_211;
              }
LABEL_323:
              if (*(_DWORD *)(a1 + 16))
              {
                v158 = v143;
                if (*(_BYTE *)(v151 + v143))
                  goto LABEL_325;
                goto LABEL_340;
              }
              v161 = *(_QWORD *)(a1 + 32);
              if (*(_QWORD *)(a1 + 40) >= v161)
              {
                v162 = v161 >= -1 ? v161 + 1 : v161 + 2;
                v163 = (v162 & 0xFFFFFFFFFFFFFFFELL) + (v162 >> 1);
                if (v161 < (uint64_t)v163)
                {
                  if (v163 >> 61)
                  {
LABEL_333:
                    *(_DWORD *)(a1 + 16) = 12;
LABEL_334:
                    *(_QWORD *)a1 = &nuls;
                    *(_QWORD *)(a1 + 8) = &nuls;
                    goto LABEL_339;
                  }
                  v165 = realloc(*(void **)(a1 + 24), 24 * (v162 >> 1));
                  if (!v165)
                  {
                    if (*(_DWORD *)(a1 + 16))
                      goto LABEL_334;
                    goto LABEL_333;
                  }
                  *(_QWORD *)(a1 + 24) = v165;
                  *(_QWORD *)(a1 + 32) = v163;
                }
              }
LABEL_339:
              v166 = *(_QWORD *)(a1 + 24);
              v167 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v167 + 1;
              *(_QWORD *)(v166 + 8 * v167) = v143 | 0x10000000u;
              v158 = v143;
              if (*(_BYTE *)(v151 + v143))
              {
LABEL_325:
                v159 = *(_QWORD *)(a1 + 56);
                v160 = *(int *)(v159 + 16);
                v89 = *(_QWORD *)(v159 + 24) + 32 * *(int *)(v159 + 20);
                if (!(_DWORD)v160)
                  goto LABEL_211;
                goto LABEL_341;
              }
LABEL_340:
              v168 = *(_QWORD *)(a1 + 56);
              v169 = *(_DWORD *)(v168 + 84);
              *(_DWORD *)(v168 + 84) = v169 + 1;
              *(_BYTE *)(v151 + v158) = v169;
              v170 = *(_QWORD *)(a1 + 56);
              v160 = *(int *)(v170 + 16);
              v89 = *(_QWORD *)(v170 + 24) + 32 * *(int *)(v170 + 20);
              if (!(_DWORD)v160)
                goto LABEL_211;
              goto LABEL_341;
            }
          }
          else
          {
            v152 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v143 + 60);
            if ((v152 & 0x100) == 0)
              goto LABEL_323;
            if ((v152 & 0x8000) == 0)
            {
              v153 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v143 + 60) & 0x1000;
              goto LABEL_320;
            }
          }
          v154 = __tolower(v143);
          goto LABEL_322;
        }
        v144 = *(unsigned int *)(v83 + 20);
        if ((int)v144 >= 1)
        {
          v113 = *(uint64_t **)(v83 + 24);
          v114 = (unint64_t)&v113[4 * v144];
          while (v113 == v9 || *((unsigned __int8 *)v113 + 9) != *v14)
          {
LABEL_282:
            v113 += 4;
            if ((unint64_t)v113 >= v114)
              goto LABEL_295;
          }
          v145 = 0;
          while (((*(_BYTE *)(*v113 + v145) & v113[1]) == 0) != ((*(_BYTE *)(*v9 + v145) & *v13) != 0))
          {
            if (v107 == ++v145)
              goto LABEL_288;
          }
          if (v107 != v145)
            goto LABEL_282;
LABEL_288:
          v115 = v107;
LABEL_289:
          if ((_DWORD)v107)
          {
            v146 = 0;
            do
            {
              *(_BYTE *)(*v9 + v146) &= ~*v13;
              *v14 -= v146++;
            }
            while (v115 != v146);
            v83 = *(_QWORD *)(a1 + 56);
          }
          if ((uint64_t *)(v114 - 32) == v9)
            --*(_DWORD *)(v83 + 20);
LABEL_296:
          if (*(_DWORD *)(a1 + 16))
            return;
          v147 = (int)(((uint64_t)v113 - *(_QWORD *)(v83 + 24)) >> 5);
          v148 = *(_QWORD *)(a1 + 32);
          if (*(_QWORD *)(a1 + 40) >= v148)
          {
            v149 = v148 >= -1 ? v148 + 1 : v148 + 2;
            v150 = (v149 & 0xFFFFFFFFFFFFFFFELL) + (v149 >> 1);
            if (v148 < (uint64_t)v150)
            {
              if (v150 >> 61)
                goto LABEL_303;
              v155 = realloc(*(void **)(a1 + 24), 24 * (v149 >> 1));
              if (v155)
              {
                *(_QWORD *)(a1 + 24) = v155;
                *(_QWORD *)(a1 + 32) = v150;
                goto LABEL_318;
              }
              if (!*(_DWORD *)(a1 + 16))
LABEL_303:
                *(_DWORD *)(a1 + 16) = 12;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
          }
LABEL_318:
          v156 = *(_QWORD *)(a1 + 24);
          v157 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v157 + 1;
          *(_QWORD *)(v156 + 8 * v157) = v147 | 0x30000000;
          return;
        }
        goto LABEL_295;
      }
    }
    else
    {
      if (!*(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = 7;
      *(_QWORD *)a1 = &nuls;
      *(_QWORD *)(a1 + 8) = &nuls;
    }
    v87 = *(_QWORD *)(a1 + 56);
    v88 = *(int *)(v87 + 16);
    v89 = *(_QWORD *)(v87 + 24) + 32 * *(int *)(v87 + 20);
    if ((_DWORD)v88)
    {
      for (j = 0; j != v88; ++j)
      {
        *(_BYTE *)(*v9 + j) &= ~*v13;
        *v14 -= j;
      }
    }
    goto LABEL_211;
  }
LABEL_195:
  free(*(void **)(v3 + 24));
  v82 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v82 + 24) = 0;
  free(*(void **)(v82 + 32));
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32) = 0;
  if (!*(_DWORD *)(a1 + 16))
    *(_DWORD *)(a1 + 16) = 12;
  *(_QWORD *)a1 = &nuls;
  *(_QWORD *)(a1 + 8) = &nuls;
}

void ordinary(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  __darwin_ct_rune_t v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  char v20;
  __int16 v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(v4 + 88);
  v6 = a2;
  if ((*(_BYTE *)(v4 + 40) & 2) == 0)
    goto LABEL_13;
  if (a2 > 0x7Fu)
  {
    if (!__maskrune(a2, 0x100uLL))
      goto LABEL_13;
    if (!__maskrune(v6, 0x8000uLL))
    {
      v9 = __maskrune(v6, 0x1000uLL);
      v8 = a2;
      if (!v9)
        goto LABEL_12;
      goto LABEL_11;
    }
LABEL_9:
    v8 = __tolower(v6);
    goto LABEL_12;
  }
  v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60);
  if ((v7 & 0x100) == 0)
    goto LABEL_13;
  if ((v7 & 0x8000) != 0)
    goto LABEL_9;
  v8 = a2;
  if ((v7 & 0x1000) != 0)
LABEL_11:
    v8 = __toupper(v6);
LABEL_12:
  if (a2 != v8)
  {
    v20 = a2;
    v21 = 93;
    v19 = *(_OWORD *)a1;
    *(_QWORD *)a1 = &v20;
    *(_QWORD *)(a1 + 8) = (char *)&v21 + 1;
    p_bracket(a1);
    *(_OWORD *)a1 = v19;
    return;
  }
LABEL_13:
  if (*(_DWORD *)(a1 + 16))
  {
    v10 = a2;
    if (*(_BYTE *)(v5 + a2))
      return;
LABEL_28:
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(_DWORD *)(v17 + 84);
    *(_DWORD *)(v17 + 84) = v18 + 1;
    *(_BYTE *)(v5 + v10) = v18;
    return;
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) >= v11)
  {
    v12 = v11 >= -1 ? v11 + 1 : v11 + 2;
    v13 = (v12 & 0xFFFFFFFFFFFFFFFELL) + (v12 >> 1);
    if (v11 < (uint64_t)v13)
    {
      if (v13 >> 61)
      {
LABEL_22:
        *(_DWORD *)(a1 + 16) = 12;
LABEL_23:
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        goto LABEL_27;
      }
      v14 = realloc(*(void **)(a1 + 24), 24 * (v12 >> 1));
      if (!v14)
      {
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_23;
        goto LABEL_22;
      }
      *(_QWORD *)(a1 + 24) = v14;
      *(_QWORD *)(a1 + 32) = v13;
    }
  }
LABEL_27:
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16 + 1;
  *(_QWORD *)(v15 + 8 * v16) = v6 | 0x10000000u;
  v10 = a2;
  if (!*(_BYTE *)(v5 + a2))
    goto LABEL_28;
}

uint64_t *repeat(uint64_t *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (*((_DWORD *)result + 4))
    return result;
  v7 = result;
  v8 = result[5];
  while (2)
  {
    if ((_DWORD)a4 == 256)
      v9 = 3;
    else
      v9 = 2;
    if ((int)a4 >= 2)
      v10 = v9;
    else
      v10 = a4;
    v11 = v8;
    v12 = a2;
    while (1)
    {
      v13 = v11;
      if (a3 == 256)
        v14 = 3;
      else
        v14 = 2;
      if (a3 < 2)
        v14 = a3;
      v15 = v10 + 8 * v14;
      if (v15 != 19)
        break;
      v16 = v13 - v12;
      if (v13 == v12)
      {
        v11 = v13;
        --a3;
        v12 = v13;
      }
      else
      {
        if (v16 >= 1)
        {
          v17 = v7[4] + v16;
          if (v17 >> 61)
            goto LABEL_21;
          v18 = realloc((void *)v7[3], 8 * v17);
          if (v18)
          {
            v7[3] = (uint64_t)v18;
            v7[4] = v17;
            goto LABEL_25;
          }
          if (!*((_DWORD *)v7 + 4))
LABEL_21:
            *((_DWORD *)v7 + 4) = 12;
          *v7 = (uint64_t)&nuls;
          v7[1] = (uint64_t)&nuls;
        }
LABEL_25:
        result = (uint64_t *)memmove((void *)(v7[3] + 8 * v7[5]), (const void *)(v7[3] + 8 * v12), 8 * v16);
        v8 = v7[5] + v16;
        v7[5] = v8;
        v11 = v8;
        --a3;
        v12 = v13;
        if (*((_DWORD *)v7 + 4))
          return result;
      }
    }
    switch(v15)
    {
      case 0:
        v7[5] = v12;
        return result;
      case 1:
      case 2:
      case 3:
        doinsert(v7, 2013265920, v13 - v12 + 1, v12);
        result = (uint64_t *)repeat(v7, v12 + 1, 1, a4);
        if (*((_DWORD *)v7 + 4))
          return result;
        v43 = v7[4];
        v42 = v7[5];
        v44 = v42 - v12;
        if (v42 < v43
          || (v43 >= -1 ? (v45 = v43 + 1) : (v45 = v43 + 2),
              v46 = (v45 & 0xFFFFFFFFFFFFFFFELL) + (v45 >> 1),
              v43 >= (uint64_t)v46))
        {
          v47 = 0;
        }
        else
        {
          if (v46 >> 61)
          {
LABEL_105:
            v47 = 12;
            *((_DWORD *)v7 + 4) = 12;
LABEL_106:
            *v7 = (uint64_t)&nuls;
            v7[1] = (uint64_t)&nuls;
            goto LABEL_119;
          }
          v61 = realloc((void *)v7[3], 24 * (v45 >> 1));
          if (!v61)
          {
            v47 = *((_DWORD *)v7 + 4);
            if (v47)
              goto LABEL_106;
            goto LABEL_105;
          }
          v7[3] = (uint64_t)v61;
          v7[4] = v46;
          v47 = *((_DWORD *)v7 + 4);
        }
LABEL_119:
        result = (uint64_t *)v7[3];
        v53 = v7[5];
        v7[5] = v53 + 1;
        result[v53] = v44 | 0x80000000;
        if (v47)
          return result;
        result[v12] = result[v12] & 0xF8000000 | (v7[5] - v12);
        v54 = v7[4];
        if (v7[5] < v54
          || (v54 >= -1 ? (v55 = v54 + 1) : (v55 = v54 + 2),
              v56 = (v55 & 0xFFFFFFFFFFFFFFFELL) + (v55 >> 1),
              v54 >= (uint64_t)v56))
        {
          v57 = v7[5];
          v7[5] = v57 + 1;
          result[v57] = 2281701376;
        }
        else
        {
          if (v56 >> 61)
          {
            *((_DWORD *)v7 + 4) = 12;
            *v7 = (uint64_t)&nuls;
            v7[1] = (uint64_t)&nuls;
LABEL_150:
            v66 = v7[5];
            v7[5] = v66 + 1;
            v67 = 2281701376;
LABEL_157:
            result[v66] = v67;
            return result;
          }
          result = (uint64_t *)realloc(result, 24 * (v55 >> 1));
          if (!result)
          {
            if (!*((_DWORD *)v7 + 4))
              *((_DWORD *)v7 + 4) = 12;
            *v7 = (uint64_t)&nuls;
            v7[1] = (uint64_t)&nuls;
            result = (uint64_t *)v7[3];
            goto LABEL_150;
          }
          v7[3] = (uint64_t)result;
          v7[4] = v56;
          v62 = *((_DWORD *)v7 + 4);
          v63 = v7[5];
          v7[5] = v63 + 1;
          result[v63] = 2281701376;
          if (v62)
            return result;
        }
        result[v7[5] - 1] = result[v7[5] - 1] & 0xF8000000 | 1;
        v58 = v7[4];
        if (v7[5] >= v58)
        {
          v59 = v58 >= -1 ? v58 + 1 : v58 + 2;
          v60 = (v59 & 0xFFFFFFFFFFFFFFFELL) + (v59 >> 1);
          if (v58 < (uint64_t)v60)
          {
            if (v60 >> 61)
            {
              *((_DWORD *)v7 + 4) = 12;
              *v7 = (uint64_t)&nuls;
              v7[1] = (uint64_t)&nuls;
            }
            else
            {
              result = (uint64_t *)realloc(result, 24 * (v59 >> 1));
              if (result)
              {
                v7[3] = (uint64_t)result;
                v7[4] = v60;
              }
              else
              {
                if (!*((_DWORD *)v7 + 4))
                  *((_DWORD *)v7 + 4) = 12;
                *v7 = (uint64_t)&nuls;
                v7[1] = (uint64_t)&nuls;
                result = (uint64_t *)v7[3];
              }
            }
          }
        }
        v66 = v7[5];
        v7[5] = v66 + 1;
        v67 = 2415919106;
        goto LABEL_157;
      case 9:
        return result;
      case 10:
        v19 = v13 - v12;
        result = (uint64_t *)doinsert(v7, 2013265920, v13 - v12 + 1, v12);
        a2 = v7[5];
        if (*((_DWORD *)v7 + 4))
          goto LABEL_86;
        v20 = v7[4];
        if (a2 < v20
          || (v20 >= -1 ? (v21 = v20 + 1) : (v21 = v20 + 2),
              v22 = (v21 & 0xFFFFFFFFFFFFFFFELL) + (v21 >> 1),
              v20 >= (uint64_t)v22))
        {
          v23 = 0;
        }
        else
        {
          if (v22 >> 61)
          {
LABEL_37:
            v23 = 12;
            *((_DWORD *)v7 + 4) = 12;
LABEL_38:
            *v7 = (uint64_t)&nuls;
            v7[1] = (uint64_t)&nuls;
            goto LABEL_45;
          }
          v35 = realloc((void *)v7[3], 24 * (v21 >> 1));
          if (!v35)
          {
            v23 = *((_DWORD *)v7 + 4);
            if (v23)
              goto LABEL_38;
            goto LABEL_37;
          }
          v7[3] = (uint64_t)v35;
          v7[4] = v22;
          v23 = *((_DWORD *)v7 + 4);
        }
LABEL_45:
        result = (uint64_t *)v7[3];
        v26 = v7[5];
        v7[5] = v26 + 1;
        result[v26] = (a2 - v12) | 0x80000000;
        a2 = v7[5];
        if (v23)
          goto LABEL_86;
        result[v12] = result[v12] & 0xF8000000 | (a2 - v12);
        v27 = v7[4];
        if (v7[5] < v27
          || (v27 >= -1 ? (v28 = v27 + 1) : (v28 = v27 + 2),
              v29 = (v28 & 0xFFFFFFFFFFFFFFFELL) + (v28 >> 1),
              v27 >= (uint64_t)v29))
        {
          v31 = v7[5];
          v7[5] = v31 + 1;
          result[v31] = 2281701376;
          a2 = v7[5];
        }
        else
        {
          if (v29 >> 61)
          {
            *((_DWORD *)v7 + 4) = 12;
            *v7 = (uint64_t)&nuls;
            v7[1] = (uint64_t)&nuls;
LABEL_80:
            v38 = v7[5];
            v7[5] = v38 + 1;
            v39 = 2281701376;
            goto LABEL_85;
          }
          result = (uint64_t *)realloc(result, 24 * (v28 >> 1));
          if (!result)
          {
            if (!*((_DWORD *)v7 + 4))
              *((_DWORD *)v7 + 4) = 12;
            *v7 = (uint64_t)&nuls;
            v7[1] = (uint64_t)&nuls;
            result = (uint64_t *)v7[3];
            goto LABEL_80;
          }
          v7[3] = (uint64_t)result;
          v7[4] = v29;
          v36 = *((_DWORD *)v7 + 4);
          v37 = v7[5];
          a2 = v37 + 1;
          v7[5] = v37 + 1;
          result[v37] = 2281701376;
          if (v36)
            goto LABEL_86;
        }
        result[a2 - 1] = result[a2 - 1] & 0xF8000000 | 1;
        v32 = v7[4];
        if (v7[5] >= v32)
        {
          v33 = v32 >= -1 ? v32 + 1 : v32 + 2;
          v34 = (v33 & 0xFFFFFFFFFFFFFFFELL) + (v33 >> 1);
          if (v32 < (uint64_t)v34)
          {
            if (v34 >> 61)
            {
              *((_DWORD *)v7 + 4) = 12;
              *v7 = (uint64_t)&nuls;
              v7[1] = (uint64_t)&nuls;
            }
            else
            {
              result = (uint64_t *)realloc(result, 24 * (v33 >> 1));
              if (result)
              {
                v7[3] = (uint64_t)result;
                v7[4] = v34;
              }
              else
              {
                if (!*((_DWORD *)v7 + 4))
                  *((_DWORD *)v7 + 4) = 12;
                *v7 = (uint64_t)&nuls;
                v7[1] = (uint64_t)&nuls;
                result = (uint64_t *)v7[3];
              }
            }
          }
        }
        v38 = v7[5];
        v7[5] = v38 + 1;
        v39 = 2415919106;
LABEL_85:
        result[v38] = v39;
        a2 = v7[5];
LABEL_86:
        if (v13 == v12)
        {
          a3 = 1;
          v8 = a2;
          a4 = (a4 - 1);
          if (!*((_DWORD *)v7 + 4))
            continue;
        }
        else
        {
          if (v19 >= 1)
          {
            v40 = v7[4] + v19;
            if (v40 >> 61 || (v41 = realloc((void *)v7[3], 8 * v40)) == 0)
            {
              if (!*((_DWORD *)v7 + 4))
                *((_DWORD *)v7 + 4) = 12;
              *v7 = (uint64_t)&nuls;
              v7[1] = (uint64_t)&nuls;
            }
            else
            {
              v7[3] = (uint64_t)v41;
              v7[4] = v40;
            }
          }
          result = (uint64_t *)memmove((void *)(v7[3] + 8 * v7[5]), (const void *)(v7[3] + 8 * (v12 + 1)), 8 * v19);
          v8 = v7[5] + v19;
          v7[5] = v8;
          a3 = 1;
          a4 = (a4 - 1);
          if (!*((_DWORD *)v7 + 4))
            continue;
        }
        return result;
      case 11:
        result = (uint64_t *)doinsert(v7, 1207959552, v13 - v12 + 1, v12);
        if (*((_DWORD *)v7 + 4))
          return result;
        v49 = v7[4];
        v48 = v7[5];
        v50 = v48 - v12;
        if (v48 < v49)
          goto LABEL_144;
        v51 = v49 >= -1 ? v49 + 1 : v49 + 2;
        v52 = (v51 & 0xFFFFFFFFFFFFFFFELL) + (v51 >> 1);
        if (v49 >= (uint64_t)v52)
          goto LABEL_144;
        if (v52 >> 61)
          goto LABEL_115;
        result = (uint64_t *)realloc((void *)v7[3], 24 * (v51 >> 1));
        if (result)
        {
          v7[3] = (uint64_t)result;
          v7[4] = v52;
        }
        else
        {
          if (!*((_DWORD *)v7 + 4))
LABEL_115:
            *((_DWORD *)v7 + 4) = 12;
          *v7 = (uint64_t)&nuls;
          v7[1] = (uint64_t)&nuls;
        }
LABEL_144:
        v64 = v7[3];
        v65 = v7[5];
        v7[5] = v65 + 1;
        *(_QWORD *)(v64 + 8 * v65) = v50 | 0x50000000;
        return result;
      case 18:
        v24 = v13 - v12;
        if (v13 == v12)
          goto LABEL_56;
        if (v24 < 1)
          goto LABEL_55;
        v25 = v7[4] + v24;
        if (v25 >> 61)
          goto LABEL_42;
        v30 = realloc((void *)v7[3], 8 * v25);
        if (v30)
        {
          v7[3] = (uint64_t)v30;
          v7[4] = v25;
        }
        else
        {
          if (!*((_DWORD *)v7 + 4))
LABEL_42:
            *((_DWORD *)v7 + 4) = 12;
          *v7 = (uint64_t)&nuls;
          v7[1] = (uint64_t)&nuls;
        }
LABEL_55:
        result = (uint64_t *)memmove((void *)(v7[3] + 8 * v7[5]), (const void *)(v7[3] + 8 * v12), 8 * v24);
        v8 = v7[5] + v24;
        v7[5] = v8;
LABEL_56:
        --a3;
        a2 = v13;
        a4 = (a4 - 1);
        if (!*((_DWORD *)v7 + 4))
          continue;
        return result;
      default:
        *((_DWORD *)v7 + 4) = 15;
        *v7 = (uint64_t)&nuls;
        v7[1] = (uint64_t)&nuls;
        return result;
    }
  }
}

uint64_t p_b_symbol(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  const char *v10;
  char **v11;
  char v12;
  char *v14;
  int v15;

  v2 = *(char **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 - *(_QWORD *)a1 < 1)
  {
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 7;
    v2 = &nuls;
    *(_QWORD *)a1 = &nuls;
    *(_QWORD *)(a1 + 8) = &nuls;
    goto LABEL_16;
  }
  v4 = v3 - (_QWORD)v2;
  if (v3 - (uint64_t)v2 <= 1 || *v2 != 91 || v2[1] != 46)
  {
LABEL_16:
    *(_QWORD *)a1 = v2 + 1;
    return *v2;
  }
  v5 = v2 + 2;
  *(_QWORD *)a1 = v2 + 2;
  if (v3 - (uint64_t)(v2 + 2) < 1)
  {
LABEL_23:
    if (*(_DWORD *)(a1 + 16))
      goto LABEL_26;
    v15 = 7;
  }
  else
  {
    v6 = 0;
    v7 = -2;
    while (1)
    {
      v8 = &v2[v6];
      if (v4 - 3 != v6 && v8[2] == 46 && v2[v6 + 3] == 93)
        break;
      *(_QWORD *)a1 = v8 + 3;
      ++v6;
      --v7;
      if (v4 + v7 <= 0)
        goto LABEL_23;
    }
    v9 = &v2[v6 + 2];
    v10 = "NUL";
    v11 = &off_1E0E569C8;
    do
    {
      if (!strncmp(v10, v5, v6) && strlen(v10) == v6)
      {
        v12 = *((_BYTE *)v11 - 8);
        if (v3 - (uint64_t)v9 <= 1)
          goto LABEL_32;
LABEL_27:
        if (*v9 == 46 && v9[1] == 93)
        {
          *(_QWORD *)a1 = v9 + 2;
          return v12;
        }
        goto LABEL_32;
      }
      v14 = *v11;
      v11 += 2;
      v10 = v14;
    }
    while (v14);
    if (v6 == 1)
    {
      v12 = *v5;
      if (v3 - (uint64_t)v9 <= 1)
        goto LABEL_32;
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 16))
      goto LABEL_26;
    v15 = 3;
  }
  *(_DWORD *)(a1 + 16) = v15;
LABEL_26:
  v12 = 0;
  *(_QWORD *)a1 = &nuls;
  *(_QWORD *)(a1 + 8) = &nuls;
LABEL_32:
  if (!*(_DWORD *)(a1 + 16))
    *(_DWORD *)(a1 + 16) = 3;
  *(_QWORD *)a1 = &nuls;
  *(_QWORD *)(a1 + 8) = &nuls;
  return v12;
}

__n128 bothcases(__n128 *a1, char a2)
{
  __n128 result;
  __n128 v4;
  char v5;
  __int16 v6;

  v5 = a2;
  v6 = 93;
  v4 = *a1;
  a1->n128_u64[0] = (unint64_t)&v5;
  a1->n128_u64[1] = (unint64_t)&v6 + 1;
  p_bracket();
  result = v4;
  *a1 = v4;
  return result;
}

size_t llvm_regerror(int a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  const char *v6;
  char *v7;
  int *v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  uint64_t v16;
  char __str[50];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1 == 255)
  {
    v6 = *(const char **)(a2 + 16);
    if (!strcmp("REG_NOMATCH", v6))
    {
      v12 = 1;
    }
    else if (!strcmp("REG_BADPAT", v6))
    {
      v12 = 2;
    }
    else if (!strcmp("REG_ECOLLATE", v6))
    {
      v12 = 3;
    }
    else if (!strcmp("REG_ECTYPE", v6))
    {
      v12 = 4;
    }
    else if (!strcmp("REG_EESCAPE", v6))
    {
      v12 = 5;
    }
    else if (!strcmp("REG_ESUBREG", v6))
    {
      v12 = 6;
    }
    else if (!strcmp("REG_EBRACK", v6))
    {
      v12 = 7;
    }
    else if (!strcmp("REG_EPAREN", v6))
    {
      v12 = 8;
    }
    else if (!strcmp("REG_EBRACE", v6))
    {
      v12 = 9;
    }
    else if (!strcmp("REG_BADBR", v6))
    {
      v12 = 10;
    }
    else if (!strcmp("REG_ERANGE", v6))
    {
      v12 = 11;
    }
    else if (!strcmp("REG_ESPACE", v6))
    {
      v12 = 12;
    }
    else if (!strcmp("REG_BADRPT", v6))
    {
      v12 = 13;
    }
    else if (!strcmp("REG_EMPTY", v6))
    {
      v12 = 14;
    }
    else if (!strcmp("REG_ASSERT", v6))
    {
      v12 = 15;
    }
    else
    {
      if (strcmp("REG_INVARG", v6))
      {
        v7 = "0";
        goto LABEL_48;
      }
      v12 = 16;
    }
    v16 = v12;
    v13 = "%d";
  }
  else
  {
    v8 = &rerrs;
    do
    {
      v10 = *v8;
      v8 += 6;
      v9 = v10;
      if (v10)
        v11 = v9 == (a1 & 0xFFFFFEFF);
      else
        v11 = 1;
    }
    while (!v11);
    if ((a1 & 0x100) == 0)
    {
      v7 = (char *)*((_QWORD *)v8 - 1);
      goto LABEL_48;
    }
    if (v9)
    {
      v7 = __str;
      llvm_strlcpy(__str, *((_QWORD *)v8 - 2), 50);
      goto LABEL_48;
    }
    v16 = a1 & 0xFFFFFEFF;
    v13 = "REG_0x%x";
  }
  v7 = __str;
  snprintf(__str, 0x32uLL, v13, v16);
LABEL_48:
  v14 = strlen(v7);
  if (a4)
    llvm_strlcpy(a3, (unint64_t)v7, a4);
  return v14 + 1;
}

uint64_t llvm_regexec(uint64_t a1, char *__s, unint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v5;
  int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  unsigned __int8 *v24;
  char *v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  int64_t v30;
  unsigned __int8 *v31;
  char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;
  int64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  int v52;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 *v66;
  _QWORD *v67;
  unint64_t j;
  __int128 v69;
  char *v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  _BYTE *v74;
  char *v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v84;
  int v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  __int128 *v98;
  _QWORD *v99;
  unint64_t i;
  __int128 v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  int __dst;
  int __dsta;
  char *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void *v124[2];
  __int128 v125;
  char *v126;

  if (*(_DWORD *)a1 != 62053)
    return 2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)v5 != 53829 || (*(_BYTE *)(v5 + 72) & 4) != 0)
    return 2;
  v8 = a5 & 7;
  v9 = *(_QWORD *)(v5 + 48);
  if (v9 > 64)
  {
    v19 = *(_QWORD *)(v5 + 56);
    v18 = *(_QWORD *)(v5 + 64);
    if ((*(_BYTE *)(v5 + 40) & 4) != 0)
      v20 = 0;
    else
      v20 = a3;
    if ((a5 & 4) != 0)
    {
      v21 = a4[1];
      v22 = &__s[*a4];
      v23 = &__s[v21];
      if (&__s[v21] < v22)
        return 16;
    }
    else
    {
      v21 = strlen(__s);
      v22 = __s;
      v23 = &__s[v21];
      if (&__s[v21] < __s)
        return 16;
    }
    v121 = 0u;
    v122 = 0u;
    v120 = 0u;
    v31 = *(unsigned __int8 **)(v5 + 96);
    v118 = v23;
    v108 = a4;
    if (v31)
    {
      v32 = v22;
      if (v22 < v23)
      {
        v105 = v19;
        __dsta = v8;
        v112 = v20;
        v33 = v5;
        v34 = *v31;
        v35 = (char *)(__s - v22 + v21);
        v102 = &__s[v21];
        v36 = (char *)(&__s[v21] - v22);
        v32 = v22;
        do
        {
          if (*v32 == v34)
          {
            v37 = *(int *)(v33 + 104);
            if ((uint64_t)v36 >= v37 && !memcmp(v32, v31, v37))
              goto LABEL_150;
          }
          ++v32;
          --v36;
          --v35;
        }
        while (v35);
        v32 = v102;
LABEL_150:
        v5 = v33;
        v20 = v112;
        v23 = v118;
        v8 = __dsta;
        v19 = v105;
      }
      if (v32 == v23)
        return 1;
    }
    v119 = v5;
    LODWORD(v120) = v8;
    *(_QWORD *)&v121 = __s;
    *((_QWORD *)&v121 + 1) = v22;
    *(_QWORD *)&v123 = 0;
    *(_QWORD *)&v122 = v23;
    v70 = (char *)malloc(4 * v9);
    v124[0] = v70;
    if (!v70)
      return 12;
    v71 = v19 + 1;
    *(_QWORD *)&v125 = &v70[v9];
    *((_QWORD *)&v125 + 1) = &v70[2 * v9];
    v124[1] = v70;
    *((_QWORD *)&v123 + 1) = 4;
    v126 = &v70[3 * v9];
    bzero(v126, v9);
    v110 = v5;
    v114 = v20;
LABEL_155:
    if (*((char **)&v121 + 1) == v22)
      v72 = 128;
    else
      v72 = *(v22 - 1);
    v73 = v125;
    v74 = v124[1];
    bzero(v124[1], *(_QWORD *)(v119 + 48));
    v74[v71] = 1;
    lstep(v119, v71, v18, (uint64_t)v74, 132, (uint64_t)v74);
    memmove((void *)v73, v74, *(_QWORD *)(v119 + 48));
    v75 = 0;
    if (v22 != (char *)v122)
    {
LABEL_159:
      v76 = *v22;
      goto LABEL_161;
    }
    while (1)
    {
      v76 = 128;
LABEL_161:
      v77 = v119;
      if (!memcmp(v74, (const void *)v73, *(_QWORD *)(v119 + 48)))
        v75 = v22;
      if (v72 == 128)
      {
        if ((v120 & 1) != 0)
          goto LABEL_166;
      }
      else if (v72 != 10 || (*(_BYTE *)(v77 + 40) & 8) == 0)
      {
LABEL_166:
        v78 = 0;
        v79 = 0;
        v80 = 130;
        if (v76 == 128)
          goto LABEL_173;
        goto LABEL_167;
      }
      v79 = *(_DWORD *)(v77 + 76);
      v78 = 129;
      v80 = 131;
      if (v76 == 128)
      {
LABEL_173:
        if ((v120 & 2) == 0)
          goto LABEL_169;
        goto LABEL_174;
      }
LABEL_167:
      if (v76 == 10 && (*(_BYTE *)(v77 + 40) & 8) != 0)
      {
LABEL_169:
        v79 += *(_DWORD *)(v77 + 80);
        if (v79 < 1)
          goto LABEL_177;
        goto LABEL_175;
      }
LABEL_174:
      v80 = v78;
      if (v79 < 1)
        goto LABEL_177;
LABEL_175:
      v81 = v79 + 1;
      do
      {
        lstep(v119, v71, v18, (uint64_t)v74, v80, (uint64_t)v74);
        --v81;
      }
      while (v81 > 1);
LABEL_177:
      if (v80 == 129)
      {
        if (v76 == 128)
        {
          v80 = 129;
          if (v72 == 128)
            goto LABEL_211;
        }
        else
        {
LABEL_188:
          if (v76 > 0x7Fu)
          {
            v84 = __maskrune(v76, 0x500uLL);
            if (v76 == 95 || v84 != 0)
              v80 = 133;
            if (v72 == 128)
              goto LABEL_211;
          }
          else
          {
            if (v76 == 95 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v76 + 60) & 0x500) != 0)
              v80 = 133;
            if (v72 == 128)
              goto LABEL_211;
          }
        }
        v82 = v72;
        goto LABEL_203;
      }
      if (v72 == 128)
        goto LABEL_211;
      v82 = v72;
      if (v72 > 0x7Fu)
      {
        if (__maskrune(v72, 0x500uLL))
          goto LABEL_203;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v72 + 60) & 0x500) != 0)
      {
        goto LABEL_203;
      }
      if (v72 != 95 && v76 != 128)
        goto LABEL_188;
LABEL_203:
      if (v82 > 0x7F)
      {
        if (!__maskrune(v82, 0x500uLL))
        {
LABEL_207:
          if (v72 != 95)
            goto LABEL_211;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v82 + 60) & 0x500) == 0)
      {
        goto LABEL_207;
      }
      if (v80 == 130
        || v76 != 128
        && (v76 > 0x7Fu
          ? (v86 = __maskrune(v76, 0x500uLL))
          : (v86 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v76 + 60) & 0x500),
            !v86 && v76 != 95))
      {
        v80 = 134;
LABEL_212:
        lstep(v119, v71, v18, (uint64_t)v74, v80, (uint64_t)v74);
        goto LABEL_213;
      }
LABEL_211:
      if ((v80 - 133) <= 1)
        goto LABEL_212;
LABEL_213:
      if (v22 == v118 || v74[v18])
      {
        *((_QWORD *)&v122 + 1) = v75;
        if (!v74[v18])
        {
          free(*((void **)&v120 + 1));
          free((void *)v123);
          v16 = 1;
          goto LABEL_261;
        }
        if (!v114 && !*(_DWORD *)(v110 + 120))
          goto LABEL_256;
        v87 = lslow(&v119, v75, v118, v71, v18);
        if (!v87)
        {
          do
          {
            ++*((_QWORD *)&v122 + 1);
            v88 = lslow(&v119, *((char **)&v122 + 1), v118, v71, v18);
          }
          while (!v88);
          v87 = v88;
        }
        if (v114 == 1 && !*(_DWORD *)(v110 + 120))
          goto LABEL_251;
        v89 = (char *)*((_QWORD *)&v120 + 1);
        v90 = *(_QWORD *)(v119 + 112);
        if (!*((_QWORD *)&v120 + 1))
        {
          v89 = (char *)malloc(16 * v90 + 16);
          *((_QWORD *)&v120 + 1) = v89;
          if (!v89)
          {
            v16 = 12;
            goto LABEL_261;
          }
        }
        if (v90)
        {
          v91 = 2;
          if ((unint64_t)(v90 + 1) > 2)
            v91 = v90 + 1;
          memset(v89 + 16, 255, 16 * v91 - 16);
        }
        if (*(_DWORD *)(v110 + 120) || (BYTE1(v120) & 4) != 0)
        {
          v93 = *(_QWORD *)(v110 + 128);
          v94 = (void *)v123;
          if (v93 >= 1 && !(_QWORD)v123)
          {
            v94 = malloc(8 * v93 + 8);
            *(_QWORD *)&v123 = v94;
          }
          if (v93 < 1 || v94)
          {
            v92 = lbackref(&v119, *((_BYTE **)&v122 + 1), v87, v71, v18, 0, 0);
            goto LABEL_246;
          }
          free(v89);
          v16 = 12;
          goto LABEL_261;
        }
        v92 = (uint64_t)ldissect(&v119, *((char **)&v122 + 1), v87, v71, v18);
LABEL_246:
        if (v92)
          goto LABEL_250;
        while (1)
        {
          v95 = (char *)*((_QWORD *)&v122 + 1);
          if ((unint64_t)v87 <= *((_QWORD *)&v122 + 1))
            break;
          v87 = lslow(&v119, *((char **)&v122 + 1), v87 - 1, v71, v18);
          v95 = (char *)*((_QWORD *)&v122 + 1);
          if (!v87)
            break;
          if (lbackref(&v119, *((_BYTE **)&v122 + 1), v87, v71, v18, 0, 0))
            goto LABEL_250;
        }
        v22 = v95 + 1;
        if (v95 == v118)
        {
LABEL_250:
          if (v114)
          {
LABEL_251:
            v96 = &v87[-v121];
            *v108 = *((_QWORD *)&v122 + 1) - v121;
            v108[1] = v96;
            if (v114 >= 2)
            {
              v97 = v119;
              v98 = (__int128 *)(*((_QWORD *)&v120 + 1) + 16);
              v99 = v108 + 2;
              for (i = 1; i != v114; ++i)
              {
                while (i > *(_QWORD *)(v97 + 112))
                {
                  *v99 = -1;
                  v99[1] = -1;
                  v99 += 2;
                  ++i;
                  ++v98;
                  if (v114 == i)
                    goto LABEL_256;
                }
                v101 = *v98++;
                *(_OWORD *)v99 = v101;
                v99 += 2;
              }
            }
          }
LABEL_256:
          if (*((_QWORD *)&v120 + 1))
            free(*((void **)&v120 + 1));
          if ((_QWORD)v123)
            free((void *)v123);
          v16 = 0;
LABEL_261:
          free(v124[0]);
          return v16;
        }
        goto LABEL_155;
      }
      memmove(*((void **)&v73 + 1), v74, *(_QWORD *)(v119 + 48));
      memmove(v74, (const void *)v73, *(_QWORD *)(v119 + 48));
      lstep(v119, v71, v18, *((uint64_t *)&v73 + 1), v76, (uint64_t)v74);
      ++v22;
      v72 = v76;
      if (v22 != (char *)v122)
        goto LABEL_159;
    }
  }
  v11 = *(_QWORD *)(v5 + 56);
  v10 = *(_QWORD *)(v5 + 64);
  if ((*(_BYTE *)(v5 + 40) & 4) != 0)
    v12 = 0;
  else
    v12 = a3;
  if ((a5 & 4) == 0)
  {
    v13 = strlen(__s);
    v14 = __s;
    v15 = &__s[v13];
    if (&__s[v13] >= __s)
      goto LABEL_20;
    return 16;
  }
  v13 = a4[1];
  v14 = &__s[*a4];
  v15 = &__s[v13];
  if (&__s[v13] < v14)
    return 16;
LABEL_20:
  v107 = a4;
  v122 = 0u;
  v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  v24 = *(unsigned __int8 **)(v5 + 96);
  v117 = v15;
  if (v24)
  {
    v25 = v14;
    if (v14 < v15)
    {
      v111 = v11;
      __dst = v8;
      v26 = v5;
      v27 = *v24;
      v28 = (char *)(__s - v14 + v13);
      v104 = &__s[v13];
      v29 = (char *)(&__s[v13] - v14);
      v25 = v14;
      while (1)
      {
        if (*v25 == v27)
        {
          v30 = *(int *)(v26 + 104);
          if ((uint64_t)v29 >= v30 && !memcmp(v25, v24, v30))
            break;
        }
        ++v25;
        --v29;
        if (!--v28)
        {
          v25 = v104;
          break;
        }
      }
      v5 = v26;
      v15 = v117;
      v8 = __dst;
      v11 = v111;
    }
    if (v25 == v15)
      return 1;
  }
  v38 = v11 + 1;
  v119 = v5;
  LODWORD(v120) = v8;
  *(_QWORD *)&v121 = __s;
  *((_QWORD *)&v121 + 1) = v14;
  *(_QWORD *)&v122 = v15;
  v103 = v12;
  v106 = 1 << (v11 + 1);
  *(_OWORD *)v124 = 0u;
  v125 = 0u;
  v109 = v5;
  while (2)
  {
    if (*((char **)&v121 + 1) == v14)
      v39 = 128;
    else
      v39 = *(v14 - 1);
    v40 = v119;
    v41 = sstep(v119, v38, v10, v106, 132, v106);
    v42 = 0;
    v43 = v41;
    v113 = v41;
    if (v14 != (char *)v122)
    {
LABEL_47:
      v44 = *v14;
      if (v43 == v41)
        v42 = v14;
      if (v39 == 128)
        goto LABEL_107;
LABEL_50:
      if (v39 == 10 && (*(_BYTE *)(v40 + 40) & 8) != 0)
        goto LABEL_108;
LABEL_52:
      v45 = 0;
      v46 = 0;
      v47 = 130;
      if (v44 == 128)
        goto LABEL_109;
LABEL_53:
      if (v44 != 10 || (*(_BYTE *)(v40 + 40) & 8) == 0)
        goto LABEL_57;
LABEL_55:
      v46 += *(_DWORD *)(v40 + 80);
      v48 = v42;
      if (v46 >= 1)
      {
LABEL_58:
        v49 = v46 + 1;
        do
        {
          v43 = sstep(v40, v38, v10, v43, v47, v43);
          --v49;
        }
        while (v49 > 1);
      }
      goto LABEL_60;
    }
    while (1)
    {
      v44 = 128;
      if (v43 == v41)
        v42 = v14;
      if (v39 != 128)
        goto LABEL_50;
LABEL_107:
      if ((v120 & 1) != 0)
        goto LABEL_52;
LABEL_108:
      v46 = *(_DWORD *)(v40 + 76);
      v45 = 129;
      v47 = 131;
      if (v44 != 128)
        goto LABEL_53;
LABEL_109:
      if ((v120 & 2) == 0)
        goto LABEL_55;
LABEL_57:
      v47 = v45;
      v48 = v42;
      if (v46 >= 1)
        goto LABEL_58;
LABEL_60:
      if (v47 == 129)
      {
        v42 = v48;
        if (v44 == 128)
        {
          v47 = 129;
          if (v39 == 128)
            goto LABEL_99;
        }
        else
        {
LABEL_71:
          if (v44 > 0x7Fu)
          {
            v52 = __maskrune(v44, 0x500uLL);
            if (v44 == 95 || v52 != 0)
              v47 = 133;
            if (v39 == 128)
              goto LABEL_99;
          }
          else
          {
            if (v44 == 95 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v44 + 60) & 0x500) != 0)
              v47 = 133;
            if (v39 == 128)
              goto LABEL_99;
          }
        }
        v50 = v39;
        goto LABEL_86;
      }
      v42 = v48;
      if (v39 == 128)
        goto LABEL_99;
      v50 = v39;
      if (v39 > 0x7Fu)
      {
        if (__maskrune(v39, 0x500uLL))
          goto LABEL_86;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v39 + 60) & 0x500) != 0)
      {
        goto LABEL_86;
      }
      if (v39 != 95 && v44 != 128)
        goto LABEL_71;
LABEL_86:
      if (v50 > 0x7F)
      {
        if (__maskrune(v50, 0x500uLL))
          goto LABEL_91;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v50 + 60) & 0x500) != 0)
      {
        goto LABEL_91;
      }
      if (v39 != 95)
        goto LABEL_99;
LABEL_91:
      if (v47 == 130)
        goto LABEL_92;
      if (v44 != 128)
      {
        if (v44 > 0x7Fu)
        {
          if (__maskrune(v44, 0x500uLL))
            goto LABEL_99;
        }
        else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v44 + 60) & 0x500) != 0)
        {
          goto LABEL_99;
        }
        if (v44 != 95)
        {
LABEL_92:
          v47 = 134;
LABEL_100:
          v43 = sstep(v119, v38, v10, v43, v47, v43);
          goto LABEL_101;
        }
      }
LABEL_99:
      if ((v47 - 133) <= 1)
        goto LABEL_100;
LABEL_101:
      v54 = v43 & (1 << v10);
      if (v14 == v117 || v54)
        break;
      v40 = v119;
      v41 = v113;
      v43 = sstep(v119, v38, v10, v43, v44, v113);
      ++v14;
      v39 = v44;
      if (v14 != (char *)v122)
        goto LABEL_47;
    }
    *((_QWORD *)&v122 + 1) = v42;
    if (!v54)
    {
      free(*((void **)&v120 + 1));
      free((void *)v123);
      return 1;
    }
    if (!v103 && !*(_DWORD *)(v109 + 120))
      goto LABEL_144;
    v55 = sslow(&v119, v42, v117, v38, v10);
    if (!v55)
    {
      do
      {
        ++*((_QWORD *)&v122 + 1);
        v56 = sslow(&v119, *((char **)&v122 + 1), v117, v38, v10);
      }
      while (!v56);
      v55 = v56;
    }
    if (v103 == 1 && !*(_DWORD *)(v109 + 120))
      goto LABEL_139;
    v57 = (char *)*((_QWORD *)&v120 + 1);
    v58 = *(_QWORD *)(v119 + 112);
    if (!*((_QWORD *)&v120 + 1))
    {
      v57 = (char *)malloc(16 * v58 + 16);
      *((_QWORD *)&v120 + 1) = v57;
      if (!v57)
        return 12;
    }
    if (v58)
    {
      v59 = 2;
      if ((unint64_t)(v58 + 1) > 2)
        v59 = v58 + 1;
      memset(v57 + 16, 255, 16 * v59 - 16);
    }
    if (*(_DWORD *)(v109 + 120) || (BYTE1(v120) & 4) != 0)
    {
      v61 = *(_QWORD *)(v109 + 128);
      v62 = (void *)v123;
      if (v61 >= 1 && !(_QWORD)v123)
      {
        v62 = malloc(8 * v61 + 8);
        *(_QWORD *)&v123 = v62;
      }
      if (v61 >= 1 && !v62)
      {
        free(v57);
        return 12;
      }
      v60 = sbackref(&v119, *((_BYTE **)&v122 + 1), v55, v38, v10, 0, 0);
    }
    else
    {
      v60 = (uint64_t)sdissect(&v119, *((char **)&v122 + 1), v55, v38, v10);
    }
    if (!v60)
    {
      while (1)
      {
        v63 = (char *)*((_QWORD *)&v122 + 1);
        if ((unint64_t)v55 <= *((_QWORD *)&v122 + 1))
          break;
        v55 = sslow(&v119, *((char **)&v122 + 1), v55 - 1, v38, v10);
        v63 = (char *)*((_QWORD *)&v122 + 1);
        if (!v55)
          break;
        if (sbackref(&v119, *((_BYTE **)&v122 + 1), v55, v38, v10, 0, 0))
          goto LABEL_138;
      }
      v14 = v63 + 1;
      if (v63 != v117)
        continue;
    }
    break;
  }
LABEL_138:
  if (!v103)
    goto LABEL_144;
LABEL_139:
  v64 = &v55[-v121];
  *v107 = *((_QWORD *)&v122 + 1) - v121;
  v107[1] = v64;
  if (v103 >= 2)
  {
    v65 = v119;
    v66 = (__int128 *)(*((_QWORD *)&v120 + 1) + 16);
    v67 = v107 + 2;
    for (j = 1; j != v103; ++j)
    {
      while (j > *(_QWORD *)(v65 + 112))
      {
        *v67 = -1;
        v67[1] = -1;
        v67 += 2;
        ++j;
        ++v66;
        if (v103 == j)
          goto LABEL_144;
      }
      v69 = *v66++;
      *(_OWORD *)v67 = v69;
      v67 += 2;
    }
  }
LABEL_144:
  if (*((_QWORD *)&v120 + 1))
    free(*((void **)&v120 + 1));
  if ((_QWORD)v123)
    free((void *)v123);
  return 0;
}

char *sslow(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  char *v11;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  unint64_t v26;
  uint64_t v27;

  v6 = a4;
  if (a4 >= a5)
    goto LABEL_15;
  while (1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v6);
    v9 = v8 & 0xF8000000;
    if ((v8 & 0xF8000000) == 0x70000000 || v9 == 1744830464)
      goto LABEL_4;
    if (v9 != 0x10000000)
      goto LABEL_15;
    if (a2 == a3 || *a2 != (char)v8)
      return 0;
    ++a2;
LABEL_4:
    if (a5 == ++v6)
    {
      v6 = a5;
LABEL_15:
      v26 = a1[12];
      if (a2 == (char *)a1[4])
        v13 = 128;
      else
        v13 = *(a2 - 1);
      v14 = *a1;
      v15 = sstep(*a1, v6, a5, 1 << v6, 132, 1 << v6);
      v11 = 0;
      v27 = 1 << a5;
      v16 = a1;
      if (a2 == (char *)a1[5])
        goto LABEL_73;
LABEL_19:
      v17 = *a2;
      if (v13 != 128)
      {
LABEL_20:
        if (v13 == 10 && (*(_BYTE *)(v14 + 40) & 8) != 0)
          goto LABEL_75;
LABEL_22:
        v18 = 0;
        v19 = 0;
        v20 = 130;
        if (v17 == 128)
          goto LABEL_76;
LABEL_23:
        if (v17 != 10 || (*(_BYTE *)(v14 + 40) & 8) == 0)
          goto LABEL_27;
LABEL_25:
        v19 += *(_DWORD *)(v14 + 80);
        if (v19 >= 1)
        {
LABEL_28:
          v21 = v19 + 1;
          do
          {
            v15 = sstep(v14, v6, a5, v15, v20, v15);
            --v21;
          }
          while (v21 > 1);
        }
        goto LABEL_30;
      }
      while (1)
      {
        if ((v16[1] & 1) != 0)
          goto LABEL_22;
LABEL_75:
        v19 = *(_DWORD *)(v14 + 76);
        v18 = 129;
        v20 = 131;
        if (v17 != 128)
          goto LABEL_23;
LABEL_76:
        if ((v16[1] & 2) == 0)
          goto LABEL_25;
LABEL_27:
        v20 = v18;
        if (v19 >= 1)
          goto LABEL_28;
LABEL_30:
        if (v20 == 129)
        {
          v16 = a1;
          if (v17 == 128)
          {
            v20 = 129;
            if (v13 == 128)
              goto LABEL_61;
          }
          else
          {
LABEL_41:
            if (v17 > 0x7Fu)
            {
              v24 = __maskrune(v17, 0x500uLL);
              if (v17 == 95 || v24 != 0)
                v20 = 133;
              if (v13 == 128)
                goto LABEL_61;
            }
            else
            {
              if (v17 == 95 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v17 + 60) & 0x500) != 0)
                v20 = 133;
              if (v13 == 128)
                goto LABEL_61;
            }
          }
          v22 = v13;
          goto LABEL_56;
        }
        v16 = a1;
        if (v13 == 128)
          goto LABEL_61;
        v22 = v13;
        if (v13 > 0x7Fu)
        {
          if (__maskrune(v13, 0x500uLL))
            goto LABEL_56;
        }
        else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v13 + 60) & 0x500) != 0)
        {
          goto LABEL_56;
        }
        if (v13 != 95 && v17 != 128)
          goto LABEL_41;
LABEL_56:
        if (v22 > 0x7F)
        {
          if (__maskrune(v22, 0x500uLL))
            goto LABEL_66;
        }
        else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v22 + 60) & 0x500) != 0)
        {
          goto LABEL_66;
        }
        if (v13 != 95)
          goto LABEL_61;
LABEL_66:
        if (v20 == 130)
          goto LABEL_67;
        if (v17 != 128)
        {
          if (v17 > 0x7Fu)
          {
            if (__maskrune(v17, 0x500uLL))
              goto LABEL_61;
          }
          else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v17 + 60) & 0x500) != 0)
          {
            goto LABEL_61;
          }
          if (v17 != 95)
          {
LABEL_67:
            v20 = 134;
            goto LABEL_68;
          }
        }
LABEL_61:
        if ((v20 - 133) > 1)
        {
          if ((v15 & v27) != 0)
            v11 = a2;
          if (a2 == a3)
            return v11;
          goto LABEL_71;
        }
LABEL_68:
        v15 = sstep(*v16, v6, a5, v15, v20, v15);
        if ((v15 & v27) != 0)
          v11 = a2;
        if (a2 == a3)
          return v11;
LABEL_71:
        if (v15 == v26)
          return v11;
        v14 = *v16;
        v15 = sstep(*v16, v6, a5, v15, v17, v26);
        ++a2;
        v13 = v17;
        if (a2 != (char *)v16[5])
          goto LABEL_19;
LABEL_73:
        v17 = 128;
        if (v13 != 128)
          goto LABEL_20;
      }
    }
  }
}

char *sdissect(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char *v38;
  char *v39;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  if (a4 >= a5)
    return a2;
  v6 = a5;
  v7 = a4;
  v10 = a5 - 1;
  while (2)
  {
    v11 = v7;
    v12 = *(_QWORD *)(*a1 + 8);
    v13 = *(_QWORD *)(v12 + 8 * v7);
    v14 = v13 & 0xF8000000;
    if ((v13 & 0xF8000000) == 0x48000000 || v14 == 1476395008)
    {
      v16 = (v13 & 0x7FFFFFF) + v7;
    }
    else
    {
      v17 = v14 != 2013265920 || (v13 & 0xF8000000) == 2415919104;
      v16 = v7;
      if (!v17)
      {
        v18 = *(_QWORD *)(v12 + 8 * v7);
        v16 = v7;
        do
        {
          v16 += v18 & 0x7FFFFFF;
          v18 = *(_QWORD *)(v12 + 8 * v16);
        }
        while ((v18 & 0xF8000000) != 0x90000000);
      }
    }
    v7 = v16 + 1;
    switch(((unint64_t)(v13 & 0xF8000000) - 0x8000000) >> 27)
    {
      case 1uLL:
      case 4uLL:
      case 5uLL:
        ++a2;
        goto LABEL_4;
      case 8uLL:
        v19 = sslow(a1, a2, a3, v11, v16 + 1);
        if (sslow(a1, v19, a3, v16 + 1, v6) == a3)
          goto LABEL_78;
        while (2)
        {
          v21 = v19 - 1;
          if (v7 >= v6)
            goto LABEL_21;
          v22 = (_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v16 + 16);
          v23 = v16;
          while (1)
          {
            v24 = *((_DWORD *)v22 - 2);
            if ((v24 & 0xF8000000) != 0x70000000)
              break;
            ++v22;
            if (v10 == ++v23)
              goto LABEL_21;
          }
          if ((v24 & 0xF8000000) != 0x10000000)
            goto LABEL_21;
          v20 = a2;
          if (v21 == a2)
            goto LABEL_22;
          v25 = v23 + 2;
          v26 = (char)v24;
          if (v25 >= v6)
          {
            while ((char)v24 != *v21)
            {
              if (--v21 == a2)
              {
LABEL_34:
                v20 = a2;
                goto LABEL_22;
              }
            }
LABEL_21:
            v20 = v21;
            goto LABEL_22;
          }
          v27 = v19;
          while (2)
          {
            if (v26 != *(v27 - 1))
              goto LABEL_35;
            if ((*v22 & 0xF8000000) == 0x10000000 && v27 < v19)
            {
              if (*v27 == (char)*v22)
                goto LABEL_21;
LABEL_35:
              --v21;
              v28 = v27 - 2;
              --v27;
              if (v28 == a2)
                goto LABEL_34;
              continue;
            }
            break;
          }
          v20 = v27 - 1;
LABEL_22:
          v19 = sslow(a1, a2, v20, v11, v16 + 1);
          if (sslow(a1, v19, a3, v16 + 1, v6) != a3)
            continue;
          break;
        }
LABEL_78:
        v50 = v11 + 1;
        v51 = a2;
        do
        {
          v52 = v51;
          v51 = a2;
          v53 = sslow(a1, a2, v19, v50, v16);
          a2 = v53;
        }
        while (v53 && v53 != v51);
        if (v53)
          v54 = v51;
        else
          v54 = v52;
        if (v53)
          v55 = v53;
        else
          v55 = v51;
        sdissect(a1, v54, v55, v50, v16);
        a2 = v19;
        v6 = a5;
        goto LABEL_4;
      case 0xAuLL:
        v30 = sslow(a1, a2, a3, v11, v16 + 1);
        if (sslow(a1, v30, a3, v16 + 1, v6) == a3)
          goto LABEL_88;
        break;
      case 0xCuLL:
        *(_QWORD *)(a1[2] + 16 * (v13 & 0x7FFFFFF)) = &a2[-a1[3]];
        goto LABEL_4;
      case 0xDuLL:
        *(_QWORD *)(a1[2] + 16 * (v13 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
        goto LABEL_4;
      case 0xEuLL:
        v41 = a3;
        do
        {
          v42 = sslow(a1, a2, v41, v11, v7);
          v43 = sslow(a1, v42, a3, v7, v6);
          v41 = v42 - 1;
        }
        while (v43 != a3);
        v44 = v11 + (*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v11) & 0x7FFFFFFLL) - 1;
        v45 = v11 + 1;
        while (sslow(a1, a2, v42, v45, v44) != v42)
        {
          v46 = *(_QWORD *)(*a1 + 8);
          v47 = *(_QWORD *)(v46 + 8 * (v44 + 1)) & 0x7FFFFFFLL;
          v48 = v47 + v44 + 1;
          v49 = v47 + v44;
          v45 = v44 + 2;
          if ((*(_QWORD *)(v46 + 8 * v48) & 0xF8000000) == 0x88000000)
            v44 = v49;
          else
            v44 = v48;
        }
        sdissect(a1, a2, v42, v45, v44);
        a2 = v42;
        goto LABEL_4;
      default:
        goto LABEL_4;
    }
    while (2)
    {
      v32 = v30 - 1;
      if (v7 >= v6)
        goto LABEL_46;
      v33 = (_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v16 + 16);
      v34 = v16;
      while (1)
      {
        v35 = *((_DWORD *)v33 - 2);
        if ((v35 & 0xF8000000) != 0x70000000)
          break;
        ++v33;
        if (v10 == ++v34)
          goto LABEL_46;
      }
      if ((v35 & 0xF8000000) != 0x10000000)
      {
LABEL_46:
        v31 = v32;
        goto LABEL_47;
      }
      v31 = a2;
      if (v32 == a2)
        goto LABEL_47;
      v36 = v34 + 2;
      v37 = (char)v35;
      if (v36 >= v6)
      {
        while ((char)v35 != *v32)
        {
          if (--v32 == a2)
          {
LABEL_59:
            v31 = a2;
            goto LABEL_47;
          }
        }
        goto LABEL_46;
      }
      v38 = v30;
      while (1)
      {
        if (v37 != *(v38 - 1))
          goto LABEL_60;
        if ((*v33 & 0xF8000000) != 0x10000000 || v38 >= v30)
          break;
        if (*v38 == (char)*v33)
          goto LABEL_46;
LABEL_60:
        --v32;
        v39 = v38 - 2;
        --v38;
        if (v39 == a2)
          goto LABEL_59;
      }
      v31 = v38 - 1;
LABEL_47:
      v30 = sslow(a1, a2, v31, v11, v16 + 1);
      if (sslow(a1, v30, a3, v16 + 1, v6) != a3)
        continue;
      break;
    }
LABEL_88:
    v56 = v11 + 1;
    if (sslow(a1, a2, v30, v56, v16))
      sdissect(a1, a2, v30, v56, v16);
    a2 = v30;
LABEL_4:
    if (v7 < v6)
      continue;
    return a2;
  }
}

uint64_t sbackref(uint64_t *a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (a4 < a5)
  {
    v12 = a4;
    while (1)
    {
LABEL_3:
      v14 = v12;
      while (2)
      {
        v15 = *a1;
        v16 = *(_QWORD *)(*a1 + 8);
        v17 = *(_QWORD *)(v16 + 8 * v14);
        switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
        {
          case 0uLL:
            if (a2 == a3)
              return 0;
            v26 = (char)*a2++;
            if (v26 != (char)v17)
              return 0;
            goto LABEL_5;
          case 1uLL:
            if (a2 == (_BYTE *)a1[4] && (a1[1] & 1) == 0)
              goto LABEL_5;
            if ((unint64_t)a2 >= a1[5] || *(a2 - 1) != 10)
              return 0;
            goto LABEL_4;
          case 2uLL:
            v27 = (_BYTE *)a1[5];
            if (a2 == v27 && (a1[1] & 2) == 0)
              goto LABEL_5;
            if (a2 >= v27 || *a2 != 10)
              return 0;
LABEL_4:
            if ((*(_BYTE *)(v15 + 40) & 8) != 0)
              goto LABEL_5;
            return 0;
          case 3uLL:
            if (a2 == a3)
              return 0;
            ++a2;
            goto LABEL_5;
          case 4uLL:
            if (a2 == a3)
              return 0;
            v28 = *(_QWORD *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
            v29 = *a2++;
            if ((*(_BYTE *)(v28 + 8) & *(_BYTE *)(*(_QWORD *)v28 + v29)) == 0)
              return 0;
            goto LABEL_5;
          case 0xAuLL:
          case 0x10uLL:
            goto LABEL_5;
          case 0xEuLL:
            ++v14;
            v30 = *(_QWORD *)(v16 + 8 * v14);
            do
            {
              v14 += v30 & 0x7FFFFFF;
              v30 = *(_QWORD *)(v16 + 8 * v14);
            }
            while ((v30 & 0xF8000000) != 0x90000000);
            goto LABEL_5;
          case 0x11uLL:
            v31 = (_BYTE *)a1[4];
            if (a2 == v31 && (a1[1] & 1) == 0
              || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(_BYTE *)(v15 + 40) & 8) != 0)
            {
              goto LABEL_61;
            }
            if (a2 <= v31)
              return 0;
            v32 = *(a2 - 1);
            if ((char)*(a2 - 1) < 0)
              v33 = __maskrune(*(a2 - 1), 0x500uLL);
            else
              v33 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v32 + 60) & 0x500;
            result = 0;
            if ((_DWORD)v32 == 95 || v33)
              return result;
LABEL_61:
            if ((unint64_t)a2 >= a1[5])
              return 0;
            v37 = (char)*a2;
            v38 = *a2;
            if ((v37 & 0x80000000) == 0)
              goto LABEL_63;
            goto LABEL_69;
          case 0x12uLL:
            v34 = (_BYTE *)a1[5];
            if (a2 == v34 && (a1[1] & 2) == 0)
              goto LABEL_67;
            if (a2 >= v34)
              return 0;
            v35 = *a2;
            if ((_DWORD)v35 == 10)
            {
              if ((*(_BYTE *)(v15 + 40) & 8) != 0)
                goto LABEL_67;
LABEL_56:
              v36 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v35 + 60) & 0x500;
              result = 0;
              if ((_DWORD)v35 == 95)
                return result;
              goto LABEL_66;
            }
            if ((v35 & 0x80) == 0)
              goto LABEL_56;
            v36 = __maskrune(*a2, 0x500uLL);
            result = 0;
            if ((_DWORD)v35 == 95)
              return result;
LABEL_66:
            if (v36)
              return result;
LABEL_67:
            if ((unint64_t)a2 <= a1[4])
              return 0;
            v37 = (char)*(a2 - 1);
            v38 = *(a2 - 1);
            if (v37 < 0)
            {
LABEL_69:
              v39 = __maskrune(v37, 0x500uLL);
              if ((_DWORD)v38 == 95)
                goto LABEL_5;
            }
            else
            {
LABEL_63:
              v39 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v38 + 60) & 0x500;
              if ((_DWORD)v38 == 95)
                goto LABEL_5;
            }
            if (!v39)
              return 0;
LABEL_5:
            ++v14;
            goto LABEL_6;
          default:
            v12 = v14 + 1;
            v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
            if (v18 == 4)
            {
              result = sbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
              if (result)
                return result;
              v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_6:
              if (v14 >= a5)
                goto LABEL_79;
              continue;
            }
            result = 0;
            switch(v18)
            {
              case 0uLL:
                v20 = v17 & 0x7FFFFFF;
                v21 = a1[2];
                v22 = *(_QWORD *)(v21 + 16 * v20 + 8);
                if (v22 == -1)
                  return 0;
                v23 = *(_QWORD *)(v21 + 16 * v20);
                v24 = v22 - v23;
                if (v22 != v23)
                  goto LABEL_16;
                if ((int)a7 > 100)
                  return 0;
                a7 = (a7 + 1);
LABEL_16:
                if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24))
                  return 0;
                do
                  v25 = *(_QWORD *)(v16 + 8 * v14++);
                while (v25 != (v20 | 0x40000000));
                a2 += v24;
                goto LABEL_6;
              case 2uLL:
                ++a6;
                *(_QWORD *)(a1[7] + 8 * a6) = a2;
                if (v12 >= a5)
                  goto LABEL_79;
                goto LABEL_3;
              case 3uLL:
                v40 = a1[7];
                if (a2 == *(_BYTE **)(v40 + 8 * a6))
                {
                  --a6;
                  if (v12 >= a5)
                    goto LABEL_79;
                }
                else
                {
                  *(_QWORD *)(v40 + 8 * a6) = a2;
                  result = sbackref(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
                  if (result)
                    return result;
                  --a6;
                  if (v12 >= a5)
                    goto LABEL_79;
                }
                break;
              case 6uLL:
                v41 = 16 * (v17 & 0x7FFFFFF);
                v42 = a1[2];
                v43 = *(_QWORD *)(v42 + v41);
                *(_QWORD *)(v42 + v41) = &a2[-a1[3]];
                result = sbackref(a1, a2, a3, v12, a5, a6, a7);
                if (!result)
                  *(_QWORD *)(a1[2] + v41) = v43;
                return result;
              case 7uLL:
                v44 = v17 & 0x7FFFFFF;
                v45 = a1[2] + 16 * v44;
                v46 = *(_QWORD *)(v45 + 8);
                *(_QWORD *)(v45 + 8) = &a2[-a1[3]];
                result = sbackref(a1, a2, a3, v12, a5, a6, a7);
                if (!result)
                  *(_QWORD *)(a1[2] + 16 * v44 + 8) = v46;
                return result;
              case 8uLL:
                result = sbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
                if (result)
                  return result;
                v47 = v14 + (v17 & 0x7FFFFFF) - 1;
                while (1)
                {
                  v48 = *(_QWORD *)(*a1 + 8);
                  if ((*(_QWORD *)(v48 + 8 * v47) & 0xF8000000) == 0x90000000)
                    break;
                  v49 = v47 + 2;
                  v50 = *(_QWORD *)(v48 + 8 * (v47 + 1)) & 0x7FFFFFFLL;
                  v51 = v50 + v47 + 1;
                  v52 = v50 + v47;
                  if ((*(_QWORD *)(v48 + 8 * v51) & 0xF8000000) == 0x88000000)
                    v47 = v52;
                  else
                    v47 = v51;
                  result = sbackref(a1, a2, a3, v49, a5, a6, a7);
                  if (result)
                    return result;
                }
                return 0;
              default:
                return result;
            }
            break;
        }
        break;
      }
    }
  }
LABEL_79:
  if (a2 == a3)
    return (uint64_t)a2;
  else
    return 0;
}

unint64_t sstep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 != a3)
  {
    v6 = 1 << a2;
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * a2);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          v8 = a5 == (char)v9;
          goto LABEL_4;
        case 2uLL:
          v8 = (a5 & 0xFFFFFFFD) == 129;
          goto LABEL_4;
        case 3uLL:
          v8 = (a5 & 0xFFFFFFFE) == 130;
          goto LABEL_4;
        case 4uLL:
          if (a5 <= 127)
            a6 |= 2 * (v6 & a4);
          break;
        case 5uLL:
          if (a5 > 127)
            break;
          v11 = *(_QWORD *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
          if ((*(_BYTE *)(v11 + 8) & *(_BYTE *)(*(_QWORD *)v11 + a5)) == 0)
            break;
          v10 = v6 & a4;
LABEL_10:
          a6 |= 2 * v10;
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          v10 = v6 & a6;
          goto LABEL_10;
        case 9uLL:
          v12 = a6 | (2 * (v6 & a6));
          v13 = (v6 >> v9) & v12;
          a6 = ((v12 & v6) >> v9) | v12;
          if (v13)
            v14 = 1;
          else
            v14 = (a6 & (v6 >> v9)) == 0;
          if (!v14)
          {
            a2 += ~(unint64_t)(v9 & 0x7FFFFFF);
            v6 = 1 << a2;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          a6 |= 2 * (v6 & a6);
          goto LABEL_12;
        case 0xFuLL:
          if ((v6 & a6) != 0)
          {
            v15 = *(_QWORD *)(v7 + 8 * a2 + 8);
            if ((v15 & 0xF8000000) == 0x90000000)
            {
              LOBYTE(v16) = 1;
            }
            else
            {
              v16 = 1;
              do
              {
                v16 += v15 & 0x7FFFFFF;
                v15 = *(_QWORD *)(v7 + 8 * (v16 + a2));
              }
              while ((v15 & 0xF8000000) != 0x90000000);
            }
            a6 |= (v6 & a6) << v16;
          }
          break;
        case 0x10uLL:
          a6 |= 2 * (v6 & a6);
          v9 &= 0x7FFFFFFu;
          if ((*(_QWORD *)(v7 + 8 * (v9 + a2)) & 0xF8000000) != 0x90000000)
LABEL_12:
            a6 |= (a6 & v6) << v9;
          break;
        case 0x12uLL:
          v8 = a5 == 133;
          goto LABEL_4;
        case 0x13uLL:
          v8 = a5 == 134;
LABEL_4:
          if (v8)
            a6 |= 2 * (v6 & a4);
          break;
        default:
          break;
      }
      ++a2;
      v6 *= 2;
    }
    while (a2 != a3);
  }
  return a6;
}

char *lslow(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v9;
  int v10;
  char *v12;
  void *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  const void *v25;
  size_t v26;
  int v27;
  void *__dst;
  void *__s2;

  v6 = a4;
  if (a4 >= a5)
    goto LABEL_15;
  while (1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v6);
    v10 = v9 & 0xF8000000;
    if ((v9 & 0xF8000000) == 0x70000000 || v10 == 1744830464)
      goto LABEL_4;
    if (v10 != 0x10000000)
      goto LABEL_15;
    if (a2 == a3 || *a2 != (char)v9)
      return 0;
    ++a2;
LABEL_4:
    if (a5 == ++v6)
    {
      v6 = a5;
LABEL_15:
      v14 = (void *)a1[10];
      __dst = (void *)a1[12];
      __s2 = (void *)a1[13];
      if (a2 == (char *)a1[4])
        v15 = 128;
      else
        v15 = *(a2 - 1);
      bzero(v14, *(_QWORD *)(*a1 + 48));
      *((_BYTE *)v14 + v6) = 1;
      lstep(*a1, v6, a5, (uint64_t)v14, 132, (uint64_t)v14);
      v12 = 0;
      if (a2 == (char *)a1[5])
        goto LABEL_76;
LABEL_19:
      v16 = *a2;
      if (v15 != 128)
      {
LABEL_20:
        if (v15 == 10 && (*(_BYTE *)(*a1 + 40) & 8) != 0)
        {
          v17 = *(_DWORD *)(*a1 + 76);
          v18 = 129;
          v19 = 131;
          if (v16 != 128)
            goto LABEL_27;
        }
        else
        {
LABEL_26:
          v18 = 0;
          v17 = 0;
          v19 = 130;
          if (v16 != 128)
            goto LABEL_27;
        }
LABEL_23:
        if ((a1[1] & 2) == 0)
        {
          v17 += *(_DWORD *)(*a1 + 80);
          if (v17 >= 1)
          {
LABEL_32:
            v20 = v17 + 1;
            do
            {
              lstep(*a1, v6, a5, (uint64_t)v14, v19, (uint64_t)v14);
              --v20;
            }
            while (v20 > 1);
          }
          goto LABEL_34;
        }
LABEL_29:
        v19 = v18;
        if (v17 >= 1)
          goto LABEL_32;
        goto LABEL_34;
      }
      while (1)
      {
        if ((a1[1] & 1) != 0)
          goto LABEL_26;
        v17 = *(_DWORD *)(*a1 + 76);
        v18 = 129;
        v19 = 131;
        if (v16 == 128)
          goto LABEL_23;
LABEL_27:
        if (v16 != 10 || (*(_BYTE *)(*a1 + 40) & 8) == 0)
          goto LABEL_29;
        v17 += *(_DWORD *)(*a1 + 80);
        if (v17 >= 1)
          goto LABEL_32;
LABEL_34:
        if (v19 == 129)
        {
          if (v16 == 128)
          {
            v19 = 129;
            if (v15 == 128)
              goto LABEL_65;
          }
          else
          {
LABEL_45:
            if (v16 > 0x7Fu)
            {
              v23 = __maskrune(v16, 0x500uLL);
              if (v16 == 95 || v23 != 0)
                v19 = 133;
              if (v15 == 128)
              {
LABEL_65:
                v25 = __s2;
LABEL_66:
                if ((v19 - 133) > 1)
                  goto LABEL_71;
                goto LABEL_70;
              }
            }
            else
            {
              if (v16 == 95 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v16 + 60) & 0x500) != 0)
                v19 = 133;
              if (v15 == 128)
                goto LABEL_65;
            }
          }
          v21 = v15;
          goto LABEL_60;
        }
        if (v15 == 128)
          goto LABEL_65;
        v21 = v15;
        if (v15 > 0x7Fu)
        {
          if (__maskrune(v15, 0x500uLL))
            goto LABEL_60;
        }
        else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v15 + 60) & 0x500) != 0)
        {
          goto LABEL_60;
        }
        if (v15 != 95 && v16 != 128)
          goto LABEL_45;
LABEL_60:
        if (v21 > 0x7F)
        {
          if (__maskrune(v21, 0x500uLL))
            goto LABEL_68;
        }
        else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v21 + 60) & 0x500) != 0)
        {
          goto LABEL_68;
        }
        if (v15 != 95)
          goto LABEL_65;
LABEL_68:
        if (v19 == 130)
        {
          v19 = 134;
          v25 = __s2;
        }
        else
        {
          v25 = __s2;
          if (v16 == 128)
            goto LABEL_66;
          if (v16 > 0x7Fu)
          {
            if (__maskrune(v16, 0x500uLL))
              goto LABEL_66;
          }
          else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v16 + 60) & 0x500) != 0)
          {
            goto LABEL_66;
          }
          if (v16 == 95)
            goto LABEL_66;
          v19 = 134;
        }
LABEL_70:
        lstep(*a1, v6, a5, (uint64_t)v14, v19, (uint64_t)v14);
LABEL_71:
        if (*((_BYTE *)v14 + a5))
          v12 = a2;
        v26 = *(_QWORD *)(*a1 + 48);
        v27 = memcmp(v14, v25, v26);
        if (a2 == a3 || !v27)
          return v12;
        memmove(__dst, v14, v26);
        memmove(v14, v25, *(_QWORD *)(*a1 + 48));
        lstep(*a1, v6, a5, (uint64_t)__dst, v16, (uint64_t)v14);
        ++a2;
        v15 = v16;
        if (a2 != (char *)a1[5])
          goto LABEL_19;
LABEL_76:
        v16 = 128;
        if (v15 != 128)
          goto LABEL_20;
      }
    }
  }
}

char *ldissect(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char *v38;
  char *v39;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  if (a4 >= a5)
    return a2;
  v6 = a5;
  v7 = a4;
  v10 = a5 - 1;
  while (2)
  {
    v11 = v7;
    v12 = *(_QWORD *)(*a1 + 8);
    v13 = *(_QWORD *)(v12 + 8 * v7);
    v14 = v13 & 0xF8000000;
    if ((v13 & 0xF8000000) == 0x48000000 || v14 == 1476395008)
    {
      v16 = (v13 & 0x7FFFFFF) + v7;
    }
    else
    {
      v17 = v14 != 2013265920 || (v13 & 0xF8000000) == 2415919104;
      v16 = v7;
      if (!v17)
      {
        v18 = *(_QWORD *)(v12 + 8 * v7);
        v16 = v7;
        do
        {
          v16 += v18 & 0x7FFFFFF;
          v18 = *(_QWORD *)(v12 + 8 * v16);
        }
        while ((v18 & 0xF8000000) != 0x90000000);
      }
    }
    v7 = v16 + 1;
    switch(((unint64_t)(v13 & 0xF8000000) - 0x8000000) >> 27)
    {
      case 1uLL:
      case 4uLL:
      case 5uLL:
        ++a2;
        goto LABEL_4;
      case 8uLL:
        v19 = lslow(a1, a2, a3, v11, v16 + 1);
        if (lslow(a1, v19, a3, v16 + 1, v6) == a3)
          goto LABEL_78;
        while (2)
        {
          v21 = v19 - 1;
          if (v7 >= v6)
            goto LABEL_21;
          v22 = (_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v16 + 16);
          v23 = v16;
          while (1)
          {
            v24 = *((_DWORD *)v22 - 2);
            if ((v24 & 0xF8000000) != 0x70000000)
              break;
            ++v22;
            if (v10 == ++v23)
              goto LABEL_21;
          }
          if ((v24 & 0xF8000000) != 0x10000000)
            goto LABEL_21;
          v20 = a2;
          if (v21 == a2)
            goto LABEL_22;
          v25 = v23 + 2;
          v26 = (char)v24;
          if (v25 >= v6)
          {
            while ((char)v24 != *v21)
            {
              if (--v21 == a2)
              {
LABEL_34:
                v20 = a2;
                goto LABEL_22;
              }
            }
LABEL_21:
            v20 = v21;
            goto LABEL_22;
          }
          v27 = v19;
          while (2)
          {
            if (v26 != *(v27 - 1))
              goto LABEL_35;
            if ((*v22 & 0xF8000000) == 0x10000000 && v27 < v19)
            {
              if (*v27 == (char)*v22)
                goto LABEL_21;
LABEL_35:
              --v21;
              v28 = v27 - 2;
              --v27;
              if (v28 == a2)
                goto LABEL_34;
              continue;
            }
            break;
          }
          v20 = v27 - 1;
LABEL_22:
          v19 = lslow(a1, a2, v20, v11, v16 + 1);
          if (lslow(a1, v19, a3, v16 + 1, v6) != a3)
            continue;
          break;
        }
LABEL_78:
        v50 = v11 + 1;
        v51 = a2;
        do
        {
          v52 = v51;
          v51 = a2;
          v53 = lslow(a1, a2, v19, v50, v16);
          a2 = v53;
        }
        while (v53 && v53 != v51);
        if (v53)
          v54 = v51;
        else
          v54 = v52;
        if (v53)
          v55 = v53;
        else
          v55 = v51;
        ldissect(a1, v54, v55, v50, v16);
        a2 = v19;
        v6 = a5;
        goto LABEL_4;
      case 0xAuLL:
        v30 = lslow(a1, a2, a3, v11, v16 + 1);
        if (lslow(a1, v30, a3, v16 + 1, v6) == a3)
          goto LABEL_88;
        break;
      case 0xCuLL:
        *(_QWORD *)(a1[2] + 16 * (v13 & 0x7FFFFFF)) = &a2[-a1[3]];
        goto LABEL_4;
      case 0xDuLL:
        *(_QWORD *)(a1[2] + 16 * (v13 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
        goto LABEL_4;
      case 0xEuLL:
        v41 = a3;
        do
        {
          v42 = lslow(a1, a2, v41, v11, v7);
          v43 = lslow(a1, v42, a3, v7, v6);
          v41 = v42 - 1;
        }
        while (v43 != a3);
        v44 = v11 + (*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v11) & 0x7FFFFFFLL) - 1;
        v45 = v11 + 1;
        while (lslow(a1, a2, v42, v45, v44) != v42)
        {
          v46 = *(_QWORD *)(*a1 + 8);
          v47 = *(_QWORD *)(v46 + 8 * (v44 + 1)) & 0x7FFFFFFLL;
          v48 = v47 + v44 + 1;
          v49 = v47 + v44;
          v45 = v44 + 2;
          if ((*(_QWORD *)(v46 + 8 * v48) & 0xF8000000) == 0x88000000)
            v44 = v49;
          else
            v44 = v48;
        }
        ldissect(a1, a2, v42, v45, v44);
        a2 = v42;
        goto LABEL_4;
      default:
        goto LABEL_4;
    }
    while (2)
    {
      v32 = v30 - 1;
      if (v7 >= v6)
        goto LABEL_46;
      v33 = (_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v16 + 16);
      v34 = v16;
      while (1)
      {
        v35 = *((_DWORD *)v33 - 2);
        if ((v35 & 0xF8000000) != 0x70000000)
          break;
        ++v33;
        if (v10 == ++v34)
          goto LABEL_46;
      }
      if ((v35 & 0xF8000000) != 0x10000000)
      {
LABEL_46:
        v31 = v32;
        goto LABEL_47;
      }
      v31 = a2;
      if (v32 == a2)
        goto LABEL_47;
      v36 = v34 + 2;
      v37 = (char)v35;
      if (v36 >= v6)
      {
        while ((char)v35 != *v32)
        {
          if (--v32 == a2)
          {
LABEL_59:
            v31 = a2;
            goto LABEL_47;
          }
        }
        goto LABEL_46;
      }
      v38 = v30;
      while (1)
      {
        if (v37 != *(v38 - 1))
          goto LABEL_60;
        if ((*v33 & 0xF8000000) != 0x10000000 || v38 >= v30)
          break;
        if (*v38 == (char)*v33)
          goto LABEL_46;
LABEL_60:
        --v32;
        v39 = v38 - 2;
        --v38;
        if (v39 == a2)
          goto LABEL_59;
      }
      v31 = v38 - 1;
LABEL_47:
      v30 = lslow(a1, a2, v31, v11, v16 + 1);
      if (lslow(a1, v30, a3, v16 + 1, v6) != a3)
        continue;
      break;
    }
LABEL_88:
    v56 = v11 + 1;
    if (lslow(a1, a2, v30, v56, v16))
      ldissect(a1, a2, v30, v56, v16);
    a2 = v30;
LABEL_4:
    if (v7 < v6)
      continue;
    return a2;
  }
}

uint64_t lbackref(uint64_t *a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (a4 < a5)
  {
    v12 = a4;
    while (1)
    {
LABEL_3:
      v14 = v12;
      while (2)
      {
        v15 = *a1;
        v16 = *(_QWORD *)(*a1 + 8);
        v17 = *(_QWORD *)(v16 + 8 * v14);
        switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
        {
          case 0uLL:
            if (a2 == a3)
              return 0;
            v26 = (char)*a2++;
            if (v26 != (char)v17)
              return 0;
            goto LABEL_5;
          case 1uLL:
            if (a2 == (_BYTE *)a1[4] && (a1[1] & 1) == 0)
              goto LABEL_5;
            if ((unint64_t)a2 >= a1[5] || *(a2 - 1) != 10)
              return 0;
            goto LABEL_4;
          case 2uLL:
            v27 = (_BYTE *)a1[5];
            if (a2 == v27 && (a1[1] & 2) == 0)
              goto LABEL_5;
            if (a2 >= v27 || *a2 != 10)
              return 0;
LABEL_4:
            if ((*(_BYTE *)(v15 + 40) & 8) != 0)
              goto LABEL_5;
            return 0;
          case 3uLL:
            if (a2 == a3)
              return 0;
            ++a2;
            goto LABEL_5;
          case 4uLL:
            if (a2 == a3)
              return 0;
            v28 = *(_QWORD *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
            v29 = *a2++;
            if ((*(_BYTE *)(v28 + 8) & *(_BYTE *)(*(_QWORD *)v28 + v29)) == 0)
              return 0;
            goto LABEL_5;
          case 0xAuLL:
          case 0x10uLL:
            goto LABEL_5;
          case 0xEuLL:
            ++v14;
            v30 = *(_QWORD *)(v16 + 8 * v14);
            do
            {
              v14 += v30 & 0x7FFFFFF;
              v30 = *(_QWORD *)(v16 + 8 * v14);
            }
            while ((v30 & 0xF8000000) != 0x90000000);
            goto LABEL_5;
          case 0x11uLL:
            v31 = (_BYTE *)a1[4];
            if (a2 == v31 && (a1[1] & 1) == 0
              || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(_BYTE *)(v15 + 40) & 8) != 0)
            {
              goto LABEL_61;
            }
            if (a2 <= v31)
              return 0;
            v32 = *(a2 - 1);
            if ((char)*(a2 - 1) < 0)
              v33 = __maskrune(*(a2 - 1), 0x500uLL);
            else
              v33 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v32 + 60) & 0x500;
            result = 0;
            if ((_DWORD)v32 == 95 || v33)
              return result;
LABEL_61:
            if ((unint64_t)a2 >= a1[5])
              return 0;
            v37 = (char)*a2;
            v38 = *a2;
            if ((v37 & 0x80000000) == 0)
              goto LABEL_63;
            goto LABEL_69;
          case 0x12uLL:
            v34 = (_BYTE *)a1[5];
            if (a2 == v34 && (a1[1] & 2) == 0)
              goto LABEL_67;
            if (a2 >= v34)
              return 0;
            v35 = *a2;
            if ((_DWORD)v35 == 10)
            {
              if ((*(_BYTE *)(v15 + 40) & 8) != 0)
                goto LABEL_67;
LABEL_56:
              v36 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v35 + 60) & 0x500;
              result = 0;
              if ((_DWORD)v35 == 95)
                return result;
              goto LABEL_66;
            }
            if ((v35 & 0x80) == 0)
              goto LABEL_56;
            v36 = __maskrune(*a2, 0x500uLL);
            result = 0;
            if ((_DWORD)v35 == 95)
              return result;
LABEL_66:
            if (v36)
              return result;
LABEL_67:
            if ((unint64_t)a2 <= a1[4])
              return 0;
            v37 = (char)*(a2 - 1);
            v38 = *(a2 - 1);
            if (v37 < 0)
            {
LABEL_69:
              v39 = __maskrune(v37, 0x500uLL);
              if ((_DWORD)v38 == 95)
                goto LABEL_5;
            }
            else
            {
LABEL_63:
              v39 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v38 + 60) & 0x500;
              if ((_DWORD)v38 == 95)
                goto LABEL_5;
            }
            if (!v39)
              return 0;
LABEL_5:
            ++v14;
            goto LABEL_6;
          default:
            v12 = v14 + 1;
            v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
            if (v18 == 4)
            {
              result = lbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
              if (result)
                return result;
              v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_6:
              if (v14 >= a5)
                goto LABEL_79;
              continue;
            }
            result = 0;
            switch(v18)
            {
              case 0uLL:
                v20 = v17 & 0x7FFFFFF;
                v21 = a1[2];
                v22 = *(_QWORD *)(v21 + 16 * v20 + 8);
                if (v22 == -1)
                  return 0;
                v23 = *(_QWORD *)(v21 + 16 * v20);
                v24 = v22 - v23;
                if (v22 != v23)
                  goto LABEL_16;
                if ((int)a7 > 100)
                  return 0;
                a7 = (a7 + 1);
LABEL_16:
                if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24))
                  return 0;
                do
                  v25 = *(_QWORD *)(v16 + 8 * v14++);
                while (v25 != (v20 | 0x40000000));
                a2 += v24;
                goto LABEL_6;
              case 2uLL:
                ++a6;
                *(_QWORD *)(a1[7] + 8 * a6) = a2;
                if (v12 >= a5)
                  goto LABEL_79;
                goto LABEL_3;
              case 3uLL:
                v40 = a1[7];
                if (a2 == *(_BYTE **)(v40 + 8 * a6))
                {
                  --a6;
                  if (v12 >= a5)
                    goto LABEL_79;
                }
                else
                {
                  *(_QWORD *)(v40 + 8 * a6) = a2;
                  result = lbackref(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
                  if (result)
                    return result;
                  --a6;
                  if (v12 >= a5)
                    goto LABEL_79;
                }
                break;
              case 6uLL:
                v41 = 16 * (v17 & 0x7FFFFFF);
                v42 = a1[2];
                v43 = *(_QWORD *)(v42 + v41);
                *(_QWORD *)(v42 + v41) = &a2[-a1[3]];
                result = lbackref(a1, a2, a3, v12, a5, a6, a7);
                if (!result)
                  *(_QWORD *)(a1[2] + v41) = v43;
                return result;
              case 7uLL:
                v44 = v17 & 0x7FFFFFF;
                v45 = a1[2] + 16 * v44;
                v46 = *(_QWORD *)(v45 + 8);
                *(_QWORD *)(v45 + 8) = &a2[-a1[3]];
                result = lbackref(a1, a2, a3, v12, a5, a6, a7);
                if (!result)
                  *(_QWORD *)(a1[2] + 16 * v44 + 8) = v46;
                return result;
              case 8uLL:
                result = lbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
                if (result)
                  return result;
                v47 = v14 + (v17 & 0x7FFFFFF) - 1;
                while (1)
                {
                  v48 = *(_QWORD *)(*a1 + 8);
                  if ((*(_QWORD *)(v48 + 8 * v47) & 0xF8000000) == 0x90000000)
                    break;
                  v49 = v47 + 2;
                  v50 = *(_QWORD *)(v48 + 8 * (v47 + 1)) & 0x7FFFFFFLL;
                  v51 = v50 + v47 + 1;
                  v52 = v50 + v47;
                  if ((*(_QWORD *)(v48 + 8 * v51) & 0xF8000000) == 0x88000000)
                    v47 = v52;
                  else
                    v47 = v51;
                  result = lbackref(a1, a2, a3, v49, a5, a6, a7);
                  if (result)
                    return result;
                }
                return 0;
              default:
                return result;
            }
            break;
        }
        break;
      }
    }
  }
LABEL_79:
  if (a2 == a3)
    return (uint64_t)a2;
  else
    return 0;
}

uint64_t lstep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(v8 + 8 * v7);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          if (a5 == (char)v9)
            goto LABEL_4;
          break;
        case 2uLL:
          if ((a5 & 0xFFFFFFFD) == 0x81)
            goto LABEL_4;
          break;
        case 3uLL:
          if ((a5 & 0xFFFFFFFE) == 0x82)
            goto LABEL_4;
          break;
        case 4uLL:
          if (a5 <= 127)
            goto LABEL_4;
          break;
        case 5uLL:
          if (a5 <= 127)
          {
            v11 = *(_QWORD *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
            if ((*(_BYTE *)(v11 + 8) & *(_BYTE *)(*(_QWORD *)v11 + a5)) != 0)
              goto LABEL_4;
          }
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          *(_BYTE *)(a6 + a2 + 1) |= *(_BYTE *)(a6 + a2);
          break;
        case 9uLL:
          v12 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v12;
          v13 = v9 & 0x7FFFFFF;
          v14 = *(unsigned __int8 *)(a6 + a2 - v13);
          v15 = v14 | v12;
          *(_BYTE *)(a6 + a2 - v13) = v15;
          if (v14)
            v16 = 1;
          else
            v16 = v15 == 0;
          if (!v16)
          {
            v7 += ~v13;
            a2 = v7;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          v10 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v10;
          *(_BYTE *)(a6 + (v9 & 0x7FFFFFF) + a2) |= v10;
          break;
        case 0xFuLL:
          if (*(_BYTE *)(a6 + a2))
          {
            v17 = *(_QWORD *)(v8 + 8 * v7 + 8);
            if ((v17 & 0xF8000000) == 0x90000000)
            {
              v18 = 1;
            }
            else
            {
              v18 = 1;
              do
              {
                v18 += v17 & 0x7FFFFFF;
                v17 = *(_QWORD *)(v8 + 8 * (v18 + v7));
              }
              while ((v17 & 0xF8000000) != 0x90000000);
            }
            *(_BYTE *)(a6 + v18 + a2) |= *(_BYTE *)(a6 + a2);
          }
          break;
        case 0x10uLL:
          v19 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v19;
          v20 = v9 & 0x7FFFFFF;
          if ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v20 + v7)) & 0xF8000000) != 0x90000000)
            *(_BYTE *)(a6 + v20 + a2) |= v19;
          break;
        case 0x12uLL:
          if (a5 == 133)
            goto LABEL_4;
          break;
        case 0x13uLL:
          if (a5 == 134)
LABEL_4:
            *(_BYTE *)(a2 + a6 + 1) |= *(_BYTE *)(a4 + a2);
          break;
        default:
          break;
      }
      ++v7;
      ++a2;
    }
    while (v7 != a3);
  }
  return a6;
}

void llvm_regfree(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_DWORD *)a1 == 62053)
  {
    v1 = *(_QWORD **)(a1 + 24);
    if (v1)
    {
      if (*(_DWORD *)v1 == 53829)
      {
        *(_DWORD *)a1 = 0;
        *(_DWORD *)v1 = 0;
        v2 = (void *)v1[1];
        if (v2)
          free(v2);
        v3 = (void *)v1[3];
        if (v3)
          free(v3);
        v4 = (void *)v1[4];
        if (v4)
          free(v4);
        v5 = (void *)v1[12];
        if (v5)
          free(v5);
        free(v1);
      }
    }
  }
}

unsigned __int8 *llvm_strlcpy(_BYTE *a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;

  v3 = (unsigned __int8 *)a2;
  if (a3)
  {
    v4 = a3 - 1;
    v3 = (unsigned __int8 *)a2;
    while (v4)
    {
      v5 = *v3++;
      *a1++ = v5;
      --v4;
      if (!v5)
        return &v3[~a2];
    }
    *a1 = 0;
  }
  while (*v3++)
    ;
  return &v3[~a2];
}

uint64_t llvm::xxh3_64bits(int8x16_t *a1, unint64_t a2, const unsigned __int8 *a3)
{
  unint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  int8x16_t v16;
  unint64_t v18;
  unint64_t v19;

  if (a2 > 0x10)
  {
    if (a2 <= 0x80)
    {
      v4 = veorq_s8(*a1, (int8x16_t)xmmword_181261100);
      v5 = ((v4.u64[1] * (unsigned __int128)v4.u64[0]) >> 64) ^ (v4.i64[1] * v4.i64[0]);
      v6 = (int8x16_t *)((char *)a1 + a2);
      v7 = veorq_s8(*(int8x16_t *)((char *)&a1[-1] + a2), (int8x16_t)xmmword_181261110);
      v8 = v5 - 0x61C8864E7A143579 * a2;
      v9 = ((v7.u64[1] * (unsigned __int128)v7.u64[0]) >> 64) ^ (v7.i64[1] * v7.i64[0]);
      if (a2 >= 0x21)
      {
        v10 = veorq_s8(a1[1], (int8x16_t)xmmword_181261120);
        v8 += ((v10.u64[1] * (unsigned __int128)v10.u64[0]) >> 64) ^ (v10.i64[1] * v10.i64[0]);
        v11 = veorq_s8(v6[-2], (int8x16_t)xmmword_181261130);
        v9 += ((v11.u64[1] * (unsigned __int128)v11.u64[0]) >> 64) ^ (v11.i64[1] * v11.i64[0]);
        if (a2 >= 0x41)
        {
          v12 = veorq_s8(a1[2], (int8x16_t)xmmword_181261140);
          v8 += ((v12.u64[1] * (unsigned __int128)v12.u64[0]) >> 64) ^ (v12.i64[1] * v12.i64[0]);
          v13 = veorq_s8(v6[-3], (int8x16_t)xmmword_181261150);
          v9 += ((v13.u64[1] * (unsigned __int128)v13.u64[0]) >> 64) ^ (v13.i64[1] * v13.i64[0]);
          if (a2 >= 0x61)
          {
            v14 = veorq_s8(a1[3], (int8x16_t)xmmword_181261160);
            v15 = ((v14.u64[1] * (unsigned __int128)v14.u64[0]) >> 64) ^ (v14.i64[1] * v14.i64[0]);
            v16 = veorq_s8(v6[-4], (int8x16_t)xmmword_181261170);
            v8 += v15;
            v9 += ((v16.u64[1] * (unsigned __int128)v16.u64[0]) >> 64) ^ (v16.i64[1] * v16.i64[0]);
          }
        }
      }
      v3 = v9 + v8;
      return (0x165667919E3779F9 * (v3 ^ (v3 >> 37))) ^ ((0x165667919E3779F9 * (v3 ^ (v3 >> 37))) >> 32);
    }
    if (a2 > 0xF0)
      return XXH3_hashLong_64b((const unsigned __int8 *)a1, a2, a3);
    else
      return XXH3_len_129to240_64b(a1, a2, a3);
  }
  else
  {
    if (a2 >= 9)
    {
      v3 = bswap64(a1->i64[0] ^ 0x6782737BEA4239B9)
         + a2
         + (*(uint64_t *)((char *)&a1->i64[-1] + a2) ^ 0xAF56BC3B0996523ALL)
         + ((((*(uint64_t *)((char *)&a1->i64[-1] + a2) ^ 0xAF56BC3B0996523ALL)
            * (unsigned __int128)(a1->i64[0] ^ 0x6782737BEA4239B9uLL)) >> 64) ^ ((*(uint64_t *)((char *)&a1->i64[-1] + a2) ^ 0xAF56BC3B0996523ALL)
                                                                               * (a1->i64[0] ^ 0x6782737BEA4239B9)));
      return (0x165667919E3779F9 * (v3 ^ (v3 >> 37))) ^ ((0x165667919E3779F9 * (v3 ^ (v3 >> 37))) >> 32);
    }
    if (a2 < 4)
    {
      if (a2)
        return XXH3_len_1to3_64b((const unsigned __int8 *)a1, a2, a3);
      else
        return 0x2D06800538D394C2;
    }
    else
    {
      v18 = (*(unsigned int *)((char *)&a1->u32[-1] + a2) | ((unint64_t)a1->u32[0] << 32)) ^ 0xC73AB174C5ECD5A2;
      v19 = 0x9FB21C651E98DF25 * (__ROR8__(v18, 15) ^ __ROR8__(v18, 40) ^ v18);
      return (0x9FB21C651E98DF25 * ((a2 + (v19 >> 35)) ^ v19)) ^ ((0x9FB21C651E98DF25 * ((a2 + (v19 >> 35)) ^ v19)) >> 28);
    }
  }
}

unint64_t XXH3_len_129to240_64b(int8x16_t *a1, unint64_t a2, const unsigned __int8 *a3)
{
  int8x16_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  const double *v29;
  const double *v30;
  const double *i64;
  const double *v32;
  int8x16_t v33;
  int8x16_t v34;
  float64_t v35;
  float64_t v36;
  uint64_t *v37;
  const unsigned __int8 *v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  unint64_t v43;
  float64x2x2_t v45;
  float64x2x2_t v46;
  float64x2x2_t v47;
  float64x2x2_t v48;

  v3 = veorq_s8(a1[2], (int8x16_t)xmmword_181261120);
  v4 = v3.i64[1];
  v5 = v3.i64[0];
  v6 = veorq_s8(a1[3], (int8x16_t)xmmword_181261130);
  v7 = v6.i64[1];
  v8 = v6.i64[0];
  v9 = veorq_s8(a1[4], (int8x16_t)xmmword_181261140);
  v10 = v9.i64[1];
  v11 = v9.i64[0];
  v12 = veorq_s8(a1[5], (int8x16_t)xmmword_181261150);
  v13 = v12.i64[1];
  v14 = v12.i64[0];
  v15 = veorq_s8(a1[6], (int8x16_t)xmmword_181261160);
  v16 = ((((a1->i64[1] ^ 0x1CAD21F72C81017CuLL) * (unsigned __int128)(a1->i64[0] ^ 0xBE4BA423396CFEB8)) >> 64) ^ ((a1->i64[1] ^ 0x1CAD21F72C81017CLL) * (a1->i64[0] ^ 0xBE4BA423396CFEB8)))
      - 0x61C8864E7A143579 * a2
      + ((((a1[1].i64[1] ^ 0x1F67B3B7A4A44072uLL) * (unsigned __int128)(a1[1].i64[0] ^ 0xDB979083E96DD4DELL)) >> 64) ^ ((a1[1].i64[1] ^ 0x1F67B3B7A4A44072) * (a1[1].i64[0] ^ 0xDB979083E96DD4DELL)))
      + ((((unint64_t)v4 * (unsigned __int128)(unint64_t)v5) >> 64) ^ (v4 * v5))
      + ((((unint64_t)v7 * (unsigned __int128)(unint64_t)v8) >> 64) ^ (v7 * v8))
      + ((((unint64_t)v10 * (unsigned __int128)(unint64_t)v11) >> 64) ^ (v10 * v11));
  v17 = ((((unint64_t)v13 * (unsigned __int128)(unint64_t)v14) >> 64) ^ (v13 * v14))
      + (((v15.u64[1] * (unsigned __int128)v15.u64[0]) >> 64) ^ (v15.i64[1] * v15.i64[0]));
  v18 = veorq_s8(a1[7], (int8x16_t)xmmword_181261170);
  v19 = v17 + (((v18.u64[1] * (unsigned __int128)v18.u64[0]) >> 64) ^ (v18.i64[1] * v18.i64[0]));
  v20 = 0x165667919E3779F9 * ((v16 + v19) ^ ((unint64_t)(v16 + v19) >> 37));
  v21 = v20 ^ HIDWORD(v20);
  if ((a2 >> 4) >= 9)
  {
    v22 = (a2 >> 4);
    if ((unint64_t)(v22 - 8) < 4)
    {
      v23 = 8;
LABEL_7:
      v37 = &kSecret[2 * v23 - 16];
      v38 = (const unsigned __int8 *)&a1[v23];
      v39 = v22 - v23;
      do
      {
        v40 = *(int8x16_t *)v38;
        v38 += 16;
        v41 = veorq_s8(v40, *(int8x16_t *)((char *)v37 + 3));
        v21 += ((v41.u64[1] * (unsigned __int128)v41.u64[0]) >> 64) ^ (v41.i64[1] * v41.i64[0]);
        v37 += 2;
        --v39;
      }
      while (v39);
      goto LABEL_9;
    }
    v24 = 0;
    v25 = (a2 >> 4) & 3;
    v26 = v22 - 8 - v25;
    v23 = v22 - v25;
    v27 = 0uLL;
    v28 = (int64x2_t)(unint64_t)v21;
    do
    {
      v29 = (const double *)((char *)&kSecret[v24 / 8] + 3);
      v45 = vld2q_f64(v29);
      v30 = (const double *)((char *)&kSecret[v24 / 8 + 4] + 3);
      v46 = vld2q_f64(v30);
      i64 = (const double *)a1[v24 / 0x10 + 8].i64;
      v47 = vld2q_f64(i64);
      v32 = (const double *)a1[v24 / 0x10 + 10].i64;
      v48 = vld2q_f64(v32);
      v33 = veorq_s8((int8x16_t)v47.val[0], (int8x16_t)v45.val[0]);
      v34 = veorq_s8((int8x16_t)v48.val[0], (int8x16_t)v46.val[0]);
      v45.val[0] = (float64x2_t)veorq_s8((int8x16_t)v47.val[1], (int8x16_t)v45.val[1]);
      v45.val[1] = (float64x2_t)veorq_s8((int8x16_t)v48.val[1], (int8x16_t)v46.val[1]);
      *(_QWORD *)&v35 = ((*(unint64_t *)&v45.val[1].f64[0] * (unsigned __int128)v34.u64[0]) >> 64) ^ (*(_QWORD *)&v45.val[1].f64[0] * v34.i64[0]);
      *(_QWORD *)&v36 = ((*(unint64_t *)&v45.val[1].f64[1] * (unsigned __int128)v34.u64[1]) >> 64) ^ (*(_QWORD *)&v45.val[1].f64[1] * v34.i64[1]);
      *(_QWORD *)&v45.val[1].f64[0] = ((*(unint64_t *)&v45.val[0].f64[0] * (unsigned __int128)v33.u64[0]) >> 64) ^ (*(_QWORD *)&v45.val[0].f64[0] * v33.i64[0]);
      *(_QWORD *)&v45.val[1].f64[1] = ((*(unint64_t *)&v45.val[0].f64[1] * (unsigned __int128)v33.u64[1]) >> 64) ^ (*(_QWORD *)&v45.val[0].f64[1] * v33.i64[1]);
      v46.val[0].f64[0] = v35;
      v46.val[0].f64[1] = v36;
      v28 = vaddq_s64(v28, (int64x2_t)v45.val[1]);
      v27 = vaddq_s64(v27, (int64x2_t)v46.val[0]);
      v24 += 64;
      v26 -= 4;
    }
    while (v26);
    v21 = vaddvq_s64(vaddq_s64(v27, v28));
    if (v25)
      goto LABEL_7;
  }
LABEL_9:
  v42 = veorq_s8(*(int8x16_t *)((char *)&a1[-1] + a2), (int8x16_t)xmmword_181261180);
  v43 = v21 + (((v42.u64[1] * (unsigned __int128)v42.u64[0]) >> 64) ^ (v42.i64[1] * v42.i64[0]));
  return (0x165667919E3779F9 * (v43 ^ (v43 >> 37))) ^ ((0x165667919E3779F9 * (v43 ^ (v43 >> 37))) >> 32);
}

unint64_t XXH3_hashLong_64b(const unsigned __int8 *a1, uint64_t a2, const unsigned __int8 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const unsigned __int8 *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const unsigned __int8 *v30;
  uint64_t v31;
  const unsigned __int8 *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v65;

  v3 = 0xC2B2AE3D27D4EB4FLL;
  v4 = 0x85EBCA77C2B2AE63;
  v5 = 0x27D4EB2F165667C5;
  v6 = 0x165667B19E3779F9;
  v7 = 3266489917;
  v8 = 2246822519;
  v65 = a2 - 1;
  if ((unint64_t)(a2 - 1) >= 0x400)
  {
    v11 = 0;
    v12 = (unint64_t)(a2 - 1) >> 10;
    v13 = a1;
    v9 = 2654435761;
    v10 = 0x9E3779B185EBCA87;
    do
    {
      v14 = 0;
      v15 = kSecret;
      v16 = kSecret;
      do
      {
        v18 = *(_QWORD *)&v13[v14];
        v17 = *(_QWORD *)&v13[v14 + 8];
        v19 = v7 + (*(_DWORD *)v15 ^ v18) * ((*v15 ^ v18) >> 32);
        v20 = v16[1];
        ++v16;
        v10 += v18 + (v20 ^ v17) * ((v20 ^ v17) >> 32);
        v21 = *(_QWORD *)&v13[v14 + 16];
        v22 = *(_QWORD *)&v13[v14 + 24];
        v23 = v3 + (*((_DWORD *)v15 + 4) ^ v21) * ((v15[2] ^ v21) >> 32);
        v6 += v21 + (*((_DWORD *)v15 + 6) ^ v22) * ((v15[3] ^ v22) >> 32);
        v24 = *(_QWORD *)&v13[v14 + 32];
        v25 = *(_QWORD *)&v13[v14 + 40];
        v7 = v19 + v17;
        v3 = v23 + v22;
        v4 += (*((_DWORD *)v15 + 8) ^ v24) * ((v15[4] ^ v24) >> 32) + v25;
        v8 += v24 + (v15[5] ^ v25) * ((v15[5] ^ v25) >> 32);
        v26 = *(_QWORD *)&v13[v14 + 48];
        v27 = *(_QWORD *)&v13[v14 + 56];
        v5 += (*((_DWORD *)v15 + 12) ^ v26) * ((v15[6] ^ v26) >> 32) + v27;
        v9 += v26
            + (v15[7] ^ v27)
            * (unint64_t)(HIDWORD(v15[7]) ^ HIDWORD(v27));
        v14 += 64;
        v15 = v16;
      }
      while (v14 != 1024);
      v7 = 2654435761u * (v7 ^ (v7 >> 47) ^ 0xC3EBD33483ACC5EALL);
      v10 = 2654435761u * (v10 ^ (v10 >> 47) ^ 0xEB6313FAFFA081C5);
      v3 = 2654435761u * (v3 ^ (v3 >> 47) ^ 0x49DAF0B751DD0D17);
      v6 = 2654435761u * (v6 ^ (v6 >> 47) ^ 0x9E68D429265516D3);
      v4 = 2654435761u * (v4 ^ (v4 >> 47) ^ 0xFCA1477D58BE162BLL);
      v8 = 2654435761u * (v8 ^ (v8 >> 47) ^ 0xCE31D07AD1B8F88FLL);
      v5 = 2654435761u * (v5 ^ (v5 >> 47) ^ 0x280416958F3ACB45);
      v9 = 2654435761u * (v9 ^ (v9 >> 47) ^ 0x7E404BBBCAFBD7AFLL);
      ++v11;
      v13 += 1024;
    }
    while (v11 != v12);
  }
  else
  {
    v9 = 2654435761;
    v10 = 0x9E3779B185EBCA87;
  }
  v28 = (v65 >> 6) & 0xF;
  if (v28)
  {
    v29 = 0;
    v30 = a1;
    v31 = a2;
    v32 = &a1[v65 & 0xFFFFFFFFFFFFFC00];
    v33 = v28 << 6;
    v34 = kSecret;
    v35 = kSecret;
    do
    {
      v36 = *(_QWORD *)&v32[v29];
      v37 = *(_QWORD *)&v32[v29 + 8];
      v38 = v7 + (*(_DWORD *)v34 ^ v36) * ((*v34 ^ v36) >> 32);
      v39 = v35[1];
      ++v35;
      v10 += v36 + (v39 ^ v37) * ((v39 ^ v37) >> 32);
      v40 = *(_QWORD *)&v32[v29 + 16];
      v41 = *(_QWORD *)&v32[v29 + 24];
      v42 = v3 + (*((_DWORD *)v34 + 4) ^ v40) * ((v34[2] ^ v40) >> 32);
      v6 += v40 + (*((_DWORD *)v34 + 6) ^ v41) * ((v34[3] ^ v41) >> 32);
      v43 = *(_QWORD *)&v32[v29 + 32];
      v44 = *(_QWORD *)&v32[v29 + 40];
      v7 = v38 + v37;
      v3 = v42 + v41;
      v4 += (*((_DWORD *)v34 + 8) ^ v43) * ((v34[4] ^ v43) >> 32) + v44;
      v8 += v43 + (v34[5] ^ v44) * ((v34[5] ^ v44) >> 32);
      v46 = *(_QWORD *)&v32[v29 + 48];
      v45 = *(_QWORD *)&v32[v29 + 56];
      v5 += (*((_DWORD *)v34 + 12) ^ v46) * ((v34[6] ^ v46) >> 32) + v45;
      v9 += v46 + (*((_DWORD *)v34 + 14) ^ v45) * ((v34[7] ^ v45) >> 32);
      v29 += 64;
      v34 = v35;
    }
    while (v33 != v29);
  }
  else
  {
    v30 = a1;
    v31 = a2;
  }
  v47 = *(_QWORD *)&v30[v31 - 64];
  v48 = *(_QWORD *)&v30[v31 - 56];
  v49 = v7 + (v47 ^ 0xD9C97E9F) * ((v47 ^ 0xEA647378D9C97E9FLL) >> 32);
  v50 = v10 + v47 + (v48 ^ 0x3483ACC5) * ((v48 ^ 0xC5C3EBD33483ACC5) >> 32);
  v51 = *(_QWORD *)&v30[v31 - 48];
  v52 = *(_QWORD *)&v30[v31 - 40];
  v53 = v3 + (v51 ^ 0xFAFFA081) * ((v51 ^ 0x17EB6313FAFFA081uLL) >> 32);
  v54 = v6 + v51 + (v52 ^ 0xB751DD0D) * ((v52 ^ 0xD349DAF0B751DD0DLL) >> 32);
  v55 = *(_QWORD *)&v30[v31 - 32];
  v56 = *(_QWORD *)&v30[v31 - 24];
  v57 = v4 + (v55 ^ 0x29265516) * ((v55 ^ 0x2B9E68D429265516uLL) >> 32) + v56;
  v58 = v8 + v55 + (v56 ^ 0x7D58BE16) * ((v56 ^ 0x8FFCA1477D58BE16) >> 32);
  v59 = *(_QWORD *)&v30[v31 - 16];
  v60 = *(_QWORD *)&v30[v31 - 8];
  v61 = v5 + (v59 ^ 0x7AD1B8F8) * (unint64_t)(HIDWORD(v59) ^ 0x45CE31D0u) + v60;
  v62 = v9 + v59 + (v60 ^ 0x958F3ACB) * ((v60 ^ 0xAF280416958F3ACBLL) >> 32);
  v63 = ((((v50 ^ 0xA44072DB979083E9) * (unsigned __int128)((v49 + v48) ^ 0x6DD4DE1CAD21F72CLL)) >> 64) ^ ((v50 ^ 0xA44072DB979083E9) * ((v49 + v48) ^ 0x6DD4DE1CAD21F72CLL)))
      - 0x61C8864E7A143579 * v31
      + ((((v54 ^ 0xD05A8278E5C0CC4ELL) * (unsigned __int128)((v53 + v52) ^ 0xE679CB1F67B3B7A4)) >> 64) ^ ((v54 ^ 0xD05A8278E5C0CC4ELL) * ((v53 + v52) ^ 0xE679CB1F67B3B7A4)))
      + ((((v58 ^ 0x9035E08E2443F774) * (unsigned __int128)(v57 ^ 0x4608B82172FFCC7DuLL)) >> 64) ^ ((v58 ^ 0x9035E08E2443F774) * (v57 ^ 0x4608B82172FFCC7DLL)))
      + ((((v62 ^ 0x65D088CB00C391BBLL) * (unsigned __int128)(v61 ^ 0x52283C4C263A81E6uLL)) >> 64) ^ ((v62 ^ 0x65D088CB00C391BBLL) * (v61 ^ 0x52283C4C263A81E6)));
  return (0x165667919E3779F9 * (v63 ^ (v63 >> 37))) ^ ((0x165667919E3779F9 * (v63 ^ (v63 >> 37))) >> 32);
}

unint64_t XXH3_len_1to3_64b(const unsigned __int8 *a1, unint64_t a2, const unsigned __int8 *a3)
{
  unint64_t v3;

  v3 = 0xC2B2AE3D27D4EB4FLL
     * ((((_DWORD)a2 << 8) | ((unint64_t)*a1 << 16) | ((unint64_t)a1[a2 >> 1] << 24) | a1[a2 - 1]) ^ 0x87275A9B);
  return (0x165667B19E3779F9 * (v3 ^ (v3 >> 29))) ^ ((0x165667B19E3779F9 * (v3 ^ (v3 >> 29))) >> 32);
}

uint64_t llvm::sys::StrError@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  char __strerrbuf[2000];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((_DWORD)this)
  {
    __strerrbuf[0] = 0;
    strerror_r(this, __strerrbuf, 0x7CFuLL);
    return MEMORY[0x186DA1308](a2, __strerrbuf);
  }
  return this;
}

unint64_t llvm::sys::path::begin@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v8;
  BOOL v9;
  _BOOL4 v10;
  BOOL v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  BOOL v19;
  unsigned __int8 *v20;
  unint64_t v21;

  v5 = (unsigned __int8 *)result;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  v20 = (unsigned __int8 *)result;
  v21 = a2;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_55;
  }
  if (a3 >= 2)
  {
    result = *(unsigned __int8 *)result;
    if (a2 < 2)
      goto LABEL_38;
    if ((result & 0x80) != 0)
    {
      result = __maskrune(result, 0x100uLL);
      if (!(_DWORD)result)
        goto LABEL_11;
    }
    else
    {
      result = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * result + 60) & 0x100;
      if (!(_DWORD)result)
        goto LABEL_11;
    }
    if (v5[1] == 58)
    {
      v8 = 2;
      goto LABEL_55;
    }
  }
LABEL_11:
  result = *v5;
  if (a2 >= 3)
  {
    v9 = a3 > 1 && (_DWORD)result == 92;
    v10 = v9;
    v11 = (_DWORD)result != 47 && !v10;
    if (!v11 && (_DWORD)result == v5[1])
    {
      v12 = v5[2];
      v13 = a3 > 1 && v12 == 92;
      v14 = v13;
      if (v12 != 47 && !v14)
      {
        if (a3 <= 1)
          v15 = 1;
        else
          v15 = 2;
        if (a3 <= 1)
          v16 = "/";
        else
          v16 = "\\/";
        v17 = 2;
LABEL_53:
        result = llvm::StringRef::find_first_of(&v20, (unsigned __int8 *)v16, v15, v17);
        v5 = v20;
        v8 = v21;
        if (v21 >= result)
          v8 = result;
        goto LABEL_55;
      }
    }
  }
LABEL_38:
  v19 = a3 > 1 && (_DWORD)result == 92;
  v8 = 1;
  if ((_DWORD)result != 47 && !v19)
  {
    if (a3 <= 1)
      v15 = 1;
    else
      v15 = 2;
    if (a3 <= 1)
      v16 = "/";
    else
      v16 = "\\/";
    v17 = 0;
    goto LABEL_53;
  }
LABEL_55:
  *(_QWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 24) = v8;
  *(_QWORD *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = a3;
  return result;
}

_QWORD *llvm::sys::path::const_iterator::operator++(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  char *v17;
  unint64_t first_of;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  _BOOL4 v25;

  v1 = result;
  v2 = result + 2;
  v3 = result[3];
  v4 = result[4] + v3;
  result[4] = v4;
  v5 = result[1];
  if (v4 == v5)
  {
    *v2 = 0;
    result[3] = 0;
    return result;
  }
  if (v3 <= 2)
  {
    v12 = 0;
    v8 = *((_DWORD *)result + 10);
    v13 = *result;
    v14 = *(unsigned __int8 *)(*result + v4);
    if (v14 != 47)
      goto LABEL_24;
  }
  else
  {
    v6 = (unsigned __int8 *)result[2];
    v7 = *v6;
    v8 = *((_DWORD *)result + 10);
    if (v7 == 47 || (v7 == 92 ? (v9 = v8 >= 2) : (v9 = 0), v9))
    {
      if (v6[1] == v7)
      {
        v10 = v6[2];
        v12 = v8 < 2 || v10 != 92;
        if (v10 == 47)
          v12 = 0;
        v13 = *result;
        v14 = *(unsigned __int8 *)(*result + v4);
        if (v14 == 47)
          goto LABEL_43;
LABEL_24:
        if (v14 != 92 || v8 < 2)
          goto LABEL_28;
        goto LABEL_43;
      }
    }
    v12 = 0;
    v13 = *result;
    v14 = *(unsigned __int8 *)(*result + v4);
    if (v14 != 47)
      goto LABEL_24;
  }
LABEL_43:
  if (v12 || v3 && v8 >= 2 && *(_BYTE *)(*v2 + v3 - 1) == 58)
  {
    if (v5 >= v4)
      v22 = v4;
    else
      v22 = result[1];
    result[2] = v13 + v22;
    result[3] = v5 > v4;
    return result;
  }
  while (1)
  {
    v23 = *(unsigned __int8 *)(v13 + v4);
    v24 = v8 > 1 && v23 == 92;
    v25 = v24;
    if (v23 != 47 && !v25)
      break;
    result[4] = ++v4;
    if (v5 == v4)
    {
      if (v3 != 1 || *(_BYTE *)*v2 != 47)
      {
        result[4] = v5 - 1;
        result[2] = ".";
        result[3] = 1;
        return result;
      }
      goto LABEL_29;
    }
  }
LABEL_28:
  v5 = v4;
LABEL_29:
  if (v8 <= 1)
    v16 = 1;
  else
    v16 = 2;
  if (v8 <= 1)
    v17 = "/";
  else
    v17 = "\\/";
  first_of = llvm::StringRef::find_first_of(result, (unsigned __int8 *)v17, v16, v5);
  v19 = v1[4];
  v20 = v1[1];
  if (v20 >= v19)
    v21 = v1[4];
  else
    v21 = v1[1];
  if (v21 <= first_of)
    v19 = first_of;
  if (v19 >= v20)
    v19 = v1[1];
  v1[2] = *v1 + v21;
  v1[3] = v19 - v21;
  return v1;
}

unsigned __int8 **llvm::sys::path::reverse_iterator::operator++(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  unint64_t v3;
  unsigned int v4;
  int v6;
  unint64_t first_of;
  int v8;
  _BOOL4 v10;
  BOOL v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  BOOL v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t last_of;
  unint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v47;
  unint64_t v48;

  v2 = *a1;
  v3 = (unint64_t)a1[1];
  v4 = *((_DWORD *)a1 + 10);
  v47 = *a1;
  v48 = v3;
  if (v4 >= 2 && v3 >= 3 && v2[1] == 58)
  {
    v6 = v2[2];
    first_of = 2;
    if (v6 == 47 || v6 == 92)
      goto LABEL_47;
  }
  if (v3 < 4)
  {
    if (!v3)
    {
LABEL_46:
      first_of = -1;
      goto LABEL_47;
    }
    v8 = *v2;
  }
  else
  {
    v8 = *v2;
    v10 = v4 > 1 && v8 == 92;
    v11 = v8 != 47 && !v10;
    if (!v11 && v8 == v2[1])
    {
      v12 = v2[2];
      v13 = v4 > 1 && v12 == 92;
      v14 = v13;
      if (v12 != 47 && !v14)
      {
        if (v4 <= 1)
          v15 = 1;
        else
          v15 = 2;
        if (v4 <= 1)
          v16 = "/";
        else
          v16 = "\\/";
        first_of = llvm::StringRef::find_first_of(&v47, (unsigned __int8 *)v16, v15, 2uLL);
        goto LABEL_47;
      }
    }
  }
  first_of = 0;
  v18 = v4 > 1 && v8 == 92;
  if (v8 != 47 && !v18)
    goto LABEL_46;
LABEL_47:
  v19 = a1[4];
  if (v19)
  {
    v20 = first_of + 1;
    v21 = a1[4];
    while ((unsigned __int8 *)v20 != v21)
    {
      v22 = v21[(_QWORD)*a1 - 1];
      if (v22 != 47 && (v22 != 92 || *((_DWORD *)a1 + 10) < 2u))
      {
        v20 = (unint64_t)v21;
        break;
      }
      if (!--v21)
        goto LABEL_63;
    }
    v24 = *a1;
    v25 = a1[1];
    if (v19 != v25 || v25 == 0)
      goto LABEL_75;
  }
  else
  {
LABEL_63:
    v20 = 0;
    v24 = *a1;
    v25 = a1[1];
    if (v19 != v25 || v25 == 0)
      goto LABEL_75;
  }
  v28 = v19 - 1;
  v29 = v28[(_QWORD)v24];
  if (v29 == 47 || (v29 == 92 ? (v30 = *((_DWORD *)a1 + 10) >= 2u) : (v30 = 0), v30))
  {
    if (first_of == -1 || v20 - 1 > first_of)
    {
      a1[4] = v28;
      a1[2] = ".";
      a1[3] = (unsigned __int8 *)1;
      return a1;
    }
  }
LABEL_75:
  v31 = *((_DWORD *)a1 + 10);
  if ((unint64_t)v25 >= v20)
    v32 = v20;
  else
    v32 = (unint64_t)v25;
  v47 = v24;
  v48 = v32;
  if (v32)
  {
    v33 = v32 - 1;
    v34 = v24[v32 - 1];
    if (v34 == 47 || v31 >= 2 && v34 == 92)
      goto LABEL_108;
  }
  else
  {
    v33 = -1;
  }
  if (v31 <= 1)
    v35 = 1;
  else
    v35 = 2;
  if (v31 <= 1)
    v36 = "/";
  else
    v36 = "\\/";
  last_of = llvm::StringRef::find_last_of(&v47, (unsigned __int8 *)v36, v35, v33);
  if (v31 >= 2 && last_of == -1)
  {
    v38 = v48 - 2;
    if (v48 < v48 - 2)
      v38 = v48;
    while (v38)
    {
      last_of = v38 - 1;
      v39 = v47[--v38];
      if (v39 == 58)
        goto LABEL_96;
    }
  }
  else
  {
LABEL_96:
    if (last_of != -1)
    {
      if (last_of != 1
        || ((v33 = 0, v40 = *v47, v31 > 1) ? (v41 = v40 == 92) : (v41 = 0),
            !v41 ? (v42 = 0) : (v42 = 1),
            v40 != 47 && (v42 & 1) == 0))
      {
        v33 = last_of + 1;
      }
      goto LABEL_108;
    }
  }
  v33 = 0;
LABEL_108:
  v43 = (unint64_t)a1[1];
  if (v43 >= v33)
    v44 = v33;
  else
    v44 = (unint64_t)a1[1];
  if (v44 <= v20)
    v45 = v20;
  else
    v45 = v33;
  if (v45 < v43)
    v43 = v45;
  a1[2] = &(*a1)[v44];
  a1[3] = (unsigned __int8 *)(v43 - v44);
  a1[4] = (unsigned __int8 *)v33;
  return a1;
}

unint64_t llvm::sys::path::root_path(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v5;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  int v14;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = a1;
  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v21);
  v18 = v21;
  v19 = v22;
  v20 = v23;
  if ((_QWORD)v21 == v5 && (_QWORD)v23 == a2)
    return 0;
  if (*((_QWORD *)&v22 + 1) < 3uLL)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(unsigned __int8 *)v22;
    if (v7 == 47 || (v8 = 0, a3 >= 2) && v7 == 92)
      v8 = *(unsigned __int8 *)(v22 + 1) == v7;
  }
  v9 = 0;
  if (*((_QWORD *)&v22 + 1) && a3 >= 2)
    v9 = *(unsigned __int8 *)(v22 + *((_QWORD *)&v22 + 1) - 1) == 58;
  if (v8 || v9)
  {
    llvm::sys::path::const_iterator::operator++(&v18);
    if ((_QWORD)v18 == v5 && (_QWORD)v20 == a2)
      return v22;
    v10 = *(unsigned __int8 *)v19;
    v11 = a3 > 1 && v10 == 92;
    v12 = v11;
    if (v10 != 47 && !v12)
      return v22;
  }
  else
  {
    v14 = *(unsigned __int8 *)v22;
    if (a3 > 1 && v14 == 92 || v14 == 47)
      return v22;
    else
      return 0;
  }
  return v5;
}

uint64_t llvm::sys::path::root_directory(unint64_t a1, unint64_t a2, unsigned int a3)
{
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t result;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v21);
  v18 = v21;
  v19 = v22;
  v20 = v23;
  if ((_QWORD)v21 == a1 && (_QWORD)v23 == a2)
    return 0;
  if (*((_QWORD *)&v22 + 1) < 3uLL)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(unsigned __int8 *)v22;
    if (v7 == 47 || (v8 = 0, a3 >= 2) && v7 == 92)
      v8 = *(unsigned __int8 *)(v22 + 1) == v7;
  }
  v9 = 0;
  if (*((_QWORD *)&v22 + 1) && a3 >= 2)
    v9 = *(unsigned __int8 *)(v22 + *((_QWORD *)&v22 + 1) - 1) == 58;
  if (!v8 && !v9
    || (llvm::sys::path::const_iterator::operator++(&v18), (_QWORD)v18 == a1) && (_QWORD)v20 == a2
    || ((result = v19, v11 = *(unsigned __int8 *)v19, a3 > 1) ? (v12 = v11 == 92) : (v12 = 0),
        !v12 ? (v13 = 0) : (v13 = 1),
        v11 != 47 ? (v14 = v13 == 0) : (v14 = 0),
        v14))
  {
    if (!v8)
    {
      v15 = *(unsigned __int8 *)v22;
      if (a3 > 1 && v15 == 92 || v15 == 47)
        return v22;
      else
        return 0;
    }
    return 0;
  }
  return result;
}

void llvm::sys::path::append(_QWORD *a1, const llvm::Twine *a2, _QWORD **a3, _QWORD **a4, const char **a5, _QWORD **a6)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  const char **v16;
  uint64_t v17;
  const char *v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t first_not_of;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  const char *v31;
  size_t v32;
  const char *v33;
  int v34;
  char has_root_name;
  const char *v36;
  size_t v37;
  unsigned int v38;
  int v39;
  const char **v40;
  _QWORD *v41;
  size_t v42;
  _QWORD *v43;
  _QWORD *v44;
  size_t v45;
  _QWORD *v46;
  _QWORD *v47;
  size_t v48;
  _QWORD *v49;
  int v50;
  int v51;
  int v52;
  char v53;
  unsigned __int8 *v54;
  uint64_t v55;
  const char *v56[4];
  __int16 v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[64];
  void *v61;
  __int128 v62;
  _BYTE v63[32];
  void *v64;
  __int128 v65;
  _BYTE v66[32];
  _BYTE *v67;
  __int128 v68;
  _BYTE v69[32];
  char *v70;
  __int128 v71;
  _QWORD v72[6];

  v72[4] = *MEMORY[0x1E0C80C00];
  v70 = (char *)v72;
  v71 = xmmword_181233280;
  v67 = v69;
  v68 = xmmword_181233280;
  v64 = v66;
  v65 = xmmword_181233280;
  v61 = v63;
  v62 = xmmword_181233280;
  v58 = v60;
  v59 = 0x400000000;
  v11 = *((unsigned __int8 *)a3 + 32);
  if (v11 < 2)
  {
    v12 = 0;
    v13 = *((unsigned __int8 *)a4 + 32);
    if (v13 < 2)
      goto LABEL_3;
LABEL_69:
    if (*((_BYTE *)a4 + 33) == 1)
    {
      if (v13 - 5 < 2)
      {
        v41 = *a4;
        v42 = (size_t)a4[1];
        if (v12 < HIDWORD(v59))
          goto LABEL_77;
        goto LABEL_108;
      }
      if (v13 == 4)
      {
        v50 = *((char *)*a4 + 23);
        if (v50 >= 0)
          v41 = *a4;
        else
          v41 = (_QWORD *)**a4;
        if (v50 >= 0)
          v42 = *((unsigned __int8 *)*a4 + 23);
        else
          v42 = (*a4)[1];
        if (v12 >= HIDWORD(v59))
          goto LABEL_108;
        goto LABEL_77;
      }
      if (v13 == 3)
      {
        v41 = *a4;
        if (*a4)
        {
          v42 = strlen((const char *)*a4);
          if (v12 < HIDWORD(v59))
            goto LABEL_77;
          goto LABEL_108;
        }
        v42 = 0;
        if (v12 >= HIDWORD(v59))
        {
LABEL_108:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v12 + 1, 16);
          v12 = v59;
        }
LABEL_77:
        v43 = (char *)v58 + 16 * v12;
        *v43 = v41;
        v43[1] = v42;
        v12 = v59 + 1;
        LODWORD(v59) = v59 + 1;
        v14 = *((unsigned __int8 *)a5 + 32);
        if (v14 < 2)
        {
LABEL_4:
          v15 = *((unsigned __int8 *)a6 + 32);
          if (v15 < 2)
            goto LABEL_5;
LABEL_87:
          if (*((_BYTE *)a6 + 33) == 1)
          {
            if (v15 - 5 < 2)
            {
              v47 = *a6;
              v48 = (size_t)a6[1];
              if (v12 < HIDWORD(v59))
                goto LABEL_95;
              goto LABEL_112;
            }
            if (v15 == 4)
            {
              v52 = *((char *)*a6 + 23);
              if (v52 >= 0)
                v47 = *a6;
              else
                v47 = (_QWORD *)**a6;
              if (v52 >= 0)
                v48 = *((unsigned __int8 *)*a6 + 23);
              else
                v48 = (*a6)[1];
              if (v12 >= HIDWORD(v59))
                goto LABEL_112;
              goto LABEL_95;
            }
            if (v15 == 3)
            {
              v47 = *a6;
              if (*a6)
              {
                v48 = strlen((const char *)*a6);
                if (v12 < HIDWORD(v59))
                  goto LABEL_95;
                goto LABEL_112;
              }
              v48 = 0;
              if (v12 >= HIDWORD(v59))
              {
LABEL_112:
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v12 + 1, 16);
                v12 = v59;
              }
LABEL_95:
              v49 = (char *)v58 + 16 * v12;
              *v49 = v47;
              v49[1] = v48;
              v12 = v59 + 1;
              LODWORD(v59) = v12;
              v16 = (const char **)v58;
              if (v12)
                goto LABEL_6;
LABEL_96:
              if (v16 == (const char **)v60)
                goto LABEL_98;
              goto LABEL_97;
            }
          }
          llvm::Twine::toVector((uint64_t)a6, (uint64_t)&v61);
          v47 = v61;
          v48 = v62;
          v12 = v59;
          if (v59 < HIDWORD(v59))
            goto LABEL_95;
          goto LABEL_112;
        }
        goto LABEL_78;
      }
    }
    llvm::Twine::toVector((uint64_t)a4, (uint64_t)&v67);
    v41 = v67;
    v42 = v68;
    v12 = v59;
    if (v59 < HIDWORD(v59))
      goto LABEL_77;
    goto LABEL_108;
  }
  if (*((_BYTE *)a3 + 33) != 1)
    goto LABEL_58;
  if (v11 - 5 < 2)
  {
    v38 = 0;
    v36 = (const char *)*a3;
    v37 = (size_t)a3[1];
    goto LABEL_68;
  }
  if (v11 != 4)
  {
    if (v11 == 3)
    {
      v36 = (const char *)*a3;
      if (*a3)
        v37 = strlen((const char *)*a3);
      else
        v37 = 0;
      v38 = 0;
      goto LABEL_68;
    }
LABEL_58:
    llvm::Twine::toVector((uint64_t)a3, (uint64_t)&v70);
    v36 = v70;
    v37 = v71;
    v38 = v59;
    goto LABEL_68;
  }
  v38 = 0;
  v39 = *((char *)*a3 + 23);
  if (v39 >= 0)
    v36 = (const char *)*a3;
  else
    v36 = (const char *)**a3;
  if (v39 >= 0)
    v37 = *((unsigned __int8 *)*a3 + 23);
  else
    v37 = (*a3)[1];
LABEL_68:
  v40 = (const char **)((char *)v58 + 16 * v38);
  *v40 = v36;
  v40[1] = (const char *)v37;
  v12 = v59 + 1;
  LODWORD(v59) = v59 + 1;
  v13 = *((unsigned __int8 *)a4 + 32);
  if (v13 >= 2)
    goto LABEL_69;
LABEL_3:
  v14 = *((unsigned __int8 *)a5 + 32);
  if (v14 < 2)
    goto LABEL_4;
LABEL_78:
  if (*((_BYTE *)a5 + 33) != 1)
    goto LABEL_85;
  if (v14 - 5 < 2)
  {
    v44 = *a5;
    v45 = (size_t)a5[1];
    if (v12 < HIDWORD(v59))
      goto LABEL_86;
    goto LABEL_110;
  }
  if (v14 == 4)
  {
    v51 = (*a5)[23];
    if (v51 >= 0)
      v44 = *a5;
    else
      v44 = *(_QWORD **)*a5;
    if (v51 >= 0)
      v45 = *((unsigned __int8 *)*a5 + 23);
    else
      v45 = *((_QWORD *)*a5 + 1);
    if (v12 >= HIDWORD(v59))
      goto LABEL_110;
    goto LABEL_86;
  }
  if (v14 != 3)
  {
LABEL_85:
    llvm::Twine::toVector((uint64_t)a5, (uint64_t)&v64);
    v44 = v64;
    v45 = v65;
    v12 = v59;
    if (v59 < HIDWORD(v59))
      goto LABEL_86;
    goto LABEL_110;
  }
  v44 = *a5;
  if (*a5)
  {
    v45 = strlen(*a5);
    if (v12 < HIDWORD(v59))
      goto LABEL_86;
    goto LABEL_110;
  }
  v45 = 0;
  if (v12 >= HIDWORD(v59))
  {
LABEL_110:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v12 + 1, 16);
    v12 = v59;
  }
LABEL_86:
  v46 = (char *)v58 + 16 * v12;
  *v46 = v44;
  v46[1] = v45;
  v12 = v59 + 1;
  LODWORD(v59) = v59 + 1;
  v15 = *((unsigned __int8 *)a6 + 32);
  if (v15 >= 2)
    goto LABEL_87;
LABEL_5:
  v16 = (const char **)v58;
  if (!v12)
    goto LABEL_96;
LABEL_6:
  if (a2 <= 1)
    v17 = 1;
  else
    v17 = 2;
  v18 = "/";
  if (a2 > 1)
    v18 = "\\/";
  v54 = (unsigned __int8 *)v18;
  v55 = v17;
  if (a2 <= 1)
    v19 = 1;
  else
    v19 = (int)a2;
  if (v19 == 3)
    v20 = 92;
  else
    v20 = 47;
  v53 = v20;
  v21 = a1[1];
  v22 = 16 * v12;
  do
  {
    if (!v21
      || ((v23 = *(unsigned __int8 *)(v21 + *a1 - 1), a2 > 1) ? (v24 = v23 == 92) : (v24 = 0),
          !v24 ? (v25 = 0) : (v25 = 1),
          v23 != 47 ? (v26 = v25 == 0) : (v26 = 0),
          v26))
    {
      v33 = v16[1];
      if (!v33 || (v34 = *(unsigned __int8 *)*v16, v34 != 47) && (a2 < 2 || v34 != 92))
      {
        if (v21)
        {
          v57 = 261;
          v56[0] = *v16;
          v56[1] = v33;
          has_root_name = llvm::sys::path::has_root_name(v56, a2);
          v21 = a1[1];
          if ((has_root_name & 1) == 0)
          {
            if ((unint64_t)(v21 + 1) > a1[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v21 + 1, 1);
              v21 = a1[1];
            }
            *(_BYTE *)(*a1 + v21) = v53;
            v21 = a1[1] + 1;
            a1[1] = v21;
          }
        }
      }
      v31 = *v16;
      v32 = (size_t)v16[1];
      if (a1[2] < v21 + v32)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v21 + v32, 1);
        v21 = a1[1];
      }
      if (v32)
      {
LABEL_19:
        memcpy((void *)(*a1 + v21), v31, v32);
        v21 = a1[1];
      }
    }
    else
    {
      first_not_of = llvm::StringRef::find_first_not_of(v16, v54, v55, 0);
      v28 = first_not_of;
      v29 = (unsigned __int8 *)v16[1];
      if ((unint64_t)v29 >= first_not_of)
        v30 = first_not_of;
      else
        v30 = (unint64_t)v16[1];
      v31 = &(*v16)[v30];
      v32 = (size_t)&v29[-v30];
      v21 = a1[1];
      if (a1[2] < (unint64_t)&v29[v21 - v30])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, (unint64_t)&v29[v21 - v30], 1);
        v21 = a1[1];
      }
      if ((unint64_t)v29 > v28)
        goto LABEL_19;
    }
    v21 += v32;
    a1[1] = v21;
    v16 += 2;
    v22 -= 16;
  }
  while (v22);
  v16 = (const char **)v58;
  if (v58 != v60)
LABEL_97:
    free(v16);
LABEL_98:
  if (v61 != v63)
    free(v61);
  if (v64 != v66)
    free(v64);
  if (v67 != v69)
    free(v67);
  if (v70 != (char *)v72)
    free(v70);
}

uint64_t llvm::sys::path::has_root_name(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  size_t v3;
  void *v4;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  unsigned int v11;
  int v13;
  void *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  _QWORD v20[17];

  v2 = a2;
  v20[16] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = xmmword_181236BB0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (void *)*this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v13 = (*this)[23];
        if (v13 >= 0)
          v4 = (void *)*this;
        else
          v4 = *(void **)*this;
        if (v13 >= 0)
          v3 = *((unsigned __int8 *)*this + 23);
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
      case 6:
        v4 = (void *)*this;
        v3 = (size_t)this[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v18);
    v4 = v18;
    v3 = v19;
  }
  llvm::sys::path::begin((unint64_t)v4, v3, v2, (uint64_t)&v14);
  if (v14 == v4 && v17 == v3)
  {
    v8 = 0;
    v9 = v18;
    if (v18 == v20)
      return v8;
    goto LABEL_24;
  }
  if (v16 < 3)
  {
    v7 = 0;
  }
  else
  {
    v6 = *v15;
    if (v6 == 47 || (v7 = 0, v2 >= 2) && v6 == 92)
      v7 = v15[1] == v6;
  }
  v10 = 0;
  if (v2 >= 2 && v16)
    v10 = v15[v16 - 1] == 58;
  v11 = v7 || v10;
  if (v16)
    v8 = v11;
  else
    v8 = 0;
  v9 = v18;
  if (v18 != v20)
LABEL_24:
    free(v9);
  return v8;
}

void llvm::sys::path::append(_QWORD *a1, _QWORD **a2, _QWORD **a3, const char **a4, _QWORD **a5)
{
  llvm::sys::path::append(a1, 0, a2, a3, a4, a5);
}

unsigned __int8 *llvm::sys::path::parent_path(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
    return 0;
  else
    return a1;
}

unint64_t `anonymous namespace'::parent_path_end(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  char *v10;
  uint64_t last_of;
  unint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  _BOOL4 v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t first_of;
  int v23;
  BOOL v24;
  _BOOL4 v25;
  int v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  char *v30;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned __int8 *v42;
  unint64_t v43;

  v42 = a1;
  v43 = a2;
  if (a2)
  {
    v6 = a2 - 1;
    v7 = a1[a2 - 1];
    if (v7 == 47 || a3 >= 2 && v7 == 92)
      goto LABEL_34;
  }
  else
  {
    v6 = -1;
  }
  v8 = a3 > 1;
  if (a3 <= 1)
    v9 = 1;
  else
    v9 = 2;
  if (a3 <= 1)
    v10 = "/";
  else
    v10 = "\\/";
  last_of = llvm::StringRef::find_last_of(&v42, (unsigned __int8 *)v10, v9, v6);
  if (a3 >= 2 && last_of == -1)
  {
    v12 = v43 - 2;
    if (v43 < v43 - 2)
      v12 = v43;
    while (v12)
    {
      last_of = v12 - 1;
      v13 = v42[--v12];
      if (v13 == 58)
        goto LABEL_19;
    }
    v6 = 0;
    goto LABEL_32;
  }
LABEL_19:
  if (last_of == -1)
  {
    v6 = 0;
    if (a2)
      goto LABEL_33;
    goto LABEL_95;
  }
  if (last_of == 1)
  {
    v6 = 0;
    v14 = *v42;
    v15 = a3 > 1 && v14 == 92;
    v16 = v15;
    if (v14 == 47 || v16)
    {
LABEL_32:
      if (a2)
        goto LABEL_33;
LABEL_95:
      v19 = 0;
      goto LABEL_96;
    }
  }
  v6 = last_of + 1;
  if (!a2)
    goto LABEL_95;
LABEL_33:
  v7 = a1[v6];
LABEL_34:
  v18 = a3 > 1 && v7 == 92;
  v19 = v7 == 47 || v18;
  v42 = a1;
  v43 = a2;
  v8 = a3 > 1;
  if (a3 >= 2 && a2 >= 3 && a1[1] == 58)
  {
    v20 = a1[2];
    v21 = 1;
    first_of = 2;
    if (v20 == 47 || v20 == 92)
      goto LABEL_83;
  }
  v23 = *a1;
  if (a2 >= 4)
  {
    v24 = a3 > 1 && v23 == 92;
    v25 = v24;
    if ((v23 == 47 || v25) && v23 == a1[1])
    {
      v26 = a1[2];
      v27 = a3 > 1 && v26 == 92;
      v28 = v27;
      if (v26 != 47 && !v28)
      {
        if (a3 <= 1)
          v29 = 1;
        else
          v29 = 2;
        if (a3 <= 1)
          v30 = "/";
        else
          v30 = "\\/";
        first_of = llvm::StringRef::find_first_of(&v42, (unsigned __int8 *)v30, v29, 2uLL);
        if (first_of == -1)
          goto LABEL_96;
LABEL_84:
        if (v6 >= first_of)
          v33 = first_of;
        else
          v33 = v6;
        while (v6 > first_of)
        {
          v34 = v6 - 1;
          v35 = a1[v6 - 1];
          v36 = v35 == 92 && v8;
          --v6;
          if (v35 != 47)
          {
            v6 = v34;
            if (!v36)
            {
              v33 = v34 + 1;
              goto LABEL_105;
            }
          }
        }
        goto LABEL_105;
      }
    }
  }
  first_of = 0;
  v32 = a3 > 1 && v23 == 92;
  if (v23 == 47 || v32)
  {
    v21 = a3 > 1;
LABEL_83:
    v8 = v21;
    goto LABEL_84;
  }
LABEL_96:
  while (v6)
  {
    v37 = v6 - 1;
    v38 = a1[v6 - 1];
    v39 = v38 == 92 && v8;
    --v6;
    if (v38 != 47)
    {
      v6 = v37;
      if (!v39)
      {
        v33 = v37 + 1;
        goto LABEL_104;
      }
    }
  }
  v33 = 0;
LABEL_104:
  first_of = -1;
LABEL_105:
  if (v33 == first_of)
    v40 = v19;
  else
    v40 = 1;
  if (v40)
    return v33;
  else
    return first_of + 1;
}

void llvm::SmallVectorImpl<char>::swap(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t i;
  uint64_t v14;
  char v15;
  unint64_t v16;

  if (a1 == a2)
    return;
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 3 && (_QWORD *)*a2 != a2 + 3)
  {
    v5 = a1[1];
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *a2 = v4;
    a2[1] = v5;
    v7 = a1[2];
    a1[2] = a2[2];
    a2[2] = v7;
    return;
  }
  v8 = a2[1];
  if (a1[2] < v8)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v8, 1);
    v9 = a1[1];
    if (a2[2] >= v9)
    {
LABEL_7:
      v10 = a2[1];
      if (v9 >= v10)
        v11 = a2[1];
      else
        v11 = v9;
      if (!v11)
        goto LABEL_11;
      goto LABEL_20;
    }
  }
  else
  {
    v9 = a1[1];
    if (a2[2] >= v9)
      goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v9, 1);
  v9 = a1[1];
  v10 = a2[1];
  if (v9 >= v10)
    v11 = a2[1];
  else
    v11 = a1[1];
  if (!v11)
  {
LABEL_11:
    v12 = v9 - v10;
    if (v9 > v10)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_20:
  for (i = 0; i != v11; ++i)
  {
    v14 = *a2;
    v15 = *(_BYTE *)(*a1 + i);
    *(_BYTE *)(*a1 + i) = *(_BYTE *)(*a2 + i);
    *(_BYTE *)(v14 + i) = v15;
  }
  v9 = a1[1];
  v10 = a2[1];
  v12 = v9 - v10;
  if (v9 > v10)
  {
LABEL_12:
    if (v11 != v9)
    {
      memcpy((void *)(*a2 + v10), (const void *)(*a1 + v11), *a1 + v9 - (*a1 + v11));
      v10 = a2[1];
    }
    a2[1] = v12 + v10;
    a1[1] = v11;
    return;
  }
LABEL_23:
  v16 = v10 - v9;
  if (v10 > v9)
  {
    if (v11 != v10)
    {
      memcpy((void *)(*a1 + v9), (const void *)(*a2 + v11), *a2 + v10 - (*a2 + v11));
      v9 = a1[1];
    }
    a1[1] = v16 + v9;
    a2[1] = v11;
  }
}

void llvm::sys::path::native(void **a1, unsigned int a2)
{
  unint64_t v2;
  char *v4;
  char v5;
  int v6;
  char *v7;
  _BYTE *v8;
  unint64_t v9;
  int8x8_t v10;
  int v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  size_t v19;
  void *__src;
  __int128 v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t)a1[1];
  if (!v2)
    return;
  v4 = (char *)*a1;
  if (a2 > 1)
  {
    if (a2 == 3)
      v5 = 92;
    else
      v5 = 47;
    do
    {
      v6 = *v4;
      if (v6 == 92 || v6 == 47)
        *v4 = v5;
      ++v4;
      --v2;
    }
    while (v2);
    if (*(_BYTE *)*a1 != 126)
      return;
    if (a1[1] != (void *)1)
    {
      v11 = *((unsigned __int8 *)*a1 + 1);
      if (v11 != 92 && v11 != 47)
        return;
    }
    __src = v22;
    v21 = xmmword_181236BB0;
    llvm::sys::path::home_directory(&__src);
    v12 = (char *)*a1;
    v13 = a1[1];
    v14 = (uint64_t)v13 - 1;
    v15 = v21;
    v16 = (unint64_t)v13 + v21 - 1;
    if (*((_QWORD *)&v21 + 1) < v16)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v22, v16, 1);
      v15 = v21;
      if (v13 == (void *)1)
      {
LABEL_37:
        v17 = v15 + v14;
        *(_QWORD *)&v21 = v17;
        if (&__src == a1)
        {
LABEL_56:
          if (__src != v22)
            free(__src);
          return;
        }
LABEL_46:
        v19 = (size_t)a1[1];
        if (v19 >= v17)
        {
          if (v17)
            memmove(*a1, __src, v17);
        }
        else
        {
          if ((unint64_t)a1[2] >= v17)
          {
            if (v19)
              memmove(*a1, __src, (size_t)a1[1]);
          }
          else
          {
            a1[1] = 0;
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v17, 1);
            v19 = 0;
          }
          if (v19 != (_QWORD)v21)
            memcpy((char *)*a1 + v19, (char *)__src + v19, v21 - v19);
        }
        a1[1] = (void *)v17;
        goto LABEL_56;
      }
    }
    else if (v13 == (void *)1)
    {
      goto LABEL_37;
    }
    memcpy((char *)__src + v15, v12 + 1, (size_t)v13 - 1);
    v17 = v21 + v14;
    *(_QWORD *)&v21 = v17;
    if (&__src == a1)
      goto LABEL_56;
    goto LABEL_46;
  }
  v7 = (char *)*a1;
  if (v2 < 8)
  {
LABEL_40:
    v18 = &v4[v2];
    do
    {
      if (*v7 == 92)
        *v7 = 47;
      ++v7;
    }
    while (v7 != v18);
    return;
  }
  v7 = &v4[v2 & 0xFFFFFFFFFFFFFFF8];
  v8 = v4 + 3;
  v9 = v2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v10 = vceq_s8(*(int8x8_t *)(v8 - 3), (int8x8_t)0x5C5C5C5C5C5C5C5CLL);
    if ((v10.i8[0] & 1) != 0)
    {
      *(v8 - 3) = 47;
      if ((v10.i8[1] & 1) == 0)
      {
LABEL_16:
        if ((v10.i8[2] & 1) == 0)
          goto LABEL_17;
        goto LABEL_25;
      }
    }
    else if ((v10.i8[1] & 1) == 0)
    {
      goto LABEL_16;
    }
    *(v8 - 2) = 47;
    if ((v10.i8[2] & 1) == 0)
    {
LABEL_17:
      if ((v10.i8[3] & 1) == 0)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    *(v8 - 1) = 47;
    if ((v10.i8[3] & 1) == 0)
    {
LABEL_18:
      if ((v10.i8[4] & 1) == 0)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    *v8 = 47;
    if ((v10.i8[4] & 1) == 0)
    {
LABEL_19:
      if ((v10.i8[5] & 1) == 0)
        goto LABEL_20;
      goto LABEL_28;
    }
LABEL_27:
    v8[1] = 47;
    if ((v10.i8[5] & 1) == 0)
    {
LABEL_20:
      if ((v10.i8[6] & 1) != 0)
        goto LABEL_29;
      goto LABEL_21;
    }
LABEL_28:
    v8[2] = 47;
    if ((v10.i8[6] & 1) != 0)
    {
LABEL_29:
      v8[3] = 47;
      if ((v10.i8[7] & 1) == 0)
        goto LABEL_13;
      goto LABEL_30;
    }
LABEL_21:
    if ((v10.i8[7] & 1) == 0)
      goto LABEL_13;
LABEL_30:
    v8[4] = 47;
LABEL_13:
    v8 += 8;
    v9 -= 8;
  }
  while (v9);
  if (v2 != (v2 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_40;
}

uint64_t llvm::sys::path::home_directory(_QWORD *a1)
{
  char *v2;
  char *pw_dir;
  void *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  size_t v12;
  uid_t v13;
  passwd *v14;
  passwd v15;

  v2 = getenv("HOME");
  if (v2)
  {
    pw_dir = v2;
    v4 = 0;
  }
  else
  {
    v11 = sysconf(71);
    if (v11 >= 1)
      v12 = v11;
    else
      v12 = 0x4000;
    v4 = operator new[](v12);
    bzero(v4, v12);
    v14 = 0;
    v13 = getuid();
    getpwuid_r(v13, &v15, (char *)v4, v12, &v14);
    if (!v14 || (pw_dir = v14->pw_dir) == 0)
    {
      v9 = 0;
      goto LABEL_15;
    }
  }
  a1[1] = 0;
  v5 = strlen(pw_dir);
  v6 = v5;
  if (a1[2] >= v5)
  {
    v7 = 0;
    v8 = 0;
    if (!v5)
      goto LABEL_7;
  }
  else
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v5, 1);
    v7 = a1[1];
  }
  memcpy((void *)(*a1 + v7), pw_dir, v6);
  v8 = a1[1];
LABEL_7:
  a1[1] = v8 + v6;
  v9 = 1;
  if (!v4)
    return 1;
LABEL_15:
  operator delete[](v4);
  return v9;
}

uint64_t llvm::sys::path::filename(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v4[2];
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;

  v5 = 0;
  v6 = 0;
  v4[0] = a1;
  v4[1] = a2;
  v7 = a2;
  v8 = a3;
  llvm::sys::path::reverse_iterator::operator++(v4);
  return v5;
}

BOOL llvm::sys::path::has_root_directory(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  size_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v2 = a2;
  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_181236BB0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (void *)*this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v8 = (*this)[23];
        if (v8 >= 0)
          v4 = (void *)*this;
        else
          v4 = *(void **)*this;
        if (v8 >= 0)
          v3 = *((unsigned __int8 *)*this + 23);
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
      case 6:
        v4 = (void *)*this;
        v3 = (size_t)this[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    v4 = v9;
    v3 = v10;
  }
  llvm::sys::path::root_directory((unint64_t)v4, v3, v2);
  v6 = v5;
  if (v9 != v11)
    free(v9);
  return v6 != 0;
}

BOOL llvm::sys::path::has_parent_path(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  size_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  int v9;
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v2 = a2;
  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = xmmword_181236BB0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (unsigned __int8 *)*this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v9 = (*this)[23];
        if (v9 >= 0)
          v4 = (unsigned __int8 *)*this;
        else
          v4 = *(unsigned __int8 **)*this;
        if (v9 >= 0)
          v3 = *((unsigned __int8 *)*this + 23);
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
      case 6:
        v4 = (unsigned __int8 *)*this;
        v3 = (size_t)this[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v10);
    v4 = (unsigned __int8 *)v10;
    v3 = v11;
  }
  if (v10 != v12)
    free(v10);
  if (v3 >= v5)
    v6 = v5;
  else
    v6 = v3;
  return v5 != -1 && v6 != 0;
}

uint64_t llvm::sys::path::is_absolute(const char **this, const llvm::Twine *a2)
{
  size_t v3;
  const char *v4;
  _BOOL4 has_root_directory;
  int has_root_name;
  void *v7;
  int v9;
  const char *v10;
  size_t v11;
  __int16 v12;
  void *v13;
  __int128 v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = xmmword_181236BB0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = *this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v9 = (*this)[23];
        if (v9 >= 0)
          v4 = *this;
        else
          v4 = *(const char **)*this;
        if (v9 >= 0)
          v3 = *((unsigned __int8 *)*this + 23);
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
      case 6:
        v4 = *this;
        v3 = (size_t)this[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v13);
    v4 = (const char *)v13;
    v3 = v14;
  }
  v12 = 261;
  v10 = v4;
  v11 = v3;
  has_root_directory = llvm::sys::path::has_root_directory(&v10, a2);
  if (a2 < 2)
  {
    has_root_name = 1;
    v7 = v13;
    if (v13 == v15)
      return has_root_directory & has_root_name;
    goto LABEL_9;
  }
  v12 = 261;
  v10 = v4;
  v11 = v3;
  has_root_name = llvm::sys::path::has_root_name(&v10, a2);
  v7 = v13;
  if (v13 != v15)
LABEL_9:
    free(v7);
  return has_root_directory & has_root_name;
}

uint64_t llvm::sys::path::is_relative(const char **this, const llvm::Twine *a2)
{
  return llvm::sys::path::is_absolute(this, a2) ^ 1;
}

uint64_t llvm::sys::fs::status(llvm::sys::fs *this, const stat *a2, llvm::sys::fs::file_status *a3)
{
  int v3;
  _QWORD *v5;
  llvm::sys::fs *v6;
  llvm::sys::fs::file_status *v7;
  uint64_t v8;
  int v10[36];
  void *v11;
  __int128 v12;
  _QWORD v13[17];

  v3 = (int)a3;
  v13[16] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = xmmword_181236BB0;
  v5 = llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v11);
  if (v3)
    v6 = (llvm::sys::fs *)MEMORY[0x1E0C854D8](v5, v10);
  else
    v6 = (llvm::sys::fs *)MEMORY[0x1E0C83C40](v5, v10);
  v8 = llvm::sys::fs::fillStatus(v6, v10, a2, v7);
  if (v11 != v13)
    free(v11);
  return v8;
}

{
  llvm::sys::fs *v4;
  llvm::sys::fs::file_status *v5;
  stat v7;

  v4 = (llvm::sys::fs *)fstat((int)this, &v7);
  return llvm::sys::fs::fillStatus(v4, &v7.st_dev, a2, v5);
}

uint64_t llvm::sys::fs::file_status::getUniqueID(llvm::sys::fs::file_status *this)
{
  return *((int *)this + 12);
}

void llvm::sys::fs::createUniquePath(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  _QWORD *v15[4];
  __int16 v16;
  void *v17;
  __int128 v18;
  _WORD v19[64];
  char *v20;
  __int128 v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v20 = (char *)v22;
  v21 = xmmword_181236BB0;
  llvm::Twine::toVector(a1, (uint64_t)&v20);
  if (a3)
  {
    v19[4] = 261;
    v17 = v20;
    *(_QWORD *)&v18 = v21;
    if ((llvm::sys::path::is_absolute((const char **)&v17, 0) & 1) == 0)
    {
      v17 = v19;
      v18 = xmmword_181236BB0;
      llvm::sys::path::system_temp_directory(1, (uint64_t)&v17);
      v16 = 261;
      v15[0] = v20;
      v15[1] = (_QWORD *)v21;
      v14 = 257;
      v12 = 257;
      v10 = 257;
      llvm::sys::path::append(&v17, 0, v15, &v13, &v11, &v9);
      llvm::SmallVectorImpl<char>::swap(&v20, &v17);
      if (v17 != v19)
        free(v17);
    }
  }
  if (&v20 == (char **)a2)
  {
    v5 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v5 = v21;
    v6 = *(_QWORD *)(a2 + 8);
    if (v6 >= (unint64_t)v21)
    {
      if ((_QWORD)v21)
        memmove(*(void **)a2, v20, v21);
    }
    else
    {
      if (*(_QWORD *)(a2 + 16) >= (unint64_t)v21)
      {
        if (v6)
          memmove(*(void **)a2, v20, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, (void *)(a2 + 24), v5, 1);
        v6 = 0;
      }
      if (v6 != (_QWORD)v21)
        memcpy((void *)(*(_QWORD *)a2 + v6), &v20[v6], v21 - v6);
    }
    *(_QWORD *)(a2 + 8) = v5;
  }
  if (v5 + 1 > *(_QWORD *)(a2 + 16))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, (void *)(a2 + 24), v5 + 1, 1);
    *(_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)) = 0;
    v7 = v21;
    if (!(_DWORD)v21)
      goto LABEL_24;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a2 + v5) = 0;
    v7 = v21;
    if (!(_DWORD)v21)
      goto LABEL_24;
  }
  v8 = 0;
  do
  {
    if (v20[v8] == 37)
      *(_BYTE *)(*(_QWORD *)a2 + v8) = a0123456789abcd_0[llvm::sys::Process::GetRandomNumber() & 0xF];
    ++v8;
  }
  while (v7 != v8);
LABEL_24:
  if (v20 != (char *)v22)
    free(v20);
}

void llvm::sys::path::system_temp_directory(int a1, uint64_t a2)
{
  int v3;
  char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;

  v3 = 65537;
  *(_QWORD *)(a2 + 8) = 0;
  if (a1)
  {
    v4 = getenv("TMPDIR");
    if (v4 || (v4 = getenv("TMP")) != 0 || (v4 = getenv("TEMP")) != 0 || (v4 = getenv("TEMPDIR")) != 0)
    {
      v5 = strlen(v4);
      v6 = v5;
      if (*(_QWORD *)(a2 + 16) >= v5)
      {
        v7 = 0;
        v12 = 0;
        if (!v5)
        {
LABEL_24:
          *(_QWORD *)(a2 + 8) = v12 + v6;
          return;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, (void *)(a2 + 24), v5, 1);
        v7 = *(_QWORD *)(a2 + 8);
      }
      memcpy((void *)(*(_QWORD *)a2 + v7), v4, v6);
      v12 = *(_QWORD *)(a2 + 8);
      goto LABEL_24;
    }
  }
  else
  {
    v3 = 65538;
  }
  v8 = confstr(v3, 0, 0);
  v9 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_26;
  v10 = v8;
  while (v9 == v10)
  {
    v11 = confstr(v3, *(char **)a2, v9);
    if (!v11)
      goto LABEL_25;
LABEL_20:
    v10 = v11;
    v9 = *(_QWORD *)(a2 + 8);
    if (v11 == v9)
    {
      *(_QWORD *)(a2 + 8) = v11 - 1;
      return;
    }
  }
  if (v9 <= v10)
  {
    if (*(_QWORD *)(a2 + 16) < v10)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, (void *)(a2 + 24), v10, 1);
      v9 = *(_QWORD *)(a2 + 8);
    }
    if (v10 != v9)
      bzero((void *)(*(_QWORD *)a2 + v9), v10 - v9);
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = confstr(v3, *(char **)a2, v10);
  if (v11)
    goto LABEL_20;
LABEL_25:
  v9 = 0;
  *(_QWORD *)(a2 + 8) = 0;
LABEL_26:
  if (*(_QWORD *)(a2 + 16) < v9 + 9)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, (void *)(a2 + 24), v9 + 9, 1);
    v9 = *(_QWORD *)(a2 + 8);
  }
  v13 = *(_QWORD *)a2 + v9;
  *(_QWORD *)v13 = *(_QWORD *)"/var/tmp/";
  *(_BYTE *)(v13 + 8) = 47;
  *(_QWORD *)(a2 + 8) += 9;
}

void createUniqueEntity(uint64_t a1, int *a2, _QWORD *a3, int a4, int a5, int a6, uint64_t a7)
{
  int v14;
  _BYTE *v15;
  char v16;
  const std::error_category *v17;
  int v18;
  const std::error_category *v19;
  const std::error_category *v20;
  const std::error_category *v21;
  int v22;
  _BYTE *v23;
  char v24;
  const char *v25;
  const std::error_category *v26;
  int v27;
  void *v28;
  int v29;
  _BYTE *v30;
  char v31;
  const std::error_category *v32;
  int directory;
  const std::error_category *v34;
  const std::error_category *v35;
  unsigned __int8 v36[32];
  __int16 v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  std::system_category();
  if (a5 == 2)
  {
    v22 = 129;
    while (1)
    {
      llvm::sys::fs::createUniquePath(a1, (uint64_t)a3, a4);
      v23 = (_BYTE *)*a3;
      v37 = 257;
      if (*v23)
      {
        *(_QWORD *)v36 = v23;
        v24 = 3;
      }
      else
      {
        v24 = 1;
      }
      LOBYTE(v37) = v24;
      v38 = &v40;
      v39 = xmmword_181236BB0;
      v25 = (const char *)llvm::Twine::toNullTerminatedStringRef(v36, &v38);
      if (access(v25, 0) == -1)
        break;
      v26 = std::system_category();
      v27 = 0;
      v28 = v38;
      if (v38 != &v40)
        goto LABEL_21;
LABEL_22:
      if (v26 == std::generic_category() && v27 == 2)
        goto LABEL_39;
      if (!v27 && --v22 >= 2)
        continue;
      return;
    }
    v27 = *__error();
    v26 = std::generic_category();
    v28 = v38;
    if (v38 == &v40)
      goto LABEL_22;
LABEL_21:
    free(v28);
    goto LABEL_22;
  }
  if (a5 == 1)
  {
    v14 = 129;
    while (1)
    {
      llvm::sys::fs::createUniquePath(a1, (uint64_t)a3, a4);
      v15 = (_BYTE *)*a3;
      v41 = 257;
      if (*v15)
      {
        v38 = v15;
        v16 = 3;
      }
      else
      {
        v16 = 1;
      }
      LOBYTE(v41) = v16;
      v18 = llvm::sys::fs::openFile((unsigned __int8 *)&v38, a2, 1, 3, a6, a7);
      if (!v18)
        break;
      v19 = v17;
      v20 = std::generic_category();
      if (v18 == 17 && v20 == v19)
      {
        if (--v14 <= 1)
          return;
      }
      else
      {
        v21 = std::generic_category();
        if (v18 != 13)
          return;
        if (v21 != v19)
          return;
        if (--v14 <= 1)
          return;
      }
    }
  }
  else
  {
    if (a5)
    {
      llvm::sys::fs::createUniquePath(a1, (uint64_t)a3, a4);
      __break(1u);
      return;
    }
    v29 = 129;
    while (1)
    {
      llvm::sys::fs::createUniquePath(a1, (uint64_t)a3, a4);
      v30 = (_BYTE *)*a3;
      v41 = 257;
      if (*v30)
      {
        v38 = v30;
        v31 = 3;
      }
      else
      {
        v31 = 1;
      }
      LOBYTE(v41) = v31;
      directory = llvm::sys::fs::create_directory((unsigned __int8 *)&v38, 0, 0x1F8u);
      if (!directory)
        break;
      v34 = v32;
      v35 = std::generic_category();
      if (directory == 17 && v35 == v34 && --v29 > 1)
        continue;
      return;
    }
  }
LABEL_39:
  std::system_category();
}

uint64_t llvm::sys::fs::createTemporaryFile(__int128 *a1, __int128 *a2, uint64_t a3, int *a4, _QWORD *a5, int a6)
{
  return llvm::sys::fs::createTemporaryFile(a1, a2, a3, a4, a5, 1, a6);
}

uint64_t llvm::sys::fs::createTemporaryFile(__int128 *a1, __int128 *a2, uint64_t a3, int *a4, _QWORD *a5, int a6, int a7)
{
  const char *v11;
  int v12;
  int v13;
  __int16 v14;
  __int128 *v15;
  uint64_t v16;
  BOOL v17;
  __int128 *v18;
  __int128 *v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  __int16 v33;
  _QWORD *v34;
  char v35;
  char v36;
  void *v37;
  __int128 v38;
  _QWORD v39[17];

  v39[16] = *MEMORY[0x1E0C80C00];
  v11 = "-%%%%%%";
  if (a3)
    v11 = "-%%%%%%.";
  if (*v11)
    v12 = 3;
  else
    v12 = 1;
  v13 = *((unsigned __int8 *)a1 + 32);
  if (v13 == 1)
  {
    *(_QWORD *)&v26 = v11;
    LOBYTE(v28) = v12;
    BYTE1(v28) = 1;
    if (v12 != 1)
      goto LABEL_10;
    goto LABEL_20;
  }
  if (!*((_BYTE *)a1 + 32))
  {
    LOWORD(v28) = 256;
LABEL_11:
    v14 = 256;
LABEL_21:
    v33 = v14;
    goto LABEL_27;
  }
  if (!*v11)
  {
    v25 = a1[1];
    v26 = *a1;
    v27 = v25;
    v28 = *((_QWORD *)a1 + 4);
    v12 = v28;
    if (v28 != 1)
      goto LABEL_10;
LABEL_20:
    v29 = a2;
    v30 = a3;
    v14 = 261;
    goto LABEL_21;
  }
  v15 = *(__int128 **)a1;
  v16 = *((_QWORD *)a1 + 1);
  v17 = *((_BYTE *)a1 + 33) == 1;
  BYTE1(v28) = v12;
  if (v17)
    v12 = v13;
  else
    v12 = 2;
  if (v17)
    v18 = v15;
  else
    v18 = a1;
  *(_QWORD *)&v26 = v18;
  *((_QWORD *)&v26 + 1) = v16;
  *(_QWORD *)&v27 = v11;
  LOBYTE(v28) = v12;
LABEL_10:
  if (!v12)
    goto LABEL_11;
  if (BYTE1(v28) != 1)
    LOBYTE(v12) = 2;
  v19 = &v26;
  if (BYTE1(v28) == 1)
    v19 = (__int128 *)v26;
  v29 = v19;
  v30 = *((_QWORD *)&v26 + 1);
  v31 = a2;
  v32 = a3;
  LOBYTE(v33) = v12;
  HIBYTE(v33) = 5;
LABEL_27:
  v37 = v39;
  v38 = xmmword_181236BB0;
  v20 = llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v29, &v37);
  v21 = 1;
  v36 = 1;
  if (*(_BYTE *)v20)
  {
    v34 = v20;
    v21 = 3;
  }
  v35 = v21;
  createUniqueEntity((uint64_t)&v34, a4, a5, 1, a6, a7, 384);
  v23 = v22;
  if (v37 != v39)
    free(v37);
  return v23;
}

uint64_t llvm::sys::fs::createTemporaryFile(__int128 *a1, __int128 *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  v7 = 0;
  result = llvm::sys::fs::createTemporaryFile(a1, a2, a3, &v7, a4, 1, a5);
  v6 = result;
  if (!(_DWORD)result)
  {
    close(v7);
    return v6;
  }
  return result;
}

void llvm::sys::fs::make_absolute(uint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  BOOL has_root_directory;
  char has_root_name;
  char v8;
  int v9;
  unint64_t v10;
  unint64_t first_of;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const char *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27[4];
  __int16 v28;
  _QWORD *v29[4];
  __int16 v30;
  _QWORD *v31[4];
  __int16 v32;
  _QWORD *v33[4];
  __int16 v34;
  void *v35;
  __int128 v36;
  _WORD v37[64];
  char *v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = (unint64_t)a2[1];
  v41 = 261;
  v38 = v5;
  *(_QWORD *)&v39 = v4;
  has_root_directory = llvm::sys::path::has_root_directory((const char **)&v38, 0);
  v41 = 261;
  v38 = v5;
  *(_QWORD *)&v39 = v4;
  has_root_name = llvm::sys::path::has_root_name((const char **)&v38, 0);
  if (!has_root_directory)
  {
    v8 = has_root_name;
    v38 = (char *)&v40;
    v39 = xmmword_181236BB0;
    llvm::Twine::toVector(a1, (uint64_t)&v38);
    if ((v8 & 1) == 0)
    {
      v37[4] = 261;
      v35 = v5;
      *(_QWORD *)&v36 = v4;
      v34 = 257;
      v32 = 257;
      v30 = 257;
      llvm::sys::path::append(&v38, 0, (_QWORD **)&v35, v33, (const char **)v31, v29);
      llvm::SmallVectorImpl<char>::swap(a2, &v38);
LABEL_30:
      if (v38 != (char *)&v40)
        free(v38);
      return;
    }
    v35 = v5;
    *(_QWORD *)&v36 = v4;
    if (!v4)
      goto LABEL_21;
    v9 = *v5;
    if (v4 < 3)
    {
      if (v9 == 47)
        goto LABEL_21;
    }
    else if (v9 == 47)
    {
      if (v5[1] != 47 || v5[2] == 47)
        goto LABEL_21;
      v10 = 2;
      goto LABEL_12;
    }
    v10 = 0;
LABEL_12:
    first_of = llvm::StringRef::find_first_of(&v35, "/", 1, v10);
    v12 = v36;
    if ((unint64_t)v36 >= first_of)
      v12 = first_of;
    if (v12 >= 3 && *(_BYTE *)v35 == 47)
    {
      v13 = *((unsigned __int8 *)v35 + 1);
      if (v13 != 47)
        v12 = 0;
      v26 = (_QWORD *)v12;
      if (v13 == 47)
        v14 = v35;
      else
        v14 = 0;
      goto LABEL_22;
    }
LABEL_21:
    v26 = 0;
    v14 = 0;
LABEL_22:
    v15 = (_QWORD *)llvm::sys::path::root_directory((unint64_t)v38, v39, 0);
    v17 = v16;
    v18 = v38;
    v19 = v39;
    llvm::sys::path::root_path((unint64_t)v38, v39, 0);
    if (v19 >= v20)
      v21 = v20;
    else
      v21 = v19;
    v22 = &v18[v21];
    v23 = (_QWORD *)(v19 - v21);
    llvm::sys::path::root_path((unint64_t)v5, v4, 0);
    v36 = xmmword_181236BB0;
    v35 = v37;
    if (v4 >= v24)
      v25 = v24;
    else
      v25 = v4;
    v34 = 261;
    v33[0] = v14;
    v33[1] = v26;
    v32 = 261;
    v31[0] = v15;
    v31[1] = v17;
    v30 = 261;
    v29[0] = v22;
    v29[1] = v23;
    v28 = 261;
    v27[0] = &v5[v25];
    v27[1] = (_QWORD *)(v4 - v25);
    llvm::sys::path::append(&v35, 0, v33, v31, (const char **)v29, v27);
    llvm::SmallVectorImpl<char>::swap(a2, &v35);
    if (v35 != v37)
      free(v35);
    goto LABEL_30;
  }
}

uint64_t llvm::sys::fs::make_absolute(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v6[4];
  __int16 v7;
  void *v8;
  __int128 v9;
  _WORD v10[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10[4] = 261;
  v2 = *(_QWORD *)(a1 + 8);
  v8 = *(void **)a1;
  *(_QWORD *)&v9 = v2;
  if (!llvm::sys::path::is_absolute((const char **)&v8, 0))
  {
    v8 = v10;
    v9 = xmmword_181236BB0;
    v3 = llvm::sys::fs::current_path((uint64_t)&v8);
    if ((_DWORD)v3)
    {
      v4 = v8;
      if (v8 == v10)
        return v3;
    }
    else
    {
      v7 = 261;
      v6[0] = v8;
      v6[1] = v9;
      llvm::sys::fs::make_absolute((uint64_t)v6, (char **)a1);
      std::system_category();
      v4 = v8;
      if (v8 == v10)
        return v3;
    }
    free(v4);
    return v3;
  }
  std::system_category();
  return 0;
}

uint64_t llvm::sys::fs::current_path(uint64_t a1)
{
  char *v2;
  const char *v3;
  char v4;
  char v5;
  const char *v6;
  llvm::sys::fs *v7;
  llvm::sys::fs::file_status *v8;
  int v9;
  const char *v10;
  llvm::sys::fs *v11;
  llvm::sys::fs::file_status *v12;
  int v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  size_t v20;
  size_t v21;
  const char *v23;
  __int16 v24;
  const char *v25;
  char v26;
  char v27;
  char *v28;
  char v29;
  char v30;
  stat v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD v34[17];

  v34[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v2 = getenv("PWD");
  v31.st_blksize = 0;
  *(_QWORD *)&v31.st_gen = 0;
  LODWORD(v31.st_mtimespec.tv_sec) = 0;
  v31.st_mtimespec.tv_nsec = 0;
  if (v2)
  {
    v3 = v2;
    v4 = 1;
    v30 = 1;
    if (*v2)
    {
      v28 = v2;
      v4 = 3;
    }
    v29 = v4;
    if (llvm::sys::path::is_absolute((const char **)&v28, 0))
    {
      v5 = 1;
      v27 = 1;
      if (*v3)
      {
        v25 = v3;
        v5 = 3;
      }
      v26 = v5;
      v32 = v34;
      v33 = xmmword_181236BB0;
      v6 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v25, &v32);
      v7 = (llvm::sys::fs *)stat(v6, (stat *)v31.st_qspare);
      v9 = llvm::sys::fs::fillStatus(v7, (int *)v31.st_qspare, (const stat *)&v31.st_ctimespec, v8);
      if (v32 != v34)
        free(v32);
      if (!v9)
      {
        v23 = ".";
        v24 = 259;
        v32 = v34;
        v33 = xmmword_181236BB0;
        v10 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v23, &v32);
        v11 = (llvm::sys::fs *)stat(v10, (stat *)v31.st_qspare);
        v13 = llvm::sys::fs::fillStatus(v11, (int *)v31.st_qspare, &v31, v12);
        if (v32 != v34)
          free(v32);
        if (!v13
          && v31.st_blksize == LODWORD(v31.st_mtimespec.tv_sec)
          && *(_QWORD *)&v31.st_gen == v31.st_mtimespec.tv_nsec)
        {
          v14 = strlen(v3);
          v15 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(a1 + 16) < v15 + v14)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v15 + v14, 1);
            v15 = *(_QWORD *)(a1 + 8);
          }
          if (v14)
          {
            memcpy((void *)(*(_QWORD *)a1 + v15), v3, v14);
            v15 = *(_QWORD *)(a1 + 8);
          }
          *(_QWORD *)(a1 + 8) = v15 + v14;
          goto LABEL_27;
        }
      }
    }
  }
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != 1024)
  {
    if (v16 <= 0x400 && *(_QWORD *)(a1 + 16) <= 0x3FFuLL)
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), 0x400uLL, 1);
    *(_QWORD *)(a1 + 8) = 1024;
  }
  if (getcwd(*(char **)a1, 0x400uLL))
  {
LABEL_26:
    *(_QWORD *)(a1 + 8) = strlen(*(const char **)a1);
LABEL_27:
    std::system_category();
    return 0;
  }
  while (*__error() == 12)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(a1 + 16);
    v21 = 2 * v19;
    if (v20 != 2 * v19)
    {
      if (v19 >= 1 && v20 <= v21)
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), 2 * v19, 1);
      *(_QWORD *)(a1 + 8) = v21;
    }
    if (getcwd(*(char **)a1, v21))
      goto LABEL_26;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *__error();
  std::generic_category();
  return v17;
}

uint64_t llvm::sys::fs::create_directory(unsigned __int8 *a1, char a2, mode_t a3)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_181236BB0;
  v5 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, &v9);
  if (mkdir(v5, a3) == -1 && (*__error() != 17 || (a2 & 1) == 0))
  {
    v6 = *__error();
    std::generic_category();
    v7 = v9;
    if (v9 == v11)
      return v6;
    goto LABEL_5;
  }
  std::system_category();
  v6 = 0;
  v7 = v9;
  if (v9 != v11)
LABEL_5:
    free(v7);
  return v6;
}

unint64_t llvm::sys::fs::openFileForRead(unsigned __int8 *a1, int *a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v10;
  uint64_t v11;
  char __s[1024];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = llvm::sys::fs::openFile(a1, a2, 2, 1, a3, 438);
  v7 = v6;
  if ((_DWORD)v6)
  {
    v8 = v6 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (a4)
    {
      a4[1] = 0;
      if (fcntl(*a2, 50, __s) != -1)
      {
        v10 = strlen(__s);
        v11 = a4[1];
        if (a4[2] < v11 + v10)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a4, a4 + 3, v11 + v10, 1);
          v11 = a4[1];
        }
        if (v10)
        {
          memcpy((void *)(*a4 + v11), __s, v10);
          v11 = a4[1];
        }
        a4[1] = v11 + v10;
      }
    }
    std::system_category();
    v8 = 0;
  }
  return v8 | v7;
}

uint64_t llvm::sys::fs::is_directory(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  const char *v4;
  llvm::sys::fs *v5;
  llvm::sys::fs::file_status *v6;
  uint64_t v7;
  _OWORD v9[4];
  stat v10;
  void *v11;
  __int128 v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  memset(v9, 0, 44);
  v11 = v13;
  v12 = xmmword_181236BB0;
  v4 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v11);
  v5 = (llvm::sys::fs *)stat(v4, &v10);
  v7 = llvm::sys::fs::fillStatus(v5, &v10.st_dev, (const stat *)v9, v6);
  if (v11 != v13)
    free(v11);
  if (!(_DWORD)v7)
  {
    *(_BYTE *)a2 = DWORD2(v9[2]) == 3;
    std::system_category();
  }
  return v7;
}

void llvm::sys::fs::directory_entry::replace_filename(uint64_t a1, _QWORD **a2, int a3, __int128 *a4)
{
  int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  void *v17;
  __int128 *p_dst;
  __int128 v19;
  __int128 v20;
  size_t v21;
  size_t v22;
  _QWORD *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  __int128 __dst;
  unint64_t v28;
  __int16 v29;
  void *__src;
  size_t __len[2];
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  v8 = *(char *)(a1 + 23);
  if (v8 >= 0)
    v9 = (unsigned __int8 *)a1;
  else
    v9 = *(unsigned __int8 **)a1;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  v12 = 0;
  if (v10 >= v11)
    v13 = v11;
  else
    v13 = v10;
  if (v11 == -1)
    v14 = 0;
  else
    v14 = v13;
  if (v11 == -1)
    v15 = 0;
  else
    v15 = v9;
  __src = v32;
  *(_OWORD *)__len = xmmword_181236BB0;
  if (v14 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v32, v14, 1);
    v12 = __len[0];
  }
  if (v14)
  {
    memcpy((char *)__src + v12, v15, v14);
    v12 = __len[0];
  }
  __len[0] = v12 + v14;
  v29 = 257;
  v26 = 257;
  v24 = 257;
  llvm::sys::path::append(&__src, 0, a2, (_QWORD **)&__dst, &v25, &v23);
  v16 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v17 = __src;
  if (__len[0] >= 0x17)
  {
    v21 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v21 = __len[0] | 7;
    v22 = v21 + 1;
    p_dst = (__int128 *)operator new(v21 + 1);
    *((_QWORD *)&__dst + 1) = v16;
    v28 = v22 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_30:
    memmove(p_dst, v17, v16);
    *((_BYTE *)p_dst + v16) = 0;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_31;
  }
  HIBYTE(v28) = __len[0];
  p_dst = &__dst;
  if (__len[0])
    goto LABEL_30;
  LOBYTE(__dst) = 0;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_31:
  operator delete(*(void **)a1);
LABEL_24:
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v28;
  *(_DWORD *)(a1 + 24) = a3;
  v19 = *a4;
  v20 = a4[2];
  *(_OWORD *)(a1 + 48) = a4[1];
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 32) = v19;
  if (__src != v32)
    free(__src);
}

ssize_t llvm::sys::fs::readNativeFileToEOF@<X0>(int a1@<W0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  void *v14;
  ssize_t result;
  unint64_t v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  std::error_code v20;

  v8 = a2[1];
  v9 = a2 + 3;
  if (a3 >= 0x7FFFFFFF)
    v10 = 0x7FFFFFFFLL;
  else
    v10 = a3;
  v11 = a2[1];
  v12 = v8 + a3;
  v13 = v8 > v8 + a3;
  if (v8 != v8 + a3)
  {
LABEL_5:
    if (!v13 && a2[2] < v12)
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, v9, v12, 1);
    a2[1] = v12;
  }
  while (1)
  {
    v14 = (void *)(*a2 + v11);
    while (1)
    {
      *__error() = 0;
      result = read(a1, v14, v10);
      if (result != -1)
        break;
      if (*__error() != 4)
      {
        v17 = (llvm *)*__error();
        *(_QWORD *)&v20.__val_ = std::generic_category();
        result = (ssize_t)llvm::errorCodeToError(v17, v20, &v19);
        v18 = v19;
        goto LABEL_16;
      }
    }
    if (!result)
      break;
    v11 += result;
    v16 = a2[1];
    v12 = v11 + a3;
    v13 = v16 > v11 + a3;
    if (v16 != v11 + a3)
      goto LABEL_5;
  }
  v18 = 0;
LABEL_16:
  *a4 = v18;
  a2[1] = v11;
  return result;
}

unint64_t llvm::sys::fs::getMainExecutable@<X0>(_BYTE *a1@<X8>)
{
  unint64_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint32_t bufsize;
  char __s[1024];
  char buf[1024];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  bufsize = 1024;
  result = _NSGetExecutablePath(buf, &bufsize);
  if ((_DWORD)result || (result = (unint64_t)realpath_DARWIN_EXTSN(buf, __s)) == 0)
  {
    a1[23] = 0;
    *a1 = 0;
    return result;
  }
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v9;
    a1 = v9;
  }
  else
  {
    a1[23] = result;
    if (!result)
      goto LABEL_12;
  }
  result = (unint64_t)memcpy(a1, __s, v6);
LABEL_12:
  a1[v6] = 0;
  return result;
}

uint64_t llvm::sys::fs::basic_file_status::getLastModificationTime(llvm::sys::fs::basic_file_status *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 5);
  return v1 + 1000 * std::chrono::system_clock::from_time_t(*((_QWORD *)this + 1)).__d_.__rep_;
}

uint64_t llvm::sys::fs::set_current_path(llvm::sys::fs *this, const llvm::Twine *a2)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  void *v6;
  __int128 v7;
  _QWORD v8[17];

  v8[16] = *MEMORY[0x1E0C80C00];
  v6 = v8;
  v7 = xmmword_181236BB0;
  v2 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v6);
  if (chdir(v2) == -1)
  {
    v3 = *__error();
    std::generic_category();
    v4 = v6;
    if (v6 == v8)
      return v3;
    goto LABEL_3;
  }
  std::system_category();
  v3 = 0;
  v4 = v6;
  if (v6 != v8)
LABEL_3:
    free(v4);
  return v3;
}

uint64_t llvm::sys::fs::remove(llvm::sys::fs *this, const llvm::Twine *a2)
{
  char v2;
  const std::__fs::filesystem::path *v3;
  std::error_code *v4;
  unsigned int v5;
  int v6;
  void *v7;
  stat v9;
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v2 = (char)a2;
  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = xmmword_181236BB0;
  v3 = (const std::__fs::filesystem::path *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v10);
  if (lstat((const char *)v3, &v9))
  {
    if (*__error() != 2 || (v2 & 1) == 0)
      goto LABEL_4;
  }
  else
  {
    v6 = v9.st_mode & 0xF000;
    if (v6 != 0x4000 && v6 != 0x8000 && v6 != 40960)
    {
      v5 = 1;
LABEL_15:
      std::generic_category();
      v7 = v10;
      if (v10 == v12)
        return v5;
      goto LABEL_12;
    }
    if (remove(v3, v4) == -1 && (*__error() != 2 || (v2 & 1) == 0))
    {
LABEL_4:
      v5 = *__error();
      goto LABEL_15;
    }
  }
  std::system_category();
  v5 = 0;
  v7 = v10;
  if (v10 != v12)
LABEL_12:
    free(v7);
  return v5;
}

uint64_t llvm::sys::fs::is_local(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  std::string *p_p;
  int v5;
  int v6;
  uint64_t v7;
  std::string __p;
  statfs v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v5 = statfs((const char *)p_p, &v10);
  v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_6;
LABEL_9:
    *(_BYTE *)a2 = (v10.f_flags & 0x1000) != 0;
    std::system_category();
    return 0;
  }
  if (!v5)
    goto LABEL_9;
LABEL_6:
  v7 = *__error();
  std::generic_category();
  return v7;
}

uint64_t llvm::sys::fs::rename(llvm::sys::fs *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  const std::__fs::filesystem::path *v4;
  const std::__fs::filesystem::path *v5;
  std::error_code *v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v11;
  __int128 v12;
  _BYTE v13[128];
  void *v14;
  __int128 v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_181236BB0;
  v11 = v13;
  v12 = xmmword_181236BB0;
  v4 = (const std::__fs::filesystem::path *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v14);
  v5 = (const std::__fs::filesystem::path *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)a2, &v11);
  rename(v4, v5, v6);
  if (v7 != -1)
  {
    std::system_category();
    v8 = 0;
    v9 = v11;
    if (v11 == v13)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = *__error();
  std::generic_category();
  v9 = v11;
  if (v11 != v13)
LABEL_3:
    free(v9);
LABEL_4:
  if (v14 != v16)
    free(v14);
  return v8;
}

uint64_t llvm::sys::fs::access(unsigned __int8 *a1, int a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  stat v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_181236BB0;
  v3 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, &v9);
  v4 = v3;
  if (!a2)
  {
LABEL_9:
    if (access(v3, a2) != -1)
      goto LABEL_10;
LABEL_13:
    v5 = *__error();
    std::generic_category();
    v6 = v9;
    if (v9 == v11)
      return v5;
    goto LABEL_11;
  }
  if (a2 != 2)
  {
    a2 = 2;
    goto LABEL_9;
  }
  if (access(v3, 5) == -1)
    goto LABEL_13;
  if (stat(v4, &v8) || (v8.st_mode & 0xF000) != 0x8000)
  {
    std::generic_category();
    v5 = 13;
    v6 = v9;
    if (v9 == v11)
      return v5;
    goto LABEL_11;
  }
LABEL_10:
  std::system_category();
  v5 = 0;
  v6 = v9;
  if (v9 != v11)
LABEL_11:
    free(v6);
  return v5;
}

BOOL llvm::sys::fs::can_execute(llvm::sys::fs *this, const llvm::Twine *a2)
{
  return llvm::sys::fs::access((unsigned __int8 *)this, 2) == 0;
}

void llvm::sys::fs::expandTildeExpr(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  _BYTE *v17;
  size_t v18;
  void *v19;
  _QWORD *v20;
  char *pw_dir;
  size_t v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  _QWORD *v33[4];
  __int16 v34;
  passwd *v35;
  void *__dst[2];
  int64_t v37;
  passwd v38;
  char *v39;
  __int128 v40;
  _QWORD v41[18];

  v41[16] = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  if (v1)
  {
    v3 = (_BYTE *)*a1;
    if (*(_BYTE *)*a1 == 126)
    {
      v4 = v3 + 1;
      v5 = v1 - 1;
      if (v1 == 1)
      {
LABEL_7:
        v6 = -1;
      }
      else
      {
        v6 = 0;
        while (v4[v6] != 47)
        {
          if (v5 == ++v6)
            goto LABEL_7;
        }
      }
      if (v5 >= v6)
        v7 = v6;
      else
        v7 = v1 - 1;
      if (v5 >= v7 + 1)
        v8 = v7 + 1;
      else
        v8 = v1 - 1;
      v39 = (char *)v41;
      v40 = xmmword_181236BB0;
      if (!v7)
      {
        if (llvm::sys::path::home_directory(&v39))
        {
          *(_BYTE *)*a1 = *v39;
          llvm::SmallVectorImpl<char>::insert<char *,void>(a1, *a1 + 1, v39 + 1, &v39[v40]);
        }
        goto LABEL_43;
      }
      v26 = v8;
      v9 = sysconf(71);
      if (v9 >= 1)
        v10 = v9;
      else
        v10 = 0x4000;
      v11 = operator new[](v10);
      bzero(v11, v10);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v25 = v7 + 1;
      if (v7 >= 0x17)
      {
        v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v13 = v7 | 7;
        v14 = v13 + 1;
        v12 = (void **)operator new(v13 + 1);
        __dst[1] = (void *)v7;
        v37 = v14 | 0x8000000000000000;
        __dst[0] = v12;
      }
      else
      {
        HIBYTE(v37) = v7;
        v12 = __dst;
      }
      memmove(v12, v3 + 1, v7);
      *((_BYTE *)v12 + v7) = 0;
      v35 = 0;
      if (v37 >= 0)
        v15 = (const char *)__dst;
      else
        v15 = (const char *)__dst[0];
      getpwnam_r(v15, &v38, (char *)v11, v10, &v35);
      if (!v35 || !v35->pw_dir)
      {
LABEL_40:
        if (SHIBYTE(v37) < 0)
          operator delete(__dst[0]);
        operator delete[](v11);
LABEL_43:
        if (v39 != (char *)v41)
          free(v39);
        return;
      }
      v16 = 0;
      v17 = &v4[v26];
      *(_QWORD *)&v40 = 0;
      v18 = v1 - (v26 + 1);
      if (*((_QWORD *)&v40 + 1) < v18)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v39, v41, &v3[v1] - v17, 1);
        v16 = v40;
      }
      v19 = v11;
      if (v5 > v25)
      {
        memcpy(&v39[v16], v17, v18);
        v16 = v40;
      }
      v20 = (_QWORD *)(v16 + v18);
      *(_QWORD *)&v40 = v16 + v18;
      a1[1] = 0;
      pw_dir = v35->pw_dir;
      v22 = strlen(pw_dir);
      v23 = v22;
      if (a1[2] >= v22)
      {
        v24 = 0;
        if (!v22)
        {
LABEL_39:
          a1[1] = v24 + v23;
          v34 = 261;
          v33[0] = v39;
          v33[1] = v20;
          v32 = 257;
          v30 = 257;
          v28 = 257;
          llvm::sys::path::append(a1, 0, v33, &v31, &v29, &v27);
          v11 = v19;
          goto LABEL_40;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v22, 1);
        v24 = a1[1];
      }
      memcpy((void *)(*a1 + v24), pw_dir, v23);
      v24 = a1[1];
      v20 = (_QWORD *)v40;
      goto LABEL_39;
    }
  }
}

uint64_t llvm::sys::fs::fillStatus(llvm::sys::fs *this, int *a2, const stat *a3, llvm::sys::fs::file_status *a4)
{
  uint64_t v5;
  const std::error_category *v6;
  uid_t v8;
  gid_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __darwin_ino64_t v17;
  __darwin_time_t v18;
  uint64_t v19;

  if ((_DWORD)this)
  {
    v5 = *__error();
    v6 = std::generic_category();
    if (v6 == std::generic_category() && (_DWORD)v5 == 2)
    {
      a3->st_atimespec.tv_sec = 0;
      *(_OWORD *)&a3->st_dev = 0u;
      *(_OWORD *)&a3->st_uid = 0u;
      a3->st_atimespec.tv_nsec = 0xFFFF00000001;
      LODWORD(a3->st_mtimespec.tv_sec) = 0;
      WORD2(a3->st_mtimespec.tv_sec) = 0;
      a3->st_mtimespec.tv_nsec = 0;
      return 2;
    }
    else
    {
      *(_OWORD *)(&a3->st_rdev + 1) = 0u;
      *(_OWORD *)&a3->st_dev = 0u;
      *(_OWORD *)&a3->st_uid = 0u;
      *(uint64_t *)((char *)&a3->st_atimespec.tv_nsec + 4) = 0xFFFFLL;
      WORD2(a3->st_mtimespec.tv_sec) = 0;
      a3->st_mtimespec.tv_nsec = 0;
      return v5;
    }
  }
  else
  {
    v8 = a2[10];
    v9 = a2[14];
    v10 = *((unsigned __int16 *)a2 + 2);
    v11 = v10 & 0xFFF;
    v12 = (v10 >> 12) ^ 8;
    if ((_DWORD)v12 == 15)
      v13 = 9;
    else
      v13 = dword_1812612D0[v12];
    v14 = *a2;
    v15 = *((_WORD *)a2 + 3);
    v16 = *((_QWORD *)a2 + 1);
    v17 = *((_QWORD *)a2 + 6);
    v18 = *((_QWORD *)a2 + 12);
    v19 = *((_QWORD *)a2 + 2);
    *(_QWORD *)&a3->st_dev = *((_QWORD *)a2 + 4);
    a3->st_ino = v17;
    a3->st_uid = v8;
    a3->st_gid = v9;
    *(_QWORD *)&a3->st_rdev = v19;
    a3->st_atimespec.tv_sec = v18;
    LODWORD(a3->st_atimespec.tv_nsec) = v13;
    HIDWORD(a3->st_atimespec.tv_nsec) = v11;
    LODWORD(a3->st_mtimespec.tv_sec) = v14;
    WORD2(a3->st_mtimespec.tv_sec) = v15;
    a3->st_mtimespec.tv_nsec = v16;
    std::system_category();
    return 0;
  }
}

uint64_t llvm::sys::fs::mapped_file_region::mapped_file_region(uint64_t a1, int a2, int a3, size_t a4, off_t a5, _QWORD *a6)
{
  int v9;
  BOOL v10;
  int v11;
  int v12;
  void *v13;
  const std::error_category *v14;
  uint64_t v16;
  const std::error_category *v17;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  if (a3 == 1)
    v9 = 65;
  else
    v9 = 66;
  v10 = a3 == 0;
  if (a3)
    v11 = 3;
  else
    v11 = 1;
  if (v10)
    v12 = 24642;
  else
    v12 = v9;
  v13 = mmap(0, a4, v11, v12, a2, a5);
  *(_QWORD *)(a1 + 8) = v13;
  if (v13 != (void *)-1)
  {
    v14 = std::system_category();
    *a6 = 0;
    a6[1] = v14;
    return a1;
  }
  v16 = *__error();
  v17 = std::generic_category();
  *a6 = v16;
  a6[1] = v17;
  if (!(_DWORD)v16)
    return a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

void *llvm::sys::fs::mapped_file_region::unmapImpl(llvm::sys::fs::mapped_file_region *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 1);
  if (result)
    return (void *)munmap(result, *(_QWORD *)this);
  return result;
}

void *llvm::sys::fs::mapped_file_region::dontNeedImpl(llvm::sys::fs::mapped_file_region *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 1);
  if (result)
    return (void *)posix_madvise(result, *(_QWORD *)this, 4);
  return result;
}

unint64_t llvm::sys::fs::detail::directory_iterator_construct(uint64_t a1, const void *a2, unint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  DIR *v10;
  void **v11;
  __int128 v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  std::string v18;
  _BYTE v19[56];
  _QWORD *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _QWORD *v24[4];
  __int16 v25;
  char *v26;
  __int128 v27;
  _QWORD v28[17];

  v28[16] = *MEMORY[0x1E0C80C00];
  v26 = (char *)v28;
  v27 = xmmword_181236BB0;
  if (a3 < 0x81)
  {
    v8 = 0;
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v26, v28, a3, 1);
  v8 = v27;
  if (a3)
  {
LABEL_5:
    memcpy(&v26[v8], a2, a3);
    v8 = v27;
  }
LABEL_6:
  v9 = v8 + a3;
  *(_QWORD *)&v27 = v9;
  if ((unint64_t)(v9 + 1) <= *((_QWORD *)&v27 + 1))
  {
    v26[v9] = 0;
    v10 = opendir(v26);
    if (v10)
      goto LABEL_8;
LABEL_14:
    v14 = *__error();
    std::generic_category();
    v15 = 0;
    v16 = v26;
    if (v26 == (char *)v28)
      return v15 | v14;
    goto LABEL_11;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v26, v28, v9 + 1, 1);
  v26[v27] = 0;
  v10 = opendir(v26);
  if (!v10)
    goto LABEL_14;
LABEL_8:
  *(_QWORD *)a1 = v10;
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)".";
  *(_WORD *)&v19[8] = 259;
  v25 = 257;
  v23 = 257;
  v21 = 257;
  llvm::sys::path::append(&v26, 0, &v18, v24, &v22, &v20);
  v25 = 261;
  v24[0] = v26;
  v24[1] = (_QWORD *)v27;
  llvm::Twine::str((llvm::Twine *)v24, &v18);
  *(_DWORD *)v19 = 9;
  v19[4] = a4;
  memset(&v19[8], 0, 44);
  *(_DWORD *)&v19[52] = 0xFFFF;
  v11 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
  v12 = *(_OWORD *)&v19[16];
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v19;
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v19[32];
  *(_QWORD *)(a1 + 80) = *(_QWORD *)&v19[48];
  v13 = llvm::sys::fs::detail::directory_iterator_increment(a1);
  v14 = v13;
  v15 = v13 & 0xFFFFFFFF00000000;
  v16 = v26;
  if (v26 != (char *)v28)
LABEL_11:
    free(v16);
  return v15 | v14;
}

unint64_t llvm::sys::fs::detail::directory_iterator_increment(uint64_t a1)
{
  dirent *v2;
  dirent *v3;
  char *d_name;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void **v11;
  __int128 v13[2];
  __int128 v14;
  _QWORD *v15[4];
  __int16 v16;

  *__error() = 0;
  v2 = readdir(*(DIR **)a1);
  if (!v2)
  {
    if (*__error())
    {
      v6 = *__error();
      std::generic_category();
LABEL_21:
      v8 = 0;
      return v8 | v6;
    }
    if (*(_QWORD *)a1)
      closedir(*(DIR **)a1);
    *(_QWORD *)a1 = 0;
    v11 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v11);
    *v11 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 9;
    *(_BYTE *)(a1 + 36) = 1;
    *(_OWORD *)(a1 + 37) = 0u;
    *(_OWORD *)(a1 + 53) = 0u;
    *(_OWORD *)(a1 + 68) = 0u;
    *(_DWORD *)(a1 + 84) = 0xFFFF;
LABEL_20:
    std::system_category();
    v6 = 0;
    goto LABEL_21;
  }
  v3 = v2;
  d_name = v2->d_name;
  v5 = (_QWORD *)strlen(v2->d_name);
  if (v5 == (_QWORD *)2)
  {
    if (*d_name != 46 || v3->d_name[1] != 46)
    {
LABEL_11:
      v16 = 261;
      v15[0] = d_name;
      v15[1] = v5;
      v9 = v3->d_type & 0xF ^ 8;
      if ((_DWORD)v9 == 15)
        v10 = 9;
      else
        v10 = dword_1812612D0[v9];
      v14 = 0u;
      memset(v13, 0, sizeof(v13));
      HIDWORD(v14) = 0xFFFF;
      llvm::sys::fs::directory_entry::replace_filename(a1 + 8, v15, v10, v13);
      goto LABEL_20;
    }
  }
  else if (v5 != (_QWORD *)1 || *d_name != 46)
  {
    goto LABEL_11;
  }
  v7 = llvm::sys::fs::detail::directory_iterator_increment(a1);
  v6 = v7;
  v8 = v7 & 0xFFFFFFFF00000000;
  return v8 | v6;
}

uint64_t llvm::sys::fs::detail::directory_iterator_destruct(uint64_t a1)
{
  DIR *v2;
  void **v3;
  _OWORD v5[3];

  v2 = *(DIR **)a1;
  if (v2)
    closedir(v2);
  *(_QWORD *)a1 = 0;
  memset(v5, 0, 35);
  HIBYTE(v5[1]) = 0;
  v3 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  *(_OWORD *)(a1 + 37) = v5[0];
  *v3 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  *(_BYTE *)(a1 + 36) = 1;
  *(_OWORD *)(a1 + 53) = v5[1];
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 0xFFFF;
  std::system_category();
  return 0;
}

double llvm::sys::fs::directory_entry::status@<D0>(llvm::sys::fs::directory_entry *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  _QWORD *v4;
  uint64_t (*v5)(_QWORD *, timespec *);
  llvm::sys::fs *v6;
  llvm::sys::fs::file_status *v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  llvm::sys::fs::directory_entry *v13;
  __int16 v14;
  stat v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  memset(&v15, 0, 44);
  HIDWORD(v15.st_atimespec.tv_nsec) = 0xFFFF;
  v14 = 260;
  v13 = this;
  v3 = *((unsigned __int8 *)this + 28);
  v16 = v18;
  v17 = xmmword_181236BB0;
  v4 = llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v13, &v16);
  v5 = (uint64_t (*)(_QWORD *, timespec *))MEMORY[0x1E0C854D8];
  if (!v3)
    v5 = (uint64_t (*)(_QWORD *, timespec *))MEMORY[0x1E0C83C40];
  v6 = (llvm::sys::fs *)v5(v4, &v15.st_ctimespec);
  v8 = llvm::sys::fs::fillStatus(v6, (int *)&v15.st_ctimespec, &v15, v7);
  v11 = v10;
  if (v16 != v18)
    free(v16);
  if ((_DWORD)v8)
  {
    *(_BYTE *)(a2 + 48) |= 1u;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v11;
  }
  else
  {
    *(_BYTE *)(a2 + 48) &= ~1u;
    v12 = *(_OWORD *)&v15.st_uid;
    *(_OWORD *)a2 = *(_OWORD *)&v15.st_dev;
    *(_OWORD *)(a2 + 16) = v12;
    result = *(double *)&v15.st_atimespec.tv_sec;
    *(timespec *)(a2 + 32) = v15.st_atimespec;
  }
  return result;
}

uint64_t llvm::sys::fs::openFile(unsigned __int8 *a1, int *a2, int a3, int a4, int a5, uint64_t a6)
{
  int v8;
  int v10;
  int v11;
  int v12;
  const char *v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v18;
  __int128 v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v8 = 2 * (a4 == 3);
  if (a4 == 2)
    v8 = 1;
  if (a4 == 1)
    v8 = 0;
  if ((a5 & 4) != 0)
    a3 = 3;
  v10 = v8 | 0x600;
  v11 = v8 | 0x200;
  if (a3 == 1)
    v8 |= 0xA00u;
  if (a3 == 3)
    v8 = v11;
  if (!a3)
    v8 = v10;
  v12 = v8 | ((a5 << 20) & 0x1000000 | (2 * (a5 & 4))) ^ 0x1000000;
  v18 = v20;
  v19 = xmmword_181236BB0;
  v13 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, &v18);
  while (1)
  {
    *__error() = 0;
    v14 = open(v13, v12, a6);
    if (v14 != -1)
      break;
    if (*__error() != 4)
    {
      *a2 = -1;
      goto LABEL_21;
    }
  }
  *a2 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    std::system_category();
    v15 = 0;
    v16 = v18;
    if (v18 == v20)
      return v15;
    goto LABEL_22;
  }
LABEL_21:
  v15 = *__error();
  std::generic_category();
  v16 = v18;
  if (v18 == v20)
    return v15;
LABEL_22:
  free(v16);
  return v15;
}

llvm *llvm::sys::fs::openNativeFileForRead@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  llvm *result;
  std::error_code v6;
  uint64_t v7;
  int v8;

  v8 = 0;
  result = (llvm *)llvm::sys::fs::openFileForRead(a1, &v8, a2, a3);
  if ((_DWORD)result)
  {
    result = (llvm *)llvm::errorCodeToError(result, v6, &v7);
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_DWORD *)a4 = v8;
  }
  return result;
}

ssize_t llvm::sys::fs::readNativeFileSlice@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, off_t a4@<X3>, uint64_t a5@<X8>)
{
  size_t v9;
  ssize_t result;
  llvm *v11;
  ssize_t v12;
  std::error_code v13;

  if (a3 >= 0x7FFFFFFF)
    v9 = 0x7FFFFFFFLL;
  else
    v9 = a3;
  while (1)
  {
    *__error() = 0;
    result = pread(a1, a2, v9, a4);
    if (result != -1)
      break;
    if (*__error() != 4)
    {
      v11 = (llvm *)*__error();
      *(_QWORD *)&v13.__val_ = std::generic_category();
      llvm::errorCodeToError(v11, v13, &v12);
      *(_BYTE *)(a5 + 8) |= 1u;
      result = v12;
      goto LABEL_8;
    }
  }
  *(_BYTE *)(a5 + 8) &= ~1u;
LABEL_8:
  *(_QWORD *)a5 = result;
  return result;
}

uint64_t llvm::sys::fs::lockFile(llvm::sys::fs *this, int a2)
{
  __int16 v2;
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;

  v5[1] = 0;
  v6 = 0;
  if (a2)
    v2 = 3;
  else
    v2 = 1;
  WORD2(v6) = v2;
  v5[0] = 0;
  if (fcntl((int)this, 9, v5) == -1)
  {
    v4 = *__error();
    std::generic_category();
    return v4;
  }
  else
  {
    std::system_category();
    return 0;
  }
}

uint64_t llvm::sys::fs::unlockFile(llvm::sys::fs *this)
{
  uint64_t v2;
  _QWORD v3[2];
  int v4;

  v4 = 2;
  v3[0] = 0;
  v3[1] = 0;
  if (fcntl((int)this, 8, v3) == -1)
  {
    v2 = *__error();
    std::generic_category();
    return v2;
  }
  else
  {
    std::system_category();
    return 0;
  }
}

uint64_t llvm::sys::fs::closeFile(llvm::sys::fs *this, int *a2)
{
  llvm::sys::Process *v2;

  v2 = (llvm::sys::Process *)*(unsigned int *)this;
  *(_DWORD *)this = -1;
  return llvm::sys::Process::SafelyCloseFileDescriptor(v2);
}

unint64_t llvm::sys::fs::real_path(unsigned __int8 *a1, _QWORD *a2, int a3)
{
  unsigned int v3;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  void *v12;
  __int128 v13;
  _BYTE v14[1000];
  _WORD *v15;
  __int128 v16;
  _WORD v17[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  a2[1] = 0;
  if (a1[32] <= 1u)
  {
    std::system_category();
    v3 = 0;
    goto LABEL_13;
  }
  if (!a3)
  {
    v15 = v17;
    v16 = xmmword_181236BB0;
    v7 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, &v15);
    if (realpath_DARWIN_EXTSN(v7, (char *)&v12))
    {
      v8 = strlen((const char *)&v12);
      v9 = a2[1];
      if (a2[2] < v9 + v8)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v9 + v8, 1);
        v9 = a2[1];
      }
      if (v8)
      {
        memcpy((void *)(*a2 + v9), &v12, v8);
        v9 = a2[1];
      }
      a2[1] = v9 + v8;
      std::system_category();
      v3 = 0;
      v10 = v15;
      if (v15 == v17)
        goto LABEL_13;
    }
    else
    {
      v3 = *__error();
      std::generic_category();
      v10 = v15;
      if (v15 == v17)
        goto LABEL_13;
    }
    free(v10);
LABEL_13:
    v6 = 0;
    return v6 | v3;
  }
  v12 = v14;
  v13 = xmmword_181236BB0;
  llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v12);
  llvm::sys::fs::expandTildeExpr((uint64_t *)&v12);
  v17[4] = 261;
  v15 = v12;
  *(_QWORD *)&v16 = v13;
  v5 = llvm::sys::fs::real_path(&v15, a2, 0);
  v3 = v5;
  v6 = v5 & 0xFFFFFFFF00000000;
  if (v12 != v14)
    free(v12);
  return v6 | v3;
}

uint64_t llvm::sys::fs::copy_file(llvm::sys::fs *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  std::string *v4;
  std::string *p_p;
  unsigned int v6;
  std::string *v8;
  std::string *v9;
  std::string __p;
  std::string v12;

  llvm::Twine::str(this, &v12);
  llvm::Twine::str(a2, &__p);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v12;
  else
    v4 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (!clonefile((const char *)v4, (const char *)p_p, 0))
    goto LABEL_22;
  v6 = *__error();
  if (v6 <= 0x2D && ((1 << v6) & 0x200000060000) != 0)
  {
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v12;
    else
      v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &__p;
    else
      v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (copyfile((const char *)v8, (const char *)v9, 0, 8u))
    {
      v6 = *__error();
      goto LABEL_20;
    }
LABEL_22:
    std::system_category();
    v6 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_20:
  std::generic_category();
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_23:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v6;
}

void llvm::sys::fs::TempFile::~TempFile(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *llvm::sys::fs::TempFile::discard@<X0>(llvm::sys::fs::TempFile *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  const std::error_category *v5;
  llvm *v6;
  const std::error_category *v7;
  int v8;
  char *v9;
  size_t v10;
  std::error_code v11;
  llvm *v13;
  char *v14;
  __int16 v15;
  std::error_code v16;

  *(_BYTE *)this = 1;
  v4 = *((_DWORD *)this + 8);
  if (v4 == -1 || close(v4) != -1)
  {
    *((_DWORD *)this + 8) = -1;
    v5 = std::system_category();
    if (*((char *)this + 31) < 0)
    {
      if (*((_QWORD *)this + 2))
        goto LABEL_5;
    }
    else if (*((_BYTE *)this + 31))
    {
LABEL_5:
      v15 = 260;
      v14 = (char *)this + 8;
      v6 = (llvm *)llvm::sys::fs::remove((llvm::sys::fs *)&v14, (const llvm::Twine *)1);
      v5 = v7;
      v8 = *((char *)this + 31);
      if (v8 >= 0)
        v9 = (char *)this + 8;
      else
        v9 = (char *)*((_QWORD *)this + 1);
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)this + 31);
      else
        v10 = *((_QWORD *)this + 2);
      llvm::sys::DontRemoveFileOnSignal(v9, v10);
      if (!(_DWORD)v6)
        MEMORY[0x186DA1308]((char *)this + 8, "");
      goto LABEL_15;
    }
    MEMORY[0x186DA1308]((char *)this + 8, "");
    v6 = 0;
LABEL_15:
    *(_QWORD *)&v11.__val_ = v5;
    return llvm::errorCodeToError(v6, v11, a2);
  }
  v13 = (llvm *)*__error();
  *(_QWORD *)&v16.__val_ = std::generic_category();
  return llvm::errorCodeToError(v13, v16, a2);
}

_QWORD *llvm::sys::fs::TempFile::keep@<X0>(llvm::sys::fs::TempFile *this@<X0>, const llvm::Twine *a2@<X1>, const llvm::Twine *a3@<X2>, _QWORD *a4@<X8>)
{
  char *v7;
  const std::error_category *v8;
  const llvm::Twine *v9;
  uint64_t v10;
  const std::error_category *v11;
  const std::error_category *v12;
  int v13;
  const void *v14;
  size_t v15;
  std::error_code v16;
  _QWORD v18[4];
  __int16 v19;

  *(_BYTE *)this = 1;
  v7 = (char *)this + 8;
  v19 = 260;
  v18[0] = (char *)this + 8;
  v10 = llvm::sys::fs::rename((llvm::sys::fs *)v18, a2, a3);
  if ((_DWORD)v10)
  {
    v19 = 260;
    v18[0] = v7;
    v10 = llvm::sys::fs::copy_file((llvm::sys::fs *)v18, a2, v9);
    v12 = v11;
    if ((_DWORD)v10)
    {
      v19 = 260;
      v18[0] = v7;
      llvm::sys::fs::remove((llvm::sys::fs *)v18, (const llvm::Twine *)1);
    }
  }
  else
  {
    v12 = v8;
  }
  v13 = *((char *)this + 31);
  if (v13 >= 0)
    v14 = v7;
  else
    v14 = (const void *)*((_QWORD *)this + 1);
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)this + 31);
  else
    v15 = *((_QWORD *)this + 2);
  llvm::sys::DontRemoveFileOnSignal(v14, v15);
  if (!(_DWORD)v10)
  {
    MEMORY[0x186DA1308](v7, "");
    if (close(*((_DWORD *)this + 8)) != -1)
      goto LABEL_13;
LABEL_15:
    v10 = *__error();
    v12 = std::generic_category();
    goto LABEL_16;
  }
  if (close(*((_DWORD *)this + 8)) == -1)
    goto LABEL_15;
LABEL_13:
  *((_DWORD *)this + 8) = -1;
LABEL_16:
  *(_QWORD *)&v16.__val_ = v12;
  return llvm::errorCodeToError((llvm *)v10, v16, a4);
}

void llvm::sys::fs::TempFile::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  llvm *v5;
  std::error_code v6;
  size_t v7;
  void *v8;
  int v9;
  __int128 *p_p;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE v16[8];
  __int128 __p;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  _QWORD v26[17];
  std::error_code v27;

  v26[16] = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v24 = v26;
  v25 = xmmword_181236BB0;
  createUniqueEntity(a1, &v21, &v24, 0, 1, a3 | 8, a2);
  if ((_DWORD)v5)
  {
    llvm::errorCodeToError(v5, v6, &v20);
    *(_BYTE *)(a4 + 40) |= 1u;
    *(_QWORD *)a4 = v20;
    v20 = 0;
    goto LABEL_18;
  }
  v8 = v24;
  v7 = v25;
  v9 = v21;
  v16[0] = 0;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if ((unint64_t)v25 >= 0x17)
  {
    v12 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)v25 | 7) != 0x17)
      v12 = v25 | 7;
    v13 = v12 + 1;
    p_p = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__p + 1) = v7;
    v18 = v13 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
LABEL_16:
    memmove(p_p, v8, v7);
    *((_BYTE *)p_p + v7) = 0;
    v19 = v9;
    if (llvm::sys::RemoveFileOnSignal(v24, v25))
      goto LABEL_7;
LABEL_17:
    *(_BYTE *)(a4 + 40) &= ~1u;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = __p;
    *(_QWORD *)(a4 + 24) = v18;
    *(_DWORD *)(a4 + 32) = v9;
    goto LABEL_18;
  }
  HIBYTE(v18) = v25;
  p_p = &__p;
  if ((_QWORD)v25)
    goto LABEL_16;
  LOBYTE(__p) = 0;
  v19 = v21;
  if (!llvm::sys::RemoveFileOnSignal(v24, 0))
    goto LABEL_17;
LABEL_7:
  llvm::sys::fs::TempFile::discard((llvm::sys::fs::TempFile *)v16, &v15);
  v11 = v15;
  v15 = 0;
  v22 = v11;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v22, &v23);
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  *(_QWORD *)&v27.__val_ = std::generic_category();
  llvm::errorCodeToError((llvm *)1, v27, &v14);
  *(_BYTE *)(a4 + 40) |= 1u;
  *(_QWORD *)a4 = v14;
  v14 = 0;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
LABEL_18:
  if (v24 != v26)
    free(v24);
}

char *llvm::SmallVectorImpl<char>::insert<char *,void>(uint64_t *a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char v38;

  v7 = *a1;
  v8 = a1[1];
  v9 = a2 - *a1;
  v10 = a4 - __src;
  v11 = v8 + a4 - __src;
  v12 = a1[2];
  if (*a1 + v8 != a2)
  {
    if (v12 < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v11, 1);
      v7 = *a1;
      v8 = a1[1];
    }
    v13 = (char *)(v7 + v9);
    v14 = (char *)(v7 + v8);
    v15 = v8 - v9;
    if (v8 - v9 < v10)
    {
      a1[1] = v8 + v10;
      if (v9 != v8)
        memcpy((void *)(v7 + v10 + v9), (const void *)(v7 + v9), v8 - v9);
      if (!v15)
      {
        v18 = __src;
        goto LABEL_27;
      }
      if (v15 < 0x20 || (unint64_t)(v13 - __src) < 0x20)
      {
        v16 = (char *)(v7 + v9);
        v17 = v8 - v9;
        v18 = __src;
      }
      else
      {
        v16 = &v13[v15 & 0xFFFFFFFFFFFFFFE0];
        v17 = v15 & 0x1F;
        v18 = &__src[v15 & 0xFFFFFFFFFFFFFFE0];
        v19 = (__int128 *)(__src + 16);
        v20 = (_OWORD *)(v9 + v7 + 16);
        v21 = v15 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          *v20 = v22;
          v19 += 2;
          v20 += 2;
          v21 -= 32;
        }
        while (v21);
        if (v15 == (v15 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_27:
          if (v18 != a4)
            memcpy((void *)(v7 + v8), v18, a4 - v18);
          return v13;
        }
      }
      do
      {
        v28 = *v18++;
        *v16++ = v28;
        --v17;
      }
      while (v17);
      goto LABEL_27;
    }
    v23 = v8;
    if (a1[2] < v10 + v8)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v10 + v8, 1);
      v23 = a1[1];
    }
    v24 = &v14[-v10];
    if (a4 == __src)
      goto LABEL_43;
    v25 = *a1;
    v26 = (_BYTE *)(*a1 + v23);
    if (v10 < 8)
    {
      v27 = &v14[-v10];
      goto LABEL_41;
    }
    v27 = &v14[-v10];
    if ((unint64_t)(a4 - __src - (v8 + v7) + v23 + v25) >= 0x20)
    {
      if (v10 < 0x20)
      {
        v29 = 0;
        goto LABEL_36;
      }
      v29 = v10 & 0xFFFFFFFFFFFFFFE0;
      v30 = (__int128 *)(&__src[v8] - a4 + v7 + 16);
      v31 = (_OWORD *)(v23 + v25 + 16);
      v32 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v33 = *v30;
        *(v31 - 1) = *(v30 - 1);
        *v31 = v33;
        v30 += 2;
        v31 += 2;
        v32 -= 32;
      }
      while (v32);
      if (v10 == v29)
        goto LABEL_42;
      if ((v10 & 0x18) != 0)
      {
LABEL_36:
        v26 += v10 & 0xFFFFFFFFFFFFFFF8;
        v27 = &v24[v10 & 0xFFFFFFFFFFFFFFF8];
        v34 = (uint64_t *)(v7 + &__src[v8 + v29] - a4);
        v35 = (_QWORD *)(v25 + v23 + v29);
        v36 = v29 - (v10 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v37 = *v34++;
          *v35++ = v37;
          v36 += 8;
        }
        while (v36);
        if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_42;
        goto LABEL_41;
      }
      v27 = &v24[v29];
      v26 += v29;
    }
    do
    {
LABEL_41:
      v38 = *v27++;
      *v26++ = v38;
    }
    while (v27 != v14);
LABEL_42:
    v23 = a1[1];
LABEL_43:
    a1[1] = v23 + v10;
    if (v24 != v13)
      memmove(&v13[v10], (const void *)(v7 + v9), &v14[-v10] - v13);
    if (a4 != __src)
      memmove((void *)(v7 + v9), __src, v10);
    return v13;
  }
  if (v12 < v11)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v11, 1);
    v7 = *a1;
    v8 = a1[1];
  }
  if (__src != a4)
  {
    memcpy((void *)(v7 + v8), __src, v10);
    v7 = *a1;
    v8 = a1[1];
  }
  a1[1] = v8 + v10;
  return (char *)(v7 + v9);
}

double llvm::sys::Process::GetEnv@<D0>(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  char *v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  size_t v13;
  size_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  char __dst[8];
  size_t v21;
  int64_t v22;

  if (!a1)
  {
    *(_QWORD *)__dst = 0;
    v21 = 0;
    v22 = 0;
    v7 = getenv(__dst);
    if (v7)
      goto LABEL_17;
LABEL_7:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return result;
LABEL_8:
    operator delete(*(void **)__dst);
    return result;
  }
  if (a2 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_27;
  if (a2 >= 0x17)
  {
    v9 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v9 = a2 | 7;
    v10 = v9 + 1;
    v6 = operator new(v9 + 1);
    v21 = a2;
    v22 = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v6;
    goto LABEL_12;
  }
  HIBYTE(v22) = a2;
  v6 = __dst;
  if (a2)
LABEL_12:
    memmove(v6, a1, a2);
  *((_BYTE *)v6 + a2) = 0;
  if (v22 >= 0)
    v11 = __dst;
  else
    v11 = *(char **)__dst;
  v7 = getenv(v11);
  if (!v7)
    goto LABEL_7;
LABEL_17:
  v12 = v7;
  v13 = strlen(v7);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_27:
    abort();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&v18 + 1) = v14;
    v19 = v17 | 0x8000000000000000;
    *(_QWORD *)&v18 = v15;
    goto LABEL_24;
  }
  HIBYTE(v19) = v13;
  v15 = &v18;
  if (v13)
LABEL_24:
    memmove(v15, v12, v14);
  *((_BYTE *)v15 + v14) = 0;
  result = *(double *)&v18;
  *(_OWORD *)a3 = v18;
  *(_QWORD *)(a3 + 16) = v19;
  *(_BYTE *)(a3 + 24) = 1;
  if (SHIBYTE(v22) < 0)
    goto LABEL_8;
  return result;
}

void llvm::sys::Process::getPageSize(uint64_t a1@<X8>)
{
  unsigned __int8 v3;
  int v4;
  llvm *v5;
  uint64_t v6;
  std::error_code v7;

  v3 = atomic_load((unsigned __int8 *)&qword_1ECD335E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD335E8))
  {
    _MergedGlobals_56 = getpagesize();
    __cxa_guard_release(&qword_1ECD335E8);
  }
  v4 = _MergedGlobals_56;
  if (_MergedGlobals_56 == -1)
  {
    v5 = (llvm *)*__error();
    *(_QWORD *)&v7.__val_ = std::generic_category();
    llvm::errorCodeToError(v5, v7, &v6);
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = v4;
  }
}

uint64_t llvm::sys::Process::SafelyCloseFileDescriptor(llvm::sys::Process *this)
{
  int v1;
  unsigned int v2;
  int v3;
  sigset_t v5;
  sigset_t v6;

  v1 = (int)this;
  v5 = -1;
  v6 = -1;
  v2 = pthread_sigmask(3, &v6, &v5);
  if (!v2)
  {
    if ((close(v1) & 0x80000000) == 0)
    {
      v3 = pthread_sigmask(3, &v5, 0);
LABEL_5:
      v2 = v3;
      goto LABEL_6;
    }
    v2 = *__error();
    v3 = pthread_sigmask(3, &v5, 0);
    if (!v2)
      goto LABEL_5;
  }
LABEL_6:
  std::generic_category();
  return v2;
}

BOOL llvm::sys::Process::FileDescriptorIsDisplayed(llvm::sys::Process *this)
{
  return isatty((int)this) != 0;
}

BOOL checkTerminalEnvironmentForColors(void)
{
  char *v0;
  char *v1;
  size_t v2;
  BOOL v8;

  v0 = getenv("TERM");
  v1 = v0;
  if (!v0)
    return 0;
  v2 = strlen(v0);
  if (v2 == 6)
  {
    if (*(_DWORD *)v1 == 2003269987 && *((_WORD *)v1 + 2) == 28265)
      return v1 != 0;
LABEL_22:
    if (*(_DWORD *)v1 == 1701995379 && *((_WORD *)v1 + 2) == 28261)
      return v1 != 0;
LABEL_26:
    if (*(_DWORD *)v1 == 1919251576 && v1[4] == 109)
      return v1 != 0;
    v8 = *(_DWORD *)v1 == 808547446 && v1[4] == 48;
    if (v8 || *(_DWORD *)v1 == 1953921138)
      return v1 != 0;
    if (*(_DWORD *)&v1[v2 - 5] == 1869377379 && v1[v2 - 1] == 114)
      return v1 != 0;
    return 0;
  }
  if (v2 == 5)
  {
    if (*(_DWORD *)v1 == 1970170220 && v1[4] == 120)
      return v1 != 0;
    goto LABEL_26;
  }
  if (v2 != 4)
  {
    if (v2 < 6)
      return 0;
    goto LABEL_22;
  }
  if (*(_DWORD *)v1 != 1769172577 && *(_DWORD *)v1 != 1953921138)
    return 0;
  return v1 != 0;
}

BOOL llvm::sys::Process::FileDescriptorHasColors(llvm::sys::Process *this)
{
  int v1;
  unsigned __int8 v2;
  TERMINAL *v3;
  int v4;
  _BOOL8 v5;
  int v6;
  TERMINAL *v8;
  int v9;

  v1 = (int)this;
  if (!isatty((int)this))
    return 0;
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &terminalHasColors(int)::TermColorMutex, &dword_18013D000);
  }
  std::mutex::lock(&terminalHasColors(int)::TermColorMutex);
  v3 = set_curterm(0);
  v9 = 0;
  v4 = setupterm(0, v1, &v9);
  v5 = 0;
  if (!v4)
  {
    v6 = tigetnum("colors");
    if (v6 < 0)
      v5 = checkTerminalEnvironmentForColors();
    else
      v5 = v6 != 0;
    v8 = set_curterm(v3);
    del_curterm(v8);
  }
  std::mutex::unlock(&terminalHasColors(int)::TermColorMutex);
  return v5;
}

char *llvm::sys::Process::OutputColor(llvm::sys::Process *this, int a2, int a3)
{
  return &colorcodes[160 * a3 + 80 * a2 + 10 * (this & 7)];
}

const char *llvm::sys::Process::OutputBold(llvm::sys::Process *this)
{
  return "\x1B[1m";
}

const char *llvm::sys::Process::OutputReverse(llvm::sys::Process *this)
{
  return "\x1B[7m";
}

const char *llvm::sys::Process::ResetColor(llvm::sys::Process *this)
{
  return "\x1B[0m";
}

uint64_t llvm::sys::ExecuteAndWait(void *a1, size_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, _BYTE *a11, uint64_t a12)
{
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  pid_t v17[3];

  v17[0] = 0;
  v17[2] = 0;
  v15 = *a5;
  v16 = *((_QWORD *)a5 + 2);
  if (Execute(v17, a1, a2, a3, a4, (uint64_t)&v15, a6, a7, a9, a10))
  {
    if (a11)
      *a11 = 0;
    llvm::sys::Wait(v17, a8 | ((unint64_t)(a8 != 0) << 32), a10, a12, 0);
    return v13;
  }
  else
  {
    if (a11)
      *a11 = 1;
    return 0xFFFFFFFFLL;
  }
}

BOOL Execute(pid_t *a1, void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  std::string *p_dst;
  __int128 *v19;
  char **v20;
  char **v21;
  pid_t *v22;
  pid_t v23;
  _BOOL8 v24;
  std::string::size_type size;
  std::string::size_type v26;
  unsigned int v27;
  std::string::size_type v28;
  const void *v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  char v39;
  uint64_t v40;
  size_t v41;
  char **v42;
  posix_spawn_file_actions_t *v43;
  unsigned int v44;
  char *const *v45;
  void *v46;
  size_t v47;
  std::string *v48;
  std::string *v49;
  size_t v50;
  size_t v51;
  llvm::sys *v52;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  uint64_t v57;
  uint64_t v58;
  std::string::size_type v59;
  const void *v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  std::string::size_type v64;
  const void *v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  pid_t v70;
  llvm::sys *v71;
  const char *v72;
  llvm::sys *v73;
  char *v74;
  size_t v76;
  const char *v77;
  llvm::sys *v78;
  llvm::sys *v79;
  std::string *v80;
  int v81;
  int v82;
  char **v83;
  pid_t *v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  pid_t v91;
  std::string::value_type __s[23];
  char v93;
  void *__src;
  size_t __len;
  std::string __dst;
  std::string v97[2];
  std::string v98;
  std::string v99;
  uint64_t v100;
  _WORD v101[16];
  llvm **v102;
  uint64_t v103;
  _QWORD v104[3];
  _BYTE v105[15];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  __src = a2;
  __len = a3;
  v101[0] = 261;
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v99.__r_.__value_.__l.__size_ = a3;
  if (llvm::sys::fs::access((unsigned __int8 *)&v99, 0))
  {
    if (!a10)
      return 0;
    *((_BYTE *)&v97[0].__r_.__value_.__s + 23) = 12;
    strcpy((char *)v97, "Executable \"");
    if (!a2)
    {
      size = 0;
      v26 = 0;
      v27 = 0;
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_27;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        v31 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v31 = a3 | 7;
        v32 = v31 + 1;
        p_dst = (std::string *)operator new(v31 + 1);
        __dst.__r_.__value_.__l.__size_ = a3;
        __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
        p_dst = &__dst;
        if (!a3)
          goto LABEL_26;
      }
      memmove(p_dst, a2, a3);
LABEL_26:
      p_dst->__r_.__value_.__s.__data_[a3] = 0;
      v27 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      size = __dst.__r_.__value_.__l.__size_;
      v26 = __dst.__r_.__value_.__r.__words[0];
LABEL_27:
      if ((v27 & 0x80u) == 0)
        v33 = &__dst;
      else
        v33 = (std::string *)v26;
      if ((v27 & 0x80u) == 0)
        v34 = v27;
      else
        v34 = size;
      v35 = std::string::append(v97, (const std::string::value_type *)v33, v34);
      v36 = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v93 = 16;
      strcpy(__s, "\" doesn't exist!");
      v37 = std::string::append(&v99, __s, 0x10uLL);
      v38 = v37->__r_.__value_.__r.__words[0];
      *(_QWORD *)v105 = v37->__r_.__value_.__l.__size_;
      *(_QWORD *)&v105[7] = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
      v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a10 + 23) < 0)
        operator delete(*(void **)a10);
      v40 = *(_QWORD *)v105;
      *(_QWORD *)a10 = v38;
      *(_QWORD *)(a10 + 8) = v40;
      *(_QWORD *)(a10 + 15) = *(_QWORD *)&v105[7];
      *(_BYTE *)(a10 + 23) = v39;
      if (v93 < 0)
      {
        operator delete(*(void **)__s);
        if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_38;
          goto LABEL_42;
        }
      }
      else if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_37;
      }
      operator delete(v99.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_38:
        if ((SHIBYTE(v97[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return 0;
LABEL_43:
        operator delete(v97[0].__r_.__value_.__l.__data_);
        return 0;
      }
LABEL_42:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v97[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      goto LABEL_43;
    }
LABEL_180:
    abort();
  }
  v19 = a7;
  v84 = a1;
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = 0uLL;
  v99.__r_.__value_.__r.__words[2] = (std::string::size_type)v101;
  v100 = 0x400000000;
  v102 = (llvm **)v104;
  v103 = 0;
  v104[0] = 0;
  v104[1] = 1;
  *(_QWORD *)__s = &v99;
  toNullTerminatedCStringArray(&v97[0].__r_.__value_.__l.__data_, a4, a5, (uint64_t **)__s);
  v20 = (char **)v97[0].__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(a6 + 16))
  {
    toNullTerminatedCStringArray(&v97[0].__r_.__value_.__l.__data_, *(_QWORD *)a6, *(_QWORD *)(a6 + 8), (uint64_t **)__s);
    v21 = (char **)v97[0].__r_.__value_.__r.__words[0];
    v22 = a1;
    if (a9)
      goto LABEL_10;
  }
  else
  {
    v21 = 0;
    v22 = a1;
    if (a9)
    {
LABEL_10:
      v23 = fork();
      if (v23)
      {
        if (v23 == -1)
        {
          *((_BYTE *)&v97[0].__r_.__value_.__s + 23) = 13;
          strcpy((char *)v97, "Couldn't fork");
          MakeErrMsg(a10, (const void **)&v97[0].__r_.__value_.__l.__data_, (llvm::sys *)0xFFFFFFFFLL);
          v24 = 0;
          if (!v21)
            goto LABEL_142;
        }
        else
        {
          *v22 = v23;
          v22[1] = v23;
          v24 = 1;
          if (!v21)
            goto LABEL_142;
        }
        goto LABEL_141;
      }
      if (!a8)
        goto LABEL_181;
      v89 = *a7;
      v90 = *((_QWORD *)a7 + 2);
      v24 = 0;
      if ((RedirectIO((uint64_t)&v89, 0, a10) & 1) != 0)
        goto LABEL_140;
      v87 = *(__int128 *)((char *)a7 + 24);
      v88 = *((_QWORD *)a7 + 5);
      if ((RedirectIO((uint64_t)&v87, 1, a10) & 1) == 0)
      {
        if (!*((_BYTE *)a7 + 40)
          || !*((_BYTE *)a7 + 64)
          || (v41 = *((_QWORD *)a7 + 4), v41 != *((_QWORD *)a7 + 7))
          || v41 && memcmp(*((const void **)a7 + 3), *((const void **)a7 + 6), v41))
        {
          v85 = a7[3];
          v86 = *((_QWORD *)a7 + 8);
          if ((RedirectIO((uint64_t)&v85, 2, a10) & 1) != 0)
            goto LABEL_53;
LABEL_181:
          SetMemoryLimits(a9);
          std::string::basic_string<llvm::StringRef,0>(v97, (uint64_t)&__src);
          if ((v97[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = v97;
          else
            v80 = (std::string *)v97[0].__r_.__value_.__r.__words[0];
          if (!v21)
          {
            execv((const char *)v80, v20);
            if (*__error() == 2)
              v81 = 127;
            else
              v81 = 126;
            _exit(v81);
          }
          execve((const char *)v80, v20, v21);
          if (*__error() == 2)
            v82 = 127;
          else
            v82 = 126;
          _exit(v82);
        }
        if (dup2(1, 2) != -1)
          goto LABEL_181;
        std::string::basic_string[abi:nn180100]<0>(v97, "Can't redirect stderr to stdout");
        MakeErrMsg(a10, (const void **)&v97[0].__r_.__value_.__l.__data_, (llvm::sys *)0xFFFFFFFFLL);
        if (SHIBYTE(v97[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97[0].__r_.__value_.__l.__data_);
      }
LABEL_53:
      v24 = 0;
      if (!v21)
        goto LABEL_142;
      goto LABEL_141;
    }
  }
  *(_QWORD *)v105 = 0;
  memset(&v98, 0, sizeof(v98));
  memset(v97, 0, sizeof(v97));
  if (!a8)
  {
    v42 = v21;
    v43 = 0;
    goto LABEL_58;
  }
  if (!*((_BYTE *)a7 + 16))
  {
    v54 = 0;
    if (*((_BYTE *)a7 + 40))
      goto LABEL_95;
LABEL_85:
    v55 = 0;
    if (*((_BYTE *)v19 + 64))
      goto LABEL_106;
    goto LABEL_86;
  }
  v28 = *((_QWORD *)a7 + 1);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_180;
  v29 = *(const void **)a7;
  if (v28 >= 0x17)
  {
    v57 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v57 = v28 | 7;
    v58 = v57 + 1;
    v30 = (std::string *)operator new(v57 + 1);
    __dst.__r_.__value_.__l.__size_ = v28;
    __dst.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    goto LABEL_91;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *((_QWORD *)v19 + 1);
  v30 = &__dst;
  if (v28)
LABEL_91:
    memmove(v30, v29, v28);
  v30->__r_.__value_.__s.__data_[v28] = 0;
  if (SHIBYTE(v97[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97[0].__r_.__value_.__l.__data_);
  v97[0] = __dst;
  v54 = v97;
  if (!*((_BYTE *)v19 + 40))
    goto LABEL_85;
LABEL_95:
  v59 = *((_QWORD *)v19 + 4);
  if (v59 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_180;
  v60 = (const void *)*((_QWORD *)v19 + 3);
  if (v59 >= 0x17)
  {
    v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v62 = v59 | 7;
    v63 = v62 + 1;
    v61 = (std::string *)operator new(v62 + 1);
    __dst.__r_.__value_.__l.__size_ = v59;
    __dst.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    goto LABEL_102;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *((_QWORD *)v19 + 4);
  v61 = &__dst;
  if (v59)
LABEL_102:
    memmove(v61, v60, v59);
  v61->__r_.__value_.__s.__data_[v59] = 0;
  v55 = &v97[1];
  if (SHIBYTE(v97[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97[1].__r_.__value_.__l.__data_);
  v97[1] = __dst;
  if (*((_BYTE *)v19 + 64))
  {
LABEL_106:
    v64 = *((_QWORD *)v19 + 7);
    if (v64 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_180;
    v65 = (const void *)*((_QWORD *)v19 + 6);
    if (v64 >= 0x17)
    {
      v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v64 | 7) != 0x17)
        v67 = v64 | 7;
      v68 = v67 + 1;
      v66 = (std::string *)operator new(v67 + 1);
      __dst.__r_.__value_.__l.__size_ = v64;
      __dst.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *((_QWORD *)v19 + 7);
      v66 = &__dst;
      if (!v64)
      {
LABEL_114:
        v66->__r_.__value_.__s.__data_[v64] = 0;
        v56 = &v98;
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        v98 = __dst;
        posix_spawn_file_actions_init((posix_spawn_file_actions_t *)v105);
        if (!v54)
          goto LABEL_127;
        goto LABEL_117;
      }
    }
    memmove(v66, v65, v64);
    goto LABEL_114;
  }
LABEL_86:
  v56 = 0;
  posix_spawn_file_actions_init((posix_spawn_file_actions_t *)v105);
  if (!v54)
    goto LABEL_127;
LABEL_117:
  if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v54->__r_.__value_.__l.__size_)
      v69 = (const char *)v54->__r_.__value_.__r.__words[0];
    else
      v69 = "/dev/null";
  }
  else if (*((_BYTE *)&v54->__r_.__value_.__s + 23))
  {
    v69 = (const char *)v54;
  }
  else
  {
    v69 = "/dev/null";
  }
  v71 = (llvm::sys *)posix_spawn_file_actions_addopen((posix_spawn_file_actions_t *)v105, 0, v69, 0, 0x1B6u);
  if ((_DWORD)v71)
  {
LABEL_136:
    v73 = v71;
    v74 = (char *)operator new(0x28uLL);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_181261450;
    strcpy(v74, "Cannot posix_spawn_file_actions_addopen");
    MakeErrMsg(a10, (const void **)&__dst.__r_.__value_.__l.__data_, v73);
    operator delete(v74);
    v24 = 0;
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_137;
    goto LABEL_138;
  }
LABEL_127:
  if (v55)
  {
    if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
      v72 = v55->__r_.__value_.__l.__size_ ? (const char *)v55->__r_.__value_.__r.__words[0] : "/dev/null";
    else
      v72 = *((_BYTE *)&v55->__r_.__value_.__s + 23) ? (const char *)v55 : "/dev/null";
    v71 = (llvm::sys *)posix_spawn_file_actions_addopen((posix_spawn_file_actions_t *)v105, 1, v72, 513, 0x1B6u);
    if ((_DWORD)v71)
      goto LABEL_136;
  }
  if (*((_BYTE *)v19 + 40)
    && *((_BYTE *)v19 + 64)
    && (v76 = *((_QWORD *)v19 + 4), v76 == *((_QWORD *)v19 + 7))
    && (!v76 || !memcmp(*((const void **)v19 + 3), *((const void **)v19 + 6), v76)))
  {
    v43 = (posix_spawn_file_actions_t *)v105;
    v78 = (llvm::sys *)posix_spawn_file_actions_adddup2((posix_spawn_file_actions_t *)v105, 1, 2);
    if ((_DWORD)v78)
    {
      v79 = v78;
      std::string::basic_string[abi:nn180100]<0>(&__dst, "Can't redirect stderr to stdout");
      MakeErrMsg(a10, (const void **)&__dst.__r_.__value_.__l.__data_, v79);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v24 = 0;
      if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_138;
LABEL_137:
      operator delete(v98.__r_.__value_.__l.__data_);
      goto LABEL_138;
    }
  }
  else
  {
    if (!v56)
    {
      v42 = v21;
      v43 = (posix_spawn_file_actions_t *)v105;
      goto LABEL_58;
    }
    if (SHIBYTE(v56->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v56->__r_.__value_.__l.__size_)
        v77 = (const char *)v56->__r_.__value_.__r.__words[0];
      else
        v77 = "/dev/null";
    }
    else if (*((_BYTE *)&v56->__r_.__value_.__s + 23))
    {
      v77 = (const char *)v56;
    }
    else
    {
      v77 = "/dev/null";
    }
    v43 = (posix_spawn_file_actions_t *)v105;
    v71 = (llvm::sys *)posix_spawn_file_actions_addopen((posix_spawn_file_actions_t *)v105, 2, v77, 513, 0x1B6u);
    if ((_DWORD)v71)
      goto LABEL_136;
  }
  v42 = v21;
LABEL_58:
  v44 = 0;
  v83 = v42;
  if (v42)
    v45 = v42;
  else
    v45 = (char *const *)*MEMORY[0x1E0C831D0];
  do
  {
    v91 = 0;
    v46 = __src;
    if (!__src)
    {
      memset(&__dst, 0, sizeof(__dst));
      v49 = &__dst;
      goto LABEL_74;
    }
    v47 = __len;
    if (__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_180;
    if (__len >= 0x17)
    {
      v50 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v50 = __len | 7;
      v51 = v50 + 1;
      v48 = (std::string *)operator new(v50 + 1);
      __dst.__r_.__value_.__l.__size_ = v47;
      __dst.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
LABEL_70:
      memmove(v48, v46, v47);
      goto LABEL_71;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    v48 = &__dst;
    if (__len)
      goto LABEL_70;
LABEL_71:
    v48->__r_.__value_.__s.__data_[v47] = 0;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &__dst;
    else
      v49 = (std::string *)__dst.__r_.__value_.__r.__words[0];
LABEL_74:
    v52 = (llvm::sys *)posix_spawn(&v91, (const char *)v49, v43, 0, v20, v45);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if ((_DWORD)v52 != 4)
      break;
  }
  while (v44++ < 7);
  if (v43)
    posix_spawn_file_actions_destroy(v43);
  v24 = (_DWORD)v52 == 0;
  v21 = v83;
  if (!(_DWORD)v52)
  {
    v70 = v91;
    *v84 = v91;
    v84[1] = v70;
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_138;
    goto LABEL_137;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__dst, "posix_spawn failed");
  MakeErrMsg(a10, (const void **)&__dst.__r_.__value_.__l.__data_, v52);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_137;
LABEL_138:
  if ((SHIBYTE(v97[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v97[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_140;
LABEL_154:
    operator delete(v97[0].__r_.__value_.__l.__data_);
    if (!v21)
      goto LABEL_142;
LABEL_141:
    operator delete(v21);
    goto LABEL_142;
  }
  operator delete(v97[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v97[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_154;
LABEL_140:
  if (v21)
    goto LABEL_141;
LABEL_142:
  if (v20)
    operator delete(v20);
  if ((_DWORD)v100)
    llvm::deallocate_buffer(*(llvm **)v99.__r_.__value_.__r.__words[2], (void *)0x1000);
  if ((_DWORD)v103)
    llvm::deallocate_buffer(*v102, v102[1]);
  if (v102 != v104)
    free(v102);
  if ((_WORD *)v99.__r_.__value_.__r.__words[2] != v101)
    free((void *)v99.__r_.__value_.__r.__words[2]);
  return v24;
}

uint64_t llvm::sys::Wait(pid_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  pid_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  pid_t v13;
  unsigned int v14;
  __darwin_time_t v15;
  uint64_t ru_maxrss;
  int v17;
  char v18;
  int v19;
  char *v20;
  char *v21;
  char *v22;
  _BYTE v24[24];
  rusage v25;
  int v26;
  sigaction v27;
  sigaction v28;

  v9 = *a1;
  v10 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    v11 = a2;
    v12 = a2 == 0;
    v28.__sigaction_u.__sa_handler = (void (__cdecl *)(int))TimeOutHandler;
    *(_QWORD *)&v28.sa_mask = 0;
    sigaction(14, &v28, &v27);
    alarm(v11);
    v26 = 0;
    if (!a4)
      goto LABEL_7;
  }
  else
  {
    v12 = 0;
    v26 = 0;
    if (!a4)
      goto LABEL_7;
  }
  if (*(_BYTE *)(a4 + 24))
    *(_BYTE *)(a4 + 24) = 0;
LABEL_7:
  if (v10)
  {
    v13 = wait4(v9, &v26, v12, &v25);
  }
  else
  {
    while (1)
    {
      v13 = wait4(v9, &v26, v12, &v25);
      if (v13 != -1)
        break;
      if (*__error() != 4)
      {
        v14 = -1;
        if (*a1 == -1)
          goto LABEL_22;
        goto LABEL_19;
      }
    }
  }
  v14 = v13;
  if (v13 != *a1)
  {
    if (!v13)
      return v14;
    if (v10 && *__error() == 4 && (a5 & 1) == 0)
    {
      kill(*a1, 9);
      alarm(0);
      sigaction(14, &v27, 0);
      if (wait(&v26) == v9)
      {
        v24[23] = 15;
        strcpy(v24, "Child timed out");
        MakeErrMsg(a3, (const void **)v24, 0);
      }
      else
      {
        v22 = (char *)operator new(0x28uLL);
        *(_QWORD *)v24 = v22;
        *(_OWORD *)&v24[8] = xmmword_181261460;
        strcpy(v22, "Child timed out but wouldn't die");
        MakeErrMsg(a3, (const void **)v24, (llvm::sys *)0xFFFFFFFFLL);
        operator delete(v22);
      }
      return v14;
    }
LABEL_19:
    if (*__error() != 4)
    {
      v21 = (char *)operator new(0x20uLL);
      *(_QWORD *)v24 = v21;
      *(_OWORD *)&v24[8] = xmmword_181261470;
      strcpy(v21, "Error waiting for child process");
      MakeErrMsg(a3, (const void **)v24, (llvm::sys *)0xFFFFFFFFLL);
      operator delete(v21);
      return v14;
    }
  }
  if (v10)
  {
    alarm(0);
    sigaction(14, &v27, 0);
  }
LABEL_22:
  if (a4
    && (v15 = v25.ru_utime.tv_usec + 1000000 * v25.ru_utime.tv_sec,
        ru_maxrss = v25.ru_maxrss,
        v17 = *(unsigned __int8 *)(a4 + 24),
        *(_QWORD *)a4 = v15 + 1000000 * v25.ru_stime.tv_sec + v25.ru_stime.tv_usec,
        *(_QWORD *)(a4 + 8) = v15,
        *(_QWORD *)(a4 + 16) = ru_maxrss,
        !v17))
  {
    *(_BYTE *)(a4 + 24) = 1;
    v18 = BYTE1(v26);
    v19 = v26 & 0x7F;
    if (v19 == 127)
      return v14;
  }
  else
  {
    v18 = BYTE1(v26);
    v19 = v26 & 0x7F;
    if (v19 == 127)
      return v14;
  }
  if (v19)
  {
    if (a3)
    {
      v20 = strsignal(v19);
      MEMORY[0x186DA1308](a3, v20);
      if ((v26 & 0x80) != 0)
        std::string::append((std::string *)a3, " (core dumped)");
    }
  }
  else if (v18 == 126)
  {
    if (a3)
      MEMORY[0x186DA1308](a3, "Program could not be executed");
  }
  else if (v18 == 127 && a3)
  {
    llvm::sys::StrError(2, v24);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)v24;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v24[16];
  }
  return v14;
}

double llvm::sys::findProgramByName@<D0>(void *__s@<X0>, size_t __n@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  size_t v7;
  _BYTE *v9;
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  _BYTE *v15;
  const llvm::Twine *v16;
  void *v17;
  _BOOL4 v18;
  double result;
  BOOL v20;
  _BYTE *v21;
  _BOOL4 can_execute;
  size_t v23;
  size_t v24;
  __int128 *p_dst;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  size_t v30;
  const std::error_category *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  _QWORD *v39;
  __int16 v40;
  __int128 __dst;
  unint64_t v42;
  __int16 v43;
  void *__src;
  __int128 __len;
  _BYTE v46[128];
  __int128 v47;
  _QWORD v48[34];

  v7 = __n;
  v48[32] = *MEMORY[0x1E0C80C00];
  if (__n)
  {
    v9 = memchr(__s, 47, __n);
    if (v9)
    {
      if (v9 - (_BYTE *)__s != -1)
      {
        if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_43:
          abort();
        if (v7 >= 0x17)
        {
          v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v32 = v7 | 7;
          v33 = v32 + 1;
          v10 = (__int128 *)operator new(v32 + 1);
          *((_QWORD *)&v47 + 1) = v7;
          v48[0] = v33 | 0x8000000000000000;
          *(_QWORD *)&v47 = v10;
        }
        else
        {
          HIBYTE(v48[0]) = v7;
          v10 = &v47;
        }
        memmove(v10, __s, v7);
        *((_BYTE *)v10 + v7) = 0;
        *(_BYTE *)(a5 + 24) &= ~1u;
        result = *(double *)&v47;
        *(_OWORD *)a5 = v47;
        *(_QWORD *)(a5 + 16) = v48[0];
        return result;
      }
    }
  }
  *(_QWORD *)&v47 = v48;
  *((_QWORD *)&v47 + 1) = 0x1000000000;
  if (a4)
  {
    v11 = a3 + 16 * a4;
    goto LABEL_11;
  }
  v28 = getenv("PATH");
  if (v28)
  {
    v29 = (uint64_t)v28;
    v30 = strlen(v28);
    llvm::SplitString(v29, v30, (uint64_t)&v47, ":", 1);
    if (DWORD2(v47))
    {
      a3 = v47;
      v11 = v47 + 16 * DWORD2(v47);
      do
      {
LABEL_11:
        v12 = *(_QWORD *)(a3 + 8);
        if (!v12)
          goto LABEL_10;
        v13 = *(const void **)a3;
        __src = v46;
        __len = xmmword_181236BB0;
        if (v12 < 0x81)
        {
          v14 = 0;
          v15 = v46;
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v46, v12, 1);
          v15 = __src;
          v14 = __len;
        }
        memcpy(&v15[v14], v13, v12);
        *(_QWORD *)&__len = __len + v12;
        v43 = 261;
        *(_QWORD *)&__dst = __s;
        *((_QWORD *)&__dst + 1) = v7;
        v40 = 257;
        v38 = 257;
        v36 = 257;
        llvm::sys::path::append(&__src, (_QWORD **)&__dst, &v39, &v37, &v35);
        if ((unint64_t)(__len + 1) > *((_QWORD *)&__len + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v46, __len + 1, 1);
          *((_BYTE *)__src + __len) = 0;
          v17 = __src;
          v43 = 257;
          if (!*(_BYTE *)__src)
          {
LABEL_20:
            LOBYTE(v43) = 1;
            can_execute = llvm::sys::fs::can_execute((llvm::sys::fs *)&__dst, v16);
            v20 = can_execute;
            v21 = __src;
            if (!can_execute)
              goto LABEL_30;
LABEL_21:
            v23 = __len;
            if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_43;
            v24 = v7;
            if ((unint64_t)__len >= 0x17)
            {
              v26 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
              if (((unint64_t)__len | 7) != 0x17)
                v26 = __len | 7;
              v27 = v26 + 1;
              p_dst = (__int128 *)operator new(v26 + 1);
              *((_QWORD *)&__dst + 1) = v23;
              v42 = v27 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v42) = __len;
              p_dst = &__dst;
              if (!(_QWORD)__len)
                goto LABEL_29;
            }
            memmove(p_dst, v21, v23);
LABEL_29:
            *((_BYTE *)p_dst + v23) = 0;
            *(_BYTE *)(a5 + 24) &= ~1u;
            result = *(double *)&__dst;
            *(_OWORD *)a5 = __dst;
            *(_QWORD *)(a5 + 16) = v42;
            v21 = __src;
            v7 = v24;
            goto LABEL_30;
          }
        }
        else
        {
          *((_BYTE *)__src + __len) = 0;
          v17 = __src;
          v43 = 257;
          if (!*(_BYTE *)__src)
            goto LABEL_20;
        }
        *(_QWORD *)&__dst = v17;
        LOBYTE(v43) = 3;
        v18 = llvm::sys::fs::can_execute((llvm::sys::fs *)&__dst, v16);
        v20 = v18;
        v21 = __src;
        if (v18)
          goto LABEL_21;
LABEL_30:
        if (v21 != v46)
          free(v21);
        if (v20)
          goto LABEL_36;
LABEL_10:
        a3 += 16;
      }
      while (a3 != v11);
    }
  }
  *(_BYTE *)(a5 + 24) |= 1u;
  v31 = std::generic_category();
  *(_QWORD *)a5 = 2;
  *(_QWORD *)(a5 + 8) = v31;
LABEL_36:
  if ((_QWORD *)v47 != v48)
    free((void *)v47);
  return result;
}

_QWORD *std::string::basic_string<llvm::StringRef,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v2;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v2;
    v5 = __dst;
    if (!v2)
      goto LABEL_9;
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((_BYTE *)v5 + v2) = 0;
  return __dst;
}

void MakeErrMsg(uint64_t a1, const void **a2, llvm::sys *this)
{
  uint64_t v3;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v20;
  std::string __dst;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v3 = (uint64_t)this;
  if ((_DWORD)this == -1)
    v3 = *__error();
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  v8 = v7 + 2;
  if (v7 + 2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 2;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_14;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7 + 2;
  if (v7)
  {
LABEL_14:
    if (v6 >= 0)
      v12 = a2;
    else
      v12 = *a2;
    memmove(p_dst, v12, v7);
  }
  strcpy((char *)p_dst + v7, ": ");
  llvm::sys::StrError(v3, __p);
  if ((v20 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v14 = v20;
  else
    v14 = (std::string::size_type)__p[1];
  v15 = std::string::append(&__dst, (const std::string::value_type *)v13, v14);
  v16 = v15->__r_.__value_.__r.__words[0];
  v22[0] = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v18 = v22[0];
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v22 + 7);
  *(_BYTE *)(a1 + 23) = v17;
  if (((char)v20 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_30;
}

uint64_t llvm::sys::ChangeStdinMode()
{
  std::system_category();
  return 0;
}

void toNullTerminatedCStringArray(char **a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!a3)
  {
    v7 = 0;
    v30 = 0;
    goto LABEL_37;
  }
  v5 = a4;
  v6 = a2;
  v7 = 0;
  v8 = a2 + 16 * a3;
  do
  {
    while (1)
    {
      v9 = llvm::StringSaver::save(v5, *(const void **)v6, *(_QWORD *)(v6 + 8));
      v10 = v9;
      v11 = (unint64_t)a1[2];
      if ((unint64_t)v7 >= v11)
        break;
      *(_QWORD *)v7 = v9;
      v7 += 8;
      a1[1] = v7;
      v6 += 16;
      if (v6 == v8)
        goto LABEL_34;
    }
    v12 = *a1;
    v13 = v7 - *a1;
    v14 = v13 >> 3;
    v15 = (v13 >> 3) + 1;
    if (v15 >> 61)
      goto LABEL_60;
    v16 = v11 - (_QWORD)v12;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (!v17)
    {
      v18 = 0;
      v19 = (char *)(8 * v14);
      *(_QWORD *)(8 * v14) = v10;
      v20 = 8 * v14 + 8;
      if (v7 == v12)
        goto LABEL_20;
LABEL_16:
      v21 = v7 - 8 - v12;
      if (v21 >= 0x168)
      {
        if (&v18[v13 - 8 - (v21 & 0xFFFFFFFFFFFFFFF8)] > &v18[v13 - 8])
        {
          v22 = v7;
        }
        else if (&v7[-(v21 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8)
        {
          v22 = v7;
        }
        else if ((unint64_t)(v7 - &v18[v13]) >= 0x20)
        {
          v24 = (v21 >> 3) + 1;
          v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v7[-v25];
          v19 -= v25;
          v26 = &v18[8 * v14 - 16];
          v27 = v7 - 16;
          v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v29 = *(_OWORD *)v27;
            *(v26 - 1) = *((_OWORD *)v27 - 1);
            *v26 = v29;
            v26 -= 2;
            v27 -= 32;
            v28 -= 4;
          }
          while (v28);
          if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_19;
        }
        else
        {
          v22 = v7;
        }
      }
      else
      {
        v22 = v7;
      }
      do
      {
        v23 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v22 != v12);
LABEL_19:
      v7 = *a1;
      goto LABEL_20;
    }
    if (v17 >> 61)
      goto LABEL_61;
    v18 = operator new(8 * v17);
    v19 = &v18[8 * v14];
    *(_QWORD *)v19 = v10;
    v20 = (uint64_t)(v19 + 8);
    if (v7 != v12)
      goto LABEL_16;
LABEL_20:
    *a1 = v19;
    a1[1] = (char *)v20;
    a1[2] = &v18[8 * v17];
    if (v7)
      operator delete(v7);
    v7 = (char *)v20;
    v5 = a4;
    a1[1] = (char *)v20;
    v6 += 16;
  }
  while (v6 != v8);
LABEL_34:
  v30 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v30)
  {
    *(_QWORD *)v7 = 0;
    v31 = (uint64_t)(v7 + 8);
    goto LABEL_59;
  }
LABEL_37:
  v32 = *a1;
  v33 = v7 - *a1;
  v34 = v33 >> 3;
  v35 = (v33 >> 3) + 1;
  if (v35 >> 61)
LABEL_60:
    abort();
  v36 = v30 - (_QWORD)v32;
  if (v36 >> 2 > v35)
    v35 = v36 >> 2;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
    v37 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (v37)
  {
    if (v37 >> 61)
LABEL_61:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v38 = operator new(8 * v37);
    v39 = &v38[8 * v34];
    v40 = &v38[8 * v37];
    *(_QWORD *)v39 = 0;
    v31 = (uint64_t)(v39 + 8);
    v41 = (char *)(v7 - v32);
    if (v7 == v32)
      goto LABEL_57;
LABEL_48:
    v42 = (unint64_t)(v41 - 8);
    if (v42 < 0x58)
    {
      v43 = v7;
      goto LABEL_55;
    }
    if ((unint64_t)(v7 - v38 - v33) < 0x20)
    {
      v43 = v7;
      goto LABEL_55;
    }
    v44 = (v42 >> 3) + 1;
    v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    v43 = &v7[-v45];
    v39 -= v45;
    v46 = &v38[8 * v34 - 16];
    v47 = v7 - 16;
    v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v49 = *(_OWORD *)v47;
      *(v46 - 1) = *((_OWORD *)v47 - 1);
      *v46 = v49;
      v46 -= 2;
      v47 -= 32;
      v48 -= 4;
    }
    while (v48);
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_55:
        v50 = *((_QWORD *)v43 - 1);
        v43 -= 8;
        *((_QWORD *)v39 - 1) = v50;
        v39 -= 8;
      }
      while (v43 != v32);
    }
    v7 = *a1;
  }
  else
  {
    v38 = 0;
    v39 = (char *)(8 * v34);
    v40 = 0;
    *(_QWORD *)(8 * v34) = 0;
    v31 = 8 * v34 + 8;
    v41 = (char *)(v7 - v32);
    if (v7 != v32)
      goto LABEL_48;
  }
LABEL_57:
  *a1 = v39;
  a1[1] = (char *)v31;
  a1[2] = v40;
  if (v7)
    operator delete(v7);
LABEL_59:
  a1[1] = (char *)v31;
}

uint64_t RedirectIO(uint64_t a1, int a2, uint64_t a3)
{
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  int v12;
  int v13;
  std::string *v14;
  std::string::size_type v15;
  const std::string::value_type *v16;
  std::string *v17;
  std::string v19;
  std::string v20;
  std::string __dst;
  std::string v22;

  if (!*(_BYTE *)(a1 + 16))
    return 0;
  memset(&v22, 0, sizeof(v22));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = *(const void **)a1;
    if (v5 >= 0x17)
    {
      v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v9 = v5 | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(a1 + 8);
      p_dst = &__dst;
    }
    memmove(p_dst, v6, v5);
    p_dst->__r_.__value_.__s.__data_[v5] = 0;
    v22 = __dst;
  }
  else
  {
    MEMORY[0x186DA1308](&v22, "/dev/null");
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v22;
  else
    v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if (a2)
    v12 = open((const char *)v11, 513, 438);
  else
    v12 = open((const char *)v11, 0, 438);
  if (v12 == -1)
  {
    std::operator+<char>();
    v14 = std::string::append(&v19, "' for ");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (a2)
      v16 = "output";
    else
      v16 = "input";
    v17 = std::string::append(&v20, v16);
    __dst = *v17;
    v17->__r_.__value_.__r.__words[0] = 0;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    MakeErrMsg(a3, (const void **)&__dst.__r_.__value_.__l.__data_, (llvm::sys *)0xFFFFFFFFLL);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_27:
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_28;
        goto LABEL_35;
      }
    }
    else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      v8 = 1;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_29;
      return v8;
    }
LABEL_35:
    operator delete(v19.__r_.__value_.__l.__data_);
    v8 = 1;
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v8;
    goto LABEL_29;
  }
  v13 = v12;
  if (dup2(v12, a2) == -1)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__dst, "Cannot dup2");
    MakeErrMsg(a3, (const void **)&__dst.__r_.__value_.__l.__data_, (llvm::sys *)0xFFFFFFFFLL);
    close(v13);
    v8 = 1;
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v8;
    goto LABEL_29;
  }
  close(v13);
  v8 = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
  return v8;
}

uint64_t SetMemoryLimits(unsigned int a1)
{
  rlim_t v1;
  rlimit v3;

  v1 = (unint64_t)a1 << 20;
  getrlimit(2, &v3);
  v3.rlim_cur = v1;
  setrlimit(2, &v3);
  getrlimit(5, &v3);
  v3.rlim_cur = v1;
  return setrlimit(5, &v3);
}

llvm::sys::RWMutexImpl *llvm::sys::RWMutexImpl::RWMutexImpl(llvm::sys::RWMutexImpl *this)
{
  pthread_rwlock_t *v2;
  pthread_rwlock_t *v3;

  *(_QWORD *)this = 0;
  v2 = (pthread_rwlock_t *)malloc(0xC8uLL);
  if (!v2)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v3 = v2;
  bzero(v2, 0xC8uLL);
  pthread_rwlock_init(v3, 0);
  *(_QWORD *)this = v3;
  return this;
}

void llvm::sys::RWMutexImpl::~RWMutexImpl(pthread_rwlock_t **this)
{
  pthread_rwlock_t *v1;

  v1 = *this;
  pthread_rwlock_destroy(*this);
  free(v1);
}

BOOL llvm::sys::RWMutexImpl::lock_shared(pthread_rwlock_t **this)
{
  return pthread_rwlock_rdlock(*this) == 0;
}

BOOL llvm::sys::RWMutexImpl::unlock_shared(pthread_rwlock_t **this)
{
  return pthread_rwlock_unlock(*this) == 0;
}

BOOL llvm::sys::RWMutexImpl::lock(pthread_rwlock_t **this)
{
  return pthread_rwlock_wrlock(*this) == 0;
}

void llvm::initSignalsOptions(llvm *this)
{
  if (atomic_load((unint64_t *)&qword_1ECD33628))
  {
    if (atomic_load(qword_1ECD33640))
      return;
LABEL_5:
    return;
  }
  if (!atomic_load(qword_1ECD33640))
    goto LABEL_5;
}

uint64_t llvm::sys::RunSignalHandlers(llvm::sys *this)
{
  unsigned int v1;
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  while (1)
  {
    v1 = __ldaxr((unsigned int *)&unk_1ECD336B0);
    if (v1 != 2)
      break;
    if (!__stlxr(3u, (unsigned int *)&unk_1ECD336B0))
    {
      result = qword_1ECD336A0(*(_QWORD *)algn_1ECD336A8);
      qword_1ECD336A0 = 0;
      *(_QWORD *)algn_1ECD336A8 = 0;
      atomic_store(0, (unsigned int *)&unk_1ECD336B0);
      goto LABEL_5;
    }
  }
  __clrex();
LABEL_5:
  while (1)
  {
    v3 = __ldaxr((unsigned int *)&unk_1ECD336C8);
    if (v3 != 2)
      break;
    if (!__stlxr(3u, (unsigned int *)&unk_1ECD336C8))
    {
      result = qword_1ECD336B8(unk_1ECD336C0);
      qword_1ECD336B8 = 0;
      unk_1ECD336C0 = 0;
      atomic_store(0, (unsigned int *)&unk_1ECD336C8);
      goto LABEL_9;
    }
  }
  __clrex();
LABEL_9:
  while (1)
  {
    v4 = __ldaxr((unsigned int *)&unk_1ECD336E0);
    if (v4 != 2)
      break;
    if (!__stlxr(3u, (unsigned int *)&unk_1ECD336E0))
    {
      result = qword_1ECD336D0(*(_QWORD *)algn_1ECD336D8);
      qword_1ECD336D0 = 0;
      *(_QWORD *)algn_1ECD336D8 = 0;
      atomic_store(0, (unsigned int *)&unk_1ECD336E0);
      goto LABEL_13;
    }
  }
  __clrex();
LABEL_13:
  while (1)
  {
    v5 = __ldaxr((unsigned int *)&unk_1ECD336F8);
    if (v5 != 2)
      break;
    if (!__stlxr(3u, (unsigned int *)&unk_1ECD336F8))
    {
      result = qword_1ECD336E8(unk_1ECD336F0);
      qword_1ECD336E8 = 0;
      unk_1ECD336F0 = 0;
      atomic_store(0, (unsigned int *)&unk_1ECD336F8);
      goto LABEL_17;
    }
  }
  __clrex();
LABEL_17:
  while (1)
  {
    v6 = __ldaxr((unsigned int *)&unk_1ECD33710);
    if (v6 != 2)
      break;
    if (!__stlxr(3u, (unsigned int *)&unk_1ECD33710))
    {
      result = qword_1ECD33700(*(_QWORD *)algn_1ECD33708);
      qword_1ECD33700 = 0;
      *(_QWORD *)algn_1ECD33708 = 0;
      atomic_store(0, (unsigned int *)&unk_1ECD33710);
      goto LABEL_21;
    }
  }
  __clrex();
LABEL_21:
  while (1)
  {
    v7 = __ldaxr((unsigned int *)&unk_1ECD33728);
    if (v7 != 2)
      break;
    if (!__stlxr(3u, (unsigned int *)&unk_1ECD33728))
    {
      result = qword_1ECD33718(unk_1ECD33720);
      qword_1ECD33718 = 0;
      unk_1ECD33720 = 0;
      atomic_store(0, (unsigned int *)&unk_1ECD33728);
      goto LABEL_25;
    }
  }
  __clrex();
LABEL_25:
  while (1)
  {
    v8 = __ldaxr((unsigned int *)&unk_1ECD33740);
    if (v8 != 2)
      break;
    if (!__stlxr(3u, (unsigned int *)&unk_1ECD33740))
    {
      result = qword_1ECD33730(*(_QWORD *)algn_1ECD33738);
      qword_1ECD33730 = 0;
      *(_QWORD *)algn_1ECD33738 = 0;
      atomic_store(0, (unsigned int *)&unk_1ECD33740);
      goto LABEL_29;
    }
  }
  __clrex();
LABEL_29:
  while (1)
  {
    v9 = __ldaxr(dword_1ECD33758);
    if (v9 != 2)
      break;
    if (!__stlxr(3u, dword_1ECD33758))
    {
      result = qword_1ECD33748(unk_1ECD33750);
      qword_1ECD33748 = 0;
      unk_1ECD33750 = 0;
      atomic_store(0, dword_1ECD33758);
      return result;
    }
  }
  __clrex();
  return result;
}

uint64_t printSymbolizedStackTrace(uint64_t a1, uint64_t a2, intptr_t *a3, int a4, llvm::raw_ostream *a5)
{
  uint64_t v6;
  const std::error_category *v8;
  char *v9;
  char *v10;
  size_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  intptr_t *v20;
  uint32_t v21;
  uint32_t v22;
  uint64_t v23;
  uint32_t i;
  const char *image_name;
  intptr_t image_vmaddr_slide;
  const mach_header *image_header;
  uint32_t ncmds;
  int v29;
  int32_t *p_cputype;
  const char **v31;
  uint64_t v32;
  intptr_t *v33;
  _QWORD *v34;
  intptr_t v35;
  intptr_t v36;
  uint32_t j;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t k;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  const void *v46;
  size_t v47;
  size_t v48;
  char *v49;
  char **p_p;
  char **v51;
  __int128 *v52;
  size_t v53;
  _BYTE *v54;
  char v55;
  char v56;
  uint64_t v57;
  const char **v58;
  int m;
  const char **v60;
  _QWORD *v61;
  size_t v62;
  _WORD *v63;
  void *v64;
  llvm::raw_ostream *v65;
  _BYTE *v66;
  const char *v67;
  unint64_t v68;
  void *v69;
  llvm::raw_ostream *v70;
  size_t v71;
  _BYTE *v72;
  llvm::raw_ostream *v73;
  const void *v74;
  size_t v75;
  void *v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  _QWORD v82[2];
  int v83;
  __int16 v84;
  char v85;
  _QWORD v86[5];
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  char v90;
  unsigned int v91;
  void *__dst[2];
  char v93;
  int v94;
  intptr_t *v95;
  __int128 v96;
  __int128 __p;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char v102;
  _OWORD v103[4];
  __int128 v104;
  char v105;
  void *v106;
  uint64_t v107;
  char v108;
  const char *v109;
  uint64_t v110;
  char v111;
  _BYTE v112[24];
  _BYTE v113[128];
  char v114;
  _BYTE v115[24];
  _BYTE v116[128];
  char v117;
  void *v118;
  __int128 v119;
  _BYTE v120[32];
  _BYTE v121[24];
  _QWORD v122[6];
  llvm **v123;
  uint64_t v124;
  _BYTE v125[32];
  llvm **v126;
  uint64_t v127;
  _QWORD v128[2];
  __int128 v129;
  uint64_t v130;
  char v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v96 = a1;
  *((_QWORD *)&v96 + 1) = a2;
  v95 = a3;
  v94 = a4;
  if (DisableSymbolicationFlag
    || getenv("LLVM_DISABLE_SYMBOLIZATION")
    || llvm::StringRef::find((uint64_t *)&v96, "llvm-symbolizer", 0xFuLL, 0) != -1)
  {
    return 0;
  }
  v8 = std::system_category();
  v131 |= 1u;
  *(_QWORD *)&v129 = 0;
  *((_QWORD *)&v129 + 1) = v8;
  v9 = getenv("LLVM_SYMBOLIZER_PATH");
  if (v9)
  {
    v10 = v9;
    v11 = strlen(v9);
    llvm::sys::findProgramByName(v10, v11, 0, 0, (uint64_t)&__p);
    v12 = v131;
    if ((v131 & 1) == 0 && SHIBYTE(v130) < 0)
    {
      operator delete((void *)v129);
      v12 = v131;
    }
    if ((v99 & 1) != 0)
    {
      v13 = v12 | 1;
      v129 = __p;
    }
    else
    {
      v13 = v12 & 0xFE;
      v129 = __p;
      v130 = v98;
    }
    v131 = v13;
  }
  else if (*((_QWORD *)&v96 + 1))
  {
    *(_QWORD *)v115 = llvm::sys::path::parent_path((unsigned __int8 *)v96, *((unint64_t *)&v96 + 1), 0);
    *(_QWORD *)&v115[8] = v14;
    if (v14)
    {
      llvm::sys::findProgramByName("llvm-symbolizer", 0xFuLL, (uint64_t)v115, 1, (uint64_t)&__p);
      llvm::ErrorOr<std::string>::operator=((uint64_t)&v129, &__p);
      if ((v99 & 1) == 0 && SHIBYTE(v98) < 0)
        operator delete((void *)__p);
    }
  }
  v15 = v131;
  if ((v131 & 1) != 0)
  {
    llvm::sys::findProgramByName("llvm-symbolizer", 0xFuLL, 0, 0, (uint64_t)&__p);
    v16 = v131;
    if ((v131 & 1) == 0 && SHIBYTE(v130) < 0)
    {
      operator delete((void *)v129);
      v16 = v131;
    }
    if ((v99 & 1) != 0)
    {
      v15 = v16 | 1;
      v129 = __p;
    }
    else
    {
      v15 = v16 & 0xFE;
      v129 = __p;
      v130 = v98;
    }
    v131 = v15;
  }
  if ((v15 & 1) != 0)
  {
    v6 = 0;
    goto LABEL_170;
  }
  LOWORD(v100) = 261;
  __p = v96;
  if (llvm::sys::fs::access((unsigned __int8 *)&__p, 0))
    llvm::sys::fs::getMainExecutable(__dst);
  else
    std::string::basic_string<llvm::StringRef,0>(__dst, (uint64_t)&v96);
  v122[4] = 0;
  v122[5] = 0;
  v123 = (llvm **)v125;
  v124 = 0x400000000;
  v126 = (llvm **)v128;
  v127 = 0;
  v128[0] = 0;
  v128[1] = 1;
  v17 = v94;
  if (v94)
  {
    if (v94 < 0)
      abort();
    v18 = operator new(8 * v94);
    bzero(v18, 8 * v17);
    v19 = operator new(8 * v17);
    bzero(v19, 8 * v17);
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v20 = v95;
  v21 = _dyld_image_count();
  if (v21)
  {
    v22 = v21;
    v23 = v17;
    if ((_DWORD)v17)
    {
      for (i = 0; i != v22; ++i)
      {
        image_name = _dyld_get_image_name(i);
        image_vmaddr_slide = _dyld_get_image_vmaddr_slide(i);
        image_header = _dyld_get_image_header(i);
        if (image_header)
        {
          ncmds = image_header->ncmds;
          if (ncmds)
          {
            v29 = 0;
            p_cputype = &image_header[1].cputype;
            do
            {
              v31 = (const char **)v18;
              v32 = v23;
              v33 = v20;
              v34 = v19;
              if ((*p_cputype & 0x7FFFFFFF) == 0x19)
              {
                do
                {
                  if (!*v31)
                  {
                    v35 = *v33;
                    v36 = *((_QWORD *)p_cputype + 3) + image_vmaddr_slide;
                    if (v36 <= *v33 && *((_QWORD *)p_cputype + 4) + v36 > v35)
                    {
                      *v31 = image_name;
                      *v34 = v35 - image_vmaddr_slide;
                    }
                  }
                  ++v34;
                  ++v33;
                  ++v31;
                  --v32;
                }
                while (v32);
              }
              p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
              ++v29;
            }
            while (v29 != ncmds);
          }
        }
      }
    }
    else
    {
      for (j = 0; j != v22; ++j)
      {
        _dyld_get_image_name(j);
        _dyld_get_image_vmaddr_slide(j);
        _dyld_get_image_header(j);
      }
    }
  }
  v91 = 0;
  *(_QWORD *)v121 = v122;
  *(_OWORD *)&v121[8] = xmmword_181233280;
  v118 = v120;
  v119 = xmmword_181233280;
  *(_QWORD *)&__p = "symbolizer-input";
  LOWORD(v100) = 259;
  llvm::sys::fs::createTemporaryFile(&__p, (__int128 *)"", 0, (int *)&v91, v121, 0);
  *(_QWORD *)&__p = "symbolizer-output";
  LOWORD(v100) = 259;
  llvm::sys::fs::createTemporaryFile(&__p, (__int128 *)"", 0, &v118, 0);
  v38 = *(_QWORD *)&v121[8];
  if ((unint64_t)(*(_QWORD *)&v121[8] + 1) > *(_QWORD *)&v121[16])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v121, v122, *(_QWORD *)&v121[8] + 1, 1);
    v38 = *(_QWORD *)&v121[8];
  }
  *(_BYTE *)(*(_QWORD *)v121 + v38) = 0;
  LOWORD(v100) = 257;
  if (**(_BYTE **)v121)
  {
    *(_QWORD *)&__p = *(_QWORD *)v121;
    v39 = 3;
  }
  else
  {
    v39 = 1;
  }
  LOBYTE(v100) = v39;
  *(_QWORD *)v115 = v116;
  *(_OWORD *)&v115[8] = xmmword_181236BB0;
  v117 = 1;
  llvm::Twine::toVector((uint64_t)&__p, (uint64_t)v115);
  v40 = v119;
  if ((unint64_t)(v119 + 1) > *((_QWORD *)&v119 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v118, v120, v119 + 1, 1);
    v40 = v119;
  }
  *((_BYTE *)v118 + v40) = 0;
  LOWORD(v100) = 257;
  if (*(_BYTE *)v118)
  {
    *(_QWORD *)&__p = v118;
    v41 = 3;
  }
  else
  {
    v41 = 1;
  }
  LOBYTE(v100) = v41;
  *(_QWORD *)v112 = v113;
  *(_OWORD *)&v112[8] = xmmword_181236BB0;
  v114 = 1;
  llvm::Twine::toVector((uint64_t)&__p, (uint64_t)v112);
  llvm::raw_fd_ostream::raw_fd_ostream(&__p, v91, 1, 0, 0);
  if (v94 >= 1)
  {
    for (k = 0; k < v94; ++k)
    {
      v46 = (const void *)*((_QWORD *)v18 + k);
      if (!v46)
        continue;
      v47 = strlen(*((const char **)v18 + k));
      v48 = v47;
      v49 = v100;
      if (v47 <= v99 - v100)
      {
        if (v47)
        {
          memcpy(v100, v46, v47);
          v49 = &v100[v48];
          v100 += v48;
        }
        p_p = (char **)&__p;
        v51 = &v100;
        if (v99 != v49)
        {
LABEL_75:
          *v49 = 32;
          ++*v51;
          v44 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)p_p, *((_QWORD *)v19 + k));
          v45 = (_BYTE *)*((_QWORD *)v44 + 4);
          if (*((_BYTE **)v44 + 3) == v45)
          {
LABEL_76:
            llvm::raw_ostream::write(v44, "\n", 1uLL);
            continue;
          }
          goto LABEL_66;
        }
      }
      else
      {
        p_p = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v46, v47);
        v51 = p_p + 4;
        v49 = p_p[4];
        if (p_p[3] != v49)
          goto LABEL_75;
      }
      v43 = llvm::raw_ostream::write((llvm::raw_ostream *)p_p, " ", 1uLL);
      v44 = llvm::raw_ostream::operator<<(v43, *((_QWORD *)v19 + k));
      v45 = (_BYTE *)*((_QWORD *)v44 + 4);
      if (*((_BYTE **)v44 + 3) == v45)
        goto LABEL_76;
LABEL_66:
      *v45 = 10;
      ++*((_QWORD *)v44 + 4);
    }
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&__p);
  v104 = *(_OWORD *)v121;
  v105 = 1;
  v106 = v118;
  v107 = v119;
  v108 = 1;
  v109 = "";
  v110 = 0;
  v111 = 1;
  v103[0] = xmmword_1E0E57150;
  v103[1] = *(_OWORD *)&off_1E0E57160;
  v103[2] = xmmword_1E0E57170;
  v103[3] = *(_OWORD *)&off_1E0E57180;
  if (v130 >= 0)
    v52 = &v129;
  else
    v52 = (__int128 *)v129;
  if (v130 >= 0)
    v53 = HIBYTE(v130);
  else
    v53 = *((_QWORD *)&v129 + 1);
  LOBYTE(v89) = 0;
  v90 = 0;
  v6 = 0;
  if (llvm::sys::ExecuteAndWait(v52, v53, (uint64_t)v103, 4, &v89, &v104, 3, 0, 0, 0, 0, 0))
    goto LABEL_143;
  v54 = (_BYTE *)llvm::SmallString<32u>::c_str(&v118);
  LOWORD(v100) = 257;
  if (*v54)
  {
    *(_QWORD *)&__p = v54;
    v55 = 3;
  }
  else
  {
    v55 = 1;
  }
  LOBYTE(v100) = v55;
  llvm::MemoryBuffer::getFile((unsigned __int8 *)&__p, 0, 1, 0, 0, (uint64_t)&v101);
  v56 = v102;
  if ((v102 & 1) != 0)
  {
    v6 = 0;
    goto LABEL_140;
  }
  v57 = *(_QWORD *)(v101 + 16) - *(_QWORD *)(v101 + 8);
  *(_QWORD *)&v88 = *(_QWORD *)(v101 + 8);
  *((_QWORD *)&v88 + 1) = v57;
  *(_QWORD *)&__p = &v98;
  *((_QWORD *)&__p + 1) = 0x2000000000;
  llvm::StringRef::split(&v88, (uint64_t)&__p, "\n", 1uLL, -1, 1);
  v58 = (const char **)__p;
  v87 = 0;
  if (v94 < 1)
    goto LABEL_134;
  for (m = 0; m < v94; LODWORD(v87) = m)
  {
    v86[0] = a5;
    v86[1] = (char *)&v87 + 4;
    v86[2] = &v94;
    v86[3] = &v95;
    v86[4] = &v87;
    if (*((_QWORD *)v18 + m))
    {
      v60 = (const char **)__p;
      if (v58 == (const char **)(__p + 16 * DWORD2(__p)))
      {
LABEL_136:
        v58 = v60;
        v6 = 0;
        goto LABEL_137;
      }
      v58 += 2;
      while (1)
      {
        v62 = (size_t)*(v58 - 1);
        if (!v62)
          goto LABEL_132;
        v63 = *(v58 - 2);
        printSymbolizedStackTrace(llvm::StringRef,void **,int,llvm::raw_ostream &)::$_0::operator()((uint64_t)v86);
        if (v62 == 1 || *v63 != 16191)
        {
          v64 = (void *)*((_QWORD *)a5 + 4);
          if (v62 <= *((_QWORD *)a5 + 3) - (_QWORD)v64)
          {
            memcpy(v64, v63, v62);
            v66 = (_BYTE *)(*((_QWORD *)a5 + 4) + v62);
            *((_QWORD *)a5 + 4) = v66;
            v65 = a5;
          }
          else
          {
            v65 = llvm::raw_ostream::write(a5, (const char *)v63, v62);
            v66 = (_BYTE *)*((_QWORD *)v65 + 4);
          }
          if ((unint64_t)v66 >= *((_QWORD *)v65 + 3))
          {
            llvm::raw_ostream::write(v65, 32);
          }
          else
          {
            *((_QWORD *)v65 + 4) = v66 + 1;
            *v66 = 32;
          }
        }
        v60 = (const char **)__p;
        if (v58 == (const char **)(__p + 16 * DWORD2(__p)))
          goto LABEL_136;
        v67 = *v58;
        v68 = (unint64_t)v58[1];
        if (v68 >= 2 && *(_WORD *)v67 == 16191)
        {
          v72 = (_BYTE *)*((_QWORD *)a5 + 4);
          if (*((_BYTE **)a5 + 3) == v72)
          {
            v73 = llvm::raw_ostream::write(a5, "(", 1uLL);
          }
          else
          {
            *v72 = 40;
            ++*((_QWORD *)a5 + 4);
            v73 = a5;
          }
          v74 = (const void *)*((_QWORD *)v18 + (int)v87);
          if (v74)
          {
            v75 = strlen(*((const char **)v18 + (int)v87));
            v76 = (void *)*((_QWORD *)v73 + 4);
            if (v75 <= *((_QWORD *)v73 + 3) - (_QWORD)v76)
            {
              if (v75)
              {
                memcpy(v76, v74, v75);
                *((_QWORD *)v73 + 4) += v75;
              }
            }
            else
            {
              v73 = llvm::raw_ostream::write(v73, (const char *)v74, v75);
            }
          }
          v77 = (_BYTE *)*((_QWORD *)v73 + 4);
          if ((unint64_t)v77 >= *((_QWORD *)v73 + 3))
          {
            v73 = llvm::raw_ostream::write(v73, 43);
          }
          else
          {
            *((_QWORD *)v73 + 4) = v77 + 1;
            *v77 = 43;
          }
          v82[0] = *((_QWORD *)v19 + (int)v87);
          v82[1] = 0;
          v83 = 0;
          v84 = 1;
          v85 = 1;
          v70 = llvm::raw_ostream::operator<<(v73, (uint64_t)v82);
          v78 = (_BYTE *)*((_QWORD *)v70 + 4);
          if (*((_BYTE **)v70 + 3) != v78)
          {
            *v78 = 41;
            ++*((_QWORD *)v70 + 4);
            goto LABEL_125;
          }
          v67 = ")";
          v71 = 1;
        }
        else
        {
          v69 = (void *)*((_QWORD *)a5 + 4);
          if (v68 <= *((_QWORD *)a5 + 3) - (_QWORD)v69)
          {
            if (v68)
            {
              memcpy(v69, v67, (size_t)v58[1]);
              *((_QWORD *)a5 + 4) += v68;
            }
            goto LABEL_125;
          }
          v70 = a5;
          v71 = (size_t)v58[1];
        }
        llvm::raw_ostream::write(v70, v67, v71);
LABEL_125:
        v79 = (_BYTE *)*((_QWORD *)a5 + 4);
        if (*((_BYTE **)a5 + 3) == v79)
        {
          llvm::raw_ostream::write(a5, "\n", 1uLL);
        }
        else
        {
          *v79 = 10;
          ++*((_QWORD *)a5 + 4);
        }
        v60 = (const char **)__p;
        v61 = v58 + 2;
        v58 += 4;
        if (v61 == (_QWORD *)(__p + 16 * DWORD2(__p)))
          goto LABEL_136;
      }
    }
    printSymbolizedStackTrace(llvm::StringRef,void **,int,llvm::raw_ostream &)::$_0::operator()((uint64_t)v86);
    v80 = (_BYTE *)*((_QWORD *)a5 + 4);
    if ((unint64_t)v80 >= *((_QWORD *)a5 + 3))
    {
      llvm::raw_ostream::write(a5, 10);
    }
    else
    {
      *((_QWORD *)a5 + 4) = v80 + 1;
      *v80 = 10;
    }
LABEL_132:
    m = v87 + 1;
  }
  v58 = (const char **)__p;
LABEL_134:
  v6 = 1;
LABEL_137:
  if (v58 != (const char **)&v98)
    free(v58);
  v56 = v102;
LABEL_140:
  if ((v56 & 1) == 0)
  {
    v81 = v101;
    v101 = 0;
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  }
LABEL_143:
  if (v114)
  {
    LOWORD(v100) = 261;
    __p = *(_OWORD *)v112;
    llvm::sys::fs::remove((llvm::sys::fs *)&__p, (const llvm::Twine *)1);
  }
  if (*(_BYTE **)v112 != v113)
    free(*(void **)v112);
  if (v117)
  {
    LOWORD(v100) = 261;
    __p = *(_OWORD *)v115;
    llvm::sys::fs::remove((llvm::sys::fs *)&__p, (const llvm::Twine *)1);
  }
  if (*(_BYTE **)v115 != v116)
    free(*(void **)v115);
  if (v118 != v120)
    free(v118);
  if (*(_QWORD **)v121 != v122)
    free(*(void **)v121);
  if (v19)
    operator delete(v19);
  if (v18)
    operator delete(v18);
  if ((_DWORD)v124)
    llvm::deallocate_buffer(*v123, (void *)0x1000);
  if ((_DWORD)v127)
    llvm::deallocate_buffer(*v126, v126[1]);
  if (v126 != v128)
    free(v126);
  if (v123 != (llvm **)v125)
    free(v123);
  if (v93 < 0)
    operator delete(__dst[0]);
  v15 = v131;
LABEL_170:
  if ((v15 & 1) == 0 && SHIBYTE(v130) < 0)
    operator delete((void *)v129);
  return v6;
}

uint64_t llvm::ErrorOr<std::string>::operator=(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;
  const std::error_category *v7;

  if ((__int128 *)a1 == a2)
    return a1;
  v4 = *(_BYTE *)(a1 + 24);
  if ((v4 & 1) == 0 && *(char *)(a1 + 23) < 0)
  {
    operator delete(*(void **)a1);
    v4 = *(_BYTE *)(a1 + 24);
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      goto LABEL_5;
  }
  else if ((*((_BYTE *)a2 + 24) & 1) == 0)
  {
LABEL_5:
    *(_BYTE *)(a1 + 24) = v4 & 0xFE;
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    return a1;
  }
  *(_BYTE *)(a1 + 24) = v4 | 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v7 = (const std::error_category *)*((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  else
  {
    v7 = std::system_category();
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = v7;
  return a1;
}

uint64_t llvm::SmallString<32u>::c_str(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if ((unint64_t)(v2 + 1) > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v2 + 1, 1);
    *(_BYTE *)(*a1 + a1[1]) = 0;
    return *a1;
  }
  else
  {
    *(_BYTE *)(*a1 + v2) = 0;
    return *a1;
  }
}

void printSymbolizedStackTrace(llvm::StringRef,void **,int,llvm::raw_ostream &)::$_0::operator()(uint64_t a1)
{
  _DWORD *v2;
  llvm::raw_ostream *v3;
  int v4;
  void *p_p;
  uint64_t v6;
  long double v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  _QWORD v12[2];
  int v13;
  __int16 v14;
  char v15;
  _QWORD v16[4];
  void *v17;
  int v18;
  void **v19;
  void *__p;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;

  v3 = *(llvm::raw_ostream **)a1;
  v2 = *(_DWORD **)(a1 + 8);
  v4 = (*v2)++;
  v16[0] = "#{0}";
  v16[1] = 4;
  v16[2] = &v19;
  v16[3] = 1;
  v17 = &unk_1E0E23E60;
  v18 = v4;
  v19 = &v17;
  __p = 0;
  v21 = 0;
  v22 = 0;
  LODWORD(v24) = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = &unk_1E0E22B10;
  p_p = &__p;
  v31 = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v23, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v23, (llvm::formatv_object_base *)v16);
  if (v27 != v25)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v23);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  if (v22 >= 0)
  {
    v6 = HIBYTE(v22);
  }
  else
  {
    p_p = __p;
    v6 = v21;
  }
  v7 = log10((double)**(int **)(a1 + 16));
  v23 = p_p;
  v24 = v6;
  LODWORD(v25) = (v7 + 2.0);
  HIDWORD(v25) = 2;
  v8 = llvm::raw_ostream::operator<<(v3, (uint64_t)&v23);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    v8 = llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  v12[0] = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8 * **(int **)(a1 + 32));
  v12[1] = 0;
  v13 = 18;
  v14 = 1;
  v15 = 1;
  v10 = llvm::raw_ostream::operator<<(v8, (uint64_t)v12);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
    if (SHIBYTE(v22) < 0)
LABEL_14:
      operator delete(__p);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
    if (SHIBYTE(v22) < 0)
      goto LABEL_14;
  }
}

uint64_t printMarkupStackTrace(const void *a1, size_t a2)
{
  char *v4;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  void *__dst[2];
  unint64_t v12;

  v4 = getenv("LLVM_ENABLE_SYMBOLIZER_MARKUP");
  if (!v4 || !*v4)
    return 0;
  v10 = 261;
  v9[0] = a1;
  v9[1] = a2;
  if (!llvm::sys::fs::access((unsigned __int8 *)v9, 0))
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a2 >= 0x17)
    {
      v7 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v7 = a2 | 7;
      v8 = v7 + 1;
      v6 = (void **)operator new(v7 + 1);
      __dst[1] = (void *)a2;
      v12 = v8 | 0x8000000000000000;
      __dst[0] = v6;
    }
    else
    {
      HIBYTE(v12) = a2;
      v6 = __dst;
      if (!a2)
      {
LABEL_14:
        *((_BYTE *)v6 + a2) = 0;
        if ((SHIBYTE(v12) & 0x80000000) == 0)
          return 0;
        goto LABEL_15;
      }
    }
    memmove(v6, a1, a2);
    goto LABEL_14;
  }
  llvm::sys::fs::getMainExecutable(__dst);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return 0;
LABEL_15:
  operator delete(__dst[0]);
  return 0;
}

__int32 *llvm::sys::CleanupOnSignal(llvm::sys *this)
{
  __int32 v1;
  __int32 *v2;
  __int32 *v3;
  unint64_t v4;
  unint64_t *v5;
  const char *v6;
  __int32 *result;
  const char *v8;
  __int32 *v9;
  __int32 v10;
  uint64_t (*v11)(void);
  stat v12;

  v1 = (int)this;
  v2 = wmemchr((__int32 *)&InfoSigs, (__int32)this, 2uLL);
  v3 = IntSigs;
  if (v2)
    v3 = v2;
  if ((char *)v3 - (char *)&InfoSigs == 8)
  {
    do
      v4 = __ldaxr(&qword_1ECD33620);
    while (__stlxr(0, &qword_1ECD33620));
    if (v4)
    {
      v5 = (unint64_t *)v4;
      do
      {
        do
          v6 = (const char *)__ldaxr(v5);
        while (__stlxr(0, v5));
        if (v6 && !stat(v6, &v12) && (v12.st_mode & 0xF000) == 0x8000)
        {
          unlink(v6);
          do
            __ldaxr(v5);
          while (__stlxr((unint64_t)v6, v5));
        }
        v5 = (unint64_t *)atomic_load(v5 + 1);
      }
      while (v5);
    }
    do
      __ldaxr(&qword_1ECD33620);
    while (__stlxr(v4, &qword_1ECD33620));
    result = wmemchr(IntSigs, v1, 4uLL);
    v8 = "N4llvm6detail23provider_format_adapterIiEE";
    if (result)
      v8 = (const char *)result;
    if (v1 != 13 && v8 - (const char *)IntSigs == 16)
      return (__int32 *)llvm::sys::RunSignalHandlers((llvm::sys *)result);
  }
  else
  {
    result = __error();
    v9 = result;
    v10 = *result;
    v11 = (uint64_t (*)(void))atomic_load(&qword_1ECD33610);
    if (v11)
      result = (__int32 *)v11();
    *v9 = v10;
  }
  return result;
}

int *InfoSignalHandler()
{
  int *result;
  int *v1;
  int v2;
  uint64_t (*v3)(void);

  result = __error();
  v1 = result;
  v2 = *result;
  v3 = (uint64_t (*)(void))atomic_load(&qword_1ECD33610);
  if (v3)
    result = (int *)v3();
  *v1 = v2;
  return result;
}

void llvm::sys::RunInterruptHandlers(llvm::sys *this)
{
  unint64_t v1;
  unint64_t *v2;
  const char *v3;
  stat v4;

  do
    v1 = __ldaxr(&qword_1ECD33620);
  while (__stlxr(0, &qword_1ECD33620));
  if (v1)
  {
    v2 = (unint64_t *)v1;
    do
    {
      do
        v3 = (const char *)__ldaxr(v2);
      while (__stlxr(0, v2));
      if (v3 && !stat(v3, &v4) && (v4.st_mode & 0xF000) == 0x8000)
      {
        unlink(v3);
        do
          __ldaxr(v2);
        while (__stlxr((unint64_t)v3, v2));
      }
      v2 = (unint64_t *)atomic_load(v2 + 1);
    }
    while (v2);
  }
  do
    __ldaxr(&qword_1ECD33620);
  while (__stlxr(v1, &qword_1ECD33620));
}

void RegisterHandlers(void)
{
  std::recursive_mutex *v1;
  unsigned int v3;
  sigaction *v4;
  unsigned int v5;
  unsigned int v6;
  sigaction *v7;
  unsigned int v8;
  unsigned int v9;
  sigaction *v10;
  unsigned int v11;
  unsigned int v12;
  sigaction *v13;
  unsigned int v14;
  unsigned int v15;
  sigaction *v16;
  unsigned int v17;
  unsigned int v18;
  sigaction *v19;
  unsigned int v20;
  unsigned int v21;
  sigaction *v22;
  unsigned int v23;
  unsigned int v24;
  sigaction *v25;
  unsigned int v26;
  unsigned int v27;
  sigaction *v28;
  unsigned int v29;
  unsigned int v30;
  sigaction *v31;
  unsigned int v32;
  unsigned int v33;
  sigaction *v34;
  unsigned int v35;
  unsigned int v36;
  sigaction *v37;
  unsigned int v38;
  unsigned int v39;
  sigaction *v40;
  unsigned int v41;
  unsigned int v42;
  sigaction *v43;
  unsigned int v44;
  unsigned int v45;
  sigaction *v46;
  unsigned int v47;
  unsigned int v49;
  sigaction *v50;
  unsigned int v51;
  unsigned int v52;
  sigaction *v53;
  unsigned int v54;
  unsigned int v55;
  sigaction *v56;
  unsigned int v57;
  sigaction v58;

  if (!atomic_load(qword_1ECD33670))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ECD33670, (void *(*)(void))llvm::object_creator<llvm::sys::SmartMutex<true>>::call, (void (*)(void *))llvm::object_deleter<llvm::sys::SmartMutex<true>>::call);
  v1 = (std::recursive_mutex *)qword_1ECD33670[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ECD33670[0]);
  if (!atomic_load((unsigned int *)&_MergedGlobals_57))
  {
    v3 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v4 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v3);
    sigaction(1, &v58, v4 + 23);
    LODWORD(v4[24].__sigaction_u.__sa_handler) = 1;
    do
      v5 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v5 + 1, (unsigned int *)&_MergedGlobals_57));
    v6 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v7 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v6);
    sigaction(2, &v58, v7 + 23);
    LODWORD(v7[24].__sigaction_u.__sa_handler) = 2;
    do
      v8 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v8 + 1, (unsigned int *)&_MergedGlobals_57));
    v9 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v10 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v9);
    sigaction(15, &v58, v10 + 23);
    LODWORD(v10[24].__sigaction_u.__sa_handler) = 15;
    do
      v11 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v11 + 1, (unsigned int *)&_MergedGlobals_57));
    v12 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v13 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v12);
    sigaction(31, &v58, v13 + 23);
    LODWORD(v13[24].__sigaction_u.__sa_handler) = 31;
    do
      v14 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v14 + 1, (unsigned int *)&_MergedGlobals_57));
    v15 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v16 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v15);
    sigaction(4, &v58, v16 + 23);
    LODWORD(v16[24].__sigaction_u.__sa_handler) = 4;
    do
      v17 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v17 + 1, (unsigned int *)&_MergedGlobals_57));
    v18 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v19 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v18);
    sigaction(5, &v58, v19 + 23);
    LODWORD(v19[24].__sigaction_u.__sa_handler) = 5;
    do
      v20 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v20 + 1, (unsigned int *)&_MergedGlobals_57));
    v21 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v22 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v21);
    sigaction(6, &v58, v22 + 23);
    LODWORD(v22[24].__sigaction_u.__sa_handler) = 6;
    do
      v23 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v23 + 1, (unsigned int *)&_MergedGlobals_57));
    v24 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v25 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v24);
    sigaction(8, &v58, v25 + 23);
    LODWORD(v25[24].__sigaction_u.__sa_handler) = 8;
    do
      v26 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v26 + 1, (unsigned int *)&_MergedGlobals_57));
    v27 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v28 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v27);
    sigaction(10, &v58, v28 + 23);
    LODWORD(v28[24].__sigaction_u.__sa_handler) = 10;
    do
      v29 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v29 + 1, (unsigned int *)&_MergedGlobals_57));
    v30 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v31 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v30);
    sigaction(11, &v58, v31 + 23);
    LODWORD(v31[24].__sigaction_u.__sa_handler) = 11;
    do
      v32 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v32 + 1, (unsigned int *)&_MergedGlobals_57));
    v33 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v34 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v33);
    sigaction(3, &v58, v34 + 23);
    LODWORD(v34[24].__sigaction_u.__sa_handler) = 3;
    do
      v35 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v35 + 1, (unsigned int *)&_MergedGlobals_57));
    v36 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v37 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v36);
    sigaction(12, &v58, v37 + 23);
    LODWORD(v37[24].__sigaction_u.__sa_handler) = 12;
    do
      v38 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v38 + 1, (unsigned int *)&_MergedGlobals_57));
    v39 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v40 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v39);
    sigaction(24, &v58, v40 + 23);
    LODWORD(v40[24].__sigaction_u.__sa_handler) = 24;
    do
      v41 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v41 + 1, (unsigned int *)&_MergedGlobals_57));
    v42 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v43 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v42);
    sigaction(25, &v58, v43 + 23);
    LODWORD(v43[24].__sigaction_u.__sa_handler) = 25;
    do
      v44 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v44 + 1, (unsigned int *)&_MergedGlobals_57));
    v45 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x1500000000;
    v46 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v45);
    sigaction(7, &v58, v46 + 23);
    LODWORD(v46[24].__sigaction_u.__sa_handler) = 7;
    do
      v47 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v47 + 1, (unsigned int *)&_MergedGlobals_57));
    if (atomic_load(&qword_1ECD33618))
    {
      v49 = atomic_load((unsigned int *)&_MergedGlobals_57);
      v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))SignalHandler;
      *(_QWORD *)&v58.sa_mask = 0x1500000000;
      v50 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v49);
      sigaction(13, &v58, v50 + 23);
      LODWORD(v50[24].__sigaction_u.__sa_handler) = 13;
      do
        v51 = __ldaxr((unsigned int *)&_MergedGlobals_57);
      while (__stlxr(v51 + 1, (unsigned int *)&_MergedGlobals_57));
    }
    v52 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))InfoSignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x100000000;
    v53 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v52);
    sigaction(30, &v58, v53 + 23);
    LODWORD(v53[24].__sigaction_u.__sa_handler) = 30;
    do
      v54 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v54 + 1, (unsigned int *)&_MergedGlobals_57));
    v55 = atomic_load((unsigned int *)&_MergedGlobals_57);
    v58.__sigaction_u.__sa_handler = (void (__cdecl *)(int))InfoSignalHandler;
    *(_QWORD *)&v58.sa_mask = 0x100000000;
    v56 = (sigaction *)((char *)&_MergedGlobals_57 + 24 * v55);
    sigaction(29, &v58, v56 + 23);
    LODWORD(v56[24].__sigaction_u.__sa_handler) = 29;
    do
      v57 = __ldaxr((unsigned int *)&_MergedGlobals_57);
    while (__stlxr(v57 + 1, (unsigned int *)&_MergedGlobals_57));
  }
  std::recursive_mutex::unlock(v1);
}

uint64_t llvm::sys::RemoveFileOnSignal(void *__src, size_t __len)
{
  void **p_dst;
  const char *v6;
  size_t v7;
  size_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  void **__dst;
  size_t v14;
  int64_t v15;

  if (atomic_load(qword_1ECD33658))
  {
    if (__src)
      goto LABEL_3;
  }
  else
  {
    if (__src)
    {
LABEL_3:
      if (__len >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (__len >= 0x17)
      {
        v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v7 = __len | 7;
        v8 = v7 + 1;
        p_dst = (void **)operator new(v7 + 1);
        v14 = __len;
        v15 = v8 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v15) = __len;
        p_dst = (void **)&__dst;
        if (!__len)
        {
LABEL_13:
          *((_BYTE *)p_dst + __len) = 0;
          if (v15 >= 0)
            v6 = (const char *)&__dst;
          else
            v6 = (const char *)__dst;
          goto LABEL_16;
        }
      }
      memmove(p_dst, __src, __len);
      goto LABEL_13;
    }
  }
  __dst = 0;
  v14 = 0;
  v6 = (const char *)&__dst;
  v15 = 0;
LABEL_16:
  v9 = operator new(0x10uLL);
  *v9 = strdup(v6);
  v9[1] = 0;
  do
  {
    v10 = __ldaxr(&qword_1ECD33620);
    if (v10)
    {
      while (1)
      {
        __clrex();
        v11 = (unint64_t *)(v10 + 8);
        while (1)
        {
          v10 = __ldaxr(v11);
          if (v10)
            break;
          if (!__stlxr((unint64_t)v9, v11))
            goto LABEL_23;
        }
      }
    }
  }
  while (__stlxr((unint64_t)v9, &qword_1ECD33620));
LABEL_23:
  if (SHIBYTE(v15) < 0)
    operator delete(__dst);
  RegisterHandlers();
  return 0;
}

void llvm::sys::DontRemoveFileOnSignal(const void *a1, size_t a2)
{
  void **p_dst;
  uint64_t v6;
  uint64_t v7;
  std::recursive_mutex *v9;
  unint64_t *i;
  const char *v11;
  size_t v12;
  void *v13;
  void **__dst;
  size_t v15;
  unint64_t v16;

  if (a1)
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      abort();
    if (a2 >= 0x17)
    {
      v6 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v6 = a2 | 7;
      v7 = v6 + 1;
      p_dst = (void **)operator new(v6 + 1);
      v15 = a2;
      v16 = v7 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v16) = a2;
      p_dst = (void **)&__dst;
      if (!a2)
      {
LABEL_12:
        *((_BYTE *)p_dst + a2) = 0;
        if (atomic_load((unint64_t *)&qword_1ECD33688))
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    memmove(p_dst, a1, a2);
    goto LABEL_12;
  }
  __dst = 0;
  v15 = 0;
  v16 = 0;
  if (atomic_load((unint64_t *)&qword_1ECD33688))
    goto LABEL_14;
LABEL_13:
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ECD33688, (void *(*)(void))llvm::object_creator<llvm::sys::SmartMutex<true>>::call, (void (*)(void *))llvm::object_deleter<llvm::sys::SmartMutex<true>>::call);
LABEL_14:
  v9 = (std::recursive_mutex *)qword_1ECD33688;
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ECD33688);
  for (i = (unint64_t *)atomic_load(&qword_1ECD33620); i; i = (unint64_t *)atomic_load(i + 1))
  {
    v11 = (const char *)atomic_load(i);
    if (v11)
    {
      v12 = strlen(v11);
      if (SHIBYTE(v16) < 0)
      {
        if (v12 == v15)
        {
          if (v12 == -1)
            goto LABEL_31;
          if (!memcmp(__dst, v11, v12))
          {
            do
LABEL_27:
              v13 = (void *)__ldaxr(i);
            while (__stlxr(0, i));
            if (v13)
              free(v13);
          }
        }
      }
      else if (v12 == HIBYTE(v16))
      {
        if (v12 == -1)
          goto LABEL_31;
        if (!memcmp(&__dst, v11, v12))
          goto LABEL_27;
      }
    }
  }
  std::recursive_mutex::unlock(v9);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst);
}

void llvm::sys::AddSignalHandler(llvm::sys *this, void (*a2)(void *), void *a3)
{
  uint64_t (**v3)(_QWORD);
  unsigned int *v5;

  v3 = &qword_1ECD336A0;
  while (!__ldaxr((unsigned int *)&unk_1ECD336B0))
  {
    v5 = (unsigned int *)&unk_1ECD336B0;
    if (!__stlxr(1u, (unsigned int *)&unk_1ECD336B0))
      goto LABEL_32;
  }
  __clrex();
  v3 = &qword_1ECD336B8;
  while (!__ldaxr((unsigned int *)&unk_1ECD336C8))
  {
    v5 = (unsigned int *)&unk_1ECD336C8;
    if (!__stlxr(1u, (unsigned int *)&unk_1ECD336C8))
      goto LABEL_32;
  }
  __clrex();
  v3 = &qword_1ECD336D0;
  while (!__ldaxr((unsigned int *)&unk_1ECD336E0))
  {
    v5 = (unsigned int *)&unk_1ECD336E0;
    if (!__stlxr(1u, (unsigned int *)&unk_1ECD336E0))
      goto LABEL_32;
  }
  __clrex();
  v3 = &qword_1ECD336E8;
  while (!__ldaxr((unsigned int *)&unk_1ECD336F8))
  {
    v5 = (unsigned int *)&unk_1ECD336F8;
    if (!__stlxr(1u, (unsigned int *)&unk_1ECD336F8))
      goto LABEL_32;
  }
  __clrex();
  v3 = &qword_1ECD33700;
  while (!__ldaxr((unsigned int *)&unk_1ECD33710))
  {
    v5 = (unsigned int *)&unk_1ECD33710;
    if (!__stlxr(1u, (unsigned int *)&unk_1ECD33710))
      goto LABEL_32;
  }
  __clrex();
  v3 = &qword_1ECD33718;
  while (!__ldaxr((unsigned int *)&unk_1ECD33728))
  {
    v5 = (unsigned int *)&unk_1ECD33728;
    if (!__stlxr(1u, (unsigned int *)&unk_1ECD33728))
      goto LABEL_32;
  }
  __clrex();
  v3 = &qword_1ECD33730;
  while (!__ldaxr((unsigned int *)&unk_1ECD33740))
  {
    v5 = (unsigned int *)&unk_1ECD33740;
    if (!__stlxr(1u, (unsigned int *)&unk_1ECD33740))
      goto LABEL_32;
  }
  __clrex();
  v3 = &qword_1ECD33748;
  do
  {
    if (__ldaxr(dword_1ECD33758))
    {
      __clrex();
      llvm::report_fatal_error((llvm *)"too many signal callbacks already registered", (const char *)1);
    }
    v5 = dword_1ECD33758;
  }
  while (__stlxr(1u, dword_1ECD33758));
LABEL_32:
  *v3 = (uint64_t (*)(_QWORD))this;
  v3[1] = (uint64_t (*)(_QWORD))a2;
  atomic_store(2u, v5);
  RegisterHandlers();
}

uint64_t llvm::sys::PrintStackTrace(llvm::sys *this, llvm::raw_ostream *a2)
{
  int v2;
  uint64_t result;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  int v11;
  const char *dli_fname;
  char *v13;
  int v14;
  const char *v15;
  char *v16;
  const char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  size_t v21;
  void *v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  _BYTE *v26;
  void *v27;
  const char *v28;
  unint64_t v29;
  const char *v30;
  Dl_info v31;

  v2 = (int)a2;
  result = backtrace((void **)&qword_1ECD33910, 256);
  if ((_DWORD)result)
  {
    v5 = result;
    if (!v2)
      v2 = result;
    printMarkupStackTrace((const void *)qword_1ECD335F8, qword_1ECD33600);
    result = printSymbolizedStackTrace(qword_1ECD335F8, qword_1ECD33600, &qword_1ECD33910, v2, this);
    if ((result & 1) == 0)
    {
      v6 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v6 > 0x90uLL)
      {
        *((_QWORD *)this + 4) += 145;
        if (v5 < 1)
          return result;
      }
      else
      {
        if (v5 < 1)
          return result;
      }
      v7 = 0;
      v8 = v5;
      v9 = (const void **)&qword_1ECD33910;
      v10 = v5;
      do
      {
        while (1)
        {
          dladdr(*v9, &v31);
          dli_fname = v31.dli_fname;
          v13 = strrchr((char *)v31.dli_fname, 47);
          if (v13)
            break;
          v14 = strlen(dli_fname);
          if (v7 <= v14)
            v7 = v14;
          ++v9;
          if (!--v10)
            goto LABEL_19;
        }
        v11 = strlen(v13) - 1;
        if (v7 <= v11)
          v7 = v11;
        ++v9;
        --v10;
      }
      while (v10);
      do
      {
        while (1)
        {
LABEL_19:
          dladdr(*((const void **)&_MergedGlobals_57 + v10 + 100), &v31);
          v27 = &unk_1E0E20260;
          v28 = "%-2d";
          LODWORD(v29) = v10;
          llvm::raw_ostream::operator<<(this, (uint64_t)&v27);
          v15 = v31.dli_fname;
          v16 = strrchr((char *)v31.dli_fname, 47);
          v27 = &unk_1E0E20280;
          v28 = " %-*s";
          LODWORD(v29) = v7;
          if (v16)
            v30 = v16 + 1;
          else
            v30 = v15;
          llvm::raw_ostream::operator<<(this, (uint64_t)&v27);
          v17 = (const char *)*((_QWORD *)&_MergedGlobals_57 + v10 + 100);
          v27 = &unk_1E0E202C0;
          v28 = " %#0*lx";
          LODWORD(v29) = 18;
          v30 = v17;
          result = (uint64_t)llvm::raw_ostream::operator<<(this, (uint64_t)&v27);
          if (v31.dli_sname)
          {
            v18 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v18 >= *((_QWORD *)this + 3))
            {
              llvm::raw_ostream::write(this, 32);
            }
            else
            {
              *((_QWORD *)this + 4) = v18 + 1;
              *v18 = 32;
            }
            strlen(v31.dli_sname);
            v19 = llvm::itaniumDemangle();
            if (v19)
            {
              v20 = v19;
              v21 = strlen(v19);
              v22 = (void *)*((_QWORD *)this + 4);
              if (v21 <= *((_QWORD *)this + 3) - (_QWORD)v22)
              {
                if (v21)
                {
                  memcpy(v22, v20, v21);
                  *((_QWORD *)this + 4) += v21;
                }
              }
              else
              {
                llvm::raw_ostream::write(this, v20, v21);
              }
              free(v20);
            }
            else if (v31.dli_sname)
            {
              v23 = strlen(v31.dli_sname);
              v24 = (void *)*((_QWORD *)this + 4);
              if (v23 <= *((_QWORD *)this + 3) - (_QWORD)v24)
              {
                if (v23)
                {
                  memcpy(v24, v31.dli_sname, v23);
                  *((_QWORD *)this + 4) += v23;
                }
              }
              else
              {
                llvm::raw_ostream::write(this, v31.dli_sname, v23);
              }
            }
            v25 = *((_QWORD *)&_MergedGlobals_57 + v10 + 100) - (unint64_t)v31.dli_saddr;
            v27 = &unk_1E0E20380;
            v28 = " + %tu";
            v29 = v25;
            result = (uint64_t)llvm::raw_ostream::operator<<(this, (uint64_t)&v27);
          }
          v26 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v26 >= *((_QWORD *)this + 3))
            break;
          *((_QWORD *)this + 4) = v26 + 1;
          *v26 = 10;
          if (v8 == ++v10)
            return result;
        }
        result = (uint64_t)llvm::raw_ostream::write(this, 10);
        ++v10;
      }
      while (v8 != v10);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<int>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<int,void>::format((unsigned int *)(a1 + 8), a2, a3, a4);
}

uint64_t SignalHandler(__int32 a1)
{
  uint64_t v2;
  uint64_t i;
  unsigned int v4;
  __int32 *v5;
  unint64_t v6;
  unint64_t *v7;
  const char *v8;
  uint64_t (*v9)(__int32 *);
  const char *v10;
  sigset_t v12;
  stat v13;

  v2 = atomic_load((unsigned int *)&_MergedGlobals_57);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      sigaction(*((_DWORD *)&_MergedGlobals_57 + 6 * i + 96), (const sigaction *)((char *)&_MergedGlobals_57 + 24 * i + 368), 0);
      do
        v4 = __ldaxr((unsigned int *)&_MergedGlobals_57);
      while (__stlxr(v4 - 1, (unsigned int *)&_MergedGlobals_57));
    }
  }
  v12 = -1;
  v5 = (__int32 *)sigprocmask(2, &v12, 0);
  do
    v6 = __ldaxr(&qword_1ECD33620);
  while (__stlxr(0, &qword_1ECD33620));
  if (v6)
  {
    v7 = (unint64_t *)v6;
    do
    {
      do
        v8 = (const char *)__ldaxr(v7);
      while (__stlxr(0, v7));
      if (v8)
      {
        v5 = (__int32 *)stat(v8, &v13);
        if (!(_DWORD)v5 && (v13.st_mode & 0xF000) == 0x8000)
        {
          v5 = (__int32 *)unlink(v8);
          do
            __ldaxr(v7);
          while (__stlxr((unint64_t)v8, v7));
        }
      }
      v7 = (unint64_t *)atomic_load(v7 + 1);
    }
    while (v7);
  }
  do
    __ldaxr(&qword_1ECD33620);
  while (__stlxr(v6, &qword_1ECD33620));
  if (a1 == 13)
  {
    do
      v9 = (uint64_t (*)(__int32 *))__ldaxr(&qword_1ECD33618);
    while (__stlxr(0, &qword_1ECD33618));
    if (v9)
      return v9(v5);
  }
  v5 = wmemchr(IntSigs, a1, 4uLL);
  v10 = "N4llvm6detail23provider_format_adapterIiEE";
  if (v5)
    v10 = (const char *)v5;
  if (v10 - (const char *)IntSigs == 16)
  {
    if (a1 != 13)
      return llvm::sys::RunSignalHandlers((llvm::sys *)v5);
    return raise(a1);
  }
  do
    v9 = (uint64_t (*)(__int32 *))__ldaxr(&qword_1ECD33608);
  while (__stlxr(0, &qword_1ECD33608));
  if (v9)
    return v9(v5);
  return raise(a1);
}

uint64_t `anonymous namespace'::CreateDisableSymbolication::call(_anonymous_namespace_::CreateDisableSymbolication *this)
{
  void *v1;
  int v3;
  char *v4;
  __int128 v5;

  v1 = operator new(0xC0uLL);
  *(_QWORD *)&v5 = "Disable symbolizing crash backtraces.";
  *((_QWORD *)&v5 + 1) = 37;
  v4 = &DisableSymbolicationFlag;
  v3 = 1;
  return llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [6],llvm::cl::desc,llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden>((uint64_t)v1, (int8x16_t *)"disable-symbolication", &v5, &v4, &v3);
}

uint64_t llvm::object_deleter<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>>::call(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t `anonymous namespace'::CreateCrashDiagnosticsDir::call(_anonymous_namespace_::CreateCrashDiagnosticsDir *this)
{
  void *v1;
  int v4;
  const std::string *v5;
  __int128 v6;
  __int128 v7;

  v1 = operator new(0xD8uLL);
  *(_QWORD *)&v7 = "directory";
  *((_QWORD *)&v7 + 1) = 9;
  *(_QWORD *)&v6 = "Directory for crash diagnostic files.";
  *((_QWORD *)&v6 + 1) = 37;
  if (!atomic_load(CrashDiagnosticsDirectory))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)CrashDiagnosticsDirectory, (void *(*)(void))llvm::object_creator<std::string>::call, (void (*)(void *))llvm::object_deleter<std::string>::call);
  v5 = (const std::string *)CrashDiagnosticsDirectory[0];
  v4 = 1;
  return llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::opt<char [22],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::LocationClass<std::string>,llvm::cl::OptionHidden>((uint64_t)v1, (int8x16_t *)"crash-diagnostics-dir", &v7, &v6, &v5, &v4);
}

uint64_t llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>::opt<char [22],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::LocationClass<std::string>,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _OWORD *a4, const std::string **a5, _WORD *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E0E22F48;
  *(_QWORD *)a1 = &unk_1E0E234B8;
  *(_QWORD *)(a1 + 176) = &unk_1E0E23B38;
  *(_QWORD *)(a1 + 184) = &unk_1E0E4FAA0;
  *(_QWORD *)(a1 + 208) = a1 + 184;
  llvm::cl::apply<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>,char [22],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::LocationClass<std::string>,llvm::cl::OptionHidden>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::apply<llvm::cl::opt<std::string,true,llvm::cl::parser<std::string>>,char [22],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::LocationClass<std::string>,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *__s, _OWORD *a3, _OWORD *a4, const std::string **a5, _WORD *a6)
{
  const unsigned __int8 *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  uint64_t result;
  const std::string *v16;
  const char *v17;
  __int16 v18;

  v12 = (const unsigned __int8 *)strlen(__s->i8);
  llvm::cl::Option::setArgStr(a1, __s, v12);
  *(_OWORD *)(a1 + 48) = *a3;
  *(_OWORD *)(a1 + 32) = *a4;
  if (*(_QWORD *)(a1 + 128))
  {
    v17 = "cl::location(x) specified more than once!";
    v18 = 259;
    v14 = (llvm::raw_ostream *)llvm::errs(v13);
    result = llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v17, 0, 0, v14);
  }
  else
  {
    v16 = *a5;
    *(_QWORD *)(a1 + 128) = *a5;
    *(_BYTE *)(a1 + 168) = 1;
    result = (uint64_t)std::string::operator=((std::string *)(a1 + 144), v16);
  }
  *(_WORD *)(a1 + 10) = (32 * (*a6 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

void *llvm::object_creator<`anonymous namespace'::FilesToRemoveCleanup>::call()
{
  return operator new(1uLL);
}

void llvm::object_deleter<`anonymous namespace'::FilesToRemoveCleanup>::call(void *__p)
{
  _anonymous_namespace_::FileToRemoveList *v2;
  void *v3;

  if (__p)
  {
    do
      v2 = (_anonymous_namespace_::FileToRemoveList *)__ldaxr(&qword_1ECD33620);
    while (__stlxr(0, &qword_1ECD33620));
    if (v2)
    {
      operator delete(v3);
    }
    operator delete(__p);
  }
}

void `anonymous namespace'::FileToRemoveList::~FileToRemoveList(_anonymous_namespace_::FileToRemoveList *this)
{
  unint64_t *v2;
  _anonymous_namespace_::FileToRemoveList *v3;
  void *v4;
  void *v5;

  v2 = (unint64_t *)((char *)this + 8);
  do
    v3 = (_anonymous_namespace_::FileToRemoveList *)__ldaxr(v2);
  while (__stlxr(0, v2));
  if (v3)
  {
    operator delete(v4);
  }
  do
    v5 = (void *)__ldaxr((unint64_t *)this);
  while (__stlxr(0, (unint64_t *)this));
  if (v5)
    free(v5);
}

uint64_t llvm::format_object<int,char const*>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::format_object<int,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::ThreadPoolStrategy::compute_thread_count(llvm::ThreadPoolStrategy *this)
{
  unsigned int v2;
  int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 v7;
  int v8;
  size_t v9;
  int v10;
  int v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 4))
  {
    v2 = std::thread::hardware_concurrency();
    if (v2 <= 1)
      v3 = 1;
    else
      v3 = v2;
    if (v3 <= 1)
      result = 1;
    else
      result = v3;
    v5 = *(_DWORD *)this;
    if (*(_DWORD *)this)
    {
LABEL_9:
      if (v5 >= result)
        v6 = result;
      else
        v6 = v5;
      if (*((_BYTE *)this + 5))
        return v6;
      else
        return v5;
    }
  }
  else
  {
    v7 = atomic_load((unsigned __int8 *)&qword_1ECD34118);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD34118))
    {
      v10 = 0;
      v9 = 4;
      sysctlbyname("hw.physicalcpu", &v10, &v9, 0, 0);
      v8 = v10;
      if (!v10)
      {
        *(_QWORD *)v11 = 0x1900000006;
        sysctl(v11, 2u, &v10, &v9, 0, 0);
        v8 = v10;
        if (!v10)
          v8 = -1;
      }
      _MergedGlobals_58 = v8;
      __cxa_guard_release(&qword_1ECD34118);
    }
    if (_MergedGlobals_58 <= 1)
      result = 1;
    else
      result = _MergedGlobals_58;
    v5 = *(_DWORD *)this;
    if (*(_DWORD *)this)
      goto LABEL_9;
  }
  return result;
}

pthread_t llvm::llvm_execute_on_thread_impl(void *(__cdecl *a1)(void *), void *a2, uint64_t a3)
{
  llvm::sys *v6;
  llvm::sys *v7;
  llvm::sys *v8;
  pthread_t v9;
  llvm::sys *v10;
  pthread_t v12;
  pthread_attr_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::sys *)pthread_attr_init(&v13);
  if ((_DWORD)v6)
    ReportErrnumFatal("pthread_attr_init failed", v6);
  if ((a3 & 0xFF00000000) != 0)
  {
    v7 = (llvm::sys *)pthread_attr_setstacksize(&v13, a3);
    if ((_DWORD)v7)
      ReportErrnumFatal("pthread_attr_setstacksize failed", v7);
  }
  v12 = 0;
  v8 = (llvm::sys *)pthread_create(&v12, &v13, a1, a2);
  if ((_DWORD)v8)
    ReportErrnumFatal("pthread_create failed", v8);
  v9 = v12;
  v10 = (llvm::sys *)pthread_attr_destroy(&v13);
  if ((_DWORD)v10)
    ReportErrnumFatal("pthread_attr_destroy failed", v10);
  return v9;
}

void ReportErrnumFatal(char *__s, llvm::sys *a2)
{
  std::string v3;
  __int16 v4;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  std::string::basic_string[abi:nn180100]<0>(&v3, __s);
  MakeErrMsg((uint64_t)v5, (const void **)&v3.__r_.__value_.__l.__data_, a2);
  std::string::~string(&v3);
  v4 = 260;
  v3.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  llvm::report_fatal_error((llvm::Twine *)&v3, 1);
}

llvm::sys *llvm::llvm_thread_join_impl(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  llvm::sys *result;

  result = (llvm::sys *)pthread_join(this, 0);
  if ((_DWORD)result)
    ReportErrnumFatal("pthread_join failed", result);
  return result;
}

uint64_t llvm::get_threadid(llvm *this)
{
  mach_port_name_t v1;

  v1 = MEMORY[0x186DA1B24](this);
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1);
  return v1;
}

void llvm::set_thread_name(llvm *this, const llvm::Twine *a2)
{
  const char *v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  void *v6;
  __int128 v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  v6 = v8;
  v7 = xmmword_181236C00;
  v2 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, &v6);
  v4 = v3 - 63;
  if (v3 < v3 - 63)
    v4 = v3;
  v5 = &v2[v4];
  if (v3 > 0x3F)
    v2 = v5;
  pthread_setname_np(v2);
  if (v6 != v8)
    free(v6);
}

llvm::sys::Watchdog *llvm::sys::Watchdog::Watchdog(llvm::sys::Watchdog *this, unsigned int a2)
{
  alarm(a2);
  return this;
}

void llvm::sys::Watchdog::~Watchdog(llvm::sys::Watchdog *this)
{
  alarm(0);
}

const char *llvm::itanium_demangle::parse_discriminator(const char *this, const char *a2, const char *a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v6;
  const char *v7;
  int v8;

  if (this != a2)
  {
    v3 = *(unsigned __int8 *)this;
    if (v3 == 95)
    {
      if (this + 1 != a2 && (this[1] & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *((unsigned __int8 *)this + 1) + 60) & 0x400) != 0)
        {
          this += 2;
        }
        else
        {
          v4 = this + 2;
          if (this[1] == 95 && v4 != a2)
          {
            while (1)
            {
              v6 = *(unsigned __int8 *)v4;
              if (*v4 < 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x400) == 0)
                break;
              if (++v4 == a2)
                return this;
            }
            if ((_DWORD)v6 == 95)
              return v4 + 1;
          }
        }
      }
    }
    else if ((v3 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v3 + 60) & 0x400) != 0)
    {
      v7 = this + 1;
      while (v7 != a2)
      {
        v8 = *v7;
        if ((v8 & 0x80000000) == 0)
        {
          ++v7;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x400) != 0)
            continue;
        }
        return this;
      }
      return a2;
    }
  }
  return this;
}

char *llvm::itaniumDemangle()
{
  uint64_t v0;
  size_t v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  void **v7;
  void **v8;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v15[2];
  void *v16;
  _OWORD *v17;
  void **v18;
  _OWORD v19[16];
  void *v20[3];
  _BYTE v21[256];
  void *v22[3];
  _BYTE v23[64];
  void *v24[3];
  _BYTE v25[32];
  void *v26[3];
  _BYTE v27[32];
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _OWORD v33[256];
  void *v34;
  uint64_t v35;

  v0 = MEMORY[0x1E0C80A78]();
  v35 = *MEMORY[0x1E0C80C00];
  if (!v1)
    return 0;
  v15[0] = v0;
  v15[1] = v0 + v1;
  v16 = v19;
  v17 = v19;
  v18 = v20;
  memset(v19, 0, sizeof(v19));
  v20[0] = v21;
  v20[1] = v21;
  memset(v21, 0, sizeof(v21));
  memset(v23, 0, sizeof(v23));
  v22[0] = v23;
  v22[1] = v23;
  v20[2] = v22;
  v22[2] = v24;
  v24[0] = v25;
  v24[1] = v25;
  v24[2] = v26;
  memset(v25, 0, sizeof(v25));
  memset(v27, 0, sizeof(v27));
  v26[0] = v27;
  v26[1] = v27;
  v26[2] = &v28;
  v28 = 1;
  v29 = 0;
  v30 = -1;
  v32 = 0;
  v31 = 0;
  v33[0] = 0u;
  v34 = v33;
  v3 = v2;
  if (v2)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = -1;
    v14 = 1;
    (*(void (**)(char *, void **))(*(_QWORD *)v2 + 32))(v2, &v10);
    if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
      (*(void (**)(char *, void **))(*(_QWORD *)v3 + 40))(v3, &v10);
    v4 = v10;
    v5 = v11;
    if (v11 + 1 > v12)
    {
      if (2 * v12 <= v11 + 993)
        v6 = v11 + 993;
      else
        v6 = 2 * v12;
      v12 = v6;
      v4 = realloc(v10, v6);
      v10 = v4;
      if (!v4)
        abort();
      v5 = v11;
    }
    *((_BYTE *)v4 + v5) = 0;
    v3 = (char *)v10;
  }
  v7 = (void **)v34;
  if (v34)
  {
    do
    {
      while (1)
      {
        v8 = (void **)*v7;
        v34 = *v7;
        if (v7 == (void **)v33)
          break;
        free(v7);
        v7 = (void **)v34;
        if (!v34)
          goto LABEL_17;
      }
      v7 = v8;
    }
    while (v8);
  }
LABEL_17:
  v33[0] = 0uLL;
  v34 = v33;
  if (v26[0] != v27)
    free(v26[0]);
  if (v24[0] != v25)
    free(v24[0]);
  if (v22[0] != v23)
    free(v22[0]);
  if (v20[0] != v21)
    free(v20[0]);
  if (v16 != v19)
    free(v16);
  return v3;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parse(uint64_t a1, size_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  char *result;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 *v18;
  char *v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  char *v24;
  char *v25;

  v3 = *(unsigned __int8 **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v4 < 2)
    goto LABEL_15;
  if (*(_WORD *)v3 == 23135)
  {
    *(_QWORD *)a1 = v3 + 2;
    if (!result)
      return result;
  }
  else
  {
    if (v4 < 3)
      goto LABEL_15;
    if (*(_WORD *)v3 != 24415 || v3[2] != 90)
    {
      if (v4 >= 4)
      {
        if (*(_DWORD *)v3 == 1516199775)
        {
          v16 = 4;
        }
        else
        {
          if (v4 < 5)
            goto LABEL_15;
          if (*(_DWORD *)v3 != 1600085855 || v3[4] != 90)
            goto LABEL_15;
          v16 = 5;
        }
        *(_QWORD *)a1 = &v3[v16];
        v25 = result;
        if (!result)
          return result;
        v18 = *(unsigned __int8 **)a1;
        v17 = *(char **)(a1 + 8);
        if ((unint64_t)&v17[-*(_QWORD *)a1] < 0xD)
          return 0;
        if (*(_QWORD *)v18 != 0x695F6B636F6C625FLL || *(_QWORD *)(v18 + 5) != 0x656B6F766E695F6BLL)
          return 0;
        v20 = (char *)(v18 + 13);
        *(_QWORD *)a1 = v18 + 13;
        if (v18 + 13 != (unsigned __int8 *)v17)
        {
          v21 = *v20;
          if (v21 == 95)
          {
            v20 = (char *)(v18 + 14);
            *(_QWORD *)a1 = v18 + 14;
          }
          if (v17 == v20)
          {
            v23 = 1;
            v20 = v17;
          }
          else if ((*v20 & 0x80000000) == 0
                 && (v22 = MEMORY[0x1E0C80978],
                     (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v20 + 60) & 0x400) != 0))
          {
            v24 = v20;
            while ((*v24 & 0x80000000) == 0 && (*(_DWORD *)(v22 + 4 * *v24 + 60) & 0x400) != 0)
            {
              *(_QWORD *)a1 = ++v24;
              if (v24 == v17)
              {
                v24 = v17;
                break;
              }
            }
            v23 = v24 == v20;
            v20 = v24;
          }
          else
          {
            v23 = 1;
          }
          if (v21 == 95 && v23)
            return 0;
          if (v17 != v20)
          {
            if (*v20 != 46)
              return 0;
            *(_QWORD *)a1 = v17;
          }
        }
      }
LABEL_15:
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
        return 0;
      return result;
    }
    *(_QWORD *)a1 = v3 + 3;
    if (!result)
      return result;
  }
  v8 = (uint64_t)result;
  v10 = *(unsigned __int8 **)a1;
  v9 = *(unsigned __int8 **)(a1 + 8);
  v11 = &v9[-*(_QWORD *)a1];
  if (v9 == *(unsigned __int8 **)a1)
  {
    v9 = *(unsigned __int8 **)a1;
  }
  else if (*v10 == 46)
  {
    v12 = *(_QWORD **)(a1 + 4904);
    v13 = v12[1];
    if ((unint64_t)(v13 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v14 = malloc(0x1000uLL);
      if (!v14)
        std::terminate();
      v13 = 0;
      *v14 = v12;
      v14[1] = 0;
      v12 = v14;
      *(_QWORD *)(a1 + 4904) = v14;
    }
    v12[1] = v13 + 48;
    *(_QWORD *)((char *)v12 + v13 + 16) = &unk_1E0E228B0;
    v15 = (uint64_t)v12 + v13 + 16;
    *(_BYTE *)(v15 + 8) = 1;
    *(_WORD *)(v15 + 9) = *(_WORD *)((_BYTE *)v12 + v13 + 25) & 0xF000 | 0x540;
    *(_QWORD *)(v15 + 16) = v8;
    *(_QWORD *)(v15 + 24) = v10;
    *(_QWORD *)(v15 + 32) = v11;
    v9 = *(unsigned __int8 **)(a1 + 8);
    *(_QWORD *)a1 = v9;
    v10 = v9;
    v8 = v15;
  }
  if (v9 == v10)
    return (char *)v8;
  else
    return 0;
}

void *llvm::itanium_demangle::Node::printAsOperand(uint64_t a1, uint64_t a2, int a3, int a4)
{
  void *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;

  if (a4 + a3 <= (*(unsigned __int16 *)(a1 + 9) << 26 >> 26))
  {
    ++*(_DWORD *)(a2 + 32);
    v7 = *(void **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v8 + 1;
    v10 = *(_QWORD *)(a2 + 16);
    if (v8 + 1 > v10)
    {
      v11 = v8 + 993;
      if (2 * v10 <= v11)
        v12 = v11;
      else
        v12 = 2 * v10;
      *(_QWORD *)(a2 + 16) = v12;
      v7 = realloc(v7, v12);
      *(_QWORD *)a2 = v7;
      if (!v7)
        goto LABEL_20;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = v8 + 1;
    }
    *(_QWORD *)(a2 + 8) = v9;
    *((_BYTE *)v7 + v8) = 40;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
    if ((*(_WORD *)(a1 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
    --*(_DWORD *)(a2 + 32);
    result = *(void **)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = v13 + 1;
    v15 = *(_QWORD *)(a2 + 16);
    if (v13 + 1 <= v15)
      goto LABEL_18;
    v16 = v13 + 993;
    if (2 * v15 <= v16)
      v17 = v16;
    else
      v17 = 2 * v15;
    *(_QWORD *)(a2 + 16) = v17;
    result = realloc(result, v17);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = v13 + 1;
LABEL_18:
      *(_QWORD *)(a2 + 8) = v14;
      *((_BYTE *)result + v13) = 41;
      return result;
    }
LABEL_20:
    abort();
  }
  result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
  if ((*(_WORD *)(a1 + 9) & 0xC0) != 0x40)
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::consumeIf(const void **a1, const void *a2, size_t a3)
{
  char *v3;

  v3 = (char *)*a1;
  if (a3 > (_BYTE *)a1[1] - (_BYTE *)*a1)
    return 0;
  if (memcmp(*a1, a2, a3))
    return 0;
  *a1 = &v3[a3];
  return 1;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseEncoding(unsigned __int8 **a1)
{
  size_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  size_t v11;
  char *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  char *v23;
  char *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  const char *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  _BOOL4 v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  int64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  uint64_t v63;
  char v65;
  uint64_t v66;
  size_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unsigned __int8 **v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int64_t v77;
  unsigned __int8 *v78;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  __n128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  unint64_t v89;
  _QWORD v90[19];

  v3 = *a1;
  v4 = a1[1];
  v5 = v4 - *a1;
  if (v4 == *a1)
    goto LABEL_8;
  v6 = *v3;
  if (v6 == 71)
  {
    if (v5 < 2)
      goto LABEL_136;
    v22 = (char)v3[1];
    if (v22 == 73)
    {
      *a1 = v3 + 2;
      v87 = 0;
      v12 = 0;
      v24 = v87;
      if (!v87)
        goto LABEL_137;
      v43 = a1[613];
      v44 = *((_QWORD *)v43 + 1);
      if ((unint64_t)(v44 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v45 = (unsigned __int8 *)malloc(0x1000uLL);
        if (!v45)
          goto LABEL_141;
        v44 = 0;
        *(_QWORD *)v45 = v43;
        *((_QWORD *)v45 + 1) = 0;
        v43 = v45;
        a1[613] = v45;
      }
      *((_QWORD *)v43 + 1) = v44 + 48;
      v46 = &v43[v44];
      *((_QWORD *)v46 + 2) = &unk_1E0E210A0;
      v12 = (char *)(v46 + 16);
      v12[8] = 21;
      *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
      v29 = "initializer for module ";
      v30 = 23;
      goto LABEL_60;
    }
    if (v22 != 82)
    {
      if (v22 != 86)
        goto LABEL_136;
      *a1 = v3 + 2;
      if (!v23)
        goto LABEL_136;
      v24 = v23;
      v25 = a1[613];
      v26 = *((_QWORD *)v25 + 1);
      if ((unint64_t)(v26 - 4032) > 0xFFFFFFFFFFFFF00FLL)
        goto LABEL_27;
      v27 = (unsigned __int8 *)malloc(0x1000uLL);
      if (v27)
      {
        v26 = 0;
        *(_QWORD *)v27 = v25;
        *((_QWORD *)v27 + 1) = 0;
        v25 = v27;
        a1[613] = v27;
LABEL_27:
        *((_QWORD *)v25 + 1) = v26 + 48;
        v28 = &v25[v26];
        *((_QWORD *)v28 + 2) = &unk_1E0E210A0;
        v12 = (char *)(v28 + 16);
        v12[8] = 21;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v29 = "guard variable for ";
        v30 = 19;
LABEL_60:
        *((_QWORD *)v12 + 2) = v29;
        *((_QWORD *)v12 + 3) = v30;
        *((_QWORD *)v12 + 4) = v24;
        goto LABEL_137;
      }
LABEL_141:
      std::terminate();
    }
    *a1 = v3 + 2;
    if (!v87)
      goto LABEL_136;
    v47 = *a1;
    v48 = a1[1];
    if (v48 == *a1 || (char)*v47 < 48 || (v49 = *v47, v49 >= 0x3A) && v49 - 65 > 0x19)
    {
      v50 = 1;
      if (v47 == v48)
        goto LABEL_76;
    }
    else
    {
      while ((char)*v47 >= 48)
      {
        v51 = *v47;
        v52 = v51 >= 0x3A && v51 - 65 > 0x19;
        if (v52)
          break;
        *a1 = ++v47;
        if (v47 == v48)
          goto LABEL_136;
      }
      v50 = 0;
      if (v47 == v48)
        goto LABEL_76;
    }
    if (*v47 == 95)
    {
      *a1 = v47 + 1;
LABEL_77:
      goto LABEL_118;
    }
LABEL_76:
    if (!v50)
      goto LABEL_136;
    goto LABEL_77;
  }
  if (v6 == 84)
  {
    if (v5 >= 2)
    {
      switch(v3[1])
      {
        case 'A':
          *a1 = v3 + 2;
          v87 = v7;
          if (!v7)
            goto LABEL_136;
          break;
        case 'C':
          *a1 = v3 + 2;
          if (!v87)
            goto LABEL_136;
          if (!v67)
            goto LABEL_136;
          v68 = *a1;
          if (*a1 == a1[1])
            goto LABEL_136;
          if (*v68 != 95)
            goto LABEL_136;
          *a1 = v68 + 1;
          if (!v84.n128_u64[0])
            goto LABEL_136;
          break;
        case 'H':
          *a1 = v3 + 2;
          if (!v87)
            goto LABEL_136;
          break;
        case 'I':
          *a1 = v3 + 2;
          if (!v87)
            goto LABEL_136;
          break;
        case 'S':
          *a1 = v3 + 2;
          if (!v87)
            goto LABEL_136;
          break;
        case 'T':
          *a1 = v3 + 2;
          if (!v87)
            goto LABEL_136;
          break;
        case 'V':
          *a1 = v3 + 2;
          if (!v87)
            goto LABEL_136;
          break;
        case 'W':
          *a1 = v3 + 2;
          if (!v87)
            goto LABEL_136;
          break;
        case 'c':
          *a1 = v3 + 2;
            goto LABEL_136;
            goto LABEL_136;
          if (!v87)
            goto LABEL_136;
          break;
        default:
          goto LABEL_47;
      }
      goto LABEL_118;
    }
LABEL_47:
    v41 = v3 + 1;
    *a1 = v41;
    if (v4 == v41)
    {
      v42 = 0;
        goto LABEL_136;
    }
    else
    {
      v42 = *v41 == 118;
        goto LABEL_136;
    }
    if (v87)
    {
      if (v42)
      else
      goto LABEL_118;
    }
LABEL_136:
    v12 = 0;
    goto LABEL_137;
  }
LABEL_8:
  v9 = a1[90];
  v10 = a1[91];
  LOWORD(v87) = 0;
  HIDWORD(v87) = 0;
  v88 = 0;
  v89 = (v10 - v9) >> 3;
  v86 = v12;
  if (v12)
  {
    v13 = a1[90];
    v14 = (a1[91] - v13) >> 3;
    if (v14 <= v89)
    {
      v16 = &v13[8 * v89];
    }
    else
    {
      v15 = a1[83];
      if (v15 == a1[84])
        goto LABEL_136;
      if (!*(_QWORD *)v15)
        goto LABEL_136;
      v16 = &v13[8 * v89];
      v17 = *(_QWORD *)v16;
      v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
      v19 = **(_QWORD **)v15;
      if (v18 >= (*(_QWORD *)(*(_QWORD *)v15 + 8) - v19) >> 3)
        goto LABEL_136;
      v20 = v89 + 1;
      while (1)
      {
        *(_QWORD *)(v17 + 24) = *(_QWORD *)(v19 + 8 * v18);
        if (v14 == v20)
          break;
        v21 = v20;
        if (*(_QWORD *)v15)
        {
          v17 = *(_QWORD *)&v13[8 * v20];
          v18 = *(_QWORD *)(v17 + 16);
          v19 = **(_QWORD **)v15;
          ++v20;
          if (v18 < (*(_QWORD *)(*(_QWORD *)v15 + 8) - v19) >> 3)
            continue;
        }
        if (v21 >= v14)
          goto LABEL_30;
        goto LABEL_136;
      }
    }
    a1[91] = v16;
LABEL_30:
    v32 = *a1;
    v31 = a1[1];
    v33 = v31 - *a1;
    if (v31 != *a1)
    {
      v34 = *v32 - 46;
      v52 = v34 > 0x31;
      v35 = (1 << v34) & 0x2000000800001;
      if (v52 || v35 == 0)
      {
        v85 = 0;
        if (v33 >= 0xD
          && (*(_QWORD *)v32 == 0x6C62616E65396155 ? (v37 = *(_QWORD *)(v32 + 5) == 0x4966695F656C6261) : (v37 = 0),
              v37))
        {
          v69 = v32 + 13;
          *a1 = v69;
          v70 = (a1[3] - a1[2]) >> 3;
          v71 = a1 + 5;
          while (v69 == v31 || *v69 != 69)
          {
            if (!v74)
              goto LABEL_136;
            v75 = v74;
            v73 = a1[3];
            if (v73 == a1[4])
            {
              v76 = a1[2];
              v77 = v73 - v76;
              if (v76 == (unsigned __int8 *)v71)
              {
                v78 = (unsigned __int8 *)malloc(2 * (v73 - v76));
                if (!v78)
LABEL_140:
                  abort();
                v72 = v78;
                if (v73 != (unsigned __int8 *)v71)
                  memcpy(v78, a1 + 5, v77);
                a1[2] = v72;
              }
              else
              {
                v72 = (unsigned __int8 *)realloc(v76, 2 * (v73 - v76));
                a1[2] = v72;
                if (!v72)
                  goto LABEL_140;
              }
              v73 = &v72[8 * (v77 >> 3)];
              a1[4] = &v72[8 * (v77 >> 2)];
            }
            a1[3] = v73 + 8;
            *(_QWORD *)v73 = v75;
            v69 = *a1;
            v31 = a1[1];
          }
          *a1 = v69 + 1;
          v84.n128_u64[1] = v80;
          v85 = v81;
          v83 = 0;
          if (!(_BYTE)v87)
          {
LABEL_42:
            if (BYTE1(v87))
            {
              if (!v83)
                goto LABEL_136;
            }
          }
        }
        else
        {
          v83 = 0;
          if (!(_BYTE)v87)
            goto LABEL_42;
        }
        v84 = 0uLL;
        v39 = *a1;
        v38 = a1[1];
        if (*a1 == v38 || *v39 != 118)
        {
          v53 = (a1[3] - a1[2]) >> 3;
          v54 = a1 + 5;
          while (1)
          {
            if (!v55)
              goto LABEL_136;
            v56 = v55;
            v57 = a1[3];
            if (v57 == a1[4])
            {
              v58 = a1[2];
              v59 = v57 - v58;
              if (v58 == (unsigned __int8 *)v54)
              {
                v61 = (unsigned __int8 *)malloc(2 * (v57 - v58));
                if (!v61)
                  goto LABEL_140;
                v60 = v61;
                if (v57 != (unsigned __int8 *)v54)
                  memcpy(v61, a1 + 5, v59);
                a1[2] = v60;
              }
              else
              {
                v60 = (unsigned __int8 *)realloc(v58, 2 * (v57 - v58));
                a1[2] = v60;
                if (!v60)
                  goto LABEL_140;
              }
              v57 = &v60[8 * (v59 >> 3)];
              a1[4] = &v60[8 * (v59 >> 2)];
            }
            a1[3] = v57 + 8;
            *(_QWORD *)v57 = v56;
            if (a1[1] != *a1)
            {
              v62 = **a1 - 46;
              v52 = v62 > 0x31;
              v63 = (1 << v62) & 0x2000800800001;
              if (v52 || v63 == 0)
                continue;
            }
            v84.n128_u64[1] = v11;
            v40 = *a1;
            v38 = a1[1];
            goto LABEL_96;
          }
        }
        v40 = v39 + 1;
        *a1 = v40;
LABEL_96:
        v82 = 0;
        if (v40 != v38 && *v40 == 81)
        {
          *a1 = v40 + 1;
          v65 = *((_BYTE *)a1 + 778);
          *((_BYTE *)a1 + 778) = 1;
          *((_BYTE *)a1 + 778) = v65;
          v82 = v66;
          if (!v66)
            goto LABEL_136;
        }
LABEL_118:
        v12 = (char *)v8;
      }
    }
  }
LABEL_137:
  return v12;
}

unsigned __int8 *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseNumber(unsigned __int8 **a1, char a2)
{
  unsigned __int8 *result;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  result = *a1;
  if ((a2 & 1) == 0)
  {
    v4 = a1[1];
    goto LABEL_7;
  }
  v4 = a1[1];
  if (result == v4)
    return 0;
  if (*result != 110)
  {
LABEL_7:
    v5 = result;
    if (v4 != result)
      goto LABEL_8;
    return 0;
  }
  v5 = result + 1;
  *a1 = result + 1;
  if (v4 == result + 1)
    return 0;
LABEL_8:
  if ((char)*v5 < 0)
    return 0;
  v6 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v5 + 60) & 0x400) == 0)
    return 0;
  do
  {
    if ((char)*v5 < 0)
      break;
    if ((*(_DWORD *)(v6 + 4 * *v5 + 60) & 0x400) == 0)
      break;
    *a1 = ++v5;
  }
  while (v5 != v4);
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[34],llvm::itanium_demangle::Node *&>(uint64_t a1, char *__s, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  size_t v10;
  uint64_t v11;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 48;
  v9 = (char *)v5 + v6;
  v10 = strlen(__s);
  *((_QWORD *)v9 + 2) = &unk_1E0E210A0;
  v9 += 16;
  v11 = *a3;
  v9[8] = 21;
  *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
  *((_QWORD *)v9 + 2) = __s;
  *((_QWORD *)v9 + 3) = v10;
  *((_QWORD *)v9 + 4) = v11;
  return v9;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseType(uint64_t a1, size_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  unint64_t v98;
  unsigned __int8 *v99;
  unint64_t v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned __int8 *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  unsigned int v125;
  uint64_t v126;
  char *v127;
  unsigned __int8 *v128;
  unint64_t v129;
  char *v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unint64_t v134;
  const char *v135;
  BOOL v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  __n128 v140;
  unint64_t v141;
  _WORD *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  __n128 v153;
  char *v154;

  v152 = 0;
  v3 = *(unsigned __int8 **)a1;
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = (unint64_t)&v4[-*(_QWORD *)a1];
  if (v4 != *(unsigned __int8 **)a1)
  {
    v6 = *v3;
    switch(*v3)
    {
      case 'A':
        if (v6 != 65)
          goto LABEL_190;
        *(_QWORD *)a1 = v3 + 1;
        v154 = 0;
        if (v4 == v3 + 1)
        {
          if ((*(_BYTE *)(MEMORY[0x1E0C80978] + 61) & 4) == 0)
            goto LABEL_179;
        }
        else
        {
          v13 = (char)v3[1];
          if (v13 < 0)
            goto LABEL_179;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v13 + 60) & 0x400) == 0)
          {
            if ((_DWORD)v13 == 95)
            {
              v14 = v3 + 2;
LABEL_186:
              *(_QWORD *)a1 = v14;
              goto LABEL_187;
            }
LABEL_179:
            if (!v127)
              goto LABEL_190;
            v128 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v128 != 95)
              goto LABEL_190;
            *(_QWORD *)a1 = v128 + 1;
            v154 = v127;
LABEL_187:
            if (v153.n128_u64[0])
            {
              v152 = v12;
              if (!v12)
                return (char *)v12;
              goto LABEL_65;
            }
LABEL_190:
            v12 = 0;
            v152 = 0;
            return (char *)v12;
          }
        }
        v153.n128_u64[1] = v129;
        v154 = v130;
        v131 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v131 != 95)
          goto LABEL_190;
        v14 = v131 + 1;
        goto LABEL_186;
      case 'C':
        *(_QWORD *)a1 = v3 + 1;
        if (!v153.n128_u64[0])
          return 0;
        goto LABEL_50;
      case 'D':
        if (v5 < 2)
          return 0;
        v12 = 0;
        v16 = v3[1];
        switch(v3[1])
        {
          case 'B':
          case 'U':
            v17 = v16 == 66;
            v18 = (unint64_t)(v3 + 2);
            *(_QWORD *)a1 = v18;
            if (v4 == (unsigned __int8 *)v18)
            {
              v18 = 0;
            }
            else
            {
              LODWORD(v18) = *(char *)v18;
              if ((v18 & 0x80000000) != 0)
                goto LABEL_241;
              v18 = v18;
            }
            if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v18 + 60) & 0x400) != 0)
            {
              v153.n128_u64[1] = v149;
              v153.n128_u64[0] = v150;
              goto LABEL_244;
            }
LABEL_241:
            v153.n128_u64[0] = v148;
            if (!v148)
              return 0;
LABEL_244:
            v151 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v151 != 95)
              return 0;
            *(_QWORD *)a1 = v151 + 1;
          case 'F':
            *(_QWORD *)a1 = v3 + 2;
            v153.n128_u64[1] = v139;
            v153.n128_u64[0] = v141;
            v142 = (_WORD *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v141 + 48))(v141, v140);
            if (v143 == 2)
            {
              v144 = *(unsigned __int8 **)a1;
              v145 = *(unsigned __int8 **)(a1 + 8);
              if (*v142 == 13873)
              {
                if (v144 == v145)
                  return 0;
                if (*v144 == 98)
                {
                  *(_QWORD *)a1 = v144 + 1;
                }
              }
            }
            else
            {
              v144 = *(unsigned __int8 **)a1;
              v145 = *(unsigned __int8 **)(a1 + 8);
            }
            if (v144 == v145 || *v144 != 95)
              return 0;
            *(_QWORD *)a1 = v144 + 1;
            break;
          case 'K':
          case 'k':
            v135 = " decltype(auto)";
            v136 = v16 == 107;
            if (v16 == 107)
              v135 = " auto";
            v137 = 15;
            if (v136)
              v137 = 5;
            v153.n128_u64[0] = (unint64_t)v135;
            v153.n128_u64[1] = v137;
            *(_QWORD *)a1 = v3 + 2;
            if (!v154)
              return 0;
            return (char *)v138;
          case 'O':
          case 'o':
          case 'w':
          case 'x':
            goto LABEL_176;
          case 'T':
          case 't':
            v152 = v12;
            if (!v12)
              return (char *)v12;
            goto LABEL_65;
          case 'a':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "auto";
          case 'c':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "decltype(auto)";
          case 'd':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "decimal64";
          case 'e':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "decimal128";
          case 'f':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "decimal32";
          case 'h':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "half";
          case 'i':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "char32_t";
          case 'n':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "std::nullptr_t";
          case 'p':
            *(_QWORD *)a1 = v3 + 2;
            if (!v153.n128_u64[0])
              return 0;
            goto LABEL_50;
          case 's':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "char16_t";
          case 'u':
            *(_QWORD *)a1 = v3 + 2;
            v146 = "char8_t";
          case 'v':
            v12 = v147;
            v152 = v147;
            if (!v147)
              return (char *)v12;
            goto LABEL_65;
          default:
            return (char *)v12;
        }
        return (char *)v12;
      case 'F':
        goto LABEL_176;
      case 'G':
        *(_QWORD *)a1 = v3 + 1;
        if (!v153.n128_u64[0])
          return 0;
        goto LABEL_50;
      case 'K':
      case 'V':
      case 'r':
        if (v6 == 114)
        {
          if (v5 < 2)
          {
            v7 = 1;
            v8 = 1;
            goto LABEL_15;
          }
          if (v3[1] == 86)
            v7 = 2;
          else
            v7 = 1;
          v8 = v7;
          if (v5 <= v7)
          {
LABEL_15:
            if (v5 > v8
              && ((v9 = v3[v8], v9 == 70)
               || ((v10 = v7 + 1, v9 == 68) ? (v11 = v5 > v10) : (v11 = 0),
                   v11 && (v125 = v3[v10] - 79, v125 <= 0x29) && ((1 << v125) & 0x30100000001) != 0)))
            {
LABEL_176:
              v12 = v126;
              v152 = v126;
              if (!v126)
                return (char *)v12;
            }
            else
            {
LABEL_21:
              v152 = v12;
              if (!v12)
                return (char *)v12;
            }
            goto LABEL_65;
          }
        }
        else
        {
          v7 = v6 == 86;
          v8 = v6 == 86;
          if (v5 <= v7)
            goto LABEL_15;
        }
        if (v3[v8] == 75)
          v8 = v7 + 1;
        else
          v8 = v7;
        v7 = v8;
        goto LABEL_15;
      case 'M':
        if (v6 != 77)
          goto LABEL_190;
        *(_QWORD *)a1 = v3 + 1;
        if (!v153.n128_u64[0])
          goto LABEL_190;
        if (!v154)
          goto LABEL_190;
        v152 = v12;
        if (!v12)
          return (char *)v12;
        goto LABEL_65;
      case 'O':
        *(_QWORD *)a1 = v3 + 1;
        if (!v153.n128_u64[0])
          return 0;
        v19 = a1;
        v20 = 1;
        goto LABEL_49;
      case 'P':
        *(_QWORD *)a1 = v3 + 1;
        if (!v153.n128_u64[0])
          return 0;
        goto LABEL_50;
      case 'R':
        *(_QWORD *)a1 = v3 + 1;
        if (!v153.n128_u64[0])
          return 0;
        v19 = a1;
        v20 = 0;
LABEL_49:
        goto LABEL_50;
      case 'S':
        if (v5 >= 2 && v3[1] == 116)
          break;
        LOBYTE(v154) = 0;
        v152 = (uint64_t)v21;
        if (!v21)
          return 0;
        v12 = (uint64_t)v21;
        if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
        {
          v22 = v154;
        }
        else
        {
          v22 = v154;
          if (**(_BYTE **)a1 == 73)
          {
            if ((_BYTE)v154)
            {
              if (!*(_BYTE *)(a1 + 776))
                return (char *)v12;
            }
            else
            {
              llvm::itanium_demangle::PODSmallVector<llvm::itanium_demangle::Node *,32ul>::push_back((_QWORD *)(a1 + 296), &v152);
            }
LABEL_205:
            v153.n128_u64[0] = v134;
            if (v134)
            {
              goto LABEL_50;
            }
            return 0;
          }
        }
        if (v22)
          return (char *)v12;
LABEL_65:
        v26 = *(uint64_t **)(a1 + 304);
        if (v26 != *(uint64_t **)(a1 + 312))
        {
LABEL_74:
          *(_QWORD *)(a1 + 304) = v26 + 1;
          *v26 = v12;
          return (char *)v152;
        }
        v27 = *(uint64_t **)(a1 + 296);
        v28 = (char *)v26 - (char *)v27;
        if (v27 == (uint64_t *)(a1 + 320))
        {
          v31 = (char *)malloc(2 * ((char *)v26 - (char *)v27));
          if (v31)
          {
            v30 = v31;
            if (v26 != v27)
              memmove(v31, v27, (char *)v26 - (char *)v27);
            *(_QWORD *)(a1 + 296) = v30;
            goto LABEL_73;
          }
        }
        else
        {
          v29 = (char *)realloc(*(void **)(a1 + 296), 2 * ((char *)v26 - (char *)v27));
          *(_QWORD *)(a1 + 296) = v29;
          if (v29)
          {
            v30 = v29;
            v12 = v152;
LABEL_73:
            v26 = (uint64_t *)&v30[8 * (v28 >> 3)];
            *(_QWORD *)(a1 + 312) = &v30[8 * (v28 >> 2)];
            goto LABEL_74;
          }
        }
        abort();
      case 'T':
        if (v5 >= 2)
        {
          v23 = v3[1] - 101;
          v11 = v23 > 0x10;
          v24 = (1 << v23) & 0x14001;
          if (!v11 && v24 != 0)
            break;
        }
        v152 = v12;
        if (!v12)
          return (char *)v12;
        if (*(_BYTE *)(a1 + 776) && *(_QWORD *)(a1 + 8) != *(_QWORD *)a1 && **(_BYTE **)a1 == 73)
          goto LABEL_205;
        goto LABEL_65;
      case 'U':
        goto LABEL_21;
      case 'a':
        *(_QWORD *)a1 = v3 + 1;
        v32 = *(_QWORD **)(a1 + 4904);
        v33 = v32[1];
        if ((unint64_t)(v33 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_78;
        v34 = malloc(0x1000uLL);
        if (!v34)
          goto LABEL_252;
        v33 = 0;
        *v34 = v32;
        v34[1] = 0;
        v32 = v34;
        *(_QWORD *)(a1 + 4904) = v34;
LABEL_78:
        v32[1] = v33 + 32;
        v35 = (char *)v32 + v33;
        *((_QWORD *)v35 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v35 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "signed char";
        v37 = 11;
        goto LABEL_150;
      case 'b':
        *(_QWORD *)a1 = v3 + 1;
        v38 = *(_QWORD **)(a1 + 4904);
        v39 = v38[1];
        if ((unint64_t)(v39 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_82;
        v40 = malloc(0x1000uLL);
        if (!v40)
          goto LABEL_252;
        v39 = 0;
        *v40 = v38;
        v40[1] = 0;
        v38 = v40;
        *(_QWORD *)(a1 + 4904) = v40;
LABEL_82:
        v38[1] = v39 + 32;
        v41 = (char *)v38 + v39;
        *((_QWORD *)v41 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v41 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "BOOL";
        goto LABEL_149;
      case 'c':
        *(_QWORD *)a1 = v3 + 1;
        v42 = *(_QWORD **)(a1 + 4904);
        v43 = v42[1];
        if ((unint64_t)(v43 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_86;
        v44 = malloc(0x1000uLL);
        if (!v44)
          goto LABEL_252;
        v43 = 0;
        *v44 = v42;
        v44[1] = 0;
        v42 = v44;
        *(_QWORD *)(a1 + 4904) = v44;
LABEL_86:
        v42[1] = v43 + 32;
        v45 = (char *)v42 + v43;
        *((_QWORD *)v45 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v45 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "char";
        goto LABEL_149;
      case 'd':
        *(_QWORD *)a1 = v3 + 1;
        v46 = *(_QWORD **)(a1 + 4904);
        v47 = v46[1];
        if ((unint64_t)(v47 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_90;
        v48 = malloc(0x1000uLL);
        if (!v48)
          goto LABEL_252;
        v47 = 0;
        *v48 = v46;
        v48[1] = 0;
        v46 = v48;
        *(_QWORD *)(a1 + 4904) = v48;
LABEL_90:
        v46[1] = v47 + 32;
        v49 = (char *)v46 + v47;
        *((_QWORD *)v49 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v49 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "double";
        v37 = 6;
        goto LABEL_150;
      case 'e':
        *(_QWORD *)a1 = v3 + 1;
        v50 = *(_QWORD **)(a1 + 4904);
        v51 = v50[1];
        if ((unint64_t)(v51 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_94;
        v52 = malloc(0x1000uLL);
        if (!v52)
          goto LABEL_252;
        v51 = 0;
        *v52 = v50;
        v52[1] = 0;
        v50 = v52;
        *(_QWORD *)(a1 + 4904) = v52;
LABEL_94:
        v50[1] = v51 + 32;
        v53 = (char *)v50 + v51;
        *((_QWORD *)v53 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v53 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "long double";
        v37 = 11;
        goto LABEL_150;
      case 'f':
        *(_QWORD *)a1 = v3 + 1;
        v54 = *(_QWORD **)(a1 + 4904);
        v55 = v54[1];
        if ((unint64_t)(v55 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_98;
        v56 = malloc(0x1000uLL);
        if (!v56)
          goto LABEL_252;
        v55 = 0;
        *v56 = v54;
        v56[1] = 0;
        v54 = v56;
        *(_QWORD *)(a1 + 4904) = v56;
LABEL_98:
        v54[1] = v55 + 32;
        v57 = (char *)v54 + v55;
        *((_QWORD *)v57 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v57 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "float";
        v37 = 5;
        goto LABEL_150;
      case 'g':
        *(_QWORD *)a1 = v3 + 1;
        v58 = *(_QWORD **)(a1 + 4904);
        v59 = v58[1];
        if ((unint64_t)(v59 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_102;
        v60 = malloc(0x1000uLL);
        if (!v60)
          goto LABEL_252;
        v59 = 0;
        *v60 = v58;
        v60[1] = 0;
        v58 = v60;
        *(_QWORD *)(a1 + 4904) = v60;
LABEL_102:
        v58[1] = v59 + 32;
        v61 = (char *)v58 + v59;
        *((_QWORD *)v61 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v61 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "__float128";
        v37 = 10;
        goto LABEL_150;
      case 'h':
        *(_QWORD *)a1 = v3 + 1;
        v62 = *(_QWORD **)(a1 + 4904);
        v63 = v62[1];
        if ((unint64_t)(v63 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_106;
        v64 = malloc(0x1000uLL);
        if (!v64)
          goto LABEL_252;
        v63 = 0;
        *v64 = v62;
        v64[1] = 0;
        v62 = v64;
        *(_QWORD *)(a1 + 4904) = v64;
LABEL_106:
        v62[1] = v63 + 32;
        v65 = (char *)v62 + v63;
        *((_QWORD *)v65 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v65 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "unsigned char";
        v37 = 13;
        goto LABEL_150;
      case 'i':
        *(_QWORD *)a1 = v3 + 1;
        v66 = *(_QWORD **)(a1 + 4904);
        v67 = v66[1];
        if ((unint64_t)(v67 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_110;
        v68 = malloc(0x1000uLL);
        if (!v68)
          goto LABEL_252;
        v67 = 0;
        *v68 = v66;
        v68[1] = 0;
        v66 = v68;
        *(_QWORD *)(a1 + 4904) = v68;
LABEL_110:
        v66[1] = v67 + 32;
        v69 = (char *)v66 + v67;
        *((_QWORD *)v69 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v69 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "int";
        v37 = 3;
        goto LABEL_150;
      case 'j':
        *(_QWORD *)a1 = v3 + 1;
        v70 = *(_QWORD **)(a1 + 4904);
        v71 = v70[1];
        if ((unint64_t)(v71 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_114;
        v72 = malloc(0x1000uLL);
        if (!v72)
          goto LABEL_252;
        v71 = 0;
        *v72 = v70;
        v72[1] = 0;
        v70 = v72;
        *(_QWORD *)(a1 + 4904) = v72;
LABEL_114:
        v70[1] = v71 + 32;
        v73 = (char *)v70 + v71;
        *((_QWORD *)v73 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v73 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "unsigned int";
        v37 = 12;
        goto LABEL_150;
      case 'l':
        *(_QWORD *)a1 = v3 + 1;
        v74 = *(_QWORD **)(a1 + 4904);
        v75 = v74[1];
        if ((unint64_t)(v75 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_118;
        v76 = malloc(0x1000uLL);
        if (!v76)
          goto LABEL_252;
        v75 = 0;
        *v76 = v74;
        v76[1] = 0;
        v74 = v76;
        *(_QWORD *)(a1 + 4904) = v76;
LABEL_118:
        v74[1] = v75 + 32;
        v77 = (char *)v74 + v75;
        *((_QWORD *)v77 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v77 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "long";
        goto LABEL_149;
      case 'm':
        *(_QWORD *)a1 = v3 + 1;
        v78 = *(_QWORD **)(a1 + 4904);
        v79 = v78[1];
        if ((unint64_t)(v79 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_122;
        v80 = malloc(0x1000uLL);
        if (!v80)
          goto LABEL_252;
        v79 = 0;
        *v80 = v78;
        v80[1] = 0;
        v78 = v80;
        *(_QWORD *)(a1 + 4904) = v80;
LABEL_122:
        v78[1] = v79 + 32;
        v81 = (char *)v78 + v79;
        *((_QWORD *)v81 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v81 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "unsigned long";
        v37 = 13;
        goto LABEL_150;
      case 'n':
        *(_QWORD *)a1 = v3 + 1;
        v82 = *(_QWORD **)(a1 + 4904);
        v83 = v82[1];
        if ((unint64_t)(v83 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_126;
        v84 = malloc(0x1000uLL);
        if (!v84)
          goto LABEL_252;
        v83 = 0;
        *v84 = v82;
        v84[1] = 0;
        v82 = v84;
        *(_QWORD *)(a1 + 4904) = v84;
LABEL_126:
        v82[1] = v83 + 32;
        v85 = (char *)v82 + v83;
        *((_QWORD *)v85 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v85 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        *(_QWORD *)(v12 + 16) = "__int128";
        *(_QWORD *)(v12 + 24) = 8;
        return (char *)v12;
      case 'o':
        *(_QWORD *)a1 = v3 + 1;
        v86 = *(_QWORD **)(a1 + 4904);
        v87 = v86[1];
        if ((unint64_t)(v87 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_130;
        v88 = malloc(0x1000uLL);
        if (!v88)
          goto LABEL_252;
        v87 = 0;
        *v88 = v86;
        v88[1] = 0;
        v86 = v88;
        *(_QWORD *)(a1 + 4904) = v88;
LABEL_130:
        v86[1] = v87 + 32;
        v89 = (char *)v86 + v87;
        *((_QWORD *)v89 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v89 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "unsigned __int128";
        v37 = 17;
        goto LABEL_150;
      case 's':
        *(_QWORD *)a1 = v3 + 1;
        v90 = *(_QWORD **)(a1 + 4904);
        v91 = v90[1];
        if ((unint64_t)(v91 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_134;
        v92 = malloc(0x1000uLL);
        if (!v92)
          goto LABEL_252;
        v91 = 0;
        *v92 = v90;
        v92[1] = 0;
        v90 = v92;
        *(_QWORD *)(a1 + 4904) = v92;
LABEL_134:
        v90[1] = v91 + 32;
        v93 = (char *)v90 + v91;
        *((_QWORD *)v93 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v93 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "short";
        v37 = 5;
        goto LABEL_150;
      case 't':
        *(_QWORD *)a1 = v3 + 1;
        v94 = *(_QWORD **)(a1 + 4904);
        v95 = v94[1];
        if ((unint64_t)(v95 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_138;
        v96 = malloc(0x1000uLL);
        if (!v96)
          goto LABEL_252;
        v95 = 0;
        *v96 = v94;
        v96[1] = 0;
        v94 = v96;
        *(_QWORD *)(a1 + 4904) = v96;
LABEL_138:
        v94[1] = v95 + 32;
        v97 = (char *)v94 + v95;
        *((_QWORD *)v97 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v97 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "unsigned short";
        v37 = 14;
        goto LABEL_150;
      case 'u':
        *(_QWORD *)a1 = v3 + 1;
        if (v4 == v3 + 1 || v3[1] - 58 < 0xFFFFFFF6)
          return 0;
        v98 = 0;
        v99 = v3 + 2;
        v100 = (unint64_t)(v3 + 1);
        while (1)
        {
          *(_QWORD *)a1 = v99;
          v98 = (char)*(v99 - 1) + 10 * v98 - 48;
          if (v99 == v4)
            break;
          v101 = v99 + 1;
          v102 = *v99 - 48;
          ++v100;
          ++v99;
          if (v102 >= 0xA)
          {
            v103 = v101 - 1;
            goto LABEL_195;
          }
        }
        v100 = (unint64_t)v4;
        v103 = v4;
LABEL_195:
        if ((unint64_t)&v4[-v100] < v98)
          return 0;
        v132 = &v103[v98];
        *(_QWORD *)a1 = v132;
        v153.n128_u64[0] = v100;
        v153.n128_u64[1] = v98;
        if (!v98)
          return 0;
        if (v132 == v4 || *v132 != 73)
        {
        }
        else
        {
          *(_QWORD *)a1 = v132 + 1;
          if (!v154)
            return 0;
          v133 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v133 != 69)
            return 0;
          *(_QWORD *)a1 = v133 + 1;
        }
LABEL_50:
        v12 = v15;
        v152 = v15;
        goto LABEL_65;
      case 'v':
        *(_QWORD *)a1 = v3 + 1;
        v104 = *(_QWORD **)(a1 + 4904);
        v105 = v104[1];
        if ((unint64_t)(v105 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_148;
        v106 = malloc(0x1000uLL);
        if (!v106)
          goto LABEL_252;
        v105 = 0;
        *v106 = v104;
        v106[1] = 0;
        v104 = v106;
        *(_QWORD *)(a1 + 4904) = v106;
LABEL_148:
        v104[1] = v105 + 32;
        v107 = (char *)v104 + v105;
        *((_QWORD *)v107 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v107 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "void";
LABEL_149:
        v37 = 4;
        goto LABEL_150;
      case 'w':
        *(_QWORD *)a1 = v3 + 1;
        v109 = *(_QWORD **)(a1 + 4904);
        v110 = v109[1];
        if ((unint64_t)(v110 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_155;
        v111 = malloc(0x1000uLL);
        if (!v111)
          goto LABEL_252;
        v110 = 0;
        *v111 = v109;
        v111[1] = 0;
        v109 = v111;
        *(_QWORD *)(a1 + 4904) = v111;
LABEL_155:
        v109[1] = v110 + 32;
        v112 = (char *)v109 + v110;
        *((_QWORD *)v112 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v112 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "wchar_t";
        v37 = 7;
        goto LABEL_150;
      case 'x':
        *(_QWORD *)a1 = v3 + 1;
        v113 = *(_QWORD **)(a1 + 4904);
        v114 = v113[1];
        if ((unint64_t)(v114 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_159;
        v115 = malloc(0x1000uLL);
        if (!v115)
          goto LABEL_252;
        v114 = 0;
        *v115 = v113;
        v115[1] = 0;
        v113 = v115;
        *(_QWORD *)(a1 + 4904) = v115;
LABEL_159:
        v113[1] = v114 + 32;
        v116 = (char *)v113 + v114;
        *((_QWORD *)v116 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v116 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "long long";
        v37 = 9;
        goto LABEL_150;
      case 'y':
        *(_QWORD *)a1 = v3 + 1;
        v117 = *(_QWORD **)(a1 + 4904);
        v118 = v117[1];
        if ((unint64_t)(v118 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_163;
        v119 = malloc(0x1000uLL);
        if (!v119)
          goto LABEL_252;
        v118 = 0;
        *v119 = v117;
        v119[1] = 0;
        v117 = v119;
        *(_QWORD *)(a1 + 4904) = v119;
LABEL_163:
        v117[1] = v118 + 32;
        v120 = (char *)v117 + v118;
        *((_QWORD *)v120 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v120 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "unsigned long long";
        v37 = 18;
        goto LABEL_150;
      case 'z':
        *(_QWORD *)a1 = v3 + 1;
        v121 = *(_QWORD **)(a1 + 4904);
        v122 = v121[1];
        if ((unint64_t)(v122 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          goto LABEL_167;
        v123 = malloc(0x1000uLL);
        if (!v123)
LABEL_252:
          std::terminate();
        v122 = 0;
        *v123 = v121;
        v123[1] = 0;
        v121 = v123;
        *(_QWORD *)(a1 + 4904) = v123;
LABEL_167:
        v121[1] = v122 + 32;
        v124 = (char *)v121 + v122;
        *((_QWORD *)v124 + 2) = &unk_1E0E227A8;
        v12 = (uint64_t)(v124 + 16);
        *(_BYTE *)(v12 + 8) = 8;
        *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
        v36 = "...";
        v37 = 3;
LABEL_150:
        *(_QWORD *)(v12 + 16) = v36;
        *(_QWORD *)(v12 + 24) = v37;
        return (char *)v12;
      default:
        break;
    }
  }
  v152 = v12;
  if (v12)
    goto LABEL_65;
  return (char *)v12;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::SaveTemplateParams::SaveTemplateParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  void **v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _QWORD *v19;

  *(_OWORD *)(a1 + 32) = 0u;
  v4 = a1 + 32;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = (char *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = a1 + 88;
  v6 = (void **)(a1 + 64);
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = a1 + 64;
  *(_OWORD *)(a1 + 48) = 0u;
  v7 = a1 + 152;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = a1 + 152;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  v8 = *(_BYTE **)(a2 + 664);
  v9 = a2 + 688;
  if (v8 == (_BYTE *)(a2 + 688))
  {
    v15 = *(_BYTE **)(a2 + 672);
    if (v15 == v8)
    {
      v16 = v8;
    }
    else
    {
      memmove((void *)(a1 + 32), v8, v15 - v8);
      v16 = *(_BYTE **)(a2 + 672);
      v8 = *(_BYTE **)(a2 + 664);
    }
    *(_QWORD *)(a1 + 16) = v4 + v16 - v8;
    *(_QWORD *)(a2 + 672) = v8;
    v10 = *(_BYTE **)(a2 + 576);
    v11 = a2 + 600;
    v12 = (char *)*v6;
    if (v10 != (_BYTE *)(a2 + 600))
      goto LABEL_3;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 672);
    *(_QWORD *)(a2 + 664) = v9;
    *(_QWORD *)(a2 + 672) = v9;
    *(_QWORD *)(a2 + 680) = a2 + 720;
    v10 = *(_BYTE **)(a2 + 576);
    v11 = a2 + 600;
    v12 = (char *)*v6;
    if (v10 != (_BYTE *)(a2 + 600))
    {
LABEL_3:
      *v6 = v10;
      if (v12 == v5)
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 584);
        *(_QWORD *)(a2 + 576) = v11;
        *(_QWORD *)(a2 + 584) = v11;
        *(_QWORD *)(a2 + 592) = a2 + 664;
      }
      else
      {
        *(_QWORD *)(a2 + 576) = v12;
        v13 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 584);
        *(_QWORD *)(a2 + 584) = v13;
        v14 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 592);
        *(_QWORD *)(a2 + 592) = v14;
        *(_QWORD *)(a2 + 584) = *(_QWORD *)(a2 + 576);
      }
      goto LABEL_16;
    }
  }
  if (v12 != v5)
  {
    free(v12);
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v7;
    v10 = *(_BYTE **)(a2 + 576);
  }
  v17 = *(_BYTE **)(a2 + 584);
  if (v17 == v10)
  {
    v18 = v10;
  }
  else
  {
    memmove(v5, v10, v17 - v10);
    v18 = *(_BYTE **)(a2 + 584);
    v10 = *(_BYTE **)(a2 + 576);
  }
  *(_QWORD *)(a1 + 72) = &v5[v18 - v10];
  *(_QWORD *)(a2 + 584) = v10;
LABEL_16:
  v19 = *(_QWORD **)a1;
  v19[84] = *(_QWORD *)(*(_QWORD *)a1 + 664);
  v19[73] = v19[72];
  return a1;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseName(uint64_t a1, size_t a2)
{
  unsigned __int8 *v4;
  const char *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  int v17;
  char v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  char *v34;
  int64_t v35;
  char *v36;
  char *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v51;
  uint64_t v52[19];
  uint64_t v53[2];

  v5 = *(const char **)a1;
  v4 = *(unsigned __int8 **)(a1 + 8);
  if (v4 == *(unsigned __int8 **)a1)
  {
LABEL_13:
    LOBYTE(v52[0]) = 0;
    if (!v9)
      return v9;
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1 || **(_BYTE **)a1 != 73)
    {
      if (!LOBYTE(v52[0]))
        return v9;
      return 0;
    }
    if (!LOBYTE(v52[0]))
    {
      v10 = *(char **)(a1 + 304);
      if (v10 == *(char **)(a1 + 312))
      {
        v11 = *(_BYTE **)(a1 + 296);
        v12 = v10 - v11;
        if (v11 == (_BYTE *)(a1 + 320))
        {
          v43 = (char *)malloc(2 * (v10 - v11));
          if (!v43)
            goto LABEL_123;
          v13 = v43;
          if (v10 != (char *)(a1 + 320))
            memcpy(v43, (const void *)(a1 + 320), v12);
          *(_QWORD *)(a1 + 296) = v13;
        }
        else
        {
          v13 = (char *)realloc(v11, 2 * (v10 - v11));
          *(_QWORD *)(a1 + 296) = v13;
          if (!v13)
LABEL_123:
            abort();
        }
        v10 = &v13[8 * (v12 >> 3)];
        *(_QWORD *)(a1 + 312) = &v13[8 * (v12 >> 2)];
      }
      *(_QWORD *)(a1 + 304) = v10 + 8;
      *(_QWORD *)v10 = v9;
    }
    if (!v44)
      return 0;
    v45 = v44;
    if (a2)
      *(_BYTE *)(a2 + 1) = 1;
    v46 = *(_QWORD **)(a1 + 4904);
    v47 = v46[1];
    if ((unint64_t)(v47 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v48 = malloc(0x1000uLL);
      if (!v48)
LABEL_124:
        std::terminate();
      v47 = 0;
      *v48 = v46;
      v48[1] = 0;
      v46 = v48;
      *(_QWORD *)(a1 + 4904) = v48;
    }
    v46[1] = v47 + 32;
    v49 = (char *)v46 + v47;
    *((_QWORD *)v49 + 2) = &unk_1E0E21F68;
    v49 += 16;
    v49[8] = 45;
    *(_WORD *)(v49 + 9) = *(_WORD *)(v49 + 9) & 0xF000 | 0x540;
    *((_QWORD *)v49 + 2) = v9;
    *((_QWORD *)v49 + 3) = v45;
    return v49;
  }
  v6 = *(unsigned __int8 *)v5;
  if (v6 == 90)
  {
    *(_QWORD *)a1 = v5 + 1;
    if (!v53[0])
      return 0;
    v16 = *(const char **)a1;
    v15 = *(const char **)(a1 + 8);
    if (*(const char **)a1 == v15 || *v16 != 69)
      return 0;
    *(_QWORD *)a1 = v16 + 1;
    if (v16 + 1 != v15 && v16[1] == 115)
    {
      *(_QWORD *)a1 = v16 + 2;
      *(_QWORD *)a1 = llvm::itanium_demangle::parse_discriminator(v16 + 2, v15, v14);
    }
    v40 = *(const char **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v40 != 100)
    {
      if (!v51)
      {
LABEL_106:
        v9 = 0;
        goto LABEL_107;
      }
      *(_QWORD *)a1 = llvm::itanium_demangle::parse_discriminator(*(const char **)a1, *(const char **)(a1 + 8), v42);
    }
    else
    {
      *(_QWORD *)a1 = v40 + 1;
      v41 = *(const char **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
        goto LABEL_106;
      if (*v41 != 95)
        goto LABEL_106;
      *(_QWORD *)a1 = v41 + 1;
      if (!v51)
        goto LABEL_106;
    }
LABEL_107:
    return v9;
  }
  if (v6 != 78)
    goto LABEL_13;
  v7 = (unsigned __int8 *)(v5 + 1);
  *(_QWORD *)a1 = v5 + 1;
  if (v5 + 1 == (const char *)v4)
  {
    v8 = 0;
    v7 = v4;
    if (!a2)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (*v7 != 114)
  {
    v8 = 0;
    if (v7 != v4)
      goto LABEL_7;
LABEL_32:
    v7 = v4;
    goto LABEL_33;
  }
  v7 = (unsigned __int8 *)(v5 + 2);
  *(_QWORD *)a1 = v5 + 2;
  v8 = 4;
  if (v7 == v4)
    goto LABEL_32;
LABEL_7:
  if (*v7 == 86)
  {
    *(_QWORD *)a1 = ++v7;
    v8 |= 2u;
  }
  if (v7 == v4)
  {
    v7 = v4;
    if (!a2)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (*v7 == 75)
  {
    *(_QWORD *)a1 = ++v7;
    v8 |= 1u;
    if (!a2)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_33:
  if (a2)
LABEL_34:
    *(_DWORD *)(a2 + 4) = v8;
LABEL_35:
  if (v7 == v4)
    goto LABEL_40;
  v17 = *v7;
  if (v17 == 82)
  {
    *(_QWORD *)a1 = ++v7;
    if (a2)
    {
      v18 = 1;
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  if (v17 != 79)
  {
LABEL_40:
    if (a2)
    {
      v18 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    *(_QWORD *)a1 = ++v7;
    if (a2)
    {
      v18 = 2;
LABEL_44:
      *(_BYTE *)(a2 + 8) = v18;
    }
  }
LABEL_45:
  v9 = 0;
  v19 = (char *)(a1 + 320);
  while (v7 == v4 || *v7 != 69)
  {
    if (a2)
      *(_BYTE *)(a2 + 1) = 0;
    v20 = 0;
    v21 = v4 - v7;
    if (v21)
    {
      switch(*v7)
      {
        case 'D':
          if (v21 < 2 || (v7[1] | 0x20) != 0x74)
          {
            v20 = 0;
            goto LABEL_78;
          }
          if (v9)
            return 0;
          goto LABEL_79;
        case 'I':
          if (!v9)
            return v9;
          if (!v23 || v9[8] == 45)
            return 0;
          v24 = v23;
          if (a2)
            *(_BYTE *)(a2 + 1) = 1;
          v25 = *(_QWORD **)(a1 + 4904);
          v26 = v25[1];
          if ((unint64_t)(v26 - 4048) > 0xFFFFFFFFFFFFF00FLL)
            goto LABEL_64;
          v27 = malloc(0x1000uLL);
          if (!v27)
            goto LABEL_124;
          v26 = 0;
          *v27 = v25;
          v27[1] = 0;
          v25 = v27;
          *(_QWORD *)(a1 + 4904) = v27;
LABEL_64:
          v25[1] = v26 + 32;
          v28 = (char *)v25 + v26;
          *((_QWORD *)v28 + 2) = &unk_1E0E21F68;
          v28 += 16;
          v28[8] = 45;
          *(_WORD *)(v28 + 9) = *(_WORD *)(v28 + 9) & 0xF000 | 0x540;
          *((_QWORD *)v28 + 2) = v9;
          *((_QWORD *)v28 + 3) = v24;
          v9 = v28;
          goto LABEL_80;
        case 'S':
          if (v21 >= 2 && v7[1] == 116)
          {
            *(_QWORD *)a1 = v7 + 2;
            v29 = *(_QWORD **)(a1 + 4904);
            v30 = v29[1];
            if ((unint64_t)(v30 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
            {
              v31 = malloc(0x1000uLL);
              if (!v31)
                goto LABEL_124;
              v30 = 0;
              *v31 = v29;
              v31[1] = 0;
              v29 = v31;
              *(_QWORD *)(a1 + 4904) = v31;
            }
            v29[1] = v30 + 32;
            *(_QWORD *)((char *)v29 + v30 + 16) = &unk_1E0E227A8;
            v20 = (uint64_t)v29 + v30 + 16;
            *(_BYTE *)(v20 + 8) = 8;
            *(_WORD *)(v20 + 9) = *(_WORD *)((_BYTE *)v29 + v30 + 25) & 0xF000 | 0x540;
            *(_QWORD *)(v20 + 16) = "std";
            *(_QWORD *)(v20 + 24) = 3;
          }
          else
          {
            if (!v32)
              return 0;
            v20 = (uint64_t)v32;
            if (v32[8] == 27)
              goto LABEL_78;
          }
          if (v9)
            return 0;
          v7 = *(unsigned __int8 **)a1;
          v4 = *(unsigned __int8 **)(a1 + 8);
          v9 = (char *)v20;
          break;
        case 'T':
          if (v9)
            return 0;
          goto LABEL_79;
        default:
          goto LABEL_78;
      }
    }
    else
    {
LABEL_78:
LABEL_79:
      v9 = (char *)v22;
      if (!v22)
        return v9;
LABEL_80:
      v33 = *(char **)(a1 + 304);
      if (v33 == *(char **)(a1 + 312))
      {
        v34 = *(char **)(a1 + 296);
        v35 = v33 - v34;
        if (v34 == v19)
        {
          v37 = (char *)malloc(2 * (v33 - v34));
          if (!v37)
            goto LABEL_123;
          v36 = v37;
          if (v33 != v19)
            memcpy(v37, (const void *)(a1 + 320), v35);
          *(_QWORD *)(a1 + 296) = v36;
        }
        else
        {
          v36 = (char *)realloc(v34, 2 * (v33 - v34));
          *(_QWORD *)(a1 + 296) = v36;
          if (!v36)
            goto LABEL_123;
        }
        v33 = &v36[8 * (v35 >> 3)];
        *(_QWORD *)(a1 + 312) = &v36[8 * (v35 >> 2)];
      }
      *(_QWORD *)(a1 + 304) = v33 + 8;
      *(_QWORD *)v33 = v9;
      v7 = *(unsigned __int8 **)a1;
      v38 = *(unsigned __int8 **)(a1 + 8);
      v4 = *(unsigned __int8 **)a1;
      if (*(unsigned __int8 **)a1 != v38)
      {
        v4 = *(unsigned __int8 **)(a1 + 8);
        if (*v7 == 77)
        {
          *(_QWORD *)a1 = ++v7;
          v4 = v38;
        }
      }
    }
  }
  *(_QWORD *)a1 = v7 + 1;
  if (v9)
  {
    v39 = *(_QWORD *)(a1 + 304);
    if (*(_QWORD *)(a1 + 296) != v39)
    {
      *(_QWORD *)(a1 + 304) = v39 - 8;
      return v9;
    }
    return 0;
  }
  return v9;
}

void llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseTemplateArg(_QWORD *a1)
{
  char *v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v2 = (char *)*a1;
  v3 = (unsigned __int8 *)a1[1];
  v4 = (unint64_t)&v3[-*a1];
  if (v3 == (unsigned __int8 *)*a1)
  {
    v5 = 2147483611;
  }
  else
  {
    HIDWORD(v6) = *v2;
    LODWORD(v6) = *v2 - 74;
    v5 = v6 >> 1;
    if (v5 > 7)
    {
LABEL_50:
      return;
    }
  }
  switch(v5)
  {
    case 0u:
      v7 = v2 + 1;
      *a1 = v7;
      v8 = (uint64_t)(a1[3] - a1[2]) >> 3;
      v9 = (char *)(a1 + 5);
      break;
    case 1u:
      if (v4 >= 2 && v2[1] == 90)
      {
        *a1 = v2 + 2;
        {
          v17 = (char *)*a1;
          if (*a1 != a1[1] && *v17 == 69)
LABEL_32:
            *a1 = v17 + 1;
        }
      }
      else
      {
      }
      return;
    case 5u:
      if (v3 == (unsigned __int8 *)v2 || *v2 != 84)
        goto LABEL_50;
      v18 = v4 < 2 ? 0 : v2[1];
      v27 = memchr("yptnk", v18, 5uLL);
      if (!v27 || v27 - "yptnk" == -1)
        goto LABEL_50;
      if (!v28)
        return;
      v19 = (char *)v28;
      if (!v29)
        return;
      v21 = v29;
      v30 = (_QWORD *)a1[613];
      v31 = v30[1];
      if ((unint64_t)(v31 - 4048) > 0xFFFFFFFFFFFFF00FLL)
        goto LABEL_49;
      v32 = malloc(0x1000uLL);
      if (!v32)
        goto LABEL_52;
      v31 = 0;
      *v32 = v30;
      v32[1] = 0;
      v30 = v32;
      a1[613] = v32;
LABEL_49:
      v30[1] = v31 + 32;
      *(_QWORD *)((char *)v30 + v31 + 16) = &unk_1E0E22388;
      v25 = (uint64_t)v30 + v31 + 16;
      v26 = 34;
      goto LABEL_40;
    case 7u:
      *a1 = v2 + 1;
      {
        v17 = (char *)*a1;
        if (*a1 != a1[1] && *v17 == 69)
          goto LABEL_32;
      }
      return;
    default:
      goto LABEL_50;
  }
  while (v7 == (char *)v3 || *v7 != 69)
  {
    if (!v12)
      return;
    v13 = v12;
    v11 = (char *)a1[3];
    if (v11 == (char *)a1[4])
    {
      v14 = (char *)a1[2];
      v15 = v11 - v14;
      if (v14 == v9)
      {
        v16 = (char *)malloc(2 * (v11 - v14));
        if (!v16)
LABEL_51:
          abort();
        v10 = v16;
        if (v11 != v9)
          memcpy(v16, a1 + 5, v15);
        a1[2] = v10;
      }
      else
      {
        v10 = (char *)realloc(v14, 2 * (v11 - v14));
        a1[2] = v10;
        if (!v10)
          goto LABEL_51;
      }
      v11 = &v10[8 * (v15 >> 3)];
      a1[4] = &v10[8 * (v15 >> 2)];
    }
    a1[3] = v11 + 8;
    *(_QWORD *)v11 = v13;
    v7 = (char *)*a1;
    v3 = (unsigned __int8 *)a1[1];
  }
  *a1 = v7 + 1;
  v21 = v20;
  v22 = (_QWORD *)a1[613];
  v23 = v22[1];
  if ((unint64_t)(v23 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v24 = malloc(0x1000uLL);
    if (!v24)
LABEL_52:
      std::terminate();
    v23 = 0;
    *v24 = v22;
    v24[1] = 0;
    v22 = v24;
    a1[613] = v24;
  }
  v22[1] = v23 + 32;
  *(_QWORD *)((char *)v22 + v23 + 16) = &unk_1E0E22018;
  v25 = (uint64_t)v22 + v23 + 16;
  v26 = 41;
LABEL_40:
  *(_BYTE *)(v25 + 8) = v26;
  *(_WORD *)(v25 + 9) = *(_WORD *)(v25 + 9) & 0xF000 | 0x540;
  *(_QWORD *)(v25 + 16) = v19;
  *(_QWORD *)(v25 + 24) = v21;
}

_QWORD *llvm::itanium_demangle::PODSmallVector<llvm::itanium_demangle::Node *,32ul>::push_back(_QWORD *result, uint64_t *__size)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = result;
  v4 = (_QWORD *)result[1];
  if (v4 == (_QWORD *)result[2])
  {
    v5 = (_QWORD *)*result;
    v6 = (int64_t)v4 - *result;
    if ((_QWORD *)*result == result + 3)
    {
      result = malloc(2 * v6);
      if (!result)
        goto LABEL_11;
      v7 = result;
      if (v4 != v5)
        result = memmove(result, v5, v6);
      *v3 = v7;
    }
    else
    {
      result = realloc((void *)*result, 2 * v6);
      v7 = result;
      *v3 = result;
      if (!result)
LABEL_11:
        abort();
    }
    v4 = &v7[v6 >> 3];
    v3[1] = v4;
    v3[2] = &v7[v6 >> 2];
  }
  v8 = *__size;
  v3[1] = v4 + 1;
  *v4 = v8;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::EnableIfAttr,llvm::itanium_demangle::NodeArray>(uint64_t a1, __n128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E211A8;
  v7 = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(v7 + 8) = 10;
  result = *a2;
  *(_WORD *)(v7 + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(__n128 *)(v7 + 16) = result;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::popTrailingNodeArray(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;

  v4 = a1[2];
  v5 = (_BYTE *)a1[3];
  v6 = (_BYTE *)(v4 + 8 * a2);
  v7 = ((_DWORD)v5 - (_DWORD)v6 + 15) & 0xFFFFFFF0;
  v8 = (_QWORD *)a1[613];
  v9 = v8[1];
  if (v7 + v9 >= 0xFF0)
  {
    if (v7 >= 0xFF1)
    {
      v10 = malloc(v7 + 16);
      if (v10)
      {
        *v10 = *v8;
        v10[1] = 0;
        *v8 = v10;
        v11 = (char *)(v10 + 2);
        if (v5 == v6)
          goto LABEL_10;
        goto LABEL_9;
      }
LABEL_11:
      std::terminate();
    }
    v12 = malloc(0x1000uLL);
    if (!v12)
      goto LABEL_11;
    v9 = 0;
    *v12 = v8;
    v12[1] = 0;
    v8 = v12;
    a1[613] = v12;
  }
  v8[1] = v9 + v7;
  v11 = (char *)v8 + v9 + 16;
  if (v5 != v6)
  {
LABEL_9:
    memmove(v11, v6, v5 - v6);
    v4 = a1[2];
  }
LABEL_10:
  a1[3] = v4 + 8 * a2;
  return v11;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::FunctionEncoding,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::NodeArray &,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Qualifiers &,llvm::itanium_demangle::FunctionRefQual &>(uint64_t a1, uint64_t *a2, uint64_t *a3, __n128 *a4, uint64_t *a5, uint64_t *a6, int a7, char a8)
{
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 result;

  v15 = *(_QWORD **)(a1 + 4904);
  v16 = v15[1];
  if ((unint64_t)(v16 - 4000) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v18 = malloc(0x1000uLL);
    if (!v18)
      std::terminate();
    v16 = 0;
    *v18 = v15;
    v18[1] = 0;
    v15 = v18;
    *(_QWORD *)(a1 + 4904) = v18;
  }
  v15[1] = v16 + 80;
  v19 = (char *)v15 + v16;
  v20 = *a2;
  v21 = *a3;
  v22 = *a5;
  v23 = *a6;
  *((_QWORD *)v19 + 2) = &unk_1E0E21BF8;
  v19 += 16;
  v19[8] = 19;
  result = *a4;
  *(_WORD *)(v19 + 9) = *(_WORD *)(v19 + 9) & 0xF000 | 0x100;
  *((_QWORD *)v19 + 2) = v20;
  *((_QWORD *)v19 + 3) = v21;
  *((__n128 *)v19 + 2) = result;
  *((_QWORD *)v19 + 6) = v22;
  *((_QWORD *)v19 + 7) = v23;
  *((_DWORD *)v19 + 16) = a7;
  v19[68] = a8;
  return result;
}

_QWORD *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::SaveTemplateParams::~SaveTemplateParams(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;

  v3 = (_QWORD *)*a1;
  v2 = (_QWORD *)a1[1];
  v4 = a1 + 4;
  v5 = *(_QWORD **)(*a1 + 664);
  v6 = v3 + 86;
  if (v2 == v4)
  {
    if (v5 != v6)
    {
      free(v5);
      v3[83] = v6;
      v3[84] = v6;
      v3[85] = v3 + 90;
      v2 = (_QWORD *)a1[1];
    }
    v9 = (_BYTE *)a1[2];
    if (v9 == (_BYTE *)v2)
    {
      v10 = v2;
    }
    else
    {
      memmove(v3 + 86, v2, v9 - (_BYTE *)v2);
      v2 = (_QWORD *)a1[1];
      v10 = (_BYTE *)a1[2];
    }
    v3[84] = (char *)v6 + v10 - (_BYTE *)v2;
    a1[2] = v2;
  }
  else
  {
    v3[83] = v2;
    if (v5 == v6)
    {
      *((_OWORD *)v3 + 42) = *((_OWORD *)a1 + 1);
      a1[1] = v4;
      a1[2] = v4;
      a1[3] = a1 + 8;
    }
    else
    {
      a1[1] = v5;
      v7 = v3[84];
      v3[84] = a1[2];
      a1[2] = v7;
      v8 = v3[85];
      v3[85] = a1[3];
      a1[2] = a1[1];
      a1[3] = v8;
    }
  }
  v11 = (_QWORD *)*a1;
  v12 = (char *)a1[8];
  v13 = (char *)(a1 + 11);
  v14 = *(char **)(*a1 + 576);
  v15 = (char *)(*a1 + 600);
  if (v12 == (char *)(a1 + 11))
  {
    if (v14 != v15)
    {
      free(v14);
      v11[72] = v15;
      v11[73] = v15;
      v11[74] = v11 + 83;
      v12 = (char *)a1[8];
    }
    v18 = (char *)a1[9];
    if (v18 == v12)
    {
      v19 = v12;
    }
    else
    {
      memmove(v15, v12, v18 - v12);
      v12 = (char *)a1[8];
      v19 = (char *)a1[9];
    }
    v11[73] = &v15[v19 - v12];
    a1[9] = v12;
    if (v12 == v13)
      goto LABEL_23;
LABEL_22:
    free(v12);
    goto LABEL_23;
  }
  v11[72] = v12;
  if (v14 == v15)
  {
    *(_OWORD *)(v11 + 73) = *(_OWORD *)(a1 + 9);
    a1[8] = v13;
    a1[9] = v13;
    a1[10] = a1 + 19;
    goto LABEL_23;
  }
  a1[8] = v14;
  v16 = v11[73];
  v11[73] = a1[9];
  a1[9] = v16;
  v17 = v11[74];
  v11[74] = a1[10];
  v12 = (char *)a1[8];
  a1[9] = v12;
  a1[10] = v17;
  if (v12 != v13)
    goto LABEL_22;
LABEL_23:
  v20 = (_QWORD *)a1[1];
  if (v20 != v4)
    free(v20);
  return a1;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[31],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "template parameter object for ";
  *(_QWORD *)(result + 24) = 30;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[12],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "vtable for ";
  *(_QWORD *)(result + 24) = 11;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[9],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "VTT for ";
  *(_QWORD *)(result + 24) = 8;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[14],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "typeinfo for ";
  *(_QWORD *)(result + 24) = 13;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[19],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "typeinfo name for ";
  *(_QWORD *)(result + 24) = 18;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseCallOffset(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 1;
  v3 = *v1;
  if (v3 == 118)
  {
    v8 = v1 + 1;
    *a1 = v1 + 1;
    if (v1 + 1 != v2)
    {
      v9 = v1 + 1;
      if (*v8 == 110)
      {
        v9 = v1 + 2;
        *a1 = v1 + 2;
      }
      if (v2 != v9 && ((char)*v9 & 0x80000000) == 0)
      {
        v10 = MEMORY[0x1E0C80978];
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v9 + 60) & 0x400) != 0)
        {
          while (((char)*v9 & 0x80000000) == 0 && (*(_DWORD *)(v10 + 4 * *v9 + 60) & 0x400) != 0)
          {
            *a1 = ++v9;
            if (v9 == v2)
            {
              v9 = v2;
              break;
            }
          }
          v7 = 1;
          if (v9 == v8 || v9 == v2)
            return v7;
          if (*v9 == 95)
          {
            v11 = v9 + 1;
            *a1 = v9 + 1;
            if (v9 + 1 != v2)
            {
              v5 = v9 + 1;
              if (*v11 == 110)
              {
                v5 = v9 + 2;
                *a1 = v9 + 2;
              }
              if (v2 != v5 && ((char)*v5 & 0x80000000) == 0 && (*(_DWORD *)(v10 + 4 * *v5 + 60) & 0x400) != 0)
              {
                while (((char)*v5 & 0x80000000) == 0 && (*(_DWORD *)(v10 + 4 * *v5 + 60) & 0x400) != 0)
                {
                  *a1 = ++v5;
                  if (v5 == v2)
                  {
                    v5 = v2;
                    break;
                  }
                }
                v7 = 1;
                if (v5 == v11 || v5 == v2)
                  return v7;
                if (*v5 == 95)
                  goto LABEL_17;
              }
            }
          }
        }
      }
    }
    return 1;
  }
  if (v3 != 104)
    return 1;
  v4 = v1 + 1;
  *a1 = v1 + 1;
  if (v1 + 1 == v2)
    return 1;
  v5 = v1 + 1;
  if (*v4 == 110)
  {
    v5 = v1 + 2;
    *a1 = v1 + 2;
  }
  if (v2 == v5)
    return 1;
  if ((char)*v5 < 0)
    return 1;
  v6 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v5 + 60) & 0x400) == 0)
    return 1;
  while (((char)*v5 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * *v5 + 60) & 0x400) != 0)
  {
    *a1 = ++v5;
    if (v5 == v2)
    {
      v5 = v2;
      break;
    }
  }
  v7 = 1;
  if (v5 == v4 || v5 == v2)
    return v7;
  if (*v5 != 95)
    return 1;
LABEL_17:
  v7 = 0;
  *a1 = v5 + 1;
  return v7;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[27],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "covariant return thunk to ";
  *(_QWORD *)(result + 24) = 26;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::CtorVtableSpecialName,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 32;
  v9 = (char *)v5 + v6;
  v10 = *a2;
  v11 = *a3;
  *((_QWORD *)v9 + 2) = &unk_1E0E22070;
  result = v9 + 16;
  result[8] = 22;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v10;
  *((_QWORD *)result + 3) = v11;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[41],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "thread-local initialization routine for ";
  *(_QWORD *)(result + 24) = 40;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[18],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "virtual thunk to ";
  *(_QWORD *)(result + 24) = 17;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[22],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E210A0;
  result = v7 + 16;
  result[8] = 21;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = "non-virtual thunk to ";
  *((_QWORD *)result + 3) = 21;
  *((_QWORD *)result + 4) = v8;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SpecialName,char const(&)[25],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E210A0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 21;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "reference temporary for ";
  *(_QWORD *)(result + 24) = 24;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseModuleNameOpt(uint64_t a1, char **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;

  v2 = *(unsigned __int8 **)a1;
  v3 = *(unsigned __int8 **)(a1 + 8);
  if (*(unsigned __int8 **)a1 != v3)
  {
    v6 = (char *)(a1 + 320);
    while (*v2 == 87)
    {
      *(_QWORD *)a1 = v2 + 1;
      if (v2 + 1 == v3 || v2[1] != 80)
      {
        v11 = 0;
        if (!v12)
          return 1;
      }
      else
      {
        *(_QWORD *)a1 = v2 + 2;
        v11 = 1;
        if (!v12)
          return 1;
      }
      v13 = v12;
      v14 = *(_QWORD **)(a1 + 4904);
      v15 = v14[1];
      if ((unint64_t)(v15 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v16 = malloc(0x1000uLL);
        if (!v16)
          std::terminate();
        v15 = 0;
        *v16 = v14;
        v16[1] = 0;
        v14 = v16;
        *(_QWORD *)(a1 + 4904) = v16;
      }
      v14[1] = v15 + 48;
      v7 = (char *)v14 + v15;
      *((_QWORD *)v7 + 2) = &unk_1E0E20E38;
      v8 = v7 + 16;
      v9 = *a2;
      v8[8] = 27;
      *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
      *((_QWORD *)v8 + 2) = v9;
      *((_QWORD *)v8 + 3) = v13;
      v8[32] = v11;
      *a2 = v8;
      v10 = *(char **)(a1 + 304);
      if (v10 == *(char **)(a1 + 312))
      {
        v17 = *(char **)(a1 + 296);
        v18 = v10 - v17;
        if (v17 == v6)
        {
          v20 = (char *)malloc(2 * (v10 - v17));
          if (!v20)
LABEL_25:
            abort();
          v19 = v20;
          if (v10 != v6)
            memcpy(v20, v6, v18);
          *(_QWORD *)(a1 + 296) = v19;
        }
        else
        {
          v19 = (char *)realloc(v17, 2 * (v10 - v17));
          *(_QWORD *)(a1 + 296) = v19;
          if (!v19)
            goto LABEL_25;
        }
        v21 = &v19[8 * (v18 >> 3)];
        *(_QWORD *)(a1 + 304) = v21 + 8;
        *(_QWORD *)(a1 + 312) = &v19[8 * (v18 >> 2)];
        *(_QWORD *)v21 = v8;
        v2 = *(unsigned __int8 **)a1;
        v3 = *(unsigned __int8 **)(a1 + 8);
        if (*(unsigned __int8 **)a1 == v3)
          return 0;
      }
      else
      {
        *(_QWORD *)(a1 + 304) = v10 + 8;
        *(_QWORD *)v10 = v8;
        v2 = *(unsigned __int8 **)a1;
        v3 = *(unsigned __int8 **)(a1 + 8);
        if (*(unsigned __int8 **)a1 == v3)
          return 0;
      }
    }
  }
  return 0;
}

uint64_t llvm::itanium_demangle::Node::hasRHSComponentSlow()
{
  return 0;
}

uint64_t llvm::itanium_demangle::Node::hasArraySlow()
{
  return 0;
}

uint64_t llvm::itanium_demangle::Node::hasFunctionSlow()
{
  return 0;
}

uint64_t llvm::itanium_demangle::SpecialName::printLeft(_QWORD *a1, char **a2)
{
  size_t v4;
  const void *v5;
  char *v6;
  char *v7;
  char *v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = a1[3];
  if (v4)
  {
    v5 = (const void *)a1[2];
    v6 = *a2;
    v7 = a2[1];
    v8 = &v7[v4];
    v9 = (size_t)a2[2];
    if ((unint64_t)&v7[v4] > v9)
    {
      v10 = 2 * v9;
      if (v10 <= (unint64_t)(v8 + 992))
        v11 = (size_t)(v8 + 992);
      else
        v11 = v10;
      a2[2] = (char *)v11;
      v6 = (char *)realloc(v6, v11);
      *a2 = v6;
      if (!v6)
        abort();
      v7 = a2[1];
    }
    memcpy(&v7[(_QWORD)v6], v5, v4);
    a2[1] += v4;
  }
  v12 = a1[4];
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v12 + 32))(v12, a2);
  if ((*(_WORD *)(v12 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v12 + 40))(v12, a2);
  return result;
}

uint64_t llvm::itanium_demangle::Node::getBaseName(llvm::itanium_demangle::Node *this)
{
  return 0;
}

uint64_t llvm::itanium_demangle::CtorVtableSpecialName::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 24) > v6)
  {
    v7 = (size_t)(v5 + 1016);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_17;
    v5 = a2[1];
  }
  qmemcpy(&v5[(_QWORD)v4], "construction vtable for ", 24);
  a2[1] += 24;
  v10 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 40))(v10, a2);
  v11 = *a2;
  v12 = a2[1];
  v13 = (unint64_t)a2[2];
  if ((unint64_t)(v12 + 4) > v13)
  {
    v14 = (size_t)(v12 + 996);
    v15 = 2 * v13;
    if (v15 <= v14)
      v16 = v14;
    else
      v16 = v15;
    a2[2] = (char *)v16;
    v11 = (char *)realloc(v11, v16);
    *a2 = v11;
    if (v11)
    {
      v12 = a2[1];
      goto LABEL_15;
    }
LABEL_17:
    abort();
  }
LABEL_15:
  *(_DWORD *)&v12[(_QWORD)v11] = 762210605;
  a2[1] += 4;
  v17 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v17 + 32))(v17, a2);
  if ((*(_WORD *)(v17 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v17 + 40))(v17, a2);
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseSourceName(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unint64_t v4;
  const char *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t result;

  v2 = *a1;
  v1 = a1[1];
  if (v1 != *a1 && *v2 - 58 >= 0xFFFFFFF6)
  {
    v4 = 0;
    v5 = (const char *)(v2 + 1);
    v6 = v2 + 1;
    do
    {
      v7 = v4;
      v8 = v6;
      v9 = v5;
      *a1 = v6;
      v10 = (char)*(v6 - 1);
      v4 = v10 + 10 * v4 - 48;
      if (v6 == v1)
        break;
      ++v6;
      ++v5;
    }
    while (*v8 - 48 <= 9);
    if (v4 - 1 < v1 - (unsigned __int8 *)v9)
    {
      *a1 = &v8[10 * v7 - 48 + v10];
      if (v4 >= 0xA
        && ((v11 = *(_QWORD *)v8, v12 = *((unsigned __int16 *)v8 + 4), v11 == 0x5F4C41424F4C475FLL)
          ? (v13 = v12 == 20063)
          : (v13 = 0),
            v13))
      {
        v14 = a1[613];
        v15 = *((_QWORD *)v14 + 1);
        if ((unint64_t)(v15 - 4048) > 0xFFFFFFFFFFFFF00FLL)
        {
          v9 = "(anonymous namespace)";
          v4 = 21;
          goto LABEL_16;
        }
        v16 = (unsigned __int8 *)malloc(0x1000uLL);
        if (v16)
        {
          v15 = 0;
          *(_QWORD *)v16 = v14;
          *((_QWORD *)v16 + 1) = 0;
          v4 = 21;
          v14 = v16;
          v9 = "(anonymous namespace)";
          goto LABEL_15;
        }
      }
      else
      {
        v14 = a1[613];
        v15 = *((_QWORD *)v14 + 1);
        if ((unint64_t)(v15 - 4048) > 0xFFFFFFFFFFFFF00FLL)
        {
LABEL_16:
          *((_QWORD *)v14 + 1) = v15 + 32;
          *(_QWORD *)&v14[v15 + 16] = &unk_1E0E227A8;
          result = (uint64_t)&v14[v15 + 16];
          *(_BYTE *)(result + 8) = 8;
          *(_WORD *)(result + 9) = *(_WORD *)&v14[v15 + 25] & 0xF000 | 0x540;
          *(_QWORD *)(result + 16) = v9;
          *(_QWORD *)(result + 24) = v4;
          return result;
        }
        v16 = (unsigned __int8 *)malloc(0x1000uLL);
        if (v16)
        {
          v15 = 0;
          *(_QWORD *)v16 = v14;
          *((_QWORD *)v16 + 1) = 0;
          v14 = v16;
LABEL_15:
          a1[613] = v16;
          goto LABEL_16;
        }
      }
      std::terminate();
    }
  }
  return 0;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::NameType,std::string_view &>(uint64_t a1, __n128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E227A8;
  v7 = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(v7 + 8) = 8;
  result = *a2;
  *(_WORD *)(v7 + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(__n128 *)(v7 + 16) = result;
  return result;
}

_QWORD *llvm::itanium_demangle::NameType::printLeft(_QWORD *result, char **a2)
{
  size_t v2;
  const void *v4;
  char *v5;
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  size_t v10;

  v2 = result[3];
  if (v2)
  {
    v4 = (const void *)result[2];
    v5 = *a2;
    v6 = a2[1];
    v7 = &v6[v2];
    v8 = (size_t)a2[2];
    if ((unint64_t)&v6[v2] > v8)
    {
      v9 = 2 * v8;
      if (v9 <= (unint64_t)(v7 + 992))
        v10 = (size_t)(v7 + 992);
      else
        v10 = v9;
      a2[2] = (char *)v10;
      v5 = (char *)realloc(v5, v10);
      *a2 = v5;
      if (!v5)
        abort();
      v6 = a2[1];
    }
    result = memcpy(&v6[(_QWORD)v5], v4, v2);
    a2[1] += v2;
  }
  return result;
}

uint64_t llvm::itanium_demangle::NameType::getBaseName(llvm::itanium_demangle::NameType *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t llvm::itanium_demangle::ModuleName::printLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v4 + 32))(*(_QWORD *)(a1 + 16), a2);
    if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_BYTE *)(a1 + 32))
        v5 = 58;
      else
        v5 = 46;
      v6 = *(void **)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v8 = v7 + 1;
      v9 = *(_QWORD *)(a2 + 16);
      if (v7 + 1 <= v9)
        goto LABEL_17;
LABEL_12:
      v10 = v7 + 993;
      if (2 * v9 <= v10)
        v11 = v10;
      else
        v11 = 2 * v9;
      *(_QWORD *)(a2 + 16) = v11;
      v6 = realloc(v6, v11);
      *(_QWORD *)a2 = v6;
      if (!v6)
        abort();
      v7 = *(_QWORD *)(a2 + 8);
      v8 = v7 + 1;
      goto LABEL_17;
    }
  }
  if (!*(_BYTE *)(a1 + 32))
    goto LABEL_18;
  v5 = 58;
  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(a2 + 16);
  if (v7 + 1 > v9)
    goto LABEL_12;
LABEL_17:
  *(_QWORD *)(a2 + 8) = v8;
  *((_BYTE *)v6 + v7) = v5;
LABEL_18:
  v12 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, a2);
  if ((*(_WORD *)(v12 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, a2);
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseUnscopedName(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;
  char *result;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;

  v6 = (_WORD *)*a1;
  v7 = (_WORD *)a1[1];
  if ((unint64_t)v7 - *a1 >= 2 && *v6 == 29779)
  {
    *a1 = v6 + 1;
    v11 = (_QWORD *)a1[613];
    v12 = v11[1];
    if ((unint64_t)(v12 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v13 = malloc(0x1000uLL);
      if (!v13)
        std::terminate();
      v12 = 0;
      *v13 = v11;
      v13[1] = 0;
      v11 = v13;
      a1[613] = v13;
    }
    v11[1] = v12 + 32;
    v14 = (char *)v11 + v12;
    *((_QWORD *)v14 + 2) = &unk_1E0E227A8;
    v8 = (uint64_t)(v14 + 16);
    *(_BYTE *)(v8 + 8) = 8;
    *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
    *(_QWORD *)(v8 + 16) = "std";
    *(_QWORD *)(v8 + 24) = 3;
    v6 = (_WORD *)*a1;
    if (a1[1] == *a1)
      goto LABEL_15;
  }
  else
  {
    v8 = 0;
    if (v7 == v6)
    {
LABEL_15:
      v10 = 0;
    }
  }
  if (*(_BYTE *)v6 != 83)
    goto LABEL_15;
  if (!result)
    return result;
  v10 = result;
  if (result[8] == 27)
  result = 0;
  if (a3)
  {
    if (!v8)
    {
      *a3 = 1;
      return v10;
    }
  }
  return result;
}

void llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseTemplateArgs(uint64_t a1, int a2)
{
  _BYTE *v2;
  _BYTE *v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void **v19;
  char *v20;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  int64_t v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  int64_t v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;

  v2 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v2 != 73)
    return;
  v4 = v2 + 1;
  *(_QWORD *)a1 = v4;
  if (a2)
  {
    v5 = *(_QWORD **)(a1 + 664);
    *(_QWORD *)(a1 + 672) = v5;
    if (v5 == *(_QWORD **)(a1 + 680))
    {
      if (v5 == (_QWORD *)(a1 + 688))
      {
        v5 = malloc(0);
        if (!v5)
          goto LABEL_85;
        *(_QWORD *)(a1 + 664) = v5;
      }
      else
      {
        v5 = realloc(v5, 0);
        *(_QWORD *)(a1 + 664) = v5;
        if (!v5)
LABEL_85:
          abort();
      }
      *(_QWORD *)(a1 + 680) = v5;
    }
    v19 = (void **)(a1 + 576);
    *(_QWORD *)(a1 + 672) = v5 + 1;
    *v5 = a1 + 576;
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
    v58 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
    v20 = (char *)(a1 + 40);
    v9 = a1 + 4904;
    v21 = (_QWORD *)(a1 + 600);
    v4 = *(_BYTE **)a1;
    v22 = *(_BYTE **)(a1 + 8);
    while (1)
    {
      if (v4 != v22 && *v4 == 69)
      {
        v18 = 0;
        v7 = v58;
        goto LABEL_80;
      }
      if (!v23)
        return;
      v24 = v23;
      v25 = *(char **)(a1 + 24);
      if (v25 == *(char **)(a1 + 32))
      {
        v40 = *(char **)(a1 + 16);
        v41 = v25 - v40;
        if (v40 == v20)
        {
          v43 = (char *)malloc(2 * (v25 - v40));
          if (!v43)
            goto LABEL_85;
          v42 = v43;
          if (v25 != v20)
            memcpy(v43, (const void *)(a1 + 40), v41);
          *(_QWORD *)(a1 + 16) = v42;
        }
        else
        {
          v42 = (char *)realloc(v40, 2 * (v25 - v40));
          *(_QWORD *)(a1 + 16) = v42;
          if (!v42)
            goto LABEL_85;
        }
        v44 = (uint64_t *)&v42[8 * (v41 >> 3)];
        *(_QWORD *)(a1 + 24) = v44 + 1;
        *(_QWORD *)(a1 + 32) = &v42[8 * (v41 >> 2)];
        *v44 = v24;
        v26 = *(unsigned __int8 *)(v24 + 8);
        if (v26 == 34)
          goto LABEL_65;
LABEL_36:
        if (v26 == 41)
        {
          v27 = *(_QWORD *)(v24 + 16);
          v28 = *(_QWORD *)(v24 + 24);
          v29 = *(_QWORD **)v9;
          v30 = *(_QWORD *)(*(_QWORD *)v9 + 8);
          if ((unint64_t)(v30 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
          {
            v31 = malloc(0x1000uLL);
            if (!v31)
              goto LABEL_86;
            v30 = 0;
            *v31 = v29;
            v31[1] = 0;
            v29 = v31;
            *(_QWORD *)v9 = v31;
          }
          v29[1] = v30 + 32;
          *(_QWORD *)((char *)v29 + v30 + 16) = &unk_1E0E21570;
          v24 = (uint64_t)v29 + v30 + 16;
          *(_BYTE *)(v24 + 8) = 40;
          v32 = *(_WORD *)((_BYTE *)v29 + v30 + 25) & 0xF000;
          *(_QWORD *)(v24 + 16) = v27;
          *(_QWORD *)(v24 + 24) = v28;
          v33 = v32 | 0xA80;
          *(_WORD *)(v24 + 9) = v32 | 0xA80;
          v34 = 8 * v28;
          if (v28)
          {
            v35 = 8 * v28;
            v36 = v27;
            while ((*(_WORD *)(*(_QWORD *)v36 + 9) & 0x300) == 0x100)
            {
              v36 += 8;
              v35 -= 8;
              if (!v35)
                goto LABEL_44;
            }
          }
          else
          {
LABEL_44:
            v33 = v32 | 0x980;
            *(_WORD *)(v24 + 9) = v32 | 0x980;
          }
          if (v28)
          {
            v37 = 8 * v28;
            v38 = v27;
            while ((*(_WORD *)(*(_QWORD *)v38 + 9) & 0xC00) == 0x400)
            {
              v38 += 8;
              v37 -= 8;
              if (!v37)
                goto LABEL_49;
            }
          }
          else
          {
LABEL_49:
            v33 = v33 & 0xF3FF | 0x400;
            *(_WORD *)(v24 + 9) = v33;
          }
          if (v28)
          {
            while ((*(_WORD *)(*(_QWORD *)v27 + 9) & 0xC0) == 0x40)
            {
              v27 += 8;
              v34 -= 8;
              if (!v34)
                goto LABEL_53;
            }
          }
          else
          {
LABEL_53:
            *(_WORD *)(v24 + 9) = v33 & 0xFF3F | 0x40;
          }
        }
        v39 = *(uint64_t **)(a1 + 584);
        if (v39 != *(uint64_t **)(a1 + 592))
          goto LABEL_55;
LABEL_66:
        v45 = (char *)v39 - (_BYTE *)*v19;
        if (*v19 == v21)
        {
          v47 = (char *)malloc(2 * v45);
          if (!v47)
            goto LABEL_85;
          v46 = v47;
          if (v39 != v21)
            memcpy(v47, (const void *)(a1 + 600), v45);
          *v19 = v46;
        }
        else
        {
          v46 = (char *)realloc(*v19, 2 * v45);
          *v19 = v46;
          if (!v46)
            goto LABEL_85;
        }
        v48 = (uint64_t *)&v46[8 * (v45 >> 3)];
        *(_QWORD *)(a1 + 592) = &v46[8 * (v45 >> 2)];
        *(_QWORD *)(a1 + 584) = v48 + 1;
        *v48 = v24;
        v4 = *(_BYTE **)a1;
        v22 = *(_BYTE **)(a1 + 8);
        if (*(_BYTE **)a1 != v22)
          goto LABEL_30;
      }
      else
      {
        *(_QWORD *)(a1 + 24) = v25 + 8;
        *(_QWORD *)v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 8);
        if (v26 != 34)
          goto LABEL_36;
LABEL_65:
        v24 = *(_QWORD *)(v24 + 24);
        v39 = *(uint64_t **)(a1 + 584);
        if (v39 == *(uint64_t **)(a1 + 592))
          goto LABEL_66;
LABEL_55:
        *(_QWORD *)(a1 + 584) = v39 + 1;
        *v39 = v24;
        v4 = *(_BYTE **)a1;
        v22 = *(_BYTE **)(a1 + 8);
        if (*(_BYTE **)a1 != v22)
        {
LABEL_30:
          if (*v4 == 81)
          {
            v7 = v58;
            goto LABEL_77;
          }
        }
      }
    }
  }
  v6 = *(_BYTE **)(a1 + 8);
  v7 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  v8 = (char *)(a1 + 40);
  v9 = a1 + 4904;
  do
  {
    do
    {
      while (1)
      {
        if (v4 != v6 && *v4 == 69)
        {
          v18 = 0;
          goto LABEL_80;
        }
        if (!v10)
          return;
        v11 = v10;
        v12 = *(char **)(a1 + 24);
        if (v12 == *(char **)(a1 + 32))
          break;
        *(_QWORD *)(a1 + 24) = v12 + 8;
        *(_QWORD *)v12 = v10;
        v4 = *(_BYTE **)a1;
        v6 = *(_BYTE **)(a1 + 8);
        if (*(_BYTE **)a1 != v6)
          goto LABEL_9;
      }
      v13 = *(char **)(a1 + 16);
      v14 = v12 - v13;
      if (v13 == v8)
      {
        v16 = (char *)malloc(2 * (v12 - v13));
        if (!v16)
          goto LABEL_85;
        v15 = v16;
        if (v12 != v8)
          memcpy(v16, (const void *)(a1 + 40), v14);
        *(_QWORD *)(a1 + 16) = v15;
      }
      else
      {
        v15 = (char *)realloc(v13, 2 * (v12 - v13));
        *(_QWORD *)(a1 + 16) = v15;
        if (!v15)
          goto LABEL_85;
      }
      v17 = &v15[8 * (v14 >> 3)];
      *(_QWORD *)(a1 + 24) = v17 + 8;
      *(_QWORD *)(a1 + 32) = &v15[8 * (v14 >> 2)];
      *(_QWORD *)v17 = v11;
      v4 = *(_BYTE **)a1;
      v6 = *(_BYTE **)(a1 + 8);
    }
    while (*(_BYTE **)a1 == v6);
LABEL_9:
    ;
  }
  while (*v4 != 81);
LABEL_77:
  *(_QWORD *)a1 = v4 + 1;
  v49 = *(_BYTE *)(a1 + 778);
  *(_BYTE *)(a1 + 778) = 1;
  *(_BYTE *)(a1 + 778) = v49;
  if (!v50)
    return;
  v4 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    return;
  v18 = v50;
  if (*v4 != 69)
    return;
LABEL_80:
  *(_QWORD *)a1 = v4 + 1;
  v53 = v52;
  v54 = *(_QWORD **)(a1 + 4904);
  v55 = v54[1];
  if ((unint64_t)(v55 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v56 = malloc(0x1000uLL);
    if (!v56)
LABEL_86:
      std::terminate();
    v55 = 0;
    *v56 = v54;
    v56[1] = 0;
    v54 = v56;
    *(_QWORD *)v9 = v56;
  }
  v54[1] = v55 + 48;
  *(_QWORD *)((char *)v54 + v55 + 16) = &unk_1E0E213B8;
  v57 = (uint64_t)v54 + v55 + 16;
  *(_BYTE *)(v57 + 8) = 43;
  *(_WORD *)(v57 + 9) = *(_WORD *)((_BYTE *)v54 + v55 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(v57 + 16) = v51;
  *(_QWORD *)(v57 + 24) = v53;
  *(_QWORD *)(v57 + 32) = v18;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::NameWithTemplateArgs,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 32;
  v9 = (char *)v5 + v6;
  v10 = *a2;
  v11 = *a3;
  *((_QWORD *)v9 + 2) = &unk_1E0E21F68;
  result = v9 + 16;
  result[8] = 45;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v10;
  *((_QWORD *)result + 3) = v11;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseTemplateParam(uint64_t a1, size_t __size)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;

  v3 = *(_BYTE **)a1;
  v2 = *(unsigned __int8 **)(a1 + 8);
  if (*(unsigned __int8 **)a1 == v2)
    return 0;
  if (*v3 != 84)
    return 0;
  v5 = v3 + 1;
  *(_QWORD *)a1 = v3 + 1;
  if (v3 + 1 == v2)
    return 0;
  if (*v5 != 76)
  {
    v10 = 0;
    if (v5 != v2)
      goto LABEL_15;
    return 0;
  }
  *(_QWORD *)a1 = v3 + 2;
  if (v2 == v3 + 2 || v3[2] - 58 < 0xFFFFFFF6)
    return 0;
  v6 = 0;
  v7 = v3 + 4;
  do
  {
    v5 = v7;
    v8 = v7 - 1;
    *(_QWORD *)a1 = v7 - 1;
    v6 = (char)*(v7 - 2) + 10 * v6 - 48;
    if (v7 - 1 == v2)
      break;
    v9 = *(v7++ - 1) - 48;
  }
  while (v9 <= 9);
  if (v8 == v2)
    return 0;
  if (*(v5 - 1) != 95)
    return 0;
  v10 = v6 + 1;
  *(_QWORD *)a1 = v5;
  if (v5 == v2)
    return 0;
LABEL_15:
  v11 = *v5;
  if (v11 == 95)
  {
    v12 = 0;
    *(_QWORD *)a1 = v5 + 1;
    if (*(_BYTE *)(a1 + 778))
    {
LABEL_17:
      v13 = *(_QWORD **)(a1 + 4904);
      v14 = v13[1];
      if ((unint64_t)(v14 - 4048) > 0xFFFFFFFFFFFFF00FLL)
      {
LABEL_20:
        v16 = v5 - v3;
        v13[1] = v14 + 32;
        *(_QWORD *)((char *)v13 + v14 + 16) = &unk_1E0E227A8;
        v17 = (uint64_t)v13 + v14 + 16;
        *(_BYTE *)(v17 + 8) = 8;
        *(_WORD *)(v17 + 9) = *(_WORD *)((_BYTE *)v13 + v14 + 25) & 0xF000 | 0x540;
        *(_QWORD *)(v17 + 16) = v3;
        *(_QWORD *)(v17 + 24) = v16;
        return (char *)v17;
      }
      v15 = malloc(0x1000uLL);
      if (v15)
      {
        v14 = 0;
        *v15 = v13;
        v15[1] = 0;
        v13 = v15;
        *(_QWORD *)(a1 + 4904) = v15;
        goto LABEL_20;
      }
LABEL_53:
      std::terminate();
    }
  }
  else
  {
    if ((v11 - 58) < 0xFFFFFFF6)
      return 0;
    v19 = 0;
    v20 = v5 + 1;
    do
    {
      *(_QWORD *)a1 = v20;
      if (v20 == v2)
        return 0;
      v19 = (char)*(v20 - 1) + 10 * v19 - 48;
      v22 = *v20++;
      v21 = v22;
    }
    while ((v22 - 48) <= 9);
    if (v21 != 95)
      return 0;
    v12 = v19 + 1;
    v5 = v20 - 1;
    *(_QWORD *)a1 = v20;
    if (*(_BYTE *)(a1 + 778))
      goto LABEL_17;
  }
  if (*(_BYTE *)(a1 + 777) && !v10)
  {
    v23 = *(_QWORD **)(a1 + 4904);
    v24 = v23[1];
    if ((unint64_t)(v24 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v25 = malloc(0x1000uLL);
      if (!v25)
        goto LABEL_53;
      v24 = 0;
      *v25 = v23;
      v25[1] = 0;
      v23 = v25;
      *(_QWORD *)(a1 + 4904) = v25;
    }
    v23[1] = v24 + 48;
    v26 = (char *)v23 + v24;
    *((_QWORD *)v26 + 2) = &unk_1E0E222D8;
    v17 = (uint64_t)(v26 + 16);
    *(_BYTE *)(v17 + 8) = 44;
    *(_WORD *)(v17 + 9) = *(_WORD *)(v17 + 9) & 0xF000 | 0xA80;
    *(_QWORD *)(v17 + 16) = v12;
    *(_QWORD *)(v17 + 24) = 0;
    *(_BYTE *)(v17 + 32) = 0;
    v27 = *(uint64_t **)(a1 + 728);
    if (v27 == *(uint64_t **)(a1 + 736))
    {
      v28 = *(uint64_t **)(a1 + 720);
      v29 = (char *)v27 - (char *)v28;
      if (v28 == (uint64_t *)(a1 + 744))
      {
        v36 = (char *)malloc(2 * ((char *)v27 - (char *)v28));
        if (!v36)
          goto LABEL_54;
        v30 = v36;
        if (v27 != v28)
          memmove(v36, v28, (char *)v27 - (char *)v28);
        *(_QWORD *)(a1 + 720) = v30;
      }
      else
      {
        v30 = (char *)realloc(*(void **)(a1 + 720), 2 * ((char *)v27 - (char *)v28));
        *(_QWORD *)(a1 + 720) = v30;
        if (!v30)
LABEL_54:
          abort();
      }
      v27 = (uint64_t *)&v30[8 * (v29 >> 3)];
      *(_QWORD *)(a1 + 736) = &v30[8 * (v29 >> 2)];
    }
    *(_QWORD *)(a1 + 728) = v27 + 1;
    *v27 = v17;
    return (char *)v17;
  }
  v31 = *(_QWORD *)(a1 + 664);
  v32 = (*(_QWORD *)(a1 + 672) - v31) >> 3;
  if (v10 < v32)
  {
    v33 = *(_QWORD **)(v31 + 8 * v10);
    if (v33)
    {
      v35 = v33;
      v34 = *v33;
      if (v12 < (v35[1] - v34) >> 3)
        return *(char **)(v34 + 8 * v12);
    }
  }
  v17 = 0;
  if (v10 <= v32 && *(_QWORD *)(a1 + 784) == v10)
  {
    if (v10 == v32)
    {
      v37 = 0;
      llvm::itanium_demangle::PODSmallVector<llvm::itanium_demangle::Node *,32ul>::push_back((_QWORD *)(a1 + 664), &v37);
    }
  }
  return (char *)v17;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseDecltype(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t result;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_BYTE **)a1;
  v2 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)a1 == v2)
    return 0;
  if (*v1 != 68)
    return 0;
  *(_QWORD *)a1 = v1 + 1;
  if (v1 + 1 == v2 || (v1[1] | 0x20) != 0x74)
    return 0;
  *(_QWORD *)a1 = v1 + 2;
  if (!result)
    return result;
  v5 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *v5 != 69)
    return 0;
  v6 = result;
  *(_QWORD *)a1 = v5 + 1;
  v7 = *(_QWORD **)(a1 + 4904);
  v8 = v7[1];
  if ((unint64_t)(v8 - 4016) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v9 = malloc(0x1000uLL);
    if (!v9)
      std::terminate();
    v8 = 0;
    *v9 = v7;
    v9[1] = 0;
    v7 = v9;
    *(_QWORD *)(a1 + 4904) = v9;
  }
  v7[1] = v8 + 64;
  *(_QWORD *)((char *)v7 + v8 + 16) = &unk_1E0E21410;
  result = (uint64_t)v7 + v8 + 16;
  *(_BYTE *)(result + 8) = 60;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v7 + v8 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = "decltype";
  *(_QWORD *)(result + 24) = 8;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = v6;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseSubstitution(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v4;
  unsigned int v5;
  int v6;
  char *result;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v2 = *(_BYTE **)a1;
  v1 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)a1 == v1)
    return 0;
  if (*v2 != 83)
    return 0;
  v4 = v2 + 1;
  *(_QWORD *)a1 = v2 + 1;
  if (v1 == v2 + 1)
    return 0;
  v5 = *v4;
  if ((char)*v4 < 97)
  {
    if (v5 == 95)
    {
      *(_QWORD *)a1 = v2 + 2;
      v8 = *(_QWORD *)(a1 + 296);
      if (v8 != *(_QWORD *)(a1 + 304))
        return *(char **)v8;
      return 0;
    }
    if ((char)v5 < 48)
      return 0;
LABEL_13:
    if (v5 < 0x3A || v5 - 65 <= 0x19)
    {
      v10 = 0;
      while ((char)*v4 >= 48)
      {
        if (*v4 < 0x3Au)
        {
          v11 = -48;
        }
        else
        {
          if (*v4 - 65 > 0x19)
            break;
          v11 = -55;
        }
        v10 = *v4++ + 36 * v10 + v11;
        *(_QWORD *)a1 = v4;
        if (v4 == v1)
          return 0;
      }
      if (v4 != v1 && *v4 == 95)
      {
        *(_QWORD *)a1 = v4 + 1;
        v12 = *(_QWORD *)(a1 + 296);
        if (v10 + 1 < (unint64_t)((*(_QWORD *)(a1 + 304) - v12) >> 3))
          return *(char **)(v12 + 8 * (v10 + 1));
      }
    }
    return 0;
  }
  if (v5 > 0x7A)
    goto LABEL_13;
  v6 = 0;
  switch(*v4)
  {
    case 'a':
      goto LABEL_33;
    case 'b':
      v6 = 1;
      goto LABEL_33;
    case 'd':
      v6 = 5;
      goto LABEL_33;
    case 'i':
      v6 = 3;
      goto LABEL_33;
    case 'o':
      v6 = 4;
      goto LABEL_33;
    case 's':
      v6 = 2;
LABEL_33:
      *(_QWORD *)a1 = v2 + 2;
      v13 = *(char **)(a1 + 4904);
      v14 = *((_QWORD *)v13 + 1);
      if ((unint64_t)(v14 - 4064) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v15 = (char *)malloc(0x1000uLL);
        if (!v15)
          std::terminate();
        v14 = 0;
        *(_QWORD *)v15 = v13;
        *((_QWORD *)v15 + 1) = 0;
        v13 = v15;
        *(_QWORD *)(a1 + 4904) = v15;
      }
      v16 = v14 + 16;
      *((_QWORD *)v13 + 1) = v16;
      v17 = &v13[v16];
      v17[8] = 48;
      *(_WORD *)(v17 + 9) = *(_WORD *)&v13[v16 + 9] & 0xF000 | 0x540;
      *((_DWORD *)v17 + 3) = v6;
      *(_QWORD *)v17 = &unk_1E0E21E60;
      if (v18 == v17)
      {
        result = v17;
      }
      else
      {
        v19 = v18;
        v20 = *(char **)(a1 + 304);
        if (v20 == *(char **)(a1 + 312))
        {
          v21 = *(char **)(a1 + 296);
          v22 = v20 - v21;
          if (v21 == (char *)(a1 + 320))
          {
            v24 = (char *)malloc(2 * (v20 - v21));
            if (!v24)
              goto LABEL_49;
            v23 = v24;
            if (v20 != v21)
              memmove(v24, v21, v20 - v21);
            *(_QWORD *)(a1 + 296) = v23;
          }
          else
          {
            v23 = (char *)realloc(*(void **)(a1 + 296), 2 * (v20 - v21));
            *(_QWORD *)(a1 + 296) = v23;
            if (!v23)
LABEL_49:
              abort();
          }
          v20 = &v23[8 * (v22 >> 3)];
          *(_QWORD *)(a1 + 312) = &v23[8 * (v22 >> 2)];
        }
        *(_QWORD *)(a1 + 304) = v20 + 8;
        *(_QWORD *)v20 = v19;
        result = v19;
      }
      break;
    default:
      return 0;
  }
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseUnqualifiedName(uint64_t a1, _BYTE *a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  int64_t v35;
  char *v36;
  char *v37;
  unsigned __int8 *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  unsigned int v46;
  int v47;
  char *v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v61;
  uint64_t v62;

  v4 = a3;
  v61 = a4;
  v62 = a3;
  v8 = *(unsigned __int8 **)a1;
  v9 = *(unsigned __int8 **)(a1 + 8);
  if (!v4)
    goto LABEL_8;
  if (v8 == v9)
  {
    v13 = 1;
    v9 = *(unsigned __int8 **)a1;
    v10 = 1;
    goto LABEL_23;
  }
  if (*v8 == 70)
  {
    v10 = 0;
    *(_QWORD *)a1 = ++v8;
    if (v8 == v9)
      goto LABEL_16;
  }
  else
  {
LABEL_8:
    v10 = 1;
    if (v8 == v9)
    {
LABEL_16:
      v13 = 1;
      v8 = v9;
      goto LABEL_23;
    }
  }
  if (*v8 == 76)
    *(_QWORD *)a1 = ++v8;
  if (v9 == v8)
    goto LABEL_16;
  if ((char)*v8 >= 49)
  {
    v11 = *v8;
    if (v11 <= 0x39)
    {
      if (!v12)
        goto LABEL_79;
      goto LABEL_38;
    }
    if (v11 == 85)
    {
      if (!v12)
        goto LABEL_79;
      goto LABEL_38;
    }
  }
  v13 = 0;
  if ((unint64_t)(v9 - v8) >= 2 && *(_WORD *)v8 == 17220)
  {
    *(_QWORD *)a1 = v8 + 2;
    v28 = *(_QWORD *)(a1 + 16);
    v27 = *(_QWORD *)(a1 + 24);
    if (v29)
    {
      v30 = v29;
      v31 = (v27 - v28) >> 3;
      v32 = (uint64_t *)(a1 + 40);
      while (1)
      {
        v33 = *(uint64_t **)(a1 + 24);
        if (v33 == *(uint64_t **)(a1 + 32))
        {
          v34 = *(uint64_t **)(a1 + 16);
          v35 = (char *)v33 - (char *)v34;
          if (v34 == v32)
          {
            v37 = (char *)malloc(2 * ((char *)v33 - (char *)v34));
            if (!v37)
LABEL_96:
              abort();
            v36 = v37;
            if (v33 != v32)
              memcpy(v37, (const void *)(a1 + 40), v35);
            *(_QWORD *)(a1 + 16) = v36;
          }
          else
          {
            v36 = (char *)realloc(v34, 2 * ((char *)v33 - (char *)v34));
            *(_QWORD *)(a1 + 16) = v36;
            if (!v36)
              goto LABEL_96;
          }
          v33 = (uint64_t *)&v36[8 * (v35 >> 3)];
          *(_QWORD *)(a1 + 32) = &v36[8 * (v35 >> 2)];
        }
        *(_QWORD *)(a1 + 24) = v33 + 1;
        *v33 = v30;
        v38 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v38 == 69)
          break;
        if (!v30)
          return 0;
      }
      *(_QWORD *)a1 = v38 + 1;
      v41 = v40;
      v42 = *(_QWORD **)(a1 + 4904);
      v43 = v42[1];
      if ((unint64_t)(v43 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v44 = malloc(0x1000uLL);
        if (!v44)
          goto LABEL_97;
        v43 = 0;
        *v44 = v42;
        v44[1] = 0;
        v42 = v44;
        *(_QWORD *)(a1 + 4904) = v44;
      }
      v42[1] = v43 + 32;
      v45 = (char *)v42 + v43;
      *((_QWORD *)v45 + 2) = &unk_1E0E220C8;
      v12 = (uint64_t)(v45 + 16);
      *(_BYTE *)(v12 + 8) = 53;
      *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
      *(_QWORD *)(v12 + 16) = v39;
      *(_QWORD *)(v12 + 24) = v41;
      if (!v12)
        goto LABEL_79;
      goto LABEL_38;
    }
    return 0;
  }
LABEL_23:
  if ((v13 & 1) != 0 || *v8 - 67 > 1)
  {
    if (!v12)
      goto LABEL_79;
    goto LABEL_38;
  }
  v7 = 0;
  if (!v4 || v61)
    return v7;
  if (*(_BYTE *)(v4 + 8) == 48)
  {
    v14 = *(_QWORD **)(a1 + 4904);
    v15 = v14[1];
    if ((unint64_t)(v15 - 4064) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v16 = malloc(0x1000uLL);
      if (!v16)
        goto LABEL_97;
      v15 = 0;
      *v16 = v14;
      v16[1] = 0;
      v14 = v16;
      *(_QWORD *)(a1 + 4904) = v16;
    }
    v17 = v15 + 16;
    v14[1] = v17;
    v18 = *(_DWORD *)(v4 + 12);
    v4 = (uint64_t)v14 + v17;
    *(_BYTE *)(v4 + 8) = 47;
    *(_WORD *)(v4 + 9) = *(_WORD *)((_BYTE *)v14 + v17 + 9) & 0xF000 | 0x540;
    *(_QWORD *)v4 = &unk_1E0E22490;
    *(_DWORD *)(v4 + 12) = v18;
    v62 = (uint64_t)v14 + v17;
    v8 = *(unsigned __int8 **)a1;
    v9 = *(unsigned __int8 **)(a1 + 8);
  }
  if (v8 == v9)
    return 0;
  v19 = *v8;
  if (v19 == 67)
  {
    v20 = v8 + 1;
    *(_QWORD *)a1 = v8 + 1;
    if (v8 + 1 == v9)
    {
      v21 = 0;
      v20 = v9;
    }
    else if (*v20 == 73)
    {
      v20 = v8 + 2;
      *(_QWORD *)a1 = v8 + 2;
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
    if (v9 == v20)
      return 0;
    v47 = *v20;
    if ((v47 - 49) > 4)
      return 0;
    *(_QWORD *)a1 = v20 + 1;
    if (a2)
      *a2 = 1;
    if (v21
    {
      return 0;
    }
    if (!v12)
      goto LABEL_79;
  }
  else
  {
    v7 = 0;
    if ((unint64_t)(v9 - v8) < 2)
      return v7;
    if (v19 != 68)
      return v7;
    v7 = 0;
    v46 = v8[1];
    if (v46 > 0x35 || ((1 << v46) & 0x37000000000000) == 0)
      return v7;
    *(_QWORD *)a1 = v8 + 2;
    if (a2)
      *a2 = 1;
    if (!v12)
      goto LABEL_79;
  }
LABEL_38:
  v22 = v61;
  if (v61)
  {
    v23 = *(_QWORD **)(a1 + 4904);
    v24 = v23[1];
    if ((unint64_t)(v24 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v25 = malloc(0x1000uLL);
      if (!v25)
        goto LABEL_97;
      v24 = 0;
      *v25 = v23;
      v25[1] = 0;
      v23 = v25;
      *(_QWORD *)(a1 + 4904) = v25;
    }
    v23[1] = v24 + 32;
    v26 = (uint64_t)v23 + v24;
    *(_QWORD *)(v26 + 16) = &unk_1E0E212B0;
    v26 += 16;
    *(_BYTE *)(v26 + 8) = 28;
    *(_WORD *)(v26 + 9) = *(_WORD *)(v26 + 9) & 0xF000 | 0x540;
    *(_QWORD *)(v26 + 16) = v22;
    *(_QWORD *)(v26 + 24) = v12;
    v12 = v26;
    goto LABEL_80;
  }
LABEL_79:
  if (!v12)
    return 0;
LABEL_80:
  v7 = v48;
  if (v48)
    v49 = v10;
  else
    v49 = 1;
  if ((v49 & 1) == 0)
  {
    v56 = *(_QWORD **)(a1 + 4904);
    v57 = v56[1];
    if ((unint64_t)(v57 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v58 = malloc(0x1000uLL);
      if (!v58)
        goto LABEL_97;
      v57 = 0;
      *v58 = v56;
      v58[1] = 0;
      v56 = v58;
      *(_QWORD *)(a1 + 4904) = v58;
    }
    v56[1] = v57 + 32;
    v59 = (char *)v56 + v57;
    *((_QWORD *)v59 + 2) = &unk_1E0E21F10;
    v54 = v59 + 16;
    v55 = 25;
    goto LABEL_94;
  }
  if (v4 && v48)
  {
    v50 = *(_QWORD **)(a1 + 4904);
    v51 = v50[1];
    if ((unint64_t)(v51 - 4048) > 0xFFFFFFFFFFFFF00FLL)
    {
LABEL_89:
      v50[1] = v51 + 32;
      v53 = (char *)v50 + v51;
      *((_QWORD *)v53 + 2) = &unk_1E0E20E90;
      v54 = v53 + 16;
      v55 = 24;
LABEL_94:
      v54[8] = v55;
      *(_WORD *)(v54 + 9) = *(_WORD *)(v54 + 9) & 0xF000 | 0x540;
      *((_QWORD *)v54 + 2) = v4;
      *((_QWORD *)v54 + 3) = v7;
      return v54;
    }
    v52 = malloc(0x1000uLL);
    if (v52)
    {
      v51 = 0;
      *v52 = v50;
      v52[1] = 0;
      v50 = v52;
      *(_QWORD *)(a1 + 4904) = v52;
      goto LABEL_89;
    }
LABEL_97:
    std::terminate();
  }
  return v7;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::NameType,char const(&)[5]>(uint64_t a1, char *__s)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  size_t v8;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = strlen(__s);
  *((_QWORD *)v7 + 2) = &unk_1E0E227A8;
  v7 += 16;
  v7[8] = 8;
  *(_WORD *)(v7 + 9) = *(_WORD *)(v7 + 9) & 0xF000 | 0x540;
  *((_QWORD *)v7 + 2) = __s;
  *((_QWORD *)v7 + 3) = v8;
  return v7;
}

uint64_t llvm::itanium_demangle::ForwardTemplateReference::hasRHSComponentSlow(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;

  if (*(_BYTE *)(a1 + 32))
    return 0;
  *(_BYTE *)(a1 + 32) = 1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(v3 + 9);
  if ((v4 & 0xC0) == 0x80)
    result = (**(uint64_t (***)(uint64_t))v3)(v3);
  else
    result = v4 < 0x40;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t llvm::itanium_demangle::ForwardTemplateReference::hasArraySlow(uint64_t a1)
{
  uint64_t result;
  _BYTE *v3;
  int v4;

  if (*(_BYTE *)(a1 + 32))
    return 0;
  *(_BYTE *)(a1 + 32) = 1;
  v3 = *(_BYTE **)(a1 + 24);
  v4 = v3[10] & 3;
  if (v4 == 2)
    result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 8))(v3);
  else
    result = v4 == 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t llvm::itanium_demangle::ForwardTemplateReference::hasFunctionSlow(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  if (*(_BYTE *)(a1 + 32))
    return 0;
  *(_BYTE *)(a1 + 32) = 1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = (*(unsigned __int16 *)(v3 + 9) >> 10) & 3;
  if (v4 == 2)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    result = v4 == 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t llvm::itanium_demangle::ForwardTemplateReference::getSyntaxNode(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (!*(_BYTE *)(result + 32))
  {
    *(_BYTE *)(result + 32) = 1;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 24))(*(_QWORD *)(result + 24));
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t llvm::itanium_demangle::ForwardTemplateReference::printLeft(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 32))
  {
    v1 = result;
    *(_BYTE *)(result + 32) = 1;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 32))(*(_QWORD *)(result + 24));
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t llvm::itanium_demangle::ForwardTemplateReference::printRight(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 32))
  {
    v1 = result;
    *(_BYTE *)(result + 32) = 1;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24));
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

void llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseExpr(uint64_t a1, size_t a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unint64_t v4;
  int v6;
  _BOOL4 v7;
  char v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned __int16 *v16;
  int v17;
  const char *v18;
  size_t v19;
  const char *v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  unsigned __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  char *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int16 *v82;
  unsigned __int16 *v83;
  int v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  size_t v93;
  uint64_t v94;
  unsigned __int16 *v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  int64_t v108;
  char *v109;
  unint64_t v110;
  unsigned __int8 *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned __int16 *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _BYTE *v123;
  int64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unsigned __int16 *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int16 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  const char *v138;
  size_t v139;
  const char *v140;
  int v141;
  const char *v142;
  size_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int16 *v149;
  int v150;
  uint64_t v151;
  __int128 v152;
  __n128 v153;
  uint64_t v154;
  __n128 v155;

  v2 = *(unsigned __int16 **)a1;
  v3 = *(unsigned __int16 **)(a1 + 8);
  v4 = (unint64_t)v3 - *(_QWORD *)a1;
  if (v4 < 2)
    return;
  v6 = *v2;
  v7 = v6 != 29543;
  if (v6 == 29543)
  {
    *(_QWORD *)a1 = ++v2;
    v4 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) < 2)
      return;
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
  v10 = (unsigned __int8 *)v2 + 1;
  v11 = *(unsigned __int8 *)v2;
  v12 = 61;
  do
  {
    v13 = (v9 + v12) >> 1;
        + 16 * v13;
    if (*v14 < (char)v11)
    {
      v9 = v13 + 1;
    }
    else if (*v14 == v11)
    {
      if (v14[1] >= (char)*v10)
        v12 = (v9 + v12) >> 1;
      else
        v9 = v13 + 1;
    }
    else
    {
      v12 = (v9 + v12) >> 1;
    }
  }
  while (v12 != v9);
      + 16 * v9;
  if (*v15 == v11 && v15[1] == *v10)
  {
    v16 = v2 + 1;
    *(_QWORD *)a1 = v2 + 1;
    v17 = v15[2];
    v18 = (const char *)*((_QWORD *)v15 + 1);
    v19 = strlen(v18);
    v20 = v18 + 8;
    if (v19 == 8)
    {
      v22 = 0;
    }
    else
    {
      v21 = *(unsigned __int8 *)v20;
      if (v21 == 32)
        v22 = v19 - 9;
      else
        v22 = v19 - 8;
      if (v21 == 32)
        v20 = v18 + 9;
    }
    while (2)
    {
      v153.n128_u64[0] = (unint64_t)v20;
      v153.n128_u64[1] = v22;
      switch(v17)
      {
        case 0:
          v35 = v15[3];
          if (!v36)
            return;
          v37 = v36;
          v38 = *(_QWORD **)(a1 + 4904);
          v39 = v38[1];
          if ((unint64_t)(v39 - 4032) > 0xFFFFFFFFFFFFF00FLL)
            goto LABEL_65;
          v40 = malloc(0x1000uLL);
          if (!v40)
            goto LABEL_265;
          v39 = 0;
          *v40 = v38;
          v40[1] = 0;
          v38 = v40;
          *(_QWORD *)(a1 + 4904) = v40;
LABEL_65:
          v38[1] = v39 + 48;
          *(_QWORD *)((char *)v38 + v39 + 16) = &unk_1E0E20EE8;
          v41 = (uint64_t)v38 + v39 + 16;
          *(_BYTE *)(v41 + 8) = 66;
          *(_WORD *)(v41 + 9) = *(_WORD *)((_BYTE *)v38 + v39 + 25) & 0xF000 | (v35 >> 1) | 0x540;
          *(_QWORD *)(v41 + 16) = v20;
          *(_QWORD *)(v41 + 24) = v22;
          *(_QWORD *)(v41 + 32) = v37;
          return;
        case 1:
          if (v16 == v3 || *(_BYTE *)v16 != 95)
          {
            if (v155.n128_u64[0])
          }
          else
          {
            *(_QWORD *)a1 = (char *)v2 + 3;
            v51 = v15[3];
            v155.n128_u64[0] = (unint64_t)v20;
            v155.n128_u64[1] = v22;
            if ((_QWORD)v152)
          }
          return;
        case 2:
          v52 = (char)v15[3];
          v155.n128_u64[0] = (unint64_t)v20;
          v155.n128_u64[1] = v22;
          if ((_QWORD)v152)
          {
            if (v154)
          }
          return;
        case 3:
          if (v155.n128_u64[0])
          {
            if ((_QWORD)v152)
          }
          return;
        case 4:
          if (v155.n128_u64[0])
          {
            if ((_QWORD)v152)
          }
          return;
        case 5:
          v53 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
          v54 = (char *)(a1 + 40);
          while (2)
          {
            if (v16 != v3 && *(_BYTE *)v16 == 95)
            {
              *(_QWORD *)a1 = (char *)v16 + 1;
              v155.n128_u64[1] = v97;
              if (!v154)
                return;
              v100 = *(_QWORD *)(a1 + 16);
              v99 = *(_QWORD *)(a1 + 24);
              if (v98)
              {
                while (1)
                {
                  v101 = *(unsigned __int16 **)a1;
                  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *(_BYTE *)v101 == 69)
                    break;
                  if (!v105)
                    return;
                  v106 = v105;
                  v104 = *(char **)(a1 + 24);
                  if (v104 == *(char **)(a1 + 32))
                  {
                    v107 = *(char **)(a1 + 16);
                    v108 = v104 - v107;
                    if (v107 == v54)
                    {
                      v109 = (char *)malloc(2 * (v104 - v107));
                      if (!v109)
                        goto LABEL_264;
                      v103 = v109;
                      if (v104 != v54)
                        memcpy(v109, (const void *)(a1 + 40), v108);
                      *(_QWORD *)(a1 + 16) = v103;
                    }
                    else
                    {
                      v103 = (char *)realloc(v107, 2 * (v104 - v107));
                      *(_QWORD *)(a1 + 16) = v103;
                      if (!v103)
                        goto LABEL_264;
                    }
                    v104 = &v103[8 * (v108 >> 3)];
                    *(_QWORD *)(a1 + 32) = &v103[8 * (v108 >> 2)];
                  }
                  *(_QWORD *)(a1 + 24) = v104 + 8;
                  *(_QWORD *)v104 = v106;
                }
              }
              else
              {
                v101 = *(unsigned __int16 **)a1;
                if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *(_BYTE *)v101 != 69)
                  return;
              }
              *(_QWORD *)a1 = (char *)v101 + 1;
              *((_QWORD *)&v152 + 1) = v102;
              return;
            }
            if (!v57)
              return;
            v58 = v57;
            v56 = *(char **)(a1 + 24);
            if (v56 != *(char **)(a1 + 32))
              goto LABEL_104;
            v59 = *(char **)(a1 + 16);
            v60 = v56 - v59;
            if (v59 == v54)
            {
              v61 = (char *)malloc(2 * (v56 - v59));
              if (v61)
              {
                v55 = v61;
                if (v56 != v54)
                  memcpy(v61, (const void *)(a1 + 40), v60);
                *(_QWORD *)(a1 + 16) = v55;
                goto LABEL_103;
              }
            }
            else
            {
              v55 = (char *)realloc(v59, 2 * (v56 - v59));
              *(_QWORD *)(a1 + 16) = v55;
              if (v55)
              {
LABEL_103:
                v56 = &v55[8 * (v60 >> 3)];
                *(_QWORD *)(a1 + 32) = &v55[8 * (v60 >> 2)];
LABEL_104:
                *(_QWORD *)(a1 + 24) = v56 + 8;
                *(_QWORD *)v56 = v58;
                v16 = *(unsigned __int16 **)a1;
                v3 = *(unsigned __int16 **)(a1 + 8);
                continue;
              }
            }
            goto LABEL_264;
          }
        case 6:
          if (!v62)
            return;
          v63 = v62;
          v64 = v15[3];
          v65 = *(_QWORD **)(a1 + 4904);
          v66 = v65[1];
          if ((unint64_t)(v66 - 4048) > 0xFFFFFFFFFFFFF00FLL)
            goto LABEL_118;
          v67 = malloc(0x1000uLL);
          if (!v67)
            goto LABEL_265;
          v66 = 0;
          *v67 = v65;
          v67[1] = 0;
          v65 = v67;
          *(_QWORD *)(a1 + 4904) = v67;
LABEL_118:
          v65[1] = v66 + 32;
          *(_QWORD *)((char *)v65 + v66 + 16) = &unk_1E0E20D30;
          v68 = (uint64_t)v65 + v66 + 16;
          *(_BYTE *)(v68 + 8) = 65;
          *(_WORD *)(v68 + 9) = *(_WORD *)((_BYTE *)v65 + v66 + 25) & 0xF000 | (v64 >> 1) | 0x540;
          *(_QWORD *)(v68 + 16) = v63;
          *(_BYTE *)(v68 + 24) = v8;
          *(_BYTE *)(v68 + 25) = v64 & 1;
          return;
        case 7:
          if (!(_QWORD)v152)
            return;
          v69 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
          v70 = (char *)(a1 + 40);
          while (2)
          {
            v73 = *(unsigned __int16 **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *(_BYTE *)v73 == 69)
            {
              *(_QWORD *)a1 = (char *)v73 + 1;
              v155.n128_u64[1] = v116;
              return;
            }
            if (!v74)
              return;
            v75 = v74;
            v72 = *(char **)(a1 + 24);
            if (v72 != *(char **)(a1 + 32))
              goto LABEL_123;
            v76 = *(char **)(a1 + 16);
            v77 = v72 - v76;
            if (v76 == v70)
            {
              v78 = (char *)malloc(2 * (v72 - v76));
              if (v78)
              {
                v71 = v78;
                if (v72 != v70)
                  memcpy(v78, (const void *)(a1 + 40), v77);
                *(_QWORD *)(a1 + 16) = v71;
                goto LABEL_122;
              }
            }
            else
            {
              v71 = (char *)realloc(v76, 2 * (v72 - v76));
              *(_QWORD *)(a1 + 16) = v71;
              if (v71)
              {
LABEL_122:
                v72 = &v71[8 * (v77 >> 3)];
                *(_QWORD *)(a1 + 32) = &v71[8 * (v77 >> 2)];
LABEL_123:
                *(_QWORD *)(a1 + 24) = v72 + 8;
                *(_QWORD *)v72 = v75;
                continue;
              }
            }
            goto LABEL_264;
          }
        case 8:
          v79 = *(_BYTE *)(a1 + 776);
          *(_BYTE *)(a1 + 776) = 0;
          *(_QWORD *)&v152 = v80;
          *(_BYTE *)(a1 + 776) = v79;
          if (!v80)
            return;
          v81 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
          v82 = *(unsigned __int16 **)a1;
          v83 = *(unsigned __int16 **)(a1 + 8);
          if (*(unsigned __int16 **)a1 == v83)
            goto LABEL_206;
          v84 = *(unsigned __int8 *)v82;
          if (v84 == 95)
          {
            v82 = (unsigned __int16 *)((char *)v82 + 1);
            *(_QWORD *)a1 = v82;
            v85 = (char *)(a1 + 40);
            while (v82 == v83 || *(_BYTE *)v82 != 69)
            {
              if (!v88)
                return;
              v89 = v88;
              v87 = *(char **)(a1 + 24);
              if (v87 == *(char **)(a1 + 32))
              {
                v90 = *(char **)(a1 + 16);
                v91 = v87 - v90;
                if (v90 == v85)
                {
                  v92 = (char *)malloc(2 * (v87 - v90));
                  if (!v92)
                    goto LABEL_264;
                  v86 = v92;
                  if (v87 != v85)
                    memcpy(v92, (const void *)(a1 + 40), v91);
                  *(_QWORD *)(a1 + 16) = v86;
                }
                else
                {
                  v86 = (char *)realloc(v90, 2 * (v87 - v90));
                  *(_QWORD *)(a1 + 16) = v86;
                  if (!v86)
                    goto LABEL_264;
                }
                v87 = &v86[8 * (v91 >> 3)];
                *(_QWORD *)(a1 + 32) = &v86[8 * (v91 >> 2)];
              }
              *(_QWORD *)(a1 + 24) = v87 + 8;
              *(_QWORD *)v87 = v89;
              v82 = *(unsigned __int16 **)a1;
              v83 = *(unsigned __int16 **)(a1 + 8);
            }
LABEL_204:
            *(_QWORD *)a1 = (char *)v82 + 1;
            v155.n128_u64[1] = v119;
            if (v84 == 95)
              goto LABEL_225;
            goto LABEL_224;
          }
          if (v84 == 69)
            goto LABEL_204;
LABEL_206:
          if (!v120)
            return;
          v121 = v120;
          v122 = *(char **)(a1 + 24);
          if (v122 != *(char **)(a1 + 32))
            goto LABEL_223;
          v123 = *(_BYTE **)(a1 + 16);
          v124 = v122 - v123;
          if (v123 == (_BYTE *)(a1 + 40))
          {
            v128 = (char *)malloc(2 * (v122 - v123));
            if (!v128)
              goto LABEL_264;
            v125 = v128;
            if (v122 != (char *)(a1 + 40))
              memcpy(v128, (const void *)(a1 + 40), v124);
            *(_QWORD *)(a1 + 16) = v125;
          }
          else
          {
            v125 = (char *)realloc(v123, 2 * (v122 - v123));
            *(_QWORD *)(a1 + 16) = v125;
            if (!v125)
LABEL_264:
              abort();
          }
          v122 = &v125[8 * (v124 >> 3)];
          *(_QWORD *)(a1 + 32) = &v125[8 * (v124 >> 2)];
LABEL_223:
          *(_QWORD *)(a1 + 24) = v122 + 8;
          *(_QWORD *)v122 = v121;
          v155.n128_u64[1] = v119;
LABEL_224:
          if (v119 != 1)
            return;
LABEL_225:
          return;
        case 9:
          if (v155.n128_u64[0])
          {
            if ((_QWORD)v152)
            {
              if (v154)
            }
          }
          return;
        case 10:
          return;
        default:
          v20 = v18;
          continue;
      }
    }
  }
  switch(v11)
  {
    case 'f':
      v23 = *v10;
      if (v23 != 112)
      {
        if (v23 != 76)
          goto LABEL_71;
        if (v4 < 3)
        {
          v24 = 0;
        }
        else
        {
          if ((char)v2[1] < 0)
            goto LABEL_71;
          v24 = *((unsigned __int8 *)v2 + 2);
        }
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) == 0)
        {
LABEL_71:
          if (v2 != v3)
          {
            *(_QWORD *)a1 = v10;
            if (v3 != (unsigned __int16 *)v10)
            {
              v42 = (char)*v10 - 76;
              if (v42 <= 0x26 && ((0x4100000041uLL >> v42) & 1) != 0)
              {
                *(_QWORD *)a1 = v2 + 1;
                if ((unint64_t)((char *)v3 - (char *)(v2 + 1)) >= 2)
                {
                  v43 = 0;
                  v44 = (0x3FFFFFFFBFuLL >> v42) & 1;
                  v45 = 0x3EFFFFFFFFuLL >> v42;
                  v46 = *((unsigned __int8 *)v2 + 2);
                  v47 = 61;
                  do
                  {
                    v48 = (v43 + v47) >> 1;
                        + 16 * v48;
                    if (*v49 < (char)v46)
                    {
                      v43 = v48 + 1;
                    }
                    else if (*v49 == v46)
                    {
                      if (v49[1] >= *((char *)v2 + 3))
                        v47 = (v43 + v47) >> 1;
                      else
                        v43 = v48 + 1;
                    }
                    else
                    {
                      v47 = (v43 + v47) >> 1;
                    }
                  }
                  while (v47 != v43);
                       + 16 * v43;
                  if (*v111 == v46 && v111[1] == *((unsigned __int8 *)v2 + 3))
                  {
                    *(_QWORD *)a1 = v2 + 2;
                    v112 = v111[2];
                    if (v112 == 2
                      || v112 == 4 && *(_BYTE *)(strlen(*((const char **)v111 + 1)) + *((_QWORD *)v111 + 1) - 1) == 42)
                    {
                      if (v113)
                      {
                        v114 = v113;
                        if ((v45 & 1) != 0)
                        {
                          if (!v137)
                            return;
                          if (v44)
                            v115 = v114;
                          else
                            v115 = v137;
                          if (v44)
                            v114 = v137;
                        }
                        else
                        {
                          v115 = 0;
                        }
                        v138 = (const char *)*((_QWORD *)v111 + 1);
                        v139 = strlen(v138);
                        v140 = v138 + 8;
                        if (v139 == 8)
                        {
                          v143 = 0;
                        }
                        else
                        {
                          v141 = *(unsigned __int8 *)v140;
                          v142 = v138 + 9;
                          if (v141 == 32)
                            v143 = v139 - 9;
                          else
                            v143 = v139 - 8;
                          if (v141 == 32)
                            v140 = v142;
                        }
                        v144 = *(_QWORD **)(a1 + 4904);
                        v145 = v144[1];
                        if ((unint64_t)(v145 - 4016) <= 0xFFFFFFFFFFFFF00FLL)
                        {
                          v146 = malloc(0x1000uLL);
                          if (!v146)
LABEL_265:
                            std::terminate();
                          v145 = 0;
                          *v146 = v144;
                          v146[1] = 0;
                          v144 = v146;
                          *(_QWORD *)(a1 + 4904) = v146;
                        }
                        v144[1] = v145 + 64;
                        *(_QWORD *)((char *)v144 + v145 + 16) = &unk_1E0E22750;
                        v147 = (uint64_t)v144 + v145 + 16;
                        *(_BYTE *)(v147 + 8) = 71;
                        *(_WORD *)(v147 + 9) = *(_WORD *)((_BYTE *)v144 + v145 + 25) & 0xF000 | 0x540;
                        *(_QWORD *)(v147 + 16) = v114;
                        *(_QWORD *)(v147 + 24) = v115;
                        *(_QWORD *)(v147 + 32) = v140;
                        *(_QWORD *)(v147 + 40) = v143;
                        *(_BYTE *)(v147 + 48) = v44;
                      }
                    }
                  }
                }
              }
            }
          }
          return;
        }
      }
      return;
    case 'T':
      return;
    case 'L':
      return;
  }
  if (*v2 == 27753)
  {
    v25 = v2 + 1;
    *(_QWORD *)a1 = v2 + 1;
    v26 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
    v27 = (char *)(a1 + 40);
    while (v25 == v3 || *(_BYTE *)v25 != 69)
    {
      if (!v30)
        return;
      v31 = v30;
      v29 = *(char **)(a1 + 24);
      if (v29 == *(char **)(a1 + 32))
      {
        v32 = *(char **)(a1 + 16);
        v33 = v29 - v32;
        if (v32 == v27)
        {
          v34 = (char *)malloc(2 * (v29 - v32));
          if (!v34)
            goto LABEL_264;
          v28 = v34;
          if (v29 != v27)
            memcpy(v34, (const void *)(a1 + 40), v33);
          *(_QWORD *)(a1 + 16) = v28;
        }
        else
        {
          v28 = (char *)realloc(v32, 2 * (v29 - v32));
          *(_QWORD *)(a1 + 16) = v28;
          if (!v28)
            goto LABEL_264;
        }
        v29 = &v28[8 * (v33 >> 3)];
        *(_QWORD *)(a1 + 32) = &v28[8 * (v33 >> 2)];
      }
      *(_QWORD *)(a1 + 24) = v29 + 8;
      *(_QWORD *)v29 = v31;
      v25 = *(unsigned __int16 **)a1;
      v3 = *(unsigned __int16 **)(a1 + 8);
    }
    *(_QWORD *)a1 = (char *)v25 + 1;
    v155.n128_u64[1] = v50;
    return;
  }
  if ((unint64_t)((char *)v3 - (char *)v2) >= 2)
  {
    if (*v2 == 25453)
    {
      *(_QWORD *)a1 = v2 + 1;
      return;
    }
    if (*v2 == 30830)
    {
      *(_QWORD *)a1 = v2 + 1;
      if (v155.n128_u64[0])
      return;
    }
  }
  if (v3 != v2 && (unint64_t)((char *)v3 - (char *)v2) >= 2 && v11 == 114 && (*v10 | 0x20) == 0x71)
  {
    return;
  }
  {
    return;
  }
  {
    if (v155.n128_u64[0])
    return;
  }
  {
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1 && **(_BYTE **)a1 == 84)
    {
      if (v155.n128_u64[0])
      return;
    }
    v155.n128_u64[0] = v110;
    if (!v110)
      return;
LABEL_214:
    return;
  }
  {
    v94 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
    v95 = *(unsigned __int16 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      goto LABEL_165;
LABEL_164:
    if (*(_BYTE *)v95 == 69)
    {
      *(_QWORD *)a1 = (char *)v95 + 1;
      v155.n128_u64[1] = v126;
      v155.n128_u64[0] = v127;
      goto LABEL_214;
    }
LABEL_165:
    while (1)
    {
      v155.n128_u64[0] = 0;
      v155.n128_u64[0] = v96;
      if (!v96)
        return;
      llvm::itanium_demangle::PODSmallVector<llvm::itanium_demangle::Node *,32ul>::push_back((_QWORD *)(a1 + 16), (uint64_t *)&v155);
      v95 = *(unsigned __int16 **)a1;
      if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
        goto LABEL_164;
    }
  }
  {
    if (v153.n128_u64[0])
    {
      v117 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
      v118 = *(unsigned __int16 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
        goto LABEL_200;
LABEL_199:
      if (*(_BYTE *)v118 == 69)
      {
        *(_QWORD *)a1 = (char *)v118 + 1;
        v155.n128_u64[1] = v136;
      }
      else
      {
LABEL_200:
        while (1)
        {
          v155.n128_u64[0] = 0;
          if (!v155.n128_u64[0])
            break;
          llvm::itanium_demangle::PODSmallVector<llvm::itanium_demangle::Node *,32ul>::push_back((_QWORD *)(a1 + 16), (uint64_t *)&v155);
          v118 = *(unsigned __int16 **)a1;
          if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
            goto LABEL_199;
        }
      }
    }
    return;
  }
  {
    return;
  }
  {
    if (v155.n128_u64[0])
    return;
  }
  v129 = *(unsigned __int16 **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8) || *(_BYTE *)v129 != 117)
  {
    return;
  }
  *(_QWORD *)a1 = (char *)v129 + 1;
  v153.n128_u64[0] = v130;
  if (v130)
  {
    *(_QWORD *)&v152 = 0;
    v131 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 48))(v130);
    if (v132 == 8 && *v131 == 0x666F646975755F5FLL)
    {
      v149 = *(unsigned __int16 **)a1;
      if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
      {
        v150 = *(unsigned __int8 *)v149;
        if (v150 == 122)
        {
          *(_QWORD *)a1 = (char *)v149 + 1;
          goto LABEL_262;
        }
        if (v150 == 116)
        {
          *(_QWORD *)a1 = (char *)v149 + 1;
LABEL_262:
          *(_QWORD *)&v152 = v151;
          if (!v151)
            return;
          v133 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
          llvm::itanium_demangle::PODSmallVector<llvm::itanium_demangle::Node *,32ul>::push_back((_QWORD *)(a1 + 16), (uint64_t *)&v152);
          goto LABEL_256;
        }
      }
    }
    v133 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
    v134 = *(unsigned __int16 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      goto LABEL_233;
LABEL_232:
    if (*(_BYTE *)v134 != 69)
    {
LABEL_233:
      while (1)
      {
        v155.n128_u64[0] = 0;
        v155.n128_u64[0] = v135;
        if (!v135)
          return;
        llvm::itanium_demangle::PODSmallVector<llvm::itanium_demangle::Node *,32ul>::push_back((_QWORD *)(a1 + 16), (uint64_t *)&v155);
        v134 = *(unsigned __int16 **)a1;
        if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
          goto LABEL_232;
      }
    }
    *(_QWORD *)a1 = (char *)v134 + 1;
LABEL_256:
    v155.n128_u64[1] = v148;
  }
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::PostfixExpr,llvm::itanium_demangle::Node *&,std::string_view &,llvm::itanium_demangle::Node::Prec>(uint64_t a1, uint64_t *a2, __n128 *a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  __n128 result;

  v7 = *(_QWORD **)(a1 + 4904);
  v8 = v7[1];
  if ((unint64_t)(v8 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v10 = malloc(0x1000uLL);
    if (!v10)
      std::terminate();
    v8 = 0;
    *v10 = v7;
    v10[1] = 0;
    v7 = v10;
    *(_QWORD *)(a1 + 4904) = v10;
  }
  v7[1] = v8 + 48;
  v11 = (char *)v7 + v8;
  v12 = *a2;
  *((_QWORD *)v11 + 2) = &unk_1E0E21048;
  v11 += 16;
  v11[8] = 56;
  result = *a3;
  *(_WORD *)(v11 + 9) = *(_WORD *)(v11 + 9) & 0xF000 | a4 & 0x3F | 0x540;
  *((_QWORD *)v11 + 2) = v12;
  *(__n128 *)(v11 + 24) = result;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::ArraySubscriptExpr,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node::Prec>(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *result;
  uint64_t v14;

  v7 = *(_QWORD **)(a1 + 4904);
  v8 = v7[1];
  if ((unint64_t)(v8 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v10 = malloc(0x1000uLL);
    if (!v10)
      std::terminate();
    v8 = 0;
    *v10 = v7;
    v10[1] = 0;
    v7 = v10;
    *(_QWORD *)(a1 + 4904) = v10;
  }
  v7[1] = v8 + 32;
  v11 = (char *)v7 + v8;
  v12 = *a2;
  *((_QWORD *)v11 + 2) = &unk_1E0E21D00;
  result = v11 + 16;
  v14 = *a3;
  result[8] = 55;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | a4 & 0x3F | 0x540;
  *((_QWORD *)result + 2) = v12;
  *((_QWORD *)result + 3) = v14;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::MemberExpr,llvm::itanium_demangle::Node *&,std::string_view &,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node::Prec>(uint64_t a1, uint64_t *a2, __n128 *a3, uint64_t *a4, char a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;

  v9 = *(_QWORD **)(a1 + 4904);
  v10 = v9[1];
  if ((unint64_t)(v10 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v12 = malloc(0x1000uLL);
    if (!v12)
      std::terminate();
    v10 = 0;
    *v12 = v9;
    v12[1] = 0;
    v9 = v12;
    *(_QWORD *)(a1 + 4904) = v12;
  }
  v9[1] = v10 + 48;
  v13 = (char *)v9 + v10;
  v14 = *a2;
  v15 = *a4;
  *((_QWORD *)v13 + 2) = &unk_1E0E20DE0;
  v13 += 16;
  v13[8] = 58;
  result = *a3;
  *(_WORD *)(v13 + 9) = *(_WORD *)(v13 + 9) & 0xF000 | a5 & 0x3F | 0x540;
  *((_QWORD *)v13 + 2) = v14;
  *(__n128 *)(v13 + 24) = result;
  *((_QWORD *)v13 + 5) = v15;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::NewExpr,llvm::itanium_demangle::NodeArray &,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::NodeArray &,BOOL &,BOOL,llvm::itanium_demangle::Node::Prec>(uint64_t a1, __n128 *a2, uint64_t *a3, __int128 *a4, char a5, char a6, char a7)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;

  v13 = *(_QWORD **)(a1 + 4904);
  v14 = v13[1];
  if ((unint64_t)(v14 - 4016) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v16 = malloc(0x1000uLL);
    if (!v16)
      std::terminate();
    v14 = 0;
    *v16 = v13;
    v16[1] = 0;
    v13 = v16;
    *(_QWORD *)(a1 + 4904) = v16;
  }
  v13[1] = v14 + 64;
  v17 = (char *)v13 + v14;
  v18 = *a3;
  *((_QWORD *)v17 + 2) = &unk_1E0E22598;
  v17 += 16;
  v17[8] = 64;
  result = *a2;
  v20 = *a4;
  *(_WORD *)(v17 + 9) = *(_WORD *)(v17 + 9) & 0xF000 | a7 & 0x3F | 0x540;
  *((__n128 *)v17 + 1) = result;
  *((_QWORD *)v17 + 4) = v18;
  *(_OWORD *)(v17 + 40) = v20;
  v17[56] = a5 != 0;
  v17[57] = a6 != 0;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::CallExpr,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::NodeArray,llvm::itanium_demangle::Node::Prec>(uint64_t a1, uint64_t *a2, __n128 *a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  __n128 result;

  v7 = *(_QWORD **)(a1 + 4904);
  v8 = v7[1];
  if ((unint64_t)(v8 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v10 = malloc(0x1000uLL);
    if (!v10)
      std::terminate();
    v8 = 0;
    *v10 = v7;
    v10[1] = 0;
    v7 = v10;
    *(_QWORD *)(a1 + 4904) = v10;
  }
  v7[1] = v8 + 48;
  v11 = (char *)v7 + v8;
  v12 = *a2;
  *((_QWORD *)v11 + 2) = &unk_1E0E22648;
  v11 += 16;
  v11[8] = 63;
  result = *a3;
  *(_WORD *)(v11 + 9) = *(_WORD *)(v11 + 9) & 0xF000 | a4 & 0x3F | 0x540;
  *((_QWORD *)v11 + 2) = v12;
  *(__n128 *)(v11 + 24) = result;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::ConversionExpr,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::NodeArray &,llvm::itanium_demangle::Node::Prec>(uint64_t a1, uint64_t *a2, __n128 *a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  __n128 result;

  v7 = *(_QWORD **)(a1 + 4904);
  v8 = v7[1];
  if ((unint64_t)(v8 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v10 = malloc(0x1000uLL);
    if (!v10)
      std::terminate();
    v8 = 0;
    *v10 = v7;
    v10[1] = 0;
    v7 = v10;
    *(_QWORD *)(a1 + 4904) = v10;
  }
  v7[1] = v8 + 48;
  v11 = (char *)v7 + v8;
  v12 = *a2;
  *((_QWORD *)v11 + 2) = &unk_1E0E21728;
  v11 += 16;
  v11[8] = 68;
  result = *a3;
  *(_WORD *)(v11 + 9) = *(_WORD *)(v11 + 9) & 0xF000 | a4 & 0x3F | 0x540;
  *((_QWORD *)v11 + 2) = v12;
  *(__n128 *)(v11 + 24) = result;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::ConditionalExpr,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node::Prec>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, char a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *result;

  v9 = *(_QWORD **)(a1 + 4904);
  v10 = v9[1];
  if ((unint64_t)(v10 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v12 = malloc(0x1000uLL);
    if (!v12)
      std::terminate();
    v10 = 0;
    *v12 = v9;
    v12[1] = 0;
    v9 = v12;
    *(_QWORD *)(a1 + 4904) = v12;
  }
  v9[1] = v10 + 48;
  v13 = (char *)v9 + v10;
  v14 = *a2;
  v15 = *a3;
  v16 = *a4;
  *((_QWORD *)v13 + 2) = &unk_1E0E21888;
  result = v13 + 16;
  result[8] = 57;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | a5 & 0x3F | 0x540;
  *((_QWORD *)result + 2) = v14;
  *((_QWORD *)result + 3) = v15;
  *((_QWORD *)result + 4) = v16;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::CastExpr,std::string_view &,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node::Prec>(uint64_t a1, __n128 *a2, uint64_t *a3, uint64_t *a4, char a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;

  v9 = *(_QWORD **)(a1 + 4904);
  v10 = v9[1];
  if ((unint64_t)(v10 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v12 = malloc(0x1000uLL);
    if (!v12)
      std::terminate();
    v10 = 0;
    *v12 = v9;
    v12[1] = 0;
    v9 = v12;
    *(_QWORD *)(a1 + 4904) = v12;
  }
  v9[1] = v10 + 48;
  v13 = (char *)v9 + v10;
  v14 = *a3;
  v15 = *a4;
  *((_QWORD *)v13 + 2) = &unk_1E0E226A0;
  v13 += 16;
  v13[8] = 61;
  result = *a2;
  *(_WORD *)(v13 + 9) = *(_WORD *)(v13 + 9) & 0xF000 | a5 & 0x3F | 0x540;
  *((__n128 *)v13 + 1) = result;
  *((_QWORD *)v13 + 4) = v14;
  *((_QWORD *)v13 + 5) = v15;
  return result;
}

void llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseExprPrimary(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _WORD *v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  __n128 v30;
  uint64_t v31;

  v1 = *(_BYTE **)a1;
  v2 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)a1 != v2 && *v1 == 76)
  {
    v4 = v1 + 1;
    *(_QWORD *)a1 = v1 + 1;
    v5 = v2 - (v1 + 1);
    if (v2 == v1 + 1)
    {
LABEL_10:
      if (v31)
      {
        v8 = *(_BYTE **)a1;
        v7 = *(_BYTE **)(a1 + 8);
        if (*(_BYTE **)a1 != v7)
        {
          v9 = *(_BYTE **)a1;
          if (*v8 == 110)
          {
            v9 = v8 + 1;
            *(_QWORD *)a1 = v8 + 1;
          }
          if (v7 != v9 && ((char)*v9 & 0x80000000) == 0)
          {
            v10 = MEMORY[0x1E0C80978];
            if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v9 + 60) & 0x400) != 0)
            {
              while (((char)*v9 & 0x80000000) == 0 && (*(_DWORD *)(v10 + 4 * *v9 + 60) & 0x400) != 0)
              {
                *(_QWORD *)a1 = ++v9;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
              v30.n128_u64[0] = (unint64_t)v8;
              v30.n128_u64[1] = v9 - v8;
              if (v9 != v8 && v9 != v7 && *v9 == 69)
              {
                *(_QWORD *)a1 = v9 + 1;
              }
            }
          }
        }
      }
    }
    else
    {
      switch(*(_BYTE *)v4)
      {
        case 'A':
          if (v30.n128_u64[0])
          {
            v6 = *(_BYTE **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v6 == 69)
            {
              *(_QWORD *)a1 = v6 + 1;
            }
          }
          return;
        case 'D':
          if (v5 >= 2 && *v4 == 28228)
          {
            v15 = v1 + 3;
            *(_QWORD *)a1 = v1 + 3;
            if (v1 + 3 != v2)
            {
              if (*v15 == 48)
              {
                v15 = v1 + 4;
                *(_QWORD *)a1 = v1 + 4;
              }
              if (v15 != v2 && *v15 == 69)
              {
                *(_QWORD *)a1 = v15 + 1;
              }
            }
          }
          return;
        case 'T':
          return;
        case 'U':
          if (v5 >= 2 && v1[2] == 108)
          {
            if (v30.n128_u64[0])
            {
              v17 = *(_BYTE **)a1;
              if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v17 == 69)
              {
                *(_QWORD *)a1 = v17 + 1;
              }
            }
          }
          return;
        case '_':
          if (v5 >= 2 && *v4 == 23135)
          {
            *(_QWORD *)a1 = v1 + 3;
            {
              v16 = *(_BYTE **)a1;
              if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v16 == 69)
                *(_QWORD *)a1 = v16 + 1;
            }
          }
          return;
        case 'a':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'b':
          if (v5 >= 3 && (*v4 == 12386 ? (v18 = v1[3] == 69) : (v18 = 0), v18))
          {
            *(_QWORD *)a1 = v1 + 4;
          }
          {
          }
          return;
        case 'c':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'd':
          *(_QWORD *)a1 = v1 + 2;
          if ((unint64_t)(v2 - (v1 + 2)) < 0x11)
            return;
          if ((char)v1[2] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[2] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[3] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[3] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[4] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[4] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[5] < 0)
            return;
          v29 = v1 + 2;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[5] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[6] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[6] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[7] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[7] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[8] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[8] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[9] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[9] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[10] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[10] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[11] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[11] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[12] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[12] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[13] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[13] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[14] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[14] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[15] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[15] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[16] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[16] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[17] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[17] + 60) & 0x10000) == 0)
            return;
          *(_QWORD *)a1 = v1 + 18;
          if (v1 + 18 == v2 || v1[18] != 69)
            return;
          *(_QWORD *)a1 = v1 + 19;
          v23 = *(_QWORD **)(a1 + 4904);
          v24 = v23[1];
          if ((unint64_t)(v24 - 4048) > 0xFFFFFFFFFFFFF00FLL)
            goto LABEL_196;
          v25 = malloc(0x1000uLL);
          if (!v25)
            goto LABEL_202;
          v24 = 0;
          *v25 = v23;
          v25[1] = 0;
          v23 = v25;
          *(_QWORD *)(a1 + 4904) = v25;
LABEL_196:
          v23[1] = v24 + 32;
          *(_QWORD *)((char *)v23 + v24 + 16) = &unk_1E0E21AF0;
          v26 = (uint64_t)v23 + v24 + 16;
          *(_BYTE *)(v26 + 8) = 79;
          *(_WORD *)(v26 + 9) = *(_WORD *)((_BYTE *)v23 + v24 + 25) & 0xF000 | 0x540;
          *(_QWORD *)(v26 + 16) = v29;
          *(_QWORD *)(v26 + 24) = 16;
          break;
        case 'e':
          *(_QWORD *)a1 = v1 + 2;
          if ((unint64_t)(v2 - (v1 + 2)) < 0x21)
            return;
          if ((char)v1[2] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[2] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[3] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[3] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[4] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[4] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[5] < 0)
            return;
          v28 = v1 + 2;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[5] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[6] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[6] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[7] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[7] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[8] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[8] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[9] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[9] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[10] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[10] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[11] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[11] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[12] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[12] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[13] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[13] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[14] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[14] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[15] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[15] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[16] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[16] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[17] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[17] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[18] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[18] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[19] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[19] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[20] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[20] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[21] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[21] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[22] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[22] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[23] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[23] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[24] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[24] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[25] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[25] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[26] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[26] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[27] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[27] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[28] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[28] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[29] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[29] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[30] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[30] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[31] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[31] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[32] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[32] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[33] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[33] + 60) & 0x10000) == 0)
            return;
          *(_QWORD *)a1 = v1 + 34;
          if (v1 + 34 == v2 || v1[34] != 69)
            return;
          *(_QWORD *)a1 = v1 + 35;
          v19 = *(_QWORD **)(a1 + 4904);
          v20 = v19[1];
          if ((unint64_t)(v20 - 4048) > 0xFFFFFFFFFFFFF00FLL)
            goto LABEL_157;
          v21 = malloc(0x1000uLL);
          if (!v21)
            goto LABEL_202;
          v20 = 0;
          *v21 = v19;
          v21[1] = 0;
          v19 = v21;
          *(_QWORD *)(a1 + 4904) = v21;
LABEL_157:
          v19[1] = v20 + 32;
          *(_QWORD *)((char *)v19 + v20 + 16) = &unk_1E0E21B48;
          v22 = (uint64_t)v19 + v20 + 16;
          *(_BYTE *)(v22 + 8) = 80;
          *(_WORD *)(v22 + 9) = *(_WORD *)((_BYTE *)v19 + v20 + 25) & 0xF000 | 0x540;
          *(_QWORD *)(v22 + 16) = v28;
          *(_QWORD *)(v22 + 24) = 32;
          break;
        case 'f':
          *(_QWORD *)a1 = v1 + 2;
          if ((unint64_t)(v2 - (v1 + 2)) < 9)
            return;
          if ((char)v1[2] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[2] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[3] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[3] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[4] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[4] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[5] < 0)
            return;
          v27 = v1 + 2;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[5] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[6] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[6] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[7] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[7] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[8] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[8] + 60) & 0x10000) == 0)
            return;
          if ((char)v1[9] < 0)
            return;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1[9] + 60) & 0x10000) == 0)
            return;
          *(_QWORD *)a1 = v1 + 10;
          if (v1 + 10 == v2 || v1[10] != 69)
            return;
          *(_QWORD *)a1 = v1 + 11;
          v11 = *(_QWORD **)(a1 + 4904);
          v12 = v11[1];
          if ((unint64_t)(v12 - 4048) > 0xFFFFFFFFFFFFF00FLL)
            goto LABEL_51;
          v13 = malloc(0x1000uLL);
          if (!v13)
LABEL_202:
            std::terminate();
          v12 = 0;
          *v13 = v11;
          v13[1] = 0;
          v11 = v13;
          *(_QWORD *)(a1 + 4904) = v13;
LABEL_51:
          v11[1] = v12 + 32;
          *(_QWORD *)((char *)v11 + v12 + 16) = &unk_1E0E21BA0;
          v14 = (uint64_t)v11 + v12 + 16;
          *(_BYTE *)(v14 + 8) = 78;
          *(_WORD *)(v14 + 9) = *(_WORD *)((_BYTE *)v11 + v12 + 25) & 0xF000 | 0x540;
          *(_QWORD *)(v14 + 16) = v27;
          *(_QWORD *)(v14 + 24) = 8;
          break;
        case 'h':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'i':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'j':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'l':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'm':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'n':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'o':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 's':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 't':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'w':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'x':
          *(_QWORD *)a1 = v1 + 2;
          return;
        case 'y':
          *(_QWORD *)a1 = v1 + 2;
          return;
        default:
          goto LABEL_10;
      }
    }
  }
}

void llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseFunctionParam(uint64_t *a1)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  __n128 v26;

  v3 = *a1;
  v2 = (char *)a1[1];
  v4 = (unint64_t)&v2[-*a1];
  if (v4 >= 3)
  {
    if (*(_WORD *)v3 == 28774 && *(_BYTE *)(v3 + 2) == 84)
    {
      *a1 = v3 + 3;
      v16 = (_QWORD *)a1[613];
      v17 = v16[1];
      if ((unint64_t)(v17 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v18 = malloc(0x1000uLL);
        if (!v18)
          goto LABEL_73;
        v17 = 0;
        *v18 = v16;
        v18[1] = 0;
        v16 = v18;
        a1[613] = (uint64_t)v18;
      }
      v16[1] = v17 + 32;
      *(_QWORD *)((char *)v16 + v17 + 16) = &unk_1E0E227A8;
      v19 = (uint64_t)v16 + v17 + 16;
      *(_BYTE *)(v19 + 8) = 8;
      *(_WORD *)(v19 + 9) = *(_WORD *)((_BYTE *)v16 + v17 + 25) & 0xF000 | 0x540;
      *(_QWORD *)(v19 + 16) = "this";
      *(_QWORD *)(v19 + 24) = 4;
      return;
    }
  }
  else if (v4 != 2)
  {
    return;
  }
  if (*(_WORD *)v3 != 28774)
  {
    if (*(_WORD *)v3 == 19558)
    {
      v6 = (unsigned __int8 *)(v3 + 2);
      *a1 = (uint64_t)v6;
      if (v2 != (char *)v6 && ((char)*v6 & 0x80000000) == 0)
      {
        v7 = MEMORY[0x1E0C80978];
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v6 + 60) & 0x400) != 0)
        {
          v8 = v6;
          while (((char)*v8 & 0x80000000) == 0 && (*(_DWORD *)(v7 + 4 * *v8 + 60) & 0x400) != 0)
          {
            *a1 = (uint64_t)++v8;
            if (v8 == (unsigned __int8 *)v2)
            {
              v8 = (unsigned __int8 *)v2;
              break;
            }
          }
          if (v8 != v6 && v8 != (unsigned __int8 *)v2 && *v8 == 112)
          {
            v9 = (char *)(v8 + 1);
            *a1 = (uint64_t)(v8 + 1);
            if (v8 + 1 != (unsigned __int8 *)v2)
            {
              if (*v9 == 114)
              {
                v9 = (char *)(v8 + 2);
                *a1 = (uint64_t)(v8 + 2);
              }
              if (v9 != v2)
              {
                if (*v9 == 86)
                  *a1 = (uint64_t)++v9;
                if (v9 != v2)
                {
                  if (*v9 == 75)
                    *a1 = (uint64_t)++v9;
                  if (v2 != v9)
                  {
                    if ((*v9 & 0x80000000) == 0 && (*(_DWORD *)(v7 + 4 * *v9 + 60) & 0x400) != 0)
                    {
                      v25 = v9;
                      while ((*v25 & 0x80000000) == 0
                           && (*(_DWORD *)(v7 + 4 * *v25 + 60) & 0x400) != 0)
                      {
                        *a1 = (uint64_t)++v25;
                        if (v25 == v2)
                        {
                          v25 = v2;
                          break;
                        }
                      }
                      v10 = (unint64_t)v9;
                      v11 = v25 - v9;
                      v9 = v25;
                    }
                    else
                    {
                      v10 = 0;
                      v11 = 0;
                    }
                    v26.n128_u64[0] = v10;
                    v26.n128_u64[1] = v11;
                    if (v9 != v2 && *v9 == 95)
                    {
                      *a1 = (uint64_t)(v9 + 1);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return;
  }
  v12 = (char *)(v3 + 2);
  *a1 = v3 + 2;
  if ((char *)(v3 + 2) != v2)
  {
    if (*v12 == 114)
    {
      v12 = (char *)(v3 + 3);
      *a1 = v3 + 3;
    }
    if (v12 != v2)
    {
      if (*v12 == 86)
        *a1 = (uint64_t)++v12;
      if (v12 != v2)
      {
        if (*v12 == 75)
          *a1 = (uint64_t)++v12;
        if (v2 != v12)
        {
          if ((*v12 & 0x80000000) == 0
            && (v13 = MEMORY[0x1E0C80978],
                (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v12 + 60) & 0x400) != 0))
          {
            v20 = v12;
            while ((*v20 & 0x80000000) == 0 && (*(_DWORD *)(v13 + 4 * *v20 + 60) & 0x400) != 0)
            {
              *a1 = (uint64_t)++v20;
              if (v20 == v2)
              {
                v20 = v2;
                break;
              }
            }
            v14 = v12;
            v15 = v20 - v12;
            v12 = v20;
          }
          else
          {
            v14 = 0;
            v15 = 0;
          }
          if (v12 != v2 && *v12 == 95)
          {
            *a1 = (uint64_t)(v12 + 1);
            v21 = (_QWORD *)a1[613];
            v22 = v21[1];
            if ((unint64_t)(v22 - 4048) > 0xFFFFFFFFFFFFF00FLL)
            {
LABEL_62:
              v21[1] = v22 + 32;
              *(_QWORD *)((char *)v21 + v22 + 16) = &unk_1E0E21468;
              v24 = (uint64_t)v21 + v22 + 16;
              *(_BYTE *)(v24 + 8) = 67;
              *(_WORD *)(v24 + 9) = *(_WORD *)((_BYTE *)v21 + v22 + 25) & 0xF000 | 0x540;
              *(_QWORD *)(v24 + 16) = v14;
              *(_QWORD *)(v24 + 24) = v15;
              return;
            }
            v23 = malloc(0x1000uLL);
            if (v23)
            {
              v22 = 0;
              *v23 = v21;
              v23[1] = 0;
              v21 = v23;
              a1[613] = (uint64_t)v23;
              goto LABEL_62;
            }
LABEL_73:
            std::terminate();
          }
        }
      }
    }
  }
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseBracedExpr(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = *(unsigned __int8 **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 < 2uLL || *v2 != 100)
  v3 = (char)v2[1];
  if (v3 == 88)
  {
    *(_QWORD *)a1 = v2 + 2;
    if (result)
    {
      v10 = result;
      if (result)
      {
        v11 = result;
        if (result)
        {
          v12 = result;
          v13 = *(_QWORD **)(a1 + 4904);
          v14 = v13[1];
          if ((unint64_t)(v14 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
          {
            v15 = malloc(0x1000uLL);
            if (!v15)
              goto LABEL_27;
            v14 = 0;
            *v15 = v13;
            v15[1] = 0;
            v13 = v15;
            *(_QWORD *)(a1 + 4904) = v15;
          }
          v13[1] = v14 + 48;
          *(_QWORD *)((char *)v13 + v14 + 16) = &unk_1E0E217D8;
          result = (uint64_t)v13 + v14 + 16;
          *(_BYTE *)(result + 8) = 82;
          *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v13 + v14 + 25) & 0xF000 | 0x540;
          *(_QWORD *)(result + 16) = v10;
          *(_QWORD *)(result + 24) = v11;
          *(_QWORD *)(result + 32) = v12;
          return result;
        }
      }
    }
    return result;
  }
  if (v3 != 120)
  {
    if (v3 == 105)
    {
      *(_QWORD *)a1 = v2 + 2;
      if (result)
      {
        v5 = result;
        if (result)
        {
          v6 = result;
          v7 = *(_QWORD **)(a1 + 4904);
          v8 = v7[1];
          if ((unint64_t)(v8 - 4032) > 0xFFFFFFFFFFFFF00FLL)
          {
LABEL_11:
            v7[1] = v8 + 48;
            *(_QWORD *)((char *)v7 + v8 + 16) = &unk_1E0E20CD8;
            result = (uint64_t)v7 + v8 + 16;
            *(_BYTE *)(result + 8) = 81;
            *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v7 + v8 + 25) & 0xF000 | 0x540;
            *(_QWORD *)(result + 16) = v5;
            *(_QWORD *)(result + 24) = v6;
            *(_BYTE *)(result + 32) = 0;
            return result;
          }
          v9 = malloc(0x1000uLL);
          if (v9)
          {
            v8 = 0;
            *v9 = v7;
            v9[1] = 0;
            v7 = v9;
            *(_QWORD *)(a1 + 4904) = v9;
            goto LABEL_11;
          }
LABEL_27:
          std::terminate();
        }
      }
      return result;
    }
  }
  *(_QWORD *)a1 = v2 + 2;
  if (result)
  {
    v16 = result;
    if (result)
    {
      v17 = result;
      v18 = *(_QWORD **)(a1 + 4904);
      v19 = v18[1];
      if ((unint64_t)(v19 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v20 = malloc(0x1000uLL);
        if (!v20)
          goto LABEL_27;
        v19 = 0;
        *v20 = v18;
        v20[1] = 0;
        v18 = v20;
        *(_QWORD *)(a1 + 4904) = v20;
      }
      *(_QWORD *)((char *)v18 + v19 + 16) = &unk_1E0E20CD8;
      result = (uint64_t)v18 + v19 + 16;
      v18[1] = v19 + 48;
      *(_BYTE *)(result + 8) = 81;
      *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v18 + v19 + 25) & 0xF000 | 0x540;
      *(_QWORD *)(result + 16) = v16;
      *(_QWORD *)(result + 24) = v17;
      *(_BYTE *)(result + 32) = 1;
    }
  }
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::InitListExpr,decltype(nullptr),llvm::itanium_demangle::NodeArray>(uint64_t a1, __n128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E21258;
  v7 = (uint64_t)v3 + v4 + 16;
  v3[1] = v4 + 48;
  *(_BYTE *)(v7 + 8) = 70;
  result = *a2;
  *(_WORD *)(v7 + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(v7 + 16) = 0;
  *(__n128 *)(v7 + 24) = result;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parsePointerToMemberConversionExpr(char **a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;

  if (result)
  {
    v3 = result;
    if (result)
    {
      v4 = result;
      v5 = *a1;
      v6 = a1[1];
      if (*a1 == v6)
        return 0;
      v7 = *a1;
      if (*v5 == 110)
      {
        v7 = v5 + 1;
        *a1 = v5 + 1;
      }
      if (v6 == v7)
        return 0;
      if ((*v7 & 0x80000000) == 0
        && (v8 = MEMORY[0x1E0C80978], (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v7 + 60) & 0x400) != 0))
      {
        while ((*v7 & 0x80000000) == 0 && (*(_DWORD *)(v8 + 4 * *v7 + 60) & 0x400) != 0)
        {
          *a1 = ++v7;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
        v9 = v5;
        v10 = v7 - v5;
        v11 = v7;
        if (v7 == v6)
          return 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = v7;
        if (v7 == v6)
          return 0;
      }
      if (*v11 != 69)
        return 0;
      *a1 = v11 + 1;
      v12 = a1[613];
      v13 = *((_QWORD *)v12 + 1);
      if ((unint64_t)(v13 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v14 = (char *)malloc(0x1000uLL);
        if (!v14)
          std::terminate();
        v13 = 0;
        *(_QWORD *)v14 = v12;
        *((_QWORD *)v14 + 1) = 0;
        v12 = v14;
        a1[613] = v14;
      }
      *(_QWORD *)&v12[v13 + 16] = &unk_1E0E224E8;
      result = (uint64_t)&v12[v13 + 16];
      *((_QWORD *)v12 + 1) = v13 + 48;
      *(_BYTE *)(result + 8) = 69;
      *(_WORD *)(result + 9) = *(_WORD *)&v12[v13 + 25] & 0xF000 | 0x542;
      *(_QWORD *)(result + 16) = v3;
      *(_QWORD *)(result + 24) = v4;
      *(_QWORD *)(result + 32) = v9;
      *(_QWORD *)(result + 40) = v10;
    }
  }
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::EnclosingExpr,char const(&)[10],llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node::Prec>(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4016) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 64;
  *(_QWORD *)((char *)v5 + v6 + 16) = &unk_1E0E21410;
  result = (uint64_t)v5 + v6 + 16;
  v10 = *a2;
  *(_BYTE *)(result + 8) = 60;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | a3 & 0x3F | 0x540;
  *(_QWORD *)(result + 16) = "noexcept ";
  *(_QWORD *)(result + 24) = 9;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = v10;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseRequiresExpr(_QWORD *a1)
{
  _WORD *v1;
  _BYTE *v2;
  uint64_t result;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  int64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v1 = (_WORD *)*a1;
  v2 = (_BYTE *)a1[1];
  if ((unint64_t)&v2[-*a1] < 2)
    return 0;
  if (*v1 == 20850)
  {
    v5 = v1 + 1;
    *a1 = v5;
    v6 = (uint64_t)(a1[3] - a1[2]) >> 3;
    v7 = (char *)(a1 + 5);
    while (v5 == v2 || *v5 != 95)
    {
      if (!result)
        return result;
      v10 = result;
      v9 = (char *)a1[3];
      if (v9 == (char *)a1[4])
      {
        v11 = (char *)a1[2];
        v12 = v9 - v11;
        if (v11 == v7)
        {
          v13 = (char *)malloc(2 * (v9 - v11));
          if (!v13)
LABEL_68:
            abort();
          v8 = v13;
          if (v9 != v7)
            memcpy(v13, a1 + 5, v12);
          a1[2] = v8;
        }
        else
        {
          v8 = (char *)realloc(v11, 2 * (v9 - v11));
          a1[2] = v8;
          if (!v8)
            goto LABEL_68;
        }
        v9 = &v8[8 * (v12 >> 3)];
        a1[4] = &v8[8 * (v12 >> 2)];
      }
      a1[3] = v9 + 8;
      *(_QWORD *)v9 = v10;
      v5 = (_BYTE *)*a1;
      v2 = (_BYTE *)a1[1];
    }
    *a1 = v5 + 1;
    v16 = (_BYTE *)*a1;
    if (*a1 == a1[1])
      return 0;
  }
  else
  {
    if (*v1 != 29042)
      return 0;
    v14 = 0;
    v15 = 0;
    v16 = v1 + 1;
    *a1 = v16;
    if (v16 == v2)
      return 0;
  }
  v52 = v15;
  v53 = v14;
  v54 = (uint64_t)(a1[3] - a1[2]) >> 3;
  v17 = (char *)(a1 + 5);
  while (1)
  {
    v18 = *v16;
    if (v18 == 81)
    {
      *a1 = v16 + 1;
      if (!result)
        return result;
      v24 = result;
      v25 = (_QWORD *)a1[613];
      v26 = v25[1];
      if ((unint64_t)(v26 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v27 = malloc(0x1000uLL);
        if (!v27)
          goto LABEL_69;
        v26 = 0;
        *v27 = v25;
        v27[1] = 0;
        v25 = v27;
        a1[613] = v27;
      }
      v25[1] = v26 + 32;
      v28 = (char *)v25 + v26;
      *((_QWORD *)v28 + 2) = &unk_1E0E21C50;
      v29 = v28 + 16;
      v30 = 86;
      goto LABEL_41;
    }
    if (v18 == 84)
    {
      *a1 = v16 + 1;
      if (!result)
        return result;
      v24 = result;
      v31 = (_QWORD *)a1[613];
      v32 = v31[1];
      if ((unint64_t)(v32 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v33 = malloc(0x1000uLL);
        if (!v33)
          goto LABEL_69;
        v32 = 0;
        *v33 = v31;
        v33[1] = 0;
        v31 = v33;
        a1[613] = v33;
      }
      v31[1] = v32 + 32;
      v34 = (char *)v31 + v32;
      *((_QWORD *)v34 + 2) = &unk_1E0E21A40;
      v29 = v34 + 16;
      v30 = 85;
LABEL_41:
      v29[8] = v30;
      *(_WORD *)(v29 + 9) = *(_WORD *)(v29 + 9) & 0xF000 | 0x540;
      *((_QWORD *)v29 + 2) = v24;
      v35 = (char *)a1[3];
      if (v35 != (char *)a1[4])
        goto LABEL_42;
      goto LABEL_53;
    }
    if (v18 != 88)
      return 0;
    *a1 = v16 + 1;
    if (!result)
      return result;
    v19 = result;
    v20 = (_BYTE *)*a1;
    v21 = (_BYTE *)a1[1];
    if ((_BYTE *)*a1 == v21 || *v20 != 78)
    {
      v22 = 0;
      if (v20 == v21)
      {
LABEL_30:
        v23 = 0;
        goto LABEL_47;
      }
    }
    else
    {
      *a1 = ++v20;
      v22 = 1;
      if (v20 == v21)
        goto LABEL_30;
    }
    if (*v20 == 82)
    {
      *a1 = v20 + 1;
      v23 = result;
      if (!result)
        return result;
LABEL_47:
      v37 = (_QWORD *)a1[613];
      v38 = v37[1];
      if ((unint64_t)(v38 - 4032) > 0xFFFFFFFFFFFFF00FLL)
        goto LABEL_52;
      goto LABEL_50;
    }
    v23 = 0;
    v37 = (_QWORD *)a1[613];
    v38 = v37[1];
    if ((unint64_t)(v38 - 4032) > 0xFFFFFFFFFFFFF00FLL)
      goto LABEL_52;
LABEL_50:
    v39 = malloc(0x1000uLL);
    if (!v39)
      goto LABEL_69;
    v38 = 0;
    *v39 = v37;
    v39[1] = 0;
    v37 = v39;
    a1[613] = v39;
LABEL_52:
    v37[1] = v38 + 48;
    v40 = (char *)v37 + v38;
    *((_QWORD *)v40 + 2) = &unk_1E0E218E0;
    v29 = v40 + 16;
    v29[8] = 84;
    *(_WORD *)(v29 + 9) = *(_WORD *)(v29 + 9) & 0xF000 | 0x540;
    *((_QWORD *)v29 + 2) = v19;
    v29[24] = v22;
    *((_QWORD *)v29 + 4) = v23;
    v35 = (char *)a1[3];
    if (v35 != (char *)a1[4])
    {
LABEL_42:
      a1[3] = v35 + 8;
      *(_QWORD *)v35 = v29;
      v16 = (_BYTE *)*a1;
      v36 = (_BYTE *)a1[1];
      if ((_BYTE *)*a1 == v36)
        return 0;
      goto LABEL_61;
    }
LABEL_53:
    v41 = (char *)a1[2];
    v42 = v35 - v41;
    if (v41 == v17)
    {
      v44 = (char *)malloc(2 * (v35 - v41));
      if (!v44)
        goto LABEL_68;
      v43 = v44;
      if (v35 != v17)
        memcpy(v44, a1 + 5, v42);
      a1[2] = v43;
    }
    else
    {
      v43 = (char *)realloc(v41, 2 * (v35 - v41));
      a1[2] = v43;
      if (!v43)
        goto LABEL_68;
    }
    v45 = &v43[8 * (v42 >> 3)];
    a1[3] = v45 + 8;
    a1[4] = &v43[8 * (v42 >> 2)];
    *(_QWORD *)v45 = v29;
    v16 = (_BYTE *)*a1;
    v36 = (_BYTE *)a1[1];
    if ((_BYTE *)*a1 == v36)
      return 0;
LABEL_61:
    if (*v16 == 69)
      break;
    result = 0;
    if (v16 == v36)
      return result;
  }
  *a1 = v16 + 1;
  v48 = v47;
  v49 = (_QWORD *)a1[613];
  v50 = v49[1];
  if ((unint64_t)(v50 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v51 = malloc(0x1000uLL);
    if (!v51)
LABEL_69:
      std::terminate();
    v50 = 0;
    *v51 = v49;
    v51[1] = 0;
    v49 = v51;
    a1[613] = v51;
  }
  *(_QWORD *)((char *)v49 + v50 + 16) = &unk_1E0E21360;
  result = (uint64_t)v49 + v50 + 16;
  v49[1] = v50 + 48;
  *(_BYTE *)(result + 8) = 83;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v49 + v50 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = v52;
  *(_QWORD *)(result + 24) = v53;
  *(_QWORD *)(result + 32) = v46;
  *(_QWORD *)(result + 40) = v48;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseSubobjectExpr(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int64_t v22;
  char *v23;
  unsigned __int8 *v24;
  char *v25;
  uint64_t *v26;
  BOOL v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (!result)
    return result;
  v3 = result;
  if (!result)
    return result;
  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  if ((char *)*a1 == v4)
    return 0;
  v6 = (char *)*a1;
  if (*v5 == 110)
  {
    v6 = v5 + 1;
    *a1 = v5 + 1;
  }
  if (v4 == v6)
    return 0;
  if (*v6 < 0
    || (v7 = MEMORY[0x1E0C80978], (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v6 + 60) & 0x400) == 0))
  {
    v8 = 0;
    v9 = 0;
    v10 = v6;
    if (v6 == v4)
      return 0;
    goto LABEL_18;
  }
  while ((*v6 & 0x80000000) == 0 && (*(_DWORD *)(v7 + 4 * *v6 + 60) & 0x400) != 0)
  {
    *a1 = ++v6;
    if (v6 == v4)
    {
      v6 = v4;
      break;
    }
  }
  v8 = v5;
  v9 = v6 - v5;
  v10 = v6;
  if (v6 == v4)
    return 0;
LABEL_18:
  v35 = v9;
  v36 = v8;
  v37 = result;
  v38 = v3;
  v39 = (uint64_t)(a1[3] - a1[2]) >> 3;
  v11 = a1 + 5;
  v12 = MEMORY[0x1E0C80978];
  while (1)
  {
    v13 = *v10;
    if (v13 != 95)
      break;
    v14 = (unsigned __int8 *)(v10 + 1);
    *a1 = v10 + 1;
    if (v4 == v10 + 1 || (char)*v14 < 0 || (*(_DWORD *)(v12 + 4 * *v14 + 60) & 0x400) == 0)
    {
      v14 = 0;
      v15 = 0;
      v16 = (_QWORD *)a1[613];
      v17 = v16[1];
      if ((unint64_t)(v17 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
        goto LABEL_25;
    }
    else
    {
      v24 = (unsigned __int8 *)(v10 + 1);
      while (((char)*v24 & 0x80000000) == 0 && (*(_DWORD *)(v12 + 4 * *v24 + 60) & 0x400) != 0)
      {
        *a1 = ++v24;
        if (v24 == (unsigned __int8 *)v4)
        {
          v24 = (unsigned __int8 *)v4;
          break;
        }
      }
      v15 = v24 - v14;
      v16 = (_QWORD *)a1[613];
      v17 = v16[1];
      if ((unint64_t)(v17 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
LABEL_25:
        v18 = malloc(0x1000uLL);
        if (!v18)
          goto LABEL_61;
        v17 = 0;
        *v18 = v16;
        v18[1] = 0;
        v16 = v18;
        a1[613] = v18;
      }
    }
    v16[1] = v17 + 32;
    *(_QWORD *)((char *)v16 + v17 + 16) = &unk_1E0E227A8;
    v19 = (uint64_t)v16 + v17 + 16;
    *(_BYTE *)(v19 + 8) = 8;
    *(_WORD *)(v19 + 9) = *(_WORD *)((_BYTE *)v16 + v17 + 25) & 0xF000 | 0x540;
    *(_QWORD *)(v19 + 16) = v14;
    *(_QWORD *)(v19 + 24) = v15;
    v20 = (uint64_t *)a1[3];
    if (v20 == (uint64_t *)a1[4])
    {
      v21 = (uint64_t *)a1[2];
      v22 = (char *)v20 - (char *)v21;
      if (v21 == v11)
      {
        v25 = (char *)malloc(2 * ((char *)v20 - (char *)v21));
        if (!v25)
LABEL_62:
          abort();
        v23 = v25;
        if (v20 != v11)
          memcpy(v25, a1 + 5, v22);
        a1[2] = v23;
      }
      else
      {
        v23 = (char *)realloc(v21, 2 * ((char *)v20 - (char *)v21));
        a1[2] = v23;
        if (!v23)
          goto LABEL_62;
      }
      v26 = (uint64_t *)&v23[8 * (v22 >> 3)];
      a1[3] = v26 + 1;
      a1[4] = &v23[8 * (v22 >> 2)];
      *v26 = v19;
      v10 = (char *)*a1;
      v4 = (char *)a1[1];
      if ((char *)*a1 == v4)
        return 0;
    }
    else
    {
      a1[3] = v20 + 1;
      *v20 = v19;
      v10 = (char *)*a1;
      v4 = (char *)a1[1];
      if ((char *)*a1 == v4)
        return 0;
    }
  }
  v27 = v10 != v4 && v13 == 112;
  v28 = v27;
  if (v27)
    *a1 = ++v10;
  if (v10 == v4 || *v10 != 69)
    return 0;
  *a1 = v10 + 1;
  v31 = v30;
  v32 = (_QWORD *)a1[613];
  v33 = v32[1];
  if ((unint64_t)(v33 - 4000) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v34 = malloc(0x1000uLL);
    if (!v34)
LABEL_61:
      std::terminate();
    v33 = 0;
    *v34 = v32;
    v34[1] = 0;
    v32 = v34;
    a1[613] = v34;
  }
  v32[1] = v33 + 80;
  *(_QWORD *)((char *)v32 + v33 + 16) = &unk_1E0E216D0;
  result = (uint64_t)v32 + v33 + 16;
  *(_BYTE *)(result + 8) = 59;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v32 + v33 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = v38;
  *(_QWORD *)(result + 24) = v37;
  *(_QWORD *)(result + 32) = v36;
  *(_QWORD *)(result + 40) = v35;
  *(_QWORD *)(result + 48) = v29;
  *(_QWORD *)(result + 56) = v31;
  *(_BYTE *)(result + 64) = v28;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::ParameterPackExpansion,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E22280;
  result = v7 + 16;
  result[8] = 42;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v8;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::SizeofParamPackExpr,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E21E08;
  result = v7 + 16;
  result[8] = 62;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v8;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::EnclosingExpr,char const(&)[11],llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4016) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 64;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E21410;
  result = v7 + 16;
  result[8] = 60;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = "sizeof... ";
  *((_QWORD *)result + 3) = 10;
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 6) = 0;
  *((_QWORD *)result + 4) = v8;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::NodeArrayNode,llvm::itanium_demangle::NodeArray>(uint64_t a1, __n128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E214C0;
  v7 = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(v7 + 8) = 0;
  result = *a2;
  *(_WORD *)(v7 + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(__n128 *)(v7 + 16) = result;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::InitListExpr,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::NodeArray>(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 48;
  *(_QWORD *)((char *)v5 + v6 + 16) = &unk_1E0E21258;
  v9 = (uint64_t)v5 + v6 + 16;
  v10 = *a2;
  *(_BYTE *)(v9 + 8) = 70;
  result = *a3;
  *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
  *(_QWORD *)(v9 + 16) = v10;
  *(__n128 *)(v9 + 24) = result;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::ThrowExpr,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E22960;
  result = v7 + 16;
  result[8] = 72;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v8;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseUnresolvedName(uint64_t a1, size_t a2)
{
  int v2;
  unsigned __int8 *v4;
  char *v5;
  unint64_t v6;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  int v14;
  char *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  char *v58;

  v2 = a2;
  v4 = *(unsigned __int8 **)a1;
  v5 = *(char **)(a1 + 8);
  v6 = (unint64_t)&v5[-*(_QWORD *)a1];
  if (v6 >= 3)
  {
    if (*(_WORD *)v4 == 29299 && v4[2] == 78)
    {
      *(_QWORD *)a1 = v4 + 3;
      if (v19)
      {
        v17 = v19;
        if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1 || **(_BYTE **)a1 != 73)
        {
LABEL_33:
          while (1)
          {
            v28 = *(unsigned __int8 **)a1;
            if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) && *v28 == 69)
              break;
            if (!v29)
              return 0;
            v30 = v29;
            v31 = *(_QWORD **)(a1 + 4904);
            v32 = v31[1];
            if ((unint64_t)(v32 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
            {
              v33 = malloc(0x1000uLL);
              if (!v33)
                goto LABEL_80;
              v32 = 0;
              *v33 = v31;
              v33[1] = 0;
              v31 = v33;
              *(_QWORD *)(a1 + 4904) = v33;
            }
            v31[1] = v32 + 32;
            v27 = (char *)v31 + v32;
            *((_QWORD *)v27 + 2) = &unk_1E0E215C8;
            v27 += 16;
            v27[8] = 23;
            *(_WORD *)(v27 + 9) = *(_WORD *)(v27 + 9) & 0xF000 | 0x540;
            *((_QWORD *)v27 + 2) = v17;
            *((_QWORD *)v27 + 3) = v30;
            v17 = v27;
          }
          *(_QWORD *)a1 = v28 + 1;
          if (!v42)
            return 0;
          v43 = v42;
          v44 = *(_QWORD **)(a1 + 4904);
          v45 = v44[1];
          if ((unint64_t)(v45 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
          {
            v46 = malloc(0x1000uLL);
            if (!v46)
              goto LABEL_80;
            v45 = 0;
            *v46 = v44;
            v46[1] = 0;
            v44 = v46;
            *(_QWORD *)(a1 + 4904) = v46;
          }
          v44[1] = v45 + 32;
          v47 = (char *)v44 + v45;
LABEL_77:
          *((_QWORD *)v47 + 2) = &unk_1E0E215C8;
          v8 = v47 + 16;
          v8[8] = 23;
          *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
          *((_QWORD *)v8 + 2) = v17;
          *((_QWORD *)v8 + 3) = v43;
          return v8;
        }
        if (v21)
        {
          v22 = v21;
          v23 = *(_QWORD **)(a1 + 4904);
          v24 = v23[1];
          if ((unint64_t)(v24 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
          {
            v25 = malloc(0x1000uLL);
            if (!v25)
              goto LABEL_80;
            v24 = 0;
            *v25 = v23;
            v25[1] = 0;
            v23 = v25;
            *(_QWORD *)(a1 + 4904) = v25;
          }
          v23[1] = v24 + 32;
          v26 = (char *)v23 + v24;
          *((_QWORD *)v26 + 2) = &unk_1E0E21F68;
          v26 += 16;
          v26[8] = 45;
          *(_WORD *)(v26 + 9) = *(_WORD *)(v26 + 9) & 0xF000 | 0x540;
          *((_QWORD *)v26 + 2) = v17;
          *((_QWORD *)v26 + 3) = v22;
          v17 = v26;
          goto LABEL_33;
        }
      }
      return 0;
    }
  }
  else if (v6 != 2)
  {
    goto LABEL_9;
  }
  if (*(_WORD *)v4 == 29299)
  {
    v13 = (char *)(v4 + 2);
    *(_QWORD *)a1 = v13;
    if (v5 == v13)
    {
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 60) & 0x400) == 0)
      {
LABEL_18:
        v58 = v15;
        if (v15)
        {
          v17 = v15;
          if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1 && **(_BYTE **)a1 == 73)
          {
            v57 = v18;
            if (v18)
            {
              goto LABEL_72;
            }
            return 0;
          }
LABEL_72:
          if (v52)
          {
            v43 = v52;
            v53 = *(_QWORD **)(a1 + 4904);
            v54 = v53[1];
            if ((unint64_t)(v54 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
            {
              v55 = malloc(0x1000uLL);
              if (!v55)
                goto LABEL_80;
              v54 = 0;
              *v55 = v53;
              v55[1] = 0;
              v53 = v55;
              *(_QWORD *)(a1 + 4904) = v55;
            }
            v53[1] = v54 + 32;
            v47 = (char *)v53 + v54;
            goto LABEL_77;
          }
        }
        return 0;
      }
    }
    else
    {
      v14 = *v13;
      if (v14 < 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v14 + 60) & 0x400) == 0)
        goto LABEL_18;
    }
    if (!v34)
      return 0;
    v35 = v34;
    if ((v2 & 1) != 0)
    {
      v17 = 0;
      while (1)
      {
        v36 = *(_QWORD **)(a1 + 4904);
        v37 = v36[1];
        if (v17)
        {
          if ((unint64_t)(v37 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
          {
            v38 = malloc(0x1000uLL);
            if (!v38)
              goto LABEL_80;
            v37 = 0;
            *v38 = v36;
            v38[1] = 0;
            v36 = v38;
            *(_QWORD *)(a1 + 4904) = v38;
          }
          v36[1] = v37 + 32;
          *(_QWORD *)((char *)v36 + v37 + 16) = &unk_1E0E215C8;
          v39 = (uint64_t)v36 + v37 + 16;
          *(_BYTE *)(v39 + 8) = 23;
          *(_WORD *)(v39 + 9) = *(_WORD *)((_BYTE *)v36 + v37 + 25) & 0xF000 | 0x540;
          *(_QWORD *)(v39 + 16) = v17;
          v17 = (char *)v39;
          *(_QWORD *)((char *)v36 + v37 + 40) = v35;
          v40 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
            goto LABEL_43;
        }
        else
        {
          if ((unint64_t)(v37 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
          {
            v41 = malloc(0x1000uLL);
            if (!v41)
              goto LABEL_80;
            v37 = 0;
            *v41 = v36;
            v41[1] = 0;
            v36 = v41;
            *(_QWORD *)(a1 + 4904) = v41;
          }
          v36[1] = v37 + 32;
          *(_QWORD *)((char *)v36 + v37 + 16) = &unk_1E0E21D58;
          v17 = (char *)v36 + v37 + 16;
          v17[8] = 46;
          *(_WORD *)(v17 + 9) = *(_WORD *)((_BYTE *)v36 + v37 + 25) & 0xF000 | 0x540;
          *(_QWORD *)((char *)v36 + v37 + 32) = v35;
          v40 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
            goto LABEL_43;
        }
        if (*v40 == 69)
          goto LABEL_71;
LABEL_43:
        v8 = 0;
        if (!v35)
          return v8;
      }
    }
    v17 = 0;
    while (1)
    {
      if (v17)
      {
        v48 = *(_QWORD **)(a1 + 4904);
        v49 = v48[1];
        if ((unint64_t)(v49 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
        {
          v50 = malloc(0x1000uLL);
          if (!v50)
            goto LABEL_80;
          v49 = 0;
          *v50 = v48;
          v50[1] = 0;
          v48 = v50;
          *(_QWORD *)(a1 + 4904) = v50;
        }
        v48[1] = v49 + 32;
        v51 = (char *)v48 + v49;
        *((_QWORD *)v51 + 2) = &unk_1E0E215C8;
        v51 += 16;
        v51[8] = 23;
        *(_WORD *)(v51 + 9) = *(_WORD *)(v51 + 9) & 0xF000 | 0x540;
        *((_QWORD *)v51 + 2) = v17;
        *((_QWORD *)v51 + 3) = v35;
        v17 = v51;
        v40 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          goto LABEL_62;
      }
      else
      {
        v17 = (char *)v35;
        v40 = *(unsigned __int8 **)a1;
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          goto LABEL_62;
      }
      if (*v40 == 69)
      {
LABEL_71:
        *(_QWORD *)a1 = v40 + 1;
        goto LABEL_72;
      }
LABEL_62:
      v8 = 0;
      if (!v35)
        return v8;
    }
  }
LABEL_9:
  if (v8 && v2)
  {
    v9 = *(_QWORD **)(a1 + 4904);
    v10 = v9[1];
    if ((unint64_t)(v10 - 4048) > 0xFFFFFFFFFFFFF00FLL)
    {
LABEL_14:
      v9[1] = v10 + 32;
      v12 = (char *)v9 + v10;
      *((_QWORD *)v12 + 2) = &unk_1E0E21D58;
      v12 += 16;
      v12[8] = 46;
      *(_WORD *)(v12 + 9) = *(_WORD *)(v12 + 9) & 0xF000 | 0x540;
      *((_QWORD *)v12 + 2) = v8;
      return v12;
    }
    v11 = malloc(0x1000uLL);
    if (v11)
    {
      v10 = 0;
      *v11 = v9;
      v11[1] = 0;
      v9 = v11;
      *(_QWORD *)(a1 + 4904) = v11;
      goto LABEL_14;
    }
LABEL_80:
    std::terminate();
  }
  return v8;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::BinaryExpr,llvm::itanium_demangle::Node *&,std::string_view &,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node::Prec &>(uint64_t a1, uint64_t *a2, __n128 *a3, uint64_t *a4, char a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;

  v9 = *(_QWORD **)(a1 + 4904);
  v10 = v9[1];
  if ((unint64_t)(v10 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v12 = malloc(0x1000uLL);
    if (!v12)
      std::terminate();
    v10 = 0;
    *v12 = v9;
    v12[1] = 0;
    v9 = v12;
    *(_QWORD *)(a1 + 4904) = v12;
  }
  v9[1] = v10 + 48;
  v13 = (char *)v9 + v10;
  v14 = *a2;
  v15 = *a4;
  *((_QWORD *)v13 + 2) = &unk_1E0E20C28;
  v13 += 16;
  v13[8] = 54;
  result = *a3;
  *(_WORD *)(v13 + 9) = *(_WORD *)(v13 + 9) & 0xF000 | a5 & 0x3F | 0x540;
  *((_QWORD *)v13 + 2) = v14;
  *(__n128 *)(v13 + 24) = result;
  *((_QWORD *)v13 + 5) = v15;
  return result;
}

char *llvm::itanium_demangle::BinaryExpr::printLeft(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  __int16 v6;
  int v7;
  int v8;
  int v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  size_t v29;
  char *result;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  _BYTE *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;

  if (*(_DWORD *)(a2 + 32))
    goto LABEL_2;
  v36 = *(_BYTE **)(a1 + 24);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 != 2)
  {
    if (v37 == 1 && *v36 == 62)
      goto LABEL_44;
LABEL_2:
    v4 = 0;
    goto LABEL_3;
  }
  if (memcmp(v36, ">>", 2uLL))
    goto LABEL_2;
LABEL_44:
  *(_DWORD *)(a2 + 32) = 1;
  v38 = *(char **)a2;
  v39 = *(_QWORD *)(a2 + 8);
  v40 = v39 + 1;
  v41 = *(_QWORD *)(a2 + 16);
  if (v39 + 1 > v41)
  {
    v42 = v39 + 993;
    if (2 * v41 <= v42)
      v43 = v42;
    else
      v43 = 2 * v41;
    *(_QWORD *)(a2 + 16) = v43;
    v38 = (char *)realloc(v38, v43);
    *(_QWORD *)a2 = v38;
    if (!v38)
      goto LABEL_51;
    v39 = *(_QWORD *)(a2 + 8);
    v40 = v39 + 1;
  }
  *(_QWORD *)(a2 + 8) = v40;
  v38[v39] = 40;
  v4 = 1;
LABEL_3:
  v5 = *(unsigned __int16 *)(a1 + 9);
  v6 = (_WORD)v5 << 10;
  v7 = (unsigned __int16)((_WORD)v5 << 10);
  v8 = v5 << 26 >> 26;
  if (v7 == 17408)
    v9 = 15;
  else
    v9 = v8;
  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 16), a2, v9, v7 != 17408);
  if (*(_QWORD *)(a1 + 32) == 1)
  {
    v10 = *(_BYTE **)(a1 + 24);
    if (*v10 == 44)
    {
      v11 = 1;
      v12 = *(char **)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = v13 + 1;
      v15 = *(_QWORD *)(a2 + 16);
      if (v13 + 1 <= v15)
        goto LABEL_23;
      goto LABEL_18;
    }
  }
  v16 = *(char **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD *)(a2 + 16);
  if (v17 + 1 > v18)
  {
    v19 = v17 + 993;
    v20 = 2 * v18;
    if (v20 <= v19)
      v21 = v19;
    else
      v21 = v20;
    *(_QWORD *)(a2 + 16) = v21;
    v16 = (char *)realloc(v16, v21);
    *(_QWORD *)a2 = v16;
    if (!v16)
      goto LABEL_51;
    v17 = *(_QWORD *)(a2 + 8);
  }
  v16[v17] = 32;
  v22 = *(_QWORD *)(a2 + 8) + 1;
  *(_QWORD *)(a2 + 8) = v22;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    v10 = *(_BYTE **)(a1 + 24);
    v12 = *(char **)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = v13 + v11;
    v15 = *(_QWORD *)(a2 + 16);
    if (v13 + v11 <= v15)
    {
LABEL_23:
      memcpy(&v12[v13], v10, v11);
      v22 = *(_QWORD *)(a2 + 8) + v11;
      *(_QWORD *)(a2 + 8) = v22;
      goto LABEL_24;
    }
LABEL_18:
    v23 = 2 * v15;
    if (v23 <= v14 + 992)
      v24 = v14 + 992;
    else
      v24 = v23;
    *(_QWORD *)(a2 + 16) = v24;
    v12 = (char *)realloc(v12, v24);
    *(_QWORD *)a2 = v12;
    if (!v12)
      goto LABEL_51;
    v13 = *(_QWORD *)(a2 + 8);
    goto LABEL_23;
  }
LABEL_24:
  v25 = *(_QWORD *)(a2 + 16);
  v26 = *(char **)a2;
  if (v22 + 1 > v25)
  {
    v27 = v22 + 993;
    v28 = 2 * v25;
    if (v28 <= v27)
      v29 = v27;
    else
      v29 = v28;
    *(_QWORD *)(a2 + 16) = v29;
    v26 = (char *)realloc(v26, v29);
    *(_QWORD *)a2 = v26;
    if (!v26)
      goto LABEL_51;
    v22 = *(_QWORD *)(a2 + 8);
  }
  v26[v22] = 32;
  ++*(_QWORD *)(a2 + 8);
  result = (char *)llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 40), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, v6 == 17408);
  if (!v4)
    return result;
  --*(_DWORD *)(a2 + 32);
  result = *(char **)a2;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = v31 + 1;
  v33 = *(_QWORD *)(a2 + 16);
  if (v31 + 1 > v33)
  {
    v34 = v31 + 993;
    if (2 * v33 <= v34)
      v35 = v34;
    else
      v35 = 2 * v33;
    *(_QWORD *)(a2 + 16) = v35;
    result = (char *)realloc(result, v35);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v31 = *(_QWORD *)(a2 + 8);
      v32 = v31 + 1;
      goto LABEL_37;
    }
LABEL_51:
    abort();
  }
LABEL_37:
  *(_QWORD *)(a2 + 8) = v32;
  result[v31] = 41;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::PrefixExpr,std::string_view &,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node::Prec &>(uint64_t a1, __n128 *a2, uint64_t *a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  __n128 result;

  v7 = *(_QWORD **)(a1 + 4904);
  v8 = v7[1];
  if ((unint64_t)(v8 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v10 = malloc(0x1000uLL);
    if (!v10)
      std::terminate();
    v8 = 0;
    *v10 = v7;
    v10[1] = 0;
    v7 = v10;
    *(_QWORD *)(a1 + 4904) = v10;
  }
  v7[1] = v8 + 48;
  v11 = (char *)v7 + v8;
  v12 = *a3;
  *((_QWORD *)v11 + 2) = &unk_1E0E20EE8;
  v11 += 16;
  v11[8] = 66;
  result = *a2;
  *(_WORD *)(v11 + 9) = *(_WORD *)(v11 + 9) & 0xF000 | a4 & 0x3F | 0x540;
  *((__n128 *)v11 + 1) = result;
  *((_QWORD *)v11 + 4) = v12;
  return result;
}

void *llvm::itanium_demangle::PrefixExpr::printLeft(uint64_t a1, char **a2)
{
  size_t v4;
  const void *v5;
  char *v6;
  char *v7;
  char *v8;
  size_t v9;
  unint64_t v10;
  size_t v11;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(const void **)(a1 + 16);
    v6 = *a2;
    v7 = a2[1];
    v8 = &v7[v4];
    v9 = (size_t)a2[2];
    if ((unint64_t)&v7[v4] > v9)
    {
      v10 = 2 * v9;
      if (v10 <= (unint64_t)(v8 + 992))
        v11 = (size_t)(v8 + 992);
      else
        v11 = v10;
      a2[2] = (char *)v11;
      v6 = (char *)realloc(v6, v11);
      *a2 = v6;
      if (!v6)
        abort();
      v7 = a2[1];
    }
    memcpy(&v7[(_QWORD)v6], v5, v4);
    a2[1] += v4;
  }
  return llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 32), (uint64_t)a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
}

void *llvm::itanium_demangle::PostfixExpr::printLeft(uint64_t a1, char **a2)
{
  void *result;
  size_t v5;
  const void *v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  size_t v12;

  result = llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 16), (uint64_t)a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 1);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(const void **)(a1 + 24);
    v7 = *a2;
    v8 = a2[1];
    v9 = &v8[v5];
    v10 = (size_t)a2[2];
    if ((unint64_t)&v8[v5] > v10)
    {
      v11 = 2 * v10;
      if (v11 <= (unint64_t)(v9 + 992))
        v12 = (size_t)(v9 + 992);
      else
        v12 = v11;
      a2[2] = (char *)v12;
      v7 = (char *)realloc(v7, v12);
      *a2 = v7;
      if (!v7)
        abort();
      v8 = a2[1];
    }
    result = memcpy(&v8[(_QWORD)v7], v6, v5);
    a2[1] += v5;
  }
  return result;
}

void *llvm::itanium_demangle::ArraySubscriptExpr::printLeft(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;

  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 16), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
  ++*(_DWORD *)(a2 + 32);
  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v7)
  {
    v8 = v5 + 993;
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_14;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  *((_BYTE *)v4 + v5) = 91;
  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 24), a2, 19, 0);
  --*(_DWORD *)(a2 + 32);
  result = *(void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = v11 + 1;
  v13 = *(_QWORD *)(a2 + 16);
  if (v11 + 1 > v13)
  {
    v14 = v11 + 993;
    if (2 * v13 <= v14)
      v15 = v14;
    else
      v15 = 2 * v13;
    *(_QWORD *)(a2 + 16) = v15;
    result = realloc(result, v15);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = v11 + 1;
      goto LABEL_13;
    }
LABEL_14:
    abort();
  }
LABEL_13:
  *(_QWORD *)(a2 + 8) = v12;
  *((_BYTE *)result + v11) = 93;
  return result;
}

void *llvm::itanium_demangle::MemberExpr::printLeft(uint64_t a1, char **a2)
{
  size_t v4;
  const void *v5;
  char *v6;
  char *v7;
  char *v8;
  size_t v9;
  unint64_t v10;
  size_t v11;

  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 16), (uint64_t)a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 1);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(const void **)(a1 + 24);
    v6 = *a2;
    v7 = a2[1];
    v8 = &v7[v4];
    v9 = (size_t)a2[2];
    if ((unint64_t)&v7[v4] > v9)
    {
      v10 = 2 * v9;
      if (v10 <= (unint64_t)(v8 + 992))
        v11 = (size_t)(v8 + 992);
      else
        v11 = v10;
      a2[2] = (char *)v11;
      v6 = (char *)realloc(v6, v11);
      *a2 = v6;
      if (!v6)
        abort();
      v7 = a2[1];
    }
    memcpy(&v7[(_QWORD)v6], v5, v4);
    a2[1] += v4;
  }
  return llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 40), (uint64_t)a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
}

char *llvm::itanium_demangle::NewExpr::printLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  char *v41;
  size_t v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  char *result;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a1 + 56))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(char **)a2;
    if (v4 + 2 > v5)
    {
      v7 = v4 + 994;
      v8 = 2 * v5;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v8;
      *(_QWORD *)(a2 + 16) = v9;
      v6 = (char *)realloc(v6, v9);
      *(_QWORD *)a2 = v6;
      if (!v6)
        goto LABEL_88;
      v4 = *(_QWORD *)(a2 + 8);
    }
    *(_WORD *)&v6[v4] = 14906;
    v4 = *(_QWORD *)(a2 + 8) + 2;
    *(_QWORD *)(a2 + 8) = v4;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(char **)a2;
  if (v4 + 3 > v10)
  {
    v12 = v4 + 995;
    v13 = 2 * v10;
    if (v13 <= v12)
      v14 = v12;
    else
      v14 = v13;
    *(_QWORD *)(a2 + 16) = v14;
    v11 = (char *)realloc(v11, v14);
    *(_QWORD *)a2 = v11;
    if (!v11)
      goto LABEL_88;
    v4 = *(_QWORD *)(a2 + 8);
  }
  v15 = &v11[v4];
  v15[2] = 119;
  *(_WORD *)v15 = 25966;
  v16 = *(_QWORD *)(a2 + 8);
  v17 = v16 + 3;
  *(_QWORD *)(a2 + 8) = v16 + 3;
  if (*(_BYTE *)(a1 + 57))
  {
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(char **)a2;
    if (v16 + 5 > v18)
    {
      if (2 * v18 <= v16 + 997)
        v20 = v16 + 997;
      else
        v20 = 2 * v18;
      *(_QWORD *)(a2 + 16) = v20;
      v19 = (char *)realloc(v19, v20);
      *(_QWORD *)a2 = v19;
      if (!v19)
        goto LABEL_88;
      v17 = *(_QWORD *)(a2 + 8);
    }
    *(_WORD *)&v19[v17] = 23899;
    v17 = *(_QWORD *)(a2 + 8) + 2;
    *(_QWORD *)(a2 + 8) = v17;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    ++*(_DWORD *)(a2 + 32);
    v21 = v17 + 1;
    v22 = *(_QWORD *)(a2 + 16);
    v23 = *(char **)a2;
    if (v17 + 1 > v22)
    {
      v24 = v17 + 993;
      if (2 * v22 <= v24)
        v25 = v24;
      else
        v25 = 2 * v22;
      *(_QWORD *)(a2 + 16) = v25;
      v23 = (char *)realloc(v23, v25);
      *(_QWORD *)a2 = v23;
      if (!v23)
        goto LABEL_88;
      v17 = *(_QWORD *)(a2 + 8);
      v21 = v17 + 1;
    }
    *(_QWORD *)(a2 + 8) = v21;
    v23[v17] = 40;
    v26 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(a1 + 24))
    {
      v27 = 0;
      v28 = 1;
      while (1)
      {
        v29 = v26;
        if ((v28 & 1) == 0)
        {
          v30 = *(_QWORD *)(a2 + 16);
          v31 = *(char **)a2;
          if (v26 + 2 <= v30)
          {
            v34 = v26;
          }
          else
          {
            v32 = 2 * v30;
            if (v32 <= v26 + 994)
              v33 = v26 + 994;
            else
              v33 = v32;
            *(_QWORD *)(a2 + 16) = v33;
            v31 = (char *)realloc(v31, v33);
            *(_QWORD *)a2 = v31;
            if (!v31)
              goto LABEL_88;
            v34 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)&v31[v34] = 8236;
          v29 = *(_QWORD *)(a2 + 8) + 2;
          *(_QWORD *)(a2 + 8) = v29;
        }
        llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v27), a2, 18, 0);
        if (v29 == *(_QWORD *)(a2 + 8))
        {
          *(_QWORD *)(a2 + 8) = v26;
          if (++v27 == *(_QWORD *)(a1 + 24))
            break;
        }
        else
        {
          v28 = 0;
          v26 = *(_QWORD *)(a2 + 8);
          if (++v27 == *(_QWORD *)(a1 + 24))
            break;
        }
      }
    }
    --*(_DWORD *)(a2 + 32);
    v35 = v26 + 1;
    v36 = *(_QWORD *)(a2 + 16);
    v37 = *(char **)a2;
    if (v26 + 1 > v36)
    {
      v38 = 2 * v36;
      if (v38 <= v26 + 993)
        v39 = v26 + 993;
      else
        v39 = v38;
      *(_QWORD *)(a2 + 16) = v39;
      v37 = (char *)realloc(v37, v39);
      *(_QWORD *)a2 = v37;
      if (!v37)
        goto LABEL_88;
      v26 = *(_QWORD *)(a2 + 8);
      v35 = v26 + 1;
    }
    *(_QWORD *)(a2 + 8) = v35;
    v37[v26] = 41;
    v17 = *(_QWORD *)(a2 + 8);
  }
  v40 = *(_QWORD *)(a2 + 16);
  v41 = *(char **)a2;
  if (v17 + 1 > v40)
  {
    v42 = v17 + 993;
    v43 = 2 * v40;
    if (v43 <= v42)
      v44 = v42;
    else
      v44 = v43;
    *(_QWORD *)(a2 + 16) = v44;
    v41 = (char *)realloc(v41, v44);
    *(_QWORD *)a2 = v41;
    if (!v41)
      goto LABEL_88;
    v17 = *(_QWORD *)(a2 + 8);
  }
  v41[v17] = 32;
  ++*(_QWORD *)(a2 + 8);
  v45 = *(_QWORD *)(a1 + 32);
  result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 32))(v45, a2);
  if ((*(_WORD *)(v45 + 9) & 0xC0) != 0x40)
    result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 40))(v45, a2);
  if (*(_QWORD *)(a1 + 48))
  {
    ++*(_DWORD *)(a2 + 32);
    v47 = *(char **)a2;
    v48 = *(_QWORD *)(a2 + 8);
    v49 = v48 + 1;
    v50 = *(_QWORD *)(a2 + 16);
    if (v48 + 1 > v50)
    {
      v51 = v48 + 993;
      if (2 * v50 <= v51)
        v52 = v51;
      else
        v52 = 2 * v50;
      *(_QWORD *)(a2 + 16) = v52;
      v47 = (char *)realloc(v47, v52);
      *(_QWORD *)a2 = v47;
      if (!v47)
        goto LABEL_88;
      v48 = *(_QWORD *)(a2 + 8);
      v49 = v48 + 1;
    }
    *(_QWORD *)(a2 + 8) = v49;
    v47[v48] = 40;
    v53 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(a1 + 48))
    {
      v54 = 0;
      v55 = 1;
      while (1)
      {
        v56 = v53;
        if ((v55 & 1) == 0)
        {
          v57 = *(_QWORD *)(a2 + 16);
          v58 = *(char **)a2;
          if (v53 + 2 <= v57)
          {
            v61 = v53;
          }
          else
          {
            v59 = 2 * v57;
            if (v59 <= v53 + 994)
              v60 = v53 + 994;
            else
              v60 = v59;
            *(_QWORD *)(a2 + 16) = v60;
            v58 = (char *)realloc(v58, v60);
            *(_QWORD *)a2 = v58;
            if (!v58)
              goto LABEL_88;
            v61 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)&v58[v61] = 8236;
          v56 = *(_QWORD *)(a2 + 8) + 2;
          *(_QWORD *)(a2 + 8) = v56;
        }
        llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v54), a2, 18, 0);
        if (v56 == *(_QWORD *)(a2 + 8))
        {
          *(_QWORD *)(a2 + 8) = v53;
          if (++v54 == *(_QWORD *)(a1 + 48))
            break;
        }
        else
        {
          v55 = 0;
          v53 = *(_QWORD *)(a2 + 8);
          if (++v54 == *(_QWORD *)(a1 + 48))
            break;
        }
      }
    }
    --*(_DWORD *)(a2 + 32);
    v62 = v53 + 1;
    v63 = *(_QWORD *)(a2 + 16);
    result = *(char **)a2;
    if (v53 + 1 <= v63)
      goto LABEL_86;
    v64 = 2 * v63;
    if (v64 <= v53 + 993)
      v65 = v53 + 993;
    else
      v65 = v64;
    *(_QWORD *)(a2 + 16) = v65;
    result = (char *)realloc(result, v65);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v53 = *(_QWORD *)(a2 + 8);
      v62 = v53 + 1;
LABEL_86:
      *(_QWORD *)(a2 + 8) = v62;
      result[v53] = 41;
      return result;
    }
LABEL_88:
    abort();
  }
  return result;
}

uint64_t llvm::itanium_demangle::DeleteExpr::printLeft(uint64_t a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t result;

  v4 = (uint64_t)a2[1];
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = (unint64_t)a2[2];
    v6 = *a2;
    if (v4 + 2 > v5)
    {
      v7 = v4 + 994;
      v8 = 2 * v5;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v8;
      a2[2] = (char *)v9;
      v6 = (char *)realloc(v6, v9);
      *a2 = v6;
      if (!v6)
        goto LABEL_31;
      v4 = (uint64_t)a2[1];
    }
    *(_WORD *)&v6[v4] = 14906;
    v4 = (uint64_t)(a2[1] + 2);
    a2[1] = (char *)v4;
  }
  v10 = (unint64_t)a2[2];
  v11 = *a2;
  if (v4 + 6 > v10)
  {
    v12 = v4 + 998;
    v13 = 2 * v10;
    if (v13 <= v12)
      v14 = v12;
    else
      v14 = v13;
    a2[2] = (char *)v14;
    v11 = (char *)realloc(v11, v14);
    *a2 = v11;
    if (!v11)
      goto LABEL_31;
    v4 = (uint64_t)a2[1];
  }
  v15 = &v11[v4];
  *((_WORD *)v15 + 2) = 25972;
  *(_DWORD *)v15 = 1701602660;
  v16 = a2[1];
  v17 = (uint64_t)(v16 + 6);
  a2[1] = v16 + 6;
  if (*(_BYTE *)(a1 + 25))
  {
    v18 = (unint64_t)a2[2];
    v19 = *a2;
    if ((unint64_t)(v16 + 8) > v18)
    {
      if (2 * v18 <= (unint64_t)(v16 + 1000))
        v20 = (size_t)(v16 + 1000);
      else
        v20 = 2 * v18;
      a2[2] = (char *)v20;
      v19 = (char *)realloc(v19, v20);
      *a2 = v19;
      if (!v19)
        goto LABEL_31;
      v17 = (uint64_t)a2[1];
    }
    *(_WORD *)&v19[v17] = 23899;
    v17 = (uint64_t)(a2[1] + 2);
    a2[1] = (char *)v17;
  }
  v21 = v17 + 1;
  v22 = (unint64_t)a2[2];
  v23 = *a2;
  if (v17 + 1 <= v22)
    goto LABEL_29;
  v24 = v17 + 993;
  if (2 * v22 <= v24)
    v25 = v24;
  else
    v25 = 2 * v22;
  a2[2] = (char *)v25;
  v23 = (char *)realloc(v23, v25);
  *a2 = v23;
  if (!v23)
LABEL_31:
    abort();
  v17 = (uint64_t)a2[1];
  v21 = v17 + 1;
LABEL_29:
  a2[1] = (char *)v21;
  v23[v17] = 32;
  v26 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v26 + 32))(v26, a2);
  if ((*(_WORD *)(v26 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v26 + 40))(v26, a2);
  return result;
}

char *llvm::itanium_demangle::CallExpr::printLeft(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *result;
  unint64_t v23;
  size_t v24;

  v4 = a1[2];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  ++*(_DWORD *)(a2 + 32);
  v5 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(a2 + 16);
  if (v6 + 1 > v8)
  {
    v9 = v6 + 993;
    if (2 * v8 <= v9)
      v10 = v9;
    else
      v10 = 2 * v8;
    *(_QWORD *)(a2 + 16) = v10;
    v5 = (char *)realloc(v5, v10);
    *(_QWORD *)a2 = v5;
    if (!v5)
      goto LABEL_30;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = v6 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v5[v6] = 40;
  v11 = *(_QWORD *)(a2 + 8);
  if (a1[4])
  {
    v12 = 0;
    v13 = 1;
    while (1)
    {
      v14 = v11;
      if ((v13 & 1) == 0)
      {
        v15 = *(_QWORD *)(a2 + 16);
        v16 = *(char **)a2;
        if (v11 + 2 <= v15)
        {
          v19 = v11;
        }
        else
        {
          v17 = 2 * v15;
          if (v17 <= v11 + 994)
            v18 = v11 + 994;
          else
            v18 = v17;
          *(_QWORD *)(a2 + 16) = v18;
          v16 = (char *)realloc(v16, v18);
          *(_QWORD *)a2 = v16;
          if (!v16)
            goto LABEL_30;
          v19 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v16[v19] = 8236;
        v14 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v14;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1[3] + 8 * v12), a2, 18, 0);
      if (v14 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v11;
        if (++v12 == a1[4])
          break;
      }
      else
      {
        v13 = 0;
        v11 = *(_QWORD *)(a2 + 8);
        if (++v12 == a1[4])
          break;
      }
    }
  }
  --*(_DWORD *)(a2 + 32);
  v20 = v11 + 1;
  v21 = *(_QWORD *)(a2 + 16);
  result = *(char **)a2;
  if (v11 + 1 > v21)
  {
    v23 = 2 * v21;
    if (v23 <= v11 + 993)
      v24 = v11 + 993;
    else
      v24 = v23;
    *(_QWORD *)(a2 + 16) = v24;
    result = (char *)realloc(result, v24);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v11 = *(_QWORD *)(a2 + 8);
      v20 = v11 + 1;
      goto LABEL_29;
    }
LABEL_30:
    abort();
  }
LABEL_29:
  *(_QWORD *)(a2 + 8) = v20;
  result[v11] = 41;
  return result;
}

char *llvm::itanium_demangle::ConversionExpr::printLeft(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *result;
  unint64_t v35;
  size_t v36;

  ++*(_DWORD *)(a2 + 32);
  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v7)
  {
    v8 = v5 + 993;
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_42;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v4[v5] = 40;
  v10 = a1[2];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a2);
  --*(_DWORD *)(a2 + 32);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(a2 + 16);
  if (v12 + 1 > v14)
  {
    v15 = v12 + 993;
    if (2 * v14 <= v15)
      v16 = v15;
    else
      v16 = 2 * v14;
    *(_QWORD *)(a2 + 16) = v16;
    v11 = (char *)realloc(v11, v16);
    *(_QWORD *)a2 = v11;
    if (!v11)
      goto LABEL_42;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = v12 + 1;
  }
  *(_QWORD *)(a2 + 8) = v13;
  v11[v12] = 41;
  ++*(_DWORD *)(a2 + 32);
  v17 = *(char **)a2;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  v20 = *(_QWORD *)(a2 + 16);
  if (v18 + 1 > v20)
  {
    v21 = v18 + 993;
    if (2 * v20 <= v21)
      v22 = v21;
    else
      v22 = 2 * v20;
    *(_QWORD *)(a2 + 16) = v22;
    v17 = (char *)realloc(v17, v22);
    *(_QWORD *)a2 = v17;
    if (!v17)
      goto LABEL_42;
    v18 = *(_QWORD *)(a2 + 8);
    v19 = v18 + 1;
  }
  *(_QWORD *)(a2 + 8) = v19;
  v17[v18] = 40;
  v23 = *(_QWORD *)(a2 + 8);
  if (a1[4])
  {
    v24 = 0;
    v25 = 1;
    while (1)
    {
      v26 = v23;
      if ((v25 & 1) == 0)
      {
        v27 = *(_QWORD *)(a2 + 16);
        v28 = *(char **)a2;
        if (v23 + 2 <= v27)
        {
          v31 = v23;
        }
        else
        {
          v29 = 2 * v27;
          if (v29 <= v23 + 994)
            v30 = v23 + 994;
          else
            v30 = v29;
          *(_QWORD *)(a2 + 16) = v30;
          v28 = (char *)realloc(v28, v30);
          *(_QWORD *)a2 = v28;
          if (!v28)
            goto LABEL_42;
          v31 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v28[v31] = 8236;
        v26 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v26;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1[3] + 8 * v24), a2, 18, 0);
      if (v26 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v23;
        if (++v24 == a1[4])
          break;
      }
      else
      {
        v25 = 0;
        v23 = *(_QWORD *)(a2 + 8);
        if (++v24 == a1[4])
          break;
      }
    }
  }
  --*(_DWORD *)(a2 + 32);
  v32 = v23 + 1;
  v33 = *(_QWORD *)(a2 + 16);
  result = *(char **)a2;
  if (v23 + 1 > v33)
  {
    v35 = 2 * v33;
    if (v35 <= v23 + 993)
      v36 = v23 + 993;
    else
      v36 = v35;
    *(_QWORD *)(a2 + 16) = v36;
    result = (char *)realloc(result, v36);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v23 = *(_QWORD *)(a2 + 8);
      v32 = v23 + 1;
      goto LABEL_41;
    }
LABEL_42:
    abort();
  }
LABEL_41:
  *(_QWORD *)(a2 + 8) = v32;
  result[v23] = 41;
  return result;
}

void *llvm::itanium_demangle::ConditionalExpr::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;

  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 16), (uint64_t)a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 3) > v6)
  {
    v7 = (size_t)(v5 + 995);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_14;
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  v10[2] = 32;
  *(_WORD *)v10 = 16160;
  a2[1] += 3;
  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 24), (uint64_t)a2, 19, 0);
  v11 = *a2;
  v12 = a2[1];
  v13 = (unint64_t)a2[2];
  if ((unint64_t)(v12 + 3) > v13)
  {
    v14 = (size_t)(v12 + 995);
    v15 = 2 * v13;
    if (v15 <= v14)
      v16 = v14;
    else
      v16 = v15;
    a2[2] = (char *)v16;
    v11 = (char *)realloc(v11, v16);
    *a2 = v11;
    if (v11)
    {
      v12 = a2[1];
      goto LABEL_13;
    }
LABEL_14:
    abort();
  }
LABEL_13:
  v17 = &v12[(_QWORD)v11];
  v17[2] = 32;
  *(_WORD *)v17 = 14880;
  a2[1] += 3;
  return llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 32), (uint64_t)a2, 17, 1);
}

char *llvm::itanium_demangle::CastExpr::printLeft(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *result;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v6 = *(const void **)(a1 + 16);
    v7 = v5 + v4;
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(char **)a2;
    if (v5 + v4 > v8)
    {
      if (2 * v8 <= v7 + 992)
        v10 = v7 + 992;
      else
        v10 = 2 * v8;
      *(_QWORD *)(a2 + 16) = v10;
      v9 = (char *)realloc(v9, v10);
      *(_QWORD *)a2 = v9;
      if (!v9)
        goto LABEL_34;
      v5 = *(_QWORD *)(a2 + 8);
    }
    memcpy(&v9[v5], v6, v4);
    v5 = *(_QWORD *)(a2 + 8) + v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
  v11 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(char **)a2;
  if (v5 + 1 > v12)
  {
    v14 = v5 + 993;
    v15 = 2 * v12;
    if (v15 <= v14)
      v16 = v14;
    else
      v16 = v15;
    *(_QWORD *)(a2 + 16) = v16;
    v13 = (char *)realloc(v13, v16);
    *(_QWORD *)a2 = v13;
    if (!v13)
      goto LABEL_34;
    v5 = *(_QWORD *)(a2 + 8);
  }
  v13[v5] = 60;
  ++*(_QWORD *)(a2 + 8);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), a2);
  v17 = *(char **)a2;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = *(_QWORD *)(a2 + 16);
  if (v18 + 1 > v19)
  {
    v20 = v18 + 993;
    v21 = 2 * v19;
    if (v21 <= v20)
      v22 = v20;
    else
      v22 = v21;
    *(_QWORD *)(a2 + 16) = v22;
    v17 = (char *)realloc(v17, v22);
    *(_QWORD *)a2 = v17;
    if (!v17)
      goto LABEL_34;
    v18 = *(_QWORD *)(a2 + 8);
  }
  v17[v18] = 62;
  v23 = *(char **)a2;
  v24 = *(_QWORD *)(a2 + 8);
  v25 = v24 + 1;
  *(_QWORD *)(a2 + 8) = v24 + 1;
  *(_DWORD *)(a2 + 32) = v11 + 1;
  v26 = v24 + 2;
  v27 = *(_QWORD *)(a2 + 16);
  if (v24 + 2 > v27)
  {
    if (2 * v27 <= v24 + 994)
      v28 = v24 + 994;
    else
      v28 = 2 * v27;
    *(_QWORD *)(a2 + 16) = v28;
    v23 = (char *)realloc(v23, v28);
    *(_QWORD *)a2 = v23;
    if (!v23)
      goto LABEL_34;
    v25 = *(_QWORD *)(a2 + 8);
    v26 = v25 + 1;
  }
  *(_QWORD *)(a2 + 8) = v26;
  v23[v25] = 40;
  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 40), a2, 19, 0);
  --*(_DWORD *)(a2 + 32);
  result = *(char **)a2;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = v30 + 1;
  v32 = *(_QWORD *)(a2 + 16);
  if (v30 + 1 > v32)
  {
    v33 = v30 + 993;
    if (2 * v32 <= v33)
      v34 = v33;
    else
      v34 = 2 * v32;
    *(_QWORD *)(a2 + 16) = v34;
    result = (char *)realloc(result, v34);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v30 = *(_QWORD *)(a2 + 8);
      v31 = v30 + 1;
      goto LABEL_33;
    }
LABEL_34:
    abort();
  }
LABEL_33:
  *(_QWORD *)(a2 + 8) = v31;
  result[v30] = 41;
  return result;
}

char *llvm::itanium_demangle::EnclosingExpr::printLeft(_QWORD *a1, char **a2)
{
  size_t v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  char *result;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  size_t v23;
  const void *v24;
  char *v25;
  char *v26;
  char *v27;
  size_t v28;
  unint64_t v29;
  size_t v30;

  v4 = a1[3];
  v5 = (size_t)a2[1];
  if (v4)
  {
    v6 = (const void *)a1[2];
    v7 = v5 + v4;
    v8 = (size_t)a2[2];
    v9 = *a2;
    if (v5 + v4 > v8)
    {
      if (2 * v8 <= v7 + 992)
        v10 = v7 + 992;
      else
        v10 = 2 * v8;
      a2[2] = (char *)v10;
      v9 = (char *)realloc(v9, v10);
      *a2 = v9;
      if (!v9)
        goto LABEL_32;
      v5 = (size_t)a2[1];
    }
    memcpy(&v9[v5], v6, v4);
    v5 = (size_t)&a2[1][v4];
    a2[1] = (char *)v5;
  }
  ++*((_DWORD *)a2 + 8);
  v11 = v5 + 1;
  v12 = (unint64_t)a2[2];
  v13 = *a2;
  if (v5 + 1 > v12)
  {
    v14 = v5 + 993;
    if (2 * v12 <= v14)
      v15 = v14;
    else
      v15 = 2 * v12;
    a2[2] = (char *)v15;
    v13 = (char *)realloc(v13, v15);
    *a2 = v13;
    if (!v13)
      goto LABEL_32;
    v5 = (size_t)a2[1];
    v11 = v5 + 1;
  }
  a2[1] = (char *)v11;
  v13[v5] = 40;
  v16 = a1[4];
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, a2);
  if ((*(_WORD *)(v16 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v16 + 40))(v16, a2);
  --*((_DWORD *)a2 + 8);
  result = *a2;
  v18 = a2[1];
  v19 = v18 + 1;
  v20 = (unint64_t)a2[2];
  if ((unint64_t)(v18 + 1) > v20)
  {
    v21 = (unint64_t)(v18 + 993);
    if (2 * v20 <= v21)
      v22 = v21;
    else
      v22 = 2 * v20;
    a2[2] = (char *)v22;
    result = (char *)realloc(result, v22);
    *a2 = result;
    if (!result)
      goto LABEL_32;
    v18 = a2[1];
    v19 = v18 + 1;
  }
  a2[1] = v19;
  v18[(_QWORD)result] = 41;
  v23 = a1[6];
  if (!v23)
    return result;
  v24 = (const void *)a1[5];
  v25 = *a2;
  v26 = a2[1];
  v27 = &v26[v23];
  v28 = (size_t)a2[2];
  if ((unint64_t)&v26[v23] > v28)
  {
    v29 = 2 * v28;
    if (v29 <= (unint64_t)(v27 + 992))
      v30 = (size_t)(v27 + 992);
    else
      v30 = v29;
    a2[2] = (char *)v30;
    v25 = (char *)realloc(v25, v30);
    *a2 = v25;
    if (v25)
    {
      v26 = a2[1];
      goto LABEL_30;
    }
LABEL_32:
    abort();
  }
LABEL_30:
  result = (char *)memcpy(&v26[(_QWORD)v25], v24, v23);
  a2[1] += v23;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseIntegerLiteral(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_BYTE **)a1;
  v3 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)a1 == v3)
    return 0;
  v8 = *(_BYTE **)a1;
  if (*v4 == 110)
  {
    v8 = v4 + 1;
    *(_QWORD *)a1 = v4 + 1;
  }
  if (v3 == v8 || (char)*v8 < 0)
    return 0;
  v9 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v8 + 60) & 0x400) == 0)
    return 0;
  while (((char)*v8 & 0x80000000) == 0 && (*(_DWORD *)(v9 + 4 * *v8 + 60) & 0x400) != 0)
  {
    *(_QWORD *)a1 = ++v8;
    if (v8 == v3)
    {
      v8 = v3;
      break;
    }
  }
  result = 0;
  v11 = v8 - v4;
  if (v8 != v4 && v8 != v3)
  {
    if (*v8 == 69)
    {
      *(_QWORD *)a1 = v8 + 1;
      v12 = *(_QWORD **)(a1 + 4904);
      v13 = v12[1];
      if ((unint64_t)(v13 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v14 = malloc(0x1000uLL);
        if (!v14)
          std::terminate();
        v13 = 0;
        *v14 = v12;
        v14[1] = 0;
        v12 = v14;
        *(_QWORD *)(a1 + 4904) = v14;
      }
      *(_QWORD *)((char *)v12 + v13 + 16) = &unk_1E0E21780;
      result = (uint64_t)v12 + v13 + 16;
      v12[1] = v13 + 48;
      *(_BYTE *)(result + 8) = 77;
      *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v12 + v13 + 25) & 0xF000 | 0x540;
      *(_QWORD *)(result + 16) = a2;
      *(_QWORD *)(result + 24) = a3;
      *(_QWORD *)(result + 32) = v4;
      *(_QWORD *)(result + 40) = v11;
      return result;
    }
    return 0;
  }
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::BoolExpr,int>(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4064) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v7 = v4 + 16;
  v3[1] = v7;
  result = (char *)v3 + v7;
  result[8] = 73;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *(_QWORD *)result = &unk_1E0E225F0;
  result[11] = a2 != 0;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::StringLiteral,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E21678;
  result = v7 + 16;
  result[8] = 74;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v8;
  return result;
}

unsigned __int8 *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseUnnamedTypeName(unsigned __int8 **a1, size_t __size)
{
  char *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int64_t v41;
  unsigned __int8 *v42;
  size_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  char v46;
  uint64_t v47;
  unsigned __int8 **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  size_t v57;
  char *v58;
  char *v59;
  unsigned __int8 *v60;
  char v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  int64_t v66;
  char *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __n128 v74;
  unsigned __int8 **v75;
  uint64_t v76;
  void *v77[3];
  _OWORD v78[4];
  uint64_t v79;

  if (__size)
    a1[84] = a1[83];
  v4 = *a1;
  v3 = (char *)a1[1];
  if ((unint64_t)(v3 - (char *)*a1) < 2)
    return 0;
  if (*(_WORD *)v4 == 29781)
  {
    v13 = (char *)(v4 + 2);
    *a1 = (unsigned __int8 *)v13;
    if (v3 != v13)
    {
      if ((*v13 & 0x80000000) == 0
        && (v14 = MEMORY[0x1E0C80978], (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v13 + 60) & 0x400) != 0))
      {
        v23 = v13;
        while ((*v23 & 0x80000000) == 0 && (*(_DWORD *)(v14 + 4 * *v23 + 60) & 0x400) != 0)
        {
          *a1 = (unsigned __int8 *)++v23;
          if (v23 == v3)
          {
            v23 = v3;
            break;
          }
        }
        v15 = v13;
        v16 = v23 - v13;
        v13 = v23;
        if (v23 == v3)
          return 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        if (v13 == v3)
          return 0;
      }
      if (*v13 == 95)
      {
        *a1 = (unsigned __int8 *)(v13 + 1);
        v24 = a1[613];
        v25 = *((_QWORD *)v24 + 1);
        if ((unint64_t)(v25 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
        {
          v26 = (unsigned __int8 *)malloc(0x1000uLL);
          if (!v26)
            goto LABEL_114;
          v25 = 0;
          *(_QWORD *)v26 = v24;
          *((_QWORD *)v26 + 1) = 0;
          v24 = v26;
          a1[613] = v26;
        }
        *((_QWORD *)v24 + 1) = v25 + 32;
        v27 = &v24[v25];
        *((_QWORD *)v27 + 2) = &unk_1E0E21A98;
        v5 = v27 + 16;
        v5[8] = 51;
        *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
        *((_QWORD *)v5 + 2) = v15;
        *((_QWORD *)v5 + 3) = v16;
        return v5;
      }
    }
    return 0;
  }
  if (*(_WORD *)v4 != 27733)
  {
    if (*(_WORD *)v4 != 25173)
      return 0;
    v7 = (char *)(v4 + 2);
    *a1 = (unsigned __int8 *)v7;
    if (v3 == v7)
      return 0;
    if ((*v7 & 0x80000000) == 0)
    {
      v8 = MEMORY[0x1E0C80978];
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v7 + 60) & 0x400) != 0)
      {
        while ((*v7 & 0x80000000) == 0 && (*(_DWORD *)(v8 + 4 * *v7 + 60) & 0x400) != 0)
        {
          v5 = 0;
          *a1 = (unsigned __int8 *)++v7;
          if (v7 == v3)
            return v5;
        }
      }
    }
    if (v7 == v3 || *v7 != 95)
      return 0;
    *a1 = (unsigned __int8 *)(v7 + 1);
    v9 = a1[613];
    v10 = *((_QWORD *)v9 + 1);
    if ((unint64_t)(v10 - 4048) > 0xFFFFFFFFFFFFF00FLL)
    {
LABEL_17:
      *((_QWORD *)v9 + 1) = v10 + 32;
      v12 = &v9[v10];
      *((_QWORD *)v12 + 2) = &unk_1E0E227A8;
      v5 = v12 + 16;
      v5[8] = 8;
      *(_WORD *)(v5 + 9) = *(_WORD *)(v5 + 9) & 0xF000 | 0x540;
      *((_QWORD *)v5 + 2) = "'block-literal'";
      *((_QWORD *)v5 + 3) = 15;
      return v5;
    }
    v11 = (unsigned __int8 *)malloc(0x1000uLL);
    if (v11)
    {
      v10 = 0;
      *(_QWORD *)v11 = v9;
      *((_QWORD *)v11 + 1) = 0;
      v9 = v11;
      a1[613] = v11;
      goto LABEL_17;
    }
LABEL_114:
    std::terminate();
  }
  *a1 = v4 + 2;
  v17 = a1[84];
  v18 = a1[83];
  v19 = v17 - v18;
  v20 = (v17 - v18) >> 3;
  v21 = a1[98];
  a1[98] = (unsigned __int8 *)v20;
  v75 = a1;
  v76 = v20;
  v77[0] = v78;
  v77[1] = v78;
  v69 = v21;
  v77[2] = &v79;
  memset(v78, 0, sizeof(v78));
  if (v17 == a1[85])
  {
    if (v18 == (unsigned __int8 *)(a1 + 86))
    {
      v28 = (unsigned __int8 *)malloc(2 * v19);
      if (!v28)
        goto LABEL_113;
      v22 = v28;
      if (v17 != v18)
        memmove(v28, v18, v17 - v18);
      a1[83] = v22;
    }
    else
    {
      v22 = (unsigned __int8 *)realloc(v18, 2 * v19);
      a1[83] = v22;
      if (!v22)
LABEL_113:
        abort();
    }
    v17 = &v22[8 * v20];
    a1[85] = &v22[8 * (v19 >> 2)];
  }
  a1[84] = v17 + 8;
  *(_QWORD *)v17 = v77;
  v29 = a1[2];
  v30 = a1[3];
  v31 = *a1;
  v32 = a1[1] - *a1;
  if (v32)
  {
    v33 = a1 + 5;
    do
    {
      if (*v31 != 84)
        break;
      v36 = v32 < 2 ? 0 : (char)v31[1];
      v37 = memchr("yptnk", v36, 5uLL);
      if (!v37 || v37 - "yptnk" == -1)
        break;
      if (!v38)
        goto LABEL_99;
      v39 = v38;
      v35 = a1[3];
      if (v35 == a1[4])
      {
        v40 = a1[2];
        v41 = v35 - v40;
        if (v40 == (unsigned __int8 *)v33)
        {
          v42 = (unsigned __int8 *)malloc(2 * (v35 - v40));
          if (!v42)
            goto LABEL_113;
          v34 = v42;
          if (v35 != (unsigned __int8 *)v33)
            memcpy(v42, a1 + 5, v41);
          a1[2] = v34;
        }
        else
        {
          v34 = (unsigned __int8 *)realloc(v40, 2 * (v35 - v40));
          a1[2] = v34;
          if (!v34)
            goto LABEL_113;
        }
        v35 = &v34[8 * (v41 >> 3)];
        a1[4] = &v34[8 * (v41 >> 2)];
      }
      a1[3] = v35 + 8;
      *(_QWORD *)v35 = v39;
      v31 = *a1;
      v32 = a1[1] - *a1;
    }
    while (v32);
  }
  v74.n128_u64[1] = v43;
  if (!v43)
    a1[84] -= 8;
  v73 = 0;
  v44 = *a1;
  v45 = a1[1];
  if (*a1 == v45)
    goto LABEL_74;
  if (*v44 == 81)
  {
    *a1 = v44 + 1;
    v46 = *((_BYTE *)a1 + 778);
    *((_BYTE *)a1 + 778) = 1;
    *((_BYTE *)a1 + 778) = v46;
    v73 = v47;
    if (!v47)
      goto LABEL_99;
    v44 = *a1;
    v45 = a1[1];
  }
  if (v45 == v44 || *v44 != 118)
  {
LABEL_74:
    v48 = a1 + 5;
    while (1)
    {
      if (!v50)
        goto LABEL_99;
      v51 = v50;
      v52 = a1[3];
      if (v52 == a1[4])
      {
        v53 = a1[2];
        v54 = v52 - v53;
        if (v53 == (unsigned __int8 *)v48)
        {
          v56 = (unsigned __int8 *)malloc(2 * (v52 - v53));
          if (!v56)
            goto LABEL_113;
          v55 = v56;
          if (v52 != (unsigned __int8 *)v48)
            memcpy(v56, a1 + 5, v54);
          a1[2] = v55;
        }
        else
        {
          v55 = (unsigned __int8 *)realloc(v53, 2 * (v52 - v53));
          a1[2] = v55;
          if (!v55)
            goto LABEL_113;
        }
        v52 = &v55[8 * (v54 >> 3)];
        a1[4] = &v55[8 * (v54 >> 2)];
      }
      a1[3] = v52 + 8;
      *(_QWORD *)v52 = v51;
      if (a1[1] == *a1)
      {
        v49 = 0;
      }
      else
      {
        v49 = **a1;
        if (v49 == 69)
          goto LABEL_89;
      }
      if (v49 == 81)
        goto LABEL_89;
    }
  }
  *a1 = v44 + 1;
LABEL_89:
  *((_QWORD *)&v72 + 1) = v57;
  v71 = 0;
  v59 = (char *)*a1;
  v58 = (char *)a1[1];
  if (*a1 != (unsigned __int8 *)v58)
  {
    v60 = v69;
    if (*v59 == 81)
    {
      *a1 = (unsigned __int8 *)(v59 + 1);
      v61 = *((_BYTE *)a1 + 778);
      *((_BYTE *)a1 + 778) = 1;
      *((_BYTE *)a1 + 778) = v61;
      v71 = v62;
      if (!v62)
        goto LABEL_109;
      v59 = (char *)*a1;
      v58 = (char *)a1[1];
    }
    if (v59 != v58 && *v59 == 69)
    {
      v63 = v59 + 1;
      *a1 = (unsigned __int8 *)v63;
      if (v58 != v63)
      {
        if ((*v63 & 0x80000000) == 0
          && (v64 = MEMORY[0x1E0C80978],
              (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v63 + 60) & 0x400) != 0))
        {
          v67 = v63;
          while ((*v67 & 0x80000000) == 0 && (*(_DWORD *)(v64 + 4 * *v67 + 60) & 0x400) != 0)
          {
            *a1 = (unsigned __int8 *)++v67;
            if (v67 == v58)
            {
              v67 = v58;
              break;
            }
          }
          v65 = v63;
          v66 = v67 - v63;
          v63 = v67;
        }
        else
        {
          v65 = 0;
          v66 = 0;
        }
        *(_QWORD *)&v70 = v65;
        *((_QWORD *)&v70 + 1) = v66;
        if (v63 != v58 && *v63 == 95)
        {
          *a1 = (unsigned __int8 *)(v63 + 1);
          v5 = v68;
          goto LABEL_110;
        }
      }
    }
LABEL_109:
    v5 = 0;
    goto LABEL_110;
  }
LABEL_99:
  v5 = 0;
  v60 = v69;
LABEL_110:
  v75[84] = &v75[83][8 * v76];
  if (v77[0] != v78)
    free(v77[0]);
  a1[98] = v60;
  return v5;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::LambdaExpr,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E20D88;
  result = v7 + 16;
  result[8] = 75;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v8;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::EnumLiteral,llvm::itanium_demangle::Node *&,std::string_view &>(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 48;
  *(_QWORD *)((char *)v5 + v6 + 16) = &unk_1E0E20F98;
  v9 = (uint64_t)v5 + v6 + 16;
  v10 = *a2;
  *(_BYTE *)(v9 + 8) = 76;
  result = *a3;
  *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
  *(_QWORD *)(v9 + 16) = v10;
  *(__n128 *)(v9 + 24) = result;
  return result;
}

_QWORD *llvm::itanium_demangle::IntegerLiteral::printLeft(_QWORD *result, char **a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  const void *v12;
  size_t v13;
  size_t v14;
  char *v15;
  size_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  size_t v33;
  size_t v34;
  unint64_t v35;
  size_t v36;
  const void *v37;
  char *v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  char *v42;
  size_t v43;
  size_t v44;
  const void *v45;
  char *v46;
  char *v47;
  char *v48;
  size_t v49;
  unint64_t v50;
  size_t v51;

  v3 = result;
  if (result[3] >= 4uLL)
  {
    ++*((_DWORD *)a2 + 8);
    v4 = *a2;
    v5 = a2[1];
    v6 = v5 + 1;
    v7 = (unint64_t)a2[2];
    if ((unint64_t)(v5 + 1) > v7)
    {
      v8 = (unint64_t)(v5 + 993);
      if (2 * v7 <= v8)
        v9 = v8;
      else
        v9 = 2 * v7;
      a2[2] = (char *)v9;
      v4 = (char *)realloc(v4, v9);
      *a2 = v4;
      if (!v4)
        goto LABEL_57;
      v5 = a2[1];
      v6 = v5 + 1;
    }
    a2[1] = v6;
    v5[(_QWORD)v4] = 40;
    v10 = v3[3];
    v11 = (size_t)a2[1];
    if (v10)
    {
      v12 = (const void *)v3[2];
      v13 = v11 + v10;
      v14 = (size_t)a2[2];
      v15 = *a2;
      if (v11 + v10 > v14)
      {
        if (2 * v14 <= v13 + 992)
          v16 = v13 + 992;
        else
          v16 = 2 * v14;
        a2[2] = (char *)v16;
        v15 = (char *)realloc(v15, v16);
        *a2 = v15;
        if (!v15)
          goto LABEL_57;
        v11 = (size_t)a2[1];
      }
      memcpy(&v15[v11], v12, v10);
      v11 = (size_t)&a2[1][v10];
      a2[1] = (char *)v11;
    }
    --*((_DWORD *)a2 + 8);
    v17 = v11 + 1;
    v18 = (unint64_t)a2[2];
    result = *a2;
    if (v11 + 1 > v18)
    {
      v19 = v11 + 993;
      if (2 * v18 <= v19)
        v20 = v19;
      else
        v20 = 2 * v18;
      a2[2] = (char *)v20;
      result = realloc(result, v20);
      *a2 = (char *)result;
      if (!result)
        goto LABEL_57;
      v11 = (size_t)a2[1];
      v17 = v11 + 1;
    }
    a2[1] = (char *)v17;
    *((_BYTE *)result + v11) = 41;
  }
  v21 = (_BYTE *)v3[4];
  if (*v21 == 110)
  {
    v23 = (uint64_t *)(a2 + 1);
    v22 = (uint64_t)a2[1];
    v24 = v22 + 1;
    v25 = (unint64_t)a2[2];
    result = *a2;
    if (v22 + 1 > v25)
    {
      v26 = v22 + 993;
      if (2 * v25 <= v26)
        v27 = v26;
      else
        v27 = 2 * v25;
      a2[2] = (char *)v27;
      result = realloc(result, v27);
      *a2 = (char *)result;
      if (!result)
        goto LABEL_57;
      v22 = *v23;
      v24 = *v23 + 1;
    }
    *v23 = v24;
    *((_BYTE *)result + v22) = 45;
    v28 = v3[5];
    v29 = v28 - 1;
    if (v28 != 1)
    {
      v30 = v3[4];
      v31 = *a2;
      v32 = (uint64_t)a2[1];
      v33 = v32 + v29;
      v34 = (size_t)a2[2];
      if (v32 + v29 > v34)
      {
        v35 = 2 * v34;
        if (v35 <= v33 + 992)
          v36 = v33 + 992;
        else
          v36 = v35;
        a2[2] = (char *)v36;
        v31 = (char *)realloc(v31, v36);
        *a2 = v31;
        if (!v31)
          goto LABEL_57;
        v32 = *v23;
      }
      v37 = (const void *)(v30 + 1);
      v38 = &v31[v32];
LABEL_46:
      result = memcpy(v38, v37, v29);
      *v23 += v29;
    }
  }
  else
  {
    v29 = v3[5];
    if (v29)
    {
      v23 = (uint64_t *)(a2 + 1);
      v39 = (uint64_t)a2[1];
      v40 = v39 + v29;
      v41 = (size_t)a2[2];
      v42 = *a2;
      if (v39 + v29 > v41)
      {
        if (2 * v41 <= v40 + 992)
          v43 = v40 + 992;
        else
          v43 = 2 * v41;
        a2[2] = (char *)v43;
        v42 = (char *)realloc(v42, v43);
        *a2 = v42;
        if (!v42)
          goto LABEL_57;
        v39 = *v23;
      }
      v38 = &v42[v39];
      v37 = v21;
      goto LABEL_46;
    }
  }
  v44 = v3[3];
  if (v44 <= 3 && v44)
  {
    v45 = (const void *)v3[2];
    v46 = *a2;
    v47 = a2[1];
    v48 = &v47[v44];
    v49 = (size_t)a2[2];
    if ((unint64_t)&v47[v44] <= v49)
    {
LABEL_55:
      result = memcpy(&v47[(_QWORD)v46], v45, v44);
      a2[1] += v44;
      return result;
    }
    v50 = 2 * v49;
    if (v50 <= (unint64_t)(v48 + 992))
      v51 = (size_t)(v48 + 992);
    else
      v51 = v50;
    a2[2] = (char *)v51;
    v46 = (char *)realloc(v46, v51);
    *a2 = v46;
    if (v46)
    {
      v47 = a2[1];
      goto LABEL_55;
    }
LABEL_57:
    abort();
  }
  return result;
}

void *llvm::itanium_demangle::BoolExpr::printLeft(uint64_t a1, char **a2)
{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  const char *v11;
  void *result;

  v3 = *(unsigned __int8 *)(a1 + 11);
  if (*(_BYTE *)(a1 + 11))
    v4 = 4;
  else
    v4 = 5;
  v5 = *a2;
  v6 = a2[1];
  v7 = &v6[v4];
  v8 = (size_t)a2[2];
  if ((unint64_t)&v6[v4] > v8)
  {
    v9 = 2 * v8;
    if (v9 <= (unint64_t)(v7 + 992))
      v10 = (size_t)(v7 + 992);
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      abort();
    v6 = a2[1];
  }
  if (v3)
    v11 = "true";
  else
    v11 = "false";
  result = memcpy(&v6[(_QWORD)v5], v11, v4);
  a2[1] += v4;
  return result;
}

void *llvm::itanium_demangle::FloatLiteralImpl<float>::printLeft(void *result, char **a2)
{
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  char *v21;
  char v22;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  size_t v28;
  unint64_t v29;
  size_t v30;
  float v31;
  char __str[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)result + 3) < 8uLL)
    return result;
  v3 = (char *)*((_QWORD *)result + 2);
  v4 = *v3;
  if ((*v3 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x400) != 0)
  {
    v5 = v4 - 48;
    v6 = v3[1];
    if (v3[1] < 0)
      goto LABEL_8;
  }
  else
  {
    v5 = v4 - 87;
    v6 = v3[1];
    if (v3[1] < 0)
    {
LABEL_8:
      LOBYTE(v31) = v6 - 87 + 16 * v5;
      v7 = v3[2];
      if (v3[2] < 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x400) == 0)
    goto LABEL_8;
  LOBYTE(v31) = v6 - 48 + 16 * v5;
  v7 = v3[2];
  if (v3[2] < 0)
    goto LABEL_12;
LABEL_11:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v7 + 60) & 0x400) != 0)
  {
    v8 = v7 - 48;
    v9 = v3[3];
    if (v3[3] < 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_12:
  v8 = v7 - 87;
  v9 = v3[3];
  if (v3[3] < 0)
  {
LABEL_16:
    BYTE1(v31) = v9 - 87 + 16 * v8;
    v10 = v3[4];
    if (v3[4] < 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_15:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x400) == 0)
    goto LABEL_16;
  BYTE1(v31) = v9 - 48 + 16 * v8;
  v10 = v3[4];
  if (v3[4] < 0)
    goto LABEL_20;
LABEL_19:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v10 + 60) & 0x400) != 0)
  {
    v11 = v10 - 48;
    v12 = v3[5];
    if (v3[5] < 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_20:
  v11 = v10 - 87;
  v12 = v3[5];
  if (v3[5] < 0)
    goto LABEL_24;
LABEL_23:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v12 + 60) & 0x400) != 0)
  {
    v13 = -48;
    goto LABEL_26;
  }
LABEL_24:
  v13 = -87;
LABEL_26:
  BYTE2(v31) = v12 + v13 + 16 * v11;
  v14 = v3[6];
  if ((v3[6] & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v14 + 60) & 0x400) != 0)
  {
    v15 = (char *)&v31 + 3;
    v16 = v14 - 48;
    v19 = v3[7];
    v18 = v3[7];
    if (v19 < 0)
      goto LABEL_32;
  }
  else
  {
    v15 = (char *)&v31 + 3;
    v16 = v14 - 87;
    v17 = v3[7];
    v18 = v3[7];
    if (v17 < 0)
      goto LABEL_32;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v18 + 60) & 0x400) != 0)
  {
    v20 = -48;
    goto LABEL_34;
  }
LABEL_32:
  v20 = -87;
LABEL_34:
  HIBYTE(v31) = v18 + v20 + 16 * v16;
  v21 = (char *)&v31 + 1;
  do
  {
    v22 = *(v21 - 1);
    *(v21 - 1) = *v15;
    *v15-- = v22;
  }
  while (v21++ < v15);
  *(_QWORD *)__str = 0;
  v33 = 0;
  v34 = 0;
  result = (void *)snprintf(__str, 0x18uLL, "%af", v31);
  if ((_DWORD)result)
  {
    v24 = (int)result;
    v25 = *a2;
    v26 = a2[1];
    v27 = &v26[v24];
    v28 = (size_t)a2[2];
    if ((unint64_t)&v26[v24] > v28)
    {
      v29 = 2 * v28;
      if (v29 <= (unint64_t)(v27 + 992))
        v30 = (size_t)(v27 + 992);
      else
        v30 = v29;
      a2[2] = (char *)v30;
      v25 = (char *)realloc(v25, v30);
      *a2 = v25;
      if (!v25)
        abort();
      v26 = a2[1];
    }
    result = memcpy(&v26[(_QWORD)v25], __str, v24);
    a2[1] += v24;
  }
  return result;
}

void *llvm::itanium_demangle::FloatLiteralImpl<double>::printLeft(void *result, char **a2)
{
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  char *v33;
  char v34;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  size_t v40;
  unint64_t v41;
  size_t v42;
  double v43;
  char __str[16];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)result + 3) < 0x10uLL)
    return result;
  v3 = (char *)*((_QWORD *)result + 2);
  v4 = *v3;
  if ((*v3 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x400) != 0)
  {
    v5 = v4 - 48;
    v6 = v3[1];
    if (v3[1] < 0)
      goto LABEL_8;
  }
  else
  {
    v5 = v4 - 87;
    v6 = v3[1];
    if (v3[1] < 0)
    {
LABEL_8:
      LOBYTE(v43) = v6 - 87 + 16 * v5;
      v7 = v3[2];
      if (v3[2] < 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x400) == 0)
    goto LABEL_8;
  LOBYTE(v43) = v6 - 48 + 16 * v5;
  v7 = v3[2];
  if (v3[2] < 0)
    goto LABEL_12;
LABEL_11:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v7 + 60) & 0x400) != 0)
  {
    v8 = v7 - 48;
    v9 = v3[3];
    if (v3[3] < 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_12:
  v8 = v7 - 87;
  v9 = v3[3];
  if (v3[3] < 0)
  {
LABEL_16:
    BYTE1(v43) = v9 - 87 + 16 * v8;
    v10 = v3[4];
    if (v3[4] < 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_15:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x400) == 0)
    goto LABEL_16;
  BYTE1(v43) = v9 - 48 + 16 * v8;
  v10 = v3[4];
  if (v3[4] < 0)
    goto LABEL_20;
LABEL_19:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v10 + 60) & 0x400) != 0)
  {
    v11 = v10 - 48;
    v12 = v3[5];
    if (v3[5] < 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_20:
  v11 = v10 - 87;
  v12 = v3[5];
  if (v3[5] < 0)
  {
LABEL_24:
    BYTE2(v43) = v12 - 87 + 16 * v11;
    v13 = v3[6];
    if (v3[6] < 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_23:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v12 + 60) & 0x400) == 0)
    goto LABEL_24;
  BYTE2(v43) = v12 - 48 + 16 * v11;
  v13 = v3[6];
  if (v3[6] < 0)
    goto LABEL_28;
LABEL_27:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v13 + 60) & 0x400) != 0)
  {
    v14 = v13 - 48;
    v15 = v3[7];
    if (v3[7] < 0)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_28:
  v14 = v13 - 87;
  v15 = v3[7];
  if (v3[7] < 0)
  {
LABEL_32:
    BYTE3(v43) = v15 - 87 + 16 * v14;
    v16 = v3[8];
    if (v3[8] < 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_31:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v15 + 60) & 0x400) == 0)
    goto LABEL_32;
  BYTE3(v43) = v15 - 48 + 16 * v14;
  v16 = v3[8];
  if (v3[8] < 0)
    goto LABEL_36;
LABEL_35:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v16 + 60) & 0x400) != 0)
  {
    v17 = v16 - 48;
    v18 = v3[9];
    if (v3[9] < 0)
      goto LABEL_40;
    goto LABEL_39;
  }
LABEL_36:
  v17 = v16 - 87;
  v18 = v3[9];
  if (v3[9] < 0)
  {
LABEL_40:
    BYTE4(v43) = v18 - 87 + 16 * v17;
    v19 = v3[10];
    if (v3[10] < 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_39:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v18 + 60) & 0x400) == 0)
    goto LABEL_40;
  BYTE4(v43) = v18 - 48 + 16 * v17;
  v19 = v3[10];
  if (v3[10] < 0)
    goto LABEL_44;
LABEL_43:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v19 + 60) & 0x400) != 0)
  {
    v20 = v19 - 48;
    v21 = v3[11];
    if (v3[11] < 0)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_44:
  v20 = v19 - 87;
  v21 = v3[11];
  if (v3[11] < 0)
  {
LABEL_48:
    BYTE5(v43) = v21 - 87 + 16 * v20;
    v22 = v3[12];
    if (v3[12] < 0)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_47:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v21 + 60) & 0x400) == 0)
    goto LABEL_48;
  BYTE5(v43) = v21 - 48 + 16 * v20;
  v22 = v3[12];
  if (v3[12] < 0)
    goto LABEL_52;
LABEL_51:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v22 + 60) & 0x400) != 0)
  {
    v23 = v22 - 48;
    v24 = v3[13];
    if (v3[13] < 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_52:
  v23 = v22 - 87;
  v24 = v3[13];
  if (v3[13] < 0)
    goto LABEL_56;
LABEL_55:
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) != 0)
  {
    v25 = -48;
    goto LABEL_58;
  }
LABEL_56:
  v25 = -87;
LABEL_58:
  BYTE6(v43) = v24 + v25 + 16 * v23;
  v26 = v3[14];
  if ((v3[14] & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v26 + 60) & 0x400) != 0)
  {
    v27 = (char *)&v43 + 7;
    v28 = v26 - 48;
    v31 = v3[15];
    v30 = v3[15];
    if (v31 < 0)
      goto LABEL_64;
  }
  else
  {
    v27 = (char *)&v43 + 7;
    v28 = v26 - 87;
    v29 = v3[15];
    v30 = v3[15];
    if (v29 < 0)
      goto LABEL_64;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v30 + 60) & 0x400) != 0)
  {
    v32 = -48;
    goto LABEL_66;
  }
LABEL_64:
  v32 = -87;
LABEL_66:
  HIBYTE(v43) = v30 + v32 + 16 * v28;
  v33 = (char *)&v43 + 1;
  do
  {
    v34 = *(v33 - 1);
    *(v33 - 1) = *v27;
    *v27-- = v34;
  }
  while (v33++ < v27);
  *(_OWORD *)__str = 0u;
  v45 = 0u;
  result = (void *)snprintf(__str, 0x20uLL, "%a", v43);
  if ((_DWORD)result)
  {
    v36 = (int)result;
    v37 = *a2;
    v38 = a2[1];
    v39 = &v38[v36];
    v40 = (size_t)a2[2];
    if ((unint64_t)&v38[v36] > v40)
    {
      v41 = 2 * v40;
      if (v41 <= (unint64_t)(v39 + 992))
        v42 = (size_t)(v39 + 992);
      else
        v42 = v41;
      a2[2] = (char *)v42;
      v37 = (char *)realloc(v37, v42);
      *a2 = v37;
      if (!v37)
        abort();
      v38 = a2[1];
    }
    result = memcpy(&v38[(_QWORD)v37], __str, v36);
    a2[1] += v36;
  }
  return result;
}

void *llvm::itanium_demangle::FloatLiteralImpl<long double>::printLeft(void *result, char **a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  char v12;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  long double v22;
  char __str[16];
  _WORD v24[13];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)result + 3) < 0x20uLL)
    return result;
  v3 = 0;
  v4 = *((_QWORD *)result + 2);
  v5 = (char *)&v21 + 7;
  v6 = MEMORY[0x1E0C80978];
  do
  {
    v8 = *(unsigned __int8 *)(v4 + v3);
    if ((*(char *)(v4 + v3) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v8 + 60) & 0x400) != 0)
    {
      v9 = -48;
      v10 = *(unsigned __int8 *)(v4 + v3 + 1);
      if (*(char *)(v4 + v3 + 1) < 0)
        goto LABEL_3;
    }
    else
    {
      v9 = -87;
      v10 = *(unsigned __int8 *)(v4 + v3 + 1);
      if (*(char *)(v4 + v3 + 1) < 0)
        goto LABEL_3;
    }
    if ((*(_DWORD *)(v6 + 4 * v10 + 60) & 0x400) == 0)
    {
LABEL_3:
      v7 = -87;
      goto LABEL_4;
    }
    v7 = -48;
LABEL_4:
    *++v5 = v10 + v7 + 16 * (v8 + v9);
    v3 += 2;
  }
  while (v3 != 32);
  if (v5 > (char *)&v22)
  {
    v11 = (char *)&v22 + 1;
    do
    {
      v12 = *(v11 - 1);
      *(v11 - 1) = *v5;
      *v5-- = v12;
    }
    while (v11++ < v5);
  }
  *(_OWORD *)__str = 0u;
  memset(v24, 0, sizeof(v24));
  result = (void *)snprintf(__str, 0x2AuLL, "%LaL", v22);
  if ((_DWORD)result)
  {
    v14 = (int)result;
    v15 = *a2;
    v16 = a2[1];
    v17 = &v16[v14];
    v18 = (size_t)a2[2];
    if ((unint64_t)&v16[v14] > v18)
    {
      v19 = 2 * v18;
      if (v19 <= (unint64_t)(v17 + 992))
        v20 = (size_t)(v17 + 992);
      else
        v20 = v19;
      a2[2] = (char *)v20;
      v15 = (char *)realloc(v15, v20);
      *a2 = v15;
      if (!v15)
        abort();
      v16 = a2[1];
    }
    result = memcpy(&v16[(_QWORD)v15], __str, v14);
    a2[1] += v14;
  }
  return result;
}

char *llvm::itanium_demangle::StringLiteral::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 2) > v6)
  {
    v7 = (size_t)(v5 + 994);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_16;
    v5 = a2[1];
  }
  *(_WORD *)&v5[(_QWORD)v4] = 15394;
  a2[1] += 2;
  v10 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 40))(v10, a2);
  result = *a2;
  v12 = a2[1];
  v13 = (unint64_t)a2[2];
  if ((unint64_t)(v12 + 2) > v13)
  {
    v14 = (size_t)(v12 + 994);
    v15 = 2 * v13;
    if (v15 <= v14)
      v16 = v14;
    else
      v16 = v15;
    a2[2] = (char *)v16;
    result = (char *)realloc(result, v16);
    *a2 = result;
    if (result)
    {
      v12 = a2[1];
      goto LABEL_15;
    }
LABEL_16:
    abort();
  }
LABEL_15:
  *(_WORD *)&v12[(_QWORD)result] = 8766;
  a2[1] += 2;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseTemplateParamDecl(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56[3];
  _OWORD v57[4];
  uint64_t v58[2];
  uint64_t v59;

  v58[0] = a1;
  v58[1] = (uint64_t)&v59;
  v59 = a2;
  v2 = *(_WORD **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 < 2uLL)
    return 0;
  switch(*v2)
  {
    case 0x7954:
      *(_QWORD *)a1 = v2 + 1;
      v11 = *(_QWORD **)(a1 + 4904);
      v12 = v11[1];
      if ((unint64_t)(v12 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v13 = malloc(0x1000uLL);
        if (!v13)
          goto LABEL_66;
        v12 = 0;
        *v13 = v11;
        v13[1] = 0;
        v11 = v13;
        *(_QWORD *)(a1 + 4904) = v13;
      }
      v11[1] = v12 + 32;
      *(_QWORD *)((char *)v11 + v12 + 16) = &unk_1E0E22178;
      v3 = (uint64_t)v11 + v12 + 16;
      v10 = 35;
      goto LABEL_17;
    case 0x6B54:
      *(_QWORD *)a1 = v2 + 1;
      if (!v14)
        return 0;
      v15 = v14;
      v17 = *(_QWORD **)(a1 + 4904);
      v18 = v17[1];
      if ((unint64_t)(v18 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v19 = malloc(0x1000uLL);
        if (!v19)
          goto LABEL_66;
        v18 = 0;
        *v19 = v17;
        v19[1] = 0;
        v17 = v19;
        *(_QWORD *)(a1 + 4904) = v19;
      }
      v17[1] = v18 + 32;
      *(_QWORD *)((char *)v17 + v18 + 16) = &unk_1E0E22540;
      v3 = (uint64_t)v17 + v18 + 16;
      v20 = 36;
LABEL_28:
      *(_BYTE *)(v3 + 8) = v20;
      *(_WORD *)(v3 + 9) = *(_WORD *)(v3 + 9) & 0xF000 | 0x500;
      *(_QWORD *)(v3 + 16) = v15;
      *(_QWORD *)(v3 + 24) = v16;
      return v3;
    case 0x6E54:
      *(_QWORD *)a1 = v2 + 1;
      if (!v21)
        return 0;
      v16 = v21;
      v22 = *(_QWORD **)(a1 + 4904);
      v23 = v22[1];
      if ((unint64_t)(v23 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v24 = malloc(0x1000uLL);
        if (!v24)
          goto LABEL_66;
        v23 = 0;
        *v24 = v22;
        v24[1] = 0;
        v22 = v24;
        *(_QWORD *)(a1 + 4904) = v24;
      }
      v22[1] = v23 + 32;
      *(_QWORD *)((char *)v22 + v23 + 16) = &unk_1E0E22330;
      v3 = (uint64_t)v22 + v23 + 16;
      v20 = 37;
      goto LABEL_28;
  }
  if (*v2 != 29780)
  {
    if (*v2 == 28756)
    {
      *(_QWORD *)a1 = v2 + 1;
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD **)(a1 + 4904);
        v8 = v7[1];
        if ((unint64_t)(v8 - 4048) > 0xFFFFFFFFFFFFF00FLL)
        {
LABEL_12:
          v7[1] = v8 + 32;
          *(_QWORD *)((char *)v7 + v8 + 16) = &unk_1E0E22120;
          v3 = (uint64_t)v7 + v8 + 16;
          v10 = 39;
LABEL_17:
          *(_BYTE *)(v3 + 8) = v10;
          *(_WORD *)(v3 + 9) = *(_WORD *)(v3 + 9) & 0xF000 | 0x500;
          *(_QWORD *)(v3 + 16) = v6;
          return v3;
        }
        v9 = malloc(0x1000uLL);
        if (v9)
        {
          v8 = 0;
          *v9 = v7;
          v9[1] = 0;
          v7 = v9;
          *(_QWORD *)(a1 + 4904) = v9;
          goto LABEL_12;
        }
LABEL_66:
        std::terminate();
      }
    }
    return 0;
  }
  *(_QWORD *)a1 = v2 + 1;
  v54 = a1;
  v27 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 24);
  v28 = *(char **)(a1 + 672);
  v29 = *(char **)(a1 + 664);
  v30 = v28 - v29;
  v55 = (v28 - v29) >> 3;
  v56[0] = v57;
  v56[1] = v57;
  v56[2] = v58;
  memset(v57, 0, sizeof(v57));
  if (v28 == *(char **)(a1 + 680))
  {
    if (v29 == (char *)(a1 + 688))
    {
      v32 = (char *)malloc(2 * v30);
      if (!v32)
        goto LABEL_65;
      v31 = v32;
      if (v28 != v29)
        memmove(v32, v29, v28 - v29);
      *(_QWORD *)(a1 + 664) = v31;
    }
    else
    {
      v31 = (char *)realloc(v29, 2 * v30);
      *(_QWORD *)(a1 + 664) = v31;
      if (!v31)
LABEL_65:
        abort();
    }
    v28 = &v31[8 * ((v28 - v29) >> 3)];
    *(_QWORD *)(a1 + 680) = &v31[8 * (v30 >> 2)];
  }
  v33 = (v26 - v27) >> 3;
  *(_QWORD *)(a1 + 672) = v28 + 8;
  *(_QWORD *)v28 = v56;
  v34 = (char *)(a1 + 40);
  v35 = *(_BYTE **)a1;
  v36 = *(_BYTE **)(a1 + 8);
  do
  {
    if (v35 != v36 && *v35 == 69)
    {
      v46 = 0;
      goto LABEL_59;
    }
    if (!v37)
      goto LABEL_57;
    v38 = v37;
    v39 = *(char **)(a1 + 24);
    if (v39 == *(char **)(a1 + 32))
    {
      v40 = *(char **)(a1 + 16);
      v41 = v39 - v40;
      if (v40 == v34)
      {
        v43 = (char *)malloc(2 * (v39 - v40));
        if (!v43)
          goto LABEL_65;
        v42 = v43;
        if (v39 != v34)
          memcpy(v43, (const void *)(a1 + 40), v41);
        *(_QWORD *)(a1 + 16) = v42;
      }
      else
      {
        v42 = (char *)realloc(v40, 2 * (v39 - v40));
        *(_QWORD *)(a1 + 16) = v42;
        if (!v42)
          goto LABEL_65;
      }
      v39 = &v42[8 * (v41 >> 3)];
      *(_QWORD *)(a1 + 32) = &v42[8 * (v41 >> 2)];
    }
    *(_QWORD *)(a1 + 24) = v39 + 8;
    *(_QWORD *)v39 = v38;
    v35 = *(_BYTE **)a1;
    v36 = *(_BYTE **)(a1 + 8);
  }
  while (*(_BYTE **)a1 == v36 || *v35 != 81);
  *(_QWORD *)a1 = v35 + 1;
  v44 = *(_BYTE *)(a1 + 778);
  *(_BYTE *)(a1 + 778) = 1;
  *(_BYTE *)(a1 + 778) = v44;
  if (v45)
  {
    v35 = *(_BYTE **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    {
      v46 = v45;
      if (*v35 == 69)
      {
LABEL_59:
        *(_QWORD *)a1 = v35 + 1;
        v49 = v48;
        v50 = *(_QWORD **)(a1 + 4904);
        v51 = v50[1];
        if ((unint64_t)(v51 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
        {
          v52 = malloc(0x1000uLL);
          if (!v52)
            goto LABEL_66;
          v51 = 0;
          *v52 = v50;
          v52[1] = 0;
          v50 = v52;
          *(_QWORD *)(a1 + 4904) = v52;
        }
        v50[1] = v51 + 48;
        *(_QWORD *)((char *)v50 + v51 + 16) = &unk_1E0E223E0;
        v3 = (uint64_t)v50 + v51 + 16;
        *(_BYTE *)(v3 + 8) = 38;
        *(_WORD *)(v3 + 9) = *(_WORD *)((_BYTE *)v50 + v51 + 25) & 0xF000 | 0x500;
        *(_QWORD *)(v3 + 16) = v53;
        *(_QWORD *)(v3 + 24) = v47;
        *(_QWORD *)(v3 + 32) = v49;
        *(_QWORD *)(v3 + 40) = v46;
        goto LABEL_63;
      }
    }
  }
LABEL_57:
  v3 = 0;
LABEL_63:
  *(_QWORD *)(v54 + 672) = *(_QWORD *)(v54 + 664) + 8 * v55;
  if (v56[0] != v57)
    free(v56[0]);
  return v3;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::ClosureTypeName,llvm::itanium_demangle::NodeArray &,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::NodeArray &,llvm::itanium_demangle::Node *&,std::string_view &>(uint64_t a1, __n128 *a2, uint64_t *a3, __int128 *a4, uint64_t *a5, __int128 *a6)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  __int128 v19;
  __int128 v20;

  v11 = *(_QWORD **)(a1 + 4904);
  v12 = v11[1];
  if ((unint64_t)(v12 - 4000) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v14 = malloc(0x1000uLL);
    if (!v14)
      std::terminate();
    v12 = 0;
    *v14 = v11;
    v14[1] = 0;
    v11 = v14;
    *(_QWORD *)(a1 + 4904) = v14;
  }
  v11[1] = v12 + 80;
  v15 = (char *)v11 + v12;
  v16 = *a3;
  v17 = *a5;
  *((_QWORD *)v15 + 2) = &unk_1E0E21830;
  v15 += 16;
  v15[8] = 52;
  result = *a2;
  v19 = *a4;
  v20 = *a6;
  *(_WORD *)(v15 + 9) = *(_WORD *)(v15 + 9) & 0xF000 | 0x540;
  *((__n128 *)v15 + 1) = result;
  *((_QWORD *)v15 + 4) = v16;
  *(_OWORD *)(v15 + 40) = v19;
  *((_QWORD *)v15 + 7) = v17;
  *((_OWORD *)v15 + 4) = v20;
  return result;
}

char *llvm::itanium_demangle::UnnamedTypeName::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  size_t v13;
  size_t v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  char *result;
  size_t v19;
  unint64_t v20;
  size_t v21;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 8) > v6)
  {
    v7 = (size_t)(v5 + 1000);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_22;
    v5 = a2[1];
  }
  *(_QWORD *)&v5[(_QWORD)v4] = 0x64656D616E6E7527;
  v10 = (uint64_t)(a2[1] + 8);
  a2[1] = (char *)v10;
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
    v12 = *(const void **)(a1 + 16);
    v13 = v10 + v11;
    v14 = (size_t)a2[2];
    v15 = *a2;
    if (v10 + v11 > v14)
    {
      if (2 * v14 <= v13 + 992)
        v16 = v13 + 992;
      else
        v16 = 2 * v14;
      a2[2] = (char *)v16;
      v15 = (char *)realloc(v15, v16);
      *a2 = v15;
      if (!v15)
        goto LABEL_22;
      v10 = (uint64_t)a2[1];
    }
    memcpy(&v15[v10], v12, v11);
    v10 = (uint64_t)&a2[1][v11];
    a2[1] = (char *)v10;
  }
  v17 = (unint64_t)a2[2];
  result = *a2;
  if (v10 + 1 > v17)
  {
    v19 = v10 + 993;
    v20 = 2 * v17;
    if (v20 <= v19)
      v21 = v19;
    else
      v21 = v20;
    a2[2] = (char *)v21;
    result = (char *)realloc(result, v21);
    *a2 = result;
    if (result)
    {
      v10 = (uint64_t)a2[1];
      goto LABEL_21;
    }
LABEL_22:
    abort();
  }
LABEL_21:
  result[v10] = 39;
  ++a2[1];
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseTemplateParamDecl(llvm::itanium_demangle::PODSmallVector<llvm::itanium_demangle::Node *,8ul> *)::{lambda(llvm::itanium_demangle::TemplateParamKind)#1}::operator()(uint64_t *a1, size_t __size)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int64_t v14;
  char *v15;
  char *v16;

  v2 = __size;
  v4 = *a1;
  v5 = *a1 + 4 * (int)__size;
  v6 = *(_DWORD *)(v5 + 792);
  *(_DWORD *)(v5 + 792) = v6 + 1;
  v7 = *(_QWORD **)(v4 + 4904);
  v8 = v7[1];
  if ((unint64_t)(v8 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v9 = malloc(0x1000uLL);
    if (!v9)
      std::terminate();
    v8 = 0;
    *v9 = v7;
    v9[1] = 0;
    v7 = v9;
    *(_QWORD *)(v4 + 4904) = v9;
  }
  *(_QWORD *)((char *)v7 + v8 + 16) = &unk_1E0E22438;
  v10 = (uint64_t)v7 + v8 + 16;
  v7[1] = v8 + 32;
  *(_BYTE *)(v10 + 8) = 33;
  *(_WORD *)(v10 + 9) = *(_WORD *)((_BYTE *)v7 + v8 + 25) & 0xF000 | 0x540;
  *(_DWORD *)(v10 + 12) = v2;
  *(_DWORD *)(v10 + 16) = v6;
  v11 = *(_QWORD *)a1[1];
  if (v11)
  {
    v12 = *(uint64_t **)(v11 + 8);
    if (v12 == *(uint64_t **)(v11 + 16))
    {
      v13 = *(uint64_t **)v11;
      v14 = (int64_t)v12 - *(_QWORD *)v11;
      if (*(_QWORD *)v11 == v11 + 24)
      {
        v16 = (char *)malloc(2 * v14);
        if (!v16)
          goto LABEL_17;
        v15 = v16;
        if (v12 != v13)
          memmove(v16, v13, v14);
        *(_QWORD *)v11 = v15;
      }
      else
      {
        v15 = (char *)realloc(*(void **)v11, 2 * v14);
        *(_QWORD *)v11 = v15;
        if (!v15)
LABEL_17:
          abort();
      }
      v12 = (uint64_t *)&v15[8 * (v14 >> 3)];
      *(_QWORD *)(v11 + 16) = &v15[8 * (v14 >> 2)];
    }
    *(_QWORD *)(v11 + 8) = v12 + 1;
    *v12 = v10;
  }
  return v10;
}

_DWORD *llvm::itanium_demangle::SyntheticTemplateParamName::printLeft(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  __int16 v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  size_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  _BYTE v34[21];
  uint64_t v35;

  v3 = result;
  v35 = *MEMORY[0x1E0C80C00];
  v4 = result[3];
  switch(v4)
  {
    case 2:
      v6 = (uint64_t *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(_QWORD *)(a2 + 16);
      result = *(_DWORD **)a2;
      if (v12 + 3 > v13)
      {
        v14 = v12 + 995;
        v15 = 2 * v13;
        if (v15 <= v14)
          v16 = v14;
        else
          v16 = v15;
        *(_QWORD *)(a2 + 16) = v16;
        result = realloc(result, v16);
        *(_QWORD *)a2 = result;
        if (!result)
          goto LABEL_39;
        v12 = *v6;
      }
      v17 = (char *)result + v12;
      v17[2] = 84;
      *(_WORD *)v17 = 21540;
      v18 = 3;
      goto LABEL_26;
    case 1:
      v6 = (uint64_t *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 8);
      v19 = *(_QWORD *)(a2 + 16);
      result = *(_DWORD **)a2;
      if (v5 + 2 > v19)
      {
        v20 = v5 + 994;
        v21 = 2 * v19;
        if (v21 <= v20)
          v22 = v20;
        else
          v22 = v21;
        *(_QWORD *)(a2 + 16) = v22;
        result = realloc(result, v22);
        *(_QWORD *)a2 = result;
        if (!result)
          goto LABEL_39;
        v5 = *v6;
      }
      v11 = 20004;
      goto LABEL_25;
    case 0:
      v6 = (uint64_t *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      result = *(_DWORD **)a2;
      if (v5 + 2 > v7)
      {
        v8 = v5 + 994;
        v9 = 2 * v7;
        if (v9 <= v8)
          v10 = v8;
        else
          v10 = v9;
        *(_QWORD *)(a2 + 16) = v10;
        result = realloc(result, v10);
        *(_QWORD *)a2 = result;
        if (!result)
          goto LABEL_39;
        v5 = *v6;
      }
      v11 = 21540;
LABEL_25:
      *(_WORD *)((char *)result + v5) = v11;
      v18 = 2;
LABEL_26:
      *v6 += v18;
      break;
  }
  v23 = v3[4];
  if (v23)
  {
    v24 = 0;
    v25 = (v23 - 1);
    do
    {
      v34[v24-- + 20] = (v25 % 0xA) | 0x30;
      v26 = v25 >= 9;
      v27 = v25 == 9;
      v25 /= 0xAuLL;
    }
    while (!v27 && v26);
    if (v24)
    {
      v28 = *(_DWORD **)a2;
      v29 = *(_QWORD *)(a2 + 8);
      v30 = v29 - v24;
      v31 = *(_QWORD *)(a2 + 16);
      if (v29 - v24 <= v31)
      {
LABEL_37:
        result = memcpy((char *)v28 + v29, &v34[v24 + 21], -v24);
        *(_QWORD *)(a2 + 8) -= v24;
        return result;
      }
      v32 = 2 * v31;
      if (v32 <= v30 + 992)
        v33 = v30 + 992;
      else
        v33 = v32;
      *(_QWORD *)(a2 + 16) = v33;
      v28 = realloc(v28, v33);
      *(_QWORD *)a2 = v28;
      if (v28)
      {
        v29 = *(_QWORD *)(a2 + 8);
        goto LABEL_37;
      }
LABEL_39:
      abort();
    }
  }
  return result;
}

char *llvm::itanium_demangle::TypeTemplateParamDecl::printLeft(uint64_t a1, char **a2)
{
  char *result;
  char *v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  char *v9;

  result = *a2;
  v4 = a2[1];
  v5 = (unint64_t)a2[2];
  if ((unint64_t)(v4 + 9) > v5)
  {
    v6 = (size_t)(v4 + 1001);
    v7 = 2 * v5;
    if (v7 <= v6)
      v8 = v6;
    else
      v8 = v7;
    a2[2] = (char *)v8;
    result = (char *)realloc(result, v8);
    *a2 = result;
    if (!result)
      abort();
    v4 = a2[1];
  }
  v9 = &v4[(_QWORD)result];
  *(_QWORD *)v9 = *(_QWORD *)"typename ";
  v9[8] = 32;
  a2[1] += 9;
  return result;
}

uint64_t llvm::itanium_demangle::TypeTemplateParamDecl::printRight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  return result;
}

void *llvm::itanium_demangle::ConstrainedTypeTemplateParamDecl::printLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  result = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v6)
  {
    v7 = v5 + 993;
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    result = realloc(result, v9);
    *(_QWORD *)a2 = result;
    if (!result)
      abort();
    v5 = *(_QWORD *)(a2 + 8);
  }
  *((_BYTE *)result + v5) = 32;
  ++*(_QWORD *)(a2 + 8);
  return result;
}

uint64_t llvm::itanium_demangle::ConstrainedTypeTemplateParamDecl::printRight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  return result;
}

uint64_t llvm::itanium_demangle::NonTypeTemplateParamDecl::printLeft(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
  result = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(result + 9);
  if ((v5 & 0xC0) == 0x80)
  {
    result = (**(uint64_t (***)(uint64_t, uint64_t *))result)(result, a2);
    if ((result & 1) != 0)
      return result;
  }
  else if (v5 < 0x40)
  {
    return result;
  }
  result = *a2;
  v6 = a2[1];
  v7 = a2[2];
  if (v6 + 1 > v7)
  {
    v8 = v6 + 993;
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = v10;
    result = (uint64_t)realloc((void *)result, v10);
    *a2 = result;
    if (!result)
      abort();
    v6 = a2[1];
  }
  *(_BYTE *)(result + v6) = 32;
  ++a2[1];
  return result;
}

uint64_t llvm::itanium_demangle::NonTypeTemplateParamDecl::printRight(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
}

char *llvm::itanium_demangle::TemplateTemplateParamDecl::printLeft(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  char *result;
  unint64_t v23;
  size_t v24;
  char *v25;

  v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v5 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 + 9 > v7)
  {
    v8 = v6 + 1001;
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    v5 = (char *)realloc(v5, v10);
    *(_QWORD *)a2 = v5;
    if (!v5)
      goto LABEL_28;
    v6 = *(_QWORD *)(a2 + 8);
  }
  v11 = &v5[v6];
  *(_QWORD *)v11 = *(_QWORD *)"template<";
  v11[8] = 60;
  v12 = *(_QWORD *)(a2 + 8) + 9;
  *(_QWORD *)(a2 + 8) = v12;
  if (*(_QWORD *)(a1 + 32))
  {
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v15 = v12;
      if ((v14 & 1) == 0)
      {
        v16 = *(_QWORD *)(a2 + 16);
        v17 = *(char **)a2;
        if (v12 + 2 <= v16)
        {
          v20 = v12;
        }
        else
        {
          v18 = 2 * v16;
          if (v18 <= v12 + 994)
            v19 = v12 + 994;
          else
            v19 = v18;
          *(_QWORD *)(a2 + 16) = v19;
          v17 = (char *)realloc(v17, v19);
          *(_QWORD *)a2 = v17;
          if (!v17)
            goto LABEL_28;
          v20 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v17[v20] = 8236;
        v15 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v15;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v13), a2, 18, 0);
      if (v15 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v12;
        if (++v13 == *(_QWORD *)(a1 + 32))
          break;
      }
      else
      {
        v14 = 0;
        v12 = *(_QWORD *)(a2 + 8);
        if (++v13 == *(_QWORD *)(a1 + 32))
          break;
      }
    }
  }
  v21 = *(_QWORD *)(a2 + 16);
  result = *(char **)a2;
  if (v12 + 11 > v21)
  {
    v23 = 2 * v21;
    if (v23 <= v12 + 1003)
      v24 = v12 + 1003;
    else
      v24 = v23;
    *(_QWORD *)(a2 + 16) = v24;
    result = (char *)realloc(result, v24);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v12 = *(_QWORD *)(a2 + 8);
      goto LABEL_27;
    }
LABEL_28:
    abort();
  }
LABEL_27:
  v25 = &result[v12];
  *(_QWORD *)v25 = *(_QWORD *)"> typename ";
  *(_DWORD *)(v25 + 7) = 543518049;
  *(_QWORD *)(a2 + 8) += 11;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t llvm::itanium_demangle::TemplateTemplateParamDecl::printRight(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t result;
  char *v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = (unint64_t)a2[2];
    if ((unint64_t)(v7 + 10) > v8)
    {
      v9 = (size_t)(v7 + 1002);
      v10 = 2 * v8;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v10;
      a2[2] = (char *)v11;
      v6 = (char *)realloc(v6, v11);
      *a2 = v6;
      if (!v6)
        abort();
      v7 = a2[1];
    }
    v12 = &v7[(_QWORD)v6];
    *(_QWORD *)v12 = *(_QWORD *)" requires ";
    *((_WORD *)v12 + 4) = 8307;
    a2[1] += 10;
    v13 = *(_QWORD *)(a1 + 40);
    result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v13 + 32))(v13, a2);
    if ((*(_WORD *)(v13 + 9) & 0xC0) != 0x40)
      return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v13 + 40))(v13, a2);
  }
  return result;
}

char *llvm::itanium_demangle::TemplateParamPackDecl::printLeft(uint64_t a1, char **a2)
{
  char *result;
  char *v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  char *v9;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  result = *a2;
  v4 = a2[1];
  v5 = (unint64_t)a2[2];
  if ((unint64_t)(v4 + 3) > v5)
  {
    v6 = (size_t)(v4 + 995);
    v7 = 2 * v5;
    if (v7 <= v6)
      v8 = v6;
    else
      v8 = v7;
    a2[2] = (char *)v8;
    result = (char *)realloc(result, v8);
    *a2 = result;
    if (!result)
      abort();
    v4 = a2[1];
  }
  v9 = &v4[(_QWORD)result];
  v9[2] = 46;
  *(_WORD *)v9 = 11822;
  a2[1] += 3;
  return result;
}

uint64_t llvm::itanium_demangle::TemplateParamPackDecl::printRight(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

char *llvm::itanium_demangle::ClosureTypeName::printLeft(_QWORD *a1, void **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  void *v19;
  size_t v20;
  unint64_t v21;
  size_t v22;

  v4 = (char *)*a2;
  v5 = (char *)a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 7) > v6)
  {
    v7 = (size_t)(v5 + 999);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (void *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_22;
    v5 = (char *)a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  *(_DWORD *)(v10 + 3) = 1633968749;
  *(_DWORD *)v10 = 1835101223;
  v11 = (uint64_t)a2[1] + 7;
  a2[1] = (void *)v11;
  v12 = a1[9];
  if (v12)
  {
    v13 = (const void *)a1[8];
    v14 = v11 + v12;
    v15 = (size_t)a2[2];
    v16 = (char *)*a2;
    if (v11 + v12 > v15)
    {
      if (2 * v15 <= v14 + 992)
        v17 = v14 + 992;
      else
        v17 = 2 * v15;
      a2[2] = (void *)v17;
      v16 = (char *)realloc(v16, v17);
      *a2 = v16;
      if (!v16)
        goto LABEL_22;
      v11 = (uint64_t)a2[1];
    }
    memcpy(&v16[v11], v13, v12);
    v11 = (uint64_t)a2[1] + v12;
    a2[1] = (void *)v11;
  }
  v18 = (unint64_t)a2[2];
  v19 = *a2;
  if (v11 + 1 > v18)
  {
    v20 = v11 + 993;
    v21 = 2 * v18;
    if (v21 <= v20)
      v22 = v20;
    else
      v22 = v21;
    a2[2] = (void *)v22;
    v19 = realloc(v19, v22);
    *a2 = v19;
    if (v19)
    {
      v11 = (uint64_t)a2[1];
      goto LABEL_21;
    }
LABEL_22:
    abort();
  }
LABEL_21:
  *((_BYTE *)v19 + v11) = 39;
  a2[1] = (char *)a2[1] + 1;
  return llvm::itanium_demangle::ClosureTypeName::printDeclarator(a1, (uint64_t)a2);
}

char *llvm::itanium_demangle::ClosureTypeName::printDeclarator(_QWORD *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *result;
  unint64_t v55;
  size_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  size_t v62;
  char *v63;
  uint64_t v64;

  if (a1[3])
  {
    v4 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v5 = *(char **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    if (v6 + 1 > v7)
    {
      v8 = v6 + 993;
      v9 = 2 * v7;
      if (v9 <= v8)
        v10 = v8;
      else
        v10 = v9;
      *(_QWORD *)(a2 + 16) = v10;
      v5 = (char *)realloc(v5, v10);
      *(_QWORD *)a2 = v5;
      if (!v5)
        goto LABEL_81;
      v6 = *(_QWORD *)(a2 + 8);
    }
    v5[v6] = 60;
    v11 = *(_QWORD *)(a2 + 8) + 1;
    *(_QWORD *)(a2 + 8) = v11;
    if (a1[3])
    {
      v12 = 0;
      v13 = 1;
      while (1)
      {
        v14 = v11;
        if ((v13 & 1) == 0)
        {
          v15 = *(_QWORD *)(a2 + 16);
          v16 = *(char **)a2;
          if (v11 + 2 <= v15)
          {
            v19 = v11;
          }
          else
          {
            v17 = 2 * v15;
            if (v17 <= v11 + 994)
              v18 = v11 + 994;
            else
              v18 = v17;
            *(_QWORD *)(a2 + 16) = v18;
            v16 = (char *)realloc(v16, v18);
            *(_QWORD *)a2 = v16;
            if (!v16)
              goto LABEL_81;
            v19 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)&v16[v19] = 8236;
          v14 = *(_QWORD *)(a2 + 8) + 2;
          *(_QWORD *)(a2 + 8) = v14;
        }
        llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1[2] + 8 * v12), a2, 18, 0);
        if (v14 == *(_QWORD *)(a2 + 8))
        {
          *(_QWORD *)(a2 + 8) = v11;
          if (++v12 == a1[3])
            break;
        }
        else
        {
          v13 = 0;
          v11 = *(_QWORD *)(a2 + 8);
          if (++v12 == a1[3])
            break;
        }
      }
    }
    v20 = *(_QWORD *)(a2 + 16);
    v21 = *(char **)a2;
    if (v11 + 1 > v20)
    {
      v22 = 2 * v20;
      if (v22 <= v11 + 993)
        v23 = v11 + 993;
      else
        v23 = v22;
      *(_QWORD *)(a2 + 16) = v23;
      v21 = (char *)realloc(v21, v23);
      *(_QWORD *)a2 = v21;
      if (!v21)
        goto LABEL_81;
      v11 = *(_QWORD *)(a2 + 8);
    }
    v21[v11] = 62;
    ++*(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 32) = v4;
  }
  v24 = *(_QWORD *)(a2 + 8);
  if (a1[4])
  {
    v25 = *(_QWORD *)(a2 + 16);
    v26 = *(char **)a2;
    if (v24 + 10 > v25)
    {
      v27 = v24 + 1002;
      v28 = 2 * v25;
      if (v28 <= v27)
        v29 = v27;
      else
        v29 = v28;
      *(_QWORD *)(a2 + 16) = v29;
      v26 = (char *)realloc(v26, v29);
      *(_QWORD *)a2 = v26;
      if (!v26)
        goto LABEL_81;
      v24 = *(_QWORD *)(a2 + 8);
    }
    v30 = &v26[v24];
    *(_QWORD *)v30 = *(_QWORD *)" requires ";
    *((_WORD *)v30 + 4) = 8307;
    *(_QWORD *)(a2 + 8) += 10;
    v31 = a1[4];
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 32))(v31, a2);
    if ((*(_WORD *)(v31 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 40))(v31, a2);
    v32 = *(char **)a2;
    v33 = *(_QWORD *)(a2 + 8);
    v34 = *(_QWORD *)(a2 + 16);
    if (v33 + 1 > v34)
    {
      v35 = v33 + 993;
      v36 = 2 * v34;
      if (v36 <= v35)
        v37 = v35;
      else
        v37 = v36;
      *(_QWORD *)(a2 + 16) = v37;
      v32 = (char *)realloc(v32, v37);
      *(_QWORD *)a2 = v32;
      if (!v32)
        goto LABEL_81;
      v33 = *(_QWORD *)(a2 + 8);
    }
    v32[v33] = 32;
    v24 = *(_QWORD *)(a2 + 8) + 1;
    *(_QWORD *)(a2 + 8) = v24;
  }
  ++*(_DWORD *)(a2 + 32);
  v38 = v24 + 1;
  v39 = *(_QWORD *)(a2 + 16);
  v40 = *(char **)a2;
  if (v24 + 1 > v39)
  {
    v41 = v24 + 993;
    if (2 * v39 <= v41)
      v42 = v41;
    else
      v42 = 2 * v39;
    *(_QWORD *)(a2 + 16) = v42;
    v40 = (char *)realloc(v40, v42);
    *(_QWORD *)a2 = v40;
    if (!v40)
      goto LABEL_81;
    v24 = *(_QWORD *)(a2 + 8);
    v38 = v24 + 1;
  }
  *(_QWORD *)(a2 + 8) = v38;
  v40[v24] = 40;
  v43 = *(_QWORD *)(a2 + 8);
  if (a1[6])
  {
    v44 = 0;
    v45 = 1;
    while (1)
    {
      v46 = v43;
      if ((v45 & 1) == 0)
      {
        v47 = *(_QWORD *)(a2 + 16);
        v48 = *(char **)a2;
        if (v43 + 2 <= v47)
        {
          v51 = v43;
        }
        else
        {
          v49 = 2 * v47;
          if (v49 <= v43 + 994)
            v50 = v43 + 994;
          else
            v50 = v49;
          *(_QWORD *)(a2 + 16) = v50;
          v48 = (char *)realloc(v48, v50);
          *(_QWORD *)a2 = v48;
          if (!v48)
            goto LABEL_81;
          v51 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v48[v51] = 8236;
        v46 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v46;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1[5] + 8 * v44), a2, 18, 0);
      if (v46 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v43;
        if (++v44 == a1[6])
          break;
      }
      else
      {
        v45 = 0;
        v43 = *(_QWORD *)(a2 + 8);
        if (++v44 == a1[6])
          break;
      }
    }
  }
  --*(_DWORD *)(a2 + 32);
  v52 = v43 + 1;
  v53 = *(_QWORD *)(a2 + 16);
  result = *(char **)a2;
  if (v43 + 1 > v53)
  {
    v55 = 2 * v53;
    if (v55 <= v43 + 993)
      v56 = v43 + 993;
    else
      v56 = v55;
    *(_QWORD *)(a2 + 16) = v56;
    result = (char *)realloc(result, v56);
    *(_QWORD *)a2 = result;
    if (!result)
      goto LABEL_81;
    v43 = *(_QWORD *)(a2 + 8);
    v52 = v43 + 1;
  }
  *(_QWORD *)(a2 + 8) = v52;
  result[v43] = 41;
  if (!a1[7])
    return result;
  v57 = *(char **)a2;
  v58 = *(_QWORD *)(a2 + 8);
  v59 = *(_QWORD *)(a2 + 16);
  if (v58 + 10 > v59)
  {
    v60 = v58 + 1002;
    v61 = 2 * v59;
    if (v61 <= v60)
      v62 = v60;
    else
      v62 = v61;
    *(_QWORD *)(a2 + 16) = v62;
    v57 = (char *)realloc(v57, v62);
    *(_QWORD *)a2 = v57;
    if (v57)
    {
      v58 = *(_QWORD *)(a2 + 8);
      goto LABEL_78;
    }
LABEL_81:
    abort();
  }
LABEL_78:
  v63 = &v57[v58];
  *(_QWORD *)v63 = *(_QWORD *)" requires ";
  *((_WORD *)v63 + 4) = 8307;
  *(_QWORD *)(a2 + 8) += 10;
  v64 = a1[7];
  result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 32))(v64, a2);
  if ((*(_WORD *)(v64 + 9) & 0xC0) != 0x40)
    return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 40))(v64, a2);
  return result;
}

char *llvm::itanium_demangle::LambdaExpr::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *result;
  size_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 2) > v6)
  {
    v7 = (size_t)(v5 + 994);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_16;
    v5 = a2[1];
  }
  *(_WORD *)&v5[(_QWORD)v4] = 23899;
  v10 = (uint64_t)(a2[1] + 2);
  a2[1] = (char *)v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v11 + 8) == 52)
  {
    llvm::itanium_demangle::ClosureTypeName::printDeclarator((_QWORD *)v11, (uint64_t)a2);
    v10 = (uint64_t)a2[1];
  }
  v12 = (unint64_t)a2[2];
  result = *a2;
  if (v10 + 5 > v12)
  {
    v14 = v10 + 997;
    v15 = 2 * v12;
    if (v15 <= v14)
      v16 = v14;
    else
      v16 = v15;
    a2[2] = (char *)v16;
    result = (char *)realloc(result, v16);
    *a2 = result;
    if (result)
    {
      v10 = (uint64_t)a2[1];
      goto LABEL_15;
    }
LABEL_16:
    abort();
  }
LABEL_15:
  v17 = &result[v10];
  v17[4] = 125;
  *(_DWORD *)v17 = 774778491;
  a2[1] += 5;
  return result;
}

char *llvm::itanium_demangle::EnumLiteral::printLeft(_QWORD *a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  size_t v29;
  unint64_t v30;
  size_t v31;
  const void *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  size_t v37;
  unint64_t v38;
  size_t v39;

  ++*((_DWORD *)a2 + 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 1;
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 1) > v7)
  {
    v8 = (unint64_t)(v5 + 993);
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_40;
    v5 = a2[1];
    v6 = v5 + 1;
  }
  a2[1] = v6;
  v5[(_QWORD)v4] = 40;
  v10 = a1[2];
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 40))(v10, a2);
  --*((_DWORD *)a2 + 8);
  result = *a2;
  v12 = a2[1];
  v13 = v12 + 1;
  v14 = (unint64_t)a2[2];
  if ((unint64_t)(v12 + 1) > v14)
  {
    v15 = (unint64_t)(v12 + 993);
    if (2 * v14 <= v15)
      v16 = v15;
    else
      v16 = 2 * v14;
    a2[2] = (char *)v16;
    result = (char *)realloc(result, v16);
    *a2 = result;
    if (!result)
      goto LABEL_40;
    v12 = a2[1];
    v13 = v12 + 1;
  }
  a2[1] = v13;
  v12[(_QWORD)result] = 41;
  v17 = (_BYTE *)a1[3];
  if (*v17 != 110)
  {
    v24 = a1[4];
    if (!v24)
      return result;
    v34 = *a2;
    v35 = a2[1];
    v36 = &v35[v24];
    v37 = (size_t)a2[2];
    if ((unint64_t)&v35[v24] > v37)
    {
      v38 = 2 * v37;
      if (v38 <= (unint64_t)(v36 + 992))
        v39 = (size_t)(v36 + 992);
      else
        v39 = v38;
      a2[2] = (char *)v39;
      v34 = (char *)realloc(v34, v39);
      *a2 = v34;
      if (!v34)
        goto LABEL_40;
      v35 = a2[1];
    }
    v33 = &v35[(_QWORD)v34];
    v32 = v17;
    goto LABEL_38;
  }
  result = *a2;
  v18 = a2[1];
  v19 = v18 + 1;
  v20 = (unint64_t)a2[2];
  if ((unint64_t)(v18 + 1) > v20)
  {
    v21 = (unint64_t)(v18 + 993);
    if (2 * v20 <= v21)
      v22 = v21;
    else
      v22 = 2 * v20;
    a2[2] = (char *)v22;
    result = (char *)realloc(result, v22);
    *a2 = result;
    if (!result)
      goto LABEL_40;
    v18 = a2[1];
    v19 = v18 + 1;
  }
  a2[1] = v19;
  v18[(_QWORD)result] = 45;
  v23 = a1[4];
  v24 = v23 - 1;
  if (v23 == 1)
    return result;
  v25 = a1[3];
  v26 = *a2;
  v27 = a2[1];
  v28 = &v27[v24];
  v29 = (size_t)a2[2];
  if ((unint64_t)&v27[v24] <= v29)
    goto LABEL_29;
  v30 = 2 * v29;
  if (v30 <= (unint64_t)(v28 + 992))
    v31 = (size_t)(v28 + 992);
  else
    v31 = v30;
  a2[2] = (char *)v31;
  v26 = (char *)realloc(v26, v31);
  *a2 = v26;
  if (!v26)
LABEL_40:
    abort();
  v27 = a2[1];
LABEL_29:
  v32 = (const void *)(v25 + 1);
  v33 = &v27[(_QWORD)v26];
LABEL_38:
  result = (char *)memcpy(v33, v32, v24);
  a2[1] += v24;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::FunctionParam,std::string_view &>(uint64_t a1, __n128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E21468;
  v7 = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(v7 + 8) = 67;
  result = *a2;
  *(_WORD *)(v7 + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(__n128 *)(v7 + 16) = result;
  return result;
}

char *llvm::itanium_demangle::FunctionParam::printLeft(uint64_t a1, char **a2)
{
  char *result;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  size_t v13;
  size_t v14;
  char *v15;
  size_t v16;

  result = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 2) > v6)
  {
    v7 = (size_t)(v5 + 994);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    result = (char *)realloc(result, v9);
    *a2 = result;
    if (!result)
      goto LABEL_16;
    v5 = a2[1];
  }
  *(_WORD *)&v5[(_QWORD)result] = 28774;
  v10 = (uint64_t)(a2[1] + 2);
  a2[1] = (char *)v10;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
    return result;
  v12 = *(const void **)(a1 + 16);
  v13 = v10 + v11;
  v14 = (size_t)a2[2];
  v15 = *a2;
  if (v10 + v11 > v14)
  {
    if (2 * v14 <= v13 + 992)
      v16 = v13 + 992;
    else
      v16 = 2 * v14;
    a2[2] = (char *)v16;
    v15 = (char *)realloc(v15, v16);
    *a2 = v15;
    if (v15)
    {
      v10 = (uint64_t)a2[1];
      goto LABEL_14;
    }
LABEL_16:
    abort();
  }
LABEL_14:
  result = (char *)memcpy(&v15[v10], v12, v11);
  a2[1] += v11;
  return result;
}

char *llvm::itanium_demangle::FoldExpr::printLeft(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  size_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  size_t v42;
  const void *v43;
  size_t v44;
  size_t v45;
  char *v46;
  size_t v47;
  unint64_t v48;
  char *v49;
  size_t v50;
  unint64_t v51;
  size_t v52;
  char *result;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  char **v59[2];

  v59[0] = (char **)a2;
  v59[1] = (char **)a1;
  ++*(_DWORD *)(a2 + 32);
  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v7)
  {
    v8 = v5 + 993;
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_71;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v4[v5] = 40;
  if (!*(_BYTE *)(a1 + 48))
  {
    llvm::itanium_demangle::FoldExpr::printLeft(llvm::itanium_demangle::OutputBuffer &)const::{lambda(void)#1}::operator()(v59);
    v11 = *(char **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 16);
    if (v12 + 1 <= v13)
      goto LABEL_17;
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
  {
    v30 = *(_QWORD *)(a2 + 8);
    v29 = *(_QWORD *)(a2 + 16);
    v31 = *(char **)a2;
    if (v30 + 3 <= v29)
      goto LABEL_39;
    goto LABEL_34;
  }
  llvm::itanium_demangle::Node::printAsOperand(v10, a2, 3, 1);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  if (v12 + 1 > v13)
  {
LABEL_12:
    v14 = v12 + 993;
    v15 = 2 * v13;
    if (v15 <= v14)
      v16 = v14;
    else
      v16 = v15;
    *(_QWORD *)(a2 + 16) = v16;
    v11 = (char *)realloc(v11, v16);
    *(_QWORD *)a2 = v11;
    if (!v11)
      goto LABEL_71;
    v12 = *(_QWORD *)(a2 + 8);
  }
LABEL_17:
  v11[v12] = 32;
  v17 = *(_QWORD *)(a2 + 8) + 1;
  *(_QWORD *)(a2 + 8) = v17;
  v18 = *(_QWORD *)(a1 + 40);
  if (v18)
  {
    v19 = *(const void **)(a1 + 32);
    v20 = v17 + v18;
    v21 = *(_QWORD *)(a2 + 16);
    v22 = *(char **)a2;
    if (v17 + v18 > v21)
    {
      if (2 * v21 <= v20 + 992)
        v23 = v20 + 992;
      else
        v23 = 2 * v21;
      *(_QWORD *)(a2 + 16) = v23;
      v22 = (char *)realloc(v22, v23);
      *(_QWORD *)a2 = v22;
      if (!v22)
        goto LABEL_71;
      v17 = *(_QWORD *)(a2 + 8);
    }
    memcpy(&v22[v17], v19, v18);
    v17 = *(_QWORD *)(a2 + 8) + v18;
    *(_QWORD *)(a2 + 8) = v17;
  }
  v24 = *(_QWORD *)(a2 + 16);
  v25 = *(char **)a2;
  if (v17 + 1 > v24)
  {
    v26 = v17 + 993;
    v27 = 2 * v24;
    if (v27 <= v26)
      v28 = v26;
    else
      v28 = v27;
    *(_QWORD *)(a2 + 16) = v28;
    v25 = (char *)realloc(v25, v28);
    *(_QWORD *)a2 = v25;
    if (!v25)
      goto LABEL_71;
    v17 = *(_QWORD *)(a2 + 8);
  }
  v25[v17] = 32;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = *(_QWORD *)(a2 + 8) + 1;
  *(_QWORD *)(a2 + 8) = v30;
  v31 = *(char **)a2;
  if (v30 + 3 > v29)
  {
LABEL_34:
    v32 = v30 + 995;
    v33 = 2 * v29;
    if (v33 <= v32)
      v34 = v32;
    else
      v34 = v33;
    *(_QWORD *)(a2 + 16) = v34;
    v31 = (char *)realloc(v31, v34);
    *(_QWORD *)a2 = v31;
    if (!v31)
      goto LABEL_71;
    v30 = *(_QWORD *)(a2 + 8);
  }
LABEL_39:
  v35 = &v31[v30];
  v35[2] = 46;
  *(_WORD *)v35 = 11822;
  v36 = *(_QWORD *)(a2 + 8);
  v37 = v36 + 3;
  *(_QWORD *)(a2 + 8) = v36 + 3;
  if (*(_BYTE *)(a1 + 48) || *(_QWORD *)(a1 + 24))
  {
    v38 = *(_QWORD *)(a2 + 16);
    v39 = *(char **)a2;
    if (v36 + 4 > v38)
    {
      if (2 * v38 <= v36 + 996)
        v40 = v36 + 996;
      else
        v40 = 2 * v38;
      *(_QWORD *)(a2 + 16) = v40;
      v39 = (char *)realloc(v39, v40);
      *(_QWORD *)a2 = v39;
      if (!v39)
        goto LABEL_71;
      v37 = *(_QWORD *)(a2 + 8);
    }
    v39[v37] = 32;
    v41 = *(_QWORD *)(a2 + 8) + 1;
    *(_QWORD *)(a2 + 8) = v41;
    v42 = *(_QWORD *)(a1 + 40);
    if (v42)
    {
      v43 = *(const void **)(a1 + 32);
      v44 = v41 + v42;
      v45 = *(_QWORD *)(a2 + 16);
      v46 = *(char **)a2;
      if (v41 + v42 > v45)
      {
        if (2 * v45 <= v44 + 992)
          v47 = v44 + 992;
        else
          v47 = 2 * v45;
        *(_QWORD *)(a2 + 16) = v47;
        v46 = (char *)realloc(v46, v47);
        *(_QWORD *)a2 = v46;
        if (!v46)
          goto LABEL_71;
        v41 = *(_QWORD *)(a2 + 8);
      }
      memcpy(&v46[v41], v43, v42);
      v41 = *(_QWORD *)(a2 + 8) + v42;
      *(_QWORD *)(a2 + 8) = v41;
    }
    v48 = *(_QWORD *)(a2 + 16);
    v49 = *(char **)a2;
    if (v41 + 1 > v48)
    {
      v50 = v41 + 993;
      v51 = 2 * v48;
      if (v51 <= v50)
        v52 = v50;
      else
        v52 = v51;
      *(_QWORD *)(a2 + 16) = v52;
      v49 = (char *)realloc(v49, v52);
      *(_QWORD *)a2 = v49;
      if (!v49)
        goto LABEL_71;
      v41 = *(_QWORD *)(a2 + 8);
    }
    v49[v41] = 32;
    ++*(_QWORD *)(a2 + 8);
    if (*(_BYTE *)(a1 + 48))
      llvm::itanium_demangle::FoldExpr::printLeft(llvm::itanium_demangle::OutputBuffer &)const::{lambda(void)#1}::operator()(v59);
    else
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 24), a2, 3, 1);
  }
  --*(_DWORD *)(a2 + 32);
  result = *(char **)a2;
  v54 = *(_QWORD *)(a2 + 8);
  v55 = v54 + 1;
  v56 = *(_QWORD *)(a2 + 16);
  if (v54 + 1 > v56)
  {
    v57 = v54 + 993;
    if (2 * v56 <= v57)
      v58 = v57;
    else
      v58 = 2 * v56;
    *(_QWORD *)(a2 + 16) = v58;
    result = (char *)realloc(result, v58);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v54 = *(_QWORD *)(a2 + 8);
      v55 = v54 + 1;
      goto LABEL_70;
    }
LABEL_71:
    abort();
  }
LABEL_70:
  *(_QWORD *)(a2 + 8) = v55;
  result[v54] = 41;
  return result;
}

void *llvm::itanium_demangle::FoldExpr::printLeft(llvm::itanium_demangle::OutputBuffer &)const::{lambda(void)#1}::operator()(char ***a1)
{
  char **v2;
  char **v3;
  void *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char **v11;
  char **v12;
  void *result;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  void (**v19)(void **, _QWORD);
  char v20;
  __int16 v21;
  char *v22;

  v3 = *a1;
  v2 = a1[1];
  *((_DWORD *)v3 + 8) = *((_DWORD *)*a1 + 8) + 1;
  v4 = *v3;
  v5 = v3[1];
  v6 = v5 + 1;
  v7 = (unint64_t)v3[2];
  if ((unint64_t)(v5 + 1) > v7)
  {
    v8 = (unint64_t)(v5 + 993);
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    v3[2] = (char *)v9;
    v4 = realloc(v4, v9);
    *v3 = (char *)v4;
    if (!v4)
      goto LABEL_16;
    v5 = v3[1];
    v6 = v5 + 1;
  }
  v3[1] = v6;
  v5[(_QWORD)v4] = 40;
  v10 = v2[2];
  v20 = 42;
  v21 = 1344;
  v19 = (void (**)(void **, _QWORD))&unk_1E0E22280;
  v22 = v10;
  v11 = *a1;
  llvm::itanium_demangle::ParameterPackExpansion::printLeft((uint64_t)&v19, *a1);
  if ((v21 & 0xC0) != 0x40)
    ((void (**)(void **, char **))v19)[5]((void **)&v19, v11);
  v12 = *a1;
  --*((_DWORD *)v12 + 8);
  result = *v12;
  v14 = v12[1];
  v15 = v14 + 1;
  v16 = (unint64_t)v12[2];
  if ((unint64_t)(v14 + 1) > v16)
  {
    v17 = (unint64_t)(v14 + 993);
    if (2 * v16 <= v17)
      v18 = v17;
    else
      v18 = 2 * v16;
    v12[2] = (char *)v18;
    result = realloc(result, v18);
    *v12 = (char *)result;
    if (result)
    {
      v14 = v12[1];
      v15 = v14 + 1;
      goto LABEL_15;
    }
LABEL_16:
    abort();
  }
LABEL_15:
  v12[1] = v15;
  v14[(_QWORD)result] = 41;
  return result;
}

uint64_t llvm::itanium_demangle::ParameterPackExpansion::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  int i;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;

  v4 = a2[3];
  a2[3] = (char *)-1;
  v5 = (uint64_t)a2[1];
  v6 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40)
    result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v6 + 40))(v6, a2);
  v8 = *((_DWORD *)a2 + 7);
  if (v8 == -1)
  {
    result = (uint64_t)*a2;
    v17 = a2[1];
    v18 = (unint64_t)a2[2];
    if ((unint64_t)(v17 + 3) > v18)
    {
      v19 = (size_t)(v17 + 995);
      v20 = 2 * v18;
      if (v20 <= v19)
        v21 = v19;
      else
        v21 = v20;
      a2[2] = (char *)v21;
      result = (uint64_t)realloc((void *)result, v21);
      *a2 = (char *)result;
      if (!result)
LABEL_25:
        abort();
      v17 = a2[1];
    }
    v22 = &v17[result];
    v22[2] = 46;
    *(_WORD *)v22 = 11822;
    v5 = (uint64_t)(a2[1] + 3);
    goto LABEL_23;
  }
  if (!v8)
  {
LABEL_23:
    a2[1] = (char *)v5;
    goto LABEL_24;
  }
  if (v8 >= 2)
  {
    for (i = 1; i != v8; ++i)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = (unint64_t)a2[2];
      if ((unint64_t)(v11 + 2) > v12)
      {
        v13 = (size_t)(v11 + 994);
        v14 = 2 * v12;
        if (v14 <= v13)
          v15 = v13;
        else
          v15 = v14;
        a2[2] = (char *)v15;
        v10 = (char *)realloc(v10, v15);
        *a2 = v10;
        if (!v10)
          goto LABEL_25;
        v11 = a2[1];
      }
      *(_WORD *)&v11[(_QWORD)v10] = 8236;
      a2[1] += 2;
      *((_DWORD *)a2 + 6) = i;
      v16 = *(_QWORD *)(a1 + 16);
      result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, a2);
      if ((*(_WORD *)(v16 + 9) & 0xC0) != 0x40)
        result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 40))(v16, a2);
    }
  }
LABEL_24:
  a2[3] = v4;
  return result;
}

uint64_t llvm::itanium_demangle::BracedExpr::printLeft(uint64_t a1, char **a2)
{
  int v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *a2;
  v6 = a2[1];
  v7 = v6 + 1;
  v8 = (unint64_t)a2[2];
  if (v4)
  {
    if ((unint64_t)(v6 + 1) > v8)
    {
      v9 = (unint64_t)(v6 + 993);
      if (2 * v8 <= v9)
        v10 = v9;
      else
        v10 = 2 * v8;
      a2[2] = (char *)v10;
      v5 = (char *)realloc(v5, v10);
      *a2 = v5;
      if (!v5)
        goto LABEL_35;
      v6 = a2[1];
      v7 = v6 + 1;
    }
    a2[1] = v7;
    v6[(_QWORD)v5] = 91;
    v11 = *(_QWORD *)(a1 + 16);
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
    if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
    v12 = *a2;
    v13 = a2[1];
    v14 = v13 + 1;
    v15 = (unint64_t)a2[2];
    if ((unint64_t)(v13 + 1) > v15)
    {
      v16 = (unint64_t)(v13 + 993);
      if (2 * v15 <= v16)
        v17 = v16;
      else
        v17 = 2 * v15;
      a2[2] = (char *)v17;
      v12 = (char *)realloc(v12, v17);
      *a2 = v12;
      if (!v12)
        goto LABEL_35;
      v13 = a2[1];
      v14 = v13 + 1;
    }
    a2[1] = v14;
    v13[(_QWORD)v12] = 93;
  }
  else
  {
    if ((unint64_t)(v6 + 1) > v8)
    {
      v18 = (unint64_t)(v6 + 993);
      if (2 * v8 <= v18)
        v19 = v18;
      else
        v19 = 2 * v8;
      a2[2] = (char *)v19;
      v5 = (char *)realloc(v5, v19);
      *a2 = v5;
      if (!v5)
        goto LABEL_35;
      v6 = a2[1];
      v7 = v6 + 1;
    }
    a2[1] = v7;
    v6[(_QWORD)v5] = 46;
    v20 = *(_QWORD *)(a1 + 16);
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v20 + 32))(v20, a2);
    if ((*(_WORD *)(v20 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v20 + 40))(v20, a2);
  }
  v21 = *(_QWORD *)(a1 + 24);
  if (*(unsigned __int8 *)(v21 + 8) - 81 < 2)
    goto LABEL_33;
  v22 = *a2;
  v23 = a2[1];
  v24 = (unint64_t)a2[2];
  if ((unint64_t)(v23 + 3) > v24)
  {
    v25 = (size_t)(v23 + 995);
    v26 = 2 * v24;
    if (v26 <= v25)
      v27 = v25;
    else
      v27 = v26;
    a2[2] = (char *)v27;
    v22 = (char *)realloc(v22, v27);
    *a2 = v22;
    if (v22)
    {
      v23 = a2[1];
      goto LABEL_32;
    }
LABEL_35:
    abort();
  }
LABEL_32:
  v28 = &v23[(_QWORD)v22];
  v28[2] = 32;
  *(_WORD *)v28 = 15648;
  a2[1] += 3;
  v21 = *(_QWORD *)(a1 + 24);
LABEL_33:
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v21 + 32))(v21, a2);
  if ((*(_WORD *)(v21 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v21 + 40))(v21, a2);
  return result;
}

uint64_t llvm::itanium_demangle::BracedRangeExpr::printLeft(_QWORD *a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 1;
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 1) > v7)
  {
    v8 = (unint64_t)(v5 + 993);
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_33;
    v5 = a2[1];
    v6 = v5 + 1;
  }
  a2[1] = v6;
  v5[(_QWORD)v4] = 91;
  v10 = a1[2];
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 40))(v10, a2);
  v11 = *a2;
  v12 = a2[1];
  v13 = (unint64_t)a2[2];
  if ((unint64_t)(v12 + 5) > v13)
  {
    v14 = (size_t)(v12 + 997);
    v15 = 2 * v13;
    if (v15 <= v14)
      v16 = v14;
    else
      v16 = v15;
    a2[2] = (char *)v16;
    v11 = (char *)realloc(v11, v16);
    *a2 = v11;
    if (!v11)
      goto LABEL_33;
    v12 = a2[1];
  }
  v17 = &v12[(_QWORD)v11];
  v17[4] = 32;
  *(_DWORD *)v17 = 774778400;
  a2[1] += 5;
  v18 = a1[3];
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v18 + 32))(v18, a2);
  if ((*(_WORD *)(v18 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v18 + 40))(v18, a2);
  v19 = *a2;
  v20 = a2[1];
  v21 = v20 + 1;
  v22 = (unint64_t)a2[2];
  if ((unint64_t)(v20 + 1) > v22)
  {
    v23 = (unint64_t)(v20 + 993);
    if (2 * v22 <= v23)
      v24 = v23;
    else
      v24 = 2 * v22;
    a2[2] = (char *)v24;
    v19 = (char *)realloc(v19, v24);
    *a2 = v19;
    if (!v19)
      goto LABEL_33;
    v20 = a2[1];
    v21 = v20 + 1;
  }
  a2[1] = v21;
  v20[(_QWORD)v19] = 93;
  v25 = a1[4];
  if (*(unsigned __int8 *)(v25 + 8) - 81 < 2)
    goto LABEL_31;
  v26 = *a2;
  v27 = a2[1];
  v28 = (unint64_t)a2[2];
  if ((unint64_t)(v27 + 3) > v28)
  {
    v29 = (size_t)(v27 + 995);
    v30 = 2 * v28;
    if (v30 <= v29)
      v31 = v29;
    else
      v31 = v30;
    a2[2] = (char *)v31;
    v26 = (char *)realloc(v26, v31);
    *a2 = v26;
    if (v26)
    {
      v27 = a2[1];
      goto LABEL_30;
    }
LABEL_33:
    abort();
  }
LABEL_30:
  v32 = &v27[(_QWORD)v26];
  v32[2] = 32;
  *(_WORD *)v32 = 15648;
  a2[1] += 3;
  v25 = a1[4];
LABEL_31:
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v25 + 32))(v25, a2);
  if ((*(_WORD *)(v25 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v25 + 40))(v25, a2);
  return result;
}

void *llvm::itanium_demangle::InitListExpr::printLeft(_QWORD *a1, void **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *result;
  unint64_t v23;
  size_t v24;

  v4 = a1[2];
  if (v4)
  {
    (*(void (**)(_QWORD, void **))(*(_QWORD *)v4 + 32))(a1[2], a2);
    if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, a2);
  }
  v5 = (char *)*a2;
  v6 = (char *)a2[1];
  v7 = v6 + 1;
  v8 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 1) > v8)
  {
    v9 = (unint64_t)(v6 + 993);
    if (2 * v8 <= v9)
      v10 = v9;
    else
      v10 = 2 * v8;
    a2[2] = (void *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      goto LABEL_31;
    v6 = (char *)a2[1];
    v7 = v6 + 1;
  }
  a2[1] = v7;
  v6[(_QWORD)v5] = 123;
  v11 = (uint64_t)a2[1];
  if (a1[4])
  {
    v12 = 0;
    v13 = 1;
    while (1)
    {
      v14 = v11;
      if ((v13 & 1) == 0)
      {
        v15 = (unint64_t)a2[2];
        v16 = (char *)*a2;
        if (v11 + 2 <= v15)
        {
          v19 = v11;
        }
        else
        {
          v17 = 2 * v15;
          if (v17 <= v11 + 994)
            v18 = v11 + 994;
          else
            v18 = v17;
          a2[2] = (void *)v18;
          v16 = (char *)realloc(v16, v18);
          *a2 = v16;
          if (!v16)
            goto LABEL_31;
          v19 = (uint64_t)a2[1];
        }
        *(_WORD *)&v16[v19] = 8236;
        v14 = (uint64_t)a2[1] + 2;
        a2[1] = (void *)v14;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1[3] + 8 * v12), (uint64_t)a2, 18, 0);
      if ((void *)v14 == a2[1])
      {
        a2[1] = (void *)v11;
        if (++v12 == a1[4])
          break;
      }
      else
      {
        v13 = 0;
        v11 = (uint64_t)a2[1];
        if (++v12 == a1[4])
          break;
      }
    }
  }
  v20 = v11 + 1;
  v21 = (unint64_t)a2[2];
  result = *a2;
  if (v11 + 1 > v21)
  {
    v23 = 2 * v21;
    if (v23 <= v11 + 993)
      v24 = v11 + 993;
    else
      v24 = v23;
    a2[2] = (void *)v24;
    result = realloc(result, v24);
    *a2 = result;
    if (result)
    {
      v11 = (uint64_t)a2[1];
      v20 = v11 + 1;
      goto LABEL_30;
    }
LABEL_31:
    abort();
  }
LABEL_30:
  a2[1] = (void *)v20;
  *((_BYTE *)result + v11) = 125;
  return result;
}

void *llvm::itanium_demangle::PointerToMemberConversionExpr::printLeft(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  void *result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;

  ++*(_DWORD *)(a2 + 32);
  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v7)
  {
    v8 = v5 + 993;
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_30;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  *((_BYTE *)v4 + v5) = 40;
  v10 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a2);
  --*(_DWORD *)(a2 + 32);
  v11 = *(void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(a2 + 16);
  if (v12 + 1 > v14)
  {
    v15 = v12 + 993;
    if (2 * v14 <= v15)
      v16 = v15;
    else
      v16 = 2 * v14;
    *(_QWORD *)(a2 + 16) = v16;
    v11 = realloc(v11, v16);
    *(_QWORD *)a2 = v11;
    if (!v11)
      goto LABEL_30;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = v12 + 1;
  }
  *(_QWORD *)(a2 + 8) = v13;
  *((_BYTE *)v11 + v12) = 41;
  ++*(_DWORD *)(a2 + 32);
  v17 = *(void **)a2;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  v20 = *(_QWORD *)(a2 + 16);
  if (v18 + 1 > v20)
  {
    v21 = v18 + 993;
    if (2 * v20 <= v21)
      v22 = v21;
    else
      v22 = 2 * v20;
    *(_QWORD *)(a2 + 16) = v22;
    v17 = realloc(v17, v22);
    *(_QWORD *)a2 = v17;
    if (!v17)
      goto LABEL_30;
    v18 = *(_QWORD *)(a2 + 8);
    v19 = v18 + 1;
  }
  *(_QWORD *)(a2 + 8) = v19;
  *((_BYTE *)v17 + v18) = 40;
  v23 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 32))(v23, a2);
  if ((*(_WORD *)(v23 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 40))(v23, a2);
  --*(_DWORD *)(a2 + 32);
  result = *(void **)a2;
  v25 = *(_QWORD *)(a2 + 8);
  v26 = v25 + 1;
  v27 = *(_QWORD *)(a2 + 16);
  if (v25 + 1 > v27)
  {
    v28 = v25 + 993;
    if (2 * v27 <= v28)
      v29 = v28;
    else
      v29 = 2 * v27;
    *(_QWORD *)(a2 + 16) = v29;
    result = realloc(result, v29);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v25 = *(_QWORD *)(a2 + 8);
      v26 = v25 + 1;
      goto LABEL_29;
    }
LABEL_30:
    abort();
  }
LABEL_29:
  *(_QWORD *)(a2 + 8) = v26;
  *((_BYTE *)result + v25) = 41;
  return result;
}

char *llvm::itanium_demangle::ExprRequirement::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  void *v14;
  size_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  size_t v35;
  uint64_t v36;
  char *result;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 1) > v6)
  {
    v7 = (size_t)(v5 + 993);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_50;
    v5 = a2[1];
  }
  v5[(_QWORD)v4] = 32;
  v10 = a2[1];
  v11 = v10 + 1;
  a2[1] = v10 + 1;
  if (*(_BYTE *)(a1 + 24) || *(_QWORD *)(a1 + 32))
  {
    ++*((_DWORD *)a2 + 8);
    v12 = v10 + 2;
    v13 = (unint64_t)a2[2];
    v14 = *a2;
    if ((unint64_t)(v10 + 2) > v13)
    {
      if (2 * v13 <= (unint64_t)(v10 + 994))
        v15 = (size_t)(v10 + 994);
      else
        v15 = 2 * v13;
      a2[2] = (char *)v15;
      v14 = realloc(v14, v15);
      *a2 = (char *)v14;
      if (!v14)
        goto LABEL_50;
      v11 = a2[1];
      v12 = v11 + 1;
    }
    a2[1] = v12;
    v11[(_QWORD)v14] = 123;
  }
  v16 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, a2);
  if ((*(_WORD *)(v16 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v16 + 40))(v16, a2);
  if (*(_BYTE *)(a1 + 24) || *(_QWORD *)(a1 + 32))
  {
    --*((_DWORD *)a2 + 8);
    v17 = *a2;
    v18 = a2[1];
    v19 = v18 + 1;
    v20 = (unint64_t)a2[2];
    if ((unint64_t)(v18 + 1) > v20)
    {
      v21 = (unint64_t)(v18 + 993);
      if (2 * v20 <= v21)
        v22 = v21;
      else
        v22 = 2 * v20;
      a2[2] = (char *)v22;
      v17 = realloc(v17, v22);
      *a2 = (char *)v17;
      if (!v17)
        goto LABEL_50;
      v18 = a2[1];
      v19 = v18 + 1;
    }
    a2[1] = v19;
    v18[(_QWORD)v17] = 125;
    if (*(_BYTE *)(a1 + 24))
    {
      v23 = *a2;
      v24 = a2[1];
      v25 = (unint64_t)a2[2];
      if ((unint64_t)(v24 + 9) > v25)
      {
        v26 = (size_t)(v24 + 1001);
        v27 = 2 * v25;
        if (v27 <= v26)
          v28 = v26;
        else
          v28 = v27;
        a2[2] = (char *)v28;
        v23 = (char *)realloc(v23, v28);
        *a2 = v23;
        if (!v23)
          goto LABEL_50;
        v24 = a2[1];
      }
      v29 = &v24[(_QWORD)v23];
      *(_QWORD *)v29 = *(_QWORD *)" noexcept";
      v29[8] = 116;
      a2[1] += 9;
    }
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v30 = *a2;
    v31 = a2[1];
    v32 = (unint64_t)a2[2];
    if ((unint64_t)(v31 + 4) > v32)
    {
      v33 = (size_t)(v31 + 996);
      v34 = 2 * v32;
      if (v34 <= v33)
        v35 = v33;
      else
        v35 = v34;
      a2[2] = (char *)v35;
      v30 = (char *)realloc(v30, v35);
      *a2 = v30;
      if (!v30)
        goto LABEL_50;
      v31 = a2[1];
    }
    *(_DWORD *)&v31[(_QWORD)v30] = 540945696;
    a2[1] += 4;
    v36 = *(_QWORD *)(a1 + 32);
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v36 + 32))(v36, a2);
    if ((*(_WORD *)(v36 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v36 + 40))(v36, a2);
  }
  result = *a2;
  v38 = a2[1];
  v39 = v38 + 1;
  v40 = (unint64_t)a2[2];
  if ((unint64_t)(v38 + 1) > v40)
  {
    v41 = (unint64_t)(v38 + 993);
    if (2 * v40 <= v41)
      v42 = v41;
    else
      v42 = 2 * v40;
    a2[2] = (char *)v42;
    result = (char *)realloc(result, v42);
    *a2 = result;
    if (result)
    {
      v38 = a2[1];
      v39 = v38 + 1;
      goto LABEL_49;
    }
LABEL_50:
    abort();
  }
LABEL_49:
  a2[1] = v39;
  v38[(_QWORD)result] = 59;
  return result;
}

char *llvm::itanium_demangle::TypeRequirement::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *result;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 10) > v6)
  {
    v7 = (size_t)(v5 + 1002);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_16;
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  *(_QWORD *)v10 = *(_QWORD *)" typename ";
  *((_WORD *)v10 + 4) = 8293;
  a2[1] += 10;
  v11 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  result = *a2;
  v13 = a2[1];
  v14 = v13 + 1;
  v15 = (unint64_t)a2[2];
  if ((unint64_t)(v13 + 1) > v15)
  {
    v16 = (unint64_t)(v13 + 993);
    if (2 * v15 <= v16)
      v17 = v16;
    else
      v17 = 2 * v15;
    a2[2] = (char *)v17;
    result = (char *)realloc(result, v17);
    *a2 = result;
    if (result)
    {
      v13 = a2[1];
      v14 = v13 + 1;
      goto LABEL_15;
    }
LABEL_16:
    abort();
  }
LABEL_15:
  a2[1] = v14;
  v13[(_QWORD)result] = 59;
  return result;
}

char *llvm::itanium_demangle::NestedRequirement::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *result;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 10) > v6)
  {
    v7 = (size_t)(v5 + 1002);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_16;
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  *(_QWORD *)v10 = *(_QWORD *)" requires ";
  *((_WORD *)v10 + 4) = 8307;
  a2[1] += 10;
  v11 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  result = *a2;
  v13 = a2[1];
  v14 = v13 + 1;
  v15 = (unint64_t)a2[2];
  if ((unint64_t)(v13 + 1) > v15)
  {
    v16 = (unint64_t)(v13 + 993);
    if (2 * v15 <= v16)
      v17 = v16;
    else
      v17 = 2 * v15;
    a2[2] = (char *)v17;
    result = (char *)realloc(result, v17);
    *a2 = result;
    if (result)
    {
      v13 = a2[1];
      v14 = v13 + 1;
      goto LABEL_15;
    }
LABEL_16:
    abort();
  }
LABEL_15:
  a2[1] = v14;
  v13[(_QWORD)result] = 59;
  return result;
}

char *llvm::itanium_demangle::RequiresExpr::printLeft(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  char *result;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 + 8 > v6)
  {
    v7 = v5 + 1000;
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_71;
    v5 = *(_QWORD *)(a2 + 8);
  }
  *(_QWORD *)&v4[v5] = 0x7365726975716572;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = v10 + 8;
  *(_QWORD *)(a2 + 8) = v10 + 8;
  if (a1[3])
  {
    v12 = v10 + 9;
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(char **)a2;
    if (v10 + 9 > v13)
    {
      if (2 * v13 <= v10 + 1001)
        v15 = v10 + 1001;
      else
        v15 = 2 * v13;
      *(_QWORD *)(a2 + 16) = v15;
      v14 = (char *)realloc(v14, v15);
      *(_QWORD *)a2 = v14;
      if (!v14)
        goto LABEL_71;
      v11 = *(_QWORD *)(a2 + 8);
      v12 = v11 + 1;
    }
    *(_QWORD *)(a2 + 8) = v12;
    v14[v11] = 32;
    ++*(_DWORD *)(a2 + 32);
    v16 = *(char **)a2;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = v17 + 1;
    v19 = *(_QWORD *)(a2 + 16);
    if (v17 + 1 > v19)
    {
      v20 = v17 + 993;
      if (2 * v19 <= v20)
        v21 = v20;
      else
        v21 = 2 * v19;
      *(_QWORD *)(a2 + 16) = v21;
      v16 = (char *)realloc(v16, v21);
      *(_QWORD *)a2 = v16;
      if (!v16)
        goto LABEL_71;
      v17 = *(_QWORD *)(a2 + 8);
      v18 = v17 + 1;
    }
    *(_QWORD *)(a2 + 8) = v18;
    v16[v17] = 40;
    v22 = *(_QWORD *)(a2 + 8);
    if (a1[3])
    {
      v23 = 0;
      v24 = 1;
      while (1)
      {
        v25 = v22;
        if ((v24 & 1) == 0)
        {
          v26 = *(_QWORD *)(a2 + 16);
          v27 = *(char **)a2;
          if (v22 + 2 <= v26)
          {
            v30 = v22;
          }
          else
          {
            v28 = 2 * v26;
            if (v28 <= v22 + 994)
              v29 = v22 + 994;
            else
              v29 = v28;
            *(_QWORD *)(a2 + 16) = v29;
            v27 = (char *)realloc(v27, v29);
            *(_QWORD *)a2 = v27;
            if (!v27)
              goto LABEL_71;
            v30 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)&v27[v30] = 8236;
          v25 = *(_QWORD *)(a2 + 8) + 2;
          *(_QWORD *)(a2 + 8) = v25;
        }
        llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1[2] + 8 * v23), a2, 18, 0);
        if (v25 == *(_QWORD *)(a2 + 8))
        {
          *(_QWORD *)(a2 + 8) = v22;
          if (++v23 == a1[3])
            break;
        }
        else
        {
          v24 = 0;
          v22 = *(_QWORD *)(a2 + 8);
          if (++v23 == a1[3])
            break;
        }
      }
    }
    --*(_DWORD *)(a2 + 32);
    v31 = v22 + 1;
    v32 = *(_QWORD *)(a2 + 16);
    v33 = *(char **)a2;
    if (v22 + 1 > v32)
    {
      v34 = 2 * v32;
      if (v34 <= v22 + 993)
        v35 = v22 + 993;
      else
        v35 = v34;
      *(_QWORD *)(a2 + 16) = v35;
      v33 = (char *)realloc(v33, v35);
      *(_QWORD *)a2 = v33;
      if (!v33)
        goto LABEL_71;
      v22 = *(_QWORD *)(a2 + 8);
      v31 = v22 + 1;
    }
    *(_QWORD *)(a2 + 8) = v31;
    v33[v22] = 41;
    v11 = *(_QWORD *)(a2 + 8);
  }
  v36 = v11 + 1;
  v37 = *(_QWORD *)(a2 + 16);
  v38 = *(char **)a2;
  if (v11 + 1 > v37)
  {
    v39 = v11 + 993;
    if (2 * v37 <= v39)
      v40 = v39;
    else
      v40 = 2 * v37;
    *(_QWORD *)(a2 + 16) = v40;
    v38 = (char *)realloc(v38, v40);
    *(_QWORD *)a2 = v38;
    if (!v38)
      goto LABEL_71;
    v11 = *(_QWORD *)(a2 + 8);
    v36 = v11 + 1;
  }
  *(_QWORD *)(a2 + 8) = v36;
  v38[v11] = 32;
  ++*(_DWORD *)(a2 + 32);
  v41 = *(char **)a2;
  v42 = *(_QWORD *)(a2 + 8);
  v43 = v42 + 1;
  v44 = *(_QWORD *)(a2 + 16);
  if (v42 + 1 > v44)
  {
    v45 = v42 + 993;
    if (2 * v44 <= v45)
      v46 = v45;
    else
      v46 = 2 * v44;
    *(_QWORD *)(a2 + 16) = v46;
    v41 = (char *)realloc(v41, v46);
    *(_QWORD *)a2 = v41;
    if (!v41)
      goto LABEL_71;
    v42 = *(_QWORD *)(a2 + 8);
    v43 = v42 + 1;
  }
  *(_QWORD *)(a2 + 8) = v43;
  v41[v42] = 123;
  v47 = a1[5];
  if (v47)
  {
    v48 = (_QWORD *)a1[4];
    v49 = 8 * v47;
    do
    {
      v50 = *v48;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v48 + 32))(*v48, a2);
      if ((*(_WORD *)(v50 + 9) & 0xC0) != 0x40)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 40))(v50, a2);
      ++v48;
      v49 -= 8;
    }
    while (v49);
  }
  v51 = *(char **)a2;
  v52 = *(_QWORD *)(a2 + 8);
  v53 = v52 + 1;
  v54 = *(_QWORD *)(a2 + 16);
  if (v52 + 1 > v54)
  {
    v55 = v52 + 993;
    if (2 * v54 <= v55)
      v56 = v55;
    else
      v56 = 2 * v54;
    *(_QWORD *)(a2 + 16) = v56;
    v51 = (char *)realloc(v51, v56);
    *(_QWORD *)a2 = v51;
    if (!v51)
      goto LABEL_71;
    v52 = *(_QWORD *)(a2 + 8);
    v53 = v52 + 1;
  }
  *(_QWORD *)(a2 + 8) = v53;
  v51[v52] = 32;
  --*(_DWORD *)(a2 + 32);
  result = *(char **)a2;
  v58 = *(_QWORD *)(a2 + 8);
  v59 = v58 + 1;
  v60 = *(_QWORD *)(a2 + 16);
  if (v58 + 1 > v60)
  {
    v61 = v58 + 993;
    if (2 * v60 <= v61)
      v62 = v61;
    else
      v62 = 2 * v60;
    *(_QWORD *)(a2 + 16) = v62;
    result = (char *)realloc(result, v62);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v58 = *(_QWORD *)(a2 + 8);
      v59 = v58 + 1;
      goto LABEL_70;
    }
LABEL_71:
    abort();
  }
LABEL_70:
  *(_QWORD *)(a2 + 8) = v59;
  result[v58] = 125;
  return result;
}

char *llvm::itanium_demangle::SubobjectExpr::printLeft(_QWORD *a1, char **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  size_t v21;
  _BYTE *v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  size_t v33;
  const void *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  size_t v38;
  char *v39;
  size_t v40;
  unint64_t v41;
  char *result;
  size_t v43;
  unint64_t v44;
  size_t v45;

  v4 = a1[3];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 2) > v7)
  {
    v8 = (size_t)(v6 + 994);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      goto LABEL_56;
    v6 = a2[1];
  }
  *(_WORD *)&v6[(_QWORD)v5] = 15406;
  a2[1] += 2;
  v11 = a1[2];
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  v12 = *a2;
  v13 = a2[1];
  v14 = (unint64_t)a2[2];
  if ((unint64_t)(v13 + 11) > v14)
  {
    v15 = (size_t)(v13 + 1003);
    v16 = 2 * v14;
    if (v16 <= v15)
      v17 = v15;
    else
      v17 = v16;
    a2[2] = (char *)v17;
    v12 = (char *)realloc(v12, v17);
    *a2 = v12;
    if (!v12)
      goto LABEL_56;
    v13 = a2[1];
  }
  v18 = &v13[(_QWORD)v12];
  *(_QWORD *)v18 = *(_QWORD *)" at offset ";
  *(_DWORD *)(v18 + 7) = 544499059;
  v19 = a2[1];
  v20 = v19 + 11;
  a2[1] = v19 + 11;
  v21 = a1[5];
  if (!v21)
  {
    v36 = (unint64_t)a2[2];
    v37 = *a2;
    if ((unint64_t)(v19 + 12) > v36)
    {
      if (2 * v36 <= (unint64_t)(v19 + 1004))
        v38 = (size_t)(v19 + 1004);
      else
        v38 = 2 * v36;
      a2[2] = (char *)v38;
      v37 = (char *)realloc(v37, v38);
      *a2 = v37;
      if (!v37)
        goto LABEL_56;
      v20 = a2[1];
    }
    v20[(_QWORD)v37] = 48;
    v21 = 1;
    goto LABEL_48;
  }
  v22 = (_BYTE *)a1[4];
  v23 = (unint64_t)a2[2];
  v24 = *a2;
  if (*v22 != 110)
  {
    v39 = &v20[v21];
    if ((unint64_t)&v20[v21] > v23)
    {
      if (2 * v23 <= (unint64_t)(v39 + 992))
        v40 = (size_t)(v39 + 992);
      else
        v40 = 2 * v23;
      a2[2] = (char *)v40;
      v24 = (char *)realloc(v24, v40);
      *a2 = v24;
      if (!v24)
        goto LABEL_56;
      v20 = a2[1];
    }
    v35 = &v20[(_QWORD)v24];
    v34 = v22;
    goto LABEL_47;
  }
  if ((unint64_t)(v19 + 12) > v23)
  {
    if (2 * v23 <= (unint64_t)(v19 + 1004))
      v25 = (size_t)(v19 + 1004);
    else
      v25 = 2 * v23;
    a2[2] = (char *)v25;
    v24 = (char *)realloc(v24, v25);
    *a2 = v24;
    if (!v24)
      goto LABEL_56;
    v20 = a2[1];
  }
  v20[(_QWORD)v24] = 45;
  v26 = a2[1];
  v27 = (size_t)(v26 + 1);
  a2[1] = v26 + 1;
  v28 = a1[5];
  v21 = v28 - 1;
  if (v28 != 1)
  {
    v29 = a1[4];
    v30 = (unint64_t)&v26[v28];
    v31 = (unint64_t)a2[2];
    v32 = *a2;
    if (v30 > v31)
    {
      if (2 * v31 <= v30 + 992)
        v33 = v30 + 992;
      else
        v33 = 2 * v31;
      a2[2] = (char *)v33;
      v32 = (char *)realloc(v32, v33);
      *a2 = v32;
      if (!v32)
        goto LABEL_56;
      v27 = (size_t)a2[1];
    }
    v34 = (const void *)(v29 + 1);
    v35 = &v32[v27];
LABEL_47:
    memcpy(v35, v34, v21);
LABEL_48:
    v27 = (size_t)&a2[1][v21];
    a2[1] = (char *)v27;
  }
  v41 = (unint64_t)a2[2];
  result = *a2;
  if (v27 + 1 > v41)
  {
    v43 = v27 + 993;
    v44 = 2 * v41;
    if (v44 <= v43)
      v45 = v43;
    else
      v45 = v44;
    a2[2] = (char *)v45;
    result = (char *)realloc(result, v45);
    *a2 = result;
    if (result)
    {
      v27 = (size_t)a2[1];
      goto LABEL_55;
    }
LABEL_56:
    abort();
  }
LABEL_55:
  result[v27] = 62;
  ++a2[1];
  return result;
}

void *llvm::itanium_demangle::SizeofParamPackExpr::printLeft(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  void *result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  char v25;
  __int16 v26;
  uint64_t v27;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 + 9 > v6)
  {
    v7 = v5 + 1001;
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_20;
    v5 = *(_QWORD *)(a2 + 8);
  }
  v10 = &v4[v5];
  *(_QWORD *)v10 = *(_QWORD *)"sizeof...";
  v10[8] = 46;
  v11 = *(void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = v12 + 9;
  *(_QWORD *)(a2 + 8) = v12 + 9;
  ++*(_DWORD *)(a2 + 32);
  v14 = v12 + 10;
  v15 = *(_QWORD *)(a2 + 16);
  if (v12 + 10 > v15)
  {
    if (2 * v15 <= v12 + 1002)
      v16 = v12 + 1002;
    else
      v16 = 2 * v15;
    *(_QWORD *)(a2 + 16) = v16;
    v11 = realloc(v11, v16);
    *(_QWORD *)a2 = v11;
    if (!v11)
      goto LABEL_20;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = v13 + 1;
  }
  *(_QWORD *)(a2 + 8) = v14;
  *((_BYTE *)v11 + v13) = 40;
  v17 = *(_QWORD *)(a1 + 16);
  v25 = 42;
  v26 = 1344;
  v24 = &unk_1E0E22280;
  v27 = v17;
  llvm::itanium_demangle::ParameterPackExpansion::printLeft((uint64_t)&v24, (char **)a2);
  --*(_DWORD *)(a2 + 32);
  result = *(void **)a2;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v19 + 1;
  v21 = *(_QWORD *)(a2 + 16);
  if (v19 + 1 > v21)
  {
    v22 = v19 + 993;
    if (2 * v21 <= v22)
      v23 = v22;
    else
      v23 = 2 * v21;
    *(_QWORD *)(a2 + 16) = v23;
    result = realloc(result, v23);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v19 = *(_QWORD *)(a2 + 8);
      v20 = v19 + 1;
      goto LABEL_19;
    }
LABEL_20:
    abort();
  }
LABEL_19:
  *(_QWORD *)(a2 + 8) = v20;
  *((_BYTE *)result + v19) = 41;
  return result;
}

_QWORD *llvm::itanium_demangle::NodeArrayNode::printLeft(_QWORD *result, char **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;

  if (result[3])
  {
    v3 = result;
    v4 = 0;
    v5 = (uint64_t)a2[1];
    v6 = 1;
    do
    {
      while (1)
      {
        v7 = v5;
        if ((v6 & 1) == 0)
        {
          v8 = (unint64_t)a2[2];
          v9 = *a2;
          if (v5 + 2 <= v8)
          {
            v12 = v5;
          }
          else
          {
            v10 = 2 * v8;
            if (v10 <= v5 + 994)
              v11 = v5 + 994;
            else
              v11 = v10;
            a2[2] = (char *)v11;
            v9 = (char *)realloc(v9, v11);
            *a2 = v9;
            if (!v9)
              abort();
            v12 = (uint64_t)a2[1];
          }
          *(_WORD *)&v9[v12] = 8236;
          v7 = (uint64_t)(a2[1] + 2);
          a2[1] = (char *)v7;
        }
        result = llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(v3[2] + 8 * v4), (uint64_t)a2, 18, 0);
        if ((char *)v7 != a2[1])
          break;
        a2[1] = (char *)v5;
        if (++v4 == v3[3])
          return result;
      }
      v6 = 0;
      v5 = (uint64_t)a2[1];
      ++v4;
    }
    while (v4 != v3[3]);
  }
  return result;
}

uint64_t llvm::itanium_demangle::ThrowExpr::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 6) > v6)
  {
    v7 = (size_t)(v5 + 998);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      abort();
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  *((_WORD *)v10 + 2) = 8311;
  *(_DWORD *)v10 = 1869768820;
  a2[1] += 6;
  v11 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseUnresolvedType(unsigned __int8 **a1, size_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int64_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  if (a1[1] == *a1)
  v3 = **a1;
  if (v3 != 68)
  {
    if (v3 == 84)
    {
      if (v4)
      {
        v5 = a1[38];
        if (v5 == a1[39])
        {
          v6 = (unsigned __int8 **)a1[37];
          v7 = v5 - (unsigned __int8 *)v6;
          v8 = 2 * (v5 - (unsigned __int8 *)v6);
          if (v6 == a1 + 40)
          {
            v9 = (unsigned __int8 *)malloc(2 * (v5 - (unsigned __int8 *)v6));
            if (v9)
            {
              v10 = v9;
              if (v5 != (unsigned __int8 *)(a1 + 40))
                memcpy(v9, a1 + 40, v7);
LABEL_20:
              a1[37] = v10;
              goto LABEL_21;
            }
            goto LABEL_24;
          }
          goto LABEL_15;
        }
        goto LABEL_22;
      }
      return (char *)v4;
    }
  }
  if (v4)
  {
    v5 = a1[38];
    if (v5 == a1[39])
    {
      v12 = a1[37];
      v7 = v5 - v12;
      v8 = 2 * (v5 - v12);
      if (v12 == (unsigned __int8 *)(a1 + 40))
      {
        v13 = (unsigned __int8 *)malloc(2 * (v5 - v12));
        if (v13)
        {
          v10 = v13;
          if (v5 != v12)
            memmove(v13, v12, v5 - v12);
          goto LABEL_20;
        }
LABEL_24:
        abort();
      }
      v6 = (unsigned __int8 **)a1[37];
LABEL_15:
      v10 = (unsigned __int8 *)realloc(v6, v8);
      a1[37] = v10;
      if (v10)
      {
LABEL_21:
        v5 = &v10[8 * (v7 >> 3)];
        a1[39] = &v10[8 * (v7 >> 2)];
        goto LABEL_22;
      }
      goto LABEL_24;
    }
LABEL_22:
    a1[38] = v5 + 8;
    *(_QWORD *)v5 = v4;
  }
  return (char *)v4;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseSimpleId(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;

  if (!v2 || *(_QWORD *)(a1 + 8) == *(_QWORD *)a1 || **(_BYTE **)a1 != 73)
    return v2;
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD **)(a1 + 4904);
    v6 = v5[1];
    if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v7 = malloc(0x1000uLL);
      if (!v7)
        std::terminate();
      v6 = 0;
      *v7 = v5;
      v7[1] = 0;
      v5 = v7;
      *(_QWORD *)(a1 + 4904) = v7;
    }
    v5[1] = v6 + 32;
    v8 = (char *)v5 + v6;
    *((_QWORD *)v8 + 2) = &unk_1E0E21F68;
    v8 += 16;
    v8[8] = 45;
    *(_WORD *)(v8 + 9) = *(_WORD *)(v8 + 9) & 0xF000 | 0x540;
    *((_QWORD *)v8 + 2) = v2;
    *((_QWORD *)v8 + 3) = v4;
    return (uint64_t)v8;
  }
  return 0;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseBaseUnresolvedName(uint64_t a1, size_t a2)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;

  v3 = *(unsigned __int8 **)a1;
  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 60) & 0x400) == 0)
      goto LABEL_4;
  }
  if (((char)*v3 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v3 + 60) & 0x400) != 0)
LABEL_4:
  if ((unint64_t)&v4[-*(_QWORD *)a1] < 2)
    goto LABEL_7;
  if (*(_WORD *)v3 != 28260)
  {
    if (*(_WORD *)v3 == 28271)
    {
      *(_QWORD *)a1 = v3 + 2;
      if (!v5)
        return (char *)v5;
LABEL_8:
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1 && **(_BYTE **)a1 == 73)
      {
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD **)(a1 + 4904);
          v9 = v8[1];
          if ((unint64_t)(v9 - 4048) > 0xFFFFFFFFFFFFF00FLL)
          {
LABEL_14:
            v8[1] = v9 + 32;
            v11 = (char *)v8 + v9;
            *((_QWORD *)v11 + 2) = &unk_1E0E21F68;
            v11 += 16;
            v11[8] = 45;
            *(_WORD *)(v11 + 9) = *(_WORD *)(v11 + 9) & 0xF000 | 0x540;
            *((_QWORD *)v11 + 2) = v5;
            *((_QWORD *)v11 + 3) = v7;
            return v11;
          }
          v10 = malloc(0x1000uLL);
          if (v10)
          {
            v9 = 0;
            *v10 = v8;
            v10[1] = 0;
            v8 = v10;
            *(_QWORD *)(a1 + 4904) = v10;
            goto LABEL_14;
          }
LABEL_30:
          std::terminate();
        }
        return 0;
      }
      return (char *)v5;
    }
LABEL_7:
    if (!v5)
      return (char *)v5;
    goto LABEL_8;
  }
  v13 = (char *)(v3 + 2);
  *(_QWORD *)a1 = v13;
  if (v4 == v13)
  {
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 60) & 0x400) == 0)
      goto LABEL_20;
LABEL_28:
    if (v15)
      goto LABEL_21;
    return 0;
  }
  v14 = *v13;
  if ((v14 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v14 + 60) & 0x400) != 0)
    goto LABEL_28;
LABEL_20:
  if (!v15)
    return 0;
LABEL_21:
  v16 = *(_QWORD **)(a1 + 4904);
  v17 = v16[1];
  if ((unint64_t)(v17 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v18 = malloc(0x1000uLL);
    if (!v18)
      goto LABEL_30;
    v17 = 0;
    *v18 = v16;
    v18[1] = 0;
    v16 = v18;
    *(_QWORD *)(a1 + 4904) = v18;
  }
  v16[1] = v17 + 32;
  v19 = (char *)v16 + v17;
  *((_QWORD *)v19 + 2) = &unk_1E0E226F8;
  v19 += 16;
  v19[8] = 50;
  *(_WORD *)(v19 + 9) = *(_WORD *)(v19 + 9) & 0xF000 | 0x540;
  *((_QWORD *)v19 + 2) = v15;
  return v19;
}

uint64_t llvm::itanium_demangle::QualifiedName::printLeft(uint64_t a1, char **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 2) > v7)
  {
    v8 = (size_t)(v6 + 994);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      abort();
    v6 = a2[1];
  }
  *(_WORD *)&v6[(_QWORD)v5] = 14906;
  a2[1] += 2;
  v11 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

uint64_t llvm::itanium_demangle::QualifiedName::getBaseName(llvm::itanium_demangle::QualifiedName *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseOperatorName(uint64_t a1, _BYTE *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  char v13;
  int v14;
  BOOL v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  const char *v30;
  size_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;

  v3 = *(unsigned __int8 **)a1;
  v4 = *(unsigned __int8 **)(a1 + 8);
  if ((unint64_t)&v4[-*(_QWORD *)a1] >= 2)
  {
    v6 = 0;
    v7 = *v3;
    v8 = 61;
    do
    {
      v9 = (v6 + v8) >> 1;
          + 16 * v9;
      if (*v10 < (char)v7)
      {
        v6 = v9 + 1;
      }
      else if (*v10 == v7)
      {
        if (v10[1] >= (char)v3[1])
          v8 = (v6 + v8) >> 1;
        else
          v6 = v9 + 1;
      }
      else
      {
        v8 = (v6 + v8) >> 1;
      }
    }
    while (v8 != v6);
        + 16 * v6;
    if (*v11 == v7 && v11[1] == v3[1])
    {
      *(_QWORD *)a1 = v3 + 2;
      v12 = v11[2];
      if (v12 == 8)
      {
        v13 = *(_BYTE *)(a1 + 776);
        *(_BYTE *)(a1 + 776) = 0;
        v14 = *(unsigned __int8 *)(a1 + 777);
        if (a2)
          v15 = 0;
        else
          v15 = v14 == 0;
        v16 = !v15;
        *(_BYTE *)(a1 + 777) = v16;
        if (!result)
          goto LABEL_27;
        v18 = result;
        if (a2)
          *a2 = 1;
        v19 = *(_QWORD **)(a1 + 4904);
        v20 = v19[1];
        if ((unint64_t)(v20 - 4048) > 0xFFFFFFFFFFFFF00FLL)
        {
LABEL_26:
          v19[1] = v20 + 32;
          *(_QWORD *)((char *)v19 + v20 + 16) = &unk_1E0E221D0;
          result = (uint64_t)v19 + v20 + 16;
          *(_BYTE *)(result + 8) = 4;
          *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v19 + v20 + 25) & 0xF000 | 0x540;
          *(_QWORD *)(result + 16) = v18;
LABEL_27:
          *(_BYTE *)(a1 + 777) = v14;
          *(_BYTE *)(a1 + 776) = v13;
          return result;
        }
        v21 = malloc(0x1000uLL);
        if (v21)
        {
          v20 = 0;
          *v21 = v19;
          v21[1] = 0;
          v19 = v21;
          *(_QWORD *)(a1 + 4904) = v21;
          goto LABEL_26;
        }
LABEL_53:
        std::terminate();
      }
      if (v12 > 0xA || v12 == 4 && (v11[3] & 1) == 0)
        return 0;
      v30 = (const char *)*((_QWORD *)v11 + 1);
      v31 = strlen(v30);
      v32 = *(_QWORD **)(a1 + 4904);
      v33 = v32[1];
      if ((unint64_t)(v33 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v34 = malloc(0x1000uLL);
        if (!v34)
          goto LABEL_53;
        v33 = 0;
        *v34 = v32;
        v34[1] = 0;
        v32 = v34;
        *(_QWORD *)(a1 + 4904) = v34;
      }
      v32[1] = v33 + 32;
      *(_QWORD *)((char *)v32 + v33 + 16) = &unk_1E0E227A8;
      result = (uint64_t)v32 + v33 + 16;
      *(_BYTE *)(result + 8) = 8;
      *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v32 + v33 + 25) & 0xF000 | 0x540;
      *(_QWORD *)(result + 16) = v30;
      *(_QWORD *)(result + 24) = v31;
      return result;
    }
    if (*(_WORD *)v3 == 26988)
    {
      *(_QWORD *)a1 = v3 + 2;
      if (!result)
        return result;
      v22 = result;
      v27 = *(_QWORD **)(a1 + 4904);
      v28 = v27[1];
      if ((unint64_t)(v28 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v29 = malloc(0x1000uLL);
        if (!v29)
          goto LABEL_53;
        v28 = 0;
        *v29 = v27;
        v29[1] = 0;
        v27 = v29;
        *(_QWORD *)(a1 + 4904) = v29;
      }
      v27[1] = v28 + 32;
      *(_QWORD *)((char *)v27 + v28 + 16) = &unk_1E0E21938;
      result = (uint64_t)v27 + v28 + 16;
      v26 = 20;
LABEL_43:
      *(_BYTE *)(result + 8) = v26;
      *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
      *(_QWORD *)(result + 16) = v22;
      return result;
    }
  }
  if (v3 == v4)
    return 0;
  if (*v3 != 118)
    return 0;
  *(_QWORD *)a1 = v3 + 1;
  if (v4 == v3 + 1 || v3[1] - 48 > 9)
    return 0;
  *(_QWORD *)a1 = v3 + 2;
  if (result)
  {
    v22 = result;
    v23 = *(_QWORD **)(a1 + 4904);
    v24 = v23[1];
    if ((unint64_t)(v24 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v25 = malloc(0x1000uLL);
      if (!v25)
        goto LABEL_53;
      v24 = 0;
      *v25 = v23;
      v25[1] = 0;
      v23 = v25;
      *(_QWORD *)(a1 + 4904) = v25;
    }
    v23[1] = v24 + 32;
    *(_QWORD *)((char *)v23 + v24 + 16) = &unk_1E0E221D0;
    result = (uint64_t)v23 + v24 + 16;
    v26 = 4;
    goto LABEL_43;
  }
  return result;
}

uint64_t llvm::itanium_demangle::DtorName::printLeft(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v6)
  {
    v7 = v5 + 993;
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      abort();
    v5 = *(_QWORD *)(a2 + 8);
  }
  *((_BYTE *)v4 + v5) = 126;
  ++*(_QWORD *)(a2 + 8);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t llvm::itanium_demangle::ConversionOperatorType::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 9) > v6)
  {
    v7 = (size_t)(v5 + 1001);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      abort();
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  *(_QWORD *)v10 = *(_QWORD *)"operator ";
  v10[8] = 32;
  a2[1] += 9;
  v11 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

uint64_t llvm::itanium_demangle::LiteralOperator::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 11) > v6)
  {
    v7 = (size_t)(v5 + 1003);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      abort();
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  *(_QWORD *)v10 = *(_QWORD *)"operator\"\" ";
  *(_DWORD *)(v10 + 7) = 539107954;
  a2[1] += 11;
  v11 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

uint64_t llvm::itanium_demangle::GlobalQualifiedName::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 2) > v6)
  {
    v7 = (size_t)(v5 + 994);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      abort();
    v5 = a2[1];
  }
  *(_WORD *)&v5[(_QWORD)v4] = 14906;
  a2[1] += 2;
  v10 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v10 + 40))(v10, a2);
  return result;
}

uint64_t llvm::itanium_demangle::GlobalQualifiedName::getBaseName(llvm::itanium_demangle::GlobalQualifiedName *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseAbiTags(uint64_t a1, char *a2)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  char *v6;
  __int16 v7;
  char *result;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(unsigned __int8 **)a1;
  v3 = *(unsigned __int8 **)(a1 + 8);
  if (*(unsigned __int8 **)a1 == v3)
    return a2;
  while (*v4 == 66)
  {
    *(_QWORD *)a1 = v4 + 1;
    if (v3 == v4 + 1 || v4[1] - 58 < 0xFFFFFFF6)
      return 0;
    v9 = 0;
    v10 = v4 + 2;
    while (1)
    {
      *(_QWORD *)a1 = v10;
      v9 = (char)*(v10 - 1) + 10 * v9 - 48;
      if (v10 == v3)
        break;
      v11 = v10 + 1;
      v12 = *v10++ - 48;
      if (v12 > 9)
      {
        v13 = v11 - 1;
        if (v3 - (v11 - 1) < v9)
          return 0;
        goto LABEL_13;
      }
    }
    v13 = v3;
    if (v9)
      return 0;
LABEL_13:
    *(_QWORD *)a1 = &v13[v9];
    if (!v9)
      return 0;
    v14 = *(_QWORD **)(a1 + 4904);
    v15 = v14[1];
    if ((unint64_t)(v15 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v16 = malloc(0x1000uLL);
      if (!v16)
        std::terminate();
      v15 = 0;
      *v16 = v14;
      v16[1] = 0;
      v14 = v16;
      *(_QWORD *)(a1 + 4904) = v16;
    }
    v14[1] = v15 + 48;
    v6 = (char *)v14 + v15;
    v7 = *(_WORD *)(v2 + 9);
    *((_QWORD *)v6 + 2) = &unk_1E0E20BD0;
    result = v6 + 16;
    result[8] = 9;
    *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | v7 & 0xFC0;
    *((_QWORD *)result + 2) = v2;
    *((_QWORD *)result + 3) = v13;
    *((_QWORD *)result + 4) = v9;
    v4 = *(unsigned __int8 **)a1;
    v3 = *(unsigned __int8 **)(a1 + 8);
    v2 = result;
    if (*(unsigned __int8 **)a1 == v3)
      return result;
  }
  return v2;
}

void llvm::itanium_demangle::SpecialSubstitution::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 5) > v6)
  {
    v7 = (size_t)(v5 + 997);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      abort();
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  v10[4] = 58;
  *(_DWORD *)v10 = 979661939;
  a2[1] += 5;
  __asm { BR              X13 }
}

_QWORD *llvm::itanium_demangle::SpecialSubstitution::getBaseName(llvm::itanium_demangle::SpecialSubstitution *this)
{
  return ((_QWORD *(*)(const char *__return_ptr, const char *, uint64_t))((char *)sub_180BCE24C
                                                                                  + 4
                                                                                  * byte_1812619AC[*((unsigned int *)this + 3)]))("basic_string", "allocator", 9);
}

const char *sub_180BCE24C()
{
  return "basic_string";
}

char *sub_180BCE25C()
{
  return "istream";
}

char *llvm::itanium_demangle::ExpandedSpecialSubstitution::printLeft(_DWORD *a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *result;
  size_t v12;
  const void *v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  size_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  size_t v35;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 5) > v6)
  {
    v7 = (size_t)(v5 + 997);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_38;
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  v10[4] = 58;
  *(_DWORD *)v10 = 979661939;
  a2[1] += 5;
  result = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
  if (v12)
  {
    v13 = result;
    v14 = v12;
    v15 = *a2;
    v16 = a2[1];
    v17 = &v16[v12];
    v18 = a2[2];
    if (&v16[v12] > v18)
    {
      v19 = 2 * (_QWORD)v18;
      if (v19 <= (unint64_t)(v17 + 992))
        v20 = (size_t)(v17 + 992);
      else
        v20 = v19;
      a2[2] = (char *)v20;
      v15 = (char *)realloc(v15, v20);
      *a2 = v15;
      if (!v15)
        goto LABEL_38;
      v16 = a2[1];
    }
    result = (char *)memcpy(&v16[(_QWORD)v15], v13, v14);
    a2[1] += v14;
  }
  if (a1[3] < 2u)
    return result;
  v21 = *a2;
  v22 = a2[1];
  v23 = (unint64_t)a2[2];
  if ((unint64_t)(v22 + 29) > v23)
  {
    v24 = (size_t)(v22 + 1021);
    v25 = 2 * v23;
    if (v25 <= v24)
      v26 = v24;
    else
      v26 = v25;
    a2[2] = (char *)v26;
    v21 = (char *)realloc(v21, v26);
    *a2 = v21;
    if (!v21)
      goto LABEL_38;
    v22 = a2[1];
  }
  qmemcpy(&v22[(_QWORD)v21], "<char, std::char_traits<char>", 29);
  v27 = a2[1];
  v28 = (uint64_t)(v27 + 29);
  a2[1] = v27 + 29;
  if (a1[3] == 2)
  {
    v29 = (unint64_t)a2[2];
    v30 = *a2;
    if ((unint64_t)(v27 + 51) > v29)
    {
      if (2 * v29 <= (unint64_t)(v27 + 1043))
        v31 = (size_t)(v27 + 1043);
      else
        v31 = 2 * v29;
      a2[2] = (char *)v31;
      v30 = (char *)realloc(v30, v31);
      *a2 = v30;
      if (!v30)
        goto LABEL_38;
      v28 = (uint64_t)a2[1];
    }
    qmemcpy(&v30[v28], ", std::allocator<char>", 22);
    v28 = (uint64_t)(a2[1] + 22);
    a2[1] = (char *)v28;
  }
  v32 = (unint64_t)a2[2];
  result = *a2;
  if (v28 + 1 > v32)
  {
    v33 = v28 + 993;
    v34 = 2 * v32;
    if (v34 <= v33)
      v35 = v33;
    else
      v35 = v34;
    a2[2] = (char *)v35;
    result = (char *)realloc(result, v35);
    *a2 = result;
    if (result)
    {
      v28 = (uint64_t)a2[1];
      goto LABEL_36;
    }
LABEL_38:
    abort();
  }
LABEL_36:
  result[v28] = 62;
  ++a2[1];
  return result;
}

char *llvm::itanium_demangle::ExpandedSpecialSubstitution::getBaseName(llvm::itanium_demangle::ExpandedSpecialSubstitution *this)
{
  return off_1E0E57570[*((int *)this + 3)];
}

char *llvm::itanium_demangle::AbiTagAttr::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *result;
  size_t v20;
  unint64_t v21;
  size_t v22;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 5) > v6)
  {
    v7 = (size_t)(v5 + 997);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_22;
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  v10[4] = 58;
  *(_DWORD *)v10 = 1768055131;
  v11 = (uint64_t)(a2[1] + 5);
  a2[1] = (char *)v11;
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    v13 = *(const void **)(a1 + 24);
    v14 = v11 + v12;
    v15 = (size_t)a2[2];
    v16 = *a2;
    if (v11 + v12 > v15)
    {
      if (2 * v15 <= v14 + 992)
        v17 = v14 + 992;
      else
        v17 = 2 * v15;
      a2[2] = (char *)v17;
      v16 = (char *)realloc(v16, v17);
      *a2 = v16;
      if (!v16)
        goto LABEL_22;
      v11 = (uint64_t)a2[1];
    }
    memcpy(&v16[v11], v13, v12);
    v11 = (uint64_t)&a2[1][v12];
    a2[1] = (char *)v11;
  }
  v18 = (unint64_t)a2[2];
  result = *a2;
  if (v11 + 1 > v18)
  {
    v20 = v11 + 993;
    v21 = 2 * v18;
    if (v21 <= v20)
      v22 = v20;
    else
      v22 = v21;
    a2[2] = (char *)v22;
    result = (char *)realloc(result, v22);
    *a2 = result;
    if (result)
    {
      v11 = (uint64_t)a2[1];
      goto LABEL_21;
    }
LABEL_22:
    abort();
  }
LABEL_21:
  result[v11] = 93;
  ++a2[1];
  return result;
}

uint64_t llvm::itanium_demangle::AbiTagAttr::getBaseName(llvm::itanium_demangle::AbiTagAttr *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

char *llvm::itanium_demangle::StructuredBindingName::printLeft(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *result;
  unint64_t v22;
  size_t v23;

  ++*(_DWORD *)(a2 + 32);
  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v7)
  {
    v8 = v5 + 993;
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_28;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v4[v5] = 91;
  v10 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 24))
  {
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v10;
      if ((v12 & 1) == 0)
      {
        v14 = *(_QWORD *)(a2 + 16);
        v15 = *(char **)a2;
        if (v10 + 2 <= v14)
        {
          v18 = v10;
        }
        else
        {
          v16 = 2 * v14;
          if (v16 <= v10 + 994)
            v17 = v10 + 994;
          else
            v17 = v16;
          *(_QWORD *)(a2 + 16) = v17;
          v15 = (char *)realloc(v15, v17);
          *(_QWORD *)a2 = v15;
          if (!v15)
            goto LABEL_28;
          v18 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v15[v18] = 8236;
        v13 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v13;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11), a2, 18, 0);
      if (v13 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v10;
        if (++v11 == *(_QWORD *)(a1 + 24))
          break;
      }
      else
      {
        v12 = 0;
        v10 = *(_QWORD *)(a2 + 8);
        if (++v11 == *(_QWORD *)(a1 + 24))
          break;
      }
    }
  }
  --*(_DWORD *)(a2 + 32);
  v19 = v10 + 1;
  v20 = *(_QWORD *)(a2 + 16);
  result = *(char **)a2;
  if (v10 + 1 > v20)
  {
    v22 = 2 * v20;
    if (v22 <= v10 + 993)
      v23 = v10 + 993;
    else
      v23 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    result = (char *)realloc(result, v23);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v10 = *(_QWORD *)(a2 + 8);
      v19 = v10 + 1;
      goto LABEL_27;
    }
LABEL_28:
    abort();
  }
LABEL_27:
  *(_QWORD *)(a2 + 8) = v19;
  result[v10] = 93;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::CtorDtorName,llvm::itanium_demangle::Node *&,BOOL,int &>(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *result;

  v7 = *(_QWORD **)(a1 + 4904);
  v8 = v7[1];
  if ((unint64_t)(v8 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v10 = malloc(0x1000uLL);
    if (!v10)
      std::terminate();
    v8 = 0;
    *v10 = v7;
    v10[1] = 0;
    v7 = v10;
    *(_QWORD *)(a1 + 4904) = v10;
  }
  v7[1] = v8 + 32;
  v11 = (char *)v7 + v8;
  v12 = *a2;
  *((_QWORD *)v11 + 2) = &unk_1E0E21150;
  result = v11 + 16;
  result[8] = 49;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v12;
  result[24] = a3 != 0;
  *((_DWORD *)result + 7) = a4;
  return result;
}

void *llvm::itanium_demangle::CtorDtorName::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  void *result;
  size_t v11;
  const void *v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  size_t v19;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = (unint64_t)a2[2];
    if ((unint64_t)(v5 + 1) > v6)
    {
      v7 = (size_t)(v5 + 993);
      v8 = 2 * v6;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v8;
      a2[2] = (char *)v9;
      v4 = (char *)realloc(v4, v9);
      *a2 = v4;
      if (!v4)
        goto LABEL_18;
      v5 = a2[1];
    }
    v5[(_QWORD)v4] = 126;
    ++a2[1];
  }
  result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
  if (!v11)
    return result;
  v12 = result;
  v13 = v11;
  v14 = *a2;
  v15 = a2[1];
  v16 = &v15[v11];
  v17 = a2[2];
  if (&v15[v11] > v17)
  {
    v18 = 2 * (_QWORD)v17;
    if (v18 <= (unint64_t)(v16 + 992))
      v19 = (size_t)(v16 + 992);
    else
      v19 = v18;
    a2[2] = (char *)v19;
    v14 = (char *)realloc(v14, v19);
    *a2 = v14;
    if (v14)
    {
      v15 = a2[1];
      goto LABEL_16;
    }
LABEL_18:
    abort();
  }
LABEL_16:
  result = memcpy(&v15[(_QWORD)v14], v12, v13);
  a2[1] += v13;
  return result;
}

uint64_t llvm::itanium_demangle::ModuleEntity::printLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(a2 + 16);
  if (v6 + 1 > v8)
  {
    v9 = v6 + 993;
    if (2 * v8 <= v9)
      v10 = v9;
    else
      v10 = 2 * v8;
    *(_QWORD *)(a2 + 16) = v10;
    v5 = realloc(v5, v10);
    *(_QWORD *)a2 = v5;
    if (!v5)
      abort();
    v6 = *(_QWORD *)(a2 + 8);
    v7 = v6 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
  *((_BYTE *)v5 + v6) = 64;
  v11 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

uint64_t llvm::itanium_demangle::ModuleEntity::getBaseName(llvm::itanium_demangle::ModuleEntity *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
}

uint64_t llvm::itanium_demangle::MemberLikeFriendName::printLeft(uint64_t a1, char **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 9) > v7)
  {
    v8 = (size_t)(v6 + 1001);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      abort();
    v6 = a2[1];
  }
  v11 = &v6[(_QWORD)v5];
  *(_QWORD *)v11 = *(_QWORD *)"::friend ";
  v11[8] = 32;
  a2[1] += 9;
  v12 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v12 + 32))(v12, a2);
  if ((*(_WORD *)(v12 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v12 + 40))(v12, a2);
  return result;
}

uint64_t llvm::itanium_demangle::MemberLikeFriendName::getBaseName(llvm::itanium_demangle::MemberLikeFriendName *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
}

uint64_t llvm::itanium_demangle::NestedName::printLeft(uint64_t a1, char **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 2) > v7)
  {
    v8 = (size_t)(v6 + 994);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      abort();
    v6 = a2[1];
  }
  *(_WORD *)&v6[(_QWORD)v5] = 14906;
  a2[1] += 2;
  v11 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

uint64_t llvm::itanium_demangle::NestedName::getBaseName(llvm::itanium_demangle::NestedName *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::LocalName,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 32;
  v9 = (char *)v5 + v6;
  v10 = *a2;
  v11 = *a3;
  *((_QWORD *)v9 + 2) = &unk_1E0E22908;
  result = v9 + 16;
  result[8] = 26;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v10;
  *((_QWORD *)result + 3) = v11;
  return result;
}

uint64_t llvm::itanium_demangle::LocalName::printLeft(uint64_t a1, char **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 2) > v7)
  {
    v8 = (size_t)(v6 + 994);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      abort();
    v6 = a2[1];
  }
  *(_WORD *)&v6[(_QWORD)v5] = 14906;
  a2[1] += 2;
  v11 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

uint64_t llvm::itanium_demangle::ParameterPack::hasRHSComponentSlow(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;

  if (*(_DWORD *)(a2 + 28) != -1)
  {
    v2 = *(unsigned int *)(a2 + 24);
    if (*(_QWORD *)(a1 + 24) > v2)
      goto LABEL_3;
    return 0;
  }
  v2 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v6;
  if (!v6)
    return 0;
LABEL_3:
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v2);
  v4 = *(unsigned __int8 *)(v3 + 9);
  if ((v4 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v3)(v3);
  else
    return v4 < 0x40;
}

uint64_t llvm::itanium_demangle::ParameterPack::hasArraySlow(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  int v4;
  uint64_t v6;

  if (*(_DWORD *)(a2 + 28) != -1)
  {
    v2 = *(unsigned int *)(a2 + 24);
    if (*(_QWORD *)(a1 + 24) > v2)
      goto LABEL_3;
    return 0;
  }
  v2 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v6;
  if (!v6)
    return 0;
LABEL_3:
  v3 = *(_BYTE **)(*(_QWORD *)(a1 + 16) + 8 * v2);
  v4 = v3[10] & 3;
  if (v4 == 2)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 8))(v3);
  else
    return v4 == 0;
}

uint64_t llvm::itanium_demangle::ParameterPack::hasFunctionSlow(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;

  if (*(_DWORD *)(a2 + 28) != -1)
  {
    v2 = *(unsigned int *)(a2 + 24);
    if (*(_QWORD *)(a1 + 24) > v2)
      goto LABEL_3;
    return 0;
  }
  v2 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v6;
  if (!v6)
    return 0;
LABEL_3:
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v2);
  v4 = (*(unsigned __int16 *)(v3 + 9) >> 10) & 3;
  if (v4 == 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    return v4 == 0;
}

uint64_t llvm::itanium_demangle::ParameterPack::getSyntaxNode(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 28) != -1)
  {
    v2 = *(unsigned int *)(a2 + 24);
    if (*(_QWORD *)(result + 24) <= v2)
      return result;
    goto LABEL_3;
  }
  v2 = 0;
  v4 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v4;
  if (v4)
  {
LABEL_3:
    v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  return result;
}

uint64_t llvm::itanium_demangle::ParameterPack::printLeft(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 28) != -1)
  {
    v2 = *(unsigned int *)(a2 + 24);
    if (*(_QWORD *)(result + 24) <= v2)
      return result;
    goto LABEL_3;
  }
  v2 = 0;
  v4 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v4;
  if (v4)
  {
LABEL_3:
    v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
  return result;
}

uint64_t llvm::itanium_demangle::ParameterPack::printRight(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 28) != -1)
  {
    v2 = *(unsigned int *)(a2 + 24);
    if (*(_QWORD *)(result + 24) <= v2)
      return result;
    goto LABEL_3;
  }
  v2 = 0;
  v4 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v4;
  if (v4)
  {
LABEL_3:
    v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  return result;
}

char *llvm::itanium_demangle::TemplateArgs::printLeft(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  char *result;
  unint64_t v22;
  size_t v23;

  v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v5 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 + 1 > v7)
  {
    v8 = v6 + 993;
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    v5 = (char *)realloc(v5, v10);
    *(_QWORD *)a2 = v5;
    if (!v5)
      goto LABEL_28;
    v6 = *(_QWORD *)(a2 + 8);
  }
  v5[v6] = 60;
  v11 = *(_QWORD *)(a2 + 8) + 1;
  *(_QWORD *)(a2 + 8) = v11;
  if (*(_QWORD *)(a1 + 24))
  {
    v12 = 0;
    v13 = 1;
    while (1)
    {
      v14 = v11;
      if ((v13 & 1) == 0)
      {
        v15 = *(_QWORD *)(a2 + 16);
        v16 = *(char **)a2;
        if (v11 + 2 <= v15)
        {
          v19 = v11;
        }
        else
        {
          v17 = 2 * v15;
          if (v17 <= v11 + 994)
            v18 = v11 + 994;
          else
            v18 = v17;
          *(_QWORD *)(a2 + 16) = v18;
          v16 = (char *)realloc(v16, v18);
          *(_QWORD *)a2 = v16;
          if (!v16)
            goto LABEL_28;
          v19 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v16[v19] = 8236;
        v14 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v14;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v12), a2, 18, 0);
      if (v14 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v11;
        if (++v12 == *(_QWORD *)(a1 + 24))
          break;
      }
      else
      {
        v13 = 0;
        v11 = *(_QWORD *)(a2 + 8);
        if (++v12 == *(_QWORD *)(a1 + 24))
          break;
      }
    }
  }
  v20 = *(_QWORD *)(a2 + 16);
  result = *(char **)a2;
  if (v11 + 1 > v20)
  {
    v22 = 2 * v20;
    if (v22 <= v11 + 993)
      v23 = v11 + 993;
    else
      v23 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    result = (char *)realloc(result, v23);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v11 = *(_QWORD *)(a2 + 8);
      goto LABEL_27;
    }
LABEL_28:
    abort();
  }
LABEL_27:
  result[v11] = 62;
  ++*(_QWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t llvm::itanium_demangle::NameWithTemplateArgs::printLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

uint64_t llvm::itanium_demangle::NameWithTemplateArgs::getBaseName(llvm::itanium_demangle::NameWithTemplateArgs *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

_QWORD *llvm::itanium_demangle::TemplateArgumentPack::printLeft(_QWORD *result, char **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;

  if (result[3])
  {
    v3 = result;
    v4 = 0;
    v5 = (uint64_t)a2[1];
    v6 = 1;
    do
    {
      while (1)
      {
        v7 = v5;
        if ((v6 & 1) == 0)
        {
          v8 = (unint64_t)a2[2];
          v9 = *a2;
          if (v5 + 2 <= v8)
          {
            v12 = v5;
          }
          else
          {
            v10 = 2 * v8;
            if (v10 <= v5 + 994)
              v11 = v5 + 994;
            else
              v11 = v10;
            a2[2] = (char *)v11;
            v9 = (char *)realloc(v9, v11);
            *a2 = v9;
            if (!v9)
              abort();
            v12 = (uint64_t)a2[1];
          }
          *(_WORD *)&v9[v12] = 8236;
          v7 = (uint64_t)(a2[1] + 2);
          a2[1] = (char *)v7;
        }
        result = llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(v3[2] + 8 * v4), (uint64_t)a2, 18, 0);
        if ((char *)v7 != a2[1])
          break;
        a2[1] = (char *)v5;
        if (++v4 == v3[3])
          return result;
      }
      v6 = 0;
      v5 = (uint64_t)a2[1];
      ++v4;
    }
    while (v4 != v3[3]);
  }
  return result;
}

uint64_t llvm::itanium_demangle::TemplateParamQualifiedArg::printLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  return result;
}

void *llvm::itanium_demangle::EnableIfAttr::printLeft(uint64_t a1, void **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *result;
  unint64_t v23;
  size_t v24;

  v4 = (char *)*a2;
  v5 = (char *)a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 12) > v6)
  {
    v7 = (size_t)(v5 + 1004);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (void *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_28;
    v5 = (char *)a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  *(_QWORD *)v10 = *(_QWORD *)" [enable_if:";
  *((_DWORD *)v10 + 2) = 979790175;
  v11 = (uint64_t)a2[1] + 12;
  a2[1] = (void *)v11;
  if (*(_QWORD *)(a1 + 24))
  {
    v12 = 0;
    v13 = 1;
    while (1)
    {
      v14 = v11;
      if ((v13 & 1) == 0)
      {
        v15 = (unint64_t)a2[2];
        v16 = (char *)*a2;
        if (v11 + 2 <= v15)
        {
          v19 = v11;
        }
        else
        {
          v17 = 2 * v15;
          if (v17 <= v11 + 994)
            v18 = v11 + 994;
          else
            v18 = v17;
          a2[2] = (void *)v18;
          v16 = (char *)realloc(v16, v18);
          *a2 = v16;
          if (!v16)
            goto LABEL_28;
          v19 = (uint64_t)a2[1];
        }
        *(_WORD *)&v16[v19] = 8236;
        v14 = (uint64_t)a2[1] + 2;
        a2[1] = (void *)v14;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v12), (uint64_t)a2, 18, 0);
      if ((void *)v14 == a2[1])
      {
        a2[1] = (void *)v11;
        if (++v12 == *(_QWORD *)(a1 + 24))
          break;
      }
      else
      {
        v13 = 0;
        v11 = (uint64_t)a2[1];
        if (++v12 == *(_QWORD *)(a1 + 24))
          break;
      }
    }
  }
  v20 = v11 + 1;
  v21 = (unint64_t)a2[2];
  result = *a2;
  if (v11 + 1 > v21)
  {
    v23 = 2 * v21;
    if (v23 <= v11 + 993)
      v24 = v11 + 993;
    else
      v24 = v23;
    a2[2] = (void *)v24;
    result = realloc(result, v24);
    *a2 = result;
    if (result)
    {
      v11 = (uint64_t)a2[1];
      v20 = v11 + 1;
      goto LABEL_27;
    }
LABEL_28:
    abort();
  }
LABEL_27:
  a2[1] = (void *)v20;
  *((_BYTE *)result + v11) = 93;
  return result;
}

uint64_t llvm::itanium_demangle::FunctionEncoding::hasRHSComponentSlow()
{
  return 1;
}

uint64_t llvm::itanium_demangle::FunctionEncoding::hasFunctionSlow()
{
  return 1;
}

uint64_t llvm::itanium_demangle::FunctionEncoding::printLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_13;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(v5 + 9);
  if ((v6 & 0xC0) == 0x80)
  {
    if (((**(uint64_t (***)(uint64_t, uint64_t))v5)(v5, a2) & 1) != 0)
      goto LABEL_13;
  }
  else if (v6 < 0x40)
  {
    goto LABEL_13;
  }
  v7 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  if (v8 + 1 > v9)
  {
    v10 = v8 + 993;
    v11 = 2 * v9;
    if (v11 <= v10)
      v12 = v10;
    else
      v12 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    v7 = realloc(v7, v12);
    *(_QWORD *)a2 = v7;
    if (!v7)
      abort();
    v8 = *(_QWORD *)(a2 + 8);
  }
  *((_BYTE *)v7 + v8) = 32;
  ++*(_QWORD *)(a2 + 8);
LABEL_13:
  v13 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2);
  if ((*(_WORD *)(v13 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, a2);
  return result;
}

char *llvm::itanium_demangle::FunctionEncoding::printRight(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  size_t v23;
  char *result;
  int v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  unint64_t v41;
  size_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  size_t v63;
  char *v64;
  uint64_t v65;

  ++*(_DWORD *)(a2 + 32);
  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v7)
  {
    v8 = v5 + 993;
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_83;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v4[v5] = 40;
  v10 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 40))
  {
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v10;
      if ((v12 & 1) == 0)
      {
        v14 = *(_QWORD *)(a2 + 16);
        v15 = *(char **)a2;
        if (v10 + 2 <= v14)
        {
          v18 = v10;
        }
        else
        {
          v16 = 2 * v14;
          if (v16 <= v10 + 994)
            v17 = v10 + 994;
          else
            v17 = v16;
          *(_QWORD *)(a2 + 16) = v17;
          v15 = (char *)realloc(v15, v17);
          *(_QWORD *)a2 = v15;
          if (!v15)
            goto LABEL_83;
          v18 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v15[v18] = 8236;
        v13 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v13;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11), a2, 18, 0);
      if (v13 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v10;
        if (++v11 == *(_QWORD *)(a1 + 40))
          break;
      }
      else
      {
        v12 = 0;
        v10 = *(_QWORD *)(a2 + 8);
        if (++v11 == *(_QWORD *)(a1 + 40))
          break;
      }
    }
  }
  --*(_DWORD *)(a2 + 32);
  v19 = v10 + 1;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(char **)a2;
  if (v10 + 1 > v20)
  {
    v22 = 2 * v20;
    if (v22 <= v10 + 993)
      v23 = v10 + 993;
    else
      v23 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    v21 = (char *)realloc(v21, v23);
    *(_QWORD *)a2 = v21;
    if (!v21)
      goto LABEL_83;
    v10 = *(_QWORD *)(a2 + 8);
    v19 = v10 + 1;
  }
  *(_QWORD *)(a2 + 8) = v19;
  v21[v10] = 41;
  result = *(char **)(a1 + 16);
  if (result)
    result = (char *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)result + 40))(result, a2);
  v25 = *(_DWORD *)(a1 + 64);
  if ((v25 & 1) != 0)
  {
    result = *(char **)a2;
    v26 = *(_QWORD *)(a2 + 8);
    v27 = *(_QWORD *)(a2 + 16);
    if (v26 + 6 > v27)
    {
      v28 = v26 + 998;
      v29 = 2 * v27;
      if (v29 <= v28)
        v30 = v28;
      else
        v30 = v29;
      *(_QWORD *)(a2 + 16) = v30;
      result = (char *)realloc(result, v30);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_83;
      v26 = *(_QWORD *)(a2 + 8);
    }
    v31 = &result[v26];
    *((_WORD *)v31 + 2) = 29811;
    *(_DWORD *)v31 = 1852793632;
    *(_QWORD *)(a2 + 8) += 6;
    v25 = *(_DWORD *)(a1 + 64);
  }
  if ((v25 & 2) != 0)
  {
    result = *(char **)a2;
    v32 = *(_QWORD *)(a2 + 8);
    v33 = *(_QWORD *)(a2 + 16);
    if (v32 + 9 > v33)
    {
      v34 = v32 + 1001;
      v35 = 2 * v33;
      if (v35 <= v34)
        v36 = v34;
      else
        v36 = v35;
      *(_QWORD *)(a2 + 16) = v36;
      result = (char *)realloc(result, v36);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_83;
      v32 = *(_QWORD *)(a2 + 8);
    }
    v37 = &result[v32];
    *(_QWORD *)v37 = *(_QWORD *)" volatile";
    v37[8] = 101;
    *(_QWORD *)(a2 + 8) += 9;
    v25 = *(_DWORD *)(a1 + 64);
  }
  if ((v25 & 4) != 0)
  {
    result = *(char **)a2;
    v38 = *(_QWORD *)(a2 + 8);
    v39 = *(_QWORD *)(a2 + 16);
    if (v38 + 9 > v39)
    {
      v40 = v38 + 1001;
      v41 = 2 * v39;
      if (v41 <= v40)
        v42 = v40;
      else
        v42 = v41;
      *(_QWORD *)(a2 + 16) = v42;
      result = (char *)realloc(result, v42);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_83;
      v38 = *(_QWORD *)(a2 + 8);
    }
    v43 = &result[v38];
    *(_QWORD *)v43 = *(_QWORD *)" restrict";
    v43[8] = 116;
    *(_QWORD *)(a2 + 8) += 9;
  }
  v44 = *(unsigned __int8 *)(a1 + 68);
  if (v44 == 2)
  {
    result = *(char **)a2;
    v51 = *(_QWORD *)(a2 + 8);
    v52 = *(_QWORD *)(a2 + 16);
    if (v51 + 3 > v52)
    {
      v53 = v51 + 995;
      v54 = 2 * v52;
      if (v54 <= v53)
        v55 = v53;
      else
        v55 = v54;
      *(_QWORD *)(a2 + 16) = v55;
      result = (char *)realloc(result, v55);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_83;
      v51 = *(_QWORD *)(a2 + 8);
    }
    v56 = &result[v51];
    v56[2] = 38;
    *(_WORD *)v56 = 9760;
    v50 = 3;
    goto LABEL_69;
  }
  if (v44 == 1)
  {
    result = *(char **)a2;
    v45 = *(_QWORD *)(a2 + 8);
    v46 = *(_QWORD *)(a2 + 16);
    if (v45 + 2 > v46)
    {
      v47 = v45 + 994;
      v48 = 2 * v46;
      if (v48 <= v47)
        v49 = v47;
      else
        v49 = v48;
      *(_QWORD *)(a2 + 16) = v49;
      result = (char *)realloc(result, v49);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_83;
      v45 = *(_QWORD *)(a2 + 8);
    }
    *(_WORD *)&result[v45] = 9760;
    v50 = 2;
LABEL_69:
    *(_QWORD *)(a2 + 8) += v50;
  }
  v57 = *(_QWORD *)(a1 + 48);
  if (v57)
  {
    result = (char *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v57 + 32))(*(_QWORD *)(a1 + 48), a2);
    if ((*(_WORD *)(v57 + 9) & 0xC0) != 0x40)
      result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 40))(v57, a2);
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v58 = *(char **)a2;
    v59 = *(_QWORD *)(a2 + 8);
    v60 = *(_QWORD *)(a2 + 16);
    if (v59 + 10 <= v60)
      goto LABEL_80;
    v61 = v59 + 1002;
    v62 = 2 * v60;
    if (v62 <= v61)
      v63 = v61;
    else
      v63 = v62;
    *(_QWORD *)(a2 + 16) = v63;
    v58 = (char *)realloc(v58, v63);
    *(_QWORD *)a2 = v58;
    if (v58)
    {
      v59 = *(_QWORD *)(a2 + 8);
LABEL_80:
      v64 = &v58[v59];
      *(_QWORD *)v64 = *(_QWORD *)" requires ";
      *((_WORD *)v64 + 4) = 8307;
      *(_QWORD *)(a2 + 8) += 10;
      v65 = *(_QWORD *)(a1 + 56);
      result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 32))(v65, a2);
      if ((*(_WORD *)(v65 + 9) & 0xC0) != 0x40)
        return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 40))(v65, a2);
      return result;
    }
LABEL_83:
    abort();
  }
  return result;
}

char *llvm::itanium_demangle::DotSuffix::printLeft(_QWORD *a1, char **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *result;
  size_t v20;
  unint64_t v21;
  size_t v22;

  v4 = a1[2];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 2) > v7)
  {
    v8 = (size_t)(v6 + 994);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      goto LABEL_24;
    v6 = a2[1];
  }
  *(_WORD *)&v6[(_QWORD)v5] = 10272;
  v11 = (uint64_t)(a2[1] + 2);
  a2[1] = (char *)v11;
  v12 = a1[4];
  if (v12)
  {
    v13 = (const void *)a1[3];
    v14 = v11 + v12;
    v15 = (size_t)a2[2];
    v16 = *a2;
    if (v11 + v12 > v15)
    {
      if (2 * v15 <= v14 + 992)
        v17 = v14 + 992;
      else
        v17 = 2 * v15;
      a2[2] = (char *)v17;
      v16 = (char *)realloc(v16, v17);
      *a2 = v16;
      if (!v16)
        goto LABEL_24;
      v11 = (uint64_t)a2[1];
    }
    memcpy(&v16[v11], v13, v12);
    v11 = (uint64_t)&a2[1][v12];
    a2[1] = (char *)v11;
  }
  v18 = (unint64_t)a2[2];
  result = *a2;
  if (v11 + 1 > v18)
  {
    v20 = v11 + 993;
    v21 = 2 * v18;
    if (v21 <= v20)
      v22 = v20;
    else
      v22 = v21;
    a2[2] = (char *)v22;
    result = (char *)realloc(result, v22);
    *a2 = result;
    if (result)
    {
      v11 = (uint64_t)a2[1];
      goto LABEL_23;
    }
LABEL_24:
    abort();
  }
LABEL_23:
  result[v11] = 41;
  ++a2[1];
  return result;
}

void llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseFunctionType(_QWORD *a1, size_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  _WORD *v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;

  v4 = (_BYTE *)*a1;
  v3 = (_BYTE *)a1[1];
  if ((_BYTE *)*a1 == v3 || *v4 != 114)
  {
    v5 = 0;
    if (v4 == v3)
      goto LABEL_4;
  }
  else
  {
    *a1 = ++v4;
    v5 = 4;
    if (v4 == v3)
    {
LABEL_4:
      v4 = v3;
      goto LABEL_12;
    }
  }
  if (*v4 == 86)
  {
    *a1 = ++v4;
    v5 |= 2u;
  }
  if (v4 == v3)
    goto LABEL_13;
  if (*v4 == 75)
  {
    *a1 = ++v4;
    v5 |= 1u;
    if ((unint64_t)(v3 - v4) < 2)
      goto LABEL_13;
    goto LABEL_15;
  }
LABEL_12:
  if ((unint64_t)(v3 - v4) < 2)
  {
LABEL_13:
    v6 = 0;
    goto LABEL_35;
  }
LABEL_15:
  if (*(_WORD *)v4 == 28484)
  {
    *a1 = v4 + 2;
    v17 = (_QWORD *)a1[613];
    v18 = v17[1];
    if ((unint64_t)(v18 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v19 = malloc(0x1000uLL);
      if (!v19)
        goto LABEL_83;
      v18 = 0;
      *v19 = v17;
      v19[1] = 0;
      v17 = v19;
      a1[613] = v19;
    }
    *(_QWORD *)((char *)v17 + v18 + 16) = &unk_1E0E227A8;
    v6 = (uint64_t)v17 + v18 + 16;
    v17[1] = v18 + 32;
    *(_BYTE *)(v6 + 8) = 8;
    *(_WORD *)(v6 + 9) = *(_WORD *)(v6 + 9) & 0xF000 | 0x540;
    *(_QWORD *)(v6 + 16) = "noexcept";
    *(_QWORD *)(v6 + 24) = 8;
    goto LABEL_35;
  }
  if (*(_WORD *)v4 != 20292)
  {
    if (*(_WORD *)v4 == 30532)
    {
      v7 = v4 + 2;
      *a1 = v7;
      v8 = (uint64_t)(a1[3] - a1[2]) >> 3;
      v9 = (char *)(a1 + 5);
      while (v7 == v3 || *v7 != 69)
      {
        if (!v12)
          return;
        v13 = v12;
        v11 = (char *)a1[3];
        if (v11 == (char *)a1[4])
        {
          v14 = (char *)a1[2];
          v15 = v11 - v14;
          if (v14 == v9)
          {
            v16 = (char *)malloc(2 * (v11 - v14));
            if (!v16)
LABEL_82:
              abort();
            v10 = v16;
            if (v11 != v9)
              memcpy(v16, a1 + 5, v15);
            a1[2] = v10;
          }
          else
          {
            v10 = (char *)realloc(v14, 2 * (v11 - v14));
            a1[2] = v10;
            if (!v10)
              goto LABEL_82;
          }
          v11 = &v10[8 * (v15 >> 3)];
          a1[4] = &v10[8 * (v15 >> 2)];
        }
        a1[3] = v11 + 8;
        *(_QWORD *)v11 = v13;
        v7 = (_BYTE *)*a1;
        v3 = (_BYTE *)a1[1];
      }
      *a1 = v7 + 1;
      v51 = v50;
      v52 = (_QWORD *)a1[613];
      v53 = v52[1];
      if ((unint64_t)(v53 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v54 = malloc(0x1000uLL);
        if (!v54)
          goto LABEL_83;
        v53 = 0;
        *v54 = v52;
        v54[1] = 0;
        v52 = v54;
        a1[613] = v54;
      }
      v52[1] = v53 + 32;
      *(_QWORD *)((char *)v52 + v53 + 16) = &unk_1E0E21EB8;
      v6 = (uint64_t)v52 + v53 + 16;
      *(_BYTE *)(v6 + 8) = 18;
      *(_WORD *)(v6 + 9) = *(_WORD *)((_BYTE *)v52 + v53 + 25) & 0xF000 | 0x540;
      *(_QWORD *)(v6 + 16) = v49;
      *(_QWORD *)(v6 + 24) = v51;
      goto LABEL_35;
    }
    goto LABEL_13;
  }
  *a1 = v4 + 2;
  if (!v34)
    return;
  v35 = (_BYTE *)*a1;
  if (*a1 == a1[1] || *v35 != 69)
    return;
  v36 = v34;
  *a1 = v35 + 1;
  v37 = (_QWORD *)a1[613];
  v38 = v37[1];
  if ((unint64_t)(v38 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v39 = malloc(0x1000uLL);
    if (!v39)
      goto LABEL_83;
    v38 = 0;
    *v39 = v37;
    v39[1] = 0;
    v37 = v39;
    a1[613] = v39;
  }
  v37[1] = v38 + 32;
  *(_QWORD *)((char *)v37 + v38 + 16) = &unk_1E0E21308;
  v6 = (uint64_t)v37 + v38 + 16;
  *(_BYTE *)(v6 + 8) = 17;
  *(_WORD *)(v6 + 9) = *(_WORD *)((_BYTE *)v37 + v38 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(v6 + 16) = v36;
LABEL_35:
  v20 = (_BYTE *)*a1;
  v21 = (_BYTE *)a1[1];
  if ((unint64_t)&v21[-*a1] >= 2 && *(_WORD *)v20 == 30788)
  {
    v20 += 2;
    *a1 = v20;
    if (v20 == v21)
      return;
  }
  else if (v20 == v21)
  {
    return;
  }
  if (*v20 == 70)
  {
    *a1 = v20 + 1;
    if (v20 + 1 != v21 && v20[1] == 89)
      *a1 = v20 + 2;
    if (v22)
    {
      v55 = v22;
      v56 = (uint64_t)(a1[3] - a1[2]) >> 3;
      v23 = (char *)(a1 + 5);
      v24 = (_WORD *)*a1;
      v25 = a1[1];
      if (*a1 != v25)
        goto LABEL_46;
LABEL_52:
      while (1)
      {
        if ((unint64_t)(v25 - (_QWORD)v24) >= 2)
        {
          if (*v24 == 17746)
          {
            v40 = 1;
            v41 = 2;
            goto LABEL_74;
          }
          if (*v24 == 17743)
            break;
        }
        if (!v29)
          return;
        v30 = v29;
        v28 = (char *)a1[3];
        if (v28 == (char *)a1[4])
        {
          v31 = (char *)a1[2];
          v32 = v28 - v31;
          if (v31 == v23)
          {
            v33 = (char *)malloc(2 * (v28 - v31));
            if (!v33)
              goto LABEL_82;
            v27 = v33;
            if (v28 != v23)
              memcpy(v33, a1 + 5, v32);
            a1[2] = v27;
          }
          else
          {
            v27 = (char *)realloc(v31, 2 * (v28 - v31));
            a1[2] = v27;
            if (!v27)
              goto LABEL_82;
          }
          v28 = &v27[8 * (v32 >> 3)];
          a1[4] = &v27[8 * (v32 >> 2)];
        }
        a1[3] = v28 + 8;
        *(_QWORD *)v28 = v30;
        v24 = (_WORD *)*a1;
        v25 = a1[1];
        if (*a1 != v25)
        {
LABEL_46:
          while (1)
          {
            v26 = *(unsigned __int8 *)v24;
            if (v26 != 118)
              break;
            *a1 = (char *)v24 + 1;
            v24 = (_WORD *)*a1;
            v25 = a1[1];
            if (*a1 == v25)
              goto LABEL_52;
          }
          if (v26 == 69)
          {
            v40 = 0;
            v41 = 1;
            goto LABEL_74;
          }
        }
      }
      v41 = 2;
      v40 = 2;
LABEL_74:
      *a1 = (char *)v24 + v41;
      v44 = v43;
      v45 = (_QWORD *)a1[613];
      v46 = v45[1];
      if ((unint64_t)(v46 - 4016) > 0xFFFFFFFFFFFFF00FLL)
        goto LABEL_77;
      v47 = malloc(0x1000uLL);
      if (v47)
      {
        v46 = 0;
        *v47 = v45;
        v47[1] = 0;
        v45 = v47;
        a1[613] = v47;
LABEL_77:
        v45[1] = v46 + 64;
        *(_QWORD *)((char *)v45 + v46 + 16) = &unk_1E0E21200;
        v48 = (uint64_t)v45 + v46 + 16;
        *(_BYTE *)(v48 + 8) = 16;
        *(_WORD *)(v48 + 9) = *(_WORD *)((_BYTE *)v45 + v46 + 25) & 0xF000 | 0x100;
        *(_QWORD *)(v48 + 16) = v55;
        *(_QWORD *)(v48 + 24) = v42;
        *(_QWORD *)(v48 + 32) = v44;
        *(_DWORD *)(v48 + 40) = v5;
        *(_BYTE *)(v48 + 44) = v40;
        *(_QWORD *)(v48 + 48) = v6;
        return;
      }
LABEL_83:
      std::terminate();
    }
  }
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseQualifiedType(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char *v19;
  __int16 v20;
  unsigned __int8 *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  char *v43;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    goto LABEL_11;
  v4 = *v3;
  if (v4 == 114)
  {
    *a1 = ++v3;
    v14 = 4;
    if (v3 == v2)
      goto LABEL_19;
    goto LABEL_14;
  }
  if (v4 != 85)
  {
LABEL_11:
    v14 = 0;
    if (v3 == v2)
      goto LABEL_19;
LABEL_14:
    if (*v3 == 86)
    {
      *a1 = ++v3;
      v14 |= 2u;
    }
    if (v3 != v2 && *v3 == 75)
    {
      *a1 = v3 + 1;
      v14 |= 1u;
    }
LABEL_19:
    if (v15 && v14)
    {
      v16 = a1[613];
      v17 = *((_QWORD *)v16 + 1);
      if ((unint64_t)(v17 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v18 = (unsigned __int8 *)malloc(0x1000uLL);
        if (!v18)
          goto LABEL_58;
        v17 = 0;
        *(_QWORD *)v18 = v16;
        *((_QWORD *)v18 + 1) = 0;
        v16 = v18;
        a1[613] = v18;
      }
      *((_QWORD *)v16 + 1) = v17 + 32;
      v19 = (char *)&v16[v17];
      v20 = *(_WORD *)(v15 + 9);
      *((_QWORD *)v19 + 2) = &unk_1E0E22800;
      v19 += 16;
      v19[8] = 3;
      *(_WORD *)(v19 + 9) = *(_WORD *)(v19 + 9) & 0xF000 | v20 & 0xFC0;
      *((_DWORD *)v19 + 3) = v14;
      *((_QWORD *)v19 + 2) = v15;
      return (uint64_t)v19;
    }
    return v15;
  }
  *a1 = v3 + 1;
  if (v2 == v3 + 1 || v3[1] - 58 < 0xFFFFFFF6)
    return 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = v6;
    v8 = v5;
    v9 = &v3[v5];
    v10 = &v3[v5 + 2];
    *a1 = v10;
    v11 = (char)v9[1];
    v6 = v11 + 10 * v6 - 48;
    if (v10 == v2)
    {
      v13 = (uint64_t)v2;
      if (!v6)
        goto LABEL_26;
      return 0;
    }
    v12 = *v10 - 48;
    v5 = v8 + 1;
  }
  while (v12 <= 9);
  v13 = (uint64_t)&v3[v5 + 1];
  if ((unint64_t)&v2[-v13] < v6)
    return 0;
LABEL_26:
  v21 = (unsigned __int8 *)(v13 + v6);
  *a1 = (unsigned __int8 *)(v13 + v6);
  if (!v6)
    return 0;
  if (v6 < 9 || (*(_QWORD *)v13 == 0x746F7270636A626FLL ? (v22 = *(_BYTE *)(v13 + 8) == 111) : (v22 = 0), !v22))
  {
    if (v2 == v21 || *v21 != 73)
    {
      v24 = 0;
    }
    else
    {
      v24 = v23;
      if (!v23)
        return 0;
    }
    if (!v25)
      return 0;
    v26 = v25;
    v27 = a1[613];
    v28 = *((_QWORD *)v27 + 1);
    if ((unint64_t)(v28 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v29 = (unsigned __int8 *)malloc(0x1000uLL);
      if (v29)
      {
        v28 = 0;
        *(_QWORD *)v29 = v27;
        *((_QWORD *)v29 + 1) = 0;
        v27 = v29;
        a1[613] = v29;
        goto LABEL_41;
      }
LABEL_58:
      std::terminate();
    }
LABEL_41:
    *(_QWORD *)&v27[v28 + 16] = &unk_1E0E21CA8;
    v15 = (uint64_t)&v27[v28 + 16];
    *((_QWORD *)v27 + 1) = v28 + 48;
    *(_BYTE *)(v15 + 8) = 2;
    *(_WORD *)(v15 + 9) = *(_WORD *)&v27[v28 + 25] & 0xF000 | 0x540;
    *(_QWORD *)(v15 + 16) = v26;
    *(_QWORD *)(v15 + 24) = v13;
    *(_QWORD *)(v15 + 32) = v6;
    *(_QWORD *)(v15 + 40) = v24;
    return v15;
  }
  v30 = &v3[v8 + 11];
  v31 = (uint64_t)&v3[10 * v7 - 46 + v8 + v11];
  *a1 = v30;
  a1[1] = (unsigned __int8 *)v31;
  if (v6 == 9 || *v30 - 58 < 0xFFFFFFF6)
    goto LABEL_49;
  v32 = 0;
  v33 = v9 + 12;
  v34 = 10 * v7;
  v35 = v34 + v11 - 58;
  while (1)
  {
    *a1 = v33;
    v32 = (char)*(v33 - 1) + 10 * v32 - 48;
    if (!v35)
      break;
    v36 = v33 + 1;
    v37 = *v33 - 48;
    --v35;
    ++v33;
    if (v37 > 9)
    {
      v31 = (uint64_t)(v36 - 1);
      break;
    }
  }
  if ((unint64_t)&v3[v11 - 46 + v34 - v31 + v8] < v32)
  {
LABEL_49:
    v15 = 0;
    *a1 = v21;
    a1[1] = v2;
    return v15;
  }
  *a1 = v21;
  a1[1] = v2;
  if (!v32)
    return 0;
  if (!v38)
    return 0;
  v39 = v38;
  v40 = a1[613];
  v41 = *((_QWORD *)v40 + 1);
  if ((unint64_t)(v41 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v42 = (unsigned __int8 *)malloc(0x1000uLL);
    if (!v42)
      goto LABEL_58;
    v41 = 0;
    *(_QWORD *)v42 = v40;
    *((_QWORD *)v42 + 1) = 0;
    v40 = v42;
    a1[613] = v42;
  }
  *((_QWORD *)v40 + 1) = v41 + 48;
  v43 = (char *)&v40[v41];
  *((_QWORD *)v43 + 2) = &unk_1E0E21518;
  v15 = (uint64_t)(v43 + 16);
  *(_BYTE *)(v15 + 8) = 11;
  *(_WORD *)(v15 + 9) = *(_WORD *)(v15 + 9) & 0xF000 | 0x540;
  *(_QWORD *)(v15 + 16) = v39;
  *(_QWORD *)(v15 + 24) = v31;
  *(_QWORD *)(v15 + 32) = v32;
  return v15;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::TransformedType,std::string_view &,llvm::itanium_demangle::Node *&>(uint64_t a1, __n128 *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 48;
  *(_QWORD *)((char *)v5 + v6 + 16) = &unk_1E0E219E8;
  v9 = (uint64_t)v5 + v6 + 16;
  v10 = *a3;
  *(_BYTE *)(v9 + 8) = 7;
  result = *a2;
  *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
  *(__n128 *)(v9 + 16) = result;
  *(_QWORD *)(v9 + 32) = v10;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::BinaryFPType,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E210F8;
  result = v7 + 16;
  result[8] = 31;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v8;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::BitIntType,llvm::itanium_demangle::Node *&,BOOL &>(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 32;
  v9 = (char *)v5 + v6;
  v10 = *a2;
  *((_QWORD *)v9 + 2) = &unk_1E0E20C80;
  result = v9 + 16;
  result[8] = 32;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v10;
  result[24] = a3 != 0;
  return result;
}

__n128 llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::PostfixQualifiedType,llvm::itanium_demangle::Node *&,std::string_view &>(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 48;
  *(_QWORD *)((char *)v5 + v6 + 16) = &unk_1E0E21FC0;
  v9 = (uint64_t)v5 + v6 + 16;
  v10 = *a2;
  *(_BYTE *)(v9 + 8) = 5;
  result = *a3;
  *(_WORD *)(v9 + 9) = *(_WORD *)(v9 + 9) & 0xF000 | 0x540;
  *(_QWORD *)(v9 + 16) = v10;
  *(__n128 *)(v9 + 24) = result;
  return result;
}

void llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseVectorType(_QWORD *a1, size_t a2)
{
  unsigned __int8 *v2;
  _WORD *v3;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;

  v3 = (_WORD *)*a1;
  v2 = (unsigned __int8 *)a1[1];
  if ((unint64_t)&v2[-*a1] < 2 || *v3 != 30276)
    return;
  v5 = v3 + 1;
  *a1 = v3 + 1;
  if (v2 == (unsigned __int8 *)(v3 + 1) || (char)*v5 < 49)
    goto LABEL_16;
  if (*v5 > 0x39u)
  {
    if (*v5 == 95)
    {
      *a1 = (char *)v3 + 3;
      if (!v8)
        return;
      v9 = v8;
      v10 = (_QWORD *)a1[613];
      v11 = v10[1];
      if ((unint64_t)(v11 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
      {
        v12 = malloc(0x1000uLL);
        if (!v12)
          goto LABEL_40;
        v11 = 0;
        *v12 = v10;
        v12[1] = 0;
        v10 = v12;
        a1[613] = v12;
      }
      v10[1] = v11 + 32;
      *(_QWORD *)((char *)v10 + v11 + 16) = &unk_1E0E20F40;
      v13 = (uint64_t)v10 + v11 + 16;
      *(_BYTE *)(v13 + 8) = 29;
      *(_WORD *)(v13 + 9) = *(_WORD *)((_BYTE *)v10 + v11 + 25) & 0xF000 | 0x540;
      *(_QWORD *)(v13 + 16) = v9;
      *(_QWORD *)(v13 + 24) = 0;
      return;
    }
LABEL_16:
    if (!v14)
      return;
    v15 = (_BYTE *)*a1;
    if (*a1 == a1[1])
      return;
    if (*v15 != 95)
      return;
    v16 = v14;
    *a1 = v15 + 1;
    if (!v17)
      return;
    v18 = v17;
    v19 = (_QWORD *)a1[613];
    v20 = v19[1];
    if ((unint64_t)(v20 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v21 = malloc(0x1000uLL);
      if (!v21)
        goto LABEL_40;
      v20 = 0;
      *v21 = v19;
      v21[1] = 0;
      v19 = v21;
      a1[613] = v21;
    }
    v19[1] = v20 + 32;
    *(_QWORD *)((char *)v19 + v20 + 16) = &unk_1E0E20F40;
    v22 = (uint64_t)v19 + v20 + 16;
    *(_BYTE *)(v22 + 8) = 29;
    *(_WORD *)(v22 + 9) = *(_WORD *)((_BYTE *)v19 + v20 + 25) & 0xF000 | 0x540;
    *(_QWORD *)(v22 + 16) = v18;
    *(_QWORD *)(v22 + 24) = v16;
    return;
  }
  v6 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v5 + 60) & 0x400) != 0)
  {
    v23 = (unsigned __int8 *)(v3 + 1);
    while (((char)*v23 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * *v23 + 60) & 0x400) != 0)
    {
      *a1 = ++v23;
      if (v23 == v2)
      {
        v23 = v2;
        break;
      }
    }
    v7 = v23 - v5;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v24 = (_QWORD *)a1[613];
  v25 = v24[1];
  if ((unint64_t)(v25 - 4048) > 0xFFFFFFFFFFFFF00FLL)
    goto LABEL_33;
  v26 = malloc(0x1000uLL);
  if (!v26)
LABEL_40:
    std::terminate();
  v25 = 0;
  *v26 = v24;
  v26[1] = 0;
  v24 = v26;
  a1[613] = v26;
LABEL_33:
  v24[1] = v25 + 32;
  v27 = (uint64_t)v24 + v25;
  *(_QWORD *)(v27 + 16) = &unk_1E0E227A8;
  v27 += 16;
  *(_BYTE *)(v27 + 8) = 8;
  *(_WORD *)(v27 + 9) = *(_WORD *)(v27 + 9) & 0xF000 | 0x540;
  *(_QWORD *)(v27 + 16) = v5;
  *(_QWORD *)(v27 + 24) = v7;
  v31 = v27;
  v28 = (_BYTE *)*a1;
  v29 = (_BYTE *)a1[1];
  if ((_BYTE *)*a1 != v29 && *v28 == 95)
  {
    *a1 = v28 + 1;
    if (v28 + 1 == v29 || v28[1] != 112)
    {
      if (v30)
    }
    else
    {
      *a1 = v28 + 2;
    }
  }
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::parseClassEnumType(_QWORD *a1)
{
  _WORD *v2;
  char *result;
  const char *v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = (_WORD *)*a1;
  if (a1[1] - *a1 < 2uLL)
  if (*v2 == 29524)
  {
    v4 = "struct";
    v5 = 6;
    *a1 = v2 + 1;
    if (!result)
      return result;
    goto LABEL_11;
  }
  if (*v2 == 30036)
  {
    v4 = "union";
    v5 = 5;
    *a1 = v2 + 1;
    if (!result)
      return result;
    goto LABEL_11;
  }
  if (*v2 != 25940)
  v4 = "enum";
  v5 = 4;
  *a1 = v2 + 1;
  if (result)
  {
LABEL_11:
    v6 = result;
    v7 = (_QWORD *)a1[613];
    v8 = v7[1];
    if ((unint64_t)(v8 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
    {
      v9 = malloc(0x1000uLL);
      if (!v9)
        std::terminate();
      v8 = 0;
      *v9 = v7;
      v9[1] = 0;
      v7 = v9;
      a1[613] = v9;
    }
    v7[1] = v8 + 48;
    *(_QWORD *)((char *)v7 + v8 + 16) = &unk_1E0E22228;
    result = (char *)v7 + v8 + 16;
    result[8] = 6;
    *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v7 + v8 + 25) & 0xF000 | 0x540;
    *((_QWORD *)result + 2) = v4;
    *((_QWORD *)result + 3) = v5;
    *((_QWORD *)result + 4) = v6;
  }
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::PointerType,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char v9;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  v9 = *(_WORD *)(*a2 + 9);
  *((_QWORD *)v7 + 2) = &unk_1E0E20FF0;
  result = v7 + 16;
  result[8] = 12;
  *(_WORD *)(result + 9) = v9 & 0xC0 | 0x500 | *(_WORD *)(result + 9) & 0xF000;
  *((_QWORD *)result + 2) = v8;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::ReferenceType,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::ReferenceKind>(uint64_t a1, uint64_t *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  char *result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 32;
  v9 = (char *)v5 + v6;
  v10 = *a2;
  v11 = *(_WORD *)(*a2 + 9);
  *((_QWORD *)v9 + 2) = &unk_1E0E21620;
  result = v9 + 16;
  result[8] = 13;
  *(_WORD *)(result + 9) = v11 & 0xC0 | 0x500 | *(_WORD *)(result + 9) & 0xF000;
  *((_QWORD *)result + 2) = v10;
  *((_DWORD *)result + 6) = a3;
  result[28] = 0;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::PostfixQualifiedType,llvm::itanium_demangle::Node *&,char const(&)[9]>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E21FC0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 5;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = " complex";
  *(_QWORD *)(result + 32) = 8;
  return result;
}

uint64_t llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::PostfixQualifiedType,llvm::itanium_demangle::Node *&,char const(&)[11]>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4032) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 48;
  v7 = *a2;
  *(_QWORD *)((char *)v3 + v4 + 16) = &unk_1E0E21FC0;
  result = (uint64_t)v3 + v4 + 16;
  *(_BYTE *)(result + 8) = 5;
  *(_WORD *)(result + 9) = *(_WORD *)((_BYTE *)v3 + v4 + 25) & 0xF000 | 0x540;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = " imaginary";
  *(_QWORD *)(result + 32) = 10;
  return result;
}

char *llvm::itanium_demangle::NoexceptSpec::printLeft(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 + 8 > v6)
  {
    v7 = v5 + 1000;
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_20;
    v5 = *(_QWORD *)(a2 + 8);
  }
  *(_QWORD *)&v4[v5] = 0x7470656378656F6ELL;
  v10 = *(char **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = v11 + 8;
  *(_QWORD *)(a2 + 8) = v11 + 8;
  ++*(_DWORD *)(a2 + 32);
  v13 = v11 + 9;
  v14 = *(_QWORD *)(a2 + 16);
  if (v11 + 9 > v14)
  {
    if (2 * v14 <= v11 + 1001)
      v15 = v11 + 1001;
    else
      v15 = 2 * v14;
    *(_QWORD *)(a2 + 16) = v15;
    v10 = (char *)realloc(v10, v15);
    *(_QWORD *)a2 = v10;
    if (!v10)
      goto LABEL_20;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = v12 + 1;
  }
  *(_QWORD *)(a2 + 8) = v13;
  v10[v12] = 40;
  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 16), a2, 19, 0);
  --*(_DWORD *)(a2 + 32);
  result = *(char **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = v17 + 1;
  v19 = *(_QWORD *)(a2 + 16);
  if (v17 + 1 > v19)
  {
    v20 = v17 + 993;
    if (2 * v19 <= v20)
      v21 = v20;
    else
      v21 = 2 * v19;
    *(_QWORD *)(a2 + 16) = v21;
    result = (char *)realloc(result, v21);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = v17 + 1;
      goto LABEL_19;
    }
LABEL_20:
    abort();
  }
LABEL_19:
  *(_QWORD *)(a2 + 8) = v18;
  result[v17] = 41;
  return result;
}

char *llvm::itanium_demangle::DynamicExceptionSpec::printLeft(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *result;
  unint64_t v29;
  size_t v30;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 + 5 > v6)
  {
    v7 = v5 + 997;
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_34;
    v5 = *(_QWORD *)(a2 + 8);
  }
  v10 = &v4[v5];
  v10[4] = 119;
  *(_DWORD *)v10 = 1869768820;
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = v12 + 5;
  *(_QWORD *)(a2 + 8) = v12 + 5;
  ++*(_DWORD *)(a2 + 32);
  v14 = v12 + 6;
  v15 = *(_QWORD *)(a2 + 16);
  if (v12 + 6 > v15)
  {
    if (2 * v15 <= v12 + 998)
      v16 = v12 + 998;
    else
      v16 = 2 * v15;
    *(_QWORD *)(a2 + 16) = v16;
    v11 = (char *)realloc(v11, v16);
    *(_QWORD *)a2 = v11;
    if (!v11)
      goto LABEL_34;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = v13 + 1;
  }
  *(_QWORD *)(a2 + 8) = v14;
  v11[v13] = 40;
  v17 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 24))
  {
    v18 = 0;
    v19 = 1;
    while (1)
    {
      v20 = v17;
      if ((v19 & 1) == 0)
      {
        v21 = *(_QWORD *)(a2 + 16);
        v22 = *(char **)a2;
        if (v17 + 2 <= v21)
        {
          v25 = v17;
        }
        else
        {
          v23 = 2 * v21;
          if (v23 <= v17 + 994)
            v24 = v17 + 994;
          else
            v24 = v23;
          *(_QWORD *)(a2 + 16) = v24;
          v22 = (char *)realloc(v22, v24);
          *(_QWORD *)a2 = v22;
          if (!v22)
            goto LABEL_34;
          v25 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v22[v25] = 8236;
        v20 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v20;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v18), a2, 18, 0);
      if (v20 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v17;
        if (++v18 == *(_QWORD *)(a1 + 24))
          break;
      }
      else
      {
        v19 = 0;
        v17 = *(_QWORD *)(a2 + 8);
        if (++v18 == *(_QWORD *)(a1 + 24))
          break;
      }
    }
  }
  --*(_DWORD *)(a2 + 32);
  v26 = v17 + 1;
  v27 = *(_QWORD *)(a2 + 16);
  result = *(char **)a2;
  if (v17 + 1 > v27)
  {
    v29 = 2 * v27;
    if (v29 <= v17 + 993)
      v30 = v17 + 993;
    else
      v30 = v29;
    *(_QWORD *)(a2 + 16) = v30;
    result = (char *)realloc(result, v30);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v17 = *(_QWORD *)(a2 + 8);
      v26 = v17 + 1;
      goto LABEL_33;
    }
LABEL_34:
    abort();
  }
LABEL_33:
  *(_QWORD *)(a2 + 8) = v26;
  result[v17] = 41;
  return result;
}

uint64_t llvm::itanium_demangle::FunctionType::hasRHSComponentSlow()
{
  return 1;
}

uint64_t llvm::itanium_demangle::FunctionType::hasFunctionSlow()
{
  return 1;
}

void *llvm::itanium_demangle::FunctionType::printLeft(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  size_t v8;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  result = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4 + 1 > v5)
  {
    v6 = v4 + 993;
    v7 = 2 * v5;
    if (v7 <= v6)
      v8 = v6;
    else
      v8 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    result = realloc(result, v8);
    *(_QWORD *)a2 = result;
    if (!result)
      abort();
    v4 = *(_QWORD *)(a2 + 8);
  }
  *((_BYTE *)result + v4) = 32;
  ++*(_QWORD *)(a2 + 8);
  return result;
}

char *llvm::itanium_demangle::FunctionType::printRight(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  size_t v23;
  char *result;
  int v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  unint64_t v41;
  size_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;
  uint64_t v63;

  ++*(_DWORD *)(a2 + 32);
  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v7)
  {
    v8 = v5 + 993;
    if (2 * v7 <= v8)
      v9 = v8;
    else
      v9 = 2 * v7;
    *(_QWORD *)(a2 + 16) = v9;
    v4 = (char *)realloc(v4, v9);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_78;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v4[v5] = 40;
  v10 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 32))
  {
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v10;
      if ((v12 & 1) == 0)
      {
        v14 = *(_QWORD *)(a2 + 16);
        v15 = *(char **)a2;
        if (v10 + 2 <= v14)
        {
          v18 = v10;
        }
        else
        {
          v16 = 2 * v14;
          if (v16 <= v10 + 994)
            v17 = v10 + 994;
          else
            v17 = v16;
          *(_QWORD *)(a2 + 16) = v17;
          v15 = (char *)realloc(v15, v17);
          *(_QWORD *)a2 = v15;
          if (!v15)
            goto LABEL_78;
          v18 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)&v15[v18] = 8236;
        v13 = *(_QWORD *)(a2 + 8) + 2;
        *(_QWORD *)(a2 + 8) = v13;
      }
      llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v11), a2, 18, 0);
      if (v13 == *(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = v10;
        if (++v11 == *(_QWORD *)(a1 + 32))
          break;
      }
      else
      {
        v12 = 0;
        v10 = *(_QWORD *)(a2 + 8);
        if (++v11 == *(_QWORD *)(a1 + 32))
          break;
      }
    }
  }
  --*(_DWORD *)(a2 + 32);
  v19 = v10 + 1;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(char **)a2;
  if (v10 + 1 > v20)
  {
    v22 = 2 * v20;
    if (v22 <= v10 + 993)
      v23 = v10 + 993;
    else
      v23 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    v21 = (char *)realloc(v21, v23);
    *(_QWORD *)a2 = v21;
    if (!v21)
      goto LABEL_78;
    v10 = *(_QWORD *)(a2 + 8);
    v19 = v10 + 1;
  }
  *(_QWORD *)(a2 + 8) = v19;
  v21[v10] = 41;
  result = (char *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  v25 = *(_DWORD *)(a1 + 40);
  if ((v25 & 1) != 0)
  {
    result = *(char **)a2;
    v26 = *(_QWORD *)(a2 + 8);
    v27 = *(_QWORD *)(a2 + 16);
    if (v26 + 6 > v27)
    {
      v28 = v26 + 998;
      v29 = 2 * v27;
      if (v29 <= v28)
        v30 = v28;
      else
        v30 = v29;
      *(_QWORD *)(a2 + 16) = v30;
      result = (char *)realloc(result, v30);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_78;
      v26 = *(_QWORD *)(a2 + 8);
    }
    v31 = &result[v26];
    *((_WORD *)v31 + 2) = 29811;
    *(_DWORD *)v31 = 1852793632;
    *(_QWORD *)(a2 + 8) += 6;
    v25 = *(_DWORD *)(a1 + 40);
  }
  if ((v25 & 2) != 0)
  {
    result = *(char **)a2;
    v32 = *(_QWORD *)(a2 + 8);
    v33 = *(_QWORD *)(a2 + 16);
    if (v32 + 9 > v33)
    {
      v34 = v32 + 1001;
      v35 = 2 * v33;
      if (v35 <= v34)
        v36 = v34;
      else
        v36 = v35;
      *(_QWORD *)(a2 + 16) = v36;
      result = (char *)realloc(result, v36);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_78;
      v32 = *(_QWORD *)(a2 + 8);
    }
    v37 = &result[v32];
    *(_QWORD *)v37 = *(_QWORD *)" volatile";
    v37[8] = 101;
    *(_QWORD *)(a2 + 8) += 9;
    v25 = *(_DWORD *)(a1 + 40);
  }
  if ((v25 & 4) != 0)
  {
    result = *(char **)a2;
    v38 = *(_QWORD *)(a2 + 8);
    v39 = *(_QWORD *)(a2 + 16);
    if (v38 + 9 > v39)
    {
      v40 = v38 + 1001;
      v41 = 2 * v39;
      if (v41 <= v40)
        v42 = v40;
      else
        v42 = v41;
      *(_QWORD *)(a2 + 16) = v42;
      result = (char *)realloc(result, v42);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_78;
      v38 = *(_QWORD *)(a2 + 8);
    }
    v43 = &result[v38];
    *(_QWORD *)v43 = *(_QWORD *)" restrict";
    v43[8] = 116;
    *(_QWORD *)(a2 + 8) += 9;
  }
  v44 = *(unsigned __int8 *)(a1 + 44);
  if (v44 == 2)
  {
    result = *(char **)a2;
    v51 = *(_QWORD *)(a2 + 8);
    v52 = *(_QWORD *)(a2 + 16);
    if (v51 + 3 > v52)
    {
      v53 = v51 + 995;
      v54 = 2 * v52;
      if (v54 <= v53)
        v55 = v53;
      else
        v55 = v54;
      *(_QWORD *)(a2 + 16) = v55;
      result = (char *)realloc(result, v55);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_78;
      v51 = *(_QWORD *)(a2 + 8);
    }
    v56 = &result[v51];
    v56[2] = 38;
    *(_WORD *)v56 = 9760;
    v50 = 3;
  }
  else
  {
    if (v44 != 1)
      goto LABEL_68;
    result = *(char **)a2;
    v45 = *(_QWORD *)(a2 + 8);
    v46 = *(_QWORD *)(a2 + 16);
    if (v45 + 2 > v46)
    {
      v47 = v45 + 994;
      v48 = 2 * v46;
      if (v48 <= v47)
        v49 = v47;
      else
        v49 = v48;
      *(_QWORD *)(a2 + 16) = v49;
      result = (char *)realloc(result, v49);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_78;
      v45 = *(_QWORD *)(a2 + 8);
    }
    *(_WORD *)&result[v45] = 9760;
    v50 = 2;
  }
  *(_QWORD *)(a2 + 8) += v50;
LABEL_68:
  if (!*(_QWORD *)(a1 + 48))
    return result;
  v57 = *(char **)a2;
  v58 = *(_QWORD *)(a2 + 8);
  v59 = v58 + 1;
  v60 = *(_QWORD *)(a2 + 16);
  if (v58 + 1 > v60)
  {
    v61 = v58 + 993;
    if (2 * v60 <= v61)
      v62 = v61;
    else
      v62 = 2 * v60;
    *(_QWORD *)(a2 + 16) = v62;
    v57 = (char *)realloc(v57, v62);
    *(_QWORD *)a2 = v57;
    if (v57)
    {
      v58 = *(_QWORD *)(a2 + 8);
      v59 = v58 + 1;
      goto LABEL_75;
    }
LABEL_78:
    abort();
  }
LABEL_75:
  *(_QWORD *)(a2 + 8) = v59;
  v57[v58] = 32;
  v63 = *(_QWORD *)(a1 + 48);
  result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 32))(v63, a2);
  if ((*(_WORD *)(v63 + 9) & 0xC0) != 0x40)
    return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 40))(v63, a2);
  return result;
}

char *llvm::itanium_demangle::ObjCProtoName::printLeft(_QWORD *a1, char **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *result;
  size_t v20;
  unint64_t v21;
  size_t v22;

  v4 = a1[2];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 1) > v7)
  {
    v8 = (size_t)(v6 + 993);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      goto LABEL_24;
    v6 = a2[1];
  }
  v6[(_QWORD)v5] = 60;
  v11 = (uint64_t)(a2[1] + 1);
  a2[1] = (char *)v11;
  v12 = a1[4];
  if (v12)
  {
    v13 = (const void *)a1[3];
    v14 = v11 + v12;
    v15 = (size_t)a2[2];
    v16 = *a2;
    if (v11 + v12 > v15)
    {
      if (2 * v15 <= v14 + 992)
        v17 = v14 + 992;
      else
        v17 = 2 * v15;
      a2[2] = (char *)v17;
      v16 = (char *)realloc(v16, v17);
      *a2 = v16;
      if (!v16)
        goto LABEL_24;
      v11 = (uint64_t)a2[1];
    }
    memcpy(&v16[v11], v13, v12);
    v11 = (uint64_t)&a2[1][v12];
    a2[1] = (char *)v11;
  }
  v18 = (unint64_t)a2[2];
  result = *a2;
  if (v11 + 1 > v18)
  {
    v20 = v11 + 993;
    v21 = 2 * v18;
    if (v21 <= v20)
      v22 = v20;
    else
      v22 = v21;
    a2[2] = (char *)v22;
    result = (char *)realloc(result, v22);
    *a2 = result;
    if (result)
    {
      v11 = (uint64_t)a2[1];
      goto LABEL_23;
    }
LABEL_24:
    abort();
  }
LABEL_23:
  result[v11] = 62;
  ++a2[1];
  return result;
}

uint64_t llvm::itanium_demangle::VendorExtQualType::printLeft(_QWORD *a1, char **a2)
{
  uint64_t v4;
  uint64_t result;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;

  v4 = a1[2];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  result = (uint64_t)*a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 1) > v7)
  {
    v8 = (size_t)(v6 + 993);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    result = (uint64_t)realloc((void *)result, v10);
    *a2 = (char *)result;
    if (!result)
      goto LABEL_21;
    v6 = a2[1];
  }
  v6[result] = 32;
  v11 = (uint64_t)(a2[1] + 1);
  a2[1] = (char *)v11;
  v12 = a1[4];
  if (!v12)
    goto LABEL_17;
  v13 = (const void *)a1[3];
  v14 = v11 + v12;
  v15 = (size_t)a2[2];
  v16 = *a2;
  if (v11 + v12 > v15)
  {
    if (2 * v15 <= v14 + 992)
      v17 = v14 + 992;
    else
      v17 = 2 * v15;
    a2[2] = (char *)v17;
    v16 = (char *)realloc(v16, v17);
    *a2 = v16;
    if (v16)
    {
      v11 = (uint64_t)a2[1];
      goto LABEL_16;
    }
LABEL_21:
    abort();
  }
LABEL_16:
  result = (uint64_t)memcpy(&v16[v11], v13, v12);
  a2[1] += v12;
LABEL_17:
  v18 = a1[5];
  if (v18)
  {
    result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v18 + 32))(v18, a2);
    if ((*(_WORD *)(v18 + 9) & 0xC0) != 0x40)
      return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v18 + 40))(v18, a2);
  }
  return result;
}

uint64_t llvm::itanium_demangle::QualType::hasRHSComponentSlow(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  else
    return v2 < 0x40;
}

uint64_t llvm::itanium_demangle::QualType::hasArraySlow(uint64_t a1)
{
  _BYTE *v1;
  int v2;

  v1 = *(_BYTE **)(a1 + 16);
  v2 = v1[10] & 3;
  if (v2 == 2)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 8))(v1);
  else
    return v2 == 0;
}

uint64_t llvm::itanium_demangle::QualType::hasFunctionSlow(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (*(unsigned __int16 *)(v1 + 9) >> 10) & 3;
  if (v2 == 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  else
    return v2 == 0;
}

_DWORD *llvm::itanium_demangle::QualType::printLeft(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  return llvm::itanium_demangle::QualType::printQuals((_DWORD *)a1, a2);
}

uint64_t llvm::itanium_demangle::QualType::printRight(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

_DWORD *llvm::itanium_demangle::QualType::printQuals(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;

  v3 = result;
  v4 = result[3];
  if ((v4 & 1) != 0)
  {
    result = *(_DWORD **)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    if (v5 + 6 > v6)
    {
      v7 = v5 + 998;
      v8 = 2 * v6;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v8;
      *(_QWORD *)(a2 + 16) = v9;
      result = realloc(result, v9);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_26;
      v5 = *(_QWORD *)(a2 + 8);
    }
    v10 = (char *)result + v5;
    *((_WORD *)v10 + 2) = 29811;
    *(_DWORD *)v10 = 1852793632;
    *(_QWORD *)(a2 + 8) += 6;
    v4 = v3[3];
  }
  if ((v4 & 2) != 0)
  {
    result = *(_DWORD **)a2;
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 16);
    if (v11 + 9 > v12)
    {
      v13 = v11 + 1001;
      v14 = 2 * v12;
      if (v14 <= v13)
        v15 = v13;
      else
        v15 = v14;
      *(_QWORD *)(a2 + 16) = v15;
      result = realloc(result, v15);
      *(_QWORD *)a2 = result;
      if (!result)
        goto LABEL_26;
      v11 = *(_QWORD *)(a2 + 8);
    }
    v16 = (char *)result + v11;
    *(_QWORD *)v16 = *(_QWORD *)" volatile";
    v16[8] = 101;
    *(_QWORD *)(a2 + 8) += 9;
    v4 = v3[3];
  }
  if ((v4 & 4) == 0)
    return result;
  result = *(_DWORD **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD *)(a2 + 16);
  if (v17 + 9 > v18)
  {
    v19 = v17 + 1001;
    v20 = 2 * v18;
    if (v20 <= v19)
      v21 = v19;
    else
      v21 = v20;
    *(_QWORD *)(a2 + 16) = v21;
    result = realloc(result, v21);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v17 = *(_QWORD *)(a2 + 8);
      goto LABEL_24;
    }
LABEL_26:
    abort();
  }
LABEL_24:
  v22 = (char *)result + v17;
  *(_QWORD *)v22 = *(_QWORD *)" restrict";
  v22[8] = 116;
  *(_QWORD *)(a2 + 8) += 9;
  return result;
}

char *llvm::itanium_demangle::TransformedType::printLeft(_QWORD *a1, char **a2)
{
  size_t v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  char *result;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;

  v4 = a1[3];
  v5 = (size_t)a2[1];
  if (v4)
  {
    v6 = (const void *)a1[2];
    v7 = v5 + v4;
    v8 = (size_t)a2[2];
    v9 = *a2;
    if (v5 + v4 > v8)
    {
      if (2 * v8 <= v7 + 992)
        v10 = v7 + 992;
      else
        v10 = 2 * v8;
      a2[2] = (char *)v10;
      v9 = (char *)realloc(v9, v10);
      *a2 = v9;
      if (!v9)
        goto LABEL_24;
      v5 = (size_t)a2[1];
    }
    memcpy(&v9[v5], v6, v4);
    v5 = (size_t)&a2[1][v4];
    a2[1] = (char *)v5;
  }
  v11 = v5 + 1;
  v12 = (unint64_t)a2[2];
  v13 = *a2;
  if (v5 + 1 > v12)
  {
    v14 = v5 + 993;
    if (2 * v12 <= v14)
      v15 = v14;
    else
      v15 = 2 * v12;
    a2[2] = (char *)v15;
    v13 = (char *)realloc(v13, v15);
    *a2 = v13;
    if (!v13)
      goto LABEL_24;
    v5 = (size_t)a2[1];
    v11 = v5 + 1;
  }
  a2[1] = (char *)v11;
  v13[v5] = 40;
  v16 = a1[4];
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, a2);
  if ((*(_WORD *)(v16 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v16 + 40))(v16, a2);
  result = *a2;
  v18 = a2[1];
  v19 = v18 + 1;
  v20 = (unint64_t)a2[2];
  if ((unint64_t)(v18 + 1) > v20)
  {
    v21 = (unint64_t)(v18 + 993);
    if (2 * v20 <= v21)
      v22 = v21;
    else
      v22 = 2 * v20;
    a2[2] = (char *)v22;
    result = (char *)realloc(result, v22);
    *a2 = result;
    if (result)
    {
      v18 = a2[1];
      v19 = v18 + 1;
      goto LABEL_23;
    }
LABEL_24:
    abort();
  }
LABEL_23:
  a2[1] = v19;
  v18[(_QWORD)result] = 41;
  return result;
}

uint64_t llvm::itanium_demangle::BinaryFPType::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 6) > v6)
  {
    v7 = (size_t)(v5 + 998);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      abort();
    v5 = a2[1];
  }
  v10 = &v5[(_QWORD)v4];
  *((_WORD *)v10 + 2) = 29793;
  *(_DWORD *)v10 = 1869366879;
  a2[1] += 6;
  v11 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

char *llvm::itanium_demangle::BitIntType::printLeft(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  char *result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(char **)a2;
    if (v4 + 7 <= v5)
      goto LABEL_16;
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(char **)a2;
  if (v4 + 9 > v7)
  {
    v9 = v4 + 1001;
    v10 = 2 * v7;
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    *(_QWORD *)(a2 + 16) = v11;
    v8 = (char *)realloc(v8, v11);
    *(_QWORD *)a2 = v8;
    if (!v8)
      goto LABEL_29;
    v4 = *(_QWORD *)(a2 + 8);
  }
  v12 = &v8[v4];
  *(_QWORD *)v12 = *(_QWORD *)"unsigned ";
  v12[8] = 32;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8) + 9;
  *(_QWORD *)(a2 + 8) = v4;
  v6 = *(char **)a2;
  if (v4 + 7 > v5)
  {
LABEL_11:
    v13 = v4 + 999;
    v14 = 2 * v5;
    if (v14 <= v13)
      v15 = v13;
    else
      v15 = v14;
    *(_QWORD *)(a2 + 16) = v15;
    v6 = (char *)realloc(v6, v15);
    *(_QWORD *)a2 = v6;
    if (!v6)
      goto LABEL_29;
    v4 = *(_QWORD *)(a2 + 8);
  }
LABEL_16:
  v16 = &v6[v4];
  *(_DWORD *)(v16 + 3) = 1953384820;
  *(_DWORD *)v16 = 1953055327;
  v17 = *(char **)a2;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 7;
  *(_QWORD *)(a2 + 8) = v18 + 7;
  ++*(_DWORD *)(a2 + 32);
  v20 = v18 + 8;
  v21 = *(_QWORD *)(a2 + 16);
  if (v18 + 8 > v21)
  {
    if (2 * v21 <= v18 + 1000)
      v22 = v18 + 1000;
    else
      v22 = 2 * v21;
    *(_QWORD *)(a2 + 16) = v22;
    v17 = (char *)realloc(v17, v22);
    *(_QWORD *)a2 = v17;
    if (!v17)
      goto LABEL_29;
    v19 = *(_QWORD *)(a2 + 8);
    v20 = v19 + 1;
  }
  *(_QWORD *)(a2 + 8) = v20;
  v17[v19] = 40;
  llvm::itanium_demangle::Node::printAsOperand(*(_QWORD *)(a1 + 16), a2, 19, 0);
  --*(_DWORD *)(a2 + 32);
  result = *(char **)a2;
  v24 = *(_QWORD *)(a2 + 8);
  v25 = v24 + 1;
  v26 = *(_QWORD *)(a2 + 16);
  if (v24 + 1 > v26)
  {
    v27 = v24 + 993;
    if (2 * v26 <= v27)
      v28 = v27;
    else
      v28 = 2 * v26;
    *(_QWORD *)(a2 + 16) = v28;
    result = (char *)realloc(result, v28);
    *(_QWORD *)a2 = result;
    if (result)
    {
      v24 = *(_QWORD *)(a2 + 8);
      v25 = v24 + 1;
      goto LABEL_28;
    }
LABEL_29:
    abort();
  }
LABEL_28:
  *(_QWORD *)(a2 + 8) = v25;
  result[v24] = 41;
  return result;
}

void *llvm::itanium_demangle::PostfixQualifiedType::printLeft(uint64_t a1, char **a2)
{
  void *result;
  size_t v5;
  const void *v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  size_t v12;

  result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(const void **)(a1 + 24);
    v7 = *a2;
    v8 = a2[1];
    v9 = &v8[v5];
    v10 = (size_t)a2[2];
    if ((unint64_t)&v8[v5] > v10)
    {
      v11 = 2 * v10;
      if (v11 <= (unint64_t)(v9 + 992))
        v12 = (size_t)(v9 + 992);
      else
        v12 = v11;
      a2[2] = (char *)v12;
      v7 = (char *)realloc(v7, v12);
      *a2 = v7;
      if (!v7)
        abort();
      v8 = a2[1];
    }
    result = memcpy(&v8[(_QWORD)v7], v6, v5);
    a2[1] += v5;
  }
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::PixelVectorType,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *result;

  v3 = *(_QWORD **)(a1 + 4904);
  v4 = v3[1];
  if ((unint64_t)(v4 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v6 = malloc(0x1000uLL);
    if (!v6)
      std::terminate();
    v4 = 0;
    *v6 = v3;
    v6[1] = 0;
    v3 = v6;
    *(_QWORD *)(a1 + 4904) = v6;
  }
  v3[1] = v4 + 32;
  v7 = (char *)v3 + v4;
  v8 = *a2;
  *((_QWORD *)v7 + 2) = &unk_1E0E21990;
  result = v7 + 16;
  result[8] = 30;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v8;
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::VectorType,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 32;
  v9 = (char *)v5 + v6;
  v10 = *a2;
  v11 = *a3;
  *((_QWORD *)v9 + 2) = &unk_1E0E20F40;
  result = v9 + 16;
  result[8] = 29;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x540;
  *((_QWORD *)result + 2) = v10;
  *((_QWORD *)result + 3) = v11;
  return result;
}

char *llvm::itanium_demangle::PixelVectorType::printLeft(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;

  v4 = *a2;
  v5 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)(v5 + 13) > v6)
  {
    v7 = (size_t)(v5 + 1005);
    v8 = 2 * v6;
    if (v8 <= v7)
      v9 = v7;
    else
      v9 = v8;
    a2[2] = (char *)v9;
    v4 = (char *)realloc(v4, v9);
    *a2 = v4;
    if (!v4)
      goto LABEL_16;
    v5 = a2[1];
  }
  qmemcpy(&v5[(_QWORD)v4], "pixel vector[", 13);
  a2[1] += 13;
  v10 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v10 + 40))(v10, a2);
  result = *a2;
  v12 = a2[1];
  v13 = (unint64_t)a2[2];
  if ((unint64_t)(v12 + 1) > v13)
  {
    v14 = (size_t)(v12 + 993);
    v15 = 2 * v13;
    if (v15 <= v14)
      v16 = v14;
    else
      v16 = v15;
    a2[2] = (char *)v16;
    result = (char *)realloc(result, v16);
    *a2 = result;
    if (result)
    {
      v12 = a2[1];
      goto LABEL_15;
    }
LABEL_16:
    abort();
  }
LABEL_15:
  v12[(_QWORD)result] = 93;
  ++a2[1];
  return result;
}

char *llvm::itanium_demangle::VectorType::printLeft(uint64_t a1, char **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  char *result;
  char *v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  size_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *a2;
  v6 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)(v6 + 8) > v7)
  {
    v8 = (size_t)(v6 + 1000);
    v9 = 2 * v7;
    if (v9 <= v8)
      v10 = v8;
    else
      v10 = v9;
    a2[2] = (char *)v10;
    v5 = (char *)realloc(v5, v10);
    *a2 = v5;
    if (!v5)
      goto LABEL_19;
    v6 = a2[1];
  }
  *(_QWORD *)&v6[(_QWORD)v5] = 0x5B726F7463657620;
  a2[1] += 8;
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 32))(v11, a2);
    if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v11 + 40))(v11, a2);
  }
  result = *a2;
  v13 = a2[1];
  v14 = (unint64_t)a2[2];
  if ((unint64_t)(v13 + 1) > v14)
  {
    v15 = (size_t)(v13 + 993);
    v16 = 2 * v14;
    if (v16 <= v15)
      v17 = v15;
    else
      v17 = v16;
    a2[2] = (char *)v17;
    result = (char *)realloc(result, v17);
    *a2 = result;
    if (result)
    {
      v13 = a2[1];
      goto LABEL_18;
    }
LABEL_19:
    abort();
  }
LABEL_18:
  v13[(_QWORD)result] = 93;
  ++a2[1];
  return result;
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::ArrayType,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 32;
  v9 = (char *)v5 + v6;
  v10 = *a2;
  v11 = *a3;
  *((_QWORD *)v9 + 2) = &unk_1E0E22858;
  result = v9 + 16;
  result[8] = 15;
  *(_WORD *)(result + 9) = *(_WORD *)(result + 9) & 0xF000 | 0x400;
  *((_QWORD *)result + 2) = v10;
  *((_QWORD *)result + 3) = v11;
  return result;
}

uint64_t llvm::itanium_demangle::ArrayType::hasRHSComponentSlow()
{
  return 1;
}

uint64_t llvm::itanium_demangle::ArrayType::hasArraySlow()
{
  return 1;
}

uint64_t llvm::itanium_demangle::ArrayType::printLeft(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t llvm::itanium_demangle::ArrayType::printRight(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  size_t v20;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v5 + *(_QWORD *)a2 - 1) != 93)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v5 + 1 > v6)
    {
      v7 = v5 + 993;
      v8 = 2 * v6;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v8;
      *(_QWORD *)(a2 + 16) = v9;
      v4 = realloc(v4, v9);
      *(_QWORD *)a2 = v4;
      if (!v4)
        goto LABEL_25;
      v5 = *(_QWORD *)(a2 + 8);
    }
    *((_BYTE *)v4 + v5) = 32;
    v4 = *(void **)a2;
    v5 = *(_QWORD *)(a2 + 8) + 1;
    *(_QWORD *)(a2 + 8) = v5;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v5 + 1 > v10)
  {
    v11 = v5 + 993;
    v12 = 2 * v10;
    if (v12 <= v11)
      v13 = v11;
    else
      v13 = v12;
    *(_QWORD *)(a2 + 16) = v13;
    v4 = realloc(v4, v13);
    *(_QWORD *)a2 = v4;
    if (!v4)
      goto LABEL_25;
    v5 = *(_QWORD *)(a2 + 8);
  }
  *((_BYTE *)v4 + v5) = 91;
  ++*(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v14 + 32))(*(_QWORD *)(a1 + 24), a2);
    if ((*(_WORD *)(v14 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, a2);
  }
  v15 = *(void **)a2;
  v16 = *(_QWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  if (v16 + 1 > v17)
  {
    v18 = v16 + 993;
    v19 = 2 * v17;
    if (v19 <= v18)
      v20 = v18;
    else
      v20 = v19;
    *(_QWORD *)(a2 + 16) = v20;
    v15 = realloc(v15, v20);
    *(_QWORD *)a2 = v15;
    if (v15)
    {
      v16 = *(_QWORD *)(a2 + 8);
      goto LABEL_24;
    }
LABEL_25:
    abort();
  }
LABEL_24:
  *((_BYTE *)v15 + v16) = 93;
  ++*(_QWORD *)(a2 + 8);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
}

char *llvm::itanium_demangle::AbstractManglingParser<llvm::itanium_demangle::ManglingParser<`anonymous namespace'::DefaultAllocator>,`anonymous namespace'::DefaultAllocator>::make<llvm::itanium_demangle::PointerToMemberType,llvm::itanium_demangle::Node *&,llvm::itanium_demangle::Node *&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *result;

  v5 = *(_QWORD **)(a1 + 4904);
  v6 = v5[1];
  if ((unint64_t)(v6 - 4048) <= 0xFFFFFFFFFFFFF00FLL)
  {
    v8 = malloc(0x1000uLL);
    if (!v8)
      std::terminate();
    v6 = 0;
    *v8 = v5;
    v8[1] = 0;
    v5 = v8;
    *(_QWORD *)(a1 + 4904) = v8;
  }
  v5[1] = v6 + 32;
  v9 = (char *)v5 + v6;
  v10 = *a2;
  v11 = *a3;
  v12 = *(_WORD *)(*a3 + 9);
  *((_QWORD *)v9 + 2) = &unk_1E0E21DB0;
  result = v9 + 16;
  result[8] = 14;
  *(_WORD *)(result + 9) = v12 & 0xC0 | 0x500 | *(_WORD *)(result + 9) & 0xF000;
  *((_QWORD *)result + 2) = v10;
  *((_QWORD *)result + 3) = v11;
  return result;
}

uint64_t llvm::itanium_demangle::PointerToMemberType::hasRHSComponentSlow(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  else
    return v2 < 0x40;
}

char *llvm::itanium_demangle::PointerToMemberType::printLeft(uint64_t a1, char **a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  char v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *result;
  char *v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  size_t v25;
  char *v26;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int16 *)(v4 + 9);
  v6 = (v5 >> 8) & 3;
  if (!v6)
    goto LABEL_8;
  if (v6 == 2)
  {
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v4 + 8))(v4, a2) & 1) != 0)
    {
LABEL_8:
      v8 = *a2;
      v9 = a2[1];
      v10 = (unint64_t)a2[2];
      if ((unint64_t)(v9 + 1) > v10)
      {
        v11 = (size_t)(v9 + 993);
        v12 = 2 * v10;
        if (v12 <= v11)
          v13 = v11;
        else
          v13 = v12;
        a2[2] = (char *)v13;
        v8 = (char *)realloc(v8, v13);
        *a2 = v8;
        if (!v8)
          goto LABEL_31;
        v9 = a2[1];
      }
      v14 = 40;
      goto LABEL_22;
    }
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(unsigned __int16 *)(v4 + 9);
  }
  v7 = (v5 >> 10) & 3;
  if (!v7 || v7 == 2 && (*(unsigned int (**)(uint64_t, char **))(*(_QWORD *)v4 + 16))(v4, a2))
    goto LABEL_8;
  v8 = *a2;
  v9 = a2[1];
  v15 = (unint64_t)a2[2];
  if ((unint64_t)(v9 + 1) > v15)
  {
    v16 = (size_t)(v9 + 993);
    v17 = 2 * v15;
    if (v17 <= v16)
      v18 = v16;
    else
      v18 = v17;
    a2[2] = (char *)v18;
    v8 = (char *)realloc(v8, v18);
    *a2 = v8;
    if (!v8)
      goto LABEL_31;
    v9 = a2[1];
  }
  v14 = 32;
LABEL_22:
  v9[(_QWORD)v8] = v14;
  ++a2[1];
  v19 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v19 + 32))(v19, a2);
  if ((*(_WORD *)(v19 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v19 + 40))(v19, a2);
  result = *a2;
  v21 = a2[1];
  v22 = (unint64_t)a2[2];
  if ((unint64_t)(v21 + 3) > v22)
  {
    v23 = (size_t)(v21 + 995);
    v24 = 2 * v22;
    if (v24 <= v23)
      v25 = v23;
    else
      v25 = v24;
    a2[2] = (char *)v25;
    result = (char *)realloc(result, v25);
    *a2 = result;
    if (result)
    {
      v21 = a2[1];
      goto LABEL_30;
    }
LABEL_31:
    abort();
  }
LABEL_30:
  v26 = &v21[(_QWORD)result];
  v26[2] = 42;
  *(_WORD *)v26 = 14906;
  a2[1] += 3;
  return result;
}

uint64_t llvm::itanium_demangle::PointerToMemberType::printRight(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  size_t v13;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int16 *)(v4 + 9);
  v6 = (v5 >> 8) & 3;
  if (v6)
  {
    if (v6 != 2)
    {
LABEL_5:
      v7 = (v5 >> 10) & 3;
      if (v7 && (v7 != 2 || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2)))
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
      goto LABEL_8;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 8))(v4, a2) & 1) == 0)
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(unsigned __int16 *)(v4 + 9);
      goto LABEL_5;
    }
  }
LABEL_8:
  v8 = *(void **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  if (v9 + 1 > v10)
  {
    v11 = v9 + 993;
    v12 = 2 * v10;
    if (v12 <= v11)
      v13 = v11;
    else
      v13 = v12;
    *(_QWORD *)(a2 + 16) = v13;
    v8 = realloc(v8, v13);
    *(_QWORD *)a2 = v8;
    if (!v8)
      abort();
    v9 = *(_QWORD *)(a2 + 8);
  }
  *((_BYTE *)v8 + v9) = 41;
  ++*(_QWORD *)(a2 + 8);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
}

uint64_t llvm::itanium_demangle::ElaboratedTypeSpefType::printLeft(_QWORD *a1, char **a2)
{
  size_t v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = a1[3];
  v5 = (size_t)a2[1];
  if (v4)
  {
    v6 = (const void *)a1[2];
    v7 = v5 + v4;
    v8 = (size_t)a2[2];
    v9 = *a2;
    if (v5 + v4 > v8)
    {
      if (2 * v8 <= v7 + 992)
        v10 = v7 + 992;
      else
        v10 = 2 * v8;
      a2[2] = (char *)v10;
      v9 = (char *)realloc(v9, v10);
      *a2 = v9;
      if (!v9)
        goto LABEL_17;
      v5 = (size_t)a2[1];
    }
    memcpy(&v9[v5], v6, v4);
    v5 = (size_t)&a2[1][v4];
    a2[1] = (char *)v5;
  }
  v11 = v5 + 1;
  v12 = (unint64_t)a2[2];
  v13 = *a2;
  if (v5 + 1 <= v12)
    goto LABEL_15;
  v14 = v5 + 993;
  if (2 * v12 <= v14)
    v15 = v14;
  else
    v15 = 2 * v12;
  a2[2] = (char *)v15;
  v13 = (char *)realloc(v13, v15);
  *a2 = v13;
  if (!v13)
LABEL_17:
    abort();
  v5 = (size_t)a2[1];
  v11 = v5 + 1;
LABEL_15:
  a2[1] = (char *)v11;
  v13[v5] = 32;
  v16 = a1[4];
  result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, a2);
  if ((*(_WORD *)(v16 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 40))(v16, a2);
  return result;
}

uint64_t llvm::itanium_demangle::PointerType::hasRHSComponentSlow(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  else
    return v2 < 0x40;
}

char *llvm::itanium_demangle::PointerType::printLeft(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  char *v21;
  char *v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  char *result;
  size_t v31;
  unint64_t v32;
  size_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  size_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  size_t v42;
  const void *v43;
  size_t v44;
  size_t v45;
  char *v46;
  size_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  size_t v51;

  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v4 + 8) == 11)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (*(_BYTE *)(v5 + 8) == 8 && *(_QWORD *)(v5 + 24) == 11)
    {
      v6 = *(uint64_t **)(v5 + 16);
      v7 = *v6;
      v8 = *(uint64_t *)((char *)v6 + 3);
      if (v7 == 0x6A626F5F636A626FLL && v8 == 0x7463656A626F5F63)
      {
        v28 = (uint64_t *)(a2 + 1);
        v35 = (uint64_t)a2[1];
        v36 = (unint64_t)a2[2];
        v37 = *a2;
        if (v35 + 3 > v36)
        {
          v38 = v35 + 995;
          v39 = 2 * v36;
          if (v39 <= v38)
            v40 = v38;
          else
            v40 = v39;
          a2[2] = (char *)v40;
          v37 = (char *)realloc(v37, v40);
          *a2 = v37;
          if (!v37)
            goto LABEL_61;
          v35 = *v28;
        }
        v41 = &v37[v35];
        v41[2] = 60;
        *(_WORD *)v41 = 25705;
        v27 = *v28 + 3;
        *v28 = v27;
        v42 = *(_QWORD *)(v4 + 32);
        if (v42)
        {
          v43 = *(const void **)(v4 + 24);
          v44 = v27 + v42;
          v45 = (size_t)a2[2];
          v46 = *a2;
          if (v27 + v42 > v45)
          {
            if (2 * v45 <= v44 + 992)
              v47 = v44 + 992;
            else
              v47 = 2 * v45;
            a2[2] = (char *)v47;
            v46 = (char *)realloc(v46, v47);
            *a2 = v46;
            if (!v46)
              goto LABEL_61;
            v27 = *v28;
          }
          memcpy(&v46[v27], v43, v42);
          v27 = *v28 + v42;
          *v28 = v27;
        }
        v48 = (unint64_t)a2[2];
        result = *a2;
        if (v27 + 1 > v48)
        {
          v49 = v27 + 993;
          v50 = 2 * v48;
          if (v50 <= v49)
            v51 = v49;
          else
            v51 = v50;
          a2[2] = (char *)v51;
          result = (char *)realloc(result, v51);
          *a2 = result;
          if (!result)
            goto LABEL_61;
          v27 = *v28;
        }
        v34 = 62;
        goto LABEL_39;
      }
    }
  }
  (*(void (**)(_QWORD, char **))(*(_QWORD *)v4 + 32))(*(_QWORD *)(a1 + 16), a2);
  v10 = *(_BYTE **)(a1 + 16);
  if ((v10[10] & 3) == 0
    || (v10[10] & 3) == 2 && (*(unsigned int (**)(_BYTE *, char **))(*(_QWORD *)v10 + 8))(v10, a2))
  {
    v11 = *a2;
    v12 = a2[1];
    v13 = (unint64_t)a2[2];
    if ((unint64_t)(v12 + 1) > v13)
    {
      v14 = (size_t)(v12 + 993);
      v15 = 2 * v13;
      if (v15 <= v14)
        v16 = v14;
      else
        v16 = v15;
      a2[2] = (char *)v16;
      v11 = (char *)realloc(v11, v16);
      *a2 = v11;
      if (!v11)
        goto LABEL_61;
      v12 = a2[1];
    }
    v12[(_QWORD)v11] = 32;
    ++a2[1];
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(unsigned __int16 *)(v17 + 9);
  v19 = (v18 >> 8) & 3;
  if (v19)
  {
    if (v19 != 2)
    {
LABEL_22:
      v20 = (v18 >> 10) & 3;
      if (v20 && (v20 != 2 || !(*(unsigned int (**)(uint64_t, char **))(*(_QWORD *)v17 + 16))(v17, a2)))
        goto LABEL_32;
      goto LABEL_25;
    }
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v17 + 8))(v17, a2) & 1) == 0)
    {
      v17 = *(_QWORD *)(a1 + 16);
      v18 = *(unsigned __int16 *)(v17 + 9);
      goto LABEL_22;
    }
  }
LABEL_25:
  v21 = *a2;
  v22 = a2[1];
  v23 = (unint64_t)a2[2];
  if ((unint64_t)(v22 + 1) > v23)
  {
    v24 = (size_t)(v22 + 993);
    v25 = 2 * v23;
    if (v25 <= v24)
      v26 = v24;
    else
      v26 = v25;
    a2[2] = (char *)v26;
    v21 = (char *)realloc(v21, v26);
    *a2 = v21;
    if (!v21)
      goto LABEL_61;
    v22 = a2[1];
  }
  v22[(_QWORD)v21] = 40;
  ++a2[1];
LABEL_32:
  v28 = (uint64_t *)(a2 + 1);
  v27 = (uint64_t)a2[1];
  v29 = (unint64_t)a2[2];
  result = *a2;
  if (v27 + 1 > v29)
  {
    v31 = v27 + 993;
    v32 = 2 * v29;
    if (v32 <= v31)
      v33 = v31;
    else
      v33 = v32;
    a2[2] = (char *)v33;
    result = (char *)realloc(result, v33);
    *a2 = result;
    if (result)
    {
      v27 = *v28;
      goto LABEL_38;
    }
LABEL_61:
    abort();
  }
LABEL_38:
  v34 = 42;
LABEL_39:
  result[v27] = v34;
  ++*v28;
  return result;
}

uint64_t llvm::itanium_demangle::PointerType::printRight(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  size_t v18;

  result = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(result + 8) != 11
    || (v5 = *(_QWORD *)(result + 16), *(_BYTE *)(v5 + 8) != 8)
    || *(_QWORD *)(v5 + 24) != 11
    || ((v6 = *(uint64_t **)(v5 + 16), v7 = *v6, v8 = *(uint64_t *)((char *)v6 + 3), v7 == 0x6A626F5F636A626FLL)
      ? (v9 = v8 == 0x7463656A626F5F63)
      : (v9 = 0),
        !v9))
  {
    v10 = *(unsigned __int16 *)(result + 9);
    v11 = (v10 >> 8) & 3;
    if (v11)
    {
      if (v11 == 2)
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, a2) & 1) != 0)
          goto LABEL_15;
        result = *(_QWORD *)(a1 + 16);
        v10 = *(unsigned __int16 *)(result + 9);
      }
      v12 = (v10 >> 10) & 3;
      if (v12
        && (v12 != 2 || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2)))
      {
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
      }
    }
LABEL_15:
    v13 = *(void **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    if (v14 + 1 > v15)
    {
      v16 = v14 + 993;
      v17 = 2 * v15;
      if (v17 <= v16)
        v18 = v16;
      else
        v18 = v17;
      *(_QWORD *)(a2 + 16) = v18;
      v13 = realloc(v13, v18);
      *(_QWORD *)a2 = v13;
      if (!v13)
        abort();
      v14 = *(_QWORD *)(a2 + 8);
    }
    *((_BYTE *)v13 + v14) = 41;
    ++*(_QWORD *)(a2 + 8);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  }
  return result;
}

uint64_t llvm::itanium_demangle::ReferenceType::hasRHSComponentSlow(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  else
    return v2 < 0x40;
}

uint64_t llvm::itanium_demangle::ReferenceType::printLeft(uint64_t result, char **a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  size_t v21;
  const char *v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  size_t v29;

  if (!*(_BYTE *)(result + 28))
  {
    v3 = result;
    *(_BYTE *)(result + 28) = 1;
    result = llvm::itanium_demangle::ReferenceType::collapse(result);
    if (!v4)
    {
LABEL_40:
      *(_BYTE *)(v3 + 28) = 0;
      return result;
    }
    v5 = result;
    v6 = v4;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 32))(v4, a2);
    if ((*(_BYTE *)(v6 + 10) & 3) == 0
      || (*(_BYTE *)(v6 + 10) & 3) == 2
      && (*(unsigned int (**)(uint64_t, char **))(*(_QWORD *)v6 + 8))(v6, a2))
    {
      v7 = *a2;
      v8 = a2[1];
      v9 = (unint64_t)a2[2];
      if ((unint64_t)(v8 + 1) > v9)
      {
        v10 = (size_t)(v8 + 993);
        v11 = 2 * v9;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        a2[2] = (char *)v12;
        v7 = (char *)realloc(v7, v12);
        *a2 = v7;
        if (!v7)
          goto LABEL_41;
        v8 = a2[1];
      }
      v8[(_QWORD)v7] = 32;
      ++a2[1];
    }
    v13 = *(unsigned __int16 *)(v6 + 9);
    v14 = (v13 >> 8) & 3;
    if (!v14)
      goto LABEL_20;
    if (v14 == 2)
    {
      if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v6 + 8))(v6, a2) & 1) != 0)
        goto LABEL_20;
      v13 = *(unsigned __int16 *)(v6 + 9);
    }
    v15 = (v13 >> 10) & 3;
    if (v15 && (v15 != 2 || !(*(unsigned int (**)(uint64_t, char **))(*(_QWORD *)v6 + 16))(v6, a2)))
    {
LABEL_27:
      if (v5)
        v22 = "&&";
      else
        v22 = "&";
      if (v5)
        v23 = 2;
      else
        v23 = 1;
      v24 = *a2;
      v25 = a2[1];
      v26 = &v25[v23];
      v27 = (size_t)a2[2];
      if ((unint64_t)&v25[v23] <= v27)
        goto LABEL_39;
      v28 = 2 * v27;
      if (v28 <= (unint64_t)(v26 + 992))
        v29 = (size_t)(v26 + 992);
      else
        v29 = v28;
      a2[2] = (char *)v29;
      v24 = (char *)realloc(v24, v29);
      *a2 = v24;
      if (v24)
      {
        v25 = a2[1];
LABEL_39:
        result = (uint64_t)memcpy(&v25[(_QWORD)v24], v22, v23);
        a2[1] += v23;
        goto LABEL_40;
      }
LABEL_41:
      abort();
    }
LABEL_20:
    v16 = *a2;
    v17 = a2[1];
    v18 = (unint64_t)a2[2];
    if ((unint64_t)(v17 + 1) > v18)
    {
      v19 = (size_t)(v17 + 993);
      v20 = 2 * v18;
      if (v20 <= v19)
        v21 = v19;
      else
        v21 = v20;
      a2[2] = (char *)v21;
      v16 = (char *)realloc(v16, v21);
      *a2 = v16;
      if (!v16)
        goto LABEL_41;
      v17 = a2[1];
    }
    v17[(_QWORD)v16] = 40;
    ++a2[1];
    goto LABEL_27;
  }
  return result;
}

uint64_t llvm::itanium_demangle::ReferenceType::printRight(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  size_t v14;

  if (!*(_BYTE *)(result + 28))
  {
    v3 = result;
    *(_BYTE *)(result + 28) = 1;
    result = llvm::itanium_demangle::ReferenceType::collapse(result);
    if (!v4)
    {
LABEL_18:
      *(_BYTE *)(v3 + 28) = 0;
      return result;
    }
    v5 = v4;
    v6 = *(unsigned __int16 *)(v4 + 9);
    v7 = (v6 >> 8) & 3;
    if (!v7)
      goto LABEL_10;
    if (v7 == 2)
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 8))(v4, a2) & 1) != 0)
        goto LABEL_10;
      v6 = *(unsigned __int16 *)(v5 + 9);
    }
    v8 = (v6 >> 10) & 3;
    if (v8 && (v8 != 2 || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2)))
    {
LABEL_17:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2);
      goto LABEL_18;
    }
LABEL_10:
    v9 = *(void **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    if (v10 + 1 > v11)
    {
      v12 = v10 + 993;
      v13 = 2 * v11;
      if (v13 <= v12)
        v14 = v12;
      else
        v14 = v13;
      *(_QWORD *)(a2 + 16) = v14;
      v9 = realloc(v9, v14);
      *(_QWORD *)a2 = v9;
      if (!v9)
        abort();
      v10 = *(_QWORD *)(a2 + 8);
    }
    *((_BYTE *)v9 + v10) = 41;
    ++*(_QWORD *)(a2 + 8);
    goto LABEL_17;
  }
  return result;
}

uint64_t llvm::itanium_demangle::ReferenceType::collapse(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *__ptr;
  char *v11;
  char *v12;
  _OWORD v13[4];
  uint64_t v14;

  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 16);
  __ptr = (char *)v13;
  v11 = (char *)v13;
  v12 = (char *)&v14;
  memset(v13, 0, sizeof(v13));
  for (i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
        *(_BYTE *)(i + 8) == 13;
        i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    v4 = *(_QWORD *)(i + 16);
    if (*(_DWORD *)(i + 24) < (signed int)v1)
      v1 = *(_DWORD *)(i + 24);
    v5 = v11;
    if (v11 == v12)
    {
      v6 = v11 - __ptr;
      if (__ptr == (char *)v13)
      {
        v8 = (char *)malloc(2 * (v11 - __ptr));
        if (!v8)
LABEL_20:
          abort();
        v7 = v8;
        if (v11 != (char *)v13)
          memcpy(v8, v13, v6);
        __ptr = v7;
      }
      else
      {
        v7 = (char *)realloc(__ptr, 2 * (v11 - __ptr));
        __ptr = v7;
        if (!v7)
          goto LABEL_20;
      }
      v5 = &v7[8 * (v6 >> 3)];
      v12 = &v7[8 * (v6 >> 2)];
    }
    v11 = v5 + 8;
    *(_QWORD *)v5 = v4;
    if ((unint64_t)(v5 + 8 - __ptr) >= 9
      && v4 == *(_QWORD *)&__ptr[(((v11 - __ptr) >> 1) - 4) & 0xFFFFFFFFFFFFFFF8])
    {
      break;
    }
  }
  if (__ptr != (char *)v13)
    free(__ptr);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawAccessMode(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = *(_QWORD *)(a1 + 16) + 40;
  v2[1] = 8;
  llvm::StringRef::find_last_not_of(v2, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v2[0];
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawLastModified(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = *(_QWORD *)(a1 + 16) + 16;
  v2[1] = 12;
  llvm::StringRef::find_last_not_of(v2, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v2[0];
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawUID(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = *(_QWORD *)(a1 + 16) + 28;
  v2[1] = 6;
  llvm::StringRef::find_last_not_of(v2, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v2[0];
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawGID(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = *(_QWORD *)(a1 + 16) + 34;
  v2[1] = 6;
  llvm::StringRef::find_last_not_of(v2, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v2[0];
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getOffset(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return v1 - llvm::object::Binary::getData(*(llvm::object::Binary **)(a1 + 8));
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getSizeOf()
{
  return 60;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawAccessMode(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = *(_QWORD *)(a1 + 16) + 96;
  v2[1] = 12;
  llvm::StringRef::find_last_not_of(v2, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v2[0];
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawLastModified(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = *(_QWORD *)(a1 + 16) + 60;
  v2[1] = 12;
  llvm::StringRef::find_last_not_of(v2, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v2[0];
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawUID(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = *(_QWORD *)(a1 + 16) + 72;
  v2[1] = 12;
  llvm::StringRef::find_last_not_of(v2, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v2[0];
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawGID(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = *(_QWORD *)(a1 + 16) + 84;
  v2[1] = 12;
  llvm::StringRef::find_last_not_of(v2, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v2[0];
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getOffset(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return v1 - llvm::object::Binary::getData(*(llvm::object::Binary **)(a1 + 8));
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getSizeOf()
{
  return 114;
}

uint64_t llvm::object::ArchiveMemberHeader::ArchiveMemberHeader(uint64_t a1, llvm::object::Binary *a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  void *v9;
  std::string *v11;
  int v12;
  size_t size;
  unint64_t v14;
  void **p_dst;
  size_t v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  std::string *p_p;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  void **v27;
  __int128 v28;
  __int16 v29;
  void **__dst;
  size_t v31;
  unint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  uint64_t v35;
  std::string __p;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  void **v45;
  void *v46[2];
  uint64_t v47;
  _QWORD *v48;
  std::string v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = &off_1E0E255F8;
  if (!a3)
    return a1;
  if (a4 <= 0x3B)
  {
    createMemberHeaderParseError(&v37, (llvm::object::Binary **)a1, a3, a4);
    v9 = v37;
    *a5 = v37;
    if (!v9)
      goto LABEL_58;
    return a1;
  }
  if (*(_BYTE *)(a3 + 58) != 96)
  {
    if (!a5)
      return a1;
LABEL_11:
    v46[0] = 0;
    v46[1] = 0;
    v47 = 0;
    v38 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 1;
    v40 = 0;
    v41 = 0;
    v39 = 0;
    v37 = &unk_1E0E22B10;
    v45 = v46;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v37, 0, 0, 0);
    llvm::raw_ostream::write_escaped((uint64_t)&v37, (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 58), 2, 0);
    if (v41 != v39)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v37);
    std::operator+<char>();
    __p = *v11;
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 64))(&v49, a1, a4);
    if ((v49.__r_.__value_.__s.__data_[16] & 1) == 0)
    {
      v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v14 = size + 4;
      if (size + 4 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v14 >= 0x17)
        {
          v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v19 = v14 | 7;
          v20 = v19 + 1;
          p_dst = (void **)operator new(v19 + 1);
          v31 = size + 4;
          v32 = v20 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          __dst = 0;
          p_dst = (void **)&__dst;
          HIBYTE(v32) = size + 4;
          if (!size)
            goto LABEL_39;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_dst, p_p, size);
LABEL_39:
        strcpy((char *)p_dst + size, "for ");
        v27 = (void **)&__dst;
        v28 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        v29 = 1284;
        malformedError(&v48, (llvm::Twine *)&v27);
        *a5 = v48;
        if ((SHIBYTE(v32) & 0x80000000) == 0)
          goto LABEL_50;
LABEL_49:
        operator delete(__dst);
LABEL_50:
        if ((v49.__r_.__value_.__s.__data_[16] & 1) != 0)
        {
          v25 = v49.__r_.__value_.__r.__words[0];
          v49.__r_.__value_.__r.__words[0] = 0;
          if (v25)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v25 + 8))(v25);
        }
        if (v12 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v37);
        if (SHIBYTE(v47) < 0)
          operator delete(v46[0]);
        goto LABEL_57;
      }
LABEL_60:
      abort();
    }
    v48 = (_QWORD *)v49.__r_.__value_.__r.__words[0];
    v49.__r_.__value_.__r.__words[0] = 0;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v48, (uint64_t *)&__dst);
    if (v48)
      (*(void (**)(_QWORD *))(*v48 + 8))(v48);
    v48 = (_QWORD *)(a3 - llvm::object::Binary::getData(a2));
    v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v16 = __p.__r_.__value_.__l.__size_;
    v17 = v16 + 10;
    if (v16 + 10 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_60;
    if (v17 >= 0x17)
    {
      v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v22 = v17 | 7;
      v23 = v22 + 1;
      v18 = (void **)operator new(v22 + 1);
      v31 = v16 + 10;
      v32 = v23 | 0x8000000000000000;
      __dst = v18;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      __dst = 0;
      v18 = (void **)&__dst;
      HIBYTE(v32) = v16 + 10;
      if (!v16)
        goto LABEL_48;
    }
    if (v12 >= 0)
      v24 = &__p;
    else
      v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v18, v24, v16);
LABEL_48:
    strcpy((char *)v18 + v16, "at offset ");
    v33[0] = &__dst;
    v33[2] = &v48;
    v34 = 3332;
    malformedError(&v35, (llvm::Twine *)v33);
    *a5 = v35;
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (a5 && *(_BYTE *)(a3 + 59) != 10)
    goto LABEL_11;
  if (!a5)
    return a1;
LABEL_57:
  if (!*a5)
LABEL_58:
    *a5 = 0;
  return a1;
}

void createMemberHeaderParseError(_QWORD *a1, llvm::object::Binary **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD *v16;
  _QWORD v17[2];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  (*((void (**)(_QWORD *__return_ptr, llvm::object::Binary **, uint64_t))*a2 + 8))(v17, a2, a4);
  if ((v18 & 1) == 0)
  {
    v13 = 773;
    v10 = "remaining size of archive too small for next archive member header ";
    v11 = 67;
    v12 = "for ";
    v14[0] = &v10;
    v14[2] = v17[0];
    v14[3] = v17[1];
    v15 = 1282;
    malformedError(a1, (llvm::Twine *)v14);
    if ((v18 & 1) == 0)
      return;
    goto LABEL_7;
  }
  v16 = (_QWORD *)v17[0];
  v17[0] = 0;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v16, (uint64_t *)&v10);
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  v16 = (_QWORD *)(a3 - llvm::object::Binary::getData(a2[1]));
  v13 = 773;
  v10 = "remaining size of archive too small for next archive member header ";
  v11 = 67;
  v12 = "at offset ";
  v8[0] = &v10;
  v8[2] = &v16;
  v9 = 3330;
  malformedError(a1, (llvm::Twine *)v8);
  if ((v18 & 1) != 0)
  {
LABEL_7:
    v7 = v17[0];
    v17[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void malformedError(_QWORD *a1, llvm::Twine *a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  void *v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;
  std::string v11;
  __int16 v12;

  llvm::Twine::str(a2, &v8);
  v3 = std::string::insert(&v8, 0, "truncated or malformed archive (");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v11, ")");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v8.__r_.__value_.__l.__data_);
LABEL_3:
  v7 = operator new(0x30uLL);
  v12 = 260;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v7, &v11, 3);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::object::BigArchiveMemberHeader::BigArchiveMemberHeader(uint64_t a1, llvm::object::Binary *this, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t v9;
  uint64_t Data;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  *(_QWORD *)(a1 + 8) = this;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = &off_1E0E256C8;
  if (a3)
  {
    v9 = a3 + 114;
    Data = llvm::object::Binary::getData(this);
    if (v9 >= Data + v11)
    {
      if (a5)
      {
        v14 = "malformed AIX big archive: remaining buffer is unable to contain next archive member";
        v15 = 259;
        malformedError(&v16, (llvm::Twine *)&v14);
        v12 = v16;
        *a5 = v16;
        if (!v12)
LABEL_13:
          *a5 = 0;
      }
    }
    else
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) > a4)
      {
        createMemberHeaderParseError(&v16, (llvm::object::Binary **)a1, a3, a4);
        if (a5)
        {
          *a5 = v16;
        }
        else if (v16)
        {
          (*(void (**)(void))(*(_QWORD *)v16 + 8))();
        }
      }
      if (a5 && !*a5)
        goto LABEL_13;
    }
  }
  return a1;
}

void llvm::object::ArchiveMemberHeader::getRawName(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  llvm::object::Binary *v4;
  int v5;
  _BYTE *v7;
  int v8;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  uint64_t v15;
  _BYTE *v16;

  v4 = (llvm::object::Binary *)*((_QWORD *)this + 1);
  v5 = *((_BYTE *)v4 + 114) & 7;
  if (v5 == 4 || v5 == 2)
  {
    v7 = (_BYTE *)*((_QWORD *)this + 2);
    if (*v7 == 32)
    {
      v16 = &v7[-llvm::object::Binary::getData(v4)];
      v13[0] = "name contains a leading space for archive member header at offset ";
      v13[2] = &v16;
      v14 = 3331;
      malformedError(&v15, (llvm::Twine *)v13);
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v15;
      return;
    }
    v10 = 32;
  }
  else
  {
    v7 = (_BYTE *)*((_QWORD *)this + 2);
    v8 = *v7;
    if (v8 == 35 || v8 == 47)
      v10 = 32;
    else
      v10 = 47;
  }
  v11 = memchr(v7, v10, 0x10uLL);
  v12 = v11 - v7;
  if (!v11)
    v12 = -1;
  *(_BYTE *)(a2 + 16) &= ~1u;
  if (v12 == -1)
    v12 = 16;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v12;
}

void getArchiveMemberDecField(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int v10;
  const char *v11;
  _BOOL4 v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  unint64_t v25[4];
  __int16 v26;
  _QWORD v27[4];
  char v28;
  char v29;
  unint64_t v30;
  uint64_t v31;

  v25[0] = 0;
  if (llvm::getAsUnsignedInteger(a2, a3, 0xAu, v25))
  {
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 80))(a4);
    v10 = *((unsigned __int8 *)a1 + 32);
    if (*((_BYTE *)a1 + 32))
    {
      v11 = "characters in ";
      if (v10 == 1)
      {
        v19[0] = "characters in ";
        v20 = 259;
        v12 = 1;
      }
      else
      {
        v16 = a1[1];
        if (*((_BYTE *)a1 + 33) == 1)
        {
          v17 = (uint64_t *)*a1;
        }
        else
        {
          v10 = 2;
          v17 = a1;
        }
        v19[0] = "characters in ";
        v19[2] = v17;
        v19[3] = v16;
        LOBYTE(v20) = 3;
        HIBYTE(v20) = v10;
        v12 = v10 == 1;
      }
      if (!v12)
        v11 = (const char *)v19;
      v21[0] = v11;
      v21[2] = " field in archive member header are not all decimal numbers: '";
      v14 = 2;
      if (v12)
        v18 = 3;
      else
        v18 = 2;
      LOBYTE(v22) = v18;
      HIBYTE(v22) = 3;
      v23[0] = v21;
      v23[2] = a2;
      v23[3] = a3;
      v24 = 1282;
      v25[0] = (unint64_t)v23;
      v25[2] = (unint64_t)"' for the archive member header at offset ";
      v26 = 770;
      v15 = 13;
      v27[0] = v25;
      v27[2] = &v31;
    }
    else
    {
      v14 = 0;
      v20 = 256;
      v22 = 256;
      v24 = 256;
      v26 = 256;
      v15 = 1;
    }
    v28 = v14;
    v29 = v15;
    malformedError(&v30, (llvm::Twine *)v27);
    *(_BYTE *)(a5 + 8) |= 1u;
    v13 = v30;
  }
  else
  {
    v13 = v25[0];
    *(_BYTE *)(a5 + 8) &= ~1u;
  }
  *(_QWORD *)a5 = v13;
}

void llvm::object::BigArchiveMemberHeader::getRawName(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t last_not_of;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _QWORD v12[4];
  __int16 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = "NameLen";
  v17 = 259;
  v18 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 108);
  v19 = 4;
  last_not_of = llvm::StringRef::find_last_not_of(&v18, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if (last_not_of + 1 < v19)
    v5 = last_not_of + 1;
  else
    v5 = v19;
  v6 = v19 + v5 - 4;
  if (v19 >= v6)
    v7 = v6;
  else
    v7 = v19;
  getArchiveMemberDecField((uint64_t *)&v16, v18, v7, (uint64_t)this, (uint64_t)&v18);
  if ((v19 & 1) != 0)
  {
    v11 = v18;
    *(_BYTE *)(a2 + 16) |= 1u;
  }
  else
  {
    v8 = v18;
    v9 = (unint64_t)(v18 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v10 = *((_QWORD *)this + 2) + 112;
    if (v9 != -2 && *(_WORD *)(v10 + v9) == 2656)
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v8;
      return;
    }
    v15 = v10 + v9 - llvm::object::Binary::getData(*((llvm::object::Binary **)this + 1));
    v12[2] = &v15;
    v13 = 3331;
    malformedError(&v14, (llvm::Twine *)v12);
    *(_BYTE *)(a2 + 16) |= 1u;
    v11 = v14;
  }
  *(_QWORD *)a2 = v11;
}

void llvm::object::ArchiveMemberHeader::getName(llvm::object::ArchiveMemberHeader *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string::size_type v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t last_not_of;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  std::string::size_type v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[40];
  uint64_t v58;
  _QWORD v59[4];
  __int16 v60;
  uint64_t v61;
  _BYTE v62[40];
  uint64_t v63;
  std::string v64;
  __int16 v65;
  __int128 __p;
  std::string::size_type v67;
  __int16 v68;
  std::string v69;
  __int16 v70;
  _BYTE v71[40];
  uint64_t v72;
  __int128 v73;
  std::string::size_type v74;
  __int16 v75;
  void *p_p;
  unint64_t v77;
  uint64_t v78;
  __int16 v79;
  _BYTE v80[40];
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  int v90;
  void **p_p_p;
  void *v92;
  __int128 v93;
  _QWORD v94[4];
  __int16 v95;
  uint64_t v96;
  __int128 v97;
  char v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0xF)
  {
    v5 = *((_QWORD *)this + 2);
    v83 = (unsigned __int8 *)(v5 - llvm::object::Binary::getData(*((llvm::object::Binary **)this + 1)));
    v94[0] = "archive header truncated before the name field for archive member header at offset ";
    v94[2] = &v83;
    v95 = 3331;
    malformedError(&v96, (llvm::Twine *)v94);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v96;
    return;
  }
  (*(void (**)(__int128 *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 24))(&v97, this);
  if ((v98 & 1) == 0)
  {
    v93 = v97;
    v7 = v97;
    if (*(_BYTE *)v97 == 47)
    {
      switch(*((_QWORD *)&v97 + 1))
      {
        case 1:
          goto LABEL_7;
        case 2:
          if (*(_BYTE *)(v97 + 1) == 47)
            goto LABEL_7;
          goto LABEL_27;
        case 0xDLL:
          v14 = *(_QWORD *)(v97 + 5);
          v15 = *(_QWORD *)v97 == 0x424D595343453C2FLL;
          v16 = 0x534C4F424D59;
          goto LABEL_23;
        case 0xELL:
          v14 = *(_QWORD *)(v97 + 6);
          v15 = *(_QWORD *)v97 == 0x5341484746583C2FLL;
          v16 = 0x50414D485341;
LABEL_23:
          v17 = v16 & 0xFFFFFFFFFFFFLL | 0x2F3E000000000000;
          if (!v15 || v14 != v17)
            goto LABEL_27;
LABEL_7:
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_OWORD *)a3 = v97;
          goto LABEL_84;
        default:
LABEL_27:
          if (*((_QWORD *)&v97 + 1))
            v19 = (unsigned __int8 *)(v97 + 1);
          else
            v19 = (unsigned __int8 *)v93;
          v20 = *((_QWORD *)&v97 + 1) - (*((_QWORD *)&v97 + 1) != 0);
          v83 = v19;
          v84 = v20;
          v21 = (unsigned __int8 *)llvm::StringRef::rtrim((llvm::StringRef *)&v83, 0x20u);
          p_p = 0;
          if (llvm::getAsUnsignedInteger(v21, v22, 0xAu, (unint64_t *)&p_p))
          {
            memset(&v69, 0, sizeof(v69));
            llvm::raw_string_ostream::raw_string_ostream((uint64_t)&v83, (uint64_t)&v69);
            p_p = v19;
            v77 = v20;
            v23 = (unsigned __int8 *)llvm::StringRef::rtrim((llvm::StringRef *)&p_p, 0x20u);
            llvm::raw_ostream::write_escaped((uint64_t)&v83, v23, v24, 0);
            if (v87 != v85)
              llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v83);
            v25 = *((_QWORD *)this + 2);
            v82 = v25 - llvm::object::Binary::getData(*((llvm::object::Binary **)this + 1));
            std::operator+<char>();
            v26 = std::string::append(&v64, "' for archive member header at offset ");
            v27 = v26->__r_.__value_.__r.__words[2];
            __p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v67 = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            v79 = 260;
            p_p = &__p;
            v75 = 269;
            *(_QWORD *)&v73 = &v82;
            llvm::operator+((uint64_t *)&p_p, (uint64_t *)&v73, (uint64_t)v80);
            malformedError(&v81, (llvm::Twine *)v80);
            *(_BYTE *)(a3 + 16) |= 1u;
            *(_QWORD *)a3 = v81;
            if (SHIBYTE(v67) < 0)
            {
              operator delete((void *)__p);
              if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_35:
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v83);
                if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
LABEL_63:
                operator delete(v69.__r_.__value_.__l.__data_);
                goto LABEL_84;
              }
            }
            else if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_35;
            }
            operator delete(v64.__r_.__value_.__l.__data_);
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v83);
            if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_84;
            goto LABEL_63;
          }
          v28 = (char *)p_p;
          v92 = p_p;
          v29 = *((_QWORD *)this + 1);
          v30 = *(_QWORD *)(v29 + 88);
          if (v30 <= (unint64_t)p_p)
          {
            v46 = *((_QWORD *)this + 2);
            v82 = v46 - llvm::object::Binary::getData((llvm::object::Binary *)v29);
            *(_QWORD *)&v73 = "long name offset ";
            v75 = 259;
            v70 = 267;
            v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
            llvm::operator+((uint64_t *)&v73, (uint64_t *)&v69, (uint64_t)&p_p);
            *(_QWORD *)&__p = " past the end of the string table for archive member header at offset ";
            v68 = 259;
            llvm::operator+((uint64_t *)&p_p, (uint64_t *)&__p, (uint64_t)&v83);
            v65 = 269;
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
            llvm::operator+((uint64_t *)&v83, (uint64_t *)&v64, (uint64_t)v71);
            malformedError(&v72, (llvm::Twine *)v71);
            *(_BYTE *)(a3 + 16) |= 1u;
            *(_QWORD *)a3 = v72;
            goto LABEL_84;
          }
          v31 = *(_QWORD *)(v29 + 80);
          if ((*(_BYTE *)(v29 + 114) & 6) != 0)
          {
            v32 = (char *)p_p + v31;
            *(_BYTE *)(a3 + 16) &= ~1u;
            *(_QWORD *)a3 = &v28[v31];
            if (v31)
              *(_QWORD *)(a3 + 8) = strlen(v32);
            else
              *(_QWORD *)(a3 + 8) = 0;
            goto LABEL_84;
          }
          v49 = memchr((char *)p_p + v31, 10, v30 - (_QWORD)p_p);
          v50 = (uint64_t)v49 - v31;
          if (!v49)
            v50 = -1;
          if ((unint64_t)(v50 + 1) < 2 || (v51 = (char *)(v50 - 1), v51[v31] != 47))
          {
            p_p = "string table at long name offset ";
            v79 = 259;
            v75 = 267;
            *(_QWORD *)&v73 = &v92;
            llvm::operator+((uint64_t *)&p_p, (uint64_t *)&v73, (uint64_t)&v83);
            v69.__r_.__value_.__r.__words[0] = (std::string::size_type)"not terminated";
            v70 = 259;
            llvm::operator+((uint64_t *)&v83, (uint64_t *)&v69, (uint64_t)v62);
            malformedError(&v63, (llvm::Twine *)v62);
            *(_BYTE *)(a3 + 16) |= 1u;
            *(_QWORD *)a3 = v63;
            goto LABEL_84;
          }
          if (v30 >= (unint64_t)v28)
            v52 = v28;
          else
            v52 = (char *)v30;
          if (v52 > v51)
            v51 = v28;
          if ((unint64_t)v51 >= v30)
            v51 = (char *)v30;
          v12 = &v52[v31];
          *(_BYTE *)(a3 + 16) &= ~1u;
          v13 = v51 - v52;
          break;
      }
      goto LABEL_20;
    }
    if (*((_QWORD *)&v97 + 1) < 3uLL || (*(_WORD *)v97 == 12579 ? (v9 = *(_BYTE *)(v97 + 2) == 47) : (v9 = 0), !v9))
    {
      v10 = *((_QWORD *)&v97 + 1) - 1;
      if (*(_BYTE *)(v97 + *((_QWORD *)&v97 + 1) - 1) != 47)
      {
        llvm::StringRef::find_last_not_of((llvm::StringRef *)&v93, 0x20u, 0xFFFFFFFFFFFFFFFFLL);
        v11 = *((_QWORD *)&v93 + 1);
        v12 = (char *)v93;
        v13 = *((_QWORD *)&v93 + 1) - *((_QWORD *)&v7 + 1) + v7;
        *(_BYTE *)(a3 + 16) &= ~1u;
        if (v11 < v13)
          v13 = v11;
LABEL_20:
        *(_QWORD *)a3 = v12;
        *(_QWORD *)(a3 + 8) = v13;
        goto LABEL_84;
      }
      if (*((_QWORD *)&v97 + 1) < v10)
        v10 = *((_QWORD *)&v93 + 1);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v10;
LABEL_84:
      if ((v98 & 1) == 0)
        return;
      goto LABEL_85;
    }
    v33 = v97 + 3;
    v34 = *((_QWORD *)&v97 + 1) - 3;
    v83 = (unsigned __int8 *)(v97 + 3);
    v84 = *((_QWORD *)&v97 + 1) - 3;
    last_not_of = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v83, 0x20u, 0xFFFFFFFFFFFFFFFFLL);
    if (last_not_of + 1 < v84)
      v36 = last_not_of + 1;
    else
      v36 = v84;
    v37 = v84 - v34 + v36;
    if (v84 >= v37)
      v38 = v37;
    else
      v38 = v84;
    p_p = 0;
    if (!llvm::getAsUnsignedInteger(v83, v38, 0xAu, (unint64_t *)&p_p))
    {
      v47 = p_p;
      v92 = p_p;
      if ((unint64_t)v47
         + (*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 104))(this) <= a2)
      {
        v53 = *((_QWORD *)this + 2);
        v83 = (unsigned __int8 *)(v53
                                + (*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this
                                                                                                 + 104))(this));
        v84 = (unint64_t)v47;
        v54 = llvm::StringRef::rtrim((llvm::StringRef *)&v83, 0);
        *(_BYTE *)(a3 + 16) &= ~1u;
        *(_QWORD *)a3 = v54;
        *(_QWORD *)(a3 + 8) = v55;
      }
      else
      {
        v48 = *((_QWORD *)this + 2);
        v82 = v48 - llvm::object::Binary::getData(*((llvm::object::Binary **)this + 1));
        *(_QWORD *)&v73 = "long name length: ";
        v75 = 259;
        v70 = 269;
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
        llvm::operator+((uint64_t *)&v73, (uint64_t *)&v69, (uint64_t)&p_p);
        *(_QWORD *)&__p = " extends past the end of the member or archive for archive member header at offset ";
        v68 = 259;
        llvm::operator+((uint64_t *)&p_p, (uint64_t *)&__p, (uint64_t)&v83);
        v65 = 269;
        v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
        llvm::operator+((uint64_t *)&v83, (uint64_t *)&v64, (uint64_t)v57);
        malformedError(&v58, (llvm::Twine *)v57);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v58;
      }
      goto LABEL_84;
    }
    p_p = 0;
    v77 = 0;
    v78 = 0;
    LODWORD(v84) = 0;
    v88 = 0;
    v89 = 0;
    v90 = 1;
    v86 = 0;
    v87 = 0;
    v85 = 0;
    v83 = (unsigned __int8 *)&unk_1E0E22B10;
    p_p_p = &p_p;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v83, 0, 0, 0);
    *(_QWORD *)&v73 = v33;
    *((_QWORD *)&v73 + 1) = v34;
    v39 = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v73, 0x20u, 0xFFFFFFFFFFFFFFFFLL);
    if (v39 + 1 < *((_QWORD *)&v73 + 1))
      v40 = v39 + 1;
    else
      v40 = *((_QWORD *)&v73 + 1);
    v41 = *((_QWORD *)&v73 + 1) - v34 + v40;
    if (*((_QWORD *)&v73 + 1) >= v41)
      v42 = v41;
    else
      v42 = *((_QWORD *)&v73 + 1);
    llvm::raw_ostream::write_escaped((uint64_t)&v83, (unsigned __int8 *)v73, v42, 0);
    if (v87 != v85)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v83);
    v43 = *((_QWORD *)this + 2);
    *(_QWORD *)&__p = v43 - llvm::object::Binary::getData(*((llvm::object::Binary **)this + 1));
    std::operator+<char>();
    v44 = std::string::append(&v69, "' for archive member header at offset ");
    v45 = v44->__r_.__value_.__r.__words[2];
    v73 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v74 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v59[0] = &v73;
    v59[2] = &__p;
    v60 = 3332;
    malformedError(&v61, (llvm::Twine *)v59);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v61;
    if (SHIBYTE(v74) < 0)
    {
      operator delete((void *)v73);
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_58:
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v83);
        if ((SHIBYTE(v78) & 0x80000000) == 0)
          goto LABEL_84;
LABEL_82:
        operator delete(p_p);
        goto LABEL_84;
      }
    }
    else if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_58;
    }
    operator delete(v69.__r_.__value_.__l.__data_);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v83);
    if ((SHIBYTE(v78) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_82;
  }
  v8 = v97;
  *(_QWORD *)&v97 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v8;
LABEL_85:
  v56 = v97;
  *(_QWORD *)&v97 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
}

uint64_t llvm::StringRef::rtrim(llvm::StringRef *this, unsigned __int8 a2)
{
  llvm::StringRef::find_last_not_of(this, a2, 0xFFFFFFFFFFFFFFFFLL);
  return *(_QWORD *)this;
}

uint64_t llvm::object::BigArchiveMemberHeader::getName(llvm::object::BigArchiveMemberHeader *this)
{
  return (*(uint64_t (**)(llvm::object::BigArchiveMemberHeader *))(*(_QWORD *)this + 24))(this);
}

void llvm::object::ArchiveMemberHeader::getSize(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t last_not_of;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;
  unsigned __int8 *v10;
  unint64_t v11;

  v8 = "size";
  v9 = 259;
  v10 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 48);
  v11 = 10;
  last_not_of = llvm::StringRef::find_last_not_of(&v10, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if (last_not_of + 1 < v11)
    v5 = last_not_of + 1;
  else
    v5 = v11;
  v6 = v11 + v5 - 10;
  if (v11 >= v6)
    v7 = v6;
  else
    v7 = v11;
  getArchiveMemberDecField((uint64_t *)&v8, v10, v7, (uint64_t)this, a2);
}

void llvm::object::BigArchiveMemberHeader::getSize(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t last_not_of;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  const char *v14;
  __int16 v15;
  unsigned __int8 *v16;
  unint64_t v17;
  __int16 v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v14 = "size";
  v15 = 259;
  v16 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v17 = 20;
  last_not_of = llvm::StringRef::find_last_not_of(&v16, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if (last_not_of + 1 < v17)
    v5 = last_not_of + 1;
  else
    v5 = v17;
  v6 = v17 + v5 - 20;
  if (v17 >= v6)
    v7 = v6;
  else
    v7 = v17;
  getArchiveMemberDecField((uint64_t *)&v14, v16, v7, (uint64_t)this, (uint64_t)&v23);
  if ((v24 & 1) != 0)
  {
    v12 = v23;
LABEL_18:
    v13 = *(_BYTE *)(a2 + 8) | 1;
    goto LABEL_19;
  }
  v16 = "NameLen";
  v18 = 259;
  v19 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 108);
  v20 = 4;
  v8 = llvm::StringRef::find_last_not_of(&v19, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if (v8 + 1 < v20)
    v9 = v8 + 1;
  else
    v9 = v20;
  v10 = v20 + v9 - 4;
  if (v20 >= v10)
    v11 = v10;
  else
    v11 = v20;
  getArchiveMemberDecField((uint64_t *)&v16, v19, v11, (uint64_t)this, (uint64_t)&v21);
  if ((v22 & 1) != 0)
  {
    v12 = v21;
    goto LABEL_18;
  }
  v12 = ((v21 + 1) & 0xFFFFFFFFFFFFFFFELL) + v23;
  v13 = *(_BYTE *)(a2 + 8) & 0xFE;
LABEL_19:
  *(_BYTE *)(a2 + 8) = v13;
  *(_QWORD *)a2 = v12;
}

uint64_t llvm::object::ArchiveMemberHeader::isThin@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  _BYTE *v6;
  BOOL v7;
  const char *v8;
  _BYTE *v9;
  size_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)(*(_QWORD *(**)(_BYTE **__return_ptr))(*(_QWORD *)this + 24))(&v9);
  if ((v11 & 1) != 0)
  {
    v6 = v9;
    v9 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v6;
    return result;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 114) & 8) != 0)
  {
    result = (uint64_t)v9;
    switch(v10)
    {
      case 7uLL:
        v8 = "/SYM64/";
        break;
      case 2uLL:
        v8 = "//";
        break;
      case 1uLL:
        v7 = *v9 == 47;
LABEL_12:
        v5 = !v7;
        goto LABEL_16;
      default:
        v5 = 1;
        goto LABEL_16;
    }
    result = memcmp(v9, v8, v10);
    v7 = (_DWORD)result == 0;
    goto LABEL_12;
  }
  v5 = 0;
LABEL_16:
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_BYTE *)a2 = v5;
  return result;
}

void llvm::object::ArchiveMemberHeader::getNextChildLoc(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 MemoryBufferRef;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11[2];
  unint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 104))(this);
  (*(void (**)(unint64_t *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 96))(&v12, this);
  if ((v13 & 1) != 0)
  {
    v9 = v12;
    v12 = 0;
    goto LABEL_9;
  }
  if ((_BYTE)v12)
    goto LABEL_5;
  (*(void (**)(__n128 *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 72))(v11, this);
  if ((v11[0].n128_u8[8] & 1) != 0)
  {
    v9 = v11[0].n128_u64[0];
LABEL_9:
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
    if ((v13 & 1) == 0)
      return;
    goto LABEL_12;
  }
  v4 += v11[0].n128_u64[0];
LABEL_5:
  v6 = (__n128 *)*((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2) + ((v4 + 1) & 0xFFFFFFFFFFFFFFFELL);
  MemoryBufferRef = llvm::object::Binary::getMemoryBufferRef(v6, v11);
  v8 = v11[0].n128_u64[0] + v11[0].n128_u64[1];
  *(_BYTE *)(a2 + 8) &= ~1u;
  if (v7 == v8)
  {
    *(_QWORD *)a2 = 0;
    if ((v13 & 1) == 0)
      return;
  }
  else
  {
    *(_QWORD *)a2 = v7;
    if ((v13 & 1) == 0)
      return;
  }
LABEL_12:
  v10 = v12;
  v12 = 0;
  if (v10)
    (*(void (**)(unint64_t, __n128))(*(_QWORD *)v10 + 8))(v10, MemoryBufferRef);
}

void llvm::object::BigArchiveMemberHeader::getNextChildLoc(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t last_not_of;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Data;
  unsigned __int8 *v9;
  char v10;
  const char *v11;
  __int16 v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(llvm::object::BigArchiveMemberHeader *))(*(_QWORD *)this + 80))(this) == *(_QWORD *)(*((_QWORD *)this + 1) + 160))
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v11 = "NextOffset";
    v12 = 259;
    v13 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 20);
    v14 = 20;
    last_not_of = llvm::StringRef::find_last_not_of(&v13, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
    if (last_not_of + 1 < v14)
      v5 = last_not_of + 1;
    else
      v5 = v14;
    v6 = v14 + v5 - 20;
    if (v14 >= v6)
      v7 = v6;
    else
      v7 = v14;
    getArchiveMemberDecField((uint64_t *)&v11, v13, v7, (uint64_t)this, (uint64_t)&v13);
    if ((v14 & 1) != 0)
    {
      v9 = v13;
      v10 = *(_BYTE *)(a2 + 8) | 1;
    }
    else
    {
      Data = llvm::object::Binary::getData(*((llvm::object::Binary **)this + 1));
      v9 = &v13[Data];
      v10 = *(_BYTE *)(a2 + 8) & 0xFE;
    }
    *(_BYTE *)(a2 + 8) = v10;
    *(_QWORD *)a2 = v9;
  }
}

void llvm::object::Archive::Child::Child(uint64_t a1, llvm::object::Binary *a2, uint64_t a3, unint64_t a4, __int16 a5)
{
  int v9;
  llvm::object::Binary **v10;
  llvm::object::Binary **v11;
  uint64_t Data;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = a5;
  v9 = *((_BYTE *)a2 + 114) & 7;
  v10 = (llvm::object::Binary **)operator new(0x18uLL);
  v11 = v10;
  v10[1] = a2;
  if (v9 == 6)
  {
    v10[2] = (llvm::object::Binary *)a3;
    *v10 = (llvm::object::Binary *)&off_1E0E256C8;
    if (a3)
    {
      Data = llvm::object::Binary::getData(a2);
      if (a3 + 114 < (unint64_t)(Data + v13)
        && (*((uint64_t (**)(llvm::object::Binary **))*v11 + 13))(v11) > a4)
      {
        createMemberHeaderParseError(&v15, v11, a3, a4);
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
    }
  }
  else
  {
    v10[2] = (llvm::object::Binary *)a3;
    *v10 = (llvm::object::Binary *)&off_1E0E255F8;
    if (a3 && a4 <= 0x3B)
    {
      createMemberHeaderParseError(&v15, v10, a3, a4);
      __break(1u);
      return;
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
}

uint64_t llvm::object::Archive::Child::Child(uint64_t a1, llvm::object::Binary *this, uint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34[4];
  __int16 v35;
  _BYTE v36[40];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (!a3)
  {
    *(_WORD *)(a1 + 32) = -1;
    return a1;
  }
  if (this)
  {
    llvm::object::Binary::getData(this);
    v10 = llvm::object::Binary::getData(this) - a3 + v9;
    v11 = *((_BYTE *)this + 114) & 7;
    v12 = operator new(0x18uLL);
    v13 = v12;
    if (v11 == 6)
    {
      llvm::object::BigArchiveMemberHeader::BigArchiveMemberHeader((uint64_t)v12, this, a3, v10, a4);
      if (!a4)
        goto LABEL_13;
    }
    else
    {
      llvm::object::ArchiveMemberHeader::ArchiveMemberHeader((uint64_t)v12, this, a3, v10, a4);
      if (!a4)
        goto LABEL_13;
    }
    goto LABEL_11;
  }
  v14 = MEMORY[0x72] & 7;
  v15 = operator new(0x18uLL);
  v13 = v15;
  if (v14 != 6)
  {
    v15[1] = 0;
    v15[2] = a3;
    *v15 = &off_1E0E255F8;
    createMemberHeaderParseError(&v39, (llvm::object::Binary **)v15, a3, 0);
    v21 = v39;
    *a4 = v39;
    if (v21)
      goto LABEL_13;
LABEL_12:
    *a4 = 0;
    goto LABEL_13;
  }
  llvm::object::BigArchiveMemberHeader::BigArchiveMemberHeader((uint64_t)v15, 0, a3, 0, a4);
  if (a4)
  {
LABEL_11:
    if (*a4)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_13:
  v16 = *v5;
  *v5 = (uint64_t)v13;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*a4)
  {
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = v17;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 96))(&v44);
    if ((v45 & 1) != 0)
    {
      v22 = v44;
      v44 = 0;
    }
    else
    {
      if ((_BYTE)v44)
        goto LABEL_20;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v5 + 72))(&v39);
      if ((v40 & 1) == 0)
      {
        v18 = v39 + v17;
        *(_QWORD *)(a1 + 16) = a3;
        *(_QWORD *)(a1 + 24) = v18;
LABEL_20:
        *(_WORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 24))(&v41);
        v19 = v41;
        if ((v43 & 1) != 0)
        {
          v41 = 0;
        }
        else
        {
          if ((*((_BYTE *)this + 114) & 7) == 6)
          {
            v20 = *(_WORD *)(a1 + 32) + ((v42 + 1) & 0xFFFE);
LABEL_23:
            *(_WORD *)(a1 + 32) = v20;
            goto LABEL_30;
          }
          if (v42 < 3 || (*(_WORD *)v41 == 12579 ? (v26 = *(_BYTE *)(v41 + 2) == 47) : (v26 = 0), !v26))
          {
LABEL_30:
            if ((v43 & 1) != 0)
            {
              v23 = v41;
              v41 = 0;
              if (v23)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            }
            goto LABEL_33;
          }
          v39 = v41 + 3;
          v40 = v42 - 3;
          v27 = (unsigned __int8 *)llvm::StringRef::rtrim((llvm::StringRef *)&v39, 0x20u);
          v29 = v28;
          v39 = 0;
          if (!llvm::getAsUnsignedInteger(v27, v28, 0xAu, (unint64_t *)&v39))
          {
            v20 = *(_WORD *)(a1 + 32) + v39;
            goto LABEL_23;
          }
          v38 = a3 - llvm::object::Binary::getData(this);
          v35 = 1283;
          v34[0] = (uint64_t)"long name length characters after the #1/ are not all decimal numbers: '";
          v34[2] = (uint64_t)v27;
          v34[3] = v29;
          v32 = "' for archive member header at offset ";
          v33 = 259;
          llvm::operator+(v34, (uint64_t *)&v32, (uint64_t)&v39);
          v31 = 269;
          v30 = &v38;
          llvm::operator+(&v39, (uint64_t *)&v30, (uint64_t)v36);
          malformedError(&v37, (llvm::Twine *)v36);
          v19 = v37;
        }
        *a4 = v19;
        goto LABEL_30;
      }
      v22 = v39;
    }
    *a4 = v22;
LABEL_33:
    if ((v45 & 1) != 0)
    {
      v24 = v44;
      v44 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
    if (!*a4)
      *a4 = 0;
  }
  return a1;
}

void llvm::object::Archive::Child::getFullName(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  size_t v8;
  const void *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _QWORD *v29;
  __int16 v30;
  __n128 v31;
  unsigned __int8 *v32;
  unint64_t v33;
  __int16 v34;
  _BYTE __dst[24];
  _WORD v36[64];
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 96))(&v37);
  if ((v38 & 1) != 0)
  {
    v12 = v37;
    v37 = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v12;
    goto LABEL_15;
  }
  (*(void (**)(__n128 *__return_ptr))(**((_QWORD **)this + 1) + 72))(&v31);
  if ((v31.n128_u8[8] & 1) != 0)
  {
    v9 = (const void *)v31.n128_u64[0];
LABEL_14:
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v9;
    goto LABEL_15;
  }
  v4 = v31.n128_u64[0];
  v5 = *((_QWORD *)this + 1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v5 + 64))(__dst, v5, v6 + v4);
  v7 = __dst[16];
  v8 = *(_QWORD *)&__dst[8];
  v9 = *(const void **)__dst;
  if ((v31.n128_u8[8] & 1) != 0)
  {
    v10 = v31.n128_u64[0];
    v31.n128_u64[0] = 0;
    if (v10)
      (*(void (**)(unint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if ((v7 & 1) != 0)
    goto LABEL_14;
  v36[4] = 261;
  *(_QWORD *)__dst = v9;
  *(_QWORD *)&__dst[8] = v8;
  if (llvm::sys::path::is_absolute((const char **)__dst, 0))
  {
    if (v8 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v8 >= 0x17)
      {
        v21 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v21 = v8 | 7;
        v22 = v21 + 1;
        v11 = operator new(v21 + 1);
        *(_QWORD *)&__dst[8] = v8;
        *(_QWORD *)&__dst[16] = v22 | 0x8000000000000000;
        *(_QWORD *)__dst = v11;
      }
      else
      {
        __dst[23] = v8;
        v11 = __dst;
        if (!v8)
          goto LABEL_32;
      }
      memmove(v11, v9, v8);
LABEL_32:
      v11[v8] = 0;
      *(_BYTE *)(a2 + 24) &= ~1u;
      *(_OWORD *)a2 = *(_OWORD *)__dst;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[16];
      goto LABEL_15;
    }
LABEL_39:
    abort();
  }
  llvm::object::Binary::getMemoryBufferRef(*(__n128 **)this, &v31);
  v15 = llvm::sys::path::parent_path(v32, v33, 0);
  v16 = v14;
  *(_QWORD *)__dst = v36;
  *(_OWORD *)&__dst[8] = xmmword_181236BB0;
  if (v14 < 0x81)
  {
    v17 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, v36, v14, 1);
    v17 = *(_QWORD *)&__dst[8];
  }
  if (v16)
  {
    memcpy((void *)(*(_QWORD *)__dst + v17), v15, v16);
    v17 = *(_QWORD *)&__dst[8];
  }
  *(_QWORD *)&__dst[8] = v17 + v16;
  v34 = 261;
  v31.n128_u64[0] = (unint64_t)v9;
  v31.n128_u64[1] = v8;
  v30 = 257;
  v28 = 257;
  v26 = 257;
  llvm::sys::path::append(__dst, &v31, &v29, &v27, &v25);
  v18 = *(_QWORD *)&__dst[8];
  if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
    goto LABEL_39;
  v19 = *(const void **)__dst;
  if (*(_QWORD *)&__dst[8] >= 0x17uLL)
  {
    v23 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
      v23 = *(_QWORD *)&__dst[8] | 7;
    v24 = v23 + 1;
    v20 = (__n128 *)operator new(v23 + 1);
    v31.n128_u64[1] = v18;
    v32 = (unsigned __int8 *)(v24 | 0x8000000000000000);
    v31.n128_u64[0] = (unint64_t)v20;
    goto LABEL_36;
  }
  HIBYTE(v32) = __dst[8];
  v20 = &v31;
  if (*(_QWORD *)&__dst[8])
LABEL_36:
    memmove(v20, v19, v18);
  v20->n128_u8[v18] = 0;
  *(_BYTE *)(a2 + 24) &= ~1u;
  *(__n128 *)a2 = v31;
  *(_QWORD *)(a2 + 16) = v32;
  if (*(_WORD **)__dst != v36)
    free(*(void **)__dst);
LABEL_15:
  if ((v38 & 1) != 0)
  {
    v13 = v37;
    v37 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

_QWORD *llvm::object::Archive::Child::getName@<X0>(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD **__return_ptr))(**((_QWORD **)this + 1) + 72))(&v12);
  if ((v13 & 1) != 0)
  {
    v8 = v12;
    v12 = 0;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v8;
  }
  else
  {
    v4 = v12;
    v5 = *((_QWORD *)this + 1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
    result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(&v10, v5, (uint64_t)v4 + v6);
    if ((v11 & 1) != 0)
    {
      v9 = v10;
      *(_QWORD *)&v10 = 0;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v9;
      if ((v13 & 1) == 0)
        return result;
    }
    else
    {
      *(_OWORD *)a2 = v10;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if ((v13 & 1) == 0)
        return result;
    }
  }
  result = v12;
  v12 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

void llvm::object::Archive::Child::getBuffer(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  std::error_code v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  llvm **v11;
  llvm *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm *v18;
  void **v19;
  uint64_t v20;
  void **v21;
  char v22;
  __int16 v23;
  llvm *v24;
  std::error_code v25;
  void *__p[2];
  char v27;
  char v28;
  void **v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void ***__return_ptr))(**((_QWORD **)this + 1) + 96))(&v29);
  if ((v30 & 1) != 0)
  {
    v5 = v29;
    v29 = 0;
    goto LABEL_7;
  }
  if (!(_BYTE)v29)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 114) & 8) == 0)
    {
      v6 = (void **)(*((_QWORD *)this + 3) - *((unsigned __int16 *)this + 16));
      v22 = 0;
      v21 = v6;
LABEL_14:
      v9 = *((_QWORD *)this + 2) + *((unsigned __int16 *)this + 16);
      v8 = v21;
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v8;
      if ((v22 & 1) == 0)
        goto LABEL_29;
      v21 = 0;
      if (!v8)
        goto LABEL_29;
LABEL_16:
      (*((void (**)(void **))*v8 + 1))(v8);
      goto LABEL_29;
    }
    (*(void (**)(void ***__return_ptr))(**((_QWORD **)this + 1) + 72))(&v21);
    if ((v22 & 1) == 0)
      goto LABEL_14;
    v5 = v21;
LABEL_7:
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v5;
    goto LABEL_29;
  }
  llvm::object::Archive::Child::getFullName(this, (uint64_t)__p);
  if ((v28 & 1) != 0)
  {
    v7 = __p[0];
    __p[0] = 0;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v7;
    goto LABEL_11;
  }
  v23 = 260;
  v21 = __p;
  llvm::MemoryBuffer::getFile((unsigned __int8 *)&v21, 0, 1, 0, 0, (uint64_t)&v24);
  if (((uint64_t)v25.__cat_ & 1) == 0)
  {
    std::system_category();
    goto LABEL_20;
  }
  if (!(_DWORD)v24)
  {
LABEL_20:
    v10 = *(_QWORD **)this;
    v11 = *(llvm ***)(*(_QWORD *)this + 128);
    if ((unint64_t)v11 >= *(_QWORD *)(*(_QWORD *)this + 136))
    {
      v13 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(v10 + 15, (uint64_t *)&v24);
      v14 = *(_QWORD **)this;
    }
    else
    {
      v12 = v24;
      v24 = 0;
      *v11 = v12;
      v13 = v11 + 1;
      v14 = v10;
    }
    v10[16] = v13;
    v15 = *(_QWORD *)(v14[16] - 8);
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 16) - v16;
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v17;
    if (((uint64_t)v25.__cat_ & 1) != 0)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_QWORD *)&v4.__val_ = *(_QWORD *)&v25.__val_;
  llvm::errorCodeToError(v24, v4, &v20);
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v20;
  v20 = 0;
  if (((uint64_t)v25.__cat_ & 1) != 0)
    goto LABEL_26;
LABEL_24:
  v18 = v24;
  v24 = 0;
  if (v18)
    (*(void (**)(llvm *))(*(_QWORD *)v18 + 8))(v18);
LABEL_26:
  if ((v28 & 1) != 0)
  {
LABEL_11:
    v8 = (void **)__p[0];
    __p[0] = 0;
    if (!v8)
      goto LABEL_29;
    goto LABEL_16;
  }
  if (v27 < 0)
    operator delete(__p[0]);
LABEL_29:
  if ((v30 & 1) != 0)
  {
    v19 = v29;
    v29 = 0;
    if (v19)
      (*((void (**)(void **))*v19 + 1))(v19);
  }
}

__n128 llvm::object::Archive::Child::getNext@<Q0>(llvm::object::Archive::Child *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v5;
  llvm::object::Binary *v6;
  _OWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  __n128 v22;
  _QWORD v23[4];
  __int16 v24;
  unint64_t v25;
  _QWORD v26[4];
  __int16 v27;
  unint64_t v28;
  void *v29;
  __int128 v30;
  _BYTE __p[32];
  unsigned __int16 v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  (*(void (**)(unint64_t *__return_ptr))(**((_QWORD **)this + 1) + 88))(&v33);
  v5 = v33;
  if ((v34 & 1) != 0)
  {
    v33 = 0;
    a2[2].n128_u8[8] |= 1u;
    a2->n128_u64[0] = v5;
    if ((v34 & 1) == 0)
      return result;
  }
  else if (v33)
  {
    v6 = *(llvm::object::Binary **)this;
    if (v33 > *(_QWORD *)(*(_QWORD *)this + 16) + *(_QWORD *)(*(_QWORD *)this + 24))
    {
      v7 = operator new(0x48uLL);
      v29 = v7;
      v30 = xmmword_1812629F0;
      strcpy((char *)v7, "offset to next archive member past the end of the archive after member ");
      (*(void (**)(_QWORD **__return_ptr))(**((_QWORD **)this + 1) + 72))(&v35);
      if ((v36 & 1) != 0)
      {
        v12 = v35;
      }
      else
      {
        v8 = (char *)v35;
        v9 = *((_QWORD *)this + 1);
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, char *))(*(_QWORD *)v9 + 64))(__p, v9, &v8[v10]);
        v11 = __p[16];
        v12 = *(_QWORD **)__p;
        v13 = *(_QWORD *)&__p[8];
        if ((v36 & 1) != 0)
        {
          v14 = v35;
          v35 = 0;
          if (v14)
            (*(void (**)(_QWORD *))(*v14 + 8))(v14);
        }
        if ((v11 & 1) == 0)
        {
          v23[0] = &v29;
          v23[2] = v12;
          v23[3] = v13;
          v24 = 1284;
          malformedError(&v25, (llvm::Twine *)v23);
          a2[2].n128_u8[8] |= 1u;
          a2->n128_u64[0] = v25;
          if ((SHIBYTE(v30) & 0x80000000) == 0)
            goto LABEL_26;
          goto LABEL_25;
        }
      }
      v35 = v12;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v35, (uint64_t *)__p);
      if (v35)
        (*(void (**)(_QWORD *))(*v35 + 8))(v35);
      v17 = *((_QWORD *)this + 2);
      v35 = (_QWORD *)(v17 - llvm::object::Binary::getData(*(llvm::object::Binary **)this));
      v18 = (char *)operator new(0x58uLL);
      *(_QWORD *)__p = v18;
      *(_OWORD *)&__p[8] = xmmword_181262A00;
      v19 = v7[3];
      *((_OWORD *)v18 + 2) = v7[2];
      *((_OWORD *)v18 + 3) = v19;
      *(_QWORD *)(v18 + 63) = *(_QWORD *)((char *)v7 + 63);
      v20 = v7[1];
      *(_OWORD *)v18 = *v7;
      *((_OWORD *)v18 + 1) = v20;
      strcpy(v18 + 71, "at offset ");
      v26[0] = __p;
      v26[2] = &v35;
      v27 = 3332;
      malformedError(&v28, (llvm::Twine *)v26);
      a2[2].n128_u8[8] |= 1u;
      a2->n128_u64[0] = v28;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
LABEL_25:
      operator delete(v29);
      goto LABEL_26;
    }
    v29 = 0;
    llvm::object::Archive::Child::Child((uint64_t)__p, v6, v33, (uint64_t *)&v29);
    v15 = v29;
    if (v29)
    {
      v29 = 0;
      a2[2].n128_u8[8] |= 1u;
      v16 = *(_QWORD *)&__p[8];
      a2->n128_u64[0] = (unint64_t)v15;
      *(_QWORD *)&__p[8] = 0;
      if (!v16 || ((*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16), !v29))
      {
LABEL_26:
        if ((v34 & 1) == 0)
          return result;
        goto LABEL_27;
      }
      (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
      if ((v34 & 1) == 0)
        return result;
    }
    else
    {
      a2[2].n128_u8[8] &= ~1u;
      a2[2].n128_u16[0] = v32;
      v22 = *(__n128 *)__p;
      result = *(__n128 *)&__p[16];
      *(_QWORD *)&__p[8] = 0;
      *a2 = v22;
      a2[1] = result;
      if ((v34 & 1) == 0)
        return result;
    }
  }
  else
  {
    a2[2].n128_u8[8] &= ~1u;
    result = 0uLL;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2].n128_u16[0] = -1;
    if ((v34 & 1) == 0)
      return result;
  }
LABEL_27:
  v21 = v33;
  v33 = 0;
  if (v21)
    (*(void (**)(unint64_t))(*(_QWORD *)v21 + 8))(v21);
  return result;
}

uint64_t llvm::object::Archive::create@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  __n128 *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v10 = 0;
  if (*((_QWORD *)a1 + 1) < 8uLL || **(_QWORD **)a1 != 0xA3E66616769623CLL)
  {
    v4 = operator new(0x90uLL);
    v5 = a1[1];
    v11 = *a1;
    v12 = v5;
    result = llvm::object::Archive::Archive((uint64_t)v4, &v11, &v10);
    v7 = v10;
    if (v10)
      goto LABEL_4;
LABEL_8:
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = result;
    return result;
  }
  v8 = (__n128 *)operator new(0xC8uLL);
  v9 = a1[1];
  v11 = *a1;
  v12 = v9;
  result = (uint64_t)llvm::object::BigArchive::BigArchive(v8, &v11, &v10);
  v7 = v10;
  if (!v10)
    goto LABEL_8;
LABEL_4:
  v10 = 0;
  *(_BYTE *)(a2 + 8) |= 1u;
  (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  result = v10;
  *(_QWORD *)a2 = v7;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::object::Archive::Archive(uint64_t a1, _OWORD *a2, uint64_t *a3)
{
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __n128 *v9;
  _OWORD *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  llvm::object *v16;
  unsigned int *v17;
  uint64_t v18;
  char v20;
  __int16 v21;
  __n128 v22;
  unint64_t v23;
  __n128 Next;
  unint64_t v26;
  BOOL v28;
  uint64_t *v29;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::object::Archive::Child *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  llvm::object::Archive::Child *v42;
  llvm::object::Archive::Child *v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v51;
  llvm::object::Archive::Child **v52;
  llvm::object::Archive::Child *v53;
  _OWORD v54[2];
  uint64_t v55[2];
  char v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  __n128 v62;
  __int128 v63;
  __int16 v64;
  unint64_t v65;
  __n128 v66;
  __int128 v67;
  __int16 v68;
  char v69;
  uint64_t v70;
  std::error_code v71;

  v70 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v54[0] = *a2;
  v54[1] = v5;
  llvm::object::Binary::Binary(a1, 0, (uint64_t)v54);
  *(_QWORD *)v6 = off_1E0E25770;
  *(_OWORD *)(v6 + 48) = 0u;
  v7 = (_OWORD *)(v6 + 48);
  *(_OWORD *)(v6 + 64) = 0u;
  v8 = (_OWORD *)(v6 + 64);
  *(_OWORD *)(v6 + 80) = 0u;
  v9 = (__n128 *)(v6 + 80);
  *(_OWORD *)(v6 + 96) = 0u;
  v10 = (_OWORD *)(v6 + 96);
  *(_WORD *)(v6 + 112) = -1;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  v11 = *(_QWORD *)(v6 + 24);
  if (v11 < 8)
    goto LABEL_2;
  v14 = *(_QWORD **)(a1 + 16);
  if (*v14 == 0xA3E6E6968743C21)
  {
    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 114) & 0xF0 | 8;
    if (v11 != 8)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*v14 == 0xA3E686372613C21)
  {
    *(_BYTE *)(a1 + 114) &= 0xF0u;
    if (v11 != 8)
    {
LABEL_11:
      llvm::object::Archive::Child::Child((uint64_t)&v66, (llvm::object::Binary *)a1, (uint64_t)(v14 + 1), a3);
      if (*a3)
      {
        v62 = 0u;
        v63 = 0u;
        v64 = -1;
        v65 = 0;
        v15 = v66.n128_u64[1];
        v66.n128_u64[1] = 0;
        if (!v15)
          goto LABEL_14;
      }
      else
      {
        v51 = v67;
        v21 = v68;
        v22 = v66;
        if (v66.n128_u64[1])
        {
          (**(void (***)(__n128 *__return_ptr))v66.n128_u64[1])(&v62);
          v23 = v62.n128_u64[0];
        }
        else
        {
          v23 = 0;
        }
        v62.n128_u64[0] = v22.n128_u64[0];
        v62.n128_u64[1] = v23;
        v63 = v51;
        v64 = v21;
        v65 = (unint64_t)a3;
        v15 = v66.n128_u64[1];
        v66.n128_u64[1] = 0;
        if (!v15)
        {
LABEL_14:
          if (!*a3)
          {
            if (v65 >= 8 && (_QWORD)v63)
            {
              v53 = (llvm::object::Archive::Child *)&v62;
              *(_QWORD *)&v51 = &v62;
              *((_QWORD *)&v51 + 1) = a3;
              v52 = &v53;
              v16 = (llvm::object *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v62.n128_u64[1] + 24))(&v59);
              v17 = (unsigned int *)v59;
              if ((v61 & 1) != 0)
              {
                v59 = 0;
                *a3 = (uint64_t)v17;
                goto LABEL_153;
              }
              v18 = v60;
              if (v60 == 12)
              {
                if (*(_QWORD *)v59 != 0x45444D59532E5F5FLL || *(_DWORD *)(v59 + 8) != 875978566)
                  goto LABEL_45;
                v20 = 4;
              }
              else
              {
                if (v60 != 9)
                {
                  if (v60 < 3)
                    goto LABEL_49;
                  goto LABEL_45;
                }
                if (*(_QWORD *)v59 != 0x45444D59532E5F5FLL || *(_BYTE *)(v59 + 8) != 70)
                {
LABEL_45:
                  if (*(_WORD *)v59 == 12579 && *(_BYTE *)(v59 + 2) == 47)
                  {
                    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 114) & 0xF8 | 2;
                    llvm::object::Archive::Child::getName(v53, (uint64_t)&v66);
                    v29 = (uint64_t *)v66.n128_u64[0];
                    if ((v67 & 1) == 0)
                    {
                      switch(v66.n128_u64[1])
                      {
                        case 9uLL:
                          if (*(_QWORD *)v66.n128_u64[0] == 0x45444D59532E5F5FLL
                            && *(_BYTE *)(v66.n128_u64[0] + 8) == 70)
                          {
                            goto LABEL_148;
                          }
                          goto LABEL_150;
                        case 0xCuLL:
                          if (*(_QWORD *)v66.n128_u64[0] != 0x45444D59532E5F5FLL
                            || *(_DWORD *)(v66.n128_u64[0] + 8) != 875978566)
                          {
                            goto LABEL_150;
                          }
                          goto LABEL_147;
                        case 0x10uLL:
                          if (*(_QWORD *)v66.n128_u64[0] != 0x45444D59532E5F5FLL
                            || *(_QWORD *)(v66.n128_u64[0] + 8) != 0x444554524F532046)
                          {
                            goto LABEL_150;
                          }
                          goto LABEL_148;
                        case 0x13uLL:
                          if (*(_QWORD *)v66.n128_u64[0] != 0x45444D59532E5F5FLL
                            || *(_QWORD *)(v66.n128_u64[0] + 8) != 0x524F532034365F46
                            || *(_QWORD *)(v66.n128_u64[0] + 11) != 0x444554524F532034)
                          {
                            goto LABEL_150;
                          }
LABEL_147:
                          *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 114) & 0xF8 | 4;
LABEL_148:
                          llvm::object::Archive::Child::getBuffer(v53, (uint64_t)&v57);
                          if ((v58 & 1) != 0)
                            goto LABEL_151;
                          *v7 = v57;
                          if (!llvm::object::Archive::Archive(llvm::MemoryBufferRef,llvm::Error &)::$_0::operator()((uint64_t)&v51))
                          {
LABEL_150:
                            v47 = v53;
                            *v10 = *((_OWORD *)v53 + 1);
                            *(_WORD *)(a1 + 112) = *((_WORD *)v47 + 16);
                          }
                          break;
                        default:
                          goto LABEL_150;
                      }
                      goto LABEL_153;
                    }
                    goto LABEL_152;
                  }
LABEL_49:
                  if (v60 == 7)
                  {
                    if (*(_DWORD *)v59 != 1297699631 || *(_DWORD *)(v59 + 3) != 791950925)
                    {
                      v28 = 0;
                      v18 = 7;
                      goto LABEL_69;
                    }
                  }
                  else
                  {
                    if (v60 != 1)
                    {
                      v28 = 0;
                      if (v60 != 2)
                        goto LABEL_69;
                      goto LABEL_67;
                    }
                    if (*(_BYTE *)v59 != 47)
                    {
                      v28 = 0;
LABEL_99:
                      *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 114) & 0xF8 | v28;
                      goto LABEL_100;
                    }
                  }
                  llvm::object::Archive::Child::getBuffer(v53, (uint64_t)&v66);
                  if ((v67 & 1) != 0)
                    goto LABEL_116;
                  *v7 = v66;
                  if (v18 == 7)
                  {
                    v39 = 793991501;
                    v40 = bswap32(*v17);
                    if (v40 == 793991501
                      && (v39 = 1295397935, v40 = bswap32(*(unsigned int *)((char *)v17 + 3)), v40 == 1295397935))
                    {
                      v41 = 0;
                    }
                    else if (v40 < v39)
                    {
                      v41 = -1;
                    }
                    else
                    {
                      v41 = 1;
                    }
                    v28 = v41 == 0;
                  }
                  else
                  {
                    v28 = 0;
                  }
                  if (llvm::object::Archive::Archive(llvm::MemoryBufferRef,llvm::Error &)::$_0::operator()((uint64_t)&v51))
                    goto LABEL_153;
                  if (v65 < 8 || !(_QWORD)v63)
                  {
                    *a3 = 0;
                    goto LABEL_153;
                  }
                  v16 = (llvm::object *)(*(_QWORD *(**)(__int128 *__return_ptr))(**((_QWORD **)v53 + 1) + 24))(&v57);
                  v17 = (unsigned int *)v57;
                  if ((v58 & 1) != 0)
                  {
                    *a3 = v57;
                    goto LABEL_153;
                  }
                  v18 = *((_QWORD *)&v57 + 1);
                  if (*((_QWORD *)&v57 + 1) != 2)
                    goto LABEL_69;
LABEL_67:
                  if (*(_WORD *)v17 == 12079)
                  {
                    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 114) & 0xF8 | v28;
                    llvm::object::Archive::Child::getBuffer(v53, (uint64_t)&v66);
                    if ((v67 & 1) == 0)
                    {
                      *v9 = v66;
                      if (llvm::object::Archive::Archive(llvm::MemoryBufferRef,llvm::Error &)::$_0::operator()((uint64_t)&v51))
                        goto LABEL_153;
LABEL_115:
                      v29 = 0;
                      v42 = v53;
                      *v10 = *((_OWORD *)v53 + 1);
                      *(_WORD *)(a1 + 112) = *((_WORD *)v42 + 16);
                      goto LABEL_152;
                    }
                    goto LABEL_116;
                  }
                  v18 = 2;
LABEL_69:
                  if (*(_BYTE *)v17 != 47)
                    goto LABEL_99;
                  if (v18 == 1)
                  {
                    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 114) & 0xF8 | 5;
                    llvm::object::Archive::Child::getBuffer(v53, (uint64_t)&v66);
                    if ((v67 & 1) == 0)
                    {
                      *v7 = v66;
                      if (llvm::object::Archive::Archive(llvm::MemoryBufferRef,llvm::Error &)::$_0::operator()((uint64_t)&v51))
                        goto LABEL_153;
                      if (v65 < 8 || !(_QWORD)v63)
                        goto LABEL_100;
                      (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v53 + 1) + 24))(&v57);
                      llvm::Expected<llvm::StringRef>::operator=(&v59, (uint64_t *)&v57);
                      if ((v58 & 1) != 0)
                      {
                        v32 = v57;
                        *(_QWORD *)&v57 = 0;
                        if (v32)
                          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
                      }
                      v29 = (uint64_t *)v59;
                      if ((v61 & 1) != 0)
                        goto LABEL_163;
                      v33 = v60;
                      if (v60 != 2)
                      {
LABEL_90:
                        if (v33 != 13)
                          goto LABEL_100;
                        v35 = *v29;
                        v36 = *(uint64_t *)((char *)v29 + 5);
                        if (v35 != 0x424D595343453C2FLL || v36 != 0x2F3E534C4F424D59)
                          goto LABEL_100;
                        llvm::object::Archive::Child::getBuffer(v53, (uint64_t)&v57);
                        if ((v58 & 1) == 0)
                        {
                          *v8 = v57;
                          if (!llvm::object::Archive::Archive(llvm::MemoryBufferRef,llvm::Error &)::$_0::operator()((uint64_t)&v51))
                            goto LABEL_100;
LABEL_153:
                          if ((v61 & 1) != 0)
                          {
                            v48 = v59;
                            v59 = 0;
                            if (v48)
                              (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
                          }
                          goto LABEL_156;
                        }
                        goto LABEL_151;
                      }
                      if (*(_WORD *)v59 != 12079)
                      {
LABEL_100:
                        v38 = v53;
                        *v10 = *((_OWORD *)v53 + 1);
                        *(_WORD *)(a1 + 112) = *((_WORD *)v38 + 16);
                        *a3 = 0;
                        goto LABEL_153;
                      }
                      llvm::object::Archive::Child::getBuffer(v53, (uint64_t)&v57);
                      if ((v58 & 1) == 0)
                      {
                        *v9 = (__n128)v57;
                        if (llvm::object::Archive::Archive(llvm::MemoryBufferRef,llvm::Error &)::$_0::operator()((uint64_t)&v51))
                          goto LABEL_153;
                        if (v65 >= 8 && (_QWORD)v63)
                        {
                          (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)v53 + 1) + 24))(v55);
                          llvm::Expected<llvm::StringRef>::operator=(&v59, v55);
                          if ((v56 & 1) != 0)
                          {
                            v34 = v55[0];
                            v55[0] = 0;
                            if (v34)
                              (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                          }
                          v29 = (uint64_t *)v59;
                          if ((v61 & 1) == 0)
                          {
                            v33 = v60;
                            goto LABEL_90;
                          }
LABEL_163:
                          v59 = 0;
                          goto LABEL_152;
                        }
                        goto LABEL_115;
                      }
LABEL_151:
                      v29 = (uint64_t *)v57;
                      goto LABEL_152;
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v71.__val_ = llvm::object::object_category(v16);
                    llvm::errorCodeToError((llvm *)3, v71, &v66);
                  }
LABEL_116:
                  v29 = (uint64_t *)v66.n128_u64[0];
                  goto LABEL_152;
                }
                v20 = 2;
              }
              *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 114) & 0xF8 | v20;
              llvm::object::Archive::Child::getBuffer(v53, (uint64_t)&v57);
              if ((v58 & 1) != 0)
                goto LABEL_151;
              *v7 = v57;
              Next = llvm::object::Archive::Child::getNext((llvm::object::Archive::Child *)&v62, &v66);
              if ((v69 & 1) != 0)
              {
                if (v66.n128_u64[0])
                {
                  *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8) = v66.n128_u64[0];
                  v65 = v65 & 3 | 4;
LABEL_110:
                  v29 = (uint64_t *)*a3;
                  if (*a3)
                    goto LABEL_153;
                  v53 = (llvm::object::Archive::Child *)&v62;
                  *v10 = v63;
                  *(_WORD *)(a1 + 112) = v64;
LABEL_152:
                  *a3 = (uint64_t)v29;
                  goto LABEL_153;
                }
              }
              else
              {
                v26 = v62.n128_u64[1];
                v62 = v66;
                if (v26)
                  (*(void (**)(unint64_t, __n128))(*(_QWORD *)v26 + 16))(v26, Next);
                v63 = v67;
                v64 = v68;
              }
              *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8) = 0;
              goto LABEL_110;
            }
            *a3 = 0;
          }
LABEL_156:
          v49 = v62.n128_u64[1];
          v62.n128_u64[1] = 0;
          if (v49)
            (*(void (**)(unint64_t))(*(_QWORD *)v49 + 16))(v49);
          goto LABEL_158;
        }
      }
      (*(void (**)(unint64_t))(*(_QWORD *)v15 + 16))(v15);
      goto LABEL_14;
    }
LABEL_9:
    v62 = 0uLL;
    v63 = 0uLL;
    v64 = -1;
    v65 = 0;
    goto LABEL_14;
  }
  if (*v14 != 0xA3E66616769623CLL)
  {
LABEL_2:
    v12 = operator new(0x30uLL);
    v66.n128_u64[0] = (unint64_t)"file too small to be an archive";
    v68 = 259;
    v13 = llvm::object::GenericBinaryError::GenericBinaryError(v12, &v66, 2);
    goto LABEL_3;
  }
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 114) & 0xF0 | 6;
LABEL_158:
  if (*a3)
    return a1;
  v13 = 0;
LABEL_3:
  *a3 = v13;
  return a1;
}

uint64_t llvm::object::Archive::child_begin@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void (***v19)(uint64_t *__return_ptr);
  __int128 v20;
  __int16 v21;
  __int128 v22;
  uint64_t v23;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((_DWORD)result)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_WORD *)(a4 + 32) = -1;
    *(_QWORD *)(a4 + 40) = 0;
    return result;
  }
  if (a3)
  {
    llvm::object::Archive::Child::Child((uint64_t)&v18, (llvm::object::Binary *)a1, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_WORD *)(a1 + 112));
    v22 = v20;
    v9 = v21;
    v10 = v18;
    result = (uint64_t)v19;
    if (v19)
    {
      (**v19)(&v23);
      v11 = v23;
      result = (uint64_t)v19;
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)a4 = v10;
    *(_QWORD *)(a4 + 8) = v11;
    *(_OWORD *)(a4 + 16) = v22;
    *(_WORD *)(a4 + 32) = v9;
    *(_QWORD *)(a4 + 40) = a2;
    v19 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  llvm::object::Archive::Child::Child((uint64_t)&v18, (llvm::object::Binary *)a1, v12 + v13, a2);
  if (*a2)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_WORD *)(a4 + 32) = -1;
    *(_QWORD *)(a4 + 40) = 0;
  }
  else
  {
    v17 = v20;
    v14 = v21;
    v15 = v18;
    if (v19)
    {
      (**v19)(&v23);
      v16 = v23;
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v16;
    *(_OWORD *)(a4 + 16) = v17;
    *(_WORD *)(a4 + 32) = v14;
    *(_QWORD *)(a4 + 40) = a2;
  }
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

double llvm::object::Archive::child_end@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

BOOL llvm::object::Archive::Archive(llvm::MemoryBufferRef,llvm::Error &)::$_0::operator()(uint64_t a1)
{
  __n128 *v2;
  __n128 Next;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v8[2];
  unsigned __int16 v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(__n128 **)a1;
  Next = llvm::object::Archive::Child::getNext((llvm::object::Archive::Child *)*(_QWORD *)a1, v8);
  if ((v10 & 1) != 0)
  {
    if (v8[0].n128_u64[0])
    {
      *(_QWORD *)(v2[2].n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v8[0].n128_u64[0];
      v2[2].n128_u64[1] = v2[2].n128_u64[1] & 3 | 4;
      v6 = **(_QWORD **)(a1 + 8);
      if (!v6)
        goto LABEL_9;
      return v6 != 0;
    }
  }
  else
  {
    v4 = v8[0].n128_u64[1];
    v5 = v2->n128_u64[1];
    v2->n128_u64[0] = v8[0].n128_u64[0];
    v2->n128_u64[1] = v4;
    if (v5)
      (*(void (**)(unint64_t, __n128))(*(_QWORD *)v5 + 16))(v5, Next);
    v2[1] = v8[1];
    v2[2].n128_u16[0] = v9;
  }
  *(_QWORD *)(v2[2].n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = 0;
  v6 = **(_QWORD **)(a1 + 8);
  if (!v6)
LABEL_9:
    **(_QWORD **)(a1 + 16) = *(_QWORD *)a1;
  return v6 != 0;
}

uint64_t *llvm::Expected<llvm::StringRef>::operator=(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  if (a1 == a2)
    return a1;
  v4 = *((_BYTE *)a1 + 16);
  if ((v4 & 1) != 0)
  {
    v5 = *a1;
    *a1 = 0;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *((_BYTE *)a1 + 16);
    }
  }
  v6 = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 16) = v4 & 0xFE | v6 & 1;
  if ((v6 & 1) == 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v8 = *a2;
  *a2 = 0;
  *a1 = v8;
  return a1;
}

BOOL llvm::object::Archive::isEmpty(llvm::object::Archive *this)
{
  return *((_QWORD *)this + 3) == 8;
}

__n128 *llvm::object::BigArchive::BigArchive(__n128 *a1, _OWORD *a2, uint64_t *a3)
{
  __int128 v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  llvm::Twine *v11;
  uint64_t last_not_of;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  void **v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int16 v59;
  void (***v60)(char *__return_ptr);
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  void (***v64)(char *__return_ptr);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73[8];
  char v74[8];
  _QWORD v75[4];
  __int16 v76;
  _QWORD v77[4];
  __int16 v78;
  _QWORD v79[4];
  __int16 v80;
  _QWORD v81[4];
  __int16 v82;
  _QWORD v83[4];
  __int16 v84;
  unint64_t v85;
  _OWORD v86[2];
  char v87[8];
  char *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v86[0] = *a2;
  v86[1] = v5;
  v6 = llvm::object::Archive::Archive((uint64_t)a1, v86, a3);
  *(_QWORD *)v6 = &unk_1E0E24040;
  *(_OWORD *)(v6 + 152) = 0u;
  v7 = (char **)(v6 + 152);
  *(_OWORD *)(v6 + 168) = 0u;
  v8 = v6 + 168;
  *(_OWORD *)(v6 + 178) = 0u;
  v9 = *(_QWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 144) = v9;
  v85 = v10;
  if (v10 <= 0x7F)
  {
    v88 = "malformed AIX big archive: incomplete fixed length header, the archive is only";
    v90 = &v85;
    LOWORD(v92) = 3331;
    v83[0] = &v88;
    v83[2] = " byte(s)";
    v84 = 770;
    v11 = (llvm::Twine *)v83;
LABEL_37:
    malformedError(&v63, v11);
    v33 = v63;
    *a3 = v63;
    goto LABEL_38;
  }
  v88 = (char *)(v9 + 68);
  v89 = 20;
  last_not_of = llvm::StringRef::find_last_not_of(&v88, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v13 = (unsigned __int8 *)v88;
  if (last_not_of + 1 < v89)
    v14 = last_not_of + 1;
  else
    v14 = v89;
  v15 = v89 + v14 - 20;
  if (v89 >= v15)
    v16 = v15;
  else
    v16 = v89;
  v88 = 0;
  if ((llvm::getAsUnsignedInteger(v13, v16, 0xAu, (unint64_t *)&v88) & 1) != 0)
  {
    LOWORD(v92) = 1283;
    v88 = "malformed AIX big archive: first member offset \"";
    v90 = v13;
    v91 = v16;
    v81[0] = &v88;
    v81[2] = "\" is not a number";
    v82 = 770;
    malformedError(&v63, (llvm::Twine *)v81);
    *a3 = v63;
  }
  else
  {
    *v7 = v88;
  }
  v88 = (char *)(a1[9].n128_u64[0] + 88);
  v89 = 20;
  v17 = llvm::StringRef::find_last_not_of(&v88, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v18 = (unsigned __int8 *)v88;
  if (v17 + 1 < v89)
    v19 = v17 + 1;
  else
    v19 = v89;
  v20 = v89 + v19 - 20;
  if (v89 >= v20)
    v21 = v20;
  else
    v21 = v89;
  v88 = 0;
  if ((llvm::getAsUnsignedInteger(v18, v21, 0xAu, (unint64_t *)&v88) & 1) != 0)
  {
    LOWORD(v92) = 1283;
    v88 = "malformed AIX big archive: last member offset \"";
    v90 = v18;
    v91 = v21;
    v79[0] = &v88;
    v79[2] = "\" is not a number";
    v80 = 770;
    malformedError(&v63, (llvm::Twine *)v79);
    *a3 = v63;
  }
  else
  {
    a1[10].n128_u64[0] = (unint64_t)v88;
  }
  v88 = (char *)(a1[9].n128_u64[0] + 28);
  v89 = 20;
  v22 = llvm::StringRef::find_last_not_of(&v88, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v23 = (unsigned __int8 *)v88;
  if (v22 + 1 < v89)
    v24 = v22 + 1;
  else
    v24 = v89;
  v25 = v89 + v24 - 20;
  if (v89 >= v25)
    v26 = v25;
  else
    v26 = v89;
  v88 = 0;
  if (llvm::getAsUnsignedInteger(v23, v26, 0xAu, (unint64_t *)&v88))
  {
    LOWORD(v92) = 1283;
    v88 = "global symbol table offset of 32-bit members \"";
    v90 = v23;
    v91 = v26;
    v77[0] = &v88;
    v77[2] = "\" is not a number";
    v78 = 770;
    v11 = (llvm::Twine *)v77;
    goto LABEL_37;
  }
  v27 = (unint64_t *)v88;
  v88 = (char *)(a1[9].n128_u64[0] + 48);
  v89 = 20;
  v28 = llvm::StringRef::find_last_not_of(&v88, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v29 = (unsigned __int8 *)v88;
  if (v28 + 1 < v89)
    v30 = v28 + 1;
  else
    v30 = v89;
  v31 = v89 + v30 - 20;
  if (v89 >= v31)
    v32 = v31;
  else
    v32 = v89;
  v88 = 0;
  if (llvm::getAsUnsignedInteger(v29, v32, 0xAu, (unint64_t *)&v88))
  {
    LOWORD(v92) = 1283;
    v88 = "global symbol table offset of 64-bit members\"";
    v90 = v29;
    v91 = v32;
    v75[0] = &v88;
    v75[2] = "\" is not a number";
    v76 = 770;
    v11 = (llvm::Twine *)v75;
    goto LABEL_37;
  }
  v35 = (unint64_t *)v88;
  *(_QWORD *)v73 = 0;
  *(_QWORD *)v74 = 0;
  v71 = 0;
  v72 = 0;
  llvm::object::Binary::getMemoryBufferRef(a1, &v70);
  if (v27)
  {
    getGlobalSymtabLocAndSize((const llvm::MemoryBufferRef *)&v88, v70.n128_i64[0], (const char **)v70.n128_u64[1], v27, v74, &v72, "32-bit");
    v33 = (uint64_t)v88;
    *a3 = (uint64_t)v88;
    if (v33)
      goto LABEL_38;
    a1[12].n128_u8[0] = 1;
  }
  if (v35)
  {
    getGlobalSymtabLocAndSize((const llvm::MemoryBufferRef *)&v88, v70.n128_i64[0], (const char **)v70.n128_u64[1], v35, v73, &v71, "64-bit");
    v33 = (uint64_t)v88;
    *a3 = (uint64_t)v88;
    if (v33)
      goto LABEL_38;
    a1[12].n128_u8[1] = 1;
  }
  v88 = (char *)&v90;
  v89 = 0x100000000;
  if (v27)
  {
    v36 = bswap64(*(_QWORD *)(*(_QWORD *)v74 + 114));
    v37 = (8 * v36 + 8);
    v90 = (_QWORD *)v36;
    v91 = *(_QWORD *)v74 + 114;
    v92 = v72;
    v93 = *(_QWORD *)v74 + 122;
    v94 = 8 * v36;
    v95 = *(_QWORD *)v74 + 114 + v37;
    v96 = v72 - v37;
    v38 = 1;
    LODWORD(v89) = 1;
  }
  else
  {
    v38 = 0;
  }
  if (v35)
  {
    v39 = bswap64(*(_QWORD *)(*(_QWORD *)v73 + 114));
    v40 = (8 * v39 + 8);
    v63 = v39;
    v64 = (void (***)(char *__return_ptr))(*(_QWORD *)v73 + 114);
    v65 = v71;
    v66 = *(_QWORD *)v73 + 122;
    v67 = 8 * v39;
    v68 = *(_QWORD *)v73 + 114 + v40;
    v69 = v71 - v40;
    v41 = (void **)&v63;
    if (v27)
    {
      v61 = v38 + 1;
      v62 = &(&v90)[7 * v38] > (_QWORD **)&v63;
      if (&v90 <= (_QWORD **)&v63 && v62)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, &v90, v61, 56);
        v42 = v88;
        v41 = (void **)&v88[(char *)&v63 - (char *)&v90];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, &v90, v61, 56);
        v41 = (void **)&v63;
        v42 = v88;
      }
    }
    else
    {
      v42 = (char *)&v90;
    }
    v43 = &v42[56 * v89];
    v44 = *(_OWORD *)v41;
    v45 = *((_OWORD *)v41 + 1);
    v46 = *((_OWORD *)v41 + 2);
    *((_QWORD *)v43 + 6) = v41[6];
    *((_OWORD *)v43 + 1) = v45;
    *((_OWORD *)v43 + 2) = v46;
    *(_OWORD *)v43 = v44;
    v38 = v89 + 1;
    LODWORD(v89) = v89 + 1;
  }
  if (v38 == 2)
  {
    llvm::raw_string_ostream::raw_string_ostream((uint64_t)&v63, v8);
    v48 = *((_QWORD *)v88 + 7) + *(_QWORD *)v88;
    *(_QWORD *)v87 = bswap64(v48);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v87, 8uLL);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v63, *((const char **)v88 + 3), *((_QWORD *)v88 + 4));
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v63, *((const char **)v88 + 10), *((_QWORD *)v88 + 11));
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v63, *((const char **)v88 + 5), *((_QWORD *)v88 + 6));
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v63, *((const char **)v88 + 12), *((_QWORD *)v88 + 13));
    v49 = a1[11].n128_u8[15];
    v50 = a1[10].n128_i64[1];
    if ((v49 & 0x80u) != 0)
      v49 = a1[11].n128_u64[0];
    else
      v50 = v8;
    a1[3].n128_u64[0] = v50;
    a1[3].n128_u64[1] = v49;
    v51 = v50 + 8 * v48 + 8;
    v52 = *((_QWORD *)v88 + 13) + *((_QWORD *)v88 + 6);
    a1[5].n128_u64[0] = v51;
    a1[5].n128_u64[1] = v52;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v63);
  }
  else if (v38 == 1)
  {
    v47 = v88;
    a1[3] = *(__n128 *)(v88 + 8);
    a1[5] = *(__n128 *)(v47 + 40);
  }
  if (((*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 32))(a1) & 1) == 0)
  {
    v54 = a1[1].n128_u64[0];
    v55 = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 40))(a1);
    llvm::object::Archive::Child::Child((uint64_t)&v63, (llvm::object::Binary *)a1, v54 + v55, a3);
    if (*a3)
    {
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v53 = 0;
      v59 = -1;
    }
    else
    {
      v58 = v65;
      v56 = v66;
      v59 = v67;
      if (v64)
      {
        (**v64)(v87);
        v53 = *(_QWORD *)v87;
      }
      else
      {
        v53 = 0;
      }
      v57 = (unint64_t)a3;
    }
    v60 = v64;
    v64 = 0;
    if (v60)
      (*v60)[2]((char *)v60);
    if (*a3)
      goto LABEL_77;
    if (v57 >= 8 && v58)
    {
      a1[6].n128_u64[0] = v58;
      a1[6].n128_u64[1] = v56;
      a1[7].n128_u16[0] = v59;
    }
LABEL_76:
    *a3 = 0;
LABEL_77:
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
    goto LABEL_79;
  }
  if (!*a3)
  {
    v53 = 0;
    goto LABEL_76;
  }
LABEL_79:
  if (v88 != (char *)&v90)
    free(v88);
  v33 = *a3;
LABEL_38:
  if (!v33)
    *a3 = 0;
  return a1;
}

void getGlobalSymtabLocAndSize(const llvm::MemoryBufferRef *a1, uint64_t a2, const char **a3, unint64_t *a4, char *a5, uint64_t *a6, _BYTE *a7)
{
  char *v9;
  const char *v10;
  char v11;
  uint64_t last_not_of;
  unsigned __int8 *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  char v20;
  unint64_t v21;
  const char *v22;
  char v23;
  llvm::Twine *v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  uint64_t v29;
  _QWORD v30[2];
  const char *v31;
  __int16 v32;
  _QWORD v33[2];
  unint64_t **v34;
  char v35;
  char v36;
  _QWORD v37[2];
  const char *v38;
  __int16 v39;
  unsigned __int8 *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __int16 v44;
  _QWORD v45[4];
  __int16 v46;
  char *v47;
  unint64_t *v48;

  v9 = (char *)a4 + 114;
  v47 = (char *)a4 + 114;
  v48 = a4;
  if ((char *)a4 + 114 <= (char *)a3)
  {
    *(_QWORD *)a5 = (char *)a4 + a2;
    v40 = (unsigned __int8 *)a4 + a2;
    v41 = 20;
    last_not_of = llvm::StringRef::find_last_not_of(&v40, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
    v15 = v40;
    if (last_not_of + 1 < v41)
      v16 = last_not_of + 1;
    else
      v16 = v41;
    v17 = v41 + v16 - 20;
    if (v41 >= v17)
      v18 = v17;
    else
      v18 = v41;
    v40 = 0;
    if (llvm::getAsUnsignedInteger(v15, v18, 0xAu, (unint64_t *)&v40))
    {
      if (*a7)
      {
        v37[0] = a7;
        v38 = " global symbol table size \"";
        v39 = 771;
        v19 = (const char *)v37;
        v20 = 2;
      }
      else
      {
        v19 = " global symbol table size \"";
        v37[0] = " global symbol table size \"";
        v39 = 259;
        v20 = 3;
      }
      v40 = (unsigned __int8 *)v19;
      v42 = (uint64_t *)v15;
      v43 = v18;
      LOBYTE(v44) = v20;
      HIBYTE(v44) = 5;
      v27[0] = &v40;
      v27[2] = "\" is not a number";
      v28 = 770;
      v24 = (llvm::Twine *)v27;
    }
    else
    {
      v21 = (unint64_t)v40;
      *a6 = (uint64_t)v40;
      if (&v9[v21] <= (char *)a3)
      {
        *(_QWORD *)a1 = 0;
        return;
      }
      if (*a7)
      {
        v30[0] = a7;
        v31 = " global symbol table content at offset 0x";
        v32 = 771;
        v22 = (const char *)v30;
        v23 = 2;
      }
      else
      {
        v22 = " global symbol table content at offset 0x";
        v30[0] = " global symbol table content at offset 0x";
        v32 = 259;
        v23 = 3;
      }
      v33[0] = v22;
      v34 = (unint64_t **)&v47;
      v35 = v23;
      v36 = 15;
      v37[0] = v33;
      v38 = " and size 0x";
      v39 = 770;
      v40 = (unsigned __int8 *)v37;
      v42 = a6;
      v44 = 3842;
      v25[0] = &v40;
      v25[2] = " goes past the end of file";
      v26 = 770;
      v24 = (llvm::Twine *)v25;
    }
  }
  else
  {
    if (*a7)
    {
      v30[0] = a7;
      v31 = " global symbol table header at offset 0x";
      v32 = 771;
      v10 = (const char *)v30;
      v11 = 2;
    }
    else
    {
      v10 = " global symbol table header at offset 0x";
      v30[0] = " global symbol table header at offset 0x";
      v32 = 259;
      v11 = 3;
    }
    v33[0] = v10;
    v34 = &v48;
    v35 = v11;
    v36 = 15;
    v37[0] = v33;
    v38 = " and size 0x";
    v39 = 770;
    v29 = 114;
    v40 = (unsigned __int8 *)v37;
    v42 = &v29;
    v44 = 3842;
    v45[0] = &v40;
    v45[2] = " goes past the end of file";
    v46 = 770;
    v24 = (llvm::Twine *)v45;
  }
  malformedError(a1, v24);
}

void llvm::object::Archive::~Archive(llvm::object::Archive *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E0E25770;
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 16);
    v4 = (void *)*((_QWORD *)this + 15);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v2;
    operator delete(v4);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E0E25770;
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 16);
    v4 = (void *)*((_QWORD *)this + 15);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v2;
    operator delete(v4);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v7);
}

void llvm::object::Binary::initContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t llvm::object::Archive::getFirstChildOffset(llvm::object::Archive *this)
{
  return 8;
}

__n128 llvm::object::ArchiveMemberHeader::clone@<Q0>(llvm::object::ArchiveMemberHeader *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x18uLL);
  result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_1E0E255F8;
  *a2 = v4;
  return result;
}

__n128 llvm::object::BigArchiveMemberHeader::clone@<Q0>(llvm::object::BigArchiveMemberHeader *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __n128 result;

  v4 = (char *)operator new(0x18uLL);
  result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_1E0E256C8;
  *a2 = v4;
  return result;
}

void llvm::object::BigArchiveMemberHeader::isThin(_BYTE *a1@<X8>)
{
  a1[8] &= ~1u;
  *a1 = 0;
}

void llvm::object::BigArchive::~BigArchive(void **this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *this = &unk_1E0E24040;
  if (*((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    *this = off_1E0E25770;
    v2 = this[15];
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    *this = off_1E0E25770;
    v2 = this[15];
    if (!v2)
    {
LABEL_3:
      mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)this);
      return;
    }
  }
  v3 = this[16];
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      v6 = *--v3;
      v5 = v6;
      *v3 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    while (v3 != v2);
    v4 = this[15];
  }
  this[16] = v2;
  operator delete(v4);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)this);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *this = &unk_1E0E24040;
  if (*((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    *this = off_1E0E25770;
    v2 = this[15];
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    *this = off_1E0E25770;
    v2 = this[15];
    if (!v2)
    {
LABEL_3:
      mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)this);
      goto LABEL_4;
    }
  }
  v4 = this[16];
  v5 = v2;
  if (v4 != v2)
  {
    do
    {
      v7 = *--v4;
      v6 = v7;
      *v4 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    while (v4 != v2);
    v5 = this[15];
  }
  this[16] = v2;
  operator delete(v5);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)this);
LABEL_4:
  operator delete(v3);
}

BOOL llvm::object::BigArchive::isEmpty(llvm::object::BigArchive *this)
{
  return (*(uint64_t (**)(llvm::object::BigArchive *))(*(_QWORD *)this + 40))(this) == 0;
}

uint64_t llvm::object::BigArchive::getFirstChildOffset(llvm::object::BigArchive *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t llvm::NewArchiveMember::NewArchiveMember(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  _OWORD v6[2];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)v6, (char **)a1);
  *(_OWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 420;
  return a1;
}

void llvm::writeArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, int a8@<W7>, unsigned __int8 **a9@<X8>, uint64_t *a10, char a11)
{
  const llvm::Twine *v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  unsigned __int8 *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26[4];
  __int16 v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  _QWORD v30[4];
  __int16 v31;
  uint64_t *v32;
  void *v33[4];
  unsigned int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v31 = 773;
  v30[0] = a1;
  v30[1] = a2;
  v30[2] = ".temp-archive-%%%%%%%.a";
  llvm::sys::fs::TempFile::create((uint64_t)v30, 438, 0, (uint64_t)v33);
  if ((v35 & 1) != 0)
  {
    v23 = (unsigned __int8 *)v33[0];
    v33[0] = 0;
    *a9 = v23;
    goto LABEL_12;
  }
  llvm::raw_fd_ostream::raw_fd_ostream(v30, v34, 0, 0, 0);
  llvm::writeArchiveToStream(&v29, (uint64_t)v30, a3, a4, a5, a6, a7, a8, a11);
  v21 = v29;
  if (v29)
  {
    llvm::sys::fs::TempFile::discard((llvm::sys::fs::TempFile *)v33, &v28);
    v22 = v28;
    if (!v28)
    {
      *a9 = v21;
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v30);
      if ((v35 & 1) == 0)
        goto LABEL_18;
      goto LABEL_12;
    }
    v28 = 0;
    v26[0] = (uint64_t)v21;
    v32 = v22;
    llvm::ErrorList::join(v26, &v32, a9);
    if (v32)
      (*(void (**)(uint64_t *))(*v32 + 8))(v32);
    if (v26[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v26[0] + 8))(v26[0]);
    if (v28)
    {
      (*(void (**)(uint64_t *))(*v28 + 8))(v28);
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v30);
      if ((v35 & 1) == 0)
        goto LABEL_18;
      goto LABEL_12;
    }
  }
  else
  {
    v25 = *a10;
    *a10 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v27 = 261;
    v26[0] = a1;
    v26[1] = a2;
    llvm::sys::fs::TempFile::keep((llvm::sys::fs::TempFile *)v33, (const llvm::Twine *)v26, v20, a9);
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v30);
  if ((v35 & 1) == 0)
  {
LABEL_18:
    llvm::sys::fs::TempFile::~TempFile(v33);
    return;
  }
LABEL_12:
  v24 = v33[0];
  v33[0] = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
}

void llvm::writeArchiveToStream(unsigned __int8 **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, int a6, char a7, int a8, char a9)
{
  int v13;
  _BOOL4 v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  unsigned __int8 *v23;
  llvm::object::SymbolicFile *v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t **v32;
  time_t v33;
  std::chrono::system_clock::time_point v34;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v35;
  unint64_t v36;
  const void *v37;
  std::string::size_type v38;
  std::string *p_dst;
  llvm::object::SymbolicFile *v40;
  unsigned __int8 *v41;
  __int128 *v42;
  void *v43;
  std::string::size_type v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int MemberAlignment;
  size_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t *v64;
  char v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  char *v77;
  const void *v78;
  unint64_t v79;
  uint64_t v80;
  llvm::raw_ostream *v81;
  char *v82;
  _WORD *v83;
  unsigned int v84;
  _BYTE *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  unsigned __int8 *v102;
  char *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  std::string::size_type v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  _BYTE *v118;
  llvm::raw_ostream *v119;
  _BYTE *v120;
  _BYTE *v121;
  llvm::object::SymbolicFile *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  llvm *v125;
  unsigned __int8 *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  void *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  void *v142;
  unsigned int v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  char *v163;
  std::string::size_type v164;
  unsigned __int8 *v165;
  size_t v166;
  _QWORD *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  unint64_t v174;
  unsigned __int8 *v175;
  char *v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  _OWORD *v181;
  int64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  _BYTE *v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  _OWORD *v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  char *v208;
  unint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  unsigned __int8 *v215;
  char *v216;
  char *v217;
  char *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char **v225;
  int v226;
  int v227;
  unsigned __int8 *v228;
  uint64_t v229;
  unsigned __int8 v230;
  std::string::size_type v231;
  char *v232;
  char **v233;
  uint64_t v234;
  int v235;
  char **v236;
  char *v237;
  char **v238;
  __n128 **v239;
  __n128 *v240;
  std::string *v241;
  unint64_t v242;
  uint64_t v243;
  BOOL v244;
  BOOL v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  llvm::raw_ostream *v249;
  char **v250;
  std::string *v251;
  size_t v252;
  llvm::raw_ostream *v253;
  _BYTE *v254;
  char *v255;
  char **v256;
  int v257;
  BOOL v258;
  const char *v259;
  size_t v260;
  llvm::raw_ostream *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  unsigned __int8 *v265;
  char **v266;
  uint64_t v267;
  unsigned __int8 v268;
  std::string::size_type size;
  char *v270;
  char **v271;
  unsigned int v272;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v273;
  llvm::raw_ostream *v274;
  int v275;
  int v276;
  int v277;
  int v278;
  char **v279;
  char *v280;
  char **v281;
  char **v282;
  std::string *v283;
  size_t v284;
  llvm::raw_ostream *v285;
  _BYTE *v286;
  char *v287;
  char **v288;
  int v289;
  unsigned __int8 *v290;
  int v291;
  const char *v292;
  size_t v293;
  llvm::raw_ostream *v294;
  const void *v295;
  unint64_t v296;
  void *v297;
  const char *v298;
  unint64_t v299;
  char *v300;
  unint64_t v301;
  unint64_t v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  unint64_t v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  char *v329;
  unsigned __int8 *i;
  size_t v331;
  __int128 *v332;
  uint64_t v333;
  uint64_t v334;
  const char *v335;
  size_t v336;
  int v337;
  const char *v338;
  size_t v339;
  llvm::raw_ostream *v340;
  const void *v341;
  unint64_t v342;
  void *v343;
  _BYTE *v344;
  unint64_t v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  unint64_t *v351;
  unint64_t v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  char *j;
  const void *v359;
  unint64_t v360;
  _BYTE *v361;
  llvm::raw_ostream *v362;
  _BYTE *v363;
  uint64_t v364;
  _BYTE *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  int v370;
  char v371;
  unint64_t v372;
  unint64_t v373;
  unsigned __int8 **v374;
  char v375;
  char *v376;
  unsigned int v377;
  unint64_t v378;
  int v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  const char *v384;
  unsigned int v385;
  int v387;
  int v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char v394;
  int v395;
  uint64_t v396;
  llvm::object::SymbolicFile *v397;
  llvm::object::SymbolicFile *v398;
  unint64_t v399;
  char *v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unsigned __int8 *v406;
  unsigned __int8 *v407;
  unsigned int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char *v414;
  unsigned __int8 *v415;
  _BYTE v416[40];
  char v417;
  uint64_t v418;
  int v419;
  __int128 *v420;
  void *v421[2];
  void *v422[2];
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  llvm::LLVMContextImpl *v427;
  char v428;
  char **v429;
  char *v430;
  uint64_t v431;
  char **v432;
  char *v433;
  uint64_t v434;
  void (**v435)(llvm::raw_svector_ostream *__hidden);
  int v436;
  uint64_t v437;
  unint64_t v438;
  void *v439;
  char v440;
  uint64_t v441;
  int v442;
  void **v443;
  void *v444;
  uint64_t v445;
  uint64_t v446;
  void (**v447)(llvm::raw_svector_ostream *__hidden);
  int v448;
  _BYTE *v449;
  unint64_t v450;
  _BYTE *v451;
  char v452;
  uint64_t v453;
  int v454;
  void **v455;
  void *v456;
  size_t v457;
  uint64_t v458;
  void *v459;
  size_t v460;
  uint64_t v461;
  uint64_t v462;
  std::string __dst;
  std::string::size_type v464;
  void *__p;
  __int128 v466;
  llvm::object::SymbolicFile *v467;
  uint64_t *v468;
  _QWORD *v469;
  uint64_t v470;
  void *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  char v479;
  __int128 v480;
  __int128 v481;
  std::string v482;
  uint64_t v483;
  _WORD *v484;
  char v485;
  uint64_t v486;
  int v487;
  void **v488;
  uint64_t v489;

  v489 = *MEMORY[0x1E0C80C00];
  v458 = 0;
  v456 = &v459;
  v457 = 0;
  v448 = 0;
  v452 = 0;
  v453 = 0;
  v454 = 1;
  v451 = 0;
  v449 = 0;
  v450 = 0;
  v447 = off_1E0E22B88;
  v455 = &v456;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v447, 0, 0, 0);
  v446 = 0;
  v444 = &v447;
  v445 = 0;
  v436 = 0;
  v440 = 0;
  v441 = 0;
  v442 = 1;
  v439 = 0;
  v437 = 0;
  v438 = 0;
  v435 = off_1E0E22B88;
  v443 = &v444;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v435, 0, 0, 0);
  v430 = 0;
  v429 = &v430;
  v434 = 0;
  v433 = 0;
  v431 = 0;
  v432 = &v433;
  if ((unint64_t)a4 <= 0xFFFE)
    v13 = 5;
  else
    v13 = 0;
  if (a6 == 5)
    a6 = v13;
  v14 = a6 == 6;
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v427);
  v428 = a9;
  if (a6 == 5)
    v15 = &v428;
  else
    v15 = 0;
  v376 = v15;
  v472 = 0;
  v471 = 0;
  v473 = 0x1000000000;
  v371 = a7;
  v383 = a6;
  v374 = a1;
  v391 = a4;
  if ((a7 & 1) != 0)
  {
    v470 = 0;
    v469 = 0;
    v468 = (uint64_t *)&v469;
    if ((a6 - 3) > 1)
    {
      v395 = 0;
      v467 = 0;
      if (a4 < 1)
        goto LABEL_172;
    }
    else
    {
      if (!a4)
      {
        v116 = 0;
        v415 = 0;
        v394 = 0;
        v24 = 0;
        v115 = 0;
        v23 = 0;
        v467 = 0;
        goto LABEL_174;
      }
      v16 = 48 * a4;
      v17 = (char *)(a3 + 8);
      do
      {
        v421[0] = v17;
        v18 = std::__tree<std::__value_type<llvm::StringRef,unsigned int>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned int>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned int>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef const&>,std::tuple<>>(&v468, (uint64_t)v17, (uint64_t)&std::piecewise_construct, (_OWORD **)v421);
        ++*((_DWORD *)v18 + 12);
        v17 += 48;
        v16 -= 48;
      }
      while (v16);
      v19 = v468;
      if (v468 != (uint64_t *)&v469)
      {
        do
        {
          *((_DWORD *)v19 + 12) = *((_DWORD *)v19 + 12) > 1u;
          v20 = (uint64_t *)v19[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (uint64_t *)v19[2];
              v26 = *v21 == (_QWORD)v19;
              v19 = v21;
            }
            while (!v26);
          }
          v19 = v21;
        }
        while (v21 != (uint64_t *)&v469);
      }
      v395 = 1;
      v467 = 0;
      if (a4 < 1)
      {
LABEL_172:
        v116 = 0;
        v415 = 0;
        v394 = 0;
        v24 = 0;
        v115 = 0;
        goto LABEL_173;
      }
    }
  }
  else
  {
    v395 = 0;
    v470 = 0;
    v469 = 0;
    v468 = (uint64_t *)&v469;
    v467 = 0;
    if (a4 < 1)
      goto LABEL_172;
  }
  v394 = 0;
  v378 = 0;
  v375 = 0;
  v372 = 0;
  v373 = 0;
  v22 = 0;
  v23 = 0;
  v415 = 0;
  v380 = 0;
  v24 = 0;
  v389 = (unint64_t)v14 << 7;
  v25 = a3;
  v403 = a3 + 48 * a4;
  if (a5)
    v26 = 1;
  else
    v26 = v383 == 6;
  v27 = v26;
  v379 = v27;
  v377 = v383 - 2;
  do
  {
    v466 = 0uLL;
    __p = 0;
    LODWORD(v421[1]) = 0;
    BYTE8(v423) = 0;
    *(_QWORD *)&v424 = 0;
    DWORD2(v424) = 1;
    v422[1] = 0;
    *(_QWORD *)&v423 = 0;
    v422[0] = 0;
    v421[0] = &unk_1E0E22B10;
    *(_QWORD *)&v425 = &__p;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)v421, 0, 0, 0);
    llvm::MemoryBuffer::getMemBufferRef(*(llvm::MemoryBuffer **)v25, v416);
    v28 = *(_QWORD *)&v416[8];
    if (a8)
      v29 = "";
    else
      v29 = *(const char **)v416;
    if (a8)
      v30 = 0;
    else
      v30 = *(_QWORD *)&v416[8];
    if ((v383 - 3) >= 2)
      v31 = 0;
    else
      v31 = ((v30 + 7) & 0xFFFFFFF8) - v30;
    v464 = 0;
    if (v395)
    {
      v482.__r_.__value_.__r.__words[0] = v25 + 8;
      v32 = std::__tree<std::__value_type<llvm::StringRef,unsigned int>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned int>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned int>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef const&>,std::tuple<>>(&v468, v25 + 8, (uint64_t)&std::piecewise_construct, &v482);
      v33 = *((unsigned int *)v32 + 12);
      *((_DWORD *)v32 + 12) = v33 + 1;
      v34.__d_.__rep_ = std::chrono::system_clock::from_time_t(v33).__d_.__rep_;
      v28 = *(_QWORD *)&v416[8];
      v35 = v34.__d_.__rep_ / 1000000;
    }
    else
    {
      v35 = *(_QWORD *)(v25 + 24);
    }
    ++v22;
    v408 = v31;
    v464 = v35;
    v36 = v28 + v31;
    if (v36 >= 0x2540BE400)
    {
      v37 = *(const void **)(v25 + 8);
      if (!v37)
      {
        memset(&__dst, 0, sizeof(__dst));
        goto LABEL_65;
      }
      v38 = *(_QWORD *)(v25 + 16);
      if (v38 > 0x7FFFFFFFFFFFFFF7)
LABEL_630:
        abort();
      if (v38 >= 0x17)
      {
        v45 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v38 | 7) != 0x17)
          v45 = v38 | 7;
        v46 = v22;
        v47 = v45 + 1;
        p_dst = (std::string *)operator new(v45 + 1);
        v48 = v47 | 0x8000000000000000;
        v22 = v46;
        __dst.__r_.__value_.__r.__words[2] = v48;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        __dst.__r_.__value_.__l.__size_ = v38;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v25 + 16);
        p_dst = &__dst;
        if (!v38)
          goto LABEL_64;
      }
      memmove(p_dst, v37, v38);
LABEL_64:
      p_dst->__r_.__value_.__s.__data_[v38] = 0;
LABEL_65:
      v49 = std::string::insert(&__dst, 0, "File ");
      v50 = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v482.__r_.__value_.__l.__data_ = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v482.__r_.__value_.__r.__words[2] = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = std::string::append(&v482, " exceeds size limit");
      v52 = v51->__r_.__value_.__r.__words[2];
      v477 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v478 = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v482.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_67;
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_67;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_67:
      v53 = (unsigned __int8 *)operator new(0x30uLL);
      LOWORD(v484) = 260;
      v482.__r_.__value_.__r.__words[0] = (std::string::size_type)&v477;
      v406 = v53;
      llvm::object::GenericBinaryError::GenericBinaryError(v53, &v482, 3);
      if (SHIBYTE(v478) < 0)
        operator delete((void *)v477);
      v54 = 0;
      v394 = 1;
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v421);
      if (SHIBYTE(v466) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
    if (!v379)
    {
      v384 = v29;
      v387 = v22;
      v397 = v24;
      __dst.__r_.__value_.__r.__words[0] = v35;
      v43 = *(void **)(v25 + 8);
      v44 = *(_QWORD *)(v25 + 16);
      v42 = (__int128 *)(v25 + 8);
      if (v377 > 2)
      {
LABEL_85:
        if ((a8 & 1) == 0 && v44 <= 0xF && (!v44 || (v62 = memchr(v43, 47, v44)) == 0 || v62 - (_BYTE *)v43 == -1))
        {
          v70 = *(_DWORD *)(v25 + 32);
          v71 = *(_DWORD *)(v25 + 36);
          v370 = *(_DWORD *)(v25 + 40);
          v482.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
          v482.__r_.__value_.__l.__size_ = v44;
          v482.__r_.__value_.__r.__words[2] = (std::string::size_type)"/";
          LOWORD(v484) = 773;
          v72 = (*((uint64_t (**)(llvm::raw_string_ostream *))v421[0] + 10))((llvm::raw_string_ostream *)v421);
          v73 = v423;
          v74 = (int)v422[0];
          llvm::Twine::print((llvm::Twine *)&v482, (llvm::raw_ostream *)v421);
          v75 = (*((uint64_t (**)(llvm::raw_string_ostream *))v421[0] + 10))((llvm::raw_string_ostream *)v421);
          llvm::raw_ostream::indent((llvm::raw_ostream *)v421, v72 + v73 - (v75 + v74 + v423) + LODWORD(v422[0]) + 16);
          printRestOfMemberHeader((llvm::raw_ostream *)v421, v35, v70, v71, v370, v36);
          goto LABEL_119;
        }
        v63 = (_BYTE *)v423;
        if ((void *)v423 >= v422[1])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v421, 47);
          if (!a8)
            goto LABEL_92;
        }
        else
        {
          *(_QWORD *)&v423 = v423 + 1;
          *v63 = 47;
          if (!a8)
          {
LABEL_92:
            v477 = *v42;
            v478 = 0;
            v64 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>((uint64_t)&v471, (int8x16_t *)v477, *((const unsigned __int8 **)&v477 + 1), &v478);
            if (v65)
            {
              v66 = ((uint64_t (*)(llvm::raw_svector_ostream *))v435[10])((llvm::raw_svector_ostream *)&v435);
              v67 = v439;
              *(_QWORD *)(*v64 + 8) = (char *)v439 + v66 - v437;
              v68 = *(const void **)(v25 + 8);
              v69 = *(_QWORD *)(v25 + 16);
              if (v69 <= v438 - (unint64_t)v67)
              {
                if (v69)
                {
                  memcpy(v67, v68, *(_QWORD *)(v25 + 16));
                  v439 = (char *)v439 + v69;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v435, (const char *)v68, *(_QWORD *)(v25 + 16));
              }
              if (v383 == 5)
              {
                v85 = v439;
                if ((unint64_t)v439 >= v438)
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v435, 0);
                }
                else
                {
                  v439 = (char *)v439 + 1;
                  *v85 = 0;
                }
              }
              else if (v438 - (unint64_t)v439 > 1)
              {
                *(_WORD *)v439 = 2607;
                v439 = (char *)v439 + 2;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v435, "/\n", 2uLL);
              }
            }
            v82 = *(char **)(*v64 + 8);
            goto LABEL_118;
          }
        }
        v76 = ((uint64_t (*)(llvm::raw_svector_ostream *))v435[10])((llvm::raw_svector_ostream *)&v435);
        v77 = (char *)v439;
        v78 = *(const void **)(v25 + 8);
        v79 = *(_QWORD *)(v25 + 16);
        v80 = v437;
        if (v79 <= v438 - (unint64_t)v439)
        {
          if (v79)
          {
            memcpy(v439, v78, *(_QWORD *)(v25 + 16));
            v83 = (char *)v439 + v79;
            v439 = v83;
            v81 = (llvm::raw_ostream *)&v435;
            v82 = &v77[v76 - v80];
            if (v438 - (unint64_t)v83 <= 1)
              goto LABEL_99;
          }
          else
          {
            v81 = (llvm::raw_ostream *)&v435;
            v83 = v439;
            v82 = (char *)v439 + v76 - v437;
            if (v438 - (unint64_t)v439 <= 1)
              goto LABEL_99;
          }
        }
        else
        {
          v81 = llvm::raw_ostream::write((llvm::raw_ostream *)&v435, (const char *)v78, *(_QWORD *)(v25 + 16));
          v82 = &v77[v76 - v80];
          v83 = (_WORD *)*((_QWORD *)v81 + 4);
          if (*((_QWORD *)v81 + 3) - (_QWORD)v83 <= 1uLL)
          {
LABEL_99:
            llvm::raw_ostream::write(v81, "/\n", 2uLL);
LABEL_118:
            v86 = (*((uint64_t (**)(llvm::raw_string_ostream *))v421[0] + 10))((llvm::raw_string_ostream *)v421);
            v87 = v423;
            v88 = (int)v422[0];
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)v421, (unint64_t)v82);
            v89 = (*((uint64_t (**)(llvm::raw_string_ostream *))v421[0] + 10))((llvm::raw_string_ostream *)v421);
            llvm::raw_ostream::indent((llvm::raw_ostream *)v421, v86 + v87 - (v89 + v88 + v423) + LODWORD(v422[0]) + 15);
            printRestOfMemberHeader((llvm::raw_ostream *)v421, v35, *(_DWORD *)(v25 + 32), *(_DWORD *)(v25 + 36), *(_DWORD *)(v25 + 40), v36);
LABEL_119:
            v22 = v387;
            v40 = v397;
            v84 = v408;
            if ((void *)v423 == v422[0])
              goto LABEL_121;
LABEL_120:
            llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)v421);
            goto LABEL_121;
          }
        }
        *v83 = 2607;
        *((_QWORD *)v81 + 4) += 2;
        goto LABEL_118;
      }
LABEL_58:
      printBSDMemberHeader((llvm::raw_ostream *)v421, v389, v43, v44, (uint64_t *)&__dst, *(_DWORD *)(v25 + 32), *(_DWORD *)(v25 + 36), *(_DWORD *)(v25 + 40), v36);
      goto LABEL_119;
    }
    v482.__r_.__value_.__r.__words[0] = (std::string::size_type)&v467;
    v482.__r_.__value_.__l.__size_ = (std::string::size_type)&v427;
    if (v25 == a3)
    {
      v480 = *(_OWORD *)v416;
      v481 = *(_OWORD *)&v416[16];
      computeMemberData(llvm::raw_ostream &,llvm::raw_ostream &,llvm::object::Archive::Kind,BOOL,BOOL,llvm::SymtabWritingMode,SymMap *,llvm::LLVMContext &,llvm::ArrayRef<llvm::NewArchiveMember>)::$_0::operator()(&v477, (uint64_t)&v482, (uint64_t)&v480, *(unsigned __int16 **)(a3 + 8), *(_QWORD *)(a3 + 16));
      v41 = (unsigned __int8 *)v477;
      if ((_QWORD)v477)
        goto LABEL_82;
    }
    v384 = v29;
    v40 = v467;
    v467 = 0;
    if (v24)
      (*(void (**)(llvm::object::SymbolicFile *))(*(_QWORD *)v24 + 8))(v24);
    if (v25 + 48 != v403)
    {
      llvm::MemoryBuffer::getMemBufferRef(*(llvm::MemoryBuffer **)(v25 + 48), &v459);
      computeMemberData(llvm::raw_ostream &,llvm::raw_ostream &,llvm::object::Archive::Kind,BOOL,BOOL,llvm::SymtabWritingMode,SymMap *,llvm::LLVMContext &,llvm::ArrayRef<llvm::NewArchiveMember>)::$_0::operator()(&v477, (uint64_t)&v482, (uint64_t)&v459, *(unsigned __int16 **)(v25 + 56), *(_QWORD *)(v25 + 64));
      v41 = (unsigned __int8 *)v477;
      if ((_QWORD)v477)
      {
        v24 = v40;
LABEL_82:
        v54 = 0;
        v394 = 1;
        v406 = v41;
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v421);
        if (SHIBYTE(v466) < 0)
          goto LABEL_70;
        goto LABEL_71;
      }
    }
    if (v383 != 6)
    {
      v397 = v40;
      v387 = v22;
      v35 = v464;
      __dst.__r_.__value_.__r.__words[0] = v464;
      v43 = *(void **)(v25 + 8);
      v44 = *(_QWORD *)(v25 + 16);
      v42 = (__int128 *)(v25 + 8);
      if (v377 > 2)
        goto LABEL_85;
      goto LABEL_58;
    }
    v55 = v372;
    if (v25 == a3)
    {
      v56 = v389 + ((*(_QWORD *)(v25 + 16) + 1) & 0xFFFFFFFFFFFFFFFELL) + 114;
      MemberAlignment = getMemberAlignment(v40);
      v55 = ((MemberAlignment + v56 - 1) & -(uint64_t)MemberAlignment) - v56;
    }
    v58 = *(_QWORD *)(v25 + 16);
    v389 += v55;
    v59 = ((v36 + 1) & 0xFFFFFFFFFFFFFFFELL) + v389 + ((v58 + 1) & 0xFFFFFFFFFFFFFFFELL) + 114;
    v378 = v55;
    if (v25 + 48 == v403)
    {
      v372 = v55;
    }
    else
    {
      v60 = v59 + ((*(_QWORD *)(v25 + 64) + 1) & 0xFFFFFFFFFFFFFFFELL) + 114;
      v61 = getMemberAlignment(v467);
      v372 = ((v60 + v61 - 1) & -(uint64_t)v61) - v60;
      v59 += v372;
      v58 = *(_QWORD *)(v25 + 16);
    }
    printBigArchiveMemberHeader(v421, *(const void **)(v25 + 8), v58, &v464, *(_DWORD *)(v25 + 32), *(_DWORD *)(v25 + 36), *(_DWORD *)(v25 + 40), v36, v373, v59);
    v373 = v389;
    v84 = v408;
    if ((void *)v423 != v422[0])
      goto LABEL_120;
LABEL_121:
    if (!a5)
    {
      v398 = v40;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      goto LABEL_125;
    }
    getSymbols((uint64_t)&v477, (__n128 *)v40, v22, (llvm::raw_ostream *)&v447, v376);
    if ((v479 & 1) == 0)
    {
      v91 = *((_QWORD *)&v477 + 1);
      v90 = v477;
      v92 = v478;
      v398 = v40;
      v375 |= v40 != 0;
LABEL_125:
      v93 = ((v84 + (_DWORD)v30 + 1) & 0xFFFFFFFE) - v30;
      v94 = HIBYTE(v466);
      v95 = __p;
      if (v466 >= 0)
        v96 = HIBYTE(v466);
      else
        v96 = v466;
      v482.__r_.__value_.__r.__words[0] = v466;
      *(std::string::size_type *)((char *)v482.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v466 + 7);
      __p = 0;
      v466 = 0uLL;
      if (v415 < (unsigned __int8 *)v380)
      {
        *(_QWORD *)v415 = v90;
        *((_QWORD *)v415 + 1) = v91;
        *((_QWORD *)v415 + 2) = v92;
        *((_QWORD *)v415 + 3) = v95;
        *((_QWORD *)v415 + 4) = v482.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v415 + 39) = *(std::string::size_type *)((char *)v482.__r_.__value_.__r.__words + 7);
        v415[47] = v94;
        *((_QWORD *)v415 + 6) = v384;
        *((_QWORD *)v415 + 7) = v30;
        *((_QWORD *)v415 + 8) = &computeMemberData(llvm::raw_ostream &,llvm::raw_ostream &,llvm::object::Archive::Kind,BOOL,BOOL,llvm::SymtabWritingMode,SymMap *,llvm::LLVMContext &,llvm::ArrayRef<llvm::NewArchiveMember>)::PaddingData;
        *((_QWORD *)v415 + 9) = v93;
        *((_QWORD *)v415 + 10) = v378;
        *((_QWORD *)v415 + 11) = v398;
        v415 += 96;
        goto LABEL_157;
      }
      v388 = v22;
      v97 = 0xAAAAAAAAAAAAAAABLL * ((v415 - v23) >> 5) + 1;
      if (v97 > 0x2AAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v409 = v96;
      if (0x5555555555555556 * ((v380 - (char *)v23) >> 5) > v97)
        v97 = 0x5555555555555556 * ((v380 - (char *)v23) >> 5);
      if (0xAAAAAAAAAAAAAAABLL * ((v380 - (char *)v23) >> 5) >= 0x155555555555555)
        v97 = 0x2AAAAAAAAAAAAAALL;
      if (v97 > 0x2AAAAAAAAAAAAAALL)
LABEL_631:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v98 = v90;
      v381 = 96 * v97;
      v99 = (char *)operator new(96 * v97);
      v100 = &v99[32 * ((v415 - v23) >> 5)];
      *(_QWORD *)v100 = v98;
      *((_QWORD *)v100 + 1) = v91;
      *((_QWORD *)v100 + 2) = v92;
      *((_QWORD *)v100 + 3) = v95;
      *((_QWORD *)v100 + 4) = v482.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v100 + 39) = *(std::string::size_type *)((char *)v482.__r_.__value_.__r.__words + 7);
      v100[47] = v94;
      v482.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v482.__r_.__value_.__r.__words + 7) = 0;
      *((_QWORD *)v100 + 6) = v384;
      *((_QWORD *)v100 + 7) = v30;
      *((_QWORD *)v100 + 8) = &computeMemberData(llvm::raw_ostream &,llvm::raw_ostream &,llvm::object::Archive::Kind,BOOL,BOOL,llvm::SymtabWritingMode,SymMap *,llvm::LLVMContext &,llvm::ArrayRef<llvm::NewArchiveMember>)::PaddingData;
      *((_QWORD *)v100 + 9) = v93;
      *((_QWORD *)v100 + 10) = v378;
      *((_QWORD *)v100 + 11) = v398;
      if (v415 == v23)
      {
        v103 = &v99[32 * ((v415 - v23) >> 5)];
        v380 = &v99[v381];
        v415 = (unsigned __int8 *)(v100 + 96);
        if (v23)
LABEL_155:
          operator delete(v23);
LABEL_156:
        v23 = (unsigned __int8 *)v103;
        v22 = v388;
        v96 = v409;
LABEL_157:
        v24 = 0;
        v389 += v93 + v30 + v96;
        v54 = 1;
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v421);
        if (SHIBYTE(v466) < 0)
          goto LABEL_70;
        goto LABEL_71;
      }
      v101 = v99;
      v102 = v415;
      v103 = &v99[32 * ((v415 - v23) >> 5)];
      do
      {
        v104 = *((_OWORD *)v102 - 6);
        v102 -= 96;
        *((_OWORD *)v103 - 6) = v104;
        v103 -= 96;
        *((_QWORD *)v103 + 2) = *((_QWORD *)v102 + 2);
        *(_QWORD *)v102 = 0;
        *((_QWORD *)v102 + 1) = 0;
        *((_QWORD *)v102 + 2) = 0;
        v105 = *(_OWORD *)(v102 + 24);
        *((_QWORD *)v103 + 5) = *((_QWORD *)v102 + 5);
        *(_OWORD *)(v103 + 24) = v105;
        *((_QWORD *)v102 + 4) = 0;
        *((_QWORD *)v102 + 5) = 0;
        *((_QWORD *)v102 + 3) = 0;
        v106 = *((_OWORD *)v102 + 3);
        v107 = *((_OWORD *)v102 + 4);
        *((_QWORD *)v103 + 10) = *((_QWORD *)v102 + 10);
        *((_OWORD *)v103 + 3) = v106;
        *((_OWORD *)v103 + 4) = v107;
        v108 = *((_QWORD *)v102 + 11);
        *((_QWORD *)v102 + 11) = 0;
        *((_QWORD *)v103 + 11) = v108;
      }
      while (v102 != v23);
      while (1)
      {
        v109 = *((_QWORD *)v415 - 1);
        *((_QWORD *)v415 - 1) = 0;
        if (v109)
          (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
        if (((char)*(v415 - 49) & 0x80000000) == 0)
          break;
        operator delete(*((void **)v415 - 9));
        v110 = (void *)*((_QWORD *)v415 - 12);
        if (v110)
          goto LABEL_147;
LABEL_140:
        v415 -= 96;
        if (v415 == v23)
        {
          v380 = &v101[v381];
          v415 = (unsigned __int8 *)(v100 + 96);
          if (v23)
            goto LABEL_155;
          goto LABEL_156;
        }
      }
      v110 = (void *)*((_QWORD *)v415 - 12);
      if (!v110)
        goto LABEL_140;
LABEL_147:
      *((_QWORD *)v415 - 11) = v110;
      operator delete(v110);
      goto LABEL_140;
    }
    LOWORD(v484) = 261;
    v111 = *(_QWORD *)(v25 + 16);
    v482.__r_.__value_.__r.__words[0] = *(_QWORD *)(v25 + 8);
    v482.__r_.__value_.__l.__size_ = v111;
    v476 = v477;
    *(_QWORD *)&v477 = 0;
    v475 = 0;
    v474 = &v475;
    llvm::handleErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>((uint64_t)&v476, &v474, (uint64_t *)&__dst);
    if (v476)
      (*(void (**)(uint64_t))(*(_QWORD *)v476 + 8))(v476);
    v112 = (char *)operator new(0x38uLL);
    v113 = v475;
    v475 = 0;
    *(_QWORD *)v112 = &unk_1E0E25888;
    v112[40] = 0;
    *((_QWORD *)v112 + 6) = 0;
    *((_QWORD *)v112 + 2) = 0;
    *((_QWORD *)v112 + 3) = 0;
    v112[32] = 0;
    *((_QWORD *)v112 + 1) = 0;
    llvm::Twine::str((llvm::Twine *)&v482, (std::string *)(v112 + 8));
    *((_QWORD *)v112 + 6) = v113;
    v114 = v475;
    *((_QWORD *)v112 + 4) = 0;
    v406 = (unsigned __int8 *)v112;
    v112[40] = 0;
    v475 = 0;
    if (v114)
      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
    v54 = 0;
    v394 = 1;
    v24 = v40;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v421);
    if (SHIBYTE(v466) < 0)
LABEL_70:
      operator delete(__p);
LABEL_71:
    if ((v54 & 1) == 0)
    {
      v115 = v415;
      v116 = v406;
      goto LABEL_174;
    }
    v25 += 48;
  }
  while (v25 < v403);
  if ((v375 & 1) == 0)
    goto LABEL_169;
  v117 = ((uint64_t (*)(llvm::raw_svector_ostream *))v447[10])((llvm::raw_svector_ostream *)&v447);
  v115 = 0;
  v394 = 0;
  if (v383 == 5 || (v118 = v451, &v451[v117] != v449))
  {
    v116 = v23;
    v23 = 0;
  }
  else
  {
    if ((unint64_t)v451 >= v450)
    {
      v119 = llvm::raw_ostream::write((llvm::raw_ostream *)&v447, 0);
      v120 = (_BYTE *)*((_QWORD *)v119 + 4);
      if ((unint64_t)v120 < *((_QWORD *)v119 + 3))
        goto LABEL_587;
LABEL_167:
      v119 = llvm::raw_ostream::write(v119, 0);
      v121 = (_BYTE *)*((_QWORD *)v119 + 4);
      if ((unint64_t)v121 >= *((_QWORD *)v119 + 3))
        goto LABEL_168;
LABEL_588:
      v394 = 0;
      v115 = 0;
      *((_QWORD *)v119 + 4) = v121 + 1;
      *v121 = 0;
    }
    else
    {
      ++v451;
      *v118 = 0;
      v119 = (llvm::raw_ostream *)&v447;
      v120 = v451;
      if ((unint64_t)v451 >= v450)
        goto LABEL_167;
LABEL_587:
      *((_QWORD *)v119 + 4) = v120 + 1;
      *v120 = 0;
      v121 = (_BYTE *)*((_QWORD *)v119 + 4);
      if ((unint64_t)v121 < *((_QWORD *)v119 + 3))
        goto LABEL_588;
LABEL_168:
      llvm::raw_ostream::write(v119, 0);
LABEL_169:
      v394 = 0;
      v115 = 0;
    }
    v116 = v23;
LABEL_173:
    v23 = 0;
  }
LABEL_174:
  v122 = v467;
  v467 = 0;
  if (v122)
    (*(void (**)(llvm::object::SymbolicFile *))(*(_QWORD *)v122 + 8))(v122);
  v123 = v116;
  if (v24)
    (*(void (**)(llvm::object::SymbolicFile *))(*(_QWORD *)v24 + 8))(v24);
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v468, v469);
  if (HIDWORD(v472) && (_DWORD)v472)
  {
    v124 = 0;
    do
    {
      v125 = *(llvm **)((char *)v471 + v124);
      if (v125 != (llvm *)-8 && v125 != 0)
        llvm::deallocate_buffer(v125, (void *)(*(_QWORD *)v125 + 17));
      v124 += 8;
    }
    while (8 * v472 != v124);
  }
  free(v471);
  v127 = v123;
  if (!v23)
  {
    if ((v394 & 1) != 0)
      goto LABEL_200;
    goto LABEL_189;
  }
  while (v115 != v23)
  {
    v128 = *((_QWORD *)v115 - 1);
    *((_QWORD *)v115 - 1) = 0;
    if (v128)
      (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
    if ((char)*(v115 - 49) < 0)
    {
      operator delete(*((void **)v115 - 9));
      v129 = (void *)*((_QWORD *)v115 - 12);
      if (!v129)
        goto LABEL_190;
LABEL_198:
      *((_QWORD *)v115 - 11) = v129;
      operator delete(v129);
      goto LABEL_190;
    }
    v129 = (void *)*((_QWORD *)v115 - 12);
    if (v129)
      goto LABEL_198;
LABEL_190:
    v115 -= 96;
  }
  operator delete(v23);
  if ((v394 & 1) == 0)
  {
LABEL_189:
    *v374 = 0;
LABEL_201:
    v404 = 0;
    v407 = v123;
    v425 = 0u;
    v426 = 0u;
    v423 = 0u;
    v424 = 0u;
    *(_OWORD *)v421 = 0u;
    *(_OWORD *)v422 = 0u;
    v130 = v445;
    if (!v445 || v383 == 6)
    {
LABEL_226:
      if (v127 != v415)
      {
        v148 = 0;
        v410 = 0;
        v149 = 0;
        if (a5)
          v150 = v383 == 6;
        else
          v150 = 0;
        v151 = v150;
        while (1)
        {
          if ((char)v127[47] < 0)
          {
            v154 = *((_QWORD *)v127 + 4);
            v155 = *((_QWORD *)v127 + 7);
            v156 = *((_QWORD *)v127 + 9);
            v157 = *((_QWORD *)v127 + 10);
            v158 = (uint64_t)(*((_QWORD *)v127 + 1) - *(_QWORD *)v127) >> 2;
            if (!v151)
              goto LABEL_235;
          }
          else
          {
            v154 = v127[47];
            v155 = *((_QWORD *)v127 + 7);
            v156 = *((_QWORD *)v127 + 9);
            v157 = *((_QWORD *)v127 + 10);
            v158 = (uint64_t)(*((_QWORD *)v127 + 1) - *(_QWORD *)v127) >> 2;
            if (!v151)
              goto LABEL_235;
          }
          v159 = *((_QWORD *)v127 + 11);
          if (v159)
          {
            v160 = v149;
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 64))(v159) & 1) != 0)
            {
              v149 = v160;
              goto LABEL_235;
            }
            v152 = (uint64_t)(*((_QWORD *)v127 + 1) - *(_QWORD *)v127) >> 2;
            v149 = v160;
          }
          else
          {
            v152 = v158;
          }
          v149 += v152;
LABEL_235:
          v153 = v157 + v148;
          v148 = v154 + v155 + v153 + v156;
          v410 += v158;
          v127 += 96;
          if (v127 == v415)
            goto LABEL_245;
        }
      }
      v149 = 0;
      v410 = 0;
      v153 = 0;
      v148 = 0;
LABEL_245:
      v396 = v149;
      if (a5)
      {
        v161 = 1;
        if (((1 << v383) & 0x2D) != 0)
        {
          v162 = computeHeadersSize(v383, 0xAAAAAAAAAAAAAAABLL * ((v415 - v407) >> 5), v404, v410, v457, v376);
          v163 = getenv("SYM64_THRESHOLD");
          v164 = 0x100000000;
          if (v163)
          {
            v165 = (unsigned __int8 *)v163;
            v166 = strlen(v163);
            v482.__r_.__value_.__r.__words[0] = 0;
            if (!llvm::getAsUnsignedInteger(v165, v166, 0xAu, (unint64_t *)&v482))
              v164 = v482.__r_.__value_.__r.__words[0];
          }
          if (v162 + v153 >= v164)
          {
            if (v383 == 3)
              v235 = 4;
            else
              v235 = 1;
            v383 = v235;
            if (!a8)
            {
LABEL_307:
              v220 = *(_QWORD **)(a2 + 32);
              v221 = *(_QWORD *)(a2 + 24) - (_QWORD)v220;
              if (v383 == 6)
              {
                if (v221 <= 7)
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)a2, "<bigaf>\n", 8uLL);
                  v392 = v153;
                  v393 = v148;
                  if (!v391)
                    goto LABEL_363;
                  goto LABEL_257;
                }
                *v220 = 0xA3E66616769623CLL;
                *(_QWORD *)(a2 + 32) += 8;
                v392 = v153;
                v393 = v148;
                if (!v391)
                {
LABEL_363:
                  v173 = 0;
                  v172 = 0;
                  v414 = 0;
                  v176 = 0;
                  v405 = 0;
                  v175 = v407;
LABEL_364:
                  v401 = v173;
                  v461 = 0;
                  v459 = &v462;
                  v460 = 0;
                  *((_QWORD *)&v477 + 1) = 0;
                  v478 = 0;
                  *(_QWORD *)&v477 = &v479;
                  LODWORD(v482.__r_.__value_.__r.__words[1]) = 0;
                  v485 = 0;
                  v486 = 0;
                  v487 = 1;
                  v483 = 0;
                  v484 = 0;
                  v482.__r_.__value_.__r.__words[2] = 0;
                  v482.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E0E22B88;
                  v488 = &v459;
                  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v482, 0, 0, 0);
                  *(_DWORD *)&v416[8] = 0;
                  v417 = 0;
                  v418 = 0;
                  v419 = 1;
                  memset(&v416[16], 0, 24);
                  *(_QWORD *)v416 = off_1E0E22B88;
                  v420 = &v477;
                  llvm::raw_ostream::SetBufferAndMode((uint64_t)v416, 0, 0, 0);
                  if (a5 && v410 && v175 != v415)
                  {
                    v239 = (__n128 **)v175;
                    while (1)
                    {
                      v240 = v239[11];
                      if (v240)
                        v241 = (*(unsigned int (**)(__n128 *))(v240->n128_u64[0] + 64))(v239[11])
                             ? (std::string *)v416
                             : &v482;
                      else
                        v241 = &v482;
                      getSymbols((uint64_t)&v480, v240, 0, (llvm::raw_ostream *)v241, 0);
                      if ((BYTE8(v481) & 1) != 0)
                        break;
                      if ((_QWORD)v480)
                        operator delete((void *)v480);
                      v239 += 12;
                      if (v239 == (__n128 **)v415)
                        goto LABEL_377;
                    }
                    v248 = 0;
                    *v374 = (unsigned __int8 *)v480;
                    v249 = (llvm::raw_ostream *)a2;
LABEL_593:
                    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v416);
                    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v482);
                    if ((char *)v477 != &v479)
                      free((void *)v477);
                    if (v459 != &v462)
                      free(v459);
                    v407 = v175;
                    if (v414)
                      operator delete(v414);
                    if (v401)
                      operator delete(v401);
                    if (!v248)
                      goto LABEL_605;
                    goto LABEL_602;
                  }
LABEL_377:
                  v242 = 0;
                  v243 = v393 + 128;
                  v390 = (v172 - v401) >> 3;
                  if (v396)
                    v244 = a5 == 3;
                  else
                    v244 = 1;
                  v245 = v244 || a5 == 0;
                  v246 = (v405 + 20 * v390 + 135) & 0xFFFFFFFFFFFFFFFELL;
                  if (v245)
                    v247 = 0;
                  else
                    v247 = v246 + v243;
                  v385 = v410 - v396;
                  if (v410 != v396)
                  {
                    if ((a5 | 2) == 2)
                    {
                      v242 = 0;
                    }
                    else
                    {
                      v242 = v246 + v243;
                      if (v247)
                        v242 = v247 + 8 * v396 + ((v460 + 1) & 0xFFFFFFFFFFFFFFFELL) + 122;
                    }
                  }
                  v382 = v246 + v243;
                  v300 = v176;
                  v301 = v391;
                  if (v391)
                    v302 = v393 + 128;
                  else
                    v302 = 0;
                  v303 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v304 = *(_DWORD *)(a2 + 32);
                  v305 = *(_DWORD *)(a2 + 16);
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a2, v302);
                  v306 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  llvm::raw_ostream::indent((llvm::raw_ostream *)a2, v303 + v304 - (v306 + v305 + *(_DWORD *)(a2 + 32)) + *(_DWORD *)(a2 + 16) + 20);
                  v307 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v308 = *(_DWORD *)(a2 + 32);
                  v309 = *(_DWORD *)(a2 + 16);
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a2, v247);
                  v310 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  llvm::raw_ostream::indent((llvm::raw_ostream *)a2, v307 + v308 - (v310 + v309 + *(_DWORD *)(a2 + 32)) + *(_DWORD *)(a2 + 16) + 20);
                  v311 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v312 = *(_DWORD *)(a2 + 32);
                  v313 = *(_DWORD *)(a2 + 16);
                  v411 = v242;
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a2, v242);
                  v314 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  llvm::raw_ostream::indent((llvm::raw_ostream *)a2, v311 + v312 - (v314 + v313 + *(_DWORD *)(a2 + 32)) + *(_DWORD *)(a2 + 16) + 20);
                  if (v391)
                  {
                    v301 = *((_QWORD *)v175 + 10) + 128;
                    v315 = v392 + 128;
                  }
                  else
                  {
                    v315 = 0;
                  }
                  v316 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v317 = *(_DWORD *)(a2 + 32);
                  v318 = *(_DWORD *)(a2 + 16);
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a2, v301);
                  v319 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  llvm::raw_ostream::indent((llvm::raw_ostream *)a2, v316 + v317 - (v319 + v318 + *(_DWORD *)(a2 + 32)) + *(_DWORD *)(a2 + 16) + 20);
                  v320 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v321 = *(_DWORD *)(a2 + 32);
                  v322 = *(_DWORD *)(a2 + 16);
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a2, v315);
                  v323 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  llvm::raw_ostream::indent((llvm::raw_ostream *)a2, v320 + v321 - (v323 + v322 + *(_DWORD *)(a2 + 32)) + *(_DWORD *)(a2 + 16) + 20);
                  v324 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v325 = *(_DWORD *)(a2 + 32);
                  v326 = *(_DWORD *)(a2 + 16);
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a2, 0);
                  v327 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v328 = v326 + *(_DWORD *)(a2 + 32);
                  v249 = (llvm::raw_ostream *)a2;
                  llvm::raw_ostream::indent((llvm::raw_ostream *)a2, v324 + v325 - (v327 + v328) + *(_DWORD *)(a2 + 16) + 20);
                  v329 = v300;
                  if (v175 != v415)
                  {
                    for (i = v175; i != v415; i += 96)
                    {
                      v331 = *((_QWORD *)i + 10);
                      if (v331 > 0x7FFFFFFFFFFFFFF7)
                        goto LABEL_630;
                      if (v331 >= 0x17)
                      {
                        v333 = (v331 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v331 | 7) != 0x17)
                          v333 = v331 | 7;
                        v334 = v333 + 1;
                        v332 = (__int128 *)operator new(v333 + 1);
                        *((_QWORD *)&v480 + 1) = v331;
                        *(_QWORD *)&v481 = v334 | 0x8000000000000000;
                        *(_QWORD *)&v480 = v332;
                      }
                      else
                      {
                        BYTE7(v481) = *((_QWORD *)i + 10);
                        v332 = &v480;
                        if (!v331)
                          goto LABEL_533;
                      }
                      bzero(v332, v331);
LABEL_533:
                      *((_BYTE *)v332 + v331) = 0;
                      if ((SBYTE7(v481) & 0x80u) == 0)
                        v335 = (const char *)&v480;
                      else
                        v335 = (const char *)v480;
                      if ((SBYTE7(v481) & 0x80u) == 0)
                        v336 = BYTE7(v481);
                      else
                        v336 = *((_QWORD *)&v480 + 1);
                      llvm::raw_ostream::write((llvm::raw_ostream *)a2, v335, v336);
                      if (SBYTE7(v481) < 0)
                        operator delete((void *)v480);
                      v337 = (char)i[47];
                      if (v337 >= 0)
                        v338 = (const char *)(i + 24);
                      else
                        v338 = (const char *)*((_QWORD *)i + 3);
                      if (v337 >= 0)
                        v339 = i[47];
                      else
                        v339 = *((_QWORD *)i + 4);
                      v340 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, v338, v339);
                      v341 = (const void *)*((_QWORD *)i + 6);
                      v342 = *((_QWORD *)i + 7);
                      v343 = (void *)*((_QWORD *)v340 + 4);
                      if (v342 <= *((_QWORD *)v340 + 3) - (_QWORD)v343)
                      {
                        if (v342)
                        {
                          memcpy(v343, v341, *((_QWORD *)i + 7));
                          *((_QWORD *)v340 + 4) += v342;
                        }
                      }
                      else
                      {
                        llvm::raw_ostream::write(v340, (const char *)v341, *((_QWORD *)i + 7));
                      }
                      v329 = v300;
                      if ((i[56] & 1) != 0)
                      {
                        v344 = *(_BYTE **)(a2 + 32);
                        if ((unint64_t)v344 < *(_QWORD *)(a2 + 24))
                        {
                          *(_QWORD *)(a2 + 32) = v344 + 1;
                          *v344 = 0;
                        }
                        else
                        {
                          llvm::raw_ostream::write((llvm::raw_ostream *)a2, 0);
                        }
                      }
                    }
                  }
                  if (!v391)
                  {
                    v248 = 1;
                    goto LABEL_593;
                  }
                  *(_QWORD *)&v480 = std::chrono::system_clock::from_time_t(0).__d_.__rep_ / 1000000;
                  if (v247)
                    v345 = v247;
                  else
                    v345 = v411;
                  printBigArchiveMemberHeader((void **)a2, "", 0, &v480, 0, 0, 0, v405 + 20 * v390 + 20, v392 + 128, v345);
                  v346 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v347 = *(_DWORD *)(a2 + 32);
                  v348 = *(_DWORD *)(a2 + 16);
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a2, v390);
                  v349 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                  v350 = v348 + *(_DWORD *)(a2 + 32);
                  v249 = (llvm::raw_ostream *)a2;
                  llvm::raw_ostream::indent((llvm::raw_ostream *)a2, v346 + v347 - (v349 + v350) + *(_DWORD *)(a2 + 16) + 20);
                  if (v401 != v172)
                  {
                    v351 = (unint64_t *)v401;
                    do
                    {
                      v352 = *v351++;
                      v353 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v249 + 80))(v249);
                      v354 = *(_DWORD *)(a2 + 32);
                      v355 = *(_DWORD *)(a2 + 16);
                      llvm::raw_ostream::operator<<((llvm::raw_ostream *)a2, v352);
                      v356 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
                      v357 = v353 + v354;
                      v249 = (llvm::raw_ostream *)a2;
                      llvm::raw_ostream::indent((llvm::raw_ostream *)a2, v357 - (v356 + v355 + *(_DWORD *)(a2 + 32)) + *(_DWORD *)(a2 + 16) + 20);
                    }
                    while (v351 != (unint64_t *)v172);
                  }
                  if (v414 != v329)
                  {
                    for (j = v414; j != v329; j += 16)
                    {
                      while (1)
                      {
                        v359 = *(const void **)j;
                        v360 = *((_QWORD *)j + 1);
                        v361 = (_BYTE *)*((_QWORD *)v249 + 4);
                        if (v360 > *((_QWORD *)v249 + 3) - (_QWORD)v361)
                          break;
                        if (v360)
                        {
                          memcpy(v361, v359, *((_QWORD *)j + 1));
                          v361 = (_BYTE *)(*((_QWORD *)v249 + 4) + v360);
                          *((_QWORD *)v249 + 4) = v361;
                        }
                        v362 = v249;
                        if ((unint64_t)v361 >= *((_QWORD *)v249 + 3))
                          goto LABEL_570;
LABEL_563:
                        *((_QWORD *)v362 + 4) = v361 + 1;
                        *v361 = 0;
                        j += 16;
                        if (j == v329)
                          goto LABEL_571;
                      }
                      v362 = llvm::raw_ostream::write(v249, (const char *)v359, *((_QWORD *)j + 1));
                      v361 = (_BYTE *)*((_QWORD *)v362 + 4);
                      if ((unint64_t)v361 < *((_QWORD *)v362 + 3))
                        goto LABEL_563;
LABEL_570:
                      llvm::raw_ostream::write(v362, 0);
                    }
                  }
LABEL_571:
                  v175 = v407;
                  if ((v405 & 1) != 0)
                  {
                    v363 = (_BYTE *)*((_QWORD *)v249 + 4);
                    if ((unint64_t)v363 >= *((_QWORD *)v249 + 3))
                    {
                      llvm::raw_ostream::write(v249, 0);
                      if (!a5)
                        goto LABEL_585;
LABEL_575:
                      if (v247)
                      {
                        v364 = 0xAAAAAAAAAAAAAAABLL * ((v415 - v407) >> 5);
                        writeSymbolTable(v249, v383, v371, (uint64_t)v407, v364, v459, v460, 0x80uLL, v396, v393 + 128, v411, 0);
                        if (!v411)
                        {
                          v248 = 1;
                          goto LABEL_593;
                        }
                        if ((v460 & 1) != 0)
                        {
                          v365 = (_BYTE *)*((_QWORD *)v249 + 4);
                          if ((unint64_t)v365 >= *((_QWORD *)v249 + 3))
                          {
                            llvm::raw_ostream::write(v249, 0);
                          }
                          else
                          {
                            *((_QWORD *)v249 + 4) = v365 + 1;
                            *v365 = 0;
                          }
                        }
                        v366 = v382;
                        goto LABEL_592;
                      }
                      if (v411)
                      {
                        v364 = 0xAAAAAAAAAAAAAAABLL * ((v415 - v407) >> 5);
                        v366 = v393 + 128;
LABEL_592:
                        v248 = 1;
                        writeSymbolTable(v249, v383, v371, (uint64_t)v407, v364, (const void *)v477, *((size_t *)&v477 + 1), 0x80uLL, v385, v366, 0, 1u);
                        goto LABEL_593;
                      }
LABEL_585:
                      v248 = 1;
                      goto LABEL_593;
                    }
                    *((_QWORD *)v249 + 4) = v363 + 1;
                    *v363 = 0;
                  }
                  if (!a5)
                    goto LABEL_585;
                  goto LABEL_575;
                }
LABEL_257:
                v405 = 0;
                v168 = 0;
                v169 = 0;
                v170 = 0;
                v414 = 0;
                v171 = 0;
                v172 = 0;
                v173 = 0;
                v174 = 128;
                v175 = v407;
                while (1)
                {
                  v177 = a3 + 48 * v168;
                  v179 = *(_QWORD *)(v177 + 16);
                  v178 = (_QWORD *)(v177 + 16);
                  v402 = v179;
                  v180 = *(_QWORD *)&v175[96 * v168 + 80] + v174;
                  if (v172 < v171)
                  {
                    *(_QWORD *)v172 = v180;
                    v172 += 8;
                    v181 = v178 - 1;
                    if (v170 >= v169)
                      goto LABEL_289;
                    goto LABEL_258;
                  }
                  v182 = v172 - v173;
                  v183 = (v172 - v173) >> 3;
                  v184 = v183 + 1;
                  if ((unint64_t)(v183 + 1) >> 61)
                    goto LABEL_630;
                  if ((v171 - v173) >> 2 > v184)
                    v184 = (v171 - v173) >> 2;
                  if ((unint64_t)(v171 - v173) >= 0x7FFFFFFFFFFFFFF8)
                    v185 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v185 = v184;
                  v399 = (unint64_t)v169;
                  if (v185)
                  {
                    if (v185 >> 61)
                      goto LABEL_631;
                    v186 = v180;
                    v187 = v173;
                    v188 = operator new(8 * v185);
                    v173 = v187;
                    v180 = v186;
                    v189 = &v188[8 * v183];
                    *(_QWORD *)v189 = v186;
                    v190 = (uint64_t)(v189 + 8);
                    if (v172 == v173)
                      goto LABEL_286;
                  }
                  else
                  {
                    v188 = 0;
                    v189 = (char *)(8 * v183);
                    *(_QWORD *)(8 * v183) = v180;
                    v190 = 8 * v183 + 8;
                    if (v172 == v173)
                      goto LABEL_286;
                  }
                  v191 = v172 - 8 - v173;
                  if (v191 < 0x168)
                  {
                    v192 = v172;
                    goto LABEL_285;
                  }
                  if (&v188[v182 - 8 - (v191 & 0xFFFFFFFFFFFFFFF8)] > &v188[v182 - 8])
                  {
                    v192 = v172;
                    goto LABEL_285;
                  }
                  if (&v172[-(v191 & 0xFFFFFFFFFFFFFFF8) - 8] > v172 - 8)
                  {
                    v192 = v172;
                    do
                    {
LABEL_285:
                      v199 = *((_QWORD *)v192 - 1);
                      v192 -= 8;
                      *((_QWORD *)v189 - 1) = v199;
                      v189 -= 8;
                    }
                    while (v192 != v173);
                    goto LABEL_286;
                  }
                  if ((unint64_t)(v172 - &v188[v182]) < 0x20)
                  {
                    v192 = v172;
                    goto LABEL_285;
                  }
                  v193 = (v191 >> 3) + 1;
                  v194 = 8 * (v193 & 0x3FFFFFFFFFFFFFFCLL);
                  v192 = &v172[-v194];
                  v189 -= v194;
                  v195 = &v188[8 * v183 - 16];
                  v196 = v172 - 16;
                  v197 = v193 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v198 = *(_OWORD *)v196;
                    *(v195 - 1) = *((_OWORD *)v196 - 1);
                    *v195 = v198;
                    v195 -= 2;
                    v196 -= 32;
                    v197 -= 4;
                  }
                  while (v197);
                  if (v193 != (v193 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_285;
LABEL_286:
                  v171 = &v188[8 * v185];
                  if (v173)
                  {
                    v200 = v180;
                    operator delete(v173);
                    v180 = v200;
                  }
                  v173 = v189;
                  v172 = (char *)v190;
                  v175 = v407;
                  v169 = (char *)v399;
                  v181 = v178 - 1;
                  if ((unint64_t)v170 >= v399)
                  {
LABEL_289:
                    v201 = (v170 - v414) >> 4;
                    v202 = v201 + 1;
                    if ((unint64_t)(v201 + 1) >> 60)
                      goto LABEL_630;
                    if ((v169 - v414) >> 3 > v202)
                      v202 = (v169 - v414) >> 3;
                    if ((unint64_t)(v169 - v414) >= 0x7FFFFFFFFFFFFFF0)
                      v203 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v203 = v202;
                    if (v203)
                    {
                      if (v203 >> 60)
                        goto LABEL_631;
                      v204 = v171;
                      v205 = v168;
                      v206 = v178;
                      v207 = v180;
                      v208 = v173;
                      v209 = v203;
                      v210 = (char *)operator new(16 * v203);
                      v203 = v209;
                      v173 = v208;
                      v180 = v207;
                      v178 = v206;
                      v168 = v205;
                      v171 = v204;
                      v211 = &v210[16 * v201];
                      *(_OWORD *)v211 = *v181;
                      if (v170 != v414)
                        goto LABEL_298;
LABEL_304:
                      v414 = v211;
                      v175 = v407;
                      v169 = &v210[16 * v203];
                      v176 = v211 + 16;
                      if (!v170)
                        goto LABEL_259;
                    }
                    else
                    {
                      v210 = 0;
                      v211 = (char *)(16 * v201);
                      *(_OWORD *)(16 * v201) = *v181;
                      if (v170 == v414)
                        goto LABEL_304;
LABEL_298:
                      v212 = v211;
                      v175 = v407;
                      do
                      {
                        *((_OWORD *)v212 - 1) = *((_OWORD *)v170 - 1);
                        v212 -= 16;
                        v170 -= 16;
                      }
                      while (v170 != v414);
                      v170 = v414;
                      v414 = v212;
                      v169 = &v210[16 * v203];
                      v176 = v211 + 16;
                      if (!v170)
                        goto LABEL_259;
                    }
                    v213 = v171;
                    v214 = v176;
                    v215 = v175;
                    v216 = v169;
                    v217 = v170;
                    v218 = v173;
                    v219 = v180;
                    operator delete(v217);
                    v180 = v219;
                    v169 = v216;
                    v175 = v215;
                    v176 = v214;
                    v171 = v213;
                    v173 = v218;
                    goto LABEL_259;
                  }
LABEL_258:
                  *(_OWORD *)v170 = *v181;
                  v176 = v170 + 16;
LABEL_259:
                  v405 += v402 + 1;
                  v174 = v180
                       + ((*v178 + 1) & 0xFFFFFFFFFFFFFFFELL)
                       + ((*(_QWORD *)&v175[96 * v168++ + 56] + 1) & 0xFFFFFFFFFFFFFFFELL)
                       + 114;
                  v170 = v176;
                  if (v168 == v391)
                    goto LABEL_364;
                }
              }
              if (v221 > 7)
              {
                *v220 = 0xA3E686372613C21;
                *(_QWORD *)(a2 + 32) += 8;
                if (!a5)
                  goto LABEL_420;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a2, "!<arch>\n", 8uLL);
                if (!a5)
                  goto LABEL_420;
              }
              goto LABEL_313;
            }
          }
          else
          {
            v161 = 0;
            if (!a8)
              goto LABEL_307;
          }
        }
        else
        {
          v162 = 0;
          if (!a8)
            goto LABEL_307;
        }
      }
      else
      {
        v162 = 0;
        v161 = 1;
        if (!a8)
          goto LABEL_307;
      }
      v167 = *(_QWORD **)(a2 + 32);
      if (*(_QWORD *)(a2 + 24) - (_QWORD)v167 > 7uLL)
      {
        *v167 = 0xA3E6E6968743C21;
        *(_QWORD *)(a2 + 32) += 8;
        if (v383 == 6)
        {
LABEL_256:
          v392 = v153;
          v393 = v148;
          if (!v391)
            goto LABEL_363;
          goto LABEL_257;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, "!<thin>\n", 8uLL);
        if (v383 == 6)
          goto LABEL_256;
      }
      if (!a5)
      {
LABEL_420:
        if (v404)
        {
          if (v423 >= 0)
            v259 = (const char *)&v422[1];
          else
            v259 = (const char *)v422[1];
          if (v423 >= 0)
            v260 = HIBYTE(v423);
          else
            v260 = v423;
          v261 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, v259, v260);
          v262 = *((_QWORD *)&v424 + 1);
          v263 = (void *)*((_QWORD *)v261 + 4);
          if (*((_QWORD *)&v424 + 1) <= *((_QWORD *)v261 + 3) - (_QWORD)v263)
          {
            if (*((_QWORD *)&v424 + 1))
            {
              memcpy(v263, (const void *)v424, *((size_t *)&v424 + 1));
              v263 = (void *)(*((_QWORD *)v261 + 4) + v262);
              *((_QWORD *)v261 + 4) = v263;
            }
          }
          else
          {
            v261 = llvm::raw_ostream::write(v261, (const char *)v424, *((size_t *)&v424 + 1));
            v263 = (void *)*((_QWORD *)v261 + 4);
          }
          v264 = *((_QWORD *)&v425 + 1);
          if (*((_QWORD *)&v425 + 1) <= *((_QWORD *)v261 + 3) - (_QWORD)v263)
          {
            if (*((_QWORD *)&v425 + 1))
            {
              memcpy(v263, (const void *)v425, *((size_t *)&v425 + 1));
              *((_QWORD *)v261 + 4) += v264;
            }
          }
          else
          {
            llvm::raw_ostream::write(v261, (const char *)v425, *((size_t *)&v425 + 1));
          }
        }
        v249 = (llvm::raw_ostream *)a2;
        v265 = v407;
        if (!a5 || !v434)
          goto LABEL_496;
        v266 = v432;
        v267 = 4;
        if (v432 != &v433)
        {
          do
          {
            if (*((char *)v266 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(&v482, v266[4], (std::string::size_type)v266[5]);
              LOWORD(v483) = *((_WORD *)v266 + 28);
              v268 = HIBYTE(v482.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v482.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_442:
                size = v268;
                v270 = v266[1];
                if (v270)
                  goto LABEL_446;
                goto LABEL_448;
              }
            }
            else
            {
              v482 = *(std::string *)(v266 + 4);
              LOWORD(v483) = *((_WORD *)v266 + 28);
              v268 = HIBYTE(v482.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v482.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_442;
            }
            size = v482.__r_.__value_.__l.__size_;
            operator delete(v482.__r_.__value_.__l.__data_);
            v270 = v266[1];
            if (v270)
            {
              do
              {
LABEL_446:
                v271 = (char **)v270;
                v270 = *(char **)v270;
              }
              while (v270);
              goto LABEL_439;
            }
            do
            {
LABEL_448:
              v271 = (char **)v266[2];
              v26 = *v271 == (char *)v266;
              v266 = v271;
            }
            while (!v26);
LABEL_439:
            v267 += size + 3;
            v266 = v271;
          }
          while (v271 != &v433);
        }
        v272 = ((v267 + 1) & 0xFFFFFFFE) - v267;
        if ((v371 & 1) != 0)
          v273 = 0;
        else
          v273 = std::chrono::system_clock::now().__d_.__rep_ / 1000000;
        v482.__r_.__value_.__r.__words[0] = (std::string::size_type)"/<ECSYMBOLS>";
        v482.__r_.__value_.__l.__size_ = 12;
        v482.__r_.__value_.__r.__words[2] = (std::string::size_type)"/";
        LOWORD(v484) = 773;
        v274 = (llvm::raw_ostream *)a2;
        v275 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
        v276 = *(_DWORD *)(a2 + 32);
        v277 = *(_DWORD *)(a2 + 16);
        llvm::Twine::print((llvm::Twine *)&v482, (llvm::raw_ostream *)a2);
        v278 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v274 + 80))(v274);
        llvm::raw_ostream::indent(v274, v275 + v276 - (v278 + v277 + *((_DWORD *)v274 + 8)) + *((_DWORD *)v274 + 4) + 16);
        printRestOfMemberHeader((llvm::raw_ostream *)a2, v273, 0, 0, 0, v267 + v272);
        LODWORD(v482.__r_.__value_.__l.__data_) = v434;
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)&v482, 4uLL);
        v279 = v432;
        v265 = v407;
        if (v432 == &v433)
          goto LABEL_492;
        while (1)
        {
          if (*((char *)v279 + 55) < 0)
            std::string::__init_copy_ctor_external(&v482, v279[4], (std::string::size_type)v279[5]);
          else
            v482 = *(std::string *)(v279 + 4);
          LOWORD(v483) = *((_WORD *)v279 + 28);
          *(_WORD *)v416 = v483;
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, v416, 2uLL);
          if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v482.__r_.__value_.__l.__data_);
            v280 = v279[1];
            if (v280)
            {
              do
              {
LABEL_464:
                v281 = (char **)v280;
                v280 = *(char **)v280;
              }
              while (v280);
              goto LABEL_456;
            }
          }
          else
          {
            v280 = v279[1];
            if (v280)
              goto LABEL_464;
          }
          do
          {
            v281 = (char **)v279[2];
            v26 = *v281 == (char *)v279;
            v279 = v281;
          }
          while (!v26);
LABEL_456:
          v279 = v281;
          if (v281 == &v433)
          {
            v282 = v432;
            if (v432 != &v433)
            {
              do
              {
                if (*((char *)v282 + 55) < 0)
                  std::string::__init_copy_ctor_external(&v482, v282[4], (std::string::size_type)v282[5]);
                else
                  v482 = *(std::string *)(v282 + 4);
                LOWORD(v483) = *((_WORD *)v282 + 28);
                if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v283 = &v482;
                else
                  v283 = (std::string *)v482.__r_.__value_.__r.__words[0];
                if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v284 = HIBYTE(v482.__r_.__value_.__r.__words[2]);
                else
                  v284 = v482.__r_.__value_.__l.__size_;
                v285 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v283, v284);
                v286 = (_BYTE *)*((_QWORD *)v285 + 4);
                if ((unint64_t)v286 >= *((_QWORD *)v285 + 3))
                {
                  llvm::raw_ostream::write(v285, 0);
                  if ((SHIBYTE(v482.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_483:
                    v287 = v282[1];
                    if (v287)
                      goto LABEL_487;
                    goto LABEL_489;
                  }
                }
                else
                {
                  *((_QWORD *)v285 + 4) = v286 + 1;
                  *v286 = 0;
                  if ((SHIBYTE(v482.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_483;
                }
                operator delete(v482.__r_.__value_.__l.__data_);
                v287 = v282[1];
                if (v287)
                {
                  do
                  {
LABEL_487:
                    v288 = (char **)v287;
                    v287 = *(char **)v287;
                  }
                  while (v287);
                  goto LABEL_471;
                }
                do
                {
LABEL_489:
                  v288 = (char **)v282[2];
                  v26 = *v288 == (char *)v282;
                  v282 = v288;
                }
                while (!v26);
LABEL_471:
                v282 = v288;
              }
              while (v288 != &v433);
            }
LABEL_492:
            v249 = (llvm::raw_ostream *)a2;
            if (v272)
            {
              v289 = v267 - ((v267 + 1) & 0xFFFFFFFE);
              do
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a2, 0);
                v258 = __CFADD__(v289++, 1);
              }
              while (!v258);
            }
LABEL_496:
            if (v265 != v415)
            {
              v290 = v407;
              do
              {
                v291 = (char)v290[47];
                if (v291 >= 0)
                  v292 = (const char *)(v290 + 24);
                else
                  v292 = (const char *)*((_QWORD *)v290 + 3);
                if (v291 >= 0)
                  v293 = v290[47];
                else
                  v293 = *((_QWORD *)v290 + 4);
                v294 = llvm::raw_ostream::write(v249, v292, v293);
                v295 = (const void *)*((_QWORD *)v290 + 6);
                v296 = *((_QWORD *)v290 + 7);
                v297 = (void *)*((_QWORD *)v294 + 4);
                if (v296 <= *((_QWORD *)v294 + 3) - (_QWORD)v297)
                {
                  if (v296)
                  {
                    memcpy(v297, v295, *((_QWORD *)v290 + 7));
                    v297 = (void *)(*((_QWORD *)v294 + 4) + v296);
                    *((_QWORD *)v294 + 4) = v297;
                  }
                }
                else
                {
                  v294 = llvm::raw_ostream::write(v294, (const char *)v295, *((_QWORD *)v290 + 7));
                  v297 = (void *)*((_QWORD *)v294 + 4);
                }
                v298 = (const char *)*((_QWORD *)v290 + 8);
                v299 = *((_QWORD *)v290 + 9);
                if (v299 > *((_QWORD *)v294 + 3) - (_QWORD)v297)
                {
                  llvm::raw_ostream::write(v294, v298, *((_QWORD *)v290 + 9));
                }
                else if (v299)
                {
                  memcpy(v297, v298, *((_QWORD *)v290 + 9));
                  *((_QWORD *)v294 + 4) += v299;
                }
                v290 += 96;
                v249 = (llvm::raw_ostream *)a2;
              }
              while (v290 != v415);
            }
LABEL_602:
            if (*((_QWORD *)v249 + 4) != *((_QWORD *)v249 + 2))
              llvm::raw_ostream::flush_nonempty(v249);
            *v374 = 0;
LABEL_605:
            v367 = *((_QWORD *)&v426 + 1);
            *((_QWORD *)&v426 + 1) = 0;
            if (v367)
              (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
            if (SHIBYTE(v423) < 0)
              operator delete(v422[1]);
            if (v421[0])
            {
              v421[1] = v421[0];
              operator delete(v421[0]);
            }
            if ((v394 & 1) != 0)
            {
              if (v407)
                (*(void (**)(unsigned __int8 *))(*(_QWORD *)v407 + 8))(v407);
              goto LABEL_625;
            }
            if (!v407)
              goto LABEL_625;
            if (v407 == v415)
            {
LABEL_614:
              operator delete(v407);
              goto LABEL_625;
            }
            while (1)
            {
              v368 = *((_QWORD *)v415 - 1);
              *((_QWORD *)v415 - 1) = 0;
              if (v368)
                (*(void (**)(uint64_t))(*(_QWORD *)v368 + 8))(v368);
              if (((char)*(v415 - 49) & 0x80000000) == 0)
                break;
              operator delete(*((void **)v415 - 9));
              v369 = (void *)*((_QWORD *)v415 - 12);
              if (v369)
                goto LABEL_622;
LABEL_615:
              v415 -= 96;
              if (v415 == v407)
                goto LABEL_614;
            }
            v369 = (void *)*((_QWORD *)v415 - 12);
            if (!v369)
              goto LABEL_615;
LABEL_622:
            *((_QWORD *)v415 - 11) = v369;
            operator delete(v369);
            goto LABEL_615;
          }
        }
      }
LABEL_313:
      v222 = (v415 - v407) / 96;
      if (v161)
      {
        if (v383 == 5)
          v223 = &v428;
        else
          v223 = 0;
        v162 = computeHeadersSize(v383, (v415 - v407) / 96, v404, v410, v457, v223);
      }
      writeSymbolTable((llvm::raw_ostream *)a2, v383, v371, (uint64_t)v407, v222, v456, v457, v162, v410, 0, 0, 0);
      if (v383 != 5)
        goto LABEL_420;
      v224 = 4 * v222 + 8;
      v225 = v429;
      if (v429 == &v430)
      {
LABEL_320:
        v226 = (v224 + 1) & 0xFFFFFFFE;
        v227 = v226 - v224;
        writeSymbolTableHeader((llvm::raw_ostream *)a2, 5, v371, v224 + (v226 - v224));
        LODWORD(v482.__r_.__value_.__l.__data_) = (v415 - v407) / 96;
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)&v482, 4uLL);
        if (v407 != v415)
        {
          v228 = v407 + 47;
          v229 = 96 * v222;
          do
          {
            LODWORD(v482.__r_.__value_.__l.__data_) = v162;
            llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)&v482, 4uLL);
            if ((char)*v228 < 0)
              v234 = *(_QWORD *)(v228 - 15);
            else
              v234 = *v228;
            v162 = v234 + v162 + *(_QWORD *)(v228 + 9) + *(_QWORD *)(v228 + 25);
            v228 += 96;
            v229 -= 96;
          }
          while (v229);
        }
        LODWORD(v482.__r_.__value_.__l.__data_) = v431;
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)&v482, 4uLL);
        v236 = v429;
        if (v429 == &v430)
          goto LABEL_416;
        while (1)
        {
          if (*((char *)v236 + 55) < 0)
            std::string::__init_copy_ctor_external(&v482, v236[4], (std::string::size_type)v236[5]);
          else
            v482 = *(std::string *)(v236 + 4);
          LOWORD(v483) = *((_WORD *)v236 + 28);
          *(_WORD *)v416 = v483;
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, v416, 2uLL);
          if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v482.__r_.__value_.__l.__data_);
            v237 = v236[1];
            if (v237)
            {
              do
              {
LABEL_356:
                v238 = (char **)v237;
                v237 = *(char **)v237;
              }
              while (v237);
              goto LABEL_348;
            }
          }
          else
          {
            v237 = v236[1];
            if (v237)
              goto LABEL_356;
          }
          do
          {
            v238 = (char **)v236[2];
            v26 = *v238 == (char *)v236;
            v236 = v238;
          }
          while (!v26);
LABEL_348:
          v236 = v238;
          if (v238 == &v430)
          {
            v250 = v429;
            if (v429 == &v430)
            {
LABEL_416:
              if (v227)
              {
                v257 = v224 - ((v224 + 1) & 0xFFFFFFFE);
                do
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)a2, 0);
                  v258 = __CFADD__(v257++, 1);
                }
                while (!v258);
              }
              goto LABEL_420;
            }
            while (2)
            {
              if (*((char *)v250 + 55) < 0)
                std::string::__init_copy_ctor_external(&v482, v250[4], (std::string::size_type)v250[5]);
              else
                v482 = *(std::string *)(v250 + 4);
              LOWORD(v483) = *((_WORD *)v250 + 28);
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v251 = &v482;
              else
                v251 = (std::string *)v482.__r_.__value_.__r.__words[0];
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v252 = HIBYTE(v482.__r_.__value_.__r.__words[2]);
              else
                v252 = v482.__r_.__value_.__l.__size_;
              v253 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v251, v252);
              v254 = (_BYTE *)*((_QWORD *)v253 + 4);
              if ((unint64_t)v254 >= *((_QWORD *)v253 + 3))
              {
                llvm::raw_ostream::write(v253, 0);
                if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_410;
LABEL_407:
                v255 = v250[1];
                if (!v255)
                  goto LABEL_413;
                do
                {
LABEL_411:
                  v256 = (char **)v255;
                  v255 = *(char **)v255;
                }
                while (v255);
              }
              else
              {
                *((_QWORD *)v253 + 4) = v254 + 1;
                *v254 = 0;
                if ((SHIBYTE(v482.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_407;
LABEL_410:
                operator delete(v482.__r_.__value_.__l.__data_);
                v255 = v250[1];
                if (v255)
                  goto LABEL_411;
                do
                {
LABEL_413:
                  v256 = (char **)v250[2];
                  v26 = *v256 == (char *)v250;
                  v250 = v256;
                }
                while (!v26);
              }
              v250 = v256;
              if (v256 == &v430)
                goto LABEL_416;
              continue;
            }
          }
        }
      }
      while (1)
      {
        if (*((char *)v225 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v482, v225[4], (std::string::size_type)v225[5]);
          LOWORD(v483) = *((_WORD *)v225 + 28);
          v230 = HIBYTE(v482.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v482.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_325:
            v231 = v230;
            v232 = v225[1];
            if (v232)
              goto LABEL_329;
            goto LABEL_331;
          }
        }
        else
        {
          v482 = *(std::string *)(v225 + 4);
          LOWORD(v483) = *((_WORD *)v225 + 28);
          v230 = HIBYTE(v482.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v482.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_325;
        }
        v231 = v482.__r_.__value_.__l.__size_;
        operator delete(v482.__r_.__value_.__l.__data_);
        v232 = v225[1];
        if (v232)
        {
          do
          {
LABEL_329:
            v233 = (char **)v232;
            v232 = *(char **)v232;
          }
          while (v232);
          goto LABEL_322;
        }
        do
        {
LABEL_331:
          v233 = (char **)v225[2];
          v26 = *v233 == (char *)v225;
          v225 = v233;
        }
        while (!v26);
LABEL_322:
        v224 += v231 + 3;
        v225 = v233;
        if (v233 == &v430)
          goto LABEL_320;
      }
    }
    v131 = v444;
    v132 = (v445 + 1) & 0xFFFFFFFE;
    memset(v416, 0, 24);
    LODWORD(v482.__r_.__value_.__r.__words[1]) = 0;
    v485 = 0;
    v486 = 0;
    v487 = 1;
    v483 = 0;
    v484 = 0;
    v482.__r_.__value_.__r.__words[2] = 0;
    v482.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
    v488 = (void **)v416;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v482, 0, 0, 0);
    v133 = (*(uint64_t (**)(llvm::raw_string_ostream *))(v482.__r_.__value_.__r.__words[0] + 80))((llvm::raw_string_ostream *)&v482);
    v134 = (int)v484;
    v135 = v482.__r_.__value_.__r.__words[2];
    if ((unint64_t)(v483 - (_QWORD)v484) > 1)
      *v484++ = 12079;
    else
      llvm::raw_ostream::write((llvm::raw_ostream *)&v482, "//", 2uLL);
    v136 = (*(uint64_t (**)(llvm::raw_string_ostream *))(v482.__r_.__value_.__r.__words[0] + 80))((llvm::raw_string_ostream *)&v482);
    llvm::raw_ostream::indent((llvm::raw_ostream *)&v482, v133 + v134 - (v136 + v135 + (_DWORD)v484) + LODWORD(v482.__r_.__value_.__r.__words[2]) + 48);
    v137 = (*(uint64_t (**)(llvm::raw_string_ostream *))(v482.__r_.__value_.__r.__words[0] + 80))((llvm::raw_string_ostream *)&v482);
    v138 = (int)v484;
    v139 = v482.__r_.__value_.__r.__words[2];
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v482, ((_DWORD)v130 + 1) & 0xFFFFFFFE);
    v140 = (*(uint64_t (**)(llvm::raw_string_ostream *))(v482.__r_.__value_.__r.__words[0] + 80))((llvm::raw_string_ostream *)&v482);
    llvm::raw_ostream::indent((llvm::raw_ostream *)&v482, v137 + v138 - (v140 + v139 + (_DWORD)v484) + LODWORD(v482.__r_.__value_.__r.__words[2]) + 10);
    if ((unint64_t)(v483 - (_QWORD)v484) > 1)
    {
      *v484++ = 2656;
      v141 = v132 - v130;
      if (v484 == (_WORD *)v482.__r_.__value_.__r.__words[2])
      {
LABEL_211:
        v142 = *(void **)v416;
        *(_QWORD *)&v480 = *(_QWORD *)&v416[8];
        *(_QWORD *)((char *)&v480 + 7) = *(_QWORD *)&v416[15];
        v143 = v416[23];
        memset(v416, 0, 24);
        v26 = v141 == 0;
        v144 = v141 != 0;
        if (v26)
          v145 = "";
        else
          v145 = "\n";
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v482);
        if ((v416[23] & 0x80000000) != 0)
          operator delete(*(void **)v416);
        if (v421[0])
        {
          v421[1] = v421[0];
          operator delete(v421[0]);
        }
        v421[0] = 0;
        v421[1] = 0;
        v422[0] = 0;
        if (SHIBYTE(v423) < 0)
          operator delete(v422[1]);
        v422[1] = v142;
        *(_QWORD *)&v423 = v480;
        *(_QWORD *)((char *)&v423 + 7) = *(_QWORD *)((char *)&v480 + 7);
        HIBYTE(v423) = v143;
        *(_QWORD *)&v424 = v131;
        *((_QWORD *)&v424 + 1) = v130;
        *(_QWORD *)&v425 = v145;
        *((_QWORD *)&v425 + 1) = v144;
        v146 = *((_QWORD *)&v426 + 1);
        v426 = 0uLL;
        if (v146)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
          v143 = HIBYTE(v423);
          v130 = *((_QWORD *)&v424 + 1);
          v144 = *((_QWORD *)&v425 + 1);
        }
        if ((v143 & 0x80u) == 0)
          v147 = v143;
        else
          v147 = v423;
        v404 = v147 + v130 + v144;
        v127 = v407;
        goto LABEL_226;
      }
    }
    else
    {
      v141 = v132 - v130;
      if (v484 == (_WORD *)v482.__r_.__value_.__r.__words[2])
        goto LABEL_211;
    }
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v482);
    goto LABEL_211;
  }
LABEL_200:
  *v374 = v123;
  if (!v123)
    goto LABEL_201;
LABEL_625:
  llvm::LLVMContext::~LLVMContext(&v427);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)&v432, v433);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)&v429, v430);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v435);
  if (v444 != &v447)
    free(v444);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v447);
  if (v456 != &v459)
    free(v456);
}

uint64_t computeHeadersSize(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 v24;
  std::string::size_type size;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  unsigned __int8 v29;
  std::string::size_type v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v10 = qword_181262A70[a1];
  v11 = a4 + 1;
  if ((a1 - 2) > 2)
  {
    v12 = a5 + v10 * v11;
    if (a1 == 6)
    {
      v14 = 0;
      goto LABEL_7;
    }
    v13 = 2;
  }
  else
  {
    v12 = a5 + 2 * v11 * v10;
    v13 = 8;
  }
  v14 = ((v13 + (_DWORD)v12 - 1) & -v13) - v12;
LABEL_7:
  v15 = v14 + v12;
  v41 = 0;
  v42 = 0;
  v40 = &v43;
  LODWORD(v33.__r_.__value_.__r.__words[1]) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v34 = 0;
  v35 = 0;
  v33.__r_.__value_.__r.__words[2] = 0;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E0E22B88;
  v39 = &v40;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v33, 0, 0, 0);
  writeSymbolTableHeader((llvm::raw_ostream *)&v33, a1, 1, v15);
  v16 = v41;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v33);
  if (v40 != &v43)
    free(v40);
  v17 = v15 + v16 + 8;
  if (!a6)
    return v17 + a3;
  v18 = 4 * a2 + 8;
  v19 = (_QWORD *)a6[1];
  if (v19 != a6 + 2)
  {
    do
    {
      if (*((char *)v19 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v19[4], v19[5]);
        LOWORD(v34) = *((_WORD *)v19 + 28);
        v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_18:
          size = v24;
          v26 = (_QWORD *)v19[1];
          if (v26)
            goto LABEL_22;
          goto LABEL_24;
        }
      }
      else
      {
        v33 = *(std::string *)(v19 + 4);
        LOWORD(v34) = *((_WORD *)v19 + 28);
        v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
      }
      size = v33.__r_.__value_.__l.__size_;
      operator delete(v33.__r_.__value_.__l.__data_);
      v26 = (_QWORD *)v19[1];
      if (v26)
      {
        do
        {
LABEL_22:
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
        goto LABEL_15;
      }
      do
      {
LABEL_24:
        v27 = (_QWORD *)v19[2];
        v28 = *v27 == (_QWORD)v19;
        v19 = v27;
      }
      while (!v28);
LABEL_15:
      v18 += size + 3;
      v19 = v27;
    }
    while (v27 != a6 + 2);
  }
  v17 += v16 + v18 + (((_DWORD)v18 + 1) & 0xFFFFFFFE) - v18;
  if (a6[6])
  {
    v20 = (_QWORD *)a6[4];
    v21 = a6 + 5;
    v22 = 4;
    if (v20 == v21)
    {
LABEL_13:
      v17 += v16 + v22 + (((_DWORD)v22 + 1) & 0xFFFFFFFE) - v22;
      return v17 + a3;
    }
    while (1)
    {
      if (*((char *)v20 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v20[4], v20[5]);
        LOWORD(v34) = *((_WORD *)v20 + 28);
        v29 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_30:
          v30 = v29;
          v31 = (_QWORD *)v20[1];
          if (v31)
            goto LABEL_34;
          goto LABEL_36;
        }
      }
      else
      {
        v33 = *(std::string *)(v20 + 4);
        LOWORD(v34) = *((_WORD *)v20 + 28);
        v29 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_30;
      }
      v30 = v33.__r_.__value_.__l.__size_;
      operator delete(v33.__r_.__value_.__l.__data_);
      v31 = (_QWORD *)v20[1];
      if (v31)
      {
        do
        {
LABEL_34:
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
        goto LABEL_27;
      }
      do
      {
LABEL_36:
        v32 = (_QWORD *)v20[2];
        v28 = *v32 == (_QWORD)v20;
        v20 = v32;
      }
      while (!v28);
LABEL_27:
      v22 += v30 + 3;
      v20 = v32;
      if (v32 == v21)
        goto LABEL_13;
    }
  }
  return v17 + a3;
}

llvm::raw_ostream *writeSymbolTable(llvm::raw_ostream *result, int a2, char a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, unint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  llvm::raw_ostream *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  llvm::raw_ostream *v36;
  size_t v37;
  size_t __n;
  unsigned int v40;
  uint64_t v41;
  char v42[8];

  v16 = result;
  if ((a2 - 3) >= 2 && a7 == 0)
  {
    if (a2 != 5)
      return result;
    __n = a7;
    v20 = 4;
    LOBYTE(v19) = 2;
  }
  else
  {
    __n = a7;
    v18 = a2;
    v19 = *(_QWORD *)((char *)&unk_181262A38 + v18 * 8);
    v20 = qword_181262A70[v18];
  }
  v21 = a9 + 1;
  v40 = a2 - 2;
  if ((a2 - 2) > 2)
  {
    v22 = __n + v20 * v21;
    if (a2 == 6)
    {
      writeSymbolTableHeader(result, 6, a3, v22);
      v24 = 0;
LABEL_20:
      v26 = bswap64(a9);
      goto LABEL_21;
    }
    v23 = 2;
  }
  else
  {
    v22 = __n + 2 * v21 * v20;
    v23 = 8;
  }
  v25 = (v23 + v22 + 0xFFFFFFFFLL) & -v23;
  v24 = v25 - v22;
  writeSymbolTableHeader(result, a2, a3, v22 + (v25 - v22));
  if (v40 > 2)
  {
    if (((1 << a2) & 0x2D) != 0)
    {
      *(_DWORD *)v42 = bswap32(a9);
      llvm::raw_ostream::write(v16, v42, 4uLL);
      if (!a5)
        goto LABEL_55;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  v26 = (unint64_t)(2 * a9) << v19;
  if (a2 != 4)
  {
    *(_DWORD *)v42 = (unint64_t)(2 * a9) << v19;
    llvm::raw_ostream::write(v16, v42, 4uLL);
    if (!a5)
      goto LABEL_55;
    goto LABEL_22;
  }
LABEL_21:
  *(_QWORD *)v42 = v26;
  llvm::raw_ostream::write(v16, v42, 8uLL);
  if (a5)
  {
LABEL_22:
    v41 = a4 + 96 * a5;
    do
    {
      while (1)
      {
        if (a2 != 6)
          goto LABEL_33;
        v28 = *(_QWORD *)(a4 + 88);
        a8 += *(_QWORD *)(a4 + 80);
        if (v28)
          break;
        if ((a12 & 1) != 0)
          goto LABEL_29;
LABEL_33:
        v31 = *(_DWORD **)a4;
        v30 = *(_DWORD **)(a4 + 8);
        if (*(_DWORD **)a4 != v30)
        {
          v32 = bswap64(a8);
          if (v40 >= 3)
            v33 = v32;
          else
            v33 = a8;
          v34 = bswap32(a8);
          if (v40 >= 3)
            v35 = v34;
          else
            v35 = a8;
          if (v40 > 2)
          {
            if (a2 <= 5 && ((1 << a2) & 0x2D) != 0)
            {
              do
              {
                *(_DWORD *)v42 = v35;
                llvm::raw_ostream::write(v16, v42, 4uLL);
                ++v31;
              }
              while (v31 != v30);
            }
            else
            {
              do
              {
                *(_QWORD *)v42 = v33;
                llvm::raw_ostream::write(v16, v42, 8uLL);
                ++v31;
              }
              while (v31 != v30);
            }
            goto LABEL_23;
          }
          do
          {
LABEL_47:
            if (a2 == 4)
            {
              *(_QWORD *)v42 = *v31;
              llvm::raw_ostream::write(v16, v42, 8uLL);
            }
            else
            {
              *(_DWORD *)v42 = *v31;
              llvm::raw_ostream::write(v16, v42, 4uLL);
              if (((1 << a2) & 0x2D) != 0)
              {
                *(_DWORD *)v42 = v35;
                llvm::raw_ostream::write(v16, v42, 4uLL);
                if (++v31 == v30)
                  break;
                goto LABEL_47;
              }
            }
            *(_QWORD *)v42 = v33;
            llvm::raw_ostream::write(v16, v42, 8uLL);
            ++v31;
          }
          while (v31 != v30);
        }
LABEL_23:
        if (*(char *)(a4 + 47) < 0)
          v27 = *(_QWORD *)(a4 + 32);
        else
          v27 = *(unsigned __int8 *)(a4 + 47);
        a8 += v27 + *(_QWORD *)(a4 + 72) + *(_QWORD *)(a4 + 56);
        a4 += 96;
        if (a4 == v41)
          goto LABEL_55;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 64))(v28) == a12)
        goto LABEL_33;
LABEL_29:
      if (*(char *)(a4 + 47) < 0)
        v29 = *(_QWORD *)(a4 + 32);
      else
        v29 = *(unsigned __int8 *)(a4 + 47);
      a8 += v29 + *(_QWORD *)(a4 + 56) + *(_QWORD *)(a4 + 72);
      a4 += 96;
    }
    while (a4 != v41);
  }
LABEL_55:
  if (v40 < 3)
  {
    if (a2 == 4)
    {
      *(_QWORD *)v42 = __n;
      v36 = v16;
      v37 = 8;
    }
    else
    {
      *(_DWORD *)v42 = __n;
      v36 = v16;
      v37 = 4;
    }
    llvm::raw_ostream::write(v36, v42, v37);
  }
  result = (llvm::raw_ostream *)*((_QWORD *)v16 + 4);
  if (__n <= *((_QWORD *)v16 + 3) - (_QWORD)result)
  {
    if (__n)
    {
      result = (llvm::raw_ostream *)memcpy(result, a6, __n);
      *((_QWORD *)v16 + 4) += __n;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(v16, (const char *)a6, __n);
  }
  for (; v24; result = llvm::raw_ostream::write(v16, 0))
    --v24;
  return result;
}

void getSymbols(uint64_t a1, __n128 *this, __int16 a3, llvm::raw_ostream *a4, _BYTE *a5)
{
  uint64_t v5;
  unsigned __int32 v9;
  unsigned __int16 *v10;
  int v11;
  uint64_t **v12;
  unint64_t v13;
  _BOOL4 v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  unint64_t v26;
  char v27;
  int v28;
  uint64_t **v29;
  uint64_t v30;
  size_t v31;
  void **v32;
  _QWORD *v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  int v38;
  _BOOL4 v39;
  BOOL v40;
  uint64_t *v41;
  const void *v42;
  _QWORD *v43;
  const void *v44;
  int v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int v61;
  const char *v62;
  size_t v63;
  llvm::raw_ostream *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  unint64_t v82;
  char *v83;
  int v84;
  void *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  void *v93;
  uint64_t **v94;
  void *v95;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  void *v101;
  size_t v102;
  uint64_t v103;
  __int16 v104;
  __n128 v105[2];
  void *__p;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  int v113;
  void **v114;
  void *v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;

  v5 = a1;
  v119 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    *(_BYTE *)(a1 + 24) &= ~1u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    return;
  }
  if (!a5)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (!*a5)
    goto LABEL_34;
  v9 = this->n128_u32[2];
  if (v9 == 2)
  {
    v13 = this[1].n128_u64[0];
    goto LABEL_36;
  }
  if (v9 != 3)
  {
    if (v9 != 10)
      goto LABEL_34;
    v10 = (unsigned __int16 *)this[3].n128_u64[0];
    if (v10)
    {
      v11 = *v10;
      if (this[13].n128_u64[1] && (v11 == 34404 || v11 == 43620))
        goto LABEL_38;
LABEL_37:
      if (v11 != 43620)
        goto LABEL_38;
LABEL_34:
      v12 = (uint64_t **)(a5 + 8);
      goto LABEL_39;
    }
    v13 = this[3].n128_u64[1];
LABEL_36:
    v11 = *(unsigned __int16 *)(v13 + 6);
    goto LABEL_37;
  }
  llvm::object::Binary::getMemoryBufferRef(this, v105);
  llvm::getBitcodeTargetTriple((uint64_t)v105, (uint64_t)&v115);
  if ((v118 & 1) != 0)
  {
    v16 = 0;
LABEL_28:
    v17 = v115;
    v115 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
    goto LABEL_33;
  }
  v104 = 260;
  v101 = &v115;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v101);
  v16 = (_DWORD)v109 == 3 && HIDWORD(v109) == 35 || (_DWORD)v109 == 38;
  if (SHIBYTE(v108) < 0)
    operator delete(__p);
  if ((v118 & 1) != 0)
    goto LABEL_28;
  if (v117 < 0)
    operator delete(v115);
LABEL_33:
  if (!v16)
    goto LABEL_34;
LABEL_38:
  v12 = (uint64_t **)(a5 + 32);
LABEL_39:
  v18 = (void *)(*(uint64_t (**)(__n128 *))(this->n128_u64[0] + 48))(this);
  v20 = v19;
  v21 = (*(uint64_t (**)(__n128 *))(this->n128_u64[0] + 56))(this);
  v115 = v18;
  v116 = v20;
  if (v18 != (void *)v21)
  {
    v25 = (void *)v21;
    v97 = v5;
    if (v12)
    {
      v24 = 0;
      v23 = 0;
      v100 = v12 + 1;
      v94 = (uint64_t **)(a5 + 8);
      v22 = 0;
      v95 = (void *)v21;
      while (1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, void *))(*(_QWORD *)v116 + 40))(&__p, v116, v18);
        if ((v107 & 1) != 0)
          goto LABEL_174;
        if ((__p & 0x83) == 2)
          break;
LABEL_45:
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v116 + 24))(v116, &v115);
        v18 = v115;
        if (v115 == v25)
          goto LABEL_41;
      }
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v107 = 0;
      v111 = 0;
      v112 = 0;
      v113 = 1;
      v109 = 0;
      v110 = 0;
      v108 = 0;
      __p = &unk_1E0E22B10;
      v114 = &v101;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
      (*(void (**)(__n128 *__return_ptr, uint64_t, void **, void *))(*(_QWORD *)v116 + 32))(v105, v116, &__p, v115);
      v26 = v105[0].n128_u64[0];
      if (v105[0].n128_u64[0])
      {
        v27 = 0;
        *(_BYTE *)(v5 + 24) |= 1u;
        *(_QWORD *)v5 = v26;
        v28 = 1;
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
        if (SHIBYTE(v103) < 0)
          goto LABEL_94;
        goto LABEL_95;
      }
      v98 = (unint64_t)v22;
      v29 = v12;
      v30 = *v100;
      if (*v100)
      {
        v31 = v103 >= 0 ? HIBYTE(v103) : v102;
        v32 = v103 >= 0 ? &v101 : (void **)v101;
        v33 = v100;
        do
        {
          v34 = *(char *)(v30 + 55);
          if (v34 >= 0)
            v35 = *(unsigned __int8 *)(v30 + 55);
          else
            v35 = *(_QWORD *)(v30 + 40);
          if (v34 >= 0)
            v36 = (const void *)(v30 + 32);
          else
            v36 = *(const void **)(v30 + 32);
          if (v31 >= v35)
            v37 = v35;
          else
            v37 = v31;
          v38 = memcmp(v36, v32, v37);
          v39 = v35 < v31;
          if (v38)
            v39 = v38 < 0;
          v40 = !v39;
          if (v39)
            v41 = (uint64_t *)(v30 + 8);
          else
            v41 = (uint64_t *)v30;
          if (v40)
            v33 = (_QWORD *)v30;
          v30 = *v41;
        }
        while (*v41);
        if (v33 != v100)
        {
          v44 = (const void *)v33[4];
          v43 = v33 + 4;
          v42 = v44;
          v45 = *((char *)v43 + 23);
          if (v45 >= 0)
            v46 = *((unsigned __int8 *)v43 + 23);
          else
            v46 = v43[1];
          if (v45 >= 0)
            v47 = v43;
          else
            v47 = v42;
          if (v46 >= v31)
            v48 = v31;
          else
            v48 = v46;
          v49 = memcmp(v32, v47, v48);
          v50 = v31 >= v46;
          if (v49)
            v50 = v49 >= 0;
          if (v50)
          {
            v27 = 0;
            v28 = 3;
            v5 = v97;
            v12 = v29;
            goto LABEL_93;
          }
        }
      }
      v105[0].n128_u64[0] = (unint64_t)&v101;
      v12 = v29;
      *((_WORD *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, (const void **)&v101, (uint64_t)&std::piecewise_construct, (__int128 **)v105)+ 28) = a3;
      if (v29 != v94)
      {
        v28 = 0;
        v27 = 1;
        v5 = v97;
LABEL_93:
        v25 = v95;
        v22 = (char *)v98;
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
        if (SHIBYTE(v103) < 0)
LABEL_94:
          operator delete(v101);
LABEL_95:
        if ((v27 & 1) == 0 && v28 != 3 && v28)
          goto LABEL_172;
        goto LABEL_45;
      }
      v51 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a4 + 80))(a4)
          + *((_DWORD *)a4 + 8)
          - *((_DWORD *)a4 + 4);
      v22 = (char *)v98;
      v25 = v95;
      if ((unint64_t)v23 < v98)
      {
        *(_DWORD *)v23 = v51;
        v23 += 4;
        v5 = v97;
        goto LABEL_118;
      }
      v52 = (v23 - v24) >> 2;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 62)
        goto LABEL_175;
      if ((uint64_t)(v98 - (_QWORD)v24) >> 1 > v53)
        v53 = (uint64_t)(v98 - (_QWORD)v24) >> 1;
      v54 = 0x3FFFFFFFFFFFFFFFLL;
      if (v98 - (unint64_t)v24 < 0x7FFFFFFFFFFFFFFCLL)
        v54 = v53;
      v99 = v54;
      if (v54)
      {
        if (v54 >> 62)
          goto LABEL_176;
        v55 = operator new(4 * v54);
        v56 = &v55[4 * v52];
        *(_DWORD *)v56 = v51;
        v57 = (uint64_t)(v56 + 4);
        if (v23 != v24)
        {
LABEL_109:
          v58 = v23 - 4 - v24;
          v5 = v97;
          if (v58 >= 0xBC
            && &v55[v23 - v24 - 4 - (v58 & 0xFFFFFFFFFFFFFFFCLL)] <= &v55[v23 - v24 - 4]
            && &v23[-(v58 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v23 - 4
            && (unint64_t)(v24 - v55) >= 0x20)
          {
            v66 = (v58 >> 2) + 1;
            v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
            v59 = &v23[-v67];
            v56 -= v67;
            v68 = &v55[4 * v52 - 16];
            v69 = v23 - 16;
            v70 = v66 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v71 = *(_OWORD *)v69;
              *(v68 - 1) = *((_OWORD *)v69 - 1);
              *v68 = v71;
              v68 -= 2;
              v69 -= 32;
              v70 -= 8;
            }
            while (v70);
            v23 = (char *)v57;
            v60 = v99;
            if (v66 == (v66 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_115:
              v22 = &v55[4 * v60];
              if (!v24)
              {
LABEL_117:
                v24 = v56;
LABEL_118:
                if (v103 >= 0)
                  v62 = (const char *)&v101;
                else
                  v62 = (const char *)v101;
                if (v103 >= 0)
                  v63 = HIBYTE(v103);
                else
                  v63 = v102;
                v64 = llvm::raw_ostream::write(a4, v62, v63);
                v65 = (_BYTE *)*((_QWORD *)v64 + 4);
                if ((unint64_t)v65 >= *((_QWORD *)v64 + 3))
                {
                  llvm::raw_ostream::write(v64, 0);
                  v28 = 0;
                  v27 = 1;
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
                  if ((SHIBYTE(v103) & 0x80000000) == 0)
                    goto LABEL_95;
                }
                else
                {
                  v28 = 0;
                  *((_QWORD *)v64 + 4) = v65 + 1;
                  *v65 = 0;
                  v27 = 1;
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
                  if ((SHIBYTE(v103) & 0x80000000) == 0)
                    goto LABEL_95;
                }
                goto LABEL_94;
              }
LABEL_116:
              operator delete(v24);
              goto LABEL_117;
            }
          }
          else
          {
            v59 = v23;
            v23 = (char *)v57;
            v60 = v99;
          }
          do
          {
            v61 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v56 - 1) = v61;
            v56 -= 4;
          }
          while (v59 != v24);
          goto LABEL_115;
        }
      }
      else
      {
        v55 = 0;
        v56 = (char *)(4 * v52);
        *(_DWORD *)(4 * v52) = v51;
        v57 = 4 * v52 + 4;
        if (v23 != v24)
          goto LABEL_109;
      }
      v5 = v97;
      v23 = (char *)v57;
      v22 = &v55[4 * v99];
      if (!v24)
        goto LABEL_117;
      goto LABEL_116;
    }
    v72 = 0;
    v73 = 0;
    v22 = 0;
    while (1)
    {
      (*(void (**)(void **__return_ptr, uint64_t, void *))(*(_QWORD *)v116 + 40))(&__p, v116, v18);
      if ((v107 & 1) != 0)
      {
LABEL_174:
        v93 = __p;
        __p = 0;
        v101 = v93;
        llvm::report_fatal_error((uint64_t *)&v101, 1);
      }
      if ((__p & 0x83) != 2)
      {
        v24 = v72;
        v23 = v73;
        goto LABEL_138;
      }
      v74 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a4 + 80))(a4)
          + *((_DWORD *)a4 + 8)
          - *((_DWORD *)a4 + 4);
      if (v73 < v22)
      {
        *(_DWORD *)v73 = v74;
        v24 = v72;
        v23 = v73 + 4;
        goto LABEL_160;
      }
      v75 = v22;
      v76 = (v73 - v72) >> 2;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 62)
LABEL_175:
        abort();
      v78 = v75 - v72;
      v79 = (v75 - v72) >> 1;
      if (v79 > v77)
        v77 = v79;
      v80 = v78 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v77;
      if (v80)
      {
        if (v80 >> 62)
LABEL_176:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v81 = operator new(4 * v80);
        v24 = &v81[4 * v76];
        *(_DWORD *)v24 = v74;
        v23 = v24 + 4;
        if (v73 == v72)
        {
LABEL_165:
          v5 = v97;
          v22 = &v81[4 * v80];
          if (!v72)
            goto LABEL_160;
LABEL_159:
          operator delete(v72);
          goto LABEL_160;
        }
      }
      else
      {
        v81 = 0;
        v24 = (char *)(4 * v76);
        *(_DWORD *)(4 * v76) = v74;
        v23 = (char *)(4 * v76 + 4);
        if (v73 == v72)
          goto LABEL_165;
      }
      v82 = v73 - 4 - v72;
      if (v82 < 0xBC
        || &v81[v73 - v72 - 4 - (v82 & 0xFFFFFFFFFFFFFFFCLL)] > &v81[v73 - v72 - 4]
        || &v73[-(v82 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v73 - 4
        || (unint64_t)(v72 - v81) < 0x20)
      {
        break;
      }
      v87 = (v82 >> 2) + 1;
      v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
      v83 = &v73[-v88];
      v24 -= v88;
      v89 = &v81[4 * v76 - 16];
      v90 = v73 - 16;
      v91 = v87 & 0x7FFFFFFFFFFFFFF8;
      v5 = v97;
      do
      {
        v92 = *(_OWORD *)v90;
        *(v89 - 1) = *((_OWORD *)v90 - 1);
        *v89 = v92;
        v89 -= 2;
        v90 -= 32;
        v91 -= 8;
      }
      while (v91);
      if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_157;
LABEL_158:
      v22 = &v81[4 * v80];
      if (v72)
        goto LABEL_159;
LABEL_160:
      (*(void (**)(void **__return_ptr, uint64_t, llvm::raw_ostream *, void *))(*(_QWORD *)v116 + 32))(&__p, v116, a4, v115);
      v85 = __p;
      if (__p)
      {
        *(_BYTE *)(v5 + 24) |= 1u;
        *(_QWORD *)v5 = v85;
LABEL_172:
        if (v24)
          operator delete(v24);
        return;
      }
      v86 = (_BYTE *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v86 >= *((_QWORD *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 0);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v86 + 1;
        *v86 = 0;
      }
LABEL_138:
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v116 + 24))(v116, &v115);
      v18 = v115;
      v72 = v24;
      v73 = v23;
      if (v115 == v25)
        goto LABEL_41;
    }
    v83 = v73;
    v5 = v97;
    do
    {
LABEL_157:
      v84 = *((_DWORD *)v83 - 1);
      v83 -= 4;
      *((_DWORD *)v24 - 1) = v84;
      v24 -= 4;
    }
    while (v83 != v72);
    goto LABEL_158;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
LABEL_41:
  *(_BYTE *)(v5 + 24) &= ~1u;
  *(_QWORD *)v5 = v24;
  *(_QWORD *)(v5 + 8) = v23;
  *(_QWORD *)(v5 + 16) = v22;
}

llvm::raw_ostream *printBigArchiveMemberHeader(void **a1, const void *a2, size_t a3, _QWORD *a4, unsigned int a5, unsigned int a6, int a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  time_t v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  llvm::raw_ostream *result;
  int v47;
  _BYTE *v48;
  void *v49;
  int v50;
  _WORD *v51;
  _QWORD v55[2];
  int v56;
  std::chrono::system_clock::time_point __t;

  v15 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  v16 = *((_DWORD *)a1 + 8);
  v17 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a1, a8);
  v18 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  llvm::raw_ostream::indent((llvm::raw_ostream *)a1, v15 + v16 - (v18 + v17 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 20);
  v19 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  v20 = *((_DWORD *)a1 + 8);
  v21 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a1, a10);
  v22 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  llvm::raw_ostream::indent((llvm::raw_ostream *)a1, v19 + v20 - (v22 + v21 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 20);
  v23 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  v24 = *((_DWORD *)a1 + 8);
  v25 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a1, a9);
  v26 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  llvm::raw_ostream::indent((llvm::raw_ostream *)a1, v23 + v24 - (v26 + v25 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 20);
  __t.__d_.__rep_ = 1000000 * *a4;
  v27 = std::chrono::system_clock::to_time_t(&__t);
  LODWORD(a4) = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  v28 = *((_DWORD *)a1 + 8);
  v29 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a1, v27);
  v30 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  llvm::raw_ostream::indent((llvm::raw_ostream *)a1, (_DWORD)a4 + v28 - (v30 + v29 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 12);
  v31 = a5;
  v32 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  v33 = *((_DWORD *)a1 + 8);
  v34 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a1, v31);
  v35 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  llvm::raw_ostream::indent((llvm::raw_ostream *)a1, v32 + v33 - (v35 + v34 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 12);
  v36 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  v37 = *((_DWORD *)a1 + 8);
  v38 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a1, a6);
  v39 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  llvm::raw_ostream::indent((llvm::raw_ostream *)a1, v36 + v37 - (v39 + v38 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 12);
  v55[0] = &unk_1E0E202E0;
  v55[1] = "%o";
  v56 = a7;
  LODWORD(v31) = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  v40 = *((_DWORD *)a1 + 8);
  v41 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a1, (uint64_t)v55);
  v42 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  llvm::raw_ostream::indent((llvm::raw_ostream *)a1, v31 + v40 - (v42 + v41 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 12);
  LODWORD(v31) = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  v43 = *((_DWORD *)a1 + 8);
  v44 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)a1, a3);
  v45 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
  result = llvm::raw_ostream::indent((llvm::raw_ostream *)a1, (int)v31 + v43 - (v45 + v44 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 4);
  if ((_DWORD)a3)
  {
    v47 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
    v48 = a1[4];
    v49 = a1[2];
    if (a3 <= (_BYTE *)a1[3] - v48)
    {
      memcpy(a1[4], a2, a3);
      a1[4] = (char *)a1[4] + a3;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, (const char *)a2, a3);
    }
    v50 = (*((uint64_t (**)(void **))*a1 + 10))(a1);
    result = llvm::raw_ostream::indent((llvm::raw_ostream *)a1, v47 + (int)v48 - (v50 + (int)v49 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + (int)a3);
    if ((a3 & 1) != 0)
      result = llvm::raw_ostream::write((llvm::raw_ostream *)a1, 0);
  }
  v51 = a1[4];
  if ((unint64_t)((_BYTE *)a1[3] - (_BYTE *)v51) <= 1)
  *v51 = 2656;
  a1[4] = (char *)a1[4] + 2;
  return result;
}

uint64_t computeMemberData(llvm::raw_ostream &,llvm::raw_ostream &,llvm::object::Archive::Kind,BOOL,BOOL,llvm::SymtabWritingMode,SymMap *,llvm::LLVMContext &,llvm::ArrayRef<llvm::NewArchiveMember>)::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unint64_t a5)
{
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  uint64_t result;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18[2];
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;
  unsigned __int16 *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int16 **)a3;
  v9 = *(_QWORD *)(a3 + 8);
  v17 = *(_OWORD *)(a3 + 16);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = llvm::identify_magic(*(unsigned __int16 **)a3, v9);
  if (llvm::object::SymbolicFile::isSymbolicFile(v12, v11))
  {
    if (v12 == 1)
    {
      v18[0] = (uint64_t)v10;
      v18[1] = v9;
      v19 = v17;
      llvm::object::SymbolicFile::createSymbolicFile((uint64_t)v18, 1u, v11, (uint64_t)&v22);
      v13 = v22;
      if ((v23 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v22 = v10;
      v23 = v9;
      v24 = v17;
      llvm::object::SymbolicFile::createSymbolicFile((uint64_t)&v22, 0, 0, (uint64_t)&v26);
      v13 = v26;
      if ((v27 & 1) != 0)
      {
LABEL_11:
        v25 = 261;
        v22 = a4;
        v23 = a5;
        v20 = &v21;
        v21 = 0;
        v26 = v13;
        llvm::handleErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>((uint64_t)&v26, &v20, v18);
        if (v26)
          (*(void (**)(unsigned __int16 *))(*(_QWORD *)v26 + 8))(v26);
        v15 = (char *)operator new(0x38uLL);
        v16 = v21;
        v21 = 0;
        *(_QWORD *)v15 = &unk_1E0E25888;
        v15[40] = 0;
        *((_QWORD *)v15 + 6) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = 0;
        v15[32] = 0;
        *((_QWORD *)v15 + 1) = 0;
        llvm::Twine::str((llvm::Twine *)&v22, (std::string *)(v15 + 8));
        *((_QWORD *)v15 + 6) = v16;
        result = v21;
        *((_QWORD *)v15 + 4) = 0;
        v15[40] = 0;
        *a1 = v15;
        v21 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        return result;
      }
    }
  }
  else
  {
    v13 = 0;
  }
  result = **(_QWORD **)a2;
  **(_QWORD **)a2 = v13;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a1 = 0;
  return result;
}

uint64_t getMemberAlignment(llvm::object::SymbolicFile *a1)
{
  unsigned int v2;
  _WORD *v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  _WORD *v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  char v13;

  if (!a1)
    return 2;
  if ((*((_DWORD *)a1 + 2) - 11) > 1)
    return 2;
  if ((*(unsigned int (**)(llvm::object::SymbolicFile *))(*(_QWORD *)a1 + 64))(a1))
  {
    v2 = bswap32(*(unsigned __int16 *)(llvm::object::XCOFFObjectFile::fileHeader32(a1) + 16)) >> 16;
    v3 = (_WORD *)llvm::object::XCOFFObjectFile::auxiliaryHeader32(a1);
    v4 = v2 < 0x30 || v3 == 0;
    if (v4 || !v3[20])
    {
      return 2;
    }
    else
    {
      v5 = (unsigned __int16)v3[22];
      if (bswap32(v5) >> 16 < bswap32((unsigned __int16)v3[23]) >> 16)
        v5 = (unsigned __int16)v3[23];
      v6 = bswap32(v5) >> 16;
      if (v6 >= 0xC)
        LOBYTE(v6) = 12;
      return (unsigned __int16)(1 << v6);
    }
  }
  else
  {
    v8 = bswap32(*(unsigned __int16 *)(llvm::object::XCOFFObjectFile::fileHeader32(a1) + 16)) >> 16;
    v9 = (_WORD *)llvm::object::XCOFFObjectFile::auxiliaryHeader32(a1);
    v10 = v8 < 0x30 || v9 == 0;
    if (v10 || !v9[20])
    {
      return 2;
    }
    else
    {
      v11 = (unsigned __int16)v9[22];
      if (bswap32(v11) >> 16 < bswap32((unsigned __int16)v9[23]) >> 16)
        v11 = (unsigned __int16)v9[23];
      v12 = bswap32(v11) >> 16;
      if (v12 <= 0xC)
        v13 = v12;
      else
        v13 = 2;
      return (unsigned __int16)(1 << v13);
    }
  }
}

uint64_t **std::__tree<std::__value_type<llvm::StringRef,unsigned int>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned int>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned int>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  size_t v11;
  size_t v12;
  const void *v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v10 = a1 + 1;
    goto LABEL_21;
  }
  v8 = *(const void **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v6;
      v11 = v6[5];
      if (v11 >= v9)
        v12 = v9;
      else
        v12 = v6[5];
      if (!v12)
      {
        if (v9 >= v11)
          goto LABEL_17;
        goto LABEL_3;
      }
      v13 = (const void *)v6[4];
      v14 = memcmp(v8, v13, v12);
      if (v14)
        break;
      if (v9 >= v11)
        goto LABEL_14;
LABEL_3:
      v6 = *v10;
      v7 = v10;
      if (!*v10)
        goto LABEL_21;
    }
    if (v14 < 0)
      goto LABEL_3;
LABEL_14:
    v15 = memcmp(v13, v8, v12);
    if (v15)
    {
      if ((v15 & 0x80000000) == 0)
        return v10;
      goto LABEL_18;
    }
LABEL_17:
    if (v11 >= v9)
      return v10;
LABEL_18:
    v6 = v10[1];
  }
  while (v6);
  v7 = v10 + 1;
LABEL_21:
  v16 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x38uLL);
  *((_OWORD *)v10 + 2) = **a4;
  *((_DWORD *)v10 + 12) = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v16;
  *v7 = (uint64_t *)v10;
  v17 = (uint64_t *)**a1;
  v18 = (uint64_t *)v10;
  if (v17)
  {
    *a1 = v17;
    v18 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

void *printBSDMemberHeader(llvm::raw_ostream *a1, int a2, const void *a3, size_t a4, uint64_t *a5, unsigned int a6, unsigned int a7, int a8, uint64_t a9)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *result;
  int v20;
  int v22;
  _QWORD v27[4];
  __int16 v28;

  v22 = a2 + a4 + 67;
  v13 = (v22 & 0xFFFFFFF8) - (a2 + a4) - 60;
  v14 = (v22 & 0xFFFFFFF8) - a2 - 60;
  v27[0] = "#1/";
  v27[2] = v14;
  v28 = 2307;
  v15 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v16 = *((_DWORD *)a1 + 8);
  v17 = *((_DWORD *)a1 + 4);
  llvm::Twine::print((llvm::Twine *)v27, a1);
  v18 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  llvm::raw_ostream::indent(a1, v15 + v16 - (v18 + v17 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 16);
  printRestOfMemberHeader(a1, *a5, a6, a7, a8, v14 + a9);
  result = (void *)*((_QWORD *)a1 + 4);
  if (a4 <= *((_QWORD *)a1 + 3) - (_QWORD)result)
  {
    if (a4)
    {
      result = memcpy(result, a3, a4);
      *((_QWORD *)a1 + 4) += a4;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(a1, (const char *)a3, a4);
  }
  if (v13)
  {
    v20 = a4 + a2 - (v22 & 0xFFFFFFF8) + 60;
    do
      result = llvm::raw_ostream::write(a1, 0);
    while (!__CFADD__(v20++, 1));
  }
  return result;
}

llvm::raw_ostream *printRestOfMemberHeader(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, unint64_t a6)
{
  time_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  llvm::raw_ostream *result;
  _WORD *v31;
  _QWORD v32[2];
  int v33;
  std::chrono::system_clock::time_point __t;

  __t.__d_.__rep_ = 1000000 * a2;
  v11 = std::chrono::system_clock::to_time_t(&__t);
  v12 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v13 = *((_DWORD *)a1 + 8);
  v14 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<(a1, v11);
  v15 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  llvm::raw_ostream::indent(a1, v12 + v13 - (v15 + v14 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 12);
  LODWORD(v11) = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v16 = *((_DWORD *)a1 + 8);
  v17 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<(a1, a3 % 0xF4240);
  v18 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  llvm::raw_ostream::indent(a1, v11 + v16 - (v18 + v17 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 6);
  v19 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v11) = *((_DWORD *)a1 + 8);
  v20 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<(a1, a4 % 0xF4240);
  v21 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  llvm::raw_ostream::indent(a1, v19 + v11 - (v21 + v20 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 6);
  v32[0] = &unk_1E0E202E0;
  v32[1] = "%o";
  v33 = a5;
  v22 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v23 = *((_DWORD *)a1 + 8);
  v24 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<(a1, (uint64_t)v32);
  v25 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  llvm::raw_ostream::indent(a1, v22 + v23 - (v25 + v24 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 8);
  v26 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v27 = *((_DWORD *)a1 + 8);
  v28 = *((_DWORD *)a1 + 4);
  llvm::raw_ostream::operator<<(a1, a6);
  v29 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  result = llvm::raw_ostream::indent(a1, v26 + v27 - (v29 + v28 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 10);
  v31 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v31 <= 1uLL)
  *v31 = 2656;
  *((_QWORD *)a1 + 4) += 2;
  return result;
}

void *writeSymbolTableHeader(llvm::raw_ostream *a1, int a2, char a3, uint64_t a4)
{
  uint64_t v8;
  size_t v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  const char *v11;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13;

  if ((a2 - 2) > 2)
    __asm { BR              X10 }
  v8 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1)
     + *((_QWORD *)a1 + 4)
     - *((_QWORD *)a1 + 2);
  if (a2 == 4)
    v9 = 12;
  else
    v9 = 9;
  if ((a3 & 1) != 0)
    v10 = 0;
  else
    v10 = std::chrono::system_clock::now().__d_.__rep_ / 1000000;
  v13 = v10;
  if (a2 == 4)
    v11 = "__.SYMDEF_64";
  else
    v11 = "__.SYMDEF";
  return printBSDMemberHeader(a1, v8, v11, v9, &v13, 0, 0, 0, a4);
}

uint64_t **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x40uLL);
    v24 = (std::string *)(v23 + 32);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((_WORD *)v23 + 28) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

__n128 llvm::object::Binary::Binary(uint64_t a1, int a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a1 = off_1E0E25748;
  *(_DWORD *)(a1 + 8) = a2;
  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t llvm::object::Binary::getData(llvm::object::Binary *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t llvm::object::Binary::getFileName(llvm::object::Binary *this)
{
  return *((_QWORD *)this + 4);
}

__n128 llvm::object::Binary::getMemoryBufferRef@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = this[1];
  v3 = this[2];
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t llvm::object::COFFObjectFile::moveSymbolNext(uint64_t result, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 112);
  if (*(_QWORD *)(result + 96))
  {
    if (v2 >= *(_QWORD *)a2 + 18 * (unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 17) + 18)
      v2 = *(_QWORD *)a2 + 18 * *(unsigned __int8 *)(*(_QWORD *)a2 + 17) + 18;
    *(_QWORD *)a2 = v2;
  }
  else
  {
    if (v2 >= *(_QWORD *)a2 + 20 * (unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 19) + 20)
      v2 = *(_QWORD *)a2 + 20 * *(unsigned __int8 *)(*(_QWORD *)a2 + 19) + 20;
    *(_QWORD *)a2 = v2;
  }
  return result;
}

void llvm::object::COFFObjectFile::getSymbolName(char *__s@<X1>, llvm::object::COFFObjectFile *a2@<X0>, uint64_t a3@<X8>)
{
  size_t v5;

  if (*(_DWORD *)__s)
  {
    if (__s[7])
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = __s;
      *(_QWORD *)(a3 + 8) = 8;
    }
    else
    {
      v5 = strlen(__s);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = __s;
      *(_QWORD *)(a3 + 8) = v5;
    }
  }
  else
  {
    llvm::object::COFFObjectFile::getString(a2, *((_DWORD *)__s + 1), a3);
  }
}

uint64_t llvm::object::COFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t llvm::object::COFFObjectFile::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v2)
    return 0;
  v3 = (v2 - 1) | ((unint64_t)(v2 - 1) >> 1) | (((v2 - 1) | ((unint64_t)(v2 - 1) >> 1)) >> 2);
  v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  v5 = v4 | (v4 >> 16) | ((v4 | (v4 >> 16)) >> 32);
  if (v5 > 0x1E)
    return 32;
  else
    return v5 + 1;
}

void llvm::object::COFFObjectFile::getSymbolAddress(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object *SymbolValue;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  std::error_code v17;

  v16[2] = *MEMORY[0x1E0C80C00];
  SymbolValue = (llvm::object *)llvm::object::ObjectFile::getSymbolValue((uint64_t)a1, a2, (uint64_t)v16);
  v7 = v16[0];
  if (!a1[12] || !a2)
  {
    v8 = *(_DWORD *)(a2 + 12);
    v10 = *(unsigned __int8 *)(a2 + 18);
    switch(v10)
    {
      case 2:
        if (!v8)
        {
          if (!*(_DWORD *)(a2 + 8))
            goto LABEL_35;
          v8 = 0;
          if (*(_DWORD *)(a2 + 12))
            goto LABEL_23;
          goto LABEL_19;
        }
        break;
      case 104:
        break;
      case 105:
        goto LABEL_35;
      default:
        goto LABEL_23;
    }
    if (*(_DWORD *)(a2 + 12))
      goto LABEL_23;
LABEL_19:
    if (*(_DWORD *)(a2 + 8))
      goto LABEL_35;
    goto LABEL_23;
  }
  v8 = *(__int16 *)(a2 + 12);
  if (v8 < 0xFFFFFF00)
    v8 = *(unsigned __int16 *)(a2 + 12);
  v9 = *(unsigned __int8 *)(a2 + 16);
  switch(v9)
  {
    case 2:
      if (!*(_WORD *)(a2 + 12) && !*(_DWORD *)(a2 + 8))
        goto LABEL_35;
LABEL_18:
      if (*(_WORD *)(a2 + 12))
        break;
      goto LABEL_19;
    case 104:
      goto LABEL_18;
    case 105:
      goto LABEL_35;
  }
LABEL_23:
  if ((int)v8 > 0)
  {
    v11 = a1[6];
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2);
      if (v12 == 0xFFFF)
        v12 = 0;
      if (v12 < v8)
        goto LABEL_28;
    }
    else if (*(_DWORD *)(a1[7] + 44) < v8)
    {
LABEL_28:
      *(_QWORD *)&v17.__val_ = llvm::object::object_category(SymbolValue);
      v17.__cat_ = (const std::error_category *)"section index out of bounds";
      llvm::createStringError((llvm *)3, v17, (_QWORD *)a3);
      *(_BYTE *)(a3 + 8) |= 1u;
      return;
    }
    v13 = v16[0] + *(unsigned int *)(a1[11] + 40 * (v8 - 1) + 12);
    v14 = a1[8];
    if (v14)
    {
      v15 = *(unsigned int *)(v14 + 28);
    }
    else
    {
      v15 = a1[9];
      if (v15)
        v15 = *(_QWORD *)(v15 + 24);
    }
    v7 = v13 + v15;
  }
LABEL_35:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v7;
}

uint64_t llvm::object::COFFObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  _BYTE *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  int v12;

  if (*(_QWORD *)(result + 96) && a2)
  {
    v3 = *(__int16 *)(a2 + 12);
    if (v3 < 0xFFFFFF00)
      v3 = *(unsigned __int16 *)(a2 + 12);
    if ((*(_WORD *)(a2 + 14) & 0xF0) != 0x20)
    {
      v4 = (_BYTE *)(a2 + 16);
      v5 = *(unsigned __int8 *)(a2 + 16);
      if (v5 != 105)
      {
        if (v5 == 104)
          goto LABEL_48;
        if (v5 != 2)
          goto LABEL_12;
        if (*(_WORD *)(a2 + 12) || *(_DWORD *)(a2 + 8))
        {
LABEL_48:
          if (!*(_WORD *)(a2 + 12) && *(_DWORD *)(a2 + 8))
          {
LABEL_36:
            *(_BYTE *)(a3 + 8) &= ~1u;
            *(_DWORD *)a3 = 2;
            return result;
          }
LABEL_12:
          v6 = 0;
          v7 = a2;
          a2 = 0;
          if (*v4 != 103)
            goto LABEL_13;
LABEL_29:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_DWORD *)a3 = 4;
          return result;
        }
      }
LABEL_23:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      return result;
    }
LABEL_19:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = 5;
    return result;
  }
  if ((*(_WORD *)(a2 + 16) & 0xF0) == 0x20)
    goto LABEL_19;
  v3 = *(_DWORD *)(a2 + 12);
  v10 = *(unsigned __int8 *)(a2 + 18);
  switch(v10)
  {
    case 2:
      if (!v3)
      {
        if (!*(_DWORD *)(a2 + 8))
          goto LABEL_23;
        v3 = 0;
      }
      goto LABEL_27;
    case 104:
LABEL_27:
      if (!*(_DWORD *)(a2 + 12) && *(_DWORD *)(a2 + 8))
        goto LABEL_36;
      break;
    case 105:
      goto LABEL_23;
  }
  v7 = 0;
  v6 = 1;
  if (*(_BYTE *)(a2 + 18) == 103)
    goto LABEL_29;
LABEL_13:
  if (v3 == -2)
  {
LABEL_41:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = 3;
    return result;
  }
  if (v6)
  {
    v8 = *(unsigned __int8 *)(a2 + 18);
    if (v8 == 2)
    {
      v9 = *(_DWORD *)(a2 + 12) == -1;
      if (!*(_BYTE *)(a2 + 19))
        goto LABEL_42;
    }
    else
    {
      v9 = v8 == 3;
      if (!*(_BYTE *)(a2 + 19))
        goto LABEL_42;
    }
  }
  else
  {
    v11 = *(unsigned __int8 *)(v7 + 16);
    if (v11 == 2)
    {
      v9 = *(__int16 *)(v7 + 12) == -1;
      if (!*(_BYTE *)(v7 + 17))
        goto LABEL_42;
    }
    else
    {
      v9 = v11 == 3;
      if (!*(_BYTE *)(v7 + 17))
        goto LABEL_42;
    }
  }
  if (v9)
    goto LABEL_41;
LABEL_42:
  *(_BYTE *)(a3 + 8) &= ~1u;
  if (v3 < 1)
    v12 = 1;
  else
    v12 = 2;
  *(_DWORD *)a3 = v12;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getSymbolFlags@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  _BOOL4 v25;

  if (*(_QWORD *)(result + 96) && a2)
  {
    v3 = 0;
    v4 = a2;
    v5 = (_BYTE *)(a2 + 16);
    a2 = 0;
    if (*v5 == 2)
      goto LABEL_9;
  }
  else
  {
    v4 = 0;
    v3 = 1;
    if (*(_BYTE *)(a2 + 18) == 2)
      goto LABEL_9;
  }
  v6 = (_BYTE *)(v4 + 16);
  if (v3)
    v6 = (_BYTE *)(a2 + 18);
  if (*v6 == 105)
  {
LABEL_9:
    v7 = 2;
    if (v3)
      goto LABEL_10;
    goto LABEL_21;
  }
  v7 = 0;
  if (v3)
  {
LABEL_10:
    v8 = (unsigned __int8 *)(a2 + 19);
    if (*(_BYTE *)(a2 + 19) && *(_BYTE *)(a2 + 18) == 105)
    {
      if (*(_DWORD *)(a2 + 24) == 3)
        v9 = 4;
      else
        v9 = 5;
      v7 |= v9;
    }
    v10 = *(_DWORD *)(a2 + 12);
    v11 = v10 == -1;
    v12 = v10 == -1;
    if (v11)
      v13 = v7 | 8;
    else
      v13 = v7;
    v14 = *(unsigned __int8 *)(a2 + 18);
    goto LABEL_32;
  }
LABEL_21:
  v8 = (unsigned __int8 *)(v4 + 17);
  if (*(_BYTE *)(v4 + 17) && *(_BYTE *)(v4 + 16) == 105)
  {
    if (*(_DWORD *)(v4 + 22) == 3)
      v15 = 4;
    else
      v15 = 5;
    v7 |= v15;
  }
  v16 = *(unsigned __int16 *)(v4 + 12);
  v12 = v16 == 0xFFFF;
  v13 = v7 | 8;
  if (v16 != 0xFFFF)
    v13 = v7;
  if (v16 >> 8 < 0xFF)
    v13 = v7;
  v14 = *(unsigned __int8 *)(v4 + 16);
LABEL_32:
  v17 = v13 | 0x80;
  if (v14 == 103)
    v13 |= 0x80u;
  if (v14 != 2)
    v12 = 0;
  v18 = *v8;
  if (v14 == 3 || v12)
    v20 = v17;
  else
    v20 = v13;
  if (v18)
    v21 = v20;
  else
    v21 = v13;
  if (v3)
  {
    v22 = *(unsigned __int8 *)(a2 + 18);
    if ((v22 == 2 || v22 == 104) && !*(_DWORD *)(a2 + 12))
    {
      if (*(_DWORD *)(a2 + 8))
        v21 |= 0x10u;
      if (*(_BYTE *)(a2 + 18) != 2)
        goto LABEL_51;
    }
    else if (v22 != 2)
    {
LABEL_51:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = v21;
      return result;
    }
    if (*(_DWORD *)(a2 + 12))
      goto LABEL_51;
    v24 = (_DWORD *)(a2 + 8);
  }
  else
  {
    v23 = *(unsigned __int8 *)(v4 + 16);
    if ((v23 == 104 || v23 == 2) && !*(_WORD *)(v4 + 12))
    {
      if (*(_DWORD *)(v4 + 8))
        v21 |= 0x10u;
      if (*(_BYTE *)(v4 + 16) != 2)
        goto LABEL_51;
    }
    else if (v23 != 2)
    {
      goto LABEL_51;
    }
    if (*(_WORD *)(v4 + 12))
      goto LABEL_51;
    v24 = (_DWORD *)(v4 + 8);
  }
  v25 = *v24 == 0;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v21 | v25;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

void llvm::object::COFFObjectFile::getSymbolSection(llvm::object *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::error_code v10;

  if (!*((_QWORD *)a1 + 12) || !a2)
  {
    v4 = *(_DWORD *)(a2 + 12);
    if (v4 > 0)
      goto LABEL_7;
LABEL_13:
    v7 = (*(uint64_t (**)(llvm::object *))(*(_QWORD *)a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
    return;
  }
  v4 = *(unsigned __int16 *)(a2 + 12);
  if ((unsigned __int16)(v4 + 256) < 0x101u)
    goto LABEL_13;
  if (v4 >> 8 > 0xFE)
    goto LABEL_14;
LABEL_7:
  if (v4 >= 1)
  {
    v5 = *((_QWORD *)a1 + 6);
    if (v5)
    {
      v6 = *(unsigned __int16 *)(v5 + 2);
      if (v6 == 0xFFFF)
        v6 = 0;
      if (v6 < v4)
        goto LABEL_12;
    }
    else if (*(_DWORD *)(*((_QWORD *)a1 + 7) + 44) < v4)
    {
LABEL_12:
      *(_QWORD *)&v10.__val_ = llvm::object::object_category(a1);
      v10.__cat_ = (const std::error_category *)"section index out of bounds";
      llvm::createStringError((llvm *)3, v10, (_QWORD *)a3);
      *(_BYTE *)(a3 + 16) |= 1u;
      return;
    }
    v9 = *((_QWORD *)a1 + 11) + 40 * (v4 - 1);
    goto LABEL_17;
  }
LABEL_14:
  v9 = 0;
LABEL_17:
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = a1;
}

void llvm::object::COFFObjectFile::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 40;
}

void llvm::object::COFFObjectFile::getSectionName(llvm::object::COFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t AsUnsignedInteger;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18[2];
  unint64_t v19;
  char v20;
  std::error_code v21;
  std::error_code v22;

  *(_QWORD *)v18 = a2;
  v19 = 8;
  v20 = 0;
  v5 = (llvm::object *)llvm::StringRef::find((uint64_t *)v18, &v20, 1uLL, 0);
  if (v5 == (llvm::object *)-1)
  {
    v6 = *(_BYTE **)v18;
    v7 = v19;
    if (!v19)
    {
LABEL_13:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
      return;
    }
  }
  else
  {
    v6 = *(_BYTE **)v18;
    v7 = v19;
    if ((unint64_t)v5 < v19)
      v7 = (unint64_t)v5;
    if (!v7)
      goto LABEL_13;
  }
  if (*v6 != 47)
    goto LABEL_13;
  if (v7 >= 2 && *(_WORD *)v6 == 12079)
  {
    if (v7 - 2 <= 6)
    {
      v9 = 0;
      if (v7 == 2)
        goto LABEL_12;
      v10 = v6 + 2;
      v11 = 2 - v7;
      do
      {
        v14 = *v10;
        v15 = *v10;
        if (*v10 < 65)
        {
          if ((char)v15 < 48)
          {
            if (v15 == 43)
            {
              v12 = 62;
            }
            else
            {
              if (v15 != 47)
                goto LABEL_16;
              v12 = 63;
            }
          }
          else
          {
            if (v15 > 0x39)
              goto LABEL_16;
            v12 = v14 + 4;
          }
        }
        else if (v15 <= 0x5A)
        {
          v12 = v14 - 65;
        }
        else
        {
          if (v15 - 97 > 0x19)
            goto LABEL_16;
          v12 = v14 - 71;
        }
        v9 = v12 + (v9 << 6);
        ++v10;
      }
      while (!__CFADD__(v11++, 1));
      if (!HIDWORD(v9))
        goto LABEL_12;
    }
LABEL_16:
    *(_QWORD *)&v22.__val_ = llvm::object::object_category(v5);
    v22.__cat_ = (const std::error_category *)"invalid section name";
    llvm::createStringError((llvm *)3, v22, &v17);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
  }
  else
  {
    *(_QWORD *)v18 = 0;
    AsUnsignedInteger = llvm::getAsUnsignedInteger(v6 + 1, v7 - 1, 0xAu, (unint64_t *)v18);
    if ((AsUnsignedInteger & 1) == 0)
    {
      LODWORD(v9) = v18[0];
      if (!v18[1])
      {
LABEL_12:
        llvm::object::COFFObjectFile::getString(a1, v9, a3);
        return;
      }
    }
    *(_QWORD *)&v21.__val_ = llvm::object::object_category((llvm::object *)AsUnsignedInteger);
    v21.__cat_ = (const std::error_category *)"invalid section name";
    llvm::createStringError((llvm *)3, v21, &v16);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v16;
  }
}

uint64_t llvm::object::COFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(unsigned int *)(a2 + 12);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
    return *(unsigned int *)(v3 + 28) + v2;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    v5 = *(_QWORD *)(v5 + 24);
  return v5 + v2;
}

unint64_t llvm::object::COFFObjectFile::getSectionIndex(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - *(_QWORD *)(a1 + 88)) >> 3);
}

uint64_t llvm::object::COFFObjectFile::getSectionSize(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;

  if (!a1[8] && !a1[9] || !a1[2])
    return *(unsigned int *)(a2 + 16);
  v2 = *(_DWORD *)(a2 + 16);
  if (v2 >= *(_DWORD *)(a2 + 8))
    return *(unsigned int *)(a2 + 8);
  return v2;
}

llvm::object *llvm::object::COFFObjectFile::getSectionContents@<X0>(llvm::object *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  std::error_code v14;

  v4 = a2[5];
  if (!(_DWORD)v4)
  {
    v8 = 0;
    v6 = 0;
    goto LABEL_21;
  }
  v5 = *((_QWORD *)result + 2);
  v6 = v5 + v4;
  if (!*((_QWORD *)result + 8))
  {
    if (*((_QWORD *)result + 9))
      v11 = v5 == 0;
    else
      v11 = 1;
    if (!v11)
      goto LABEL_4;
LABEL_15:
    v8 = a2[4];
    v10 = v6 + v8;
    if (!__CFADD__(v6, v8))
      goto LABEL_16;
    goto LABEL_19;
  }
  if (!v5)
    goto LABEL_15;
LABEL_4:
  v7 = a2[4];
  if (v7 >= a2[2])
    v7 = a2[2];
  v8 = v7;
  v9 = __CFADD__(v6, v7);
  v10 = v6 + v7;
  if (!v9)
  {
LABEL_16:
    if (v10 >= v8 && v6 >= v5 && v10 <= v5 + *((_QWORD *)result + 3))
      goto LABEL_21;
  }
LABEL_19:
  *(_QWORD *)&v14.__val_ = llvm::object::object_category(result);
  result = (llvm::object *)llvm::errorCodeToError((llvm *)4, v14, &v13);
  v12 = v13;
  if (v13)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v12;
    return result;
  }
LABEL_21:
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a2 + 36);
  result = 1;
  if ((v2 & 8) == 0)
  {
    v4 = ((v2 >> 20) & 0xF) == 0;
    v5 = 1 << (((v2 >> 20) & 0xF) - 1);
    if (v4)
      return 16;
    else
      return v5;
  }
  return result;
}

uint64_t llvm::object::COFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::COFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 36) >> 5) & 1;
}

uint64_t llvm::object::COFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 36) >> 6) & 1;
}

BOOL llvm::object::COFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (~*(_DWORD *)(a2 + 36) & 0xC0000080) == 0;
}

uint64_t llvm::object::COFFObjectFile::isDebugSection(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 144))(v6);
  if ((v7 & 1) != 0)
  {
    v3 = (_QWORD *)v6[0];
    v6[0] = 0;
    v4 = v3;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v4, &v5);
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    if ((v7 & 1) != 0)
    {
      result = v6[0];
      v6[0] = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v6[1] < 6uLL)
    return 0;
  return *(_DWORD *)v6[0] == 1650811950 && *(_WORD *)(v6[0] + 4) == 26485;
}

BOOL llvm::object::COFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) == 0;
}

unint64_t llvm::object::COFFObjectFile::section_rel_begin(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  unint64_t result;
  _OWORD v5[2];

  v3 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v3;
  result = getFirstReloc(a2, (uint64_t)v5, *(_QWORD *)(a1 + 16));
  if (result)
  {
    if (*(_DWORD *)(a2 + 12))
      llvm::report_fatal_error((llvm *)"Sections with relocations should have an address of 0", (const char *)1);
  }
  return result;
}

unint64_t getFirstReloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  llvm::object *NumberOfRelocations;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD v13[2];
  _QWORD *v14;
  uint64_t v15;
  std::error_code v16;

  v6 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v6;
  NumberOfRelocations = getNumberOfRelocations(a1, v13, a3);
  if ((_DWORD)NumberOfRelocations)
  {
    v8 = a3 + *(unsigned int *)(a1 + 24);
    if ((*(_BYTE *)(a1 + 39) & 1) != 0)
      v8 += 10 * (*(_WORD *)(a1 + 32) == 0xFFFF);
    v9 = 10 * NumberOfRelocations + v8;
    if (!__CFADD__(10 * NumberOfRelocations, v8)
      && v9 >= 10 * (unint64_t)NumberOfRelocations
      && *(_QWORD *)a2 <= v8
      && v9 <= *(_QWORD *)a2 + *(_QWORD *)(a2 + 8))
    {
      return v8;
    }
    *(_QWORD *)&v16.__val_ = llvm::object::object_category(NumberOfRelocations);
    llvm::errorCodeToError((llvm *)4, v16, &v12);
    v11 = v12;
    if (!v12)
      return v8;
    v12 = 0;
    v14 = v11;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v14, &v15);
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  return 0;
}

unint64_t llvm::object::COFFObjectFile::section_rel_end(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  unint64_t result;
  __int128 v6;
  _OWORD v7[2];
  _OWORD v8[2];

  v3 = a1 + 16;
  v4 = *(_OWORD *)(a1 + 32);
  v8[0] = *(_OWORD *)(a1 + 16);
  v8[1] = v4;
  result = getFirstReloc(a2, (uint64_t)v8, *(uint64_t *)&v8[0]);
  if (result)
  {
    v6 = *(_OWORD *)(v3 + 16);
    v7[0] = *(_OWORD *)v3;
    v7[1] = v6;
    result += 10 * getNumberOfRelocations(a2, v7, *(_QWORD *)v3);
  }
  return result;
}

llvm::object *getNumberOfRelocations(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  llvm::object *result;
  _DWORD *v5;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::error_code v12;

  if ((*(_BYTE *)(a1 + 39) & 1) == 0)
    return (llvm::object *)*(unsigned __int16 *)(a1 + 32);
  result = (llvm::object *)*(unsigned __int16 *)(a1 + 32);
  if ((_DWORD)result == 0xFFFF)
  {
    v5 = (_DWORD *)(a3 + *(unsigned int *)(a1 + 24));
    v7 = (unint64_t)v5 > 0xFFFFFFFFFFFFFFF5
      || *a2 > (unint64_t)v5
      || (unint64_t)v5 + 10 > *a2 + a2[1];
    if (v7
      && (*(_QWORD *)&v12.__val_ = llvm::object::object_category(result),
          llvm::errorCodeToError((llvm *)4, v12, &v9),
          (v8 = v9) != 0))
    {
      v9 = 0;
      v10 = v8;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v10, &v11);
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
      return 0;
    }
    else
    {
      return (llvm::object *)(*v5 - 1);
    }
  }
  return result;
}

void llvm::object::COFFObjectFile::initSymbolTablePtr(llvm::object::COFFObjectFile *this@<X0>, _QWORD *a2@<X8>)
{
  llvm::object::COFFObjectFile *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  std::error_code v43;
  std::error_code v44;
  std::error_code v45;
  std::error_code v46;
  std::error_code v47;

  v2 = this;
  v4 = *((_QWORD *)this + 6);
  if (!v4)
  {
    v9 = (char *)this + 56;
    v8 = *((_QWORD *)this + 7);
    if (!v8)
      goto LABEL_49;
    v10 = (_QWORD *)((char *)this + 104);
    v11 = *((_QWORD *)this + 2);
    v12 = *((_QWORD *)this + 3);
LABEL_23:
    v4 = 0;
    v17 = 1;
    v18 = v11 + *(unsigned int *)(v8 + 48);
    if (*((_QWORD *)v2 + 12))
      goto LABEL_35;
    goto LABEL_24;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned __int16 *)(v4 + 2);
  if (v6 == 0xFFFF)
  {
    v7 = *((_QWORD *)this + 2);
    if (!*((_QWORD *)this + 12))
      goto LABEL_8;
  }
  else
  {
    v7 = v5 + *(unsigned int *)(v4 + 8);
    if (!*((_QWORD *)this + 12))
    {
LABEL_8:
      if (!*((_QWORD *)this + 13))
        goto LABEL_13;
    }
  }
  if (v6 != 0xFFFF)
  {
    v13 = 18 * *(unsigned int *)(v4 + 12);
    v14 = v13 + v7;
    if (__CFADD__(v13, v7))
      goto LABEL_26;
    goto LABEL_14;
  }
LABEL_13:
  v13 = 0;
  v14 = v7;
LABEL_14:
  v15 = v5 + *((_QWORD *)this + 3);
  if (v14 >= v13 && v14 <= v15)
  {
    v9 = (char *)this + 56;
    v8 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 12) = v7;
    *a2 = 0;
    if (v8)
      goto LABEL_19;
LABEL_28:
    if (!v4)
      goto LABEL_49;
    goto LABEL_29;
  }
LABEL_26:
  *(_QWORD *)&v43.__val_ = llvm::object::object_category(this);
  this = (llvm::object::COFFObjectFile *)llvm::errorCodeToError((llvm *)4, v43, a2);
  if (*a2)
    return;
  v4 = *((_QWORD *)v2 + 6);
  v9 = (char *)v2 + 56;
  v8 = *((_QWORD *)v2 + 7);
  *((_QWORD *)v2 + 12) = v7;
  *a2 = 0;
  if (!v8)
    goto LABEL_28;
LABEL_19:
  v10 = (_QWORD *)((char *)v2 + 104);
  v11 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 3);
  if (!v4)
    goto LABEL_23;
  if (*(__int16 *)(v4 + 2) == -1)
  {
    v17 = 0;
    v18 = *((_QWORD *)v2 + 2);
    if (*((_QWORD *)v2 + 12))
      goto LABEL_35;
  }
  else
  {
    v17 = 0;
    v18 = v11 + *(unsigned int *)(v4 + 8);
    if (*((_QWORD *)v2 + 12))
      goto LABEL_35;
  }
LABEL_24:
  if (!*v10)
    goto LABEL_40;
LABEL_35:
  if ((v17 & 1) != 0)
  {
    v21 = (unsigned int *)(v8 + 52);
LABEL_39:
    v22 = *v21;
    goto LABEL_41;
  }
  if (*(__int16 *)(v4 + 2) != -1)
  {
    v21 = (unsigned int *)(v4 + 12);
    goto LABEL_39;
  }
LABEL_40:
  v22 = 0;
LABEL_41:
  v23 = v17 == 0;
  v24 = 18;
  if (!v23)
    v24 = 20;
  v25 = v22 * (unint64_t)v24;
  v26 = v25 + v18;
  if (!__CFADD__(v25, v18))
  {
    v27 = v11 + v12;
    if (v26 >= v25 && v26 <= v27)
    {
      *v10 = v18;
      *a2 = 0;
      if (!v4)
        goto LABEL_49;
LABEL_29:
      if (*(__int16 *)(v4 + 2) == -1)
      {
        v19 = 0;
        v20 = 0;
        if (*((_QWORD *)v2 + 12))
          goto LABEL_51;
      }
      else
      {
        v19 = 0;
        v20 = *(_DWORD *)(v4 + 8);
        if (*((_QWORD *)v2 + 12))
          goto LABEL_51;
      }
LABEL_50:
      if (!*((_QWORD *)v2 + 13))
        goto LABEL_59;
      goto LABEL_51;
    }
  }
  *(_QWORD *)&v44.__val_ = llvm::object::object_category(this);
  this = (llvm::object::COFFObjectFile *)llvm::errorCodeToError((llvm *)4, v44, a2);
  if (*a2)
    return;
  v4 = *((_QWORD *)v2 + 6);
  *v10 = v18;
  *a2 = 0;
  if (v4)
    goto LABEL_29;
LABEL_49:
  v4 = 0;
  v19 = 1;
  v20 = *(_DWORD *)(*(_QWORD *)v9 + 48);
  if (!*((_QWORD *)v2 + 12))
    goto LABEL_50;
LABEL_51:
  if ((v19 & 1) != 0)
  {
    v29 = (int *)(*(_QWORD *)v9 + 52);
LABEL_55:
    v30 = *v29;
    goto LABEL_60;
  }
  if (*(__int16 *)(v4 + 2) != -1)
  {
    v29 = (int *)(v4 + 12);
    goto LABEL_55;
  }
LABEL_59:
  v30 = 0;
LABEL_60:
  if (v19)
    v31 = 20;
  else
    v31 = 18;
  v32 = (v20 + v30 * v31);
  v33 = *((_QWORD *)v2 + 2);
  v34 = *((_QWORD *)v2 + 3);
  v35 = (unsigned int *)(v33 + v32);
  v36 = v33 + v32 + 4;
  if ((unint64_t)v35 > 0xFFFFFFFFFFFFFFFBLL || v36 > v33 + v34)
  {
    *(_QWORD *)&v45.__val_ = llvm::object::object_category(this);
    this = (llvm::object::COFFObjectFile *)llvm::errorCodeToError((llvm *)4, v45, a2);
    if (*a2)
      return;
    v33 = *((_QWORD *)v2 + 2);
    v34 = *((_QWORD *)v2 + 3);
  }
  *a2 = 0;
  v38 = *v35;
  *((_DWORD *)v2 + 30) = v38;
  v39 = (char *)v35 + v38;
  if (__CFADD__(v38, v35)
    || ((v40 = v33 + v34, (unint64_t)v39 >= v38) ? (v41 = v33 > (unint64_t)v35) : (v41 = 1),
        !v41 ? (v42 = (unint64_t)v39 > v40) : (v42 = 1),
        v42))
  {
    *(_QWORD *)&v46.__val_ = llvm::object::object_category(this);
    this = (llvm::object::COFFObjectFile *)llvm::errorCodeToError((llvm *)4, v46, a2);
    if (*a2)
      return;
    LODWORD(v38) = *((_DWORD *)v2 + 30);
  }
  *((_QWORD *)v2 + 14) = v35;
  *a2 = 0;
  if (v38 > 3)
  {
    if ((_DWORD)v38 != 4 && *((_BYTE *)v35 + (v38 - 1)))
    {
      *(_QWORD *)&v47.__val_ = llvm::object::object_category(this);
      v47.__cat_ = (const std::error_category *)"string table missing null terminator";
      llvm::createStringError((llvm *)3, v47, a2);
      return;
    }
  }
  else
  {
    *((_DWORD *)v2 + 30) = 4;
  }
  *a2 = 0;
}

void llvm::object::COFFObjectFile::getRvaPtr(llvm::object::COFFObjectFile *this@<X0>, unint64_t *a2@<X2>, const char *a3@<X3>, unsigned int a4@<W1>, uint64_t *a5@<X8>)
{
  llvm::object *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::object *v13;
  uint64_t v14;
  llvm::object *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _UNKNOWN **v23;
  void **v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v29;
  llvm::object *v30;
  llvm::object *v31;
  _UNKNOWN **v32;
  llvm::object *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  void **v41;
  void *__p[2];
  uint64_t v43;
  void **v44;
  const char *v45;
  unsigned int v46;
  const char *v47;
  __int16 v48;

  v10 = (llvm::object *)(*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 352))(this);
  v12 = v11;
  v13 = (llvm::object *)(*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 360))(this);
  v33 = v10;
  v34 = v12;
  if (v12 == v14 && v10 == v13)
  {
LABEL_15:
    v23 = llvm::object::object_category(v13);
    __p[0] = 0;
    __p[1] = 0;
    v43 = 0;
    LODWORD(v34) = 0;
    v38 = 0;
    v39 = 0;
    v40 = 1;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    v33 = (llvm::object *)&unk_1E0E22B10;
    v41 = __p;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v33, 0, 0, 0);
    if (a3)
    {
      v44 = (void **)&unk_1E0E20300;
      v45 = "RVA 0x%x for %s not found";
      v46 = a4;
      v47 = a3;
    }
    else
    {
      v44 = (void **)&unk_1E0E202E0;
      v45 = "RVA 0x%x not found";
      v46 = a4;
    }
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v33, (uint64_t)&v44);
    v24 = v41;
    v25 = operator new(0x38uLL);
    v48 = 260;
    v44 = v24;
    *a5 = llvm::StringError::StringError((uint64_t)v25, (llvm::Twine *)&v44, 3, (uint64_t)v23);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v33);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v16 = v13;
    v17 = v14;
    while (1)
    {
      v19 = *((_DWORD *)v10 + 2);
      v18 = *((_DWORD *)v10 + 3);
      v20 = a4 - v18;
      if (a4 >= v18 && v19 + v18 > a4)
        break;
      v13 = (llvm::object *)(*(uint64_t (**)(uint64_t, llvm::object **))(*(_QWORD *)v12 + 136))(v12, &v33);
      v10 = v33;
      v12 = v34;
      if (v34 == v17 && v33 == v16)
        goto LABEL_15;
    }
    v26 = *((_DWORD *)v10 + 4);
    v27 = v26 + v18;
    if (v26 >= v19 || v27 > a4)
    {
      *a2 = *((_QWORD *)this + 2) + *((unsigned int *)v10 + 5) + v20;
      *a5 = 0;
    }
    else
    {
      v29 = operator new(0x18uLL);
      v30 = (llvm::object *)std::system_category();
      v31 = (llvm::object *)llvm::object::object_category(v30);
      *v29 = &unk_1E0E25678;
      v32 = llvm::object::object_category(v31);
      v29[1] = 9;
      v29[2] = v32;
      *a5 = (uint64_t)v29;
    }
  }
}

void llvm::object::COFFObjectFile::initImportTablePtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  llvm::object *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v14;
  std::error_code v15;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_20;
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 92) <= 1u)
      goto LABEL_20;
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 9) + 108) <= 1u)
  {
LABEL_20:
    *a2 = 0;
    return;
  }
  v6 = *(_DWORD *)(v3 + 8);
  if (!v6)
    goto LABEL_20;
  v14 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v14, "import table", v6, a2);
  if (!*a2)
  {
    v8 = v14;
    v9 = *(unsigned int *)(v3 + 12);
    v10 = v14 + v9;
    if (!__CFADD__(v14, v9))
    {
      v11 = *((_QWORD *)this + 2);
      v12 = v10 >= v9 && v14 >= v11;
      if (v12 && v10 <= v11 + *((_QWORD *)this + 3))
        goto LABEL_19;
    }
    *(_QWORD *)&v15.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v15, a2);
    if (!*a2)
    {
LABEL_19:
      *((_QWORD *)this + 16) = v8;
      goto LABEL_20;
    }
  }
}

llvm::object *llvm::object::Binary::checkOffset@<X0>(llvm::object *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  BOOL v6;
  std::error_code v7;

  v5 = a3 + a2;
  if (__CFADD__(a3, a2)
    || v5 < a3
    || (*(_QWORD *)result <= a2 ? (v6 = v5 > *(_QWORD *)result + *((_QWORD *)result + 1)) : (v6 = 1), v6))
  {
    *(_QWORD *)&v7.__val_ = llvm::object::object_category(result);
    return (llvm::object *)llvm::errorCodeToError((llvm *)4, v7, a4);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void llvm::object::COFFObjectFile::initDelayImportTablePtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  llvm::object *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v14;
  std::error_code v15;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_20;
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 92) <= 0xDu)
      goto LABEL_20;
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 9) + 108) <= 0xDu)
  {
LABEL_20:
    *a2 = 0;
    return;
  }
  v6 = *(_DWORD *)(v3 + 104);
  if (!v6)
    goto LABEL_20;
  *((_DWORD *)this + 36) = (*(_DWORD *)(v3 + 108) >> 5) - 1;
  v14 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v14, "delay import table", v6, a2);
  if (!*a2)
  {
    v8 = v14;
    v9 = *(unsigned int *)(v3 + 108);
    v10 = v14 + v9;
    if (!__CFADD__(v14, v9))
    {
      v11 = *((_QWORD *)this + 2);
      v12 = v10 >= v9 && v14 >= v11;
      if (v12 && v10 <= v11 + *((_QWORD *)this + 3))
        goto LABEL_19;
    }
    *(_QWORD *)&v15.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v15, a2);
    if (!*a2)
    {
LABEL_19:
      *((_QWORD *)this + 17) = v8;
      goto LABEL_20;
    }
  }
}

void llvm::object::COFFObjectFile::initExportTablePtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  unsigned int v6;
  llvm::object *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v14;
  std::error_code v15;

  v3 = (unsigned int *)*((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_20;
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (!*(_DWORD *)(v5 + 92))
      goto LABEL_20;
  }
  else if (!*(_DWORD *)(*((_QWORD *)this + 9) + 108))
  {
LABEL_20:
    *a2 = 0;
    return;
  }
  v6 = *v3;
  if (!*v3)
    goto LABEL_20;
  v14 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v14, "export table", v6, a2);
  if (!*a2)
  {
    v8 = v14;
    v9 = v3[1];
    v10 = v14 + v9;
    if (!__CFADD__(v14, v9))
    {
      v11 = *((_QWORD *)this + 2);
      v12 = v10 >= v9 && v14 >= v11;
      if (v12 && v10 <= v11 + *((_QWORD *)this + 3))
        goto LABEL_19;
    }
    *(_QWORD *)&v15.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v15, a2);
    if (!*a2)
    {
LABEL_19:
      *((_QWORD *)this + 19) = v8;
      goto LABEL_20;
    }
  }
}

void llvm::object::COFFObjectFile::initBaseRelocPtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  llvm::object *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v14;
  std::error_code v15;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_20;
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 92) <= 5u)
      goto LABEL_20;
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 9) + 108) <= 5u)
  {
LABEL_20:
    *a2 = 0;
    return;
  }
  v6 = *(_DWORD *)(v3 + 40);
  if (!v6)
    goto LABEL_20;
  v14 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v14, "base reloc table", v6, a2);
  if (!*a2)
  {
    v8 = v14;
    v9 = *(unsigned int *)(v3 + 44);
    v10 = v14 + v9;
    if (!__CFADD__(v14, v9))
    {
      v11 = *((_QWORD *)this + 2);
      v12 = v10 >= v9 && v14 >= v11;
      if (v12 && v10 <= v11 + *((_QWORD *)this + 3))
        goto LABEL_19;
    }
    *(_QWORD *)&v15.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v15, a2);
    if (!*a2)
    {
LABEL_19:
      *((_QWORD *)this + 20) = v8;
      *((_QWORD *)this + 21) = v8 + *(unsigned int *)(v3 + 44);
      goto LABEL_20;
    }
  }
}

void llvm::object::COFFObjectFile::initDebugDirectoryPtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  llvm::object *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::error_code v14;
  std::error_code v15;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_16;
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 92) <= 6u)
      goto LABEL_16;
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 9) + 108) <= 6u)
  {
LABEL_16:
    *a2 = 0;
    return;
  }
  v6 = *(_DWORD *)(v3 + 48);
  if (!v6)
    goto LABEL_16;
  HIDWORD(v7) = -1227133513 * *(_DWORD *)(v3 + 52);
  LODWORD(v7) = HIDWORD(v7);
  if ((v7 >> 2) >= 0x924924A)
  {
    *(_QWORD *)&v14.__val_ = llvm::object::object_category(this);
    v14.__cat_ = (const std::error_category *)"debug directory has uneven size";
    llvm::createStringError((llvm *)3, v14, a2);
    return;
  }
  v13 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v13, "debug directory", v6, a2);
  if (!*a2)
  {
    if ((v9 = v13, v10 = *(unsigned int *)(v3 + 52), v11 = v13 + v10, !__CFADD__(v13, v10))
      && v11 >= v10
      && (v12 = *((_QWORD *)this + 2), v13 >= v12)
      && v11 <= v12 + *((_QWORD *)this + 3)
      || (*(_QWORD *)&v15.__val_ = llvm::object::object_category(v8), llvm::errorCodeToError((llvm *)4, v15, a2), !*a2))
    {
      *((_QWORD *)this + 22) = v9;
      *((_QWORD *)this + 23) = v9 + *(unsigned int *)(v3 + 52);
      goto LABEL_16;
    }
  }
}

void llvm::object::COFFObjectFile::initTLSDirectoryPtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  llvm::object *v8;
  _UNKNOWN **v9;
  int v10;
  void **v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  void **v28;
  void *__p[2];
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  __int16 v34;
  std::error_code v35;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_28;
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 92) <= 9u)
      goto LABEL_28;
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 9) + 108) <= 9u)
  {
LABEL_28:
    *a2 = 0;
    return;
  }
  v6 = *(_DWORD *)(v3 + 72);
  if (!v6)
    goto LABEL_28;
  if (*((_QWORD *)this + 9))
    v7 = 40;
  else
    v7 = 24;
  if (v7 == *(_DWORD *)(v3 + 76))
  {
    v20 = 0;
    llvm::object::COFFObjectFile::getRvaPtr(this, &v20, "TLS directory", v6, a2);
    if (!*a2)
    {
      v13 = v20;
      v14 = *(unsigned int *)(v3 + 76);
      v15 = v20 + v14;
      if (!__CFADD__(v20, v14))
      {
        v16 = *((_QWORD *)this + 2);
        v17 = v15 >= v14 && v20 >= v16;
        if (v17 && v15 <= v16 + *((_QWORD *)this + 3))
          goto LABEL_25;
      }
      *(_QWORD *)&v35.__val_ = llvm::object::object_category(v8);
      llvm::errorCodeToError((llvm *)4, v35, a2);
      if (!*a2)
      {
LABEL_25:
        v19 = 200;
        if (!*((_QWORD *)this + 9))
          v19 = 192;
        *(_QWORD *)((char *)this + v19) = v13;
        goto LABEL_28;
      }
    }
  }
  else
  {
    v9 = llvm::object::object_category(this);
    v10 = *(_DWORD *)(v3 + 76);
    __p[0] = 0;
    __p[1] = 0;
    v30 = 0;
    v21 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v20 = (unint64_t)&unk_1E0E22B10;
    v28 = __p;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v20, 0, 0, 0);
    v31[0] = &unk_1E0E20360;
    v31[1] = "TLS Directory size (%u) is not the expected size (%llu).";
    v32 = v10;
    v33 = v7;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v20, (uint64_t)v31);
    v11 = v28;
    v12 = operator new(0x38uLL);
    v34 = 260;
    v31[0] = v11;
    *a2 = llvm::StringError::StringError((uint64_t)v12, (llvm::Twine *)v31, 3, (uint64_t)v9);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v20);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
  }
}

void llvm::object::COFFObjectFile::initLoadConfigPtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  llvm::object *v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unsigned int *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  _OWORD v25[2];
  _OWORD v26[2];
  _OWORD v27[2];
  unint64_t v28;
  std::error_code v29;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_38;
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 92) <= 0xAu)
      goto LABEL_38;
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 9) + 108) <= 0xAu)
  {
LABEL_38:
    *a2 = 0;
    return;
  }
  v6 = *(_DWORD *)(v3 + 80);
  if (!v6)
    goto LABEL_38;
  v28 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v28, "load config table", v6, a2);
  if (*a2)
    return;
  v9 = (_OWORD *)((char *)this + 16);
  v8 = *((_QWORD *)this + 2);
  v10 = v28;
  v11 = *(unsigned int *)(v3 + 84);
  v12 = v28 + v11;
  if (__CFADD__(v28, v11)
    || (v12 >= v11 ? (v13 = v28 >= v8) : (v13 = 0), v13 ? (v14 = v12 > v8 + *((_QWORD *)this + 3)) : (v14 = 1), v14))
  {
    *(_QWORD *)&v29.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v29, a2);
    if (*a2)
      return;
  }
  else
  {
    *a2 = 0;
  }
  *((_QWORD *)this + 26) = v10;
  v15 = *((_QWORD *)this + 9);
  if (!v15)
    goto LABEL_38;
  if (*(_DWORD *)v10 < 0xD0u)
    goto LABEL_38;
  v16 = *(_QWORD *)(v10 + 200);
  if (!v16)
    goto LABEL_38;
  v17 = *((_QWORD *)this + 8);
  if (v17)
    LODWORD(v18) = *(_DWORD *)(v17 + 28);
  else
    v18 = *(_QWORD *)(v15 + 24);
  llvm::object::COFFObjectFile::getRvaPtr(this, &v28, "CHPE metadata", v16 - v18, a2);
  if (!*a2)
  {
    v19 = *((_OWORD *)this + 2);
    v27[0] = *v9;
    v27[1] = v19;
    v20 = (unsigned int *)v28;
    llvm::object::Binary::checkOffset((llvm::object *)v27, v28, 8uLL, a2);
    if (!*a2)
    {
      *((_QWORD *)this + 27) = v20;
      if (v20[2])
      {
        llvm::object::COFFObjectFile::getRvaPtr(this, &v28, "CHPE code map", v20[1], a2);
        if (*a2)
          return;
        v21 = *((_OWORD *)this + 2);
        v26[0] = *v9;
        v26[1] = v21;
        llvm::object::Binary::checkOffset((llvm::object *)v26, v28, 8 * *(unsigned int *)(*((_QWORD *)this + 27) + 8), a2);
        if (*a2)
          return;
        v20 = (unsigned int *)*((_QWORD *)this + 27);
      }
      if (v20[12])
      {
        llvm::object::COFFObjectFile::getRvaPtr(this, &v28, "CHPE entry point ranges", v20[3], a2);
        if (*a2)
          return;
        v22 = *((_OWORD *)this + 2);
        v25[0] = *v9;
        v25[1] = v22;
        llvm::object::Binary::checkOffset((llvm::object *)v25, v28, 12 * *(unsigned int *)(*((_QWORD *)this + 27) + 48), a2);
        if (*a2)
          return;
        v20 = (unsigned int *)*((_QWORD *)this + 27);
      }
      if (!v20[13])
        goto LABEL_38;
      llvm::object::COFFObjectFile::getRvaPtr(this, &v28, "CHPE redirection metadata", v20[4], a2);
      if (!*a2)
      {
        v23 = *((_OWORD *)this + 2);
        v24[0] = *v9;
        v24[1] = v23;
        llvm::object::Binary::checkOffset((llvm::object *)v24, v28, 8 * *(unsigned int *)(*((_QWORD *)this + 27) + 52), a2);
        if (!*a2)
          goto LABEL_38;
      }
    }
  }
}

void llvm::object::COFFObjectFile::initialize(llvm::object::COFFObjectFile *this@<X0>, _QWORD *a2@<X8>)
{
  llvm::object *v4;
  unint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _WORD *v11;
  unint64_t v12;
  std::error_code v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v18;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::error_code v37;
  _DWORD *v38;
  int v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _OWORD v50[2];
  _QWORD *v51;
  _QWORD *v52;
  std::error_code v53;
  std::error_code v54;
  std::error_code v55;
  std::error_code v56;

  v4 = (llvm::object *)std::system_category();
  v5 = *((_QWORD *)this + 3);
  if (v5 <= 0x13)
  {
    *(_QWORD *)&v14.__val_ = llvm::object::object_category(v4);
    v15 = a2;
    v16 = 4;
    goto LABEL_12;
  }
  v6 = (_QWORD *)((char *)this + 16);
  if (v5 <= 0x43)
  {
    v4 = (llvm::object *)llvm::object::object_category(v4);
    v10 = 0;
    v9 = 0;
    v11 = (_WORD *)*((_QWORD *)this + 2);
    if ((unint64_t)v11 <= 0xFFFFFFFFFFFFFFEBLL && v11 + 10 <= (_WORD *)((char *)v11 + *((_QWORD *)this + 3)))
      goto LABEL_25;
    goto LABEL_23;
  }
  v7 = (_BYTE *)*v6;
  if (*(_BYTE *)*v6 != 77 || v7[1] != 90)
  {
    v10 = 0;
    v9 = 0;
    v11 = (_WORD *)*v6;
    v18 = (unint64_t)&v7[v5];
    if ((unint64_t)v7 <= 0xFFFFFFFFFFFFFFEBLL && (unint64_t)(v7 + 20) <= v18)
      goto LABEL_25;
    goto LABEL_23;
  }
  v8 = *((unsigned int *)v7 + 15);
  if (*(_DWORD *)&v7[v8] != 17744)
    goto LABEL_84;
  v9 = v8 + 4;
  v10 = 1;
  v11 = &v7[v8 + 4];
  v12 = (unint64_t)&v7[v5];
  if ((unint64_t)v11 > 0xFFFFFFFFFFFFFFEBLL || (unint64_t)(v11 + 10) > v12)
  {
LABEL_23:
    *(_QWORD *)&v53.__val_ = llvm::object::object_category(v4);
    v4 = (llvm::object *)llvm::errorCodeToError((llvm *)4, v53, a2);
    if (*a2)
      return;
  }
LABEL_25:
  *((_QWORD *)this + 6) = v11;
  *a2 = 0;
  if ((v10 & 1) == 0)
  {
    if (*v11)
    {
LABEL_39:
      v4 = (llvm::object *)std::system_category();
      v24 = *((_QWORD *)this + 6);
      if (*(__int16 *)(v24 + 2) != -1)
      {
        v9 += 20;
        v25 = (_BYTE *)*v6;
        if (!v10)
          goto LABEL_41;
        goto LABEL_49;
      }
      *(_QWORD *)&v14.__val_ = v4;
      v15 = a2;
      v16 = 0;
LABEL_12:
      llvm::errorCodeToError((llvm *)v16, v14, v15);
      return;
    }
    if ((__int16)v11[1] == -1)
    {
      if (*((_QWORD *)this + 3) <= 0x37uLL)
      {
        v4 = (llvm::object *)llvm::object::object_category(v4);
      }
      else
      {
        v20 = (char *)this + 56;
        v21 = *((_OWORD *)this + 2);
        v50[0] = *(_OWORD *)v6;
        v50[1] = v21;
        v4 = getObject<llvm::object::coff_bigobj_file_header>((llvm::object *)a2, (unint64_t *)this + 7, (unint64_t *)v50, *((_QWORD *)this + 2) + v9);
        if (*a2)
          return;
        v22 = *(_QWORD *)v20;
        if (*(unsigned __int16 *)(*(_QWORD *)v20 + 4) >= 2u
          && *(_QWORD *)(v22 + 12) == 0x4BA9BAEED1BAA1C7
          && *(_QWORD *)(v22 + 20) == 0xB8DCA46AF6FA20AFLL)
        {
          *((_QWORD *)this + 6) = 0;
          v9 += 56;
          v25 = (_BYTE *)*((_QWORD *)this + 2);
LABEL_70:
          v24 = 0;
          v26 = &v25[v9];
          v28 = 40 * *(unsigned int *)(v22 + 44);
          v29 = (unint64_t)&v25[v9 + v28];
          if (!__CFADD__(v28, &v25[v9]))
            goto LABEL_71;
          goto LABEL_74;
        }
        *(_QWORD *)v20 = 0;
      }
    }
    v11 = (_WORD *)*((_QWORD *)this + 6);
  }
  if (v11)
    goto LABEL_39;
  v24 = 0;
  v25 = (_BYTE *)*v6;
  if (!v10)
  {
LABEL_41:
    if (v24)
      goto LABEL_42;
    goto LABEL_69;
  }
LABEL_49:
  v30 = (unsigned __int16 *)&v25[v9];
  if ((unint64_t)&v25[v9] > 0xFFFFFFFFFFFFFF9FLL || v30 + 48 > (unsigned __int16 *)&v25[*((_QWORD *)this + 3)])
  {
    *(_QWORD *)&v54.__val_ = llvm::object::object_category(v4);
    v4 = (llvm::object *)llvm::errorCodeToError((llvm *)4, v54, a2);
    if (*a2)
      return;
  }
  *a2 = 0;
  v31 = *v30;
  if (v31 != 267)
  {
    if (v31 == 523)
    {
      *((_QWORD *)this + 9) = v30;
      v25 = (_BYTE *)*((_QWORD *)this + 2);
      v32 = (unint64_t)&v25[v9 + 112];
      v33 = 8 * *((unsigned int *)v30 + 27);
      v34 = v33 + v32;
      if (!__CFADD__(v33, v32))
        goto LABEL_58;
      goto LABEL_66;
    }
LABEL_84:
    *(_QWORD *)&v37.__val_ = llvm::object::object_category(v4);
    v37.__cat_ = (const std::error_category *)"incorrect PE magic";
LABEL_94:
    llvm::createStringError((llvm *)3, v37, a2);
    return;
  }
  *((_QWORD *)this + 8) = v30;
  v25 = (_BYTE *)*((_QWORD *)this + 2);
  v32 = (unint64_t)&v25[v9 + 96];
  v33 = 8 * *((unsigned int *)v30 + 23);
  v34 = v33 + v32;
  if (!__CFADD__(v33, v32))
  {
LABEL_58:
    if (v34 >= v33 && (unint64_t)v25 <= v32 && v34 <= (unint64_t)&v25[*((_QWORD *)this + 3)])
      goto LABEL_68;
  }
LABEL_66:
  *(_QWORD *)&v55.__val_ = llvm::object::object_category(v4);
  v4 = (llvm::object *)llvm::errorCodeToError((llvm *)4, v55, a2);
  if (*a2)
    return;
  v25 = (_BYTE *)*v6;
LABEL_68:
  *((_QWORD *)this + 10) = v32;
  *a2 = 0;
  v24 = *((_QWORD *)this + 6);
  if (!v24)
  {
LABEL_69:
    v22 = *((_QWORD *)this + 7);
    goto LABEL_70;
  }
LABEL_42:
  v26 = &v25[v9 + *(unsigned __int16 *)(v24 + 16)];
  v27 = *(unsigned __int16 *)(v24 + 2);
  if (v27 == 0xFFFF)
    v27 = 0;
  v28 = 40 * v27;
  v29 = (unint64_t)&v26[v28];
  if (!__CFADD__(v28, v26))
  {
LABEL_71:
    if (v29 >= v28 && v25 <= v26 && v29 <= (unint64_t)&v25[*((_QWORD *)this + 3)])
      goto LABEL_76;
  }
LABEL_74:
  *(_QWORD *)&v56.__val_ = llvm::object::object_category(v4);
  v4 = (llvm::object *)llvm::errorCodeToError((llvm *)4, v56, a2);
  if (*a2)
    return;
  v24 = *((_QWORD *)this + 6);
LABEL_76:
  *((_QWORD *)this + 11) = v26;
  *a2 = 0;
  if (v24)
  {
    if (*(__int16 *)(v24 + 2) != -1 && *(_DWORD *)(v24 + 8))
    {
LABEL_79:
      llvm::object::COFFObjectFile::initSymbolTablePtr(this, &v52);
      if (v52)
      {
        v49 = v52;
        v52 = 0;
        llvm::consumeError(&v49);
        if (v49)
          (*(void (**)(_QWORD *))(*v49 + 8))(v49);
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 13) = 0;
        *((_DWORD *)this + 30) = 0;
        *((_QWORD *)this + 14) = 0;
        if (v52)
          (*(void (**)(_QWORD *))(*v52 + 8))(v52);
      }
      goto LABEL_95;
    }
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 7) + 48))
  {
    goto LABEL_79;
  }
  if (*((_QWORD *)this + 12) || *((_QWORD *)this + 13))
  {
    if (v24)
    {
      if (*(__int16 *)(v24 + 2) == -1)
        goto LABEL_95;
      v38 = (_DWORD *)(v24 + 12);
    }
    else
    {
      v38 = (_DWORD *)(*((_QWORD *)this + 7) + 52);
    }
    if (*v38)
    {
      *(_QWORD *)&v37.__val_ = llvm::object::object_category(v4);
      v37.__cat_ = (const std::error_category *)"symbol table missing";
      goto LABEL_94;
    }
  }
LABEL_95:
  llvm::object::COFFObjectFile::initImportTablePtr(this, (uint64_t *)&v48);
  if (v48)
  {
    v39 = (*(uint64_t (**)(_QWORD *, void *))(*v48 + 48))(v48, &llvm::object::BinaryError::ID);
    v40 = v48;
    if (v39)
    {
      v48 = 0;
      v51 = v40;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v51, (uint64_t *)&v52);
      if (v51)
        (*(void (**)(_QWORD *))(*v51 + 8))(v51);
      v41 = a2;
      goto LABEL_102;
    }
  }
  else
  {
    v40 = 0;
  }
  *a2 = v40;
  v41 = (uint64_t *)&v48;
LABEL_102:
  *v41 = 0;
  if (v48)
    (*(void (**)(_QWORD *))(*v48 + 8))(v48);
  if (!*a2)
  {
    llvm::object::COFFObjectFile::initDelayImportTablePtr(this, (uint64_t *)&v47);
    ignoreStrippedErrors(a2, &v47);
    if (v47)
      (*(void (**)(_QWORD *))(*v47 + 8))(v47);
    if (!*a2)
    {
      llvm::object::COFFObjectFile::initExportTablePtr(this, (uint64_t *)&v46);
      ignoreStrippedErrors(a2, &v46);
      if (v46)
        (*(void (**)(_QWORD *))(*v46 + 8))(v46);
      if (!*a2)
      {
        llvm::object::COFFObjectFile::initBaseRelocPtr(this, (uint64_t *)&v45);
        ignoreStrippedErrors(a2, &v45);
        if (v45)
          (*(void (**)(_QWORD *))(*v45 + 8))(v45);
        if (!*a2)
        {
          llvm::object::COFFObjectFile::initDebugDirectoryPtr(this, (uint64_t *)&v44);
          ignoreStrippedErrors(a2, &v44);
          if (v44)
            (*(void (**)(_QWORD *))(*v44 + 8))(v44);
          if (!*a2)
          {
            llvm::object::COFFObjectFile::initTLSDirectoryPtr(this, (uint64_t *)&v43);
            ignoreStrippedErrors(a2, &v43);
            if (v43)
              (*(void (**)(_QWORD *))(*v43 + 8))(v43);
            if (!*a2)
            {
              llvm::object::COFFObjectFile::initLoadConfigPtr(this, (uint64_t *)&v42);
              ignoreStrippedErrors(a2, &v42);
              if (v42)
                (*(void (**)(_QWORD *))(*v42 + 8))(v42);
              if (!*a2)
                *a2 = 0;
            }
          }
        }
      }
    }
  }
}

llvm::object *getObject<llvm::object::coff_bigobj_file_header>(llvm::object *result, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  llvm::object *v6;
  BOOL v7;
  std::error_code v8;

  v6 = result;
  if (a4 <= 0xFFFFFFFFFFFFFFC7 && (*a3 <= a4 ? (v7 = a4 + 56 > *a3 + a3[1]) : (v7 = 1), !v7)
    || (*(_QWORD *)&v8.__val_ = llvm::object::object_category(result),
        result = (llvm::object *)llvm::errorCodeToError((llvm *)4, v8, v6),
        !*(_QWORD *)v6))
  {
    *a2 = a4;
    *(_QWORD *)v6 = 0;
  }
  return result;
}

_QWORD *ignoreStrippedErrors(_QWORD *a1, _QWORD **a2)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  result = *a2;
  if (!*a2)
  {
    v5 = 0;
    goto LABEL_7;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, void *))(*result + 48))(result, &llvm::object::BinaryError::ID);
  v5 = *a2;
  if (!(_DWORD)result)
  {
LABEL_7:
    *a1 = v5;
    *a2 = 0;
    return result;
  }
  *a2 = 0;
  v6 = v5;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6, &v7);
  result = v6;
  if (v6)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  *a1 = 0;
  return result;
}

uint64_t llvm::object::COFFObjectFile::symbol_begin(llvm::object::COFFObjectFile *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (!result)
    return *((_QWORD *)this + 13);
  return result;
}

uint64_t llvm::object::COFFObjectFile::symbol_end(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t llvm::object::COFFObjectFile::section_begin(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t llvm::object::COFFObjectFile::section_end(llvm::object::COFFObjectFile *this)
{
  uint64_t v1;
  int v2;

  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    v2 = *(unsigned __int16 *)(v1 + 2);
    if (v2 == 0xFFFF)
      return *((_QWORD *)this + 11);
  }
  else
  {
    v2 = *(_DWORD *)(*((_QWORD *)this + 7) + 44);
  }
  return *((_QWORD *)this + 11) + 40 * v2;
}

uint64_t llvm::object::COFFObjectFile::getBytesInAddress(llvm::object::COFFObjectFile *this)
{
  uint64_t v2;

  v2 = 8;
  if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 392))(this) != 38)
  {
    if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 392))(this) == 3)
      return 8;
    else
      return 4;
  }
  return v2;
}

const char *llvm::object::COFFObjectFile::getFileFormatName(llvm::object::COFFObjectFile *this)
{
  unsigned __int16 *v1;
  int v2;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (v1)
  {
    v2 = *v1;
    if (*((_QWORD *)this + 27))
    {
      if (v2 == 34404)
        return "COFF-ARM64EC";
      if (v2 == 43620)
        return "COFF-ARM64X";
    }
    if (v2 <= 42560)
      goto LABEL_6;
LABEL_11:
    if (v2 != 42561)
    {
      if (v2 != 42574)
      {
        if (v2 == 43620)
          return "COFF-ARM64";
        return "COFF-<unknown arch>";
      }
      return "COFF-ARM64X";
    }
    return "COFF-ARM64EC";
  }
  v2 = *(unsigned __int16 *)(*((_QWORD *)this + 7) + 6);
  if (v2 > 0xA640)
    goto LABEL_11;
LABEL_6:
  if (v2 == 332)
    return "COFF-i386";
  if (v2 != 452)
  {
    if (v2 == 34404)
      return "COFF-x86-64";
    return "COFF-<unknown arch>";
  }
  return "COFF-ARM";
}

uint64_t llvm::object::COFFObjectFile::getArch(llvm::object::COFFObjectFile *this)
{
  unsigned __int16 *v1;
  int v2;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (!v1)
  {
    v2 = *(unsigned __int16 *)(*((_QWORD *)this + 7) + 6);
    if (v2 <= 0xA640)
      goto LABEL_8;
    goto LABEL_13;
  }
  v2 = *v1;
  if (*((_QWORD *)this + 27))
  {
    if (v2 == 34404 || v2 == 43620)
      return 3;
  }
  if (v2 > 42560)
  {
LABEL_13:
    if (v2 != 42561 && v2 != 42574 && v2 != 43620)
      return 0;
    return 3;
  }
LABEL_8:
  switch(v2)
  {
    case 332:
      return 37;
    case 452:
      return 35;
    case 34404:
      return 38;
  }
  return 0;
}

uint64_t llvm::object::COFFObjectFile::getStartAddress@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 64);
  *(_BYTE *)(a2 + 8) &= ~1u;
  if (v2)
    *(_QWORD *)a2 = *(unsigned int *)(v2 + 16);
  else
    *(_QWORD *)a2 = 0;
  return this;
}

void llvm::object::COFFObjectFile::getString(llvm::object::COFFObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  std::error_code v10;
  std::error_code v11;

  v4 = *((_DWORD *)this + 30);
  if (v4 > 4)
  {
    if (v4 <= a2)
    {
      *(_QWORD *)&v11.__val_ = llvm::object::object_category(this);
      llvm::errorCodeToError((llvm *)4, v11, &v8);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v5 = *((_QWORD *)this + 14);
      v6 = v5 + a2;
      if (v5)
        v7 = strlen((const char *)(v5 + a2));
      else
        v7 = 0;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
    }
  }
  else
  {
    *(_QWORD *)&v10.__val_ = llvm::object::object_category(this);
    v10.__cat_ = (const std::error_category *)"string table empty";
    llvm::createStringError((llvm *)3, v10, &v9);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v9;
  }
}

void llvm::object::COFFObjectFile::moveRelocationNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 10;
}

uint64_t llvm::object::COFFObjectFile::getRelocationOffset(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t llvm::object::COFFObjectFile::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = a1[12];
  if (!v3 && !a1[13])
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  v4 = a1[6];
  if (v4)
  {
    if (*(__int16 *)(v4 + 2) == -1 || v2 >= *(_DWORD *)(v4 + 12))
      return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  }
  else if (v2 >= *(_DWORD *)(a1[7] + 52))
  {
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  }
  if (v3)
    return v3 + 18 * v2;
  else
    return a1[13] + 20 * v2;
}

uint64_t llvm::object::COFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 8);
}

const char *llvm::object::COFFObjectFile::getRelocationTypeName(llvm::object::COFFObjectFile *this, unsigned int a2)
{
  unsigned __int16 *v2;
  int v3;
  const char *result;
  uint64_t v6;
  char **v7;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *v2;
    if (*((_QWORD *)this + 27))
    {
      if (v3 == 34404 || v3 == 43620)
        goto LABEL_22;
    }
    result = "Unknown";
    if (*v2 <= 0xA640u)
      goto LABEL_8;
LABEL_14:
    if (v3 != 42561 && v3 != 42574 && v3 != 43620)
      return result;
LABEL_22:
    if (a2 >= 0x12)
      return "Unknown";
    v6 = (__int16)a2;
    v7 = off_1E0E576E0;
    return v7[v6];
  }
  v3 = *(unsigned __int16 *)(*((_QWORD *)this + 7) + 6);
  result = "Unknown";
  if (v3 > 42560)
    goto LABEL_14;
LABEL_8:
  if (v3 == 332)
  {
    if (a2 >= 0x15)
      return result;
    v6 = (__int16)a2;
    v7 = off_1E0E57770;
    return v7[v6];
  }
  if (v3 == 452)
  {
    if (a2 >= 0x17)
      return result;
    v6 = (__int16)a2;
    v7 = off_1E0E57628;
    return v7[v6];
  }
  if (v3 == 34404 && a2 < 0x11)
  {
    v6 = (__int16)a2;
    v7 = off_1E0E575A0;
    return v7[v6];
  }
  return result;
}

void llvm::object::COFFObjectFile::getRelocationTypeName(llvm::object::COFFObjectFile *a1, uint64_t a2, _QWORD *a3)
{
  size_t v4;
  const char *RelocationTypeName;
  size_t v6;
  uint64_t v7;

  RelocationTypeName = llvm::object::COFFObjectFile::getRelocationTypeName(a1, *(unsigned __int16 *)(a2 + 8));
  v6 = v4;
  v7 = a3[1];
  if (a3[2] < v4 + v7)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v4 + v7, 1);
    v7 = a3[1];
  }
  if (v6)
  {
    memcpy((void *)(*a3 + v7), RelocationTypeName, v6);
    v7 = a3[1];
  }
  a3[1] = v7 + v6;
}

BOOL llvm::object::COFFObjectFile::isRelocatableObject(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 10) == 0;
}

const char *llvm::object::COFFObjectFile::mapDebugSectionName(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  const char *result;

  result = (const char *)a2;
  if (a3 == 7 && *a2 == 1717528677 && *(_DWORD *)((char *)a2 + 3) == 1835102822)
    return "eh_frame";
  return result;
}

void llvm::object::ObjectFile::createCOFFObjectFile(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];

  v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  v4 = operator new(0xE0uLL);
  llvm::object::ObjectFile::ObjectFile((uint64_t)v4, 10, v7);
  *(_QWORD *)v5 = off_1E0E24C88;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 108) = 0u;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 144) = 0;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_QWORD *)(v5 + 216) = 0;
  llvm::object::COFFObjectFile::initialize((llvm::object::COFFObjectFile *)v5, v7);
  v6 = *(_QWORD *)&v7[0];
  if (*(_QWORD *)&v7[0])
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    (*(void (**)(void *))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)a2 = v6;
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = v4;
  }
}

void llvm::object::COFFObjectFile::~COFFObjectFile(llvm::object::COFFObjectFile *this)
{
  void *v1;

  llvm::object::SymbolicFile::~SymbolicFile(this);
  operator delete(v1);
}

uint64_t llvm::object::COFFObjectFile::is64Bit(llvm::object::COFFObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::ObjectFile::mapReflectionSectionNameToEnumValue()
{
  return 11;
}

void llvm::object::ObjectFile::dynamic_relocation_sections(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double llvm::object::COFFObjectFile::getFeatures@<D0>(uint64_t a1@<X8>)
{
  double result;
  std::vector<std::string> v4;

  llvm::SubtargetFeatures::SubtargetFeatures(&v4, "", 0);
  *(_BYTE *)(a1 + 24) &= ~1u;
  result = *(double *)&v4.__begin_;
  *(std::vector<std::string> *)a1 = v4;
  return result;
}

void llvm::object::ObjectFile::tryGetCPUName(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void *llvm::ErrorInfo<llvm::object::SectionStrippedError,llvm::object::BinaryError>::dynamicClassID()
{
  return &llvm::object::BinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::SectionStrippedError,llvm::object::BinaryError>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::BinaryError::ID || v3;
}

uint64_t llvm::format_object<unsigned int,char const*>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned int,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

const char *llvm::object::getELFRelocationTypeName(llvm::object *this, unsigned int a2)
{
  uint64_t v2;
  char **v3;
  const char *result;

  switch((int)this)
  {
    case 2:
    case 18:
    case 43:
      if (a2 >= 0x55)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E59CB0;
      goto LABEL_46;
    case 3:
    case 6:
      if (a2 >= 0x2C)
        goto LABEL_120;
      return off_1E0E57AC8[a2];
    case 4:
      if (a2 >= 0x2B)
        goto LABEL_120;
      return off_1E0E57818[a2];
    case 8:
      if (a2 >= 0xFA)
        goto LABEL_120;
      return off_1E0E57C28[a2];
    case 20:
      result = "R_PPC_NONE";
      switch(a2)
      {
        case 0u:
          return result;
        case 1u:
          result = "R_PPC_ADDR32";
          break;
        case 2u:
          result = "R_PPC_ADDR24";
          break;
        case 3u:
          result = "R_PPC_ADDR16";
          break;
        case 4u:
          result = "R_PPC_ADDR16_LO";
          break;
        case 5u:
          result = "R_PPC_ADDR16_HI";
          break;
        case 6u:
          result = "R_PPC_ADDR16_HA";
          break;
        case 7u:
          result = "R_PPC_ADDR14";
          break;
        case 8u:
          result = "R_PPC_ADDR14_BRTAKEN";
          break;
        case 9u:
          result = "R_PPC_ADDR14_BRNTAKEN";
          break;
        case 0xAu:
          result = "R_PPC_REL24";
          break;
        case 0xBu:
          result = "R_PPC_REL14";
          break;
        case 0xCu:
          result = "R_PPC_REL14_BRTAKEN";
          break;
        case 0xDu:
          result = "R_PPC_REL14_BRNTAKEN";
          break;
        case 0xEu:
          result = "R_PPC_GOT16";
          break;
        case 0xFu:
          result = "R_PPC_GOT16_LO";
          break;
        case 0x10u:
          result = "R_PPC_GOT16_HI";
          break;
        case 0x11u:
          result = "R_PPC_GOT16_HA";
          break;
        case 0x12u:
          result = "R_PPC_PLTREL24";
          break;
        case 0x13u:
          result = "R_PPC_COPY";
          break;
        case 0x14u:
          result = "R_PPC_GLOB_DAT";
          break;
        case 0x15u:
          result = "R_PPC_JMP_SLOT";
          break;
        case 0x16u:
          result = "R_PPC_RELATIVE";
          break;
        case 0x17u:
          result = "R_PPC_LOCAL24PC";
          break;
        case 0x18u:
          result = "R_PPC_UADDR32";
          break;
        case 0x19u:
          result = "R_PPC_UADDR16";
          break;
        case 0x1Au:
          result = "R_PPC_REL32";
          break;
        case 0x1Bu:
          result = "R_PPC_PLT32";
          break;
        case 0x1Cu:
          result = "R_PPC_PLTREL32";
          break;
        case 0x1Du:
          result = "R_PPC_PLT16_LO";
          break;
        case 0x1Eu:
          result = "R_PPC_PLT16_HI";
          break;
        case 0x1Fu:
          result = "R_PPC_PLT16_HA";
          break;
        case 0x20u:
          result = "R_PPC_SDAREL16";
          break;
        case 0x21u:
          result = "R_PPC_SECTOFF";
          break;
        case 0x22u:
          result = "R_PPC_SECTOFF_LO";
          break;
        case 0x23u:
          result = "R_PPC_SECTOFF_HI";
          break;
        case 0x24u:
          result = "R_PPC_SECTOFF_HA";
          break;
        case 0x25u:
          result = "R_PPC_ADDR30";
          break;
        case 0x43u:
          result = "R_PPC_TLS";
          break;
        case 0x44u:
          result = "R_PPC_DTPMOD32";
          break;
        case 0x45u:
          result = "R_PPC_TPREL16";
          break;
        case 0x46u:
          result = "R_PPC_TPREL16_LO";
          break;
        case 0x47u:
          result = "R_PPC_TPREL16_HI";
          break;
        case 0x48u:
          result = "R_PPC_TPREL16_HA";
          break;
        case 0x49u:
          result = "R_PPC_TPREL32";
          break;
        case 0x4Au:
          result = "R_PPC_DTPREL16";
          break;
        case 0x4Bu:
          result = "R_PPC_DTPREL16_LO";
          break;
        case 0x4Cu:
          result = "R_PPC_DTPREL16_HI";
          break;
        case 0x4Du:
          result = "R_PPC_DTPREL16_HA";
          break;
        case 0x4Eu:
          result = "R_PPC_DTPREL32";
          break;
        case 0x4Fu:
          result = "R_PPC_GOT_TLSGD16";
          break;
        case 0x50u:
          result = "R_PPC_GOT_TLSGD16_LO";
          break;
        case 0x51u:
          result = "R_PPC_GOT_TLSGD16_HI";
          break;
        case 0x52u:
          result = "R_PPC_GOT_TLSGD16_HA";
          break;
        case 0x53u:
          result = "R_PPC_GOT_TLSLD16";
          break;
        case 0x54u:
          result = "R_PPC_GOT_TLSLD16_LO";
          break;
        case 0x55u:
          result = "R_PPC_GOT_TLSLD16_HI";
          break;
        case 0x56u:
          result = "R_PPC_GOT_TLSLD16_HA";
          break;
        case 0x57u:
          result = "R_PPC_GOT_TPREL16";
          break;
        case 0x58u:
          result = "R_PPC_GOT_TPREL16_LO";
          break;
        case 0x59u:
          result = "R_PPC_GOT_TPREL16_HI";
          break;
        case 0x5Au:
          result = "R_PPC_GOT_TPREL16_HA";
          break;
        case 0x5Bu:
          result = "R_PPC_GOT_DTPREL16";
          break;
        case 0x5Cu:
          result = "R_PPC_GOT_DTPREL16_LO";
          break;
        case 0x5Du:
          result = "R_PPC_GOT_DTPREL16_HI";
          break;
        case 0x5Eu:
          result = "R_PPC_GOT_DTPREL16_HA";
          break;
        case 0x5Fu:
          result = "R_PPC_TLSGD";
          break;
        case 0x60u:
          result = "R_PPC_TLSLD";
          break;
        case 0xF8u:
          result = "R_PPC_IRELATIVE";
          break;
        case 0xF9u:
          result = "R_PPC_REL16";
          break;
        case 0xFAu:
          result = "R_PPC_REL16_LO";
          break;
        case 0xFBu:
          result = "R_PPC_REL16_HI";
          break;
        case 0xFCu:
          result = "R_PPC_REL16_HA";
          break;
        default:
          goto LABEL_120;
      }
      return result;
    case 21:
      if (a2 >= 0xFD)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E590C8;
      goto LABEL_46;
    case 22:
      if (a2 >= 0x42)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E59AA0;
      goto LABEL_46;
    case 40:
      if (a2 >= 0xA1)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E583F8;
      goto LABEL_46;
    case 62:
      if (a2 >= 0x2B)
        goto LABEL_120;
      return off_1E0E57970[a2];
    case 83:
      if (a2 >= 0x24)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E58C50;
      goto LABEL_46;
    case 93:
    case 195:
      if (a2 >= 0x6A)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E58900;
      goto LABEL_46;
    case 94:
      if (a2 >= 0x39)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E5A740;
      goto LABEL_46;
    case 105:
      if (a2 >= 0xB)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E5A028;
      goto LABEL_46;
    case 164:
      if (a2 >= 0x64)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E58D70;
      goto LABEL_46;
    case 183:
      result = "R_AARCH64_NONE";
      switch(a2)
      {
        case 0u:
          return result;
        case 1u:
          result = "R_AARCH64_P32_ABS32";
          break;
        case 2u:
          result = "R_AARCH64_P32_ABS16";
          break;
        case 3u:
          result = "R_AARCH64_P32_PREL32";
          break;
        case 4u:
          result = "R_AARCH64_P32_PREL16";
          break;
        case 5u:
          result = "R_AARCH64_P32_MOVW_UABS_G0";
          break;
        case 6u:
          result = "R_AARCH64_P32_MOVW_UABS_G0_NC";
          break;
        case 7u:
          result = "R_AARCH64_P32_MOVW_UABS_G1";
          break;
        case 8u:
          result = "R_AARCH64_P32_MOVW_SABS_G0";
          break;
        case 9u:
          result = "R_AARCH64_P32_LD_PREL_LO19";
          break;
        case 0xAu:
          result = "R_AARCH64_P32_ADR_PREL_LO21";
          break;
        case 0xBu:
          result = "R_AARCH64_P32_ADR_PREL_PG_HI21";
          break;
        case 0xCu:
          result = "R_AARCH64_P32_ADD_ABS_LO12_NC";
          break;
        case 0xDu:
          result = "R_AARCH64_P32_LDST8_ABS_LO12_NC";
          break;
        case 0xEu:
          result = "R_AARCH64_P32_LDST16_ABS_LO12_NC";
          break;
        case 0xFu:
          result = "R_AARCH64_P32_LDST32_ABS_LO12_NC";
          break;
        case 0x10u:
          result = "R_AARCH64_P32_LDST64_ABS_LO12_NC";
          break;
        case 0x11u:
          result = "R_AARCH64_P32_LDST128_ABS_LO12_NC";
          break;
        case 0x12u:
          result = "R_AARCH64_P32_TSTBR14";
          break;
        case 0x13u:
          result = "R_AARCH64_P32_CONDBR19";
          break;
        case 0x14u:
          result = "R_AARCH64_P32_JUMP26";
          break;
        case 0x15u:
          result = "R_AARCH64_P32_CALL26";
          break;
        case 0x16u:
          result = "R_AARCH64_P32_MOVW_PREL_G0";
          break;
        case 0x17u:
          result = "R_AARCH64_P32_MOVW_PREL_G0_NC";
          break;
        case 0x18u:
          result = "R_AARCH64_P32_MOVW_PREL_G1";
          break;
        case 0x19u:
          result = "R_AARCH64_P32_GOT_LD_PREL19";
          break;
        case 0x1Au:
          result = "R_AARCH64_P32_ADR_GOT_PAGE";
          break;
        case 0x1Bu:
          result = "R_AARCH64_P32_LD32_GOT_LO12_NC";
          break;
        case 0x1Cu:
          result = "R_AARCH64_P32_LD32_GOTPAGE_LO14";
          break;
        case 0x1Du:
          result = "R_AARCH64_P32_PLT32";
          break;
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x22u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x29u:
        case 0x2Au:
        case 0x2Bu:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x36u:
        case 0x37u:
        case 0x38u:
        case 0x39u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Cu:
        case 0x3Du:
        case 0x3Eu:
        case 0x3Fu:
        case 0x40u:
        case 0x41u:
        case 0x42u:
        case 0x43u:
        case 0x44u:
        case 0x45u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x4Bu:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
        case 0x84u:
        case 0x85u:
        case 0x86u:
        case 0x87u:
        case 0x88u:
        case 0x89u:
        case 0x8Au:
        case 0x8Bu:
        case 0x8Cu:
        case 0x8Du:
        case 0x8Eu:
        case 0x8Fu:
        case 0x90u:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0x99u:
        case 0x9Au:
        case 0x9Bu:
        case 0x9Cu:
        case 0x9Du:
        case 0x9Eu:
        case 0x9Fu:
        case 0xA0u:
        case 0xA1u:
        case 0xA2u:
        case 0xA3u:
        case 0xA4u:
        case 0xA5u:
        case 0xA6u:
        case 0xA7u:
        case 0xA8u:
        case 0xA9u:
        case 0xAAu:
        case 0xABu:
        case 0xACu:
        case 0xADu:
        case 0xAEu:
        case 0xAFu:
        case 0xB0u:
        case 0xB1u:
        case 0xB2u:
        case 0xB3u:
        case 0xBDu:
        case 0xBEu:
        case 0xBFu:
        case 0xC0u:
        case 0xC1u:
        case 0xC2u:
        case 0xC3u:
        case 0xC4u:
        case 0xC5u:
        case 0xC6u:
        case 0xC7u:
        case 0xC8u:
        case 0xC9u:
        case 0xCAu:
        case 0xCBu:
        case 0xCCu:
        case 0xCDu:
        case 0xCEu:
        case 0xCFu:
        case 0xD0u:
        case 0xD1u:
        case 0xD2u:
        case 0xD3u:
        case 0xD4u:
        case 0xD5u:
        case 0xD6u:
        case 0xD7u:
        case 0xD8u:
        case 0xD9u:
        case 0xDAu:
        case 0xDBu:
        case 0xDCu:
        case 0xDDu:
        case 0xDEu:
        case 0xDFu:
        case 0xE0u:
        case 0xE1u:
        case 0xE2u:
        case 0xE3u:
        case 0xE4u:
        case 0xE5u:
        case 0xE6u:
        case 0xE7u:
        case 0xE8u:
        case 0xE9u:
        case 0xEAu:
        case 0xEBu:
        case 0xECu:
        case 0xEDu:
        case 0xEEu:
        case 0xEFu:
        case 0xF0u:
        case 0xF1u:
        case 0xF2u:
        case 0xF3u:
        case 0xF4u:
        case 0xF5u:
        case 0xF6u:
        case 0xF7u:
        case 0xF8u:
        case 0xF9u:
        case 0xFAu:
        case 0xFBu:
        case 0xFCu:
        case 0xFDu:
        case 0xFEu:
        case 0xFFu:
        case 0x100u:
        case 0x119u:
        case 0x126u:
        case 0x127u:
        case 0x128u:
        case 0x129u:
        case 0x12Au:
        case 0x13Bu:
        case 0x13Cu:
        case 0x13Du:
        case 0x13Eu:
        case 0x13Fu:
        case 0x140u:
        case 0x141u:
        case 0x142u:
        case 0x143u:
        case 0x144u:
        case 0x145u:
        case 0x146u:
        case 0x147u:
        case 0x148u:
        case 0x149u:
        case 0x14Au:
        case 0x14Bu:
        case 0x14Cu:
        case 0x14Du:
        case 0x14Eu:
        case 0x14Fu:
        case 0x150u:
        case 0x151u:
        case 0x152u:
        case 0x153u:
        case 0x154u:
        case 0x155u:
        case 0x156u:
        case 0x157u:
        case 0x158u:
        case 0x159u:
        case 0x15Au:
        case 0x15Bu:
        case 0x15Cu:
        case 0x15Du:
        case 0x15Eu:
        case 0x15Fu:
        case 0x160u:
        case 0x161u:
        case 0x162u:
        case 0x163u:
        case 0x164u:
        case 0x165u:
        case 0x166u:
        case 0x167u:
        case 0x168u:
        case 0x169u:
        case 0x16Au:
        case 0x16Bu:
        case 0x16Cu:
        case 0x16Du:
        case 0x16Eu:
        case 0x16Fu:
        case 0x170u:
        case 0x171u:
        case 0x172u:
        case 0x173u:
        case 0x174u:
        case 0x175u:
        case 0x176u:
        case 0x177u:
        case 0x178u:
        case 0x179u:
        case 0x17Au:
        case 0x17Bu:
        case 0x17Cu:
        case 0x17Du:
        case 0x17Eu:
        case 0x17Fu:
        case 0x180u:
        case 0x181u:
        case 0x182u:
        case 0x183u:
        case 0x184u:
        case 0x185u:
        case 0x186u:
        case 0x187u:
        case 0x188u:
        case 0x189u:
        case 0x18Au:
        case 0x18Bu:
        case 0x18Cu:
        case 0x18Du:
        case 0x18Eu:
        case 0x18Fu:
        case 0x190u:
        case 0x191u:
        case 0x192u:
        case 0x193u:
        case 0x194u:
        case 0x195u:
        case 0x196u:
        case 0x197u:
        case 0x198u:
        case 0x199u:
        case 0x19Au:
        case 0x19Bu:
        case 0x19Cu:
        case 0x19Du:
        case 0x19Eu:
        case 0x19Fu:
        case 0x1A0u:
        case 0x1A1u:
        case 0x1A2u:
        case 0x1A3u:
        case 0x1A4u:
        case 0x1A5u:
        case 0x1A6u:
        case 0x1A7u:
        case 0x1A8u:
        case 0x1A9u:
        case 0x1AAu:
        case 0x1ABu:
        case 0x1ACu:
        case 0x1ADu:
        case 0x1AEu:
        case 0x1AFu:
        case 0x1B0u:
        case 0x1B1u:
        case 0x1B2u:
        case 0x1B3u:
        case 0x1B4u:
        case 0x1B5u:
        case 0x1B6u:
        case 0x1B7u:
        case 0x1B8u:
        case 0x1B9u:
        case 0x1BAu:
        case 0x1BBu:
        case 0x1BCu:
        case 0x1BDu:
        case 0x1BEu:
        case 0x1BFu:
        case 0x1C0u:
        case 0x1C1u:
        case 0x1C2u:
        case 0x1C3u:
        case 0x1C4u:
        case 0x1C5u:
        case 0x1C6u:
        case 0x1C7u:
        case 0x1C8u:
        case 0x1C9u:
        case 0x1CAu:
        case 0x1CBu:
        case 0x1CCu:
        case 0x1CDu:
        case 0x1CEu:
        case 0x1CFu:
        case 0x1D0u:
        case 0x1D1u:
        case 0x1D2u:
        case 0x1D3u:
        case 0x1D4u:
        case 0x1D5u:
        case 0x1D6u:
        case 0x1D7u:
        case 0x1D8u:
        case 0x1D9u:
        case 0x1DAu:
        case 0x1DBu:
        case 0x1DCu:
        case 0x1DDu:
        case 0x1DEu:
        case 0x1DFu:
        case 0x1E0u:
        case 0x1E1u:
        case 0x1E2u:
        case 0x1E3u:
        case 0x1E4u:
        case 0x1E5u:
        case 0x1E6u:
        case 0x1E7u:
        case 0x1E8u:
        case 0x1E9u:
        case 0x1EAu:
        case 0x1EBu:
        case 0x1ECu:
        case 0x1EDu:
        case 0x1EEu:
        case 0x1EFu:
        case 0x1F0u:
        case 0x1F1u:
        case 0x1F2u:
        case 0x1F3u:
        case 0x1F4u:
        case 0x1F5u:
        case 0x1F6u:
        case 0x1F7u:
        case 0x1F8u:
        case 0x1F9u:
        case 0x1FAu:
        case 0x1FBu:
        case 0x1FCu:
        case 0x1FDu:
        case 0x1FEu:
        case 0x1FFu:
        case 0x23Eu:
        case 0x23Fu:
        case 0x240u:
        case 0x241u:
        case 0x242u:
        case 0x243u:
        case 0x244u:
        case 0x245u:
        case 0x246u:
        case 0x247u:
        case 0x248u:
        case 0x249u:
        case 0x24Au:
        case 0x24Bu:
        case 0x24Cu:
        case 0x24Du:
        case 0x24Eu:
        case 0x24Fu:
        case 0x250u:
        case 0x251u:
        case 0x252u:
        case 0x253u:
        case 0x254u:
        case 0x255u:
        case 0x256u:
        case 0x257u:
        case 0x258u:
        case 0x259u:
        case 0x25Au:
        case 0x25Bu:
        case 0x25Cu:
        case 0x25Du:
        case 0x25Eu:
        case 0x25Fu:
        case 0x260u:
        case 0x261u:
        case 0x262u:
        case 0x263u:
        case 0x264u:
        case 0x265u:
        case 0x266u:
        case 0x267u:
        case 0x268u:
        case 0x269u:
        case 0x26Au:
        case 0x26Bu:
        case 0x26Cu:
        case 0x26Du:
        case 0x26Eu:
        case 0x26Fu:
        case 0x270u:
        case 0x271u:
        case 0x272u:
        case 0x273u:
        case 0x274u:
        case 0x275u:
        case 0x276u:
        case 0x277u:
        case 0x278u:
        case 0x279u:
        case 0x27Au:
        case 0x27Bu:
        case 0x27Cu:
        case 0x27Du:
        case 0x27Eu:
        case 0x27Fu:
        case 0x280u:
        case 0x281u:
        case 0x282u:
        case 0x283u:
        case 0x284u:
        case 0x285u:
        case 0x286u:
        case 0x287u:
        case 0x288u:
        case 0x289u:
        case 0x28Au:
        case 0x28Bu:
        case 0x28Cu:
        case 0x28Du:
        case 0x28Eu:
        case 0x28Fu:
        case 0x290u:
        case 0x291u:
        case 0x292u:
        case 0x293u:
        case 0x294u:
        case 0x295u:
        case 0x296u:
        case 0x297u:
        case 0x298u:
        case 0x299u:
        case 0x29Au:
        case 0x29Bu:
        case 0x29Cu:
        case 0x29Du:
        case 0x29Eu:
        case 0x29Fu:
        case 0x2A0u:
        case 0x2A1u:
        case 0x2A2u:
        case 0x2A3u:
        case 0x2A4u:
        case 0x2A5u:
        case 0x2A6u:
        case 0x2A7u:
        case 0x2A8u:
        case 0x2A9u:
        case 0x2AAu:
        case 0x2ABu:
        case 0x2ACu:
        case 0x2ADu:
        case 0x2AEu:
        case 0x2AFu:
        case 0x2B0u:
        case 0x2B1u:
        case 0x2B2u:
        case 0x2B3u:
        case 0x2B4u:
        case 0x2B5u:
        case 0x2B6u:
        case 0x2B7u:
        case 0x2B8u:
        case 0x2B9u:
        case 0x2BAu:
        case 0x2BBu:
        case 0x2BCu:
        case 0x2BDu:
        case 0x2BEu:
        case 0x2BFu:
        case 0x2C0u:
        case 0x2C1u:
        case 0x2C2u:
        case 0x2C3u:
        case 0x2C4u:
        case 0x2C5u:
        case 0x2C6u:
        case 0x2C7u:
        case 0x2C8u:
        case 0x2C9u:
        case 0x2CAu:
        case 0x2CBu:
        case 0x2CCu:
        case 0x2CDu:
        case 0x2CEu:
        case 0x2CFu:
        case 0x2D0u:
        case 0x2D1u:
        case 0x2D2u:
        case 0x2D3u:
        case 0x2D4u:
        case 0x2D5u:
        case 0x2D6u:
        case 0x2D7u:
        case 0x2D8u:
        case 0x2D9u:
        case 0x2DAu:
        case 0x2DBu:
        case 0x2DCu:
        case 0x2DDu:
        case 0x2DEu:
        case 0x2DFu:
        case 0x2E0u:
        case 0x2E1u:
        case 0x2E2u:
        case 0x2E3u:
        case 0x2E4u:
        case 0x2E5u:
        case 0x2E6u:
        case 0x2E7u:
        case 0x2E8u:
        case 0x2E9u:
        case 0x2EAu:
        case 0x2EBu:
        case 0x2ECu:
        case 0x2EDu:
        case 0x2EEu:
        case 0x2EFu:
        case 0x2F0u:
        case 0x2F1u:
        case 0x2F2u:
        case 0x2F3u:
        case 0x2F4u:
        case 0x2F5u:
        case 0x2F6u:
        case 0x2F7u:
        case 0x2F8u:
        case 0x2F9u:
        case 0x2FAu:
        case 0x2FBu:
        case 0x2FCu:
        case 0x2FDu:
        case 0x2FEu:
        case 0x2FFu:
        case 0x300u:
        case 0x301u:
        case 0x302u:
        case 0x303u:
        case 0x304u:
        case 0x305u:
        case 0x306u:
        case 0x307u:
        case 0x308u:
        case 0x309u:
        case 0x30Au:
        case 0x30Bu:
        case 0x30Cu:
        case 0x30Du:
        case 0x30Eu:
        case 0x30Fu:
        case 0x310u:
        case 0x311u:
        case 0x312u:
        case 0x313u:
        case 0x314u:
        case 0x315u:
        case 0x316u:
        case 0x317u:
        case 0x318u:
        case 0x319u:
        case 0x31Au:
        case 0x31Bu:
        case 0x31Cu:
        case 0x31Du:
        case 0x31Eu:
        case 0x31Fu:
        case 0x320u:
        case 0x321u:
        case 0x322u:
        case 0x323u:
        case 0x324u:
        case 0x325u:
        case 0x326u:
        case 0x327u:
        case 0x328u:
        case 0x329u:
        case 0x32Au:
        case 0x32Bu:
        case 0x32Cu:
        case 0x32Du:
        case 0x32Eu:
        case 0x32Fu:
        case 0x330u:
        case 0x331u:
        case 0x332u:
        case 0x333u:
        case 0x334u:
        case 0x335u:
        case 0x336u:
        case 0x337u:
        case 0x338u:
        case 0x339u:
        case 0x33Au:
        case 0x33Bu:
        case 0x33Cu:
        case 0x33Du:
        case 0x33Eu:
        case 0x33Fu:
        case 0x340u:
        case 0x341u:
        case 0x342u:
        case 0x343u:
        case 0x344u:
        case 0x345u:
        case 0x346u:
        case 0x347u:
        case 0x348u:
        case 0x349u:
        case 0x34Au:
        case 0x34Bu:
        case 0x34Cu:
        case 0x34Du:
        case 0x34Eu:
        case 0x34Fu:
        case 0x350u:
        case 0x351u:
        case 0x352u:
        case 0x353u:
        case 0x354u:
        case 0x355u:
        case 0x356u:
        case 0x357u:
        case 0x358u:
        case 0x359u:
        case 0x35Au:
        case 0x35Bu:
        case 0x35Cu:
        case 0x35Du:
        case 0x35Eu:
        case 0x35Fu:
        case 0x360u:
        case 0x361u:
        case 0x362u:
        case 0x363u:
        case 0x364u:
        case 0x365u:
        case 0x366u:
        case 0x367u:
        case 0x368u:
        case 0x369u:
        case 0x36Au:
        case 0x36Bu:
        case 0x36Cu:
        case 0x36Du:
        case 0x36Eu:
        case 0x36Fu:
        case 0x370u:
        case 0x371u:
        case 0x372u:
        case 0x373u:
        case 0x374u:
        case 0x375u:
        case 0x376u:
        case 0x377u:
        case 0x378u:
        case 0x379u:
        case 0x37Au:
        case 0x37Bu:
        case 0x37Cu:
        case 0x37Du:
        case 0x37Eu:
        case 0x37Fu:
        case 0x380u:
        case 0x381u:
        case 0x382u:
        case 0x383u:
        case 0x384u:
        case 0x385u:
        case 0x386u:
        case 0x387u:
        case 0x388u:
        case 0x389u:
        case 0x38Au:
        case 0x38Bu:
        case 0x38Cu:
        case 0x38Du:
        case 0x38Eu:
        case 0x38Fu:
        case 0x390u:
        case 0x391u:
        case 0x392u:
        case 0x393u:
        case 0x394u:
        case 0x395u:
        case 0x396u:
        case 0x397u:
        case 0x398u:
        case 0x399u:
        case 0x39Au:
        case 0x39Bu:
        case 0x39Cu:
        case 0x39Du:
        case 0x39Eu:
        case 0x39Fu:
        case 0x3A0u:
        case 0x3A1u:
        case 0x3A2u:
        case 0x3A3u:
        case 0x3A4u:
        case 0x3A5u:
        case 0x3A6u:
        case 0x3A7u:
        case 0x3A8u:
        case 0x3A9u:
        case 0x3AAu:
        case 0x3ABu:
        case 0x3ACu:
        case 0x3ADu:
        case 0x3AEu:
        case 0x3AFu:
        case 0x3B0u:
        case 0x3B1u:
        case 0x3B2u:
        case 0x3B3u:
        case 0x3B4u:
        case 0x3B5u:
        case 0x3B6u:
        case 0x3B7u:
        case 0x3B8u:
        case 0x3B9u:
        case 0x3BAu:
        case 0x3BBu:
        case 0x3BCu:
        case 0x3BDu:
        case 0x3BEu:
        case 0x3BFu:
        case 0x3C0u:
        case 0x3C1u:
        case 0x3C2u:
        case 0x3C3u:
        case 0x3C4u:
        case 0x3C5u:
        case 0x3C6u:
        case 0x3C7u:
        case 0x3C8u:
        case 0x3C9u:
        case 0x3CAu:
        case 0x3CBu:
        case 0x3CCu:
        case 0x3CDu:
        case 0x3CEu:
        case 0x3CFu:
        case 0x3D0u:
        case 0x3D1u:
        case 0x3D2u:
        case 0x3D3u:
        case 0x3D4u:
        case 0x3D5u:
        case 0x3D6u:
        case 0x3D7u:
        case 0x3D8u:
        case 0x3D9u:
        case 0x3DAu:
        case 0x3DBu:
        case 0x3DCu:
        case 0x3DDu:
        case 0x3DEu:
        case 0x3DFu:
        case 0x3E0u:
        case 0x3E1u:
        case 0x3E2u:
        case 0x3E3u:
        case 0x3E4u:
        case 0x3E5u:
        case 0x3E6u:
        case 0x3E7u:
        case 0x3E8u:
        case 0x3E9u:
        case 0x3EAu:
        case 0x3EBu:
        case 0x3ECu:
        case 0x3EDu:
        case 0x3EEu:
        case 0x3EFu:
        case 0x3F0u:
        case 0x3F1u:
        case 0x3F2u:
        case 0x3F3u:
        case 0x3F4u:
        case 0x3F5u:
        case 0x3F6u:
        case 0x3F7u:
        case 0x3F8u:
        case 0x3F9u:
        case 0x3FAu:
        case 0x3FBu:
        case 0x3FCu:
        case 0x3FDu:
        case 0x3FEu:
        case 0x3FFu:
          goto LABEL_120;
        case 0x50u:
          result = "R_AARCH64_P32_TLSGD_ADR_PREL21";
          break;
        case 0x51u:
          result = "R_AARCH64_P32_TLSGD_ADR_PAGE21";
          break;
        case 0x52u:
          result = "R_AARCH64_P32_TLSGD_ADD_LO12_NC";
          break;
        case 0x53u:
          result = "R_AARCH64_P32_TLSLD_ADR_PREL21";
          break;
        case 0x54u:
          result = "R_AARCH64_P32_TLSLD_ADR_PAGE21";
          break;
        case 0x55u:
          result = "R_AARCH64_P32_TLSLD_ADD_LO12_NC";
          break;
        case 0x56u:
          result = "R_AARCH64_P32_TLSLD_LD_PREL19";
          break;
        case 0x57u:
          result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G1";
          break;
        case 0x58u:
          result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G0";
          break;
        case 0x59u:
          result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G0_NC";
          break;
        case 0x5Au:
          result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_HI12";
          break;
        case 0x5Bu:
          result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_LO12";
          break;
        case 0x5Cu:
          result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_LO12_NC";
          break;
        case 0x5Du:
          result = "R_AARCH64_P32_TLSLD_LDST8_DTPREL_LO12";
          break;
        case 0x5Eu:
          result = "R_AARCH64_P32_TLSLD_LDST8_DTPREL_LO12_NC";
          break;
        case 0x5Fu:
          result = "R_AARCH64_P32_TLSLD_LDST16_DTPREL_LO12";
          break;
        case 0x60u:
          result = "R_AARCH64_P32_TLSLD_LDST16_DTPREL_LO12_NC";
          break;
        case 0x61u:
          result = "R_AARCH64_P32_TLSLD_LDST32_DTPREL_LO12";
          break;
        case 0x62u:
          result = "R_AARCH64_P32_TLSLD_LDST32_DTPREL_LO12_NC";
          break;
        case 0x63u:
          result = "R_AARCH64_P32_TLSLD_LDST64_DTPREL_LO12";
          break;
        case 0x64u:
          result = "R_AARCH64_P32_TLSLD_LDST64_DTPREL_LO12_NC";
          break;
        case 0x65u:
          result = "R_AARCH64_P32_TLSLD_LDST128_DTPREL_LO12";
          break;
        case 0x66u:
          result = "R_AARCH64_P32_TLSLD_LDST128_DTPREL_LO12_NC";
          break;
        case 0x67u:
          result = "R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21";
          break;
        case 0x68u:
          result = "R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC";
          break;
        case 0x69u:
          result = "R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19";
          break;
        case 0x6Au:
          result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G1";
          break;
        case 0x6Bu:
          result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0";
          break;
        case 0x6Cu:
          result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC";
          break;
        case 0x6Du:
          result = "R_AARCH64_P32_TLSLE_ADD_TPREL_HI12";
          break;
        case 0x6Eu:
          result = "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12";
          break;
        case 0x6Fu:
          result = "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC";
          break;
        case 0x70u:
          result = "R_AARCH64_P32_TLSLE_LDST8_TPREL_LO12";
          break;
        case 0x71u:
          result = "R_AARCH64_P32_TLSLE_LDST8_TPREL_LO12_NC";
          break;
        case 0x72u:
          result = "R_AARCH64_P32_TLSLE_LDST16_TPREL_LO12";
          break;
        case 0x73u:
          result = "R_AARCH64_P32_TLSLE_LDST16_TPREL_LO12_NC";
          break;
        case 0x74u:
          result = "R_AARCH64_P32_TLSLE_LDST32_TPREL_LO12";
          break;
        case 0x75u:
          result = "R_AARCH64_P32_TLSLE_LDST32_TPREL_LO12_NC";
          break;
        case 0x76u:
          result = "R_AARCH64_P32_TLSLE_LDST64_TPREL_LO12";
          break;
        case 0x77u:
          result = "R_AARCH64_P32_TLSLE_LDST64_TPREL_LO12_NC";
          break;
        case 0x78u:
          result = "R_AARCH64_P32_TLSLE_LDST128_TPREL_LO12";
          break;
        case 0x79u:
          result = "R_AARCH64_P32_TLSLE_LDST128_TPREL_LO12_NC";
          break;
        case 0x7Au:
          result = "R_AARCH64_P32_TLSDESC_LD_PREL19";
          break;
        case 0x7Bu:
          result = "R_AARCH64_P32_TLSDESC_ADR_PREL21";
          break;
        case 0x7Cu:
          result = "R_AARCH64_P32_TLSDESC_ADR_PAGE21";
          break;
        case 0x7Du:
          result = "R_AARCH64_P32_TLSDESC_LD32_LO12";
          break;
        case 0x7Eu:
          result = "R_AARCH64_P32_TLSDESC_ADD_LO12";
          break;
        case 0x7Fu:
          result = "R_AARCH64_P32_TLSDESC_CALL";
          break;
        case 0xB4u:
          result = "R_AARCH64_P32_COPY";
          break;
        case 0xB5u:
          result = "R_AARCH64_P32_GLOB_DAT";
          break;
        case 0xB6u:
          result = "R_AARCH64_P32_JUMP_SLOT";
          break;
        case 0xB7u:
          result = "R_AARCH64_P32_RELATIVE";
          break;
        case 0xB8u:
          result = "R_AARCH64_P32_TLS_DTPREL";
          break;
        case 0xB9u:
          result = "R_AARCH64_P32_TLS_DTPMOD";
          break;
        case 0xBAu:
          result = "R_AARCH64_P32_TLS_TPREL";
          break;
        case 0xBBu:
          result = "R_AARCH64_P32_TLSDESC";
          break;
        case 0xBCu:
          result = "R_AARCH64_P32_IRELATIVE";
          break;
        case 0x101u:
          result = "R_AARCH64_ABS64";
          break;
        case 0x102u:
          result = "R_AARCH64_ABS32";
          break;
        case 0x103u:
          result = "R_AARCH64_ABS16";
          break;
        case 0x104u:
          result = "R_AARCH64_PREL64";
          break;
        case 0x105u:
          result = "R_AARCH64_PREL32";
          break;
        case 0x106u:
          result = "R_AARCH64_PREL16";
          break;
        case 0x107u:
          result = "R_AARCH64_MOVW_UABS_G0";
          break;
        case 0x108u:
          result = "R_AARCH64_MOVW_UABS_G0_NC";
          break;
        case 0x109u:
          result = "R_AARCH64_MOVW_UABS_G1";
          break;
        case 0x10Au:
          result = "R_AARCH64_MOVW_UABS_G1_NC";
          break;
        case 0x10Bu:
          result = "R_AARCH64_MOVW_UABS_G2";
          break;
        case 0x10Cu:
          result = "R_AARCH64_MOVW_UABS_G2_NC";
          break;
        case 0x10Du:
          result = "R_AARCH64_MOVW_UABS_G3";
          break;
        case 0x10Eu:
          result = "R_AARCH64_MOVW_SABS_G0";
          break;
        case 0x10Fu:
          result = "R_AARCH64_MOVW_SABS_G1";
          break;
        case 0x110u:
          result = "R_AARCH64_MOVW_SABS_G2";
          break;
        case 0x111u:
          result = "R_AARCH64_LD_PREL_LO19";
          break;
        case 0x112u:
          result = "R_AARCH64_ADR_PREL_LO21";
          break;
        case 0x113u:
          result = "R_AARCH64_ADR_PREL_PG_HI21";
          break;
        case 0x114u:
          result = "R_AARCH64_ADR_PREL_PG_HI21_NC";
          break;
        case 0x115u:
          result = "R_AARCH64_ADD_ABS_LO12_NC";
          break;
        case 0x116u:
          result = "R_AARCH64_LDST8_ABS_LO12_NC";
          break;
        case 0x117u:
          result = "R_AARCH64_TSTBR14";
          break;
        case 0x118u:
          result = "R_AARCH64_CONDBR19";
          break;
        case 0x11Au:
          result = "R_AARCH64_JUMP26";
          break;
        case 0x11Bu:
          result = "R_AARCH64_CALL26";
          break;
        case 0x11Cu:
          result = "R_AARCH64_LDST16_ABS_LO12_NC";
          break;
        case 0x11Du:
          result = "R_AARCH64_LDST32_ABS_LO12_NC";
          break;
        case 0x11Eu:
          result = "R_AARCH64_LDST64_ABS_LO12_NC";
          break;
        case 0x11Fu:
          result = "R_AARCH64_MOVW_PREL_G0";
          break;
        case 0x120u:
          result = "R_AARCH64_MOVW_PREL_G0_NC";
          break;
        case 0x121u:
          result = "R_AARCH64_MOVW_PREL_G1";
          break;
        case 0x122u:
          result = "R_AARCH64_MOVW_PREL_G1_NC";
          break;
        case 0x123u:
          result = "R_AARCH64_MOVW_PREL_G2";
          break;
        case 0x124u:
          result = "R_AARCH64_MOVW_PREL_G2_NC";
          break;
        case 0x125u:
          result = "R_AARCH64_MOVW_PREL_G3";
          break;
        case 0x12Bu:
          result = "R_AARCH64_LDST128_ABS_LO12_NC";
          break;
        case 0x12Cu:
          result = "R_AARCH64_MOVW_GOTOFF_G0";
          break;
        case 0x12Du:
          result = "R_AARCH64_MOVW_GOTOFF_G0_NC";
          break;
        case 0x12Eu:
          result = "R_AARCH64_MOVW_GOTOFF_G1";
          break;
        case 0x12Fu:
          result = "R_AARCH64_MOVW_GOTOFF_G1_NC";
          break;
        case 0x130u:
          result = "R_AARCH64_MOVW_GOTOFF_G2";
          break;
        case 0x131u:
          result = "R_AARCH64_MOVW_GOTOFF_G2_NC";
          break;
        case 0x132u:
          result = "R_AARCH64_MOVW_GOTOFF_G3";
          break;
        case 0x133u:
          result = "R_AARCH64_GOTREL64";
          break;
        case 0x134u:
          result = "R_AARCH64_GOTREL32";
          break;
        case 0x135u:
          result = "R_AARCH64_GOT_LD_PREL19";
          break;
        case 0x136u:
          result = "R_AARCH64_LD64_GOTOFF_LO15";
          break;
        case 0x137u:
          result = "R_AARCH64_ADR_GOT_PAGE";
          break;
        case 0x138u:
          result = "R_AARCH64_LD64_GOT_LO12_NC";
          break;
        case 0x139u:
          result = "R_AARCH64_LD64_GOTPAGE_LO15";
          break;
        case 0x13Au:
          result = "R_AARCH64_PLT32";
          break;
        case 0x200u:
          result = "R_AARCH64_TLSGD_ADR_PREL21";
          break;
        case 0x201u:
          result = "R_AARCH64_TLSGD_ADR_PAGE21";
          break;
        case 0x202u:
          result = "R_AARCH64_TLSGD_ADD_LO12_NC";
          break;
        case 0x203u:
          result = "R_AARCH64_TLSGD_MOVW_G1";
          break;
        case 0x204u:
          result = "R_AARCH64_TLSGD_MOVW_G0_NC";
          break;
        case 0x205u:
          result = "R_AARCH64_TLSLD_ADR_PREL21";
          break;
        case 0x206u:
          result = "R_AARCH64_TLSLD_ADR_PAGE21";
          break;
        case 0x207u:
          result = "R_AARCH64_TLSLD_ADD_LO12_NC";
          break;
        case 0x208u:
          result = "R_AARCH64_TLSLD_MOVW_G1";
          break;
        case 0x209u:
          result = "R_AARCH64_TLSLD_MOVW_G0_NC";
          break;
        case 0x20Au:
          result = "R_AARCH64_TLSLD_LD_PREL19";
          break;
        case 0x20Bu:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G2";
          break;
        case 0x20Cu:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G1";
          break;
        case 0x20Du:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC";
          break;
        case 0x20Eu:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G0";
          break;
        case 0x20Fu:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC";
          break;
        case 0x210u:
          result = "R_AARCH64_TLSLD_ADD_DTPREL_HI12";
          break;
        case 0x211u:
          result = "R_AARCH64_TLSLD_ADD_DTPREL_LO12";
          break;
        case 0x212u:
          result = "R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC";
          break;
        case 0x213u:
          result = "R_AARCH64_TLSLD_LDST8_DTPREL_LO12";
          break;
        case 0x214u:
          result = "R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC";
          break;
        case 0x215u:
          result = "R_AARCH64_TLSLD_LDST16_DTPREL_LO12";
          break;
        case 0x216u:
          result = "R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC";
          break;
        case 0x217u:
          result = "R_AARCH64_TLSLD_LDST32_DTPREL_LO12";
          break;
        case 0x218u:
          result = "R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC";
          break;
        case 0x219u:
          result = "R_AARCH64_TLSLD_LDST64_DTPREL_LO12";
          break;
        case 0x21Au:
          result = "R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC";
          break;
        case 0x21Bu:
          result = "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1";
          break;
        case 0x21Cu:
          result = "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC";
          break;
        case 0x21Du:
          result = "R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21";
          break;
        case 0x21Eu:
          result = "R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC";
          break;
        case 0x21Fu:
          result = "R_AARCH64_TLSIE_LD_GOTTPREL_PREL19";
          break;
        case 0x220u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G2";
          break;
        case 0x221u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G1";
          break;
        case 0x222u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC";
          break;
        case 0x223u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G0";
          break;
        case 0x224u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC";
          break;
        case 0x225u:
          result = "R_AARCH64_TLSLE_ADD_TPREL_HI12";
          break;
        case 0x226u:
          result = "R_AARCH64_TLSLE_ADD_TPREL_LO12";
          break;
        case 0x227u:
          result = "R_AARCH64_TLSLE_ADD_TPREL_LO12_NC";
          break;
        case 0x228u:
          result = "R_AARCH64_TLSLE_LDST8_TPREL_LO12";
          break;
        case 0x229u:
          result = "R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC";
          break;
        case 0x22Au:
          result = "R_AARCH64_TLSLE_LDST16_TPREL_LO12";
          break;
        case 0x22Bu:
          result = "R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC";
          break;
        case 0x22Cu:
          result = "R_AARCH64_TLSLE_LDST32_TPREL_LO12";
          break;
        case 0x22Du:
          result = "R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC";
          break;
        case 0x22Eu:
          result = "R_AARCH64_TLSLE_LDST64_TPREL_LO12";
          break;
        case 0x22Fu:
          result = "R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC";
          break;
        case 0x230u:
          result = "R_AARCH64_TLSDESC_LD_PREL19";
          break;
        case 0x231u:
          result = "R_AARCH64_TLSDESC_ADR_PREL21";
          break;
        case 0x232u:
          result = "R_AARCH64_TLSDESC_ADR_PAGE21";
          break;
        case 0x233u:
          result = "R_AARCH64_TLSDESC_LD64_LO12";
          break;
        case 0x234u:
          result = "R_AARCH64_TLSDESC_ADD_LO12";
          break;
        case 0x235u:
          result = "R_AARCH64_TLSDESC_OFF_G1";
          break;
        case 0x236u:
          result = "R_AARCH64_TLSDESC_OFF_G0_NC";
          break;
        case 0x237u:
          result = "R_AARCH64_TLSDESC_LDR";
          break;
        case 0x238u:
          result = "R_AARCH64_TLSDESC_ADD";
          break;
        case 0x239u:
          result = "R_AARCH64_TLSDESC_CALL";
          break;
        case 0x23Au:
          result = "R_AARCH64_TLSLE_LDST128_TPREL_LO12";
          break;
        case 0x23Bu:
          result = "R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC";
          break;
        case 0x23Cu:
          result = "R_AARCH64_TLSLD_LDST128_DTPREL_LO12";
          break;
        case 0x23Du:
          result = "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC";
          break;
        case 0x400u:
          result = "R_AARCH64_COPY";
          break;
        case 0x401u:
          result = "R_AARCH64_GLOB_DAT";
          break;
        case 0x402u:
          result = "R_AARCH64_JUMP_SLOT";
          break;
        case 0x403u:
          result = "R_AARCH64_RELATIVE";
          break;
        case 0x404u:
          result = "R_AARCH64_TLS_DTPMOD64";
          break;
        case 0x405u:
          result = "R_AARCH64_TLS_DTPREL64";
          break;
        case 0x406u:
          result = "R_AARCH64_TLS_TPREL64";
          break;
        case 0x407u:
          result = "R_AARCH64_TLSDESC";
          break;
        case 0x408u:
          result = "R_AARCH64_IRELATIVE";
          break;
        default:
          if (a2 != 57600)
            goto LABEL_120;
          result = "R_AARCH64_AUTH_ABS64";
          break;
      }
      return result;
    case 224:
      if (a2 >= 0xF)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E59F58;
      goto LABEL_46;
    case 243:
      if (a2 >= 0x3E)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E598B0;
      goto LABEL_46;
    case 244:
      if (a2 >= 7)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E59090;
      goto LABEL_46;
    case 247:
      if (a2 >= 0xB)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E59FD0;
      goto LABEL_46;
    case 251:
      if (a2 >= 0x25)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E5A080;
      goto LABEL_46;
    case 252:
      if (a2 >= 0x45)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E5A1A8;
      goto LABEL_46;
    case 258:
      if (a2 >= 0x6E)
        goto LABEL_120;
      v2 = (int)a2;
      v3 = off_1E0E5A3D0;
LABEL_46:
      result = v3[v2];
      break;
    default:
LABEL_120:
      result = "Unknown";
      break;
  }
  return result;
}

const char *llvm::object::getELFSectionTypeName(llvm::object *this, int a2)
{
  const char *result;

  if ((int)this > 104)
  {
    if ((int)this > 182)
    {
      if ((_DWORD)this == 183)
      {
        if (a2 == 1879048200)
          return "SHT_AARCH64_MEMTAG_GLOBALS_DYNAMIC";
        if (a2 == 1879048199)
          return "SHT_AARCH64_MEMTAG_GLOBALS_STATIC";
      }
      else if ((_DWORD)this == 243 && a2 == 1879048195)
      {
        return "SHT_RISCV_ATTRIBUTES";
      }
    }
    else if ((_DWORD)this == 105)
    {
      if (a2 == 1879048195)
        return "SHT_MSP430_ATTRIBUTES";
    }
    else if ((_DWORD)this == 164 && a2 == 1879048192)
    {
      return "SHT_HEX_ORDERED";
    }
    goto LABEL_27;
  }
  if ((int)this > 39)
  {
    if ((_DWORD)this == 40)
    {
      if ((a2 - 1879048193) < 5)
        return off_1E0E5A908[a2 - 1879048193];
    }
    else if ((_DWORD)this == 62 && a2 == 1879048193)
    {
      return "SHT_X86_64_UNWIND";
    }
    goto LABEL_27;
  }
  if ((_DWORD)this != 8 && (_DWORD)this != 10)
  {
LABEL_27:
    if (a2 > 1879002111)
    {
      switch(a2)
      {
        case 1879002112:
          result = "SHT_LLVM_ODRTAB";
          break;
        case 1879002113:
          result = "SHT_LLVM_LINKER_OPTIONS";
          break;
        case 1879002114:
LABEL_57:
          result = "Unknown";
          break;
        case 1879002115:
          result = "SHT_LLVM_ADDRSIG";
          break;
        case 1879002116:
          result = "SHT_LLVM_DEPENDENT_LIBRARIES";
          break;
        case 1879002117:
          result = "SHT_LLVM_SYMPART";
          break;
        case 1879002118:
          result = "SHT_LLVM_PART_EHDR";
          break;
        case 1879002119:
          result = "SHT_LLVM_PART_PHDR";
          break;
        case 1879002120:
          result = "SHT_LLVM_BB_ADDR_MAP_V0";
          break;
        case 1879002121:
          result = "SHT_LLVM_CALL_GRAPH_PROFILE";
          break;
        case 1879002122:
          result = "SHT_LLVM_BB_ADDR_MAP";
          break;
        case 1879002123:
          result = "SHT_LLVM_OFFLOADING";
          break;
        case 1879002124:
          result = "SHT_LLVM_LTO";
          break;
        default:
          switch(a2)
          {
            case 1879048181:
              result = "SHT_GNU_ATTRIBUTES";
              break;
            case 1879048182:
              result = "SHT_GNU_HASH";
              break;
            case 1879048183:
            case 1879048184:
            case 1879048185:
            case 1879048186:
            case 1879048187:
            case 1879048188:
              goto LABEL_57;
            case 1879048189:
              result = "SHT_GNU_verdef";
              break;
            case 1879048190:
              result = "SHT_GNU_verneed";
              break;
            case 1879048191:
              result = "SHT_GNU_versym";
              break;
            default:
              if (a2 != 1879047936)
                goto LABEL_57;
              result = "SHT_ANDROID_RELR";
              break;
          }
          break;
      }
    }
    else
    {
      result = "SHT_NULL";
      switch(a2)
      {
        case 0:
          return result;
        case 1:
          return "SHT_PROGBITS";
        case 2:
          return "SHT_SYMTAB";
        case 3:
          return "SHT_STRTAB";
        case 4:
          return "SHT_RELA";
        case 5:
          return "SHT_HASH";
        case 6:
          return "SHT_DYNAMIC";
        case 7:
          return "SHT_NOTE";
        case 8:
          return "SHT_NOBITS";
        case 9:
          return "SHT_REL";
        case 10:
          return "SHT_SHLIB";
        case 11:
          return "SHT_DYNSYM";
        case 12:
        case 13:
          goto LABEL_57;
        case 14:
          return "SHT_INIT_ARRAY";
        case 15:
          return "SHT_FINI_ARRAY";
        case 16:
          return "SHT_PREINIT_ARRAY";
        case 17:
          return "SHT_GROUP";
        case 18:
          return "SHT_SYMTAB_SHNDX";
        case 19:
          return "SHT_RELR";
        default:
          if (a2 == 1610612737)
          {
            result = "SHT_ANDROID_REL";
          }
          else
          {
            if (a2 != 1610612738)
              goto LABEL_57;
            result = "SHT_ANDROID_RELA";
          }
          break;
      }
    }
    return result;
  }
  result = "SHT_MIPS_REGINFO";
  switch(a2)
  {
    case 1879048198:
      return result;
    case 1879048205:
      result = "SHT_MIPS_OPTIONS";
      break;
    case 1879048222:
      result = "SHT_MIPS_DWARF";
      break;
    case 1879048234:
      result = "SHT_MIPS_ABIFLAGS";
      break;
    default:
      goto LABEL_27;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  const char *ELFSectionTypeName;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  llvm::object *v26;
  _UNKNOWN **v27;
  uint64_t v28;
  std::string v29;
  std::string v30;
  std::string v31;
  _QWORD v32[4];
  __int16 v33;
  __int128 v34;
  std::string::size_type v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4) == 3)
    goto LABEL_10;
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, a2, (char *)&v30);
  v10 = std::string::insert(&v30, 0, "invalid sh_type for string table section ");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v31, ": expected SHT_STRTAB, but got ");
  v13 = v12->__r_.__value_.__r.__words[2];
  v34 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v35 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), *(_DWORD *)(a2 + 4));
  v32[0] = &v34;
  v32[2] = ELFSectionTypeName;
  v32[3] = v15;
  v33 = 1284;
  a3(&v29, a4, v32);
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)v34);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_4:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(v30.__r_.__value_.__l.__data_);
      v16 = v29.__r_.__value_.__r.__words[0];
      if (v29.__r_.__value_.__r.__words[0])
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
LABEL_5:
  v16 = v29.__r_.__value_.__r.__words[0];
  if (v29.__r_.__value_.__r.__words[0])
  {
LABEL_6:
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v16;
    return;
  }
LABEL_10:
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v34);
  v17 = v34;
  if ((v35 & 1) != 0)
  {
    *(_QWORD *)&v34 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
    if ((v35 & 1) == 0)
      return;
  }
  else
  {
    v18 = *((_QWORD *)&v34 + 1);
    if (!*((_QWORD *)&v34 + 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, a2, (char *)&v29);
      v22 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v23 = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v21 = " is empty";
LABEL_17:
      v24 = std::string::append(&v30, v21);
      v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v33 = 260;
      v32[0] = &v31;
      v26 = (llvm::object *)operator new(0x38uLL);
      v27 = llvm::object::object_category(v26);
      llvm::StringError::StringError((uint64_t)v26, (llvm::Twine *)v32, 3, (uint64_t)v27);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v26;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v31.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_26;
        }
      }
      else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        if ((v35 & 1) == 0)
          return;
        goto LABEL_21;
      }
LABEL_26:
      operator delete(v29.__r_.__value_.__l.__data_);
      if ((v35 & 1) == 0)
        return;
      goto LABEL_21;
    }
    if (*(_BYTE *)(*((_QWORD *)&v34 + 1) + v34 - 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, a2, (char *)&v29);
      v19 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = " is non-null terminated";
      goto LABEL_17;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v18;
    if ((v35 & 1) == 0)
      return;
  }
LABEL_21:
  v28 = v34;
  *(_QWORD *)&v34 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string v11;
  std::string::size_type v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(a1, (uint64_t)v12);
  if ((v13 & 1) == 0)
  {
    std::to_string(&v10, 0xCCCCCCCCCCCCCCCDLL * ((int64_t)(a2 - v12[0]) >> 3));
    v5 = std::string::insert(&v10, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "]");
    *(std::string *)a3 = *v7;
    v7->__r_.__value_.__r.__words[0] = 0;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        if ((v13 & 1) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v13 & 1) == 0)
      return;
LABEL_12:
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
    return;
  }
  v8 = v12[0];
  v12[0] = 0;
  v10.__r_.__value_.__r.__words[0] = v8;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v10, (uint64_t *)&v11);
  if (v10.__r_.__value_.__r.__words[0])
    (*(void (**)(std::string::size_type))(*(_QWORD *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
  a3[23] = 15;
  strcpy(a3, "[unknown index]");
  if ((v13 & 1) != 0)
    goto LABEL_12;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<char>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  std::string::size_type v19;
  void *v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int16 v27;
  void *__p[2];
  const char *v29;
  __int16 v30;
  std::string v31;
  _QWORD v32[2];
  std::string *v33;
  __int16 v34;
  _QWORD v35[2];
  const char *v36;
  __int16 v37;
  _QWORD v38[2];
  std::string *v39;
  __int16 v40;
  _QWORD v41[2];
  const char *v42;
  __int16 v43;

  v6 = *(unsigned int *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 20);
  if (__CFADD__((_DWORD)v6, (_DWORD)v5))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, a2, (char *)&v31);
    v7 = std::string::insert(&v31, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v26, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v25.__r_.__value_.__r.__words[0] = v6;
    v32[0] = __p;
    v33 = &v25;
    v34 = 3844;
    v35[0] = v32;
    v36 = ") + sh_size (0x";
    v37 = 770;
    v24.__r_.__value_.__r.__words[0] = v5;
    v38[0] = v35;
    v39 = &v24;
    v40 = 3842;
    v41[0] = v38;
    v42 = ") that cannot be represented";
    v43 = 770;
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = llvm::object::object_category(v11);
    llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v41, 3, (uint64_t)v12);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v29) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    v20 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_20:
    operator delete(v20);
    return;
  }
  if (a1[1] >= (unint64_t)(v5 + v6))
  {
    v19 = *a1 + v6;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v19;
    *(_QWORD *)(a3 + 8) = v5;
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, a2, (char *)&v24);
  v13 = std::string::insert(&v24, 0, "section ");
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v25, " has a sh_offset (0x");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v22 = v5;
  v23 = v6;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)&v23;
  v27 = 3844;
  __p[0] = &v26;
  v29 = ") + sh_size (0x";
  v30 = 770;
  v32[0] = __p;
  v33 = (std::string *)&v22;
  v34 = 3842;
  v35[0] = v32;
  v36 = ") that is greater than the file size (0x";
  v37 = 770;
  v21 = a1[1];
  v38[0] = v35;
  v39 = (std::string *)&v21;
  v40 = 3842;
  v41[0] = v38;
  v42 = ")";
  v43 = 770;
  v17 = (llvm::object *)operator new(0x38uLL);
  v18 = llvm::object::object_category(v17);
  llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v41, 3, (uint64_t)v18);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v17;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_19;
      return;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_19:
    v20 = (void *)v24.__r_.__value_.__r.__words[0];
    goto LABEL_20;
  }
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  uint64_t *v17;
  __int16 v18;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if (!(_DWORD)v4)
  {
    v9 = result[2];
    v10 = result[3];
    if (v9 == v10)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 3);
    }
    return result;
  }
  v5 = (uint64_t *)*(unsigned __int16 *)(v3 + 46);
  if (v5 != (uint64_t *)40)
  {
    v16 = "invalid e_shentsize in ELF header: ";
    v17 = v5;
    v8 = 2563;
    goto LABEL_12;
  }
  v6 = result[1];
  if (v4 > 0xFFFFFFD7 || v4 + 40 > v6)
  {
    v15 = *(unsigned int *)(*result + 32);
    v16 = "section header table goes past the end of the file: e_shoff = 0x";
    v17 = &v15;
    v8 = 3843;
LABEL_12:
    v18 = v8;
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = llvm::object::object_category(v11);
    result = (_QWORD *)llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)&v16, 3, (uint64_t)v12);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v11;
    return result;
  }
  v13 = v3 + v4;
  v14 = *(unsigned __int16 *)(v3 + 48);
  if (v14)
  {
    if (v4 + 40 * (unint64_t)v14 > v6)
    {
LABEL_15:
      v16 = "section table goes past the end of file";
      v8 = 259;
      goto LABEL_12;
    }
  }
  else
  {
    v14 = *(_DWORD *)(v13 + 20);
    if (v4 + 40 * (unint64_t)v14 > v6)
      goto LABEL_15;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  llvm::object *v8;
  _UNKNOWN **v9;
  char v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(a1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v7 = v13[0];
    v13[0] = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
LABEL_6:
    result = v13[0];
    v13[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  if (v13[1] > (unint64_t)a2)
  {
    v6 = v13[0] + 40 * a2;
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return result;
  }
  v11[0] = "invalid section index: ";
  v11[2] = a2;
  v12 = 2307;
  v8 = (llvm::object *)operator new(0x38uLL);
  v9 = llvm::object::object_category(v8);
  result = llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)v11, 3, (uint64_t)v9);
  *(_BYTE *)(a3 + 8) |= 1u;
  v10 = v14;
  *(_QWORD *)a3 = v8;
  if ((v10 & 1) != 0)
    goto LABEL_6;
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    v8[0] = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  const char *ELFSectionTypeName;
  uint64_t v17;
  __int16 v18;
  llvm::object *v19;
  _UNKNOWN **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  unint64_t v25;
  _QWORD v26[2];
  const char *v27;
  uint64_t v28;
  __int16 v29;
  const char *v30;
  unint64_t *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)1,1ul,1ul>>(a1, a2, (uint64_t)&v33);
  v10 = v33;
  if ((v35 & 1) != 0)
  {
    v33 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
    if ((v35 & 1) == 0)
      return;
    goto LABEL_16;
  }
  v11 = (unint64_t *)a2[6];
  if (a4 <= (unint64_t)v11)
  {
    v30 = "invalid section index: ";
    v31 = v11;
    v18 = 2307;
  }
  else
  {
    v12 = a3 + 40 * v11;
    v13 = *(_DWORD *)(v12 + 4);
    if (v13 == 2 || v13 == 11)
    {
      v15 = v34;
      v25 = (unint64_t)*(unsigned int *)(v12 + 20) >> 4;
      if (v34 == v25)
      {
        *(_BYTE *)(a5 + 16) &= ~1u;
        *(_QWORD *)a5 = v10;
        *(_QWORD *)(a5 + 8) = v15;
        if ((v35 & 1) == 0)
          return;
        goto LABEL_16;
      }
      v22 = v34;
      v23[0] = "SHT_SYMTAB_SHNDX has ";
      v23[2] = &v22;
      v24 = 2819;
      v26[0] = v23;
      v27 = " entries, but the symbol table associated has ";
      v29 = 770;
      v30 = (const char *)v26;
      v31 = &v25;
      v18 = 3330;
    }
    else
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), v13);
      v29 = 1283;
      v26[0] = "SHT_SYMTAB_SHNDX section is linked with ";
      v27 = ELFSectionTypeName;
      v28 = v17;
      v30 = (const char *)v26;
      v31 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      v18 = 770;
    }
  }
  v32 = v18;
  v19 = (llvm::object *)operator new(0x38uLL);
  v20 = llvm::object::object_category(v19);
  llvm::StringError::StringError((uint64_t)v19, (llvm::Twine *)&v30, 3, (uint64_t)v20);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v19;
  if ((v35 & 1) == 0)
    return;
LABEL_16:
  v21 = v33;
  v33 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)1,1ul,1ul>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  llvm::object *v18;
  _UNKNOWN **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  llvm::object *v25;
  _UNKNOWN **v26;
  void *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  llvm::object *v32;
  _UNKNOWN **v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  __int16 v43;
  std::string v44;
  void *__p[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  __int16 v56;

  if (a2[9] != 4)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v40);
    v13 = std::string::insert(&v40, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v42, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v44.__r_.__value_.__r.__words[0] = 4;
    v48[0] = __p;
    v49 = &v44;
    v50 = 2820;
    v51[0] = v48;
    v52 = (std::string *)", but got ";
    v53 = 770;
    v17 = (const char *)a2[9];
    v54[0] = v51;
    v55 = v17;
    v56 = 2306;
    v18 = (llvm::object *)operator new(0x38uLL);
    v19 = llvm::object::object_category(v18);
    llvm::StringError::StringError((uint64_t)v18, (llvm::Twine *)v54, 3, (uint64_t)v19);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    v27 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v27);
    return;
  }
  v6 = a2[5];
  if ((v6 & 3) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v44);
    v7 = std::string::insert(&v44, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v40, " has an invalid sh_size (");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v42;
    v46 = (std::string *)v6;
    v47 = 2308;
    v48[0] = __p;
    v49 = (std::string *)") which is not a multiple of its sh_entsize (";
    v50 = 770;
    v11 = (std::string *)a2[9];
    v51[0] = v48;
    v52 = v11;
    v53 = 2306;
    v12 = ")";
    goto LABEL_11;
  }
  v20 = a2[4];
  if (!__CFADD__((_DWORD)v20, (_DWORD)v6))
  {
    if (a1[1] >= (unint64_t)(v6 + v20))
    {
      v34 = *a1 + v20;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v34;
      *(_QWORD *)(a3 + 8) = v6 >> 2;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v38);
    v28 = std::string::insert(&v38, 0, "section ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v39, " has a sh_offset (0x");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v36 = v6;
    v37 = v20;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    v41 = 3844;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v43 = 770;
    __p[0] = &v42;
    v46 = (std::string *)&v36;
    v47 = 3842;
    v48[0] = __p;
    v49 = (std::string *)") that is greater than the file size (0x";
    v50 = 770;
    v35 = a1[1];
    v51[0] = v48;
    v52 = (std::string *)&v35;
    v53 = 3842;
    v54[0] = v51;
    v55 = ")";
    v56 = 770;
    v32 = (llvm::object *)operator new(0x38uLL);
    v33 = llvm::object::object_category(v32);
    llvm::StringError::StringError((uint64_t)v32, (llvm::Twine *)v54, 3, (uint64_t)v33);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v32;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    v27 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v44);
  v21 = std::string::insert(&v44, 0, "section ");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v40, " has a sh_offset (0x");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v39.__r_.__value_.__r.__words[0] = v20;
  __p[0] = &v42;
  v46 = &v39;
  v47 = 3844;
  v48[0] = __p;
  v49 = (std::string *)") + sh_size (0x";
  v50 = 770;
  v38.__r_.__value_.__r.__words[0] = v6;
  v51[0] = v48;
  v52 = &v38;
  v53 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v54[0] = v51;
  v55 = v12;
  v56 = 770;
  v25 = (llvm::object *)operator new(0x38uLL);
  v26 = llvm::object::object_category(v25);
  llvm::StringError::StringError((uint64_t)v25, (llvm::Twine *)v54, 3, (uint64_t)v26);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v25;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_20:
    v27 = (void *)v44.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRelocationTypeName(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  llvm::object *v7;
  size_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  const char *ELFRelocationTypeName;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;

  v6 = *a1;
  v7 = (llvm::object *)*(unsigned __int16 *)(*a1 + 18);
  if ((_DWORD)v7 != 8 || *(_BYTE *)(v6 + 4) != 2)
  {
    ELFRelocationTypeName = llvm::object::getELFRelocationTypeName(v7, a2);
    v21 = v25;
    v23 = a3[1];
    v24 = v25 + v23;
    if (a3[2] >= v25 + v23)
      goto LABEL_19;
    goto LABEL_18;
  }
  v9 = llvm::object::getELFRelocationTypeName((llvm::object *)8, a2);
  v10 = v8;
  v11 = a3[1];
  if (a3[2] < v8 + v11)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v8 + v11, 1);
    v11 = a3[1];
  }
  if (v10)
  {
    memcpy((void *)(*a3 + v11), v9, v10);
    v11 = a3[1];
  }
  v12 = v11 + v10;
  a3[1] = v11 + v10;
  v13 = llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), BYTE1(a2));
  v15 = v14;
  if (v12 + 1 > a3[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v12 + 1, 1);
    v12 = a3[1];
  }
  *(_BYTE *)(*a3 + v12) = 47;
  v16 = a3[2];
  v17 = a3[1] + 1;
  a3[1] = v17;
  if (v16 < v17 + v15)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v17 + v15, 1);
    v17 = a3[1];
  }
  if (v15)
  {
    memcpy((void *)(*a3 + v17), v13, v15);
    v17 = a3[1];
  }
  v18 = v17 + v15;
  a3[1] = v18;
  ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), BYTE2(a2));
  v21 = v20;
  if (v18 + 1 > a3[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v18 + 1, 1);
    v18 = a3[1];
  }
  *(_BYTE *)(*a3 + v18) = 47;
  v22 = a3[2];
  v23 = a3[1] + 1;
  a3[1] = v23;
  v24 = v23 + v21;
  if (v22 < v23 + v21)
  {
LABEL_18:
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v24, 1);
    v23 = a3[1];
  }
LABEL_19:
  if (v21)
  {
    memcpy((void *)(*a3 + v23), ELFRelocationTypeName, v21);
    v23 = a3[1];
  }
  a3[1] = v23 + v21;
}

unint64_t llvm::utohexstr@<X0>(unint64_t this@<X0>, int a2@<W1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  _BOOL8 v6;
  char v7;
  uint64_t v8;
  BOOL v9;
  _BOOL8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[18];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    v14[17] = 48;
    v5 = 16;
    v10 = a3 != 0;
    if (!a3)
      v10 = 0;
    if (v10)
      goto LABEL_5;
LABEL_16:
    v8 = v5;
    goto LABEL_17;
  }
  v5 = 17;
  v6 = a3 != 0;
  if (!a3)
    v6 = this;
  if (!v6)
    goto LABEL_16;
LABEL_5:
  if (a2)
    v7 = 32;
  else
    v7 = 0;
  if (a3)
  {
    do
    {
      v8 = v5 - 1;
      v14[v5] = llvm::hexdigit(unsigned int,BOOL)::LUT[this & 0xF] | v7;
      this >>= 4;
      --v5;
      --a3;
    }
    while (a3);
  }
  else
  {
    do
    {
      v8 = v5 - 1;
      v14[v5--] = llvm::hexdigit(unsigned int,BOOL)::LUT[this & 0xF] | v7;
      v9 = this > 0xF;
      this >>= 4;
    }
    while (v9);
  }
LABEL_17:
  v11 = 17 - v8;
  if ((unint64_t)(17 - v8) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v11 <= 0x16)
  {
    a4[23] = v11;
    if (v8 == 17)
      goto LABEL_25;
    goto LABEL_24;
  }
  v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v11 | 7) != 0x17)
    v12 = v11 | 7;
  v13 = v12 + 1;
  this = (unint64_t)operator new(v12 + 1);
  *((_QWORD *)a4 + 1) = v11;
  *((_QWORD *)a4 + 2) = v13 | 0x8000000000000000;
  *(_QWORD *)a4 = this;
  a4 = (_BYTE *)this;
  if (v8 != 17)
  {
LABEL_24:
    this = (unint64_t)memcpy(a4, &v14[v8 + 1], 17 - v8);
    a4 += v11;
  }
LABEL_25:
  *a4 = 0;
  return this;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 16 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 16 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = a2[5];
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  llvm::object *v18;
  _UNKNOWN **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  llvm::object *v25;
  _UNKNOWN **v26;
  void *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  llvm::object *v32;
  _UNKNOWN **v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  __int16 v43;
  std::string v44;
  void *__p[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  __int16 v56;

  if (a2[9] != 16)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v40);
    v13 = std::string::insert(&v40, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v42, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v44.__r_.__value_.__r.__words[0] = 16;
    v48[0] = __p;
    v49 = &v44;
    v50 = 2820;
    v51[0] = v48;
    v52 = (std::string *)", but got ";
    v53 = 770;
    v17 = (const char *)a2[9];
    v54[0] = v51;
    v55 = v17;
    v56 = 2306;
    v18 = (llvm::object *)operator new(0x38uLL);
    v19 = llvm::object::object_category(v18);
    llvm::StringError::StringError((uint64_t)v18, (llvm::Twine *)v54, 3, (uint64_t)v19);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    v27 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v27);
    return;
  }
  v6 = a2[5];
  if ((v6 & 0xF) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v44);
    v7 = std::string::insert(&v44, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v40, " has an invalid sh_size (");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v42;
    v46 = (std::string *)v6;
    v47 = 2308;
    v48[0] = __p;
    v49 = (std::string *)") which is not a multiple of its sh_entsize (";
    v50 = 770;
    v11 = (std::string *)a2[9];
    v51[0] = v48;
    v52 = v11;
    v53 = 2306;
    v12 = ")";
    goto LABEL_11;
  }
  v20 = a2[4];
  if (!__CFADD__((_DWORD)v20, (_DWORD)v6))
  {
    if (a1[1] >= (unint64_t)(v6 + v20))
    {
      v34 = *a1 + v20;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v34;
      *(_QWORD *)(a3 + 8) = v6 >> 4;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v38);
    v28 = std::string::insert(&v38, 0, "section ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v39, " has a sh_offset (0x");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v36 = v6;
    v37 = v20;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    v41 = 3844;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v43 = 770;
    __p[0] = &v42;
    v46 = (std::string *)&v36;
    v47 = 3842;
    v48[0] = __p;
    v49 = (std::string *)") that is greater than the file size (0x";
    v50 = 770;
    v35 = a1[1];
    v51[0] = v48;
    v52 = (std::string *)&v35;
    v53 = 3842;
    v54[0] = v51;
    v55 = ")";
    v56 = 770;
    v32 = (llvm::object *)operator new(0x38uLL);
    v33 = llvm::object::object_category(v32);
    llvm::StringError::StringError((uint64_t)v32, (llvm::Twine *)v54, 3, (uint64_t)v33);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v32;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    v27 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v44);
  v21 = std::string::insert(&v44, 0, "section ");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v40, " has a sh_offset (0x");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v39.__r_.__value_.__r.__words[0] = v20;
  __p[0] = &v42;
  v46 = &v39;
  v47 = 3844;
  v48[0] = __p;
  v49 = (std::string *)") + sh_size (0x";
  v50 = 770;
  v38.__r_.__value_.__r.__words[0] = v6;
  v51[0] = v48;
  v52 = &v38;
  v53 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v54[0] = v51;
  v55 = v12;
  v56 = 770;
  v25 = (llvm::object *)operator new(0x38uLL);
  v26 = llvm::object::object_category(v25);
  llvm::StringError::StringError((uint64_t)v25, (llvm::Twine *)v54, 3, (uint64_t)v26);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v25;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_20:
    v27 = (void *)v44.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,false>,true>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  unsigned int v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  const char *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string *v17;
  const char *v18;
  llvm::object *v19;
  _UNKNOWN **v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  llvm::object *v26;
  _UNKNOWN **v27;
  void *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  llvm::object *v33;
  _UNKNOWN **v34;
  std::string::size_type v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string v39;
  std::string v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  void *__p[2];
  std::string *v47;
  __int16 v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  const char *v56;
  __int16 v57;

  if (a2[9] != 12)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v41);
    v14 = std::string::insert(&v41, 0, "section ");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v43, " has invalid sh_entsize: expected ");
    v17 = (std::string *)v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v47 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v45.__r_.__value_.__r.__words[0] = 12;
    v49[0] = __p;
    v50 = &v45;
    v51 = 2820;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v18 = (const char *)a2[9];
    v55[0] = v52;
    v56 = v18;
    v57 = 2306;
    v19 = (llvm::object *)operator new(0x38uLL);
    v20 = llvm::object::object_category(v19);
    llvm::StringError::StringError((uint64_t)v19, (llvm::Twine *)v55, 3, (uint64_t)v20);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v47) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    v28 = (void *)v41.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v28);
    return;
  }
  v6 = a2[5];
  v7 = a2[5] / 0xC;
  if (a2[5] % 0xC)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v45);
    v8 = std::string::insert(&v45, 0, "section ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v41, " has an invalid sh_size (");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v43;
    v47 = (std::string *)v6;
    v48 = 2308;
    v49[0] = __p;
    v50 = (std::string *)") which is not a multiple of its sh_entsize (";
    v51 = 770;
    v12 = (std::string *)a2[9];
    v52[0] = v49;
    v53 = v12;
    v54 = 2306;
    v13 = ")";
    goto LABEL_11;
  }
  v21 = a2[4];
  if (!__CFADD__((_DWORD)v21, (_DWORD)v6))
  {
    if (a1[1] >= (unint64_t)(v6 + v21))
    {
      v35 = *a1 + v21;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v35;
      *(_QWORD *)(a3 + 8) = v7;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v39);
    v29 = std::string::insert(&v39, 0, "section ");
    v30 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v40, " has a sh_offset (0x");
    v32 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v37 = v6;
    v38 = v21;
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
    v41.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
    v42 = 3844;
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    v43.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v44 = 770;
    __p[0] = &v43;
    v47 = (std::string *)&v37;
    v48 = 3842;
    v49[0] = __p;
    v50 = (std::string *)") that is greater than the file size (0x";
    v51 = 770;
    v36 = a1[1];
    v52[0] = v49;
    v53 = (std::string *)&v36;
    v54 = 3842;
    v55[0] = v52;
    v56 = ")";
    v57 = 770;
    v33 = (llvm::object *)operator new(0x38uLL);
    v34 = llvm::object::object_category(v33);
    llvm::StringError::StringError((uint64_t)v33, (llvm::Twine *)v55, 3, (uint64_t)v34);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v33;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    v28 = (void *)v39.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v45);
  v22 = std::string::insert(&v45, 0, "section ");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v41, " has a sh_offset (0x");
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v40.__r_.__value_.__r.__words[0] = v21;
  __p[0] = &v43;
  v47 = &v40;
  v48 = 3844;
  v49[0] = __p;
  v50 = (std::string *)") + sh_size (0x";
  v51 = 770;
  v39.__r_.__value_.__r.__words[0] = v6;
  v52[0] = v49;
  v53 = &v39;
  v54 = 3842;
  v13 = ") that cannot be represented";
LABEL_11:
  v55[0] = v52;
  v56 = v13;
  v57 = 770;
  v26 = (llvm::object *)operator new(0x38uLL);
  v27 = llvm::object::object_category(v26);
  llvm::StringError::StringError((uint64_t)v26, (llvm::Twine *)v55, 3, (uint64_t)v27);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v26;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_20:
    v28 = (void *)v45.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,false>,false>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  llvm::object *v18;
  _UNKNOWN **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  llvm::object *v25;
  _UNKNOWN **v26;
  void *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  llvm::object *v32;
  _UNKNOWN **v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  __int16 v43;
  std::string v44;
  void *__p[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  __int16 v56;

  if (a2[9] != 8)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v40);
    v13 = std::string::insert(&v40, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v42, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v44.__r_.__value_.__r.__words[0] = 8;
    v48[0] = __p;
    v49 = &v44;
    v50 = 2820;
    v51[0] = v48;
    v52 = (std::string *)", but got ";
    v53 = 770;
    v17 = (const char *)a2[9];
    v54[0] = v51;
    v55 = v17;
    v56 = 2306;
    v18 = (llvm::object *)operator new(0x38uLL);
    v19 = llvm::object::object_category(v18);
    llvm::StringError::StringError((uint64_t)v18, (llvm::Twine *)v54, 3, (uint64_t)v19);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    v27 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v27);
    return;
  }
  v6 = a2[5];
  if ((v6 & 7) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v44);
    v7 = std::string::insert(&v44, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v40, " has an invalid sh_size (");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v42;
    v46 = (std::string *)v6;
    v47 = 2308;
    v48[0] = __p;
    v49 = (std::string *)") which is not a multiple of its sh_entsize (";
    v50 = 770;
    v11 = (std::string *)a2[9];
    v51[0] = v48;
    v52 = v11;
    v53 = 2306;
    v12 = ")";
    goto LABEL_11;
  }
  v20 = a2[4];
  if (!__CFADD__((_DWORD)v20, (_DWORD)v6))
  {
    if (a1[1] >= (unint64_t)(v6 + v20))
    {
      v34 = *a1 + v20;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v34;
      *(_QWORD *)(a3 + 8) = v6 >> 3;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v38);
    v28 = std::string::insert(&v38, 0, "section ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v39, " has a sh_offset (0x");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v36 = v6;
    v37 = v20;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    v41 = 3844;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v43 = 770;
    __p[0] = &v42;
    v46 = (std::string *)&v36;
    v47 = 3842;
    v48[0] = __p;
    v49 = (std::string *)") that is greater than the file size (0x";
    v50 = 770;
    v35 = a1[1];
    v51[0] = v48;
    v52 = (std::string *)&v35;
    v53 = 3842;
    v54[0] = v51;
    v55 = ")";
    v56 = 770;
    v32 = (llvm::object *)operator new(0x38uLL);
    v33 = llvm::object::object_category(v32);
    llvm::StringError::StringError((uint64_t)v32, (llvm::Twine *)v54, 3, (uint64_t)v33);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v32;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    v27 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v44);
  v21 = std::string::insert(&v44, 0, "section ");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v40, " has a sh_offset (0x");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v39.__r_.__value_.__r.__words[0] = v20;
  __p[0] = &v42;
  v46 = &v39;
  v47 = 3844;
  v48[0] = __p;
  v49 = (std::string *)") + sh_size (0x";
  v50 = 770;
  v38.__r_.__value_.__r.__words[0] = v6;
  v51[0] = v48;
  v52 = &v38;
  v53 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v54[0] = v51;
  v55 = v12;
  v56 = 770;
  v25 = (llvm::object *)operator new(0x38uLL);
  v26 = llvm::object::object_category(v25);
  llvm::StringError::StringError((uint64_t)v25, (llvm::Twine *)v54, 3, (uint64_t)v26);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v25;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_20:
    v27 = (void *)v44.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, _QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  __int16 v9;
  llvm::object *v10;
  _UNKNOWN **v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  v7 = *(unsigned __int16 *)(*a1 + 50);
  if (v7 != 0xFFFF)
  {
    if (*(_WORD *)(*a1 + 50))
    {
LABEL_3:
      if (a3 > v7)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getStringTable(a1, a2 + 40 * v7, a4, a5, a6);
        return;
      }
      v12[0] = "section header string table index ";
      v12[2] = v7;
      v13 = 2307;
      v14[0] = v12;
      v14[2] = " does not exist";
      v9 = 770;
      goto LABEL_10;
    }
LABEL_7:
    *(_BYTE *)(a6 + 16) &= ~1u;
    v8 = a1[6];
    *(_QWORD *)a6 = a1[5];
    *(_QWORD *)(a6 + 8) = v8;
    return;
  }
  if (a3)
  {
    v7 = *(_DWORD *)(a2 + 24);
    if (v7)
      goto LABEL_3;
    goto LABEL_7;
  }
  v14[0] = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
  v9 = 259;
LABEL_10:
  v15 = v9;
  v10 = (llvm::object *)operator new(0x38uLL);
  v11 = llvm::object::object_category(v10);
  llvm::StringError::StringError((uint64_t)v10, (llvm::Twine *)v14, 3, (uint64_t)v11);
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_QWORD *)a6 = v10;
}

_QWORD *llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::endianness)1,false>>@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  int64x2_t v6;
  int8x16_t v7;
  llvm::object *v8;
  _UNKNOWN **v9;
  _QWORD *v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  _QWORD *v13;
  std::string __p;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[2];
  unint64_t v18;
  __int16 v19;
  _QWORD v20[2];
  std::string *p_p;
  __int16 v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v4 = a1;
    result = (_QWORD *)llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)1,1ul,1ul>>::operator[]((uint64_t)a2, a1, (uint64_t)&v23);
    if ((v24 & 1) != 0)
    {
      v15[0] = "unable to read an extended symbol table at index ";
      v15[2] = v4;
      v16 = 2307;
      v17[0] = v15;
      v18 = (unint64_t)": ";
      v19 = 770;
      v10 = v23;
      v23 = 0;
      v13 = v10;
      llvm::toString(&v13, &__p, v6, v7);
      v20[0] = v17;
      p_p = &__p;
      v22 = 1026;
      v11 = (llvm::object *)operator new(0x38uLL);
      v12 = llvm::object::object_category(v11);
      llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v20, 3, (uint64_t)v12);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      result = v13;
      if (v13)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
      if ((v24 & 1) != 0)
      {
        result = v23;
        v23 = 0;
        if (result)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = (_DWORD)v23;
    }
  }
  else
  {
    v17[0] = "found an extended symbol index (";
    v18 = a1;
    v19 = 2307;
    v20[0] = v17;
    p_p = (std::string *)"), but unable to locate the extended symbol index table";
    v22 = 770;
    v8 = (llvm::object *)operator new(0x38uLL);
    v9 = llvm::object::object_category(v8);
    result = (_QWORD *)llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)v20, 3, (uint64_t)v9);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v15[0] = 0;
    v15[1] = 0;
    v16 = 0;
LABEL_5:
    v10 = *(unsigned __int16 *)(a2 + 14);
    if (v10 == 0xFFFF)
    {
      v12 = a4[1];
      v14[0] = *a4;
      v14[1] = v12;
      llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::endianness)1,false>>((unint64_t)(a2 - v15[0]) >> 4, v14, (uint64_t)&v17);
      if ((v18 & 1) != 0)
      {
        v9 = v17;
        goto LABEL_15;
      }
      v11 = v17;
      if ((_DWORD)v17)
      {
LABEL_10:
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1, v11, a5);
        goto LABEL_16;
      }
    }
    else
    {
      if ((unsigned __int16)(v10 + 256) >= 0x101u)
        v11 = *(unsigned __int16 *)(a2 + 14);
      else
        v11 = 0;
      if (v11)
        goto LABEL_10;
    }
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
    goto LABEL_16;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(a1, a3, (uint64_t)v15);
  if ((v16 & 1) == 0)
    goto LABEL_5;
  v9 = v15[0];
  v15[0] = 0;
LABEL_15:
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v9;
LABEL_16:
  if ((v16 & 1) != 0)
  {
    v13 = v15[0];
    v15[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v12 = v16[0];
    v16[0] = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v12;
    v16[0] = 0;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v13 = v14[0];
      v14[0] = 0;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v13;
      v14[0] = 0;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v10 = v14[0];
        v14[0] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v17 & 1) != 0)
    {
      v11 = v16[0];
      v16[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  unint64_t v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;

  v6 = *a2;
  if (!(_DWORD)v6)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
    return;
  }
  if (a4 > v6)
  {
    v7 = (const char *)(a3 + v6);
    v8 = strlen(v7);
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v7;
    *(_QWORD *)(a5 + 8) = v8;
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,false>>(a1, (uint64_t)a2, (char *)&v16);
  v9 = std::string::insert(&v16, 0, "a section ");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v17, " has an invalid sh_name (0x");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v19 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v15 = v6;
  v20[0] = __p;
  v20[2] = &v15;
  v21 = 3844;
  v22[0] = v20;
  v22[2] = ") offset which goes past the end of the section name string table";
  v23 = 770;
  v13 = (llvm::object *)operator new(0x38uLL);
  v14 = llvm::object::object_category(v13);
  llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)v22, 3, (uint64_t)v14);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v13;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_12;
      return;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_12:
    operator delete(v16.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  const char *ELFSectionTypeName;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  llvm::object *v26;
  _UNKNOWN **v27;
  uint64_t v28;
  std::string v29;
  std::string v30;
  std::string v31;
  _QWORD v32[4];
  __int16 v33;
  __int128 v34;
  std::string::size_type v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4) == 50331648)
    goto LABEL_10;
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, a2, (char *)&v30);
  v10 = std::string::insert(&v30, 0, "invalid sh_type for string table section ");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v31, ": expected SHT_STRTAB, but got ");
  v13 = v12->__r_.__value_.__r.__words[2];
  v34 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v35 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(*(_DWORD *)(a2 + 4)));
  v32[0] = &v34;
  v32[2] = ELFSectionTypeName;
  v32[3] = v15;
  v33 = 1284;
  a3(&v29, a4, v32);
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)v34);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_4:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(v30.__r_.__value_.__l.__data_);
      v16 = v29.__r_.__value_.__r.__words[0];
      if (v29.__r_.__value_.__r.__words[0])
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
LABEL_5:
  v16 = v29.__r_.__value_.__r.__words[0];
  if (v29.__r_.__value_.__r.__words[0])
  {
LABEL_6:
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v16;
    return;
  }
LABEL_10:
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v34);
  v17 = v34;
  if ((v35 & 1) != 0)
  {
    *(_QWORD *)&v34 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
    if ((v35 & 1) == 0)
      return;
  }
  else
  {
    v18 = *((_QWORD *)&v34 + 1);
    if (!*((_QWORD *)&v34 + 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, a2, (char *)&v29);
      v22 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v23 = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v21 = " is empty";
LABEL_17:
      v24 = std::string::append(&v30, v21);
      v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v33 = 260;
      v32[0] = &v31;
      v26 = (llvm::object *)operator new(0x38uLL);
      v27 = llvm::object::object_category(v26);
      llvm::StringError::StringError((uint64_t)v26, (llvm::Twine *)v32, 3, (uint64_t)v27);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v26;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v31.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_26;
        }
      }
      else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        if ((v35 & 1) == 0)
          return;
        goto LABEL_21;
      }
LABEL_26:
      operator delete(v29.__r_.__value_.__l.__data_);
      if ((v35 & 1) == 0)
        return;
      goto LABEL_21;
    }
    if (*(_BYTE *)(*((_QWORD *)&v34 + 1) + v34 - 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, a2, (char *)&v29);
      v19 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = " is non-null terminated";
      goto LABEL_17;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v18;
    if ((v35 & 1) == 0)
      return;
  }
LABEL_21:
  v28 = v34;
  *(_QWORD *)&v34 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string v11;
  std::string::size_type v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(a1, (uint64_t)v12);
  if ((v13 & 1) == 0)
  {
    std::to_string(&v10, 0xCCCCCCCCCCCCCCCDLL * ((int64_t)(a2 - v12[0]) >> 3));
    v5 = std::string::insert(&v10, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "]");
    *(std::string *)a3 = *v7;
    v7->__r_.__value_.__r.__words[0] = 0;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        if ((v13 & 1) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v13 & 1) == 0)
      return;
LABEL_12:
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
    return;
  }
  v8 = v12[0];
  v12[0] = 0;
  v10.__r_.__value_.__r.__words[0] = v8;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v10, (uint64_t *)&v11);
  if (v10.__r_.__value_.__r.__words[0])
    (*(void (**)(std::string::size_type))(*(_QWORD *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
  a3[23] = 15;
  strcpy(a3, "[unknown index]");
  if ((v13 & 1) != 0)
    goto LABEL_12;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<char>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int16 v27;
  void *__p[2];
  const char *v29;
  __int16 v30;
  std::string v31;
  _QWORD v32[2];
  std::string *v33;
  __int16 v34;
  _QWORD v35[2];
  const char *v36;
  __int16 v37;
  _QWORD v38[2];
  std::string *v39;
  __int16 v40;
  _QWORD v41[2];
  const char *v42;
  __int16 v43;

  v5 = bswap32(*(_DWORD *)(a2 + 16));
  v6 = bswap32(*(_DWORD *)(a2 + 20));
  if (__CFADD__((_DWORD)v5, (_DWORD)v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, a2, (char *)&v31);
    v7 = std::string::insert(&v31, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v26, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v25.__r_.__value_.__r.__words[0] = v5;
    v32[0] = __p;
    v33 = &v25;
    v34 = 3844;
    v35[0] = v32;
    v36 = ") + sh_size (0x";
    v37 = 770;
    v24.__r_.__value_.__r.__words[0] = v6;
    v38[0] = v35;
    v39 = &v24;
    v40 = 3842;
    v41[0] = v38;
    v42 = ") that cannot be represented";
    v43 = 770;
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = llvm::object::object_category(v11);
    llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v41, 3, (uint64_t)v12);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v29) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    v20 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_20:
    operator delete(v20);
    return;
  }
  if (a1[1] >= (unint64_t)(v6 + v5))
  {
    v19 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v19;
    *(_QWORD *)(a3 + 8) = v6;
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, a2, (char *)&v24);
  v13 = std::string::insert(&v24, 0, "section ");
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v25, " has a sh_offset (0x");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v22 = v6;
  v23 = v5;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)&v23;
  v27 = 3844;
  __p[0] = &v26;
  v29 = ") + sh_size (0x";
  v30 = 770;
  v32[0] = __p;
  v33 = (std::string *)&v22;
  v34 = 3842;
  v35[0] = v32;
  v36 = ") that is greater than the file size (0x";
  v37 = 770;
  v21 = a1[1];
  v38[0] = v35;
  v39 = (std::string *)&v21;
  v40 = 3842;
  v41[0] = v38;
  v42 = ")";
  v43 = 770;
  v17 = (llvm::object *)operator new(0x38uLL);
  v18 = llvm::object::object_category(v17);
  llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v41, 3, (uint64_t)v18);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v17;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_19;
      return;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_19:
    v20 = (void *)v24.__r_.__value_.__r.__words[0];
    goto LABEL_20;
  }
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  llvm::object *v12;
  _UNKNOWN **v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  uint64_t *v19;
  __int16 v20;

  v3 = *result;
  v4 = *(_DWORD *)(*result + 32);
  if (!v4)
  {
    v10 = result[2];
    v11 = result[3];
    if (v10 == v11)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3);
    }
    return result;
  }
  v5 = *(unsigned __int16 *)(v3 + 46);
  if (v5 != 10240)
  {
    v18 = "invalid e_shentsize in ELF header: ";
    v19 = (uint64_t *)__rev16(v5);
    v9 = 2563;
    goto LABEL_12;
  }
  v6 = bswap32(v4);
  v7 = result[1];
  if (v6 > 0xFFFFFFD7 || v6 + 40 > v7)
  {
    v17 = v6;
    v18 = "section header table goes past the end of the file: e_shoff = 0x";
    v19 = &v17;
    v9 = 3843;
LABEL_12:
    v20 = v9;
    v12 = (llvm::object *)operator new(0x38uLL);
    v13 = llvm::object::object_category(v12);
    result = (_QWORD *)llvm::StringError::StringError((uint64_t)v12, (llvm::Twine *)&v18, 3, (uint64_t)v13);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v12;
    return result;
  }
  v14 = v3 + v6;
  v15 = *(unsigned __int16 *)(v3 + 48);
  if (v15)
  {
    v16 = __rev16(v15);
    if (v6 + 40 * (unint64_t)v16 > v7)
    {
LABEL_15:
      v18 = "section table goes past the end of file";
      v9 = 259;
      goto LABEL_12;
    }
  }
  else
  {
    v16 = bswap32(*(_DWORD *)(v14 + 20));
    if (v6 + 40 * (unint64_t)v16 > v7)
      goto LABEL_15;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  llvm::object *v8;
  _UNKNOWN **v9;
  char v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(a1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v7 = v13[0];
    v13[0] = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
LABEL_6:
    result = v13[0];
    v13[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  if (v13[1] > (unint64_t)a2)
  {
    v6 = v13[0] + 40 * a2;
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return result;
  }
  v11[0] = "invalid section index: ";
  v11[2] = a2;
  v12 = 2307;
  v8 = (llvm::object *)operator new(0x38uLL);
  v9 = llvm::object::object_category(v8);
  result = llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)v11, 3, (uint64_t)v9);
  *(_BYTE *)(a3 + 8) |= 1u;
  v10 = v14;
  *(_QWORD *)a3 = v8;
  if ((v10 & 1) != 0)
    goto LABEL_6;
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    v8[0] = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  const char *ELFSectionTypeName;
  uint64_t v17;
  __int16 v18;
  llvm::object *v19;
  _UNKNOWN **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  uint64_t v25;
  _QWORD v26[2];
  const char *v27;
  uint64_t v28;
  __int16 v29;
  const char *v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)0,1ul,1ul>>(a1, a2, (uint64_t)&v33);
  v10 = v33;
  if ((v35 & 1) != 0)
  {
    v33 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
    if ((v35 & 1) == 0)
      return;
    goto LABEL_16;
  }
  v11 = (const char *)bswap32(a2[6]);
  if (a4 <= (unint64_t)v11)
  {
    v30 = "invalid section index: ";
    v31 = v11;
    v18 = 2307;
  }
  else
  {
    v12 = a3 + 40 * v11;
    v13 = *(_DWORD *)(v12 + 4);
    if (v13 == 0x2000000 || v13 == 184549376)
    {
      v15 = v34;
      v25 = bswap32(*(_DWORD *)(v12 + 20)) >> 4;
      if (v34 == v25)
      {
        *(_BYTE *)(a5 + 16) &= ~1u;
        *(_QWORD *)a5 = v10;
        *(_QWORD *)(a5 + 8) = v15;
        if ((v35 & 1) == 0)
          return;
        goto LABEL_16;
      }
      v22 = v34;
      v23[0] = "SHT_SYMTAB_SHNDX has ";
      v23[2] = &v22;
      v24 = 2819;
      v26[0] = v23;
      v27 = " entries, but the symbol table associated has ";
      v29 = 770;
      v30 = (const char *)v26;
      v31 = (const char *)&v25;
      v18 = 3330;
    }
    else
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(v13));
      v29 = 1283;
      v26[0] = "SHT_SYMTAB_SHNDX section is linked with ";
      v27 = ELFSectionTypeName;
      v28 = v17;
      v30 = (const char *)v26;
      v31 = " section (expected SHT_SYMTAB/SHT_DYNSYM)";
      v18 = 770;
    }
  }
  v32 = v18;
  v19 = (llvm::object *)operator new(0x38uLL);
  v20 = llvm::object::object_category(v19);
  llvm::StringError::StringError((uint64_t)v19, (llvm::Twine *)&v30, 3, (uint64_t)v20);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v19;
  if ((v35 & 1) == 0)
    return;
LABEL_16:
  v21 = v33;
  v33 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)0,1ul,1ul>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  llvm::object *v18;
  _UNKNOWN **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  llvm::object *v25;
  _UNKNOWN **v26;
  void *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  llvm::object *v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  __int16 v43;
  std::string v44;
  void *__p[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  __int16 v56;

  if (a2[9] != 0x4000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v40);
    v13 = std::string::insert(&v40, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v42, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v44.__r_.__value_.__r.__words[0] = 4;
    v48[0] = __p;
    v49 = &v44;
    v50 = 2820;
    v51[0] = v48;
    v52 = (std::string *)", but got ";
    v53 = 770;
    v17 = (const char *)bswap32(a2[9]);
    v54[0] = v51;
    v55 = v17;
    v56 = 2306;
    v18 = (llvm::object *)operator new(0x38uLL);
    v19 = llvm::object::object_category(v18);
    llvm::StringError::StringError((uint64_t)v18, (llvm::Twine *)v54, 3, (uint64_t)v19);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    v27 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v27);
    return;
  }
  v6 = bswap32(a2[5]);
  if ((v6 & 3) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v44);
    v7 = std::string::insert(&v44, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v40, " has an invalid sh_size (");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v42;
    v46 = (std::string *)v6;
    v47 = 2308;
    v48[0] = __p;
    v49 = (std::string *)") which is not a multiple of its sh_entsize (";
    v50 = 770;
    v11 = (std::string *)bswap32(a2[9]);
    v51[0] = v48;
    v52 = v11;
    v53 = 2306;
    v12 = ")";
    goto LABEL_11;
  }
  v20 = bswap32(a2[4]);
  if (!__CFADD__((_DWORD)v20, (_DWORD)v6))
  {
    if (a1[1] >= (unint64_t)(v6 + v20))
    {
      v34 = *a1 + v20;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v34;
      *(_QWORD *)(a3 + 8) = v6 >> 2;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v38);
    v28 = std::string::insert(&v38, 0, "section ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v39, " has a sh_offset (0x");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v36 = v6;
    v37 = v20;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    v41 = 3844;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v43 = 770;
    __p[0] = &v42;
    v46 = (std::string *)&v36;
    v47 = 3842;
    v48[0] = __p;
    v49 = (std::string *)") that is greater than the file size (0x";
    v50 = 770;
    v35 = a1[1];
    v51[0] = v48;
    v52 = (std::string *)&v35;
    v53 = 3842;
    v54[0] = v51;
    v55 = ")";
    v56 = 770;
    v32 = (llvm::object *)operator new(0x38uLL);
    v33 = llvm::object::object_category(v32);
    llvm::StringError::StringError((uint64_t)v32, (llvm::Twine *)v54, 3, (uint64_t)v33);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v32;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    v27 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v44);
  v21 = std::string::insert(&v44, 0, "section ");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v40, " has a sh_offset (0x");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v39.__r_.__value_.__r.__words[0] = v20;
  __p[0] = &v42;
  v46 = &v39;
  v47 = 3844;
  v48[0] = __p;
  v49 = (std::string *)") + sh_size (0x";
  v50 = 770;
  v38.__r_.__value_.__r.__words[0] = v6;
  v51[0] = v48;
  v52 = &v38;
  v53 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v54[0] = v51;
  v55 = v12;
  v56 = 770;
  v25 = (llvm::object *)operator new(0x38uLL);
  v26 = llvm::object::object_category(v25);
  llvm::StringError::StringError((uint64_t)v25, (llvm::Twine *)v54, 3, (uint64_t)v26);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v25;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_20:
    v27 = (void *)v44.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRelocationTypeName(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int v5;
  size_t v7;
  const char *v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  const char *ELFRelocationTypeName;
  size_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;

  v5 = *(unsigned __int16 *)(*(_QWORD *)a1 + 18);
  if (v5 != 2048 || *(_BYTE *)(*(_QWORD *)a1 + 4) != 2)
  {
    ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)__rev16(v5), a2);
    v20 = v24;
    v22 = a3[1];
    v23 = v24 + v22;
    if (a3[2] >= v24 + v22)
      goto LABEL_19;
    goto LABEL_18;
  }
  v8 = llvm::object::getELFRelocationTypeName((llvm::object *)8, a2);
  v9 = v7;
  v10 = a3[1];
  if (a3[2] < v7 + v10)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v7 + v10, 1);
    v10 = a3[1];
  }
  if (v9)
  {
    memcpy((void *)(*a3 + v10), v8, v9);
    v10 = a3[1];
  }
  v11 = v10 + v9;
  a3[1] = v10 + v9;
  v12 = llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16), BYTE1(a2));
  v14 = v13;
  if (v11 + 1 > a3[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v11 + 1, 1);
    v11 = a3[1];
  }
  *(_BYTE *)(*a3 + v11) = 47;
  v15 = a3[2];
  v16 = a3[1] + 1;
  a3[1] = v16;
  if (v15 < v16 + v14)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v16 + v14, 1);
    v16 = a3[1];
  }
  if (v14)
  {
    memcpy((void *)(*a3 + v16), v12, v14);
    v16 = a3[1];
  }
  v17 = v16 + v14;
  a3[1] = v17;
  ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16), BYTE2(a2));
  v20 = v19;
  if (v17 + 1 > a3[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v17 + 1, 1);
    v17 = a3[1];
  }
  *(_BYTE *)(*a3 + v17) = 47;
  v21 = a3[2];
  v22 = a3[1] + 1;
  a3[1] = v22;
  v23 = v22 + v20;
  if (v21 < v22 + v20)
  {
LABEL_18:
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v23, 1);
    v22 = a3[1];
  }
LABEL_19:
  if (v20)
  {
    memcpy((void *)(*a3 + v22), ELFRelocationTypeName, v20);
    v22 = a3[1];
  }
  a3[1] = v22 + v20;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 16 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 16 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = bswap32(a2[5]);
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  llvm::object *v18;
  _UNKNOWN **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  llvm::object *v25;
  _UNKNOWN **v26;
  void *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  llvm::object *v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  __int16 v43;
  std::string v44;
  void *__p[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  __int16 v56;

  if (a2[9] != 0x10000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v40);
    v13 = std::string::insert(&v40, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v42, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v44.__r_.__value_.__r.__words[0] = 16;
    v48[0] = __p;
    v49 = &v44;
    v50 = 2820;
    v51[0] = v48;
    v52 = (std::string *)", but got ";
    v53 = 770;
    v17 = (const char *)bswap32(a2[9]);
    v54[0] = v51;
    v55 = v17;
    v56 = 2306;
    v18 = (llvm::object *)operator new(0x38uLL);
    v19 = llvm::object::object_category(v18);
    llvm::StringError::StringError((uint64_t)v18, (llvm::Twine *)v54, 3, (uint64_t)v19);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    v27 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v27);
    return;
  }
  v6 = bswap32(a2[5]);
  if ((v6 & 0xF) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v44);
    v7 = std::string::insert(&v44, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v40, " has an invalid sh_size (");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v42;
    v46 = (std::string *)v6;
    v47 = 2308;
    v48[0] = __p;
    v49 = (std::string *)") which is not a multiple of its sh_entsize (";
    v50 = 770;
    v11 = (std::string *)bswap32(a2[9]);
    v51[0] = v48;
    v52 = v11;
    v53 = 2306;
    v12 = ")";
    goto LABEL_11;
  }
  v20 = bswap32(a2[4]);
  if (!__CFADD__((_DWORD)v20, (_DWORD)v6))
  {
    if (a1[1] >= (unint64_t)(v6 + v20))
    {
      v34 = *a1 + v20;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v34;
      *(_QWORD *)(a3 + 8) = v6 >> 4;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v38);
    v28 = std::string::insert(&v38, 0, "section ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v39, " has a sh_offset (0x");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v36 = v6;
    v37 = v20;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    v41 = 3844;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v43 = 770;
    __p[0] = &v42;
    v46 = (std::string *)&v36;
    v47 = 3842;
    v48[0] = __p;
    v49 = (std::string *)") that is greater than the file size (0x";
    v50 = 770;
    v35 = a1[1];
    v51[0] = v48;
    v52 = (std::string *)&v35;
    v53 = 3842;
    v54[0] = v51;
    v55 = ")";
    v56 = 770;
    v32 = (llvm::object *)operator new(0x38uLL);
    v33 = llvm::object::object_category(v32);
    llvm::StringError::StringError((uint64_t)v32, (llvm::Twine *)v54, 3, (uint64_t)v33);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v32;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    v27 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v44);
  v21 = std::string::insert(&v44, 0, "section ");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v40, " has a sh_offset (0x");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v39.__r_.__value_.__r.__words[0] = v20;
  __p[0] = &v42;
  v46 = &v39;
  v47 = 3844;
  v48[0] = __p;
  v49 = (std::string *)") + sh_size (0x";
  v50 = 770;
  v38.__r_.__value_.__r.__words[0] = v6;
  v51[0] = v48;
  v52 = &v38;
  v53 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v54[0] = v51;
  v55 = v12;
  v56 = 770;
  v25 = (llvm::object *)operator new(0x38uLL);
  v26 = llvm::object::object_category(v25);
  llvm::StringError::StringError((uint64_t)v25, (llvm::Twine *)v54, 3, (uint64_t)v26);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v25;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_20:
    v27 = (void *)v44.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,false>,true>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  llvm::object *v18;
  _UNKNOWN **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  llvm::object *v25;
  _UNKNOWN **v26;
  void *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  llvm::object *v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  __int16 v43;
  std::string v44;
  void *__p[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  __int16 v56;

  if (a2[9] != 201326592)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v40);
    v13 = std::string::insert(&v40, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v42, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v44.__r_.__value_.__r.__words[0] = 12;
    v48[0] = __p;
    v49 = &v44;
    v50 = 2820;
    v51[0] = v48;
    v52 = (std::string *)", but got ";
    v53 = 770;
    v17 = (const char *)bswap32(a2[9]);
    v54[0] = v51;
    v55 = v17;
    v56 = 2306;
    v18 = (llvm::object *)operator new(0x38uLL);
    v19 = llvm::object::object_category(v18);
    llvm::StringError::StringError((uint64_t)v18, (llvm::Twine *)v54, 3, (uint64_t)v19);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    v27 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v27);
    return;
  }
  v6 = bswap32(a2[5]);
  if (v6 % 0xC)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v44);
    v7 = std::string::insert(&v44, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v40, " has an invalid sh_size (");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v42;
    v46 = (std::string *)v6;
    v47 = 2308;
    v48[0] = __p;
    v49 = (std::string *)") which is not a multiple of its sh_entsize (";
    v50 = 770;
    v11 = (std::string *)bswap32(a2[9]);
    v51[0] = v48;
    v52 = v11;
    v53 = 2306;
    v12 = ")";
    goto LABEL_11;
  }
  v20 = bswap32(a2[4]);
  if (!__CFADD__((_DWORD)v20, (_DWORD)v6))
  {
    if (a1[1] >= (unint64_t)(v6 + v20))
    {
      v34 = *a1 + v20;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v34;
      *(_QWORD *)(a3 + 8) = v6 / 0xC;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v38);
    v28 = std::string::insert(&v38, 0, "section ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v39, " has a sh_offset (0x");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v36 = v6;
    v37 = v20;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    v41 = 3844;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v43 = 770;
    __p[0] = &v42;
    v46 = (std::string *)&v36;
    v47 = 3842;
    v48[0] = __p;
    v49 = (std::string *)") that is greater than the file size (0x";
    v50 = 770;
    v35 = a1[1];
    v51[0] = v48;
    v52 = (std::string *)&v35;
    v53 = 3842;
    v54[0] = v51;
    v55 = ")";
    v56 = 770;
    v32 = (llvm::object *)operator new(0x38uLL);
    v33 = llvm::object::object_category(v32);
    llvm::StringError::StringError((uint64_t)v32, (llvm::Twine *)v54, 3, (uint64_t)v33);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v32;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    v27 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v44);
  v21 = std::string::insert(&v44, 0, "section ");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v40, " has a sh_offset (0x");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v39.__r_.__value_.__r.__words[0] = v20;
  __p[0] = &v42;
  v46 = &v39;
  v47 = 3844;
  v48[0] = __p;
  v49 = (std::string *)") + sh_size (0x";
  v50 = 770;
  v38.__r_.__value_.__r.__words[0] = v6;
  v51[0] = v48;
  v52 = &v38;
  v53 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v54[0] = v51;
  v55 = v12;
  v56 = 770;
  v25 = (llvm::object *)operator new(0x38uLL);
  v26 = llvm::object::object_category(v25);
  llvm::StringError::StringError((uint64_t)v25, (llvm::Twine *)v54, 3, (uint64_t)v26);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v25;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_20:
    v27 = (void *)v44.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,false>,false>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  llvm::object *v18;
  _UNKNOWN **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  llvm::object *v25;
  _UNKNOWN **v26;
  void *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  llvm::object *v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  __int16 v43;
  std::string v44;
  void *__p[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  __int16 v56;

  if (a2[9] != 0x8000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v40);
    v13 = std::string::insert(&v40, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v42, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v44.__r_.__value_.__r.__words[0] = 8;
    v48[0] = __p;
    v49 = &v44;
    v50 = 2820;
    v51[0] = v48;
    v52 = (std::string *)", but got ";
    v53 = 770;
    v17 = (const char *)bswap32(a2[9]);
    v54[0] = v51;
    v55 = v17;
    v56 = 2306;
    v18 = (llvm::object *)operator new(0x38uLL);
    v19 = llvm::object::object_category(v18);
    llvm::StringError::StringError((uint64_t)v18, (llvm::Twine *)v54, 3, (uint64_t)v19);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    v27 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v27);
    return;
  }
  v6 = bswap32(a2[5]);
  if ((v6 & 7) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v44);
    v7 = std::string::insert(&v44, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v40, " has an invalid sh_size (");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v42;
    v46 = (std::string *)v6;
    v47 = 2308;
    v48[0] = __p;
    v49 = (std::string *)") which is not a multiple of its sh_entsize (";
    v50 = 770;
    v11 = (std::string *)bswap32(a2[9]);
    v51[0] = v48;
    v52 = v11;
    v53 = 2306;
    v12 = ")";
    goto LABEL_11;
  }
  v20 = bswap32(a2[4]);
  if (!__CFADD__((_DWORD)v20, (_DWORD)v6))
  {
    if (a1[1] >= (unint64_t)(v6 + v20))
    {
      v34 = *a1 + v20;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v34;
      *(_QWORD *)(a3 + 8) = v6 >> 3;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v38);
    v28 = std::string::insert(&v38, 0, "section ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v39, " has a sh_offset (0x");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v36 = v6;
    v37 = v20;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    v41 = 3844;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v43 = 770;
    __p[0] = &v42;
    v46 = (std::string *)&v36;
    v47 = 3842;
    v48[0] = __p;
    v49 = (std::string *)") that is greater than the file size (0x";
    v50 = 770;
    v35 = a1[1];
    v51[0] = v48;
    v52 = (std::string *)&v35;
    v53 = 3842;
    v54[0] = v51;
    v55 = ")";
    v56 = 770;
    v32 = (llvm::object *)operator new(0x38uLL);
    v33 = llvm::object::object_category(v32);
    llvm::StringError::StringError((uint64_t)v32, (llvm::Twine *)v54, 3, (uint64_t)v33);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v32;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_30:
    v27 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v44);
  v21 = std::string::insert(&v44, 0, "section ");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v40, " has a sh_offset (0x");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v39.__r_.__value_.__r.__words[0] = v20;
  __p[0] = &v42;
  v46 = &v39;
  v47 = 3844;
  v48[0] = __p;
  v49 = (std::string *)") + sh_size (0x";
  v50 = 770;
  v38.__r_.__value_.__r.__words[0] = v6;
  v51[0] = v48;
  v52 = &v38;
  v53 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v54[0] = v51;
  v55 = v12;
  v56 = 770;
  v25 = (llvm::object *)operator new(0x38uLL);
  v26 = llvm::object::object_category(v25);
  llvm::StringError::StringError((uint64_t)v25, (llvm::Twine *)v54, 3, (uint64_t)v26);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v25;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_20:
    v27 = (void *)v44.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, _QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int16 v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;

  v7 = *(unsigned __int16 *)(*a1 + 50);
  if (v7 != 0xFFFF)
  {
    v8 = __rev16(v7);
    if (v8)
    {
LABEL_3:
      if (a3 > v8)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getStringTable(a1, a2 + 40 * v8, a4, a5, a6);
        return;
      }
      v13[0] = "section header string table index ";
      v13[2] = v8;
      v14 = 2307;
      v15[0] = v13;
      v15[2] = " does not exist";
      v10 = 770;
      goto LABEL_10;
    }
LABEL_7:
    *(_BYTE *)(a6 + 16) &= ~1u;
    v9 = a1[6];
    *(_QWORD *)a6 = a1[5];
    *(_QWORD *)(a6 + 8) = v9;
    return;
  }
  if (a3)
  {
    v8 = bswap32(*(_DWORD *)(a2 + 24));
    if (v8)
      goto LABEL_3;
    goto LABEL_7;
  }
  v15[0] = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
  v10 = 259;
LABEL_10:
  v16 = v10;
  v11 = (llvm::object *)operator new(0x38uLL);
  v12 = llvm::object::object_category(v11);
  llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v15, 3, (uint64_t)v12);
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_QWORD *)a6 = v11;
}

_QWORD *llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::endianness)0,false>>@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  int64x2_t v6;
  int8x16_t v7;
  llvm::object *v8;
  _UNKNOWN **v9;
  _QWORD *v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  _QWORD *v13;
  std::string __p;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[2];
  unint64_t v18;
  __int16 v19;
  _QWORD v20[2];
  std::string *p_p;
  __int16 v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v4 = a1;
    result = (_QWORD *)llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)1,1ul,1ul>>::operator[]((uint64_t)a2, a1, (uint64_t)&v23);
    if ((v24 & 1) != 0)
    {
      v15[0] = "unable to read an extended symbol table at index ";
      v15[2] = v4;
      v16 = 2307;
      v17[0] = v15;
      v18 = (unint64_t)": ";
      v19 = 770;
      v10 = v23;
      v23 = 0;
      v13 = v10;
      llvm::toString(&v13, &__p, v6, v7);
      v20[0] = v17;
      p_p = &__p;
      v22 = 1026;
      v11 = (llvm::object *)operator new(0x38uLL);
      v12 = llvm::object::object_category(v11);
      llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v20, 3, (uint64_t)v12);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      result = v13;
      if (v13)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
      if ((v24 & 1) != 0)
      {
        result = v23;
        v23 = 0;
        if (result)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = bswap32(v23);
    }
  }
  else
  {
    v17[0] = "found an extended symbol index (";
    v18 = a1;
    v19 = 2307;
    v20[0] = v17;
    p_p = (std::string *)"), but unable to locate the extended symbol index table";
    v22 = 770;
    v8 = (llvm::object *)operator new(0x38uLL);
    v9 = llvm::object::object_category(v8);
    result = (_QWORD *)llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)v20, 3, (uint64_t)v9);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
LABEL_5:
    v10 = *(unsigned __int16 *)(a2 + 14);
    if (v10 == 0xFFFF)
    {
      v13 = a4[1];
      v15[0] = *a4;
      v15[1] = v13;
      llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::endianness)0,false>>((unint64_t)(a2 - v16[0]) >> 4, v15, (uint64_t)&v18);
      if ((v19 & 1) != 0)
      {
        v9 = v18;
        goto LABEL_15;
      }
      v12 = v18;
      if ((_DWORD)v18)
      {
LABEL_10:
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1, v12, a5);
        goto LABEL_16;
      }
    }
    else
    {
      v11 = __rev16(v10);
      if ((unsigned __int16)(v11 + 256) >= 0x101u)
        v12 = v11;
      else
        v12 = 0;
      if (v12)
        goto LABEL_10;
    }
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
    goto LABEL_16;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(a1, a3, (uint64_t)v16);
  if ((v17 & 1) == 0)
    goto LABEL_5;
  v9 = v16[0];
  v16[0] = 0;
LABEL_15:
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v9;
LABEL_16:
  if ((v17 & 1) != 0)
  {
    v14 = v16[0];
    v16[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v12 = v16[0];
    v16[0] = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v12;
    v16[0] = 0;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v13 = v14[0];
      v14[0] = 0;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v13;
      v14[0] = 0;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v10 = v14[0];
        v14[0] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v17 & 1) != 0)
    {
      v11 = v16[0];
      v16[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  unint64_t v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;

  if (!*a2)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
    return;
  }
  v6 = bswap32(*a2);
  if (a4 > v6)
  {
    v7 = (const char *)(a3 + v6);
    v8 = strlen(v7);
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v7;
    *(_QWORD *)(a5 + 8) = v8;
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,false>>(a1, (uint64_t)a2, (char *)&v16);
  v9 = std::string::insert(&v16, 0, "a section ");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v17, " has an invalid sh_name (0x");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v19 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v15 = v6;
  v20[0] = __p;
  v20[2] = &v15;
  v21 = 3844;
  v22[0] = v20;
  v22[2] = ") offset which goes past the end of the section name string table";
  v23 = 770;
  v13 = (llvm::object *)operator new(0x38uLL);
  v14 = llvm::object::object_category(v13);
  llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)v22, 3, (uint64_t)v14);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v13;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_12;
      return;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_12:
    operator delete(v16.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  const char *ELFSectionTypeName;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  llvm::object *v26;
  _UNKNOWN **v27;
  uint64_t v28;
  std::string v29;
  std::string v30;
  std::string v31;
  _QWORD v32[4];
  __int16 v33;
  __int128 v34;
  std::string::size_type v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4) == 3)
    goto LABEL_10;
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, a2, (char *)&v30);
  v10 = std::string::insert(&v30, 0, "invalid sh_type for string table section ");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v31, ": expected SHT_STRTAB, but got ");
  v13 = v12->__r_.__value_.__r.__words[2];
  v34 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v35 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), *(_DWORD *)(a2 + 4));
  v32[0] = &v34;
  v32[2] = ELFSectionTypeName;
  v32[3] = v15;
  v33 = 1284;
  a3(&v29, a4, v32);
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)v34);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_4:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(v30.__r_.__value_.__l.__data_);
      v16 = v29.__r_.__value_.__r.__words[0];
      if (v29.__r_.__value_.__r.__words[0])
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
LABEL_5:
  v16 = v29.__r_.__value_.__r.__words[0];
  if (v29.__r_.__value_.__r.__words[0])
  {
LABEL_6:
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v16;
    return;
  }
LABEL_10:
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v34);
  v17 = v34;
  if ((v35 & 1) != 0)
  {
    *(_QWORD *)&v34 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
    if ((v35 & 1) == 0)
      return;
  }
  else
  {
    v18 = *((_QWORD *)&v34 + 1);
    if (!*((_QWORD *)&v34 + 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, a2, (char *)&v29);
      v22 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v23 = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v21 = " is empty";
LABEL_17:
      v24 = std::string::append(&v30, v21);
      v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v33 = 260;
      v32[0] = &v31;
      v26 = (llvm::object *)operator new(0x38uLL);
      v27 = llvm::object::object_category(v26);
      llvm::StringError::StringError((uint64_t)v26, (llvm::Twine *)v32, 3, (uint64_t)v27);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v26;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v31.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_26;
        }
      }
      else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        if ((v35 & 1) == 0)
          return;
        goto LABEL_21;
      }
LABEL_26:
      operator delete(v29.__r_.__value_.__l.__data_);
      if ((v35 & 1) == 0)
        return;
      goto LABEL_21;
    }
    if (*(_BYTE *)(*((_QWORD *)&v34 + 1) + v34 - 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, a2, (char *)&v29);
      v19 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = " is non-null terminated";
      goto LABEL_17;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v18;
    if ((v35 & 1) == 0)
      return;
  }
LABEL_21:
  v28 = v34;
  *(_QWORD *)&v34 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string v11;
  std::string::size_type v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(a1, (uint64_t)v12);
  if ((v13 & 1) == 0)
  {
    std::to_string(&v10, (int64_t)(a2 - v12[0]) >> 6);
    v5 = std::string::insert(&v10, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "]");
    *(std::string *)a3 = *v7;
    v7->__r_.__value_.__r.__words[0] = 0;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        if ((v13 & 1) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v13 & 1) == 0)
      return;
LABEL_12:
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
    return;
  }
  v8 = v12[0];
  v12[0] = 0;
  v10.__r_.__value_.__r.__words[0] = v8;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v10, (uint64_t *)&v11);
  if (v10.__r_.__value_.__r.__words[0])
    (*(void (**)(std::string::size_type))(*(_QWORD *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
  a3[23] = 15;
  strcpy(a3, "[unknown index]");
  if ((v13 & 1) != 0)
    goto LABEL_12;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<char>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  uint64_t v19;
  uint64_t v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int16 v24;
  void *__p[2];
  const char *v26;
  __int16 v27;
  std::string v28;
  _QWORD v29[2];
  uint64_t *v30;
  __int16 v31;
  _QWORD v32[2];
  const char *v33;
  __int16 v34;
  _QWORD v35[2];
  uint64_t *v36;
  __int16 v37;
  _QWORD v38[2];
  const char *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v41 = v5;
  v42 = v6;
  if (__CFADD__(v6, v5))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, a2, (char *)&v28);
    v7 = std::string::insert(&v28, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v23, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v26 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v29[0] = __p;
    v30 = &v42;
    v31 = 3844;
    v32[0] = v29;
    v33 = ") + sh_size (0x";
    v34 = 770;
    v35[0] = v32;
    v36 = &v41;
    v37 = 3842;
    v38[0] = v35;
    v39 = ") that cannot be represented";
    v40 = 770;
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = llvm::object::object_category(v11);
    llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v38, 3, (uint64_t)v12);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v26) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v28.__r_.__value_.__l.__data_);
    return;
  }
  if ((unint64_t)(v5 + v6) <= a1[1])
  {
    v19 = *a1 + v6;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v19;
    *(_QWORD *)(a3 + 8) = v5;
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, a2, (char *)&v21);
  v13 = std::string::insert(&v21, 0, "section ");
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v22, " has a sh_offset (0x");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  v23.__r_.__value_.__r.__words[2] = (std::string::size_type)&v42;
  v24 = 3844;
  __p[0] = &v23;
  v26 = ") + sh_size (0x";
  v27 = 770;
  v29[0] = __p;
  v30 = &v41;
  v31 = 3842;
  v32[0] = v29;
  v33 = ") that is greater than the file size (0x";
  v34 = 770;
  v20 = a1[1];
  v35[0] = v32;
  v36 = &v20;
  v37 = 3842;
  v38[0] = v35;
  v39 = ")";
  v40 = 770;
  v17 = (llvm::object *)operator new(0x38uLL);
  v18 = llvm::object::object_category(v17);
  llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v38, 3, (uint64_t)v18);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v17;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
      return;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
    operator delete(v21.__r_.__value_.__l.__data_);
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[2];
  uint64_t *v22;
  __int16 v23;
  unint64_t v24;
  const char *v25;
  const char *v26;
  __int16 v27;
  unint64_t v28;

  v3 = *result;
  v4 = *(_QWORD *)(*result + 40);
  v28 = v4;
  if (!v4)
  {
    v9 = result[2];
    v10 = result[3];
    if (v9 == v10)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = (v10 - v9) >> 6;
    }
    return result;
  }
  v5 = (const char *)*(unsigned __int16 *)(v3 + 58);
  if (v5 != (const char *)64)
  {
    v25 = "invalid e_shentsize in ELF header: ";
    v26 = v5;
    v8 = 2563;
    goto LABEL_12;
  }
  v6 = result[1];
  if (v4 > 0xFFFFFFFFFFFFFFBFLL || v4 + 64 > v6)
  {
    v25 = "section header table goes past the end of the file: e_shoff = 0x";
    v26 = (const char *)&v28;
    v8 = 3843;
LABEL_12:
    v27 = v8;
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = llvm::object::object_category(v11);
    result = (_QWORD *)llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)&v25, 3, (uint64_t)v12);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v11;
    return result;
  }
  v13 = v3 + v4;
  v14 = *(unsigned __int16 *)(v3 + 60);
  v24 = v14;
  if (!v14)
  {
    v14 = *(_QWORD *)(v13 + 32);
    v24 = v14;
    if (v14 >> 58)
    {
      v21[0] = "invalid number of sections specified in the NULL section's sh_size field (";
      v22 = (uint64_t *)&v24;
      v23 = 3331;
      v25 = (const char *)v21;
      v26 = ")";
      v8 = 770;
      goto LABEL_12;
    }
  }
  v15 = __CFADD__(v4, v14 << 6);
  v16 = v4 + (v14 << 6);
  if (v15)
  {
    v17[0] = "invalid section header table offset (e_shoff = 0x";
    v17[2] = &v28;
    v18 = 3843;
    v19[0] = v17;
    v19[2] = ") or invalid number of sections specified in the first section header's sh_size field (0x";
    v8 = 770;
    v20 = 770;
    v21[0] = v19;
    v22 = (uint64_t *)&v24;
    v23 = 3842;
    v25 = (const char *)v21;
    v26 = ")";
    goto LABEL_12;
  }
  if (v16 > v6)
  {
    v25 = "section table goes past the end of file";
    v8 = 259;
    goto LABEL_12;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  llvm::object *v8;
  _UNKNOWN **v9;
  char v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(a1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v7 = v13[0];
    v13[0] = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
LABEL_6:
    result = v13[0];
    v13[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  if (v13[1] > (unint64_t)a2)
  {
    v6 = v13[0] + ((unint64_t)a2 << 6);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return result;
  }
  v11[0] = "invalid section index: ";
  v11[2] = a2;
  v12 = 2307;
  v8 = (llvm::object *)operator new(0x38uLL);
  v9 = llvm::object::object_category(v8);
  result = llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)v11, 3, (uint64_t)v9);
  *(_BYTE *)(a3 + 8) |= 1u;
  v10 = v14;
  *(_QWORD *)a3 = v8;
  if ((v10 & 1) != 0)
    goto LABEL_6;
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    v8[0] = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  const char *ELFSectionTypeName;
  uint64_t v17;
  __int16 v18;
  llvm::object *v19;
  _UNKNOWN **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  unint64_t v25;
  _QWORD v26[2];
  const char *v27;
  uint64_t v28;
  __int16 v29;
  const char *v30;
  unint64_t *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)1,1ul,1ul>>(a1, (_QWORD *)a2, (uint64_t)&v33);
  v10 = v33;
  if ((v35 & 1) != 0)
  {
    v33 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
    if ((v35 & 1) == 0)
      return;
    goto LABEL_16;
  }
  v11 = *(unsigned int *)(a2 + 40);
  if (a4 <= v11)
  {
    v30 = "invalid section index: ";
    v31 = (unint64_t *)v11;
    v18 = 2307;
  }
  else
  {
    v12 = a3 + (v11 << 6);
    v13 = *(_DWORD *)(v12 + 4);
    if (v13 == 2 || v13 == 11)
    {
      v15 = v34;
      v25 = *(_QWORD *)(v12 + 32) / 0x18uLL;
      if (v34 == v25)
      {
        *(_BYTE *)(a5 + 16) &= ~1u;
        *(_QWORD *)a5 = v10;
        *(_QWORD *)(a5 + 8) = v15;
        if ((v35 & 1) == 0)
          return;
        goto LABEL_16;
      }
      v22 = v34;
      v23[0] = "SHT_SYMTAB_SHNDX has ";
      v23[2] = &v22;
      v24 = 2819;
      v26[0] = v23;
      v27 = " entries, but the symbol table associated has ";
      v29 = 770;
      v30 = (const char *)v26;
      v31 = &v25;
      v18 = 3330;
    }
    else
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), v13);
      v29 = 1283;
      v26[0] = "SHT_SYMTAB_SHNDX section is linked with ";
      v27 = ELFSectionTypeName;
      v28 = v17;
      v30 = (const char *)v26;
      v31 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      v18 = 770;
    }
  }
  v32 = v18;
  v19 = (llvm::object *)operator new(0x38uLL);
  v20 = llvm::object::object_category(v19);
  llvm::StringError::StringError((uint64_t)v19, (llvm::Twine *)&v30, 3, (uint64_t)v20);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v19;
  if ((v35 & 1) == 0)
    return;
LABEL_16:
  v21 = v33;
  v33 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)1,1ul,1ul>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t *v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  llvm::object *v23;
  _UNKNOWN **v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  llvm::object *v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int16 v36;
  std::string v37;
  __int16 v38;
  std::string v39;
  void *__p[2];
  uint64_t *v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;

  if (a2[7] != 4)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v35);
    v13 = std::string::insert(&v35, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v37, " has invalid sh_entsize: expected ");
    v16 = (uint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v41 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 4;
    v45[0] = __p;
    v46 = &v39;
    v47 = 2820;
    v48[0] = v45;
    v49 = (std::string *)", but got ";
    v50 = 770;
    v34.__r_.__value_.__r.__words[0] = a2[7];
    v51[0] = v48;
    v52 = &v34;
    v53 = 3330;
    v17 = (llvm::object *)operator new(0x38uLL);
    v18 = llvm::object::object_category(v17);
    llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v51, 3, (uint64_t)v18);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v41) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v35.__r_.__value_.__l.__data_);
    return;
  }
  v6 = a2[3];
  v7 = a2[4];
  v43 = v7;
  v44 = v6;
  if ((v7 & 3) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v39);
    v8 = std::string::insert(&v39, 0, "section ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v35, " has an invalid sh_size (");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v37;
    v41 = (uint64_t *)&v43;
    v42 = 3332;
    v45[0] = __p;
    v46 = (std::string *)") which is not a multiple of its sh_entsize (";
    v47 = 770;
    v34.__r_.__value_.__r.__words[0] = a2[7];
    v48[0] = v45;
    v49 = &v34;
    v50 = 3330;
    v12 = ")";
    goto LABEL_11;
  }
  if (!__CFADD__(v6, v7))
  {
    if (v7 + v6 <= a1[1])
    {
      v31 = *a1 + v6;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v7 >> 2;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v33);
    v25 = std::string::insert(&v33, 0, "section ");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v34, " has a sh_offset (0x");
    v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v35.__r_.__value_.__r.__words[2] = (std::string::size_type)&v44;
    v36 = 3844;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v37.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v38 = 770;
    __p[0] = &v37;
    v41 = (uint64_t *)&v43;
    v42 = 3842;
    v45[0] = __p;
    v46 = (std::string *)") that is greater than the file size (0x";
    v47 = 770;
    v32 = a1[1];
    v48[0] = v45;
    v49 = (std::string *)&v32;
    v50 = 3842;
    v51[0] = v48;
    v52 = (std::string *)")";
    v53 = 770;
    v29 = (llvm::object *)operator new(0x38uLL);
    v30 = llvm::object::object_category(v29);
    llvm::StringError::StringError((uint64_t)v29, (llvm::Twine *)v51, 3, (uint64_t)v30);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v29;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_29;
      }
    }
    else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v33.__r_.__value_.__l.__data_);
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v39);
  v19 = std::string::insert(&v39, 0, "section ");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v35, " has a sh_offset (0x");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  __p[0] = &v37;
  v41 = &v44;
  v42 = 3844;
  v45[0] = __p;
  v46 = (std::string *)") + sh_size (0x";
  v47 = 770;
  v48[0] = v45;
  v49 = (std::string *)&v43;
  v50 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v51[0] = v48;
  v52 = (std::string *)v12;
  v53 = 770;
  v23 = (llvm::object *)operator new(0x38uLL);
  v24 = llvm::object::object_category(v23);
  llvm::StringError::StringError((uint64_t)v23, (llvm::Twine *)v51, 3, (uint64_t)v24);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v23;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
    operator delete(v39.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 24 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 24 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = a2[4];
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t *v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  llvm::object *v23;
  _UNKNOWN **v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  llvm::object *v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int16 v36;
  std::string v37;
  __int16 v38;
  std::string v39;
  void *__p[2];
  uint64_t *v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;

  if (a2[7] != 24)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v35);
    v13 = std::string::insert(&v35, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v37, " has invalid sh_entsize: expected ");
    v16 = (uint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v41 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 24;
    v45[0] = __p;
    v46 = &v39;
    v47 = 2820;
    v48[0] = v45;
    v49 = (std::string *)", but got ";
    v50 = 770;
    v34.__r_.__value_.__r.__words[0] = a2[7];
    v51[0] = v48;
    v52 = &v34;
    v53 = 3330;
    v17 = (llvm::object *)operator new(0x38uLL);
    v18 = llvm::object::object_category(v17);
    llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v51, 3, (uint64_t)v18);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v41) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v35.__r_.__value_.__l.__data_);
    return;
  }
  v6 = a2[3];
  v7 = a2[4];
  v43 = v7;
  v44 = v6;
  if (v7 % 0x18)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v39);
    v8 = std::string::insert(&v39, 0, "section ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v35, " has an invalid sh_size (");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v37;
    v41 = (uint64_t *)&v43;
    v42 = 3332;
    v45[0] = __p;
    v46 = (std::string *)") which is not a multiple of its sh_entsize (";
    v47 = 770;
    v34.__r_.__value_.__r.__words[0] = a2[7];
    v48[0] = v45;
    v49 = &v34;
    v50 = 3330;
    v12 = ")";
    goto LABEL_11;
  }
  if (!__CFADD__(v6, v7))
  {
    if (v7 + v6 <= a1[1])
    {
      v31 = *a1 + v6;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v7 / 0x18;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v33);
    v25 = std::string::insert(&v33, 0, "section ");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v34, " has a sh_offset (0x");
    v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v35.__r_.__value_.__r.__words[2] = (std::string::size_type)&v44;
    v36 = 3844;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v37.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v38 = 770;
    __p[0] = &v37;
    v41 = (uint64_t *)&v43;
    v42 = 3842;
    v45[0] = __p;
    v46 = (std::string *)") that is greater than the file size (0x";
    v47 = 770;
    v32 = a1[1];
    v48[0] = v45;
    v49 = (std::string *)&v32;
    v50 = 3842;
    v51[0] = v48;
    v52 = (std::string *)")";
    v53 = 770;
    v29 = (llvm::object *)operator new(0x38uLL);
    v30 = llvm::object::object_category(v29);
    llvm::StringError::StringError((uint64_t)v29, (llvm::Twine *)v51, 3, (uint64_t)v30);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v29;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_29;
      }
    }
    else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v33.__r_.__value_.__l.__data_);
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v39);
  v19 = std::string::insert(&v39, 0, "section ");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v35, " has a sh_offset (0x");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  __p[0] = &v37;
  v41 = &v44;
  v42 = 3844;
  v45[0] = __p;
  v46 = (std::string *)") + sh_size (0x";
  v47 = 770;
  v48[0] = v45;
  v49 = (std::string *)&v43;
  v50 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v51[0] = v48;
  v52 = (std::string *)v12;
  v53 = 770;
  v23 = (llvm::object *)operator new(0x38uLL);
  v24 = llvm::object::object_category(v23);
  llvm::StringError::StringError((uint64_t)v23, (llvm::Twine *)v51, 3, (uint64_t)v24);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v23;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
    operator delete(v39.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,true>,false>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t *v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  llvm::object *v23;
  _UNKNOWN **v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  llvm::object *v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int16 v36;
  std::string v37;
  __int16 v38;
  std::string v39;
  void *__p[2];
  uint64_t *v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;

  if (a2[7] != 16)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v35);
    v13 = std::string::insert(&v35, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v37, " has invalid sh_entsize: expected ");
    v16 = (uint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v41 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 16;
    v45[0] = __p;
    v46 = &v39;
    v47 = 2820;
    v48[0] = v45;
    v49 = (std::string *)", but got ";
    v50 = 770;
    v34.__r_.__value_.__r.__words[0] = a2[7];
    v51[0] = v48;
    v52 = &v34;
    v53 = 3330;
    v17 = (llvm::object *)operator new(0x38uLL);
    v18 = llvm::object::object_category(v17);
    llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v51, 3, (uint64_t)v18);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v41) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v35.__r_.__value_.__l.__data_);
    return;
  }
  v6 = a2[3];
  v7 = a2[4];
  v43 = v7;
  v44 = v6;
  if ((v7 & 0xF) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v39);
    v8 = std::string::insert(&v39, 0, "section ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v35, " has an invalid sh_size (");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v37;
    v41 = (uint64_t *)&v43;
    v42 = 3332;
    v45[0] = __p;
    v46 = (std::string *)") which is not a multiple of its sh_entsize (";
    v47 = 770;
    v34.__r_.__value_.__r.__words[0] = a2[7];
    v48[0] = v45;
    v49 = &v34;
    v50 = 3330;
    v12 = ")";
    goto LABEL_11;
  }
  if (!__CFADD__(v6, v7))
  {
    if (v7 + v6 <= a1[1])
    {
      v31 = *a1 + v6;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v7 >> 4;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v33);
    v25 = std::string::insert(&v33, 0, "section ");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v34, " has a sh_offset (0x");
    v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v35.__r_.__value_.__r.__words[2] = (std::string::size_type)&v44;
    v36 = 3844;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v37.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v38 = 770;
    __p[0] = &v37;
    v41 = (uint64_t *)&v43;
    v42 = 3842;
    v45[0] = __p;
    v46 = (std::string *)") that is greater than the file size (0x";
    v47 = 770;
    v32 = a1[1];
    v48[0] = v45;
    v49 = (std::string *)&v32;
    v50 = 3842;
    v51[0] = v48;
    v52 = (std::string *)")";
    v53 = 770;
    v29 = (llvm::object *)operator new(0x38uLL);
    v30 = llvm::object::object_category(v29);
    llvm::StringError::StringError((uint64_t)v29, (llvm::Twine *)v51, 3, (uint64_t)v30);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v29;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_29;
      }
    }
    else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v33.__r_.__value_.__l.__data_);
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v39);
  v19 = std::string::insert(&v39, 0, "section ");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v35, " has a sh_offset (0x");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  __p[0] = &v37;
  v41 = &v44;
  v42 = 3844;
  v45[0] = __p;
  v46 = (std::string *)") + sh_size (0x";
  v47 = 770;
  v48[0] = v45;
  v49 = (std::string *)&v43;
  v50 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v51[0] = v48;
  v52 = (std::string *)v12;
  v53 = 770;
  v23 = (llvm::object *)operator new(0x38uLL);
  v24 = llvm::object::object_category(v23);
  llvm::StringError::StringError((uint64_t)v23, (llvm::Twine *)v51, 3, (uint64_t)v24);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v23;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
    operator delete(v39.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, _QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  __int16 v9;
  llvm::object *v10;
  _UNKNOWN **v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  v7 = *(unsigned __int16 *)(*a1 + 62);
  if (v7 != 0xFFFF)
  {
    if (*(_WORD *)(*a1 + 62))
    {
LABEL_3:
      if (a3 > v7)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getStringTable(a1, a2 + ((unint64_t)v7 << 6), a4, a5, a6);
        return;
      }
      v12[0] = "section header string table index ";
      v12[2] = v7;
      v13 = 2307;
      v14[0] = v12;
      v14[2] = " does not exist";
      v9 = 770;
      goto LABEL_10;
    }
LABEL_7:
    *(_BYTE *)(a6 + 16) &= ~1u;
    v8 = a1[6];
    *(_QWORD *)a6 = a1[5];
    *(_QWORD *)(a6 + 8) = v8;
    return;
  }
  if (a3)
  {
    v7 = *(_DWORD *)(a2 + 40);
    if (v7)
      goto LABEL_3;
    goto LABEL_7;
  }
  v14[0] = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
  v9 = 259;
LABEL_10:
  v15 = v9;
  v10 = (llvm::object *)operator new(0x38uLL);
  v11 = llvm::object::object_category(v10);
  llvm::StringError::StringError((uint64_t)v10, (llvm::Twine *)v14, 3, (uint64_t)v11);
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_QWORD *)a6 = v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v15[0] = 0;
    v15[1] = 0;
    v16 = 0;
LABEL_5:
    v10 = *(unsigned __int16 *)(a2 + 6);
    if (v10 == 0xFFFF)
    {
      v12 = a4[1];
      v14[0] = *a4;
      v14[1] = v12;
      llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::endianness)1,false>>(-1431655765 * ((unint64_t)(a2 - v15[0]) >> 3), v14, (uint64_t)&v17);
      if ((v18 & 1) != 0)
      {
        v9 = v17;
        goto LABEL_15;
      }
      v11 = v17;
      if ((_DWORD)v17)
      {
LABEL_10:
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1, v11, a5);
        goto LABEL_16;
      }
    }
    else
    {
      if ((unsigned __int16)(v10 + 256) >= 0x101u)
        v11 = *(unsigned __int16 *)(a2 + 6);
      else
        v11 = 0;
      if (v11)
        goto LABEL_10;
    }
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
    goto LABEL_16;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(a1, a3, (uint64_t)v15);
  if ((v16 & 1) == 0)
    goto LABEL_5;
  v9 = v15[0];
  v15[0] = 0;
LABEL_15:
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v9;
LABEL_16:
  if ((v16 & 1) != 0)
  {
    v13 = v15[0];
    v15[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v12 = v16[0];
    v16[0] = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v12;
    v16[0] = 0;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v13 = v14[0];
      v14[0] = 0;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v13;
      v14[0] = 0;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v10 = v14[0];
        v14[0] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v17 & 1) != 0)
    {
      v11 = v16[0];
      v16[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  unint64_t v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;

  v6 = *a2;
  if (!(_DWORD)v6)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
    return;
  }
  if (a4 > v6)
  {
    v7 = (const char *)(a3 + v6);
    v8 = strlen(v7);
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v7;
    *(_QWORD *)(a5 + 8) = v8;
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)1,true>>(a1, (uint64_t)a2, (char *)&v16);
  v9 = std::string::insert(&v16, 0, "a section ");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v17, " has an invalid sh_name (0x");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v19 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v15 = v6;
  v20[0] = __p;
  v20[2] = &v15;
  v21 = 3844;
  v22[0] = v20;
  v22[2] = ") offset which goes past the end of the section name string table";
  v23 = 770;
  v13 = (llvm::object *)operator new(0x38uLL);
  v14 = llvm::object::object_category(v13);
  llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)v22, 3, (uint64_t)v14);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v13;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_12;
      return;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_12:
    operator delete(v16.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  const char *ELFSectionTypeName;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  llvm::object *v26;
  _UNKNOWN **v27;
  uint64_t v28;
  std::string v29;
  std::string v30;
  std::string v31;
  _QWORD v32[4];
  __int16 v33;
  __int128 v34;
  std::string::size_type v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4) == 50331648)
    goto LABEL_10;
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, a2, (char *)&v30);
  v10 = std::string::insert(&v30, 0, "invalid sh_type for string table section ");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v31, ": expected SHT_STRTAB, but got ");
  v13 = v12->__r_.__value_.__r.__words[2];
  v34 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v35 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(*(_DWORD *)(a2 + 4)));
  v32[0] = &v34;
  v32[2] = ELFSectionTypeName;
  v32[3] = v15;
  v33 = 1284;
  a3(&v29, a4, v32);
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)v34);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_4:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(v30.__r_.__value_.__l.__data_);
      v16 = v29.__r_.__value_.__r.__words[0];
      if (v29.__r_.__value_.__r.__words[0])
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
LABEL_5:
  v16 = v29.__r_.__value_.__r.__words[0];
  if (v29.__r_.__value_.__r.__words[0])
  {
LABEL_6:
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v16;
    return;
  }
LABEL_10:
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v34);
  v17 = v34;
  if ((v35 & 1) != 0)
  {
    *(_QWORD *)&v34 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
    if ((v35 & 1) == 0)
      return;
  }
  else
  {
    v18 = *((_QWORD *)&v34 + 1);
    if (!*((_QWORD *)&v34 + 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, a2, (char *)&v29);
      v22 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v23 = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v21 = " is empty";
LABEL_17:
      v24 = std::string::append(&v30, v21);
      v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v33 = 260;
      v32[0] = &v31;
      v26 = (llvm::object *)operator new(0x38uLL);
      v27 = llvm::object::object_category(v26);
      llvm::StringError::StringError((uint64_t)v26, (llvm::Twine *)v32, 3, (uint64_t)v27);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v26;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v31.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_26;
        }
      }
      else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        if ((v35 & 1) == 0)
          return;
        goto LABEL_21;
      }
LABEL_26:
      operator delete(v29.__r_.__value_.__l.__data_);
      if ((v35 & 1) == 0)
        return;
      goto LABEL_21;
    }
    if (*(_BYTE *)(*((_QWORD *)&v34 + 1) + v34 - 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, a2, (char *)&v29);
      v19 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = " is non-null terminated";
      goto LABEL_17;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v18;
    if ((v35 & 1) == 0)
      return;
  }
LABEL_21:
  v28 = v34;
  *(_QWORD *)&v34 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string v11;
  std::string::size_type v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(a1, (uint64_t)v12);
  if ((v13 & 1) == 0)
  {
    std::to_string(&v10, (int64_t)(a2 - v12[0]) >> 6);
    v5 = std::string::insert(&v10, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "]");
    *(std::string *)a3 = *v7;
    v7->__r_.__value_.__r.__words[0] = 0;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        if ((v13 & 1) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v13 & 1) == 0)
      return;
LABEL_12:
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
    return;
  }
  v8 = v12[0];
  v12[0] = 0;
  v10.__r_.__value_.__r.__words[0] = v8;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v10, (uint64_t *)&v11);
  if (v10.__r_.__value_.__r.__words[0])
    (*(void (**)(std::string::size_type))(*(_QWORD *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
  a3[23] = 15;
  strcpy(a3, "[unknown index]");
  if ((v13 & 1) != 0)
    goto LABEL_12;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<char>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  unint64_t v19;
  uint64_t v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int16 v24;
  void *__p[2];
  const char *v26;
  __int16 v27;
  std::string v28;
  _QWORD v29[2];
  unint64_t *v30;
  __int16 v31;
  _QWORD v32[2];
  const char *v33;
  __int16 v34;
  _QWORD v35[2];
  unint64_t *v36;
  __int16 v37;
  _QWORD v38[2];
  const char *v39;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;

  v5 = bswap64(*(_QWORD *)(a2 + 24));
  v6 = bswap64(*(_QWORD *)(a2 + 32));
  v41 = v6;
  v42 = v5;
  if (__CFADD__(v5, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, a2, (char *)&v28);
    v7 = std::string::insert(&v28, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v23, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v26 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v29[0] = __p;
    v30 = &v42;
    v31 = 3844;
    v32[0] = v29;
    v33 = ") + sh_size (0x";
    v34 = 770;
    v35[0] = v32;
    v36 = &v41;
    v37 = 3842;
    v38[0] = v35;
    v39 = ") that cannot be represented";
    v40 = 770;
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = llvm::object::object_category(v11);
    llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v38, 3, (uint64_t)v12);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v26) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v28.__r_.__value_.__l.__data_);
    return;
  }
  if (v6 + v5 <= a1[1])
  {
    v19 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v19;
    *(_QWORD *)(a3 + 8) = v6;
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, a2, (char *)&v21);
  v13 = std::string::insert(&v21, 0, "section ");
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v22, " has a sh_offset (0x");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  v23.__r_.__value_.__r.__words[2] = (std::string::size_type)&v42;
  v24 = 3844;
  __p[0] = &v23;
  v26 = ") + sh_size (0x";
  v27 = 770;
  v29[0] = __p;
  v30 = &v41;
  v31 = 3842;
  v32[0] = v29;
  v33 = ") that is greater than the file size (0x";
  v34 = 770;
  v20 = a1[1];
  v35[0] = v32;
  v36 = (unint64_t *)&v20;
  v37 = 3842;
  v38[0] = v35;
  v39 = ")";
  v40 = 770;
  v17 = (llvm::object *)operator new(0x38uLL);
  v18 = llvm::object::object_category(v17);
  llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v38, 3, (uint64_t)v18);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v17;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
      return;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
    operator delete(v21.__r_.__value_.__l.__data_);
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  llvm::object *v12;
  _UNKNOWN **v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[2];
  unint64_t *v24;
  __int16 v25;
  unint64_t v26;
  const char *v27;
  const char *v28;
  __int16 v29;
  unint64_t v30;

  v3 = *result;
  v4 = *(_QWORD *)(*result + 40);
  v5 = bswap64(v4);
  v30 = v5;
  if (!v4)
  {
    v10 = result[2];
    v11 = result[3];
    if (v10 == v11)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = (v11 - v10) >> 6;
    }
    return result;
  }
  v6 = *(unsigned __int16 *)(v3 + 58);
  if (v6 != 0x4000)
  {
    v27 = "invalid e_shentsize in ELF header: ";
    v28 = (const char *)__rev16(v6);
    v9 = 2563;
    goto LABEL_12;
  }
  v7 = result[1];
  if (v5 > 0xFFFFFFFFFFFFFFBFLL || v5 + 64 > v7)
  {
    v27 = "section header table goes past the end of the file: e_shoff = 0x";
    v28 = (const char *)&v30;
    v9 = 3843;
LABEL_12:
    v29 = v9;
    v12 = (llvm::object *)operator new(0x38uLL);
    v13 = llvm::object::object_category(v12);
    result = (_QWORD *)llvm::StringError::StringError((uint64_t)v12, (llvm::Twine *)&v27, 3, (uint64_t)v13);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v12;
    return result;
  }
  v14 = v3 + v5;
  v15 = *(unsigned __int16 *)(v3 + 60);
  v16 = __rev16(v15);
  v26 = v16;
  if (!v15)
  {
    v16 = bswap64(*(_QWORD *)(v14 + 32));
    v26 = v16;
    if (v16 >> 58)
    {
      v23[0] = "invalid number of sections specified in the NULL section's sh_size field (";
      v24 = &v26;
      v25 = 3331;
      v27 = (const char *)v23;
      v28 = ")";
      v9 = 770;
      goto LABEL_12;
    }
  }
  v17 = __CFADD__(v5, v16 << 6);
  v18 = v5 + (v16 << 6);
  if (v17)
  {
    v19[0] = "invalid section header table offset (e_shoff = 0x";
    v19[2] = &v30;
    v20 = 3843;
    v21[0] = v19;
    v21[2] = ") or invalid number of sections specified in the first section header's sh_size field (0x";
    v9 = 770;
    v22 = 770;
    v23[0] = v21;
    v24 = &v26;
    v25 = 3842;
    v27 = (const char *)v23;
    v28 = ")";
    goto LABEL_12;
  }
  if (v18 > v7)
  {
    v27 = "section table goes past the end of file";
    v9 = 259;
    goto LABEL_12;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  llvm::object *v8;
  _UNKNOWN **v9;
  char v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(a1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v7 = v13[0];
    v13[0] = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
LABEL_6:
    result = v13[0];
    v13[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  if (v13[1] > (unint64_t)a2)
  {
    v6 = v13[0] + ((unint64_t)a2 << 6);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return result;
  }
  v11[0] = "invalid section index: ";
  v11[2] = a2;
  v12 = 2307;
  v8 = (llvm::object *)operator new(0x38uLL);
  v9 = llvm::object::object_category(v8);
  result = llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)v11, 3, (uint64_t)v9);
  *(_BYTE *)(a3 + 8) |= 1u;
  v10 = v14;
  *(_QWORD *)a3 = v8;
  if ((v10 & 1) != 0)
    goto LABEL_6;
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    v8[0] = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  const char *ELFSectionTypeName;
  uint64_t v17;
  __int16 v18;
  llvm::object *v19;
  _UNKNOWN **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  unint64_t v25;
  _QWORD v26[2];
  const char *v27;
  uint64_t v28;
  __int16 v29;
  const char *v30;
  unint64_t *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)0,1ul,1ul>>(a1, (unint64_t *)a2, (uint64_t)&v33);
  v10 = v33;
  if ((v35 & 1) != 0)
  {
    v33 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
    if ((v35 & 1) == 0)
      return;
    goto LABEL_16;
  }
  v11 = bswap32(*(_DWORD *)(a2 + 40));
  if (a4 <= v11)
  {
    v30 = "invalid section index: ";
    v31 = (unint64_t *)v11;
    v18 = 2307;
  }
  else
  {
    v12 = a3 + (v11 << 6);
    v13 = *(_DWORD *)(v12 + 4);
    if (v13 == 0x2000000 || v13 == 184549376)
    {
      v15 = v34;
      v25 = bswap64(*(_QWORD *)(v12 + 32)) / 0x18;
      if (v34 == v25)
      {
        *(_BYTE *)(a5 + 16) &= ~1u;
        *(_QWORD *)a5 = v10;
        *(_QWORD *)(a5 + 8) = v15;
        if ((v35 & 1) == 0)
          return;
        goto LABEL_16;
      }
      v22 = v34;
      v23[0] = "SHT_SYMTAB_SHNDX has ";
      v23[2] = &v22;
      v24 = 2819;
      v26[0] = v23;
      v27 = " entries, but the symbol table associated has ";
      v29 = 770;
      v30 = (const char *)v26;
      v31 = &v25;
      v18 = 3330;
    }
    else
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(v13));
      v29 = 1283;
      v26[0] = "SHT_SYMTAB_SHNDX section is linked with ";
      v27 = ELFSectionTypeName;
      v28 = v17;
      v30 = (const char *)v26;
      v31 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      v18 = 770;
    }
  }
  v32 = v18;
  v19 = (llvm::object *)operator new(0x38uLL);
  v20 = llvm::object::object_category(v19);
  llvm::StringError::StringError((uint64_t)v19, (llvm::Twine *)&v30, 3, (uint64_t)v20);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v19;
  if ((v35 & 1) == 0)
    return;
LABEL_16:
  v21 = v33;
  v33 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)0,1ul,1ul>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  unint64_t *v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  llvm::object *v23;
  _UNKNOWN **v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  llvm::object *v29;
  _UNKNOWN **v30;
  unint64_t v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int16 v36;
  std::string v37;
  __int16 v38;
  std::string v39;
  void *__p[2];
  unint64_t *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;

  if (a2[7] != 0x400000000000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v35);
    v13 = std::string::insert(&v35, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v37, " has invalid sh_entsize: expected ");
    v16 = (unint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v41 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 4;
    v45[0] = __p;
    v46 = &v39;
    v47 = 2820;
    v48[0] = v45;
    v49 = (std::string *)", but got ";
    v50 = 770;
    v34.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v51[0] = v48;
    v52 = &v34;
    v53 = 3330;
    v17 = (llvm::object *)operator new(0x38uLL);
    v18 = llvm::object::object_category(v17);
    llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v51, 3, (uint64_t)v18);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v41) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v35.__r_.__value_.__l.__data_);
    return;
  }
  v6 = bswap64(a2[3]);
  v7 = bswap64(a2[4]);
  v43 = v7;
  v44 = v6;
  if ((v7 & 3) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v39);
    v8 = std::string::insert(&v39, 0, "section ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v35, " has an invalid sh_size (");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v37;
    v41 = &v43;
    v42 = 3332;
    v45[0] = __p;
    v46 = (std::string *)") which is not a multiple of its sh_entsize (";
    v47 = 770;
    v34.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v48[0] = v45;
    v49 = &v34;
    v50 = 3330;
    v12 = ")";
    goto LABEL_11;
  }
  if (!__CFADD__(v6, v7))
  {
    if (v7 + v6 <= a1[1])
    {
      v31 = *a1 + v6;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v7 >> 2;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v33);
    v25 = std::string::insert(&v33, 0, "section ");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v34, " has a sh_offset (0x");
    v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v35.__r_.__value_.__r.__words[2] = (std::string::size_type)&v44;
    v36 = 3844;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v37.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v38 = 770;
    __p[0] = &v37;
    v41 = &v43;
    v42 = 3842;
    v45[0] = __p;
    v46 = (std::string *)") that is greater than the file size (0x";
    v47 = 770;
    v32 = a1[1];
    v48[0] = v45;
    v49 = (std::string *)&v32;
    v50 = 3842;
    v51[0] = v48;
    v52 = (std::string *)")";
    v53 = 770;
    v29 = (llvm::object *)operator new(0x38uLL);
    v30 = llvm::object::object_category(v29);
    llvm::StringError::StringError((uint64_t)v29, (llvm::Twine *)v51, 3, (uint64_t)v30);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v29;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_29;
      }
    }
    else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v33.__r_.__value_.__l.__data_);
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v39);
  v19 = std::string::insert(&v39, 0, "section ");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v35, " has a sh_offset (0x");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  __p[0] = &v37;
  v41 = &v44;
  v42 = 3844;
  v45[0] = __p;
  v46 = (std::string *)") + sh_size (0x";
  v47 = 770;
  v48[0] = v45;
  v49 = (std::string *)&v43;
  v50 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v51[0] = v48;
  v52 = (std::string *)v12;
  v53 = 770;
  v23 = (llvm::object *)operator new(0x38uLL);
  v24 = llvm::object::object_category(v23);
  llvm::StringError::StringError((uint64_t)v23, (llvm::Twine *)v51, 3, (uint64_t)v24);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v23;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
    operator delete(v39.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 24 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 24 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = bswap64(a2[4]);
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  unint64_t *v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  llvm::object *v23;
  _UNKNOWN **v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  llvm::object *v29;
  _UNKNOWN **v30;
  unint64_t v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int16 v36;
  std::string v37;
  __int16 v38;
  std::string v39;
  void *__p[2];
  unint64_t *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;

  if (a2[7] != 0x1800000000000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v35);
    v13 = std::string::insert(&v35, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v37, " has invalid sh_entsize: expected ");
    v16 = (unint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v41 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 24;
    v45[0] = __p;
    v46 = &v39;
    v47 = 2820;
    v48[0] = v45;
    v49 = (std::string *)", but got ";
    v50 = 770;
    v34.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v51[0] = v48;
    v52 = &v34;
    v53 = 3330;
    v17 = (llvm::object *)operator new(0x38uLL);
    v18 = llvm::object::object_category(v17);
    llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v51, 3, (uint64_t)v18);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v41) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v35.__r_.__value_.__l.__data_);
    return;
  }
  v6 = bswap64(a2[3]);
  v7 = bswap64(a2[4]);
  v43 = v7;
  v44 = v6;
  if (v7 % 0x18)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v39);
    v8 = std::string::insert(&v39, 0, "section ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v35, " has an invalid sh_size (");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v37;
    v41 = &v43;
    v42 = 3332;
    v45[0] = __p;
    v46 = (std::string *)") which is not a multiple of its sh_entsize (";
    v47 = 770;
    v34.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v48[0] = v45;
    v49 = &v34;
    v50 = 3330;
    v12 = ")";
    goto LABEL_11;
  }
  if (!__CFADD__(v6, v7))
  {
    if (v7 + v6 <= a1[1])
    {
      v31 = *a1 + v6;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v7 / 0x18;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v33);
    v25 = std::string::insert(&v33, 0, "section ");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v34, " has a sh_offset (0x");
    v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v35.__r_.__value_.__r.__words[2] = (std::string::size_type)&v44;
    v36 = 3844;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v37.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v38 = 770;
    __p[0] = &v37;
    v41 = &v43;
    v42 = 3842;
    v45[0] = __p;
    v46 = (std::string *)") that is greater than the file size (0x";
    v47 = 770;
    v32 = a1[1];
    v48[0] = v45;
    v49 = (std::string *)&v32;
    v50 = 3842;
    v51[0] = v48;
    v52 = (std::string *)")";
    v53 = 770;
    v29 = (llvm::object *)operator new(0x38uLL);
    v30 = llvm::object::object_category(v29);
    llvm::StringError::StringError((uint64_t)v29, (llvm::Twine *)v51, 3, (uint64_t)v30);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v29;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_29;
      }
    }
    else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v33.__r_.__value_.__l.__data_);
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v39);
  v19 = std::string::insert(&v39, 0, "section ");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v35, " has a sh_offset (0x");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  __p[0] = &v37;
  v41 = &v44;
  v42 = 3844;
  v45[0] = __p;
  v46 = (std::string *)") + sh_size (0x";
  v47 = 770;
  v48[0] = v45;
  v49 = (std::string *)&v43;
  v50 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v51[0] = v48;
  v52 = (std::string *)v12;
  v53 = 770;
  v23 = (llvm::object *)operator new(0x38uLL);
  v24 = llvm::object::object_category(v23);
  llvm::StringError::StringError((uint64_t)v23, (llvm::Twine *)v51, 3, (uint64_t)v24);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v23;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
    operator delete(v39.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,true>,false>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  unint64_t *v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  llvm::object *v23;
  _UNKNOWN **v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  llvm::object *v29;
  _UNKNOWN **v30;
  unint64_t v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int16 v36;
  std::string v37;
  __int16 v38;
  std::string v39;
  void *__p[2];
  unint64_t *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;

  if (a2[7] != 0x1000000000000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v35);
    v13 = std::string::insert(&v35, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v37, " has invalid sh_entsize: expected ");
    v16 = (unint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v41 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 16;
    v45[0] = __p;
    v46 = &v39;
    v47 = 2820;
    v48[0] = v45;
    v49 = (std::string *)", but got ";
    v50 = 770;
    v34.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v51[0] = v48;
    v52 = &v34;
    v53 = 3330;
    v17 = (llvm::object *)operator new(0x38uLL);
    v18 = llvm::object::object_category(v17);
    llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v51, 3, (uint64_t)v18);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v41) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v35.__r_.__value_.__l.__data_);
    return;
  }
  v6 = bswap64(a2[3]);
  v7 = bswap64(a2[4]);
  v43 = v7;
  v44 = v6;
  if ((v7 & 0xF) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v39);
    v8 = std::string::insert(&v39, 0, "section ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v35, " has an invalid sh_size (");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v37;
    v41 = &v43;
    v42 = 3332;
    v45[0] = __p;
    v46 = (std::string *)") which is not a multiple of its sh_entsize (";
    v47 = 770;
    v34.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v48[0] = v45;
    v49 = &v34;
    v50 = 3330;
    v12 = ")";
    goto LABEL_11;
  }
  if (!__CFADD__(v6, v7))
  {
    if (v7 + v6 <= a1[1])
    {
      v31 = *a1 + v6;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v7 >> 4;
      return;
    }
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v33);
    v25 = std::string::insert(&v33, 0, "section ");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v34, " has a sh_offset (0x");
    v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v35.__r_.__value_.__r.__words[2] = (std::string::size_type)&v44;
    v36 = 3844;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v37.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    v38 = 770;
    __p[0] = &v37;
    v41 = &v43;
    v42 = 3842;
    v45[0] = __p;
    v46 = (std::string *)") that is greater than the file size (0x";
    v47 = 770;
    v32 = a1[1];
    v48[0] = v45;
    v49 = (std::string *)&v32;
    v50 = 3842;
    v51[0] = v48;
    v52 = (std::string *)")";
    v53 = 770;
    v29 = (llvm::object *)operator new(0x38uLL);
    v30 = llvm::object::object_category(v29);
    llvm::StringError::StringError((uint64_t)v29, (llvm::Twine *)v51, 3, (uint64_t)v30);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v29;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_29;
      }
    }
    else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v33.__r_.__value_.__l.__data_);
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v39);
  v19 = std::string::insert(&v39, 0, "section ");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v35, " has a sh_offset (0x");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  __p[0] = &v37;
  v41 = &v44;
  v42 = 3844;
  v45[0] = __p;
  v46 = (std::string *)") + sh_size (0x";
  v47 = 770;
  v48[0] = v45;
  v49 = (std::string *)&v43;
  v50 = 3842;
  v12 = ") that cannot be represented";
LABEL_11:
  v51[0] = v48;
  v52 = (std::string *)v12;
  v53 = 770;
  v23 = (llvm::object *)operator new(0x38uLL);
  v24 = llvm::object::object_category(v23);
  llvm::StringError::StringError((uint64_t)v23, (llvm::Twine *)v51, 3, (uint64_t)v24);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v23;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_20;
      return;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
    operator delete(v39.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, _QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int16 v10;
  llvm::object *v11;
  _UNKNOWN **v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;

  v7 = *(unsigned __int16 *)(*a1 + 62);
  if (v7 != 0xFFFF)
  {
    v8 = __rev16(v7);
    if (v8)
    {
LABEL_3:
      if (a3 > v8)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getStringTable(a1, a2 + ((unint64_t)v8 << 6), a4, a5, a6);
        return;
      }
      v13[0] = "section header string table index ";
      v13[2] = v8;
      v14 = 2307;
      v15[0] = v13;
      v15[2] = " does not exist";
      v10 = 770;
      goto LABEL_10;
    }
LABEL_7:
    *(_BYTE *)(a6 + 16) &= ~1u;
    v9 = a1[6];
    *(_QWORD *)a6 = a1[5];
    *(_QWORD *)(a6 + 8) = v9;
    return;
  }
  if (a3)
  {
    v8 = bswap32(*(_DWORD *)(a2 + 40));
    if (v8)
      goto LABEL_3;
    goto LABEL_7;
  }
  v15[0] = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
  v10 = 259;
LABEL_10:
  v16 = v10;
  v11 = (llvm::object *)operator new(0x38uLL);
  v12 = llvm::object::object_category(v11);
  llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v15, 3, (uint64_t)v12);
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_QWORD *)a6 = v11;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
LABEL_5:
    v10 = *(unsigned __int16 *)(a2 + 6);
    if (v10 == 0xFFFF)
    {
      v13 = a4[1];
      v15[0] = *a4;
      v15[1] = v13;
      llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::endianness)0,false>>(-1431655765 * ((unint64_t)(a2 - v16[0]) >> 3), v15, (uint64_t)&v18);
      if ((v19 & 1) != 0)
      {
        v9 = v18;
        goto LABEL_15;
      }
      v12 = v18;
      if ((_DWORD)v18)
      {
LABEL_10:
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1, v12, a5);
        goto LABEL_16;
      }
    }
    else
    {
      v11 = __rev16(v10);
      if ((unsigned __int16)(v11 + 256) >= 0x101u)
        v12 = v11;
      else
        v12 = 0;
      if (v12)
        goto LABEL_10;
    }
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
    goto LABEL_16;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(a1, a3, (uint64_t)v16);
  if ((v17 & 1) == 0)
    goto LABEL_5;
  v9 = v16[0];
  v16[0] = 0;
LABEL_15:
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v9;
LABEL_16:
  if ((v17 & 1) != 0)
  {
    v14 = v16[0];
    v16[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v12 = v16[0];
    v16[0] = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v12;
    v16[0] = 0;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v13 = v14[0];
      v14[0] = 0;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v13;
      v14[0] = 0;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v10 = v14[0];
        v14[0] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v17 & 1) != 0)
    {
      v11 = v16[0];
      v16[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  unint64_t v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;

  if (!*a2)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
    return;
  }
  v6 = bswap32(*a2);
  if (a4 > v6)
  {
    v7 = (const char *)(a3 + v6);
    v8 = strlen(v7);
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v7;
    *(_QWORD *)(a5 + 8) = v8;
    return;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::endianness)0,true>>(a1, (uint64_t)a2, (char *)&v16);
  v9 = std::string::insert(&v16, 0, "a section ");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v17, " has an invalid sh_name (0x");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v19 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v15 = v6;
  v20[0] = __p;
  v20[2] = &v15;
  v21 = 3844;
  v22[0] = v20;
  v22[2] = ") offset which goes past the end of the section name string table";
  v23 = 770;
  v13 = (llvm::object *)operator new(0x38uLL);
  v14 = llvm::object::object_category(v13);
  llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)v22, 3, (uint64_t)v14);
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v13;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_12;
      return;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_12:
    operator delete(v16.__r_.__value_.__l.__data_);
}

uint64_t llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::endianness)1,1ul,1ul>>::operator[]@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int16 v5;
  llvm::object *v6;
  _UNKNOWN **v7;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  if (*(_BYTE *)(result + 16))
  {
    if (*(_QWORD *)(result + 8) > a2)
    {
      v4 = *(_QWORD *)result;
LABEL_6:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = *(_DWORD *)(v4 + 4 * a2);
      return result;
    }
    v8[0] = "the index is greater than or equal to the number of entries (";
    v8[2] = result + 8;
    v9 = 3331;
    v10[0] = v8;
    v10[2] = ")";
    v5 = 770;
  }
  else
  {
    v4 = *(_QWORD *)result;
    if (*(_QWORD *)result + 4 * a2 + 4 <= *(_QWORD *)(result + 24))
      goto LABEL_6;
    v10[0] = "can't read past the end of the file";
    v5 = 259;
  }
  v11 = v5;
  v6 = (llvm::object *)operator new(0x38uLL);
  v7 = llvm::object::object_category(v6);
  result = llvm::StringError::StringError((uint64_t)v6, (llvm::Twine *)v10, 3, (uint64_t)v7);
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v6;
  return result;
}

void llvm::object::ObjectFile::createELFObjectFile(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4;
  const char *v5;
  int v6;
  __int128 v7;
  llvm::object *v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  _UNKNOWN **v12;
  char v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[4];
  __int16 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 1) > 0xFuLL)
  {
    v4 = *(_WORD *)(*(_QWORD *)a1 + 4);
    if ((*(_QWORD *)a1 & 1) != 0)
      goto LABEL_3;
LABEL_5:
    if (v4 == 2)
    {
      v10 = HIBYTE(v4);
      if (v10 == 2)
      {
        v15 = a1[1];
        v17 = *a1;
        v18 = v15;
        llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::create((uint64_t *)&v17, a2, (uint64_t)v19);
        if ((v21 & 1) == 0 || (v8 = (llvm::object *)v19[0], v19[0] = 0, !v8))
        {
          v8 = (llvm::object *)operator new(0x98uLL);
          llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::ELFObjectFile((uint64_t)v8, (uint64_t)v19);
          v9 = v19[0];
          if ((v21 & 1) == 0)
            goto LABEL_12;
          goto LABEL_30;
        }
        goto LABEL_28;
      }
      if (v10 == 1)
      {
        v11 = a1[1];
        v17 = *a1;
        v18 = v11;
        llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::create((uint64_t *)&v17, a2, (uint64_t)v19);
        if ((v21 & 1) == 0 || (v8 = (llvm::object *)v19[0], v19[0] = 0, !v8))
        {
          v8 = (llvm::object *)operator new(0x98uLL);
          llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::ELFObjectFile((uint64_t)v8, (uint64_t)v19);
          v9 = v19[0];
          if ((v21 & 1) == 0)
            goto LABEL_12;
          goto LABEL_30;
        }
LABEL_28:
        v16 = 1;
LABEL_33:
        v13 = *(_BYTE *)(a3 + 8) & 0xFE | v16;
        goto LABEL_34;
      }
    }
    else
    {
      if (v4 != 1)
      {
        v5 = "Invalid ELF class";
        goto LABEL_21;
      }
      v6 = HIBYTE(v4);
      if (v6 == 2)
      {
        v14 = a1[1];
        v17 = *a1;
        v18 = v14;
        llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::create((uint64_t *)&v17, a2, (uint64_t)v19);
        if ((v21 & 1) == 0 || (v8 = (llvm::object *)v19[0], v19[0] = 0, !v8))
        {
          v8 = (llvm::object *)operator new(0x98uLL);
          llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::ELFObjectFile((uint64_t)v8, (uint64_t)v19);
          v9 = v19[0];
          if ((v21 & 1) == 0)
            goto LABEL_12;
          goto LABEL_30;
        }
        goto LABEL_28;
      }
      if (v6 == 1)
      {
        v7 = a1[1];
        v17 = *a1;
        v18 = v7;
        llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::create((uint64_t *)&v17, a2, (uint64_t)v19);
        if ((v21 & 1) == 0 || (v8 = (llvm::object *)v19[0], v19[0] = 0, !v8))
        {
          v8 = (llvm::object *)operator new(0x98uLL);
          llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::ELFObjectFile((uint64_t)v8, (uint64_t)v19);
          v9 = v19[0];
          if ((v21 & 1) == 0)
          {
LABEL_12:
            (*(void (**)(_QWORD *))v9)(v19);
LABEL_32:
            v16 = 0;
            goto LABEL_33;
          }
LABEL_30:
          v19[0] = 0;
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_32;
        }
        goto LABEL_28;
      }
    }
    v5 = "Invalid ELF data";
    goto LABEL_21;
  }
  v4 = 0;
  if ((*(_QWORD *)a1 & 1) == 0)
    goto LABEL_5;
LABEL_3:
  v5 = "Insufficient alignment";
LABEL_21:
  v19[0] = v5;
  v20 = 259;
  v8 = (llvm::object *)operator new(0x38uLL);
  v12 = llvm::object::object_category(v8);
  llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)v19, 3, (uint64_t)v12);
  v13 = *(_BYTE *)(a3 + 8) | 1;
LABEL_34:
  *(_BYTE *)(a3 + 8) = v13;
  *(_QWORD *)a3 = v8;
}

void llvm::object::ELFObjectFileBase::getMIPSFeatures(llvm::object::ELFObjectFileBase *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  char *v3;

  llvm::SubtargetFeatures::SubtargetFeatures(a2, "", 0);
  v3 = (char *)sub_180BECCFC
     + 4
     * byte_181266B98[((*(unsigned int (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this) >> 28) ^ 8];
  __asm { BR              X10 }
}

void sub_180BECCFC()
{
  uint64_t v0;
  int v1;

  llvm::SubtargetFeatures::AddFeature(v0, "mips64r2", 8, 1);
  if ((v1 & 0xFF0000) != 0)
    llvm::SubtargetFeatures::AddFeature(v0, "cnmips", 6, 1);
  if ((v1 & 0x4000000) != 0)
    llvm::SubtargetFeatures::AddFeature(v0, "mips16", 6, 1);
  if ((v1 & 0x2000000) != 0)
    llvm::SubtargetFeatures::AddFeature(v0, "micromips", 9, 1);
}

void llvm::object::ELFObjectFileBase::getARMFeatures(llvm::object::ELFObjectFileBase *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  llvm::ARMBuildAttrs *v4;
  __int128 v5;
  _QWORD *v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint8x8_t v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  int v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint8x8_t v58;
  uint64_t v59;
  uint64_t **v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  std::string *begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v75;
  _QWORD *v76;
  _QWORD v77[3];
  void *v78[2];
  void *v79[2];
  int v80;
  void *v81[2];
  void *__p[2];
  int v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  std::vector<std::string> v91;
  _QWORD *v92;
  uint64_t v93;

  v4 = (llvm::ARMBuildAttrs *)llvm::SubtargetFeatures::SubtargetFeatures(&v91, "", 0);
  v5 = *(_OWORD *)llvm::ARMBuildAttrs::getARMAttributeTags(v4);
  v77[2] = 5;
  *(_OWORD *)v78 = 0u;
  *(_OWORD *)v79 = 0u;
  v80 = 1065353216;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v81 = 0u;
  v83 = 1065353216;
  v84 = 0;
  v85 = v5;
  v86 = 0;
  v87 = 0;
  v88 = 1;
  v89 = 0;
  v90 = 0;
  v77[0] = &unk_1E0E22AA0;
  v77[1] = "aeabi";
  (*(void (**)(_QWORD **__return_ptr, llvm::object::ELFObjectFileBase *, _QWORD *))(*(_QWORD *)this + 512))(&v76, this, v77);
  v6 = v76;
  if (v76)
  {
    v76 = 0;
    v92 = v6;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v92, &v93);
    if (v92)
      (*(void (**)(_QWORD *))(*v92 + 8))(v92);
    llvm::SubtargetFeatures::SubtargetFeatures(a2, "", 0);
    if (v76)
      (*(void (**)(_QWORD *))(*v76 + 8))(v76);
    goto LABEL_199;
  }
  if (!v78[1])
    goto LABEL_198;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 6;
    if (v78[1] <= (void *)6)
      v8 = 6u % LOBYTE(v78[1]);
  }
  else
  {
    v8 = (LOBYTE(v78[1]) - 1) & 6;
  }
  v9 = (uint64_t **)*((_QWORD *)v78[0] + v8);
  if (v9)
  {
    v10 = *v9;
    if (v10)
    {
      if (v7.u32[0] < 2uLL)
      {
        while (1)
        {
          v12 = v10[1];
          if (v12 == 6)
          {
            if (*((_DWORD *)v10 + 4) == 6)
              goto LABEL_49;
          }
          else if ((v12 & ((uint64_t)v78[1] - 1)) != v8)
          {
            goto LABEL_26;
          }
          v10 = (uint64_t *)*v10;
          if (!v10)
            goto LABEL_30;
        }
      }
      while (1)
      {
        v11 = v10[1];
        if (v11 == 6)
        {
          if (*((_DWORD *)v10 + 4) == 6)
          {
LABEL_49:
            v13 = (*((_DWORD *)v10 + 5) & 0xFFFFFF00 | *((_DWORD *)v10 + 5)) == 10;
            if (v7.u32[0] > 1uLL)
              goto LABEL_31;
LABEL_29:
            v14 = (LOBYTE(v78[1]) - 1) & 7;
            goto LABEL_33;
          }
        }
        else
        {
          if ((void *)v11 >= v78[1])
            v11 %= (unint64_t)v78[1];
          if (v11 != v8)
          {
LABEL_26:
            v13 = 0;
            if (v7.u32[0] > 1uLL)
              goto LABEL_31;
            goto LABEL_29;
          }
        }
        v10 = (uint64_t *)*v10;
        if (!v10)
        {
LABEL_30:
          v13 = 0;
          if (v7.u32[0] <= 1uLL)
            goto LABEL_29;
          goto LABEL_31;
        }
      }
    }
  }
  v13 = 0;
  if (v7.u32[0] <= 1uLL)
    goto LABEL_29;
LABEL_31:
  v14 = 7;
  if (v78[1] <= (void *)7)
    v14 = 7u % LOBYTE(v78[1]);
LABEL_33:
  v15 = (uint64_t **)*((_QWORD *)v78[0] + v14);
  if (v15)
  {
    v16 = *v15;
    if (v16)
    {
      if (v7.u32[0] < 2uLL)
      {
        while (1)
        {
          v18 = v16[1];
          if (v18 == 7)
          {
            if (*((_DWORD *)v16 + 4) == 7)
              goto LABEL_51;
          }
          else if ((v18 & ((uint64_t)v78[1] - 1)) != v14)
          {
            goto LABEL_60;
          }
          v16 = (uint64_t *)*v16;
          if (!v16)
            goto LABEL_60;
        }
      }
      do
      {
        v17 = v16[1];
        if (v17 == 7)
        {
          if (*((_DWORD *)v16 + 4) == 7)
          {
LABEL_51:
            v19 = *((_DWORD *)v16 + 5);
            if (v19 == 65)
            {
              v20 = "aclass";
              v21 = 6;
            }
            else
            {
              if (v19 == 77)
              {
                llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "mclass", 6, 1);
                if (!v13)
                  break;
              }
              else
              {
                if (v19 != 82)
                  break;
                llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "rclass", 6, 1);
                if (!v13)
                  break;
              }
              v20 = "hwdiv";
              v21 = 5;
            }
            llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, (unsigned __int8 *)v20, v21, 1);
            break;
          }
        }
        else
        {
          if ((void *)v17 >= v78[1])
            v17 %= (unint64_t)v78[1];
          if (v17 != v14)
            break;
        }
        v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
  }
LABEL_60:
  if (!v78[1])
    goto LABEL_198;
  v22 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    v23 = 9;
    if (v78[1] <= (void *)9)
      v23 = 9u % LOBYTE(v78[1]);
  }
  else
  {
    v23 = (LODWORD(v78[1]) - 1) & 9;
  }
  v24 = (uint64_t **)*((_QWORD *)v78[0] + v23);
  if (!v24)
    goto LABEL_86;
  v25 = *v24;
  if (!v25)
    goto LABEL_86;
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v27 = v25[1];
      if (v27 == 9)
      {
        if (*((_DWORD *)v25 + 4) == 9)
          goto LABEL_81;
      }
      else if ((v27 & ((uint64_t)v78[1] - 1)) != v23)
      {
        goto LABEL_86;
      }
      v25 = (uint64_t *)*v25;
      if (!v25)
        goto LABEL_86;
    }
  }
  while (1)
  {
    v26 = v25[1];
    if (v26 == 9)
      break;
    if ((void *)v26 >= v78[1])
      v26 %= (unint64_t)v78[1];
    if (v26 != v23)
      goto LABEL_86;
LABEL_70:
    v25 = (uint64_t *)*v25;
    if (!v25)
      goto LABEL_86;
  }
  if (*((_DWORD *)v25 + 4) != 9)
    goto LABEL_70;
LABEL_81:
  v28 = *((_DWORD *)v25 + 5);
  if (v28 == 2)
  {
    v29 = 1;
LABEL_85:
    llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "thumb2", 6, v29);
  }
  else if (!v28)
  {
    llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "thumb", 5, 0);
    v29 = 0;
    goto LABEL_85;
  }
LABEL_86:
  if (!v78[1])
    goto LABEL_198;
  v30 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    v31 = 10;
    if (v78[1] <= (void *)0xA)
      v31 = 0xAu % LOBYTE(v78[1]);
  }
  else
  {
    v31 = (LODWORD(v78[1]) - 1) & 0xALL;
  }
  v32 = (uint64_t **)*((_QWORD *)v78[0] + v31);
  if (v32)
  {
    v33 = *v32;
    if (v33)
    {
      if (v30.u32[0] < 2uLL)
      {
        while (1)
        {
          v35 = v33[1];
          if (v35 == 10)
          {
            if (*((_DWORD *)v33 + 4) == 10)
              goto LABEL_107;
          }
          else if ((v35 & ((uint64_t)v78[1] - 1)) != v31)
          {
            goto LABEL_114;
          }
          v33 = (uint64_t *)*v33;
          if (!v33)
            goto LABEL_114;
        }
      }
      do
      {
        v34 = v33[1];
        if (v34 == 10)
        {
          if (*((_DWORD *)v33 + 4) == 10)
          {
LABEL_107:
            switch(*((_DWORD *)v33 + 5))
            {
              case 0:
                llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "vfp2sp", 6, 0);
                llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "vfp3d16sp", 9, 0);
                v36 = "vfp4d16sp";
                v37 = 9;
                v38 = 0;
                goto LABEL_113;
              case 2:
                v36 = "vfp2";
                goto LABEL_112;
              case 3:
              case 4:
                v36 = "vfp3";
                goto LABEL_112;
              case 5:
              case 6:
                v36 = "vfp4";
LABEL_112:
                v37 = 4;
                v38 = 1;
LABEL_113:
                llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, (unsigned __int8 *)v36, v37, v38);
                break;
              default:
                goto LABEL_114;
            }
            break;
          }
        }
        else
        {
          if ((void *)v34 >= v78[1])
            v34 %= (unint64_t)v78[1];
          if (v34 != v31)
            break;
        }
        v33 = (uint64_t *)*v33;
      }
      while (v33);
    }
  }
LABEL_114:
  if (!v78[1])
    goto LABEL_198;
  v39 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = 12;
    if (v78[1] <= (void *)0xC)
      v40 = 0xCu % LOBYTE(v78[1]);
  }
  else
  {
    v40 = (LOBYTE(v78[1]) - 1) & 0xC;
  }
  v41 = (uint64_t **)*((_QWORD *)v78[0] + v40);
  if (!v41)
    goto LABEL_143;
  v42 = *v41;
  if (!v42)
    goto LABEL_143;
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      v44 = v42[1];
      if (v44 == 12)
      {
        if (*((_DWORD *)v42 + 4) == 12)
          goto LABEL_135;
      }
      else if ((v44 & ((uint64_t)v78[1] - 1)) != v40)
      {
        goto LABEL_143;
      }
      v42 = (uint64_t *)*v42;
      if (!v42)
        goto LABEL_143;
    }
  }
  while (2)
  {
    v43 = v42[1];
    if (v43 != 12)
    {
      if ((void *)v43 >= v78[1])
        v43 %= (unint64_t)v78[1];
      if (v43 != v40)
        goto LABEL_143;
      goto LABEL_124;
    }
    if (*((_DWORD *)v42 + 4) != 12)
    {
LABEL_124:
      v42 = (uint64_t *)*v42;
      if (!v42)
        goto LABEL_143;
      continue;
    }
    break;
  }
LABEL_135:
  v45 = *((_DWORD *)v42 + 5);
  switch(v45)
  {
    case 2:
      llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "neon", 4, 1);
      v46 = "fp16";
      break;
    case 1:
      v46 = "neon";
      break;
    case 0:
      llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "neon", 4, 0);
      v46 = "fp16";
      v47 = 0;
      goto LABEL_142;
    default:
      goto LABEL_143;
  }
  v47 = 1;
LABEL_142:
  llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, (unsigned __int8 *)v46, 4, v47);
LABEL_143:
  if (!v78[1])
    goto LABEL_198;
  v48 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] > 1uLL)
  {
    v49 = 48;
    if (v78[1] <= (void *)0x30)
      v49 = 0x30u % LOBYTE(v78[1]);
  }
  else
  {
    v49 = (LOBYTE(v78[1]) - 1) & 0x30;
  }
  v50 = (uint64_t **)*((_QWORD *)v78[0] + v49);
  if (!v50)
    goto LABEL_172;
  v51 = *v50;
  if (!v51)
    goto LABEL_172;
  if (v48.u32[0] < 2uLL)
  {
    while (1)
    {
      v53 = v51[1];
      if (v53 == 48)
      {
        if (*((_DWORD *)v51 + 4) == 48)
          goto LABEL_164;
      }
      else if ((v53 & ((uint64_t)v78[1] - 1)) != v49)
      {
        goto LABEL_172;
      }
      v51 = (uint64_t *)*v51;
      if (!v51)
        goto LABEL_172;
    }
  }
  while (2)
  {
    v52 = v51[1];
    if (v52 != 48)
    {
      if ((void *)v52 >= v78[1])
        v52 %= (unint64_t)v78[1];
      if (v52 != v49)
        goto LABEL_172;
      goto LABEL_153;
    }
    if (*((_DWORD *)v51 + 4) != 48)
    {
LABEL_153:
      v51 = (uint64_t *)*v51;
      if (!v51)
        goto LABEL_172;
      continue;
    }
    break;
  }
LABEL_164:
  v54 = *((_DWORD *)v51 + 5);
  switch(v54)
  {
    case 2:
      v55 = "mve.fp";
      v56 = 6;
      break;
    case 1:
      llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "mve.fp", 6, 0);
      v55 = "mve";
      v56 = 3;
      break;
    case 0:
      llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "mve", 3, 0);
      v55 = "mve.fp";
      v56 = 6;
      v57 = 0;
      goto LABEL_171;
    default:
      goto LABEL_172;
  }
  v57 = 1;
LABEL_171:
  llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, (unsigned __int8 *)v55, v56, v57);
LABEL_172:
  if (!v78[1])
    goto LABEL_198;
  v58 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
  v58.i16[0] = vaddlv_u8(v58);
  if (v58.u32[0] > 1uLL)
  {
    v59 = 44;
    if (v78[1] <= (void *)0x2C)
      v59 = 0x2Cu % LOBYTE(v78[1]);
  }
  else
  {
    v59 = (LODWORD(v78[1]) - 1) & 0x2CLL;
  }
  v60 = (uint64_t **)*((_QWORD *)v78[0] + v59);
  if (!v60)
    goto LABEL_198;
  v61 = *v60;
  if (!v61)
    goto LABEL_198;
  if (v58.u32[0] < 2uLL)
  {
    while (1)
    {
      v63 = v61[1];
      if (v63 == 44)
      {
        if (*((_DWORD *)v61 + 4) == 44)
          goto LABEL_193;
      }
      else if ((v63 & ((uint64_t)v78[1] - 1)) != v59)
      {
        goto LABEL_198;
      }
      v61 = (uint64_t *)*v61;
      if (!v61)
        goto LABEL_198;
    }
  }
  while (2)
  {
    v62 = v61[1];
    if (v62 != 44)
    {
      if ((void *)v62 >= v78[1])
        v62 %= (unint64_t)v78[1];
      if (v62 != v59)
        goto LABEL_198;
      goto LABEL_182;
    }
    if (*((_DWORD *)v61 + 4) != 44)
    {
LABEL_182:
      v61 = (uint64_t *)*v61;
      if (!v61)
        goto LABEL_198;
      continue;
    }
    break;
  }
LABEL_193:
  v64 = *((_DWORD *)v61 + 5);
  if (v64 == 1)
  {
    v65 = 0;
LABEL_197:
    llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "hwdiv", 5, v65);
    llvm::SubtargetFeatures::AddFeature((uint64_t)&v91, "hwdiv-arm", 9, v65);
  }
  else if (v64 == 2)
  {
    v65 = 1;
    goto LABEL_197;
  }
LABEL_198:
  *a2 = v91;
  memset(&v91, 0, sizeof(v91));
LABEL_199:
  v66 = v90;
  v77[0] = &unk_1E0E22AC8;
  v90 = 0;
  if (v66)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    if (v90)
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  }
  v67 = __p[0];
  if (__p[0])
  {
    do
    {
      v68 = (_QWORD *)*v67;
      operator delete(v67);
      v67 = v68;
    }
    while (v68);
  }
  v69 = v81[0];
  v81[0] = 0;
  if (v69)
    operator delete(v69);
  v70 = v79[0];
  if (v79[0])
  {
    do
    {
      v71 = (_QWORD *)*v70;
      operator delete(v70);
      v70 = v71;
    }
    while (v71);
  }
  v72 = v78[0];
  v78[0] = 0;
  if (v72)
    operator delete(v72);
  begin = v91.__begin_;
  if (v91.__begin_)
  {
    end = v91.__end_;
    v75 = v91.__begin_;
    if (v91.__end_ != v91.__begin_)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != begin);
      v75 = v91.__begin_;
    }
    v91.__end_ = begin;
    operator delete(v75);
  }
}

uint64_t llvm::ELFAttributeParser::getAttributeValue(llvm::ELFAttributeParser *this, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*((_QWORD *)this + 3) + 8 * v4);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!v7)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v8 = v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          return *((_DWORD *)v7 + 5) & 0xFFFFFF00 | *((_DWORD *)v7 + 5) | 0x100000000;
      }
      else if ((v10 & v8) != v4)
      {
        return 0;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v2)
      v9 %= v2;
    if (v9 != v4)
      return 0;
LABEL_12:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 0;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_12;
  return *((_DWORD *)v7 + 5) & 0xFFFFFF00 | *((_DWORD *)v7 + 5) | 0x100000000;
}

void llvm::object::ELFObjectFileBase::getRISCVFeatures(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  llvm::RISCVAttrs *v4;
  __int128 v5;
  void *v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  llvm::RISCVISAInfo *v14;
  void **v15;
  void **v16;
  void *v17;
  char **v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  std::string *begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v29;
  void *__p;
  void **v31;
  _QWORD v32[3];
  void *v33[2];
  void *v34[2];
  int v35;
  void *v36[2];
  void *v37[2];
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  std::vector<std::string> v46;
  llvm::RISCVISAInfo *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  llvm::SubtargetFeatures::SubtargetFeatures(&v46, "", 0);
  v4 = (llvm::RISCVAttrs *)(*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this);
  if ((v4 & 1) != 0)
    llvm::SubtargetFeatures::AddFeature((uint64_t)&v46, "c", 1, 1);
  v5 = *(_OWORD *)llvm::RISCVAttrs::getRISCVAttributeTags(v4);
  v32[2] = 5;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = 1065353216;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)v36 = 0u;
  v38 = 1065353216;
  v39 = 0;
  v40 = v5;
  v41 = 0;
  v42 = 0;
  v43 = 1;
  v44 = 0;
  v45 = 0;
  v32[0] = &unk_1E0E22C60;
  v32[1] = "riscv";
  (*(void (**)(void **__return_ptr, llvm::object::ELFObjectFileBase *, _QWORD *))(*(_QWORD *)this + 512))(&__p, this, v32);
  v6 = __p;
  if (__p)
  {
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v6;
    goto LABEL_44;
  }
  if (!v36[1])
    goto LABEL_43;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v36[1]);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 5;
    if (v36[1] <= (void *)5)
      v8 = 5u % LOBYTE(v36[1]);
  }
  else
  {
    v8 = (LODWORD(v36[1]) - 1) & 5;
  }
  v9 = (uint64_t **)*((_QWORD *)v36[0] + v8);
  if (!v9 || (v10 = *v9) == 0)
  {
LABEL_43:
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(std::vector<std::string> *)a2 = v46;
    memset(&v46, 0, sizeof(v46));
    goto LABEL_44;
  }
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 5)
      {
        if (*((_DWORD *)v10 + 4) == 5)
          goto LABEL_26;
      }
      else if ((v12 & ((uint64_t)v36[1] - 1)) != v8)
      {
        goto LABEL_43;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 5)
      break;
    if ((void *)v11 >= v36[1])
      v11 %= (unint64_t)v36[1];
    if (v11 != v8)
      goto LABEL_43;
LABEL_15:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_43;
  }
  if (*((_DWORD *)v10 + 4) != 5)
    goto LABEL_15;
LABEL_26:
  llvm::RISCVISAInfo::parseNormalizedArchString(v10[3], v10[4], (uint64_t)&v47);
  v13 = v48;
  v14 = v47;
  if ((v48 & 1) != 0)
  {
    v18 = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v14;
    v19 = v13;
  }
  else
  {
    llvm::SubtargetFeatures::AddFeature((uint64_t)&v46, "64bit", 5, *(_DWORD *)v47 != 32);
    llvm::RISCVISAInfo::toFeatureVector(v47, (uint64_t)&__p);
    llvm::SubtargetFeatures::addFeaturesVector((uint64_t)&v46, (std::string *)__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (_BYTE *)__p) >> 3));
    v15 = (void **)__p;
    if (__p)
    {
      v16 = v31;
      v17 = __p;
      if (v31 != __p)
      {
        do
        {
          if (*((char *)v16 - 1) < 0)
            operator delete(*(v16 - 3));
          v16 -= 3;
        }
        while (v16 != v15);
        v17 = __p;
      }
      v31 = v15;
      operator delete(v17);
    }
    v19 = v48;
    v18 = (char **)v47;
  }
  v47 = 0;
  if ((v19 & 1) != 0)
  {
    if (v18)
      (*((void (**)(char **))*v18 + 1))(v18);
  }
  else if (v18)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)(v18 + 3), v18[4]);
    operator delete(v18);
  }
  if ((v13 & 1) == 0)
    goto LABEL_43;
LABEL_44:
  v20 = v45;
  v32[0] = &unk_1E0E22AC8;
  v45 = 0;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  v21 = v37[0];
  if (v37[0])
  {
    do
    {
      v22 = (_QWORD *)*v21;
      operator delete(v21);
      v21 = v22;
    }
    while (v22);
  }
  v23 = v36[0];
  v36[0] = 0;
  if (v23)
    operator delete(v23);
  v24 = v34[0];
  if (v34[0])
  {
    do
    {
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = v33[0];
  v33[0] = 0;
  if (v26)
    operator delete(v26);
  begin = v46.__begin_;
  if (v46.__begin_)
  {
    end = v46.__end_;
    v29 = v46.__begin_;
    if (v46.__end_ != v46.__begin_)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != begin);
      v29 = v46.__begin_;
    }
    v46.__end_ = begin;
    operator delete(v29);
  }
}

void llvm::object::ELFObjectFileBase::getFeatures(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  std::vector<std::string> v6;

  v4 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 544))(this);
  if (v4 <= 242)
  {
    if (v4 == 8)
    {
      llvm::object::ELFObjectFileBase::getMIPSFeatures(this, &v6);
      goto LABEL_13;
    }
    if (v4 == 40)
    {
      llvm::object::ELFObjectFileBase::getARMFeatures(this, &v6);
LABEL_13:
      *(_BYTE *)(a2 + 24) &= ~1u;
      *(std::vector<std::string> *)a2 = v6;
      return;
    }
    goto LABEL_11;
  }
  if (v4 != 243)
  {
    if (v4 == 258)
    {
      llvm::SubtargetFeatures::SubtargetFeatures(&v6, "", 0);
      v5 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this) & 7;
      if (v5 != 2)
      {
        if (v5 != 3)
          goto LABEL_13;
        llvm::SubtargetFeatures::AddFeature((uint64_t)&v6, "d", 1, 1);
      }
      llvm::SubtargetFeatures::AddFeature((uint64_t)&v6, "f", 1, 1);
      goto LABEL_13;
    }
LABEL_11:
    llvm::SubtargetFeatures::SubtargetFeatures(&v6, "", 0);
    goto LABEL_13;
  }
  llvm::object::ELFObjectFileBase::getRISCVFeatures(this, a2);
}

void llvm::object::ELFObjectFileBase::tryGetCPUName(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 544))(this);
  if ((v4 - 20) >= 2)
  {
    if (v4 == 224)
    {
      llvm::object::ELFObjectFileBase::getAMDGPUCPUName(this);
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v6;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
    }
  }
  else
  {
    *(_QWORD *)a2 = "future";
    *(_QWORD *)(a2 + 8) = 6;
    *(_BYTE *)(a2 + 16) = 1;
  }
}

void llvm::object::ELFObjectFileBase::getAMDGPUCPUName(llvm::object::ELFObjectFileBase *this)
{
  char *v1;

  v1 = (char *)sub_180BEE008
     + 4
     * word_181266BB0[(*(unsigned __int8 (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this)
                    - 1];
  __asm { BR              X10 }
}

const char *sub_180BEE008()
{
  return "r630";
}

const char *sub_180BEE208()
{
  return "barts";
}

const char *sub_180BEE21C()
{
  return "caicos";
}

const char *sub_180BEE230()
{
  return "turks";
}

const char *sub_180BEE244()
{
  return "gfx601";
}

const char *sub_180BEE258()
{
  return "gfx700";
}

const char *sub_180BEE26C()
{
  return "gfx702";
}

const char *sub_180BEE280()
{
  return "gfx703";
}

const char *sub_180BEE294()
{
  return "gfx704";
}

const char *sub_180BEE2A8()
{
  return "gfx802";
}

const char *sub_180BEE2BC()
{
  return "gfx906";
}

const char *sub_180BEE2D0()
{
  return "gfx908";
}

const char *sub_180BEE2E4()
{
  return "gfx909";
}

const char *sub_180BEE2F8()
{
  return "gfx1033";
}

const char *sub_180BEE30C()
{
  return "gfx602";
}

const char *sub_180BEE320()
{
  return "gfx1034";
}

const char *sub_180BEE334()
{
  return "gfx600";
}

const char *sub_180BEE348()
{
  return "gfx701";
}

const char *sub_180BEE35C()
{
  return "gfx801";
}

const char *sub_180BEE370()
{
  return "gfx810";
}

const char *sub_180BEE384()
{
  return "gfx902";
}

const char *sub_180BEE398()
{
  return "gfx904";
}

const char *sub_180BEE3AC()
{
  return "gfx1031";
}

const char *sub_180BEE3C0()
{
  return "gfx1032";
}

const char *sub_180BEE3D4()
{
  return "gfx705";
}

const char *sub_180BEE3E8()
{
  return "gfx941";
}

const char *sub_180BEE3FC()
{
  return "gfx1201";
}

const char *sub_180BEE410()
{
  return "gfx900";
}

const char *sub_180BEE424()
{
  return "gfx90a";
}

const char *sub_180BEE438()
{
  return "gfx1102";
}

const char *sub_180BEE44C()
{
  return "gfx1200";
}

const char *sub_180BEE460()
{
  return "gfx1150";
}

const char *sub_180BEE474()
{
  return "gfx1103";
}

const char *sub_180BEE488()
{
  return "gfx1036";
}

void llvm::object::ELFObjectFileBase::setARMSubArch(llvm::object::ELFObjectFileBase *this, llvm::Triple *a2)
{
  __int128 v4;
  _QWORD *v5;
  const char *v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const std::string::value_type *v13;
  uint64_t AttributeValue;
  unsigned int v16;
  BOOL v17;
  int v18;
  std::string *v20;
  std::string::size_type size;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  std::string v29;
  _QWORD *v30;
  _QWORD v31[3];
  void *v32[2];
  void *v33[2];
  int v34;
  void *v35[2];
  void *__p[2];
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  if (!*((_DWORD *)a2 + 7))
  {
    v4 = *(_OWORD *)llvm::ARMBuildAttrs::getARMAttributeTags(this);
    v31[2] = 5;
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)v33 = 0u;
    v34 = 1065353216;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v35 = 0u;
    v37 = 1065353216;
    v38 = 0;
    v39 = v4;
    v40 = 0;
    v41 = 0;
    v42 = 1;
    v43 = 0;
    v44 = 0;
    v31[0] = &unk_1E0E22AA0;
    v31[1] = "aeabi";
    (*(void (**)(_QWORD **__return_ptr, llvm::object::ELFObjectFileBase *, _QWORD *))(*(_QWORD *)this + 512))(&v30, this, v31);
    v5 = v30;
    if (v30)
    {
      v30 = 0;
      v45 = v5;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v45, (uint64_t *)&v29);
      if (v45)
        (*(void (**)(_QWORD *))(*v45 + 8))(v45);
      if (v30)
        (*(void (**)(_QWORD *))(*v30 + 8))(v30);
    }
    else
    {
      memset(&v29, 0, sizeof(v29));
      if ((*((_DWORD *)a2 + 6) - 35) >= 2)
        v6 = "arm";
      else
        v6 = "thumb";
      MEMORY[0x186DA1308](&v29, v6);
      if (v32[1])
      {
        v7 = (uint8x8_t)vcnt_s8((int8x8_t)v32[1]);
        v7.i16[0] = vaddlv_u8(v7);
        if (v7.u32[0] > 1uLL)
        {
          v8 = 6;
          if (v32[1] <= (void *)6)
            v8 = 6u % LOBYTE(v32[1]);
        }
        else
        {
          v8 = (LOBYTE(v32[1]) - 1) & 6;
        }
        v9 = (uint64_t **)*((_QWORD *)v32[0] + v8);
        if (v9)
        {
          v10 = *v9;
          if (v10)
          {
            if (v7.u32[0] < 2uLL)
            {
              while (1)
              {
                v12 = v10[1];
                if (v12 == 6)
                {
                  if (*((_DWORD *)v10 + 4) == 6)
                    goto LABEL_32;
                }
                else if ((v12 & ((uint64_t)v32[1] - 1)) != v8)
                {
                  goto LABEL_57;
                }
                v10 = (uint64_t *)*v10;
                if (!v10)
                  goto LABEL_57;
              }
            }
            do
            {
              v11 = v10[1];
              if (v11 == 6)
              {
                if (*((_DWORD *)v10 + 4) == 6)
                {
LABEL_32:
                  v13 = "v4";
                  switch(*((_DWORD *)v10 + 5))
                  {
                    case 1:
                      goto LABEL_56;
                    case 2:
                      v13 = "v4t";
                      goto LABEL_56;
                    case 3:
                      v13 = "v5t";
                      goto LABEL_56;
                    case 4:
                      v13 = "v5te";
                      goto LABEL_56;
                    case 5:
                      v13 = "v5tej";
                      goto LABEL_56;
                    case 6:
                      v13 = "v6";
                      goto LABEL_56;
                    case 7:
                      v13 = "v6kz";
                      goto LABEL_56;
                    case 8:
                      v13 = "v6t2";
                      goto LABEL_56;
                    case 9:
                      v13 = "v6k";
                      goto LABEL_56;
                    case 0xA:
                      AttributeValue = llvm::ELFAttributeParser::getAttributeValue((llvm::ELFAttributeParser *)v31, 7u);
                      if ((_DWORD)AttributeValue != 77 || (AttributeValue & 0xFF00000000) == 0)
                        v13 = "v7";
                      else
                        v13 = "v7m";
                      goto LABEL_56;
                    case 0xB:
                      v13 = "v6m";
                      goto LABEL_56;
                    case 0xC:
                      v13 = "v6sm";
                      goto LABEL_56;
                    case 0xD:
                      v13 = "v7em";
                      goto LABEL_56;
                    case 0xE:
                      v13 = "v8a";
                      goto LABEL_56;
                    case 0xF:
                      v13 = "v8r";
                      goto LABEL_56;
                    case 0x10:
                      v13 = "v8m.base";
                      goto LABEL_56;
                    case 0x11:
                      v13 = "v8m.main";
                      goto LABEL_56;
                    case 0x15:
                      v13 = "v8.1m.main";
                      goto LABEL_56;
                    case 0x16:
                      v13 = "v9a";
LABEL_56:
                      std::string::append(&v29, v13);
                      break;
                    default:
                      goto LABEL_57;
                  }
                  break;
                }
              }
              else
              {
                if ((void *)v11 >= v32[1])
                  v11 %= (unint64_t)v32[1];
                if (v11 != v8)
                  break;
              }
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
        }
      }
LABEL_57:
      v16 = *((_DWORD *)this + 2);
      v17 = v16 > 0x14;
      v18 = (1 << v16) & 0x155800;
      if (!v17 && v18 != 0)
        std::string::append(&v29, "eb");
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v29;
      else
        v20 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        size = v29.__r_.__value_.__l.__size_;
      llvm::Triple::setArchName((uint64_t)a2, v20, size);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
    }
    v22 = v44;
    v31[0] = &unk_1E0E22AC8;
    v44 = 0;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
    v23 = __p[0];
    if (__p[0])
    {
      do
      {
        v24 = (_QWORD *)*v23;
        operator delete(v23);
        v23 = v24;
      }
      while (v24);
    }
    v25 = v35[0];
    v35[0] = 0;
    if (v25)
      operator delete(v25);
    v26 = v33[0];
    if (v33[0])
    {
      do
      {
        v27 = (_QWORD *)*v26;
        operator delete(v26);
        v26 = v27;
      }
      while (v27);
    }
    v28 = v32[0];
    v32[0] = 0;
    if (v28)
      operator delete(v28);
  }
}

_QWORD *llvm::object::ObjectFile::getStartAddress@<X0>(llvm::object::ObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  std::error_code v5;

  *(_QWORD *)&v5.__val_ = llvm::object::object_category(this);
  result = llvm::errorCodeToError((llvm *)3, v5, &v4);
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v4;
  return result;
}

uint64_t llvm::object::ObjectFile::mapDebugSectionName(uint64_t a1, uint64_t a2)
{
  return a2;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::create(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  llvm::object *v5;
  _UNKNOWN **v6;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  int *v11;
  uint64_t i;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  void *__p[2];
  uint64_t v18;
  void *__dst;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  _QWORD v23[4];
  __int16 v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  __int128 v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  if (v4 < 0x34)
  {
    v34 = a1[1];
    v35[0] = "invalid buffer: the size (";
    v35[2] = &v34;
    v36 = 2819;
    v37[0] = v35;
    v37[2] = ") is smaller than an ELF header (";
    v38 = 770;
    v33 = 52;
    v47 = v37;
    v49 = &v33;
    v50 = 2818;
    v23[0] = &v47;
    v23[2] = ")";
    v24 = 770;
    v5 = (llvm::object *)operator new(0x38uLL);
    v6 = llvm::object::object_category(v5);
    llvm::StringError::StringError((uint64_t)v5, (llvm::Twine *)v23, 3, (uint64_t)v6);
    v46 = -1;
    *(_QWORD *)&v39 = 0;
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v5;
LABEL_35:
    v15 = v39;
    *(_QWORD *)&v39 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return;
  }
  v8 = *a1;
  v46 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = &v46;
  v44 = 0;
  v45 = 0;
  *(_QWORD *)&v39 = v8;
  *((_QWORD *)&v39 + 1) = v4;
  v9 = *((_OWORD *)a1 + 1);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v9;
  v16 = v39;
  *(_OWORD *)__p = 0u;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v18 = 0;
  __dst = v22;
  v20 = 0;
  v21 = 0;
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::ELFObjectFile((uint64_t)v23, v22, (uint64_t)&v16, 0, 0, 0);
  if (__dst != v22)
    free(__dst);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(&v26, (uint64_t)&v47);
    v10 = v47;
    if ((v49 & 1) != 0)
    {
      if (v47)
      {
        *(_BYTE *)(a3 + 152) |= 1u;
        *(_QWORD *)a3 = v10;
        goto LABEL_26;
      }
    }
    else
    {
      if (v48)
      {
        v11 = (int *)v47 + 1;
        for (i = 40 * v48; i; i -= 40)
        {
          v13 = *v11;
          if (*v11 == 2)
          {
            v14 = &v31;
            if (v31)
              goto LABEL_12;
          }
          else if (v13 == 18)
          {
            v14 = &v32;
            if (v32)
              goto LABEL_12;
          }
          else
          {
            if (v13 != 11)
              goto LABEL_12;
            v14 = &v30;
            if (v30)
              goto LABEL_12;
          }
          *v14 = (uint64_t)(v11 - 1);
LABEL_12:
          v11 += 10;
        }
      }
      v25 = 1;
    }
  }
  *(_BYTE *)(a3 + 152) &= ~1u;
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::ELFObjectFile(a3, (uint64_t)v23);
LABEL_26:
  v23[0] = &unk_1E0E247C0;
  if (v29 != &v30)
    free(v29);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  llvm::object::SymbolicFile::~SymbolicFile((llvm::object::SymbolicFile *)v23);
  if ((v46 & 1) != 0)
    goto LABEL_35;
  if (v43 != &v46)
    free(v43);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::initContent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  int *v6;
  uint64_t i;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v10);
  v5 = v10;
  if ((v12 & 1) == 0)
  {
    if (v11)
    {
      v6 = (int *)(v10 + 4);
      for (i = 40 * v11; i; i -= 40)
      {
        v8 = *v6;
        if (*v6 == 2)
        {
          v9 = (_QWORD *)(a1 + 128);
          if (*(_QWORD *)(a1 + 128))
            goto LABEL_5;
        }
        else if (v8 == 18)
        {
          v9 = (_QWORD *)(a1 + 136);
          if (*(_QWORD *)(a1 + 136))
            goto LABEL_5;
        }
        else
        {
          if (v8 != 11)
            goto LABEL_5;
          v9 = (_QWORD *)(a1 + 120);
          if (*(_QWORD *)(a1 + 120))
            goto LABEL_5;
        }
        *v9 = v6 - 1;
LABEL_5:
        v6 += 10;
      }
    }
    v5 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::~ELFObjectFile(llvm::object::SymbolicFile *this)
{
  char *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E0E247C0;
  v2 = (char *)*((_QWORD *)this + 12);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
}

{
  char *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_1E0E247C0;
  v2 = (char *)*((_QWORD *)this + 12);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
  operator delete(v4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::ELFObjectFile(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  _OWORD v21[2];

  v11 = a2[1];
  v21[0] = *a2;
  v21[1] = v11;
  llvm::object::ObjectFile::ObjectFile(a1, 13, v21);
  *(_QWORD *)v12 = &unk_1E0E247C0;
  *(_BYTE *)(v12 + 48) = 0;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)a3;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  v14 = *(_BYTE **)(a3 + 16);
  v13 = *(_BYTE **)(a3 + 24);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 3) >= 0x666666666666667)
      abort();
    v16 = (char *)operator new(v15);
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *(_QWORD *)(a1 + 88) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 80) = v17;
  }
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a1 + 56 != a3)
  {
    v18 = *(_QWORD *)(a3 + 48);
    if (v18)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 96, (void *)(a1 + 120), *(_QWORD *)(a3 + 48), 1);
      v19 = *(_QWORD *)(a3 + 48);
      if (v19)
        memcpy(*(void **)(a1 + 96), *(const void **)(a3 + 40), v19);
      *(_QWORD *)(a1 + 104) = v18;
    }
  }
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolFlags(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  char v44;
  unsigned int *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1 + 7, a2, (uint64_t)&v42);
  if ((v43 & 1) != 0)
  {
    v46 = -1;
    v45 = v42;
    v8 = v42;
    goto LABEL_41;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v6, v42, HIDWORD(a2), (uint64_t)&v45);
  if ((v43 & 1) != 0)
  {
    v7 = v42;
    v42 = 0;
    if (v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = v45;
  if ((v46 & 1) != 0)
  {
LABEL_41:
    v45 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  v9 = *((unsigned __int8 *)v45 + 12);
  if ((v9 & 0xF0) == 0x20)
    v10 = 6;
  else
    v10 = 2;
  if (v9 < 0x10)
    v10 = 0;
  if (*((__int16 *)v45 + 7) == -15)
    v11 = v10 | 8;
  else
    v11 = v10;
  v12 = (unsigned int *)a1[16];
  if (!v12)
  {
    v44 &= ~1u;
    v42 = 0;
    v43 = 0;
    v13 = 0;
    if ((v44 & 1) == 0)
      goto LABEL_16;
LABEL_44:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v6, v12, (uint64_t)&v42);
  v13 = v42;
  if ((v44 & 1) != 0)
    goto LABEL_44;
LABEL_16:
  if ((v44 & 1) != 0)
  {
    v42 = 0;
    if (v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = (unsigned int *)a1[15];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v6, v14, (uint64_t)&v42);
    v15 = v42;
    if ((v44 & 1) == 0)
      goto LABEL_21;
LABEL_47:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v15;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  v44 &= ~1u;
  v42 = 0;
  v43 = 0;
  v15 = 0;
  if ((v44 & 1) != 0)
    goto LABEL_47;
LABEL_21:
  if ((v9 & 0xF) - 3 < 2 || v8 == v13 || v8 == v15)
    v18 = v11 | 0x80;
  else
    v18 = v11;
  if ((v44 & 1) != 0)
  {
    v42 = 0;
    if (v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  }
  v19 = *(unsigned __int16 *)(*v6 + 18);
  switch(v19)
  {
    case 183:
      (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      v20 = v42;
      if ((v44 & 1) == 0)
      {
        v21 = v18;
        if (v43 >= 2)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 25636)
          {
            if (*(_WORD *)v42 == 30756)
              v21 = v11 | 0x80;
            else
              v21 = v18;
          }
        }
        goto LABEL_95;
      }
      v42 = 0;
      v40 = v20;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v40, &v41);
      if (v40)
        (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
      if ((v44 & 1) != 0)
      {
        v22 = v42;
        v42 = 0;
        if (v22)
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
LABEL_82:
      v21 = v18;
      goto LABEL_95;
    case 40:
      (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      if ((v44 & 1) != 0)
      {
        v25 = v42;
        v42 = 0;
        v39 = v25;
        llvm::consumeError((_QWORD **)&v39);
        if (v39)
          (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
        v21 = v18;
        goto LABEL_90;
      }
      if (v43)
      {
        v21 = v18;
        if (v43 == 1)
          goto LABEL_90;
        if (*(_WORD *)v42 != 25636)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 29732)
          {
            if (*(_WORD *)v42 == 24868)
              v21 = v11 | 0x80;
            else
              v21 = v18;
          }
          goto LABEL_90;
        }
      }
      v21 = v11 | 0x80;
LABEL_90:
      if ((v44 & 1) != 0)
      {
        v29 = v42;
        v42 = 0;
        if (v29)
          (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
      }
      if ((v8[3] & 0xF) == 2)
        v21 = v21 & 0xFFFFFEFF | ((v8[1] & 1) << 8);
      goto LABEL_95;
    case 252:
      (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      if ((v44 & 1) == 0)
      {
        v21 = v18;
        if (v43 >= 2)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 25636)
          {
            v23 = *(unsigned __int16 *)v42;
            v24 = 29732;
            goto LABEL_77;
          }
        }
        goto LABEL_86;
      }
      v26 = v42;
      v42 = 0;
      v38 = v26;
      llvm::consumeError((_QWORD **)&v38);
      v27 = v38;
      if (!v38)
        goto LABEL_85;
LABEL_84:
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
LABEL_85:
      v21 = v18;
      goto LABEL_86;
  }
  if (v19 != 243)
    goto LABEL_82;
  (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
  if ((v44 & 1) != 0)
  {
    v36 = v42;
    v42 = 0;
    v37 = v36;
    llvm::consumeError((_QWORD **)&v37);
    v27 = v37;
    if (!v37)
      goto LABEL_85;
    goto LABEL_84;
  }
  if (!v43)
  {
    v21 = v11 | 0x80;
    if ((v44 & 1) == 0)
      goto LABEL_95;
    goto LABEL_87;
  }
  v21 = v18;
  if (v43 != 1)
  {
    v21 = v11 | 0x80;
    if (*(_WORD *)v42 != 25636)
    {
      v23 = *(unsigned __int16 *)v42;
      v24 = 30756;
LABEL_77:
      if (v23 == v24)
        v21 = v11 | 0x80;
      else
        v21 = v18;
      if ((v44 & 1) == 0)
        goto LABEL_95;
      goto LABEL_87;
    }
  }
LABEL_86:
  if ((v44 & 1) == 0)
    goto LABEL_95;
LABEL_87:
  v28 = v42;
  v42 = 0;
  if (v28)
    (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
LABEL_95:
  if (!*((_WORD *)v8 + 7))
  {
    v21 |= 1u;
    v30 = *((unsigned __int8 *)v8 + 12);
    v31 = v30 & 0xF;
    if (v31 != 5)
      goto LABEL_101;
LABEL_100:
    v21 |= 0x10u;
    goto LABEL_101;
  }
  v30 = *((unsigned __int8 *)v8 + 12);
  v31 = v30 & 0xF;
  if (v31 == 5 || *((unsigned __int16 *)v8 + 7) == 65522)
    goto LABEL_100;
LABEL_101:
  v32 = v30 >> 4;
  if (v32 <= 0xA && ((1 << v32) & 0x406) != 0)
  {
    v33 = *((_BYTE *)v8 + 13) & 3;
    if (v33 == 3 || (*((_BYTE *)v8 + 13) & 3) == 0)
      v21 |= 0x40u;
  }
  else
  {
    v33 = *((_BYTE *)v8 + 13) & 3;
  }
  if (v31 == 10)
    v34 = v21 | 0x20;
  else
    v34 = v21;
  if (v33 == 2)
    v34 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v34;
  if ((v46 & 1) != 0)
  {
LABEL_113:
    v35 = v45;
    v45 = 0;
    if (v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 128);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 20);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
  v3 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = (unint64_t)(v2 > 0xF) << 32;
    v5 = ((v1 - v7) / 0x28uLL);
  }
  return v4 | v5;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::symbol_end(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1[16];
  if (!v1)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v2 = *(unsigned int *)(v1 + 20);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(a1 + 7, (uint64_t)&v7);
  v3 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = (v2 << 28) & 0xFFFFFFF00000000;
    v5 = ((v1 - v7) / 0x28uLL);
  }
  return v4 | v5;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolName(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  llvm::object *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::object *v10;
  llvm::object *v11;
  int v12;
  llvm::object *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::object *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;
  llvm::object *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  llvm::object *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1 + 7, a2, (uint64_t)&v25);
  if ((v26 & 1) != 0)
  {
    v33 = -1;
    v32 = v25;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v6, (unsigned int *)v25, HIDWORD(a2), (uint64_t)&v32);
    if ((v26 & 1) != 0)
    {
      v7 = v25;
      v25 = 0;
      if (v7)
        (*(void (**)(llvm::object *))(*(_QWORD *)v7 + 8))(v7);
    }
    if ((v33 & 1) == 0)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(v6, a2, (uint64_t)&v30);
      v8 = v30;
      if ((v31 & 1) != 0)
      {
        v30 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v8;
LABEL_31:
        v15 = v30;
        v30 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_33:
        if ((v33 & 1) == 0)
          return;
        goto LABEL_34;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(v6, *(_DWORD *)(v30 + 24), (uint64_t)&v28);
      v9 = v28;
      if ((v29 & 1) != 0)
      {
        v28 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v9;
LABEL_28:
        v14 = v28;
        v28 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_30:
        if ((v31 & 1) == 0)
          goto LABEL_33;
        goto LABEL_31;
      }
      *(_QWORD *)&v23 = llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v23, (uint64_t)&v25);
      if ((v27 & 1) != 0)
      {
        v11 = v25;
        v25 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v11;
LABEL_25:
        v13 = v25;
        v25 = 0;
        if (v13)
          (*(void (**)(llvm::object *))(*(_QWORD *)v13 + 8))(v13);
LABEL_27:
        if ((v29 & 1) == 0)
          goto LABEL_30;
        goto LABEL_28;
      }
      llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>::getName(v32, (uint64_t)v25, v26, (uint64_t)&v23);
      if ((v24 & 1) == 0 && *((_QWORD *)&v23 + 1))
      {
        *(_BYTE *)(a3 + 16) &= ~1u;
LABEL_23:
        *(_OWORD *)a3 = v23;
        goto LABEL_24;
      }
      if ((*((_BYTE *)v32 + 12) & 0xF) != 3)
      {
        v12 = v24 & 1;
        *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v12;
        if (v12)
        {
          *(_QWORD *)a3 = v23;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 128))(&v20, a1, a2);
      if ((v22 & 1) != 0)
      {
        v17 = v20;
        v20 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v17;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 144))(v21, v20);
        if ((v22 & 1) == 0)
        {
LABEL_40:
          if ((v24 & 1) != 0)
          {
            v19 = v23;
            *(_QWORD *)&v23 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
LABEL_24:
          if ((v27 & 1) == 0)
            goto LABEL_27;
          goto LABEL_25;
        }
      }
      v18 = v20;
      v20 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      goto LABEL_40;
    }
  }
  v10 = v32;
  v32 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v10;
LABEL_34:
  v16 = v32;
  v32 = 0;
  if (v16)
    (*(void (**)(llvm::object *))(*(_QWORD *)v16 + 8))(v16);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  int v9;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  char v24;
  unsigned int *v25;
  char v26;
  unsigned int *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v29);
  if ((v30 & 1) == 0)
  {
    v6 = v29;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v22);
    if ((v23 & 1) != 0)
    {
      v28 = -1;
      v27 = v22;
      v8 = v22;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>((_QWORD *)(a1 + 56), v22, HIDWORD(a2), (uint64_t)&v27);
      if ((v23 & 1) != 0)
      {
        v7 = v22;
        v22 = 0;
        if (v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
      v8 = v27;
      if ((v28 & 1) == 0)
      {
        v9 = *((unsigned __int16 *)v27 + 7);
        if ((v9 - 65521) < 2 || v9 == 0)
        {
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v6;
          goto LABEL_18;
        }
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v25);
        if ((v26 & 1) != 0)
        {
          v17 = v25;
          v25 = 0;
          goto LABEL_28;
        }
        if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) != 1)
          goto LABEL_34;
        v14 = *(unsigned int **)(a1 + 136);
        if (v14)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSHNDXTable((_QWORD *)(a1 + 56), v14, (uint64_t)&v22);
          if ((v24 & 1) != 0)
          {
            v17 = v22;
            goto LABEL_28;
          }
          v16 = v22;
          v15 = v23;
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
        *(_QWORD *)&v19 = v16;
        *((_QWORD *)&v19 + 1) = v15;
        v20 = 1;
        v21 = 0;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), (uint64_t)v27, v25, &v19, (uint64_t)&v22);
        v17 = v22;
        if ((v23 & 1) == 0)
        {
          if (v22)
            v6 += v22[3];
LABEL_34:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v6;
          if ((v26 & 1) == 0)
            goto LABEL_37;
LABEL_35:
          v18 = v25;
          v25 = 0;
          if (v18)
            (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
LABEL_37:
          if ((v28 & 1) == 0)
            goto LABEL_18;
          goto LABEL_16;
        }
LABEL_28:
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v17;
        if ((v26 & 1) == 0)
          goto LABEL_37;
        goto LABEL_35;
      }
    }
    v27 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
LABEL_16:
    v12 = v27;
    v27 = 0;
    if (v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
LABEL_18:
    if ((v30 & 1) == 0)
      return;
    goto LABEL_19;
  }
  v11 = v29;
  v29 = 0;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v11;
LABEL_19:
  v13 = v29;
  v29 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  uint64_t result;
  int v6;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;

  v2 = HIDWORD(a2);
  v13 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v10 = -1;
    v9 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v3, v11, v2, (uint64_t)&v9);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v10 & 1) != 0)
  {
    v8 = v9;
    v9 = 0;
    llvm::report_fatal_error((uint64_t *)&v8, 1);
  }
  result = v9[1];
  if (*((__int16 *)v9 + 7) != -15)
  {
    v6 = *(unsigned __int16 *)(*v3 + 18);
    if ((v6 == 40 || v6 == 8) && (v9[3] & 0xF) == 2)
      return result & 0xFFFFFFFE;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  if (*((__int16 *)v7 + 7) == -14)
    return v7[1];
  else
    return 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char v9;
  unsigned int *v10;
  char v11;
  uint64_t v12;

  v3 = HIDWORD(a2);
  v12 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v9 = -1;
    v8 = v10;
    v7 = v10;
LABEL_9:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v5, v10, v3, (uint64_t)&v8);
  if ((v11 & 1) != 0)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = v8;
  if ((v9 & 1) != 0)
    goto LABEL_9;
  switch(v8[3] & 0xF)
  {
    case 0u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      break;
    case 1u:
    case 5u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 2;
      break;
    case 2u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 5;
      break;
    case 3u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 3;
      break;
    case 4u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 4;
      break;
    default:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 1;
      break;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  char v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1 + 7, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v13 = -1;
    v12 = v14;
LABEL_15:
    v10 = v12;
    v12 = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
    v12 = 0;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v6, v14, HIDWORD(a2), (uint64_t)&v12);
  if ((v15 & 1) != 0)
  {
    v7 = v14;
    v14 = 0;
    if (v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((v13 & 1) != 0)
    goto LABEL_15;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(v6, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v11 = v14;
    v14 = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    v14 = 0;
  }
  else
  {
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolSection(a1, (uint64_t)v12, v14, a3);
    if ((v15 & 1) != 0)
    {
      v8 = v14;
      v14 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  if ((v13 & 1) != 0)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 40;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v3)@<X0>(llvm::object *@<X0>, llvm::object **@<X8>);

  v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v8);
  if ((v9 & 1) != 0)
  {
    v3 = v8;
    v8 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6, &v7);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v8;
  if ((v9 & 1) != 0)
  {
    v8 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v4) >> 3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 20);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContents(__n128 *this@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  llvm::object *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  std::error_code v16;

  if (a2[1] == 8)
  {
    v5 = this[1].n128_u64[0];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  llvm::object::Binary::getMemoryBufferRef(this, &v14);
  v8 = this[1].n128_u64[0];
  v10 = a2[4];
  v9 = a2[5];
  v11 = v10 + v8 + v9;
  if (__CFADD__(v10 + v8, v9)
    || v11 < v9
    || (v10 + v8 >= v14.n128_u64[0] ? (v12 = v11 > v14.n128_u64[0] + v14.n128_u64[1]) : (v12 = 1), v12))
  {
    *(_QWORD *)&v16.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v16, &v15);
    v13 = v15;
    if (v15)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v13;
      return;
    }
    v8 = this[1].n128_u64[0];
    v10 = a2[4];
    v9 = a2[5];
  }
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v8 + v10;
  *(_QWORD *)(a3 + 8) = v9;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 32);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 9) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 8) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isSectionData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 1)
    return 0;
  if ((*(_DWORD *)(a2 + 8) & 2) != 0)
    return (*(_DWORD *)(a2 + 8) & 4) == 0;
  return 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 8) & 3) != 0 && *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = (v2 & 4) != 0 || (*(_DWORD *)(a2 + 8) & 1) == 0;
  return (v2 & 2) != 0 && v3;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) != 0)
    return 0;
  if (*(_DWORD *)(a2 + 4) == 8)
    return 0;
  return (*(unsigned __int8 *)(a2 + 8) >> 1) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isDebugSection(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v8);
  v1 = (_QWORD *)v8;
  if ((v10 & 1) != 0)
  {
    v8 = 0;
    v6 = v1;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6, &v7);
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    if ((v10 & 1) != 0)
    {
      result = v8;
      v8 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v9 < 6)
    return 0;
  if (*(_DWORD *)v8 == 1650811950 && *(_WORD *)(v8 + 4) == 26485)
    return 1;
  if (v9 < 7)
    return 0;
  if (*(_DWORD *)v8 == 1701083694 && *(_DWORD *)(v8 + 3) == 1735746149)
    return 1;
  if (v9 != 10)
    return 0;
  return *(_QWORD *)v8 == 0x646E695F6264672ELL && *(_WORD *)(v8 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5) / (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 46));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::section_rel_end(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const std::error_category *v11;
  uint64_t v12;
  uint64_t v13;
  std::error_code v14;
  std::string v15;
  std::string *v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v5 = a2[1];
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1 + 7, v4, (uint64_t)&v18);
    if ((v19 & 1) != 0)
    {
      v8 = v18;
      v18 = 0;
      v13 = v8;
      v9 = &v13;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1 + 7, *(_DWORD *)(v18 + 24), (uint64_t)&v18);
      if ((v19 & 1) == 0)
        return v4 | ((unint64_t)(a2[5] / a2[9] + HIDWORD(v4)) << 32);
      v10 = v18;
      v18 = 0;
      v12 = v10;
      v9 = &v12;
    }
    *(_QWORD *)&v14.__val_ = llvm::errorToErrorCode((_QWORD **)v9);
    v14.__cat_ = v11;
    std::error_code::message(&v15, &v14);
    v17 = 260;
    v16 = &v15;
    llvm::report_fatal_error((llvm::Twine *)&v16, 1);
  }
  return v4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRelocatedSection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1 + 7, *(_DWORD *)(a2 + 28), (uint64_t)&v10);
    v7 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v7;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v9;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  unsigned int *Rel;
  _QWORD *v6;
  const std::error_category *v7;
  _QWORD *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v6 = (_QWORD *)v13;
    v13 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode(&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v12 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  if (*(_DWORD *)(v13 + 4) == 9)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRela(a1, a2);
  return *Rel;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v7;
  const std::error_category *v8;
  _QWORD *v9;
  std::error_code v10;
  std::string v11;
  std::string *v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1 + 7, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v7 = (_QWORD *)v14;
    v14 = 0;
    v9 = v7;
    *(_QWORD *)&v10.__val_ = llvm::errorToErrorCode(&v9);
    v10.__cat_ = v8;
    std::error_code::message(&v11, &v10);
    v13 = 260;
    v12 = &v11;
    llvm::report_fatal_error((llvm::Twine *)&v12, 1);
  }
  v4 = v14;
  if (*(_DWORD *)(v14 + 4) == 9)
  {
    v5 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRel((uint64_t)a1, a2)[1];
    if (v5 > 0xFF)
      return *(unsigned int *)(v4 + 24) | ((unint64_t)(v5 >> 8) << 32);
  }
  else
  {
    v5 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRela((uint64_t)a1, a2)[1];
    if (v5 > 0xFF)
      return *(unsigned int *)(v4 + 24) | ((unint64_t)(v5 >> 8) << 32);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  unsigned int *Rel;
  _QWORD *v6;
  const std::error_category *v7;
  _QWORD *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v6 = (_QWORD *)v13;
    v13 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode(&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v12 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  if (*(_DWORD *)(v13 + 4) == 9)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRela(a1, a2);
  return *((unsigned __int8 *)Rel + 4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRelocationTypeName(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  unsigned int v5;

  v4 = a1 + 7;
  v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 320))(a1);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRelocationTypeName(v4, v5, a3);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v46);
  v2 = 0;
  if ((v48 & 1) == 0)
  {
    if (v47)
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
      v5 = v46;
      v44 = v46 + 40 * v47;
      do
      {
        if (*(_DWORD *)(v5 + 4) == 6)
        {
          v6 = (int *)(*(unsigned int *)(v5 + 16) + *(_QWORD *)(a1 + 16));
          v7 = *v6;
          if (*v6)
          {
            v8 = (char *)v3;
            while (1)
            {
              if (v7 != 17 && v7 != 7 && v7 != 23)
                goto LABEL_11;
              v11 = v6[1];
              if (v8 < v4)
              {
                *(_QWORD *)v8 = v11;
                v8 += 8;
LABEL_11:
                v3 = (uint64_t)v8;
                v10 = v6[2];
                v6 += 2;
                v7 = v10;
                if (!v10)
                  break;
              }
              else
              {
                v12 = (v8 - v2) >> 3;
                v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61)
LABEL_75:
                  abort();
                if ((v4 - v2) >> 2 > v13)
                  v13 = (v4 - v2) >> 2;
                if ((unint64_t)(v4 - v2) >= 0x7FFFFFFFFFFFFFF8)
                  v14 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v14 = v13;
                if (v14)
                {
                  if (v14 >> 61)
LABEL_76:
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v15 = operator new(8 * v14);
                  v16 = &v15[8 * v12];
                  *(_QWORD *)v16 = v11;
                  v3 = (uint64_t)(v16 + 8);
                  if (v8 == v2)
                    goto LABEL_39;
                }
                else
                {
                  v15 = 0;
                  v16 = (char *)(8 * v12);
                  *(_QWORD *)(8 * v12) = v11;
                  v3 = 8 * v12 + 8;
                  if (v8 == v2)
                    goto LABEL_39;
                }
                v17 = v8 - 8 - v2;
                if (v17 >= 0x168)
                {
                  if (&v15[v8 - v2 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v8 - v2 - 8])
                  {
                    v18 = v8;
                  }
                  else if (&v8[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
                  {
                    v18 = v8;
                  }
                  else if ((unint64_t)(v2 - v15) >= 0x20)
                  {
                    v19 = (v17 >> 3) + 1;
                    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
                    v18 = &v8[-v20];
                    v16 -= v20;
                    v21 = &v15[8 * v12 - 16];
                    v22 = v8 - 16;
                    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v24 = *(_OWORD *)v22;
                      *(v21 - 1) = *((_OWORD *)v22 - 1);
                      *v21 = v24;
                      v21 -= 2;
                      v22 -= 32;
                      v23 -= 4;
                    }
                    while (v23);
                    if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_39;
                  }
                  else
                  {
                    v18 = v8;
                  }
                }
                else
                {
                  v18 = v8;
                }
                do
                {
                  v25 = *((_QWORD *)v18 - 1);
                  v18 -= 8;
                  *((_QWORD *)v16 - 1) = v25;
                  v16 -= 8;
                }
                while (v18 != v2);
LABEL_39:
                v4 = &v15[8 * v14];
                if (v2)
                  operator delete(v2);
                v2 = v16;
                v9 = v6[2];
                v6 += 2;
                v7 = v9;
                v8 = (char *)v3;
                if (!v9)
                  break;
              }
            }
          }
        }
        v5 += 40;
      }
      while (v5 != v44);
      if (v47)
      {
        v26 = v46;
        v27 = v46 + 40 * v47;
        v28 = *a2;
        while (1)
        {
          v30 = (_QWORD *)v3;
          if (v2 != (char *)v3)
          {
            v30 = v2;
            while (*v30 != *(_DWORD *)(v26 + 12))
            {
              if (++v30 == (_QWORD *)v3)
              {
                v30 = (_QWORD *)v3;
                break;
              }
            }
          }
          if (v30 == (_QWORD *)v3)
            goto LABEL_45;
          v32 = a2[1];
          v31 = (unint64_t)a2[2];
          if ((unint64_t)v32 >= v31)
            break;
          *(_QWORD *)v32 = v26;
          *((_QWORD *)v32 + 1) = a1;
          v29 = v32 + 16;
LABEL_44:
          a2[1] = v29;
LABEL_45:
          v26 += 40;
          if (v26 == v27)
            goto LABEL_69;
        }
        v33 = (v32 - v28) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          goto LABEL_75;
        v35 = v31 - (_QWORD)v28;
        if (v35 >> 3 > v34)
          v34 = v35 >> 3;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36 >> 60)
          goto LABEL_76;
        v37 = 16 * v36;
        v38 = (char *)operator new(16 * v36);
        v39 = &v38[16 * v33];
        *(_QWORD *)v39 = v26;
        *((_QWORD *)v39 + 1) = a1;
        if (v32 == v28)
        {
          v41 = &v38[16 * v33];
          v29 = v39 + 16;
          *a2 = v41;
          a2[1] = v39 + 16;
          a2[2] = &v38[v37];
          if (!v28)
            goto LABEL_65;
        }
        else
        {
          v40 = &v38[16 * v33];
          do
          {
            v41 = v40 - 16;
            *((_OWORD *)v40 - 1) = *((_OWORD *)v32 - 1);
            v32 -= 16;
            v40 -= 16;
          }
          while (v32 != v28);
          v29 = v39 + 16;
          *a2 = v41;
          a2[1] = v39 + 16;
          a2[2] = &v38[v37];
          if (!v28)
            goto LABEL_65;
        }
        operator delete(v28);
LABEL_65:
        v28 = v41;
        goto LABEL_44;
      }
    }
    else
    {
      v2 = 0;
    }
  }
LABEL_69:
  if ((v48 & 1) != 0)
  {
    v42 = v46;
    v46 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  if (v2)
    operator delete(v2);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::section_begin(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::section_end(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + 40 * v2[1];
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getBytesInAddress()
{
  return 4;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  const char *result;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    result = "elf64-i386";
    switch(*(_WORD *)(v1 + 18))
    {
      case 3:
        return result;
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
LABEL_13:
        result = "elf64-unknown";
        break;
      case 8:
        result = "elf64-mips";
        break;
      case 0x15:
        result = "elf64-powerpcle";
        break;
      case 0x16:
        result = "elf64-s390";
        break;
      case 0x2B:
        result = "elf64-sparc";
        break;
      case 0x3E:
        result = "elf64-x86-64";
        break;
      default:
        switch(*(_WORD *)(v1 + 18))
        {
          case 0xE0:
            result = "elf64-amdgpu";
            break;
          case 0xE1:
          case 0xE2:
          case 0xE3:
          case 0xE4:
          case 0xE5:
          case 0xE6:
          case 0xE7:
          case 0xE8:
          case 0xE9:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0xF1:
          case 0xF2:
          case 0xF4:
          case 0xF5:
          case 0xF6:
          case 0xF8:
          case 0xF9:
          case 0xFA:
          case 0xFC:
          case 0xFD:
          case 0xFE:
          case 0xFF:
          case 0x100:
          case 0x101:
            goto LABEL_13;
          case 0xF3:
            result = "elf64-littleriscv";
            break;
          case 0xF7:
            result = "elf64-bpf";
            break;
          case 0xFB:
            result = "elf64-ve";
            break;
          case 0x102:
            result = "elf64-loongarch";
            break;
          default:
            if (*(_WORD *)(v1 + 18) != 183)
              goto LABEL_13;
            result = "elf64-littleaarch64";
            break;
        }
        break;
    }
  }
  else
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
    result = "elf32-m68k";
    switch(*(_WORD *)(v1 + 18))
    {
      case 2:
      case 0x12:
        result = "elf32-sparc";
        break;
      case 3:
        result = "elf32-i386";
        break;
      case 4:
        return result;
      case 5:
      case 7:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x13:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
LABEL_24:
        result = "elf32-unknown";
        break;
      case 6:
        result = "elf32-iamcu";
        break;
      case 8:
        result = "elf32-mips";
        break;
      case 0x14:
        result = "elf32-powerpcle";
        break;
      case 0x28:
        result = "elf32-littlearm";
        break;
      case 0x3E:
        result = "elf32-x86-64";
        break;
      case 0x53:
        result = "elf32-avr";
        break;
      case 0x5E:
        result = "elf32-xtensa";
        break;
      case 0x69:
        result = "elf32-msp430";
        break;
      default:
        switch(*(_WORD *)(v1 + 18))
        {
          case 0xE0:
            result = "elf32-amdgpu";
            break;
          case 0xE1:
          case 0xE2:
          case 0xE3:
          case 0xE4:
          case 0xE5:
          case 0xE6:
          case 0xE7:
          case 0xE8:
          case 0xE9:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0xF1:
          case 0xF2:
          case 0xF5:
          case 0xF6:
          case 0xF7:
          case 0xF8:
          case 0xF9:
          case 0xFA:
          case 0xFB:
          case 0xFD:
          case 0xFE:
          case 0xFF:
          case 0x100:
          case 0x101:
            goto LABEL_24;
          case 0xF3:
            result = "elf32-littleriscv";
            break;
          case 0xF4:
            result = "elf32-lanai";
            break;
          case 0xFC:
            result = "elf32-csky";
            break;
          case 0x102:
            result = "elf32-loongarch";
            break;
          default:
            if (*(_WORD *)(v1 + 18) != 164)
              goto LABEL_24;
            result = "elf32-hexagon";
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getArch(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;

  v1 = *(_QWORD *)(a1 + 56);
  result = 15;
  switch(*(_WORD *)(v1 + 18))
  {
    case 2:
    case 0x12:
      return 31;
    case 3:
    case 6:
      return 37;
    case 4:
      return result;
    case 5:
    case 7:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x13:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x29:
    case 0x2A:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      return 0;
    case 8:
      v3 = *(unsigned __int8 *)(v1 + 4);
      if (v3 != 1)
      {
        if (v3 == 2)
          return 19;
LABEL_41:
        llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
      }
      result = 17;
      break;
    case 0x14:
      return 22;
    case 0x15:
      return 24;
    case 0x16:
      return 32;
    case 0x28:
      return 1;
    case 0x2B:
      return 30;
    case 0x3E:
      return 38;
    case 0x53:
      return 7;
    case 0x5E:
      return 40;
    case 0x69:
      return 20;
    default:
      switch(*(_WORD *)(v1 + 18))
      {
        case 0xB7:
          return 3;
        case 0xB8:
        case 0xB9:
        case 0xBA:
        case 0xBB:
        case 0xBC:
        case 0xBD:
        case 0xBE:
        case 0xBF:
        case 0xC0:
        case 0xC1:
        case 0xC2:
        case 0xC3:
        case 0xC4:
        case 0xC5:
        case 0xC6:
        case 0xC7:
        case 0xC8:
        case 0xC9:
        case 0xCA:
        case 0xCB:
        case 0xCC:
        case 0xCD:
        case 0xCE:
        case 0xCF:
        case 0xD0:
        case 0xD1:
        case 0xD2:
        case 0xD3:
        case 0xD4:
        case 0xD5:
        case 0xD6:
        case 0xD7:
        case 0xD8:
        case 0xD9:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xDD:
        case 0xDE:
        case 0xDF:
        case 0xE1:
        case 0xE2:
        case 0xE3:
        case 0xE4:
        case 0xE5:
        case 0xE6:
        case 0xE7:
        case 0xE8:
        case 0xE9:
        case 0xEA:
        case 0xEB:
        case 0xEC:
        case 0xED:
        case 0xEE:
        case 0xEF:
        case 0xF0:
        case 0xF1:
        case 0xF2:
        case 0xF5:
        case 0xF6:
        case 0xF8:
        case 0xF9:
        case 0xFA:
        case 0xFD:
        case 0xFE:
        case 0xFF:
        case 0x100:
        case 0x101:
          return 0;
        case 0xE0:
          v4 = *(unsigned __int8 *)(v1 + 36);
          v5 = v4 - 1;
          if ((v4 - 32) >= 0x2F)
            v6 = 0;
          else
            v6 = 26;
          if (v5 >= 0x10)
            return v6;
          else
            return 25;
        case 0xF3:
          v7 = *(unsigned __int8 *)(v1 + 4);
          if (v7 == 1)
            return 27;
          if (v7 != 2)
            goto LABEL_41;
          return 28;
        case 0xF4:
          return 60;
        case 0xF7:
          return 8;
        case 0xFB:
          return 65;
        case 0xFC:
          return 10;
        case 0x102:
          v8 = *(unsigned __int8 *)(v1 + 4);
          if (v8 == 1)
          {
            result = 13;
          }
          else
          {
            if (v8 != 2)
              goto LABEL_41;
            result = 14;
          }
          break;
        default:
          if (*(_WORD *)(v1 + 18) != 164)
            return 0;
          return 12;
      }
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = *(unsigned int *)(v2 + 24);
  return result;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return v7[2];
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((unsigned __int8 *)v7 + 12) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((unsigned __int8 *)v7 + 13);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return v7[3] & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRelocationAddend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  _UNKNOWN **v9;
  _QWORD *v10;
  const std::error_category *v11;
  _QWORD *v12;
  std::error_code v13;
  std::string v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v10 = (_QWORD *)v17;
    v17 = 0;
    v12 = v10;
    *(_QWORD *)&v13.__val_ = llvm::errorToErrorCode(&v12);
    v13.__cat_ = v11;
    std::error_code::message(&v14, &v13);
    v16 = 260;
    v15[0] = &v14;
    llvm::report_fatal_error((llvm::Twine *)v15, 1);
  }
  if (*(_DWORD *)(v17 + 4) == 4)
  {
    result = (uint64_t)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRela(a1, a2);
    v7 = *(int *)(result + 8);
    v8 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v15[0] = "Section is not SHT_RELA";
    v16 = 259;
    v7 = (uint64_t)operator new(0x38uLL);
    v9 = llvm::object::object_category((llvm::object *)v7);
    result = llvm::StringError::StringError(v7, (llvm::Twine *)v15, 3, (uint64_t)v9);
    v8 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v8;
  *(_QWORD *)a3 = v7;
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getBuildAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::size_type *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  _BYTE *v10;
  std::string::size_type v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  std::string::size_type v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = 40 * v18;
  while (*v6 != 1879048195)
  {
    v6 += 10;
    v7 -= 40;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (std::string::size_type)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 1, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = a1;
  v16 = *MEMORY[0x1E0C80C00];
  v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::dynamic_symbol_begin(a1);
  v6 = v5;
  v7 = *(_QWORD *)(v2 + 120);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 20);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections((_QWORD *)(v2 + 56), (uint64_t)&v14);
    v9 = v14;
    if ((v15 & 1) != 0)
    {
      v14 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v11 = 0;
      v10 = 0;
    }
    else
    {
      v10 = (v8 << 28) & 0xFFFFFFF00000000;
      v11 = ((v7 - v14) / 0x28uLL);
    }
    result = v10 | v11;
  }
  else
  {
    result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::dynamic_symbol_begin(v2);
    v2 = v13;
  }
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getPlatformFlags(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 56) + 36);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEType(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEMachine(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18);
}

uint64_t llvm::object::defaultWarningHandler@<X0>(llvm::object *this@<X0>, llvm::object **a2@<X8>)
{
  llvm::object *v5;
  _UNKNOWN **v6;
  uint64_t result;

  v5 = (llvm::object *)operator new(0x38uLL);
  v6 = llvm::object::object_category(v5);
  result = llvm::StringError::StringError((uint64_t)v5, this, 3, (uint64_t)v6);
  *a2 = v5;
  return result;
}

void llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>::getName(llvm::object *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  _UNKNOWN **v9;
  void **v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  unint64_t v25;
  __int16 v26;

  v5 = *(unsigned int *)a1;
  if (a3 <= v5)
  {
    v9 = llvm::object::object_category(a1);
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v12 = &unk_1E0E22B10;
    v20 = __p;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v12, 0, 0, 0);
    v23[0] = &unk_1E0E20340;
    v23[1] = "st_name (0x%x) is past the end of the string table of size 0x%zx";
    v24 = v5;
    v25 = a3;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v23);
    v10 = v20;
    v11 = operator new(0x38uLL);
    v26 = 260;
    v23[0] = v10;
    llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v23, 3, (uint64_t)v9);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v11;
  }
  else
  {
    v6 = a2 + v5;
    if (a2)
      v7 = strlen((const char *)(a2 + v5));
    else
      v7 = 0;
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v6;
    *(_QWORD *)(a4 + 8) = v7;
  }
}

uint64_t llvm::format_object<unsigned int,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned int *)a1[17];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(a1 + 7, (uint64_t)&v22);
    if ((v24 & 1) != 0)
    {
      v21 = -1;
      v20[0] = v22;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSHNDXTable(a1 + 7, v8, v22, v23, (uint64_t)v20);
      if ((v24 & 1) != 0)
      {
        v9 = v22;
        v22 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      if ((v21 & 1) == 0)
      {
        v11 = v20[0];
        v10 = v20[1];
        goto LABEL_9;
      }
    }
    v14 = v20[0];
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v14;
    return;
  }
  v10 = 0;
  v11 = 0;
LABEL_9:
  *(_QWORD *)&v17 = v11;
  *((_QWORD *)&v17 + 1) = v10;
  v18 = 1;
  v19 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection(a1 + 7, a2, a3, &v17, (uint64_t)&v22);
  v12 = v22;
  if ((v23 & 1) != 0)
  {
    v22 = 0;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v12;
LABEL_13:
    v13 = v22;
    v22 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return;
  }
  if (v22)
  {
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = a1;
    return;
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
  *(_BYTE *)(a4 + 16) &= ~1u;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v16;
  if ((v23 & 1) != 0)
    goto LABEL_13;
}

_QWORD **llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(_QWORD **result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  if (*result)
  {
    *result = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *a2 = 0;
      v4 = (uint64_t **)v3[1];
      v5 = (uint64_t **)v3[2];
      if (v4 != v5)
      {
        v6 = 0;
        do
        {
          v9 = v6;
          v7 = *v4;
          *v4 = 0;
          (*(void (**)(uint64_t *, void *))(*v7 + 48))(v7, &llvm::ErrorInfoBase::ID);
          v8 = v7;
          llvm::ErrorList::join(&v9, &v8, &v10);
          v6 = v10;
          *a2 = v10;
          v10 = 0;
          if (v8)
            (*(void (**)(uint64_t *))(*v8 + 8))(v8);
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          ++v4;
        }
        while (v4 != v5);
      }
      return (_QWORD **)(*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
    }
    else
    {
      result = (_QWORD **)(*(uint64_t (**)(_QWORD *, void *))(*v3 + 48))(v3, &llvm::ErrorInfoBase::ID);
      *a2 = (uint64_t)v3;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRel(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  const std::error_category *v7;
  unsigned int *v8;
  std::error_code v9;
  std::string v10;
  unsigned int *v11;
  char v12;
  __int16 v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;

  v2 = HIDWORD(a2);
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v15 = -1;
    v14 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,false>,false>>(v3, v11, v2, (uint64_t)&v14);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v15 & 1) != 0)
  {
    v6 = v14;
    v14 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode((_QWORD **)&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v13 = 260;
    v11 = (unsigned int *)&v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  return v14;
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getRela(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  const std::error_category *v7;
  unsigned int *v8;
  std::error_code v9;
  std::string v10;
  unsigned int *v11;
  char v12;
  __int16 v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;

  v2 = HIDWORD(a2);
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v15 = -1;
    v14 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,false>,true>>(v3, v11, v2, (uint64_t)&v14);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v15 & 1) != 0)
  {
    v6 = v14;
    v14 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode((_QWORD **)&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v13 = 260;
    v11 = (unsigned int *)&v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  return v14;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,false>,false>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,false>,false>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 8 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 8 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = a2[5];
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,false>,true>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,false>,true>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 12 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 12 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = a2[5];
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 120);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(a1 + 56);
  if (*(_DWORD *)(v1 + 20) <= 0xFu)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(v2, (uint64_t)v8);
    v3 = v8[0];
    if ((v9 & 1) == 0)
      return ((v1 - v8[0]) / 0x28uLL);
    v8[0] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,false>>::sections(v2, (uint64_t)v8);
  v5 = v8[0];
  if ((v9 & 1) != 0)
  {
    v8[0] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = ((v1 - v8[0]) / 0x28uLL);
    v7 = 0x100000000;
  }
  return v7 | v6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  __int128 v13;
  void *__p;
  void *v15;
  char *v16;
  void *__dst;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];

  v4 = *(_OWORD *)(a2 + 32);
  v20[0] = *(_OWORD *)(a2 + 16);
  v20[1] = v4;
  v13 = *(_OWORD *)(a2 + 56);
  v15 = 0;
  v16 = 0;
  __p = 0;
  v6 = *(_BYTE **)(a2 + 72);
  v5 = *(_BYTE **)(a2 + 80);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v7 >> 3) >= 0x666666666666667)
      abort();
    v8 = (char *)operator new(v7);
    v9 = &v8[8 * (v7 >> 3)];
    __p = v8;
    v16 = v9;
    memcpy(v8, v6, v7);
    v15 = v9;
  }
  v18 = 0;
  v19 = 0;
  __dst = v20;
  if (&v13 != (__int128 *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 104);
    if (v10)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v20, *(_QWORD *)(a2 + 104), 1);
      v11 = *(_QWORD *)(a2 + 104);
      if (v11)
        memcpy(__dst, *(const void **)(a2 + 96), v11);
      v18 = v10;
    }
  }
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::ELFObjectFile(a1, v20, (uint64_t)&v13, *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136));
  if (__dst != v20)
    free(__dst);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::create(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  llvm::object *v5;
  _UNKNOWN **v6;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  void *__p[2];
  uint64_t v18;
  void *__dst;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  _QWORD v23[4];
  __int16 v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  __int128 v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  if (v4 < 0x34)
  {
    v34 = a1[1];
    v35[0] = "invalid buffer: the size (";
    v35[2] = &v34;
    v36 = 2819;
    v37[0] = v35;
    v37[2] = ") is smaller than an ELF header (";
    v38 = 770;
    v33 = 52;
    v47 = v37;
    v49 = &v33;
    v50 = 2818;
    v23[0] = &v47;
    v23[2] = ")";
    v24 = 770;
    v5 = (llvm::object *)operator new(0x38uLL);
    v6 = llvm::object::object_category(v5);
    llvm::StringError::StringError((uint64_t)v5, (llvm::Twine *)v23, 3, (uint64_t)v6);
    v46 = -1;
    *(_QWORD *)&v39 = 0;
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v5;
LABEL_35:
    v15 = v39;
    *(_QWORD *)&v39 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return;
  }
  v8 = *a1;
  v46 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = &v46;
  v44 = 0;
  v45 = 0;
  *(_QWORD *)&v39 = v8;
  *((_QWORD *)&v39 + 1) = v4;
  v9 = *((_OWORD *)a1 + 1);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v9;
  v16 = v39;
  *(_OWORD *)__p = 0u;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v18 = 0;
  __dst = v22;
  v20 = 0;
  v21 = 0;
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::ELFObjectFile((uint64_t)v23, v22, (uint64_t)&v16, 0, 0, 0);
  if (__dst != v22)
    free(__dst);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(&v26, (uint64_t)&v47);
    v10 = v47;
    if ((v49 & 1) != 0)
    {
      if (v47)
      {
        *(_BYTE *)(a3 + 152) |= 1u;
        *(_QWORD *)a3 = v10;
        goto LABEL_26;
      }
    }
    else
    {
      if (v48)
      {
        v11 = (unsigned int *)v47 + 1;
        for (i = 40 * v48; i; i -= 40)
        {
          v13 = bswap32(*v11);
          switch(v13)
          {
            case 2u:
              v14 = &v31;
              if (v31)
                goto LABEL_12;
              break;
            case 0x12u:
              v14 = &v32;
              if (v32)
                goto LABEL_12;
              break;
            case 0xBu:
              v14 = &v30;
              if (v30)
                goto LABEL_12;
              break;
            default:
              goto LABEL_12;
          }
          *v14 = (uint64_t)(v11 - 1);
LABEL_12:
          v11 += 10;
        }
      }
      v25 = 1;
    }
  }
  *(_BYTE *)(a3 + 152) &= ~1u;
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::ELFObjectFile(a3, (uint64_t)v23);
LABEL_26:
  v23[0] = &unk_1E0E24350;
  if (v29 != &v30)
    free(v29);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  llvm::object::SymbolicFile::~SymbolicFile((llvm::object::SymbolicFile *)v23);
  if ((v46 & 1) != 0)
    goto LABEL_35;
  if (v43 != &v46)
    free(v43);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::initContent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t i;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v10);
  v5 = v10;
  if ((v12 & 1) == 0)
  {
    if (v11)
    {
      v6 = (unsigned int *)(v10 + 4);
      for (i = 40 * v11; i; i -= 40)
      {
        v8 = bswap32(*v6);
        switch(v8)
        {
          case 2u:
            v9 = (_QWORD *)(a1 + 128);
            if (*(_QWORD *)(a1 + 128))
              goto LABEL_5;
            break;
          case 0x12u:
            v9 = (_QWORD *)(a1 + 136);
            if (*(_QWORD *)(a1 + 136))
              goto LABEL_5;
            break;
          case 0xBu:
            v9 = (_QWORD *)(a1 + 120);
            if (*(_QWORD *)(a1 + 120))
              goto LABEL_5;
            break;
          default:
            goto LABEL_5;
        }
        *v9 = v6 - 1;
LABEL_5:
        v6 += 10;
      }
    }
    v5 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::~ELFObjectFile(llvm::object::SymbolicFile *this)
{
  char *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E0E24350;
  v2 = (char *)*((_QWORD *)this + 12);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
}

{
  char *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_1E0E24350;
  v2 = (char *)*((_QWORD *)this + 12);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
  operator delete(v4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::ELFObjectFile(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  _OWORD v21[2];

  v11 = a2[1];
  v21[0] = *a2;
  v21[1] = v11;
  llvm::object::ObjectFile::ObjectFile(a1, 14, v21);
  *(_QWORD *)v12 = &unk_1E0E24350;
  *(_BYTE *)(v12 + 48) = 0;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)a3;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  v14 = *(_BYTE **)(a3 + 16);
  v13 = *(_BYTE **)(a3 + 24);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 3) >= 0x666666666666667)
      abort();
    v16 = (char *)operator new(v15);
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *(_QWORD *)(a1 + 88) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 80) = v17;
  }
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a1 + 56 != a3)
  {
    v18 = *(_QWORD *)(a3 + 48);
    if (v18)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 96, (void *)(a1 + 120), *(_QWORD *)(a3 + 48), 1);
      v19 = *(_QWORD *)(a3 + 48);
      if (v19)
        memcpy(*(void **)(a1 + 96), *(const void **)(a3 + 40), v19);
      *(_QWORD *)(a1 + 104) = v18;
    }
  }
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolFlags(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  int v18;
  int v19;
  unsigned int *v20;
  int v21;
  unsigned int *v22;
  int v23;
  int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  char v44;
  unsigned int *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1 + 7, a2, (uint64_t)&v42);
  if ((v43 & 1) != 0)
  {
    v46 = -1;
    v45 = v42;
    v8 = v42;
    goto LABEL_41;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v6, v42, HIDWORD(a2), (uint64_t)&v45);
  if ((v43 & 1) != 0)
  {
    v7 = v42;
    v42 = 0;
    if (v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = v45;
  if ((v46 & 1) != 0)
  {
LABEL_41:
    v45 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  v9 = *((unsigned __int8 *)v45 + 12);
  if ((v9 & 0xF0) == 0x20)
    v10 = 6;
  else
    v10 = 2;
  if (v9 < 0x10)
    v10 = 0;
  if (*((__int16 *)v45 + 7) == -3585)
    v11 = v10 | 8;
  else
    v11 = v10;
  v12 = (unsigned int *)a1[16];
  if (!v12)
  {
    v44 &= ~1u;
    v42 = 0;
    v43 = 0;
    v13 = 0;
    if ((v44 & 1) == 0)
      goto LABEL_16;
LABEL_44:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v6, v12, (uint64_t)&v42);
  v13 = v42;
  if ((v44 & 1) != 0)
    goto LABEL_44;
LABEL_16:
  if ((v44 & 1) != 0)
  {
    v42 = 0;
    if (v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = (unsigned int *)a1[15];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v6, v14, (uint64_t)&v42);
    v15 = v42;
    if ((v44 & 1) == 0)
      goto LABEL_21;
LABEL_47:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v15;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  v44 &= ~1u;
  v42 = 0;
  v43 = 0;
  v15 = 0;
  if ((v44 & 1) != 0)
    goto LABEL_47;
LABEL_21:
  if ((v9 & 0xF) - 3 < 2 || v8 == v13 || v8 == v15)
    v18 = v11 | 0x80;
  else
    v18 = v11;
  if ((v44 & 1) != 0)
  {
    v42 = 0;
    if (v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  }
  v19 = *(unsigned __int16 *)(*v6 + 18);
  switch(v19)
  {
    case 46848:
      (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      v20 = v42;
      if ((v44 & 1) == 0)
      {
        v21 = v18;
        if (v43 >= 2)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 25636)
          {
            if (*(_WORD *)v42 == 30756)
              v21 = v11 | 0x80;
            else
              v21 = v18;
          }
        }
        goto LABEL_95;
      }
      v42 = 0;
      v40 = v20;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v40, &v41);
      if (v40)
        (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
      if ((v44 & 1) != 0)
      {
        v22 = v42;
        v42 = 0;
        if (v22)
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
LABEL_82:
      v21 = v18;
      goto LABEL_95;
    case 10240:
      (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      if ((v44 & 1) != 0)
      {
        v25 = v42;
        v42 = 0;
        v39 = v25;
        llvm::consumeError((_QWORD **)&v39);
        if (v39)
          (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
        v21 = v18;
        goto LABEL_90;
      }
      if (v43)
      {
        v21 = v18;
        if (v43 == 1)
          goto LABEL_90;
        if (*(_WORD *)v42 != 25636)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 29732)
          {
            if (*(_WORD *)v42 == 24868)
              v21 = v11 | 0x80;
            else
              v21 = v18;
          }
          goto LABEL_90;
        }
      }
      v21 = v11 | 0x80;
LABEL_90:
      if ((v44 & 1) != 0)
      {
        v29 = v42;
        v42 = 0;
        if (v29)
          (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
      }
      if ((v8[3] & 0xF) == 2)
        v21 |= *((_WORD *)v8 + 3) & 0x100;
      goto LABEL_95;
    case 64512:
      (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      if ((v44 & 1) == 0)
      {
        v21 = v18;
        if (v43 >= 2)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 25636)
          {
            v23 = *(unsigned __int16 *)v42;
            v24 = 29732;
            goto LABEL_77;
          }
        }
        goto LABEL_86;
      }
      v26 = v42;
      v42 = 0;
      v38 = v26;
      llvm::consumeError((_QWORD **)&v38);
      v27 = v38;
      if (!v38)
        goto LABEL_85;
LABEL_84:
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
LABEL_85:
      v21 = v18;
      goto LABEL_86;
  }
  if (v19 != 62208)
    goto LABEL_82;
  (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
  if ((v44 & 1) != 0)
  {
    v36 = v42;
    v42 = 0;
    v37 = v36;
    llvm::consumeError((_QWORD **)&v37);
    v27 = v37;
    if (!v37)
      goto LABEL_85;
    goto LABEL_84;
  }
  if (!v43)
  {
    v21 = v11 | 0x80;
    if ((v44 & 1) == 0)
      goto LABEL_95;
    goto LABEL_87;
  }
  v21 = v18;
  if (v43 != 1)
  {
    v21 = v11 | 0x80;
    if (*(_WORD *)v42 != 25636)
    {
      v23 = *(unsigned __int16 *)v42;
      v24 = 30756;
LABEL_77:
      if (v23 == v24)
        v21 = v11 | 0x80;
      else
        v21 = v18;
      if ((v44 & 1) == 0)
        goto LABEL_95;
      goto LABEL_87;
    }
  }
LABEL_86:
  if ((v44 & 1) == 0)
    goto LABEL_95;
LABEL_87:
  v28 = v42;
  v42 = 0;
  if (v28)
    (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
LABEL_95:
  if (!*((_WORD *)v8 + 7))
  {
    v21 |= 1u;
    v30 = *((unsigned __int8 *)v8 + 12);
    v31 = v30 & 0xF;
    if (v31 != 5)
      goto LABEL_101;
LABEL_100:
    v21 |= 0x10u;
    goto LABEL_101;
  }
  v30 = *((unsigned __int8 *)v8 + 12);
  v31 = v30 & 0xF;
  if (v31 == 5 || *((unsigned __int16 *)v8 + 7) == 62207)
    goto LABEL_100;
LABEL_101:
  v32 = v30 >> 4;
  if (v32 <= 0xA && ((1 << v32) & 0x406) != 0)
  {
    v33 = *((_BYTE *)v8 + 13) & 3;
    if (v33 == 3 || (*((_BYTE *)v8 + 13) & 3) == 0)
      v21 |= 0x40u;
  }
  else
  {
    v33 = *((_BYTE *)v8 + 13) & 3;
  }
  if (v31 == 10)
    v34 = v21 | 0x20;
  else
    v34 = v21;
  if (v33 == 2)
    v34 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v34;
  if ((v46 & 1) != 0)
  {
LABEL_113:
    v35 = v45;
    v45 = 0;
    if (v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 128);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 20);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
  v3 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = (unint64_t)(bswap32(v2) > 0xF) << 32;
    v5 = ((v1 - v7) / 0x28uLL);
  }
  return v4 | v5;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::symbol_end(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1[16];
  if (!v1)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v2 = *(_DWORD *)(v1 + 20);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(a1 + 7, (uint64_t)&v7);
  v3 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = (unint64_t)(bswap32(v2) >> 4) << 32;
    v5 = ((v1 - v7) / 0x28uLL);
  }
  return v4 | v5;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolName(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;
  unsigned int *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1 + 7, a2, (uint64_t)&v25);
  if ((v26 & 1) != 0)
  {
    v33 = -1;
    v32 = v25;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v6, v25, HIDWORD(a2), (uint64_t)&v32);
    if ((v26 & 1) != 0)
    {
      v7 = v25;
      v25 = 0;
      if (v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
    if ((v33 & 1) == 0)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(v6, a2, (uint64_t)&v30);
      v8 = v30;
      if ((v31 & 1) != 0)
      {
        v30 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v8;
LABEL_31:
        v15 = v30;
        v30 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_33:
        if ((v33 & 1) == 0)
          return;
        goto LABEL_34;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(v6, bswap32(*(_DWORD *)(v30 + 24)), (uint64_t)&v28);
      v9 = v28;
      if ((v29 & 1) != 0)
      {
        v28 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v9;
LABEL_28:
        v14 = v28;
        v28 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_30:
        if ((v31 & 1) == 0)
          goto LABEL_33;
        goto LABEL_31;
      }
      *(_QWORD *)&v23 = llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v23, (uint64_t)&v25);
      if ((v27 & 1) != 0)
      {
        v11 = v25;
        v25 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v11;
LABEL_25:
        v13 = v25;
        v25 = 0;
        if (v13)
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
LABEL_27:
        if ((v29 & 1) == 0)
          goto LABEL_30;
        goto LABEL_28;
      }
      llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>::getName(v32, (uint64_t)v25, v26, (uint64_t)&v23);
      if ((v24 & 1) == 0 && *((_QWORD *)&v23 + 1))
      {
        *(_BYTE *)(a3 + 16) &= ~1u;
LABEL_23:
        *(_OWORD *)a3 = v23;
        goto LABEL_24;
      }
      if ((v32[3] & 0xF) != 3)
      {
        v12 = v24 & 1;
        *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v12;
        if (v12)
        {
          *(_QWORD *)a3 = v23;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 128))(&v20, a1, a2);
      if ((v22 & 1) != 0)
      {
        v17 = v20;
        v20 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v17;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 144))(v21, v20);
        if ((v22 & 1) == 0)
        {
LABEL_40:
          if ((v24 & 1) != 0)
          {
            v19 = v23;
            *(_QWORD *)&v23 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
LABEL_24:
          if ((v27 & 1) == 0)
            goto LABEL_27;
          goto LABEL_25;
        }
      }
      v18 = v20;
      v20 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      goto LABEL_40;
    }
  }
  v10 = v32;
  v32 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v10;
LABEL_34:
  v16 = v32;
  v32 = 0;
  if (v16)
    (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  char v24;
  unsigned int *v25;
  char v26;
  unsigned int *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v29);
  if ((v30 & 1) == 0)
  {
    v6 = v29;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v22);
    if ((v23 & 1) != 0)
    {
      v28 = -1;
      v27 = v22;
      v8 = v22;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>((_QWORD *)(a1 + 56), v22, HIDWORD(a2), (uint64_t)&v27);
      if ((v23 & 1) != 0)
      {
        v7 = v22;
        v22 = 0;
        if (v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
      v8 = v27;
      if ((v28 & 1) == 0)
      {
        v9 = bswap32(*((unsigned __int16 *)v27 + 7)) >> 16;
        if (v9 - 65521 < 2 || v9 == 0)
        {
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v6;
          goto LABEL_18;
        }
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v25);
        if ((v26 & 1) != 0)
        {
          v17 = v25;
          v25 = 0;
          goto LABEL_28;
        }
        if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) != 256)
          goto LABEL_34;
        v14 = *(unsigned int **)(a1 + 136);
        if (v14)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSHNDXTable((_QWORD *)(a1 + 56), v14, (uint64_t)&v22);
          if ((v24 & 1) != 0)
          {
            v17 = v22;
            goto LABEL_28;
          }
          v16 = v22;
          v15 = v23;
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
        *(_QWORD *)&v19 = v16;
        *((_QWORD *)&v19 + 1) = v15;
        v20 = 1;
        v21 = 0;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), (uint64_t)v27, v25, &v19, (uint64_t)&v22);
        v17 = v22;
        if ((v23 & 1) == 0)
        {
          if (v22)
            v6 += bswap32(v22[3]);
LABEL_34:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v6;
          if ((v26 & 1) == 0)
            goto LABEL_37;
LABEL_35:
          v18 = v25;
          v25 = 0;
          if (v18)
            (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
LABEL_37:
          if ((v28 & 1) == 0)
            goto LABEL_18;
          goto LABEL_16;
        }
LABEL_28:
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v17;
        if ((v26 & 1) == 0)
          goto LABEL_37;
        goto LABEL_35;
      }
    }
    v27 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
LABEL_16:
    v12 = v27;
    v27 = 0;
    if (v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
LABEL_18:
    if ((v30 & 1) == 0)
      return;
    goto LABEL_19;
  }
  v11 = v29;
  v29 = 0;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v11;
LABEL_19:
  v13 = v29;
  v29 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  uint64_t result;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  char v9;
  unsigned int *v10;
  char v11;
  uint64_t v12;

  v2 = HIDWORD(a2);
  v12 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v9 = -1;
    v8 = v10;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v3, v10, v2, (uint64_t)&v8);
    if ((v11 & 1) != 0)
    {
      v4 = v10;
      v10 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v9 & 1) != 0)
  {
    v7 = v8;
    v8 = 0;
    llvm::report_fatal_error((uint64_t *)&v7, 1);
  }
  result = bswap32(v8[1]);
  if (*((__int16 *)v8 + 7) != -3585)
  {
    v6 = *(unsigned __int16 *)(*v3 + 18);
    if ((v6 == 10240 || v6 == 2048) && (v8[3] & 0xF) == 2)
      return result & 0xFFFFFFFE;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  if (*((__int16 *)v7 + 7) == -3329)
    return bswap32(v7[1]);
  else
    return 0;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char v9;
  unsigned int *v10;
  char v11;
  uint64_t v12;

  v3 = HIDWORD(a2);
  v12 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v9 = -1;
    v8 = v10;
    v7 = v10;
LABEL_9:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v5, v10, v3, (uint64_t)&v8);
  if ((v11 & 1) != 0)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = v8;
  if ((v9 & 1) != 0)
    goto LABEL_9;
  switch(v8[3] & 0xF)
  {
    case 0u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      break;
    case 1u:
    case 5u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 2;
      break;
    case 2u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 5;
      break;
    case 3u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 3;
      break;
    case 4u:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 4;
      break;
    default:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 1;
      break;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  char v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1 + 7, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v13 = -1;
    v12 = v14;
LABEL_15:
    v10 = v12;
    v12 = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
    v12 = 0;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v6, v14, HIDWORD(a2), (uint64_t)&v12);
  if ((v15 & 1) != 0)
  {
    v7 = v14;
    v14 = 0;
    if (v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((v13 & 1) != 0)
    goto LABEL_15;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(v6, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v11 = v14;
    v14 = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    v14 = 0;
  }
  else
  {
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolSection(a1, (uint64_t)v12, v14, a3);
    if ((v15 & 1) != 0)
    {
      v8 = v14;
      v14 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  if ((v13 & 1) != 0)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v3)@<X0>(llvm::object *@<X0>, llvm::object **@<X8>);

  v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 12));
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v8);
  if ((v9 & 1) != 0)
  {
    v3 = v8;
    v8 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6, &v7);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v8;
  if ((v9 & 1) != 0)
  {
    v8 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v4) >> 3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 20));
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContents(__n128 *this@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  llvm::object *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  std::error_code v16;

  if (a2[1] == 0x8000000)
  {
    v5 = this[1].n128_u64[0];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  llvm::object::Binary::getMemoryBufferRef(this, &v14);
  v8 = this[1].n128_u64[0];
  v9 = bswap32(a2[4]);
  v10 = bswap32(a2[5]);
  v11 = v9 + v8 + v10;
  if (__CFADD__(v9 + v8, v10)
    || v11 < v10
    || (v9 + v8 >= v14.n128_u64[0] ? (v12 = v11 > v14.n128_u64[0] + v14.n128_u64[1]) : (v12 = 1), v12))
  {
    *(_QWORD *)&v16.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v16, &v15);
    v13 = v15;
    if (v15)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v13;
      return;
    }
    v8 = this[1].n128_u64[0];
    v9 = bswap32(a2[4]);
    v10 = bswap32(a2[5]);
  }
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v8 + v9;
  *(_QWORD *)(a3 + 8) = v10;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 32));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 10) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 11) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::isSectionData(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_DWORD *)(a2 + 4) != 0x1000000)
    return 0;
  v2 = bswap32(*(_DWORD *)(a2 + 8));
  return (v2 & 2) != 0 && (v2 & 4) == 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 11) & 3) != 0 && *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = bswap32(*(_DWORD *)(a2 + 8));
  if ((v2 & 2) == 0)
    return 0;
  if ((v2 & 4) != 0)
    return 1;
  return (v2 & 1) == 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) != 0)
    return 0;
  if (*(_DWORD *)(a2 + 4) == 0x8000000)
    return 0;
  return (*(unsigned __int8 *)(a2 + 11) >> 1) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5)
                        / (unint64_t)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 46)) >> 16));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::section_rel_end(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const std::error_category *v11;
  uint64_t v12;
  uint64_t v13;
  std::error_code v14;
  std::string v15;
  std::string *v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v5 = a2[1];
  if (v5 == 0x4000000 || v5 == 150994944)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1 + 7, v4, (uint64_t)&v18);
    if ((v19 & 1) != 0)
    {
      v8 = v18;
      v18 = 0;
      v13 = v8;
      v9 = &v13;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1 + 7, bswap32(*(_DWORD *)(v18 + 24)), (uint64_t)&v18);
      if ((v19 & 1) == 0)
        return v4 | ((unint64_t)(bswap32(a2[5]) / bswap32(a2[9]) + HIDWORD(v4)) << 32);
      v10 = v18;
      v18 = 0;
      v12 = v10;
      v9 = &v12;
    }
    *(_QWORD *)&v14.__val_ = llvm::errorToErrorCode((_QWORD **)v9);
    v14.__cat_ = v11;
    std::error_code::message(&v15, &v14);
    v17 = 260;
    v16 = &v15;
    llvm::report_fatal_error((llvm::Twine *)&v16, 1);
  }
  return v4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRelocatedSection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = bswap32(*(_DWORD *)(a2 + 4));
  if (v5 == 4 || v5 == 9)
  {
    result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1 + 7, bswap32(*(_DWORD *)(a2 + 28)), (uint64_t)&v10);
    v7 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v7;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v9;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  unsigned int *Rel;
  _QWORD *v6;
  const std::error_category *v7;
  _QWORD *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v6 = (_QWORD *)v13;
    v13 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode(&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v12 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  if (*(_DWORD *)(v13 + 4) == 150994944)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRela(a1, a2);
  return bswap32(*Rel);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v7;
  const std::error_category *v8;
  _QWORD *v9;
  std::error_code v10;
  std::string v11;
  std::string *v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1 + 7, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v7 = (_QWORD *)v14;
    v14 = 0;
    v9 = v7;
    *(_QWORD *)&v10.__val_ = llvm::errorToErrorCode(&v9);
    v10.__cat_ = v8;
    std::error_code::message(&v11, &v10);
    v13 = 260;
    v12 = &v11;
    llvm::report_fatal_error((llvm::Twine *)&v12, 1);
  }
  v4 = v14;
  if (*(_DWORD *)(v14 + 4) == 150994944)
  {
    v5 = bswap32(llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRel((uint64_t)a1, a2)[1]);
    if (v5 > 0xFF)
      return bswap32(*(_DWORD *)(v4 + 24)) | ((unint64_t)(v5 >> 8) << 32);
  }
  else
  {
    v5 = bswap32(llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRela((uint64_t)a1, a2)[1]);
    if (v5 > 0xFF)
      return bswap32(*(_DWORD *)(v4 + 24)) | ((unint64_t)(v5 >> 8) << 32);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  unsigned int *Rel;
  _QWORD *v6;
  const std::error_category *v7;
  _QWORD *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v6 = (_QWORD *)v13;
    v13 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode(&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v12 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  if (*(_DWORD *)(v13 + 4) == 150994944)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRela(a1, a2);
  return *((unsigned __int8 *)Rel + 7);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;

  v4 = a1 + 56;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRelocationTypeName(v4, v5, a3);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v51);
  v2 = 0;
  if ((v53 & 1) == 0)
  {
    if (v52)
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
      v5 = v51;
      v49 = v51 + 40 * v52;
      do
      {
        if (*(_DWORD *)(v5 + 4) == 100663296)
        {
          v6 = (int *)(bswap32(*(_DWORD *)(v5 + 16)) + *(_QWORD *)(a1 + 16));
          v7 = *v6;
          if (*v6)
          {
            v8 = (char *)v3;
            do
            {
              while (1)
              {
                if (v7 != 285212672 && v7 != 117440512 && v7 != 385875968)
                  goto LABEL_11;
                v13 = bswap32(v6[1]);
                if (v8 >= v4)
                  break;
                *(_QWORD *)v8 = v13;
                v8 += 8;
LABEL_11:
                v3 = (uint64_t)v8;
                v10 = v6[2];
                v6 += 2;
                v7 = v10;
                if (!v10)
                  goto LABEL_4;
              }
              v14 = (v8 - v2) >> 3;
              v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 61)
LABEL_80:
                abort();
              if ((v4 - v2) >> 2 > v15)
                v15 = (v4 - v2) >> 2;
              if ((unint64_t)(v4 - v2) >= 0x7FFFFFFFFFFFFFF8)
                v16 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v16 = v15;
              if (v16)
              {
                if (v16 >> 61)
LABEL_81:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v17 = operator new(8 * v16);
                v18 = &v17[8 * v14];
                *(_QWORD *)v18 = v13;
                v3 = (uint64_t)(v18 + 8);
                if (v8 == v2)
                  goto LABEL_44;
              }
              else
              {
                v17 = 0;
                v18 = (char *)(8 * v14);
                *(_QWORD *)(8 * v14) = v13;
                v3 = 8 * v14 + 8;
                if (v8 == v2)
                  goto LABEL_44;
              }
              v19 = v8 - 8 - v2;
              if (v19 >= 0x168)
              {
                if (&v17[v8 - v2 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v17[v8 - v2 - 8])
                {
                  v20 = v8;
                }
                else if (&v8[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
                {
                  v20 = v8;
                }
                else if ((unint64_t)(v2 - v17) >= 0x20)
                {
                  v21 = (v19 >> 3) + 1;
                  v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
                  v20 = &v8[-v22];
                  v18 -= v22;
                  v23 = &v17[8 * v14 - 16];
                  v24 = v8 - 16;
                  v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v26 = *(_OWORD *)v24;
                    *(v23 - 1) = *((_OWORD *)v24 - 1);
                    *v23 = v26;
                    v23 -= 2;
                    v24 -= 32;
                    v25 -= 4;
                  }
                  while (v25);
                  if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_44;
                }
                else
                {
                  v20 = v8;
                }
              }
              else
              {
                v20 = v8;
              }
              do
              {
                v27 = *((_QWORD *)v20 - 1);
                v20 -= 8;
                *((_QWORD *)v18 - 1) = v27;
                v18 -= 8;
              }
              while (v20 != v2);
LABEL_44:
              v4 = &v17[8 * v16];
              if (v2)
                operator delete(v2);
              v2 = v18;
              v9 = v6[2];
              v6 += 2;
              v7 = v9;
              v8 = (char *)v3;
            }
            while (v9);
          }
        }
LABEL_4:
        v5 += 40;
      }
      while (v5 != v49);
      if (v52)
      {
        v28 = v51;
        v29 = v51 + 40 * v52;
        v30 = *a2;
        while (1)
        {
          v32 = (_QWORD *)v3;
          if (v2 != (char *)v3)
          {
            v33 = bswap32(*(_DWORD *)(v28 + 12));
            v32 = v2;
            while (*v32 != v33)
            {
              if (++v32 == (_QWORD *)v3)
              {
                v32 = (_QWORD *)v3;
                break;
              }
            }
          }
          if (v32 == (_QWORD *)v3)
            goto LABEL_50;
          v35 = a2[1];
          v34 = (unint64_t)a2[2];
          if ((unint64_t)v35 >= v34)
            break;
          *(_QWORD *)v35 = v28;
          *((_QWORD *)v35 + 1) = a1;
          v31 = v35 + 16;
LABEL_49:
          a2[1] = v31;
LABEL_50:
          v28 += 40;
          if (v28 == v29)
            goto LABEL_74;
        }
        v36 = (v35 - v30) >> 4;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
          goto LABEL_80;
        v38 = v34 - (_QWORD)v30;
        if (v38 >> 3 > v37)
          v37 = v38 >> 3;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39 >> 60)
          goto LABEL_81;
        v40 = 16 * v39;
        v41 = (char *)operator new(16 * v39);
        v42 = &v41[16 * v36];
        *(_QWORD *)v42 = v28;
        *((_QWORD *)v42 + 1) = a1;
        if (v35 == v30)
        {
          v44 = &v41[16 * v36];
          v46 = &v41[v40];
          v31 = v42 + 16;
          *a2 = v44;
          a2[1] = v42 + 16;
          a2[2] = v46;
          if (!v30)
            goto LABEL_70;
        }
        else
        {
          v43 = &v41[16 * v36];
          do
          {
            v44 = v43 - 16;
            *((_OWORD *)v43 - 1) = *((_OWORD *)v35 - 1);
            v35 -= 16;
            v43 -= 16;
          }
          while (v35 != v30);
          v45 = &v41[v40];
          v31 = v42 + 16;
          *a2 = v44;
          a2[1] = v42 + 16;
          a2[2] = v45;
          if (!v30)
            goto LABEL_70;
        }
        operator delete(v30);
LABEL_70:
        v30 = v44;
        goto LABEL_49;
      }
    }
    else
    {
      v2 = 0;
    }
  }
LABEL_74:
  if ((v53 & 1) != 0)
  {
    v47 = v51;
    v51 = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  if (v2)
    operator delete(v2);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::section_begin(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::section_end(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + 40 * v2[1];
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  const char *result;
  unsigned int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    result = "elf64-i386";
    switch(v5)
    {
      case 3u:
        return result;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
LABEL_13:
        result = "elf64-unknown";
        break;
      case 8u:
        result = "elf64-mips";
        break;
      case 0x15u:
        result = "elf64-powerpc";
        break;
      case 0x16u:
        result = "elf64-s390";
        break;
      case 0x2Bu:
        result = "elf64-sparc";
        break;
      case 0x3Eu:
        result = "elf64-x86-64";
        break;
      default:
        switch(v5)
        {
          case 0xE0u:
            result = "elf64-amdgpu";
            break;
          case 0xE1u:
          case 0xE2u:
          case 0xE3u:
          case 0xE4u:
          case 0xE5u:
          case 0xE6u:
          case 0xE7u:
          case 0xE8u:
          case 0xE9u:
          case 0xEAu:
          case 0xEBu:
          case 0xECu:
          case 0xEDu:
          case 0xEEu:
          case 0xEFu:
          case 0xF0u:
          case 0xF1u:
          case 0xF2u:
          case 0xF4u:
          case 0xF5u:
          case 0xF6u:
          case 0xF8u:
          case 0xF9u:
          case 0xFAu:
          case 0xFCu:
          case 0xFDu:
          case 0xFEu:
          case 0xFFu:
          case 0x100u:
          case 0x101u:
            goto LABEL_13;
          case 0xF3u:
            result = "elf64-littleriscv";
            break;
          case 0xF7u:
            result = "elf64-bpf";
            break;
          case 0xFBu:
            result = "elf64-ve";
            break;
          case 0x102u:
            result = "elf64-loongarch";
            break;
          default:
            if (v5 != 183)
              goto LABEL_13;
            result = "elf64-bigaarch64";
            break;
        }
        break;
    }
  }
  else
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
    v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    result = "elf32-m68k";
    switch(v3)
    {
      case 2u:
      case 0x12u:
        result = "elf32-sparc";
        break;
      case 3u:
        result = "elf32-i386";
        break;
      case 4u:
        return result;
      case 5u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x54u:
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
LABEL_24:
        result = "elf32-unknown";
        break;
      case 6u:
        result = "elf32-iamcu";
        break;
      case 8u:
        result = "elf32-mips";
        break;
      case 0x14u:
        result = "elf32-powerpc";
        break;
      case 0x28u:
        result = "elf32-bigarm";
        break;
      case 0x3Eu:
        result = "elf32-x86-64";
        break;
      case 0x53u:
        result = "elf32-avr";
        break;
      case 0x5Eu:
        result = "elf32-xtensa";
        break;
      case 0x69u:
        result = "elf32-msp430";
        break;
      default:
        switch(v3)
        {
          case 0xE0u:
            result = "elf32-amdgpu";
            break;
          case 0xE1u:
          case 0xE2u:
          case 0xE3u:
          case 0xE4u:
          case 0xE5u:
          case 0xE6u:
          case 0xE7u:
          case 0xE8u:
          case 0xE9u:
          case 0xEAu:
          case 0xEBu:
          case 0xECu:
          case 0xEDu:
          case 0xEEu:
          case 0xEFu:
          case 0xF0u:
          case 0xF1u:
          case 0xF2u:
          case 0xF5u:
          case 0xF6u:
          case 0xF7u:
          case 0xF8u:
          case 0xF9u:
          case 0xFAu:
          case 0xFBu:
          case 0xFDu:
          case 0xFEu:
          case 0xFFu:
          case 0x100u:
          case 0x101u:
            goto LABEL_24;
          case 0xF3u:
            result = "elf32-littleriscv";
            break;
          case 0xF4u:
            result = "elf32-lanai";
            break;
          case 0xFCu:
            result = "elf32-csky";
            break;
          case 0x102u:
            result = "elf32-loongarch";
            break;
          default:
            if (v3 != 164)
              goto LABEL_24;
            result = "elf32-hexagon";
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getArch(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  result = 15;
  switch(v2)
  {
    case 2u:
    case 0x12u:
      return 29;
    case 3u:
    case 6u:
      return 37;
    case 4u:
      return result;
    case 5u:
    case 7u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x13u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x29u:
    case 0x2Au:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
      return 0;
    case 8u:
      v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2)
          return 18;
LABEL_34:
        llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
      }
      result = 16;
      break;
    case 0x14u:
      return 21;
    case 0x15u:
      return 23;
    case 0x16u:
      return 32;
    case 0x28u:
      return 1;
    case 0x2Bu:
      return 30;
    case 0x3Eu:
      return 38;
    case 0x53u:
      return 7;
    case 0x5Eu:
      return 40;
    case 0x69u:
      return 20;
    default:
      switch(v2)
      {
        case 0xB7u:
          return 4;
        case 0xB8u:
        case 0xB9u:
        case 0xBAu:
        case 0xBBu:
        case 0xBCu:
        case 0xBDu:
        case 0xBEu:
        case 0xBFu:
        case 0xC0u:
        case 0xC1u:
        case 0xC2u:
        case 0xC3u:
        case 0xC4u:
        case 0xC5u:
        case 0xC6u:
        case 0xC7u:
        case 0xC8u:
        case 0xC9u:
        case 0xCAu:
        case 0xCBu:
        case 0xCCu:
        case 0xCDu:
        case 0xCEu:
        case 0xCFu:
        case 0xD0u:
        case 0xD1u:
        case 0xD2u:
        case 0xD3u:
        case 0xD4u:
        case 0xD5u:
        case 0xD6u:
        case 0xD7u:
        case 0xD8u:
        case 0xD9u:
        case 0xDAu:
        case 0xDBu:
        case 0xDCu:
        case 0xDDu:
        case 0xDEu:
        case 0xDFu:
        case 0xE0u:
        case 0xE1u:
        case 0xE2u:
        case 0xE3u:
        case 0xE4u:
        case 0xE5u:
        case 0xE6u:
        case 0xE7u:
        case 0xE8u:
        case 0xE9u:
        case 0xEAu:
        case 0xEBu:
        case 0xECu:
        case 0xEDu:
        case 0xEEu:
        case 0xEFu:
        case 0xF0u:
        case 0xF1u:
        case 0xF2u:
        case 0xF5u:
        case 0xF6u:
        case 0xF8u:
        case 0xF9u:
        case 0xFAu:
        case 0xFDu:
        case 0xFEu:
        case 0xFFu:
        case 0x100u:
        case 0x101u:
          return 0;
        case 0xF3u:
          v5 = *(unsigned __int8 *)(v1 + 4);
          if (v5 == 1)
            return 27;
          if (v5 != 2)
            goto LABEL_34;
          return 28;
        case 0xF4u:
          return 60;
        case 0xF7u:
          return 9;
        case 0xFBu:
          return 65;
        case 0xFCu:
          return 10;
        case 0x102u:
          v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 == 1)
          {
            result = 13;
          }
          else
          {
            if (v6 != 2)
              goto LABEL_34;
            result = 14;
          }
          break;
        default:
          if (v2 != 164)
            return 0;
          return 12;
      }
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = bswap32(*(_DWORD *)(v2 + 24));
  return result;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 256;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return bswap32(v7[2]);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((unsigned __int8 *)v7 + 12) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((unsigned __int8 *)v7 + 13);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int *v7;
  char v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return v7[3] & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 8));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 16));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRelocationAddend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  _UNKNOWN **v9;
  _QWORD *v10;
  const std::error_category *v11;
  _QWORD *v12;
  std::error_code v13;
  std::string v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v10 = (_QWORD *)v17;
    v17 = 0;
    v12 = v10;
    *(_QWORD *)&v13.__val_ = llvm::errorToErrorCode(&v12);
    v13.__cat_ = v11;
    std::error_code::message(&v14, &v13);
    v16 = 260;
    v15[0] = &v14;
    llvm::report_fatal_error((llvm::Twine *)v15, 1);
  }
  if (*(_DWORD *)(v17 + 4) == 0x4000000)
  {
    result = (uint64_t)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRela(a1, a2);
    v7 = (int)bswap32(*(_DWORD *)(result + 8));
    v8 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v15[0] = "Section is not SHT_RELA";
    v16 = 259;
    v7 = (uint64_t)operator new(0x38uLL);
    v9 = llvm::object::object_category((llvm::object *)v7);
    result = llvm::StringError::StringError(v7, (llvm::Twine *)v15, 3, (uint64_t)v9);
    v8 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v8;
  *(_QWORD *)a3 = v7;
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getBuildAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::size_type *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  _BYTE *v10;
  std::string::size_type v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  std::string::size_type v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = 40 * v18;
  while (*v6 != 50331760)
  {
    v6 += 10;
    v7 -= 40;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (std::string::size_type)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 0, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = a1;
  v16 = *MEMORY[0x1E0C80C00];
  v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::dynamic_symbol_begin(a1);
  v6 = v5;
  v7 = *(_QWORD *)(v2 + 120);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 20);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections((_QWORD *)(v2 + 56), (uint64_t)&v14);
    v9 = v14;
    if ((v15 & 1) != 0)
    {
      v14 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v11 = 0;
      v10 = 0;
    }
    else
    {
      v10 = (unint64_t)(bswap32(v8) >> 4) << 32;
      v11 = ((v7 - v14) / 0x28uLL);
    }
    result = v10 | v11;
  }
  else
  {
    result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::dynamic_symbol_begin(v2);
    v2 = v13;
  }
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getPlatformFlags(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 56) + 36));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEType(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16)) >> 16;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEMachine(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18)) >> 16;
}

void llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>::getName(unsigned int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  _UNKNOWN **v9;
  void **v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  unint64_t v25;
  __int16 v26;

  v5 = bswap32(*a1);
  if (a3 <= v5)
  {
    v9 = llvm::object::object_category((llvm::object *)a1);
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v12 = &unk_1E0E22B10;
    v20 = __p;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v12, 0, 0, 0);
    v23[0] = &unk_1E0E20340;
    v23[1] = "st_name (0x%x) is past the end of the string table of size 0x%zx";
    v24 = v5;
    v25 = a3;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v23);
    v10 = v20;
    v11 = operator new(0x38uLL);
    v26 = 260;
    v23[0] = v10;
    llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)v23, 3, (uint64_t)v9);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v11;
  }
  else
  {
    v6 = a2 + v5;
    if (a2)
      v7 = strlen((const char *)(a2 + v5));
    else
      v7 = 0;
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v6;
    *(_QWORD *)(a4 + 8) = v7;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned int *)a1[17];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(a1 + 7, (uint64_t)&v22);
    if ((v24 & 1) != 0)
    {
      v21 = -1;
      v20[0] = v22;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSHNDXTable(a1 + 7, v8, v22, v23, (uint64_t)v20);
      if ((v24 & 1) != 0)
      {
        v9 = v22;
        v22 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      if ((v21 & 1) == 0)
      {
        v11 = v20[0];
        v10 = v20[1];
        goto LABEL_9;
      }
    }
    v14 = v20[0];
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v14;
    return;
  }
  v10 = 0;
  v11 = 0;
LABEL_9:
  *(_QWORD *)&v17 = v11;
  *((_QWORD *)&v17 + 1) = v10;
  v18 = 1;
  v19 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection(a1 + 7, a2, a3, &v17, (uint64_t)&v22);
  v12 = v22;
  if ((v23 & 1) != 0)
  {
    v22 = 0;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v12;
LABEL_13:
    v13 = v22;
    v22 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return;
  }
  if (v22)
  {
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = a1;
    return;
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
  *(_BYTE *)(a4 + 16) &= ~1u;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v16;
  if ((v23 & 1) != 0)
    goto LABEL_13;
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRel(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  const std::error_category *v7;
  unsigned int *v8;
  std::error_code v9;
  std::string v10;
  unsigned int *v11;
  char v12;
  __int16 v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;

  v2 = HIDWORD(a2);
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v15 = -1;
    v14 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,false>,false>>(v3, v11, v2, (uint64_t)&v14);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v15 & 1) != 0)
  {
    v6 = v14;
    v14 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode((_QWORD **)&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v13 = 260;
    v11 = (unsigned int *)&v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  return v14;
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getRela(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v6;
  const std::error_category *v7;
  unsigned int *v8;
  std::error_code v9;
  std::string v10;
  unsigned int *v11;
  char v12;
  __int16 v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;

  v2 = HIDWORD(a2);
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v15 = -1;
    v14 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,false>,true>>(v3, v11, v2, (uint64_t)&v14);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if ((v15 & 1) != 0)
  {
    v6 = v14;
    v14 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode((_QWORD **)&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v13 = 260;
    v11 = (unsigned int *)&v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  return v14;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,false>,false>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,false>,false>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 8 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 8 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = bswap32(a2[5]);
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,false>,true>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,false>,true>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 12 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 12 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = bswap32(a2[5]);
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 120);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(a1 + 56);
  if (bswap32(*(_DWORD *)(v1 + 20)) <= 0xF)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(v2, (uint64_t)v8);
    v3 = v8[0];
    if ((v9 & 1) == 0)
      return ((v1 - v8[0]) / 0x28uLL);
    v8[0] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,false>>::sections(v2, (uint64_t)v8);
  v5 = v8[0];
  if ((v9 & 1) != 0)
  {
    v8[0] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = ((v1 - v8[0]) / 0x28uLL);
    v7 = 0x100000000;
  }
  return v7 | v6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  __int128 v13;
  void *__p;
  void *v15;
  char *v16;
  void *__dst;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];

  v4 = *(_OWORD *)(a2 + 32);
  v20[0] = *(_OWORD *)(a2 + 16);
  v20[1] = v4;
  v13 = *(_OWORD *)(a2 + 56);
  v15 = 0;
  v16 = 0;
  __p = 0;
  v6 = *(_BYTE **)(a2 + 72);
  v5 = *(_BYTE **)(a2 + 80);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v7 >> 3) >= 0x666666666666667)
      abort();
    v8 = (char *)operator new(v7);
    v9 = &v8[8 * (v7 >> 3)];
    __p = v8;
    v16 = v9;
    memcpy(v8, v6, v7);
    v15 = v9;
  }
  v18 = 0;
  v19 = 0;
  __dst = v20;
  if (&v13 != (__int128 *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 104);
    if (v10)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v20, *(_QWORD *)(a2 + 104), 1);
      v11 = *(_QWORD *)(a2 + 104);
      if (v11)
        memcpy(__dst, *(const void **)(a2 + 96), v11);
      v18 = v10;
    }
  }
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,false>>::ELFObjectFile(a1, v20, (uint64_t)&v13, *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136));
  if (__dst != v20)
    free(__dst);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::create(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  llvm::object *v5;
  _UNKNOWN **v6;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  int *v11;
  uint64_t i;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  void *__p[2];
  uint64_t v18;
  void *__dst;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  _QWORD v23[4];
  __int16 v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  __int128 v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  if (v4 < 0x40)
  {
    v34 = a1[1];
    v35[0] = "invalid buffer: the size (";
    v35[2] = &v34;
    v36 = 2819;
    v37[0] = v35;
    v37[2] = ") is smaller than an ELF header (";
    v38 = 770;
    v33 = 64;
    v47 = v37;
    v49 = &v33;
    v50 = 2818;
    v23[0] = &v47;
    v23[2] = ")";
    v24 = 770;
    v5 = (llvm::object *)operator new(0x38uLL);
    v6 = llvm::object::object_category(v5);
    llvm::StringError::StringError((uint64_t)v5, (llvm::Twine *)v23, 3, (uint64_t)v6);
    v46 = -1;
    *(_QWORD *)&v39 = 0;
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v5;
LABEL_35:
    v15 = v39;
    *(_QWORD *)&v39 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return;
  }
  v8 = *a1;
  v46 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = &v46;
  v44 = 0;
  v45 = 0;
  *(_QWORD *)&v39 = v8;
  *((_QWORD *)&v39 + 1) = v4;
  v9 = *((_OWORD *)a1 + 1);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v9;
  v16 = v39;
  *(_OWORD *)__p = 0u;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v18 = 0;
  __dst = v22;
  v20 = 0;
  v21 = 0;
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::ELFObjectFile((uint64_t)v23, v22, (uint64_t)&v16, 0, 0, 0);
  if (__dst != v22)
    free(__dst);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(&v26, (uint64_t)&v47);
    v10 = v47;
    if ((v49 & 1) != 0)
    {
      if (v47)
      {
        *(_BYTE *)(a3 + 152) |= 1u;
        *(_QWORD *)a3 = v10;
        goto LABEL_26;
      }
    }
    else
    {
      if (v48)
      {
        v11 = (int *)v47 + 1;
        for (i = v48 << 6; i; i -= 64)
        {
          v13 = *v11;
          if (*v11 == 2)
          {
            v14 = &v31;
            if (v31)
              goto LABEL_12;
          }
          else if (v13 == 18)
          {
            v14 = &v32;
            if (v32)
              goto LABEL_12;
          }
          else
          {
            if (v13 != 11)
              goto LABEL_12;
            v14 = &v30;
            if (v30)
              goto LABEL_12;
          }
          *v14 = (uint64_t)(v11 - 1);
LABEL_12:
          v11 += 16;
        }
      }
      v25 = 1;
    }
  }
  *(_BYTE *)(a3 + 152) &= ~1u;
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::ELFObjectFile(a3, (uint64_t)v23);
LABEL_26:
  v23[0] = &unk_1E0E249F8;
  if (v29 != &v30)
    free(v29);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  llvm::object::SymbolicFile::~SymbolicFile((llvm::object::SymbolicFile *)v23);
  if ((v46 & 1) != 0)
    goto LABEL_35;
  if (v43 != &v46)
    free(v43);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::initContent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  int *v6;
  uint64_t i;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v10);
  v5 = v10;
  if ((v12 & 1) == 0)
  {
    if (v11)
    {
      v6 = (int *)(v10 + 4);
      for (i = v11 << 6; i; i -= 64)
      {
        v8 = *v6;
        if (*v6 == 2)
        {
          v9 = (_QWORD *)(a1 + 128);
          if (*(_QWORD *)(a1 + 128))
            goto LABEL_5;
        }
        else if (v8 == 18)
        {
          v9 = (_QWORD *)(a1 + 136);
          if (*(_QWORD *)(a1 + 136))
            goto LABEL_5;
        }
        else
        {
          if (v8 != 11)
            goto LABEL_5;
          v9 = (_QWORD *)(a1 + 120);
          if (*(_QWORD *)(a1 + 120))
            goto LABEL_5;
        }
        *v9 = v6 - 1;
LABEL_5:
        v6 += 16;
      }
    }
    v5 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::~ELFObjectFile(llvm::object::SymbolicFile *this)
{
  char *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E0E249F8;
  v2 = (char *)*((_QWORD *)this + 12);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
}

{
  char *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_1E0E249F8;
  v2 = (char *)*((_QWORD *)this + 12);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
  operator delete(v4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::ELFObjectFile(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  _OWORD v21[2];

  v11 = a2[1];
  v21[0] = *a2;
  v21[1] = v11;
  llvm::object::ObjectFile::ObjectFile(a1, 15, v21);
  *(_QWORD *)v12 = &unk_1E0E249F8;
  *(_BYTE *)(v12 + 48) = 0;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)a3;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  v14 = *(_BYTE **)(a3 + 16);
  v13 = *(_BYTE **)(a3 + 24);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      abort();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v16;
    v17 = &v16[64 * (v15 >> 6)];
    *(_QWORD *)(a1 + 88) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 80) = v17;
  }
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a1 + 56 != a3)
  {
    v18 = *(_QWORD *)(a3 + 48);
    if (v18)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 96, (void *)(a1 + 120), *(_QWORD *)(a3 + 48), 1);
      v19 = *(_QWORD *)(a3 + 48);
      if (v19)
        memcpy(*(void **)(a1 + 96), *(const void **)(a3 + 40), v19);
      *(_QWORD *)(a1 + 104) = v18;
    }
  }
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolFlags(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v18;
  int v19;
  _QWORD *v20;
  unsigned int v21;
  _QWORD *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1 + 7, a2, (uint64_t)&v42);
  if ((v43 & 1) != 0)
  {
    v46 = -1;
    v45 = v42;
    v8 = v42;
    goto LABEL_41;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v6, v42, HIDWORD(a2), (uint64_t)&v45);
  if ((v43 & 1) != 0)
  {
    v7 = v42;
    v42 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  v8 = v45;
  if ((v46 & 1) != 0)
  {
LABEL_41:
    v45 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  v9 = *((unsigned __int8 *)v45 + 4);
  if ((v9 & 0xF0) == 0x20)
    v10 = 6;
  else
    v10 = 2;
  if (v9 < 0x10)
    v10 = 0;
  if (*((__int16 *)v45 + 3) == -15)
    v11 = v10 | 8;
  else
    v11 = v10;
  v12 = (_QWORD *)a1[16];
  if (!v12)
  {
    v44 &= ~1u;
    v42 = 0;
    v43 = 0;
    v13 = 0;
    if ((v44 & 1) == 0)
      goto LABEL_16;
LABEL_44:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v6, v12, (uint64_t)&v42);
  v13 = v42;
  if ((v44 & 1) != 0)
    goto LABEL_44;
LABEL_16:
  if ((v44 & 1) != 0)
  {
    v42 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  v14 = (_QWORD *)a1[15];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v6, v14, (uint64_t)&v42);
    v15 = v42;
    if ((v44 & 1) == 0)
      goto LABEL_21;
LABEL_47:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v15;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  v44 &= ~1u;
  v42 = 0;
  v43 = 0;
  v15 = 0;
  if ((v44 & 1) != 0)
    goto LABEL_47;
LABEL_21:
  if ((v9 & 0xF) - 3 < 2 || v8 == v13 || v8 == v15)
    v18 = v11 | 0x80;
  else
    v18 = v11;
  if ((v44 & 1) != 0)
  {
    v42 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  v19 = *(unsigned __int16 *)(*v6 + 18);
  switch(v19)
  {
    case 183:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      v20 = v42;
      if ((v44 & 1) == 0)
      {
        v21 = v18;
        if (v43 >= 2)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 25636)
          {
            if (*(_WORD *)v42 == 30756)
              v21 = v11 | 0x80;
            else
              v21 = v18;
          }
        }
        goto LABEL_95;
      }
      v42 = 0;
      v40 = v20;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v40, &v41);
      if (v40)
        (*(void (**)(_QWORD *))(*v40 + 8))(v40);
      if ((v44 & 1) != 0)
      {
        v22 = v42;
        v42 = 0;
        if (v22)
          (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      }
LABEL_82:
      v21 = v18;
      goto LABEL_95;
    case 40:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      if ((v44 & 1) != 0)
      {
        v25 = v42;
        v42 = 0;
        v39 = v25;
        llvm::consumeError(&v39);
        if (v39)
          (*(void (**)(_QWORD *))(*v39 + 8))(v39);
        v21 = v18;
        goto LABEL_90;
      }
      if (v43)
      {
        v21 = v18;
        if (v43 == 1)
          goto LABEL_90;
        if (*(_WORD *)v42 != 25636)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 29732)
          {
            if (*(_WORD *)v42 == 24868)
              v21 = v11 | 0x80;
            else
              v21 = v18;
          }
          goto LABEL_90;
        }
      }
      v21 = v11 | 0x80;
LABEL_90:
      if ((v44 & 1) != 0)
      {
        v29 = v42;
        v42 = 0;
        if (v29)
          (*(void (**)(_QWORD *))(*v29 + 8))(v29);
      }
      if ((*((_BYTE *)v8 + 4) & 0xF) == 2)
        v21 = v21 & 0xFFFFFEFF | ((v8[1] & 1) << 8);
      goto LABEL_95;
    case 252:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      if ((v44 & 1) == 0)
      {
        v21 = v18;
        if (v43 >= 2)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 25636)
          {
            v23 = *(unsigned __int16 *)v42;
            v24 = 29732;
            goto LABEL_77;
          }
        }
        goto LABEL_86;
      }
      v26 = v42;
      v42 = 0;
      v38 = v26;
      llvm::consumeError(&v38);
      v27 = v38;
      if (!v38)
        goto LABEL_85;
LABEL_84:
      (*(void (**)(_QWORD *))(*v27 + 8))(v27);
LABEL_85:
      v21 = v18;
      goto LABEL_86;
  }
  if (v19 != 243)
    goto LABEL_82;
  (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
  if ((v44 & 1) != 0)
  {
    v36 = v42;
    v42 = 0;
    v37 = v36;
    llvm::consumeError(&v37);
    v27 = v37;
    if (!v37)
      goto LABEL_85;
    goto LABEL_84;
  }
  if (!v43)
  {
    v21 = v11 | 0x80;
    if ((v44 & 1) == 0)
      goto LABEL_95;
    goto LABEL_87;
  }
  v21 = v18;
  if (v43 != 1)
  {
    v21 = v11 | 0x80;
    if (*(_WORD *)v42 != 25636)
    {
      v23 = *(unsigned __int16 *)v42;
      v24 = 30756;
LABEL_77:
      if (v23 == v24)
        v21 = v11 | 0x80;
      else
        v21 = v18;
      if ((v44 & 1) == 0)
        goto LABEL_95;
      goto LABEL_87;
    }
  }
LABEL_86:
  if ((v44 & 1) == 0)
    goto LABEL_95;
LABEL_87:
  v28 = v42;
  v42 = 0;
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 8))(v28);
LABEL_95:
  if (!*((_WORD *)v8 + 3))
  {
    v21 |= 1u;
    v30 = *((unsigned __int8 *)v8 + 4);
    v31 = v30 & 0xF;
    if (v31 != 5)
      goto LABEL_101;
LABEL_100:
    v21 |= 0x10u;
    goto LABEL_101;
  }
  v30 = *((unsigned __int8 *)v8 + 4);
  v31 = v30 & 0xF;
  if (v31 == 5 || *((unsigned __int16 *)v8 + 3) == 65522)
    goto LABEL_100;
LABEL_101:
  v32 = v30 >> 4;
  if (v32 <= 0xA && ((1 << v32) & 0x406) != 0)
  {
    v33 = *((_BYTE *)v8 + 5) & 3;
    if (v33 == 3 || (*((_BYTE *)v8 + 5) & 3) == 0)
      v21 |= 0x40u;
  }
  else
  {
    v33 = *((_BYTE *)v8 + 5) & 3;
  }
  if (v31 == 10)
    v34 = v21 | 0x20;
  else
    v34 = v21;
  if (v33 == 2)
    v34 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v34;
  if ((v46 & 1) != 0)
  {
LABEL_113:
    v35 = v45;
    v45 = 0;
    if (v35)
      (*(void (**)(_QWORD *))(*v35 + 8))(v35);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 128);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 32);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
  v3 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = (unint64_t)(v2 > 0x17) << 32;
    v5 = ((unint64_t)(v1 - v7) >> 6);
  }
  return v4 | v5;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::symbol_end(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1[16];
  if (!v1)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v2 = *(_QWORD *)(v1 + 32);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(a1 + 7, (uint64_t)&v7);
  v3 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = ((v2 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64 << 28) & 0xFFFFFFFF00000000;
    v5 = ((unint64_t)(v1 - v7) >> 6);
  }
  return v4 | v5;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolName(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  llvm::object *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::object *v10;
  llvm::object *v11;
  int v12;
  llvm::object *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::object *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;
  llvm::object *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  llvm::object *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1 + 7, a2, (uint64_t)&v25);
  if ((v26 & 1) != 0)
  {
    v33 = -1;
    v32 = v25;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v6, v25, HIDWORD(a2), (uint64_t)&v32);
    if ((v26 & 1) != 0)
    {
      v7 = v25;
      v25 = 0;
      if (v7)
        (*(void (**)(llvm::object *))(*(_QWORD *)v7 + 8))(v7);
    }
    if ((v33 & 1) == 0)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(v6, a2, (uint64_t)&v30);
      v8 = v30;
      if ((v31 & 1) != 0)
      {
        v30 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v8;
LABEL_31:
        v15 = v30;
        v30 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_33:
        if ((v33 & 1) == 0)
          return;
        goto LABEL_34;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(v6, *(_DWORD *)(v30 + 40), (uint64_t)&v28);
      v9 = v28;
      if ((v29 & 1) != 0)
      {
        v28 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v9;
LABEL_28:
        v14 = v28;
        v28 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_30:
        if ((v31 & 1) == 0)
          goto LABEL_33;
        goto LABEL_31;
      }
      *(_QWORD *)&v23 = llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v23, (uint64_t)&v25);
      if ((v27 & 1) != 0)
      {
        v11 = v25;
        v25 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v11;
LABEL_25:
        v13 = v25;
        v25 = 0;
        if (v13)
          (*(void (**)(llvm::object *))(*(_QWORD *)v13 + 8))(v13);
LABEL_27:
        if ((v29 & 1) == 0)
          goto LABEL_30;
        goto LABEL_28;
      }
      llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,false>>::getName(v32, (uint64_t)v25, v26, (uint64_t)&v23);
      if ((v24 & 1) == 0 && *((_QWORD *)&v23 + 1))
      {
        *(_BYTE *)(a3 + 16) &= ~1u;
LABEL_23:
        *(_OWORD *)a3 = v23;
        goto LABEL_24;
      }
      if ((*((_BYTE *)v32 + 4) & 0xF) != 3)
      {
        v12 = v24 & 1;
        *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v12;
        if (v12)
        {
          *(_QWORD *)a3 = v23;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 128))(&v20, a1, a2);
      if ((v22 & 1) != 0)
      {
        v17 = v20;
        v20 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v17;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 144))(v21, v20);
        if ((v22 & 1) == 0)
        {
LABEL_40:
          if ((v24 & 1) != 0)
          {
            v19 = v23;
            *(_QWORD *)&v23 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
LABEL_24:
          if ((v27 & 1) == 0)
            goto LABEL_27;
          goto LABEL_25;
        }
      }
      v18 = v20;
      v20 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      goto LABEL_40;
    }
  }
  v10 = v32;
  v32 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v10;
LABEL_34:
  v16 = v32;
  v32 = 0;
  if (v16)
    (*(void (**)(llvm::object *))(*(_QWORD *)v16 + 8))(v16);
}

