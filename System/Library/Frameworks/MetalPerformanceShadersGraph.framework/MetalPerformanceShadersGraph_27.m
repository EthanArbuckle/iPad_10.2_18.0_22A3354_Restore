void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  char v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v29);
  if ((v30 & 1) == 0)
  {
    v6 = v29;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v22);
    if ((v23 & 1) != 0)
    {
      v28 = -1;
      v27 = v22;
      v8 = v22;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>((_QWORD *)(a1 + 56), v22, HIDWORD(a2), (uint64_t)&v27);
      if ((v23 & 1) != 0)
      {
        v7 = v22;
        v22 = 0;
        if (v7)
          (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      }
      v8 = v27;
      if ((v28 & 1) == 0)
      {
        v9 = *((unsigned __int16 *)v27 + 3);
        if ((v9 - 65521) < 2 || v9 == 0)
        {
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v6;
          goto LABEL_18;
        }
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v25);
        if ((v26 & 1) != 0)
        {
          v17 = v25;
          v25 = 0;
          goto LABEL_28;
        }
        if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) != 1)
          goto LABEL_34;
        v14 = *(_QWORD *)(a1 + 136);
        if (v14)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSHNDXTable((_QWORD *)(a1 + 56), v14, (uint64_t)&v22);
          if ((v24 & 1) != 0)
          {
            v17 = v22;
            goto LABEL_28;
          }
          v16 = v22;
          v15 = v23;
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
        *(_QWORD *)&v19 = v16;
        *((_QWORD *)&v19 + 1) = v15;
        v20 = 1;
        v21 = 0;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), (uint64_t)v27, v25, &v19, (uint64_t)&v22);
        v17 = v22;
        if ((v23 & 1) == 0)
        {
          if (v22)
            v6 += v22[2];
LABEL_34:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v6;
          if ((v26 & 1) == 0)
            goto LABEL_37;
LABEL_35:
          v18 = v25;
          v25 = 0;
          if (v18)
            (*(void (**)(_QWORD *))(*v18 + 8))(v18);
LABEL_37:
          if ((v28 & 1) == 0)
            goto LABEL_18;
          goto LABEL_16;
        }
LABEL_28:
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v17;
        if ((v26 & 1) == 0)
          goto LABEL_37;
        goto LABEL_35;
      }
    }
    v27 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
LABEL_16:
    v12 = v27;
    v27 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
LABEL_18:
    if ((v30 & 1) == 0)
      return;
    goto LABEL_19;
  }
  v11 = v29;
  v29 = 0;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v11;
LABEL_19:
  v13 = v29;
  v29 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t result;
  int v6;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;

  v2 = HIDWORD(a2);
  v13 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v10 = -1;
    v9 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v3, v11, v2, (uint64_t)&v9);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    }
  }
  if ((v10 & 1) != 0)
  {
    v8 = v9;
    v9 = 0;
    llvm::report_fatal_error((uint64_t *)&v8, 1);
  }
  result = v9[1];
  if (*((__int16 *)v9 + 3) != -15)
  {
    v6 = *(unsigned __int16 *)(*v3 + 18);
    if ((v6 == 40 || v6 == 8) && (*((_BYTE *)v9 + 4) & 0xF) == 2)
      result &= ~1uLL;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  if (*((__int16 *)v7 + 3) == -14)
    return *((unsigned int *)v7 + 2);
  else
    return 0;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v3 = HIDWORD(a2);
  v12 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v9 = -1;
    v8 = v10;
    v7 = v10;
LABEL_9:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v5, v10, v3, (uint64_t)&v8);
  if ((v11 & 1) != 0)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  v7 = v8;
  if ((v9 & 1) != 0)
    goto LABEL_9;
  switch(*((_BYTE *)v8 + 4) & 0xF)
  {
    case 0:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      break;
    case 1:
    case 5:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 2;
      break;
    case 2:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 5;
      break;
    case 3:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 3;
      break;
    case 4:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 4;
      break;
    default:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 1;
      break;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1 + 7, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v13 = -1;
    v12 = v14;
LABEL_15:
    v10 = v12;
    v12 = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
    v12 = 0;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v6, v14, HIDWORD(a2), (uint64_t)&v12);
  if ((v15 & 1) != 0)
  {
    v7 = v14;
    v14 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  if ((v13 & 1) != 0)
    goto LABEL_15;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(v6, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v11 = v14;
    v14 = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    v14 = 0;
  }
  else
  {
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolSection(a1, (uint64_t)v12, v14, a3);
    if ((v15 & 1) != 0)
    {
      v8 = v14;
      v14 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  if ((v13 & 1) != 0)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 64;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v3)@<X0>(llvm::object *@<X0>, llvm::object **@<X8>);

  v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v8);
  if ((v9 & 1) != 0)
  {
    v3 = v8;
    v8 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6, &v7);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v8;
  if ((v9 & 1) != 0)
  {
    v8 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return (a2 - (uint64_t)v4) >> 6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContents(__n128 *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  llvm::object *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  std::error_code v16;

  if (*(_DWORD *)(a2 + 4) == 8)
  {
    v5 = this[1].n128_u64[0];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  llvm::object::Binary::getMemoryBufferRef(this, &v14);
  v8 = this[1].n128_u64[0];
  v10 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v11 = v9 + v10 + v8;
  if (__CFADD__(v9, v10 + v8)
    || v11 < v9
    || (v10 + v8 >= v14.n128_u64[0] ? (v12 = v11 > v14.n128_u64[0] + v14.n128_u64[1]) : (v12 = 1), v12))
  {
    *(_QWORD *)&v16.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v16, &v15);
    v13 = v15;
    if (v15)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v13;
      return;
    }
    v8 = this[1].n128_u64[0];
    v10 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
  }
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v8 + v10;
  *(_QWORD *)(a3 + 8) = v9;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48);
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::isSectionData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 1)
    return 0;
  if ((*(_QWORD *)(a2 + 8) & 2) != 0)
    return (*(_QWORD *)(a2 + 8) & 4) == 0;
  return 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = (v2 & 4) != 0 || (*(_QWORD *)(a2 + 8) & 1) == 0;
  return (v2 & 2) != 0 && v3;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5) / (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 58));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::section_rel_end(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const std::error_category *v11;
  uint64_t v12;
  uint64_t v13;
  std::error_code v14;
  std::string v15;
  std::string *v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1 + 7, v4, (uint64_t)&v18);
    if ((v19 & 1) != 0)
    {
      v8 = v18;
      v18 = 0;
      v13 = v8;
      v9 = &v13;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1 + 7, *(_DWORD *)(v18 + 40), (uint64_t)&v18);
      if ((v19 & 1) == 0)
      {
        v4 += (*(_QWORD *)(a2 + 32) / *(_QWORD *)(a2 + 56)) << 32;
        return v4;
      }
      v10 = v18;
      v18 = 0;
      v12 = v10;
      v9 = &v12;
    }
    *(_QWORD *)&v14.__val_ = llvm::errorToErrorCode((_QWORD **)v9);
    v14.__cat_ = v11;
    std::error_code::message(&v15, &v14);
    v17 = 260;
    v16 = &v15;
    llvm::report_fatal_error((llvm::Twine *)&v16, 1);
  }
  return v4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRelocatedSection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1 + 7, *(_DWORD *)(a2 + 44), (uint64_t)&v10);
    v7 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v7;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v9;
  }
  return result;
}

std::string::size_type llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  std::string *Rel;
  _QWORD *v6;
  const std::error_category *v7;
  _QWORD *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v6 = (_QWORD *)v13;
    v13 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode(&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v12 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  if (*(_DWORD *)(v13 + 4) == 9)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRela(a1, a2);
  return Rel->__r_.__value_.__r.__words[0];
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::string *Rel;
  uint64_t v6;
  std::string::size_type size;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1 + 7, a2, (uint64_t)&v16);
  if ((v17 & 1) != 0)
  {
    v9 = (_QWORD *)v16;
    v16 = 0;
    v11 = v9;
    *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
    v12.__cat_ = v10;
    std::error_code::message(&v13, &v12);
    v15 = 260;
    v14 = &v13;
    llvm::report_fatal_error((llvm::Twine *)&v14, 1);
  }
  v4 = v16;
  if (*(_DWORD *)(v16 + 4) == 9)
  {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRel((uint64_t)a1, a2);
    v6 = a1[7];
    if (*(_WORD *)(v6 + 18) != 8 || *(_BYTE *)(v6 + 4) != 2)
      goto LABEL_13;
LABEL_8:
    if (*(_BYTE *)(v6 + 5) == 1)
      size = Rel->__r_.__value_.__l.__size_ << 32;
    else
      size = Rel->__r_.__value_.__l.__size_;
    if (!HIDWORD(size))
      return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    return size & 0xFFFFFFFF00000000 | *(unsigned int *)(v4 + 40);
  }
  Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRela((uint64_t)a1, a2);
  v6 = a1[7];
  if (*(_WORD *)(v6 + 18) == 8 && *(_BYTE *)(v6 + 4) == 2)
    goto LABEL_8;
LABEL_13:
  size = Rel->__r_.__value_.__l.__size_;
  if (HIDWORD(size))
    return size & 0xFFFFFFFF00000000 | *(unsigned int *)(v4 + 40);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  std::string *Rel;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v16);
  if ((v17 & 1) != 0)
  {
    v9 = (_QWORD *)v16;
    v16 = 0;
    v11 = v9;
    *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
    v12.__cat_ = v10;
    std::error_code::message(&v13, &v12);
    v15 = 260;
    v14 = &v13;
    llvm::report_fatal_error((llvm::Twine *)&v14, 1);
  }
  if (*(_DWORD *)(v16 + 4) == 9)
  {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRel(a1, a2);
    v5 = *(_QWORD *)(a1 + 56);
    if (*(_WORD *)(v5 + 18) != 8 || *(_BYTE *)(v5 + 4) != 2)
    {
LABEL_11:
      LODWORD(v7) = Rel->__r_.__value_.__r.__words[1];
      return v7;
    }
  }
  else
  {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRela(a1, a2);
    v5 = *(_QWORD *)(a1 + 56);
    if (*(_WORD *)(v5 + 18) != 8 || *(_BYTE *)(v5 + 4) != 2)
      goto LABEL_11;
  }
  v6 = *(_BYTE *)(v5 + 5) == 1;
  v7 = (Rel->__r_.__value_.__l.__size_ >> 24) & 0xFF0000 | HIBYTE(Rel->__r_.__value_.__l.__size_) | (Rel->__r_.__value_.__l.__size_ >> 8) & 0xFF000000 | (Rel->__r_.__value_.__l.__size_ >> 40) & 0xFF00;
  if (!v6)
    return Rel->__r_.__value_.__l.__size_;
  return v7;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v46);
  v2 = 0;
  if ((v48 & 1) == 0)
  {
    if (v47)
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
      v5 = v46;
      v44 = v46 + (v47 << 6);
      do
      {
        if (*(_DWORD *)(v5 + 4) == 6)
        {
          v6 = (uint64_t *)(*(_QWORD *)(v5 + 24) + *(_QWORD *)(a1 + 16));
          v7 = *v6;
          if (*v6)
          {
            v8 = (char *)v3;
            while (1)
            {
              if (v7 != 17 && v7 != 7 && v7 != 23)
                goto LABEL_11;
              v11 = v6[1];
              if (v8 < v4)
              {
                *(_QWORD *)v8 = v11;
                v8 += 8;
LABEL_11:
                v3 = (uint64_t)v8;
                v10 = v6[2];
                v6 += 2;
                v7 = v10;
                if (!v10)
                  break;
              }
              else
              {
                v12 = (v8 - v2) >> 3;
                v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61)
LABEL_75:
                  abort();
                if ((v4 - v2) >> 2 > v13)
                  v13 = (v4 - v2) >> 2;
                if ((unint64_t)(v4 - v2) >= 0x7FFFFFFFFFFFFFF8)
                  v14 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v14 = v13;
                if (v14)
                {
                  if (v14 >> 61)
LABEL_76:
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v15 = operator new(8 * v14);
                  v16 = &v15[8 * v12];
                  *(_QWORD *)v16 = v11;
                  v3 = (uint64_t)(v16 + 8);
                  if (v8 == v2)
                    goto LABEL_39;
                }
                else
                {
                  v15 = 0;
                  v16 = (char *)(8 * v12);
                  *(_QWORD *)(8 * v12) = v11;
                  v3 = 8 * v12 + 8;
                  if (v8 == v2)
                    goto LABEL_39;
                }
                v17 = v8 - 8 - v2;
                if (v17 >= 0x168)
                {
                  if (&v15[v8 - v2 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v8 - v2 - 8])
                  {
                    v18 = v8;
                  }
                  else if (&v8[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
                  {
                    v18 = v8;
                  }
                  else if ((unint64_t)(v2 - v15) >= 0x20)
                  {
                    v19 = (v17 >> 3) + 1;
                    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
                    v18 = &v8[-v20];
                    v16 -= v20;
                    v21 = &v15[8 * v12 - 16];
                    v22 = v8 - 16;
                    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v24 = *(_OWORD *)v22;
                      *(v21 - 1) = *((_OWORD *)v22 - 1);
                      *v21 = v24;
                      v21 -= 2;
                      v22 -= 32;
                      v23 -= 4;
                    }
                    while (v23);
                    if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_39;
                  }
                  else
                  {
                    v18 = v8;
                  }
                }
                else
                {
                  v18 = v8;
                }
                do
                {
                  v25 = *((_QWORD *)v18 - 1);
                  v18 -= 8;
                  *((_QWORD *)v16 - 1) = v25;
                  v16 -= 8;
                }
                while (v18 != v2);
LABEL_39:
                v4 = &v15[8 * v14];
                if (v2)
                  operator delete(v2);
                v2 = v16;
                v9 = v6[2];
                v6 += 2;
                v7 = v9;
                v8 = (char *)v3;
                if (!v9)
                  break;
              }
            }
          }
        }
        v5 += 64;
      }
      while (v5 != v44);
      if (v47)
      {
        v26 = v46;
        v27 = v46 + (v47 << 6);
        v28 = *a2;
        while (1)
        {
          v30 = (_QWORD *)v3;
          if (v2 != (char *)v3)
          {
            v30 = v2;
            while (*v30 != *(_QWORD *)(v26 + 16))
            {
              if (++v30 == (_QWORD *)v3)
              {
                v30 = (_QWORD *)v3;
                break;
              }
            }
          }
          if (v30 == (_QWORD *)v3)
            goto LABEL_45;
          v32 = a2[1];
          v31 = (unint64_t)a2[2];
          if ((unint64_t)v32 >= v31)
            break;
          *(_QWORD *)v32 = v26;
          *((_QWORD *)v32 + 1) = a1;
          v29 = v32 + 16;
LABEL_44:
          a2[1] = v29;
LABEL_45:
          v26 += 64;
          if (v26 == v27)
            goto LABEL_69;
        }
        v33 = (v32 - v28) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          goto LABEL_75;
        v35 = v31 - (_QWORD)v28;
        if (v35 >> 3 > v34)
          v34 = v35 >> 3;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36 >> 60)
          goto LABEL_76;
        v37 = 16 * v36;
        v38 = (char *)operator new(16 * v36);
        v39 = &v38[16 * v33];
        *(_QWORD *)v39 = v26;
        *((_QWORD *)v39 + 1) = a1;
        if (v32 == v28)
        {
          v41 = &v38[16 * v33];
          v29 = v39 + 16;
          *a2 = v41;
          a2[1] = v39 + 16;
          a2[2] = &v38[v37];
          if (!v28)
            goto LABEL_65;
        }
        else
        {
          v40 = &v38[16 * v33];
          do
          {
            v41 = v40 - 16;
            *((_OWORD *)v40 - 1) = *((_OWORD *)v32 - 1);
            v32 -= 16;
            v40 -= 16;
          }
          while (v32 != v28);
          v29 = v39 + 16;
          *a2 = v41;
          a2[1] = v39 + 16;
          a2[2] = &v38[v37];
          if (!v28)
            goto LABEL_65;
        }
        operator delete(v28);
LABEL_65:
        v28 = v41;
        goto LABEL_44;
      }
    }
    else
    {
      v2 = 0;
    }
  }
LABEL_69:
  if ((v48 & 1) != 0)
  {
    v42 = v46;
    v46 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  if (v2)
    operator delete(v2);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::section_begin(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::section_end(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + (v2[1] << 6);
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getBytesInAddress()
{
  return 8;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  const char *result;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    result = "elf64-i386";
    switch(*(_WORD *)(v1 + 18))
    {
      case 3:
        return result;
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
LABEL_13:
        result = "elf64-unknown";
        break;
      case 8:
        result = "elf64-mips";
        break;
      case 0x15:
        result = "elf64-powerpcle";
        break;
      case 0x16:
        result = "elf64-s390";
        break;
      case 0x2B:
        result = "elf64-sparc";
        break;
      case 0x3E:
        result = "elf64-x86-64";
        break;
      default:
        switch(*(_WORD *)(v1 + 18))
        {
          case 0xE0:
            result = "elf64-amdgpu";
            break;
          case 0xE1:
          case 0xE2:
          case 0xE3:
          case 0xE4:
          case 0xE5:
          case 0xE6:
          case 0xE7:
          case 0xE8:
          case 0xE9:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0xF1:
          case 0xF2:
          case 0xF4:
          case 0xF5:
          case 0xF6:
          case 0xF8:
          case 0xF9:
          case 0xFA:
          case 0xFC:
          case 0xFD:
          case 0xFE:
          case 0xFF:
          case 0x100:
          case 0x101:
            goto LABEL_13;
          case 0xF3:
            result = "elf64-littleriscv";
            break;
          case 0xF7:
            result = "elf64-bpf";
            break;
          case 0xFB:
            result = "elf64-ve";
            break;
          case 0x102:
            result = "elf64-loongarch";
            break;
          default:
            if (*(_WORD *)(v1 + 18) != 183)
              goto LABEL_13;
            result = "elf64-littleaarch64";
            break;
        }
        break;
    }
  }
  else
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
    result = "elf32-m68k";
    switch(*(_WORD *)(v1 + 18))
    {
      case 2:
      case 0x12:
        result = "elf32-sparc";
        break;
      case 3:
        result = "elf32-i386";
        break;
      case 4:
        return result;
      case 5:
      case 7:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x13:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
LABEL_24:
        result = "elf32-unknown";
        break;
      case 6:
        result = "elf32-iamcu";
        break;
      case 8:
        result = "elf32-mips";
        break;
      case 0x14:
        result = "elf32-powerpcle";
        break;
      case 0x28:
        result = "elf32-littlearm";
        break;
      case 0x3E:
        result = "elf32-x86-64";
        break;
      case 0x53:
        result = "elf32-avr";
        break;
      case 0x5E:
        result = "elf32-xtensa";
        break;
      case 0x69:
        result = "elf32-msp430";
        break;
      default:
        switch(*(_WORD *)(v1 + 18))
        {
          case 0xE0:
            result = "elf32-amdgpu";
            break;
          case 0xE1:
          case 0xE2:
          case 0xE3:
          case 0xE4:
          case 0xE5:
          case 0xE6:
          case 0xE7:
          case 0xE8:
          case 0xE9:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0xF1:
          case 0xF2:
          case 0xF5:
          case 0xF6:
          case 0xF7:
          case 0xF8:
          case 0xF9:
          case 0xFA:
          case 0xFB:
          case 0xFD:
          case 0xFE:
          case 0xFF:
          case 0x100:
          case 0x101:
            goto LABEL_24;
          case 0xF3:
            result = "elf32-littleriscv";
            break;
          case 0xF4:
            result = "elf32-lanai";
            break;
          case 0xFC:
            result = "elf32-csky";
            break;
          case 0x102:
            result = "elf32-loongarch";
            break;
          default:
            if (*(_WORD *)(v1 + 18) != 164)
              goto LABEL_24;
            result = "elf32-hexagon";
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getArch(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;

  v1 = *(_QWORD *)(a1 + 56);
  result = 15;
  switch(*(_WORD *)(v1 + 18))
  {
    case 2:
    case 0x12:
      return 31;
    case 3:
    case 6:
      return 37;
    case 4:
      return result;
    case 5:
    case 7:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x13:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x29:
    case 0x2A:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      return 0;
    case 8:
      v3 = *(unsigned __int8 *)(v1 + 4);
      if (v3 != 1)
      {
        if (v3 == 2)
          return 19;
LABEL_41:
        llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
      }
      result = 17;
      break;
    case 0x14:
      return 22;
    case 0x15:
      return 24;
    case 0x16:
      return 32;
    case 0x28:
      return 1;
    case 0x2B:
      return 30;
    case 0x3E:
      return 38;
    case 0x53:
      return 7;
    case 0x5E:
      return 40;
    case 0x69:
      return 20;
    default:
      switch(*(_WORD *)(v1 + 18))
      {
        case 0xB7:
          return 3;
        case 0xB8:
        case 0xB9:
        case 0xBA:
        case 0xBB:
        case 0xBC:
        case 0xBD:
        case 0xBE:
        case 0xBF:
        case 0xC0:
        case 0xC1:
        case 0xC2:
        case 0xC3:
        case 0xC4:
        case 0xC5:
        case 0xC6:
        case 0xC7:
        case 0xC8:
        case 0xC9:
        case 0xCA:
        case 0xCB:
        case 0xCC:
        case 0xCD:
        case 0xCE:
        case 0xCF:
        case 0xD0:
        case 0xD1:
        case 0xD2:
        case 0xD3:
        case 0xD4:
        case 0xD5:
        case 0xD6:
        case 0xD7:
        case 0xD8:
        case 0xD9:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xDD:
        case 0xDE:
        case 0xDF:
        case 0xE1:
        case 0xE2:
        case 0xE3:
        case 0xE4:
        case 0xE5:
        case 0xE6:
        case 0xE7:
        case 0xE8:
        case 0xE9:
        case 0xEA:
        case 0xEB:
        case 0xEC:
        case 0xED:
        case 0xEE:
        case 0xEF:
        case 0xF0:
        case 0xF1:
        case 0xF2:
        case 0xF5:
        case 0xF6:
        case 0xF8:
        case 0xF9:
        case 0xFA:
        case 0xFD:
        case 0xFE:
        case 0xFF:
        case 0x100:
        case 0x101:
          return 0;
        case 0xE0:
          v4 = *(unsigned __int8 *)(v1 + 48);
          v5 = v4 - 1;
          if ((v4 - 32) >= 0x2F)
            v6 = 0;
          else
            v6 = 26;
          if (v5 >= 0x10)
            return v6;
          else
            return 25;
        case 0xF3:
          v7 = *(unsigned __int8 *)(v1 + 4);
          if (v7 == 1)
            return 27;
          if (v7 != 2)
            goto LABEL_41;
          return 28;
        case 0xF4:
          return 60;
        case 0xF7:
          return 8;
        case 0xFB:
          return 65;
        case 0xFC:
          return 10;
        case 0x102:
          v8 = *(unsigned __int8 *)(v1 + 4);
          if (v8 == 1)
          {
            result = 13;
          }
          else
          {
            if (v8 != 2)
              goto LABEL_41;
            result = 14;
          }
          break;
        default:
          if (*(_WORD *)(v1 + 18) != 164)
            return 0;
          return 12;
      }
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = *(_QWORD *)(v2 + 24);
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return v7[2];
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((unsigned __int8 *)v7 + 4) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((unsigned __int8 *)v7 + 5);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((_BYTE *)v7 + 4) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRelocationAddend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  llvm::object *v7;
  char v8;
  _UNKNOWN **v9;
  _QWORD *v10;
  const std::error_category *v11;
  _QWORD *v12;
  std::error_code v13;
  std::string v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v10 = (_QWORD *)v17;
    v17 = 0;
    v12 = v10;
    *(_QWORD *)&v13.__val_ = llvm::errorToErrorCode(&v12);
    v13.__cat_ = v11;
    std::error_code::message(&v14, &v13);
    v16 = 260;
    v15[0] = &v14;
    llvm::report_fatal_error((llvm::Twine *)v15, 1);
  }
  if (*(_DWORD *)(v17 + 4) == 4)
  {
    result = (uint64_t)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRela(a1, a2);
    v7 = *(llvm::object **)(result + 16);
    v8 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v15[0] = "Section is not SHT_RELA";
    v16 = 259;
    v7 = (llvm::object *)operator new(0x38uLL);
    v9 = llvm::object::object_category(v7);
    result = llvm::StringError::StringError((uint64_t)v7, (llvm::Twine *)v15, 3, (uint64_t)v9);
    v8 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v8;
  *(_QWORD *)a3 = v7;
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getBuildAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::size_type *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  _BYTE *v10;
  std::string::size_type v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  std::string::size_type v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = v18 << 6;
  while (*v6 != 1879048195)
  {
    v6 += 16;
    v7 -= 64;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (std::string::size_type)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 1, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = a1;
  v16 = *MEMORY[0x1E0C80C00];
  v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::dynamic_symbol_begin(a1);
  v6 = v5;
  v7 = *(_QWORD *)(v2 + 120);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 32);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections((_QWORD *)(v2 + 56), (uint64_t)&v14);
    v9 = v14;
    if ((v15 & 1) != 0)
    {
      v14 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v11 = 0;
      v10 = 0;
    }
    else
    {
      v10 = ((v8 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64 << 28) & 0xFFFFFFFF00000000;
      v11 = ((unint64_t)(v7 - v14) >> 6);
    }
    result = v10 | v11;
  }
  else
  {
    result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::dynamic_symbol_begin(v2);
    v2 = v13;
  }
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getPlatformFlags(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 56) + 48);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = a1[17];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(a1 + 7, (uint64_t)&v22);
    if ((v24 & 1) != 0)
    {
      v21 = -1;
      v20[0] = v22;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSHNDXTable(a1 + 7, v8, v22, v23, (uint64_t)v20);
      if ((v24 & 1) != 0)
      {
        v9 = v22;
        v22 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      if ((v21 & 1) == 0)
      {
        v11 = v20[0];
        v10 = v20[1];
        goto LABEL_9;
      }
    }
    v14 = v20[0];
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v14;
    return;
  }
  v10 = 0;
  v11 = 0;
LABEL_9:
  *(_QWORD *)&v17 = v11;
  *((_QWORD *)&v17 + 1) = v10;
  v18 = 1;
  v19 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection(a1 + 7, a2, a3, &v17, (uint64_t)&v22);
  v12 = v22;
  if ((v23 & 1) != 0)
  {
    v22 = 0;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v12;
LABEL_13:
    v13 = v22;
    v22 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return;
  }
  if (v22)
  {
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = a1;
    return;
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
  *(_BYTE *)(a4 + 16) &= ~1u;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v16;
  if ((v23 & 1) != 0)
    goto LABEL_13;
}

std::string *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRel(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  std::string *v4;
  std::string::__raw *v6;
  const std::error_category *v7;
  std::string::__raw *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  char v12;
  __int16 v13;
  std::string *v14;
  char v15;
  uint64_t v16;

  v2 = HIDWORD(a2);
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v15 = -1;
    v14 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,true>,false>>(v3, v11, v2, (uint64_t)&v14);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(std::string *))(v4->__r_.__value_.__r.__words[0] + 8))(v4);
    }
  }
  if ((v15 & 1) != 0)
  {
    v6 = (std::string::__raw *)v14;
    v14 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode((_QWORD **)&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v13 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  return v14;
}

std::string *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getRela(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  std::string *v4;
  std::string::__raw *v6;
  const std::error_category *v7;
  std::string::__raw *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  char v12;
  __int16 v13;
  std::string *v14;
  char v15;
  uint64_t v16;

  v2 = HIDWORD(a2);
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v15 = -1;
    v14 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)1,true>>>(v3, v11, v2, (uint64_t)&v14);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(std::string *))(v4->__r_.__value_.__r.__words[0] + 8))(v4);
    }
  }
  if ((v15 & 1) != 0)
  {
    v6 = (std::string::__raw *)v14;
    v14 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode((_QWORD **)&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v13 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  return v14;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,true>,false>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)1,true>,false>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 16 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 16 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = a2[4];
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 120);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(a1 + 56);
  if (*(_QWORD *)(v1 + 32) <= 0x17uLL)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(v2, (uint64_t)v8);
    v3 = v8[0];
    if ((v9 & 1) == 0)
      return ((unint64_t)(v1 - v8[0]) >> 6);
    v8[0] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)1,true>>::sections(v2, (uint64_t)v8);
  v5 = v8[0];
  if ((v9 & 1) != 0)
  {
    v8[0] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = ((unint64_t)(v1 - v8[0]) >> 6);
    v7 = 0x100000000;
  }
  return v7 | v6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  __int128 v13;
  void *__p;
  void *v15;
  char *v16;
  void *__dst;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];

  v4 = *(_OWORD *)(a2 + 32);
  v20[0] = *(_OWORD *)(a2 + 16);
  v20[1] = v4;
  v13 = *(_OWORD *)(a2 + 56);
  v15 = 0;
  v16 = 0;
  __p = 0;
  v6 = *(_BYTE **)(a2 + 72);
  v5 = *(_BYTE **)(a2 + 80);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v5 - v6);
    v9 = &v8[64 * (v7 >> 6)];
    __p = v8;
    v16 = v9;
    memcpy(v8, v6, v7);
    v15 = v9;
  }
  v18 = 0;
  v19 = 0;
  __dst = v20;
  if (&v13 != (__int128 *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 104);
    if (v10)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v20, *(_QWORD *)(a2 + 104), 1);
      v11 = *(_QWORD *)(a2 + 104);
      if (v11)
        memcpy(__dst, *(const void **)(a2 + 96), v11);
      v18 = v10;
    }
  }
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,true>>::ELFObjectFile(a1, v20, (uint64_t)&v13, *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136));
  if (__dst != v20)
    free(__dst);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::create(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  llvm::object *v5;
  _UNKNOWN **v6;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  void *__p[2];
  uint64_t v18;
  void *__dst;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  _QWORD v23[4];
  __int16 v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  __int128 v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  if (v4 < 0x40)
  {
    v34 = a1[1];
    v35[0] = "invalid buffer: the size (";
    v35[2] = &v34;
    v36 = 2819;
    v37[0] = v35;
    v37[2] = ") is smaller than an ELF header (";
    v38 = 770;
    v33 = 64;
    v47 = v37;
    v49 = &v33;
    v50 = 2818;
    v23[0] = &v47;
    v23[2] = ")";
    v24 = 770;
    v5 = (llvm::object *)operator new(0x38uLL);
    v6 = llvm::object::object_category(v5);
    llvm::StringError::StringError((uint64_t)v5, (llvm::Twine *)v23, 3, (uint64_t)v6);
    v46 = -1;
    *(_QWORD *)&v39 = 0;
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v5;
LABEL_35:
    v15 = v39;
    *(_QWORD *)&v39 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return;
  }
  v8 = *a1;
  v46 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = &v46;
  v44 = 0;
  v45 = 0;
  *(_QWORD *)&v39 = v8;
  *((_QWORD *)&v39 + 1) = v4;
  v9 = *((_OWORD *)a1 + 1);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v9;
  v16 = v39;
  *(_OWORD *)__p = 0u;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v18 = 0;
  __dst = v22;
  v20 = 0;
  v21 = 0;
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::ELFObjectFile((uint64_t)v23, v22, (uint64_t)&v16, 0, 0, 0);
  if (__dst != v22)
    free(__dst);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(&v26, (uint64_t)&v47);
    v10 = v47;
    if ((v49 & 1) != 0)
    {
      if (v47)
      {
        *(_BYTE *)(a3 + 152) |= 1u;
        *(_QWORD *)a3 = v10;
        goto LABEL_26;
      }
    }
    else
    {
      if (v48)
      {
        v11 = (unsigned int *)v47 + 1;
        for (i = v48 << 6; i; i -= 64)
        {
          v13 = bswap32(*v11);
          switch(v13)
          {
            case 2u:
              v14 = &v31;
              if (v31)
                goto LABEL_12;
              break;
            case 0x12u:
              v14 = &v32;
              if (v32)
                goto LABEL_12;
              break;
            case 0xBu:
              v14 = &v30;
              if (v30)
                goto LABEL_12;
              break;
            default:
              goto LABEL_12;
          }
          *v14 = (uint64_t)(v11 - 1);
LABEL_12:
          v11 += 16;
        }
      }
      v25 = 1;
    }
  }
  *(_BYTE *)(a3 + 152) &= ~1u;
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::ELFObjectFile(a3, (uint64_t)v23);
LABEL_26:
  v23[0] = &unk_1E0E24588;
  if (v29 != &v30)
    free(v29);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  llvm::object::SymbolicFile::~SymbolicFile((llvm::object::SymbolicFile *)v23);
  if ((v46 & 1) != 0)
    goto LABEL_35;
  if (v43 != &v46)
    free(v43);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::initContent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t i;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v10);
  v5 = v10;
  if ((v12 & 1) == 0)
  {
    if (v11)
    {
      v6 = (unsigned int *)(v10 + 4);
      for (i = v11 << 6; i; i -= 64)
      {
        v8 = bswap32(*v6);
        switch(v8)
        {
          case 2u:
            v9 = (_QWORD *)(a1 + 128);
            if (*(_QWORD *)(a1 + 128))
              goto LABEL_5;
            break;
          case 0x12u:
            v9 = (_QWORD *)(a1 + 136);
            if (*(_QWORD *)(a1 + 136))
              goto LABEL_5;
            break;
          case 0xBu:
            v9 = (_QWORD *)(a1 + 120);
            if (*(_QWORD *)(a1 + 120))
              goto LABEL_5;
            break;
          default:
            goto LABEL_5;
        }
        *v9 = v6 - 1;
LABEL_5:
        v6 += 16;
      }
    }
    v5 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::~ELFObjectFile(llvm::object::SymbolicFile *this)
{
  char *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E0E24588;
  v2 = (char *)*((_QWORD *)this + 12);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
}

{
  char *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_1E0E24588;
  v2 = (char *)*((_QWORD *)this + 12);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
  operator delete(v4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::ELFObjectFile(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  _OWORD v21[2];

  v11 = a2[1];
  v21[0] = *a2;
  v21[1] = v11;
  llvm::object::ObjectFile::ObjectFile(a1, 16, v21);
  *(_QWORD *)v12 = &unk_1E0E24588;
  *(_BYTE *)(v12 + 48) = 0;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)a3;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  v14 = *(_BYTE **)(a3 + 16);
  v13 = *(_BYTE **)(a3 + 24);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      abort();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v16;
    v17 = &v16[64 * (v15 >> 6)];
    *(_QWORD *)(a1 + 88) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 80) = v17;
  }
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a1 + 56 != a3)
  {
    v18 = *(_QWORD *)(a3 + 48);
    if (v18)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 96, (void *)(a1 + 120), *(_QWORD *)(a3 + 48), 1);
      v19 = *(_QWORD *)(a3 + 48);
      if (v19)
        memcpy(*(void **)(a1 + 96), *(const void **)(a3 + 40), v19);
      *(_QWORD *)(a1 + 104) = v18;
    }
  }
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolFlags(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  int v18;
  int v19;
  unint64_t *v20;
  int v21;
  unint64_t *v22;
  int v23;
  int v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char v44;
  unint64_t *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1 + 7, a2, (uint64_t)&v42);
  if ((v43 & 1) != 0)
  {
    v46 = -1;
    v45 = v42;
    v8 = v42;
    goto LABEL_41;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v6, v42, HIDWORD(a2), (uint64_t)&v45);
  if ((v43 & 1) != 0)
  {
    v7 = v42;
    v42 = 0;
    if (v7)
      (*(void (**)(unint64_t *))(*v7 + 8))(v7);
  }
  v8 = v45;
  if ((v46 & 1) != 0)
  {
LABEL_41:
    v45 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  v9 = *((unsigned __int8 *)v45 + 4);
  if ((v9 & 0xF0) == 0x20)
    v10 = 6;
  else
    v10 = 2;
  if (v9 < 0x10)
    v10 = 0;
  if (*((__int16 *)v45 + 3) == -3585)
    v11 = v10 | 8;
  else
    v11 = v10;
  v12 = (unint64_t *)a1[16];
  if (!v12)
  {
    v44 &= ~1u;
    v42 = 0;
    v43 = 0;
    v13 = 0;
    if ((v44 & 1) == 0)
      goto LABEL_16;
LABEL_44:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v6, v12, (uint64_t)&v42);
  v13 = v42;
  if ((v44 & 1) != 0)
    goto LABEL_44;
LABEL_16:
  if ((v44 & 1) != 0)
  {
    v42 = 0;
    if (v13)
      (*(void (**)(unint64_t *))(*v13 + 8))(v13);
  }
  v14 = (unint64_t *)a1[15];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v6, v14, (uint64_t)&v42);
    v15 = v42;
    if ((v44 & 1) == 0)
      goto LABEL_21;
LABEL_47:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v15;
    if ((v46 & 1) == 0)
      return;
    goto LABEL_113;
  }
  v44 &= ~1u;
  v42 = 0;
  v43 = 0;
  v15 = 0;
  if ((v44 & 1) != 0)
    goto LABEL_47;
LABEL_21:
  if ((v9 & 0xF) - 3 < 2 || v8 == v13 || v8 == v15)
    v18 = v11 | 0x80;
  else
    v18 = v11;
  if ((v44 & 1) != 0)
  {
    v42 = 0;
    if (v15)
      (*(void (**)(unint64_t *))(*v15 + 8))(v15);
  }
  v19 = *(unsigned __int16 *)(*v6 + 18);
  switch(v19)
  {
    case 46848:
      (*(void (**)(unint64_t **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      v20 = v42;
      if ((v44 & 1) == 0)
      {
        v21 = v18;
        if (v43 >= 2)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 25636)
          {
            if (*(_WORD *)v42 == 30756)
              v21 = v11 | 0x80;
            else
              v21 = v18;
          }
        }
        goto LABEL_95;
      }
      v42 = 0;
      v40 = v20;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v40, &v41);
      if (v40)
        (*(void (**)(unint64_t *))(*v40 + 8))(v40);
      if ((v44 & 1) != 0)
      {
        v22 = v42;
        v42 = 0;
        if (v22)
          (*(void (**)(unint64_t *))(*v22 + 8))(v22);
      }
LABEL_82:
      v21 = v18;
      goto LABEL_95;
    case 10240:
      (*(void (**)(unint64_t **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      if ((v44 & 1) != 0)
      {
        v25 = v42;
        v42 = 0;
        v39 = v25;
        llvm::consumeError(&v39);
        if (v39)
          (*(void (**)(unint64_t *))(*v39 + 8))(v39);
        v21 = v18;
        goto LABEL_90;
      }
      if (v43)
      {
        v21 = v18;
        if (v43 == 1)
          goto LABEL_90;
        if (*(_WORD *)v42 != 25636)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 29732)
          {
            if (*(_WORD *)v42 == 24868)
              v21 = v11 | 0x80;
            else
              v21 = v18;
          }
          goto LABEL_90;
        }
      }
      v21 = v11 | 0x80;
LABEL_90:
      if ((v44 & 1) != 0)
      {
        v29 = v42;
        v42 = 0;
        if (v29)
          (*(void (**)(unint64_t *))(*v29 + 8))(v29);
      }
      if ((*((_BYTE *)v8 + 4) & 0xF) == 2)
        v21 |= *((_WORD *)v8 + 7) & 0x100;
      goto LABEL_95;
    case 64512:
      (*(void (**)(unint64_t **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
      if ((v44 & 1) == 0)
      {
        v21 = v18;
        if (v43 >= 2)
        {
          v21 = v11 | 0x80;
          if (*(_WORD *)v42 != 25636)
          {
            v23 = *(unsigned __int16 *)v42;
            v24 = 29732;
            goto LABEL_77;
          }
        }
        goto LABEL_86;
      }
      v26 = v42;
      v42 = 0;
      v38 = v26;
      llvm::consumeError(&v38);
      v27 = v38;
      if (!v38)
        goto LABEL_85;
LABEL_84:
      (*(void (**)(unint64_t *))(*v27 + 8))(v27);
LABEL_85:
      v21 = v18;
      goto LABEL_86;
  }
  if (v19 != 62208)
    goto LABEL_82;
  (*(void (**)(unint64_t **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v42, a1, a2);
  if ((v44 & 1) != 0)
  {
    v36 = v42;
    v42 = 0;
    v37 = v36;
    llvm::consumeError(&v37);
    v27 = v37;
    if (!v37)
      goto LABEL_85;
    goto LABEL_84;
  }
  if (!v43)
  {
    v21 = v11 | 0x80;
    if ((v44 & 1) == 0)
      goto LABEL_95;
    goto LABEL_87;
  }
  v21 = v18;
  if (v43 != 1)
  {
    v21 = v11 | 0x80;
    if (*(_WORD *)v42 != 25636)
    {
      v23 = *(unsigned __int16 *)v42;
      v24 = 30756;
LABEL_77:
      if (v23 == v24)
        v21 = v11 | 0x80;
      else
        v21 = v18;
      if ((v44 & 1) == 0)
        goto LABEL_95;
      goto LABEL_87;
    }
  }
LABEL_86:
  if ((v44 & 1) == 0)
    goto LABEL_95;
LABEL_87:
  v28 = v42;
  v42 = 0;
  if (v28)
    (*(void (**)(unint64_t *))(*v28 + 8))(v28);
LABEL_95:
  if (!*((_WORD *)v8 + 3))
  {
    v21 |= 1u;
    v30 = *((unsigned __int8 *)v8 + 4);
    v31 = v30 & 0xF;
    if (v31 != 5)
      goto LABEL_101;
LABEL_100:
    v21 |= 0x10u;
    goto LABEL_101;
  }
  v30 = *((unsigned __int8 *)v8 + 4);
  v31 = v30 & 0xF;
  if (v31 == 5 || *((unsigned __int16 *)v8 + 3) == 62207)
    goto LABEL_100;
LABEL_101:
  v32 = v30 >> 4;
  if (v32 <= 0xA && ((1 << v32) & 0x406) != 0)
  {
    v33 = *((_BYTE *)v8 + 5) & 3;
    if (v33 == 3 || (*((_BYTE *)v8 + 5) & 3) == 0)
      v21 |= 0x40u;
  }
  else
  {
    v33 = *((_BYTE *)v8 + 5) & 3;
  }
  if (v31 == 10)
    v34 = v21 | 0x20;
  else
    v34 = v21;
  if (v33 == 2)
    v34 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v34;
  if ((v46 & 1) != 0)
  {
LABEL_113:
    v35 = v45;
    v45 = 0;
    if (v35)
      (*(void (**)(unint64_t *))(*v35 + 8))(v35);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 128);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 32);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
  v3 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = (unint64_t)(bswap64(v2) > 0x17) << 32;
    v5 = ((unint64_t)(v1 - v7) >> 6);
  }
  return v4 | v5;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::symbol_end(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1[16];
  if (!v1)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v2 = *(_QWORD *)(v1 + 32);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(a1 + 7, (uint64_t)&v7);
  v3 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = ((bswap64(v2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64 << 28) & 0xFFFFFFFF00000000;
    v5 = ((unint64_t)(v1 - v7) >> 6);
  }
  return v4 | v5;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolName(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;
  unsigned int *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1 + 7, a2, (uint64_t)&v25);
  if ((v26 & 1) != 0)
  {
    v33 = -1;
    v32 = v25;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v6, (unint64_t *)v25, HIDWORD(a2), (uint64_t)&v32);
    if ((v26 & 1) != 0)
    {
      v7 = v25;
      v25 = 0;
      if (v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
    if ((v33 & 1) == 0)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(v6, a2, (uint64_t)&v30);
      v8 = v30;
      if ((v31 & 1) != 0)
      {
        v30 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v8;
LABEL_31:
        v15 = v30;
        v30 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_33:
        if ((v33 & 1) == 0)
          return;
        goto LABEL_34;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(v6, bswap32(*(_DWORD *)(v30 + 40)), (uint64_t)&v28);
      v9 = v28;
      if ((v29 & 1) != 0)
      {
        v28 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v9;
LABEL_28:
        v14 = v28;
        v28 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_30:
        if ((v31 & 1) == 0)
          goto LABEL_33;
        goto LABEL_31;
      }
      *(_QWORD *)&v23 = llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v23, (uint64_t)&v25);
      if ((v27 & 1) != 0)
      {
        v11 = v25;
        v25 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v11;
LABEL_25:
        v13 = v25;
        v25 = 0;
        if (v13)
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
LABEL_27:
        if ((v29 & 1) == 0)
          goto LABEL_30;
        goto LABEL_28;
      }
      llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,false>>::getName(v32, (uint64_t)v25, v26, (uint64_t)&v23);
      if ((v24 & 1) == 0 && *((_QWORD *)&v23 + 1))
      {
        *(_BYTE *)(a3 + 16) &= ~1u;
LABEL_23:
        *(_OWORD *)a3 = v23;
        goto LABEL_24;
      }
      if ((v32[1] & 0xF) != 3)
      {
        v12 = v24 & 1;
        *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v12;
        if (v12)
        {
          *(_QWORD *)a3 = v23;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 128))(&v20, a1, a2);
      if ((v22 & 1) != 0)
      {
        v17 = v20;
        v20 = 0;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v17;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 144))(v21, v20);
        if ((v22 & 1) == 0)
        {
LABEL_40:
          if ((v24 & 1) != 0)
          {
            v19 = v23;
            *(_QWORD *)&v23 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
LABEL_24:
          if ((v27 & 1) == 0)
            goto LABEL_27;
          goto LABEL_25;
        }
      }
      v18 = v20;
      v20 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      goto LABEL_40;
    }
  }
  v10 = v32;
  v32 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v10;
LABEL_34:
  v16 = v32;
  v32 = 0;
  if (v16)
    (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unsigned int v9;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  char v24;
  unint64_t *v25;
  char v26;
  unint64_t *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v29);
  if ((v30 & 1) == 0)
  {
    v6 = v29;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v22);
    if ((v23 & 1) != 0)
    {
      v28 = -1;
      v27 = v22;
      v8 = v22;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>((_QWORD *)(a1 + 56), v22, HIDWORD(a2), (uint64_t)&v27);
      if ((v23 & 1) != 0)
      {
        v7 = v22;
        v22 = 0;
        if (v7)
          (*(void (**)(unint64_t *))(*v7 + 8))(v7);
      }
      v8 = v27;
      if ((v28 & 1) == 0)
      {
        v9 = bswap32(*((unsigned __int16 *)v27 + 3)) >> 16;
        if (v9 - 65521 < 2 || v9 == 0)
        {
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v6;
          goto LABEL_18;
        }
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v25);
        if ((v26 & 1) != 0)
        {
          v17 = v25;
          v25 = 0;
          goto LABEL_28;
        }
        if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) != 256)
          goto LABEL_34;
        v14 = *(_QWORD *)(a1 + 136);
        if (v14)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSHNDXTable((_QWORD *)(a1 + 56), v14, (uint64_t)&v22);
          if ((v24 & 1) != 0)
          {
            v17 = v22;
            goto LABEL_28;
          }
          v16 = v22;
          v15 = v23;
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
        *(_QWORD *)&v19 = v16;
        *((_QWORD *)&v19 + 1) = v15;
        v20 = 1;
        v21 = 0;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), (uint64_t)v27, v25, &v19, (uint64_t)&v22);
        v17 = v22;
        if ((v23 & 1) == 0)
        {
          if (v22)
            v6 += bswap64(v22[2]);
LABEL_34:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v6;
          if ((v26 & 1) == 0)
            goto LABEL_37;
LABEL_35:
          v18 = v25;
          v25 = 0;
          if (v18)
            (*(void (**)(unint64_t *))(*v18 + 8))(v18);
LABEL_37:
          if ((v28 & 1) == 0)
            goto LABEL_18;
          goto LABEL_16;
        }
LABEL_28:
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v17;
        if ((v26 & 1) == 0)
          goto LABEL_37;
        goto LABEL_35;
      }
    }
    v27 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
LABEL_16:
    v12 = v27;
    v27 = 0;
    if (v12)
      (*(void (**)(unint64_t *))(*v12 + 8))(v12);
LABEL_18:
    if ((v30 & 1) == 0)
      return;
    goto LABEL_19;
  }
  v11 = v29;
  v29 = 0;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v11;
LABEL_19:
  v13 = v29;
  v29 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t result;
  int v6;
  unint64_t *v7;
  unint64_t *v8;
  char v9;
  unint64_t *v10;
  char v11;
  uint64_t v12;

  v2 = HIDWORD(a2);
  v12 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v9 = -1;
    v8 = v10;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v3, v10, v2, (uint64_t)&v8);
    if ((v11 & 1) != 0)
    {
      v4 = v10;
      v10 = 0;
      if (v4)
        (*(void (**)(unint64_t *))(*v4 + 8))(v4);
    }
  }
  if ((v9 & 1) != 0)
  {
    v7 = v8;
    v8 = 0;
    llvm::report_fatal_error((uint64_t *)&v7, 1);
  }
  result = bswap64(v8[1]);
  if (*((__int16 *)v8 + 3) != -3585)
  {
    v6 = *(unsigned __int16 *)(*v3 + 18);
    if ((v6 == 10240 || v6 == 2048) && (*((_BYTE *)v8 + 4) & 0xF) == 2)
      result &= ~1uLL;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  char v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unint64_t *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  if (*((__int16 *)v7 + 3) == -3329)
    return bswap64(v7[1]);
  else
    return 0;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  char v9;
  unint64_t *v10;
  char v11;
  uint64_t v12;

  v3 = HIDWORD(a2);
  v12 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v9 = -1;
    v8 = v10;
    v7 = v10;
LABEL_9:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v5, v10, v3, (uint64_t)&v8);
  if ((v11 & 1) != 0)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(unint64_t *))(*v6 + 8))(v6);
  }
  v7 = v8;
  if ((v9 & 1) != 0)
    goto LABEL_9;
  switch(*((_BYTE *)v8 + 4) & 0xF)
  {
    case 0:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      break;
    case 1:
    case 5:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 2;
      break;
    case 2:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 5;
      break;
    case 3:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 3;
      break;
    case 4:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 4;
      break;
    default:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 1;
      break;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  char v13;
  unint64_t *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1 + 7, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v13 = -1;
    v12 = v14;
LABEL_15:
    v10 = v12;
    v12 = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
    v12 = 0;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v6, v14, HIDWORD(a2), (uint64_t)&v12);
  if ((v15 & 1) != 0)
  {
    v7 = v14;
    v14 = 0;
    if (v7)
      (*(void (**)(unint64_t *))(*v7 + 8))(v7);
  }
  if ((v13 & 1) != 0)
    goto LABEL_15;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(v6, a2, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v11 = v14;
    v14 = 0;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    v14 = 0;
  }
  else
  {
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolSection(a1, (uint64_t)v12, v14, a3);
    if ((v15 & 1) != 0)
    {
      v8 = v14;
      v14 = 0;
      if (v8)
        (*(void (**)(unint64_t *))(*v8 + 8))(v8);
    }
  }
  if ((v13 & 1) != 0)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
      (*(void (**)(unint64_t *))(*v9 + 8))(v9);
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v3)@<X0>(llvm::object *@<X0>, llvm::object **@<X8>);

  v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 16));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v8);
  if ((v9 & 1) != 0)
  {
    v3 = v8;
    v8 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6, &v7);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v8;
  if ((v9 & 1) != 0)
  {
    v8 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return (a2 - (uint64_t)v4) >> 6;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 32));
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContents(__n128 *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  llvm::object *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  std::error_code v16;

  if (*(_DWORD *)(a2 + 4) == 0x8000000)
  {
    v5 = this[1].n128_u64[0];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  llvm::object::Binary::getMemoryBufferRef(this, &v14);
  v8 = this[1].n128_u64[0];
  v9 = bswap64(*(_QWORD *)(a2 + 24));
  v10 = bswap64(*(_QWORD *)(a2 + 32));
  v11 = v10 + v9 + v8;
  if (__CFADD__(v10, v9 + v8)
    || v11 < v10
    || (v9 + v8 >= v14.n128_u64[0] ? (v12 = v11 > v14.n128_u64[0] + v14.n128_u64[1]) : (v12 = 1), v12))
  {
    *(_QWORD *)&v16.__val_ = llvm::object::object_category(v7);
    llvm::errorCodeToError((llvm *)4, v16, &v15);
    v13 = v15;
    if (v15)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v13;
      return;
    }
    v8 = this[1].n128_u64[0];
    v9 = bswap64(*(_QWORD *)(a2 + 24));
    v10 = bswap64(*(_QWORD *)(a2 + 32));
  }
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v8 + v9;
  *(_QWORD *)(a3 + 8) = v10;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 48));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 14) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 15) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::isSectionData(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_DWORD *)(a2 + 4) != 0x1000000)
    return 0;
  v2 = bswap64(*(_QWORD *)(a2 + 8));
  return (v2 & 2) != 0 && (v2 & 4) == 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 15) & 3) != 0 && *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = bswap64(*(_QWORD *)(a2 + 8));
  if ((v2 & 2) == 0)
    return 0;
  if ((v2 & 4) != 0)
    return 1;
  return (v2 & 1) == 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) != 0)
    return 0;
  if (*(_DWORD *)(a2 + 4) == 0x8000000)
    return 0;
  return (*(unsigned __int8 *)(a2 + 15) >> 1) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5)
                        / (unint64_t)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 58)) >> 16));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::section_rel_end(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const std::error_category *v11;
  uint64_t v12;
  uint64_t v13;
  std::error_code v14;
  std::string v15;
  std::string *v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 0x4000000 || v5 == 150994944)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1 + 7, v4, (uint64_t)&v18);
    if ((v19 & 1) != 0)
    {
      v8 = v18;
      v18 = 0;
      v13 = v8;
      v9 = &v13;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1 + 7, bswap32(*(_DWORD *)(v18 + 40)), (uint64_t)&v18);
      if ((v19 & 1) == 0)
      {
        v4 += (bswap64(*(_QWORD *)(a2 + 32)) / bswap64(*(_QWORD *)(a2 + 56))) << 32;
        return v4;
      }
      v10 = v18;
      v18 = 0;
      v12 = v10;
      v9 = &v12;
    }
    *(_QWORD *)&v14.__val_ = llvm::errorToErrorCode((_QWORD **)v9);
    v14.__cat_ = v11;
    std::error_code::message(&v15, &v14);
    v17 = 260;
    v16 = &v15;
    llvm::report_fatal_error((llvm::Twine *)&v16, 1);
  }
  return v4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRelocatedSection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = bswap32(*(_DWORD *)(a2 + 4));
  if (v5 == 4 || v5 == 9)
  {
    result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1 + 7, bswap32(*(_DWORD *)(a2 + 44)), (uint64_t)&v10);
    v7 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v7;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v9;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  std::string *Rel;
  _QWORD *v6;
  const std::error_category *v7;
  _QWORD *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v6 = (_QWORD *)v13;
    v13 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode(&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v12 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  if (*(_DWORD *)(v13 + 4) == 150994944)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRela(a1, a2);
  return bswap64(Rel->__r_.__value_.__r.__words[0]);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::string *Rel;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  const std::error_category *v11;
  _QWORD *v12;
  std::error_code v13;
  std::string v14;
  std::string *v15;
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1 + 7, a2, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v10 = (_QWORD *)v17;
    v17 = 0;
    v12 = v10;
    *(_QWORD *)&v13.__val_ = llvm::errorToErrorCode(&v12);
    v13.__cat_ = v11;
    std::error_code::message(&v14, &v13);
    v16 = 260;
    v15 = &v14;
    llvm::report_fatal_error((llvm::Twine *)&v15, 1);
  }
  v4 = v17;
  if (*(_DWORD *)(v17 + 4) == 150994944)
  {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRel((uint64_t)a1, a2);
    v6 = a1[7];
    if (*(_WORD *)(v6 + 18) != 2048)
      goto LABEL_12;
  }
  else
  {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRela((uint64_t)a1, a2);
    v6 = a1[7];
    if (*(_WORD *)(v6 + 18) != 2048)
      goto LABEL_12;
  }
  if (*(_BYTE *)(v6 + 4) == 2)
  {
    v7 = bswap64(Rel->__r_.__value_.__l.__size_);
    if (*(_BYTE *)(v6 + 5) == 1)
      v8 = v7 << 32;
    else
      v8 = v7;
    if (!HIDWORD(v8))
      return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    return v8 & 0xFFFFFFFF00000000 | bswap32(*(_DWORD *)(v4 + 40));
  }
LABEL_12:
  v8 = bswap64(Rel->__r_.__value_.__l.__size_);
  if (HIDWORD(v8))
    return v8 & 0xFFFFFFFF00000000 | bswap32(*(_DWORD *)(v4 + 40));
  return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  std::string *Rel;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v10;
  const std::error_category *v11;
  _QWORD *v12;
  std::error_code v13;
  std::string v14;
  std::string *v15;
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v10 = (_QWORD *)v17;
    v17 = 0;
    v12 = v10;
    *(_QWORD *)&v13.__val_ = llvm::errorToErrorCode(&v12);
    v13.__cat_ = v11;
    std::error_code::message(&v14, &v13);
    v16 = 260;
    v15 = &v14;
    llvm::report_fatal_error((llvm::Twine *)&v15, 1);
  }
  if (*(_DWORD *)(v17 + 4) == 150994944)
  {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRel(a1, a2);
    v5 = *(_QWORD *)(a1 + 56);
    if (*(_WORD *)(v5 + 18) != 2048)
      goto LABEL_10;
  }
  else
  {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRela(a1, a2);
    v5 = *(_QWORD *)(a1 + 56);
    if (*(_WORD *)(v5 + 18) != 2048)
    {
LABEL_10:
      LODWORD(v8) = bswap64(Rel->__r_.__value_.__l.__size_);
      return v8;
    }
  }
  if (*(_BYTE *)(v5 + 4) != 2)
    goto LABEL_10;
  v6 = bswap64(Rel->__r_.__value_.__l.__size_);
  v7 = *(_BYTE *)(v5 + 5) == 1;
  v8 = (v6 >> 24) & 0xFF0000 | HIBYTE(v6) | (v6 >> 8) & 0xFF000000 | (v6 >> 40) & 0xFF00;
  if (!v7)
    LODWORD(v8) = v6;
  return v8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v51);
  v2 = 0;
  if ((v53 & 1) == 0)
  {
    if (v52)
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
      v5 = v51;
      v49 = v51 + (v52 << 6);
      do
      {
        if (*(_DWORD *)(v5 + 4) == 100663296)
        {
          v6 = (uint64_t *)(bswap64(*(_QWORD *)(v5 + 24)) + *(_QWORD *)(a1 + 16));
          v7 = *v6;
          if (*v6)
          {
            v8 = (unint64_t *)v3;
            do
            {
              while (1)
              {
                if (v7 != 0x1100000000000000 && v7 != 0x700000000000000 && v7 != 0x1700000000000000)
                  goto LABEL_11;
                v13 = bswap64(v6[1]);
                if (v8 >= v4)
                  break;
                *v8++ = v13;
LABEL_11:
                v3 = (uint64_t)v8;
                v10 = v6[2];
                v6 += 2;
                v7 = v10;
                if (!v10)
                  goto LABEL_4;
              }
              v14 = v8 - v2;
              v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 61)
LABEL_80:
                abort();
              if (((char *)v4 - (char *)v2) >> 2 > v15)
                v15 = ((char *)v4 - (char *)v2) >> 2;
              if ((unint64_t)((char *)v4 - (char *)v2) >= 0x7FFFFFFFFFFFFFF8)
                v16 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v16 = v15;
              if (v16)
              {
                if (v16 >> 61)
LABEL_81:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v17 = operator new(8 * v16);
                v18 = (unint64_t *)&v17[8 * v14];
                *v18 = v13;
                v3 = (uint64_t)(v18 + 1);
                if (v8 == v2)
                  goto LABEL_44;
              }
              else
              {
                v17 = 0;
                v18 = (unint64_t *)(8 * v14);
                *(_QWORD *)(8 * v14) = v13;
                v3 = 8 * v14 + 8;
                if (v8 == v2)
                  goto LABEL_44;
              }
              v19 = (char *)(v8 - 1) - (char *)v2;
              if (v19 >= 0x168)
              {
                if (&v17[(char *)v8 - (char *)v2 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v17[(char *)v8 - (char *)v2 - 8])
                {
                  v20 = v8;
                }
                else if ((unint64_t *)((char *)v8 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8) > v8 - 1)
                {
                  v20 = v8;
                }
                else if ((unint64_t)((char *)v2 - v17) >= 0x20)
                {
                  v21 = (v19 >> 3) + 1;
                  v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
                  v20 = &v8[v22 / 0xFFFFFFFFFFFFFFF8];
                  v18 = (unint64_t *)((char *)v18 - v22);
                  v23 = &v17[8 * v14 - 16];
                  v24 = v8 - 2;
                  v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v26 = *(_OWORD *)v24;
                    *(v23 - 1) = *((_OWORD *)v24 - 1);
                    *v23 = v26;
                    v23 -= 2;
                    v24 -= 4;
                    v25 -= 4;
                  }
                  while (v25);
                  if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_44;
                }
                else
                {
                  v20 = v8;
                }
              }
              else
              {
                v20 = v8;
              }
              do
              {
                v27 = *--v20;
                *--v18 = v27;
              }
              while (v20 != v2);
LABEL_44:
              v4 = (unint64_t *)&v17[8 * v16];
              if (v2)
                operator delete(v2);
              v2 = v18;
              v9 = v6[2];
              v6 += 2;
              v7 = v9;
              v8 = (unint64_t *)v3;
            }
            while (v9);
          }
        }
LABEL_4:
        v5 += 64;
      }
      while (v5 != v49);
      if (v52)
      {
        v28 = v51;
        v29 = v51 + (v52 << 6);
        v30 = *a2;
        while (1)
        {
          v32 = (_QWORD *)v3;
          if (v2 != (unint64_t *)v3)
          {
            v33 = bswap64(*(_QWORD *)(v28 + 16));
            v32 = v2;
            while (*v32 != v33)
            {
              if (++v32 == (_QWORD *)v3)
              {
                v32 = (_QWORD *)v3;
                break;
              }
            }
          }
          if (v32 == (_QWORD *)v3)
            goto LABEL_50;
          v35 = a2[1];
          v34 = (unint64_t)a2[2];
          if ((unint64_t)v35 >= v34)
            break;
          *(_QWORD *)v35 = v28;
          *((_QWORD *)v35 + 1) = a1;
          v31 = v35 + 16;
LABEL_49:
          a2[1] = v31;
LABEL_50:
          v28 += 64;
          if (v28 == v29)
            goto LABEL_74;
        }
        v36 = (v35 - v30) >> 4;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
          goto LABEL_80;
        v38 = v34 - (_QWORD)v30;
        if (v38 >> 3 > v37)
          v37 = v38 >> 3;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39 >> 60)
          goto LABEL_81;
        v40 = 16 * v39;
        v41 = (char *)operator new(16 * v39);
        v42 = &v41[16 * v36];
        *(_QWORD *)v42 = v28;
        *((_QWORD *)v42 + 1) = a1;
        if (v35 == v30)
        {
          v44 = &v41[16 * v36];
          v46 = &v41[v40];
          v31 = v42 + 16;
          *a2 = v44;
          a2[1] = v42 + 16;
          a2[2] = v46;
          if (!v30)
            goto LABEL_70;
        }
        else
        {
          v43 = &v41[16 * v36];
          do
          {
            v44 = v43 - 16;
            *((_OWORD *)v43 - 1) = *((_OWORD *)v35 - 1);
            v35 -= 16;
            v43 -= 16;
          }
          while (v35 != v30);
          v45 = &v41[v40];
          v31 = v42 + 16;
          *a2 = v44;
          a2[1] = v42 + 16;
          a2[2] = v45;
          if (!v30)
            goto LABEL_70;
        }
        operator delete(v30);
LABEL_70:
        v30 = v44;
        goto LABEL_49;
      }
    }
    else
    {
      v2 = 0;
    }
  }
LABEL_74:
  if ((v53 & 1) != 0)
  {
    v47 = v51;
    v51 = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  if (v2)
    operator delete(v2);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::section_begin(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::section_end(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + (v2[1] << 6);
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  const char *result;
  unsigned int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    result = "elf64-i386";
    switch(v5)
    {
      case 3u:
        return result;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
LABEL_13:
        result = "elf64-unknown";
        break;
      case 8u:
        result = "elf64-mips";
        break;
      case 0x15u:
        result = "elf64-powerpc";
        break;
      case 0x16u:
        result = "elf64-s390";
        break;
      case 0x2Bu:
        result = "elf64-sparc";
        break;
      case 0x3Eu:
        result = "elf64-x86-64";
        break;
      default:
        switch(v5)
        {
          case 0xE0u:
            result = "elf64-amdgpu";
            break;
          case 0xE1u:
          case 0xE2u:
          case 0xE3u:
          case 0xE4u:
          case 0xE5u:
          case 0xE6u:
          case 0xE7u:
          case 0xE8u:
          case 0xE9u:
          case 0xEAu:
          case 0xEBu:
          case 0xECu:
          case 0xEDu:
          case 0xEEu:
          case 0xEFu:
          case 0xF0u:
          case 0xF1u:
          case 0xF2u:
          case 0xF4u:
          case 0xF5u:
          case 0xF6u:
          case 0xF8u:
          case 0xF9u:
          case 0xFAu:
          case 0xFCu:
          case 0xFDu:
          case 0xFEu:
          case 0xFFu:
          case 0x100u:
          case 0x101u:
            goto LABEL_13;
          case 0xF3u:
            result = "elf64-littleriscv";
            break;
          case 0xF7u:
            result = "elf64-bpf";
            break;
          case 0xFBu:
            result = "elf64-ve";
            break;
          case 0x102u:
            result = "elf64-loongarch";
            break;
          default:
            if (v5 != 183)
              goto LABEL_13;
            result = "elf64-bigaarch64";
            break;
        }
        break;
    }
  }
  else
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
    v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    result = "elf32-m68k";
    switch(v3)
    {
      case 2u:
      case 0x12u:
        result = "elf32-sparc";
        break;
      case 3u:
        result = "elf32-i386";
        break;
      case 4u:
        return result;
      case 5u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x54u:
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
LABEL_24:
        result = "elf32-unknown";
        break;
      case 6u:
        result = "elf32-iamcu";
        break;
      case 8u:
        result = "elf32-mips";
        break;
      case 0x14u:
        result = "elf32-powerpc";
        break;
      case 0x28u:
        result = "elf32-bigarm";
        break;
      case 0x3Eu:
        result = "elf32-x86-64";
        break;
      case 0x53u:
        result = "elf32-avr";
        break;
      case 0x5Eu:
        result = "elf32-xtensa";
        break;
      case 0x69u:
        result = "elf32-msp430";
        break;
      default:
        switch(v3)
        {
          case 0xE0u:
            result = "elf32-amdgpu";
            break;
          case 0xE1u:
          case 0xE2u:
          case 0xE3u:
          case 0xE4u:
          case 0xE5u:
          case 0xE6u:
          case 0xE7u:
          case 0xE8u:
          case 0xE9u:
          case 0xEAu:
          case 0xEBu:
          case 0xECu:
          case 0xEDu:
          case 0xEEu:
          case 0xEFu:
          case 0xF0u:
          case 0xF1u:
          case 0xF2u:
          case 0xF5u:
          case 0xF6u:
          case 0xF7u:
          case 0xF8u:
          case 0xF9u:
          case 0xFAu:
          case 0xFBu:
          case 0xFDu:
          case 0xFEu:
          case 0xFFu:
          case 0x100u:
          case 0x101u:
            goto LABEL_24;
          case 0xF3u:
            result = "elf32-littleriscv";
            break;
          case 0xF4u:
            result = "elf32-lanai";
            break;
          case 0xFCu:
            result = "elf32-csky";
            break;
          case 0x102u:
            result = "elf32-loongarch";
            break;
          default:
            if (v3 != 164)
              goto LABEL_24;
            result = "elf32-hexagon";
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getArch(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  result = 15;
  switch(v2)
  {
    case 2u:
    case 0x12u:
      return 29;
    case 3u:
    case 6u:
      return 37;
    case 4u:
      return result;
    case 5u:
    case 7u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x13u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x29u:
    case 0x2Au:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
      return 0;
    case 8u:
      v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2)
          return 18;
LABEL_34:
        llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
      }
      result = 16;
      break;
    case 0x14u:
      return 21;
    case 0x15u:
      return 23;
    case 0x16u:
      return 32;
    case 0x28u:
      return 1;
    case 0x2Bu:
      return 30;
    case 0x3Eu:
      return 38;
    case 0x53u:
      return 7;
    case 0x5Eu:
      return 40;
    case 0x69u:
      return 20;
    default:
      switch(v2)
      {
        case 0xB7u:
          return 4;
        case 0xB8u:
        case 0xB9u:
        case 0xBAu:
        case 0xBBu:
        case 0xBCu:
        case 0xBDu:
        case 0xBEu:
        case 0xBFu:
        case 0xC0u:
        case 0xC1u:
        case 0xC2u:
        case 0xC3u:
        case 0xC4u:
        case 0xC5u:
        case 0xC6u:
        case 0xC7u:
        case 0xC8u:
        case 0xC9u:
        case 0xCAu:
        case 0xCBu:
        case 0xCCu:
        case 0xCDu:
        case 0xCEu:
        case 0xCFu:
        case 0xD0u:
        case 0xD1u:
        case 0xD2u:
        case 0xD3u:
        case 0xD4u:
        case 0xD5u:
        case 0xD6u:
        case 0xD7u:
        case 0xD8u:
        case 0xD9u:
        case 0xDAu:
        case 0xDBu:
        case 0xDCu:
        case 0xDDu:
        case 0xDEu:
        case 0xDFu:
        case 0xE0u:
        case 0xE1u:
        case 0xE2u:
        case 0xE3u:
        case 0xE4u:
        case 0xE5u:
        case 0xE6u:
        case 0xE7u:
        case 0xE8u:
        case 0xE9u:
        case 0xEAu:
        case 0xEBu:
        case 0xECu:
        case 0xEDu:
        case 0xEEu:
        case 0xEFu:
        case 0xF0u:
        case 0xF1u:
        case 0xF2u:
        case 0xF5u:
        case 0xF6u:
        case 0xF8u:
        case 0xF9u:
        case 0xFAu:
        case 0xFDu:
        case 0xFEu:
        case 0xFFu:
        case 0x100u:
        case 0x101u:
          return 0;
        case 0xF3u:
          v5 = *(unsigned __int8 *)(v1 + 4);
          if (v5 == 1)
            return 27;
          if (v5 != 2)
            goto LABEL_34;
          return 28;
        case 0xF4u:
          return 60;
        case 0xF7u:
          return 9;
        case 0xFBu:
          return 65;
        case 0xFCu:
          return 10;
        case 0x102u:
          v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 == 1)
          {
            result = 13;
          }
          else
          {
            if (v6 != 2)
              goto LABEL_34;
            result = 14;
          }
          break;
        default:
          if (v2 != 164)
            return 0;
          return 12;
      }
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = bswap64(*(_QWORD *)(v2 + 24));
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  char v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unint64_t *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return bswap64(v7[2]);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  char v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unint64_t *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((unsigned __int8 *)v7 + 4) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  char v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unint64_t *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((unsigned __int8 *)v7 + 5);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  char v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v2 = HIDWORD(a2);
  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = -1;
    v7 = v9;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v3, v9, v2, (uint64_t)&v7);
    if ((v10 & 1) != 0)
    {
      v4 = v9;
      v9 = 0;
      if (v4)
        (*(void (**)(unint64_t *))(*v4 + 8))(v4);
    }
  }
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error((uint64_t *)&v6, 1);
  }
  return *((_BYTE *)v7 + 4) & 0xF;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 8));
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 24));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRelocationAddend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  llvm::object *v7;
  char v8;
  _UNKNOWN **v9;
  _QWORD *v10;
  const std::error_category *v11;
  _QWORD *v12;
  std::error_code v13;
  std::string v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v10 = (_QWORD *)v17;
    v17 = 0;
    v12 = v10;
    *(_QWORD *)&v13.__val_ = llvm::errorToErrorCode(&v12);
    v13.__cat_ = v11;
    std::error_code::message(&v14, &v13);
    v16 = 260;
    v15[0] = &v14;
    llvm::report_fatal_error((llvm::Twine *)v15, 1);
  }
  if (*(_DWORD *)(v17 + 4) == 0x4000000)
  {
    result = (uint64_t)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRela(a1, a2);
    v7 = (llvm::object *)bswap64(*(_QWORD *)(result + 16));
    v8 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v15[0] = "Section is not SHT_RELA";
    v16 = 259;
    v7 = (llvm::object *)operator new(0x38uLL);
    v9 = llvm::object::object_category(v7);
    result = llvm::StringError::StringError((uint64_t)v7, (llvm::Twine *)v15, 3, (uint64_t)v9);
    v8 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v8;
  *(_QWORD *)a3 = v7;
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getBuildAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::size_type *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  _BYTE *v10;
  std::string::size_type v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  std::string::size_type v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = v18 << 6;
  while (*v6 != 50331760)
  {
    v6 += 16;
    v7 -= 64;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (std::string::size_type)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 0, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = a1;
  v16 = *MEMORY[0x1E0C80C00];
  v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::dynamic_symbol_begin(a1);
  v6 = v5;
  v7 = *(_QWORD *)(v2 + 120);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 32);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections((_QWORD *)(v2 + 56), (uint64_t)&v14);
    v9 = v14;
    if ((v15 & 1) != 0)
    {
      v14 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v11 = 0;
      v10 = 0;
    }
    else
    {
      v10 = ((bswap64(v8) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64 << 28) & 0xFFFFFFFF00000000;
      v11 = ((unint64_t)(v7 - v14) >> 6);
    }
    result = v10 | v11;
  }
  else
  {
    result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::dynamic_symbol_begin(v2);
    v2 = v13;
  }
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getPlatformFlags(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 56) + 48));
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = a1[17];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(a1 + 7, (uint64_t)&v22);
    if ((v24 & 1) != 0)
    {
      v21 = -1;
      v20[0] = v22;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSHNDXTable(a1 + 7, v8, v22, v23, (uint64_t)v20);
      if ((v24 & 1) != 0)
      {
        v9 = v22;
        v22 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      if ((v21 & 1) == 0)
      {
        v11 = v20[0];
        v10 = v20[1];
        goto LABEL_9;
      }
    }
    v14 = v20[0];
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v14;
    return;
  }
  v10 = 0;
  v11 = 0;
LABEL_9:
  *(_QWORD *)&v17 = v11;
  *((_QWORD *)&v17 + 1) = v10;
  v18 = 1;
  v19 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection(a1 + 7, a2, a3, &v17, (uint64_t)&v22);
  v12 = v22;
  if ((v23 & 1) != 0)
  {
    v22 = 0;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v12;
LABEL_13:
    v13 = v22;
    v22 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return;
  }
  if (v22)
  {
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = a1;
    return;
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
  *(_BYTE *)(a4 + 16) &= ~1u;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v16;
  if ((v23 & 1) != 0)
    goto LABEL_13;
}

std::string *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRel(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  std::string *v4;
  std::string::__raw *v6;
  const std::error_category *v7;
  std::string::__raw *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  char v12;
  __int16 v13;
  std::string *v14;
  char v15;
  uint64_t v16;

  v2 = HIDWORD(a2);
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v15 = -1;
    v14 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,true>,false>>(v3, (unint64_t *)v11, v2, (uint64_t)&v14);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(std::string *))(v4->__r_.__value_.__r.__words[0] + 8))(v4);
    }
  }
  if ((v15 & 1) != 0)
  {
    v6 = (std::string::__raw *)v14;
    v14 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode((_QWORD **)&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v13 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  return v14;
}

std::string *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getRela(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  std::string *v4;
  std::string::__raw *v6;
  const std::error_category *v7;
  std::string::__raw *v8;
  std::error_code v9;
  std::string v10;
  std::string *v11;
  char v12;
  __int16 v13;
  std::string *v14;
  char v15;
  uint64_t v16;

  v2 = HIDWORD(a2);
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v15 = -1;
    v14 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::endianness)0,true>>>(v3, (unint64_t *)v11, v2, (uint64_t)&v14);
    if ((v12 & 1) != 0)
    {
      v4 = v11;
      v11 = 0;
      if (v4)
        (*(void (**)(std::string *))(v4->__r_.__value_.__r.__words[0] + 8))(v4);
    }
  }
  if ((v15 & 1) != 0)
  {
    v6 = (std::string::__raw *)v14;
    v14 = 0;
    v8 = v6;
    *(_QWORD *)&v9.__val_ = llvm::errorToErrorCode((_QWORD **)&v8);
    v9.__cat_ = v7;
    std::error_code::message(&v10, &v9);
    v13 = 260;
    v11 = &v10;
    llvm::report_fatal_error((llvm::Twine *)&v11, 1);
  }
  return v14;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,true>,false>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  llvm::object *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::endianness)0,true>,false>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v8 = v22[0];
    v22[0] = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_6:
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 16 * a3;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v7;
    return;
  }
  v13 = 16 * a3;
  v14[0] = "can't read an entry at 0x";
  v14[2] = &v13;
  v15 = 3843;
  v16[0] = v14;
  v16[2] = ": it goes past the end of the section (0x";
  v17 = 770;
  v12 = bswap64(a2[4]);
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3842;
  v20[0] = v18;
  v20[2] = ")";
  v21 = 770;
  v9 = (llvm::object *)operator new(0x38uLL);
  v10 = llvm::object::object_category(v9);
  llvm::StringError::StringError((uint64_t)v9, (llvm::Twine *)v20, 3, (uint64_t)v10);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v23 & 1) != 0)
    goto LABEL_6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 120);
  if (!v1)
    return 0;
  v2 = (_QWORD *)(a1 + 56);
  if (bswap64(*(_QWORD *)(v1 + 32)) <= 0x17)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(v2, (uint64_t)v8);
    v3 = v8[0];
    if ((v9 & 1) == 0)
      return ((unint64_t)(v1 - v8[0]) >> 6);
    v8[0] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::endianness)0,true>>::sections(v2, (uint64_t)v8);
  v5 = v8[0];
  if ((v9 & 1) != 0)
  {
    v8[0] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = ((unint64_t)(v1 - v8[0]) >> 6);
    v7 = 0x100000000;
  }
  return v7 | v6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  __int128 v13;
  void *__p;
  void *v15;
  char *v16;
  void *__dst;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];

  v4 = *(_OWORD *)(a2 + 32);
  v20[0] = *(_OWORD *)(a2 + 16);
  v20[1] = v4;
  v13 = *(_OWORD *)(a2 + 56);
  v15 = 0;
  v16 = 0;
  __p = 0;
  v6 = *(_BYTE **)(a2 + 72);
  v5 = *(_BYTE **)(a2 + 80);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v5 - v6);
    v9 = &v8[64 * (v7 >> 6)];
    __p = v8;
    v16 = v9;
    memcpy(v8, v6, v7);
    v15 = v9;
  }
  v18 = 0;
  v19 = 0;
  __dst = v20;
  if (&v13 != (__int128 *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 104);
    if (v10)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v20, *(_QWORD *)(a2 + 104), 1);
      v11 = *(_QWORD *)(a2 + 104);
      if (v11)
        memcpy(__dst, *(const void **)(a2 + 96), v11);
      v18 = v10;
    }
  }
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::endianness)0,true>>::ELFObjectFile(a1, v20, (uint64_t)&v13, *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136));
  if (__dst != v20)
    free(__dst);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return a1;
}

llvm::object::GenericBinaryError *llvm::object::GenericBinaryError::GenericBinaryError(llvm::object::GenericBinaryError *this, const llvm::Twine *a2)
{
  unsigned __int8 v4;

  *(_QWORD *)this = off_1E0E257B0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = std::system_category();
  *(_QWORD *)this = off_1E0E24250;
  {
  }
  *((_QWORD *)this + 1) = 3;
  *((_QWORD *)this + 2) = &llvm::object::object_category(void)::error_category;
  *(_QWORD *)this = off_1E0E253C8;
  llvm::Twine::str(a2, (std::string *)this + 1);
  return this;
}

uint64_t llvm::object::GenericBinaryError::GenericBinaryError(uint64_t a1, llvm::Twine *a2, unsigned int a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;

  *(_QWORD *)a1 = off_1E0E257B0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = std::system_category();
  *(_QWORD *)a1 = off_1E0E24250;
  {
  }
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = &llvm::object::object_category(void)::error_category;
  *(_QWORD *)a1 = off_1E0E253C8;
  llvm::Twine::str(a2, (std::string *)(a1 + 24));
  {
  }
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = &llvm::object::object_category(void)::error_category;
  return a1;
}

llvm::raw_ostream *llvm::object::GenericBinaryError::log(llvm::object::GenericBinaryError *this, llvm::raw_ostream *a2)
{
  char *v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  size_t v8;

  v5 = (const char *)*((_QWORD *)this + 3);
  v3 = (char *)this + 24;
  v4 = v5;
  v6 = v3[23];
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = v3[23];
  else
    v8 = *((_QWORD *)v3 + 1);
  return llvm::raw_ostream::write(a2, v7, v8);
}

_UNKNOWN **llvm::object::object_category(llvm::object *this)
{
  unsigned __int8 v1;

    return &llvm::object::object_category(void)::error_category;
  return &llvm::object::object_category(void)::error_category;
}

void *llvm::ErrorInfo<llvm::object::BinaryError,llvm::ECError>::dynamicClassID()
{
  return &llvm::object::BinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::BinaryError,llvm::ECError>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::BinaryError::ID || v3;
}

void llvm::object::GenericBinaryError::~GenericBinaryError(void **this)
{
  *this = off_1E0E253C8;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  llvm::object::GenericBinaryError *v1;

  v1 = (llvm::object::GenericBinaryError *)this;
  *this = off_1E0E253C8;
  if (*((char *)this + 47) < 0)
  {
    operator delete(this[3]);
    this = (void **)v1;
  }
  operator delete(this);
}

void *llvm::ErrorInfo<llvm::object::GenericBinaryError,llvm::object::BinaryError>::dynamicClassID()
{
  return &llvm::object::GenericBinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::GenericBinaryError,llvm::object::BinaryError>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::GenericBinaryError::ID || a2 == &llvm::object::BinaryError::ID || v3;
}

void `anonymous namespace'::_object_error_category::~_object_error_category(std::error_category *this)
{
  void *v1;

  std::error_category::~error_category(this);
  operator delete(v1);
}

const char *`anonymous namespace'::_object_error_category::name(_anonymous_namespace_::_object_error_category *this)
{
  return "llvm.object";
}

void `anonymous namespace'::_object_error_category::message(_anonymous_namespace_::_object_error_category *this, int a2)
{
  __asm { BR              X10 }
}

double sub_180BFE220()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_1812674D0;
  strcpy(v1, "No object file for requested architecture");
  return *(double *)"ted architecture";
}

double sub_180BFE260()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_1812674C0;
  strcpy(v1, "The file was not recognized as a valid object file");
  return *(double *)" valid object file";
}

double sub_180BFE2A8()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_1812674B0;
  strcpy(v1, "Invalid data was encountered while parsing the file");
  return *(double *)"le parsing the file";
}

double sub_180BFE2F4()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_1812674A0;
  strcpy(v1, "The end of the file was unexpectedly encountered");
  return *(double *)"edly encountered";
}

double sub_180BFE334()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_181267490;
  strcpy(v1, "String table must end with a null terminator");
  return *(double *)" null terminator";
}

void sub_180BFE374()
{
  char *v0;

  v0[23] = 21;
  strcpy(v0, "Invalid section index");
}

char *sub_180BFE3A4()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_181267480;
  strcpy(result, "Bitcode section not found in object file");
  return result;
}

void sub_180BFE3E4()
{
  char *v0;

  v0[23] = 20;
  strcpy(v0, "Invalid symbol index");
}

double sub_180BFE418()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_181267470;
  strcpy(v1, "Section has been stripped from the object file");
  return *(double *)" the object file";
}

void llvm::object::IRObjectFile::~IRObjectFile(llvm **this)
{
  *this = (llvm *)off_1E0E242A0;
  llvm::deallocate_buffer(this[25], (void *)(16 * *((unsigned int *)this + 54)));
}

{
  llvm::object::IRObjectFile::~IRObjectFile(this);
}

void sub_180BFE51C(void *__p)
{
  operator delete(__p);
}

void llvm::object::IRObjectFile::moveSymbolNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 8;
}

void llvm::object::IRObjectFile::printSymbolName(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  llvm::ModuleSymbolTable::printSymbolName(a1 + 72, a2, *a3);
  *a4 = 0;
}

uint64_t llvm::object::IRObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = llvm::ModuleSymbolTable::getSymbolFlags(a1 + 72, *a2);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = result;
  return result;
}

uint64_t llvm::object::IRObjectFile::symbol_begin(llvm::object::IRObjectFile *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t llvm::object::IRObjectFile::symbol_end(llvm::object::IRObjectFile *this)
{
  return *((_QWORD *)this + 23);
}

llvm::object *llvm::object::IRObjectFile::findBitcodeInObject@<X0>(llvm::object::IRObjectFile *this@<X0>, const llvm::object::ObjectFile *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::object *v8;
  uint64_t v9;
  llvm::object *v11;
  uint64_t v12;
  llvm::object *result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  std::error_code v27;
  std::error_code v28;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(llvm::object::IRObjectFile *, const llvm::object::ObjectFile *))(*(_QWORD *)this
                                                                                                 + 352))(this, a2);
  v7 = v6;
  v8 = (llvm::object *)(*(uint64_t (**)(llvm::object::IRObjectFile *))(*(_QWORD *)this + 360))(this);
  v21 = v5;
  v22 = v7;
  if (v7 == v9 && v5 == (_QWORD)v8)
  {
LABEL_12:
    *(_QWORD *)&v27.__val_ = llvm::object::object_category(v8);
    result = (llvm::object *)llvm::errorCodeToError((llvm *)7, v27, &v19);
    *(_BYTE *)(a3 + 32) |= 1u;
    v15 = v19;
  }
  else
  {
    v11 = v8;
    v12 = v9;
    while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 232))(v7, v5))
    {
      v8 = (llvm::object *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 136))(v22, &v21);
      v5 = v21;
      v7 = v22;
      if (v22 == v12 && v21 == (_QWORD)v11)
        goto LABEL_12;
    }
    result = (llvm::object *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v22 + 176))(&v23, v22, v21);
    v16 = v23;
    if ((v25 & 1) != 0)
    {
      *(_BYTE *)(a3 + 32) |= 1u;
      *(_QWORD *)a3 = v16;
      return result;
    }
    v17 = v24;
    if (v24 > 1)
    {
      result = (llvm::object *)llvm::object::Binary::getFileName(this);
      *(_BYTE *)(a3 + 32) &= ~1u;
      *(_QWORD *)a3 = v16;
      *(_QWORD *)(a3 + 8) = v17;
      *(_QWORD *)(a3 + 16) = result;
      *(_QWORD *)(a3 + 24) = v18;
      return result;
    }
    *(_QWORD *)&v28.__val_ = llvm::object::object_category(result);
    result = (llvm::object *)llvm::errorCodeToError((llvm *)7, v28, &v20);
    *(_BYTE *)(a3 + 32) |= 1u;
    v15 = v20;
  }
  *(_QWORD *)a3 = v15;
  return result;
}

uint64_t llvm::object::IRObjectFile::findBitcodeInMemBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  const llvm::object::ObjectFile *v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  llvm::object::IRObjectFile *v10;
  char v11;
  uint64_t v12;
  std::error_code v13;

  v12 = *MEMORY[0x1E0C80C00];
  result = llvm::identify_magic(*(unsigned __int16 **)a1, *(_QWORD *)(a1 + 8));
  if (result > 0x21)
  {
LABEL_9:
    *(_QWORD *)&v13.__val_ = llvm::object::object_category((llvm::object *)result);
    result = (uint64_t)llvm::errorCodeToError((llvm *)2, v13, &v8);
    *(_BYTE *)(a2 + 32) |= 1u;
    *(_QWORD *)a2 = v8;
    return result;
  }
  if (((1 << result) & 0x208000210) == 0)
  {
    if (result == 1)
    {
      *(_BYTE *)(a2 + 32) &= ~1u;
      v7 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    }
    goto LABEL_9;
  }
  v5 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v5;
  llvm::object::ObjectFile::createObjectFile((uint64_t)v9, result);
  result = (uint64_t)v10;
  if ((v11 & 1) != 0)
  {
    *(_BYTE *)(a2 + 32) |= 1u;
    *(_QWORD *)a2 = result;
  }
  else
  {
    llvm::object::IRObjectFile::findBitcodeInObject(v10, v6, a2);
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void llvm::object::IRObjectFile::create(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  char v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  llvm::Module *v23;
  uint64_t v24;
  void *v25;
  __int128 *v26;
  llvm::Module **v27;
  void *v28;
  uint64_t v29;
  llvm::ModuleSymbolTable *v30;
  llvm::Module *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  llvm::Module *v35;
  llvm::Module *v36;
  void *v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[3];
  _OWORD v45[2];
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  llvm::Module *v54;
  char v55;
  __int128 *v56;
  __int128 *v57;
  char v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v46[0] = *a1;
  v46[1] = v5;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v46, (uint64_t)&v59);
  if ((v61 & 1) != 0)
  {
    v26 = (__int128 *)v59;
    *(_QWORD *)&v59 = 0;
LABEL_38:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v26;
    return;
  }
  v45[0] = v59;
  v45[1] = v60;
  llvm::getBitcodeModuleList(v45, (uint64_t)&v56);
  if ((v58 & 1) != 0)
  {
    v26 = v56;
    goto LABEL_38;
  }
  v6 = 0uLL;
  memset(__p, 0, sizeof(__p));
  v7 = v56;
  v8 = v57;
  if (v56 != v57)
  {
    v9 = *(unsigned __int8 *)(a3 + 8);
    while (1)
    {
      v10 = *v7;
      v11 = v7[1];
      v12 = v7[3];
      v42 = v7[2];
      v43 = v12;
      v40 = v10;
      v41 = v11;
      v47 = 0u;
      v48 = 0u;
      memset(v49, 0, sizeof(v49));
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0;
      llvm::BitcodeModule::getLazyModule(&v40, a2, 1u, 0, (uint64_t)&v47, (uint64_t)&v54);
      if (!(_BYTE)v53)
        goto LABEL_13;
      v13 = (__int128 *)*((_QWORD *)&v52 + 1);
      if (*((__int128 **)&v52 + 1) == &v51)
      {
        v13 = &v51;
        v14 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v52 + 1))
          goto LABEL_13;
        v14 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_13:
      if (!BYTE8(v50))
        goto LABEL_19;
      v15 = (_QWORD *)v50;
      if ((_OWORD *)v50 == (_OWORD *)((char *)v49 + 8))
      {
        v15 = (_QWORD *)v49 + 1;
        v16 = 4;
      }
      else
      {
        if (!(_QWORD)v50)
          goto LABEL_19;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_19:
      if (!LOBYTE(v49[0]))
        goto LABEL_25;
      v17 = (__int128 *)*((_QWORD *)&v48 + 1);
      if (*((__int128 **)&v48 + 1) == &v47)
      {
        v17 = &v47;
        v18 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v48 + 1))
          goto LABEL_25;
        v18 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_25:
      v19 = v55;
      if ((v55 & 1) != 0)
      {
        v23 = 0;
        v24 = (uint64_t)v54;
        v9 |= 1u;
        *(_BYTE *)(a3 + 8) = v9;
        *(_QWORD *)a3 = v24;
        v54 = 0;
LABEL_29:
        if (v23)
          (*(void (**)(llvm::Module *))(*(_QWORD *)v23 + 8))(v23);
        goto LABEL_5;
      }
      v20 = (char *)__p[1];
      if (__p[1] >= __p[2])
      {
        v22 = std::vector<std::unique_ptr<llvm::Module>>::__push_back_slow_path<std::unique_ptr<llvm::Module>>(__p, (uint64_t *)&v54);
      }
      else
      {
        v21 = (uint64_t)v54;
        v54 = 0;
        *(_QWORD *)__p[1] = v21;
        v22 = v20 + 8;
      }
      __p[1] = v22;
      v23 = v54;
      v54 = 0;
      if ((v55 & 1) != 0)
        goto LABEL_29;
      if (v23)
      {
        llvm::Module::~Module(v23);
        operator delete(v25);
        if ((v19 & 1) != 0)
          goto LABEL_45;
        goto LABEL_6;
      }
LABEL_5:
      if ((v19 & 1) != 0)
        goto LABEL_45;
LABEL_6:
      v7 += 4;
      if (v7 == v8)
      {
        v27 = (llvm::Module **)__p[0];
        v6 = *(_OWORD *)&__p[1];
        goto LABEL_42;
      }
    }
  }
  v27 = 0;
LABEL_42:
  v39 = v6;
  v28 = operator new(0xE0uLL);
  v40 = v59;
  v41 = v60;
  memset(__p, 0, sizeof(__p));
  llvm::object::SymbolicFile::SymbolicFile((uint64_t)v28, 3, &v40);
  *(_QWORD *)v29 = off_1E0E242A0;
  *(_QWORD *)(v29 + 48) = v27;
  *(_OWORD *)(v29 + 56) = v39;
  *(_QWORD *)(v29 + 72) = 0;
  v30 = (llvm::ModuleSymbolTable *)(v29 + 72);
  *(_QWORD *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 96) = v29 + 112;
  *(_QWORD *)(v29 + 104) = 0x400000000;
  *(_QWORD *)(v29 + 144) = v29 + 160;
  *(_OWORD *)(v29 + 152) = 0u;
  *(_OWORD *)(v29 + 168) = 0u;
  *(_OWORD *)(v29 + 184) = 0u;
  *(_OWORD *)(v29 + 200) = 0u;
  *(_DWORD *)(v29 + 216) = 0;
  while (v27 != (llvm::Module **)v39)
  {
    v31 = *v27++;
    llvm::ModuleSymbolTable::addModule(v30, v31);
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v28;
LABEL_45:
  v32 = __p[0];
  if (__p[0])
  {
    v33 = __p[1];
    v34 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v36 = (llvm::Module *)*--v33;
        v35 = v36;
        *v33 = 0;
        if (v36)
        {
          llvm::Module::~Module(v35);
          operator delete(v37);
        }
      }
      while (v33 != v32);
      v34 = __p[0];
    }
    __p[1] = v32;
    operator delete(v34);
  }
  v38 = v56;
  if ((v58 & 1) != 0)
  {
    v56 = 0;
    if (v38)
      (*(void (**)(__int128 *))(*(_QWORD *)v38 + 8))(v38);
  }
  else if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

BOOL llvm::object::IRObjectFile::is64Bit(llvm::object::IRObjectFile *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL8 result;
  _BOOL8 v8;
  _QWORD v9[4];
  __int16 v10;
  void *__p[2];
  char v12;

  v1 = **((_QWORD **)this + 6);
  v4 = *(_QWORD *)(v1 + 208);
  v2 = v1 + 208;
  v3 = v4;
  v5 = *(char *)(v2 + 23);
  if (v5 >= 0)
    v3 = v2;
  v6 = *(_QWORD *)(v2 + 8);
  if (v5 >= 0)
    v6 = v5;
  v10 = 261;
  v9[0] = v3;
  v9[1] = v6;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v9);
  result = llvm::Triple::isArch64Bit((llvm::Triple *)__p);
  v8 = result;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    return v8;
  }
  return result;
}

_QWORD *std::vector<std::unique_ptr<llvm::Module>>::__push_back_slow_path<std::unique_ptr<llvm::Module>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  llvm::Module *v27;
  llvm::Module *v28;
  void *v29;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = (llvm::Module *)*((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        llvm::Module::~Module(v27);
        operator delete(v29);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void llvm::DataLayout::getTypeSizeInBits(llvm::DataLayout *this, Type *a2)
{
  __asm { BR              X11 }
}

uint64_t sub_180BFEE88()
{
  return 64;
}

char *_GLOBAL__sub_I_IRSymtab_cpp()
{
  char *result;
  char *v1;
  __int128 v2;
  int v3;

  v3 = 1;
  *(_QWORD *)&v2 = "Disable automatic bitcode upgrade for version mismatch";
  *((_QWORD *)&v2 + 1) = 54;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [38],llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&unk_1ECD34148, (int8x16_t *)"disable-bitcode-version-upgrade", &v3, &v2);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD34148, &dword_18013D000);
  result = getenv("LLVM_OVERRIDE_PRODUCER");
  if (result)
    v1 = result;
  _MergedGlobals_59 = (uint64_t)v1;
  return result;
}

uint64_t llvm::object::MachOObjectFile::MachOObjectFile(uint64_t a1, __int128 *a2, int a3, int a4, uint64_t *a5, int a6, unsigned int a7, uint64_t a8)
{
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int8x16_t v31;
  int8x8_t v32;
  unsigned int v33;
  unsigned __int32 v34;
  unsigned int v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t Data;
  uint64_t v41;
  void *v42;
  unsigned int v44;
  int8x16_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  _QWORD *v52;
  int v53;
  void *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  BOOL v65;
  int8x16_t v67;
  unint64_t v68;
  unint64_t v69;
  int8x16_t *v70;
  llvm::object::Binary *v71;
  unsigned int v72;
  char *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  const char *v87;
  char v88;
  uint64_t *v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  const char *v111;
  unsigned int v112;
  char *v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  void *v121;
  char *v122;
  char *v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  llvm::object::Binary *v129;
  unsigned int v130;
  _QWORD *v131;
  uint64_t v132;
  int v133;
  char *v134;
  llvm::object::Binary *v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  BOOL v173;
  unsigned int v174;
  unsigned __int8 *v175;
  uint64_t v177;
  unint64_t v178;
  int v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  char v185;
  const char *v186;
  int v187;
  const char *v188;
  unsigned int v189;
  char v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  unint64_t v198;
  int v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  BOOL v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  BOOL v209;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  unint64_t v219;
  uint64_t v220;
  BOOL v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  BOOL v227;
  const char *v229;
  int8x16_t *v230;
  void *v231;
  uint64_t v232;
  const char *v233;
  const char *v234;
  int8x16_t *v235;
  BOOL v237;
  uint64_t v238;
  const char *v239;
  const char *v240;
  const char *v241;
  const char *v242;
  const char *v243;
  void *v244;
  const char *v245;
  const char *v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  const char *v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  const char *v257;
  int v258;
  const char *v259;
  void *v260;
  const char *v261;
  const char *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  const char *v267;
  const char *v268;
  uint64_t v269;
  const char *v270;
  uint64_t v271;
  const char *v272;
  const char *v273;
  void *v274;
  void *v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unint64_t v282;
  unsigned int v283;
  unsigned int v284;
  unint64_t v285;
  unsigned int v286;
  unint64_t v287;
  unint64_t v288;
  unsigned int v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  uint64_t v294;
  unsigned int v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unint64_t v301;
  unint64_t v302;
  int8x16_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  const char *v311;
  unsigned int v312;
  unint64_t v313;
  unint64_t v314;
  void *v315;
  void *v316;
  void *v317;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int8x16_t v326;
  _QWORD *v327;
  uint64_t *v328;
  uint64_t v329;
  _OWORD v330[2];
  _QWORD v331[2];
  uint64_t v332;
  __int16 v333;
  uint64_t v334[2];
  const char *v335;
  __int16 v336;
  uint64_t v337[2];
  const char *v338;
  __int16 v339;
  uint64_t v340[2];
  const char *v341;
  __int16 v342;
  uint64_t v343[2];
  unint64_t v344;
  __int16 v345;
  uint64_t v346[2];
  const char *v347;
  __int16 v348;
  uint64_t v349[2];
  const char *v350;
  __int16 v351;
  int8x16_t v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  int8x16_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  char v362;
  int8x16_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  uint64_t v367;
  int8x16_t v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  uint64_t v372;
  char v373;
  int8x16_t v374;
  const char *v375;
  __int16 v376;
  uint64_t v377;

  v377 = *MEMORY[0x1E0C80C00];
  if (a4)
    v12 = 19;
  else
    v12 = 17;
  if (a4)
    v13 = 20;
  else
    v13 = 18;
  v14 = *a2;
  v15 = a2[1];
  if (a3)
    v16 = v12;
  else
    v16 = v13;
  v330[0] = v14;
  v330[1] = v15;
  llvm::object::ObjectFile::ObjectFile(a1, v16, v330);
  v315 = (void *)(v17 + 96);
  *(_QWORD *)(v17 + 80) = v17 + 96;
  v18 = v17 + 80;
  *(_QWORD *)v17 = off_1E0E25028;
  *(_QWORD *)(v17 + 88) = 0x100000000;
  v316 = (void *)(v17 + 120);
  *(_QWORD *)(v17 + 104) = v17 + 120;
  v19 = v17 + 104;
  v317 = (void *)(v17 + 144);
  *(_QWORD *)(v17 + 128) = v17 + 144;
  v20 = v17 + 128;
  *(_QWORD *)(v17 + 112) = 0x100000000;
  *(_QWORD *)(v17 + 136) = 0x400000000;
  v21 = (void *)(v17 + 224);
  *(_QWORD *)(v17 + 208) = v17 + 224;
  v22 = (_QWORD *)(v17 + 208);
  *(_QWORD *)(v17 + 216) = 0x100000000;
  *(_QWORD *)(v17 + 232) = v17 + 248;
  *(_QWORD *)(v17 + 240) = 0x100000000;
  *(_OWORD *)(v17 + 264) = 0u;
  *(_OWORD *)(v17 + 280) = 0u;
  *(_OWORD *)(v17 + 296) = 0u;
  *(_OWORD *)(v17 + 312) = 0u;
  *(_OWORD *)(v17 + 328) = 0u;
  *(_BYTE *)(v17 + 344) = 0;
  v23 = *(_DWORD *)(v17 + 8) - 19;
  *(_QWORD *)(v17 + 352) = 0;
  *(_QWORD *)(v17 + 360) = a8;
  llvm::object::Binary::getData((llvm::object::Binary *)v17);
  if (v23 > 1)
  {
    if (v24 > 0x1B)
    {
      v38 = *(_QWORD *)(a1 + 360);
      v39 = llvm::object::Binary::getData((llvm::object::Binary *)a1) + v38;
      if (v39 >= llvm::object::Binary::getData((llvm::object::Binary *)a1))
      {
        Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
        if (v39 + 28 <= Data + v41)
        {
          v44 = *(_DWORD *)v39;
          v30 = *(unsigned int *)(v39 + 4);
          v45 = *(int8x16_t *)(v39 + 8);
          v35 = *(_DWORD *)(v39 + 24);
          v46 = *(_DWORD *)(a1 + 8);
          if (v46 <= 0x14 && ((1 << v46) & 0x155800) != 0)
          {
            v44 = bswap32(v44);
            v30 = bswap32(v30);
            v45 = vrev32q_s8(v45);
            v35 = bswap32(v35);
          }
          *(_QWORD *)(a1 + 48) = v44 | (unint64_t)(v30 << 32);
          *(int8x16_t *)(a1 + 56) = v45;
          *(_DWORD *)(a1 + 72) = v35;
          v34 = v45.u32[3];
          v36 = 28;
          if (*a5)
            return a1;
          goto LABEL_30;
        }
      }
      goto LABEL_23;
    }
LABEL_20:
    v37 = "the mach header extends past the end of the file";
LABEL_24:
    v368.i64[0] = (uint64_t)"truncated or malformed object (";
    *(_QWORD *)&v369 = v37;
    LOWORD(v370) = 771;
    v357.i64[0] = (uint64_t)&v368;
    *(_QWORD *)&v358 = ")";
    LOWORD(v359) = 770;
    v42 = operator new(0x30uLL);
    *a5 = llvm::object::GenericBinaryError::GenericBinaryError(v42, &v357, 3);
    return a1;
  }
  if (v24 <= 0x1F)
    goto LABEL_20;
  v25 = *(_QWORD *)(a1 + 360);
  v26 = llvm::object::Binary::getData((llvm::object::Binary *)a1) + v25;
  if (v26 < llvm::object::Binary::getData((llvm::object::Binary *)a1)
    || (v27 = llvm::object::Binary::getData((llvm::object::Binary *)a1), v26 + 32 > v27 + v28))
  {
LABEL_23:
    v37 = "Structure read out-of-range";
    goto LABEL_24;
  }
  v29 = *(_DWORD *)v26;
  v30 = *(unsigned int *)(v26 + 4);
  v31 = *(int8x16_t *)(v26 + 8);
  v32 = *(int8x8_t *)(v26 + 24);
  v33 = *(_DWORD *)(a1 + 8);
  if (v33 <= 0x14 && ((1 << v33) & 0x155800) != 0)
  {
    v29 = bswap32(v29);
    v30 = bswap32(v30);
    v31 = vrev32q_s8(v31);
    v32 = vrev32_s8(v32);
  }
  *(_QWORD *)(a1 + 48) = v29 | (unint64_t)(v30 << 32);
  *(int8x16_t *)(a1 + 56) = v31;
  *(int8x8_t *)(a1 + 72) = v32;
  v34 = v31.u32[3];
  v35 = v32.i32[0];
  v36 = 32;
  if (*a5)
    return a1;
LABEL_30:
  v312 = v35;
  v314 = v36 + v34;
  v47 = llvm::object::Binary::getData((llvm::object::Binary *)a1) + v314;
  v48 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v47 > v48 + v49)
  {
    v37 = "load commands extend past the end of the file";
    goto LABEL_24;
  }
  v50 = a5;
  if (a6 && (_DWORD)v30 != a6)
  {
    v363.i64[0] = (uint64_t)"universal header architecture: ";
    *(_QWORD *)&v364 = a7;
    LOWORD(v365) = 2307;
    v352.i64[0] = (uint64_t)&v363;
    *(_QWORD *)&v353 = "'s cputype does not match object file's mach header";
    LOWORD(v354) = 770;
    v368.i64[0] = (uint64_t)"truncated or malformed object (";
    *(_QWORD *)&v369 = &v352;
    LOWORD(v370) = 515;
    v357.i64[0] = (uint64_t)&v368;
    *(_QWORD *)&v358 = ")";
    LOWORD(v359) = 770;
    v51 = operator new(0x30uLL);
    *a5 = llvm::object::GenericBinaryError::GenericBinaryError(v51, &v357, 3);
    return a1;
  }
  v52 = operator new(0x28uLL);
  v52[2] = 0;
  v52[3] = v314;
  v52[4] = "Mach-O headers";
  *v52 = &v327;
  v52[1] = &v327;
  v327 = v52;
  v328 = v52;
  v329 = 1;
  v311 = (const char *)*(unsigned int *)(a1 + 64);
  if (!(_DWORD)v311)
  {
    v57 = 0;
    v324 = 0;
    v325 = 0;
    v323 = 0;
    goto LABEL_39;
  }
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (*(_DWORD *)(a1 + 68) > 7u)
  {
    if (v53)
      v61 = 32;
    else
      v61 = 28;
    v62 = *(_QWORD *)(a1 + 360);
    v63 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
    getLoadCommandInfo((const llvm::object::MachOObjectFile *)&v352, (llvm::object::Binary *)a1, (unsigned int *)(v63 + v62 + v61), 0);
    v56 = v353;
  }
  else
  {
    v368.i64[0] = (uint64_t)"truncated or malformed object (";
    *(_QWORD *)&v369 = "load command 0 extends past the end all load commands in the file";
    LOWORD(v370) = 771;
    v357.i64[0] = (uint64_t)&v368;
    *(_QWORD *)&v358 = ")";
    LOWORD(v359) = 770;
    v54 = operator new(0x30uLL);
    v55 = llvm::object::GenericBinaryError::GenericBinaryError(v54, &v357, 3);
    v56 = v353 | 1;
    LOBYTE(v353) = v353 | 1;
    v352.i64[0] = v55;
  }
  if ((v56 & 1) != 0)
  {
    v90 = v352.i64[0];
    *a5 = v352.i64[0];
    goto LABEL_569;
  }
  v306 = 0;
  v307 = 0;
  v309 = 0;
  v310 = 0;
  v305 = 0;
  v308 = 0;
  v304 = 0;
  v64 = 0;
  v326 = v352;
  v324 = 0;
  v325 = 0;
  v322 = 0;
  v323 = 0;
  v320 = 0;
  v321 = 0;
  while (2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    {
      if ((v326.i8[12] & 7) != 0)
      {
        v65 = (v326.i8[12] & 3) == 0 && *(_DWORD *)(a1 + 60) == 4;
        if (!v65 || v326.i32[2] != 4)
        {
          v352.i64[0] = (uint64_t)"load command ";
          LOWORD(v354) = 259;
          LOWORD(v365) = 265;
          v363.i32[0] = (int)v64;
          llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
          v257 = " cmdsize not a multiple of 8";
LABEL_566:
          v374.i64[0] = (uint64_t)v257;
          v376 = 259;
          llvm::operator+(v368.i64, v374.i64, (uint64_t)&v357);
          malformedError((const llvm::Twine *)v349, v357.i64);
          v90 = v349[0];
          goto LABEL_567;
        }
      }
    }
    else if ((v326.i8[12] & 3) != 0)
    {
      v352.i64[0] = (uint64_t)"load command ";
      LOWORD(v354) = 259;
      LOWORD(v365) = 265;
      v363.i32[0] = (int)v64;
      llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
      v257 = " cmdsize not a multiple of 4";
      goto LABEL_566;
    }
    v67 = v326;
    v68 = *(unsigned int *)(a1 + 136);
    if (v68 >= *(unsigned int *)(a1 + 140))
    {
      v303 = v326;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v20, v317, v68 + 1, 16);
      v67 = v303;
      v68 = *(unsigned int *)(a1 + 136);
    }
    *(int8x16_t *)(*(_QWORD *)(a1 + 128) + 16 * v68) = v67;
    ++*(_DWORD *)(a1 + 136);
    v313 = (unint64_t)v64;
    switch(v326.i32[2])
    {
      case 1:
        if (v326.i32[3] <= 0x37u)
        {
          v349[0] = (uint64_t)"load command ";
          v350 = v64;
          v351 = 2307;
          v374.i64[0] = (uint64_t)v349;
          v375 = " ";
          v376 = 770;
          v261 = "LC_SEGMENT";
LABEL_556:
          v363.i64[0] = (uint64_t)&v374;
          *(_QWORD *)&v364 = v261;
          LOWORD(v365) = 770;
          v352.i64[0] = (uint64_t)&v363;
          *(_QWORD *)&v353 = " cmdsize too small";
          goto LABEL_529;
        }
        getStructOrErr<llvm::MachO::segment_command>((uint64_t)&v352, (llvm::object::Binary *)a1, v326.u64[0]);
        if ((BYTE8(v355) & 1) != 0)
        {
          v90 = v352.i64[0];
          goto LABEL_250;
        }
        v363 = v352;
        v364 = v353;
        v365 = v354;
        *(_QWORD *)&v366 = v355;
        llvm::object::Binary::getData((llvm::object::Binary *)a1);
        if (v366 > 0x3C3C3C3 || 68 * (int)v366 > (v326.i32[3] - 56))
        {
          v343[0] = (uint64_t)"load command ";
          v344 = (unint64_t)v64;
          v345 = 2307;
          v346[0] = (uint64_t)v343;
          v347 = " inconsistent cmdsize in ";
          v348 = 770;
          v349[0] = (uint64_t)v346;
          v350 = "LC_SEGMENT";
          v351 = 770;
          v374.i64[0] = (uint64_t)v349;
          v375 = " for the number of sections";
          v376 = 770;
          v368.i64[0] = (uint64_t)"truncated or malformed object (";
          *(_QWORD *)&v369 = &v374;
          LOWORD(v370) = 515;
          v70 = &v368;
LABEL_132:
          v357.i64[0] = (uint64_t)v70;
          *(_QWORD *)&v358 = ")";
          LOWORD(v359) = 770;
          v121 = operator new(0x30uLL);
          v90 = llvm::object::GenericBinaryError::GenericBinaryError(v121, &v357, 3);
          v319 = v90;
          goto LABEL_250;
        }
        v297 = v366;
        v301 = v69;
        v290 = v365;
        if (!(_DWORD)v366)
        {
LABEL_428:
          if (v301 < v290)
          {
            v343[0] = (uint64_t)"load command ";
            v344 = v313;
            v345 = 2307;
            v346[0] = (uint64_t)v343;
            v347 = " fileoff field in ";
            v348 = 770;
            v349[0] = (uint64_t)v346;
            v350 = "LC_SEGMENT";
            v351 = 770;
            v374.i64[0] = (uint64_t)v349;
            v375 = " extends past the end of the file";
            v376 = 770;
            v368.i64[0] = (uint64_t)"truncated or malformed object (";
            *(_QWORD *)&v369 = &v374;
            LOWORD(v370) = 515;
            v230 = &v368;
LABEL_432:
            v357.i64[0] = (uint64_t)v230;
            *(_QWORD *)&v358 = ")";
            LOWORD(v359) = 770;
            v231 = operator new(0x30uLL);
            v90 = llvm::object::GenericBinaryError::GenericBinaryError(v231, &v357, 3);
            v319 = v90;
            v50 = a5;
            goto LABEL_250;
          }
          if (DWORD1(v365) + v290 > v301)
          {
            v346[0] = (uint64_t)"load command ";
            v348 = 259;
            v345 = 265;
            LODWORD(v343[0]) = v313;
            llvm::operator+(v346, v343, (uint64_t)v349);
            v340[0] = (uint64_t)" fileoff field plus filesize field in ";
            v342 = 259;
            llvm::operator+(v349, v340, (uint64_t)&v374);
            v337[0] = (uint64_t)"LC_SEGMENT";
            v339 = 259;
            llvm::operator+(v374.i64, v337, (uint64_t)&v368);
            v233 = " extends past the end of the file";
LABEL_447:
            v334[0] = (uint64_t)v233;
            v336 = 259;
            v235 = &v368;
LABEL_452:
            llvm::operator+(v235->i64, v334, (uint64_t)&v357);
            malformedError((const llvm::Twine *)&v319, v357.i64);
            v50 = a5;
            v90 = v319;
            goto LABEL_250;
          }
          if (HIDWORD(v364) && DWORD1(v365) > HIDWORD(v364))
          {
            v346[0] = (uint64_t)"load command ";
            v348 = 259;
            v345 = 265;
            LODWORD(v343[0]) = v313;
            llvm::operator+(v346, v343, (uint64_t)v349);
            v340[0] = (uint64_t)" filesize field in ";
            v342 = 259;
            llvm::operator+(v349, v340, (uint64_t)&v374);
            v337[0] = (uint64_t)"LC_SEGMENT";
            v339 = 259;
            llvm::operator+(v374.i64, v337, (uint64_t)&v368);
            v233 = " greater than vmsize field";
            goto LABEL_447;
          }
          goto LABEL_453;
        }
        v192 = 0;
        v284 = DWORD1(v365);
        v281 = DWORD2(v364);
        v293 = HIDWORD(v364);
        v287 = HIDWORD(v364) + (unint64_t)DWORD2(v364);
        while (1)
        {
          v193 = v326.i64[0];
          v194 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
          if (v194)
            v195 = 72;
          else
            v195 = 56;
          if (v194)
            v196 = 80;
          else
            v196 = 68;
          v197 = *(unsigned int *)(a1 + 88);
          if (v197 >= *(unsigned int *)(a1 + 92))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v18, v315, v197 + 1, 8);
            v197 = *(unsigned int *)(a1 + 88);
          }
          v198 = v195 + v193 + (v196 * v192);
          *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v197) = v198;
          ++*(_DWORD *)(a1 + 88);
          getStructOrErr<llvm::MachO::section>((uint64_t)&v357, (llvm::object::Binary *)a1, v198);
          if ((BYTE8(v361) & 1) != 0)
            goto LABEL_442;
          v370 = v359;
          v371 = v360;
          LODWORD(v372) = v361;
          v368 = v357;
          v369 = v358;
          v199 = *(_DWORD *)(a1 + 60);
          if (v199 != 9)
            break;
          v201 = DWORD1(v370);
          v200 = DWORD2(v370);
LABEL_302:
          v202 = v201;
LABEL_331:
          if (v293 && v202 && v201 + (unint64_t)v370 > v287)
          {
            v331[0] = "addr field plus size of section ";
            v332 = v192;
            v333 = 2307;
            v334[0] = (uint64_t)v331;
            v335 = " in ";
            v336 = 770;
            v242 = "LC_SEGMENT";
            goto LABEL_482;
          }
          if (v199 != 9 && v199 != 10 && DWORD2(v371) != 1 && DWORD2(v371) != 18)
          {
            checkOverlappingElement(&v319, (uint64_t *)&v327, v200, v201, "section contents");
            if (v319)
              goto LABEL_443;
          }
          if (v301 < v371)
          {
            v239 = "reloff field of section ";
LABEL_474:
            v331[0] = v239;
            v332 = v192;
            v333 = 2307;
            v334[0] = (uint64_t)v331;
            v335 = " in ";
            v336 = 770;
            v241 = "LC_SEGMENT";
            goto LABEL_478;
          }
          v208 = 8 * DWORD1(v371);
          if (v208 + (unint64_t)v371 > v301)
          {
            v239 = "reloff field plus nreloc field times sizeof(struct relocation_info) of section ";
            goto LABEL_474;
          }
          checkOverlappingElement(&v319, (uint64_t *)&v327, v371, v208, "section relocation entries");
          if (v319)
            goto LABEL_443;
          if (strlen((const char *)&v369) == 6)
          {
            v209 = (_DWORD)v369 == 1163157343 && WORD2(v369) == 21592;
            if (v209
              && strlen(v368.i8) == 14
              && v368.i64[0] == 0x5F6E696168635F5FLL
              && *(uint64_t *)((char *)v368.i64 + 6) == 0x7374726174735F6ELL)
            {
              *(_QWORD *)(a1 + 352) = v198;
            }
          }
          if (v297 == ++v192)
            goto LABEL_428;
        }
        v200 = DWORD2(v370);
        v204 = v199 == 10 || DWORD2(v371) == 1 || DWORD2(v371) == 18;
        v205 = !v204;
        if (!v204 && v301 < DWORD2(v370))
        {
          v239 = "offset field of section ";
          goto LABEL_474;
        }
        if ((_DWORD)v290)
          v206 = 0;
        else
          v206 = v205;
        v201 = DWORD1(v370);
        if (v206 == 1 && v314 > DWORD2(v370) && DWORD1(v370))
        {
          v331[0] = "offset field of section ";
          v332 = v192;
          v333 = 2307;
          v334[0] = (uint64_t)v331;
          v335 = " in ";
          v336 = 770;
          v248 = "LC_SEGMENT";
          goto LABEL_490;
        }
        if (DWORD1(v370) + (unint64_t)DWORD2(v370) > v301)
          v207 = v205;
        else
          v207 = 0;
        if (v207 == 1)
        {
          v239 = "offset field plus size field of section ";
          goto LABEL_474;
        }
        if (DWORD1(v370) <= v284)
          v205 = 0;
        if (v205 == 1)
        {
          v331[0] = "size field of section ";
          v332 = v192;
          v333 = 2307;
          v334[0] = (uint64_t)v331;
          v335 = " in ";
          v336 = 770;
          v245 = "LC_SEGMENT";
          goto LABEL_484;
        }
        if (v199 == 10 || !DWORD1(v370))
          goto LABEL_302;
        if (v370 >= v281)
        {
          v202 = 1;
          goto LABEL_331;
        }
        v331[0] = "addr field of section ";
        v332 = v192;
        v333 = 2307;
        v334[0] = (uint64_t)v331;
        v335 = " in ";
        v336 = 770;
        v246 = "LC_SEGMENT";
LABEL_492:
        v337[0] = (uint64_t)v334;
        v338 = v246;
        v339 = 770;
        v340[0] = (uint64_t)v337;
        v341 = " command ";
        v342 = 770;
        v343[0] = (uint64_t)v340;
        v344 = v313;
        v345 = 2306;
        v243 = " less than the segment's vmaddr";
LABEL_479:
        v346[0] = (uint64_t)v343;
        v347 = v243;
        v348 = 770;
        v349[0] = (uint64_t)"truncated or malformed object (";
        v350 = (const char *)v346;
        v351 = 515;
        v374.i64[0] = (uint64_t)v349;
        v375 = ")";
        v376 = 770;
        v244 = operator new(0x30uLL);
        v90 = llvm::object::GenericBinaryError::GenericBinaryError(v244, &v374, 3);
        v319 = v90;
        v50 = a5;
LABEL_250:
        *v50 = v90;
        if (v90)
          goto LABEL_568;
LABEL_251:
        v64 = (const char *)v313;
        if (v313 >= ((_DWORD)v311 - 1))
        {
          v50 = a5;
          goto LABEL_51;
        }
        v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
        v180 = v326.i64[0] + v326.u32[3] + 8;
        v181 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
        v182 = 28;
        if (v179)
          v182 = 32;
        if (v180 <= v181 + *(_QWORD *)(a1 + 360) + (unint64_t)*(unsigned int *)(a1 + 68) + v182)
        {
          getLoadCommandInfo((const llvm::object::MachOObjectFile *)&v374, (llvm::object::Binary *)a1, (unsigned int *)(v326.i64[0] + v326.u32[3]), v313 + 1);
          v185 = (char)v375;
        }
        else
        {
          v363.i64[0] = (uint64_t)"load command ";
          *(_QWORD *)&v364 = v313 + 1;
          LOWORD(v365) = 2307;
          v352.i64[0] = (uint64_t)&v363;
          *(_QWORD *)&v353 = " extends past the end all load commands in the file";
          LOWORD(v354) = 770;
          v368.i64[0] = (uint64_t)"truncated or malformed object (";
          *(_QWORD *)&v369 = &v352;
          LOWORD(v370) = 515;
          v357.i64[0] = (uint64_t)&v368;
          *(_QWORD *)&v358 = ")";
          LOWORD(v359) = 770;
          v183 = operator new(0x30uLL);
          v184 = llvm::object::GenericBinaryError::GenericBinaryError(v183, &v357, 3);
          v185 = v375 | 1;
          LOBYTE(v375) = v375 | 1;
          v374.i64[0] = v184;
        }
        v50 = a5;
        if ((v185 & 1) != 0)
        {
          v90 = v374.i64[0];
          goto LABEL_567;
        }
        v326 = v374;
LABEL_51:
        if (++v64 != v311)
          continue;
        v251 = v322;
        if (!v322)
        {
          v57 = v309;
          goto LABEL_39;
        }
        v57 = v309;
        if (!v308)
          goto LABEL_39;
        if ((unint64_t)v251 < llvm::object::Binary::getData((llvm::object::Binary *)a1)
          || (v252 = llvm::object::Binary::getData((llvm::object::Binary *)a1),
              (unint64_t)(v251 + 4) > v252 + v253))
        {
LABEL_600:
          llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
        }
        v254 = *v251;
        v255 = *(_DWORD *)(a1 + 8);
        v256 = bswap32(*v251);
        if (((1 << v255) & 0x155800) == 0)
          v256 = *v251;
        if (v255 <= 0x14)
          v254 = v256;
        if ((v312 & 0x8000000) != 0 && v254 != 36)
        {
          v250 = "MH_SIM_SUPPORT files only support LC_BUILD_VERSION and LC_VERSION_MIN_MACOSX load commands";
          goto LABEL_543;
        }
        if ((v312 & 0x8000000) == 0 && v254 != 36)
        {
          v250 = "LC_BUILD_VERSION and some LC_VERSION_MIN load command also found";
          goto LABEL_543;
        }
LABEL_39:
        v58 = *(_QWORD *)(a1 + 272);
        v59 = *(_QWORD *)(a1 + 280);
        if (v58)
        {
          if (v59)
          {
            v352 = 0uLL;
            *(_QWORD *)&v353 = 0;
            getStruct<llvm::MachO::encryption_info_command_64>((uint64_t)&v352, (llvm::object::Binary *)a1, v58);
            v360 = 0u;
            v361 = 0u;
            v358 = 0u;
            v359 = 0u;
            v357 = 0u;
            getStruct<llvm::MachO::dysymtab_command>(&v357, (llvm::object::Binary *)a1, *(_QWORD *)(a1 + 280));
            if (v357.i32[3])
            {
              if (v357.i32[2] > (unsigned __int32)v352.i32[3])
              {
                v60 = "ilocalsym in LC_DYSYMTAB load command extends past the end of the symbol table";
                goto LABEL_536;
              }
              if (v357.u32[2] + (unint64_t)v357.u32[3] > v352.u32[3])
              {
                v60 = "ilocalsym plus nlocalsym in LC_DYSYMTAB load command extends past the end of the symbol table";
                goto LABEL_536;
              }
            }
            if (DWORD1(v358))
            {
              if (v358 > v352.i32[3])
              {
                v60 = "iextdefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
                goto LABEL_536;
              }
              if (v358 + (unint64_t)DWORD1(v358) > v352.u32[3])
              {
                v60 = "iextdefsym plus nextdefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
                goto LABEL_536;
              }
            }
            if (HIDWORD(v358))
            {
              if (DWORD2(v358) > v352.i32[3])
              {
                v60 = "iundefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
                goto LABEL_536;
              }
              if (DWORD2(v358) + (unint64_t)HIDWORD(v358) > v352.u32[3])
              {
                v60 = "iundefsym plus nundefsym in LC_DYSYMTAB load  command extends past the end of the symbol table";
LABEL_536:
                v368.i64[0] = (uint64_t)v60;
                LOWORD(v370) = 259;
                malformedError((const llvm::Twine *)&v363, v368.i64);
                v90 = v363.i64[0];
LABEL_567:
                *v50 = v90;
                goto LABEL_568;
              }
            }
          }
        }
        else if (v59)
        {
          v250 = "contains LC_DYSYMTAB load command without a LC_SYMTAB load command";
          goto LABEL_543;
        }
        v258 = *(_DWORD *)(a1 + 60);
        if ((v258 == 6 || v258 == 9 || v258 == 14) && !v57)
        {
          v250 = "no LC_ID_DYLIB load command in dynamic library filetype";
LABEL_543:
          v357.i64[0] = (uint64_t)v250;
          LOWORD(v359) = 259;
          malformedError((const llvm::Twine *)&v368, v357.i64);
          v90 = v368.i64[0];
          goto LABEL_567;
        }
        v90 = 0;
        *v50 = 0;
LABEL_568:
        v50 = a5;
LABEL_569:
        if (v329)
        {
          v264 = (uint64_t)v327;
          v263 = v328;
          v265 = *v328;
          *(_QWORD *)(v265 + 8) = v327[1];
          **(_QWORD **)(v264 + 8) = v265;
          v329 = 0;
          if (v263 != (uint64_t *)&v327)
          {
            do
            {
              v266 = (uint64_t *)v263[1];
              operator delete(v263);
              v263 = v266;
            }
            while (v266 != (uint64_t *)&v327);
            v90 = *v50;
          }
        }
        if (!v90)
          *v50 = 0;
        return a1;
      case 2:
        if (v326.i32[3] > 0x17u)
        {
          if (*(_QWORD *)(a1 + 272))
          {
            v259 = "more than one LC_SYMTAB command";
            goto LABEL_545;
          }
          v74 = (_DWORD *)v326.i64[0];
          if ((unint64_t)v74 >= llvm::object::Binary::getData((llvm::object::Binary *)a1))
          {
            v75 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
            if ((unint64_t)(v74 + 6) <= v75 + v76)
            {
              v77 = v74[1];
              v78 = v74[2];
              v80 = v74[3];
              v79 = v74[4];
              v81 = v74[5];
              v82 = *(_DWORD *)(a1 + 8);
              if (v82 <= 0x14 && ((1 << v82) & 0x155800) != 0)
              {
                v77 = bswap32(v77);
                v78 = bswap32(v78);
                v80 = bswap32(v80);
                v79 = bswap32(v79);
                v81 = bswap32(v81);
              }
              v299 = v79;
              v295 = v81;
              if (v77 == 24)
              {
                llvm::object::Binary::getData((llvm::object::Binary *)a1);
                if (v83 < v78)
                {
                  v363.i64[0] = (uint64_t)"symoff field of LC_SYMTAB command ";
                  *(_QWORD *)&v364 = v313;
                  LOWORD(v365) = 2307;
                  v352.i64[0] = (uint64_t)&v363;
                  *(_QWORD *)&v353 = " extends past the end of the file";
                  LOWORD(v354) = 770;
                  v368.i64[0] = (uint64_t)"truncated or malformed object (";
                  *(_QWORD *)&v369 = &v352;
                  LOWORD(v370) = 515;
                  v357.i64[0] = (uint64_t)&v368;
                  *(_QWORD *)&v358 = ")";
                  LOWORD(v359) = 770;
                  v274 = operator new(0x30uLL);
                  v90 = llvm::object::GenericBinaryError::GenericBinaryError(v274, &v357, 3);
                  v50 = a5;
                  goto LABEL_567;
                }
                v84 = v83;
                v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
                if (v85)
                  v86 = 16 * v80;
                else
                  v86 = 12 * v80;
                v87 = "struct nlist_64";
                if (!v85)
                  v87 = "struct nlist";
                if (v86 + (unint64_t)v78 > v84)
                {
                  v374.i64[0] = (uint64_t)"symoff field plus nsyms field times sizeof(";
                  v376 = 259;
                  v88 = 1;
                  HIBYTE(v351) = 1;
                  v89 = a5;
                  if (*v87)
                  {
                    v349[0] = (uint64_t)v87;
                    v88 = 3;
                  }
                  LOBYTE(v351) = v88;
                  llvm::operator+(v374.i64, v349, (uint64_t)&v363);
                  v346[0] = (uint64_t)") of LC_SYMTAB command ";
                  v348 = 259;
                  llvm::operator+(v363.i64, v346, (uint64_t)&v352);
                  v345 = 265;
                  LODWORD(v343[0]) = v313;
                  llvm::operator+(v352.i64, v343, (uint64_t)&v368);
                  v340[0] = (uint64_t)" extends past the end of the file";
                  v342 = 259;
                  llvm::operator+(v368.i64, v340, (uint64_t)&v357);
                  malformedError((const llvm::Twine *)v337, v357.i64);
LABEL_278:
                  v90 = v337[0];
                  *v89 = v337[0];
                  if (!v90)
                    goto LABEL_251;
                  goto LABEL_568;
                }
                checkOverlappingElement(v337, (uint64_t *)&v327, v78, v86, "symbol table");
                v90 = v337[0];
                if (!v337[0])
                {
                  if (v84 < v299)
                  {
                    v186 = "stroff field of LC_SYMTAB command ";
LABEL_277:
                    v352.i64[0] = (uint64_t)v186;
                    LOWORD(v354) = 259;
                    LOWORD(v365) = 265;
                    v363.i32[0] = v313;
                    llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
                    v374.i64[0] = (uint64_t)" extends past the end of the file";
                    v376 = 259;
                    llvm::operator+(v368.i64, v374.i64, (uint64_t)&v357);
                    malformedError((const llvm::Twine *)v337, v357.i64);
                    v89 = a5;
                    goto LABEL_278;
                  }
                  if (v299 + (unint64_t)v295 > v84)
                  {
                    v186 = "stroff field plus strsize field of LC_SYMTAB command ";
                    goto LABEL_277;
                  }
                  checkOverlappingElement(v337, (uint64_t *)&v327, v299, v295, "string table");
                  v90 = v337[0];
                  if (!v337[0])
                  {
                    *(_QWORD *)(a1 + 272) = v326.i64[0];
LABEL_424:
                    *a5 = 0;
                    goto LABEL_251;
                  }
                }
                goto LABEL_595;
              }
              v271 = v313;
              v272 = "LC_SYMTAB command ";
              goto LABEL_590;
            }
          }
LABEL_544:
          v259 = "Structure read out-of-range";
LABEL_545:
          v368.i64[0] = (uint64_t)"truncated or malformed object (";
          *(_QWORD *)&v369 = v259;
          LOWORD(v370) = 771;
          v357.i64[0] = (uint64_t)&v368;
          *(_QWORD *)&v358 = ")";
          goto LABEL_546;
        }
        v363.i64[0] = (uint64_t)"load command ";
        *(_QWORD *)&v364 = v64;
        LOWORD(v365) = 2307;
        v273 = " LC_SYMTAB cmdsize too small";
        goto LABEL_528;
      case 3:
      case 6:
      case 7:
      case 9:
      case 0xA:
      case 0x10:
      case 0x17:
      case 0x18:
      case 0x1C:
      case 0x1F:
      case 0x23:
      case 0x28:
LABEL_259:
        if (v326.i32[2] > 0x17u || ((1 << v326.i8[8]) & 0xC107C8) == 0)
          goto LABEL_251;
        v374.i64[0] = (uint64_t)"load command ";
        v376 = 259;
        v351 = 265;
        LODWORD(v349[0]) = (_DWORD)v64;
        llvm::operator+(v374.i64, v349, (uint64_t)&v363);
        v346[0] = (uint64_t)" for cmd value of: ";
        v348 = 259;
        llvm::operator+(v363.i64, v346, (uint64_t)&v352);
        v345 = 265;
        LODWORD(v343[0]) = v326.i32[2];
        llvm::operator+(v352.i64, v343, (uint64_t)&v368);
        v340[0] = (uint64_t)" is obsolete and not supported";
        v342 = 259;
        llvm::operator+(v368.i64, v340, (uint64_t)&v357);
        malformedError((const llvm::Twine *)v337, v357.i64);
        v90 = v337[0];
        goto LABEL_584;
      case 4:
        checkThreadCommand((const llvm::Twine *)&v357, (llvm::object::Binary *)a1, (uint64_t)&v326, v64, "LC_THREAD");
        goto LABEL_249;
      case 5:
        checkThreadCommand((const llvm::Twine *)&v357, (llvm::object::Binary *)a1, (uint64_t)&v326, v64, "LC_UNIXTHREAD");
        v90 = v357.i64[0];
        *v50 = v357.i64[0];
        if (v90)
          goto LABEL_568;
        if (!v306)
        {
          v306 = v326.i64[0];
          goto LABEL_251;
        }
        v268 = "more than one LC_UNIXTHREAD command";
        goto LABEL_583;
      case 8:
        goto LABEL_51;
      case 0xB:
        if (v326.i32[3] > 0x4Fu)
        {
          if (*(_QWORD *)(a1 + 280))
          {
            v259 = "more than one LC_DYSYMTAB command";
            goto LABEL_545;
          }
          v91 = (_DWORD *)v326.i64[0];
          if ((unint64_t)v91 < llvm::object::Binary::getData((llvm::object::Binary *)a1))
            goto LABEL_544;
          v92 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
          if ((unint64_t)(v91 + 20) > v92 + v93)
            goto LABEL_544;
          v94 = v91[1];
          v96 = v91[8];
          v95 = v91[9];
          v98 = v91[10];
          v97 = v91[11];
          v99 = v91[12];
          v100 = v91[13];
          v102 = v91[14];
          v101 = v91[15];
          v104 = v91[16];
          v103 = v91[17];
          v106 = v91[18];
          v105 = v91[19];
          v107 = *(_DWORD *)(a1 + 8);
          if (v107 <= 0x14 && ((1 << v107) & 0x155800) != 0)
          {
            v94 = bswap32(v94);
            v96 = bswap32(v96);
            v95 = bswap32(v95);
            v98 = bswap32(v98);
            v97 = bswap32(v97);
            v99 = bswap32(v99);
            v100 = bswap32(v100);
            v102 = bswap32(v102);
            v101 = bswap32(v101);
            v104 = bswap32(v104);
            v103 = bswap32(v103);
            v106 = bswap32(v106);
            v105 = bswap32(v105);
          }
          v300 = v98;
          v296 = v97;
          v289 = v99;
          v286 = v100;
          v283 = v102;
          v280 = v101;
          v279 = v104;
          v278 = v103;
          v277 = v106;
          v276 = v105;
          if (v94 != 80)
          {
            v271 = v64;
            v272 = "LC_DYSYMTAB command ";
LABEL_590:
            v363.i64[0] = (uint64_t)v272;
            *(_QWORD *)&v364 = v271;
            LOWORD(v365) = 2307;
            v273 = " has incorrect cmdsize";
            goto LABEL_528;
          }
          v108 = v95;
          llvm::object::Binary::getData((llvm::object::Binary *)a1);
          if (v109 >= v96)
          {
            v110 = 8 * v108;
            if (v110 + (unint64_t)v96 <= v109)
            {
              v292 = v109;
              checkOverlappingElement(v337, (uint64_t *)&v327, v96, v110, "table of contents");
              v90 = v337[0];
              if (v337[0])
                goto LABEL_567;
              if (v292 >= v300)
              {
                v187 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
                v188 = "struct dylib_module";
                if (v187)
                  v188 = "struct dylib_module_64";
                v189 = 52;
                if (v187)
                  v189 = 56;
                if (v300 + v189 * (unint64_t)v296 <= v292)
                {
                  checkOverlappingElement(v337, (uint64_t *)&v327, v300, v189 * (unint64_t)v296, "module table");
                  v90 = v337[0];
                  if (v337[0])
                    goto LABEL_595;
                  if (v292 >= v289)
                  {
                    v232 = 4 * v286;
                    if (v232 + (unint64_t)v289 <= v292)
                    {
                      checkOverlappingElement(v337, (uint64_t *)&v327, v289, v232, "reference table");
                      v90 = v337[0];
                      if (v337[0])
                        goto LABEL_595;
                      if (v292 >= v283)
                      {
                        v238 = 4 * v280;
                        if (v238 + (unint64_t)v283 <= v292)
                        {
                          checkOverlappingElement(v337, (uint64_t *)&v327, v283, v238, "indirect table");
                          v90 = v337[0];
                          if (v337[0])
                            goto LABEL_595;
                          if (v292 >= v279)
                          {
                            v247 = 8 * v278;
                            if (v247 + (unint64_t)v279 <= v292)
                            {
                              checkOverlappingElement(v337, (uint64_t *)&v327, v279, v247, "external relocation table");
                              v90 = v337[0];
                              if (v337[0])
                                goto LABEL_595;
                              if (v292 >= v277)
                              {
                                v249 = 8 * v276;
                                if (v249 + (unint64_t)v277 <= v292)
                                {
                                  checkOverlappingElement(v337, (uint64_t *)&v327, v277, v249, "local relocation table");
                                  v90 = v337[0];
                                  if (!v337[0])
                                  {
                                    *(_QWORD *)(a1 + 280) = v326.i64[0];
                                    goto LABEL_424;
                                  }
LABEL_595:
                                  v50 = a5;
                                  goto LABEL_567;
                                }
                                v229 = "locreloff field plus nlocrel field times sizeof(struct relocation_info) of LC_DYSYMTAB command ";
                              }
                              else
                              {
                                v229 = "locreloff field of LC_DYSYMTAB command ";
                              }
                            }
                            else
                            {
                              v229 = "extreloff field plus nextrel field times sizeof(struct relocation_info) of LC_DYSYMTAB command ";
                            }
                          }
                          else
                          {
                            v229 = "extreloff field of LC_DYSYMTAB command ";
                          }
                        }
                        else
                        {
                          v229 = "indirectsymoff field plus nindirectsyms field times sizeof(uint32_t) of LC_DYSYMTAB command ";
                        }
                      }
                      else
                      {
                        v229 = "indirectsymoff field of LC_DYSYMTAB command ";
                      }
                    }
                    else
                    {
                      v229 = "extrefsymoff field plus nextrefsyms field times sizeof(struct dylib_reference) of LC_DYSYMTAB command ";
                    }
                  }
                  else
                  {
                    v229 = "extrefsymoff field of LC_DYSYMTAB command ";
                  }
                  v352.i64[0] = (uint64_t)v229;
                  LOWORD(v354) = 259;
                  LOWORD(v365) = 265;
                  v363.i32[0] = (int)v64;
                  llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
                  v374.i64[0] = (uint64_t)" extends past the end of the file";
                  v376 = 259;
                  v191 = (uint64_t *)&v374;
                }
                else
                {
                  v374.i64[0] = (uint64_t)"modtaboff field plus nmodtab field times sizeof(";
                  v376 = 259;
                  v190 = 1;
                  HIBYTE(v351) = 1;
                  if (*v188)
                  {
                    v349[0] = (uint64_t)v188;
                    v190 = 3;
                  }
                  LOBYTE(v351) = v190;
                  llvm::operator+(v374.i64, v349, (uint64_t)&v363);
                  v346[0] = (uint64_t)") of LC_DYSYMTAB command ";
                  v348 = 259;
                  llvm::operator+(v363.i64, v346, (uint64_t)&v352);
                  v345 = 265;
                  LODWORD(v343[0]) = (_DWORD)v64;
                  llvm::operator+(v352.i64, v343, (uint64_t)&v368);
                  v340[0] = (uint64_t)" extends past the end of the file";
                  v342 = 259;
                  v191 = v340;
                }
                llvm::operator+(v368.i64, v191, (uint64_t)&v357);
                malformedError((const llvm::Twine *)v337, v357.i64);
                v50 = a5;
                v90 = v337[0];
                goto LABEL_250;
              }
              v111 = "modtaboff field of LC_DYSYMTAB command ";
            }
            else
            {
              v111 = "tocoff field plus ntoc field times sizeof(struct dylib_table_of_contents) of LC_DYSYMTAB command ";
            }
            v352.i64[0] = (uint64_t)v111;
            LOWORD(v354) = 259;
            LOWORD(v365) = 265;
            v363.i32[0] = (int)v64;
            llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
            v374.i64[0] = (uint64_t)" extends past the end of the file";
            v376 = 259;
            llvm::operator+(v368.i64, v374.i64, (uint64_t)&v357);
            malformedError((const llvm::Twine *)v337, v357.i64);
            v90 = v337[0];
            goto LABEL_250;
          }
          v269 = v64;
          v270 = "tocoff field of LC_DYSYMTAB command ";
LABEL_594:
          v363.i64[0] = (uint64_t)v270;
          *(_QWORD *)&v364 = v269;
          LOWORD(v365) = 2307;
          v273 = " extends past the end of the file";
          goto LABEL_528;
        }
        v363.i64[0] = (uint64_t)"load command ";
        *(_QWORD *)&v364 = v64;
        LOWORD(v365) = 2307;
        v273 = " LC_DYSYMTAB cmdsize too small";
        goto LABEL_528;
      case 0xC:
        v73 = "LC_LOAD_DYLIB";
        goto LABEL_142;
      case 0xD:
        checkDylibCommand(v352.i64, (llvm::object::Binary *)a1, (uint64_t)&v326, v64, "LC_ID_DYLIB");
        v90 = v352.i64[0];
        if (v352.i64[0])
          goto LABEL_584;
        if (v309)
        {
          v267 = "more than one LC_ID_DYLIB command";
        }
        else
        {
          v112 = *(_DWORD *)(a1 + 60);
          if (v112 <= 0xE && ((1 << v112) & 0x4240) != 0)
          {
            v309 = v326.i64[0];
            *v50 = 0;
            goto LABEL_251;
          }
          v267 = "LC_ID_DYLIB load command in non-dynamic library file type";
        }
        v368.i64[0] = (uint64_t)"truncated or malformed object (";
        *(_QWORD *)&v369 = v267;
        LOWORD(v370) = 771;
        v357.i64[0] = (uint64_t)&v368;
        *(_QWORD *)&v358 = ")";
        LOWORD(v359) = 770;
        v275 = operator new(0x30uLL);
        v90 = llvm::object::GenericBinaryError::GenericBinaryError(v275, &v357, 3);
        goto LABEL_584;
      case 0xE:
        v113 = "LC_LOAD_DYLINKER";
        goto LABEL_150;
      case 0xF:
        v113 = "LC_ID_DYLINKER";
        goto LABEL_150;
      case 0x11:
        if (v326.i32[3] == 40)
        {
          if (v310)
          {
            v268 = "more than one LC_ROUTINES and or LC_ROUTINES_64 command";
            goto LABEL_583;
          }
          goto LABEL_135;
        }
        v262 = "LC_ROUTINES command ";
        goto LABEL_565;
      case 0x12:
        if (v326.i32[3] > 0xBu)
        {
          v114 = getStruct<llvm::MachO::sub_framework_command>((llvm::object::Binary *)a1, v326.u64[0]);
          v115 = v326.i64[0];
          v116 = v326.u32[3];
          v117 = "LC_SUB_FRAMEWORK";
          v118 = "sub_framework_command";
          v119 = "umbrella";
LABEL_125:
          checkSubCommand(&v357, v115, v116, v64, v117, v118, v114, v119);
LABEL_249:
          v90 = v357.i64[0];
          goto LABEL_250;
        }
        v352.i64[0] = (uint64_t)"load command ";
        LOWORD(v354) = 259;
        LOWORD(v365) = 265;
        v363.i32[0] = (int)v64;
        llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
        v257 = " LC_SUB_FRAMEWORK cmdsize too small";
        goto LABEL_566;
      case 0x13:
        if (v326.i32[3] <= 0xBu)
        {
          v352.i64[0] = (uint64_t)"load command ";
          LOWORD(v354) = 259;
          LOWORD(v365) = 265;
          v363.i32[0] = (int)v64;
          llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
          v257 = " LC_SUB_UMBRELLA cmdsize too small";
          goto LABEL_566;
        }
        v114 = getStruct<llvm::MachO::sub_framework_command>((llvm::object::Binary *)a1, v326.u64[0]);
        v115 = v326.i64[0];
        v116 = v326.u32[3];
        v117 = "LC_SUB_UMBRELLA";
        v118 = "sub_umbrella_command";
        v119 = "sub_umbrella";
        goto LABEL_125;
      case 0x14:
        if (v326.i32[3] <= 0xBu)
        {
          v352.i64[0] = (uint64_t)"load command ";
          LOWORD(v354) = 259;
          LOWORD(v365) = 265;
          v363.i32[0] = (int)v64;
          llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
          v257 = " LC_SUB_CLIENT cmdsize too small";
          goto LABEL_566;
        }
        v114 = getStruct<llvm::MachO::sub_framework_command>((llvm::object::Binary *)a1, v326.u64[0]);
        v115 = v326.i64[0];
        v116 = v326.u32[3];
        v117 = "LC_SUB_CLIENT";
        v118 = "sub_client_command";
        v119 = "client";
        goto LABEL_125;
      case 0x15:
        if (v326.i32[3] <= 0xBu)
        {
          v352.i64[0] = (uint64_t)"load command ";
          LOWORD(v354) = 259;
          LOWORD(v365) = 265;
          v363.i32[0] = (int)v64;
          llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
          v257 = " LC_SUB_LIBRARY cmdsize too small";
          goto LABEL_566;
        }
        v114 = getStruct<llvm::MachO::sub_framework_command>((llvm::object::Binary *)a1, v326.u64[0]);
        v115 = v326.i64[0];
        v116 = v326.u32[3];
        v117 = "LC_SUB_LIBRARY";
        v118 = "sub_library_command";
        v119 = "sub_library";
        goto LABEL_125;
      case 0x16:
        checkTwoLevelHintsCommand(&v357, (llvm::object::Binary *)a1, (uint64_t)&v326, v64, &v320, (uint64_t *)&v327);
        goto LABEL_249;
      case 0x19:
        if (v326.i32[3] <= 0x47u)
        {
          v349[0] = (uint64_t)"load command ";
          v350 = v64;
          v351 = 2307;
          v374.i64[0] = (uint64_t)v349;
          v375 = " ";
          v376 = 770;
          v261 = "LC_SEGMENT_64";
          goto LABEL_556;
        }
        getStructOrErr<llvm::MachO::segment_command_64>((uint64_t)&v368, (llvm::object::Binary *)a1, v326.u64[0]);
        if ((v373 & 1) == 0)
        {
          v365 = v370;
          v366 = v371;
          v367 = v372;
          v363 = v368;
          v364 = v369;
          llvm::object::Binary::getData((llvm::object::Binary *)a1);
          if (v367 > 0x3333333 || 80 * (int)v367 > (v326.i32[3] - 72))
          {
            v343[0] = (uint64_t)"load command ";
            v344 = (unint64_t)v64;
            v345 = 2307;
            v346[0] = (uint64_t)v343;
            v347 = " inconsistent cmdsize in ";
            v348 = 770;
            v349[0] = (uint64_t)v346;
            v350 = "LC_SEGMENT_64";
            v351 = 770;
            v374.i64[0] = (uint64_t)v349;
            v375 = " for the number of sections";
            v376 = 770;
            v352.i64[0] = (uint64_t)"truncated or malformed object (";
            *(_QWORD *)&v353 = &v374;
            LOWORD(v354) = 515;
            v70 = &v352;
            goto LABEL_132;
          }
          v298 = v367;
          v302 = v120;
          v291 = *((_QWORD *)&v365 + 1);
          if ((_DWORD)v367)
          {
            v211 = 0;
            v282 = *((_QWORD *)&v364 + 1);
            v285 = v366;
            v294 = v365;
            v288 = v365 + *((_QWORD *)&v364 + 1);
            do
            {
              v212 = v326.i64[0];
              v213 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
              if (v213)
                v214 = 72;
              else
                v214 = 56;
              if (v213)
                v215 = 80;
              else
                v215 = 68;
              v216 = *(unsigned int *)(a1 + 88);
              if (v216 >= *(unsigned int *)(a1 + 92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v18, v315, v216 + 1, 8);
                v216 = *(unsigned int *)(a1 + 88);
              }
              v217 = v214 + v212 + (v215 * v211);
              *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v216) = v217;
              ++*(_DWORD *)(a1 + 88);
              getStructOrErr<llvm::MachO::section_64>((uint64_t)&v357, (llvm::object::Binary *)a1, v217);
              if ((v362 & 1) != 0)
              {
LABEL_442:
                v319 = v357.i64[0];
LABEL_443:
                v50 = a5;
                v90 = v319;
                goto LABEL_250;
              }
              v354 = v359;
              v355 = v360;
              v356 = v361;
              v352 = v357;
              v353 = v358;
              v218 = *(_DWORD *)(a1 + 60);
              if (v218 == 9)
              {
                v219 = v355;
                v220 = *((_QWORD *)&v354 + 1);
              }
              else
              {
                v219 = v355;
                v222 = v218 == 10 || (_DWORD)v356 == 1 || (_DWORD)v356 == 18;
                v223 = !v222;
                if (!v222 && v302 < v355)
                {
                  v240 = "offset field of section ";
                  goto LABEL_477;
                }
                if (v291)
                  v224 = 0;
                else
                  v224 = v223;
                v220 = *((_QWORD *)&v354 + 1);
                if (v224 == 1 && v314 > v355 && *((_QWORD *)&v354 + 1))
                {
                  v331[0] = "offset field of section ";
                  v332 = v211;
                  v333 = 2307;
                  v334[0] = (uint64_t)v331;
                  v335 = " in ";
                  v336 = 770;
                  v248 = "LC_SEGMENT_64";
LABEL_490:
                  v337[0] = (uint64_t)v334;
                  v338 = v248;
                  v339 = 770;
                  v340[0] = (uint64_t)v337;
                  v341 = " command ";
                  v342 = 770;
                  v343[0] = (uint64_t)v340;
                  v344 = v313;
                  v345 = 2306;
                  v243 = " not past the headers of the file";
                  goto LABEL_479;
                }
                if (*((_QWORD *)&v354 + 1) + (unint64_t)v355 > v302)
                  v225 = v223;
                else
                  v225 = 0;
                if (v225 == 1)
                {
                  v240 = "offset field plus size field of section ";
LABEL_477:
                  v331[0] = v240;
                  v332 = v211;
                  v333 = 2307;
                  v334[0] = (uint64_t)v331;
                  v335 = " in ";
                  v336 = 770;
                  v241 = "LC_SEGMENT_64";
LABEL_478:
                  v337[0] = (uint64_t)v334;
                  v338 = v241;
                  v339 = 770;
                  v340[0] = (uint64_t)v337;
                  v341 = " command ";
                  v342 = 770;
                  v343[0] = (uint64_t)v340;
                  v344 = v313;
                  v345 = 2306;
                  v243 = " extends past the end of the file";
                  goto LABEL_479;
                }
                if (*((_QWORD *)&v354 + 1) <= v285)
                  v223 = 0;
                if (v223 == 1)
                {
                  v331[0] = "size field of section ";
                  v332 = v211;
                  v333 = 2307;
                  v334[0] = (uint64_t)v331;
                  v335 = " in ";
                  v336 = 770;
                  v245 = "LC_SEGMENT_64";
LABEL_484:
                  v337[0] = (uint64_t)v334;
                  v338 = v245;
                  v339 = 770;
                  v340[0] = (uint64_t)v337;
                  v341 = " command ";
                  v342 = 770;
                  v343[0] = (uint64_t)v340;
                  v344 = v313;
                  v345 = 2306;
                  v243 = " greater than the segment";
                  goto LABEL_479;
                }
                if (v218 != 10 && *((_QWORD *)&v354 + 1) && (unint64_t)v354 < v282)
                {
                  v331[0] = "addr field of section ";
                  v332 = v211;
                  v333 = 2307;
                  v334[0] = (uint64_t)v331;
                  v335 = " in ";
                  v336 = 770;
                  v246 = "LC_SEGMENT_64";
                  goto LABEL_492;
                }
              }
              if (v294 && v220 && (uint64_t)v354 + v220 > v288)
              {
                v331[0] = "addr field plus size of section ";
                v332 = v211;
                v333 = 2307;
                v334[0] = (uint64_t)v331;
                v335 = " in ";
                v336 = 770;
                v242 = "LC_SEGMENT_64";
LABEL_482:
                v337[0] = (uint64_t)v334;
                v338 = v242;
                v339 = 770;
                v340[0] = (uint64_t)v337;
                v341 = " command ";
                v342 = 770;
                v343[0] = (uint64_t)v340;
                v344 = v313;
                v345 = 2306;
                v243 = " greater than than the segment's vmaddr plus vmsize";
                goto LABEL_479;
              }
              if (v218 != 9 && v218 != 10 && (_DWORD)v356 != 1 && (_DWORD)v356 != 18)
              {
                checkOverlappingElement(&v319, (uint64_t *)&v327, v219, v220, "section contents");
                if (v319)
                  goto LABEL_443;
              }
              if (v302 < DWORD2(v355))
              {
                v240 = "reloff field of section ";
                goto LABEL_477;
              }
              v226 = 8 * HIDWORD(v355);
              if (v226 + (unint64_t)DWORD2(v355) > v302)
              {
                v240 = "reloff field plus nreloc field times sizeof(struct relocation_info) of section ";
                goto LABEL_477;
              }
              checkOverlappingElement(&v319, (uint64_t *)&v327, DWORD2(v355), v226, "section relocation entries");
              if (v319)
                goto LABEL_443;
              if (strlen((const char *)&v353) == 6)
              {
                v227 = (_DWORD)v353 == 1163157343 && WORD2(v353) == 21592;
                if (v227
                  && strlen(v352.i8) == 14
                  && v352.i64[0] == 0x5F6E696168635F5FLL
                  && *(uint64_t *)((char *)v352.i64 + 6) == 0x7374726174735F6ELL)
                {
                  *(_QWORD *)(a1 + 352) = v217;
                }
              }
              ++v211;
            }
            while (v298 != v211);
          }
          if (v291 > v302)
          {
            v343[0] = (uint64_t)"load command ";
            v344 = v313;
            v345 = 2307;
            v346[0] = (uint64_t)v343;
            v347 = " fileoff field in ";
            v348 = 770;
            v349[0] = (uint64_t)v346;
            v350 = "LC_SEGMENT_64";
            v351 = 770;
            v374.i64[0] = (uint64_t)v349;
            v375 = " extends past the end of the file";
            v376 = 770;
            v352.i64[0] = (uint64_t)"truncated or malformed object (";
            *(_QWORD *)&v353 = &v374;
            LOWORD(v354) = 515;
            v230 = &v352;
            goto LABEL_432;
          }
          if ((unint64_t)v366 + v291 <= v302)
          {
            if (!(_QWORD)v365 || (unint64_t)v366 <= (unint64_t)v365)
            {
LABEL_453:
              v237 = strlen(&v363.i8[8]) == 10 && v363.i64[1] == 0x455A454741505F5FLL && (unsigned __int16)v364 == 20306;
              *(_BYTE *)(a1 + 344) |= v237;
              goto LABEL_424;
            }
            v346[0] = (uint64_t)"load command ";
            v348 = 259;
            v345 = 265;
            LODWORD(v343[0]) = v313;
            llvm::operator+(v346, v343, (uint64_t)v349);
            v340[0] = (uint64_t)" filesize field in ";
            v342 = 259;
            llvm::operator+(v349, v340, (uint64_t)&v374);
            v337[0] = (uint64_t)"LC_SEGMENT_64";
            v339 = 259;
            llvm::operator+(v374.i64, v337, (uint64_t)&v352);
            v234 = " greater than vmsize field";
          }
          else
          {
            v346[0] = (uint64_t)"load command ";
            v348 = 259;
            v345 = 265;
            LODWORD(v343[0]) = v313;
            llvm::operator+(v346, v343, (uint64_t)v349);
            v340[0] = (uint64_t)" fileoff field plus filesize field in ";
            v342 = 259;
            llvm::operator+(v349, v340, (uint64_t)&v374);
            v337[0] = (uint64_t)"LC_SEGMENT_64";
            v339 = 259;
            llvm::operator+(v374.i64, v337, (uint64_t)&v352);
            v234 = " extends past the end of the file";
          }
          v334[0] = (uint64_t)v234;
          v336 = 259;
          v235 = &v352;
          goto LABEL_452;
        }
        goto LABEL_160;
      case 0x1A:
        if (v326.i32[3] == 72)
        {
          if (v310)
          {
            v268 = "more than one LC_ROUTINES_64 and or LC_ROUTINES command";
LABEL_583:
            v357.i64[0] = (uint64_t)v268;
            LOWORD(v359) = 259;
            malformedError((const llvm::Twine *)&v368, v357.i64);
            v90 = v368.i64[0];
LABEL_584:
            *a5 = v90;
            goto LABEL_568;
          }
LABEL_135:
          v310 = v326.i64[0];
          goto LABEL_251;
        }
        v262 = "LC_ROUTINES_64 command ";
        goto LABEL_565;
      case 0x1B:
        if (v326.i32[3] != 24)
        {
          v262 = "LC_UUID command ";
          goto LABEL_565;
        }
        if (!*(_QWORD *)(a1 + 336))
        {
          *(_QWORD *)(a1 + 336) = v326.i64[0];
          goto LABEL_251;
        }
        v268 = "more than one LC_UUID command";
        goto LABEL_583;
      case 0x1D:
        v122 = "LC_CODE_SIGNATURE";
        v123 = "code signature data";
        v124 = &v323;
        goto LABEL_156;
      case 0x1E:
        v122 = "LC_SEGMENT_SPLIT_INFO";
        v123 = "split info data";
        v124 = &v325;
        goto LABEL_156;
      case 0x20:
        v73 = "LC_LAZY_LOAD_DYLIB";
LABEL_142:
        v71 = (llvm::object::Binary *)a1;
        v72 = v64;
LABEL_239:
        checkDylibCommand(v357.i64, v71, (uint64_t)&v326, v72, v73);
        v90 = v357.i64[0];
        *v50 = v357.i64[0];
        if (v90)
          goto LABEL_568;
        v177 = v326.i64[0];
        v178 = *(unsigned int *)(a1 + 112);
        if (v178 >= *(unsigned int *)(a1 + 116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, v316, v178 + 1, 8);
          v178 = *(unsigned int *)(a1 + 112);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v178) = v177;
        ++*(_DWORD *)(a1 + 112);
        goto LABEL_251;
      case 0x21:
        if (v326.i32[3] == 20)
        {
          v357 = 0uLL;
          LODWORD(v358) = 0;
          getStruct<llvm::MachO::encryption_info_command>(&v357, (llvm::object::Binary *)a1, (int8x16_t *)v326.i64[0]);
          v125 = v357.u32[2];
          v126 = v357.u32[3];
          v127 = "LC_ENCRYPTION_INFO";
LABEL_159:
          checkEncryptCommand(&v368, (llvm::object::Binary *)a1, &v326, v64, v125, v126, &v321, v127);
LABEL_160:
          v90 = v368.i64[0];
          goto LABEL_250;
        }
        v262 = "LC_ENCRYPTION_INFO command ";
        goto LABEL_565;
      case 0x22:
        v128 = "LC_DYLD_INFO";
        v129 = (llvm::object::Binary *)a1;
        v130 = v64;
        v131 = (_QWORD *)(a1 + 304);
LABEL_237:
        checkDyldInfoCommand((const llvm::Twine *)&v357, v129, (uint64_t)&v326, v130, v131, v128, (uint64_t *)&v327);
        goto LABEL_249;
      case 0x24:
        v132 = v326.i64[0];
        v133 = v326.i32[3];
        v134 = "LC_VERSION_MIN_MACOSX";
        goto LABEL_165;
      case 0x25:
        v132 = v326.i64[0];
        v133 = v326.i32[3];
        v134 = "LC_VERSION_MIN_IPHONEOS";
        goto LABEL_165;
      case 0x26:
        v122 = "LC_FUNCTION_STARTS";
        v123 = "function starts data";
        v135 = (llvm::object::Binary *)a1;
        v136 = v64;
        v124 = (uint64_t *)(a1 + 312);
        goto LABEL_248;
      case 0x27:
        v113 = "LC_DYLD_ENVIRONMENT";
LABEL_150:
        checkDyldCommand(&v357, (llvm::object::Binary *)a1, (uint64_t)&v326, v64, v113);
        goto LABEL_249;
      case 0x29:
        v122 = "LC_DATA_IN_CODE";
        v123 = "data in code info";
        v135 = (llvm::object::Binary *)a1;
        v136 = v64;
        v124 = (uint64_t *)(a1 + 288);
        goto LABEL_248;
      case 0x2A:
        if (v326.i32[3] != 16)
        {
          v262 = "LC_SOURCE_VERSION command ";
          goto LABEL_565;
        }
        if (!v307)
        {
          v307 = v326.i64[0];
          goto LABEL_251;
        }
        v268 = "more than one LC_SOURCE_VERSION command";
        goto LABEL_583;
      case 0x2B:
        v122 = "LC_DYLIB_CODE_SIGN_DRS";
        v123 = "code signing RDs data";
        v124 = &v324;
LABEL_156:
        v135 = (llvm::object::Binary *)a1;
        v136 = v64;
        goto LABEL_248;
      case 0x2C:
        if (v326.i32[3] == 24)
        {
          v357 = 0uLL;
          *(_QWORD *)&v358 = 0;
          getStruct<llvm::MachO::encryption_info_command_64>((uint64_t)&v357, (llvm::object::Binary *)a1, v326.u64[0]);
          v125 = v357.u32[2];
          v126 = v357.u32[3];
          v127 = "LC_ENCRYPTION_INFO_64";
          goto LABEL_159;
        }
        v262 = "LC_ENCRYPTION_INFO_64 command ";
LABEL_565:
        v352.i64[0] = (uint64_t)v262;
        LOWORD(v354) = 259;
        LOWORD(v365) = 265;
        v363.i32[0] = (int)v64;
        llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
        v257 = " has incorrect cmdsize";
        goto LABEL_566;
      case 0x2D:
        checkLinkerOptCommand(&v357, (llvm::object::Binary *)a1, (uint64_t)&v326, v64);
        goto LABEL_249;
      case 0x2E:
        v122 = "LC_LINKER_OPTIMIZATION_HINT";
        v123 = "linker optimization hints";
        v135 = (llvm::object::Binary *)a1;
        v136 = v64;
        v124 = (uint64_t *)(a1 + 296);
LABEL_248:
        checkLinkeditDataCommand((const llvm::Twine *)&v357, v135, (uint64_t)&v326, v136, v124, v122, (uint64_t *)&v327, v123);
        goto LABEL_249;
      case 0x2F:
        v132 = v326.i64[0];
        v133 = v326.i32[3];
        v134 = "LC_VERSION_MIN_TVOS";
        goto LABEL_165;
      case 0x30:
        v132 = v326.i64[0];
        v133 = v326.i32[3];
        v134 = "LC_VERSION_MIN_WATCHOS";
LABEL_165:
        checkVersCommand(&v357, v132, v133, v64, &v322, v134);
        goto LABEL_249;
      case 0x31:
        if (v326.i32[3] == 40)
        {
          v137 = v326.i64[0];
          if (v137 < llvm::object::Binary::getData((llvm::object::Binary *)a1))
            goto LABEL_544;
          v138 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
          if (v137 + 40 > v138 + v139)
            goto LABEL_544;
          v140 = *(_QWORD *)(v137 + 24);
          v141 = *(_DWORD *)(a1 + 8);
          v142 = bswap64(v140);
          v143 = bswap64(*(_QWORD *)(v137 + 32));
          if (((1 << v141) & 0x155800) == 0)
          {
            v143 = *(_QWORD *)(v137 + 32);
            v142 = *(_QWORD *)(v137 + 24);
          }
          if (v141 <= 0x14)
            v144 = v143;
          else
            v144 = *(_QWORD *)(v137 + 32);
          if (v141 <= 0x14)
            v145 = v142;
          else
            v145 = v140;
          llvm::object::Binary::getData((llvm::object::Binary *)a1);
          if (v145 > v146)
          {
            v269 = v64;
            v270 = "offset field of LC_NOTE command ";
            goto LABEL_594;
          }
          if (v145 + v144 > v146)
          {
            v269 = v64;
            v270 = "size field plus offset field of LC_NOTE command ";
            goto LABEL_594;
          }
          checkOverlappingElement(&v374, (uint64_t *)&v327, v145, v144, "LC_NOTE data");
          v90 = v374.i64[0];
          if (v374.i64[0])
            goto LABEL_567;
LABEL_274:
          *v50 = 0;
          goto LABEL_251;
        }
        v363.i64[0] = (uint64_t)"load command ";
        *(_QWORD *)&v364 = v64;
        LOWORD(v365) = 2307;
        v273 = " LC_NOTE has incorrect cmdsize";
        break;
      case 0x32:
        v147 = v326.i64[0];
        if (v147 < llvm::object::Binary::getData((llvm::object::Binary *)a1))
          goto LABEL_544;
        v148 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
        if (v147 + 24 > v148 + v149)
          goto LABEL_544;
        v150 = *(_DWORD *)(v147 + 8);
        v151 = *(_DWORD *)(v147 + 20);
        v152 = *(_DWORD *)(a1 + 8);
        v153 = bswap32(v150);
        v154 = bswap32(v151);
        if (((1 << v152) & 0x155800) == 0)
        {
          v154 = *(_DWORD *)(v147 + 20);
          v153 = *(_DWORD *)(v147 + 8);
        }
        if (v152 <= 0x14)
          v155 = v154;
        else
          v155 = v151;
        if (v152 <= 0x14)
          v156 = v153;
        else
          v156 = v150;
        if (8 * v155 + 24 == v326.u32[3])
        {
          v157 = v326.i64[0];
          v158 = *(_DWORD *)(a1 + 216);
          if (v158 != (_DWORD)v155)
          {
            if (v158 <= v155)
            {
              if (*(_DWORD *)(a1 + 220) < v155)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v22, v21, v155, 8);
                v158 = *(_DWORD *)(a1 + 216);
              }
              if (v158 != (_DWORD)v155)
                bzero((void *)(*v22 + 8 * v158), 8 * (v155 - v158));
            }
            *(_DWORD *)(a1 + 216) = v155;
          }
          if ((_DWORD)v155)
          {
            v159 = 0;
            do
            {
              *(_QWORD *)(*v22 + v159) = v157 + 24 + v159;
              v159 += 8;
            }
            while (8 * v155 != v159);
          }
          if (v308)
          {
            if ((v312 & 0x8000000) == 0 && v304)
            {
              v259 = "more than two LC_BUILD_VERSION load commands";
              goto LABEL_545;
            }
            v304 = v326.i64[0];
            if (v308 < llvm::object::Binary::getData((llvm::object::Binary *)a1))
              goto LABEL_600;
            v160 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
            if (v308 + 24 > v160 + v161)
              goto LABEL_600;
            v162 = *(_DWORD *)(v308 + 8);
            v163 = *(_DWORD *)(a1 + 8);
            v164 = bswap32(v162);
            if (((1 << v163) & 0x155800) == 0)
              v164 = *(_DWORD *)(v308 + 8);
            if (v163 <= 0x14)
              v162 = v164;
            if ((v162 == 6 || v162 == 1) && (v162 != 1 || v156 == 6) && (v162 != 6 || v156 == 1))
              goto LABEL_274;
            if ((v312 & 0x8000000) == 0)
            {
              v259 = "the two LC_BUILD_VERSION load commands are not for the platforms MACOS and MACCATALYST";
              goto LABEL_545;
            }
            if (v156 - 6 < 4 || v156 == 1)
              goto LABEL_274;
          }
          else
          {
            v308 = v326.i64[0];
            if ((v312 & 0x8000000) == 0 || v156 - 6 < 4)
              goto LABEL_274;
            if (v156 == 1)
            {
              v50 = a5;
              goto LABEL_274;
            }
          }
          v352.i64[0] = (uint64_t)"the LC_BUILD_VERSION, command ";
          LOWORD(v354) = 259;
          LOWORD(v365) = 265;
          v363.i32[0] = v313;
          llvm::operator+(v352.i64, v363.i64, (uint64_t)&v368);
          v374.i64[0] = (uint64_t)", platform value is not allowed when the mach header flag MH_SIM_SUPPORT is set";
          v376 = 259;
          llvm::operator+(v368.i64, v374.i64, (uint64_t)&v357);
          malformedError((const llvm::Twine *)v349, v357.i64);
          v90 = v349[0];
          *a5 = v349[0];
          if (!v90)
            goto LABEL_251;
          goto LABEL_568;
        }
        v363.i64[0] = (uint64_t)"load command ";
        *(_QWORD *)&v364 = v64;
        LOWORD(v365) = 2307;
        v273 = " LC_BUILD_VERSION_COMMAND has incorrect cmdsize";
        break;
      default:
        switch(v326.i32[2])
        {
          case 0x80000018:
            v71 = (llvm::object::Binary *)a1;
            v72 = v64;
            v73 = "LC_LOAD_WEAK_DYLIB";
            goto LABEL_239;
          case 0x8000001C:
            if (v326.i32[3] <= 0xBu)
            {
              v363.i64[0] = (uint64_t)"load command ";
              *(_QWORD *)&v364 = v64;
              LOWORD(v365) = 2307;
              v273 = " LC_RPATH cmdsize too small";
              goto LABEL_528;
            }
            v165 = v326.i64[0];
            if (v165 < llvm::object::Binary::getData((llvm::object::Binary *)a1))
              goto LABEL_544;
            v166 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
            if (v165 + 12 > v166 + v167)
              goto LABEL_544;
            v168 = *(_DWORD *)(v165 + 4);
            v169 = *(_DWORD *)(v165 + 8);
            v170 = *(_DWORD *)(a1 + 8);
            v171 = bswap32(v168);
            v172 = bswap32(v169);
            if (((1 << v170) & 0x155800) == 0)
            {
              v172 = *(_DWORD *)(v165 + 8);
              v171 = *(_DWORD *)(v165 + 4);
            }
            if (v170 <= 0x14)
            {
              v169 = v172;
              v168 = v171;
            }
            if (v169 <= 0xB)
            {
              v363.i64[0] = (uint64_t)"load command ";
              *(_QWORD *)&v364 = v64;
              LOWORD(v365) = 2307;
              v273 = " LC_RPATH path.offset field too small, not past the end of the rpath_command struct";
            }
            else
            {
              v173 = v168 >= v169;
              v174 = v168 - v169;
              if (v174 != 0 && v173)
              {
                v175 = (unsigned __int8 *)(v326.i64[0] + v169);
                do
                {
                  if (!*v175++)
                    goto LABEL_274;
                  --v174;
                }
                while (v174);
                v363.i64[0] = (uint64_t)"load command ";
                *(_QWORD *)&v364 = v64;
                LOWORD(v365) = 2307;
                v273 = " LC_RPATH library name extends past the end of the load command";
              }
              else
              {
                v363.i64[0] = (uint64_t)"load command ";
                *(_QWORD *)&v364 = v64;
                LOWORD(v365) = 2307;
                v273 = " LC_RPATH path.offset field extends past the end of the load command";
              }
            }
            break;
          case 0x8000001F:
            v71 = (llvm::object::Binary *)a1;
            v72 = v64;
            v73 = "LC_REEXPORT_DYLIB";
            goto LABEL_239;
          case 0x80000022:
            v129 = (llvm::object::Binary *)a1;
            v130 = v64;
            v131 = (_QWORD *)(a1 + 304);
            v128 = "LC_DYLD_INFO_ONLY";
            goto LABEL_237;
          case 0x80000023:
            v71 = (llvm::object::Binary *)a1;
            v72 = v64;
            v73 = "LC_LOAD_UPWARD_DYLIB";
            goto LABEL_239;
          case 0x80000028:
            if (v326.i32[3] != 24)
            {
              v262 = "LC_MAIN command ";
              goto LABEL_565;
            }
            if (!v305)
            {
              v305 = v326.i64[0];
              goto LABEL_251;
            }
            v268 = "more than one LC_MAIN command";
            goto LABEL_583;
          case 0x80000033:
            v135 = (llvm::object::Binary *)a1;
            v136 = v64;
            v124 = (uint64_t *)(a1 + 328);
            v122 = "LC_DYLD_EXPORTS_TRIE";
            v123 = "export trie";
            goto LABEL_248;
          case 0x80000034:
            v135 = (llvm::object::Binary *)a1;
            v136 = v64;
            v124 = (uint64_t *)(a1 + 320);
            v122 = "LC_DYLD_CHAINED_FIXUPS";
            v123 = "chained fixups";
            goto LABEL_248;
          default:
            goto LABEL_259;
        }
        goto LABEL_528;
    }
    break;
  }
LABEL_528:
  v352.i64[0] = (uint64_t)&v363;
  *(_QWORD *)&v353 = v273;
LABEL_529:
  LOWORD(v354) = 770;
  v368.i64[0] = (uint64_t)"truncated or malformed object (";
  *(_QWORD *)&v369 = &v352;
  LOWORD(v370) = 515;
  v357.i64[0] = (uint64_t)&v368;
  *(_QWORD *)&v358 = ")";
LABEL_546:
  LOWORD(v359) = 770;
  v260 = operator new(0x30uLL);
  v90 = llvm::object::GenericBinaryError::GenericBinaryError(v260, &v357, 3);
  goto LABEL_567;
}

uint64_t malformedError(const llvm::Twine *a1, uint64_t *a2)
{
  int v3;
  const char *v4;
  _BOOL4 v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  void *v10;
  uint64_t result;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  char v15;
  char v16;

  v3 = *((unsigned __int8 *)a2 + 32);
  if (*((_BYTE *)a2 + 32))
  {
    v4 = "truncated or malformed object (";
    if (v3 == 1)
    {
      v12[0] = "truncated or malformed object (";
      v13 = 259;
      v5 = 1;
    }
    else
    {
      v7 = a2[1];
      if (*((_BYTE *)a2 + 33) == 1)
      {
        v8 = (uint64_t *)*a2;
      }
      else
      {
        v3 = 2;
        v8 = a2;
      }
      v12[0] = "truncated or malformed object (";
      v12[2] = v8;
      v12[3] = v7;
      LOBYTE(v13) = 3;
      HIBYTE(v13) = v3;
      v5 = v3 == 1;
    }
    v9 = !v5;
    if (v5)
      LOBYTE(v3) = 3;
    else
      LOBYTE(v3) = 2;
    if (v9)
      v4 = (const char *)v12;
    v14[0] = v4;
    v14[2] = ")";
    v6 = 3;
  }
  else
  {
    v13 = 256;
    v6 = 1;
  }
  v15 = v3;
  v16 = v6;
  v10 = operator new(0x30uLL);
  result = llvm::object::GenericBinaryError::GenericBinaryError(v10, v14, 3);
  *(_QWORD *)a1 = result;
  return result;
}

_QWORD *checkLinkeditDataCommand(const llvm::Twine *a1, llvm::object::Binary *this, uint64_t a3, unsigned int a4, _QWORD *a5, _BYTE *a6, uint64_t *a7, _BYTE *a8)
{
  char v11;
  __int128 *v12;
  char v13;
  uint64_t *v14;
  int v16;
  const char *v17;
  char v18;
  _DWORD *v23;
  uint64_t Data;
  uint64_t v25;
  __int16 v26;
  void *v27;
  _QWORD *result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  char v41;
  const char *v42;
  char v43;
  char v44;
  const char *v45;
  const char *v46;
  __int16 v47;
  uint64_t v48[4];
  __int16 v49;
  const char *v50;
  __int16 v51;
  uint64_t v52[2];
  unint64_t v53;
  __int16 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61[2];
  const char *v62;
  __int16 v63;
  uint64_t v64[2];
  uint64_t *v65;
  __int16 v66;
  uint64_t v67[2];
  const char *v68;
  __int16 v69;

  if (*(_DWORD *)(a3 + 12) <= 0xFu)
  {
    v52[0] = (uint64_t)"load command ";
    v53 = a4;
    v54 = 2307;
    *(_QWORD *)&v55 = v52;
    *(_QWORD *)&v56 = " ";
    LOWORD(v57) = 770;
    if (*a6)
    {
      *(_QWORD *)&v58 = &v55;
      *(_QWORD *)&v59 = a6;
      LOWORD(v60) = 770;
      v11 = 2;
    }
    else
    {
      v58 = v55;
      v59 = v56;
      v60 = v57;
      v11 = v57;
      if (v57 == 1)
      {
        v14 = (uint64_t *)" cmdsize too small";
        v61[0] = (uint64_t)" cmdsize too small";
        v63 = 259;
        v13 = 3;
LABEL_7:
        v64[0] = (uint64_t)"truncated or malformed object (";
        v65 = v14;
        LOBYTE(v66) = 3;
        HIBYTE(v66) = v13;
        v67[0] = (uint64_t)v64;
        v68 = ")";
        v69 = 770;
LABEL_22:
        v27 = operator new(0x30uLL);
        result = (_QWORD *)llvm::object::GenericBinaryError::GenericBinaryError(v27, v67, 3);
        *(_QWORD *)a1 = result;
        return result;
      }
    }
    v12 = (__int128 *)v58;
    v13 = 2;
    if (BYTE1(v60) != 1)
    {
      v11 = 2;
      v12 = &v58;
    }
    v61[0] = (uint64_t)v12;
    v61[1] = *((_QWORD *)&v58 + 1);
    v62 = " cmdsize too small";
    LOBYTE(v63) = v11;
    HIBYTE(v63) = 3;
    v14 = v61;
    goto LABEL_7;
  }
  if (*a5)
  {
    v16 = *a6;
    v17 = "more than one ";
    if (*a6)
    {
      *(_QWORD *)&v58 = "more than one ";
      *(_QWORD *)&v59 = a6;
      LOWORD(v60) = 771;
      v18 = 2;
    }
    else
    {
      *(_QWORD *)&v58 = "more than one ";
      LOWORD(v60) = 259;
      v18 = 3;
    }
    if (v16)
      v17 = (const char *)&v58;
    v61[0] = (uint64_t)v17;
    v62 = " command";
    LOBYTE(v63) = v18;
    HIBYTE(v63) = 3;
    v64[0] = (uint64_t)"truncated or malformed object (";
    v65 = v61;
    v26 = 515;
    goto LABEL_20;
  }
  v23 = *(_DWORD **)a3;
  if ((unint64_t)v23 < llvm::object::Binary::getData(this)
    || (Data = llvm::object::Binary::getData(this), (unint64_t)(v23 + 4) > Data + v25))
  {
    v64[0] = (uint64_t)"truncated or malformed object (";
    v65 = (uint64_t *)"Structure read out-of-range";
    v26 = 771;
LABEL_20:
    v66 = v26;
    v67[0] = (uint64_t)v64;
    v68 = ")";
LABEL_21:
    v69 = 770;
    goto LABEL_22;
  }
  v29 = v23[1];
  v30 = v23[2];
  v31 = v23[3];
  v32 = *((_DWORD *)this + 2);
  v33 = bswap32(v29);
  v34 = bswap32(v30);
  v35 = bswap32(v31);
  if (((1 << v32) & 0x155800) == 0)
  {
    v35 = v23[3];
    v34 = v23[2];
    v33 = v23[1];
  }
  if (v32 <= 0x14)
    v36 = v35;
  else
    v36 = v31;
  if (v32 <= 0x14)
    v37 = v34;
  else
    v37 = v30;
  if (v32 <= 0x14)
    v29 = v33;
  if (v29 != 16)
  {
    if (*a6)
    {
      *(_QWORD *)&v55 = a6;
      *(_QWORD *)&v56 = " command ";
      LOWORD(v57) = 771;
      v42 = (const char *)&v55;
      v43 = 2;
    }
    else
    {
      v42 = " command ";
      *(_QWORD *)&v55 = " command ";
      LOWORD(v57) = 259;
      v43 = 3;
    }
    *(_QWORD *)&v58 = v42;
    *(_QWORD *)&v59 = a4;
    LOBYTE(v60) = v43;
    BYTE1(v60) = 9;
    v45 = " has incorrect cmdsize";
LABEL_53:
    v61[0] = (uint64_t)&v58;
    v62 = v45;
    v63 = 770;
    v64[0] = (uint64_t)"truncated or malformed object (";
    v65 = v61;
    v66 = 515;
    v67[0] = (uint64_t)v64;
    v68 = ")";
    goto LABEL_21;
  }
  llvm::object::Binary::getData(this);
  if (v38 < v37)
  {
    v39 = *a6;
    v40 = (uint64_t *)"dataoff field of ";
    if (*a6)
    {
      v52[0] = (uint64_t)"dataoff field of ";
      v53 = (unint64_t)a6;
      v54 = 771;
      v41 = 2;
    }
    else
    {
      v52[0] = (uint64_t)"dataoff field of ";
      v54 = 259;
      v41 = 3;
    }
    if (v39)
      v40 = v52;
    *(_QWORD *)&v55 = v40;
    *(_QWORD *)&v56 = " command ";
    LOBYTE(v57) = v41;
    BYTE1(v57) = 3;
    *(_QWORD *)&v58 = &v55;
    *(_QWORD *)&v59 = a4;
    LOWORD(v60) = 2306;
    v45 = " extends past the end of the file";
    goto LABEL_53;
  }
  if (v37 + v36 <= v38)
  {
    result = checkOverlappingElement(a1, a7, v37, v36, a8);
    if (!*(_QWORD *)a1)
    {
      *a5 = *(_QWORD *)a3;
      *(_QWORD *)a1 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v55 = "dataoff field plus datasize field of ";
    LOWORD(v57) = 259;
    v44 = 1;
    HIBYTE(v54) = 1;
    if (*a6)
    {
      v52[0] = (uint64_t)a6;
      v44 = 3;
    }
    LOBYTE(v54) = v44;
    llvm::operator+((uint64_t *)&v55, v52, (uint64_t)&v58);
    v50 = " command ";
    v51 = 259;
    llvm::operator+((uint64_t *)&v58, (uint64_t *)&v50, (uint64_t)v61);
    v49 = 265;
    LODWORD(v48[0]) = a4;
    llvm::operator+(v61, v48, (uint64_t)v64);
    v46 = " extends past the end of the file";
    v47 = 259;
    llvm::operator+(v64, (uint64_t *)&v46, (uint64_t)v67);
    return (_QWORD *)malformedError(a1, v67);
  }
  return result;
}

uint64_t checkDyldInfoCommand(const llvm::Twine *a1, llvm::object::Binary *a2, uint64_t a3, unsigned int a4, _QWORD *a5, _BYTE *a6, uint64_t *a7)
{
  char v10;
  const char *v11;
  char v12;
  const char **v13;
  void *v15;
  int8x16_t *v16;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  char v30;
  unint64_t v31;
  const char *v32;
  char v33;
  const char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  const char *v42;
  __int16 v43;
  uint64_t v44[4];
  __int16 v45;
  const char *v46;
  __int16 v47;
  uint64_t v48[4];
  __int16 v49;
  uint64_t v50[2];
  unint64_t v51;
  __int16 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  const char *v61;
  __int16 v62;
  uint64_t v63[2];
  const char *v64;
  const char *v65;
  __int16 v66;
  int8x16_t v67;
  const char *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 12) <= 0x2Fu)
  {
    v50[0] = (uint64_t)"load command ";
    v51 = a4;
    v52 = 2307;
    *(_QWORD *)&v53 = v50;
    *(_QWORD *)&v54 = " ";
    LOWORD(v55) = 770;
    if (*a6)
    {
      *(_QWORD *)&v56 = &v53;
      *(_QWORD *)&v57 = a6;
      LOWORD(v58) = 770;
      v10 = 2;
    }
    else
    {
      v56 = v53;
      v57 = v54;
      v58 = v55;
      v10 = v55;
      if (v55 == 1)
      {
        v13 = (const char **)" cmdsize too small";
        v59 = " cmdsize too small";
        v62 = 259;
        v12 = 3;
        v11 = v60;
LABEL_7:
        v63[0] = (uint64_t)"truncated or malformed object (";
        v64 = (const char *)v13;
        v65 = v11;
        LOBYTE(v66) = 3;
        HIBYTE(v66) = v12;
        v67.i64[0] = (uint64_t)v63;
        v68 = ")";
        LOWORD(v71) = 770;
LABEL_10:
        v15 = operator new(0x30uLL);
        v16 = &v67;
LABEL_11:
        result = llvm::object::GenericBinaryError::GenericBinaryError(v15, v16, 3);
        *(_QWORD *)a1 = result;
        return result;
      }
    }
    v11 = (const char *)v56;
    v12 = 2;
    if (BYTE1(v58) != 1)
    {
      v10 = 2;
      v11 = (const char *)&v56;
    }
    v59 = v11;
    v60 = (const char *)*((_QWORD *)&v56 + 1);
    v61 = " cmdsize too small";
    LOBYTE(v62) = v10;
    HIBYTE(v62) = 3;
    v13 = &v59;
    goto LABEL_7;
  }
  if (*a5)
  {
    v63[0] = (uint64_t)"truncated or malformed object (";
    v64 = "more than one LC_DYLD_INFO and or LC_DYLD_INFO_ONLY command";
    v66 = 771;
    v67.i64[0] = (uint64_t)v63;
    v68 = ")";
    LOWORD(v71) = 770;
    goto LABEL_10;
  }
  result = getStructOrErr<llvm::MachO::dyld_info_command>(&v67, a2, *(int8x16_t **)a3);
  if ((v75 & 1) != 0)
  {
    v28 = v67.i64[0];
    v67.i64[0] = 0;
    *(_QWORD *)a1 = v28;
    return result;
  }
  if (v67.i32[1] != 48)
  {
    if (*a6)
    {
      v50[0] = (uint64_t)a6;
      v51 = (unint64_t)" command ";
      v52 = 771;
      v29 = v50;
      v30 = 2;
    }
    else
    {
      v29 = (uint64_t *)" command ";
      v50[0] = (uint64_t)" command ";
      v52 = 259;
      v30 = 3;
    }
    *(_QWORD *)&v53 = v29;
    *(_QWORD *)&v54 = a4;
    LOBYTE(v55) = v30;
    BYTE1(v55) = 9;
    v34 = " has incorrect cmdsize";
LABEL_38:
    *(_QWORD *)&v56 = &v53;
    *(_QWORD *)&v57 = v34;
    LOWORD(v58) = 770;
    v59 = "truncated or malformed object (";
    v61 = (const char *)&v56;
    v62 = 515;
    v63[0] = (uint64_t)&v59;
    v64 = ")";
    v66 = 770;
    v15 = operator new(0x30uLL);
    v16 = (int8x16_t *)v63;
    goto LABEL_11;
  }
  v21 = v68;
  v40 = v69;
  v41 = HIDWORD(v68);
  v39 = v70;
  v38 = v71;
  v37 = v72;
  v36 = v73;
  v35 = v74;
  v23 = v67.u32[2];
  v22 = v67.u32[3];
  llvm::object::Binary::getData(a2);
  if (v24 < v23)
  {
    v25 = *a6;
    v26 = (uint64_t *)"rebase_off field of ";
    if (*a6)
    {
      v48[0] = (uint64_t)"rebase_off field of ";
      v48[2] = (uint64_t)a6;
      v49 = 771;
      v27 = 2;
    }
    else
    {
      v48[0] = (uint64_t)"rebase_off field of ";
      v49 = 259;
      v27 = 3;
    }
    if (v25)
      v26 = v48;
    v50[0] = (uint64_t)v26;
    v51 = (unint64_t)" command ";
    LOBYTE(v52) = v27;
    HIBYTE(v52) = 3;
    *(_QWORD *)&v53 = v50;
    *(_QWORD *)&v54 = a4;
    LOWORD(v55) = 2306;
    v34 = " extends past the end of the file";
    goto LABEL_38;
  }
  v31 = v24;
  if (v23 + v22 > v24)
  {
    v32 = "rebase_off field plus rebase_size field of ";
LABEL_26:
    v50[0] = (uint64_t)v32;
    v52 = 259;
    v33 = 1;
    HIBYTE(v49) = 1;
    if (*a6)
    {
      v48[0] = (uint64_t)a6;
      v33 = 3;
    }
    LOBYTE(v49) = v33;
    llvm::operator+(v50, v48, (uint64_t)&v53);
    v46 = " command ";
    v47 = 259;
    llvm::operator+((uint64_t *)&v53, (uint64_t *)&v46, (uint64_t)&v56);
    v45 = 265;
    LODWORD(v44[0]) = a4;
    llvm::operator+((uint64_t *)&v56, v44, (uint64_t)&v59);
    v42 = " extends past the end of the file";
    v43 = 259;
    llvm::operator+((uint64_t *)&v59, (uint64_t *)&v42, (uint64_t)v63);
    return malformedError(a1, v63);
  }
  result = (uint64_t)checkOverlappingElement(a1, a7, v23, v22, "dyld rebase info");
  if (*(_QWORD *)a1)
    return result;
  if (v31 < v21)
  {
    v32 = "bind_off field of ";
    goto LABEL_26;
  }
  if (v41 + v21 > v31)
  {
    v32 = "bind_off field plus bind_size field of ";
    goto LABEL_26;
  }
  result = (uint64_t)checkOverlappingElement(a1, a7, v21, v41, "dyld bind info");
  if (*(_QWORD *)a1)
    return result;
  if (v31 < v40)
  {
    v32 = "weak_bind_off field of ";
    goto LABEL_26;
  }
  if (v39 + v40 > v31)
  {
    v32 = "weak_bind_off field plus weak_bind_size field of ";
    goto LABEL_26;
  }
  result = (uint64_t)checkOverlappingElement(a1, a7, v40, v39, "dyld weak bind info");
  if (*(_QWORD *)a1)
    return result;
  if (v31 < v38)
  {
    v32 = "lazy_bind_off field of ";
    goto LABEL_26;
  }
  if (v37 + v38 > v31)
  {
    v32 = "lazy_bind_off field plus lazy_bind_size field of ";
    goto LABEL_26;
  }
  result = (uint64_t)checkOverlappingElement(a1, a7, v38, v37, "dyld lazy bind info");
  if (*(_QWORD *)a1)
    return result;
  if (v31 < v36)
  {
    v32 = "export_off field of ";
    goto LABEL_26;
  }
  if (v35 + v36 > v31)
  {
    v32 = "export_off field plus export_size field of ";
    goto LABEL_26;
  }
  result = (uint64_t)checkOverlappingElement(a1, a7, v36, v35, "dyld export info");
  if (!*(_QWORD *)a1)
  {
    *a5 = *(_QWORD *)a3;
    *(_QWORD *)a1 = 0;
  }
  return result;
}

uint64_t checkDylibCommand(uint64_t *a1, llvm::object::Binary *a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  char v8;
  __int128 *v9;
  uint64_t v10;
  char v11;
  const char *v12;
  const char *v13;
  void *v14;
  uint64_t result;
  unsigned __int8 *v17;
  unsigned int v18;
  _QWORD v20[2];
  uint64_t v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[4];
  char v32;
  char v33;
  _QWORD v34[4];
  char v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 12) <= 0x17u)
  {
    v20[0] = "load command ";
    v21 = a4;
    v22 = 2307;
    *(_QWORD *)&v23 = v20;
    *(_QWORD *)&v24 = " ";
    LOWORD(v25) = 770;
    if (*a5)
    {
      *(_QWORD *)&v26 = &v23;
      *(_QWORD *)&v27 = a5;
      LOWORD(v28) = 770;
      v8 = 2;
LABEL_4:
      v10 = *((_QWORD *)&v26 + 1);
      v9 = (__int128 *)v26;
      v11 = 2;
      if (BYTE1(v28) != 1)
      {
        v8 = 2;
        v9 = &v26;
      }
      v12 = " cmdsize too small";
LABEL_7:
      v29[0] = v9;
      v29[1] = v10;
      v29[2] = v12;
      LOBYTE(v30) = v8;
      HIBYTE(v30) = 3;
      v13 = (const char *)v29;
LABEL_8:
      v31[0] = "truncated or malformed object (";
      v31[2] = v13;
      v32 = 3;
      v33 = v11;
      v34[0] = v31;
      v34[2] = ")";
      v35 = 2;
      v36 = 3;
      v14 = operator new(0x30uLL);
      result = llvm::object::GenericBinaryError::GenericBinaryError(v14, v34, 3);
      *a1 = result;
      return result;
    }
    v26 = v23;
    v27 = v24;
    v28 = v25;
    v8 = v25;
    if (v25 != 1)
      goto LABEL_4;
    v13 = " cmdsize too small";
LABEL_44:
    v29[0] = v13;
    v30 = 259;
    v11 = 3;
    goto LABEL_8;
  }
  result = getStructOrErr<llvm::MachO::dylib_command>((uint64_t)&v37, a2, *(_QWORD *)a3);
  if ((v39 & 1) == 0)
  {
    if (v38 > 0x17)
    {
      if (HIDWORD(v37) > v38)
      {
        v17 = (unsigned __int8 *)(*(_QWORD *)a3 + v38);
        v18 = HIDWORD(v37) - v38;
        do
        {
          if (!*v17++)
          {
            *a1 = 0;
            return result;
          }
          --v18;
        }
        while (v18);
        v20[0] = "load command ";
        v21 = a4;
        v22 = 2307;
        *(_QWORD *)&v23 = v20;
        *(_QWORD *)&v24 = " ";
        LOWORD(v25) = 770;
        if (*a5)
        {
          *(_QWORD *)&v26 = &v23;
          *(_QWORD *)&v27 = a5;
          LOWORD(v28) = 770;
          v8 = 2;
        }
        else
        {
          v26 = v23;
          v27 = v24;
          v28 = v25;
          v8 = v25;
          if (v25 == 1)
          {
            v13 = " library name extends past the end of the load command";
            goto LABEL_44;
          }
        }
        v10 = *((_QWORD *)&v26 + 1);
        v9 = (__int128 *)v26;
        v11 = 2;
        if (BYTE1(v28) != 1)
        {
          v8 = 2;
          v9 = &v26;
        }
        v12 = " library name extends past the end of the load command";
        goto LABEL_7;
      }
      v20[0] = "load command ";
      v21 = a4;
      v22 = 2307;
      *(_QWORD *)&v23 = v20;
      *(_QWORD *)&v24 = " ";
      LOWORD(v25) = 770;
      if (*a5)
      {
        *(_QWORD *)&v26 = &v23;
        *(_QWORD *)&v27 = a5;
        LOWORD(v28) = 770;
        v8 = 2;
      }
      else
      {
        v26 = v23;
        v27 = v24;
        v28 = v25;
        v8 = v25;
        if (v25 == 1)
        {
          v13 = " name.offset field extends past the end of the load command";
          goto LABEL_44;
        }
      }
      v10 = *((_QWORD *)&v26 + 1);
      v9 = (__int128 *)v26;
      v11 = 2;
      if (BYTE1(v28) != 1)
      {
        v8 = 2;
        v9 = &v26;
      }
      v12 = " name.offset field extends past the end of the load command";
      goto LABEL_7;
    }
    v20[0] = "load command ";
    v21 = a4;
    v22 = 2307;
    *(_QWORD *)&v23 = v20;
    *(_QWORD *)&v24 = " ";
    LOWORD(v25) = 770;
    if (*a5)
    {
      *(_QWORD *)&v26 = &v23;
      *(_QWORD *)&v27 = a5;
      LOWORD(v28) = 770;
      v8 = 2;
    }
    else
    {
      v26 = v23;
      v27 = v24;
      v28 = v25;
      v8 = v25;
      if (v25 == 1)
      {
        v13 = " name.offset field too small, not past the end of the dylib_command struct";
        goto LABEL_44;
      }
    }
    v10 = *((_QWORD *)&v26 + 1);
    v9 = (__int128 *)v26;
    v11 = 2;
    if (BYTE1(v28) != 1)
    {
      v8 = 2;
      v9 = &v26;
    }
    v12 = " name.offset field too small, not past the end of the dylib_command struct";
    goto LABEL_7;
  }
  *a1 = v37;
  return result;
}

uint64_t checkDyldCommand(_QWORD *a1, llvm::object::Binary *this, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  char v8;
  __int128 *v9;
  uint64_t v10;
  char v11;
  const char *v12;
  const char *v13;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned __int8 *v27;
  _QWORD v29[2];
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[4];
  __int16 v39;
  _QWORD v40[2];
  const char *v41;
  __int16 v42;
  _QWORD *v43;
  const char *v44;
  __int16 v45;

  if (*(_DWORD *)(a3 + 12) > 0xBu)
  {
    v16 = *(_QWORD *)a3;
    if (v16 < llvm::object::Binary::getData(this)
      || (result = llvm::object::Binary::getData(this), v16 + 12 > result + v18))
    {
      v40[0] = "truncated or malformed object (";
      v41 = "Structure read out-of-range";
      v42 = 771;
      v43 = v40;
      v44 = ")";
      v45 = 770;
      goto LABEL_12;
    }
    v20 = *(_DWORD *)(v16 + 4);
    v21 = *(_DWORD *)(v16 + 8);
    v22 = *((_DWORD *)this + 2);
    v23 = bswap32(v20);
    v24 = bswap32(v21);
    if (((1 << v22) & 0x155800) == 0)
    {
      v24 = *(_DWORD *)(v16 + 8);
      v23 = *(_DWORD *)(v16 + 4);
    }
    if (v22 <= 0x14)
    {
      v21 = v24;
      v20 = v23;
    }
    if (v21 > 0xB)
    {
      v25 = v20 >= v21;
      v26 = v20 - v21;
      if (v26 != 0 && v25)
      {
        v27 = (unsigned __int8 *)(*(_QWORD *)a3 + v21);
        do
        {
          if (!*v27++)
          {
            *a1 = 0;
            return result;
          }
          --v26;
        }
        while (v26);
        v29[0] = "load command ";
        v30 = a4;
        v31 = 2307;
        *(_QWORD *)&v32 = v29;
        *(_QWORD *)&v33 = " ";
        LOWORD(v34) = 770;
        if (*a5)
        {
          *(_QWORD *)&v35 = &v32;
          *(_QWORD *)&v36 = a5;
          LOWORD(v37) = 770;
          v8 = 2;
        }
        else
        {
          v35 = v32;
          v36 = v33;
          v37 = v34;
          v8 = v34;
          if (v34 == 1)
          {
            v13 = " dyld name extends past the end of the load command";
            goto LABEL_26;
          }
        }
        v10 = *((_QWORD *)&v35 + 1);
        v9 = (__int128 *)v35;
        v11 = 2;
        if (BYTE1(v37) != 1)
        {
          v8 = 2;
          v9 = &v35;
        }
        v12 = " dyld name extends past the end of the load command";
        goto LABEL_7;
      }
      v29[0] = "load command ";
      v30 = a4;
      v31 = 2307;
      *(_QWORD *)&v32 = v29;
      *(_QWORD *)&v33 = " ";
      LOWORD(v34) = 770;
      if (*a5)
      {
        *(_QWORD *)&v35 = &v32;
        *(_QWORD *)&v36 = a5;
        LOWORD(v37) = 770;
        v8 = 2;
      }
      else
      {
        v35 = v32;
        v36 = v33;
        v37 = v34;
        v8 = v34;
        if (v34 == 1)
        {
          v13 = " name.offset field extends past the end of the load command";
          goto LABEL_26;
        }
      }
      v10 = *((_QWORD *)&v35 + 1);
      v9 = (__int128 *)v35;
      v11 = 2;
      if (BYTE1(v37) != 1)
      {
        v8 = 2;
        v9 = &v35;
      }
      v12 = " name.offset field extends past the end of the load command";
      goto LABEL_7;
    }
    v29[0] = "load command ";
    v30 = a4;
    v31 = 2307;
    *(_QWORD *)&v32 = v29;
    *(_QWORD *)&v33 = " ";
    LOWORD(v34) = 770;
    if (*a5)
    {
      *(_QWORD *)&v35 = &v32;
      *(_QWORD *)&v36 = a5;
      LOWORD(v37) = 770;
      v8 = 2;
    }
    else
    {
      v35 = v32;
      v36 = v33;
      v37 = v34;
      v8 = v34;
      if (v34 == 1)
      {
        v13 = " name.offset field too small, not past the end of the dylinker_command struct";
        goto LABEL_26;
      }
    }
    v10 = *((_QWORD *)&v35 + 1);
    v9 = (__int128 *)v35;
    v11 = 2;
    if (BYTE1(v37) != 1)
    {
      v8 = 2;
      v9 = &v35;
    }
    v12 = " name.offset field too small, not past the end of the dylinker_command struct";
    goto LABEL_7;
  }
  v29[0] = "load command ";
  v30 = a4;
  v31 = 2307;
  *(_QWORD *)&v32 = v29;
  *(_QWORD *)&v33 = " ";
  LOWORD(v34) = 770;
  if (!*a5)
  {
    v35 = v32;
    v36 = v33;
    v37 = v34;
    v8 = v34;
    if (v34 != 1)
      goto LABEL_4;
    v13 = " cmdsize too small";
LABEL_26:
    v38[0] = v13;
    v39 = 259;
    v11 = 3;
    goto LABEL_8;
  }
  *(_QWORD *)&v35 = &v32;
  *(_QWORD *)&v36 = a5;
  LOWORD(v37) = 770;
  v8 = 2;
LABEL_4:
  v10 = *((_QWORD *)&v35 + 1);
  v9 = (__int128 *)v35;
  v11 = 2;
  if (BYTE1(v37) != 1)
  {
    v8 = 2;
    v9 = &v35;
  }
  v12 = " cmdsize too small";
LABEL_7:
  v38[0] = v9;
  v38[1] = v10;
  v38[2] = v12;
  LOBYTE(v39) = v8;
  HIBYTE(v39) = 3;
  v13 = (const char *)v38;
LABEL_8:
  v40[0] = "truncated or malformed object (";
  v41 = v13;
  LOBYTE(v42) = 3;
  HIBYTE(v42) = v11;
  v43 = v40;
  v44 = ")";
  v45 = 770;
LABEL_12:
  v19 = operator new(0x30uLL);
  result = llvm::object::GenericBinaryError::GenericBinaryError(v19, &v43, 3);
  *a1 = result;
  return result;
}

_QWORD *checkVersCommand(_QWORD *result, uint64_t a2, int a3, unsigned int a4, _QWORD *a5, _BYTE *a6)
{
  _QWORD *v6;
  char v7;
  __int128 *v8;
  char v9;
  const char *v10;
  void *v11;
  _QWORD v12[4];
  __int16 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  const char *v23;
  __int16 v24;
  _QWORD *v25;
  const char *v26;
  __int16 v27;

  v6 = result;
  if (a3 != 16)
  {
    v12[0] = "load command ";
    v12[2] = a4;
    v13 = 2307;
    *(_QWORD *)&v14 = v12;
    *(_QWORD *)&v15 = " ";
    LOWORD(v16) = 770;
    if (*a6)
    {
      *(_QWORD *)&v17 = &v14;
      *(_QWORD *)&v18 = a6;
      LOWORD(v19) = 770;
      v7 = 2;
    }
    else
    {
      v17 = v14;
      v18 = v15;
      v19 = v16;
      v7 = v16;
      if (v16 == 1)
      {
        v10 = " has incorrect cmdsize";
        v20[0] = " has incorrect cmdsize";
        v21 = 259;
        v9 = 3;
LABEL_9:
        v22[0] = "truncated or malformed object (";
        v23 = v10;
        LOBYTE(v24) = 3;
        HIBYTE(v24) = v9;
        v25 = v22;
        v26 = ")";
        v27 = 770;
        goto LABEL_10;
      }
    }
    v8 = (__int128 *)v17;
    v9 = 2;
    if (BYTE1(v19) != 1)
    {
      v7 = 2;
      v8 = &v17;
    }
    v20[0] = v8;
    v20[1] = *((_QWORD *)&v17 + 1);
    v20[2] = " has incorrect cmdsize";
    LOBYTE(v21) = v7;
    HIBYTE(v21) = 3;
    v10 = (const char *)v20;
    goto LABEL_9;
  }
  if (*a5)
  {
    v22[0] = "truncated or malformed object (";
    v23 = "more than one LC_VERSION_MIN_MACOSX, LC_VERSION_MIN_IPHONEOS, LC_VERSION_MIN_TVOS or LC_VERSION_MIN_WATCHOS command";
    v24 = 771;
    v25 = v22;
    v26 = ")";
    v27 = 770;
LABEL_10:
    v11 = operator new(0x30uLL);
    result = (_QWORD *)llvm::object::GenericBinaryError::GenericBinaryError(v11, &v25, 3);
    *v6 = result;
    return result;
  }
  *a5 = a2;
  *result = 0;
  return result;
}

int8x16_t getStruct<llvm::MachO::encryption_info_command>(int8x16_t *a1, llvm::object::Binary *this, int8x16_t *a3)
{
  uint64_t Data;
  uint64_t v7;
  int8x16_t result;
  unsigned int v9;
  BOOL v10;
  int v11;

  if (llvm::object::Binary::getData(this) > (unint64_t)a3
    || (Data = llvm::object::Binary::getData(this), (unint64_t)a3[1].u64 + 4 > Data + v7))
  {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  result = *a3;
  *a1 = *a3;
  a1[1].i32[0] = a3[1].i32[0];
  v9 = *((_DWORD *)this + 2);
  v10 = v9 > 0x14;
  v11 = (1 << v9) & 0x155800;
  if (!v10 && v11 != 0)
  {
    result = vrev32q_s8(*a1);
    *a1 = result;
    a1[1].i32[0] = bswap32(a1[1].u32[0]);
  }
  return result;
}

uint64_t checkEncryptCommand(_QWORD *a1, llvm::object::Binary *this, _QWORD *a3, unsigned int a4, unint64_t a5, uint64_t a6, _QWORD *a7, _BYTE *a8)
{
  uint64_t result;
  unint64_t v16;
  int v17;
  const char *v18;
  char v19;
  void *v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  char v24;
  char v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[2];
  const char *v31;
  __int16 v32;
  _QWORD *v33;
  const char *v34;
  __int16 v35;

  if (!*a7)
  {
    result = llvm::object::Binary::getData(this);
    if (v16 >= a5)
    {
      if (a6 + a5 <= v16)
      {
        *a7 = *a3;
        *a1 = 0;
        return result;
      }
      v17 = *a8;
      v18 = "cryptoff field plus cryptsize field of ";
      if (*a8)
        goto LABEL_5;
    }
    else
    {
      v17 = *a8;
      v18 = "cryptoff field of ";
      if (*a8)
      {
LABEL_5:
        v21[0] = v18;
        v21[2] = a8;
        v22 = 771;
        v19 = 2;
LABEL_9:
        if (v17)
          v18 = (const char *)v21;
        v23[0] = v18;
        v23[2] = " command ";
        v24 = v19;
        v25 = 3;
        v26[0] = v23;
        v26[2] = a4;
        v27 = 2306;
        v28[0] = v26;
        v28[2] = " extends past the end of the file";
        v29 = 770;
        v30[0] = "truncated or malformed object (";
        v31 = (const char *)v28;
        v32 = 515;
        v33 = v30;
        v34 = ")";
        goto LABEL_12;
      }
    }
    v21[0] = v18;
    v22 = 259;
    v19 = 3;
    goto LABEL_9;
  }
  v30[0] = "truncated or malformed object (";
  v31 = "more than one LC_ENCRYPTION_INFO and or LC_ENCRYPTION_INFO_64 command";
  v32 = 771;
  v33 = v30;
  v34 = ")";
LABEL_12:
  v35 = 770;
  v20 = operator new(0x30uLL);
  result = llvm::object::GenericBinaryError::GenericBinaryError(v20, &v33, 3);
  *a1 = result;
  return result;
}

double getStruct<llvm::MachO::encryption_info_command_64>(uint64_t a1, llvm::object::Binary *this, unint64_t a3)
{
  uint64_t Data;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  BOOL v10;
  int v11;

  if (llvm::object::Binary::getData(this) > a3 || (Data = llvm::object::Binary::getData(this), a3 + 24 > Data + v7))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v8 = *(_OWORD *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
  v9 = *((_DWORD *)this + 2);
  v10 = v9 > 0x14;
  v11 = (1 << v9) & 0x155800;
  if (!v10 && v11 != 0)
  {
    *(int8x16_t *)a1 = vrev32q_s8(*(int8x16_t *)a1);
    *(int8x8_t *)&v8 = vrev32_s8(*(int8x8_t *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v8;
  }
  return *(double *)&v8;
}

void *checkLinkerOptCommand(_QWORD *a1, llvm::object::Binary *this, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  void *result;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  _QWORD v27[2];
  uint64_t v28;
  __int16 v29;
  _QWORD v30[2];
  const char *v31;
  __int16 v32;
  _QWORD v33[2];
  uint64_t v34;
  __int16 v35;
  _QWORD *v36;
  const char *v37;
  __int16 v38;
  _QWORD v39[2];
  const char *v40;
  __int16 v41;
  _QWORD *v42;
  const char *v43;
  __int16 v44;

  if (*(_DWORD *)(a3 + 12) <= 0xBu)
  {
    v33[0] = "load command ";
    v34 = a4;
    v35 = 2307;
    v36 = v33;
    v37 = " LC_LINKER_OPTION cmdsize too small";
LABEL_3:
    v38 = 770;
    v39[0] = "truncated or malformed object (";
    v40 = (const char *)&v36;
    v41 = 515;
    v42 = v39;
    v43 = ")";
LABEL_7:
    v44 = 770;
    v11 = operator new(0x30uLL);
    result = (void *)llvm::object::GenericBinaryError::GenericBinaryError(v11, &v42, 3);
    *a1 = result;
    return result;
  }
  v8 = *(_QWORD *)a3;
  if (v8 < llvm::object::Binary::getData(this)
    || (result = (void *)llvm::object::Binary::getData(this), v8 + 12 > (unint64_t)result + v10))
  {
    v39[0] = "truncated or malformed object (";
    v40 = "Structure read out-of-range";
    v41 = 771;
    v42 = v39;
    v43 = ")";
    goto LABEL_7;
  }
  v12 = *(_DWORD *)(v8 + 4);
  v13 = *(_DWORD *)(v8 + 8);
  v14 = *((_DWORD *)this + 2);
  v15 = bswap32(v12);
  v16 = bswap32(v13);
  if (((1 << v14) & 0x155800) == 0)
  {
    v16 = *(_DWORD *)(v8 + 8);
    v15 = *(_DWORD *)(v8 + 4);
  }
  if (v14 <= 0x14)
    v17 = v16;
  else
    v17 = v13;
  if (v14 <= 0x14)
    v12 = v15;
  LODWORD(v18) = 0;
  v19 = v12 - 12;
  if (v12 != 12)
  {
    v20 = (_BYTE *)(*(_QWORD *)a3 + 12);
    do
    {
      if (!*v20)
      {
        do
        {
          v21 = v19;
          v22 = *++v20;
          --v19;
          if (v22)
            v23 = 1;
          else
            v23 = v21 == 1;
        }
        while (!v23);
        if (v21 == 1)
          break;
      }
      v18 = (v18 + 1);
      result = memchr(v20, 0, v19);
      if (!result || (v24 = (_DWORD)result - (_DWORD)v20, (_DWORD)result - (_DWORD)v20 == -1))
      {
        v27[0] = "load command ";
        v28 = a4;
        v29 = 2307;
        v30[0] = v27;
        v31 = " LC_LINKER_OPTION string #";
        v32 = 770;
        v33[0] = v30;
        v34 = v18;
        v35 = 2306;
        v26 = " is not NULL terminated";
        goto LABEL_33;
      }
      if (v19 < v24)
        v24 = v19;
      v25 = v24 + 1;
      v20 += v25;
      v19 -= v25;
    }
    while (v19);
  }
  if ((_DWORD)v17 != (_DWORD)v18)
  {
    v27[0] = "load command ";
    v28 = a4;
    v29 = 2307;
    v30[0] = v27;
    v31 = " LC_LINKER_OPTION string count ";
    v32 = 770;
    v33[0] = v30;
    v34 = v17;
    v35 = 2306;
    v26 = " does not match number of strings";
LABEL_33:
    v36 = v33;
    v37 = v26;
    goto LABEL_3;
  }
  *a1 = 0;
  return result;
}

uint64_t getStruct<llvm::MachO::sub_framework_command>(llvm::object::Binary *a1, unint64_t a2)
{
  uint64_t Data;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (llvm::object::Binary::getData(a1) > a2 || (Data = llvm::object::Binary::getData(a1), a2 + 12 > Data + v5))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *((_DWORD *)a1 + 2);
  v8 = v7 > 0x14;
  v9 = (1 << v7) & 0x155800;
  v10 = v8 || v9 == 0;
  v11 = bswap32(v6);
  if (v10)
    return v6;
  else
    return v11;
}

_QWORD *checkSubCommand(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int a4, _BYTE *a5, _BYTE *a6, unsigned int a7, _BYTE *a8)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  const char *v12;
  char v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v17;
  char v18;
  int v19;
  const char *v20;
  char v21;
  char v22;
  const char *v23;
  uint64_t v24;
  char v25;
  int v26;
  const char *v27;
  char v28;
  uint64_t v29;
  const char *v30;
  int v31;
  int v32;
  int v33;
  char v34;
  int v35;
  __int128 *v36;
  const char *v37;
  __int128 *v38;
  uint64_t v39;
  char v40;
  const char *v41;
  const char *v42;
  char v43;
  const char *v44;
  char v45;
  char v46;
  const char *v47;
  void *v48;
  _QWORD v49[4];
  __int16 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _QWORD v69[2];
  const char *v70;
  uint64_t v71;
  __int16 v72;
  const char *v73;
  const char *v74;
  char v75;
  char v76;

  v8 = result;
  if (a7 > 0xB)
  {
    v14 = a3 - a7;
    if (a3 > a7)
    {
      v15 = (unsigned __int8 *)(a2 + a7);
      do
      {
        if (!*v15++)
        {
          *result = 0;
          return result;
        }
        --v14;
      }
      while (v14);
      *(_QWORD *)&v51 = "load command ";
      *(_QWORD *)&v52 = a4;
      LOWORD(v53) = 2307;
      *(_QWORD *)&v54 = &v51;
      *(_QWORD *)&v55 = " ";
      LOWORD(v56) = 770;
      v17 = *a5;
      if (*a5)
      {
        *(_QWORD *)&v57 = &v54;
        *(_QWORD *)&v58 = a5;
        LOWORD(v59) = 770;
        v18 = 2;
      }
      else
      {
        v57 = v54;
        v58 = v55;
        v59 = v56;
        v18 = v56;
        if (v56 == 1)
        {
          *(_QWORD *)&v60 = " ";
          LOWORD(v62) = 259;
          v18 = 3;
          v19 = 1;
          v20 = " ";
LABEL_23:
          if (*a8)
            v21 = 3;
          else
            v21 = 1;
          if (*a8)
          {
            BYTE1(v65) = v21;
            if (v19)
              v22 = v18;
            else
              v22 = 2;
            v23 = (const char *)&v60;
            if (v19)
              v23 = v20;
            *(_QWORD *)&v63 = v23;
            *((_QWORD *)&v63 + 1) = v17;
            *(_QWORD *)&v64 = a8;
            LOBYTE(v65) = v22;
            goto LABEL_108;
          }
          v63 = v60;
          v64 = v61;
          v65 = v62;
          v22 = v62;
          if (v62 != 1)
          {
LABEL_108:
            v39 = *((_QWORD *)&v63 + 1);
            v38 = (__int128 *)v63;
            v40 = 2;
            if (BYTE1(v65) != 1)
            {
              v22 = 2;
              v38 = &v63;
            }
            v41 = " name extends past the end of the load command";
LABEL_111:
            *(_QWORD *)&v66 = v38;
            *((_QWORD *)&v66 + 1) = v39;
            *(_QWORD *)&v67 = v41;
            LOBYTE(v68) = v22;
            BYTE1(v68) = 3;
            v47 = (const char *)&v66;
LABEL_115:
            v69[0] = "truncated or malformed object (";
            v70 = v47;
            v46 = 3;
            LOBYTE(v72) = 3;
            HIBYTE(v72) = v40;
            v73 = (const char *)v69;
            v74 = ")";
            v43 = 2;
            goto LABEL_116;
          }
          v47 = " name extends past the end of the load command";
LABEL_114:
          *(_QWORD *)&v66 = v47;
          LOWORD(v68) = 259;
          v40 = 3;
          goto LABEL_115;
        }
      }
      v19 = 0;
      v17 = *((_QWORD *)&v57 + 1);
      if (BYTE1(v59) != 1)
        v18 = 2;
      v20 = (const char *)&v57;
      if (BYTE1(v59) == 1)
        v20 = (const char *)v57;
      *(_QWORD *)&v60 = v20;
      *((_QWORD *)&v60 + 1) = *((_QWORD *)&v57 + 1);
      *(_QWORD *)&v61 = " ";
      LOBYTE(v62) = v18;
      BYTE1(v62) = 3;
      goto LABEL_23;
    }
    *(_QWORD *)&v51 = "load command ";
    *(_QWORD *)&v52 = a4;
    LOWORD(v53) = 2307;
    *(_QWORD *)&v54 = &v51;
    *(_QWORD *)&v55 = " ";
    LOWORD(v56) = 770;
    v24 = *a5;
    if (*a5)
    {
      *(_QWORD *)&v57 = &v54;
      *(_QWORD *)&v58 = a5;
      LOWORD(v59) = 770;
      v25 = 2;
    }
    else
    {
      v57 = v54;
      v58 = v55;
      v59 = v56;
      v25 = v56;
      if (v56 == 1)
      {
        *(_QWORD *)&v60 = " ";
        LOWORD(v62) = 259;
        v25 = 3;
        v26 = 1;
        v27 = " ";
        goto LABEL_40;
      }
    }
    v26 = 0;
    v24 = *((_QWORD *)&v57 + 1);
    if (BYTE1(v59) != 1)
      v25 = 2;
    v27 = (const char *)&v57;
    if (BYTE1(v59) == 1)
      v27 = (const char *)v57;
    *(_QWORD *)&v60 = v27;
    *((_QWORD *)&v60 + 1) = *((_QWORD *)&v57 + 1);
    *(_QWORD *)&v61 = " ";
    LOBYTE(v62) = v25;
    BYTE1(v62) = 3;
LABEL_40:
    if (*a8)
      v28 = 3;
    else
      v28 = 1;
    if (*a8)
    {
      BYTE1(v65) = v28;
      if (v26)
        v22 = v25;
      else
        v22 = 2;
      v37 = (const char *)&v60;
      if (v26)
        v37 = v27;
      *(_QWORD *)&v63 = v37;
      *((_QWORD *)&v63 + 1) = v24;
      *(_QWORD *)&v64 = a8;
      LOBYTE(v65) = v22;
    }
    else
    {
      v63 = v60;
      v64 = v61;
      v65 = v62;
      v22 = v62;
      if (v62 == 1)
      {
        v47 = ".offset field extends past the end of the load command";
        goto LABEL_114;
      }
    }
    v39 = *((_QWORD *)&v63 + 1);
    v38 = (__int128 *)v63;
    v40 = 2;
    if (BYTE1(v65) != 1)
    {
      v22 = 2;
      v38 = &v63;
    }
    v41 = ".offset field extends past the end of the load command";
    goto LABEL_111;
  }
  v49[0] = "load command ";
  v49[2] = a4;
  v50 = 2307;
  *(_QWORD *)&v51 = v49;
  *(_QWORD *)&v52 = " ";
  LOWORD(v53) = 770;
  v9 = *a5;
  if (*a5)
  {
    *(_QWORD *)&v54 = &v51;
    *(_QWORD *)&v55 = a5;
    LOWORD(v56) = 770;
    v10 = 2;
  }
  else
  {
    v54 = v51;
    v55 = v52;
    v56 = v53;
    v10 = v53;
    if (v53 == 1)
    {
      *(_QWORD *)&v57 = " ";
      LOWORD(v59) = 259;
      v10 = 3;
      v11 = 1;
      v12 = " ";
      goto LABEL_9;
    }
  }
  v11 = 0;
  v9 = *((_QWORD *)&v54 + 1);
  if (BYTE1(v56) != 1)
    v10 = 2;
  v12 = (const char *)&v54;
  if (BYTE1(v56) == 1)
    v12 = (const char *)v54;
  *(_QWORD *)&v57 = v12;
  *((_QWORD *)&v57 + 1) = *((_QWORD *)&v54 + 1);
  *(_QWORD *)&v58 = " ";
  LOBYTE(v59) = v10;
  BYTE1(v59) = 3;
LABEL_9:
  if (*a8)
    v13 = 3;
  else
    v13 = 1;
  if (*a8)
  {
    BYTE1(v62) = v13;
    if (v11)
      v29 = v10;
    else
      v29 = 2;
    v30 = (const char *)&v57;
    if (v11)
      v30 = v12;
    *(_QWORD *)&v60 = v30;
    *((_QWORD *)&v60 + 1) = v9;
    *(_QWORD *)&v61 = a8;
    LOBYTE(v62) = v29;
  }
  else
  {
    v60 = v57;
    v61 = v58;
    v62 = v59;
    v29 = v59;
    if (v59 == 1)
    {
      v29 = (uint64_t)".offset field too small, not past the end of the ";
      *(_QWORD *)&v63 = ".offset field too small, not past the end of the ";
      LOWORD(v65) = 259;
      v31 = 3;
      v32 = 1;
      v33 = *a6;
      if (*a6)
        v34 = 3;
      else
        v34 = 1;
      goto LABEL_65;
    }
  }
  if ((_DWORD)v29)
  {
    v32 = 0;
    v9 = *((_QWORD *)&v60 + 1);
    if (BYTE1(v62) == 1)
      v31 = v29;
    else
      v31 = 2;
    *((_QWORD *)&v63 + 1) = *((_QWORD *)&v60 + 1);
    *(_QWORD *)&v64 = ".offset field too small, not past the end of the ";
    v29 = (uint64_t)&v60;
    if (BYTE1(v62) == 1)
      v29 = v60;
    BYTE1(v65) = 3;
    *(_QWORD *)&v63 = v29;
    LOBYTE(v65) = v31;
    v33 = *a6;
    if (*a6)
      v34 = 3;
    else
      v34 = 1;
  }
  else
  {
    v31 = 0;
    v9 = 256;
    LOWORD(v65) = 256;
    v32 = 1;
    v33 = *a6;
    if (*a6)
      v34 = 3;
    else
      v34 = 1;
  }
LABEL_65:
  if (v31)
  {
    if (v33)
    {
      BYTE1(v68) = v34;
      if (v32)
        v35 = v31;
      else
        v35 = 2;
      v36 = &v63;
      if (v32)
        v36 = (__int128 *)v29;
      *(_QWORD *)&v66 = v36;
      *((_QWORD *)&v66 + 1) = v9;
      *(_QWORD *)&v67 = a6;
      LOBYTE(v68) = v35;
    }
    else
    {
      v66 = v63;
      v67 = v64;
      v68 = v65;
      v35 = v65;
      if (!(_BYTE)v65)
        goto LABEL_101;
    }
    if (v35 == 1)
    {
      v42 = "truncated or malformed object (";
      v69[0] = "truncated or malformed object (";
      v72 = 259;
      v43 = 3;
    }
    else
    {
      v44 = (const char *)v66;
      v43 = 2;
      if (BYTE1(v68) == 1)
        v45 = v35;
      else
        v45 = 2;
      if (BYTE1(v68) != 1)
        v44 = (const char *)&v66;
      v69[0] = "truncated or malformed object (";
      v70 = v44;
      v71 = *((_QWORD *)&v66 + 1);
      LOBYTE(v72) = 3;
      HIBYTE(v72) = v45;
      v42 = (const char *)v69;
    }
    v73 = v42;
    v74 = ")";
    v46 = 3;
    goto LABEL_116;
  }
  LOWORD(v68) = 256;
LABEL_101:
  v43 = 0;
  v72 = 256;
  v46 = 1;
LABEL_116:
  v75 = v43;
  v76 = v46;
  v48 = operator new(0x30uLL);
  result = (_QWORD *)llvm::object::GenericBinaryError::GenericBinaryError(v48, &v73, 3);
  *v8 = result;
  return result;
}

uint64_t checkThreadCommand(const llvm::Twine *a1, llvm::object::Binary *this, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  char v8;
  const char *v9;
  const char *v10;
  char v11;
  const char *v12;
  const char *v13;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  char v32;
  const char *v33;
  const char *v34;
  char v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  char v41;
  uint64_t *v42;
  char v43;
  const char *v44;
  __int16 v45;
  uint64_t v46[3];
  char v47;
  char v48;
  const char *v49;
  __int16 v50;
  uint64_t v51[2];
  uint64_t v52;
  __int16 v53;
  uint64_t v54[2];
  const char *v55;
  __int16 v56;
  uint64_t v57[2];
  uint64_t v58;
  __int16 v59;
  uint64_t v60[2];
  const char *v61;
  __int16 v62;
  uint64_t v63[2];
  uint64_t v64;
  __int16 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  const char *v74;
  __int16 v75;
  uint64_t v76[2];
  const char *v77;
  const char *v78;
  __int16 v79;
  uint64_t v80[2];
  const char *v81;
  __int16 v82;

  if (*(_DWORD *)(a3 + 12) <= 7u)
  {
    *(_QWORD *)&v66 = "load command ";
    *(_QWORD *)&v67 = a4;
    LOWORD(v68) = 2307;
    if (*a5)
    {
      *(_QWORD *)&v69 = &v66;
      *(_QWORD *)&v70 = a5;
      LOWORD(v71) = 770;
      v8 = 2;
    }
    else
    {
      v69 = v66;
      v70 = v67;
      v71 = v68;
      v8 = v68;
      if (v68 == 1)
      {
        v13 = " cmdsize too small";
        goto LABEL_79;
      }
    }
    v10 = (const char *)*((_QWORD *)&v69 + 1);
    v9 = (const char *)v69;
    v11 = 2;
    if (BYTE1(v71) != 1)
    {
      v8 = 2;
      v9 = (const char *)&v69;
    }
    v12 = " cmdsize too small";
    goto LABEL_7;
  }
  v16 = *(_QWORD *)a3;
  if (v16 < llvm::object::Binary::getData(this)
    || (result = llvm::object::Binary::getData(this), v16 + 8 > result + v18))
  {
    v76[0] = (uint64_t)"truncated or malformed object (";
    v77 = "Structure read out-of-range";
    v79 = 771;
    v80[0] = (uint64_t)v76;
    v81 = ")";
    v82 = 770;
LABEL_13:
    v19 = operator new(0x30uLL);
    result = llvm::object::GenericBinaryError::GenericBinaryError(v19, v80, 3);
    *(_QWORD *)a1 = result;
    return result;
  }
  v20 = *(_DWORD *)(v16 + 4);
  v21 = *((_DWORD *)this + 2);
  v22 = bswap32(v20);
  if (((1 << v21) & 0x155800) == 0)
    v22 = *(_DWORD *)(v16 + 4);
  if (v21 <= 0x14)
    v20 = v22;
  if (v20 < 9)
  {
LABEL_77:
    *(_QWORD *)a1 = 0;
    return result;
  }
  v23 = 0;
  v24 = *(_QWORD *)a3 + v20;
  v25 = *((unsigned int *)this + 13);
  v26 = (unsigned int *)(*(_QWORD *)a3 + 8);
  result = 33554444;
  while (1)
  {
    if ((unint64_t)(v26 + 1) > v24)
    {
      v63[0] = (uint64_t)"load command ";
      v64 = a4;
      v65 = 2307;
      v31 = "flavor in ";
LABEL_82:
      *(_QWORD *)&v66 = v63;
      *(_QWORD *)&v67 = v31;
      LOWORD(v68) = 770;
      if (*a5)
      {
        *(_QWORD *)&v69 = &v66;
        *(_QWORD *)&v70 = a5;
        LOWORD(v71) = 770;
        v8 = 2;
      }
      else
      {
        v69 = v66;
        v70 = v67;
        v71 = v68;
        v8 = v68;
        if (v68 == 1)
        {
          v13 = " extends past end of command";
          goto LABEL_79;
        }
      }
      v10 = (const char *)*((_QWORD *)&v69 + 1);
      v9 = (const char *)v69;
      v11 = 2;
      if (BYTE1(v71) != 1)
      {
        v8 = 2;
        v9 = (const char *)&v69;
      }
      v12 = " extends past end of command";
LABEL_7:
      v72 = v9;
      v73 = v10;
      v74 = v12;
      LOBYTE(v75) = v8;
      HIBYTE(v75) = 3;
      v13 = (const char *)&v72;
LABEL_8:
      v76[0] = (uint64_t)"truncated or malformed object (";
      v77 = v13;
      v78 = v9;
      LOBYTE(v79) = 3;
      HIBYTE(v79) = v11;
      v80[0] = (uint64_t)v76;
      v81 = ")";
LABEL_9:
      v82 = 770;
      goto LABEL_13;
    }
    LODWORD(v27) = *v26;
    v28 = bswap32(*v26);
    if (((1 << v21) & 0x155800) == 0)
      v28 = *v26;
    if (v21 <= 0x14)
      v27 = v28;
    else
      v27 = v27;
    if ((unint64_t)(v26 + 2) > v24)
    {
      v63[0] = (uint64_t)"load command ";
      v64 = a4;
      v65 = 2307;
      v31 = " count in ";
      goto LABEL_82;
    }
    v29 = v26[1];
    v30 = bswap32(v29);
    if (((1 << v21) & 0x155800) == 0)
      v30 = v26[1];
    if (v21 <= 0x14)
      v29 = v30;
    if ((int)v25 > 16777222)
    {
      if ((_DWORD)v25 == 16777223)
      {
        switch((int)v27)
        {
          case 4:
            if (v29 != 42)
            {
              v60[0] = (uint64_t)"load command ";
              v62 = 259;
              v59 = 265;
              LODWORD(v57[0]) = a4;
              llvm::operator+(v60, v57, (uint64_t)v63);
              v54[0] = (uint64_t)" count not x86_THREAD_STATE64_COUNT for flavor number ";
              v56 = 259;
              llvm::operator+(v63, v54, (uint64_t)&v66);
              v53 = 265;
              LODWORD(v51[0]) = v23;
              llvm::operator+((uint64_t *)&v66, v51, (uint64_t)&v69);
              v39 = " which is a x86_THREAD_STATE64 flavor in ";
LABEL_135:
              v49 = v39;
              v50 = 259;
              llvm::operator+((uint64_t *)&v69, (uint64_t *)&v49, (uint64_t)&v72);
              v43 = 1;
              v48 = 1;
              if (*a5)
              {
                v46[0] = (uint64_t)a5;
                v43 = 3;
              }
              v47 = v43;
              llvm::operator+((uint64_t *)&v72, v46, (uint64_t)v76);
              v44 = " command";
              v45 = 259;
              v42 = (uint64_t *)&v44;
              goto LABEL_138;
            }
            v26 += 44;
            if ((unint64_t)v26 > v24)
            {
              *(_QWORD *)&v66 = "load command ";
              LOWORD(v68) = 259;
              v65 = 265;
              LODWORD(v63[0]) = a4;
              llvm::operator+((uint64_t *)&v66, v63, (uint64_t)&v69);
              v40 = " x86_THREAD_STATE64 extends past end of command in ";
              goto LABEL_131;
            }
            break;
          case 6:
            if (v29 != 4)
            {
              v60[0] = (uint64_t)"load command ";
              v62 = 259;
              v59 = 265;
              LODWORD(v57[0]) = a4;
              llvm::operator+(v60, v57, (uint64_t)v63);
              v54[0] = (uint64_t)" count not x86_EXCEPTION_STATE64_COUNT for flavor number ";
              v56 = 259;
              llvm::operator+(v63, v54, (uint64_t)&v66);
              v53 = 265;
              LODWORD(v51[0]) = v23;
              llvm::operator+((uint64_t *)&v66, v51, (uint64_t)&v69);
              v39 = " which is a x86_EXCEPTION_STATE64 flavor in ";
              goto LABEL_135;
            }
            v26 += 6;
            if ((unint64_t)v26 > v24)
            {
              *(_QWORD *)&v66 = "load command ";
              LOWORD(v68) = 259;
              v65 = 265;
              LODWORD(v63[0]) = a4;
              llvm::operator+((uint64_t *)&v66, v63, (uint64_t)&v69);
              v40 = " x86_EXCEPTION_STATE64 extends past end of command in ";
              goto LABEL_131;
            }
            break;
          case 7:
            if (v29 != 44)
            {
              v60[0] = (uint64_t)"load command ";
              v62 = 259;
              v59 = 265;
              LODWORD(v57[0]) = a4;
              llvm::operator+(v60, v57, (uint64_t)v63);
              v54[0] = (uint64_t)" count not x86_THREAD_STATE_COUNT for flavor number ";
              v56 = 259;
              llvm::operator+(v63, v54, (uint64_t)&v66);
              v53 = 265;
              LODWORD(v51[0]) = v23;
              llvm::operator+((uint64_t *)&v66, v51, (uint64_t)&v69);
              v39 = " which is a x86_THREAD_STATE flavor in ";
              goto LABEL_135;
            }
            v26 += 46;
            if ((unint64_t)v26 > v24)
            {
              *(_QWORD *)&v66 = "load command ";
              LOWORD(v68) = 259;
              v65 = 265;
              LODWORD(v63[0]) = a4;
              llvm::operator+((uint64_t *)&v66, v63, (uint64_t)&v69);
              v40 = " x86_THREAD_STATE extends past end of command in ";
              goto LABEL_131;
            }
            break;
          case 8:
            if (v29 != 133)
            {
              v60[0] = (uint64_t)"load command ";
              v62 = 259;
              v59 = 265;
              LODWORD(v57[0]) = a4;
              llvm::operator+(v60, v57, (uint64_t)v63);
              v54[0] = (uint64_t)" count not x86_FLOAT_STATE_COUNT for flavor number ";
              v56 = 259;
              llvm::operator+(v63, v54, (uint64_t)&v66);
              v53 = 265;
              LODWORD(v51[0]) = v23;
              llvm::operator+((uint64_t *)&v66, v51, (uint64_t)&v69);
              v39 = " which is a x86_FLOAT_STATE flavor in ";
              goto LABEL_135;
            }
            v26 += 135;
            if ((unint64_t)v26 > v24)
            {
              *(_QWORD *)&v66 = "load command ";
              LOWORD(v68) = 259;
              v65 = 265;
              LODWORD(v63[0]) = a4;
              llvm::operator+((uint64_t *)&v66, v63, (uint64_t)&v69);
              v40 = " x86_FLOAT_STATE extends past end of command in ";
              goto LABEL_131;
            }
            break;
          case 9:
            if (v29 != 6)
            {
              v60[0] = (uint64_t)"load command ";
              v62 = 259;
              v59 = 265;
              LODWORD(v57[0]) = a4;
              llvm::operator+(v60, v57, (uint64_t)v63);
              v54[0] = (uint64_t)" count not x86_EXCEPTION_STATE_COUNT for flavor number ";
              v56 = 259;
              llvm::operator+(v63, v54, (uint64_t)&v66);
              v53 = 265;
              LODWORD(v51[0]) = v23;
              llvm::operator+((uint64_t *)&v66, v51, (uint64_t)&v69);
              v39 = " which is a x86_EXCEPTION_STATE flavor in ";
              goto LABEL_135;
            }
            v26 += 8;
            if ((unint64_t)v26 <= v24)
              break;
            *(_QWORD *)&v66 = "load command ";
            LOWORD(v68) = 259;
            v65 = 265;
            LODWORD(v63[0]) = a4;
            llvm::operator+((uint64_t *)&v66, v63, (uint64_t)&v69);
            v40 = " x86_EXCEPTION_STATE extends past end of command in ";
LABEL_131:
            v60[0] = (uint64_t)v40;
            v62 = 259;
            llvm::operator+((uint64_t *)&v69, v60, (uint64_t)&v72);
            v41 = 1;
            HIBYTE(v59) = 1;
            if (*a5)
            {
              v57[0] = (uint64_t)a5;
              v41 = 3;
            }
            LOBYTE(v59) = v41;
            llvm::operator+((uint64_t *)&v72, v57, (uint64_t)v76);
            v54[0] = (uint64_t)" command";
            v56 = 259;
            v42 = v54;
LABEL_138:
            llvm::operator+(v76, v42, (uint64_t)v80);
            return malformedError(a1, v80);
          default:
            goto LABEL_89;
        }
      }
      else
      {
        if ((_DWORD)v25 != 16777228 && (_DWORD)v25 != 33554444)
        {
LABEL_99:
          v57[0] = (uint64_t)"unknown cputype (";
          v58 = v25;
          v59 = 2307;
          v60[0] = (uint64_t)v57;
          v61 = ") load command ";
          v62 = 770;
          v63[0] = (uint64_t)v60;
          v64 = a4;
          v65 = 2306;
          *(_QWORD *)&v66 = v63;
          *(_QWORD *)&v67 = " for ";
          LOWORD(v68) = 770;
          if (*a5)
          {
            *(_QWORD *)&v69 = &v66;
            *(_QWORD *)&v70 = a5;
            LOWORD(v71) = 770;
            v32 = 2;
          }
          else
          {
            v69 = v66;
            v70 = v67;
            v71 = v68;
            v32 = v68;
            if (v68 == 1)
            {
              v37 = " command can't be checked";
              goto LABEL_140;
            }
          }
          v34 = (const char *)*((_QWORD *)&v69 + 1);
          v33 = (const char *)v69;
          v35 = 2;
          if (BYTE1(v71) != 1)
          {
            v32 = 2;
            v33 = (const char *)&v69;
          }
          v36 = " command can't be checked";
LABEL_104:
          v72 = v33;
          v73 = v34;
          v74 = v36;
          LOBYTE(v75) = v32;
          HIBYTE(v75) = 3;
          v37 = (const char *)&v72;
LABEL_105:
          v76[0] = (uint64_t)"truncated or malformed object (";
          v77 = v37;
          LOBYTE(v79) = 3;
          HIBYTE(v79) = v35;
          v80[0] = (uint64_t)v76;
          v81 = ")";
          goto LABEL_9;
        }
        if ((_DWORD)v27 == 7)
        {
          if (v29 != 4)
          {
            v57[0] = (uint64_t)"load command ";
            v58 = a4;
            v59 = 2307;
            v60[0] = (uint64_t)v57;
            v61 = " count not ARM_EXCEPTION_STATE64_COUNT for flavor number ";
            v62 = 770;
            v63[0] = (uint64_t)v60;
            v64 = v23;
            v65 = 2306;
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = " which is a ARM_EXCEPTION_STATE64 flavor in ";
            LOWORD(v68) = 770;
            if (!*a5)
              goto LABEL_90;
            goto LABEL_120;
          }
          v26 += 6;
          if ((unint64_t)v26 > v24)
          {
            v63[0] = (uint64_t)"load command ";
            v64 = a4;
            v65 = 2307;
            v38 = " ARM_EXCEPTION_STATE64 extends past end of command in ";
            goto LABEL_119;
          }
        }
        else
        {
          if ((_DWORD)v27 != 6)
            goto LABEL_92;
          if (v29 != 68)
          {
            v57[0] = (uint64_t)"load command ";
            v58 = a4;
            v59 = 2307;
            v60[0] = (uint64_t)v57;
            v61 = " count not ARM_THREAD_STATE64_COUNT for flavor number ";
            v62 = 770;
            v63[0] = (uint64_t)v60;
            v64 = v23;
            v65 = 2306;
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = " which is a ARM_THREAD_STATE64 flavor in ";
            LOWORD(v68) = 770;
            if (!*a5)
              goto LABEL_90;
            goto LABEL_120;
          }
          v26 += 70;
          if ((unint64_t)v26 > v24)
          {
            v63[0] = (uint64_t)"load command ";
            v64 = a4;
            v65 = 2307;
            v38 = " ARM_THREAD_STATE64 extends past end of command in ";
LABEL_119:
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = v38;
            LOWORD(v68) = 770;
            if (!*a5)
              goto LABEL_90;
LABEL_120:
            *(_QWORD *)&v69 = &v66;
            *(_QWORD *)&v70 = a5;
            LOWORD(v71) = 770;
            v8 = 2;
            goto LABEL_121;
          }
        }
      }
    }
    else
    {
      switch((_DWORD)v25)
      {
        case 7:
          if ((_DWORD)v27 != 1)
            goto LABEL_89;
          if (v29 != 16)
          {
            v57[0] = (uint64_t)"load command ";
            v58 = a4;
            v59 = 2307;
            v60[0] = (uint64_t)v57;
            v61 = " count not x86_THREAD_STATE32_COUNT for flavor number ";
            v62 = 770;
            v63[0] = (uint64_t)v60;
            v64 = v23;
            v65 = 2306;
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = " which is a x86_THREAD_STATE32 flavor in ";
            LOWORD(v68) = 770;
            if (!*a5)
              goto LABEL_90;
            goto LABEL_120;
          }
          v26 += 18;
          if ((unint64_t)v26 > v24)
          {
            v63[0] = (uint64_t)"load command ";
            v64 = a4;
            v65 = 2307;
            v38 = " x86_THREAD_STATE32 extends past end of command in ";
            goto LABEL_119;
          }
          break;
        case 0xC:
          if ((_DWORD)v27 != 1)
          {
LABEL_89:
            v51[0] = (uint64_t)"load command ";
            v52 = a4;
            v53 = 2307;
            v54[0] = (uint64_t)v51;
            v55 = " unknown flavor (";
            v56 = 770;
            v57[0] = (uint64_t)v54;
            v58 = v27;
            v59 = 2306;
            v60[0] = (uint64_t)v57;
            v61 = ") for flavor number ";
            v62 = 770;
            v63[0] = (uint64_t)v60;
            v64 = v23;
            v65 = 2306;
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = " in ";
            LOWORD(v68) = 770;
            if (!*a5)
              goto LABEL_90;
            goto LABEL_120;
          }
          if (v29 != 17)
          {
            v57[0] = (uint64_t)"load command ";
            v58 = a4;
            v59 = 2307;
            v60[0] = (uint64_t)v57;
            v61 = " count not ARM_THREAD_STATE_COUNT for flavor number ";
            v62 = 770;
            v63[0] = (uint64_t)v60;
            v64 = v23;
            v65 = 2306;
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = " which is a ARM_THREAD_STATE flavor in ";
            LOWORD(v68) = 770;
            if (*a5)
              goto LABEL_120;
LABEL_90:
            v69 = v66;
            v70 = v67;
            v71 = v68;
            v8 = v68;
            if (v68 != 1)
            {
LABEL_121:
              v10 = (const char *)*((_QWORD *)&v69 + 1);
              v9 = (const char *)v69;
              v11 = 2;
              if (BYTE1(v71) != 1)
              {
                v8 = 2;
                v9 = (const char *)&v69;
              }
              v12 = " command";
              goto LABEL_7;
            }
            v13 = " command";
LABEL_79:
            v72 = v13;
            v75 = 259;
            v11 = 3;
            v9 = v73;
            goto LABEL_8;
          }
          v26 += 19;
          if ((unint64_t)v26 > v24)
          {
            v63[0] = (uint64_t)"load command ";
            v64 = a4;
            v65 = 2307;
            v38 = " ARM_THREAD_STATE extends past end of command in ";
            goto LABEL_119;
          }
          break;
        case 0x12:
          if ((_DWORD)v27 != 1)
          {
LABEL_92:
            v51[0] = (uint64_t)"load command ";
            v52 = a4;
            v53 = 2307;
            v54[0] = (uint64_t)v51;
            v55 = " unknown flavor (";
            v56 = 770;
            v57[0] = (uint64_t)v54;
            v58 = v27;
            v59 = 2306;
            v60[0] = (uint64_t)v57;
            v61 = ") for flavor number ";
            v62 = 770;
            v63[0] = (uint64_t)v60;
            v64 = v23;
            v65 = 2306;
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = " in ";
            LOWORD(v68) = 770;
            if (*a5)
              goto LABEL_93;
LABEL_111:
            v69 = v66;
            v70 = v67;
            v71 = v68;
            v32 = v68;
            if (v68 != 1)
            {
LABEL_94:
              v34 = (const char *)*((_QWORD *)&v69 + 1);
              v33 = (const char *)v69;
              v35 = 2;
              if (BYTE1(v71) != 1)
              {
                v32 = 2;
                v33 = (const char *)&v69;
              }
              v36 = " command";
              goto LABEL_104;
            }
            v37 = " command";
LABEL_140:
            v72 = v37;
            v75 = 259;
            v35 = 3;
            goto LABEL_105;
          }
          if (v29 != 40)
          {
            v57[0] = (uint64_t)"load command ";
            v58 = a4;
            v59 = 2307;
            v60[0] = (uint64_t)v57;
            v61 = " count not PPC_THREAD_STATE_COUNT for flavor number ";
            v62 = 770;
            v63[0] = (uint64_t)v60;
            v64 = v23;
            v65 = 2306;
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = " which is a PPC_THREAD_STATE flavor in ";
            LOWORD(v68) = 770;
            if (!*a5)
              goto LABEL_111;
LABEL_93:
            *(_QWORD *)&v69 = &v66;
            *(_QWORD *)&v70 = a5;
            LOWORD(v71) = 770;
            v32 = 2;
            goto LABEL_94;
          }
          v26 += 42;
          if ((unint64_t)v26 > v24)
          {
            v63[0] = (uint64_t)"load command ";
            v64 = a4;
            v65 = 2307;
            *(_QWORD *)&v66 = v63;
            *(_QWORD *)&v67 = " PPC_THREAD_STATE extends past end of command in ";
            LOWORD(v68) = 770;
            if (!*a5)
              goto LABEL_111;
            goto LABEL_93;
          }
          break;
        default:
          goto LABEL_99;
      }
    }
    ++v23;
    if ((unint64_t)v26 >= v24)
      goto LABEL_77;
  }
}

_QWORD *checkTwoLevelHintsCommand(_QWORD *a1, llvm::object::Binary *this, uint64_t a3, unsigned int a4, _QWORD *a5, uint64_t *a6)
{
  const char *v9;
  const char *v10;
  unint64_t v14;
  uint64_t Data;
  uint64_t v16;
  void *v17;
  _QWORD *result;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[2];
  const char *v35;
  __int16 v36;
  _QWORD *v37;
  const char *v38;
  __int16 v39;

  if (*(_DWORD *)(a3 + 12) != 16)
  {
    v29 = "load command ";
    v30 = a4;
    v31 = 2307;
    v10 = " LC_TWOLEVEL_HINTS has incorrect cmdsize";
LABEL_5:
    v32[0] = &v29;
    v32[2] = v10;
    v33 = 770;
    v34[0] = "truncated or malformed object (";
    v35 = (const char *)v32;
    v36 = 515;
    v37 = v34;
    v38 = ")";
LABEL_10:
    v39 = 770;
    v17 = operator new(0x30uLL);
    result = (_QWORD *)llvm::object::GenericBinaryError::GenericBinaryError(v17, &v37, 3);
    *a1 = result;
    return result;
  }
  if (*a5)
  {
    v9 = "more than one LC_TWOLEVEL_HINTS command";
LABEL_9:
    v34[0] = "truncated or malformed object (";
    v35 = v9;
    v36 = 771;
    v37 = v34;
    v38 = ")";
    goto LABEL_10;
  }
  v14 = *(_QWORD *)a3;
  if (v14 < llvm::object::Binary::getData(this) || (Data = llvm::object::Binary::getData(this), v14 + 16 > Data + v16))
  {
    v9 = "Structure read out-of-range";
    goto LABEL_9;
  }
  v19 = *(_DWORD *)(v14 + 8);
  v20 = *((_DWORD *)this + 2);
  v21 = bswap32(v19);
  v22 = bswap32(*(_DWORD *)(v14 + 12));
  if (((1 << v20) & 0x155800) == 0)
  {
    v22 = *(_DWORD *)(v14 + 12);
    v21 = *(_DWORD *)(v14 + 8);
  }
  if (v20 <= 0x14)
    v23 = v22;
  else
    v23 = *(_DWORD *)(v14 + 12);
  if (v20 <= 0x14)
    v24 = v21;
  else
    v24 = v19;
  llvm::object::Binary::getData(this);
  if (v25 < v24)
  {
    v26 = a4;
    v27 = "offset field of LC_TWOLEVEL_HINTS command ";
LABEL_24:
    v29 = v27;
    v30 = v26;
    v31 = 2307;
    v10 = " extends past the end of the file";
    goto LABEL_5;
  }
  v28 = 4 * v23;
  if (v28 + v24 > v25)
  {
    v26 = a4;
    v27 = "offset field plus nhints times sizeof(struct twolevel_hint) field of LC_TWOLEVEL_HINTS command ";
    goto LABEL_24;
  }
  result = checkOverlappingElement(a1, a6, v24, v28, "two level hints");
  if (!*a1)
  {
    *a5 = *(_QWORD *)a3;
    *a1 = 0;
  }
  return result;
}

int8x16_t getStruct<llvm::MachO::dysymtab_command>(int8x16_t *a1, llvm::object::Binary *this, unint64_t a3)
{
  uint64_t Data;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t result;
  unsigned int v10;
  int8x16_t v11;
  int8x16_t v12;

  if (llvm::object::Binary::getData(this) > a3 || (Data = llvm::object::Binary::getData(this), a3 + 80 > Data + v7))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v8 = *(int8x16_t *)(a3 + 48);
  a1[2] = *(int8x16_t *)(a3 + 32);
  a1[3] = v8;
  a1[4] = *(int8x16_t *)(a3 + 64);
  result = *(int8x16_t *)(a3 + 16);
  *a1 = *(int8x16_t *)a3;
  a1[1] = result;
  v10 = *((_DWORD *)this + 2);
  if (v10 <= 0x14 && ((1 << v10) & 0x155800) != 0)
  {
    v11 = vrev32q_s8(a1[1]);
    *a1 = vrev32q_s8(*a1);
    a1[1] = v11;
    v12 = vrev32q_s8(a1[3]);
    a1[2] = vrev32q_s8(a1[2]);
    a1[3] = v12;
    result = vrev32q_s8(a1[4]);
    a1[4] = result;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::moveSymbolNext(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 12;
  if ((_DWORD)result)
    v4 = 16;
  *a2 += v4;
  return result;
}

size_t llvm::object::MachOObjectFile::getSymbolName@<X0>(llvm::object::Binary *this@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t Data;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t result;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t SymbolIndex;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;

  v6 = *((_QWORD *)this + 34);
  if (v6)
  {
    if (v6 < llvm::object::Binary::getData(this))
      goto LABEL_26;
    Data = llvm::object::Binary::getData(this);
    if (v6 + 24 > Data + v8)
      goto LABEL_26;
    v9 = *((_DWORD *)this + 2);
    v10 = bswap32(*(_DWORD *)(v6 + 16));
    if (((1 << v9) & 0x155800) == 0)
      v10 = *(_DWORD *)(v6 + 16);
    if (v9 <= 0x14)
      LODWORD(v11) = v10;
    else
      LODWORD(v11) = *(_DWORD *)(v6 + 16);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  v13 = llvm::object::Binary::getData(this);
  if (v12 >= v11)
    v11 = v11;
  else
    v11 = v12;
  if (llvm::object::Binary::getData(this) > (unint64_t)a2
    || (result = llvm::object::Binary::getData(this), (unint64_t)(a2 + 2) > result + v15))
  {
LABEL_26:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  v16 = *((_DWORD *)this + 2);
  v17 = bswap32(*a2);
  if (((1 << v16) & 0x155800) == 0)
    v17 = *a2;
  if (v16 <= 0x14)
    v18 = v17;
  else
    v18 = *a2;
  if ((_DWORD)v18)
  {
    v19 = (const char *)(v13 + v11 + v18);
    if ((unint64_t)v19 < llvm::object::Binary::getData(this)
      || (v20 = llvm::object::Binary::getData(this), (unint64_t)v19 >= v20 + v21))
    {
      v24[0] = "bad string index: ";
      v24[2] = v18;
      v25 = 2307;
      v26[0] = v24;
      v26[2] = " for symbol at index ";
      v27 = 770;
      SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex((uint64_t)this, (uint64_t)a2);
      v28[0] = v26;
      v28[2] = &SymbolIndex;
      v29 = 3330;
      v30[0] = "truncated or malformed object (";
      v30[2] = v28;
      v31 = 515;
      v32[0] = v30;
      v32[2] = ")";
      v33 = 770;
      v22 = operator new(0x30uLL);
      result = llvm::object::GenericBinaryError::GenericBinaryError(v22, v32, 3);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = result;
    }
    else
    {
      result = strlen(v19);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v19;
      *(_QWORD *)(a3 + 8) = result;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) &= ~1u;
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSymbolIndex(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t Data;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 272);
  if (!v2)
    goto LABEL_13;
  if (v2 < llvm::object::Binary::getData((llvm::object::Binary *)a1)
    || (Data = llvm::object::Binary::getData((llvm::object::Binary *)a1), v2 + 24 > Data + v6))
  {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  v7 = *(_DWORD *)(a1 + 8);
  v8 = bswap32(*(_DWORD *)(v2 + 8));
  if (((1 << v7) & 0x155800) == 0)
    v8 = *(_DWORD *)(v2 + 8);
  v9 = v7 <= 0x14 ? v8 : *(_DWORD *)(v2 + 8);
  if (!*(_QWORD *)(a1 + 272))
LABEL_13:
    llvm::report_fatal_error((llvm *)"getSymbolIndex() called with no symbol table symbol", (const char *)1);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v11 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  v12 = 12;
  if (v10)
    v12 = 16;
  return (a2 - (v11 + (unint64_t)v9)) / v12;
}

uint64_t getSectionFlags(_DWORD *a1, unsigned int a2)
{
  int v4;
  unint64_t v5;
  unint64_t Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 10) + 8 * a2);
  Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (!v4)
  {
    if (v5 >= Data)
    {
      v11 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
      if (v5 + 68 <= v11 + v12)
      {
        result = *(unsigned int *)(v5 + 56);
        v10 = a1[2];
        if (v10 > 0x14)
          return result;
        goto LABEL_9;
      }
    }
LABEL_11:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if (v5 < Data)
    goto LABEL_11;
  v7 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v5 + 80 > v7 + v8)
    goto LABEL_11;
  result = *(unsigned int *)(v5 + 64);
  v10 = a1[2];
  if (v10 > 0x14)
    return result;
LABEL_9:
  if (((1 << v10) & 0x155800) != 0)
    return bswap32(result);
  return result;
}

unint64_t llvm::object::MachOObjectFile::getNValue(llvm::object::Binary *a1, unint64_t a2)
{
  int v4;
  unint64_t Data;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v4 = (*(uint64_t (**)(llvm::object::Binary *))(*(_QWORD *)a1 + 64))(a1);
  Data = llvm::object::Binary::getData(a1);
  if (v4)
  {
    if (Data <= a2)
    {
      v6 = llvm::object::Binary::getData(a1);
      if (a2 + 16 <= v6 + v7)
      {
        result = *(_QWORD *)(a2 + 8);
        v9 = *((_DWORD *)a1 + 2);
        if (v9 <= 0x14 && ((1 << v9) & 0x155800) != 0)
          return bswap64(result);
        return result;
      }
    }
LABEL_15:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if (Data > a2)
    goto LABEL_15;
  v10 = llvm::object::Binary::getData(a1);
  if (a2 + 12 > v10 + v11)
    goto LABEL_15;
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *((_DWORD *)a1 + 2);
  v14 = bswap32(v12);
  if (((1 << v13) & 0x155800) == 0)
    v14 = *(_DWORD *)(a2 + 8);
  if (v13 <= 0x14)
    return v14;
  else
    return v12;
}

uint64_t llvm::object::MachOObjectFile::getSymbolAlignment(llvm::object::Binary *a1, _QWORD *a2)
{
  uint64_t Data;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 40))(v9);
  if ((v9[0] & 0x10) == 0)
    return 0;
  if (llvm::object::Binary::getData(a1) > (unint64_t)a2
    || (Data = llvm::object::Binary::getData(a1), (unint64_t)(a2 + 1) > Data + v6))
  {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  v7 = *((_DWORD *)a1 + 2);
  v8 = HIWORD(*a2);
  if (((1 << v7) & 0x155800) == 0)
    v8 = HIBYTE(*a2);
  if (v7 > 0x14)
    v8 = HIBYTE(*a2);
  return (1 << (v8 & 0xF));
}

uint64_t llvm::object::MachOObjectFile::getSymbolType@<X0>(llvm::object::Binary *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (llvm::object::Binary::getData(a1) > a2 || (result = llvm::object::Binary::getData(a1), a2 + 8 > result + v7))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  if ((*(_DWORD *)(a2 + 4) & 0xE0) != 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v8 = 3;
LABEL_5:
    *(_DWORD *)a3 = v8;
    return result;
  }
  v9 = *(_DWORD *)(a2 + 4) & 0xE;
  if (v9 != 14)
  {
    if (!v9)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      return result;
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    v8 = 1;
    goto LABEL_5;
  }
  result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, llvm::object::Binary *, unint64_t))(*(_QWORD *)a1 + 128))(v15, a1, a2);
  if ((v16 & 1) != 0)
  {
    v14 = v15[0];
    v15[0] = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v14;
    if ((v16 & 1) == 0)
      return result;
  }
  else
  {
    v10 = v15[0];
    v11 = v15[1];
    result = (*(uint64_t (**)(llvm::object::Binary *))(*(_QWORD *)a1 + 360))(a1);
    if (v11 == v12 && v10 == result)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 1;
      if ((v16 & 1) == 0)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 208))(v11, v10);
      if ((result & 1) != 0
        || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 216))(v11, v10), (_DWORD)result))
      {
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 2;
        if ((v16 & 1) == 0)
          return result;
      }
      else
      {
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 5;
        if ((v16 & 1) == 0)
          return result;
      }
    }
  }
  result = v15[0];
  v15[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSymbolFlags@<X0>(llvm::object::Binary *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  if (llvm::object::Binary::getData(a1) > (unint64_t)a2
    || (result = llvm::object::Binary::getData(a1), (unint64_t)(a2 + 1) > result + v7))
  {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  v8 = *a2;
  v9 = *((_DWORD *)a1 + 2);
  v10 = v9 > 0x14;
  v11 = (1 << v9) & 0x155800;
  v12 = v10 || v11 == 0;
  v13 = __rev16(HIWORD(*a2));
  if (v12)
    v14 = HIWORD(*a2);
  else
    v14 = v13;
  v15 = HIDWORD(v8);
  v16 = HIDWORD(*a2) & 0xE;
  if ((v8 & 0xE000000000) != 0)
    v17 = (32 * ((HIDWORD(*a2) & 0xE) == 10)) | 0x80;
  else
    v17 = 32 * ((HIDWORD(*a2) & 0xE) == 10);
  if ((v8 & 0x100000000) != 0)
  {
    if ((v8 & 0xE00000000) != 0)
    {
      v19 = v17 | 2;
    }
    else
    {
      result = llvm::object::MachOObjectFile::getNValue(a1, (unint64_t)a2);
      v19 = v17 | 3;
      if (result)
        v19 = v17 | 0x12;
    }
    v20 = v19 | 0x40;
    v21 = v19 | 0x200;
    if ((v15 & 0x10) != 0)
      v18 = v21;
    else
      v18 = v20;
  }
  else
  {
    v18 = v17 & 0xFFFFFDFF | (((HIDWORD(v8) >> 4) & 1) << 9);
  }
  v22 = v18 | 4;
  if ((v14 & 0xC0) == 0)
    v22 = v18;
  v23 = v22 | (32 * v14) & 0x100;
  if (v16 == 2)
    v23 |= 8u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v23;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbolSection@<X0>(llvm::object::Binary *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t SymbolIndex;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  if (llvm::object::Binary::getData(a1) > (unint64_t)a2
    || (result = llvm::object::Binary::getData(a1), (unint64_t)(a2 + 1) > result + v7))
  {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  v8 = ((unsigned __int16)WORD2(*a2) >> 8);
  if ((unsigned __int16)WORD2(*a2) >> 8)
  {
    v9 = (v8 - 1);
    if (*((_DWORD *)a1 + 22) <= v9)
    {
      v13[0] = "bad section index: ";
      v13[2] = v8;
      v14 = 2563;
      v15[0] = v13;
      v15[2] = " for symbol at index ";
      v16 = 770;
      SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex((uint64_t)a1, (uint64_t)a2);
      v17[0] = v15;
      v17[2] = &SymbolIndex;
      v18 = 3330;
      v19[0] = "truncated or malformed object (";
      v19[2] = v17;
      v20 = 515;
      v21[0] = v19;
      v21[2] = ")";
      v22 = 770;
      v11 = operator new(0x30uLL);
      result = llvm::object::GenericBinaryError::GenericBinaryError(v11, v21, 3);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = result;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = a1;
    }
  }
  else
  {
    result = (*(uint64_t (**)(llvm::object::Binary *))(*(_QWORD *)a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v10;
  }
  return result;
}

void llvm::object::MachOObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
  ++*a2;
}

size_t llvm::object::MachOObjectFile::getSectionName@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  size_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
  if (*(_BYTE *)(v4 + 15))
    result = 16;
  else
    result = strlen(*(const char **)(*(_QWORD *)(a1 + 80) + 8 * a2));
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSectionAddress(_DWORD *a1, unsigned int a2)
{
  int v4;
  unint64_t v5;
  unint64_t Data;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 10) + 8 * a2);
  Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v4)
  {
    if (v5 >= Data)
    {
      v7 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
      if (v5 + 80 <= v7 + v8)
      {
        result = *(_QWORD *)(v5 + 32);
        v10 = a1[2];
        if (v10 <= 0x14 && ((1 << v10) & 0x155800) != 0)
          return bswap64(result);
        return result;
      }
    }
LABEL_15:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if (v5 < Data)
    goto LABEL_15;
  v11 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v5 + 68 > v11 + v12)
    goto LABEL_15;
  v13 = *(_DWORD *)(v5 + 32);
  v14 = a1[2];
  v15 = bswap32(v13);
  if (((1 << v14) & 0x155800) == 0)
    v15 = *(_DWORD *)(v5 + 32);
  if (v14 <= 0x14)
    return v15;
  else
    return v13;
}

uint64_t llvm::object::MachOObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::MachOObjectFile::getSectionSize(_DWORD *a1, unsigned int a2)
{
  int v4;
  unsigned int *v5;
  unint64_t Data;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  unint64_t v30;
  unint64_t v31;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(unsigned int **)(*((_QWORD *)a1 + 10) + 8 * a2);
  Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (!v4)
  {
    if ((unint64_t)v5 >= Data)
    {
      v18 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
      if ((unint64_t)(v5 + 17) <= v18 + v19)
      {
        v20 = v5[9];
        v21 = v5[10];
        v22 = v5[14];
        v23 = a1[2];
        v24 = bswap32(v20);
        v25 = bswap32(v21);
        LOBYTE(v26) = bswap32(v22);
        if (((1 << v23) & 0x155800) == 0)
        {
          v24 = v5[9];
          v25 = v5[10];
          v26 = v5[14];
        }
        if (v23 <= 0x14)
          v15 = v24;
        else
          v15 = v20;
        if (v23 <= 0x14)
          v16 = v25;
        else
          v16 = v21;
        if (v23 <= 0x14)
          v27 = v26;
        else
          v27 = v22;
        if (v27 != 1 && v27 != 12)
          goto LABEL_36;
        return v15;
      }
    }
LABEL_42:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if ((unint64_t)v5 < Data)
    goto LABEL_42;
  v7 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if ((unint64_t)(v5 + 20) > v7 + v8)
    goto LABEL_42;
  v9 = v5[12];
  v10 = v5[16];
  v11 = a1[2];
  v12 = bswap64(*((_QWORD *)v5 + 5));
  v13 = bswap32(v9);
  LOBYTE(v14) = bswap32(v10);
  if (((1 << v11) & 0x155800) == 0)
  {
    v14 = v5[16];
    v12 = *((_QWORD *)v5 + 5);
    v13 = v5[12];
  }
  if (v11 > 0x14)
  {
    v15 = *((_QWORD *)v5 + 5);
  }
  else
  {
    LOBYTE(v10) = v14;
    v15 = v12;
  }
  if (v11 <= 0x14)
    v16 = v13;
  else
    v16 = v9;
  if (v10 == 1 || v10 == 12)
    return v15;
LABEL_36:
  llvm::object::Binary::getData((llvm::object::Binary *)a1);
  v31 = v30 - v16;
  if (v31 >= v15)
    v31 = v15;
  if (v30 >= v16)
    return v31;
  else
    return 0;
}

uint64_t llvm::object::MachOObjectFile::getSectionContents@<X0>(_DWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t Data;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 10) + 8 * a2);
  Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v6)
  {
    if (v7 >= Data)
    {
      v9 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
      if (v7 + 80 <= v9 + v10)
      {
        v11 = *(_DWORD *)(v7 + 48);
        v12 = a1[2];
        v13 = bswap64(*(_QWORD *)(v7 + 40));
        v14 = bswap32(v11);
        if (((1 << v12) & 0x155800) == 0)
        {
          v13 = *(_QWORD *)(v7 + 40);
          v14 = *(_DWORD *)(v7 + 48);
        }
        v15 = v12 > 0x14;
        if (v12 <= 0x14)
          v16 = v13;
        else
          v16 = *(_QWORD *)(v7 + 40);
        goto LABEL_16;
      }
    }
LABEL_24:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if (v7 < Data)
    goto LABEL_24;
  v17 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v7 + 68 > v17 + v18)
    goto LABEL_24;
  v19 = *(_DWORD *)(v7 + 36);
  v11 = *(_DWORD *)(v7 + 40);
  v20 = a1[2];
  v21 = bswap32(v19);
  v14 = bswap32(v11);
  if (((1 << v20) & 0x155800) == 0)
  {
    v21 = *(_DWORD *)(v7 + 36);
    v14 = *(_DWORD *)(v7 + 40);
  }
  v15 = v20 > 0x14;
  if (v20 <= 0x14)
    v16 = v21;
  else
    v16 = v19;
LABEL_16:
  if (v15)
    v22 = v11;
  else
    v22 = v14;
  result = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  v25 = v22;
  if (v24 < v22)
    v25 = v24;
  v26 = result + v25;
  v27 = v24 - v25;
  *(_BYTE *)(a3 + 16) &= ~1u;
  if (v27 >= v16)
    v27 = v16;
  *(_QWORD *)a3 = v26;
  *(_QWORD *)(a3 + 8) = v27;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSectionAlignment(_DWORD *a1, unsigned int a2)
{
  int v4;
  unint64_t v5;
  unint64_t Data;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 10) + 8 * a2);
  Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v4)
  {
    if (v5 >= Data)
    {
      v7 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
      if (v5 + 80 <= v7 + v8)
      {
        v9 = *(_DWORD *)(v5 + 52);
        goto LABEL_8;
      }
    }
LABEL_13:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if (v5 < Data)
    goto LABEL_13;
  v10 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v5 + 68 > v10 + v11)
    goto LABEL_13;
  v9 = *(_DWORD *)(v5 + 44);
LABEL_8:
  v12 = a1[2];
  v13 = bswap32(v9);
  if (((1 << v12) & 0x155800) == 0)
    v13 = v9;
  if (v12 <= 0x14)
    LOBYTE(v9) = v13;
  return 1 << v9;
}

uint64_t llvm::object::MachOObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::MachOObjectFile::isSectionText(_DWORD *a1, unsigned int a2)
{
  return getSectionFlags(a1, a2) >> 31;
}

BOOL llvm::object::MachOObjectFile::isSectionData(_DWORD *a1, unsigned int a2)
{
  int SectionFlags;
  _BOOL4 v4;

  SectionFlags = getSectionFlags(a1, a2);
  v4 = SectionFlags != 1 && SectionFlags != 12;
  return SectionFlags >= 0 && v4;
}

BOOL llvm::object::MachOObjectFile::isSectionBSS(_DWORD *a1, unsigned int a2)
{
  int SectionFlags;
  _BOOL4 v4;

  SectionFlags = getSectionFlags(a1, a2);
  v4 = SectionFlags == 1 || SectionFlags == 12;
  return SectionFlags >= 0 && v4;
}

uint64_t llvm::object::MachOObjectFile::isDebugSection(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1 + 144))(&v9);
  v1 = v9;
  if ((v11 & 1) != 0)
  {
    v9 = 0;
    v7 = v1;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v7, &v8);
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((v11 & 1) != 0)
    {
      result = (uint64_t)v9;
      v9 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v10 < 7)
    return 0;
  if (*v9 == 1701076831 && *(_DWORD *)((char *)v9 + 3) == 1735746149)
    return 1;
  if (v10 >= 8)
  {
    if (*(_QWORD *)v9 == 0x67756265647A5F5FLL)
      return 1;
    if (*v9 == 1885429599 && *(_DWORD *)((char *)v9 + 3) == 1701605488)
      return 1;
    if (v10 == 11)
    {
      if (*(_QWORD *)v9 != 0x6E695F6264675F5FLL || *(_QWORD *)((char *)v9 + 3) != 0x7865646E695F6264)
        return *(_QWORD *)v9 == 0x5F74666977735F5FLL && *(_QWORD *)((char *)v9 + 3) == 0x7473615F74666977;
      return 1;
    }
    return 0;
  }
  return *v9 == 1885429599 && *(_DWORD *)((char *)v9 + 3) == 1701605488;
}

BOOL llvm::object::MachOObjectFile::isSectionVirtual(_DWORD *a1, unsigned int a2)
{
  int SectionFlags;

  SectionFlags = getSectionFlags(a1, a2);
  return SectionFlags == 1 || SectionFlags == 12;
}

uint64_t llvm::object::MachOObjectFile::isSectionBitcode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t result;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1[10] + 8 * a2);
  v5 = v4 + 16;
  if (*(_BYTE *)(v4 + 31))
    v6 = 16;
  else
    v6 = strlen((const char *)v5);
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*a1 + 144))(v12, a1, a2);
  if ((v13 & 1) != 0)
  {
    result = v12[0];
    v12[0] = 0;
    if (!result)
      return result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  if (v6 != 6)
    return 0;
  v7 = *(_DWORD *)v5 == 1280073567 && *(_WORD *)(v5 + 4) == 19798;
  v8 = !v7;
  if (v8 || v12[1] != 9)
    return 0;
  return *(_QWORD *)v12[0] == 0x646F637469625F5FLL && *(_BYTE *)(v12[0] + 8) == 101;
}

BOOL llvm::object::MachOObjectFile::isSectionStripped(_DWORD *a1, unsigned int a2)
{
  int v4;
  unint64_t v5;
  unint64_t Data;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 10) + 8 * a2);
  Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v4)
  {
    if (v5 >= Data)
    {
      v7 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
      if (v5 + 80 <= v7 + v8)
      {
        v9 = *(_DWORD *)(v5 + 48);
        goto LABEL_8;
      }
    }
LABEL_13:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if (v5 < Data)
    goto LABEL_13;
  v10 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v5 + 68 > v10 + v11)
    goto LABEL_13;
  v9 = *(_DWORD *)(v5 + 40);
LABEL_8:
  v12 = a1[2];
  v13 = bswap32(v9);
  if (((1 << v12) & 0x155800) == 0)
    v13 = v9;
  if (v12 <= 0x14)
    v9 = v13;
  return v9 == 0;
}

uint64_t llvm::object::MachOObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::MachOObjectFile::section_rel_end(_DWORD *a1, unsigned int a2)
{
  int v4;
  unint64_t v5;
  unint64_t Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 10) + 8 * a2);
  Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v4)
  {
    if (v5 >= Data)
    {
      v7 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
      if (v5 + 80 <= v7 + v8)
      {
        LODWORD(v9) = *(_DWORD *)(v5 + 60);
        goto LABEL_8;
      }
    }
LABEL_14:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if (v5 < Data)
    goto LABEL_14;
  v10 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v5 + 68 > v10 + v11)
    goto LABEL_14;
  LODWORD(v9) = *(_DWORD *)(v5 + 52);
LABEL_8:
  v12 = a1[2];
  v13 = bswap32(v9);
  if (((1 << v12) & 0x155800) == 0)
    v13 = v9;
  if (v12 <= 0x14)
    v9 = v13;
  else
    v9 = v9;
  return a2 | (unint64_t)(v9 << 32);
}

void llvm::object::MachOObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::MachOObjectFile::getRelocationOffset(llvm::object::Binary *a1, unint64_t a2)
{
  int Relocation;
  BOOL v4;
  unsigned int v5;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  v4 = Relocation >= 0 || *((_DWORD *)a1 + 13) == 16777223;
  v5 = Relocation & 0xFFFFFF;
  if (v4)
    return Relocation;
  return v5;
}

uint64_t llvm::object::MachOObjectFile::getRelocation(llvm::object::Binary *this, unint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t Data;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  if (*((_DWORD *)this + 15) != 1)
  {
    v11 = *((_QWORD *)this + 35);
    if (v11)
    {
      if (v11 < llvm::object::Binary::getData(this))
        goto LABEL_33;
      Data = llvm::object::Binary::getData(this);
      if (v11 + 80 > Data + v13)
        goto LABEL_33;
      v14 = *(_DWORD *)(v11 + 64);
      v15 = *(_DWORD *)(v11 + 72);
      v16 = *((_DWORD *)this + 2);
      if (v16 <= 0x14 && ((1 << v16) & 0x155800) != 0)
      {
        v14 = bswap32(v14);
        v15 = bswap32(v15);
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    if ((_DWORD)a2)
      v9 = v15;
    else
      v9 = v14;
    goto LABEL_22;
  }
  v4 = (*(uint64_t (**)(llvm::object::Binary *))(*(_QWORD *)this + 64))(this);
  v5 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * a2);
  v6 = llvm::object::Binary::getData(this);
  if (!v4)
  {
    if (v5 >= v6)
    {
      v17 = llvm::object::Binary::getData(this);
      if (v5 + 68 <= v17 + v18)
      {
        v9 = *(_DWORD *)(v5 + 48);
        v10 = *((_DWORD *)this + 2);
        if (v10 > 0x14)
          goto LABEL_22;
        goto LABEL_16;
      }
    }
LABEL_33:
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  }
  if (v5 < v6)
    goto LABEL_33;
  v7 = llvm::object::Binary::getData(this);
  if (v5 + 80 > v7 + v8)
    goto LABEL_33;
  v9 = *(_DWORD *)(v5 + 56);
  v10 = *((_DWORD *)this + 2);
  if (v10 > 0x14)
    goto LABEL_22;
LABEL_16:
  if (((1 << v10) & 0x155800) != 0)
    v9 = bswap32(v9);
LABEL_22:
  v19 = (unsigned int *)(llvm::object::Binary::getData(this) + v9 + 8 * HIDWORD(a2));
  if ((unint64_t)v19 < llvm::object::Binary::getData(this))
    goto LABEL_33;
  v20 = llvm::object::Binary::getData(this);
  if ((unint64_t)(v19 + 2) > v20 + v21)
    goto LABEL_33;
  LODWORD(v22) = *v19;
  LODWORD(v23) = v19[1];
  v24 = *((_DWORD *)this + 2);
  v25 = bswap32(*v19);
  v26 = bswap32(v23);
  if (((1 << v24) & 0x155800) == 0)
  {
    v25 = *v19;
    v26 = v19[1];
  }
  if (v24 <= 0x14)
    v22 = v25;
  else
    v22 = v22;
  if (v24 <= 0x14)
    v23 = v26;
  else
    v23 = v23;
  return v22 | (v23 << 32);
}

uint64_t llvm::object::MachOObjectFile::getRelocationSymbol(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation;
  unsigned int v5;
  int v7;
  unint64_t v8;
  uint64_t Data;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  Relocation = llvm::object::MachOObjectFile::getRelocation((llvm::object::Binary *)a1, a2);
  if (*(_DWORD *)(a1 + 52) != 16777223 && (int)Relocation < 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 > 0x14 || ((1 << v5) & 0x155800) == 0)
    v7 = HIDWORD(Relocation) & 0xFFFFFF;
  else
    v7 = HIDWORD(Relocation) >> 8;
  if (v5 > 0x14 || ((1 << v5) & 0x155800) == 0)
  {
    if (((HIDWORD(Relocation) >> 27) & 1) != 0)
      goto LABEL_15;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  }
  if ((Relocation & 0x1000000000) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
LABEL_15:
  v8 = *(_QWORD *)(a1 + 272);
  if (v8)
  {
    if (v8 < llvm::object::Binary::getData((llvm::object::Binary *)a1)
      || (Data = llvm::object::Binary::getData((llvm::object::Binary *)a1), v8 + 24 > Data + v10))
    {
      llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
    }
    v11 = *(_DWORD *)(a1 + 8);
    v12 = bswap32(*(_DWORD *)(v8 + 8));
    if (((1 << v11) & 0x155800) == 0)
      v12 = *(_DWORD *)(v8 + 8);
    if (v11 <= 0x14)
      LODWORD(v8) = v12;
    else
      LODWORD(v8) = *(_DWORD *)(v8 + 8);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    v13 = 16;
  else
    v13 = 12;
  return llvm::object::Binary::getData((llvm::object::Binary *)a1) + (v8 + v13 * v7);
}

uint64_t llvm::object::MachOObjectFile::getRelocationType(llvm::object::Binary *a1, unint64_t a2)
{
  uint64_t Relocation;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  unsigned int v9;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*((_DWORD *)a1 + 13) != 16777223 && (Relocation & 0x80000000) != 0)
    return BYTE3(Relocation) & 0xF;
  v5 = *((_DWORD *)a1 + 2);
  v6 = v5 > 0x14;
  v7 = (1 << v5) & 0x155800;
  v8 = v6 || v7 == 0;
  v9 = HIDWORD(Relocation) >> 28;
  if (!v8)
    return BYTE4(Relocation) & 0xF;
  return v9;
}

void llvm::object::MachOObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  int v6;
  size_t v7;
  const char *v8;
  char **v9;
  uint64_t v10;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
  v7 = 0;
  v8 = 0;
  switch(v6)
  {
    case 0:
      goto LABEL_11;
    case 1:
      if (v5 > 9)
        goto LABEL_11;
      v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
      goto LABEL_14;
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      goto LABEL_15;
    case 3:
    case 5:
      if (v5 > 0xB)
        goto LABEL_11;
      v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
      goto LABEL_14;
    case 21:
      if (v5 > 0xF)
        goto LABEL_11;
      v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
      goto LABEL_14;
    case 37:
      if (v5 > 5)
        goto LABEL_11;
      v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
      goto LABEL_14;
    case 38:
      if (v5 > 9)
      {
LABEL_11:
        v8 = "Unknown";
        v7 = 7;
      }
      else
      {
        v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
LABEL_14:
        v8 = v9[v5];
        v7 = strlen(v8);
      }
LABEL_15:
      v10 = a3[1];
      if (a3[2] < v10 + v7)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v10 + v7, 1);
        v10 = a3[1];
      }
      if (v7)
      {
        memcpy((void *)(*a3 + v10), v8, v7);
        v10 = a3[1];
      }
      a3[1] = v10 + v7;
      return;
    default:
      v8 = 0;
      goto LABEL_15;
  }
}

uint64_t getStructOrErr<llvm::MachO::dylib_command>(uint64_t a1, llvm::object::Binary *this, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  int8x16_t v9;
  int8x8_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;

  if (llvm::object::Binary::getData(this) <= a3
    && (result = llvm::object::Binary::getData(this), a3 + 24 <= result + v7))
  {
    v9 = *(int8x16_t *)a3;
    v10 = *(int8x8_t *)(a3 + 16);
    v11 = *((_DWORD *)this + 2);
    v12 = v11 > 0x14;
    v13 = (1 << v11) & 0x155800;
    if (!v12 && v13 != 0)
    {
      v9 = vrev32q_s8(v9);
      v10 = vrev32_s8(v10);
    }
    *(_BYTE *)(a1 + 24) &= ~1u;
    *(int8x16_t *)a1 = v9;
    *(int8x8_t *)(a1 + 16) = v10;
  }
  else
  {
    v15[0] = "truncated or malformed object (";
    v15[2] = "Structure read out-of-range";
    v16 = 771;
    v17[0] = v15;
    v17[2] = ")";
    v18 = 770;
    v8 = operator new(0x30uLL);
    result = llvm::object::GenericBinaryError::GenericBinaryError(v8, v17, 3);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)a1 = result;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::symbol_begin(llvm::object::MachOObjectFile *this)
{
  unint64_t v2;
  uint64_t Data;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *((_QWORD *)this + 34);
  if (!v2)
    return 0;
  if (v2 < llvm::object::Binary::getData(this) || (Data = llvm::object::Binary::getData(this), v2 + 24 > Data + v4))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = *(_DWORD *)(v2 + 12);
  v6 = *((_DWORD *)this + 2);
  v7 = bswap32(v5);
  if (((1 << v6) & 0x155800) == 0)
    v7 = *(_DWORD *)(v2 + 12);
  if (v6 <= 0x14)
    v5 = v7;
  if (*((_QWORD *)this + 34) && v5)
    return llvm::object::MachOObjectFile::getSymbolByIndex(this, 0);
  else
    return 0;
}

uint64_t llvm::object::MachOObjectFile::getSymbolByIndex(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t Data;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v2 = *((_QWORD *)this + 34);
  if (!v2)
    goto LABEL_16;
  if (v2 < llvm::object::Binary::getData(this) || (Data = llvm::object::Binary::getData(this), v2 + 24 > Data + v6))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v7 = *(_DWORD *)(v2 + 12);
  v8 = *((_DWORD *)this + 2);
  v9 = bswap32(*(_DWORD *)(v2 + 8));
  v10 = bswap32(v7);
  if (((1 << v8) & 0x155800) == 0)
  {
    v10 = *(_DWORD *)(v2 + 12);
    v9 = *(_DWORD *)(v2 + 8);
  }
  if (v8 > 0x14)
  {
    v11 = *(_DWORD *)(v2 + 8);
  }
  else
  {
    v7 = v10;
    v11 = v9;
  }
  if (!*((_QWORD *)this + 34) || v7 <= a2)
LABEL_16:
    llvm::report_fatal_error((llvm *)"Requested symbol index is out of range.", (const char *)1);
  if ((*(unsigned int (**)(llvm::object::MachOObjectFile *))(*(_QWORD *)this + 64))(this))
    v12 = 16;
  else
    v12 = 12;
  return llvm::object::Binary::getData(this) + v11 + v12 * a2;
}

uint64_t llvm::object::MachOObjectFile::symbol_end(llvm::object::MachOObjectFile *this)
{
  unint64_t v2;
  uint64_t Data;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v2 = *((_QWORD *)this + 34);
  if (!v2)
    return 0;
  if (v2 < llvm::object::Binary::getData(this) || (Data = llvm::object::Binary::getData(this), v2 + 24 > Data + v4))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  result = 0;
  v6 = *(_DWORD *)(v2 + 12);
  v7 = *((_DWORD *)this + 2);
  v8 = bswap32(*(_DWORD *)(v2 + 8));
  v9 = bswap32(v6);
  if (((1 << v7) & 0x155800) == 0)
  {
    v8 = *(_DWORD *)(v2 + 8);
    v9 = *(_DWORD *)(v2 + 12);
  }
  if (v7 <= 0x14)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v2 + 8);
  if (v7 <= 0x14)
    v11 = v9;
  else
    v11 = v6;
  if (*((_QWORD *)this + 34) && v11)
  {
    if ((*(unsigned int (**)(llvm::object::MachOObjectFile *))(*(_QWORD *)this + 64))(this))
      v12 = 16;
    else
      v12 = 12;
    return llvm::object::Binary::getData(this) + v10 + v12 * v11;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::section_begin(llvm::object::MachOObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MachOObjectFile::section_end(llvm::object::MachOObjectFile *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t llvm::object::MachOObjectFile::getBytesInAddress(llvm::object::MachOObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::MachOObjectFile *))(*(_QWORD *)this + 64))(this))
    return 8;
  else
    return 4;
}

const char *llvm::object::MachOObjectFile::getFileFormatName(llvm::object::MachOObjectFile *this)
{
  int v1;
  const char *result;

  v1 = *((_DWORD *)this + 13);
  if (((*(uint64_t (**)(llvm::object::MachOObjectFile *))(*(_QWORD *)this + 64))(this) & 1) != 0)
  {
    result = "Mach-O 64-bit x86-64";
    switch(v1)
    {
      case 16777223:
        return result;
      case 16777224:
      case 16777225:
      case 16777226:
      case 16777227:
      case 16777229:
      case 16777230:
      case 16777231:
      case 16777232:
      case 16777233:
        goto LABEL_12;
      case 16777228:
        result = "Mach-O arm64";
        break;
      case 16777234:
        result = "Mach-O 64-bit ppc64";
        break;
      case 16777235:
        result = "Mach-O 64-bit Apple GPU";
        break;
      case 16777236:
        result = "Mach-O 64-bit AMD GPU";
        break;
      case 16777237:
        result = "Mach-O 64-bit Intel GPU";
        break;
      case 16777238:
        result = "Mach-O 64-bit NVidia GPU";
        break;
      case 16777239:
        result = "Mach-O 64-bit air";
        break;
      default:
        if (v1 == 33554444)
          goto LABEL_11;
LABEL_12:
        result = "Mach-O 64-bit unknown";
        break;
    }
  }
  else
  {
    result = "Mach-O 32-bit i386";
    switch(v1)
    {
      case 7:
        return result;
      case 8:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
        goto LABEL_7;
      case 12:
        result = "Mach-O arm";
        break;
      case 18:
        result = "Mach-O 32-bit ppc";
        break;
      case 23:
        result = "Mach-O 32-bit air";
        break;
      default:
        if (v1 == 33554444)
LABEL_11:
          result = "Mach-O arm64 (ILP32)";
        else
LABEL_7:
          result = "Mach-O 32-bit unknown";
        break;
    }
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getArch(llvm::object::MachOObjectFile *this)
{
  int v1;
  uint64_t result;

  v1 = *((_DWORD *)this + 13);
  switch(v1)
  {
    case 16777223:
      result = 38;
      break;
    case 16777224:
    case 16777225:
    case 16777226:
    case 16777227:
    case 16777229:
    case 16777230:
    case 16777231:
    case 16777232:
    case 16777233:
    case 16777235:
LABEL_7:
      result = 0;
      break;
    case 16777228:
      result = 3;
      break;
    case 16777234:
      result = 23;
      break;
    case 16777236:
      result = 26;
      break;
    case 16777237:
      result = 44;
      break;
    case 16777238:
      result = 42;
      break;
    case 16777239:
      result = 46;
      break;
    default:
      result = 37;
      switch(v1)
      {
        case 7:
          return result;
        case 8:
        case 9:
        case 10:
        case 11:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 19:
        case 20:
        case 21:
        case 22:
          goto LABEL_7;
        case 12:
          result = 1;
          break;
        case 18:
          result = 21;
          break;
        case 23:
          result = 45;
          break;
        default:
          if (v1 != 33554444)
            goto LABEL_7;
          result = 5;
          break;
      }
      break;
  }
  return result;
}

uint64_t getStructOrErr<llvm::MachO::dyld_info_command>(int8x16_t *a1, llvm::object::Binary *this, int8x16_t *a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  if (llvm::object::Binary::getData(this) <= (unint64_t)a3
    && (result = llvm::object::Binary::getData(this), (unint64_t)&a3[3] <= result + v7))
  {
    v9 = *a3;
    v10 = a3[1];
    v11 = a3[2];
    v12 = *((_DWORD *)this + 2);
    v13 = v12 > 0x14;
    v14 = (1 << v12) & 0x155800;
    if (!v13 && v14 != 0)
    {
      v9 = vrev32q_s8(v9);
      v10 = vrev32q_s8(v10);
      v11 = vrev32q_s8(v11);
    }
    a1[3].i8[0] &= ~1u;
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    v16[0] = "truncated or malformed object (";
    v16[2] = "Structure read out-of-range";
    v17 = 771;
    v18[0] = v16;
    v18[2] = ")";
    v19 = 770;
    v8 = operator new(0x30uLL);
    result = llvm::object::GenericBinaryError::GenericBinaryError(v8, v18, 3);
    a1[3].i8[0] |= 1u;
    a1->i64[0] = result;
  }
  return result;
}

uint64_t getStructOrErr<llvm::MachO::section_64>(uint64_t a1, llvm::object::Binary *this, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x8_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  __int128 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  if (llvm::object::Binary::getData(this) <= a3
    && (result = llvm::object::Binary::getData(this), a3 + 80 <= result + v7))
  {
    v10 = *(int8x16_t *)(a3 + 32);
    v9 = *(int8x16_t *)(a3 + 48);
    v11 = *(int8x8_t *)(a3 + 64);
    v13 = *(_DWORD *)(a3 + 72);
    v12 = *(_DWORD *)(a3 + 76);
    v14 = *((_DWORD *)this + 2);
    v15 = v14 > 0x14;
    v16 = (1 << v14) & 0x155800;
    if (!v15 && v16 != 0)
    {
      v10 = vrev64q_s8(v10);
      v9 = vrev32q_s8(v9);
      v11 = vrev32_s8(v11);
      v13 = bswap32(v13);
    }
    *(_BYTE *)(a1 + 80) &= ~1u;
    v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v18;
    *(int8x16_t *)(a1 + 32) = v10;
    *(int8x16_t *)(a1 + 48) = v9;
    *(int8x8_t *)(a1 + 64) = v11;
    *(_DWORD *)(a1 + 72) = v13;
    *(_DWORD *)(a1 + 76) = v12;
  }
  else
  {
    v19[0] = "truncated or malformed object (";
    v19[2] = "Structure read out-of-range";
    v20 = 771;
    v21[0] = v19;
    v21[2] = ")";
    v22 = 770;
    v8 = operator new(0x30uLL);
    result = llvm::object::GenericBinaryError::GenericBinaryError(v8, v21, 3);
    *(_BYTE *)(a1 + 80) |= 1u;
    *(_QWORD *)a1 = result;
  }
  return result;
}

uint64_t getStructOrErr<llvm::MachO::section>(uint64_t a1, llvm::object::Binary *this, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  int8x16_t v9;
  int8x16_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  __int128 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  if (llvm::object::Binary::getData(this) <= a3
    && (result = llvm::object::Binary::getData(this), a3 + 68 <= result + v7))
  {
    v9 = *(int8x16_t *)(a3 + 32);
    v10 = *(int8x16_t *)(a3 + 48);
    v11 = *(_DWORD *)(a3 + 64);
    v12 = *((_DWORD *)this + 2);
    v13 = v12 > 0x14;
    v14 = (1 << v12) & 0x155800;
    if (!v13 && v14 != 0)
    {
      v9 = vrev32q_s8(v9);
      v10 = vrev32q_s8(v10);
      v11 = bswap32(v11);
    }
    *(_BYTE *)(a1 + 72) &= ~1u;
    v16 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v16;
    *(int8x16_t *)(a1 + 32) = v9;
    *(int8x16_t *)(a1 + 48) = v10;
    *(_DWORD *)(a1 + 64) = v11;
  }
  else
  {
    v17[0] = "truncated or malformed object (";
    v17[2] = "Structure read out-of-range";
    v18 = 771;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new(0x30uLL);
    result = llvm::object::GenericBinaryError::GenericBinaryError(v8, v19, 3);
    *(_BYTE *)(a1 + 72) |= 1u;
    *(_QWORD *)a1 = result;
  }
  return result;
}

BOOL llvm::object::MachOObjectFile::is64Bit(llvm::object::MachOObjectFile *this)
{
  return (*((_DWORD *)this + 2) - 19) < 2;
}

BOOL llvm::object::MachOObjectFile::isRelocatableObject(llvm::object::MachOObjectFile *this)
{
  return *((_DWORD *)this + 15) == 1;
}

uint64_t llvm::object::ObjectFile::createMachOObjectFile@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  size_t v7;
  const void *v12;
  void *v13;
  uint64_t result;
  __int128 v15;
  void *v16;
  int v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >= 4)
    v7 = 4;
  else
    v7 = *(_QWORD *)(a1 + 8);
  if (v6 < 4)
    goto LABEL_9;
  v12 = *(const void **)a1;
  if (!memcmp(*(const void **)a1, "\xFE\xED\xFA\xCE", v7))
  {
    v15 = *(_OWORD *)(a1 + 16);
    v26 = *(_OWORD *)a1;
    v27 = v15;
    v25 = 0;
    v16 = operator new(0x170uLL);
    v17 = 0;
LABEL_12:
    v19 = 0;
    goto LABEL_16;
  }
  if (!memcmp(v12, "\xCE\xFA\xED\xFE\xFE\xED\xFA\xCF", v7))
  {
    v18 = *(_OWORD *)(a1 + 16);
    v26 = *(_OWORD *)a1;
    v27 = v18;
    v25 = 0;
    v16 = operator new(0x170uLL);
    v17 = 1;
    goto LABEL_12;
  }
  if (!memcmp(v12, "\xFE\xED\xFA\xCF", v7))
  {
    v20 = *(_OWORD *)(a1 + 16);
    v26 = *(_OWORD *)a1;
    v27 = v20;
    v25 = 0;
    v16 = operator new(0x170uLL);
    v17 = 0;
  }
  else
  {
    if (memcmp(v12, "\xCF\xFA\xED\xFEUnrecognized MachO magic number", v7))
    {
LABEL_9:
      v13 = operator new(0x30uLL);
      *(_QWORD *)&v26 = "Unrecognized MachO magic number";
      v28 = 259;
      result = llvm::object::GenericBinaryError::GenericBinaryError(v13, &v26, 2);
      *(_BYTE *)(a5 + 8) |= 1u;
      goto LABEL_20;
    }
    v21 = *(_OWORD *)(a1 + 16);
    v26 = *(_OWORD *)a1;
    v27 = v21;
    v25 = 0;
    v16 = operator new(0x170uLL);
    v17 = 1;
  }
  v19 = 1;
LABEL_16:
  result = llvm::object::MachOObjectFile::MachOObjectFile((uint64_t)v16, &v26, v17, v19, &v25, a2, a3, a4);
  v22 = v25;
  v23 = *(_BYTE *)(a5 + 8);
  if (v25)
  {
    v24 = v23 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v22;
  }
  else
  {
    v24 = v23 & 0xFE;
  }
  *(_BYTE *)(a5 + 8) = v24;
LABEL_20:
  *(_QWORD *)a5 = result;
  return result;
}

const char *llvm::object::MachOObjectFile::mapDebugSectionName(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  const char *result;

  result = (const char *)a2;
  if (a3 == 14 && *a2 == 0x74735F6775626564 && *(_QWORD *)((char *)a2 + 6) == 0x7366666F5F727473)
    return "debug_str_offsets";
  return result;
}

uint64_t llvm::object::MachOObjectFile::mapReflectionSectionNameToEnumValue(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  result = 11;
  switch(a3)
  {
    case 11:
      if (*a2 ^ 0x5F74666977735F5FLL | *(_QWORD *)((char *)a2 + 3) ^ 0x7473615F74666977)
        result = 11;
      else
        result = 10;
      break;
    case 14:
      if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 6) == 0x6F746F72705F3574)
        result = 6;
      break;
    case 15:
      if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 7) == 0x736F746F72705F35)
      {
        result = 7;
      }
      else if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 7) == 0x6D756E65706D5F35)
      {
        result = 9;
      }
      break;
    case 16:
      if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x646D646C6569665FLL)
      {
        result = 0;
      }
      else if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x7974636F7373615FLL)
      {
        result = 1;
      }
      else if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x6E69746C6975625FLL)
      {
        result = 2;
      }
      else if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x657275747061635FLL)
      {
        result = 3;
      }
      else if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x666572657079745FLL)
      {
        result = 4;
      }
      else if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x7274736C6665725FLL)
      {
        result = 5;
      }
      else if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x73636E756663615FLL)
      {
        result = 8;
      }
      break;
    default:
      return result;
  }
  return result;
}

void llvm::object::MachOObjectFile::~MachOObjectFile(llvm::object::MachOObjectFile *this)
{
  void *v1;

  llvm::object::MachOObjectFile::~MachOObjectFile(this);
  operator delete(v1);
}

{
  void **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *(_QWORD *)this = off_1E0E25028;
  v2 = (void **)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    operator delete(v2);
  }
  v3 = (char *)*((_QWORD *)this + 29);
  if (v3 != (char *)this + 248)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 26);
  if (v4 != (char *)this + 224)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 16);
  if (v5 != (char *)this + 144)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 13);
  if (v6 != (char *)this + 120)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 10);
  if (v7 != (char *)this + 96)
    free(v7);
  llvm::object::SymbolicFile::~SymbolicFile(this);
}

double llvm::object::MachOObjectFile::getFeatures@<D0>(uint64_t a1@<X8>)
{
  double result;
  std::vector<std::string> v4;

  llvm::SubtargetFeatures::SubtargetFeatures(&v4, "", 0);
  *(_BYTE *)(a1 + 24) &= ~1u;
  result = *(double *)&v4.__begin_;
  *(std::vector<std::string> *)a1 = v4;
  return result;
}

uint64_t getLoadCommandInfo(const llvm::object::MachOObjectFile *a1, llvm::object::Binary *this, unsigned int *a3, unsigned int a4)
{
  uint64_t Data;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[2];
  const char *v30;
  __int16 v31;
  _QWORD *v32;
  const char *v33;
  __int16 v34;

  if (llvm::object::Binary::getData(this) <= (unint64_t)a3
    && (Data = llvm::object::Binary::getData(this), (unint64_t)(a3 + 2) <= Data + v9))
  {
    v10 = *a3;
    v11 = a3[1];
    v12 = *((_DWORD *)this + 2);
    v13 = v12 > 0x14;
    v14 = (1 << v12) & 0x155800;
    v15 = v13 || v14 == 0;
    v16 = bswap32(v10);
    v17 = bswap32(v11);
    if (v15)
      v18 = v11;
    else
      v18 = v17;
    if (v15)
      v19 = v10;
    else
      v19 = v16;
    result = llvm::object::Binary::getData(this);
    if ((unint64_t)a3 + v18 <= result + v21)
    {
      if (v18 > 7)
      {
        *((_BYTE *)a1 + 16) &= ~1u;
        *(_QWORD *)a1 = a3;
        *((_QWORD *)a1 + 1) = v19 | (v18 << 32);
        return result;
      }
      v24 = "load command ";
      v25 = a4;
      v26 = 2307;
      v22 = " with size less than 8 bytes";
    }
    else
    {
      v24 = "load command ";
      v25 = a4;
      v26 = 2307;
      v22 = " extends past end of file";
    }
    v27[0] = &v24;
    v27[2] = v22;
    v28 = 770;
    v29[0] = "truncated or malformed object (";
    v30 = (const char *)v27;
    v31 = 515;
    v32 = v29;
    v33 = ")";
  }
  else
  {
    v29[0] = "truncated or malformed object (";
    v30 = "Structure read out-of-range";
    v31 = 771;
    v32 = v29;
    v33 = ")";
  }
  v34 = 770;
  v23 = operator new(0x30uLL);
  result = llvm::object::GenericBinaryError::GenericBinaryError(v23, &v32, 3);
  *((_BYTE *)a1 + 16) |= 1u;
  *(_QWORD *)a1 = result;
  return result;
}

_QWORD *checkOverlappingElement(_QWORD *result, uint64_t *a2, unint64_t a3, uint64_t a4, _BYTE *a5)
{
  _QWORD *v5;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  char v17;
  _BYTE *v18;
  char v19;
  __int128 *v20;
  char v21;
  void *v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  char v26;
  char v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[4];
  __int16 v39;
  _QWORD v40[4];
  char v41;
  char v42;
  _QWORD v43[4];
  __int16 v44;
  _QWORD v45[4];
  __int16 v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[4];
  __int16 v50;
  _QWORD v51[4];
  char v52;
  char v53;

  v5 = result;
  v47 = a4;
  v48 = a3;
  if (!a4)
  {
LABEL_15:
    *v5 = 0;
    return result;
  }
  v10 = (uint64_t *)a2[1];
  if (v10 == a2)
  {
LABEL_13:
    result = operator new(0x28uLL);
    result[2] = a3;
    result[3] = a4;
    result[4] = a5;
    v14 = *a2;
    *result = *a2;
    result[1] = a2;
    *(_QWORD *)(v14 + 8) = result;
    *a2 = (uint64_t)result;
LABEL_14:
    ++a2[2];
    goto LABEL_15;
  }
  v11 = a4 + a3;
  while (1)
  {
    v12 = v10[2];
    if (v12 <= a3 && v10[3] + v12 > a3)
      break;
    if (v11 > v12 && v11 < v10[3] + v12 || v12 >= a3 && v11 >= v10[3] + v12)
      break;
    v10 = (uint64_t *)v10[1];
    if (v10 == a2)
      goto LABEL_13;
    if (v11 <= v10[2])
    {
      result = operator new(0x28uLL);
      result[2] = a3;
      result[3] = a4;
      result[4] = a5;
      v13 = *v10;
      *(_QWORD *)(v13 + 8) = result;
      *result = v13;
      *v10 = (uint64_t)result;
      result[1] = v10;
      goto LABEL_14;
    }
  }
  v15 = " at offset ";
  if (*a5)
  {
    v23[0] = a5;
    v23[2] = " at offset ";
    v24 = 771;
    v16 = (const char *)v23;
    v17 = 2;
  }
  else
  {
    v23[0] = " at offset ";
    v24 = 259;
    v17 = 3;
    v16 = " at offset ";
  }
  v25[0] = v16;
  v25[2] = &v48;
  v26 = v17;
  v27 = 13;
  v28[0] = v25;
  v28[2] = " with a size of ";
  v29 = 770;
  v30[0] = v28;
  v30[2] = &v47;
  v31 = 3330;
  *(_QWORD *)&v32 = v30;
  *(_QWORD *)&v33 = ", overlaps ";
  LOWORD(v34) = 770;
  v18 = (_BYTE *)v10[4];
  if (*v18)
  {
    *(_QWORD *)&v35 = &v32;
    *(_QWORD *)&v36 = v18;
    LOWORD(v37) = 770;
    v19 = 2;
LABEL_21:
    v20 = (__int128 *)v35;
    v21 = 2;
    if (BYTE1(v37) != 1)
    {
      v19 = 2;
      v20 = &v35;
    }
    v38[0] = v20;
    v38[1] = *((_QWORD *)&v35 + 1);
    v38[2] = " at offset ";
    LOBYTE(v39) = v19;
    HIBYTE(v39) = 3;
    v15 = (const char *)v38;
    goto LABEL_24;
  }
  v35 = v32;
  v36 = v33;
  v37 = v34;
  v19 = v34;
  if (v34 != 1)
    goto LABEL_21;
  v38[0] = " at offset ";
  v39 = 259;
  v21 = 3;
LABEL_24:
  v40[0] = v15;
  v40[2] = v10 + 2;
  v41 = v21;
  v42 = 13;
  v43[0] = v40;
  v43[2] = " with a size of ";
  v44 = 770;
  v45[0] = v43;
  v45[2] = v10 + 3;
  v46 = 3330;
  v49[0] = "truncated or malformed object (";
  v49[2] = v45;
  v50 = 515;
  v51[0] = v49;
  v51[2] = ")";
  v52 = 2;
  v53 = 3;
  v22 = operator new(0x30uLL);
  result = (_QWORD *)llvm::object::GenericBinaryError::GenericBinaryError(v22, v51, 3);
  *v5 = result;
  return result;
}

uint64_t getStructOrErr<llvm::MachO::segment_command_64>(uint64_t a1, llvm::object::Binary *this, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  int8x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  if (llvm::object::Binary::getData(this) <= a3
    && (result = llvm::object::Binary::getData(this), a3 + 72 <= result + v7))
  {
    v9 = *(int8x8_t *)a3;
    v10 = *(int8x16_t *)(a3 + 24);
    v11 = *(int8x16_t *)(a3 + 40);
    v12 = *(int8x16_t *)(a3 + 56);
    v13 = *((_DWORD *)this + 2);
    v14 = v13 > 0x14;
    v15 = (1 << v13) & 0x155800;
    if (!v14 && v15 != 0)
    {
      v9 = vrev32_s8(v9);
      v10 = vrev64q_s8(v10);
      v11 = vrev64q_s8(v11);
      v12 = vrev32q_s8(v12);
    }
    *(_BYTE *)(a1 + 72) &= ~1u;
    *(int8x8_t *)a1 = v9;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
    *(int8x16_t *)(a1 + 24) = v10;
    *(int8x16_t *)(a1 + 40) = v11;
    *(int8x16_t *)(a1 + 56) = v12;
  }
  else
  {
    v17[0] = "truncated or malformed object (";
    v17[2] = "Structure read out-of-range";
    v18 = 771;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new(0x30uLL);
    result = llvm::object::GenericBinaryError::GenericBinaryError(v8, v19, 3);
    *(_BYTE *)(a1 + 72) |= 1u;
    *(_QWORD *)a1 = result;
  }
  return result;
}

uint64_t getStructOrErr<llvm::MachO::segment_command>(uint64_t a1, llvm::object::Binary *this, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  int8x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  if (llvm::object::Binary::getData(this) <= a3
    && (result = llvm::object::Binary::getData(this), a3 + 56 <= result + v7))
  {
    v9 = *(int8x8_t *)a3;
    v10 = *(int8x16_t *)(a3 + 24);
    v11 = *(int8x16_t *)(a3 + 40);
    v12 = *((_DWORD *)this + 2);
    v13 = v12 > 0x14;
    v14 = (1 << v12) & 0x155800;
    if (!v13 && v14 != 0)
    {
      v9 = vrev32_s8(v9);
      v10 = vrev32q_s8(v10);
      v11 = vrev32q_s8(v11);
    }
    *(_BYTE *)(a1 + 56) &= ~1u;
    *(int8x8_t *)a1 = v9;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
    *(int8x16_t *)(a1 + 24) = v10;
    *(int8x16_t *)(a1 + 40) = v11;
  }
  else
  {
    v16[0] = "truncated or malformed object (";
    v16[2] = "Structure read out-of-range";
    v17 = 771;
    v18[0] = v16;
    v18[2] = ")";
    v19 = 770;
    v8 = operator new(0x30uLL);
    result = llvm::object::GenericBinaryError::GenericBinaryError(v8, v18, 3);
    *(_BYTE *)(a1 + 56) |= 1u;
    *(_QWORD *)a1 = result;
  }
  return result;
}

llvm::object::Binary *llvm::object::MetalLibObjectFile::MetalLibObjectFile(llvm::object::Binary *a1, _OWORD *a2, llvm::object **a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  uint64_t v16;
  uint64_t *Data;
  _OWORD v18[2];
  const char *v19;
  __int16 v20;

  v5 = a2[1];
  v18[0] = *a2;
  v18[1] = v5;
  llvm::object::ObjectFile::ObjectFile((uint64_t)a1, 23, v18);
  *(_QWORD *)v6 = off_1E0E25418;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 672) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(_OWORD *)(v6 + 496) = 0u;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_OWORD *)(v6 + 544) = 0u;
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 576) = 0u;
  *(_OWORD *)(v6 + 592) = 0u;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  *(_OWORD *)(v6 + 640) = 0u;
  *(_BYTE *)(v6 + 656) = 0;
  *(_BYTE *)(v6 + 712) = 0;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 696) = 0u;
  *(_OWORD *)(v6 + 720) = 0u;
  *(_OWORD *)(v6 + 736) = 0u;
  *(_OWORD *)(v6 + 752) = 0u;
  *(_OWORD *)(v6 + 768) = 0u;
  *(_OWORD *)(v6 + 784) = 0u;
  *(_OWORD *)(v6 + 800) = 0u;
  *(_OWORD *)(v6 + 816) = 0u;
  *(_OWORD *)(v6 + 832) = 0u;
  *(_OWORD *)(v6 + 848) = 0u;
  *(_OWORD *)(v6 + 864) = 0u;
  *(_OWORD *)(v6 + 880) = 0u;
  *(_OWORD *)(v6 + 896) = 0u;
  *(_OWORD *)(v6 + 912) = 0u;
  *(_OWORD *)(v6 + 928) = 0u;
  *(_OWORD *)(v6 + 944) = 0u;
  *(_OWORD *)(v6 + 960) = 0u;
  *(_OWORD *)(v6 + 976) = 0u;
  *(_OWORD *)(v6 + 992) = 0u;
  *(_OWORD *)(v6 + 1008) = 0u;
  *(_OWORD *)(v6 + 1024) = 0u;
  *(_OWORD *)(v6 + 1040) = 0u;
  *(_OWORD *)(v6 + 1056) = 0u;
  *(_OWORD *)(v6 + 1072) = 0u;
  *(_OWORD *)(v6 + 1088) = 0u;
  Data = (uint64_t *)llvm::object::Binary::getData((llvm::object::Binary *)v6);
  v7 = llvm::object::Binary::getData(a1);
  v9 = v8;
  llvm::object::Binary::getData(a1);
  if (v9 >= v10)
    v11 = v10;
  else
    v11 = v9;
  v12 = v7 + v11;
  if (llvm::object::MetalLibObjectFile::parseFileMagic((uint64_t)a1, (unint64_t *)&Data, v12, (uint64_t *)a3)&& llvm::object::MetalLibObjectFile::parseFileVersion(a1, (unint64_t *)&Data, v12, (uint64_t *)a3)&& llvm::object::MetalLibObjectFile::parseFileType((uint64_t)a1, (unint64_t *)&Data, v12, (uint64_t *)a3)&& llvm::object::MetalLibObjectFile::parseTriple((uint64_t)a1, (unint64_t *)&Data, v12, (uint64_t *)a3))
  {
    if ((unint64_t)(Data + 1) > v12)
    {
      v13 = (llvm::object *)operator new(0x38uLL);
      v19 = "missing file size";
      v20 = 259;
      v14 = llvm::object::object_category(v13);
      llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)&v19, 3, (uint64_t)v14);
      *a3 = v13;
      return a1;
    }
    v16 = *Data++;
    *((_QWORD *)a1 + 10) = v16;
    if (llvm::object::MetalLibObjectFile::parseFunctionListInfo((uint64_t)a1, &Data, v12, (uint64_t *)a3)
      && llvm::object::MetalLibObjectFile::parsePublicMetadataInfo((uint64_t)a1, &Data, v12, (uint64_t *)a3)
      && llvm::object::MetalLibObjectFile::parsePrivateMetadataInfo((uint64_t)a1, &Data, v12, (uint64_t *)a3)&& llvm::object::MetalLibObjectFile::parseModuleListInfo((uint64_t)a1, &Data, v12, (uint64_t *)a3)&& llvm::object::MetalLibObjectFile::parseFunctionCount((uint64_t)a1, a3)&& llvm::object::MetalLibObjectFile::parseHeaderExtension(a1, a3)&& llvm::object::MetalLibObjectFile::parseVariableCount((uint64_t)a1, a3)&& llvm::object::MetalLibObjectFile::parseImportedSymbolCount(a1, a3))
    {
      if (llvm::object::MetalLibObjectFile::parseReflectionCount(a1, a3))
        llvm::object::MetalLibObjectFile::parseScriptCount(a1, a3);
    }
  }
  if (*a3)
    return a1;
  *a3 = 0;
  return a1;
}

uint64_t llvm::object::MetalLibObjectFile::parseFileMagic(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  _DWORD *v5;
  unint64_t v6;
  llvm::object *v7;
  uint64_t v8;
  const char *v9;
  _UNKNOWN **v10;
  uint64_t result;
  const char *v12;
  __int16 v13;

  v5 = (_DWORD *)*a2;
  v6 = *a2 + 4;
  if (v6 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing magic number";
LABEL_5:
    v12 = v9;
    v13 = 259;
    v10 = llvm::object::object_category(v7);
    llvm::StringError::StringError(v8, (llvm::Twine *)&v12, 3, (uint64_t)v10);
    result = 0;
    *a4 = v8;
    return result;
  }
  *a2 = v6;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = 4;
  if (*v5 != 1112298573)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "bad magic number";
    goto LABEL_5;
  }
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseFileVersion(_WORD *a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  llvm::object *v6;
  uint64_t v7;
  const char *v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  _UNKNOWN **v12;
  uint64_t result;
  int v14;
  unsigned __int16 *v15;
  int v16;
  unsigned int v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20[4];
  __int16 v21;

  v5 = *a2 + 2;
  if (v5 > a3)
  {
    v6 = (llvm::object *)operator new(0x38uLL);
    v7 = (uint64_t)v6;
    v8 = "missing major version number";
LABEL_7:
    v20[0] = (uint64_t)v8;
    v21 = 259;
    v12 = llvm::object::object_category(v6);
    llvm::StringError::StringError(v7, (llvm::Twine *)v20, 3, (uint64_t)v12);
    result = 0;
    *a4 = v7;
    return result;
  }
  v9 = *(unsigned __int16 *)*a2;
  *a2 = v5;
  LOWORD(v9) = (v9 >> 15) | (2 * v9);
  a1[32] = v9;
  if ((v9 & 0xFFFE) != 2)
  {
    v6 = (llvm::object *)operator new(0x38uLL);
    v7 = (uint64_t)v6;
    v8 = "bad major version number";
    goto LABEL_7;
  }
  v10 = (unsigned __int16 *)*a2;
  v11 = (unsigned __int16 *)(*a2 + 2);
  if ((unint64_t)v11 > a3)
  {
    v6 = (llvm::object *)operator new(0x38uLL);
    v7 = (uint64_t)v6;
    v8 = "missing minor version number";
    goto LABEL_7;
  }
  v14 = *v10;
  *a2 = (unint64_t)v11;
  a1[33] = v14;
  if (v14 != 2)
  {
    v6 = (llvm::object *)operator new(0x38uLL);
    v7 = (uint64_t)v6;
    v8 = "bad minor version number";
    goto LABEL_7;
  }
  v15 = v10 + 2;
  if ((unint64_t)v15 > a3)
  {
    v6 = (llvm::object *)operator new(0x38uLL);
    v7 = (uint64_t)v6;
    v8 = "missing bug fix version number";
    goto LABEL_7;
  }
  v16 = *v11;
  *a2 = (unint64_t)v15;
  a1[34] = v16;
  v17 = v16 - 1;
  if (v17 > 6)
    v18 = "N4llvm6object18MetalLibObjectFileE";
  else
    v18 = (const char *)*(&off_1E0E5AAE0 + (__int16)v17);
  if (v18 - (const char *)&llvm::metallib::MetalLibFileBugFixVersions != 14)
    return 1;
  v19 = 3;
  llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("bad bug fix version number", &v19, v20);
  result = 0;
  *a4 = v20[0];
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseFileType(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  llvm::object *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t result;
  const char *v16;
  _UNKNOWN **v17;
  const char *v18;
  __int16 v19;

  v5 = *(unsigned __int16 *)(a1 + 64);
  v6 = *(unsigned __int16 *)(a1 + 66);
  v7 = *(unsigned __int16 *)(a1 + 68);
  v8 = *a2 + 1;
  if (v8 > a3)
  {
    if (v7 >= 4)
      v9 = "missing file type";
    else
      v9 = "missing reserved bytes";
    if (v6 != 2)
      v9 = "missing file type";
    if (v6 < 2)
      v9 = "missing reserved bytes";
    if (v5 > 3)
      v9 = "missing file type";
    if (v5 >= 2)
      v10 = v9;
    else
      v10 = "missing reserved bytes";
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = (uint64_t)v11;
    v13 = 1;
    HIBYTE(v19) = 1;
    if (*v10)
    {
      v18 = v10;
      v13 = 3;
    }
    LOBYTE(v19) = v13;
    goto LABEL_35;
  }
  v14 = *(char *)*a2;
  *a2 = v8;
  *(_BYTE *)(a1 + 70) = (2 * v14) | ((v14 & 0x80) != 0);
  if (v5 >= 2)
  {
    if (v5 <= 3)
    {
      if (v6 < 2 || v6 == 2 && v7 <= 3)
        goto LABEL_18;
      if ((2 * v14) < 8u)
      {
        result = 1;
        if (v6 == 2 && v7 <= 5 && v14 < 0)
          goto LABEL_20;
        return result;
      }
    }
    else if ((2 * v14) < 8u)
    {
      return 1;
    }
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = (uint64_t)v11;
    v16 = "bad file type";
    goto LABEL_34;
  }
LABEL_18:
  result = 1;
  if (v14 < 0 && 2 * (_BYTE)v14)
  {
LABEL_20:
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = (uint64_t)v11;
    v16 = "bad reserved bytes";
LABEL_34:
    v18 = v16;
    v19 = 259;
LABEL_35:
    v17 = llvm::object::object_category(v11);
    llvm::StringError::StringError(v12, (llvm::Twine *)&v18, 3, (uint64_t)v17);
    result = 0;
    *a4 = v12;
  }
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseTriple(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  llvm::object *v17;
  uint64_t v18;
  const char *v19;
  unsigned __int16 *v20;
  unsigned __int8 *v21;
  const char *v22;
  const char *v23;
  char v24;
  int v25;
  _UNKNOWN **v26;
  uint64_t result;
  char *v28;
  int v29;
  unsigned __int16 *v30;
  char v31;
  unsigned int v32;
  uint64_t v33[4];
  __int16 v34;

  v5 = *(unsigned __int16 *)(a1 + 64);
  v6 = *(unsigned __int16 *)(a1 + 66);
  v7 = *(unsigned __int16 *)(a1 + 68);
  v8 = *a2 + 1;
  if (v8 > a3)
  {
    v9 = "missing triple arch/platform";
    v10 = "missing triple arch/platform";
LABEL_18:
    if (v7 >= 6)
      v22 = v10;
    else
      v22 = "missing reserved bytes";
    if (v6 != 2)
      v22 = v10;
    if (v6 < 2)
      v22 = "missing reserved bytes";
    if (v5 > 3)
      v22 = v9;
    if (v5 >= 2)
      v23 = v22;
    else
      v23 = "missing reserved bytes";
    goto LABEL_30;
  }
  v11 = *(unsigned __int8 *)*a2;
  *a2 = v8;
  v12 = *(unsigned __int8 *)(a1 + 70) | (unsigned __int16)((_WORD)v11 << 9) | (((v11 >> 7) & 1) << 8);
  *(_WORD *)(a1 + 70) = v12;
  if (v5 < 2 || v5 <= 3 && (v6 < 2 || v6 == 2 && v7 <= 5))
  {
    if ((char)v11 < 0 && v12 >= 0x200u)
    {
LABEL_35:
      v17 = (llvm::object *)operator new(0x38uLL);
      v18 = (uint64_t)v17;
      v19 = "bad reserved bytes";
      goto LABEL_36;
    }
  }
  else
  {
    v13 = v11 & 0x7F;
    v14 = v13 > 0xC;
    v15 = (1 << v13) & 0x1BDE;
    if (v14 || v15 == 0)
    {
      v17 = (llvm::object *)operator new(0x38uLL);
      v18 = (uint64_t)v17;
      v19 = "bad platform type";
LABEL_36:
      v33[0] = (uint64_t)v19;
      v34 = 259;
LABEL_37:
      v26 = llvm::object::object_category(v17);
      llvm::StringError::StringError(v18, (llvm::Twine *)v33, 3, (uint64_t)v26);
      result = 0;
      *a4 = v18;
      return result;
    }
  }
  v20 = (unsigned __int16 *)*a2;
  v21 = (unsigned __int8 *)(*a2 + 2);
  if ((unint64_t)v21 > a3)
  {
    v9 = "missing platform major";
    v10 = "missing platform major";
    goto LABEL_18;
  }
  v25 = *v20;
  *a2 = (unint64_t)v21;
  *(_WORD *)(a1 + 72) = v25;
  if ((v5 < 2 || v5 <= 3 && (v6 < 2 || v6 == 2 && v7 <= 5)) && v25)
    goto LABEL_35;
  v28 = (char *)v20 + 3;
  if ((unint64_t)v20 + 3 > a3)
  {
    if (v5 >= 2)
    {
      if (v5 > 3)
      {
        v23 = "missing platform minor";
        goto LABEL_30;
      }
      v23 = "missing reserved bytes";
      if (v6 >= 2)
      {
        v23 = "missing platform minor";
        if (v6 == 2)
        {
LABEL_71:
          if (v7 < 6)
            v23 = "missing reserved bytes";
        }
      }
LABEL_30:
      v17 = (llvm::object *)operator new(0x38uLL);
      v18 = (uint64_t)v17;
      v24 = 1;
      HIBYTE(v34) = 1;
      if (*v23)
      {
        v33[0] = (uint64_t)v23;
        v24 = 3;
      }
      LOBYTE(v34) = v24;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v29 = *v21;
  *a2 = (unint64_t)v28;
  *(_BYTE *)(a1 + 74) = v29;
  if ((v5 < 2 || v5 <= 3 && (v6 < 2 || v6 == 2 && v7 <= 5)) && v29)
  {
LABEL_57:
    v32 = 3;
    llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("bad reserved bytes", &v32, v33);
    result = 0;
    *a4 = v33[0];
    return result;
  }
  v30 = v20 + 2;
  if ((unint64_t)v30 > a3)
  {
    if (v5 >= 2)
    {
      if (v5 > 3)
      {
        v23 = "missing platform update";
        goto LABEL_30;
      }
      v23 = "missing reserved bytes";
      if (v6 >= 2)
      {
        v23 = "missing platform update";
        if (v6 == 2)
          goto LABEL_71;
      }
      goto LABEL_30;
    }
LABEL_54:
    v23 = "missing reserved bytes";
    goto LABEL_30;
  }
  v31 = *v28;
  *a2 = (unint64_t)v30;
  *(_BYTE *)(a1 + 75) = v31;
  if (v5 < 2)
    goto LABEL_56;
  if (v5 > 3)
    return 1;
  if (v6 < 2)
  {
LABEL_56:
    if (v29)
      goto LABEL_57;
    return 1;
  }
  result = 1;
  if (v6 == 2 && v7 <= 5 && v29)
    goto LABEL_57;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseFunctionListInfo(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  llvm::object *v7;
  uint64_t v8;
  const char *v9;
  uint64_t *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t result;
  uint64_t v14;
  const char *v15;
  __int16 v16;

  v5 = *a2;
  v6 = *a2 + 1;
  if ((unint64_t)v6 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing function list offset";
LABEL_5:
    v15 = v9;
    v16 = 259;
    v12 = llvm::object::object_category(v7);
    llvm::StringError::StringError(v8, (llvm::Twine *)&v15, 3, (uint64_t)v12);
    result = 0;
    *a4 = v8;
    return result;
  }
  v11 = *v5;
  v10 = v5 + 2;
  *a2 = v6;
  *(_QWORD *)(a1 + 88) = v11;
  if ((unint64_t)v10 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing function list size";
    goto LABEL_5;
  }
  v14 = *v6;
  *a2 = v10;
  *(_QWORD *)(a1 + 96) = v14 + 4;
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parsePublicMetadataInfo(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  llvm::object *v7;
  uint64_t v8;
  const char *v9;
  uint64_t *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t result;
  uint64_t v14;
  const char *v15;
  __int16 v16;

  v5 = *a2;
  v6 = *a2 + 1;
  if ((unint64_t)v6 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing public metadata offset";
LABEL_5:
    v15 = v9;
    v16 = 259;
    v12 = llvm::object::object_category(v7);
    llvm::StringError::StringError(v8, (llvm::Twine *)&v15, 3, (uint64_t)v12);
    result = 0;
    *a4 = v8;
    return result;
  }
  v11 = *v5;
  v10 = v5 + 2;
  *a2 = v6;
  *(_QWORD *)(a1 + 104) = v11;
  if ((unint64_t)v10 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing public metadata size";
    goto LABEL_5;
  }
  v14 = *v6;
  *a2 = v10;
  *(_QWORD *)(a1 + 112) = v14;
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parsePrivateMetadataInfo(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  llvm::object *v7;
  uint64_t v8;
  const char *v9;
  uint64_t *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t result;
  uint64_t v14;
  const char *v15;
  __int16 v16;

  v5 = *a2;
  v6 = *a2 + 1;
  if ((unint64_t)v6 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing private metadata offset";
LABEL_5:
    v15 = v9;
    v16 = 259;
    v12 = llvm::object::object_category(v7);
    llvm::StringError::StringError(v8, (llvm::Twine *)&v15, 3, (uint64_t)v12);
    result = 0;
    *a4 = v8;
    return result;
  }
  v11 = *v5;
  v10 = v5 + 2;
  *a2 = v6;
  *(_QWORD *)(a1 + 120) = v11;
  if ((unint64_t)v10 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing private metadata size";
    goto LABEL_5;
  }
  v14 = *v6;
  *a2 = v10;
  *(_QWORD *)(a1 + 128) = v14;
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseModuleListInfo(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  llvm::object *v7;
  uint64_t v8;
  const char *v9;
  uint64_t *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t result;
  uint64_t v14;
  const char *v15;
  __int16 v16;

  v5 = *a2;
  v6 = *a2 + 1;
  if ((unint64_t)v6 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing module list offset";
LABEL_5:
    v15 = v9;
    v16 = 259;
    v12 = llvm::object::object_category(v7);
    llvm::StringError::StringError(v8, (llvm::Twine *)&v15, 3, (uint64_t)v12);
    result = 0;
    *a4 = v8;
    return result;
  }
  v11 = *v5;
  v10 = v5 + 2;
  *a2 = v6;
  *(_QWORD *)(a1 + 136) = v11;
  if ((unint64_t)v10 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v8 = (uint64_t)v7;
    v9 = "missing module list size";
    goto LABEL_5;
  }
  v14 = *v6;
  *a2 = v10;
  *(_QWORD *)(a1 + 144) = v14;
  return 1;
}

BOOL llvm::object::MetalLibObjectFile::parseFunctionCount(uint64_t a1, llvm::object **a2)
{
  uint64_t Data;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  llvm::object *v19;
  _UNKNOWN **v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  std::vector<unsigned int>::value_type __x[8];
  __int16 v38;

  Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  v6 = *(_QWORD *)(a1 + 88);
  if (v5 < v6)
    v6 = v5;
  v7 = (unsigned int *)(Data + v6);
  v8 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  v10 = v9;
  llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v10 >= v11)
    v12 = v11;
  else
    v12 = v10;
  v13 = v8 + v12;
  v14 = v7 + 1;
  if ((unint64_t)(v7 + 1) > v8 + v12)
  {
    v19 = (llvm::object *)operator new(0x38uLL);
    *(_QWORD *)__x = "missing function count";
    v38 = 259;
    v20 = llvm::object::object_category(v19);
    llvm::StringError::StringError((uint64_t)v19, (llvm::Twine *)__x, 3, (uint64_t)v20);
    *a2 = v19;
  }
  else
  {
    v15 = *v7;
    v16 = *(_QWORD *)(a1 + 264);
    v17 = *(_QWORD **)(a1 + 272);
    v18 = ((uint64_t)v17 - v16) >> 3;
    if (v15 <= v18)
    {
      if (v15 < v18)
      {
        v21 = (_QWORD *)(v16 + 8 * v15);
        while (v17 != v21)
        {
          v23 = (void *)*--v17;
          v22 = v23;
          *v17 = 0;
          if (v23)
            operator delete(v22);
        }
        *(_QWORD *)(a1 + 272) = v21;
      }
    }
    else
    {
      std::vector<std::unique_ptr<llvm::metallib::MetalLibFunction>>::__append((_QWORD *)(a1 + 264), v15 - v18);
    }
    v24 = (_QWORD *)(a1 + 288);
    v25 = *(_QWORD *)(a1 + 288);
    v26 = (*(_QWORD *)(a1 + 296) - v25) >> 3;
    if (v15 <= v26)
    {
      if (v15 < v26)
        std::vector<std::unique_ptr<llvm::metallib::MetalLibPublicMetadata>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v24, (_QWORD *)(v25 + 8 * v15));
    }
    else
    {
      std::vector<std::unique_ptr<llvm::metallib::MetalLibPublicMetadata>>::__append(v24, v15 - v26);
    }
    v27 = *(_QWORD *)(a1 + 312);
    v28 = *(_QWORD **)(a1 + 320);
    v29 = ((uint64_t)v28 - v27) >> 3;
    if (v29 >= v29 + v15)
    {
      if (v29 > v29 + v15)
      {
        v30 = (_QWORD *)(v27 + 8 * (v29 + v15));
        while (v28 != v30)
        {
          v32 = (_QWORD *)*--v28;
          v31 = v32;
          *v28 = 0;
          if (v32)
          {
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = v33;
              operator delete(v33);
            }
            operator delete(v31);
          }
        }
        *(_QWORD *)(a1 + 320) = v30;
      }
    }
    else
    {
      std::vector<std::unique_ptr<llvm::metallib::MetalLibPrivateMetadata>>::__append((_QWORD *)(a1 + 312), v15);
    }
    if ((*(_WORD *)(a1 + 70) & 1) == 0)
    {
      __x[0] = -1;
      v34 = *(_QWORD *)(a1 + 336);
      v35 = (*(_QWORD *)(a1 + 344) - v34) >> 2;
      if (v15 <= v35)
      {
        if (v15 < v35)
          *(_QWORD *)(a1 + 344) = v34 + 4 * v15;
      }
      else
      {
        std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 336), v15 - v35, __x);
      }
    }
  }
  return (unint64_t)v14 <= v13;
}

uint64_t llvm::object::MetalLibObjectFile::parseHeaderExtension(llvm::object::Binary *this, llvm::object **a2)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t Data;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  llvm::object *v24;
  uint64_t v25;
  const char *v26;
  _UNKNOWN **v27;
  _DWORD *v30;
  const char *v31;
  __int16 v32;

  *(_OWORD *)((char *)this + 232) = 0u;
  v2 = (_QWORD *)((char *)this + 232);
  v3 = *((unsigned __int16 *)this + 32);
  v4 = *((unsigned __int16 *)this + 33);
  v5 = *((unsigned __int16 *)this + 34);
  *(_OWORD *)((char *)this + 152) = 0u;
  v6 = (_QWORD *)((char *)this + 152);
  *(_OWORD *)((char *)this + 168) = 0u;
  v7 = (_QWORD *)((char *)this + 168);
  *(_OWORD *)((char *)this + 184) = 0u;
  v8 = (_QWORD *)((char *)this + 184);
  *(_OWORD *)((char *)this + 200) = 0u;
  v9 = (_QWORD *)((char *)this + 200);
  *(_OWORD *)((char *)this + 216) = 0u;
  v10 = (_QWORD *)((char *)this + 216);
  if (v3 < 2)
    return 1;
  if (v3 <= 3)
  {
    if (v4 < 2)
      return 1;
    if (v4 == 2 && v5 < 3)
      return 1;
  }
  Data = llvm::object::Binary::getData(this);
  v15 = *((_QWORD *)this + 12) + *((_QWORD *)this + 11);
  if (v14 < v15)
    v15 = v14;
  v16 = (_DWORD *)(Data + v15);
  v17 = llvm::object::Binary::getData(this);
  v19 = v18;
  result = llvm::object::Binary::getData(this);
  if (v19 >= v20)
    v21 = v20;
  else
    v21 = v19;
  v22 = v17 + v21;
  v23 = (unint64_t)(v16 + 1);
  if ((unint64_t)(v16 + 1) > v22)
  {
LABEL_10:
    v24 = (llvm::object *)operator new(0x38uLL);
    v25 = (uint64_t)v24;
    v26 = "missing header extension token";
    goto LABEL_11;
  }
  while (1)
  {
    v30 = (_DWORD *)v23;
    switch(*v16)
    {
      case 0x43525348:
        result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v30, v22, (uint64_t)"HSRC", 4, v6, v2 - 9, a2);
        if (!(_DWORD)result)
          return result;
        *((_BYTE *)this + 408) = 0;
        goto LABEL_22;
      case 0x44525348:
        result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v30, v22, (uint64_t)"HSRD", 4, v6, v2 - 9, a2);
        if (!(_DWORD)result)
          return result;
        *((_BYTE *)this + 408) = 1;
        goto LABEL_22;
      case 0x4E594448:
        result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v30, v22, (uint64_t)"HDYN", 4, v7, v2 - 7, a2);
        if ((result & 1) == 0)
          return 0;
        goto LABEL_22;
      case 0x54534C56:
        result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v30, v22, (uint64_t)"VLST", 4, v8, v2 - 5, a2);
        if ((result & 1) == 0)
          return 0;
        goto LABEL_22;
      case 0x54534C49:
        result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v30, v22, (uint64_t)"ILST", 4, v9, v2 - 3, a2);
        if ((result & 1) == 0)
          return 0;
        goto LABEL_22;
      case 0x54534C52:
        result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v30, v22, (uint64_t)"RLST", 4, v10, v2 - 1, a2);
        if ((result & 1) == 0)
          return 0;
        goto LABEL_22;
    }
    if (*v16 != 1414745171)
      break;
    result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v30, v22, (uint64_t)"SLST", 4, v2, v2 + 1, a2);
    if ((result & 1) == 0)
      return 0;
LABEL_22:
    v16 = v30;
    v23 = (unint64_t)(v30 + 1);
    if ((unint64_t)(v30 + 1) > v22)
      goto LABEL_10;
  }
  if (*v16 != 1145656661)
  {
    if (*v16 == 1413762629)
      return 1;
    result = llvm::object::MetalLibObjectFile::skipExtensionToken(result, &v30, v22, a2);
    if (!(_DWORD)result)
      return result;
    goto LABEL_22;
  }
  if ((unint64_t)v16 + 6 > v22)
  {
    v24 = (llvm::object *)operator new(0x38uLL);
    v25 = (uint64_t)v24;
    v26 = "missing token data size";
    goto LABEL_11;
  }
  if ((unint64_t)v16 + 22 <= v22)
  {
    v30 = (_DWORD *)((char *)v16 + 22);
    *((_QWORD *)this + 31) = (char *)v16 + 6;
    *((_QWORD *)this + 32) = 16;
    *a2 = 0;
    goto LABEL_22;
  }
  v24 = (llvm::object *)operator new(0x38uLL);
  v25 = (uint64_t)v24;
  v26 = "missing UUID";
LABEL_11:
  v31 = v26;
  v32 = 259;
  v27 = llvm::object::object_category(v24);
  llvm::StringError::StringError(v25, (llvm::Twine *)&v31, 3, (uint64_t)v27);
  result = 0;
  *a2 = (llvm::object *)v25;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseVariableCount(uint64_t a1, llvm::object **a2)
{
  uint64_t Data;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  std::vector<unsigned int>::value_type __x[8];
  __int16 v33;

  if (*(_QWORD *)(a1 + 184))
  {
    Data = llvm::object::Binary::getData((llvm::object::Binary *)a1);
    v6 = *(_QWORD *)(a1 + 184);
    if (v5 < v6)
      v6 = v5;
    v7 = (unsigned int *)(Data + v6);
    v8 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
    v10 = v9;
    llvm::object::Binary::getData((llvm::object::Binary *)a1);
    if (v10 >= v11)
      v12 = v11;
    else
      v12 = v10;
    if ((unint64_t)(v7 + 1) > v8 + v12)
    {
      v13 = (llvm::object *)operator new(0x38uLL);
      *(_QWORD *)__x = "missing variable count";
      v33 = 259;
      v14 = llvm::object::object_category(v13);
      llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)__x, 3, (uint64_t)v14);
      result = 0;
      *a2 = v13;
      return result;
    }
    v16 = *v7;
    v17 = *(_QWORD **)(a1 + 520);
    v18 = *(_QWORD *)(a1 + 512);
    v19 = ((uint64_t)v17 - v18) >> 3;
    if (v16 <= v19)
    {
      if (v16 < v19)
      {
        v20 = (_QWORD *)(v18 + 8 * v16);
        while (v17 != v20)
        {
          v22 = (void *)*--v17;
          v21 = v22;
          *v17 = 0;
          if (v22)
            operator delete(v21);
        }
        *(_QWORD *)(a1 + 520) = v20;
      }
    }
    else
    {
      std::vector<std::unique_ptr<llvm::metallib::MetalLibFunction>>::__append((_QWORD *)(a1 + 512), v16 - v19);
    }
    v23 = *(_QWORD *)(a1 + 312);
    v24 = *(_QWORD **)(a1 + 320);
    v25 = ((uint64_t)v24 - v23) >> 3;
    if (v25 >= v25 + v16)
    {
      if (v25 > v25 + v16)
      {
        v26 = (_QWORD *)(v23 + 8 * (v25 + v16));
        while (v24 != v26)
        {
          v28 = (_QWORD *)*--v24;
          v27 = v28;
          *v24 = 0;
          if (v28)
          {
            v29 = (void *)v27[3];
            if (v29)
            {
              v27[4] = v29;
              operator delete(v29);
            }
            operator delete(v27);
          }
        }
        *(_QWORD *)(a1 + 320) = v26;
      }
    }
    else
    {
      std::vector<std::unique_ptr<llvm::metallib::MetalLibPrivateMetadata>>::__append((_QWORD *)(a1 + 312), v16);
    }
    if ((*(_WORD *)(a1 + 70) & 1) == 0)
    {
      __x[0] = -1;
      v30 = *(_QWORD *)(a1 + 360);
      v31 = (*(_QWORD *)(a1 + 368) - v30) >> 2;
      if (v16 <= v31)
      {
        if (v16 < v31)
          *(_QWORD *)(a1 + 368) = v30 + 4 * v16;
      }
      else
      {
        std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 360), v16 - v31, __x);
      }
    }
  }
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseImportedSymbolCount(llvm::object::Binary *a1, llvm::object **a2)
{
  uint64_t Data;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  const char *v23;
  __int16 v24;

  if (*((_QWORD *)a1 + 25))
  {
    Data = llvm::object::Binary::getData(a1);
    v6 = *((_QWORD *)a1 + 25);
    if (v5 < v6)
      v6 = v5;
    v7 = (unsigned int *)(Data + v6);
    v8 = llvm::object::Binary::getData(a1);
    v10 = v9;
    llvm::object::Binary::getData(a1);
    if (v10 >= v11)
      v12 = v11;
    else
      v12 = v10;
    if ((unint64_t)(v7 + 1) > v8 + v12)
    {
      v13 = (llvm::object *)operator new(0x38uLL);
      v23 = "missing imported symbol count";
      v24 = 259;
      v14 = llvm::object::object_category(v13);
      llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)&v23, 3, (uint64_t)v14);
      result = 0;
      *a2 = v13;
      return result;
    }
    v16 = *v7;
    v17 = (_QWORD *)*((_QWORD *)a1 + 68);
    v18 = *((_QWORD *)a1 + 67);
    v19 = ((uint64_t)v17 - v18) >> 3;
    if (v16 <= v19)
    {
      if (v16 < v19)
      {
        v20 = (_QWORD *)(v18 + 8 * v16);
        while (v17 != v20)
        {
          v22 = (void *)*--v17;
          v21 = v22;
          *v17 = 0;
          if (v22)
            operator delete(v21);
        }
        *((_QWORD *)a1 + 68) = v20;
      }
    }
    else
    {
      std::vector<std::unique_ptr<llvm::metallib::MetalLibFunction>>::__append((_QWORD *)a1 + 67, v16 - v19);
    }
  }
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseReflectionCount(llvm::object::Binary *a1, llvm::object **a2)
{
  uint64_t Data;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  const char *v23;
  __int16 v24;

  if (*((_QWORD *)a1 + 27))
  {
    Data = llvm::object::Binary::getData(a1);
    v6 = *((_QWORD *)a1 + 27);
    if (v5 < v6)
      v6 = v5;
    v7 = (unsigned int *)(Data + v6);
    v8 = llvm::object::Binary::getData(a1);
    v10 = v9;
    llvm::object::Binary::getData(a1);
    if (v10 >= v11)
      v12 = v11;
    else
      v12 = v10;
    if ((unint64_t)(v7 + 1) > v8 + v12)
    {
      v13 = (llvm::object *)operator new(0x38uLL);
      v23 = "missing reflection count";
      v24 = 259;
      v14 = llvm::object::object_category(v13);
      llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)&v23, 3, (uint64_t)v14);
      result = 0;
      *a2 = v13;
      return result;
    }
    v16 = *v7;
    v17 = (_QWORD *)*((_QWORD *)a1 + 71);
    v18 = *((_QWORD *)a1 + 70);
    v19 = ((uint64_t)v17 - v18) >> 3;
    if (v16 <= v19)
    {
      if (v16 < v19)
      {
        v20 = (_QWORD *)(v18 + 8 * v16);
        while (v17 != v20)
        {
          v22 = (void *)*--v17;
          v21 = v22;
          *v17 = 0;
          if (v22)
            operator delete(v21);
        }
        *((_QWORD *)a1 + 71) = v20;
      }
    }
    else
    {
      std::vector<std::unique_ptr<llvm::metallib::MetalLibFunction>>::__append((_QWORD *)a1 + 70, v16 - v19);
    }
  }
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseScriptCount(llvm::object::Binary *a1, llvm::object **a2)
{
  uint64_t Data;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  const char *v23;
  __int16 v24;

  if (*((_QWORD *)a1 + 29))
  {
    Data = llvm::object::Binary::getData(a1);
    v6 = *((_QWORD *)a1 + 29);
    if (v5 < v6)
      v6 = v5;
    v7 = (unsigned int *)(Data + v6);
    v8 = llvm::object::Binary::getData(a1);
    v10 = v9;
    llvm::object::Binary::getData(a1);
    if (v10 >= v11)
      v12 = v11;
    else
      v12 = v10;
    if ((unint64_t)(v7 + 1) > v8 + v12)
    {
      v13 = (llvm::object *)operator new(0x38uLL);
      v23 = "missing script count";
      v24 = 259;
      v14 = llvm::object::object_category(v13);
      llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)&v23, 3, (uint64_t)v14);
      result = 0;
      *a2 = v13;
      return result;
    }
    v16 = *v7;
    v17 = (_QWORD *)*((_QWORD *)a1 + 74);
    v18 = *((_QWORD *)a1 + 73);
    v19 = ((uint64_t)v17 - v18) >> 3;
    if (v16 <= v19)
    {
      if (v16 < v19)
      {
        v20 = (_QWORD *)(v18 + 8 * v16);
        while (v17 != v20)
        {
          v22 = (void *)*--v17;
          v21 = v22;
          *v17 = 0;
          if (v22)
            operator delete(v21);
        }
        *((_QWORD *)a1 + 74) = v20;
      }
    }
    else
    {
      std::vector<std::unique_ptr<llvm::metallib::MetalLibFunction>>::__append((_QWORD *)a1 + 73, v16 - v19);
    }
  }
  return 1;
}

void llvm::object::MetalLibObjectFile::~MetalLibObjectFile(llvm::object::MetalLibObjectFile *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  unint64_t v16;
  void **v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  void *v58;

  *(_QWORD *)this = off_1E0E25418;
  v2 = (_QWORD *)*((_QWORD *)this + 85);
  v3 = (_QWORD *)*((_QWORD *)this + 86);
  if (v2 == v3)
  {
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    v19 = *v2 & 3;
    v18 = (void **)(*v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19)
      v20 = 1;
    else
      v20 = v18 == 0;
    if (v20)
    {
      if (v19 == 2)
        v16 = *v2 & 0xFFFFFFFFFFFFFFFCLL;
      else
        v16 = 0;
      if (v19 != 1 || v18 == 0)
        v18 = (void **)v16;
    }
    else
    {
      v21 = *v18;
      if (*v18)
      {
        v18[1] = v21;
        operator delete(v21);
      }
    }
    operator delete(v18);
    ++v2;
  }
  while (v2 != v3);
  v2 = (_QWORD *)*((_QWORD *)this + 85);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 86) = v2;
    operator delete(v2);
  }
LABEL_4:
  if (*((char *)this + 631) < 0)
  {
    operator delete(*((void **)this + 76));
    v4 = (_QWORD *)*((_QWORD *)this + 73);
    if (!v4)
    {
LABEL_6:
      v5 = (_QWORD *)*((_QWORD *)this + 70);
      if (!v5)
        goto LABEL_7;
LABEL_60:
      v35 = (_QWORD *)*((_QWORD *)this + 71);
      if (v35 == v5)
      {
        *((_QWORD *)this + 71) = v5;
        operator delete(v5);
        v6 = (_QWORD *)*((_QWORD *)this + 67);
        if (v6)
          goto LABEL_70;
      }
      else
      {
        do
        {
          v37 = (void *)*--v35;
          v36 = v37;
          *v35 = 0;
          if (v37)
            operator delete(v36);
        }
        while (v35 != v5);
        v38 = (void *)*((_QWORD *)this + 70);
        *((_QWORD *)this + 71) = v5;
        operator delete(v38);
        v6 = (_QWORD *)*((_QWORD *)this + 67);
        if (v6)
          goto LABEL_70;
      }
LABEL_8:
      v7 = (_QWORD *)*((_QWORD *)this + 64);
      if (!v7)
        goto LABEL_9;
LABEL_77:
      v43 = (_QWORD *)*((_QWORD *)this + 65);
      if (v43 == v7)
      {
        *((_QWORD *)this + 65) = v7;
        operator delete(v7);
        v8 = (_QWORD *)*((_QWORD *)this + 61);
        if (v8)
          goto LABEL_84;
      }
      else
      {
        do
        {
          v45 = (void *)*--v43;
          v44 = v45;
          *v43 = 0;
          if (v45)
            operator delete(v44);
        }
        while (v43 != v7);
        v46 = (void *)*((_QWORD *)this + 64);
        *((_QWORD *)this + 65) = v7;
        operator delete(v46);
        v8 = (_QWORD *)*((_QWORD *)this + 61);
        if (v8)
          goto LABEL_84;
      }
LABEL_10:
      v9 = (_QWORD *)*((_QWORD *)this + 56);
      if (!v9)
        goto LABEL_11;
LABEL_91:
      v51 = (_QWORD *)*((_QWORD *)this + 57);
      if (v51 == v9)
      {
        *((_QWORD *)this + 57) = v9;
        operator delete(v9);
        v10 = (_QWORD *)*((_QWORD *)this + 48);
        if (v10)
          goto LABEL_98;
      }
      else
      {
        do
        {
          v53 = (void *)*--v51;
          v52 = v53;
          *v51 = 0;
          if (v53)
            operator delete(v52);
        }
        while (v51 != v9);
        v54 = (void *)*((_QWORD *)this + 56);
        *((_QWORD *)this + 57) = v9;
        operator delete(v54);
        v10 = (_QWORD *)*((_QWORD *)this + 48);
        if (v10)
          goto LABEL_98;
      }
LABEL_12:
      v11 = (void *)*((_QWORD *)this + 45);
      if (!v11)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = (_QWORD *)*((_QWORD *)this + 73);
    if (!v4)
      goto LABEL_6;
  }
  v25 = (_QWORD *)*((_QWORD *)this + 74);
  if (v25 == v4)
  {
    *((_QWORD *)this + 74) = v4;
    operator delete(v4);
    v5 = (_QWORD *)*((_QWORD *)this + 70);
    if (v5)
      goto LABEL_60;
  }
  else
  {
    do
    {
      v27 = (void *)*--v25;
      v26 = v27;
      *v25 = 0;
      if (v27)
        operator delete(v26);
    }
    while (v25 != v4);
    v34 = (void *)*((_QWORD *)this + 73);
    *((_QWORD *)this + 74) = v4;
    operator delete(v34);
    v5 = (_QWORD *)*((_QWORD *)this + 70);
    if (v5)
      goto LABEL_60;
  }
LABEL_7:
  v6 = (_QWORD *)*((_QWORD *)this + 67);
  if (!v6)
    goto LABEL_8;
LABEL_70:
  v39 = (_QWORD *)*((_QWORD *)this + 68);
  if (v39 == v6)
  {
    *((_QWORD *)this + 68) = v6;
    operator delete(v6);
    v7 = (_QWORD *)*((_QWORD *)this + 64);
    if (v7)
      goto LABEL_77;
  }
  else
  {
    do
    {
      v41 = (void *)*--v39;
      v40 = v41;
      *v39 = 0;
      if (v41)
        operator delete(v40);
    }
    while (v39 != v6);
    v42 = (void *)*((_QWORD *)this + 67);
    *((_QWORD *)this + 68) = v6;
    operator delete(v42);
    v7 = (_QWORD *)*((_QWORD *)this + 64);
    if (v7)
      goto LABEL_77;
  }
LABEL_9:
  v8 = (_QWORD *)*((_QWORD *)this + 61);
  if (!v8)
    goto LABEL_10;
LABEL_84:
  v47 = (_QWORD *)*((_QWORD *)this + 62);
  if (v47 == v8)
  {
    *((_QWORD *)this + 62) = v8;
    operator delete(v8);
    v9 = (_QWORD *)*((_QWORD *)this + 56);
    if (v9)
      goto LABEL_91;
  }
  else
  {
    do
    {
      v49 = (void *)*--v47;
      v48 = v49;
      *v47 = 0;
      if (v49)
        operator delete(v48);
    }
    while (v47 != v8);
    v50 = (void *)*((_QWORD *)this + 61);
    *((_QWORD *)this + 62) = v8;
    operator delete(v50);
    v9 = (_QWORD *)*((_QWORD *)this + 56);
    if (v9)
      goto LABEL_91;
  }
LABEL_11:
  v10 = (_QWORD *)*((_QWORD *)this + 48);
  if (!v10)
    goto LABEL_12;
LABEL_98:
  v55 = (_QWORD *)*((_QWORD *)this + 49);
  if (v55 == v10)
  {
    *((_QWORD *)this + 49) = v10;
    operator delete(v10);
    v11 = (void *)*((_QWORD *)this + 45);
    if (!v11)
      goto LABEL_14;
LABEL_13:
    *((_QWORD *)this + 46) = v11;
    operator delete(v11);
    goto LABEL_14;
  }
  do
  {
    v57 = (void *)*--v55;
    v56 = v57;
    *v55 = 0;
    if (v57)
      operator delete(v56);
  }
  while (v55 != v10);
  v58 = (void *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 49) = v10;
  operator delete(v58);
  v11 = (void *)*((_QWORD *)this + 45);
  if (v11)
    goto LABEL_13;
LABEL_14:
  v12 = (void *)*((_QWORD *)this + 42);
  if (v12)
  {
    *((_QWORD *)this + 43) = v12;
    operator delete(v12);
  }
  v13 = (_QWORD *)*((_QWORD *)this + 39);
  if (v13)
  {
    v14 = (_QWORD *)*((_QWORD *)this + 40);
    v15 = (void *)*((_QWORD *)this + 39);
    if (v14 != v13)
    {
      do
      {
        v23 = (_QWORD *)*--v14;
        v22 = v23;
        *v14 = 0;
        if (v23)
        {
          v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = v24;
            operator delete(v24);
          }
          operator delete(v22);
        }
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 39);
    }
    *((_QWORD *)this + 40) = v13;
    operator delete(v15);
  }
  v28 = (_QWORD *)*((_QWORD *)this + 36);
  if (v28)
  {
    std::vector<std::unique_ptr<llvm::metallib::MetalLibPublicMetadata>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 288, v28);
    operator delete(*((void **)this + 36));
  }
  v29 = (_QWORD *)*((_QWORD *)this + 33);
  if (v29)
  {
    v30 = (_QWORD *)*((_QWORD *)this + 34);
    v31 = (void *)*((_QWORD *)this + 33);
    if (v30 != v29)
    {
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete(v32);
      }
      while (v30 != v29);
      v31 = (void *)*((_QWORD *)this + 33);
    }
    *((_QWORD *)this + 34) = v29;
    operator delete(v31);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
}

{
  void *v1;

  llvm::object::MetalLibObjectFile::~MetalLibObjectFile(this);
  operator delete(v1);
}

void llvm::object::MetalLibObjectFile::moveSymbolNext(llvm::object::MetalLibObjectFile *a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = a2[1];
  if (v3)
  {
    if (v3 == 1)
    {
      while (1)
      {
        v6 = *a2 + 1;
        *a2 = v6;
        v7 = *((_QWORD *)a1 + 33);
        v8 = (*((_QWORD *)a1 + 34) - v7) >> 3;
        v9 = *((_QWORD *)a1 + 64);
        if (v8 + ((*((_QWORD *)a1 + 65) - v9) >> 3) == v6)
          return;
        if (v6 < v8)
        {
          v5 = *(_QWORD *)(v7 + 8 * v6);
          if (v5)
          {
            if (*(_BYTE *)(v5 + 24) == 3)
              return;
          }
          else
          {
            llvm::object::MetalLibObjectFile::materializeFunctionNo(a1, v6, (uint64_t *)&v11);
            v10 = v11;
            if (v11)
              goto LABEL_12;
            if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 33) + 8 * *a2) + 24) == 3)
              return;
          }
        }
        else
        {
          if (*(_QWORD *)(v9 + 8 * (v6 - v8)))
            return;
          llvm::object::MetalLibObjectFile::materializeVariableNo(a1, v6 - v8, (uint64_t *)&v11);
          v10 = v11;
          if (!v11)
            return;
LABEL_12:
          v11 = 0;
          v12 = v10;
          llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v12, &v13);
          if (v12)
            (*(void (**)(_QWORD *))(*v12 + 8))(v12);
          if (v11)
            (*(void (**)(_QWORD *))(*v11 + 8))(v11);
        }
      }
    }
  }
  else
  {
    ++*a2;
  }
}

void llvm::object::MetalLibObjectFile::materializeFunctionNo(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t Data;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char v16;
  unsigned int v17;
  _DWORD *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t *v21;
  _BYTE *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  llvm::object *v25;
  uint64_t v26;
  const char *v27;
  unsigned int *v28;
  _UNKNOWN **v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  uint64_t *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  char *v52;
  uint64_t *v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  char *v71;
  llvm::object *v72;
  uint64_t v73;
  const char *v74;
  _UNKNOWN **v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t *v80;
  unsigned int v81;
  const char *v82;
  unsigned int v83;
  int v84;
  __int16 v85;

  v81 = a2;
  Data = llvm::object::Binary::getData(this);
  if (v6 >= *((_QWORD *)this + 11) + 4)
    v8 = *((_QWORD *)this + 11) + 4;
  else
    v8 = v6;
  v9 = llvm::object::Binary::getData(this);
  v11 = v10;
  llvm::object::Binary::getData(this);
  if (v11 >= v12)
    v13 = v12;
  else
    v13 = v11;
  v14 = (char *)operator new(0xD0uLL);
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 9) = 0u;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *((_OWORD *)v14 + 10) = 0u;
  *((_OWORD *)v14 + 11) = 0u;
  *((_OWORD *)v14 + 12) = 0u;
  v15 = llvm::object::MetalLibObjectFile::SmallLRUCache<unsigned int,unsigned char const*,4u,llvm::object::MetalLibObjectFile::SmallLRUCacheEntry<unsigned int,unsigned char const*>>::lookup((_DWORD *)this + 180, &v81);
  if ((_DWORD *)((char *)this + 784) == v15)
  {
    v17 = 0;
    v18 = (_DWORD *)(Data + v8);
    v19 = v9 + v13;
    if (a2)
      goto LABEL_20;
  }
  else
  {
    v17 = v15[2];
    v18 = *(_DWORD **)v15;
    v19 = v9 + v13;
    if (v17 != a2)
    {
LABEL_20:
      do
      {
        v28 = *(unsigned int **)(*((_QWORD *)this + 33) + 8 * v17);
        if (!v28)
        {
          v28 = v18;
          if ((unint64_t)(v18 + 1) > v19)
            goto LABEL_22;
        }
        v18 = (_DWORD *)((char *)v18 + *v28);
      }
      while (a2 != ++v17);
    }
  }
  v80 = a3;
  if (!v16)
  {
    v82 = (const char *)v18;
    v83 = v81;
    v84 = 0;
    llvm::object::MetalLibObjectFile::SmallLRUCache<unsigned int,unsigned char const*,4u,llvm::object::MetalLibObjectFile::SmallLRUCacheEntry<unsigned int,unsigned char const*>>::insert((_DWORD *)this + 180, (uint64_t *)&v82);
  }
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)&v20 = -1;
  *((_QWORD *)&v20 + 1) = -1;
  *((_OWORD *)v14 + 3) = v20;
  v21 = (uint64_t *)(v14 + 48);
  v14[24] = -1;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  *((_OWORD *)v14 + 4) = v20;
  v14[80] = 0;
  v14[81] &= 0xFCu;
  *((_QWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 14) = 0;
  *((_QWORD *)v14 + 15) = 0;
  *((_QWORD *)v14 + 16) = 0;
  *((_QWORD *)v14 + 17) = 0;
  if (v14[200])
    v14[200] = 0;
  v22 = v18 + 1;
  if ((unint64_t)(v18 + 1) > v19)
  {
LABEL_22:
    v25 = (llvm::object *)operator new(0x38uLL);
    v26 = (uint64_t)v25;
    v27 = "missing function data size";
    goto LABEL_23;
  }
  v24 = *v18;
  v23 = (unsigned __int16 *)(v18 + 2);
  *(_DWORD *)v14 = v24;
  if ((unint64_t)v23 > v19)
  {
LABEL_17:
    v25 = (llvm::object *)operator new(0x38uLL);
    v26 = (uint64_t)v25;
    v27 = "missing function token";
LABEL_23:
    v82 = v27;
    v85 = 259;
    v29 = llvm::object::object_category(v25);
    llvm::StringError::StringError(v26, (llvm::Twine *)&v82, 3, (uint64_t)v29);
    *a3 = v26;
    goto LABEL_24;
  }
  v30 = (_BYTE *)(v9 + v13);
  v31 = v9 + v13 - 6;
  v32 = v9 + v13 - 1;
  v33 = v9 + v13 - 33;
  v34 = 255;
  v35 = -1;
  v36 = 0xFFFF;
  v37 = 0xFFFF;
  v38 = 0xFFFF;
  v39 = 0xFFFF;
  v40 = -1;
  v41 = -1;
  while (1)
  {
    switch(*(_DWORD *)v22)
    {
      case 0x454D414E:
        v42 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
        {
          v25 = (llvm::object *)operator new(0x38uLL);
          v26 = (uint64_t)v25;
          v27 = "missing function name length";
          goto LABEL_23;
        }
        v43 = *v23;
        v22 = &v42[v43];
        if ((unint64_t)&v42[v43] > v19
          || (v44 = v43 - 1, *((_QWORD *)v14 + 1) = v42, *((_QWORD *)v14 + 2) = v44, v42[v44]))
        {
          v25 = (llvm::object *)operator new(0x38uLL);
          v26 = (uint64_t)v25;
          v27 = "invalid function name";
          goto LABEL_23;
        }
        goto LABEL_28;
      case 0x45505954:
        v45 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
          goto LABEL_130;
        v22 += 7;
        if ((unint64_t)v22 > v19)
        {
          v25 = (llvm::object *)operator new(0x38uLL);
          v26 = (uint64_t)v25;
          v27 = "missing function type";
          goto LABEL_23;
        }
        v34 = *v45;
        v14[24] = v34;
        goto LABEL_28;
      case 0x48534148:
        v46 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
          goto LABEL_130;
        v22 += 38;
        if ((unint64_t)v22 > v19)
        {
          v25 = (llvm::object *)operator new(0x38uLL);
          v26 = (uint64_t)v25;
          v27 = "missing function hash";
          goto LABEL_23;
        }
        *((_QWORD *)v14 + 4) = v46;
        *((_QWORD *)v14 + 5) = 32;
        goto LABEL_28;
      case 0x5446464F:
        if ((unint64_t)(v22 + 6) > v19)
          goto LABEL_130;
        if ((unint64_t)(v22 + 14) > v19)
        {
          v25 = (llvm::object *)operator new(0x38uLL);
          v26 = (uint64_t)v25;
          v27 = "missing function public metadata offset";
          goto LABEL_23;
        }
        v41 = *(_QWORD *)(v22 + 6);
        *v21 = v41;
        v47 = (uint64_t *)(v22 + 22);
        if ((unint64_t)(v22 + 22) > v19)
        {
          v25 = (llvm::object *)operator new(0x38uLL);
          v26 = (uint64_t)v25;
          v27 = "missing function private metadata offset";
          goto LABEL_23;
        }
        v40 = *(_QWORD *)(v22 + 14);
        *((_QWORD *)v14 + 7) = v40;
        v22 += 30;
        if ((unint64_t)v22 > v19)
          goto LABEL_134;
        v35 = *v47;
        *((_QWORD *)v14 + 8) = *v47;
        goto LABEL_28;
      case 0x4546464F:
        v48 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
          goto LABEL_130;
        v49 = v22 + 6;
        if ((unint64_t)(v22 + 6) >= v19)
        {
LABEL_68:
          if (*v49)
          {
            v25 = (llvm::object *)operator new(0x38uLL);
            v26 = (uint64_t)v25;
            v27 = "missing function external offset path";
            goto LABEL_23;
          }
          *((_QWORD *)v14 + 15) = v48;
          *((_QWORD *)v14 + 16) = v49 - v48;
          if ((unint64_t)(v49 + 9) > v19)
            goto LABEL_138;
        }
        else
        {
          v50 = v31 - (_QWORD)v22;
          v49 = v48;
          while (*v49)
          {
            ++v49;
            if (!--v50)
            {
              v49 = v30;
              a3 = v80;
              goto LABEL_68;
            }
          }
          a3 = v80;
          *((_QWORD *)v14 + 15) = v48;
          *((_QWORD *)v14 + 16) = v49 - v48;
          if ((unint64_t)(v49 + 9) > v19)
          {
LABEL_138:
            LODWORD(v82) = 3;
            llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing function public metadata offset", (unsigned int *)&v82, a3);
            goto LABEL_24;
          }
        }
        v41 = *(_QWORD *)(v49 + 1);
        *v21 = v41;
        v53 = (uint64_t *)(v49 + 17);
        if ((unint64_t)(v49 + 17) > v19)
        {
          LODWORD(v82) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing function private metadata offset", (unsigned int *)&v82, a3);
          goto LABEL_24;
        }
        v40 = *(_QWORD *)(v49 + 9);
        *((_QWORD *)v14 + 7) = v40;
        v22 = v49 + 25;
        if ((unint64_t)(v49 + 25) > v19)
        {
LABEL_134:
          LODWORD(v82) = 3;
          v71 = "missing function module offset";
          goto LABEL_152;
        }
        v35 = *v53;
        *((_QWORD *)v14 + 8) = *v53;
        goto LABEL_28;
      case 0x53524556:
        if ((unint64_t)(v22 + 6) > v19)
        {
LABEL_130:
          v25 = (llvm::object *)operator new(0x38uLL);
          v26 = (uint64_t)v25;
          v27 = "missing token data size";
          goto LABEL_23;
        }
        if ((unint64_t)(v22 + 8) > v19)
        {
          LODWORD(v82) = 3;
          v71 = "missing function AIR major version";
          goto LABEL_152;
        }
        v39 = *((unsigned __int16 *)v22 + 3);
        *((_WORD *)v14 + 36) = v39;
        if ((unint64_t)(v22 + 10) > v19)
        {
          LODWORD(v82) = 3;
          v71 = "missing function AIR minor version";
          goto LABEL_152;
        }
        v38 = *((unsigned __int16 *)v22 + 4);
        *((_WORD *)v14 + 37) = v38;
        v51 = (unsigned __int16 *)(v22 + 12);
        if ((unint64_t)(v22 + 12) > v19)
        {
          LODWORD(v82) = 3;
          v71 = "missing function Metal major version";
          goto LABEL_152;
        }
        v37 = *((unsigned __int16 *)v22 + 5);
        *((_WORD *)v14 + 38) = v37;
        v22 += 14;
        if ((unint64_t)v22 > v19)
        {
          LODWORD(v82) = 3;
          v71 = "missing function Metal minor version";
          goto LABEL_152;
        }
        v36 = *v51;
        *((_WORD *)v14 + 39) = v36;
        goto LABEL_28;
      case 0x5259414C:
        v52 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
          goto LABEL_137;
        v22 += 7;
        if ((unint64_t)v22 > v19)
        {
          LODWORD(v82) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing function render target array index data type", (unsigned int *)&v82, a3);
          goto LABEL_24;
        }
        v14[80] = *v52;
        goto LABEL_28;
      case 0x53534554:
        v54 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
          goto LABEL_137;
        v22 += 7;
        if ((unint64_t)v22 > v19)
        {
          LODWORD(v82) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing function patch info", (unsigned int *)&v82, a3);
          goto LABEL_24;
        }
        v14[81] = *v54;
        goto LABEL_28;
      case 0x5A53444D:
        v55 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
          goto LABEL_137;
        v22 += 14;
        if ((unint64_t)v22 > v19)
        {
          LODWORD(v82) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing function module size", (unsigned int *)&v82, a3);
          goto LABEL_24;
        }
        *((_QWORD *)v14 + 11) = *v55;
        goto LABEL_28;
      case 0x46464F53:
        v56 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
          goto LABEL_137;
        v22 += 14;
        if ((unint64_t)v22 > v19)
        {
          LODWORD(v82) = 3;
          v71 = "missing function source offset";
          goto LABEL_152;
        }
        *((_QWORD *)v14 + 12) = *v56;
        goto LABEL_28;
      case 0x544C4652:
        v60 = v22 + 6;
        if ((unint64_t)(v22 + 6) > v19)
        {
LABEL_137:
          LODWORD(v82) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing token data size", (unsigned int *)&v82, a3);
          goto LABEL_24;
        }
        v22 += 14;
        if ((unint64_t)v22 > v19)
        {
          LODWORD(v82) = 3;
          v71 = "missing function reflection offset";
          goto LABEL_152;
        }
        *((_QWORD *)v14 + 17) = *v60;
        goto LABEL_28;
      case 0x45435053:
      case 0x49435053:
        v57 = (unint64_t)(v22 + 6);
        if ((unint64_t)(v22 + 6) > v19)
        {
          LODWORD(v82) = 3;
          v71 = "missing specialization info length";
          goto LABEL_152;
        }
        *((_QWORD *)v14 + 24) = 0;
        *((_OWORD *)v14 + 10) = 0uLL;
        *((_OWORD *)v14 + 11) = 0uLL;
        *((_OWORD *)v14 + 9) = 0uLL;
        v58 = v22 + 6;
        v14[200] = 1;
        if (v57 >= v19)
        {
LABEL_99:
          if (*v58)
          {
            LODWORD(v82) = 3;
            v71 = "invalid unspecialized MetalLib path";
LABEL_152:
            llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>(v71, (unsigned int *)&v82, a3);
            goto LABEL_24;
          }
        }
        else
        {
          v59 = v31 - (_QWORD)v22;
          v58 = v22 + 6;
          while (*v58)
          {
            ++v58;
            if (!--v59)
            {
              v58 = v30;
              a3 = v80;
              goto LABEL_99;
            }
          }
          a3 = v80;
        }
        *((_QWORD *)v14 + 18) = v57;
        *((_QWORD *)v14 + 19) = &v58[-v57];
        v61 = v58 + 33;
        if ((unint64_t)(v58 + 33) > v19)
        {
          LODWORD(v82) = 3;
          v71 = "missing unspecialized function hash";
          goto LABEL_152;
        }
        *((_QWORD *)v14 + 20) = v58 + 1;
        *((_QWORD *)v14 + 21) = 32;
        if (*(_DWORD *)v22 == 1162039379)
        {
          v63 = v58 + 33;
          if ((unint64_t)v61 >= v19)
          {
LABEL_26:
            if (*v63)
            {
              LODWORD(v82) = 3;
              v71 = "invalid specialization script path";
              goto LABEL_152;
            }
          }
          else
          {
            v64 = v33 - (_QWORD)v58;
            v63 = v61;
            while (*v63)
            {
              ++v63;
              if (!--v64)
              {
                v63 = v30;
                goto LABEL_26;
              }
            }
          }
          *((_QWORD *)v14 + 22) = v61;
          *((_QWORD *)v14 + 23) = v63 - (_BYTE *)v61;
          v22 = v63 + 1;
          *((_QWORD *)v14 + 24) = 0;
        }
        else
        {
          v22 = v58 + 41;
          if ((unint64_t)(v58 + 41) > v19)
          {
            LODWORD(v82) = 3;
            v71 = "missing specialization script offset";
            goto LABEL_152;
          }
          v62 = *v61;
          *((_QWORD *)v14 + 23) = 0;
          *((_QWORD *)v14 + 24) = v62;
          *((_QWORD *)v14 + 22) = "";
        }
        goto LABEL_28;
    }
    if (*(_DWORD *)v22 != 1397312577)
      break;
    v65 = v22 + 6;
    if ((unint64_t)(v22 + 6) > v19)
    {
      LODWORD(v82) = 3;
      llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing alias length", (unsigned int *)&v82, a3);
      goto LABEL_24;
    }
    v66 = v22 + 6;
    if ((unint64_t)(v22 + 6) >= v19)
    {
LABEL_120:
      if (*v66)
      {
        LODWORD(v82) = 3;
        llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("invalid function alias", (unsigned int *)&v82, a3);
        goto LABEL_24;
      }
    }
    else
    {
      v67 = v31 - (_QWORD)v22;
      v66 = v65;
      while (*v66)
      {
        ++v66;
        if (!--v67)
        {
          v66 = v30;
          goto LABEL_120;
        }
      }
    }
    *((_QWORD *)v14 + 13) = v65;
    *((_QWORD *)v14 + 14) = v66 - v65;
    v68 = v66 + 1;
    v69 = v66 + 1;
    if ((unint64_t)(v66 + 1) >= v19)
    {
LABEL_126:
      if (*v69)
      {
        LODWORD(v82) = 3;
        llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("invalid function name", (unsigned int *)&v82, a3);
        goto LABEL_24;
      }
    }
    else
    {
      v70 = v32 - (_QWORD)v66;
      v69 = v68;
      while (*v69)
      {
        ++v69;
        if (!--v70)
        {
          v69 = v30;
          goto LABEL_126;
        }
      }
    }
    *((_QWORD *)v14 + 1) = v68;
    *((_QWORD *)v14 + 2) = v69 - v68;
    v22 = v69 + 1;
LABEL_28:
    v23 = (unsigned __int16 *)(v22 + 4);
    if ((unint64_t)(v22 + 4) > v19)
      goto LABEL_17;
  }
  if (*(_DWORD *)v22 != 1413762629)
  {
    if ((unint64_t)(v22 + 6) > v19)
      goto LABEL_137;
    v22 += *v23 + 6;
    if ((unint64_t)v22 > v19)
    {
      LODWORD(v82) = 3;
      llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing token data", (unsigned int *)&v82, a3);
      goto LABEL_24;
    }
    goto LABEL_28;
  }
  if (!*((_QWORD *)v14 + 2))
  {
    v72 = (llvm::object *)operator new(0x38uLL);
    v73 = (uint64_t)v72;
    v74 = "function name required";
LABEL_169:
    v82 = v74;
    v85 = 259;
    v75 = llvm::object::object_category(v72);
    llvm::StringError::StringError(v73, (llvm::Twine *)&v82, 3, (uint64_t)v75);
    *v80 = v73;
    goto LABEL_24;
  }
  if (v34 == 255)
  {
    v72 = (llvm::object *)operator new(0x38uLL);
    v73 = (uint64_t)v72;
    v74 = "function type required";
    goto LABEL_169;
  }
  if (!*((_QWORD *)v14 + 5))
  {
    v72 = (llvm::object *)operator new(0x38uLL);
    v73 = (uint64_t)v72;
    v74 = "function hash required";
    goto LABEL_169;
  }
  if (v41 == -1)
  {
    LODWORD(v82) = 3;
    llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("function public metadata offset required", (unsigned int *)&v82, v80);
    goto LABEL_24;
  }
  if (v40 == -1)
  {
    LODWORD(v82) = 3;
    llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("function private metadata offset required", (unsigned int *)&v82, v80);
    goto LABEL_24;
  }
  if ((*((_WORD *)this + 35) & 1) == 0 && v35 == -1)
  {
    LODWORD(v82) = 3;
    llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("function module offset required", (unsigned int *)&v82, v80);
    goto LABEL_24;
  }
  if (v39 == 0xFFFF)
  {
    LODWORD(v82) = 3;
    v76 = "function AIR major version required";
    goto LABEL_176;
  }
  if (v38 == 0xFFFF)
  {
    LODWORD(v82) = 3;
    v76 = "function AIR minor version required";
    goto LABEL_176;
  }
  if (v37 == 0xFFFF)
  {
    LODWORD(v82) = 3;
    v76 = "function Metal major version required";
    goto LABEL_176;
  }
  if (v36 == 0xFFFF)
  {
    LODWORD(v82) = 3;
    v76 = "function Metal minor version required";
LABEL_176:
    llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>(v76, (unsigned int *)&v82, v80);
LABEL_24:
    operator delete(v14);
  }
  else
  {
    v77 = *((_QWORD *)this + 33);
    v78 = 8 * v81;
    v79 = *(void **)(v77 + v78);
    *(_QWORD *)(v77 + v78) = v14;
    if (v79)
      operator delete(v79);
    *v80 = 0;
  }
}

void llvm::object::MetalLibObjectFile::materializeVariableNo(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t Data;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char v15;
  unsigned int v16;
  _DWORD *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t *v20;
  _BYTE *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  llvm::object *v24;
  uint64_t v25;
  const char *v26;
  unsigned int *v27;
  _UNKNOWN **v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unsigned int v63;
  const char *v64;
  unsigned int v65;
  int v66;
  __int16 v67;

  v63 = a2;
  Data = llvm::object::Binary::getData(this);
  if (v5 >= *((_QWORD *)this + 23) + 4)
    v7 = *((_QWORD *)this + 23) + 4;
  else
    v7 = v5;
  v8 = llvm::object::Binary::getData(this);
  v10 = v9;
  llvm::object::Binary::getData(this);
  if (v10 >= v11)
    v12 = v11;
  else
    v12 = v10;
  v13 = (char *)operator new(0x80uLL);
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  v14 = llvm::object::MetalLibObjectFile::SmallLRUCache<unsigned int,unsigned char const*,4u,llvm::object::MetalLibObjectFile::SmallLRUCacheEntry<unsigned int,unsigned char const*>>::lookup((_DWORD *)this + 212, &v63);
  if ((_DWORD *)((char *)this + 912) == v14)
  {
    v16 = 0;
    v17 = (_DWORD *)(Data + v7);
    v18 = v8 + v12;
    if (a2)
      goto LABEL_18;
  }
  else
  {
    v16 = v14[2];
    v17 = *(_DWORD **)v14;
    v18 = v8 + v12;
    if (v16 != a2)
    {
LABEL_18:
      do
      {
        v27 = *(unsigned int **)(*((_QWORD *)this + 64) + 8 * v16);
        if (!v27)
        {
          v27 = v17;
          if ((unint64_t)(v17 + 1) > v18)
            goto LABEL_20;
        }
        v17 = (_DWORD *)((char *)v17 + *v27);
      }
      while (a2 != ++v16);
    }
  }
  if (!v15)
  {
    v64 = (const char *)v17;
    v65 = v63;
    v66 = 0;
    llvm::object::MetalLibObjectFile::SmallLRUCache<unsigned int,unsigned char const*,4u,llvm::object::MetalLibObjectFile::SmallLRUCacheEntry<unsigned int,unsigned char const*>>::insert((_DWORD *)this + 212, (uint64_t *)&v64);
  }
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)&v19 = -1;
  *((_QWORD *)&v19 + 1) = -1;
  *(_OWORD *)(v13 + 40) = v19;
  v20 = (uint64_t *)(v13 + 40);
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 9) = 0;
  *(_OWORD *)(v13 + 56) = v19;
  *((_QWORD *)v13 + 10) = 0;
  *((_QWORD *)v13 + 11) = 0;
  *((_QWORD *)v13 + 12) = 0;
  *((_QWORD *)v13 + 14) = 0;
  *((_QWORD *)v13 + 15) = 0;
  v21 = v17 + 1;
  *((_QWORD *)v13 + 13) = 0;
  if ((unint64_t)(v17 + 1) > v18)
  {
LABEL_20:
    v24 = (llvm::object *)operator new(0x38uLL);
    v25 = (uint64_t)v24;
    v26 = "missing variable data size";
LABEL_21:
    v64 = v26;
    v67 = 259;
    v28 = llvm::object::object_category(v24);
    llvm::StringError::StringError(v25, (llvm::Twine *)&v64, 3, (uint64_t)v28);
    *a3 = v25;
LABEL_22:
    operator delete(v13);
    return;
  }
  v23 = *v17;
  v22 = (unsigned __int16 *)(v17 + 2);
  *(_DWORD *)v13 = v23;
  if ((unint64_t)v22 > v18)
  {
LABEL_15:
    v24 = (llvm::object *)operator new(0x38uLL);
    v25 = (uint64_t)v24;
    v26 = "missing variable token";
    goto LABEL_21;
  }
  v29 = (_BYTE *)(v8 + v12);
  v30 = v8 + v12 - 6;
  v31 = v8 + v12 - 1;
  v32 = -1;
  v33 = 0xFFFF;
  v34 = 0xFFFF;
  v35 = 0xFFFF;
  v36 = 0xFFFF;
  v37 = -1;
  v38 = -1;
  while (1)
  {
    switch(*(_DWORD *)v21)
    {
      case 0x454D414E:
        v40 = v21 + 6;
        if ((unint64_t)(v21 + 6) > v18)
        {
          v24 = (llvm::object *)operator new(0x38uLL);
          v25 = (uint64_t)v24;
          v26 = "missing variable name length";
          goto LABEL_21;
        }
        v41 = *v22;
        v21 = &v40[v41];
        if ((unint64_t)&v40[v41] > v18
          || (v42 = v41 - 1, *((_QWORD *)v13 + 1) = v40, *((_QWORD *)v13 + 2) = v42, v40[v42]))
        {
          v24 = (llvm::object *)operator new(0x38uLL);
          v25 = (uint64_t)v24;
          v26 = "invalid variable name";
          goto LABEL_21;
        }
        goto LABEL_26;
      case 0x48534148:
        v43 = v21 + 6;
        if ((unint64_t)(v21 + 6) > v18)
          goto LABEL_91;
        v21 += 38;
        if ((unint64_t)v21 > v18)
        {
          v24 = (llvm::object *)operator new(0x38uLL);
          v25 = (uint64_t)v24;
          v26 = "missing variable hash";
          goto LABEL_21;
        }
        *((_QWORD *)v13 + 3) = v43;
        *((_QWORD *)v13 + 4) = 32;
        goto LABEL_26;
      case 0x5446464F:
        if ((unint64_t)(v21 + 6) > v18)
          goto LABEL_91;
        if ((unint64_t)(v21 + 14) > v18)
        {
          v24 = (llvm::object *)operator new(0x38uLL);
          v25 = (uint64_t)v24;
          v26 = "missing variable public metadata offset";
          goto LABEL_21;
        }
        v38 = *(_QWORD *)(v21 + 6);
        *v20 = v38;
        v44 = (uint64_t *)(v21 + 22);
        if ((unint64_t)(v21 + 22) > v18)
        {
          v24 = (llvm::object *)operator new(0x38uLL);
          v25 = (uint64_t)v24;
          v26 = "missing variable private metadata offset";
          goto LABEL_21;
        }
        v37 = *(_QWORD *)(v21 + 14);
        *((_QWORD *)v13 + 6) = v37;
        v21 += 30;
        if ((unint64_t)v21 > v18)
        {
          v24 = (llvm::object *)operator new(0x38uLL);
          v25 = (uint64_t)v24;
          v26 = "missing variable module offset";
          goto LABEL_21;
        }
        v32 = *v44;
        *((_QWORD *)v13 + 7) = *v44;
        goto LABEL_26;
      case 0x4546464F:
        v45 = v21 + 6;
        if ((unint64_t)(v21 + 6) > v18)
          goto LABEL_91;
        v46 = v21 + 6;
        if ((unint64_t)(v21 + 6) >= v18)
        {
LABEL_58:
          if (*v46)
          {
            v24 = (llvm::object *)operator new(0x38uLL);
            v25 = (uint64_t)v24;
            v26 = "missing variable external offset path";
            goto LABEL_21;
          }
        }
        else
        {
          v47 = v30 - (_QWORD)v21;
          v46 = v21 + 6;
          while (*v46)
          {
            ++v46;
            if (!--v47)
            {
              v46 = v29;
              goto LABEL_58;
            }
          }
        }
        *((_QWORD *)v13 + 13) = v45;
        *((_QWORD *)v13 + 14) = v46 - v45;
        if ((unint64_t)(v46 + 9) > v18)
        {
          LODWORD(v64) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing variable public metadata offset", (unsigned int *)&v64, a3);
          goto LABEL_22;
        }
        v38 = *(_QWORD *)(v46 + 1);
        *v20 = v38;
        if ((unint64_t)(v46 + 17) > v18)
        {
          LODWORD(v64) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing variable private metadata offset", (unsigned int *)&v64, a3);
          goto LABEL_22;
        }
        v37 = *(_QWORD *)(v46 + 9);
        *((_QWORD *)v13 + 6) = v37;
        v21 = v46 + 25;
        if ((unint64_t)(v46 + 25) > v18)
        {
          LODWORD(v64) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing function variable offset", (unsigned int *)&v64, a3);
          goto LABEL_22;
        }
        v32 = *(_QWORD *)(v46 + 17);
        *((_QWORD *)v13 + 7) = v32;
        goto LABEL_26;
    }
    if (*(_DWORD *)v21 != 1397900630)
      break;
    if ((unint64_t)(v21 + 6) > v18)
      goto LABEL_91;
    if ((unint64_t)(v21 + 8) > v18)
    {
      v24 = (llvm::object *)operator new(0x38uLL);
      v25 = (uint64_t)v24;
      v26 = "missing variable AIR major version";
      goto LABEL_21;
    }
    v36 = *((unsigned __int16 *)v21 + 3);
    *((_WORD *)v13 + 32) = v36;
    if ((unint64_t)(v21 + 10) > v18)
    {
      LODWORD(v64) = 3;
      v58 = "missing variable AIR minor version";
LABEL_131:
      llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>(v58, (unsigned int *)&v64, a3);
      goto LABEL_22;
    }
    v35 = *((unsigned __int16 *)v21 + 4);
    *((_WORD *)v13 + 33) = v35;
    v48 = (unsigned __int16 *)(v21 + 12);
    if ((unint64_t)(v21 + 12) > v18)
    {
      LODWORD(v64) = 3;
      v58 = "missing variable Metal major version";
      goto LABEL_131;
    }
    v34 = *((unsigned __int16 *)v21 + 5);
    *((_WORD *)v13 + 34) = v34;
    v21 += 14;
    if ((unint64_t)v21 > v18)
    {
      LODWORD(v64) = 3;
      v58 = "missing variable Metal minor version";
      goto LABEL_131;
    }
    v33 = *v48;
    *((_WORD *)v13 + 35) = v33;
LABEL_26:
    v22 = (unsigned __int16 *)(v21 + 4);
    if ((unint64_t)(v21 + 4) > v18)
      goto LABEL_15;
  }
  switch(*(_DWORD *)v21)
  {
    case 0x5A53444D:
      v49 = v21 + 6;
      if ((unint64_t)(v21 + 6) > v18)
      {
LABEL_91:
        v24 = (llvm::object *)operator new(0x38uLL);
        v25 = (uint64_t)v24;
        v26 = "missing token data size";
        goto LABEL_21;
      }
      v21 += 14;
      if ((unint64_t)v21 > v18)
      {
        LODWORD(v64) = 3;
        llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing variable module size", (unsigned int *)&v64, a3);
        goto LABEL_22;
      }
      *((_QWORD *)v13 + 9) = *v49;
      goto LABEL_26;
    case 0x46464F53:
      v50 = v21 + 6;
      if ((unint64_t)(v21 + 6) > v18)
        goto LABEL_104;
      v21 += 14;
      if ((unint64_t)v21 > v18)
      {
        LODWORD(v64) = 3;
        llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing variable source offset", (unsigned int *)&v64, a3);
        goto LABEL_22;
      }
      *((_QWORD *)v13 + 10) = *v50;
      goto LABEL_26;
    case 0x544C4652:
      v51 = v21 + 6;
      if ((unint64_t)(v21 + 6) > v18)
      {
LABEL_104:
        LODWORD(v64) = 3;
        llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing token data size", (unsigned int *)&v64, a3);
        goto LABEL_22;
      }
      v21 += 14;
      if ((unint64_t)v21 > v18)
      {
        LODWORD(v64) = 3;
        v58 = "missing variable reflection offset";
        goto LABEL_131;
      }
      *((_QWORD *)v13 + 15) = *v51;
      goto LABEL_26;
    case 0x53494C41:
      v52 = v21 + 6;
      if ((unint64_t)(v21 + 6) > v18)
      {
        LODWORD(v64) = 3;
        llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing alias length", (unsigned int *)&v64, a3);
        goto LABEL_22;
      }
      v53 = v21 + 6;
      if ((unint64_t)(v21 + 6) >= v18)
      {
LABEL_84:
        if (*v53)
        {
          LODWORD(v64) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("invalid variable alias", (unsigned int *)&v64, a3);
          goto LABEL_22;
        }
      }
      else
      {
        v54 = v30 - (_QWORD)v21;
        v53 = v52;
        while (*v53)
        {
          ++v53;
          if (!--v54)
          {
            v53 = v29;
            goto LABEL_84;
          }
        }
      }
      *((_QWORD *)v13 + 11) = v52;
      *((_QWORD *)v13 + 12) = v53 - v52;
      v55 = v53 + 1;
      v56 = v53 + 1;
      if ((unint64_t)(v53 + 1) >= v18)
      {
LABEL_24:
        if (*v56)
        {
          LODWORD(v64) = 3;
          llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("invalid variable name", (unsigned int *)&v64, a3);
          goto LABEL_22;
        }
      }
      else
      {
        v57 = v31 - (_QWORD)v53;
        v56 = v55;
        while (*v56)
        {
          ++v56;
          if (!--v57)
          {
            v56 = v29;
            goto LABEL_24;
          }
        }
      }
      *((_QWORD *)v13 + 1) = v55;
      *((_QWORD *)v13 + 2) = v56 - v55;
      v21 = v56 + 1;
      goto LABEL_26;
  }
  if (*(_DWORD *)v21 != 1413762629)
  {
    v39 = (unint64_t)(v21 + 6);
    if (v39 > v18)
      goto LABEL_104;
    v21 = (_BYTE *)(v39 + *v22);
    if ((unint64_t)v21 > v18)
    {
      LODWORD(v64) = 3;
      llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing token data", (unsigned int *)&v64, a3);
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  if (!*((_QWORD *)v13 + 2))
  {
    v24 = (llvm::object *)operator new(0x38uLL);
    v25 = (uint64_t)v24;
    v26 = "variable name required";
    goto LABEL_21;
  }
  if (!*((_QWORD *)v13 + 4))
  {
    v24 = (llvm::object *)operator new(0x38uLL);
    v25 = (uint64_t)v24;
    v26 = "variable hash required";
    goto LABEL_21;
  }
  if (v38)
  {
    v24 = (llvm::object *)operator new(0x38uLL);
    v25 = (uint64_t)v24;
    v26 = "variable public metadata offset corrupted";
    goto LABEL_21;
  }
  if (v37 == -1)
  {
    LODWORD(v64) = 3;
    llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("variable private metadata offset required", (unsigned int *)&v64, a3);
    goto LABEL_22;
  }
  if ((*((_WORD *)this + 35) & 1) == 0 && v32 == -1)
  {
    LODWORD(v64) = 3;
    llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("variable module offset required", (unsigned int *)&v64, a3);
    goto LABEL_22;
  }
  if (v36 == 0xFFFF)
  {
    LODWORD(v64) = 3;
    v58 = "variable AIR major version required";
    goto LABEL_131;
  }
  if (v35 == 0xFFFF)
  {
    LODWORD(v64) = 3;
    v58 = "variable AIR minor version required";
    goto LABEL_131;
  }
  if (v34)
  {
    LODWORD(v64) = 3;
    v58 = "variable Metal major version corrupted";
    goto LABEL_131;
  }
  if (v33)
  {
    LODWORD(v64) = 3;
    v58 = "variable Metal minor version corrupted";
    goto LABEL_131;
  }
  v59 = *((_QWORD *)this + 64);
  v60 = 8 * v63;
  v61 = *(void **)(v59 + v60);
  *(_QWORD *)(v59 + v60) = v13;
  if (v61)
    operator delete(v61);
  *a3 = 0;
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolFlags@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;

  v3 = (uint64_t)(result[34] - result[33]) >> 3;
  if (a2 >= v3 + ((uint64_t)(result[65] - result[64]) >> 3))
    v4 = 1;
  else
    v4 = 66;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v4 | ((a2 < v3) << 11);
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::symbol_begin(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::symbol_end(llvm::object::MetalLibObjectFile *this)
{
  return ((*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3)
       + ((*((_QWORD *)this + 34) - *((_QWORD *)this + 33)) >> 3)
       + ((*((_QWORD *)this + 68) - *((_QWORD *)this + 67)) >> 3);
}

void llvm::object::MetalLibObjectFile::getSymbolName(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a2;
  v6 = *((_QWORD *)this + 33);
  v7 = (*((_QWORD *)this + 34) - v6) >> 3;
  v8 = a2 - v7;
  if (a2 >= v7)
  {
    v12 = *((_QWORD *)this + 64);
    v13 = v7 + ((*((_QWORD *)this + 65) - v12) >> 3);
    v14 = a2 - v13;
    if (a2 >= v13)
    {
      v16 = *((_QWORD *)this + 67);
      if (!*(_QWORD *)(v16 + 8 * v14))
      {
        llvm::object::MetalLibObjectFile::materializeImportedSymbolNo(this, a2 - v13, &v19);
        v18 = v19;
        if (v19)
          goto LABEL_17;
        v16 = *((_QWORD *)this + 67);
        v14 = v5
            - (((uint64_t)(*((_QWORD *)this + 34) - *((_QWORD *)this + 33)) >> 3)
             + ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3));
      }
      v17 = *(_QWORD *)(v16 + 8 * v14);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_OWORD *)a3 = *(_OWORD *)(v17 + 8);
      return;
    }
    if (!*(_QWORD *)(v12 + 8 * v8))
    {
      llvm::object::MetalLibObjectFile::materializeVariableNo(this, a2 - v7, &v19);
      v18 = v19;
      if (v19)
        goto LABEL_17;
      v12 = *((_QWORD *)this + 64);
      v8 = v5 - ((uint64_t)(*((_QWORD *)this + 34) - *((_QWORD *)this + 33)) >> 3);
    }
    v9 = *(_QWORD *)(v12 + 8 * v8);
    v10 = (_OWORD *)(v9 + 88);
    v11 = *(_QWORD *)(v9 + 96);
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(v6 + 8 * a2);
  if (!v9)
  {
    llvm::object::MetalLibObjectFile::materializeFunctionNo(this, a2, &v19);
    v18 = v19;
    if (!v19)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 33) + 8 * v5);
      goto LABEL_3;
    }
LABEL_17:
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    return;
  }
LABEL_3:
  v10 = (_OWORD *)(v9 + 104);
  v11 = *(_QWORD *)(v9 + 112);
LABEL_7:
  v15 = (_OWORD *)(v9 + 8);
  if (v11)
    v15 = v10;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_OWORD *)a3 = *v15;
}

void llvm::object::MetalLibObjectFile::materializeImportedSymbolNo(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t Data;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _DWORD *v16;
  char v17;
  unsigned int v18;
  _DWORD *v19;
  unint64_t v20;
  char *v21;
  unsigned int *v22;
  llvm::object *v23;
  uint64_t v24;
  const char *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  _UNKNOWN **v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  const char *v37;
  unsigned int v38;
  int v39;
  __int16 v40;

  v36 = a2;
  Data = llvm::object::Binary::getData(this);
  if (v6 >= *((_QWORD *)this + 25) + 4)
    v8 = *((_QWORD *)this + 25) + 4;
  else
    v8 = v6;
  v9 = llvm::object::Binary::getData(this);
  v11 = v10;
  llvm::object::Binary::getData(this);
  if (v11 >= v12)
    v13 = v12;
  else
    v13 = v11;
  v14 = operator new(0x18uLL);
  v14[1] = 0;
  v15 = v14 + 1;
  *v14 = 0;
  v14[2] = 0;
  v16 = llvm::object::MetalLibObjectFile::SmallLRUCache<unsigned int,unsigned char const*,4u,llvm::object::MetalLibObjectFile::SmallLRUCacheEntry<unsigned int,unsigned char const*>>::lookup((_DWORD *)this + 228, &v36);
  if ((_DWORD *)((char *)this + 976) == v16)
  {
    v18 = 0;
    v19 = (_DWORD *)(Data + v8);
    v20 = v9 + v13;
    if (a2)
      goto LABEL_16;
  }
  else
  {
    v18 = v16[2];
    v19 = *(_DWORD **)v16;
    v20 = v9 + v13;
    if (v18 != a2)
    {
LABEL_16:
      do
      {
        v22 = *(unsigned int **)(*((_QWORD *)this + 67) + 8 * v18);
        if (!v22)
        {
          v22 = v19;
          if ((unint64_t)(v19 + 1) > v20)
            goto LABEL_20;
        }
        v19 = (_DWORD *)((char *)v19 + *v22);
      }
      while (a2 != ++v18);
    }
  }
  if (!v17)
  {
    v37 = (const char *)v19;
    v38 = v36;
    v39 = 0;
    llvm::object::MetalLibObjectFile::SmallLRUCache<unsigned int,unsigned char const*,4u,llvm::object::MetalLibObjectFile::SmallLRUCacheEntry<unsigned int,unsigned char const*>>::insert((_DWORD *)this + 228, (uint64_t *)&v37);
    *v15 = 0;
    v14[2] = 0;
    v21 = (char *)(v19 + 1);
    if ((unint64_t)(v19 + 1) <= v20)
      goto LABEL_21;
LABEL_20:
    v23 = (llvm::object *)operator new(0x38uLL);
    v24 = (uint64_t)v23;
    v25 = "missing imported symbol data size";
LABEL_23:
    v37 = v25;
    v40 = 259;
    v28 = llvm::object::object_category(v23);
    llvm::StringError::StringError(v24, (llvm::Twine *)&v37, 3, (uint64_t)v28);
    *a3 = v24;
    operator delete(v14);
    return;
  }
  *v15 = 0;
  v14[2] = 0;
  v21 = (char *)(v19 + 1);
  if ((unint64_t)(v19 + 1) > v20)
    goto LABEL_20;
LABEL_21:
  v27 = *v19;
  v26 = (unsigned __int16 *)(v19 + 2);
  *(_DWORD *)v14 = v27;
  if ((unint64_t)v26 > v20)
  {
LABEL_22:
    v23 = (llvm::object *)operator new(0x38uLL);
    v24 = (uint64_t)v23;
    v25 = "missing imported symbol token";
    goto LABEL_23;
  }
  while (*(_DWORD *)v21 == 1162690894)
  {
    v30 = v21 + 6;
    if ((unint64_t)(v21 + 6) > v20)
    {
      v23 = (llvm::object *)operator new(0x38uLL);
      v24 = (uint64_t)v23;
      v25 = "missing imported symbol name length";
      goto LABEL_23;
    }
    v31 = *v26;
    v21 = &v30[v31];
    if ((unint64_t)&v30[v31] > v20 || (v32 = v31 - 1, v14[1] = v30, v14[2] = v32, v30[v32]))
    {
      v23 = (llvm::object *)operator new(0x38uLL);
      v24 = (uint64_t)v23;
      v25 = "invalid imported symbol name";
      goto LABEL_23;
    }
LABEL_25:
    v26 = (unsigned __int16 *)(v21 + 4);
    if ((unint64_t)(v21 + 4) > v20)
      goto LABEL_22;
  }
  if (*(_DWORD *)v21 != 1413762629)
  {
    v29 = v21 + 6;
    if ((unint64_t)v29 > v20)
    {
      v23 = (llvm::object *)operator new(0x38uLL);
      v24 = (uint64_t)v23;
      v25 = "missing token data size";
      goto LABEL_23;
    }
    v21 = &v29[*v26];
    if ((unint64_t)v21 > v20)
    {
      v23 = (llvm::object *)operator new(0x38uLL);
      v24 = (uint64_t)v23;
      v25 = "missing token data";
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  if (!v14[2])
  {
    v23 = (llvm::object *)operator new(0x38uLL);
    v24 = (uint64_t)v23;
    v25 = "imported symbol name required";
    goto LABEL_23;
  }
  v33 = *((_QWORD *)this + 67);
  v34 = 8 * v36;
  v35 = *(void **)(v33 + v34);
  *(_QWORD *)(v33 + v34) = v14;
  if (v35)
    operator delete(v35);
  *a3 = 0;
}

uint64_t llvm::object::MetalLibObjectFile::getSymbolValueImpl(llvm::object::MetalLibObjectFile *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = a2;
  v4 = *((_QWORD *)this + 33);
  v5 = (*((_QWORD *)this + 34) - v4) >> 3;
  v6 = a2 - v5;
  if (a2 < v5)
  {
    v7 = *(_QWORD *)(v4 + 8 * a2);
    if (v7)
    {
LABEL_8:
      v10 = *(_QWORD *)(v7 + 8);
      return v10 - llvm::object::Binary::getData(this) - 10;
    }
    llvm::object::MetalLibObjectFile::materializeFunctionNo(this, a2, (uint64_t *)&v12);
    v8 = v12;
    if (!v12)
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 33) + 8 * v3);
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  v9 = *((_QWORD *)this + 64);
  if (a2 < v5 + ((*((_QWORD *)this + 65) - v9) >> 3))
  {
    if (!*(_QWORD *)(v9 + 8 * v6))
    {
      llvm::object::MetalLibObjectFile::materializeVariableNo(this, a2 - v5, (uint64_t *)&v12);
      v8 = v12;
      if (v12)
      {
LABEL_10:
        v12 = 0;
        v13 = v8;
        llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v13, &v14);
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        if (v12)
          (*(void (**)(_QWORD *))(*v12 + 8))(v12);
        return 0;
      }
      v9 = *((_QWORD *)this + 64);
      v6 = v3 - ((uint64_t)(*((_QWORD *)this + 34) - *((_QWORD *)this + 33)) >> 3);
    }
    v7 = *(_QWORD *)(v9 + 8 * v6);
    goto LABEL_8;
  }
  return 0;
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolType@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  _BOOL4 v4;

  v3 = (uint64_t)(result[34] - result[33]) >> 3;
  if (a2 >= v3)
  {
    v4 = a2 < v3 + ((uint64_t)(result[65] - result[64]) >> 3);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = 2 * v4;
  }
  else
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = 5;
  }
  return result;
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolSection@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = (uint64_t)(result[34] - result[33]) >> 3;
  if (a2 >= v3)
  {
    v4 = v3 + ((uint64_t)(result[65] - result[64]) >> 3);
    if (a2 >= v4)
    {
      v5 = 10;
      if (a2 < v4 + ((uint64_t)(result[68] - result[67]) >> 3))
        v5 = 7;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = result;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = 6;
      *(_QWORD *)(a3 + 8) = result;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = result;
  }
  return result;
}

__n128 llvm::object::MetalLibObjectFile::getTargetTriple@<Q0>(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  __n128 *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  size_t v21;
  std::string::size_type size;
  __n128 *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  uint64_t i;
  uint64_t v28;
  void *v29;
  void *v30;
  __n128 result;
  __n128 *v32;
  __int128 v33;
  __int16 v34;
  __int128 v35;
  const char *v36;
  uint64_t v37;
  void *__p;
  char v39;
  char v40;
  std::string __str;
  __n128 v42;
  unint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = (std::string *)((char *)this + 608);
  v5 = (__n128 *)((char *)this + 632);
  if (!*((_DWORD *)this + 158))
  {
    v6 = *((unsigned __int16 *)this + 32);
    if (v6 >= 2)
    {
      if (v6 > 3
        || (v24 = *((unsigned __int16 *)this + 33), v24 >= 2) && (v24 != 2 || *((unsigned __int16 *)this + 34) > 5u))
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181233280;
        if ((*((_WORD *)this + 35) & 0x100) != 0)
          v19 = "air64-apple";
        else
          v19 = "air32-apple";
        v20 = "";
        if ((*((_WORD *)this + 35) & 0x100) == 0)
          v20 = "";
        v21 = v20 - v19;
        if ((unint64_t)(v20 - v19) < 0x21)
        {
          size = 0;
          v23 = &v42;
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__str, &v42, v20 - v19, 1);
          size = __str.__r_.__value_.__l.__size_;
          v23 = (__n128 *)__str.__r_.__value_.__r.__words[0];
        }
        memcpy((char *)v23 + size, v19, v21);
        __str.__r_.__value_.__l.__size_ += v21;
        __asm { BR              X11 }
      }
    }
    v32 = (__n128 *)((char *)this + 632);
    v7 = *((_QWORD *)this + 43) - *((_QWORD *)this + 42);
    if ((v7 & 0x3FFFFFFFCLL) != 0)
    {
      v8 = 0;
      v9 = (v7 >> 2);
      do
      {
        if (*(_DWORD *)(*((_QWORD *)this + 42) + 4 * v8) == -1)
        {
          llvm::object::MetalLibObjectFile::materializeModuleForSymbolNo<llvm::metallib::MetalLibFunction,llvm::metallib::MetalLibVariable>((char **)this, v8, (uint64_t *)this + 33, (uint64_t *)this + 64, (void (*)(_QWORD *))llvm::object::MetalLibObjectFile::materializeFunctionNo, 0, (_QWORD *)this + 42, (_DWORD **)this + 45, (uint64_t *)&__p);
          v10 = __p;
          if (__p)
          {
            __p = 0;
            *(_QWORD *)&v33 = v10;
            llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v33, (uint64_t *)&__str);
            if ((_QWORD)v33)
              (*(void (**)(_QWORD))(*(_QWORD *)v33 + 8))(v33);
            if (__p)
              (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
          }
        }
        ++v8;
      }
      while (v9 != v8);
    }
    v11 = *((_QWORD *)this + 46) - *((_QWORD *)this + 45);
    if ((v11 & 0x3FFFFFFFCLL) != 0)
    {
      v12 = 0;
      v13 = (v11 >> 2);
      do
      {
        if (*(_DWORD *)(*((_QWORD *)this + 45) + 4 * v12) == -1)
        {
          llvm::object::MetalLibObjectFile::materializeModuleForSymbolNo<llvm::metallib::MetalLibVariable,llvm::metallib::MetalLibFunction>((char **)this, v12, (uint64_t *)this + 64, (uint64_t *)this + 33, (void (*)(_QWORD *))llvm::object::MetalLibObjectFile::materializeVariableNo, 0, (_QWORD *)this + 45, (_DWORD **)this + 42, (uint64_t *)&__p);
          v14 = __p;
          if (__p)
          {
            __p = 0;
            *(_QWORD *)&v33 = v14;
            llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v33, (uint64_t *)&__str);
            if ((_QWORD)v33)
              (*(void (**)(_QWORD))(*(_QWORD *)v33 + 8))(v33);
            if (__p)
              (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
          }
        }
        ++v12;
      }
      while (v13 != v12);
    }
    v15 = (char *)*((_QWORD *)this + 48);
    v16 = (char *)*((_QWORD *)this + 49);
    v5 = v32;
    if (((v16 - v15) & 0x7FFFFFFF8) != 0)
    {
      v17 = ((unint64_t)(v16 - v15) >> 3);
      v18 = *(_QWORD *)v15;
      if (v18)
      {
        v35 = *(_OWORD *)(v18 + 16);
        v36 = "";
        v37 = 0;
        llvm::getBitcodeTargetTriple((uint64_t)&v35, (uint64_t)&__p);
        if ((v40 & 1) != 0)
        {
          v25 = __p;
          __p = 0;
          *(_QWORD *)&v33 = v25;
          llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v33, (uint64_t *)&__str);
          if ((_QWORD)v33)
            (*(void (**)(_QWORD))(*(_QWORD *)v33 + 8))(v33);
        }
        else
        {
          v34 = 260;
          *(_QWORD *)&v33 = &__p;
          llvm::Triple::Triple((llvm::Triple *)&__str, (const llvm::Twine *)&v33);
          std::string::operator=(v4, &__str);
          *v32 = v42;
          v32[1].n128_u64[0] = v43;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        if ((v40 & 1) != 0)
        {
          v26 = __p;
          __p = 0;
          if (v26)
            (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
        }
        else if (v39 < 0)
        {
          operator delete(__p);
        }
      }
      if (v17 != 1)
      {
        for (i = 1; i != v17; ++i)
        {
          v28 = *(_QWORD *)(*((_QWORD *)this + 48) + 8 * i);
          if (v28)
          {
            v35 = *(_OWORD *)(v28 + 16);
            v36 = "";
            v37 = 0;
            llvm::getBitcodeTargetTriple((uint64_t)&v35, (uint64_t)&__p);
            if ((v40 & 1) != 0)
            {
              v29 = __p;
              __p = 0;
              *(_QWORD *)&v33 = v29;
              llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v33, (uint64_t *)&__str);
              if ((_QWORD)v33)
                (*(void (**)(_QWORD))(*(_QWORD *)v33 + 8))(v33);
            }
            else
            {
              v34 = 260;
              *(_QWORD *)&v33 = &__p;
              llvm::Triple::Triple((llvm::Triple *)&__str, (const llvm::Twine *)&v33);
              if (v32->n128_u32[0] != v42.n128_u32[0]
                || *(_QWORD *)((char *)this + 636) != *(unint64_t *)((char *)v42.n128_u64 + 4)
                || *((_DWORD *)this + 161) != v42.n128_u32[3]
                || *((_QWORD *)this + 81) != v43)
              {
                if (*((char *)this + 631) < 0)
                  operator delete(v4->__r_.__value_.__l.__data_);
                *(_OWORD *)&v4->__r_.__value_.__r.__words[2] = 0u;
                *(_OWORD *)&v4[1].__r_.__value_.__r.__words[1] = 0u;
                *(_OWORD *)&v4->__r_.__value_.__l.__data_ = 0u;
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            if ((v40 & 1) != 0)
            {
              v30 = __p;
              __p = 0;
              if (v30)
                (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
            }
            else if (v39 < 0)
            {
              operator delete(__p);
            }
          }
        }
      }
      v15 = (char *)*((_QWORD *)this + 48);
      v16 = (char *)*((_QWORD *)this + 49);
    }
    if (v15 == v16)
      __asm { BR              X10 }
  }
  if (*((char *)this + 631) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 76), *((_QWORD *)this + 77));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
  }
  result = *v5;
  *(__n128 *)(a2 + 24) = *v5;
  *(_QWORD *)(a2 + 40) = v5[1].n128_u64[0];
  return result;
}

_QWORD *llvm::SmallString<32u>::operator+=(_QWORD *a1, void *__src, size_t __n)
{
  uint64_t v6;
  unint64_t v7;

  v6 = a1[1];
  v7 = v6 + __n;
  if (a1[2] < v7)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v7, 1);
    v6 = a1[1];
  }
  if (__n)
  {
    memcpy((void *)(*a1 + v6), __src, __n);
    v6 = a1[1];
  }
  a1[1] = v6 + __n;
  return a1;
}

uint64_t llvm::object::MetalLibObjectFile::moveSectionNext(uint64_t a1, unsigned int *a2)
{
  return ((uint64_t (*)(void))((char *)sub_180C0D404 + 4 * byte_181267766[*a2]))();
}

_QWORD *sub_180C0D404(_QWORD *result, _DWORD *a2)
{
  *a2 = 1;
  if (!result[14])
  {
    *a2 = 2;
    if (!result[16])
    {
      *a2 = 3;
      if (!result[18])
      {
        *a2 = 4;
        if (!result[20])
        {
          *a2 = 5;
          if (!result[22])
          {
            *a2 = 6;
            if (!result[24])
            {
              *a2 = 7;
              if (!result[26])
              {
                *a2 = 8;
                if (!result[28])
                {
                  *a2 = 9;
                  if (!result[30])
                    *a2 = 10;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

llvm::object *llvm::object::MetalLibObjectFile::getSectionName@<X0>(llvm::object *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::error_code v5;

  switch(a2)
  {
    case 0:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "FUNCTION_LIST";
      *(_QWORD *)(a3 + 8) = 13;
      break;
    case 1:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "PUBLIC_METADATA";
      *(_QWORD *)(a3 + 8) = 15;
      break;
    case 2:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "PRIVATE_METADATA";
      *(_QWORD *)(a3 + 8) = 16;
      break;
    case 3:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "MODULE_LIST";
      *(_QWORD *)(a3 + 8) = 11;
      break;
    case 4:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "SOURCES";
      *(_QWORD *)(a3 + 8) = 7;
      break;
    case 5:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "DYNAMIC_HEADER";
      *(_QWORD *)(a3 + 8) = 14;
      break;
    case 6:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "VARIABLE_LIST";
      *(_QWORD *)(a3 + 8) = 13;
      break;
    case 7:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "IMPORTED_SYMBOL_LIST";
      *(_QWORD *)(a3 + 8) = 20;
      break;
    case 8:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "REFLECTION_LIST";
      *(_QWORD *)(a3 + 8) = 15;
      break;
    case 9:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = "SCRIPT_LIST";
      *(_QWORD *)(a3 + 8) = 11;
      break;
    default:
      *(_QWORD *)&v5.__val_ = llvm::object::object_category(result);
      result = (llvm::object *)llvm::errorCodeToError((llvm *)6, v5, &v4);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v4;
      break;
  }
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::getSectionAddress(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_180C0D6E8 + 4 * byte_18126777A[a2]))();
}

uint64_t sub_180C0D6E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_180C0D6F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_180C0D700(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t sub_180C0D70C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

uint64_t sub_180C0D718(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t sub_180C0D724(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

uint64_t sub_180C0D730(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184);
}

uint64_t sub_180C0D73C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200);
}

uint64_t sub_180C0D748(uint64_t a1)
{
  return *(_QWORD *)(a1 + 216);
}

uint64_t sub_180C0D754(uint64_t a1)
{
  return *(_QWORD *)(a1 + 232);
}

uint64_t llvm::object::MetalLibObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MetalLibObjectFile::getSectionSize(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_180C0D784 + 4 * byte_181267784[a2]))();
}

uint64_t sub_180C0D784(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_180C0D790(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_180C0D79C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t sub_180C0D7A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

uint64_t sub_180C0D7B4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

uint64_t sub_180C0D7C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176);
}

uint64_t sub_180C0D7CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

uint64_t sub_180C0D7D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 208);
}

uint64_t sub_180C0D7E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

uint64_t sub_180C0D7F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240);
}

void llvm::object::MetalLibObjectFile::getSectionContents(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_180C0D82C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  llvm::object::Binary *v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  result = llvm::object::Binary::getData(v13);
  v16 = *((_QWORD *)v13 + 12);
  if (v15 >= *((_QWORD *)v13 + 11))
    v17 = *((_QWORD *)v13 + 11);
  else
    v17 = v15;
  v18 = result + v17;
  v19 = v15 - v17;
  if (v19 < v16)
    v16 = v19;
  *(_BYTE *)(v12 + 16) &= ~1u;
  *(_QWORD *)v12 = v18;
  *(_QWORD *)(v12 + 8) = v16;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::MetalLibObjectFile::isSectionText(uint64_t a1, int a2)
{
  return a2 == 3;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionData()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionBSS()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionVirtual()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::section_begin(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::section_end(llvm::object::MetalLibObjectFile *this)
{
  return 10;
}

uint64_t llvm::object::MetalLibObjectFile::getBytesInAddress(llvm::object::MetalLibObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::MetalLibObjectFile *))(*(_QWORD *)this + 392))(this) == 45)
    return 4;
  else
    return 8;
}

const char *llvm::object::MetalLibObjectFile::getFileFormatName(llvm::object::MetalLibObjectFile *this)
{
  return "MetalLib";
}

uint64_t llvm::object::MetalLibObjectFile::isRelocatableObject(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::getUUID(llvm::object::MetalLibObjectFile *this)
{
  int *Data;
  size_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*((_QWORD *)this + 32))
    return *((_QWORD *)this + 31);
  if (*((_BYTE *)this + 672))
    return (uint64_t)this + 656;
  Data = (int *)llvm::object::Binary::getData(this);
  v5 = llvm::MD5::hash(Data, v4);
  v6 = *((unsigned __int8 *)this + 672);
  *((_QWORD *)this + 82) = v5;
  *((_QWORD *)this + 83) = v7;
  if (v6)
    return (uint64_t)this + 656;
  *((_BYTE *)this + 672) = 1;
  return (uint64_t)this + 656;
}

uint64_t llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::object *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _UNKNOWN **v10;
  uint64_t result;
  _BYTE *v12;
  char v13;
  char v14;

  v6 = (llvm::object *)operator new(0x38uLL);
  v7 = (uint64_t)v6;
  v8 = 1;
  v14 = 1;
  if (*a1)
  {
    v12 = a1;
    v8 = 3;
  }
  v13 = v8;
  v9 = *a2;
  v10 = llvm::object::object_category(v6);
  result = llvm::StringError::StringError(v7, (llvm::Twine *)&v12, v9, (uint64_t)v10);
  *a3 = v7;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseExtensionInfo(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, llvm::object **a8)
{
  unsigned __int16 *v9;
  unint64_t v10;
  const char *v11;
  int v12;
  uint64_t *v13;
  const char *v14;
  llvm::object *v15;
  _UNKNOWN **v16;
  uint64_t result;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;

  v9 = (unsigned __int16 *)*a2;
  v10 = *a2 + 2;
  if (v10 > a3)
  {
    v24 = 1283;
    v11 = "missing ";
LABEL_7:
    v21 = v11;
    v22 = a4;
    v23 = a5;
    v14 = " token data size";
    goto LABEL_8;
  }
  v12 = *v9;
  *a2 = v10;
  if (v12 != 16)
  {
    v24 = 1283;
    v11 = "bad ";
    goto LABEL_7;
  }
  v13 = (uint64_t *)(v9 + 5);
  if ((unint64_t)(v9 + 5) > a3)
  {
    v24 = 1283;
    v21 = "missing ";
    v22 = a4;
    v23 = a5;
    v14 = " section offset";
LABEL_8:
    v25[0] = &v21;
    v25[2] = v14;
    v26 = 770;
    v15 = (llvm::object *)operator new(0x38uLL);
    v16 = llvm::object::object_category(v15);
    llvm::StringError::StringError((uint64_t)v15, (llvm::Twine *)v25, 3, (uint64_t)v16);
    result = 0;
    *a8 = v15;
    return result;
  }
  v18 = *(_QWORD *)(v9 + 1);
  *a2 = (unint64_t)v13;
  *a6 = v18;
  v19 = v9 + 9;
  if ((unint64_t)v19 > a3)
  {
    v24 = 1283;
    v21 = "missing ";
    v22 = a4;
    v23 = a5;
    v14 = " section size";
    goto LABEL_8;
  }
  v20 = *v13;
  *a2 = (unint64_t)v19;
  *a7 = v20;
  return 1;
}

BOOL llvm::object::MetalLibObjectFile::skipExtensionToken(uint64_t a1, _QWORD *a2, unint64_t a3, llvm::object **a4)
{
  unint64_t v5;
  llvm::object *v7;
  _UNKNOWN **v8;
  const char *v10;
  __int16 v11;

  v5 = *a2 + 2;
  if (v5 > a3)
  {
    v7 = (llvm::object *)operator new(0x38uLL);
    v10 = "missing token data size";
    v11 = 259;
    v8 = llvm::object::object_category(v7);
    llvm::StringError::StringError((uint64_t)v7, (llvm::Twine *)&v10, 3, (uint64_t)v8);
    *a4 = v7;
  }
  else
  {
    *a2 = v5 + *(unsigned __int16 *)*a2;
  }
  return v5 <= a3;
}

_DWORD *llvm::object::MetalLibObjectFile::SmallLRUCache<unsigned int,unsigned char const*,4u,llvm::object::MetalLibObjectFile::SmallLRUCacheEntry<unsigned int,unsigned char const*>>::lookup(_DWORD *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v17;

  v2 = *a2;
  v3 = a1[3];
  if (!v3)
  {
    v8 = 4;
    v5 = 4;
    v9 = a1[7];
    if (v9)
      goto LABEL_8;
LABEL_11:
    v11 = a1[3];
    v12 = a1[11];
    if (!v12)
      goto LABEL_29;
    goto LABEL_21;
  }
  v4 = a1[2];
  v5 = 4;
  v6 = 4 * (v4 >= v2);
  v7 = v4 == v2;
  if (v4 == v2)
    v8 = 0;
  else
    v8 = 4;
  if (!v7)
    v5 = v6;
  v9 = a1[7];
  if (!v9)
    goto LABEL_11;
LABEL_8:
  v10 = a1[6];
  if (v10 == v2)
  {
    v8 = 1;
  }
  else if (v10 < v2 && (v5 || a1[2] < v10))
  {
    v5 = 1;
  }
  if (v3 <= v9)
    v11 = v9;
  else
    v11 = a1[3];
  v12 = a1[11];
  if (v12)
  {
LABEL_21:
    v13 = a1[10];
    if (v13 == v2)
    {
      v8 = 2;
    }
    else if (v13 < v2 && (v5 == 4 || a1[4 * v5 + 2] < v13))
    {
      v5 = 2;
    }
    if (v11 <= v12)
      v11 = v12;
  }
LABEL_29:
  v14 = a1[15];
  if (v14)
  {
    v15 = a1[14];
    if (v15 == v2)
    {
      v8 = 3;
    }
    else if (v15 < v2 && (v5 == 4 || a1[4 * v5 + 2] < v15))
    {
      v5 = 3;
    }
    if (v11 <= v14)
      v11 = a1[15];
  }
  if (v8 == 4)
    return &a1[4 * v5];
  v17 = v11 + 1;
  if (v11 == -1)
  {
    a1[3] = v3 != 0;
    a1[7] = v9 != 0;
    a1[11] = v12 != 0;
    a1[15] = v14 != 0;
    v17 = 2;
  }
  a1[4 * v8 + 3] = v17;
  return &a1[4 * v8];
}

_DWORD *llvm::object::MetalLibObjectFile::SmallLRUCache<unsigned int,unsigned char const*,4u,llvm::object::MetalLibObjectFile::SmallLRUCacheEntry<unsigned int,unsigned char const*>>::insert(_DWORD *a1, uint64_t *a2)
{
  int v2;
  unsigned int v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _DWORD *result;

  v2 = *((_DWORD *)a2 + 2);
  v3 = a1[3];
  if (!v3)
  {
    v10 = 0;
    v8 = 4;
    v9 = 4;
    v11 = a1[7];
    if (v11)
      goto LABEL_6;
LABEL_9:
    v10 = 1;
    v12 = a1[3];
    v13 = a1[11];
    if (v13)
      goto LABEL_20;
LABEL_10:
    v10 = 2;
    v14 = a1[15];
    if (v14)
      goto LABEL_28;
LABEL_11:
    v10 = 3;
    v15 = *a2;
    v16 = __CFADD__(v12, 1);
    v17 = v12 + 1;
    if (!v16)
      goto LABEL_38;
LABEL_37:
    a1[3] = v3 != 0;
    a1[7] = v11 != 0;
    a1[11] = v13 != 0;
    a1[15] = v14 != 0;
    v17 = 2;
    goto LABEL_38;
  }
  v4 = a1[2];
  v5 = v4 == v2;
  v6 = v4 != v2;
  v7 = v5;
  v8 = 4 * v6;
  v9 = 4 * v7;
  v10 = 4;
  v11 = a1[7];
  if (!v11)
    goto LABEL_9;
LABEL_6:
  if (a1[6] == v2)
  {
    v8 = 1;
  }
  else if (v9 || a1[3] > v11)
  {
    v9 = 1;
  }
  if (v3 <= v11)
    v12 = v11;
  else
    v12 = a1[3];
  v13 = a1[11];
  if (!v13)
    goto LABEL_10;
LABEL_20:
  if (a1[10] == v2)
  {
    v8 = 2;
  }
  else if (v9 == 4 || a1[4 * v9 + 3] > v13)
  {
    v9 = 2;
  }
  if (v12 <= v13)
    v12 = v13;
  v14 = a1[15];
  if (!v14)
    goto LABEL_11;
LABEL_28:
  if (a1[14] == v2)
  {
    v8 = 3;
  }
  else if (v9 == 4 || a1[4 * v9 + 3] > v14)
  {
    v9 = 3;
  }
  if (v12 <= v14)
    v12 = v14;
  v15 = *a2;
  v16 = __CFADD__(v12, 1);
  v17 = v12 + 1;
  if (v16)
    goto LABEL_37;
LABEL_38:
  if (v10 == 4)
    v10 = v9;
  if (v8 == 4)
    v8 = v10;
  result = &a1[4 * v8];
  *(_QWORD *)result = v15;
  result[2] = v2;
  result[3] = v17;
  return result;
}

void llvm::object::MetalLibObjectFile::materializeModuleForSymbolNo<llvm::metallib::MetalLibFunction,llvm::metallib::MetalLibVariable>(char **this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void (*a5)(_QWORD *)@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, _DWORD **a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t Data;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _OWORD *v42;
  void *v43;
  llvm::object *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _UNKNOWN **v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  unsigned int v60[8];
  __int16 v61;

  v15 = a2;
  v16 = *a3;
  v17 = *(_QWORD *)(*a3 + 8 * a2);
  if (!v17)
  {
    v22 = (char **)((char *)this + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *))(*v22 + a5);
    a5(v22);
    if (*a9)
      return;
    v16 = *a3;
    v17 = *(_QWORD *)(*a3 + 8 * v15);
    v18 = a3[1] - *a3;
    if ((v18 & 0x7FFFFFFF8) != 0)
      goto LABEL_3;
LABEL_14:
    v23 = *a4;
    v24 = a4[1] - *a4;
    if ((v24 & 0x7FFFFFFF8) != 0)
    {
      v25 = *a8;
      v26 = (v24 >> 3);
      while (!*(_QWORD *)v23 || *v25 == -1 || *(_QWORD *)(*(_QWORD *)v23 + 56) != *(_QWORD *)(v17 + 64))
      {
        v23 += 8;
        ++v25;
        if (!--v26)
          goto LABEL_21;
      }
      *(_DWORD *)(*a7 + 4 * v15) = *v25;
      *a9 = 0;
      return;
    }
LABEL_21:
    Data = llvm::object::Binary::getData((llvm::object::Binary *)this);
    v29 = this[17];
    if (v28 < v29)
      v29 = v28;
    v30 = (unint64_t)&v29[Data + *(_QWORD *)(v17 + 64)];
    v31 = llvm::object::Binary::getData((llvm::object::Binary *)this);
    v33 = v32;
    llvm::object::Binary::getData((llvm::object::Binary *)this);
    if (v33 >= v34)
      v35 = v34;
    else
      v35 = v33;
    v36 = v31 + v35;
    v37 = llvm::object::Binary::getData((llvm::object::Binary *)this);
    v39 = v38;
    llvm::object::Binary::getData((llvm::object::Binary *)this);
    if (v39 >= v40)
      v41 = v40;
    else
      v41 = v39;
    v42 = operator new(0x20uLL);
    v43 = v42;
    *v42 = 0u;
    v42[1] = 0u;
    v59 = v42;
    if (v30 + 4 <= v36)
    {
      *(_DWORD *)v42 = *(_DWORD *)v30;
      if (v30 + 8 <= v36)
      {
        *((_DWORD *)v42 + 1) = *(_DWORD *)(v30 + 4);
        if (v30 + 12 <= v36)
        {
          v47 = *(unsigned int *)(v30 + 8);
          *((_DWORD *)v42 + 2) = v47;
          if (v30 + 16 <= v36)
          {
            v48 = *(unsigned int *)(v30 + 12);
            *((_DWORD *)v42 + 3) = v48;
            v49 = v37 + v41 - v30;
            if ((v49 & 0xFFFFFFF0) != 0 && v48 + v47 <= v49)
            {
              v51 = ((v30 + v47 + v48 + ~v30) & 0xFFFFFFFFFFFFFFF0) + 16;
              if (v30 + v51 <= v36)
              {
                *((_QWORD *)v42 + 2) = v30;
                *((_QWORD *)v42 + 3) = v51;
                v53 = this[48];
                v52 = (uint64_t)this[49];
                if ((char *)v52 != v53)
                {
                  v54 = (v52 - (uint64_t)v53) >> 3;
                  do
                  {
                    v55 = v54 >> 1;
                    v56 = &v53[8 * (v54 >> 1)];
                    v58 = *(_QWORD *)v56;
                    v57 = v56 + 8;
                    v54 += ~(v54 >> 1);
                    if (v30 > *(_QWORD *)(v58 + 16))
                      v53 = v57;
                    else
                      v54 = v55;
                  }
                  while (v54);
                  v52 = (uint64_t)v53;
                }
                *(_DWORD *)(*a7 + 4 * v15) = (unint64_t)(std::vector<std::unique_ptr<llvm::metallib::MetalLibModule>>::insert(this + 48, v52, (uint64_t *)&v59)- this[48]) >> 3;
                *a9 = 0;
                v43 = v59;
                v59 = 0;
                if (!v43)
                  return;
LABEL_42:
                operator delete(v43);
                return;
              }
              v60[0] = 3;
              llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing tail padding", v60, a9);
LABEL_41:
              v59 = 0;
              goto LABEL_42;
            }
            v44 = (llvm::object *)operator new(0x38uLL);
            v45 = (uint64_t)v44;
            v46 = "corrupted bitcode";
          }
          else
          {
            v44 = (llvm::object *)operator new(0x38uLL);
            v45 = (uint64_t)v44;
            v46 = "missing bitcode size";
          }
        }
        else
        {
          v44 = (llvm::object *)operator new(0x38uLL);
          v45 = (uint64_t)v44;
          v46 = "missing bitcode offset";
        }
      }
      else
      {
        v44 = (llvm::object *)operator new(0x38uLL);
        v45 = (uint64_t)v44;
        v46 = "missing bitcode wrapper version";
      }
    }
    else
    {
      v44 = (llvm::object *)operator new(0x38uLL);
      v45 = (uint64_t)v44;
      v46 = "missing bitcode wrapper magic";
    }
    *(_QWORD *)v60 = v46;
    v61 = 259;
    v50 = llvm::object::object_category(v44);
    llvm::StringError::StringError(v45, (llvm::Twine *)v60, 3, (uint64_t)v50);
    *a9 = v45;
    goto LABEL_41;
  }
  v18 = a3[1] - v16;
  if ((v18 & 0x7FFFFFFF8) == 0)
    goto LABEL_14;
LABEL_3:
  v19 = (v18 >> 3);
  v20 = v15;
  v21 = (_DWORD *)*a7;
  while (!*(_QWORD *)v16 || !v20 || *v21 == -1 || *(_QWORD *)(*(_QWORD *)v16 + 64) != *(_QWORD *)(v17 + 64))
  {
    v16 += 8;
    ++v21;
    --v20;
    if (!--v19)
      goto LABEL_14;
  }
  *(_DWORD *)(*a7 + 4 * v15) = *v21;
  *a9 = 0;
}

void llvm::object::MetalLibObjectFile::materializeModuleForSymbolNo<llvm::metallib::MetalLibVariable,llvm::metallib::MetalLibFunction>(char **this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void (*a5)(_QWORD *)@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, _DWORD **a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t Data;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _OWORD *v42;
  void *v43;
  llvm::object *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _UNKNOWN **v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  unsigned int v60[8];
  __int16 v61;

  v15 = a2;
  v16 = *a3;
  v17 = *(_QWORD *)(*a3 + 8 * a2);
  if (!v17)
  {
    v22 = (char **)((char *)this + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *))(*v22 + a5);
    a5(v22);
    if (*a9)
      return;
    v16 = *a3;
    v17 = *(_QWORD *)(*a3 + 8 * v15);
    v18 = a3[1] - *a3;
    if ((v18 & 0x7FFFFFFF8) != 0)
      goto LABEL_3;
LABEL_14:
    v23 = *a4;
    v24 = a4[1] - *a4;
    if ((v24 & 0x7FFFFFFF8) != 0)
    {
      v25 = *a8;
      v26 = (v24 >> 3);
      while (!*(_QWORD *)v23 || *v25 == -1 || *(_QWORD *)(*(_QWORD *)v23 + 64) != *(_QWORD *)(v17 + 56))
      {
        v23 += 8;
        ++v25;
        if (!--v26)
          goto LABEL_21;
      }
      *(_DWORD *)(*a7 + 4 * v15) = *v25;
      *a9 = 0;
      return;
    }
LABEL_21:
    Data = llvm::object::Binary::getData((llvm::object::Binary *)this);
    v29 = this[17];
    if (v28 < v29)
      v29 = v28;
    v30 = (unint64_t)&v29[Data + *(_QWORD *)(v17 + 56)];
    v31 = llvm::object::Binary::getData((llvm::object::Binary *)this);
    v33 = v32;
    llvm::object::Binary::getData((llvm::object::Binary *)this);
    if (v33 >= v34)
      v35 = v34;
    else
      v35 = v33;
    v36 = v31 + v35;
    v37 = llvm::object::Binary::getData((llvm::object::Binary *)this);
    v39 = v38;
    llvm::object::Binary::getData((llvm::object::Binary *)this);
    if (v39 >= v40)
      v41 = v40;
    else
      v41 = v39;
    v42 = operator new(0x20uLL);
    v43 = v42;
    *v42 = 0u;
    v42[1] = 0u;
    v59 = v42;
    if (v30 + 4 <= v36)
    {
      *(_DWORD *)v42 = *(_DWORD *)v30;
      if (v30 + 8 <= v36)
      {
        *((_DWORD *)v42 + 1) = *(_DWORD *)(v30 + 4);
        if (v30 + 12 <= v36)
        {
          v47 = *(unsigned int *)(v30 + 8);
          *((_DWORD *)v42 + 2) = v47;
          if (v30 + 16 <= v36)
          {
            v48 = *(unsigned int *)(v30 + 12);
            *((_DWORD *)v42 + 3) = v48;
            v49 = v37 + v41 - v30;
            if ((v49 & 0xFFFFFFF0) != 0 && v48 + v47 <= v49)
            {
              v51 = ((v30 + v47 + v48 + ~v30) & 0xFFFFFFFFFFFFFFF0) + 16;
              if (v30 + v51 <= v36)
              {
                *((_QWORD *)v42 + 2) = v30;
                *((_QWORD *)v42 + 3) = v51;
                v53 = this[48];
                v52 = (uint64_t)this[49];
                if ((char *)v52 != v53)
                {
                  v54 = (v52 - (uint64_t)v53) >> 3;
                  do
                  {
                    v55 = v54 >> 1;
                    v56 = &v53[8 * (v54 >> 1)];
                    v58 = *(_QWORD *)v56;
                    v57 = v56 + 8;
                    v54 += ~(v54 >> 1);
                    if (v30 > *(_QWORD *)(v58 + 16))
                      v53 = v57;
                    else
                      v54 = v55;
                  }
                  while (v54);
                  v52 = (uint64_t)v53;
                }
                *(_DWORD *)(*a7 + 4 * v15) = (unint64_t)(std::vector<std::unique_ptr<llvm::metallib::MetalLibModule>>::insert(this + 48, v52, (uint64_t *)&v59)- this[48]) >> 3;
                *a9 = 0;
                v43 = v59;
                v59 = 0;
                if (!v43)
                  return;
LABEL_42:
                operator delete(v43);
                return;
              }
              v60[0] = 3;
              llvm::make_error<llvm::StringError,char const(&)[19],llvm::object::object_error>("missing tail padding", v60, a9);
LABEL_41:
              v59 = 0;
              goto LABEL_42;
            }
            v44 = (llvm::object *)operator new(0x38uLL);
            v45 = (uint64_t)v44;
            v46 = "corrupted bitcode";
          }
          else
          {
            v44 = (llvm::object *)operator new(0x38uLL);
            v45 = (uint64_t)v44;
            v46 = "missing bitcode size";
          }
        }
        else
        {
          v44 = (llvm::object *)operator new(0x38uLL);
          v45 = (uint64_t)v44;
          v46 = "missing bitcode offset";
        }
      }
      else
      {
        v44 = (llvm::object *)operator new(0x38uLL);
        v45 = (uint64_t)v44;
        v46 = "missing bitcode wrapper version";
      }
    }
    else
    {
      v44 = (llvm::object *)operator new(0x38uLL);
      v45 = (uint64_t)v44;
      v46 = "missing bitcode wrapper magic";
    }
    *(_QWORD *)v60 = v46;
    v61 = 259;
    v50 = llvm::object::object_category(v44);
    llvm::StringError::StringError(v45, (llvm::Twine *)v60, 3, (uint64_t)v50);
    *a9 = v45;
    goto LABEL_41;
  }
  v18 = a3[1] - v16;
  if ((v18 & 0x7FFFFFFF8) == 0)
    goto LABEL_14;
LABEL_3:
  v19 = (v18 >> 3);
  v20 = v15;
  v21 = (_DWORD *)*a7;
  while (!*(_QWORD *)v16 || !v20 || *v21 == -1 || *(_QWORD *)(*(_QWORD *)v16 + 56) != *(_QWORD *)(v17 + 56))
  {
    v16 += 8;
    ++v21;
    --v20;
    if (!--v19)
      goto LABEL_14;
  }
  *(_DWORD *)(*a7 + 4 * v15) = *v21;
  *a9 = 0;
}

llvm::object::Binary *llvm::object::ObjectFile::createMetalLibObjectFile@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::object::Binary *v4;
  __int128 v5;
  llvm::object::Binary *result;
  llvm::object *v7;
  char v8;
  llvm::object *v9;
  _OWORD v10[2];

  v9 = 0;
  v4 = (llvm::object::Binary *)operator new(0x450uLL);
  v5 = a1[1];
  v10[0] = *a1;
  v10[1] = v5;
  result = llvm::object::MetalLibObjectFile::MetalLibObjectFile(v4, v10, &v9);
  v7 = v9;
  v8 = *(_BYTE *)(a2 + 8);
  if (v9)
  {
    *(_BYTE *)(a2 + 8) = v8 | 1;
    result = (llvm::object::Binary *)(*(uint64_t (**)(llvm::object::Binary *))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)a2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 8) = v8 & 0xFE;
    *(_QWORD *)a2 = result;
  }
  return result;
}

BOOL llvm::object::MetalLibObjectFile::is64Bit(llvm::object::MetalLibObjectFile *this)
{
  _BOOL8 result;
  _BOOL8 v2;
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 448))(__p);
  result = llvm::Triple::isArch64Bit((llvm::Triple *)__p);
  v2 = result;
  if (v4 < 0)
  {
    operator delete(__p[0]);
    return v2;
  }
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::getArch(llvm::object::MetalLibObjectFile *this)
{
  uint64_t v1;
  void *__p;
  char v4;
  unsigned int v5;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 448))(&__p);
  v1 = v5;
  if ((v4 & 0x80000000) == 0)
    return v5;
  operator delete(__p);
  return v1;
}

void std::vector<std::unique_ptr<llvm::metallib::MetalLibPublicMetadata>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = *(_QWORD **)(a1 + 8);
  while (v4 != a2)
  {
    v6 = (_QWORD *)*--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = (void *)v5[13];
      if (v7)
      {
        v5[14] = v7;
        operator delete(v7);
      }
      v8 = (void *)v5[7];
      if (v8)
      {
        v5[8] = v8;
        operator delete(v8);
      }
      v9 = (void *)v5[4];
      if (v9)
      {
        v5[5] = v9;
        operator delete(v9);
      }
      v10 = (void *)v5[1];
      if (v10)
      {
        v5[2] = v10;
        operator delete(v10);
      }
      operator delete(v5);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<llvm::metallib::MetalLibFunction>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  void *v28;
  void *v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_35;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v24 = *(_OWORD *)v22;
        *((_OWORD *)v22 - 1) = 0uLL;
        *(_OWORD *)v22 = 0uLL;
        *((_OWORD *)v21 - 1) = v25;
        *(_OWORD *)v21 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_35:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
      v27 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      while (v27 != v6)
      {
        v29 = (void *)*((_QWORD *)v27 - 1);
        v27 -= 8;
        v28 = v29;
        *(_QWORD *)v27 = 0;
        if (v29)
          operator delete(v28);
      }
    }
    if (v6)
      operator delete(v6);
  }
}

void std::vector<std::unique_ptr<llvm::metallib::MetalLibPublicMetadata>>::__append(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  void *__p;
  int64x2_t v30;
  char *v31;
  _QWORD *v32;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    if ((v4 - v7) >> 2 > v10)
      v10 = (v4 - v7) >> 2;
    if ((unint64_t)(v4 - v7) >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v32 = a1 + 2;
    v28 = v8;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v9];
    v14 = &v12[8 * v11];
    v31 = v14;
    v15 = 8 * a2;
    bzero(v13, v15);
    v16 = &v13[v15];
    v30.i64[1] = (uint64_t)&v13[v15];
    v17 = (char *)(v5 - v7);
    if (v5 == v7)
    {
      v27 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      v18 = v17 - 8;
      if ((unint64_t)(v17 - 8) < 0x78
        || &v5[-((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v13
        && &v12[v28 - ((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_32;
      }
      v19 = ((unint64_t)v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v13 -= v20;
      v21 = &v12[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v24 = *(_OWORD *)v22;
        *((_OWORD *)v22 - 1) = 0uLL;
        *(_OWORD *)v22 = 0uLL;
        *((_OWORD *)v21 - 1) = v25;
        *(_OWORD *)v21 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v13 - 1) = v26;
          v13 -= 8;
        }
        while (v6 != v7);
      }
      v27 = *(int64x2_t *)a1;
      v4 = (char *)a1[2];
      v16 = (char *)v30.i64[1];
      v14 = v31;
    }
    *a1 = v13;
    a1[1] = v16;
    v30 = v27;
    a1[2] = v14;
    v31 = v4;
    __p = (void *)v27.i64[0];
    std::__split_buffer<std::unique_ptr<llvm::metallib::MetalLibPublicMetadata>>::__destruct_at_end[abi:nn180100]((uint64_t)&__p, v27.i64[0]);
    if (__p)
      operator delete(__p);
  }
}

void std::__split_buffer<std::unique_ptr<llvm::metallib::MetalLibPublicMetadata>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
    {
      v6 = (void *)v5[13];
      if (v6)
      {
        v5[14] = v6;
        operator delete(v6);
      }
      v7 = (void *)v5[7];
      if (v7)
      {
        v5[8] = v7;
        operator delete(v7);
      }
      v8 = (void *)v5[4];
      if (v8)
      {
        v5[5] = v8;
        operator delete(v8);
      }
      v9 = (void *)v5[1];
      if (v9)
      {
        v5[2] = v9;
        operator delete(v9);
      }
      operator delete(v5);
    }
  }
}

void std::vector<std::unique_ptr<llvm::metallib::MetalLibPrivateMetadata>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_37;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v24 = *(_OWORD *)v22;
        *((_OWORD *)v22 - 1) = 0uLL;
        *(_OWORD *)v22 = 0uLL;
        *((_OWORD *)v21 - 1) = v25;
        *(_OWORD *)v21 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
      v27 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      while (v27 != v6)
      {
        v29 = (_QWORD *)*((_QWORD *)v27 - 1);
        v27 -= 8;
        v28 = v29;
        *(_QWORD *)v27 = 0;
        if (v29)
        {
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          operator delete(v28);
        }
      }
    }
    if (v6)
      operator delete(v6);
  }
}

char *std::vector<std::unique_ptr<llvm::metallib::MetalLibModule>>::insert(char **a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  char *v53;
  char *v54;
  void *v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 3;
  v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      v23 = *a3;
      *a3 = 0;
      *(_QWORD *)v9 = v23;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (void **)(v5 - 8);
    if (v5 < 8)
    {
      v18 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = (unint64_t)&v6[v14 + 8];
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~(unint64_t)v6 - v14;
      if (v16 >= 0xE8)
      {
        v56 = (unint64_t)v13 >= (v16 & 0xFFFFFFFFFFFFFFF8) + v5 + 8
           || v5 >= (unint64_t)&v6[v14 + 8 + (v16 & 0xFFFFFFFFFFFFFFF8)];
        v17 = (void **)(v5 - 8);
        v18 = a1[1];
        if (v56)
        {
          v57 = (v16 >> 3) + 1;
          v58 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          v17 = &v13[v58];
          v18 = (char *)(v5 + v58 * 8);
          v59 = (_OWORD *)(v5 + 16);
          v60 = &v6[8 * v12 + 16 + 8 * v8];
          v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v62 = *((_OWORD *)v60 - 1);
            v63 = *(_OWORD *)v60;
            *((_OWORD *)v60 - 1) = 0uLL;
            *(_OWORD *)v60 = 0uLL;
            *(v59 - 1) = v62;
            *v59 = v63;
            v59 += 2;
            v60 += 32;
            v61 -= 4;
          }
          while (v61);
          if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_61;
        }
      }
      else
      {
        v17 = (void **)(v5 - 8);
        v18 = a1[1];
      }
      do
      {
        v64 = *v17;
        *v17++ = 0;
        *(_QWORD *)v18 = v64;
        v18 += 8;
      }
      while ((unint64_t)v17 < v5);
    }
LABEL_61:
    a1[1] = v18;
    if ((char *)v5 != v9 + 8)
    {
      v65 = 8 * v12;
      v66 = (uint64_t)&v6[8 * v8 - 8];
      do
      {
        v67 = *(void **)(v66 + v65);
        *(_QWORD *)(v66 + v65) = 0;
        v68 = *v13;
        *v13 = v67;
        if (v68)
          operator delete(v68);
        --v13;
        v65 -= 8;
      }
      while (v65);
    }
    v69 = *a3;
    *a3 = 0;
    v70 = *(void **)v9;
    *(_QWORD *)v9 = v69;
    if (v70)
      operator delete(v70);
    return v9;
  }
  v19 = ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
  if (v19 >> 61)
    abort();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 2 > v19)
    v19 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  v76 = a1 + 2;
  if (v21)
  {
    if (v21 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v22 = (char *)operator new(8 * v21);
  }
  else
  {
    v22 = 0;
  }
  v72 = v22;
  v73 = (unint64_t)&v22[8 * v8];
  v74 = (char *)v73;
  v75 = &v22[8 * v21];
  std::__split_buffer<std::unique_ptr<llvm::metallib::MetalLibModule>>::push_back(&v72, a3);
  v24 = v73;
  v25 = *a1;
  v26 = v73;
  if (*a1 != v9)
  {
    v27 = &v6[v7 & 0xFFFFFFFFFFFFFFF8] - v25 - 8;
    v28 = v9;
    v26 = v73;
    if (v27 < 0x88)
      goto LABEL_74;
    v29 = (unint64_t)&v6[(v7 & 0xFFFFFFFFFFFFFFF8) - (v27 & 0xFFFFFFFFFFFFFFF8) - 8] >= v73
       || v73 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8 >= (unint64_t)v9;
    v28 = v9;
    v26 = v73;
    if (!v29)
      goto LABEL_74;
    v30 = (v27 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v28 = &v9[-v31];
    v26 = v73 - v31;
    v32 = (_OWORD *)(v73 - 16);
    v33 = &v6[8 * v8 - 16];
    v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *((_OWORD *)v33 - 1);
      v35 = *(_OWORD *)v33;
      *((_OWORD *)v33 - 1) = 0uLL;
      *(_OWORD *)v33 = 0uLL;
      *(v32 - 1) = v36;
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 4;
    }
    while (v34);
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_74:
      do
      {
        v37 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *(_QWORD *)v28 = 0;
        *(_QWORD *)(v26 - 8) = v37;
        v26 -= 8;
      }
      while (v28 != v25);
    }
  }
  v73 = v26;
  v38 = a1[1];
  v39 = v74;
  if (v38 != v9)
  {
    v40 = &v6[v7 & 0xFFFFFFFFFFFFFFF8];
    v41 = v38 - v40 - 8;
    if (v41 < 0x88)
      goto LABEL_40;
    v42 = (unint64_t)&v40[(v41 & 0xFFFFFFFFFFFFFFF8) + 8];
    if (v9 < &v74[(v41 & 0xFFFFFFFFFFFFFFF8) + 8] && (unint64_t)v74 < v42)
      goto LABEL_40;
    v44 = (v41 >> 3) + 1;
    v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    v9 += v45;
    v46 = &v74[v45];
    v47 = v74 + 16;
    v48 = &v6[8 * v8 + 16];
    v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *((_OWORD *)v48 - 1);
      v51 = *(_OWORD *)v48;
      *((_OWORD *)v48 - 1) = 0uLL;
      *(_OWORD *)v48 = 0uLL;
      *(v47 - 1) = v50;
      *v47 = v51;
      v47 += 2;
      v48 += 32;
      v49 -= 4;
    }
    while (v49);
    v39 = v46;
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_40:
      v46 = v39;
      do
      {
        v52 = *(void **)v9;
        *(_QWORD *)v9 = 0;
        v9 += 8;
        *(_QWORD *)v46 = v52;
        v46 += 8;
      }
      while (v9 != v38);
    }
    v26 = v73;
    v9 = a1[1];
    v39 = v46;
  }
  v53 = *a1;
  *a1 = (char *)v26;
  a1[1] = v39;
  v54 = a1[2];
  a1[2] = v75;
  v74 = v9;
  v75 = v54;
  v72 = v53;
  v73 = (unint64_t)v53;
  if (v9 == v53)
  {
    if (!v9)
      return (char *)v24;
    goto LABEL_50;
  }
  do
  {
    v74 = v9 - 8;
    v55 = (void *)*((_QWORD *)v9 - 1);
    *((_QWORD *)v9 - 1) = 0;
    if (v55)
      operator delete(v55);
    v9 = v74;
  }
  while (v74 != v53);
  v9 = v72;
  if (v72)
LABEL_50:
    operator delete(v9);
  return (char *)v24;
}

void std::__split_buffer<std::unique_ptr<llvm::metallib::MetalLibModule>>::push_back(char **a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    if (v6 == v4)
    {
      v23 = &v6[-8 * v9];
    }
    else
    {
      do
      {
        v11 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        v12 = *(void **)&v6[8 * v10];
        *(_QWORD *)&v6[8 * v10] = v11;
        if (v12)
          operator delete(v12);
        v6 += 8;
      }
      while (v6 != v4);
      v4 = a1[1];
      v23 = &v6[8 * v10];
    }
    a1[1] = &v4[8 * v10];
    a1[2] = v23;
    goto LABEL_23;
  }
  v13 = (v4 - v5) >> 2;
  if (v4 == v5)
    v13 = 1;
  if (v13 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v14 = v13 >> 2;
  v15 = 8 * v13;
  v16 = (char *)operator new(8 * v13);
  v17 = &v16[8 * v14];
  v18 = &v16[v15];
  v19 = v4 - v6;
  if (v4 == v6)
  {
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v17;
    a1[3] = v18;
    goto LABEL_21;
  }
  v20 = &v17[v19 & 0xFFFFFFFFFFFFFFF8];
  v21 = v19 - 8;
  if ((unint64_t)(v19 - 8) < 0x78)
  {
    v22 = &v16[8 * v14];
    do
    {
LABEL_32:
      v36 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      v6 += 8;
      *(_QWORD *)v22 = v36;
      v22 += 8;
    }
    while (v22 != v20);
    goto LABEL_33;
  }
  v26 = v19 & 0xFFFFFFFFFFFFFFF8;
  v27 = v6 >= &v16[8 * v14 + v26] || v17 >= &v6[v26];
  v22 = &v16[8 * v14];
  if (!v27)
    goto LABEL_32;
  v28 = (v21 >> 3) + 1;
  v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
  v22 = &v17[v29];
  v30 = &v6[v29];
  v31 = (__int128 *)(v6 + 16);
  v32 = &v16[8 * v14 + 16];
  v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v34 = *(v31 - 1);
    v35 = *v31;
    *(v31 - 1) = 0uLL;
    *v31 = 0uLL;
    *((_OWORD *)v32 - 1) = v34;
    *(_OWORD *)v32 = v35;
    v31 += 2;
    v32 += 32;
    v33 -= 4;
  }
  while (v33);
  v6 = v30;
  if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_32;
LABEL_33:
  v5 = *a1;
  v37 = a1[1];
  v38 = a1[2];
  *a1 = v16;
  a1[1] = v17;
  a1[2] = v20;
  a1[3] = v18;
  while (v38 != v37)
  {
    v40 = (void *)*((_QWORD *)v38 - 1);
    v38 -= 8;
    v39 = v40;
    *(_QWORD *)v38 = 0;
    if (v40)
      operator delete(v39);
  }
LABEL_21:
  if (v5)
    operator delete(v5);
LABEL_23:
  v24 = a1[2];
  v25 = *a2;
  *a2 = 0;
  *(_QWORD *)v24 = v25;
  a1[2] += 8;
}

void llvm::ModuleSymbolTable::addModule(llvm::ModuleSymbolTable *this, llvm::Module *a2)
{
  llvm::ModuleSymbolTable *v2;
  llvm::ModuleSymbolTable *v3;
  void (*v4)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable *v5;
  llvm::ModuleSymbolTable *v6;
  void (*v7)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable *v8;
  llvm::ModuleSymbolTable *v9;
  void (*v10)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable *v11;
  llvm::ModuleSymbolTable *v12;
  llvm::ModuleSymbolTable *v13;
  llvm::ModuleSymbolTable *v14;
  void (*v15)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable *v16;
  llvm::ModuleSymbolTable **v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  char *v32;
  unint64_t *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  llvm::ModuleSymbolTable *v40;
  llvm::ModuleSymbolTable *v41;
  llvm::ModuleSymbolTable *v42;
  llvm::ModuleSymbolTable *v43;
  void (*v44)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable *v45;
  llvm::ModuleSymbolTable *v46;
  llvm::ModuleSymbolTable *v47;
  llvm::ModuleSymbolTable *v48;
  unint64_t v49;
  llvm::ModuleSymbolTable *v50;
  llvm::ModuleSymbolTable *v51;
  llvm::ModuleSymbolTable *v52;
  void (*v53)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable **v54;
  llvm::ModuleSymbolTable *v55;
  llvm::ModuleSymbolTable *v56;
  void (*v57)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable *v58;
  llvm::ModuleSymbolTable *v59;
  llvm::ModuleSymbolTable *v60;
  void (*v61)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable *v62;
  llvm::ModuleSymbolTable *v63;
  llvm::ModuleSymbolTable *v64;
  void (*v65)(uint64_t *, const void *, size_t, int);
  llvm::ModuleSymbolTable *v66;
  llvm::ModuleSymbolTable *v67;
  llvm::ModuleSymbolTable *v68;
  _QWORD v69[2];

  v2 = this;
  if (!*(_QWORD *)this)
    *(_QWORD *)this = a2;
  llvm::Module::global_values(a2, &v53);
  v4 = v53;
  v3 = (llvm::ModuleSymbolTable *)v54;
  v69[0] = v53;
  v5 = v55;
  v6 = v56;
  v51 = v55;
  v52 = (llvm::ModuleSymbolTable *)v54;
  v50 = v56;
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = v61;
  v11 = v62;
  v13 = v63;
  v12 = v64;
  v15 = v65;
  v14 = v66;
  v47 = v60;
  v48 = v67;
  v45 = v59;
  v46 = v68;
  v43 = v62;
  v44 = v61;
  v41 = v64;
  v42 = v63;
  v40 = v2;
  while (v4 != v10)
  {
LABEL_14:
    if (!v4 || v4 == v7)
    {
      if (!v3 || v3 == v8)
      {
        if (!v5 || v5 == v9)
        {
          v37 = (uint64_t)v6 - 56;
          if (v6 == v47 || v6 == 0)
            v37 = 0;
          v18 = v37 & 0xFFFFFFFFFFFFFFFBLL;
          v20 = (unint64_t *)*((_QWORD *)v2 + 14);
          v19 = *((_QWORD *)v2 + 15);
          if ((unint64_t)v20 >= v19)
          {
LABEL_25:
            v21 = (char *)*((_QWORD *)v2 + 13);
            v22 = ((char *)v20 - v21) >> 3;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              abort();
            v24 = v19 - (_QWORD)v21;
            if (v24 >> 2 > v23)
              v23 = v24 >> 2;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            v49 = v23;
            if (v23)
            {
              if (v23 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v25 = (char *)operator new(8 * v23);
              v26 = (unint64_t *)&v25[8 * v22];
              *v26 = v18;
              v27 = (uint64_t)(v26 + 1);
              if (v20 != (unint64_t *)v21)
              {
LABEL_33:
                v28 = (char *)(v20 - 1) - v21;
                if (v28 < 0x58)
                  goto LABEL_66;
                if ((unint64_t)(v21 - v25) < 0x20)
                  goto LABEL_66;
                v29 = (v28 >> 3) + 1;
                v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
                v31 = &v20[v30 / 0xFFFFFFFFFFFFFFF8];
                v26 = (unint64_t *)((char *)v26 - v30);
                v32 = &v25[8 * v22 - 16];
                v33 = v20 - 2;
                v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v35 = *(_OWORD *)v33;
                  *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
                  *(_OWORD *)v32 = v35;
                  v32 -= 32;
                  v33 -= 4;
                  v34 -= 4;
                }
                while (v34);
                v20 = v31;
                if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_66:
                  do
                  {
                    v36 = *--v20;
                    *--v26 = v36;
                  }
                  while (v20 != (unint64_t *)v21);
                }
                v2 = v40;
                v20 = (unint64_t *)*((_QWORD *)v40 + 13);
                *((_QWORD *)v40 + 13) = v26;
                *((_QWORD *)v40 + 14) = v27;
                *((_QWORD *)v40 + 15) = &v25[8 * v49];
                if (v20)
LABEL_44:
                  operator delete(v20);
LABEL_45:
                v10 = v44;
                v9 = v45;
                v13 = v42;
                v11 = v43;
                v12 = v41;
                *((_QWORD *)v2 + 14) = v27;
                v16 = (llvm::ModuleSymbolTable *)v69[0];
                if ((void (*)(uint64_t *, const void *, size_t, int))v69[0] != v7)
                  goto LABEL_58;
                goto LABEL_46;
              }
            }
            else
            {
              v25 = 0;
              v26 = (unint64_t *)(8 * v22);
              *(_QWORD *)(8 * v22) = v18;
              v27 = 8 * v22 + 8;
              if (v20 != (unint64_t *)v21)
                goto LABEL_33;
            }
            v2 = v40;
            *((_QWORD *)v40 + 13) = v26;
            *((_QWORD *)v40 + 14) = v27;
            *((_QWORD *)v40 + 15) = &v25[8 * v49];
            if (v20)
              goto LABEL_44;
            goto LABEL_45;
          }
        }
        else
        {
          v18 = ((unint64_t)v5 - 48) & 0xFFFFFFFFFFFFFFFBLL;
          v20 = (unint64_t *)*((_QWORD *)v2 + 14);
          v19 = *((_QWORD *)v2 + 15);
          if ((unint64_t)v20 >= v19)
            goto LABEL_25;
        }
      }
      else
      {
        v18 = ((unint64_t)v3 - 56) & 0xFFFFFFFFFFFFFFFBLL;
        v20 = (unint64_t *)*((_QWORD *)v2 + 14);
        v19 = *((_QWORD *)v2 + 15);
        if ((unint64_t)v20 >= v19)
          goto LABEL_25;
      }
    }
    else
    {
      v18 = ((unint64_t)v4 - 56) & 0xFFFFFFFFFFFFFFFBLL;
      v20 = (unint64_t *)*((_QWORD *)v2 + 14);
      v19 = *((_QWORD *)v2 + 15);
      if ((unint64_t)v20 >= v19)
        goto LABEL_25;
    }
    *v20 = v18;
    *((_QWORD *)v2 + 14) = v20 + 1;
    v16 = (llvm::ModuleSymbolTable *)v69[0];
    if ((void (*)(uint64_t *, const void *, size_t, int))v69[0] != v7)
    {
LABEL_58:
      v17 = (llvm::ModuleSymbolTable **)v69;
      goto LABEL_59;
    }
LABEL_46:
    v16 = v52;
    if (v52 != v8)
    {
      v17 = &v52;
      goto LABEL_59;
    }
    v16 = v51;
    if (v51 != v9)
    {
      v17 = &v51;
      goto LABEL_59;
    }
    v6 = v47;
    v16 = v50;
    v5 = v9;
    v3 = v8;
    v4 = v7;
    if (v50 != v47)
    {
      v17 = &v50;
LABEL_59:
      *v17 = (llvm::ModuleSymbolTable *)*((_QWORD *)v16 + 1);
      v4 = (void (*)(uint64_t *, const void *, size_t, int))v69[0];
      v5 = v51;
      v3 = v52;
      v6 = v50;
    }
  }
  if (v3 != v11 || v5 != v13 || v6 != v12 || v7 != v15 || v8 != v14 || v9 != v48 || v47 != v46)
    goto LABEL_14;
  v52 = v2;
  v53 = llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>::callback_fn<llvm::ModuleSymbolTable::addModule(llvm::Module *)::$_0>;
  v54 = &v52;
  v69[0] = &v53;
  initializeRecordStreamer((uint64_t)a2, (void (*)(uint64_t, std::string *))llvm::function_ref<void ()(llvm::RecordStreamer &)>::callback_fn<llvm::ModuleSymbolTable::CollectAsmSymbols(llvm::Module const&,llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>)::$_0>, (uint64_t)v69);
}

void initializeRecordStreamer(uint64_t a1, void (*a2)(uint64_t, std::string *), uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void **v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t (*v12)(__n128 *);
  _QWORD *v13;
  std::string::size_type v14;
  void **v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, __n128 *, _BYTE *);
  std::string::size_type v18;
  void **v19;
  uint64_t v20;
  uint64_t (*v21)(__n128 *, const char *, _QWORD, const char *, _QWORD);
  std::string::size_type v22;
  void **v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t (*v31)(__n128 *, _QWORD, _QWORD);
  __n128 *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(std::string *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, _BYTE *);
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  __int16 v42;
  __n128 *v43;
  __n128 *v44;
  unint64_t v45;
  char *v46;
  void *v47[2];
  unsigned __int8 v48;
  void *v49[2];
  uint64_t v50;
  std::string __str;
  __int16 v52;
  __n128 __p;
  uint64_t v54;
  __int16 v55;
  __n128 *v56;
  _BYTE v57[232];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = *(char *)(a1 + 111);
  if (v3 >= 0)
    v4 = a1 + 88;
  else
    v4 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 111);
  else
    v5 = *(_QWORD *)(a1 + 96);
  if (v5)
  {
    v49[0] = 0;
    v49[1] = 0;
    v50 = 0;
    v55 = 260;
    __p.n128_u64[0] = a1 + 208;
    llvm::Triple::Triple((llvm::Triple *)v47, (const llvm::Twine *)&__p);
    if ((v48 & 0x80u) == 0)
      v9 = v47;
    else
      v9 = (void **)v47[0];
    if ((v48 & 0x80u) == 0)
      v10 = v48;
    else
      v10 = (std::string::size_type)v47[1];
    v11 = llvm::TargetRegistry::lookupTarget((std::string::size_type)v9, v10, (uint64_t)v49);
    v12 = *(uint64_t (**)(__n128 *))(v11 + 80);
    if (v12)
    {
      v13 = (_QWORD *)v11;
      v14 = v48;
      if ((v48 & 0x80u) == 0)
      {
        v15 = v47;
      }
      else
      {
        v14 = (std::string::size_type)v47[1];
        v15 = (void **)v47[0];
      }
      v52 = 261;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      __str.__r_.__value_.__l.__size_ = v14;
      llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&__str);
      v16 = v12(&__p);
      if (SHIBYTE(v54) < 0)
        operator delete((void *)__p.n128_u64[0]);
      if (v16)
      {
        llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)v57);
        v17 = (uint64_t (*)(uint64_t, __n128 *, _BYTE *))v13[6];
        if (v17)
        {
          v18 = v48;
          if ((v48 & 0x80u) != 0)
            v18 = (std::string::size_type)v47[1];
          v19 = v47;
          if ((v48 & 0x80u) != 0)
            v19 = (void **)v47[0];
          v52 = 261;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          __str.__r_.__value_.__l.__size_ = v18;
          llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&__str);
          v20 = v17(v16, &__p, v57);
          if (SHIBYTE(v54) < 0)
            operator delete((void *)__p.n128_u64[0]);
          if (v20)
          {
            v21 = (uint64_t (*)(__n128 *, const char *, _QWORD, const char *, _QWORD))v13[11];
            if (v21)
            {
              v22 = v48;
              if ((v48 & 0x80u) != 0)
                v22 = (std::string::size_type)v47[1];
              v23 = v47;
              if ((v48 & 0x80u) != 0)
                v23 = (void **)v47[0];
              v52 = 261;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
              __str.__r_.__value_.__l.__size_ = v22;
              llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&__str);
              v24 = v21(&__p, "", 0, "", 0);
              if (SHIBYTE(v54) < 0)
                operator delete((void *)__p.n128_u64[0]);
              if (v24)
              {
                v25 = (uint64_t (*)(void))v13[8];
                if (v25)
                {
                  v26 = v25();
                  if (v26)
                  {
                    v27 = v26;
                    llvm::MemoryBuffer::getMemBuffer(v4, v5, (uint64_t)"", 0, &v46);
                    llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v43);
                    v28 = v46;
                    v46 = 0;
                    v54 = 0;
                    __p = (__n128)(unint64_t)v28;
                    if ((unint64_t)v44 >= v45)
                    {
                      v30 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>(&v43, &__p);
                    }
                    else
                    {
                      llvm::SourceMgr::SrcBuffer::SrcBuffer(v44, &__p);
                      v30 = (__n128 *)(v29 + 24);
                    }
                    v44 = v30;
                    llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&__p);
                    llvm::MCContext::MCContext((uint64_t)&__p, (__int128 *)v47, v20, v16, v24, (uint64_t)&v43, 0, 1, 0, 0);
                    v31 = (uint64_t (*)(__n128 *, _QWORD, _QWORD))v13[7];
                    if (v31)
                    {
                      v32 = (__n128 *)v31(&__p, 0, 0);
                    }
                    else
                    {
                      v32 = (__n128 *)operator new(0x3D0uLL);
                      bzero(v32, 0x3C0uLL);
                      v32->n128_u64[0] = (unint64_t)off_1E0E20BA8;
                      v32->n128_u32[3] = 0;
                      v32[60] = 0u;
                      bzero(&v32[1].n128_i8[8], 0x351uLL);
                      v32[56].n128_u8[8] = 0;
                      v32[56].n128_u64[0] = 0;
                      v32[55] = 0u;
                      llvm::MCObjectFileInfo::initMCObjectFileInfo((llvm::MCObjectFileInfo *)v32, (llvm::MCContext *)&__p, 0, 0);
                    }
                    v32[55].n128_u64[1] = llvm::Module::getSDKVersion((llvm::Module *)a1);
                    v32[56].n128_u64[0] = v33;
                    v56 = v32;
                    llvm::Module::getDarwinTargetVariantTriple((llvm::Module *)a1);
                    if (v34)
                    {
                      v42 = 261;
                      v41[0] = llvm::Module::getDarwinTargetVariantTriple((llvm::Module *)a1);
                      v41[1] = v35;
                      llvm::Triple::Triple((llvm::Triple *)&__str, (const llvm::Twine *)v41);
                      llvm::MCObjectFileInfo::setDarwinTargetVariantTriple(v32, &__str);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                    }
                    llvm::RecordStreamer::RecordStreamer((llvm::RecordStreamer *)&__str, (llvm::MCContext *)&__p, (const llvm::Module *)a1);
                    v36 = (void (*)(std::string *))v13[27];
                    if (v36)
                      v36(&__str);
                    v37 = llvm::createMCAsmParser((uint64_t)&v43, &__p, (uint64_t)&__str, v20, 0);
                    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _BYTE *))v13[14];
                    if (v38 && (v39 = v38(v24, v37, v27, v57)) != 0)
                    {
                      v40 = v39;
                      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 72))(v37, 0);
                      llvm::MCAsmParser::setTargetParser(v37, v40);
                      if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 80))(v37, 0, 0) & 1) == 0)
                        a2(a3, &__str);
                      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
                    }
                    else if (!v37)
                    {
                      goto LABEL_57;
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
LABEL_57:
                    llvm::RecordStreamer::~RecordStreamer((llvm::RecordStreamer *)&__str);
                  }
                }
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
              }
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          }
        }
        llvm::MCTargetOptions::~MCTargetOptions((llvm::MCTargetOptions *)v57);
        llvm::deallocate_buffer(*(llvm **)(v16 + 184), (void *)(8 * *(unsigned int *)(v16 + 200)));
      }
    }
    if (((char)v48 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        return;
LABEL_65:
      operator delete(v49[0]);
      return;
    }
    operator delete(v47[0]);
    if (SHIBYTE(v50) < 0)
      goto LABEL_65;
  }
}

void llvm::ModuleSymbolTable::printSymbolName(uint64_t a1, llvm::raw_ostream *this, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  int v7;
  const char *v8;
  size_t v9;

  v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 4) != 0)
  {
    v7 = *(char *)(v4 + 23);
    if (v7 >= 0)
      v8 = (const char *)(a3 & 0xFFFFFFFFFFFFFFF8);
    else
      v8 = *(const char **)v4;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v4 + 23);
    else
      v9 = *(_QWORD *)(v4 + 8);
    llvm::raw_ostream::write(this, v8, v9);
  }
  else
  {
    if ((*(_DWORD *)(v4 + 32) & 0x300) == 0x100)
    {
      v6 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 5)
      {
        *(_WORD *)(v6 + 4) = 24432;
        *(_DWORD *)v6 = 1835622239;
        *((_QWORD *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "__imp_", 6uLL);
      }
    }
    llvm::Mangler::getNameWithPrefix((llvm::Mangler *)(a1 + 128), this, (const llvm::GlobalValue *)v4, 0);
  }
}

uint64_t llvm::ModuleSymbolTable::getSymbolFlags(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;

  v2 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((a2 & 4) == 0)
  {
    if ((v2[8] & 0xF) != 1)
      llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)(a2 & 0xFFFFFFFFFFFFFFF8));
    llvm::GlobalValue::getAliaseeObject((llvm::GlobalValue *)v2);
  }
  return v2[6];
}

__n128 llvm::MCObjectFileInfo::setDarwinTargetVariantTriple(__n128 *a1, std::string *__str)
{
  std::string *v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = (std::string *)&a1[56].n128_i8[8];
  if (a1[59].n128_u8[8])
  {
    std::string::operator=(v4, __str);
    v5 = __str[1].__r_.__value_.__r.__words[2];
    result = *(__n128 *)&__str[1].__r_.__value_.__l.__data_;
    a1[58] = result;
    a1[59].n128_u64[0] = v5;
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v4, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      v4->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    result = *(__n128 *)&__str[1].__r_.__value_.__l.__data_;
    a1[59].n128_u64[0] = __str[1].__r_.__value_.__r.__words[2];
    a1[58] = result;
    a1[59].n128_u8[8] = 1;
  }
  return result;
}

void llvm::RecordStreamer::~RecordStreamer(llvm::RecordStreamer *this)
{
  uint64_t v2;
  llvm *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = off_1E0E205E0;
  v2 = *((unsigned int *)this + 88);
  v3 = (llvm *)*((_QWORD *)this + 42);
  if ((_DWORD)v2)
  {
    v4 = (_QWORD *)((char *)v3 + 16);
    v5 = 32 * v2;
    while (1)
    {
      if ((*(v4 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (void *)*(v4 - 1);
        if (v6)
        {
          *v4 = v6;
          operator delete(v6);
        }
      }
      v4 += 4;
      v5 -= 32;
      if (!v5)
        llvm::deallocate_buffer(*((llvm **)this + 42), (void *)(32 * *((unsigned int *)this + 88)));
    }
  }
  llvm::deallocate_buffer(v3, 0);
}

{
  llvm::RecordStreamer::~RecordStreamer(this);
}

void llvm::MCTargetOptions::~MCTargetOptions(llvm::MCTargetOptions *this)
{
  llvm::MCTargetOptions *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  void **v8;
  void **v9;

  if (*((_BYTE *)this + 216))
  {
    v2 = (llvm::MCTargetOptions *)*((_QWORD *)this + 26);
    if (v2 == (llvm::MCTargetOptions *)((char *)this + 184))
    {
      v3 = 4;
      v2 = (llvm::MCTargetOptions *)((char *)this + 184);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
    }
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v4)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (void **)*((_QWORD *)this + 17);
    if (!v7)
      goto LABEL_19;
  }
  else
  {
LABEL_11:
    v7 = (void **)*((_QWORD *)this + 17);
    if (!v7)
      goto LABEL_19;
  }
  v8 = (void **)*((_QWORD *)this + 18);
  v9 = v7;
  if (v8 != v7)
  {
    do
    {
      if (*((char *)v8 - 1) < 0)
        operator delete(*(v8 - 3));
      v8 -= 3;
    }
    while (v8 != v7);
    v9 = (void **)*((_QWORD *)this + 17);
  }
  *((_QWORD *)this + 18) = v7;
  operator delete(v9);
LABEL_19:
  if (*((char *)this + 111) < 0)
  {
    operator delete(*((void **)this + 11));
    if ((*((char *)this + 87) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 63) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)this + 8));
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*((char *)this + 39) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete(*((void **)this + 2));
    return;
  }
LABEL_26:
  operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    goto LABEL_27;
}

void llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>::callback_fn<llvm::ModuleSymbolTable::addModule(llvm::Module *)::$_0>(uint64_t *a1, const void *a2, size_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  char *buffer;
  uint64_t v13;
  unint64_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 __dst;
  unint64_t v41;

  v7 = *a1;
  *(_QWORD *)(v7 + 88) = *(_QWORD *)(*a1 + 88) + 32;
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 32 > *(_QWORD *)(v7 + 16) - v8;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_DWORD *)(v7 + 32) >> 7;
    if (v10 >= 0x1E)
      LOBYTE(v10) = 30;
    v11 = 4096 << v10;
    buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
    v13 = *(unsigned int *)(v7 + 32);
    if (v13 >= *(_DWORD *)(v7 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 24, (void *)(v7 + 40), v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(v7 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v13) = buffer;
    ++*(_DWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 16) = &buffer[v11];
    v14 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v14 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v7 + 8) = v14 + 32;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_43;
  if (a3 >= 0x17)
  {
    v16 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v16 = a3 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v41 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_18;
  }
  HIBYTE(v41) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_18:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  *(_QWORD *)(v14 + 16) = v41;
  *(_OWORD *)v14 = __dst;
  v41 = 0;
  __dst = 0uLL;
  *(_DWORD *)(v14 + 24) = a4;
  v18 = v14 | 4;
  v20 = *(uint64_t **)(v7 + 112);
  v19 = *(_QWORD *)(v7 + 120);
  if ((unint64_t)v20 < v19)
  {
    *v20 = v18;
    v21 = (uint64_t)(v20 + 1);
    goto LABEL_41;
  }
  v22 = *(char **)(v7 + 104);
  v23 = ((char *)v20 - v22) >> 3;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 61)
LABEL_43:
    abort();
  v25 = v19 - (_QWORD)v22;
  if (v25 >> 2 > v24)
    v24 = v25 >> 2;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
  {
    if (v26 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = (char *)operator new(8 * v26);
    v28 = (uint64_t *)&v27[8 * v23];
    v29 = &v27[8 * v26];
    *v28 = v18;
    v21 = (uint64_t)(v28 + 1);
    v30 = (char *)((char *)v20 - v22);
    if (v20 == (uint64_t *)v22)
      goto LABEL_39;
    goto LABEL_32;
  }
  v27 = 0;
  v28 = (uint64_t *)(8 * v23);
  v29 = 0;
  *(_QWORD *)(8 * v23) = v18;
  v21 = 8 * v23 + 8;
  v30 = (char *)((char *)v20 - v22);
  if (v20 != (uint64_t *)v22)
  {
LABEL_32:
    v31 = (unint64_t)(v30 - 8);
    if (v31 < 0x58)
      goto LABEL_47;
    if ((unint64_t)(v22 - v27) < 0x20)
      goto LABEL_47;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v20[v33 / 0xFFFFFFFFFFFFFFF8];
    v28 = (uint64_t *)((char *)v28 - v33);
    v35 = &v27[8 * v23 - 16];
    v36 = v20 - 2;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
      *(_OWORD *)v35 = v38;
      v35 -= 32;
      v36 -= 4;
      v37 -= 4;
    }
    while (v37);
    v20 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        v39 = *--v20;
        *--v28 = v39;
      }
      while (v20 != (uint64_t *)v22);
    }
    v20 = *(uint64_t **)(v7 + 104);
  }
LABEL_39:
  *(_QWORD *)(v7 + 104) = v28;
  *(_QWORD *)(v7 + 112) = v21;
  *(_QWORD *)(v7 + 120) = v29;
  if (v20)
    operator delete(v20);
LABEL_41:
  *(_QWORD *)(v7 + 112) = v21;
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void llvm::function_ref<void ()(llvm::RecordStreamer &)>::callback_fn<llvm::ModuleSymbolTable::CollectAsmSymbols(llvm::Module const&,llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>)::$_0>(uint64_t a1, llvm::RecordStreamer *a2)
{
  llvm::RecordStreamer::flushSymverDirectives(a2);
}

void llvm::object::ObjectFile::ObjectFile(uint64_t a1, int a2, _OWORD *a3)
{
  __int128 v3;
  _QWORD *v4;
  _OWORD v5[2];

  v3 = a3[1];
  v5[0] = *a3;
  v5[1] = v3;
  llvm::object::SymbolicFile::SymbolicFile(a1, a2, v5);
  *v4 = off_1E0E24080;
}

_QWORD *llvm::object::ObjectFile::getSymbolValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v10);
  if ((v11 & 1) != 0)
  {
    v8 = v10;
    if (v10)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v8;
      return result;
    }
LABEL_11:
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = result;
    return result;
  }
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = 0;
    return result;
  }
  if ((v10 & 0x10) == 0)
    goto LABEL_11;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v10, a1, a2);
  if ((v11 & 1) != 0)
  {
    v9 = v10;
    v10 = 0;
    llvm::report_fatal_error(&v9, 1);
  }
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2);
  v7 = result;
  if ((v11 & 1) != 0)
  {
    result = (_QWORD *)v10;
    v10 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v7;
  return result;
}

_QWORD *llvm::object::ObjectFile::printSymbolName@<X0>(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  size_t v7;
  const void *v8;
  const void *v9;
  size_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(const void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(&v9, a1, a3);
  if ((v11 & 1) != 0)
  {
    v8 = v9;
    v9 = 0;
    *a4 = v8;
    if ((v11 & 1) == 0)
      return result;
  }
  else
  {
    v7 = v10;
    result = (_QWORD *)*((_QWORD *)a2 + 4);
    if (v10 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
    {
      if (v10)
      {
        result = memcpy(result, v9, v10);
        *((_QWORD *)a2 + 4) += v7;
        *a4 = 0;
        if ((v11 & 1) == 0)
          return result;
      }
      else
      {
        *a4 = 0;
        if ((v11 & 1) == 0)
          return result;
      }
    }
    else
    {
      result = llvm::raw_ostream::write(a2, (const char *)v9, v10);
      *a4 = 0;
      if ((v11 & 1) == 0)
        return result;
    }
  }
  result = v9;
  v9 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t llvm::object::ObjectFile::getSymbolAlignment()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::isSectionBitcode(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 144))(v6);
  if ((v7 & 1) != 0)
  {
    v3 = (_QWORD *)v6[0];
    v6[0] = 0;
    v4 = v3;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v4, &v5);
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    if ((v7 & 1) != 0)
    {
      result = v6[0];
      v6[0] = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v6[1] != 9)
    return 0;
  return *(_QWORD *)v6[0] == 0x746C2E6D766C6C2ELL && *(_BYTE *)(v6[0] + 8) == 111;
}

uint64_t llvm::object::ObjectFile::isSectionStripped()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::isBerkeleyText(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
}

uint64_t llvm::object::ObjectFile::isBerkeleyData(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t llvm::object::ObjectFile::isDebugSection()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::hasDebugInfo(llvm::object::ObjectFile *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v2 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)this + 352))(this);
  v4 = v3;
  v5 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)this + 360))(this);
  v13 = v2;
  v14 = v4;
  if (v4 == v6 && v2 == v5)
    return 0;
  v8 = v5;
  v9 = v6;
  do
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 264))(v4, v2);
    if ((v10 & 1) != 0)
      break;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 136))(v14, &v13);
    v2 = v13;
    v4 = v14;
  }
  while (v14 != v9 || v13 != v8);
  return v10;
}

uint64_t llvm::object::ObjectFile::getRelocatedSection@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

void llvm::object::ObjectFile::createObjectFile(uint64_t a1, int a2)
{
  if (!a2)
    a2 = llvm::identify_magic(*(unsigned __int16 **)a1, *(_QWORD *)(a1 + 8));
  __asm { BR              X10 }
}

_QWORD *sub_180C10CF4(llvm::object *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  std::error_code v4;

  *(_QWORD *)&v4.__val_ = llvm::object::object_category(a1);
  result = llvm::errorCodeToError((llvm *)2, v4, (_QWORD *)(v2 - 64));
  *(_BYTE *)(v1 + 8) |= 1u;
  *(_QWORD *)v1 = *(_QWORD *)(v2 - 64);
  return result;
}

uint64_t *llvm::RecordStreamer::visitUsedSymbol(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  char *v2;
  uint64_t *result;
  uint64_t v4;
  int v5;
  int v7;

  v2 = (char *)this + 312;
  if ((*((_BYTE *)a2 + 8) & 1) == 0)
  {
    result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((uint64_t)v2, 0, 0);
    v4 = *result;
    v5 = *(_DWORD *)(*result + 8);
    if (v5 != 5 && v5 != 0)
      return result;
LABEL_12:
    *(_DWORD *)(v4 + 8) = 5;
    return result;
  }
  result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((uint64_t)v2, (int8x16_t *)(*((_QWORD *)a2 - 1) + 16), **((const unsigned __int8 ***)a2 - 1));
  v4 = *result;
  v7 = *(_DWORD *)(*result + 8);
  if (v7 == 5 || v7 == 0)
    goto LABEL_12;
  return result;
}

void llvm::RecordStreamer::RecordStreamer(llvm::RecordStreamer *this, llvm::MCContext *a2, const llvm::Module *a3)
{
  uint64_t v4;

  llvm::MCStreamer::MCStreamer(this, a2);
  *(_QWORD *)v4 = off_1E0E205E0;
  *(_QWORD *)(v4 + 304) = a3;
  *(_QWORD *)(v4 + 312) = 0;
  *(_QWORD *)(v4 + 320) = 0;
  *(_QWORD *)(v4 + 328) = 0x1000000000;
  *(_QWORD *)(v4 + 336) = 0;
  *(_QWORD *)(v4 + 344) = 0;
  *(_DWORD *)(v4 + 352) = 0;
}

_QWORD *llvm::RecordStreamer::begin(llvm::RecordStreamer *this)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  result = (_QWORD *)*((_QWORD *)this + 39);
  if (*((_DWORD *)this + 80))
  {
    if (!*result || *result == -8)
    {
      do
      {
        v5 = result[1];
        ++result;
        v4 = v5;
        if (v5)
          v6 = v4 == -8;
        else
          v6 = 1;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t llvm::RecordStreamer::end(llvm::RecordStreamer *this)
{
  return *((_QWORD *)this + 39) + 8 * *((unsigned int *)this + 80);
}

uint64_t *llvm::RecordStreamer::emitLabel(uint64_t a1, uint64_t a2)
{
  int8x16_t *v4;
  const unsigned __int8 *v5;
  _QWORD *v6;
  const unsigned __int8 *v7;
  uint64_t *result;
  uint64_t v9;

  llvm::MCStreamer::emitLabel(a1, a2, 0);
  v4 = 0;
  v5 = 0;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    v6 = *(_QWORD **)(a2 - 8);
    v7 = (const unsigned __int8 *)*v6;
    v4 = (int8x16_t *)(v6 + 2);
    v5 = v7;
  }
  result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1 + 312, v4, v5);
  v9 = *(int *)(*result + 8);
  if (v9 <= 6 && ((0x6Fu >> v9) & 1) != 0)
    *(_DWORD *)(*result + 8) = dword_181267880[v9];
  return result;
}

uint64_t llvm::RecordStreamer::emitAssignment(llvm::RecordStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr *a3)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (char *)this + 312;
  if ((*((_BYTE *)a2 + 8) & 1) != 0)
  {
    v10 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((uint64_t)v6, (int8x16_t *)(*((_QWORD *)a2 - 1) + 16), **((const unsigned __int8 ***)a2 - 1));
    v8 = *v10;
    v9 = *(int *)(*v10 + 8);
    if (v9 > 6)
      return llvm::MCStreamer::emitAssignment(this, a2, a3);
  }
  else
  {
    v7 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((uint64_t)v6, 0, 0);
    v8 = *v7;
    v9 = *(int *)(*v7 + 8);
    if (v9 > 6)
      return llvm::MCStreamer::emitAssignment(this, a2, a3);
  }
  if (((0x6Fu >> v9) & 1) != 0)
    *(_DWORD *)(v8 + 8) = dword_181267880[v9];
  return llvm::MCStreamer::emitAssignment(this, a2, a3);
}

uint64_t llvm::RecordStreamer::emitSymbolAttribute(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int8x16_t *v7;
  const unsigned __int8 *v8;
  _QWORD *v9;
  const unsigned __int8 *v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t *v20;
  int v21;

  if (a3 != 24)
  {
    if (a3 == 16)
      goto LABEL_18;
    if (a3 != 9)
      return 1;
  }
  v6 = a1 + 312;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    v9 = *(_QWORD **)(a2 - 8);
    v10 = (const unsigned __int8 *)*v9;
    v7 = (int8x16_t *)(v9 + 2);
    v8 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v11 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v6, v7, v8);
  v12 = *(_DWORD *)(*v11 + 8);
  if (v12 <= 5)
  {
    v13 = 1 << v12;
    if ((v13 & 0x23) != 0)
    {
      if (a3 == 24)
        v14 = 6;
      else
        v14 = 1;
    }
    else
    {
      if ((v13 & 0xC) == 0)
        goto LABEL_17;
      if (a3 == 24)
        v14 = 4;
      else
        v14 = 3;
    }
    *(_DWORD *)(*v11 + 8) = v14;
  }
LABEL_17:
  if (a3 != 16)
    return 1;
LABEL_18:
  v15 = a1 + 312;
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
  {
    v16 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v15, 0, 0);
    v17 = *v16;
    v18 = *(_DWORD *)(*v16 + 8);
    if (v18 != 5 && v18 != 0)
      return 1;
LABEL_29:
    *(_DWORD *)(v17 + 8) = 5;
    return 1;
  }
  v20 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v15, (int8x16_t *)(*(_QWORD *)(a2 - 8) + 16), **(const unsigned __int8 ***)(a2 - 8));
  v17 = *v20;
  v21 = *(_DWORD *)(*v20 + 8);
  if (v21 == 5 || v21 == 0)
    goto LABEL_29;
  return 1;
}

uint64_t *llvm::RecordStreamer::emitZerofill(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  v3 = a1 + 312;
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
  {
    result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v3, (int8x16_t *)(*(_QWORD *)(a3 - 8) + 16), **(const unsigned __int8 ***)(a3 - 8));
    v5 = *result;
    v6 = *(int *)(*result + 8);
    if (v6 > 6)
      return result;
  }
  else
  {
    result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v3, 0, 0);
    v5 = *result;
    v6 = *(int *)(*result + 8);
    if (v6 > 6)
      return result;
  }
  if (((0x6Fu >> v6) & 1) != 0)
    *(_DWORD *)(v5 + 8) = dword_181267880[v6];
  return result;
}

uint64_t *llvm::RecordStreamer::emitCommonSymbol(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 312;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v2, (int8x16_t *)(*(_QWORD *)(a2 - 8) + 16), **(const unsigned __int8 ***)(a2 - 8));
    v4 = *result;
    v5 = *(int *)(*result + 8);
    if (v5 > 6)
      return result;
  }
  else
  {
    result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v2, 0, 0);
    v4 = *result;
    v5 = *(int *)(*result + 8);
    if (v5 > 6)
      return result;
  }
  if (((0x6Fu >> v5) & 1) != 0)
    *(_DWORD *)(v4 + 8) = dword_181267880[v5];
  return result;
}

void llvm::RecordStreamer::emitELFSymverDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  int v37;

  v8 = *(_DWORD *)(a1 + 352);
  if (!v8)
    goto LABEL_38;
  v9 = *(_QWORD *)(a1 + 336);
  v10 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (_QWORD *)(v9 + 32 * v10);
  v12 = *v11;
  if (*v11 == a2)
    goto LABEL_17;
  v13 = 0;
  v14 = 1;
  while (v12 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v13 = v11;
    v16 = v10 + v14++;
    v10 = v16 & (v8 - 1);
    v11 = (_QWORD *)(v9 + 32 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_17;
  }
  if (v13)
    v11 = v13;
  v29 = *(_DWORD *)(a1 + 344);
  if (4 * v29 + 4 < 3 * v8)
  {
    if (v8 + ~v29 - *(_DWORD *)(a1 + 348) > v8 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_38:
    v8 *= 2;
  }
  llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(a1 + 336, v8);
  v30 = *(_QWORD *)(a1 + 336);
  v31 = *(_DWORD *)(a1 + 352) - 1;
  v32 = v31 & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (_QWORD *)(v30 + 32 * v32);
  v33 = *v11;
  if (*v11 == a2)
  {
LABEL_40:
    ++*(_DWORD *)(a1 + 344);
    if (a2 == -4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v34 = 0;
  v35 = 1;
  while (v33 != -4096)
  {
    if (v34)
      v36 = 0;
    else
      v36 = v33 == -8192;
    if (v36)
      v34 = v11;
    v37 = v32 + v35++;
    v32 = v37 & v31;
    v11 = (_QWORD *)(v30 + 32 * v32);
    v33 = *v11;
    if (*v11 == a2)
      goto LABEL_40;
  }
  if (v34)
    v11 = v34;
LABEL_14:
  v17 = *v11;
  ++*(_DWORD *)(a1 + 344);
  if (v17 != -4096)
LABEL_15:
    --*(_DWORD *)(a1 + 348);
LABEL_16:
  *v11 = a2;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
LABEL_17:
  v19 = (char *)v11[2];
  v18 = v11[3];
  if ((unint64_t)v19 < v18)
  {
    *(_QWORD *)v19 = a3;
    *((_QWORD *)v19 + 1) = a4;
    v20 = (uint64_t)(v19 + 16);
    goto LABEL_34;
  }
  v21 = (char *)v11[1];
  v22 = (v19 - v21) >> 4;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 60)
    abort();
  v24 = v18 - (_QWORD)v21;
  if (v24 >> 3 > v23)
    v23 = v24 >> 3;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
    v25 = 0xFFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v26 = (char *)operator new(16 * v25);
    v27 = &v26[16 * v22];
    v28 = &v26[16 * v25];
    *(_QWORD *)v27 = a3;
    *((_QWORD *)v27 + 1) = a4;
    v20 = (uint64_t)(v27 + 16);
    if (v19 == v21)
      goto LABEL_32;
    goto LABEL_30;
  }
  v27 = (char *)(16 * v22);
  v28 = 0;
  *(_QWORD *)v27 = a3;
  *((_QWORD *)v27 + 1) = a4;
  v20 = 16 * v22 + 16;
  if (v19 != v21)
  {
    do
    {
LABEL_30:
      *((_OWORD *)v27 - 1) = *((_OWORD *)v19 - 1);
      v27 -= 16;
      v19 -= 16;
    }
    while (v19 != v21);
    v19 = (char *)v11[1];
  }
LABEL_32:
  v11[1] = v27;
  v11[2] = v20;
  v11[3] = v28;
  if (v19)
    operator delete(v19);
LABEL_34:
  v11[2] = v20;
}

void llvm::RecordStreamer::flushSymverDirectives(llvm::RecordStreamer *this)
{
  const char *v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  llvm::StringMapImpl *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  llvm::StringMapImpl *v12;
  llvm::Value *v13;
  const char **v14;
  uint64_t v16;
  llvm::RecordStreamer *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int Key;
  int v24;
  int v25;
  int v26;
  llvm::GlobalValue *NamedValue;
  int v28;
  int8x16_t *v29;
  const unsigned __int8 *v30;
  _QWORD *v31;
  const unsigned __int8 *v32;
  int v33;
  int v34;
  _BOOL4 v35;
  __int128 *v36;
  const char *v37;
  unint64_t v38;
  const char *v39;
  const char *v40;
  unint64_t v41;
  unint64_t v42;
  llvm::MCContext *v43;
  _BYTE *Symbol;
  const llvm::MCExpr *v45;
  int8x16_t *v46;
  const unsigned __int8 *v47;
  _QWORD *v48;
  const unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *buffer;
  char *v55;
  char *v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t *v62;
  const char *v63;
  uint64_t v64;
  llvm::StringMapImpl *v66;
  uint64_t *v67;
  const char *v68;
  int v69;
  const char *v70;
  uint64_t v71;
  __int128 *v72;
  const char *v73;
  _BOOL4 v74;
  _QWORD v75[4];
  __int16 v76;
  const char *v77[4];
  __int16 v78;
  __int128 v79;
  const char *v80;
  llvm *v81[2];
  unsigned int v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[24];
  const char *v87;
  llvm::StringMapImpl *v88;
  const char *v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  llvm::StringMapImpl *v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  int8x16_t *v100;
  __int128 v101;
  _QWORD v102[11];

  v102[8] = *MEMORY[0x1E0C80C00];
  v83 = 0;
  v84 = 0;
  v85 = 0x1000000000;
  v81[0] = 0;
  v81[1] = 0;
  v82 = 0;
  v100 = (int8x16_t *)v102;
  v101 = xmmword_181236C00;
  llvm::Module::global_values(*((_QWORD **)this + 38), v86);
  v1 = *(const char **)&v86[8];
  v2 = *(const char **)v86;
  v77[0] = *(const char **)v86;
  v3 = *(_QWORD *)&v86[16];
  v4 = v87;
  *(_QWORD *)&v79 = *(_QWORD *)&v86[16];
  v80 = v87;
  v5 = v88;
  v6 = v89;
  v7 = v90;
  v8 = v92;
  v9 = v93;
  v10 = v94;
  v11 = v95;
  v12 = v96;
  v73 = v97;
  v75[0] = *(_QWORD *)&v86[8];
  v71 = v98;
  v68 = v99;
  v70 = v91;
  v66 = v88;
  if (*(const char **)v86 == v92)
  {
LABEL_2:
    if (v1 != v9 || v3 != v10 || v4 != v11 || v5 != v12 || v6 != v73 || v7 != v71 || v70 != v68)
      goto LABEL_9;
    v17 = this;
    if (!*((_DWORD *)this + 86))
      goto LABEL_132;
    v18 = *((unsigned int *)this + 88);
    if ((_DWORD)v18)
    {
      v19 = 32 * v18;
      v20 = (uint64_t *)*((_QWORD *)this + 42);
      while ((*v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v20 += 4;
        v19 -= 32;
        if (!v19)
          goto LABEL_132;
      }
    }
    else
    {
      v20 = (uint64_t *)*((_QWORD *)this + 42);
    }
    v21 = *((_QWORD *)this + 42) + 32 * v18;
    if (v20 == (uint64_t *)v21)
    {
LABEL_132:
      if (v100 != (int8x16_t *)v102)
        free(v100);
      llvm::deallocate_buffer(v81[0], (void *)(16 * v82));
    }
    v67 = (uint64_t *)((char *)this + 312);
    v62 = (uint64_t *)v21;
    while (1)
    {
      v22 = *v20;
      if ((*(_BYTE *)(*v20 + 8) & 1) != 0)
      {
        Key = llvm::StringMapImpl::FindKey(v67, (int8x16_t *)(*(_QWORD *)(v22 - 8) + 16), **(const unsigned __int8 ***)(v22 - 8));
        if (Key == -1)
          break;
      }
      else
      {
        Key = llvm::StringMapImpl::FindKey(v67, 0, 0);
        if (Key == -1)
          break;
      }
      if (Key == (unint64_t)*((unsigned int *)v17 + 80))
        break;
      v24 = *(_DWORD *)(*(_QWORD *)(*v67 + 8 * Key) + 8);
      v28 = v24 - 1;
      if ((v24 - 1) >= 6 || ((0x2Du >> v28) & 1) == 0)
        goto LABEL_56;
      v25 = *(_DWORD *)&asc_181267844[4 * v28];
      if ((v24 - 2) < 3)
        goto LABEL_79;
      v74 = 0;
      v26 = 0;
      if ((*(_BYTE *)(v22 + 8) & 1) == 0)
      {
LABEL_57:
        NamedValue = (llvm::GlobalValue *)llvm::Module::getNamedValue(*((_QWORD *)v17 + 38), 0, 0);
        if (NamedValue)
          goto LABEL_70;
        goto LABEL_64;
      }
LABEL_63:
      NamedValue = (llvm::GlobalValue *)llvm::Module::getNamedValue(*((_QWORD *)v17 + 38), (int8x16_t *)(*(_QWORD *)(v22 - 8) + 16), **(const unsigned __int8 ***)(v22 - 8));
      if (NamedValue)
        goto LABEL_70;
LABEL_64:
      if ((*(_BYTE *)(v22 + 8) & 1) != 0)
      {
        v31 = *(_QWORD **)(v22 - 8);
        v32 = (const unsigned __int8 *)*v31;
        v29 = (int8x16_t *)(v31 + 2);
        v30 = v32;
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
      v33 = llvm::StringMapImpl::FindKey((uint64_t *)&v83, v29, v30);
      if (v33 != -1 && v33 != (unint64_t)v84)
      {
        NamedValue = *(llvm::GlobalValue **)(*((_QWORD *)v83 + v33) + 8);
        if (NamedValue)
        {
LABEL_70:
          if (v26)
          {
            if ((*((_DWORD *)NamedValue + 8) & 0xF) != 0)
            {
              if ((*((_DWORD *)NamedValue + 8) & 0xFu) - 7 >= 2)
              {
                if ((*((_DWORD *)NamedValue + 8) & 0xFu) - 2 > 8)
                  v25 = 0;
                else
                  v25 = dword_18126785C[(*((_DWORD *)NamedValue + 8) & 0xF) - 2];
              }
              else
              {
                v25 = 17;
              }
            }
            else
            {
              v25 = 9;
            }
          }
          if (v74)
          {
LABEL_79:
            v34 = 1;
          }
          else
          {
            v35 = (*((_DWORD *)NamedValue + 8) & 0xF) == 1 || llvm::GlobalValue::isDeclaration(NamedValue);
            v34 = !v35;
          }
          v74 = v34;
        }
      }
      v36 = (__int128 *)v20[1];
      v72 = (__int128 *)v20[2];
      if (v36 != v72)
      {
        v37 = "@";
        if (v74)
          v37 = "@@";
        v63 = v37;
        v64 = v22;
        v69 = v25;
        while (2)
        {
          v79 = *v36;
          v38 = llvm::StringRef::find((uint64_t *)&v79, "@@@", 3uLL, 0);
          if (v38 == -1)
          {
            *(_QWORD *)v86 = &v87;
            *(_OWORD *)&v86[8] = xmmword_181236BB0;
            v39 = (const char *)*((_QWORD *)&v79 + 1);
            v40 = (const char *)v79;
          }
          else
          {
            v39 = (const char *)*((_QWORD *)&v79 + 1);
            v40 = (const char *)v79;
            if (v38 >= *((_QWORD *)&v79 + 1))
              v41 = *((_QWORD *)&v79 + 1);
            else
              v41 = v38;
            if (*((_QWORD *)&v79 + 1) >= v38 + 3)
              v42 = v38 + 3;
            else
              v42 = *((_QWORD *)&v79 + 1);
            *(_QWORD *)v86 = &v87;
            *(_OWORD *)&v86[8] = xmmword_181236BB0;
            if (*((_QWORD *)&v79 + 1) > v38 + 3 && *(_BYTE *)(v79 + v42) != 64)
            {
              v76 = 773;
              v75[0] = v79;
              v75[1] = v41;
              v75[2] = v63;
              v77[0] = (const char *)v75;
              v77[2] = (const char *)(v79 + v42);
              v77[3] = (const char *)(*((_QWORD *)&v79 + 1) - v42);
              v78 = 1282;
              llvm::Twine::toVector((uint64_t)v77, (uint64_t)v86);
              v39 = *(const char **)&v86[8];
              v40 = *(const char **)v86;
              v79 = *(_OWORD *)v86;
            }
          }
          v43 = (llvm::MCContext *)*((_QWORD *)v17 + 1);
          v78 = 261;
          v77[0] = v40;
          v77[1] = v39;
          Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(v43, v77);
          v45 = (const llvm::MCExpr *)llvm::MCSymbolRefExpr::create(v22, 0, *((_QWORD *)v17 + 1), 0);
          if (!v74)
            goto LABEL_123;
          if ((Symbol[8] & 1) != 0)
          {
            v48 = (_QWORD *)*((_QWORD *)Symbol - 1);
            v49 = (const unsigned __int8 *)*v48;
            v46 = (int8x16_t *)(v48 + 2);
            v47 = v49;
          }
          else
          {
            v46 = 0;
            v47 = 0;
          }
          v50 = llvm::StringMapImpl::LookupBucketFor(v67, v46, v47);
          v51 = *v67;
          v52 = v50;
          v53 = *(_QWORD *)(*v67 + 8 * v50);
          if (v53 == -8)
          {
            --*((_DWORD *)v17 + 82);
          }
          else if (v53)
          {
            v22 = v64;
            goto LABEL_120;
          }
          buffer = (char *)llvm::allocate_buffer((size_t)(v47 + 17), (std::align_val_t)8uLL);
          v55 = buffer;
          v56 = buffer + 16;
          if (v47)
            memcpy(buffer + 16, v46, (size_t)v47);
          v47[(_QWORD)v56] = 0;
          *(_QWORD *)v55 = v47;
          *((_DWORD *)v55 + 2) = 0;
          *(_QWORD *)(v51 + 8 * v52) = v55;
          v17 = this;
          ++*((_DWORD *)this + 81);
          v57 = (uint64_t *)(*((_QWORD *)this + 39)
                          + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v67, v52));
          v22 = v64;
          v53 = *v57;
          if (*v57)
            v58 = v53 == -8;
          else
            v58 = 1;
          if (v58)
          {
            do
            {
              v59 = v57[1];
              ++v57;
              v53 = v59;
              if (v59)
                v60 = v53 == -8;
              else
                v60 = 1;
            }
            while (v60);
          }
LABEL_120:
          v61 = *(int *)(v53 + 8);
          if (v61 <= 6 && ((0x6Fu >> v61) & 1) != 0)
            *(_DWORD *)(v53 + 8) = dword_181267880[v61];
LABEL_123:
          llvm::MCStreamer::emitAssignment(v17, (llvm::MCSymbol *)Symbol, v45);
          if (v69)
            (*(void (**)(llvm::RecordStreamer *, _BYTE *))(*(_QWORD *)v17 + 296))(v17, Symbol);
          if (*(const char ***)v86 != &v87)
            free(*(void **)v86);
          if (++v36 == v72)
            break;
          continue;
        }
      }
      v20 += 4;
      if (v20 != v62)
      {
        while ((*v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v20 += 4;
          if (v20 == v62)
            goto LABEL_132;
        }
        if (v20 != v62)
          continue;
      }
      goto LABEL_132;
    }
    v24 = 0;
LABEL_56:
    v25 = 0;
    v74 = (v24 - 2) < 3;
    v26 = 1;
    if ((*(_BYTE *)(v22 + 8) & 1) == 0)
      goto LABEL_57;
    goto LABEL_63;
  }
  while (1)
  {
LABEL_9:
    if (!v2 || v2 == (const char *)v5)
    {
      if (!v1 || v1 == v6)
      {
        if (!v3 || v3 == v7)
        {
          if (v4 == v70 || v4 == 0)
            v13 = 0;
          else
            v13 = (llvm::Value *)(v4 - 56);
          if ((*((_BYTE *)v13 + 23) & 0x10) == 0)
          {
LABEL_12:
            if (v2 != (const char *)v5)
              goto LABEL_13;
            goto LABEL_32;
          }
        }
        else
        {
          v13 = (llvm::Value *)(v3 - 48);
          if ((*(_BYTE *)(v3 - 25) & 0x10) == 0)
            goto LABEL_12;
        }
      }
      else
      {
        v13 = (llvm::Value *)(v1 - 56);
        if ((*(v1 - 33) & 0x10) == 0)
          goto LABEL_12;
      }
    }
    else
    {
      v13 = (llvm::Value *)(v2 - 56);
      if ((*(v2 - 33) & 0x10) == 0)
        goto LABEL_12;
    }
    *(_QWORD *)&v101 = 0;
    llvm::Value::getName(v13);
    if (*((_QWORD *)&v101 + 1) < (unint64_t)(v16 + 1))
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v100, v102, v16 + 1, 1);
    llvm::Mangler::getNameWithPrefix((llvm::Mangler *)v81, (uint64_t)&v100, v13, 0);
    *(_QWORD *)(*llvm::StringMap<mlir::Attribute,llvm::MallocAllocator>::try_emplace<>((uint64_t)&v83, v100, (const unsigned __int8 *)v101)+ 8) = v13;
    v5 = v66;
    if (v2 != (const char *)v66)
    {
LABEL_13:
      v14 = v77;
LABEL_38:
      *v14 = (const char *)*((_QWORD *)v2 + 1);
      v3 = v79;
      v4 = v80;
      goto LABEL_39;
    }
LABEL_32:
    if (v1 != v6)
    {
      v14 = (const char **)v75;
      v2 = v1;
      goto LABEL_38;
    }
    v2 = (const char *)v79;
    if ((_QWORD)v79 != v7)
    {
      v14 = (const char **)&v79;
      goto LABEL_38;
    }
    v2 = v80;
    v4 = v70;
    v3 = v7;
    if (v80 != v70)
    {
      v14 = &v80;
      goto LABEL_38;
    }
LABEL_39:
    v2 = v77[0];
    v1 = (const char *)v75[0];
    if (v77[0] == v8)
      goto LABEL_2;
  }
}

void sub_180C11D28(void *__p)
{
  operator delete(__p);
}

uint64_t llvm::MCStreamer::getAssemblerPtr(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::isVerboseAsm(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::hasRawTextSupport(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::isIntegratedAssemblerRequired(llvm::MCStreamer *this)
{
  return 0;
}

const char *llvm::MCStreamer::getMnemonic()
{
  return "";
}

uint64_t llvm::MCStreamer::emitIntValueInHex(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 520))(this);
}

uint64_t llvm::MCStreamer::emitIntValueInHexWithPadding(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 520))(this);
}

void llvm::MCStreamer::emitRelocDirective(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

uint64_t llvm::MCStreamer::mayHaveInstructions()
{
  return 1;
}

void llvm::object::SymbolicFile::SymbolicFile(uint64_t a1, int a2, _OWORD *a3)
{
  __int128 v3;
  _QWORD *v4;
  _OWORD v5[2];

  v3 = a3[1];
  v5[0] = *a3;
  v5[1] = v3;
  llvm::object::Binary::Binary(a1, a2, (uint64_t)v5);
  *v4 = off_1E0E242F8;
}

void llvm::object::SymbolicFile::createSymbolicFile(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v5;
  __int128 v7;
  llvm::object::IRObjectFile *v8;
  __int128 v9;
  const llvm::object::ObjectFile *v10;
  __int128 v11;
  llvm::object::IRObjectFile *v12;
  __int128 v13;
  void *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  llvm::object::IRObjectFile *v19;
  _OWORD v20[2];
  _QWORD *v21;
  _OWORD v22[2];
  _OWORD v23[2];
  _OWORD v24[2];
  llvm::object::IRObjectFile *v25;
  llvm::object::IRObjectFile *v26;
  char v27;
  _OWORD v28[2];
  char v29;
  llvm::object::IRObjectFile *v30;
  char v31;
  uint64_t v32;
  std::error_code v33;

  v5 = (_OWORD *)a1;
  v32 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    a1 = llvm::identify_magic(*(unsigned __int16 **)a1, *(_QWORD *)(a1 + 8));
    a2 = a1;
  }
  if (a2 > 0x2A)
    goto LABEL_19;
  if (((1 << a2) & 0x403B93FFFF8) == 0)
  {
    if (a2 == 1 && a3)
    {
      v13 = v5[1];
      v24[0] = *v5;
      v24[1] = v13;
      llvm::object::IRObjectFile::create(v24, a3, (uint64_t)v28);
      goto LABEL_7;
    }
LABEL_19:
    *(_QWORD *)&v33.__val_ = llvm::object::object_category((llvm::object *)a1);
    llvm::errorCodeToError((llvm *)2, v33, &v25);
    *(_BYTE *)(a4 + 8) |= 1u;
    v8 = v25;
    goto LABEL_8;
  }
  if (((1 << a2) & 0x403A13FFDE8) != 0)
  {
    v7 = v5[1];
    v23[0] = *v5;
    v23[1] = v7;
    llvm::object::ObjectFile::createObjectFile((uint64_t)v23, a2);
LABEL_7:
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | BYTE8(v28[0]) & 1;
    v8 = *(llvm::object::IRObjectFile **)&v28[0];
LABEL_8:
    *(_QWORD *)a4 = v8;
    return;
  }
  if (((1 << a2) & 0x8000210) == 0)
  {
    v14 = operator new(0x30uLL);
    v15 = v5[1];
    v28[0] = *v5;
    v28[1] = v15;
    llvm::object::Binary::Binary((uint64_t)v14, 2, (uint64_t)v28);
    *v16 = &unk_1E0E24C30;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v16;
    return;
  }
  v9 = v5[1];
  v22[0] = *v5;
  v22[1] = v9;
  llvm::object::ObjectFile::createObjectFile((uint64_t)v22, a2);
  if (!a3 || (v31 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v31 & 1;
    v8 = v30;
    goto LABEL_8;
  }
  llvm::object::IRObjectFile::findBitcodeInObject(v30, v10, (uint64_t)v28);
  if ((v29 & 1) != 0)
  {
    v17 = *(_QWORD **)&v28[0];
    *(_QWORD *)&v28[0] = 0;
    v21 = v17;
    llvm::consumeError(&v21);
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v31 & 1;
    v12 = v30;
    v30 = 0;
  }
  else
  {
    v11 = v5[1];
    v20[0] = v28[0];
    v20[1] = v11;
    llvm::object::IRObjectFile::create(v20, a3, (uint64_t)&v26);
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v27 & 1;
    v12 = v26;
  }
  *(_QWORD *)a4 = v12;
  if ((v29 & 1) != 0)
  {
    v18 = *(_QWORD *)&v28[0];
    *(_QWORD *)&v28[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v30;
  v30 = 0;
  if (v19)
    (*(void (**)(llvm::object::IRObjectFile *))(*(_QWORD *)v19 + 8))(v19);
}

BOOL llvm::object::SymbolicFile::isSymbolicFile(unsigned int a1, uint64_t a2)
{
  if (a1 > 0x2A)
    return 0;
  if (((1 << a1) & 0x403B93FFFF8) != 0)
    return 1;
  return a1 == 1 && a2 != 0;
}

void llvm::object::COFFImportFile::~COFFImportFile(llvm::object::COFFImportFile *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

void llvm::object::COFFImportFile::moveSymbolNext(uint64_t a1, _QWORD *a2)
{
  ++*a2;
}

void *llvm::object::COFFImportFile::printSymbolName@<X0>(llvm::raw_ostream *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  void *result;

  if (!a3)
  {
    v7 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 5)
    {
      *(_WORD *)(v7 + 4) = 24432;
      *(_DWORD *)v7 = 1835622239;
      *((_QWORD *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, "__imp_", 6uLL);
    }
  }
  v8 = (const char *)(*(_QWORD *)(a2 + 16) + 20);
  v9 = strlen(v8);
  result = (void *)*((_QWORD *)this + 4);
  if (v9 > *((_QWORD *)this + 3) - (_QWORD)result)
  {
    result = llvm::raw_ostream::write(this, v8, v9);
LABEL_7:
    *a4 = 0;
    return result;
  }
  if (!v9)
    goto LABEL_7;
  result = memcpy(result, v8, v9);
  *((_QWORD *)this + 4) += v9;
  *a4 = 0;
  return result;
}

void llvm::object::COFFImportFile::getSymbolFlags(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = 2;
}

uint64_t llvm::object::COFFImportFile::symbol_begin(llvm::object::COFFImportFile *this)
{
  return 0;
}

uint64_t llvm::object::COFFImportFile::symbol_end(llvm::object::COFFImportFile *this)
{
  if ((*(_WORD *)(*((_QWORD *)this + 2) + 18) & 3) == 1)
    return 1;
  else
    return 2;
}

uint64_t llvm::object::COFFImportFile::is64Bit(llvm::object::COFFImportFile *this)
{
  return 0;
}

size_t llvm::object::ObjectFile::createWasmObjectFile@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  size_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD v10[2];

  v9 = 0;
  v4 = operator new(0x2C8uLL);
  v5 = a1[1];
  v10[0] = *a1;
  v10[1] = v5;
  result = llvm::object::WasmObjectFile::WasmObjectFile((size_t)v4, v10, &v9);
  v7 = v9;
  v8 = *(_BYTE *)(a2 + 8);
  if (v9)
  {
    *(_BYTE *)(a2 + 8) = v8 | 1;
    result = (*(uint64_t (**)(size_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)a2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 8) = v8 & 0xFE;
    *(_QWORD *)a2 = result;
  }
  return result;
}

size_t llvm::object::WasmObjectFile::WasmObjectFile(size_t a1, _OWORD *a2, _QWORD *a3)
{
  __int128 v5;
  uint64_t v6;
  void **v7;
  const void *Data;
  unint64_t v9;
  size_t v10;
  llvm::object *v11;
  uint64_t v12;
  const char *v13;
  _UNKNOWN **v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  const void *v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void *v49;
  llvm::object *v50;
  llvm::object *v51;
  const char *v52;
  _UNKNOWN **v53;
  std::string *v54;
  std::string::size_type v55;
  _UNKNOWN **v56;
  char *v57;
  _QWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *__p[4];
  _OWORD v63[2];
  std::string v64;
  void *v65[2];
  std::string::size_type v66;
  uint64_t v67[4];
  __int16 v68;
  _QWORD v69[2];
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v63[0] = *a2;
  v63[1] = v5;
  llvm::object::ObjectFile::ObjectFile(a1, 22, v63);
  *(_QWORD *)v6 = off_1E0E24E58;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v7 = (void **)(v6 + 72);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_BYTE *)(v6 + 504) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(_BYTE *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 576) = 0;
  *(_OWORD *)(v6 + 544) = 0u;
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_DWORD *)(v6 + 584) = -1;
  *(_WORD *)(v6 + 588) = 0;
  *(_BYTE *)(v6 + 590) = 0;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 692) = 0u;
  Data = (const void *)llvm::object::Binary::getData((llvm::object::Binary *)v6);
  if (v9 >= 4)
    v10 = 4;
  else
    v10 = v9;
  *(_QWORD *)(a1 + 48) = Data;
  *(_QWORD *)(a1 + 56) = v10;
  if (v9 < 4 || memcmp(Data, &unk_1812679FE, v10))
  {
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = (uint64_t)v11;
    v13 = "invalid magic number";
LABEL_7:
    *(_QWORD *)&v59 = v13;
    LOWORD(v61) = 259;
LABEL_8:
    v14 = llvm::object::object_category(v11);
    llvm::StringError::StringError(v12, (llvm::Twine *)&v59, 3, (uint64_t)v14);
    *a3 = v12;
    return a1;
  }
  v16 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  llvm::object::Binary::getData((llvm::object::Binary *)a1);
  if (v17 <= 7)
  {
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = (uint64_t)v11;
    v13 = "missing version number";
    goto LABEL_7;
  }
  v18 = *(unsigned int *)(v16 + 4);
  *(_DWORD *)(a1 + 64) = v18;
  if ((_DWORD)v18 != 1)
  {
    *(_QWORD *)&v59 = "invalid version number: ";
    *(_QWORD *)&v60 = v18;
    LOWORD(v61) = 2307;
    v11 = (llvm::object *)operator new(0x38uLL);
    v12 = (uint64_t)v11;
    goto LABEL_8;
  }
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  if ((unint64_t)v17 < 9)
    goto LABEL_56;
  v19 = v16 + v17;
  v20 = (unsigned __int8 *)(v16 + 8);
  v57 = "malformed uleb128, extends past end";
  v58 = a3;
  while (1)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    LODWORD(v59) = 0;
    HIDWORD(v59) = 0;
    *(_QWORD *)&v60 = 0;
    DWORD2(v60) = -1;
    v61 = 0u;
    memset(__p, 0, 26);
    *(_QWORD *)((char *)&v59 + 4) = ((_DWORD)v20 - v16);
    v25 = v20 + 1;
    v24 = *v20;
    LODWORD(v59) = *v20;
    do
    {
      if (&v25[v21] == (unsigned __int8 *)v19)
        goto LABEL_59;
      v26 = v22;
      v27 = v25[v21];
      v28 = v27 & 0x7F;
      if (v23 >= 0x40 && (v27 & 0x7F) != 0 || (v29 = v28 << v23, (unint64_t)(v28 << v23) >> v23 != v28))
      {
LABEL_58:
        v57 = "uleb128 too big for uint64";
LABEL_59:
        llvm::report_fatal_error((llvm *)v57, (const char *)1);
      }
      v22 += v29;
      v23 += 7;
      ++v21;
    }
    while ((v27 & 0x80) != 0);
    if (HIDWORD(v22))
      llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
    BYTE1(__p[3]) = 1;
    LOBYTE(__p[3]) = v21;
    if (!v22)
    {
      v50 = (llvm::object *)operator new(0x38uLL);
      v51 = v50;
      v52 = "zero length section";
LABEL_48:
      v67[0] = (uint64_t)v52;
      v68 = 259;
      v53 = llvm::object::object_category(v50);
      llvm::StringError::StringError((uint64_t)v51, (llvm::Twine *)v67, 3, (uint64_t)v53);
      goto LABEL_53;
    }
    v30 = &v25[v21];
    if ((unint64_t)&v30[v22] > v19)
    {
      v50 = (llvm::object *)operator new(0x38uLL);
      v51 = v50;
      v52 = "section too large";
      goto LABEL_48;
    }
    if (!(_DWORD)v24)
      break;
    if ((llvm::object::WasmSectionOrderChecker::isValidSectionOrder((uint64_t)v69, v24, 0, 0) & 1) == 0)
      goto LABEL_49;
LABEL_36:
    v39 = v22;
    *(_QWORD *)&v61 = v30;
    *((_QWORD *)&v61 + 1) = v22;
    *a3 = 0;
    llvm::object::WasmObjectFile::parseSection(a1, (unsigned int *)&v59, v67);
    v40 = v67[0];
    *a3 = v67[0];
    if (v40)
      goto LABEL_54;
    v41 = *(_QWORD *)(a1 + 80);
    if (v41 < *(_QWORD *)(a1 + 88))
    {
      v42 = v59;
      v43 = v61;
      *(_OWORD *)(v41 + 16) = v60;
      *(_OWORD *)(v41 + 32) = v43;
      *(_OWORD *)v41 = v42;
      *(_QWORD *)(v41 + 56) = 0;
      *(_QWORD *)(v41 + 64) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      v44 = __p[0];
      v45 = (char *)__p[1] - (char *)__p[0];
      if (__p[1] != __p[0])
      {
        v46 = v16;
        if (0xAAAAAAAAAAAAAAABLL * (v45 >> 3) >= 0xAAAAAAAAAAAAAABLL)
          abort();
        v47 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
        *(_QWORD *)(v41 + 48) = v47;
        *(_QWORD *)(v41 + 56) = v47;
        v48 = &v47[8 * (v45 >> 3)];
        *(_QWORD *)(v41 + 64) = v48;
        memcpy(v47, v44, v45);
        *(_QWORD *)(v41 + 56) = v48;
        v16 = v46;
        a3 = v58;
      }
      *(_WORD *)(v41 + 72) = __p[3];
      *(_QWORD *)(a1 + 80) = v41 + 80;
      v49 = __p[0];
      if (!__p[0])
        goto LABEL_15;
LABEL_44:
      __p[1] = v49;
      operator delete(v49);
      goto LABEL_15;
    }
    *(_QWORD *)(a1 + 80) = std::vector<llvm::object::WasmSection>::__push_back_slow_path<llvm::object::WasmSection const&>(v7, (uint64_t)&v59);
    v49 = __p[0];
    if (__p[0])
      goto LABEL_44;
LABEL_15:
    v20 = &v30[v39];
    if ((unint64_t)&v30[v39] >= v19)
      goto LABEL_56;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = (uint64_t)&v20[v21 + 1];
  v35 = v26 + v29;
  do
  {
    if (v35 == v31)
      goto LABEL_59;
    v36 = *(_BYTE *)(v34 + v31);
    v37 = v36 & 0x7F;
    if (v33 >= 0x40 && (v36 & 0x7F) != 0 || (unint64_t)(v37 << v33) >> v33 != v37)
      goto LABEL_58;
    v32 += v37 << v33;
    v33 += 7;
    ++v31;
  }
  while (v36 < 0);
  v38 = (uint64_t)&v30[v31];
  if (v38 + (unint64_t)v32 > (unint64_t)&v30[v22])
    llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
  *((_QWORD *)&v59 + 1) = &v30[v31];
  *(_QWORD *)&v60 = v32;
  v30 += (v31 + v32);
  LODWORD(v22) = v22 - (v31 + v32);
  if ((llvm::object::WasmSectionOrderChecker::isValidSectionOrder((uint64_t)v69, v24, v38, v32) & 1) != 0)
    goto LABEL_36;
LABEL_49:
  llvm::to_string<unsigned int>((unsigned int *)&v59, &v64);
  v54 = std::string::insert(&v64, 0, "out of order section type: ");
  v55 = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)v65 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v66 = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v51 = (llvm::object *)operator new(0x38uLL);
  v68 = 260;
  v67[0] = (uint64_t)v65;
  v56 = llvm::object::object_category(v51);
  llvm::StringError::StringError((uint64_t)v51, (llvm::Twine *)v67, 3, (uint64_t)v56);
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
LABEL_53:
  *a3 = v51;
LABEL_54:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_56:
  if (!*a3)
    *a3 = 0;
  return a1;
}

void llvm::object::WasmObjectFile::parseSection(size_t a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  char v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[4];
  __int16 v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = *((_QWORD *)a2 + 5);
  v16 = (char *)*((_QWORD *)a2 + 4);
  v4 = v16;
  v17 = &v16[v5];
  v15 = v16;
  v6 = *a2;
  switch((int)v6)
  {
    case 0:
      llvm::object::WasmObjectFile::parseCustomSection((_QWORD *)a1, (uint64_t)a2, (uint64_t)&v15, a3);
      return;
    case 1:
      llvm::object::WasmObjectFile::parseTypeSection(a1, (uint64_t)&v15, a3);
      return;
    case 2:
      llvm::object::WasmObjectFile::parseImportSection(a1, (uint64_t)&v15, a3);
      return;
    case 3:
      llvm::object::WasmObjectFile::parseFunctionSection((_QWORD *)a1, (uint64_t)&v15, a3);
      return;
    case 4:
      llvm::object::WasmObjectFile::parseTableSection(a1, (uint64_t)&v15, a3);
      return;
    case 5:
      llvm::object::WasmObjectFile::parseMemorySection(a1, (uint64_t)&v15, a3);
      return;
    case 6:
      llvm::object::WasmObjectFile::parseGlobalSection(a1, (uint64_t)&v15, (char *)a3);
      return;
    case 7:
      llvm::object::WasmObjectFile::parseExportSection(a1, (uint64_t)&v15, a3);
      return;
    case 8:
      llvm::object::WasmObjectFile::parseStartSection(a1, (uint64_t)&v15, a3);
      return;
    case 9:
      llvm::object::WasmObjectFile::parseElemSection(a1, (uint64_t)&v15, (char *)a3);
      return;
    case 10:
      llvm::object::WasmObjectFile::parseCodeSection(a1, (uint64_t)&v15, a3);
      return;
    case 11:
      llvm::object::WasmObjectFile::parseDataSection(a1, (uint64_t)&v15, (char *)a3);
      return;
    case 12:
      v7 = 0;
      v8 = 0;
      v9 = "malformed uleb128, extends past end";
      break;
    case 13:
      llvm::object::WasmObjectFile::parseTagSection(a1, (uint64_t)&v15, a3);
      return;
    default:
      v13[0] = "invalid section type: ";
      v13[2] = v6;
      v14 = 2307;
      v12 = operator new(0x30uLL);
      *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v12, v13, 3);
      return;
  }
  do
  {
    if (!v5)
      goto LABEL_27;
    v10 = *v4;
    v11 = *v4 & 0x7F;
    if (v8 >= 0x40 && (*v4 & 0x7F) != 0 || (unint64_t)(v11 << v8) >> v8 != v11)
    {
      v9 = "uleb128 too big for uint64";
LABEL_27:
      llvm::report_fatal_error((llvm *)v9, (const char *)1);
    }
    v7 += v11 << v8;
    v8 += 7;
    ++v4;
    --v5;
  }
  while (v10 < 0);
  if (HIDWORD(v7))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  if (!*(_BYTE *)(a1 + 504))
    *(_BYTE *)(a1 + 504) = 1;
  *(_QWORD *)(a1 + 496) = v7;
  *a3 = 0;
}

void llvm::object::WasmObjectFile::parseCustomSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  size_t v7;
  _WORD *v8;

  v8 = *(_WORD **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  switch(v7)
  {
    case 4uLL:
      if (!memcmp(v8, "name", v7))
        llvm::object::WasmObjectFile::parseNameSection((uint64_t)a1, a3, a4);
      goto LABEL_31;
    case 6uLL:
      if (*(_DWORD *)v8 != 1768716644 || v8[2] != 27502)
        goto LABEL_23;
      llvm::object::WasmObjectFile::parseDylinkSection((uint64_t)a1, a3, a4);
      if (!*a4)
        goto LABEL_31;
      return;
    case 7uLL:
      if (memcmp(v8, "linking", v7))
        goto LABEL_23;
      llvm::object::WasmObjectFile::parseLinkingSection((uint64_t)a1, a3, a4);
      if (!*a4)
        goto LABEL_31;
      return;
    case 8uLL:
      if (memcmp(v8, "dylink.0", v7))
        goto LABEL_23;
      llvm::object::WasmObjectFile::parseDylink0Section((uint64_t)a1, a3, a4);
      if (!*a4)
        goto LABEL_31;
      return;
    case 9uLL:
      if (memcmp(v8, "producers", v7))
        goto LABEL_23;
      llvm::object::WasmObjectFile::parseProducersSection((uint64_t)a1, a3, a4);
      if (!*a4)
        goto LABEL_31;
      return;
    case 0xFuLL:
      if (memcmp(v8, "target_features", v7))
        goto LABEL_23;
      llvm::object::WasmObjectFile::parseTargetFeaturesSection((uint64_t)a1, a3, a4);
      if (!*a4)
        goto LABEL_31;
      return;
    default:
      if (v7 < 6)
        goto LABEL_31;
LABEL_23:
      if (*(_DWORD *)v8 == 1869374834 && v8[2] == 11875)
      {
        llvm::object::WasmObjectFile::parseRelocSection(a1, a3, a4);
        if (*a4)
          return;
      }
LABEL_31:
      *a4 = 0;
      return;
  }
}

void llvm::object::WasmObjectFile::parseTypeSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  const char *v43;
  __int16 v44;
  void *__src;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[16];
  int v51;
  uint64_t v52;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v52 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 8);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if (v9 + v6 == *(_QWORD *)(a2 + 16))
      goto LABEL_80;
    v11 = *(_BYTE *)(v9 + v6);
    v12 = v11 & 0x7F;
    if (v8 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v8) >> v8 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_80:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v7 += v12 << v8;
    v8 += 7;
    ++v6;
  }
  while (v11 < 0);
  *(_QWORD *)(a2 + 8) = v9 + v6;
  if (HIDWORD(v7))
LABEL_81:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  std::vector<llvm::wasm::WasmSignature>::reserve(a1 + 280, v7);
  while ((_DWORD)v7)
  {
    __src = &v47;
    v46 = 0x100000000;
    v48 = v50;
    v49 = 0x400000000;
    v51 = 0;
    v14 = *(unsigned __int8 **)(a2 + 8);
    v13 = *(unsigned __int8 **)(a2 + 16);
    if (v14 == v13)
      goto LABEL_78;
    v15 = v14 + 1;
    *(_QWORD *)(a2 + 8) = v14 + 1;
    v16 = *v14;
    if (v16 == 96)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        if (&v15[v17] == v13)
LABEL_77:
          llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
        v20 = v15[v17];
        v21 = v20 & 0x7F;
        if (v19 >= 0x40 && (v20 & 0x7F) != 0 || (unint64_t)(v21 << v19) >> v19 != v21)
LABEL_76:
          llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
        v18 += v21 << v19;
        v19 += 7;
        ++v17;
      }
      while ((v20 & 0x80) != 0);
      *(_QWORD *)(a2 + 8) = &v15[v17];
      if (HIDWORD(v18))
        goto LABEL_81;
      if (v18 >= 5)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v18, 4);
      if ((_DWORD)v18)
      {
        while (1)
        {
          v22 = *(unsigned __int8 **)(a2 + 8);
          if (v22 == *(unsigned __int8 **)(a2 + 16))
            break;
          *(_QWORD *)(a2 + 8) = v22 + 1;
          v23 = *v22;
          v24 = v49;
          if (v49 >= (unint64_t)HIDWORD(v49))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v49 + 1, 4);
            v24 = v49;
          }
          *((_DWORD *)v48 + v24) = v23;
          LODWORD(v49) = v49 + 1;
          LODWORD(v18) = v18 - 1;
          if (!(_DWORD)v18)
            goto LABEL_32;
        }
LABEL_78:
        llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
      }
LABEL_32:
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = *(_QWORD *)(a2 + 8);
      do
      {
        if (v30 + v27 == *(_QWORD *)(a2 + 16))
          goto LABEL_77;
        v31 = *(_BYTE *)(v30 + v27);
        v32 = v31 & 0x7F;
        if (v29 >= 0x40 && (v31 & 0x7F) != 0 || (unint64_t)(v32 << v29) >> v29 != v32)
          goto LABEL_76;
        v28 += v32 << v29;
        v29 += 7;
        ++v27;
      }
      while (v31 < 0);
      *(_QWORD *)(a2 + 8) = v30 + v27;
      if (HIDWORD(v28))
        goto LABEL_81;
      for (; (_DWORD)v28; LODWORD(v28) = v28 - 1)
      {
        v33 = *(unsigned __int8 **)(a2 + 8);
        if (v33 == *(unsigned __int8 **)(a2 + 16))
          goto LABEL_78;
        *(_QWORD *)(a2 + 8) = v33 + 1;
        v34 = *v33;
        v35 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v47, v46 + 1, 4);
          v35 = v46;
        }
        *((_DWORD *)__src + v35) = v34;
        LODWORD(v46) = v46 + 1;
      }
      v36 = *(_QWORD *)(a1 + 288);
      if (v36 >= *(_QWORD *)(a1 + 296))
      {
        *(_QWORD *)(a1 + 288) = std::vector<llvm::wasm::WasmSignature>::__push_back_slow_path<llvm::wasm::WasmSignature>((void **)(a1 + 280), &__src);
        v26 = v48;
        if (v48 == v50)
          goto LABEL_30;
      }
      else
      {
        *(_QWORD *)v36 = v36 + 16;
        *(_QWORD *)(v36 + 8) = 0x100000000;
        if ((void **)v36 != &__src)
        {
          v37 = v46;
          if ((_DWORD)v46)
          {
            if (__src != &v47)
            {
              *(_QWORD *)v36 = __src;
              *(_DWORD *)(v36 + 8) = v37;
              *(_DWORD *)(v36 + 12) = HIDWORD(v46);
              __src = &v47;
              HIDWORD(v46) = 0;
              goto LABEL_57;
            }
            if (v46 < 2)
            {
              v38 = 1;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v36, (void *)(v36 + 16), v46, 4);
              v38 = v46;
              if (!(_DWORD)v46)
                goto LABEL_56;
            }
            memcpy(*(void **)v36, __src, 4 * v38);
LABEL_56:
            *(_DWORD *)(v36 + 8) = v37;
LABEL_57:
            LODWORD(v46) = 0;
          }
        }
        *(_QWORD *)(v36 + 24) = v36 + 40;
        *(_QWORD *)(v36 + 32) = 0x400000000;
        if ((void **)v36 != &__src)
        {
          v39 = v49;
          if ((_DWORD)v49)
          {
            if (v48 != v50)
            {
              *(_QWORD *)(v36 + 24) = v48;
              *(_DWORD *)(v36 + 32) = v39;
              *(_DWORD *)(v36 + 36) = HIDWORD(v49);
              v48 = v50;
              HIDWORD(v49) = 0;
              goto LABEL_68;
            }
            if (v49 < 5)
            {
              v40 = v49;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v36 + 24, (void *)(v36 + 40), v49, 4);
              v40 = v49;
              if (!(_DWORD)v49)
                goto LABEL_67;
            }
            memcpy(*(void **)(v36 + 24), v48, 4 * v40);
LABEL_67:
            *(_DWORD *)(v36 + 32) = v39;
LABEL_68:
            LODWORD(v49) = 0;
          }
        }
        *(_DWORD *)(v36 + 56) = v51;
        *(_QWORD *)(a1 + 288) = v36 + 64;
        v26 = v48;
        if (v48 == v50)
          goto LABEL_30;
      }
LABEL_29:
      free(v26);
      goto LABEL_30;
    }
    v25 = operator new(0x30uLL);
    v43 = "invalid signature type";
    v44 = 259;
    *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v25, &v43, 3);
    v26 = v48;
    if (v48 != v50)
      goto LABEL_29;
LABEL_30:
    if (__src != &v47)
      free(__src);
    LODWORD(v7) = v7 - 1;
    if (v16 != 96)
      return;
  }
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    v42 = 0;
  }
  else
  {
    v41 = operator new(0x30uLL);
    __src = "type section ended prematurely";
    LOWORD(v49) = 259;
    v42 = llvm::object::GenericBinaryError::GenericBinaryError(v41, &__src, 3);
  }
  *a3 = v42;
}

void llvm::object::WasmObjectFile::parseImportSection(size_t __sz@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  unint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  size_t v98;
  unint64_t v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  _BYTE v103[28];
  _BYTE v104[28];
  __int16 v105;
  uint64_t v106;

  v3 = a2;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v106 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 8);
  v9 = "malformed uleb128, extends past end";
  do
  {
    if (v8 + v5 == *(_QWORD *)(a2 + 16))
      goto LABEL_112;
    v10 = *(_BYTE *)(v8 + v5);
    v11 = v10 & 0x7F;
    if (v7 >= 0x40 && (v10 & 0x7F) != 0 || (unint64_t)(v11 << v7) >> v7 != v11)
    {
      v9 = "uleb128 too big for uint64";
LABEL_112:
      llvm::report_fatal_error((llvm *)v9, (const char *)1);
    }
    v6 += v11 << v7;
    v7 += 7;
    ++v5;
  }
  while (v10 < 0);
  *(_QWORD *)(a2 + 8) = v8 + v5;
  if (HIDWORD(v6))
LABEL_116:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v13 = *(_QWORD *)(__sz + 280);
  v12 = *(_QWORD *)(__sz + 288);
  v14 = *(_BYTE **)(__sz + 400);
  v98 = __sz;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(__sz + 416) - (_QWORD)v14) >> 3) < v6)
  {
    v15 = *(_BYTE **)(__sz + 408);
    v16 = (char *)operator new(72 * v6);
    v17 = &v16[72 * ((v15 - v14) / 72)];
    v18 = v17;
    if (v15 != v14)
    {
      v19 = &v16[72 * ((v15 - v14) / 72)];
      do
      {
        *(_OWORD *)(v19 - 72) = *(_OWORD *)(v15 - 72);
        v20 = *(_OWORD *)(v15 - 56);
        v21 = *(_OWORD *)(v15 - 40);
        v22 = *(_OWORD *)(v15 - 24);
        v18 = v19 - 72;
        *((_QWORD *)v19 - 1) = *((_QWORD *)v15 - 1);
        *(_OWORD *)(v19 - 24) = v22;
        *(_OWORD *)(v19 - 40) = v21;
        *(_OWORD *)(v19 - 56) = v20;
        v15 -= 72;
        v19 -= 72;
      }
      while (v15 != v14);
    }
    *(_QWORD *)(__sz + 400) = v18;
    *(_QWORD *)(__sz + 408) = v17;
    *(_QWORD *)(__sz + 416) = &v16[72 * v6];
    if (v14)
      operator delete(v14);
  }
  if (!(_DWORD)v6)
  {
LABEL_99:
    if (*(_QWORD *)(v3 + 8) != *(_QWORD *)(v3 + 16))
    {
      v91 = operator new(0x30uLL);
      v92 = "import section ended prematurely";
      goto LABEL_101;
    }
    *a3 = 0;
    return;
  }
  v23 = 0;
  v24 = 0;
  v94 = (unint64_t)(v12 - v13) >> 6;
  v95 = v3;
  v96 = v6;
  while (2)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v29 = *(_QWORD *)(v3 + 8);
    v28 = *(char **)(v3 + 16);
    do
    {
      if ((char *)(v29 + v25) == v28)
LABEL_109:
        llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
      v30 = *(_BYTE *)(v29 + v25);
      v31 = v30 & 0x7F;
      if (v27 >= 0x40 && (v30 & 0x7F) != 0 || (unint64_t)(v31 << v27) >> v27 != v31)
LABEL_108:
        llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
      v26 += v31 << v27;
      v27 += 7;
      ++v25;
    }
    while (v30 < 0);
    v32 = v29 + v25;
    *(_QWORD *)(v3 + 8) = v32;
    v33 = v26;
    v34 = v32 + v26;
    if (v34 > (unint64_t)v28)
      goto LABEL_114;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    *(_QWORD *)(v3 + 8) = v34;
    v38 = v29 + v33 + v25;
    do
    {
      if ((char *)(v38 + v35) == v28)
        goto LABEL_109;
      v39 = *(_BYTE *)(v38 + v35);
      v40 = v39 & 0x7F;
      if (v37 >= 0x40 && (v39 & 0x7F) != 0 || (unint64_t)(v40 << v37) >> v37 != v40)
        goto LABEL_108;
      v36 += v40 << v37;
      v37 += 7;
      ++v35;
    }
    while (v39 < 0);
    v41 = v34 + v35;
    *(_QWORD *)(v3 + 8) = v41;
    v42 = v36;
    v43 = (char *)(v41 + v36);
    if (v43 > v28)
LABEL_114:
      llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
    *(_QWORD *)(v3 + 8) = v43;
    if (v43 == v28)
LABEL_115:
      llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
    v44 = v43 + 1;
    *(_QWORD *)(v3 + 8) = v43 + 1;
    v45 = *v43;
    switch(*v43)
    {
      case 0:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        ++*(_DWORD *)(__sz + 680);
        v49 = v29 + v33 + v25 + v42 + v35 + 1;
        do
        {
          if ((char *)(v49 + v46) == v28)
            goto LABEL_109;
          v50 = *(_BYTE *)(v49 + v46);
          v51 = v50 & 0x7F;
          if (v48 >= 0x40 && (v50 & 0x7F) != 0 || (unint64_t)(v51 << v48) >> v48 != v51)
            goto LABEL_108;
          v47 += v51 << v48;
          v48 += 7;
          ++v46;
        }
        while (v50 < 0);
        *(_QWORD *)(v3 + 8) = &v44[v46];
        if (HIDWORD(v47))
          goto LABEL_116;
        if (v47 >= v94)
        {
          v91 = operator new(0x30uLL);
          v92 = "invalid function type";
          goto LABEL_101;
        }
        v52 = v47;
        v53 = BYTE1(v47);
        v24 = WORD1(v47);
        v55 = *(char **)(__sz + 408);
        v54 = *(_QWORD *)(__sz + 416);
        if ((unint64_t)v55 >= v54)
          goto LABEL_82;
        goto LABEL_16;
      case 1:
        if (v44 == v28)
          goto LABEL_115;
        v56 = v36;
        *(_QWORD *)(v3 + 8) = v43 + 2;
        v57 = v43[1];
        readLimits((uint64_t)&v101, v3);
        *(_QWORD *)&v104[20] = v102;
        *(_OWORD *)&v104[4] = v101;
        *(_OWORD *)v103 = *(_OWORD *)v104;
        *(_OWORD *)&v103[12] = *(_OWORD *)&v104[12];
        ++*(_DWORD *)(__sz + 676);
        if ((v57 - 111) >= 2)
        {
          v91 = operator new(0x30uLL);
          v92 = "invalid table element type";
          goto LABEL_101;
        }
        v52 = v57;
        v53 = 0;
        v24 = 0;
        v42 = v56;
        LODWORD(v6) = v96;
        v55 = *(char **)(__sz + 408);
        v54 = *(_QWORD *)(__sz + 416);
        if ((unint64_t)v55 >= v54)
          goto LABEL_82;
        goto LABEL_16;
      case 2:
        v58 = v36;
        readLimits((uint64_t)v104, v3);
        v52 = v104[0];
        v53 = v104[1];
        v24 = HIWORD(*(_DWORD *)v104);
        *(_OWORD *)v103 = *(_OWORD *)&v104[4];
        *(_DWORD *)&v103[16] = *(_DWORD *)&v104[20];
        if ((v104[0] & 4) != 0)
          *(_BYTE *)(__sz + 590) = 1;
        v42 = v58;
        v55 = *(char **)(__sz + 408);
        v54 = *(_QWORD *)(__sz + 416);
        if ((unint64_t)v55 >= v54)
          goto LABEL_82;
        goto LABEL_16;
      case 3:
        ++*(_DWORD *)(__sz + 672);
        if (v44 == v28)
          goto LABEL_115;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        *(_QWORD *)(v3 + 8) = v43 + 2;
        v52 = v43[1];
        v62 = v29 + v33 + v25 + v36 + (unint64_t)v35 + 2;
        do
        {
          if ((char *)(v62 + v59) == v28)
            llvm::report_fatal_error((llvm *)"malformed sleb128, extends past end", (const char *)1);
          v63 = *(_BYTE *)(v62 + v59);
          v64 = v63 & 0x7F;
          if (v61 >= 0x40)
          {
            if (((v60 >> 63) & 0x7F) != v64)
              goto LABEL_113;
          }
          else if (v61 == 63 && (_DWORD)v64 != 127 && (_DWORD)v64 != 0)
          {
LABEL_113:
            llvm::report_fatal_error((llvm *)"sleb128 too big for int64", (const char *)1);
          }
          v60 |= v64 << v61;
          v61 += 7;
          ++v59;
        }
        while (v63 < 0);
        v72 = (v63 & 0x40) == 0 || v61 > 0x3F;
        v73 = -1 << v61;
        if (v72)
          v73 = 0;
        v74 = v60 | v73;
        *(_QWORD *)(v3 + 8) = &v43[v59 + 2];
        if (v74 >= 2)
          llvm::report_fatal_error((llvm *)"LEB is outside Varuint1 range", (const char *)1);
        v53 = v74;
        v55 = *(char **)(__sz + 408);
        v54 = *(_QWORD *)(__sz + 416);
        if ((unint64_t)v55 >= v54)
          goto LABEL_82;
        goto LABEL_16;
      case 4:
        ++*(_DWORD *)(__sz + 684);
        if (v44 == v28)
          goto LABEL_115;
        *(_QWORD *)(v3 + 8) = v43 + 2;
        if (v43[1])
        {
          v91 = operator new(0x30uLL);
          v92 = "invalid attribute";
          goto LABEL_101;
        }
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = v29 + v33 + v25 + v36 + (unint64_t)v35 + 2;
        do
        {
          if ((char *)(v69 + v66) == v28)
            goto LABEL_109;
          v70 = *(_BYTE *)(v69 + v66);
          v71 = v70 & 0x7F;
          if (v68 >= 0x40 && (v70 & 0x7F) != 0 || (unint64_t)(v71 << v68) >> v68 != v71)
            goto LABEL_108;
          v67 += v71 << v68;
          v68 += 7;
          ++v66;
        }
        while (v70 < 0);
        *(_QWORD *)(v3 + 8) = &v43[v66 + 2];
        if (HIDWORD(v67))
          goto LABEL_116;
        if (v67 < v94)
        {
          v52 = v67;
          v53 = BYTE1(v67);
          v24 = WORD1(v67);
          v55 = *(char **)(__sz + 408);
          v54 = *(_QWORD *)(__sz + 416);
          if ((unint64_t)v55 < v54)
          {
LABEL_16:
            *(_QWORD *)v55 = v32;
            *((_QWORD *)v55 + 1) = v33;
            *((_QWORD *)v55 + 2) = v41;
            *((_QWORD *)v55 + 3) = v42;
            v55[32] = v45;
            *((_DWORD *)v55 + 10) = (v53 << 8) | ((_DWORD)v24 << 16) | v52;
            *(_OWORD *)(v55 + 44) = *(_OWORD *)v103;
            *(_OWORD *)(v55 + 56) = *(_OWORD *)&v103[12];
            *(_QWORD *)(__sz + 408) = v55 + 72;
            if (++v23 == (_DWORD)v6)
              goto LABEL_99;
          }
          else
          {
LABEL_82:
            v100 = v23;
            v75 = *(_BYTE **)(__sz + 400);
            v76 = 0x8E38E38E38E38E39 * ((v55 - v75) >> 3) + 1;
            if (v76 > 0x38E38E38E38E38ELL)
              abort();
            v77 = 0x8E38E38E38E38E39 * ((uint64_t)(v54 - (_QWORD)v75) >> 3);
            if (2 * v77 > v76)
              v76 = 2 * v77;
            if (v77 >= 0x1C71C71C71C71C7)
              v76 = 0x38E38E38E38E38ELL;
            v99 = v76;
            if (v76)
            {
              v97 = v53;
              if (v76 > 0x38E38E38E38E38ELL)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v78 = v52;
              v79 = v42;
              v80 = v41;
              v81 = v24;
              v82 = (char *)operator new(72 * v76);
              v24 = v81;
              v41 = v80;
              v42 = v79;
              v52 = v78;
              LODWORD(v6) = v96;
              v53 = v97;
            }
            else
            {
              v82 = 0;
            }
            v83 = &v82[8 * ((v55 - v75) >> 3)];
            *(_QWORD *)v83 = v32;
            *((_QWORD *)v83 + 1) = v33;
            *((_QWORD *)v83 + 2) = v41;
            *((_QWORD *)v83 + 3) = v42;
            v83[32] = v45;
            *((_DWORD *)v83 + 10) = (v53 << 8) | ((_DWORD)v24 << 16) | v52;
            *(_OWORD *)(v83 + 44) = *(_OWORD *)v103;
            *(_OWORD *)(v83 + 56) = *(_OWORD *)&v103[12];
            v84 = v83;
            if (v55 == v75)
            {
              __sz = v98;
              v85 = v99;
            }
            else
            {
              __sz = v98;
              v85 = v99;
              do
              {
                *(_OWORD *)(v84 - 72) = *(_OWORD *)(v55 - 72);
                v86 = *(_OWORD *)(v55 - 56);
                v87 = *(_OWORD *)(v55 - 40);
                v88 = *(_OWORD *)(v55 - 24);
                *((_QWORD *)v84 - 1) = *((_QWORD *)v55 - 1);
                *(_OWORD *)(v84 - 24) = v88;
                *(_OWORD *)(v84 - 40) = v87;
                *(_OWORD *)(v84 - 56) = v86;
                v84 -= 72;
                v55 -= 72;
              }
              while (v55 != v75);
              v55 = *(char **)(v98 + 400);
            }
            v89 = v83 + 72;
            *(_QWORD *)(__sz + 400) = v84;
            *(_QWORD *)(__sz + 408) = v83 + 72;
            *(_QWORD *)(__sz + 416) = &v82[72 * v85];
            v3 = v95;
            if (v55)
            {
              v90 = v24;
              operator delete(v55);
              v24 = v90;
            }
            *(_QWORD *)(__sz + 408) = v89;
            v23 = v100 + 1;
            if (v100 + 1 == (_DWORD)v6)
              goto LABEL_99;
          }
          continue;
        }
        v91 = operator new(0x30uLL);
        v92 = "invalid tag type";
LABEL_101:
        *(_QWORD *)v104 = v92;
        v105 = 259;
        *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v91, v104, 3);
        return;
      default:
        v91 = operator new(0x30uLL);
        v92 = "unexpected import kind";
        goto LABEL_101;
    }
  }
}

uint64_t llvm::object::WasmObjectFile::parseFunctionSection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  const void *v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  const char *v35;
  uint64_t result;
  void **v38;
  const char *v39;
  __int128 __p;
  _QWORD v41[3];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];

  v3 = a2;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = "malformed uleb128, extends past end";
  do
  {
    if (v8 + v5 == *(_QWORD *)(a2 + 16))
      goto LABEL_36;
    v10 = *(_BYTE *)(v8 + v5);
    v11 = v10 & 0x7F;
    if (v7 >= 0x40 && (v10 & 0x7F) != 0 || (unint64_t)(v11 << v7) >> v7 != v11)
    {
      v9 = "uleb128 too big for uint64";
LABEL_36:
      llvm::report_fatal_error((llvm *)v9, (const char *)1);
    }
    v6 += v11 << v7;
    v7 += 7;
    ++v5;
  }
  while (v10 < 0);
  *(_QWORD *)(a2 + 8) = v8 + v5;
  if (HIDWORD(v6))
LABEL_37:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v38 = (void **)(a1 + 64);
  std::vector<llvm::wasm::WasmFunction>::reserve((uint64_t)(a1 + 64), v6);
  if ((_DWORD)v6)
  {
    v12 = (a1[36] - a1[35]) >> 6;
    v13 = (__int128 *)((char *)&v44 + 8);
    while (1)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      LODWORD(v6) = v6 - 1;
      v18 = *(_QWORD *)(v3 + 8);
      do
      {
        if (v18 + v15 == *(_QWORD *)(v3 + 16))
          llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
        v19 = *(_BYTE *)(v18 + v15);
        v20 = v19 & 0x7F;
        if (v17 >= 0x40 && (v19 & 0x7F) != 0 || (unint64_t)(v20 << v17) >> v17 != v20)
          llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
        v16 += v20 << v17;
        v17 += 7;
        ++v15;
      }
      while (v19 < 0);
      *(_QWORD *)(v3 + 8) = v18 + v15;
      if (HIDWORD(v16))
        goto LABEL_37;
      if (v16 >= v12)
      {
        v34 = operator new(0x30uLL);
        v35 = "invalid function type";
LABEL_30:
        v39 = v35;
        LOWORD(v41[1]) = 259;
        result = llvm::object::GenericBinaryError::GenericBinaryError(v34, &v39, 3);
        goto LABEL_32;
      }
      LOBYTE(v43) = 0;
      LOBYTE(v44) = 0;
      __p = 0u;
      memset(v41, 0, sizeof(v41));
      *v13 = 0u;
      v13[1] = 0u;
      HIDWORD(v39) = v16;
      v21 = a1[65];
      if (v21 < a1[66])
        break;
      a1[65] = std::vector<llvm::wasm::WasmFunction>::__push_back_slow_path<llvm::wasm::WasmFunction const&>(v38, (uint64_t)&v39);
      v14 = (void *)__p;
      if ((_QWORD)__p)
        goto LABEL_11;
LABEL_12:
      if (!(_DWORD)v6)
        goto LABEL_27;
    }
    *(_QWORD *)v21 = v39;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    v22 = (const void *)__p;
    v23 = *((_QWORD *)&__p + 1) - __p;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      if (v23 < 0)
        abort();
      v24 = v3;
      v25 = a1;
      v26 = v13;
      v27 = v12;
      v28 = (char *)operator new(*((_QWORD *)&__p + 1) - __p);
      *(_QWORD *)(v21 + 8) = v28;
      *(_QWORD *)(v21 + 16) = v28;
      v29 = &v28[8 * (v23 >> 3)];
      *(_QWORD *)(v21 + 24) = v29;
      memcpy(v28, v22, v23);
      *(_QWORD *)(v21 + 16) = v29;
      v12 = v27;
      v13 = v26;
      a1 = v25;
      v3 = v24;
    }
    v30 = v42;
    *(_OWORD *)(v21 + 32) = *(_OWORD *)&v41[1];
    *(_OWORD *)(v21 + 48) = v30;
    v31 = v43;
    v32 = v44;
    v33 = v45[0];
    *(_OWORD *)(v21 + 108) = *(_OWORD *)((char *)v45 + 12);
    *(_OWORD *)(v21 + 80) = v32;
    *(_OWORD *)(v21 + 96) = v33;
    *(_OWORD *)(v21 + 64) = v31;
    a1[65] = v21 + 128;
    v14 = (void *)__p;
    if (!(_QWORD)__p)
      goto LABEL_12;
LABEL_11:
    *((_QWORD *)&__p + 1) = v14;
    operator delete(v14);
    goto LABEL_12;
  }
LABEL_27:
  if (*(_QWORD *)(v3 + 8) != *(_QWORD *)(v3 + 16))
  {
    v34 = operator new(0x30uLL);
    v35 = "function section ended prematurely";
    goto LABEL_30;
  }
  result = 0;
LABEL_32:
  *a3 = result;
  return result;
}

void llvm::object::WasmObjectFile::parseTableSection(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  void *v39;
  const char *v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  _OWORD v44[2];
  __int16 v45;
  uint64_t v46;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v46 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 704) = -858993459 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if (v9 + v6 == *(_QWORD *)(a2 + 16))
      goto LABEL_43;
    v11 = *(_BYTE *)(v9 + v6);
    v12 = v11 & 0x7F;
    if (v8 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v8) >> v8 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_43:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v7 += v12 << v8;
    v8 += 7;
    ++v6;
  }
  while (v11 < 0);
  *(_QWORD *)(a2 + 8) = v9 + v6;
  if (HIDWORD(v7))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v13 = *(_BYTE **)(a1 + 304);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 320) - (_QWORD)v13) >> 3) < v7)
  {
    v14 = *(_BYTE **)(a1 + 312);
    v15 = (char *)operator new(56 * v7);
    v16 = &v15[56 * ((v14 - v13) / 56)];
    v17 = v16;
    if (v14 != v13)
    {
      v18 = &v15[56 * ((v14 - v13) / 56)];
      do
      {
        v19 = *(_OWORD *)(v14 - 56);
        v20 = *(_OWORD *)(v14 - 40);
        v21 = *(_OWORD *)(v14 - 24);
        v17 = v18 - 56;
        *((_QWORD *)v18 - 1) = *((_QWORD *)v14 - 1);
        *(_OWORD *)(v18 - 24) = v21;
        *(_OWORD *)(v18 - 40) = v20;
        *(_OWORD *)(v18 - 56) = v19;
        v14 -= 56;
        v18 -= 56;
      }
      while (v14 != v13);
    }
    *(_QWORD *)(a1 + 304) = v17;
    *(_QWORD *)(a1 + 312) = v16;
    *(_QWORD *)(a1 + 320) = &v15[56 * v7];
    if (v13)
      operator delete(v13);
  }
  for (; (_DWORD)v7; LODWORD(v7) = v7 - 1)
  {
    v22 = *(char **)(a2 + 8);
    if (v22 == *(char **)(a2 + 16))
      llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
    *(_QWORD *)(a2 + 8) = v22 + 1;
    v23 = *v22;
    readLimits((uint64_t)&v41, a2);
    *(_QWORD *)((char *)&v44[1] + 7) = v42;
    *(_OWORD *)((char *)v44 + 7) = v41;
    v43[0] = v44[0];
    *(_OWORD *)((char *)v43 + 15) = *(_OWORD *)((char *)v44 + 15);
    v25 = *(char **)(a1 + 304);
    v24 = *(char **)(a1 + 312);
    v26 = (v24 - v25) / 56;
    v27 = *(_DWORD *)(a1 + 676) + v26;
    v28 = *(_QWORD *)(a1 + 320);
    if ((unint64_t)v24 >= v28)
    {
      v29 = v26 + 1;
      if ((unint64_t)(v26 + 1) > 0x492492492492492)
        abort();
      v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v28 - (_QWORD)v25) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x249249249249249)
        v31 = 0x492492492492492;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0x492492492492492)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v32 = (char *)operator new(56 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[56 * v26];
      *(_DWORD *)v33 = v27;
      v33[8] = v23;
      *(_OWORD *)(v33 + 9) = v43[0];
      *(_OWORD *)(v33 + 24) = *(_OWORD *)((char *)v43 + 15);
      *((_QWORD *)v33 + 5) = 0;
      *((_QWORD *)v33 + 6) = 0;
      v34 = v33;
      if (v24 != v25)
      {
        do
        {
          v35 = *(_OWORD *)(v24 - 56);
          v36 = *(_OWORD *)(v24 - 40);
          v37 = *(_OWORD *)(v24 - 24);
          *((_QWORD *)v34 - 1) = *((_QWORD *)v24 - 1);
          *(_OWORD *)(v34 - 24) = v37;
          *(_OWORD *)(v34 - 40) = v36;
          *(_OWORD *)(v34 - 56) = v35;
          v34 -= 56;
          v24 -= 56;
        }
        while (v24 != v25);
        v24 = *(char **)(a1 + 304);
      }
      v38 = v33 + 56;
      *(_QWORD *)(a1 + 304) = v34;
      *(_QWORD *)(a1 + 312) = v33 + 56;
      *(_QWORD *)(a1 + 320) = &v32[56 * v31];
      if (v24)
        operator delete(v24);
      *(_QWORD *)(a1 + 312) = v38;
      if (*(v38 - 48) - 111 >= 2)
      {
LABEL_38:
        v39 = operator new(0x30uLL);
        v40 = "invalid table element type";
LABEL_39:
        *(_QWORD *)&v44[0] = v40;
        v45 = 259;
        *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v39, v44, 3);
        return;
      }
    }
    else
    {
      *(_DWORD *)v24 = v27;
      v24[8] = v23;
      *(_OWORD *)(v24 + 9) = v43[0];
      *(_OWORD *)(v24 + 24) = *(_OWORD *)((char *)v43 + 15);
      *((_QWORD *)v24 + 5) = 0;
      *((_QWORD *)v24 + 6) = 0;
      *(_QWORD *)(a1 + 312) = v24 + 56;
      if (v24[8] - 111 >= 2)
        goto LABEL_38;
    }
  }
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
  {
    v39 = operator new(0x30uLL);
    v40 = "table section ended prematurely";
    goto LABEL_39;
  }
  *a3 = 0;
}

uint64_t llvm::object::WasmObjectFile::parseMemorySection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  char *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  void *v31;
  uint64_t result;
  __int128 v33;
  uint64_t v34;
  __int16 v35;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if (v9 + v6 == *(_QWORD *)(a2 + 16))
      goto LABEL_41;
    v11 = *(_BYTE *)(v9 + v6);
    v12 = v11 & 0x7F;
    if (v8 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v8) >> v8 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_41:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v7 += v12 << v8;
    v8 += 7;
    ++v6;
  }
  while (v11 < 0);
  *(_QWORD *)(a2 + 8) = v9 + v6;
  if (HIDWORD(v7))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v13 = *(_BYTE **)(a1 + 328);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 344) - (_QWORD)v13) >> 3) < v7)
  {
    v14 = *(_BYTE **)(a1 + 336);
    v15 = (char *)operator new(24 * v7);
    v16 = &v15[24 * ((v14 - v13) / 24)];
    v17 = v16;
    if (v14 != v13)
    {
      v18 = &v15[24 * ((v14 - v13) / 24)];
      do
      {
        v19 = *(_OWORD *)(v14 - 24);
        v17 = v18 - 24;
        *((_QWORD *)v18 - 1) = *((_QWORD *)v14 - 1);
        *(_OWORD *)(v18 - 24) = v19;
        v14 -= 24;
        v18 -= 24;
      }
      while (v14 != v13);
    }
    *(_QWORD *)(a1 + 328) = v17;
    *(_QWORD *)(a1 + 336) = v16;
    *(_QWORD *)(a1 + 344) = &v15[24 * v7];
    if (v13)
      operator delete(v13);
  }
  for (; (_DWORD)v7; LODWORD(v7) = v7 - 1)
  {
    v33 = 0uLL;
    v34 = 0;
    readLimits((uint64_t)&v33, a2);
    if ((v33 & 4) != 0)
      *(_BYTE *)(a1 + 590) = 1;
    v22 = *(char **)(a1 + 336);
    v21 = *(_QWORD *)(a1 + 344);
    if ((unint64_t)v22 < v21)
    {
      *(_OWORD *)v22 = v33;
      *((_QWORD *)v22 + 2) = v34;
      v20 = v22 + 24;
    }
    else
    {
      v23 = *(_BYTE **)(a1 + 328);
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 3) + 1;
      if (v24 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v23) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v27 = (char *)operator new(24 * v26);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[8 * ((v22 - v23) >> 3)];
      *(_OWORD *)v28 = v33;
      *((_QWORD *)v28 + 2) = v34;
      v29 = v28;
      if (v22 != v23)
      {
        do
        {
          v30 = *(_OWORD *)(v22 - 24);
          *((_QWORD *)v29 - 1) = *((_QWORD *)v22 - 1);
          *(_OWORD *)(v29 - 24) = v30;
          v29 -= 24;
          v22 -= 24;
        }
        while (v22 != v23);
        v22 = *(char **)(a1 + 328);
      }
      v20 = v28 + 24;
      *(_QWORD *)(a1 + 328) = v29;
      *(_QWORD *)(a1 + 336) = v28 + 24;
      *(_QWORD *)(a1 + 344) = &v27[24 * v26];
      if (v22)
        operator delete(v22);
    }
    *(_QWORD *)(a1 + 336) = v20;
  }
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    result = 0;
  }
  else
  {
    v31 = operator new(0x30uLL);
    *(_QWORD *)&v33 = "memory section ended prematurely";
    v35 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v31, &v33, 3);
  }
  *a3 = result;
  return result;
}

uint64_t llvm::object::WasmObjectFile::parseTagSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  void *v42;
  const char *v43;
  uint64_t result;
  uint64_t *v45;
  const char *v46;
  __int16 v47;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  *(_DWORD *)(a1 + 696) = -858993459 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if (v9 + v6 == *(_QWORD *)(a2 + 16))
      goto LABEL_54;
    v11 = *(_BYTE *)(v9 + v6);
    v12 = v11 & 0x7F;
    if (v8 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v8) >> v8 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_54:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v7 += v12 << v8;
    v8 += 7;
    ++v6;
  }
  while (v11 < 0);
  *(_QWORD *)(a2 + 8) = v9 + v6;
  if (HIDWORD(v7))
LABEL_55:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v13 = *(_BYTE **)(a1 + 376);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 392) - (_QWORD)v13) >> 3) < v7)
  {
    v14 = *(_BYTE **)(a1 + 384);
    v15 = (char *)operator new(24 * v7);
    v16 = &v15[24 * ((v14 - v13) / 24)];
    v17 = v16;
    if (v14 != v13)
    {
      v18 = &v15[24 * ((v14 - v13) / 24)];
      do
      {
        v19 = *(_OWORD *)(v14 - 24);
        v17 = v18 - 24;
        *((_QWORD *)v18 - 1) = *((_QWORD *)v14 - 1);
        *(_OWORD *)(v18 - 24) = v19;
        v14 -= 24;
        v18 -= 24;
      }
      while (v14 != v13);
    }
    *(_QWORD *)(a1 + 376) = v17;
    *(_QWORD *)(a1 + 384) = v16;
    *(_QWORD *)(a1 + 392) = &v15[24 * v7];
    if (v13)
      operator delete(v13);
  }
  v45 = a3;
  if ((_DWORD)v7)
  {
    v20 = (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 6;
    while (1)
    {
      v22 = *(_BYTE **)(a2 + 8);
      v21 = *(_BYTE **)(a2 + 16);
      if (v22 == v21)
        llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
      v23 = v22 + 1;
      *(_QWORD *)(a2 + 8) = v22 + 1;
      if (*v22)
      {
        v42 = operator new(0x30uLL);
        v43 = "invalid attribute";
        goto LABEL_49;
      }
      v24 = 0;
      v25 = 0;
      v26 = 0;
      LODWORD(v7) = v7 - 1;
      do
      {
        if (&v23[v24] == v21)
          llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
        v27 = v23[v24];
        v28 = v27 & 0x7F;
        if (v26 >= 0x40 && (v27 & 0x7F) != 0 || (unint64_t)(v28 << v26) >> v26 != v28)
          llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
        v25 += v28 << v26;
        v26 += 7;
        ++v24;
      }
      while (v27 < 0);
      *(_QWORD *)(a2 + 8) = &v23[v24];
      if (HIDWORD(v25))
        goto LABEL_55;
      if (v25 >= v20)
        break;
      v29 = *(_BYTE **)(a1 + 376);
      v30 = *(char **)(a1 + 384);
      v31 = (v30 - v29) / 24;
      v32 = *(_DWORD *)(a1 + 684) + v31;
      v33 = *(_QWORD *)(a1 + 392);
      if ((unint64_t)v30 < v33)
      {
        *(_DWORD *)v30 = v32;
        *((_DWORD *)v30 + 1) = v25;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = 0;
        *(_QWORD *)(a1 + 384) = v30 + 24;
        if (!(_DWORD)v7)
          goto LABEL_44;
      }
      else
      {
        v34 = v31 + 1;
        if ((unint64_t)(v31 + 1) > 0xAAAAAAAAAAAAAAALL)
          abort();
        v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v29) >> 3);
        if (2 * v35 > v34)
          v34 = 2 * v35;
        if (v35 >= 0x555555555555555)
          v36 = 0xAAAAAAAAAAAAAAALL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v37 = (char *)operator new(24 * v36);
        }
        else
        {
          v37 = 0;
        }
        v38 = &v37[24 * v31];
        *(_DWORD *)v38 = v32;
        *((_DWORD *)v38 + 1) = v25;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = 0;
        v39 = v38;
        if (v30 != v29)
        {
          do
          {
            v40 = *(_OWORD *)(v30 - 24);
            *((_QWORD *)v39 - 1) = *((_QWORD *)v30 - 1);
            *(_OWORD *)(v39 - 24) = v40;
            v39 -= 24;
            v30 -= 24;
          }
          while (v30 != v29);
          v30 = *(char **)(a1 + 376);
        }
        v41 = v38 + 24;
        *(_QWORD *)(a1 + 376) = v39;
        *(_QWORD *)(a1 + 384) = v38 + 24;
        *(_QWORD *)(a1 + 392) = &v37[24 * v36];
        if (v30)
          operator delete(v30);
        *(_QWORD *)(a1 + 384) = v41;
        if (!(_DWORD)v7)
          goto LABEL_44;
      }
    }
    v42 = operator new(0x30uLL);
    v43 = "invalid tag type";
    goto LABEL_49;
  }
LABEL_44:
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
  {
    v42 = operator new(0x30uLL);
    v43 = "tag section ended prematurely";
LABEL_49:
    v46 = v43;
    v47 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v42, &v46, 3);
    goto LABEL_50;
  }
  result = 0;
LABEL_50:
  *v45 = result;
  return result;
}

void llvm::object::WasmObjectFile::parseGlobalSection(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE *v28;
  char v29;
  uint64_t v30;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  *(_DWORD *)(a1 + 700) = -858993459 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if (v9 + v6 == *(_QWORD *)(a2 + 16))
      goto LABEL_60;
    v11 = *(_BYTE *)(v9 + v6);
    v12 = v11 & 0x7F;
    if (v8 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v8) >> v8 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_60:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v7 += v12 << v8;
    v8 += 7;
    ++v6;
  }
  while (v11 < 0);
  *(_QWORD *)(a2 + 8) = v9 + v6;
  if (HIDWORD(v7))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v13 = *(_BYTE **)(a1 + 352);
  if (v7 > (uint64_t)(*(_QWORD *)(a1 + 368) - (_QWORD)v13) >> 6)
  {
    v14 = *(_BYTE **)(a1 + 360);
    v15 = (char *)operator new(v7 << 6);
    v16 = &v15[(v14 - v13) & 0xFFFFFFFFFFFFFFC0];
    v17 = v16;
    if (v14 != v13)
    {
      v18 = &v15[(v14 - v13) & 0xFFFFFFFFFFFFFFC0];
      do
      {
        v19 = *((_OWORD *)v14 - 4);
        v20 = *((_OWORD *)v14 - 3);
        v21 = *((_OWORD *)v14 - 1);
        v17 = v18 - 64;
        *((_OWORD *)v18 - 2) = *((_OWORD *)v14 - 2);
        *((_OWORD *)v18 - 1) = v21;
        *((_OWORD *)v18 - 4) = v19;
        *((_OWORD *)v18 - 3) = v20;
        v14 -= 64;
        v18 -= 64;
      }
      while (v14 != v13);
    }
    *(_QWORD *)(a1 + 352) = v17;
    *(_QWORD *)(a1 + 360) = v16;
    *(_QWORD *)(a1 + 368) = &v15[64 * v7];
    if (v13)
      operator delete(v13);
  }
  if ((_DWORD)v7)
  {
    v22 = *(_OWORD **)(a1 + 360);
    while (1)
    {
      v53 = 0u;
      v54 = 0u;
      LODWORD(v51) = *(_DWORD *)(a1 + 672) + (((unint64_t)v22 - *(_QWORD *)(a1 + 352)) >> 6);
      v24 = *(_BYTE **)(a2 + 8);
      v23 = *(_BYTE **)(a2 + 16);
      if (v24 == v23)
        llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      LODWORD(v7) = v7 - 1;
      v28 = v24 + 1;
      *(_QWORD *)(a2 + 8) = v24 + 1;
      BYTE4(v51) = *v24;
      do
      {
        if (&v28[v25] == v23)
          llvm::report_fatal_error((llvm *)"malformed sleb128, extends past end", (const char *)1);
        v29 = v28[v25];
        v30 = v29 & 0x7F;
        if (v27 >= 0x40)
        {
          if (((v26 >> 63) & 0x7F) != v30)
            goto LABEL_58;
        }
        else if (v27 == 63 && (_DWORD)v30 != 127 && (_DWORD)v30 != 0)
        {
LABEL_58:
          llvm::report_fatal_error((llvm *)"sleb128 too big for int64", (const char *)1);
        }
        v26 |= v30 << v27;
        v27 += 7;
        ++v25;
      }
      while (v29 < 0);
      v32 = (v29 & 0x40) == 0 || v27 > 0x3F;
      v33 = -1 << v27;
      if (v32)
        v33 = 0;
      v34 = v26 | v33;
      *(_QWORD *)(a2 + 8) = &v28[v25];
      if (v34 >= 2)
        llvm::report_fatal_error((llvm *)"LEB is outside Varuint1 range", (const char *)1);
      BYTE5(v51) = v34;
      readInitExpr(a3, (uint64_t)&v51 + 8, a2);
      if (*(_QWORD *)a3)
        break;
      v36 = *(char **)(a1 + 360);
      v35 = *(_QWORD *)(a1 + 368);
      if ((unint64_t)v36 < v35)
      {
        *(_OWORD *)v36 = v51;
        *((_OWORD *)v36 + 1) = v52;
        *((_OWORD *)v36 + 2) = v53;
        *((_OWORD *)v36 + 3) = v54;
        v22 = v36 + 64;
        *(_QWORD *)(a1 + 360) = v36 + 64;
        if (!(_DWORD)v7)
          goto LABEL_53;
      }
      else
      {
        v37 = *(char **)(a1 + 352);
        v38 = (v36 - v37) >> 6;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 58)
          abort();
        v40 = v35 - (_QWORD)v37;
        if (v40 >> 5 > v39)
          v39 = v40 >> 5;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFC0)
          v41 = 0x3FFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 >> 58)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v42 = (char *)operator new(v41 << 6);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[64 * v38];
        v44 = v52;
        *(_OWORD *)v43 = v51;
        *((_OWORD *)v43 + 1) = v44;
        v45 = v54;
        *((_OWORD *)v43 + 2) = v53;
        *((_OWORD *)v43 + 3) = v45;
        v46 = v43;
        if (v36 != v37)
        {
          do
          {
            v47 = *((_OWORD *)v36 - 4);
            v48 = *((_OWORD *)v36 - 3);
            v49 = *((_OWORD *)v36 - 1);
            *((_OWORD *)v46 - 2) = *((_OWORD *)v36 - 2);
            *((_OWORD *)v46 - 1) = v49;
            *((_OWORD *)v46 - 4) = v47;
            *((_OWORD *)v46 - 3) = v48;
            v46 -= 64;
            v36 -= 64;
          }
          while (v36 != v37);
          v36 = *(char **)(a1 + 352);
        }
        v22 = v43 + 64;
        *(_QWORD *)(a1 + 352) = v46;
        *(_QWORD *)(a1 + 360) = v43 + 64;
        *(_QWORD *)(a1 + 368) = &v42[64 * v41];
        if (v36)
          operator delete(v36);
        *(_QWORD *)(a1 + 360) = v22;
        if (!(_DWORD)v7)
          goto LABEL_53;
      }
    }
  }
  else
  {
LABEL_53:
    if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)a3 = 0;
    }
    else
    {
      v50 = operator new(0x30uLL);
      *(_QWORD *)&v51 = "global section ended prematurely";
      LOWORD(v53) = 259;
      *(_QWORD *)a3 = llvm::object::GenericBinaryError::GenericBinaryError(v50, &v51, 3);
    }
  }
}

uint64_t llvm::object::WasmObjectFile::parseExportSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  char *v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  uint64_t result;
  void *v58;
  const char *v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  const char *v63;
  __int16 v64;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if (v9 + v6 == *(_QWORD *)(a2 + 16))
      goto LABEL_69;
    v11 = *(_BYTE *)(v9 + v6);
    v12 = v11 & 0x7F;
    if (v8 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v8) >> v8 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_69:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v7 += v12 << v8;
    v8 += 7;
    ++v6;
  }
  while (v11 < 0);
  *(_QWORD *)(a2 + 8) = v9 + v6;
  if (HIDWORD(v7))
LABEL_70:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v13 = *(_BYTE **)(a1 + 424);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 440) - (_QWORD)v13) >> 3) < v7)
  {
    v14 = *(_BYTE **)(a1 + 432);
    v15 = (char *)operator new(24 * v7);
    v16 = &v15[24 * ((v14 - v13) / 24)];
    v17 = v16;
    if (v14 != v13)
    {
      v18 = &v15[24 * ((v14 - v13) / 24)];
      do
      {
        v19 = *(_OWORD *)(v14 - 24);
        v17 = v18 - 24;
        *((_QWORD *)v18 - 1) = *((_QWORD *)v14 - 1);
        *(_OWORD *)(v18 - 24) = v19;
        v14 -= 24;
        v18 -= 24;
      }
      while (v14 != v13);
    }
    *(_QWORD *)(a1 + 424) = v17;
    *(_QWORD *)(a1 + 432) = v16;
    *(_QWORD *)(a1 + 440) = &v15[24 * v7];
    if (v13)
      operator delete(v13);
  }
  v60 = a3;
  if ((_DWORD)v7)
  {
    v20 = 0;
    v61 = a1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v25 = *(_QWORD *)(a2 + 8);
      v24 = *(unsigned __int8 **)(a2 + 16);
      do
      {
        if ((unsigned __int8 *)(v25 + v21) == v24)
LABEL_67:
          llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
        v26 = *(_BYTE *)(v25 + v21);
        v27 = v26 & 0x7F;
        if (v23 >= 0x40 && (v26 & 0x7F) != 0 || (unint64_t)(v27 << v23) >> v23 != v27)
LABEL_66:
          llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
        v22 += v27 << v23;
        v23 += 7;
        ++v21;
      }
      while (v26 < 0);
      v28 = v25 + v21;
      *(_QWORD *)(a2 + 8) = v28;
      v29 = v22;
      v30 = (unsigned __int8 *)(v28 + v22);
      if (v30 > v24)
        llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
      *(_QWORD *)(a2 + 8) = v30;
      if (v30 == v24)
        llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = v30 + 1;
      *(_QWORD *)(a2 + 8) = v30 + 1;
      v35 = *v30;
      v36 = v25 + v29 + v21 + 1;
      do
      {
        if ((unsigned __int8 *)(v36 + v31) == v24)
          goto LABEL_67;
        v37 = *(_BYTE *)(v36 + v31);
        v38 = v37 & 0x7F;
        if (v33 >= 0x40 && (v37 & 0x7F) != 0 || (unint64_t)(v38 << v33) >> v33 != v38)
          goto LABEL_66;
        v32 += v38 << v33;
        v33 += 7;
        ++v31;
      }
      while (v37 < 0);
      *(_QWORD *)(a2 + 8) = &v34[v31];
      if (HIDWORD(v32))
        goto LABEL_70;
      switch(v35)
      {
        case 0:
          v39 = *(unsigned int *)(a1 + 680);
          if (v32 < v39
            || (v40 = *(_QWORD *)(a1 + 512), v39 + ((*(_QWORD *)(a1 + 520) - v40) >> 7) <= v32))
          {
            v58 = operator new(0x30uLL);
            v59 = "invalid function export";
LABEL_64:
            v63 = v59;
            v64 = 259;
            result = llvm::object::GenericBinaryError::GenericBinaryError(v58, &v63, 3);
            goto LABEL_65;
          }
          v41 = v40 + ((unint64_t)(v32 - v39) << 7);
          *(_QWORD *)(v41 + 64) = v28;
          v42 = v41 + 64;
          v43 = *(unsigned __int8 *)(v42 + 16);
          *(_QWORD *)(v42 + 8) = v29;
          if (!v43)
            *(_BYTE *)(v42 + 16) = 1;
LABEL_40:
          v45 = *(char **)(a1 + 432);
          v44 = *(_QWORD *)(a1 + 440);
          if ((unint64_t)v45 < v44)
          {
            *(_QWORD *)v45 = v28;
            *((_QWORD *)v45 + 1) = v29;
            v45[16] = v35;
            *((_DWORD *)v45 + 5) = v32;
            *(_QWORD *)(a1 + 432) = v45 + 24;
            if (++v20 == (_DWORD)v7)
              goto LABEL_58;
          }
          else
          {
            v46 = *(_BYTE **)(a1 + 424);
            v47 = 0xAAAAAAAAAAAAAAABLL * ((v45 - v46) >> 3) + 1;
            if (v47 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v46) >> 3);
            if (2 * v48 > v47)
              v47 = 2 * v48;
            if (v48 >= 0x555555555555555)
              v49 = 0xAAAAAAAAAAAAAAALL;
            else
              v49 = v47;
            v62 = v20;
            if (v49)
            {
              if (v49 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v50 = v35;
              v51 = (char *)operator new(24 * v49);
              LOBYTE(v35) = v50;
            }
            else
            {
              v51 = 0;
            }
            v52 = &v51[8 * ((v45 - v46) >> 3)];
            *(_QWORD *)v52 = v28;
            *((_QWORD *)v52 + 1) = v29;
            v52[16] = v35;
            *((_DWORD *)v52 + 5) = v32;
            v53 = v52;
            if (v45 == v46)
            {
              a1 = v61;
            }
            else
            {
              do
              {
                v54 = *(_OWORD *)(v45 - 24);
                *((_QWORD *)v53 - 1) = *((_QWORD *)v45 - 1);
                *(_OWORD *)(v53 - 24) = v54;
                v53 -= 24;
                v45 -= 24;
              }
              while (v45 != v46);
              a1 = v61;
              v45 = *(char **)(v61 + 424);
            }
            v55 = &v51[24 * v49];
            v56 = v52 + 24;
            *(_QWORD *)(a1 + 424) = v53;
            *(_QWORD *)(a1 + 432) = v52 + 24;
            *(_QWORD *)(a1 + 440) = v55;
            if (v45)
              operator delete(v45);
            *(_QWORD *)(a1 + 432) = v56;
            v20 = v62 + 1;
            if (v62 + 1 == (_DWORD)v7)
              goto LABEL_58;
          }
          break;
        case 1:
        case 2:
          goto LABEL_40;
        case 3:
          if ((unint64_t)*(unsigned int *)(a1 + 672)
             + ((uint64_t)(*(_QWORD *)(a1 + 360) - *(_QWORD *)(a1 + 352)) >> 6) > v32)
            goto LABEL_40;
          v58 = operator new(0x30uLL);
          v59 = "invalid global export";
          goto LABEL_64;
        case 4:
          if ((unint64_t)*(unsigned int *)(a1 + 684)
             - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 384) - *(_QWORD *)(a1 + 376)) >> 3) > v32)
            goto LABEL_40;
          v58 = operator new(0x30uLL);
          v59 = "invalid tag export";
          goto LABEL_64;
        default:
          v58 = operator new(0x30uLL);
          v59 = "unexpected export kind";
          goto LABEL_64;
      }
    }
  }
LABEL_58:
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
  {
    v58 = operator new(0x30uLL);
    v59 = "export section ended prematurely";
    goto LABEL_64;
  }
  result = 0;
LABEL_65:
  *v60 = result;
  return result;
}

uint64_t llvm::object::WasmObjectFile::parseStartSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  const char *v13;
  __int16 v14;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = "malformed uleb128, extends past end";
  do
  {
    if (v7 + v4 == *(_QWORD *)(a2 + 16))
      goto LABEL_12;
    v9 = *(_BYTE *)(v7 + v4);
    v10 = v9 & 0x7F;
    if (v6 >= 0x40 && (v9 & 0x7F) != 0 || (unint64_t)(v10 << v6) >> v6 != v10)
    {
      v8 = "uleb128 too big for uint64";
LABEL_12:
      llvm::report_fatal_error((llvm *)v8, (const char *)1);
    }
    v5 += v10 << v6;
    v6 += 7;
    ++v4;
  }
  while (v9 < 0);
  *(_QWORD *)(a2 + 8) = v7 + v4;
  if (HIDWORD(v5))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  *(_DWORD *)(a1 + 584) = v5;
  if ((unint64_t)*(unsigned int *)(a1 + 680) + ((uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 7) <= v5)
  {
    v12 = operator new(0x30uLL);
    v13 = "invalid start function";
    v14 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v12, &v13, 3);
    *a3 = result;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

void llvm::object::WasmObjectFile::parseElemSection(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  const void *v40;
  int64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  void *v69;
  void *v70;
  const char *v71;
  void **v72;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[24];
  __int128 __p;
  char *v79;
  const char *v80;
  __int16 v81;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = "malformed uleb128, extends past end";
  do
  {
    if (v8 + v5 == *(_QWORD *)(a2 + 16))
      goto LABEL_102;
    v10 = *(_BYTE *)(v8 + v5);
    v11 = v10 & 0x7F;
    if (v7 >= 0x40 && (v10 & 0x7F) != 0 || (unint64_t)(v11 << v7) >> v7 != v11)
    {
      v9 = "uleb128 too big for uint64";
LABEL_102:
      llvm::report_fatal_error((llvm *)v9, (const char *)1);
    }
    v6 += v11 << v7;
    v7 += 7;
    ++v5;
  }
  while (v10 < 0);
  *(_QWORD *)(a2 + 8) = v8 + v5;
  if (HIDWORD(v6))
LABEL_100:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v72 = (void **)(a1 + 448);
  std::vector<llvm::wasm::WasmElemSegment>::reserve(a1 + 448, v6);
  if (!(_DWORD)v6)
  {
LABEL_85:
    if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)a3 = 0;
    }
    else
    {
      v69 = operator new(0x30uLL);
      *(_QWORD *)&v75 = "elem section ended prematurely";
      *(_WORD *)v77 = 259;
      *(_QWORD *)a3 = llvm::object::GenericBinaryError::GenericBinaryError(v69, &v75, 3);
    }
    return;
  }
  v74 = a1;
  while (1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    LODWORD(v6) = v6 - 1;
    v79 = 0;
    *(_OWORD *)&v77[8] = 0u;
    __p = 0u;
    v17 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v17 + v13 == v16)
LABEL_99:
        llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
      v18 = *(_BYTE *)(v17 + v13);
      v19 = v18 & 0x7F;
      if (v15 >= 0x40 && (v18 & 0x7F) != 0 || (unint64_t)(v19 << v15) >> v15 != v19)
LABEL_98:
        llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
      v14 += v19 << v15;
      v15 += 7;
      ++v13;
    }
    while (v18 < 0);
    v20 = v17 + v13;
    *(_QWORD *)(a2 + 8) = v20;
    if (HIDWORD(v14))
      goto LABEL_100;
    LODWORD(v75) = v14;
    if (v14 >= 8)
    {
      v70 = operator new(0x30uLL);
      v71 = "Unsupported flags for element segment";
      goto LABEL_94;
    }
    if ((v14 & 2) != 0)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = v17 + v13;
      do
      {
        if (v25 + v22 == v16)
          goto LABEL_99;
        v26 = *(_BYTE *)(v25 + v22);
        v27 = v26 & 0x7F;
        if (v24 >= 0x40 && (v26 & 0x7F) != 0 || (unint64_t)(v27 << v24) >> v24 != v27)
          goto LABEL_98;
        v23 += v27 << v24;
        v24 += 7;
        ++v22;
      }
      while (v26 < 0);
      *(_QWORD *)(a2 + 8) = v20 + v22;
      if (HIDWORD(v23))
        goto LABEL_100;
      v21 = v23;
    }
    else
    {
      v21 = 0;
    }
    DWORD1(v75) = v21;
    if ((unint64_t)*(unsigned int *)(a1 + 676)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) <= v21)
    {
      v70 = operator new(0x30uLL);
      v71 = "invalid TableNumber";
      goto LABEL_94;
    }
    if ((v14 & 1) != 0)
    {
      LOBYTE(v76) = 0;
      BYTE8(v76) = 65;
      *(_DWORD *)v77 = 0;
      if ((v14 & 3) == 0)
        goto LABEL_35;
    }
    else
    {
      readInitExpr(a3, (uint64_t)&v76, a2);
      if (*(_QWORD *)a3)
        goto LABEL_95;
      LOBYTE(v14) = v75;
      if ((v75 & 3) == 0)
      {
LABEL_35:
        BYTE8(v75) = 112;
        if ((v14 & 4) != 0)
          goto LABEL_92;
        goto LABEL_42;
      }
    }
    v28 = *(unsigned __int8 **)(a2 + 8);
    if (v28 == *(unsigned __int8 **)(a2 + 16))
      llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
    *(_QWORD *)(a2 + 8) = v28 + 1;
    v29 = *v28;
    BYTE8(v75) = v29;
    if ((v14 & 4) != 0)
      break;
    if (v29)
    {
      v70 = operator new(0x30uLL);
      v71 = "invalid elemtype";
      goto LABEL_94;
    }
    BYTE8(v75) = 112;
LABEL_42:
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = *(_QWORD *)(a2 + 8);
    do
    {
      if (v33 + v30 == *(_QWORD *)(a2 + 16))
        goto LABEL_99;
      v34 = *(_BYTE *)(v33 + v30);
      v35 = v34 & 0x7F;
      if (v32 >= 0x40 && (v34 & 0x7F) != 0 || (unint64_t)(v35 << v32) >> v32 != v35)
        goto LABEL_98;
      v31 += v35 << v32;
      v32 += 7;
      ++v30;
    }
    while (v34 < 0);
    *(_QWORD *)(a2 + 8) = v33 + v30;
    if (HIDWORD(v31))
      goto LABEL_100;
    if ((_DWORD)v31)
    {
      while (1)
      {
        v45 = 0;
        v46 = 0;
        v47 = 0;
        LODWORD(v31) = v31 - 1;
        v48 = *(_QWORD *)(a2 + 8);
        do
        {
          if (v48 + v45 == *(_QWORD *)(a2 + 16))
            goto LABEL_99;
          v49 = *(_BYTE *)(v48 + v45);
          v50 = v49 & 0x7F;
          if (v47 >= 0x40 && (v49 & 0x7F) != 0 || (unint64_t)(v50 << v47) >> v47 != v50)
            goto LABEL_98;
          v46 += v50 << v47;
          v47 += 7;
          ++v45;
        }
        while (v49 < 0);
        *(_QWORD *)(a2 + 8) = v48 + v45;
        if (HIDWORD(v46))
          goto LABEL_100;
        v51 = (_BYTE *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) >= (unint64_t)v79)
          break;
        **((_DWORD **)&__p + 1) = v46;
        v44 = (uint64_t)(v51 + 4);
LABEL_57:
        *((_QWORD *)&__p + 1) = v44;
        if (!(_DWORD)v31)
          goto LABEL_50;
      }
      v52 = (_BYTE *)__p;
      v53 = *((_QWORD *)&__p + 1) - __p;
      v54 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 62)
        goto LABEL_103;
      v56 = (uint64_t)&v79[-__p];
      if ((uint64_t)&v79[-__p] >> 1 > v55)
        v55 = v56 >> 1;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
        v57 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        if (v57 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v58 = (char *)operator new(4 * v57);
        v59 = &v58[4 * v54];
        *(_DWORD *)v59 = v46;
        v44 = (uint64_t)(v59 + 4);
        if (v51 == v52)
          goto LABEL_83;
LABEL_77:
        v60 = v51 - 4 - v52;
        if (v60 < 0x2C)
          goto LABEL_108;
        if ((unint64_t)(v51 - &v58[v53]) < 0x20)
          goto LABEL_108;
        v61 = (v60 >> 2) + 1;
        v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
        v63 = &v51[-v62];
        v59 -= v62;
        v64 = &v58[4 * v54 - 16];
        v65 = (__int128 *)(v51 - 16);
        v66 = v61 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v67 = *v65;
          *((_OWORD *)v64 - 1) = *(v65 - 1);
          *(_OWORD *)v64 = v67;
          v64 -= 32;
          v65 -= 2;
          v66 -= 8;
        }
        while (v66);
        v51 = v63;
        if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_108:
          do
          {
            v68 = *((_DWORD *)v51 - 1);
            v51 -= 4;
            *((_DWORD *)v59 - 1) = v68;
            v59 -= 4;
          }
          while (v51 != v52);
        }
      }
      else
      {
        v58 = 0;
        v59 = (char *)(4 * v54);
        *(_DWORD *)(4 * v54) = v46;
        v44 = 4 * v54 + 4;
        if (v51 != v52)
          goto LABEL_77;
      }
LABEL_83:
      *(_QWORD *)&__p = v59;
      *((_QWORD *)&__p + 1) = v44;
      v79 = &v58[4 * v57];
      if (v52)
        operator delete(v52);
      goto LABEL_57;
    }
LABEL_50:
    a1 = v74;
    v36 = *(_QWORD *)(v74 + 456);
    if (v36 < *(_QWORD *)(v74 + 464))
    {
      v37 = v75;
      v38 = *(_OWORD *)v77;
      v39 = *(_QWORD *)&v77[16];
      *(_OWORD *)(v36 + 16) = v76;
      *(_OWORD *)(v36 + 32) = v38;
      *(_OWORD *)v36 = v37;
      *(_QWORD *)(v36 + 48) = v39;
      *(_QWORD *)(v36 + 56) = 0;
      *(_QWORD *)(v36 + 64) = 0;
      *(_QWORD *)(v36 + 72) = 0;
      v40 = (const void *)__p;
      v41 = *((_QWORD *)&__p + 1) - __p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        if (v41 < 0)
LABEL_103:
          abort();
        v42 = (char *)operator new(*((_QWORD *)&__p + 1) - __p);
        *(_QWORD *)(v36 + 56) = v42;
        *(_QWORD *)(v36 + 64) = v42;
        v43 = &v42[4 * (v41 >> 2)];
        *(_QWORD *)(v36 + 72) = v43;
        memcpy(v42, v40, v41);
        *(_QWORD *)(v36 + 64) = v43;
      }
      a1 = v74;
      *(_QWORD *)(v74 + 456) = v36 + 80;
      v12 = (void *)__p;
      if (!(_QWORD)__p)
        goto LABEL_12;
LABEL_11:
      *((_QWORD *)&__p + 1) = v12;
      operator delete(v12);
      goto LABEL_12;
    }
    *(_QWORD *)(v74 + 456) = std::vector<llvm::wasm::WasmElemSegment>::__push_back_slow_path<llvm::wasm::WasmElemSegment const&>(v72, (uint64_t)&v75);
    v12 = (void *)__p;
    if ((_QWORD)__p)
      goto LABEL_11;
LABEL_12:
    if (!(_DWORD)v6)
      goto LABEL_85;
  }
  if ((v29 - 113) > 0xFFFFFFFD)
  {
LABEL_92:
    v70 = operator new(0x30uLL);
    v71 = "elem segment init expressions not yet implemented";
  }
  else
  {
    v70 = operator new(0x30uLL);
    v71 = "invalid reference type";
  }
LABEL_94:
  v80 = v71;
  v81 = 259;
  *(_QWORD *)a3 = llvm::object::GenericBinaryError::GenericBinaryError(v70, &v80, 3);
LABEL_95:
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
}

uint64_t llvm::object::WasmObjectFile::parseCodeSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE *v35;
  char **v36;
  uint64_t *v37;
  char **v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _OWORD *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  void *v87;
  uint64_t result;
  uint64_t *v89;
  void *v90;
  unint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  _QWORD v99[4];
  __int16 v100;

  v4 = a1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  *(_DWORD *)(a1 + 688) = -858993459 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  v9 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if (v9 + v5 == v8)
      goto LABEL_82;
    v11 = *(_BYTE *)(v9 + v5);
    v12 = v11 & 0x7F;
    if (v7 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v7) >> v7 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_82:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v6 += v12 << v7;
    v7 += 7;
    ++v5;
  }
  while (v11 < 0);
  v13 = v9 + v5;
  *(_QWORD *)(a2 + 8) = v13;
  if (HIDWORD(v6))
LABEL_78:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  if (v6 == (uint64_t)(*(_QWORD *)(v4 + 520) - *(_QWORD *)(v4 + 512)) >> 7)
  {
    if (v6)
    {
      v14 = 0;
      v92 = v6;
      v93 = v4;
      while (1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = *(_QWORD *)(v4 + 512);
        v22 = *(_QWORD *)(a2 + 16);
        do
        {
          if (v13 + v18 == v22)
LABEL_77:
            llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
          v23 = *(_BYTE *)(v13 + v18);
          v24 = v23 & 0x7F;
          if (v20 >= 0x40 && (v23 & 0x7F) != 0 || (unint64_t)(v24 << v20) >> v20 != v24)
LABEL_76:
            llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
          v19 += v24 << v20;
          v20 += 7;
          ++v18;
        }
        while (v23 < 0);
        v25 = v13 + v18;
        *(_QWORD *)(a2 + 8) = v25;
        v26 = HIDWORD(v19);
        if (HIDWORD(v19))
          goto LABEL_78;
        v27 = 0;
        v28 = 0;
        v29 = v25 + v19;
        v30 = (_DWORD *)(v21 + (v14 << 7));
        v30[14] = v18;
        *v30 = *(_DWORD *)(v4 + 680) + v14;
        v30[12] = v13 - *(_DWORD *)a2;
        v30[13] = v29 - v13;
        v31 = v13 + v18;
        do
        {
          if (v31 + v26 == v22)
            goto LABEL_77;
          v32 = *(_BYTE *)(v31 + v26);
          v33 = v32 & 0x7F;
          if (v28 >= 0x40 && (v32 & 0x7F) != 0 || (unint64_t)(v33 << v28) >> v28 != v33)
            goto LABEL_76;
          v27 += v33 << v28;
          v28 += 7;
          ++v26;
        }
        while (v32 < 0);
        v94 = v29;
        *(_QWORD *)(a2 + 8) = v25 + v26;
        if (HIDWORD(v27))
          goto LABEL_78;
        v95 = v21;
        v96 = v14;
        v34 = (_QWORD *)(v21 + (v14 << 7));
        v36 = (char **)(v34 + 1);
        v35 = (_BYTE *)v34[1];
        v37 = v34 + 3;
        if (v27 <= (uint64_t)(v34[3] - (_QWORD)v35) >> 3)
          goto LABEL_37;
        v40 = (_BYTE *)v34[2];
        v38 = (char **)(v34 + 2);
        v39 = v40;
        v41 = (char *)operator new(8 * v27);
        v42 = v40 - v35;
        v43 = &v41[(v40 - v35) & 0xFFFFFFFFFFFFFFF8];
        v44 = v43;
        if (v40 != v35)
        {
          v45 = v39 - 8 - v35;
          if (v45 < 0x58)
          {
            v44 = &v41[(v39 - v35) & 0xFFFFFFFFFFFFFFF8];
            do
            {
LABEL_34:
              v54 = *((_QWORD *)v39 - 1);
              v39 -= 8;
              *((_QWORD *)v44 - 1) = v54;
              v44 -= 8;
            }
            while (v39 != v35);
            goto LABEL_35;
          }
          v44 = &v41[(v39 - v35) & 0xFFFFFFFFFFFFFFF8];
          if ((unint64_t)(&v39[-(v42 & 0xFFFFFFFFFFFFFFF8)] - v41) < 0x20)
            goto LABEL_34;
          v46 = v42 >> 3;
          v47 = (v45 >> 3) + 1;
          v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v49 = &v39[-v48];
          v44 = &v43[-v48];
          v50 = &v41[8 * v46 - 16];
          v51 = (__int128 *)(v39 - 16);
          v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v53 = *v51;
            *((_OWORD *)v50 - 1) = *(v51 - 1);
            *(_OWORD *)v50 = v53;
            v50 -= 32;
            v51 -= 2;
            v52 -= 4;
          }
          while (v52);
          v39 = v49;
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_34;
        }
LABEL_35:
        *v36 = v44;
        *v38 = v43;
        *v37 = (uint64_t)&v41[8 * v27];
        if (v35)
          operator delete(v35);
LABEL_37:
        if ((_DWORD)v27)
        {
          v55 = (uint64_t *)(v95 + (v96 << 7) + 16);
          v97 = (uint64_t *)(v36 + 2);
          while (1)
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v27) = v27 - 1;
            v61 = *(_QWORD *)(a2 + 8);
            v60 = *(unsigned __int8 **)(a2 + 16);
            do
            {
              if ((unsigned __int8 *)(v61 + v57) == v60)
                goto LABEL_77;
              v62 = *(_BYTE *)(v61 + v57);
              v63 = v62 & 0x7F;
              if (v59 >= 0x40 && (v62 & 0x7F) != 0 || (unint64_t)(v63 << v59) >> v59 != v63)
                goto LABEL_76;
              v58 += v63 << v59;
              v59 += 7;
              ++v57;
            }
            while (v62 < 0);
            v64 = (unsigned __int8 *)(v61 + v57);
            *(_QWORD *)(a2 + 8) = v64;
            if (HIDWORD(v58))
              goto LABEL_78;
            if (v64 == v60)
              llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
            *(_QWORD *)(a2 + 8) = v64 + 1;
            v65 = *v64;
            v66 = (char *)*v55;
            v67 = *v37;
            if (*v55 < (unint64_t)*v37)
            {
              *(_QWORD *)v66 = v65 | (v58 << 32);
              v56 = (uint64_t)(v66 + 8);
              goto LABEL_40;
            }
            v68 = a2;
            v69 = v36;
            v70 = *v36;
            v71 = v66 - *v36;
            v72 = v71 >> 3;
            v73 = (v71 >> 3) + 1;
            if (v73 >> 61)
              abort();
            v74 = v67 - (_QWORD)v70;
            if (v74 >> 2 > v73)
              v73 = v74 >> 2;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            v98 = v73;
            if (v73)
            {
              if (v73 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v75 = operator new(8 * v73);
              v76 = (uint64_t *)&v75[8 * v72];
              *v76 = v65 | (v58 << 32);
              v56 = (uint64_t)(v76 + 1);
              if (v66 == v70)
              {
LABEL_61:
                v36 = v69;
                a2 = v68;
                v37 = v97;
                *v36 = (char *)v76;
                *v55 = v56;
                *v97 = (uint64_t)&v75[8 * v98];
                if (!v66)
                  goto LABEL_40;
LABEL_69:
                operator delete(v66);
                goto LABEL_40;
              }
            }
            else
            {
              v75 = 0;
              v76 = (uint64_t *)(8 * v72);
              *(_QWORD *)(8 * v72) = v65 | (v58 << 32);
              v56 = 8 * v72 + 8;
              if (v66 == v70)
                goto LABEL_61;
            }
            v77 = v66 - 8 - v70;
            if (v77 < 0x58)
              break;
            v78 = v66 - &v75[v71];
            v36 = v69;
            a2 = v68;
            if (v78 < 0x20)
              goto LABEL_67;
            v79 = (v77 >> 3) + 1;
            v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
            v81 = &v66[-v80];
            v76 = (uint64_t *)((char *)v76 - v80);
            v82 = &v75[8 * v72 - 16];
            v83 = (__int128 *)(v66 - 16);
            v84 = v79 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v85 = *v83;
              *(v82 - 1) = *(v83 - 1);
              *v82 = v85;
              v82 -= 2;
              v83 -= 2;
              v84 -= 4;
            }
            while (v84);
            v66 = v81;
            if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_67;
LABEL_68:
            v66 = *v36;
            v37 = v97;
            *v36 = (char *)v76;
            *v55 = v56;
            *v97 = (uint64_t)&v75[8 * v98];
            if (v66)
              goto LABEL_69;
LABEL_40:
            *v55 = v56;
            if (!(_DWORD)v27)
              goto LABEL_11;
          }
          v36 = v69;
          a2 = v68;
          do
          {
LABEL_67:
            v86 = *((_QWORD *)v66 - 1);
            v66 -= 8;
            *--v76 = v86;
          }
          while (v66 != v70);
          goto LABEL_68;
        }
LABEL_11:
        v15 = *(_QWORD *)(a2 + 8);
        v16 = (v94 - v15);
        v17 = v95 + (v96 << 7);
        *(_QWORD *)(v17 + 32) = v15;
        *(_QWORD *)(v17 + 40) = v16;
        *(_DWORD *)(v17 + 120) = -1;
        v13 = *(_QWORD *)(a2 + 8) + v16;
        *(_QWORD *)(a2 + 8) = v13;
        v14 = v96 + 1;
        v4 = v93;
        if (v96 + 1 == v92)
        {
          v8 = *(_QWORD *)(a2 + 16);
          break;
        }
      }
    }
    v89 = a3;
    if (v13 == v8)
    {
      result = 0;
    }
    else
    {
      v90 = operator new(0x30uLL);
      v99[0] = "code section ended prematurely";
      v100 = 259;
      result = llvm::object::GenericBinaryError::GenericBinaryError(v90, v99, 3);
    }
  }
  else
  {
    v87 = operator new(0x30uLL);
    v99[0] = "invalid function count";
    v100 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v87, v99, 3);
    v89 = a3;
  }
  *v89 = result;
  return result;
}

void llvm::object::WasmObjectFile::parseDataSection(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  void *v62;
  const char **v63;
  llvm::object::GenericBinaryError *v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[64];
  uint64_t v68;
  const char *v69;
  __int16 v70;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  *(_DWORD *)(a1 + 692) = -858993459 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if (v9 + v6 == *(_QWORD *)(a2 + 16))
      goto LABEL_74;
    v11 = *(_BYTE *)(v9 + v6);
    v12 = v11 & 0x7F;
    if (v8 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v8) >> v8 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_74:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v7 += v12 << v8;
    v8 += 7;
    ++v6;
  }
  while (v11 < 0);
  *(_QWORD *)(a2 + 8) = v9 + v6;
  if (HIDWORD(v7))
LABEL_75:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  if (*(_BYTE *)(a1 + 504) && *(_QWORD *)(a1 + 496) != v7)
  {
    v64 = (llvm::object::GenericBinaryError *)operator new(0x30uLL);
    *(_QWORD *)&v65 = "number of data segments does not match DataCount section";
    *(_WORD *)v67 = 259;
    *(_QWORD *)a3 = llvm::object::GenericBinaryError::GenericBinaryError(v64, (const llvm::Twine *)&v65);
    return;
  }
  v13 = *(_BYTE **)(a1 + 472);
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 488) - (_QWORD)v13) >> 3) < v7)
  {
    v14 = *(_BYTE **)(a1 + 480);
    v15 = (char *)operator new(104 * v7);
    v16 = &v15[104 * ((v14 - v13) / 104)];
    v17 = v16;
    if (v14 != v13)
    {
      v18 = &v15[104 * ((v14 - v13) / 104)];
      do
      {
        v19 = *(_OWORD *)(v14 - 104);
        v20 = *(_OWORD *)(v14 - 88);
        *(_OWORD *)(v18 - 72) = *(_OWORD *)(v14 - 72);
        *(_OWORD *)(v18 - 88) = v20;
        *(_OWORD *)(v18 - 104) = v19;
        v21 = *(_OWORD *)(v14 - 56);
        v22 = *(_OWORD *)(v14 - 40);
        v23 = *(_OWORD *)(v14 - 24);
        v17 = v18 - 104;
        *((_QWORD *)v18 - 1) = *((_QWORD *)v14 - 1);
        *(_OWORD *)(v18 - 24) = v23;
        *(_OWORD *)(v18 - 40) = v22;
        *(_OWORD *)(v18 - 56) = v21;
        v14 -= 104;
        v18 -= 104;
      }
      while (v14 != v13);
    }
    *(_QWORD *)(a1 + 472) = v17;
    *(_QWORD *)(a1 + 480) = v16;
    *(_QWORD *)(a1 + 488) = &v15[104 * v7];
    if (v13)
      operator delete(v13);
  }
  if ((_DWORD)v7)
  {
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      LODWORD(v7) = v7 - 1;
      memset(&v67[8], 0, 48);
      v28 = *(_QWORD *)(a2 + 8);
      v27 = *(_QWORD *)(a2 + 16);
      do
      {
        if (v28 + v24 == v27)
LABEL_72:
          llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
        v29 = *(_BYTE *)(v28 + v24);
        v30 = v29 & 0x7F;
        if (v26 >= 0x40 && (v29 & 0x7F) != 0 || (unint64_t)(v30 << v26) >> v26 != v30)
LABEL_71:
          llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
        v25 += v30 << v26;
        v26 += 7;
        ++v24;
      }
      while (v29 < 0);
      v31 = v28 + v24;
      *(_QWORD *)(a2 + 8) = v31;
      if (HIDWORD(v25))
        goto LABEL_75;
      DWORD2(v65) = v25;
      if ((v25 & 2) != 0)
      {
        v33 = 0;
        v32 = 0;
        v34 = 0;
        v35 = v28 + v24;
        do
        {
          if (v35 + v33 == v27)
            goto LABEL_72;
          v36 = *(_BYTE *)(v35 + v33);
          v37 = v36 & 0x7F;
          if (v34 >= 0x40 && (v36 & 0x7F) != 0 || (unint64_t)(v37 << v34) >> v34 != v37)
            goto LABEL_71;
          v32 += v37 << v34;
          v34 += 7;
          ++v33;
        }
        while (v36 < 0);
        v31 += v33;
        *(_QWORD *)(a2 + 8) = v31;
        if (HIDWORD(v32))
          goto LABEL_75;
      }
      else
      {
        LODWORD(v32) = 0;
      }
      HIDWORD(v65) = v32;
      if ((v25 & 1) != 0)
      {
        LOBYTE(v66) = 0;
        BYTE8(v66) = 65;
        *(_DWORD *)v67 = 0;
      }
      else
      {
        readInitExpr(a3, (uint64_t)&v66, a2);
        if (*(_QWORD *)a3)
          return;
        v31 = *(_QWORD *)(a2 + 8);
        v27 = *(_QWORD *)(a2 + 16);
      }
      v38 = 0;
      v39 = 0;
      v40 = 0;
      do
      {
        if (v31 + v38 == v27)
          goto LABEL_72;
        v41 = *(_BYTE *)(v31 + v38);
        v42 = v41 & 0x7F;
        if (v40 >= 0x40 && (v41 & 0x7F) != 0 || (unint64_t)(v42 << v40) >> v40 != v42)
          goto LABEL_71;
        v39 += v42 << v40;
        v40 += 7;
        ++v38;
      }
      while (v41 < 0);
      v43 = v31 + v38;
      *(_QWORD *)(a2 + 8) = v43;
      if (HIDWORD(v39))
        goto LABEL_75;
      if (v27 - v43 < v39)
        break;
      *(_QWORD *)&v67[24] = v43;
      *(_QWORD *)&v67[32] = v39;
      *(_QWORD *)&v67[56] = 0;
      LODWORD(v68) = -1;
      LODWORD(v65) = v43 - *(_DWORD *)a2;
      *(_QWORD *)(a2 + 8) = v43 + v39;
      v45 = *(char **)(a1 + 480);
      v44 = *(_QWORD *)(a1 + 488);
      if ((unint64_t)v45 < v44)
      {
        *((_OWORD *)v45 + 3) = *(_OWORD *)&v67[16];
        *((_OWORD *)v45 + 4) = *(_OWORD *)&v67[32];
        *((_OWORD *)v45 + 5) = *(_OWORD *)&v67[48];
        *((_QWORD *)v45 + 12) = v68;
        *(_OWORD *)v45 = v65;
        *((_OWORD *)v45 + 1) = v66;
        *((_OWORD *)v45 + 2) = *(_OWORD *)v67;
        *(_QWORD *)(a1 + 480) = v45 + 104;
        if (!(_DWORD)v7)
          goto LABEL_64;
      }
      else
      {
        v46 = *(_BYTE **)(a1 + 472);
        v47 = 0x4EC4EC4EC4EC4EC5 * ((v45 - v46) >> 3) + 1;
        if (v47 > 0x276276276276276)
          abort();
        v48 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v44 - (_QWORD)v46) >> 3);
        if (2 * v48 > v47)
          v47 = 2 * v48;
        if (v48 >= 0x13B13B13B13B13BLL)
          v49 = 0x276276276276276;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 > 0x276276276276276)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v50 = (char *)operator new(104 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = *(_OWORD *)&v67[48];
        v52 = &v50[8 * ((v45 - v46) >> 3)];
        *((_OWORD *)v52 + 4) = *(_OWORD *)&v67[32];
        *((_OWORD *)v52 + 5) = v51;
        *((_QWORD *)v52 + 12) = v68;
        v53 = v66;
        *(_OWORD *)v52 = v65;
        *((_OWORD *)v52 + 1) = v53;
        v54 = *(_OWORD *)&v67[16];
        *((_OWORD *)v52 + 2) = *(_OWORD *)v67;
        *((_OWORD *)v52 + 3) = v54;
        v55 = v52;
        if (v45 != v46)
        {
          do
          {
            v56 = *(_OWORD *)(v45 - 104);
            v57 = *(_OWORD *)(v45 - 88);
            *(_OWORD *)(v55 - 72) = *(_OWORD *)(v45 - 72);
            *(_OWORD *)(v55 - 88) = v57;
            *(_OWORD *)(v55 - 104) = v56;
            v58 = *(_OWORD *)(v45 - 56);
            v59 = *(_OWORD *)(v45 - 40);
            v60 = *(_OWORD *)(v45 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v45 - 1);
            *(_OWORD *)(v55 - 24) = v60;
            *(_OWORD *)(v55 - 40) = v59;
            *(_OWORD *)(v55 - 56) = v58;
            v55 -= 104;
            v45 -= 104;
          }
          while (v45 != v46);
          v45 = *(char **)(a1 + 472);
        }
        v61 = v52 + 104;
        *(_QWORD *)(a1 + 472) = v55;
        *(_QWORD *)(a1 + 480) = v52 + 104;
        *(_QWORD *)(a1 + 488) = &v50[104 * v49];
        if (v45)
          operator delete(v45);
        *(_QWORD *)(a1 + 480) = v61;
        if (!(_DWORD)v7)
          goto LABEL_64;
      }
    }
    v62 = operator new(0x30uLL);
    v69 = "invalid segment size";
    v70 = 259;
    v63 = &v69;
    goto LABEL_68;
  }
LABEL_64:
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
  {
    v62 = operator new(0x30uLL);
    *(_QWORD *)&v65 = "data section ended prematurely";
    *(_WORD *)v67 = 259;
    v63 = (const char **)&v65;
LABEL_68:
    *(_QWORD *)a3 = llvm::object::GenericBinaryError::GenericBinaryError(v62, v63, 3);
    return;
  }
  *(_QWORD *)a3 = 0;
}

uint64_t llvm::object::WasmObjectFile::parseDylinkSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  void *v65;
  uint64_t result;
  uint64_t *v67;
  const char *v68;
  __int16 v69;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  *(_BYTE *)(a1 + 589) = 1;
  v10 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v10 + v6 == v9)
      goto LABEL_71;
    v12 = *(_BYTE *)(v10 + v6);
    v13 = v12 & 0x7F;
    if (v8 >= 0x40 && (v12 & 0x7F) != 0 || (unint64_t)(v13 << v8) >> v8 != v13)
    {
      v11 = "uleb128 too big for uint64";
LABEL_71:
      llvm::report_fatal_error((llvm *)v11, (const char *)1);
    }
    v7 += v13 << v8;
    v8 += 7;
    ++v6;
  }
  while (v12 < 0);
  v14 = v10 + v6;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = HIDWORD(v7);
  if (HIDWORD(v7))
    goto LABEL_79;
  v16 = 0;
  v17 = 0;
  *(_DWORD *)(a1 + 96) = v7;
  v18 = v10 + v6;
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v18 + v15 == v9)
      goto LABEL_71;
    v19 = *(_BYTE *)(v18 + v15);
    v20 = v19 & 0x7F;
    if (v17 >= 0x40 && (v19 & 0x7F) != 0 || (unint64_t)(v20 << v17) >> v17 != v20)
      llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
    v16 += v20 << v17;
    v17 += 7;
    ++v15;
  }
  while (v19 < 0);
  v21 = v14 + v15;
  *(_QWORD *)(a2 + 8) = v21;
  v22 = HIDWORD(v16);
  if (HIDWORD(v16))
    goto LABEL_79;
  v23 = 0;
  v24 = 0;
  *(_DWORD *)(a1 + 100) = v16;
  v25 = v10 + v6 + v15;
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v25 + v22 == v9)
      goto LABEL_71;
    v26 = *(_BYTE *)(v25 + v22);
    v27 = v26 & 0x7F;
    if (v24 >= 0x40 && (v26 & 0x7F) != 0 || (unint64_t)(v27 << v24) >> v24 != v27)
      llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
    v23 += v27 << v24;
    v24 += 7;
    ++v22;
  }
  while (v26 < 0);
  v28 = v21 + v22;
  *(_QWORD *)(a2 + 8) = v28;
  v29 = HIDWORD(v23);
  if (HIDWORD(v23))
    goto LABEL_79;
  v30 = 0;
  v31 = 0;
  *(_DWORD *)(a1 + 104) = v23;
  v32 = v10 + v6 + v15 + v22;
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v32 + v29 == v9)
      goto LABEL_71;
    v33 = *(_BYTE *)(v32 + v29);
    v34 = v33 & 0x7F;
    if (v31 >= 0x40 && (v33 & 0x7F) != 0 || (unint64_t)(v34 << v31) >> v31 != v34)
      llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
    v30 += v34 << v31;
    v31 += 7;
    ++v29;
  }
  while (v33 < 0);
  v35 = v28 + v29;
  *(_QWORD *)(a2 + 8) = v35;
  v36 = HIDWORD(v30);
  if (HIDWORD(v30))
    goto LABEL_79;
  v37 = 0;
  v38 = 0;
  *(_DWORD *)(a1 + 108) = v30;
  v39 = v10 + v6 + v15 + v22 + v29;
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v39 + v36 == v9)
      goto LABEL_71;
    v40 = *(_BYTE *)(v39 + v36);
    v41 = v40 & 0x7F;
    if (v38 >= 0x40 && (v40 & 0x7F) != 0 || (unint64_t)(v41 << v38) >> v38 != v41)
      llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
    v37 += v41 << v38;
    v38 += 7;
    ++v36;
  }
  while (v40 < 0);
  v42 = v35 + v36;
  *(_QWORD *)(a2 + 8) = v42;
  if (HIDWORD(v37))
LABEL_79:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  if (!(_DWORD)v37)
    goto LABEL_64;
  v67 = a3;
  do
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    LODWORD(v37) = v37 - 1;
    v48 = *(_QWORD *)(a2 + 8);
    v47 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v48 + v44 == v47)
        llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
      v49 = *(_BYTE *)(v48 + v44);
      v50 = v49 & 0x7F;
      if (v46 >= 0x40 && (v49 & 0x7F) != 0 || (unint64_t)(v50 << v46) >> v46 != v50)
        llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
      v45 += v50 << v46;
      v46 += 7;
      ++v44;
    }
    while (v49 < 0);
    v51 = v48 + v44;
    *(_QWORD *)(a2 + 8) = v51;
    v52 = v45;
    v53 = v51 + v45;
    if (v53 > v47)
      llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
    *(_QWORD *)(a2 + 8) = v53;
    v55 = *(char **)(a1 + 120);
    v54 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v55 < v54)
    {
      *(_QWORD *)v55 = v51;
      *((_QWORD *)v55 + 1) = v52;
      v43 = v55 + 16;
      goto LABEL_39;
    }
    v56 = *(char **)(a1 + 112);
    v57 = (v55 - v56) >> 4;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      abort();
    v59 = v54 - (_QWORD)v56;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    if (v60)
    {
      if (v60 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v61 = (char *)operator new(16 * v60);
      v62 = &v61[16 * v57];
      *(_QWORD *)v62 = v51;
      *((_QWORD *)v62 + 1) = v52;
      v63 = (uint64_t)v62;
      if (v55 == v56)
        goto LABEL_61;
    }
    else
    {
      v61 = 0;
      v62 = (char *)(16 * v57);
      *(_QWORD *)v62 = v51;
      *((_QWORD *)v62 + 1) = v52;
      v63 = 16 * v57;
      if (v55 == v56)
        goto LABEL_61;
    }
    do
    {
      *(_OWORD *)(v63 - 16) = *((_OWORD *)v55 - 1);
      v63 -= 16;
      v55 -= 16;
    }
    while (v55 != v56);
    v55 = *(char **)(a1 + 112);
LABEL_61:
    v64 = &v61[16 * v60];
    v43 = v62 + 16;
    *(_QWORD *)(a1 + 112) = v63;
    *(_QWORD *)(a1 + 120) = v62 + 16;
    *(_QWORD *)(a1 + 128) = v64;
    if (v55)
      operator delete(v55);
LABEL_39:
    *(_QWORD *)(a1 + 120) = v43;
  }
  while ((_DWORD)v37);
  v42 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  a3 = v67;
LABEL_64:
  if (v42 == v9)
  {
    result = 0;
  }
  else
  {
    v65 = operator new(0x30uLL);
    v68 = "dylink section ended prematurely";
    v69 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v65, &v68, 3);
  }
  *a3 = result;
  return result;
}

uint64_t llvm::object::WasmObjectFile::parseDylink0Section@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  _BYTE *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  _BYTE *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  __int128 v152;
  __int128 v153;
  void *v154;
  const char *v155;
  uint64_t result;
  unint64_t v158;
  uint64_t v160;
  const char *v161;
  __int16 v162;

  v3 = a1;
  *(_BYTE *)(a1 + 589) = 1;
  v5 = *(unsigned __int8 **)(a2 + 8);
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v5 < v4)
  {
    v6 = a2;
    v7 = *(unsigned __int8 **)(a2 + 8);
    v160 = v3;
    v158 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = v7 + 1;
      *(_QWORD *)(v6 + 8) = v7 + 1;
      *(_QWORD *)(v6 + 16) = v4;
      v12 = *v7;
      do
      {
        if (&v11[v8] == v4)
LABEL_179:
          llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
        v13 = v9;
        v14 = v11[v8];
        v15 = v14 & 0x7F;
        if (v10 >= 0x40 && (v14 & 0x7F) != 0 || (v16 = v15 << v10, (unint64_t)(v15 << v10) >> v10 != v15))
LABEL_178:
          llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
        v9 = v16 + v13;
        v10 += 7;
        ++v8;
      }
      while ((v14 & 0x80) != 0);
      v17 = &v11[v8];
      *(_QWORD *)(v6 + 8) = v17;
      if (HIDWORD(v9))
LABEL_181:
        llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
      *(_QWORD *)(v6 + 16) = &v17[v9];
      switch(v12)
      {
        case 1:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          do
          {
            if (v13 + v16 == v18)
              goto LABEL_179;
            v21 = v7[v8 + 1 + v18];
            v22 = v21 & 0x7F;
            if (v20 >= 0x40 && (v21 & 0x7F) != 0 || (unint64_t)(v22 << v20) >> v20 != v22)
              goto LABEL_178;
            v19 += v22 << v20;
            v20 += 7;
            ++v18;
          }
          while ((v21 & 0x80) != 0);
          v23 = &v17[v18];
          *(_QWORD *)(v6 + 8) = v23;
          v24 = HIDWORD(v19);
          if (HIDWORD(v19))
            goto LABEL_181;
          v25 = 0;
          v26 = 0;
          *(_DWORD *)(v3 + 96) = v19;
          do
          {
            if (v13 + v16 - v18 == v24)
              goto LABEL_179;
            v27 = v7[v8 + 1 + v18 + v24];
            v28 = v27 & 0x7F;
            if (v26 >= 0x40 && (v27 & 0x7F) != 0 || (unint64_t)(v28 << v26) >> v26 != v28)
              goto LABEL_178;
            v25 += v28 << v26;
            v26 += 7;
            ++v24;
          }
          while ((v27 & 0x80) != 0);
          v29 = &v23[v24];
          *(_QWORD *)(v6 + 8) = v29;
          v30 = HIDWORD(v25);
          if (HIDWORD(v25))
            goto LABEL_181;
          v31 = 0;
          v32 = 0;
          *(_DWORD *)(v3 + 100) = v25;
          v33 = v18 + (unint64_t)v24;
          v34 = (uint64_t)&v7[v8 + 1 + v33];
          v35 = v13 + v16 - v33;
          do
          {
            if (v35 == v30)
              goto LABEL_179;
            v36 = *(_BYTE *)(v34 + v30);
            v37 = v36 & 0x7F;
            if (v32 >= 0x40 && (v36 & 0x7F) != 0 || (unint64_t)(v37 << v32) >> v32 != v37)
              goto LABEL_178;
            v31 += v37 << v32;
            v32 += 7;
            ++v30;
          }
          while (v36 < 0);
          v38 = &v29[v30];
          *(_QWORD *)(v6 + 8) = v38;
          v39 = HIDWORD(v31);
          if (HIDWORD(v31))
            goto LABEL_181;
          v40 = 0;
          v41 = 0;
          *(_DWORD *)(v3 + 104) = v31;
          v42 = &v7[v8];
          v43 = v18 + (unint64_t)v24 + v30;
          v44 = (uint64_t)&v42[v43 + 1];
          v45 = v13 + v16 - v43;
          do
          {
            if (v45 == v40)
              goto LABEL_179;
            v46 = *(_BYTE *)(v44 + v40);
            v47 = v46 & 0x7F;
            if (v41 >= 0x40 && (v46 & 0x7F) != 0 || (unint64_t)(v47 << v41) >> v41 != v47)
              goto LABEL_178;
            v39 += v47 << v41;
            v41 += 7;
            ++v40;
          }
          while (v46 < 0);
          *(_QWORD *)(v6 + 8) = &v38[v40];
          if (HIDWORD(v39))
            goto LABEL_181;
          *(_DWORD *)(v3 + 108) = v39;
          goto LABEL_127;
        case 2:
          v48 = 0;
          v49 = 0;
          v50 = 0;
          v51 = (uint64_t)&v7[v8 + 1];
          v52 = v13 + v16;
          do
          {
            if (v52 == v48)
              goto LABEL_179;
            v53 = *(_BYTE *)(v51 + v48);
            v54 = v53 & 0x7F;
            if (v50 >= 0x40 && (v53 & 0x7F) != 0 || (unint64_t)(v54 << v50) >> v50 != v54)
              goto LABEL_178;
            v49 += v54 << v50;
            v50 += 7;
            ++v48;
          }
          while (v53 < 0);
          *(_QWORD *)(v6 + 8) = &v17[v48];
          if (HIDWORD(v49))
            goto LABEL_181;
          if (!(_DWORD)v49)
            goto LABEL_127;
          while (1)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            LODWORD(v49) = v49 - 1;
            v60 = *(_QWORD *)(v6 + 8);
            v59 = *(_QWORD *)(v6 + 16);
            do
            {
              if (v60 + v56 == v59)
                goto LABEL_179;
              v61 = *(_BYTE *)(v60 + v56);
              v62 = v61 & 0x7F;
              if (v58 >= 0x40 && (v61 & 0x7F) != 0 || (unint64_t)(v62 << v58) >> v58 != v62)
                goto LABEL_178;
              v57 += v62 << v58;
              v58 += 7;
              ++v56;
            }
            while (v61 < 0);
            v63 = v60 + v56;
            *(_QWORD *)(v6 + 8) = v63;
            v64 = v57;
            v65 = v63 + v57;
            if (v65 > v59)
              goto LABEL_180;
            *(_QWORD *)(v6 + 8) = v65;
            v67 = *(char **)(v3 + 120);
            v66 = *(_QWORD *)(v3 + 128);
            if ((unint64_t)v67 < v66)
            {
              *(_QWORD *)v67 = v63;
              *((_QWORD *)v67 + 1) = v64;
              v55 = v67 + 16;
            }
            else
            {
              v68 = *(char **)(v3 + 112);
              v69 = (v67 - v68) >> 4;
              v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 60)
                goto LABEL_182;
              v71 = v66 - (_QWORD)v68;
              if (v71 >> 3 > v70)
                v70 = v71 >> 3;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
                v72 = 0xFFFFFFFFFFFFFFFLL;
              else
                v72 = v70;
              if (v72)
              {
                if (v72 >> 60)
                  goto LABEL_183;
                v73 = (char *)operator new(16 * v72);
                v3 = v160;
                v74 = &v73[16 * v69];
                *(_QWORD *)v74 = v63;
                *((_QWORD *)v74 + 1) = v64;
                v75 = (uint64_t)v74;
                if (v67 != v68)
                {
LABEL_69:
                  v6 = a2;
                  do
                  {
                    *(_OWORD *)(v75 - 16) = *((_OWORD *)v67 - 1);
                    v75 -= 16;
                    v67 -= 16;
                  }
                  while (v67 != v68);
                  v67 = *(char **)(v3 + 112);
                  v55 = v74 + 16;
                  *(_QWORD *)(v3 + 112) = v75;
                  *(_QWORD *)(v3 + 120) = v74 + 16;
                  *(_QWORD *)(v3 + 128) = &v73[16 * v72];
                  if (!v67)
                    goto LABEL_51;
LABEL_75:
                  operator delete(v67);
                  v3 = v160;
                  goto LABEL_51;
                }
              }
              else
              {
                v73 = 0;
                v74 = (char *)(16 * v69);
                *(_QWORD *)v74 = v63;
                *((_QWORD *)v74 + 1) = v64;
                v75 = 16 * v69;
                if (v67 != v68)
                  goto LABEL_69;
              }
              v6 = a2;
              v55 = v74 + 16;
              *(_QWORD *)(v3 + 112) = v75;
              *(_QWORD *)(v3 + 120) = v74 + 16;
              *(_QWORD *)(v3 + 128) = &v73[16 * v72];
              if (v67)
                goto LABEL_75;
            }
LABEL_51:
            *(_QWORD *)(v3 + 120) = v55;
            if (!(_DWORD)v49)
              goto LABEL_127;
          }
        case 3:
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v79 = (uint64_t)&v7[v8 + 1];
          v80 = v13 + v16;
          do
          {
            if (v80 == v76)
              goto LABEL_179;
            v81 = *(_BYTE *)(v79 + v76);
            v82 = v81 & 0x7F;
            if (v78 >= 0x40 && (v81 & 0x7F) != 0 || (unint64_t)(v82 << v78) >> v78 != v82)
              goto LABEL_178;
            v77 += v82 << v78;
            v78 += 7;
            ++v76;
          }
          while (v81 < 0);
          *(_QWORD *)(v6 + 8) = &v17[v76];
          if (HIDWORD(v77))
            goto LABEL_181;
          if (!(_DWORD)v77)
            goto LABEL_127;
          while (1)
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            LODWORD(v77) = v77 - 1;
            v88 = *(_QWORD *)(v6 + 8);
            v87 = *(_QWORD *)(v6 + 16);
            do
            {
              if (v88 + v84 == v87)
                goto LABEL_179;
              v89 = *(_BYTE *)(v88 + v84);
              v90 = v89 & 0x7F;
              if (v86 >= 0x40 && (v89 & 0x7F) != 0 || (unint64_t)(v90 << v86) >> v86 != v90)
                goto LABEL_178;
              v85 += v90 << v86;
              v86 += 7;
              ++v84;
            }
            while (v89 < 0);
            v91 = v88 + v84;
            *(_QWORD *)(v6 + 8) = v91;
            v92 = v85;
            v93 = v91 + v85;
            if (v93 > v87)
              goto LABEL_180;
            v94 = 0;
            v95 = 0;
            v96 = 0;
            *(_QWORD *)(v6 + 8) = v93;
            v97 = v88 + v92 + v84;
            do
            {
              if (v97 + v94 == v87)
                goto LABEL_179;
              v98 = *(_BYTE *)(v97 + v94);
              v99 = v98 & 0x7F;
              if (v96 >= 0x40 && (v98 & 0x7F) != 0 || (unint64_t)(v99 << v96) >> v96 != v99)
                goto LABEL_178;
              v95 += v99 << v96;
              v96 += 7;
              ++v94;
            }
            while (v98 < 0);
            *(_QWORD *)(v6 + 8) = v93 + v94;
            if (HIDWORD(v95))
              goto LABEL_181;
            v101 = *(char **)(v3 + 168);
            v100 = *(_QWORD *)(v3 + 176);
            if ((unint64_t)v101 < v100)
            {
              *(_QWORD *)v101 = v91;
              *((_QWORD *)v101 + 1) = v92;
              v83 = v101 + 24;
              *((_DWORD *)v101 + 4) = v95;
            }
            else
            {
              v102 = *(_BYTE **)(v3 + 160);
              v103 = 0xAAAAAAAAAAAAAAABLL * ((v101 - v102) >> 3) + 1;
              if (v103 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_182;
              v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - (_QWORD)v102) >> 3);
              if (2 * v104 > v103)
                v103 = 2 * v104;
              if (v104 >= 0x555555555555555)
                v105 = 0xAAAAAAAAAAAAAAALL;
              else
                v105 = v103;
              if (v105)
              {
                if (v105 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_183;
                v106 = (char *)operator new(24 * v105);
                v3 = v160;
              }
              else
              {
                v106 = 0;
              }
              v107 = &v106[8 * ((v101 - v102) >> 3)];
              *(_QWORD *)v107 = v91;
              *((_QWORD *)v107 + 1) = v92;
              *((_DWORD *)v107 + 4) = v95;
              v108 = v107;
              if (v101 != v102)
              {
                v6 = a2;
                do
                {
                  v109 = *(_OWORD *)(v101 - 24);
                  *((_DWORD *)v108 - 2) = *((_DWORD *)v101 - 2);
                  *(_OWORD *)(v108 - 24) = v109;
                  v108 -= 24;
                  v101 -= 24;
                }
                while (v101 != v102);
                v101 = *(char **)(v3 + 160);
                v83 = v107 + 24;
                *(_QWORD *)(v3 + 160) = v108;
                *(_QWORD *)(v3 + 168) = v107 + 24;
                *(_QWORD *)(v3 + 176) = &v106[24 * v105];
                if (!v101)
                  goto LABEL_86;
LABEL_118:
                operator delete(v101);
                v3 = v160;
                goto LABEL_86;
              }
              v6 = a2;
              v83 = v107 + 24;
              *(_QWORD *)(v3 + 160) = v107;
              *(_QWORD *)(v3 + 168) = v107 + 24;
              *(_QWORD *)(v3 + 176) = &v106[24 * v105];
              if (v101)
                goto LABEL_118;
            }
LABEL_86:
            *(_QWORD *)(v3 + 168) = v83;
            if (!(_DWORD)v77)
              goto LABEL_127;
          }
        case 4:
          v110 = 0;
          v111 = 0;
          v112 = 0;
          v113 = (uint64_t)&v7[v8 + 1];
          v114 = v13 + v16;
          do
          {
            if (v114 == v110)
              goto LABEL_179;
            v115 = *(_BYTE *)(v113 + v110);
            v116 = v115 & 0x7F;
            if (v112 >= 0x40 && (v115 & 0x7F) != 0 || (unint64_t)(v116 << v112) >> v112 != v116)
              goto LABEL_178;
            v111 += v116 << v112;
            v112 += 7;
            ++v110;
          }
          while (v115 < 0);
          *(_QWORD *)(v6 + 8) = &v17[v110];
          if (HIDWORD(v111))
            goto LABEL_181;
          for (; (_DWORD)v111; *(_QWORD *)(v3 + 144) = v117)
          {
            v118 = 0;
            v119 = 0;
            v120 = 0;
            LODWORD(v111) = v111 - 1;
            v122 = *(_QWORD *)(v6 + 8);
            v121 = *(_QWORD *)(v6 + 16);
            do
            {
              if (v122 + v118 == v121)
                goto LABEL_179;
              v123 = *(_BYTE *)(v122 + v118);
              v124 = v123 & 0x7F;
              if (v120 >= 0x40 && (v123 & 0x7F) != 0 || (unint64_t)(v124 << v120) >> v120 != v124)
                goto LABEL_178;
              v119 += v124 << v120;
              v120 += 7;
              ++v118;
            }
            while (v123 < 0);
            v125 = v122 + v118;
            *(_QWORD *)(v6 + 8) = v125;
            v126 = v119;
            v127 = v125 + v119;
            if (v127 > v121)
              goto LABEL_180;
            v128 = 0;
            v129 = 0;
            v130 = 0;
            *(_QWORD *)(v6 + 8) = v127;
            v131 = v122 + v126 + v118;
            do
            {
              if (v131 + v128 == v121)
                goto LABEL_179;
              v132 = *(_BYTE *)(v131 + v128);
              v133 = v132 & 0x7F;
              if (v130 >= 0x40 && (v132 & 0x7F) != 0 || (unint64_t)(v133 << v130) >> v130 != v133)
                goto LABEL_178;
              v129 += v133 << v130;
              v130 += 7;
              ++v128;
            }
            while (v132 < 0);
            v134 = v127 + v128;
            *(_QWORD *)(v6 + 8) = v134;
            v135 = v129;
            v136 = v134 + v129;
            if (v136 > v121)
LABEL_180:
              llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
            v137 = 0;
            v138 = 0;
            v139 = 0;
            *(_QWORD *)(v6 + 8) = v136;
            v140 = v122 + v126 + v118 + v135 + v128;
            do
            {
              if (v140 + v137 == v121)
                goto LABEL_179;
              v141 = *(_BYTE *)(v140 + v137);
              v142 = v141 & 0x7F;
              if (v139 >= 0x40 && (v141 & 0x7F) != 0 || (unint64_t)(v142 << v139) >> v139 != v142)
                goto LABEL_178;
              v138 += v142 << v139;
              v139 += 7;
              ++v137;
            }
            while (v141 < 0);
            *(_QWORD *)(v6 + 8) = v136 + v137;
            if (HIDWORD(v138))
              goto LABEL_181;
            v144 = *(char **)(v3 + 144);
            v143 = *(_QWORD *)(v3 + 152);
            if ((unint64_t)v144 < v143)
            {
              *(_QWORD *)v144 = v125;
              *((_QWORD *)v144 + 1) = v126;
              *((_QWORD *)v144 + 2) = v134;
              *((_QWORD *)v144 + 3) = v135;
              v117 = v144 + 40;
              *((_DWORD *)v144 + 8) = v138;
            }
            else
            {
              v145 = *(_BYTE **)(v3 + 136);
              v146 = 0xCCCCCCCCCCCCCCCDLL * ((v144 - v145) >> 3) + 1;
              if (v146 > 0x666666666666666)
LABEL_182:
                abort();
              v147 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v143 - (_QWORD)v145) >> 3);
              if (2 * v147 > v146)
                v146 = 2 * v147;
              if (v147 >= 0x333333333333333)
                v148 = 0x666666666666666;
              else
                v148 = v146;
              if (v148)
              {
                if (v148 > 0x666666666666666)
LABEL_183:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v149 = (char *)operator new(40 * v148);
                v3 = v160;
              }
              else
              {
                v149 = 0;
              }
              v150 = &v149[8 * ((v144 - v145) >> 3)];
              *(_QWORD *)v150 = v125;
              *((_QWORD *)v150 + 1) = v126;
              *((_QWORD *)v150 + 2) = v134;
              *((_QWORD *)v150 + 3) = v135;
              *((_DWORD *)v150 + 8) = v138;
              v151 = v150;
              if (v144 != v145)
              {
                v6 = a2;
                do
                {
                  v152 = *(_OWORD *)(v144 - 40);
                  v153 = *(_OWORD *)(v144 - 24);
                  *((_DWORD *)v151 - 2) = *((_DWORD *)v144 - 2);
                  *(_OWORD *)(v151 - 24) = v153;
                  *(_OWORD *)(v151 - 40) = v152;
                  v151 -= 40;
                  v144 -= 40;
                }
                while (v144 != v145);
                v144 = *(char **)(v3 + 136);
                v117 = v150 + 40;
                *(_QWORD *)(v3 + 136) = v151;
                *(_QWORD *)(v3 + 144) = v150 + 40;
                *(_QWORD *)(v3 + 152) = &v149[40 * v148];
                if (!v144)
                  continue;
LABEL_170:
                operator delete(v144);
                v3 = v160;
                continue;
              }
              v6 = a2;
              v117 = v150 + 40;
              *(_QWORD *)(v3 + 136) = v150;
              *(_QWORD *)(v3 + 144) = v150 + 40;
              *(_QWORD *)(v3 + 152) = &v149[40 * v148];
              if (v144)
                goto LABEL_170;
            }
          }
LABEL_127:
          v7 = *(unsigned __int8 **)(v6 + 8);
          if (v7 != *(unsigned __int8 **)(v6 + 16))
          {
            v154 = operator new(0x30uLL);
            v155 = "dylink.0 sub-section ended prematurely";
            goto LABEL_176;
          }
          v5 = *(unsigned __int8 **)(v6 + 8);
          v4 = (unsigned __int8 *)v158;
          if ((unint64_t)v7 >= v158)
            goto LABEL_172;
          break;
        default:
          *(_QWORD *)(v6 + 8) = &v17[v9];
          goto LABEL_127;
      }
    }
  }
  v7 = *(unsigned __int8 **)(a2 + 16);
LABEL_172:
  if (v5 != v7)
  {
    v154 = operator new(0x30uLL);
    v155 = "dylink.0 section ended prematurely";
LABEL_176:
    v161 = v155;
    v162 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v154, &v161, 3);
    goto LABEL_177;
  }
  result = 0;
LABEL_177:
  *a3 = result;
  return result;
}

void llvm::object::WasmObjectFile::parseNameSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  unsigned __int8 *v62;
  unsigned int v64;
  uint64_t v65;
  llvm *v66[2];
  unsigned int v67;
  llvm *v68[2];
  int v69;
  llvm *v70[2];
  int v71;
  _QWORD v72[2];
  char v73;
  __int16 v74;

  v3 = a2;
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  v68[0] = 0;
  v68[1] = 0;
  v69 = 0;
  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  v5 = *(unsigned __int8 **)(a2 + 8);
  while (1)
  {
    while (1)
    {
      v7 = *(unsigned __int8 **)(v3 + 16);
      if (v5 >= v7)
      {
        if (v5 == v7)
        {
          v60 = 0;
        }
        else
        {
          v58 = operator new(0x30uLL);
          v59 = "name section ended prematurely";
LABEL_84:
          v72[0] = v59;
          v74 = 259;
          v60 = llvm::object::GenericBinaryError::GenericBinaryError(v58, v72, 3);
        }
        *a3 = v60;
        llvm::deallocate_buffer(v66[0], (void *)(8 * v67));
      }
      v8 = v5;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = v8 + 1;
      *(_QWORD *)(v3 + 8) = v8 + 1;
      v13 = *v8;
      do
      {
        if (&v12[v9] == v7)
LABEL_88:
          llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
        v14 = v12[v9];
        v15 = v14 & 0x7F;
        if (v11 >= 0x40 && (v14 & 0x7F) != 0 || (unint64_t)(v15 << v11) >> v11 != v15)
LABEL_87:
          llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
        v10 += v15 << v11;
        v11 += 7;
        ++v9;
      }
      while ((v14 & 0x80) != 0);
      v16 = &v12[v9];
      *(_QWORD *)(v3 + 8) = v16;
      if (HIDWORD(v10))
LABEL_89:
        llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
      v5 = &v16[v10];
      if (v13 <= 9 && ((1 << v13) & 0x282) != 0)
        break;
      *(_QWORD *)(v3 + 8) = v5;
    }
    v62 = &v16[v10];
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = (uint64_t)&v8[v9 + 1];
    do
    {
      if ((unsigned __int8 *)(v20 + v17) == v7)
        goto LABEL_88;
      v21 = *(_BYTE *)(v20 + v17);
      v22 = v21 & 0x7F;
      if (v19 >= 0x40 && (v21 & 0x7F) != 0 || (unint64_t)(v22 << v19) >> v19 != v22)
        goto LABEL_87;
      v18 += v22 << v19;
      v19 += 7;
      ++v17;
    }
    while (v21 < 0);
    v6 = &v16[v17];
    *(_QWORD *)(v3 + 8) = v6;
    if (HIDWORD(v18))
      goto LABEL_89;
    if ((_DWORD)v18)
      break;
LABEL_3:
    v5 = v62;
    if (v6 != v62)
    {
      v58 = operator new(0x30uLL);
      v59 = "name sub-section ended prematurely";
      goto LABEL_84;
    }
  }
  v64 = v13;
  while (1)
  {
    while (1)
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      LODWORD(v18) = v18 - 1;
      v27 = *(_QWORD *)(v3 + 8);
      v26 = *(_QWORD *)(v3 + 16);
      do
      {
        if (v27 + v23 == v26)
          goto LABEL_88;
        v28 = *(_BYTE *)(v27 + v23);
        v29 = v28 & 0x7F;
        if (v25 >= 0x40 && (v28 & 0x7F) != 0 || (unint64_t)(v29 << v25) >> v25 != v29)
          goto LABEL_87;
        v24 += v29 << v25;
        v25 += 7;
        ++v23;
      }
      while (v28 < 0);
      v30 = v27 + v23;
      *(_QWORD *)(v3 + 8) = v30;
      v31 = HIDWORD(v24);
      if (HIDWORD(v24))
        goto LABEL_89;
      v32 = 0;
      v33 = 0;
      v34 = v27 + v23;
      do
      {
        if (v34 + v32 == v26)
          goto LABEL_88;
        v35 = *(_BYTE *)(v34 + v32);
        v36 = v35 & 0x7F;
        if (v33 >= 0x40 && (v35 & 0x7F) != 0 || (unint64_t)(v36 << v33) >> v33 != v36)
          goto LABEL_87;
        v31 += v36 << v33;
        v33 += 7;
        ++v32;
      }
      while (v35 < 0);
      v37 = v30 + v32;
      *(_QWORD *)(v3 + 8) = v37;
      v38 = v31;
      v39 = v37 + v31;
      if (v39 > v26)
        llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
      *(_QWORD *)(v3 + 8) = v39;
      if (v13 != 7)
        break;
      v65 = v24;
      llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((char *)v68, &v65, (uint64_t)v72);
      if (!v73)
      {
        v58 = operator new(0x30uLL);
        v59 = "global named more than once";
        goto LABEL_84;
      }
      if (!v38
        || (unint64_t)*(unsigned int *)(a1 + 672)
         + ((uint64_t)(*(_QWORD *)(a1 + 360) - *(_QWORD *)(a1 + 352)) >> 6) <= v24)
      {
        v58 = operator new(0x30uLL);
        v59 = "invalid global name entry";
        goto LABEL_84;
      }
      v42 = 1;
LABEL_51:
      v46 = *(char **)(a1 + 568);
      v47 = *(_QWORD *)(a1 + 576);
      if ((unint64_t)v46 >= v47)
        goto LABEL_56;
LABEL_23:
      *(_DWORD *)v46 = v42;
      *((_DWORD *)v46 + 1) = v24;
      *((_QWORD *)v46 + 1) = v37;
      *((_QWORD *)v46 + 2) = v38;
      *(_QWORD *)(a1 + 568) = v46 + 24;
      if (!(_DWORD)v18)
        goto LABEL_2;
    }
    if (v13 == 1)
    {
      v65 = v24;
      llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((char *)v70, &v65, (uint64_t)v72);
      if (!v73)
      {
        v58 = operator new(0x30uLL);
        v59 = "function named more than once";
        goto LABEL_84;
      }
      if (!v38
        || (v40 = *(unsigned int *)(a1 + 680),
            v41 = *(_QWORD *)(a1 + 512),
            v40 + ((*(_QWORD *)(a1 + 520) - v41) >> 7) <= (unint64_t)v24))
      {
        v58 = operator new(0x30uLL);
        v59 = "invalid function name entry";
        goto LABEL_84;
      }
      v42 = 0;
      v43 = v24 >= v40;
      v44 = (v24 - v40);
      if (!v43)
        goto LABEL_51;
      v45 = v41 + (v44 << 7);
      *(_QWORD *)(v45 + 104) = v37;
      *(_QWORD *)(v45 + 112) = v38;
      v46 = *(char **)(a1 + 568);
      v47 = *(_QWORD *)(a1 + 576);
      if ((unint64_t)v46 < v47)
        goto LABEL_23;
    }
    else
    {
      v65 = v24;
      llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((char *)v66, &v65, (uint64_t)v72);
      if (!v73)
      {
        v58 = operator new(0x30uLL);
        v59 = "segment named more than once";
        goto LABEL_84;
      }
      if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 3) < (unint64_t)v24)
      {
        v58 = operator new(0x30uLL);
        v59 = "invalid data segment name entry";
        goto LABEL_84;
      }
      v42 = 2;
      v46 = *(char **)(a1 + 568);
      v47 = *(_QWORD *)(a1 + 576);
      if ((unint64_t)v46 < v47)
        goto LABEL_23;
    }
LABEL_56:
    v48 = a1;
    v49 = *(_BYTE **)(a1 + 560);
    v50 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v49) >> 3) + 1;
    if (v50 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v49) >> 3);
    if (2 * v51 > v50)
      v50 = 2 * v51;
    if (v51 >= 0x555555555555555)
      v52 = 0xAAAAAAAAAAAAAAALL;
    else
      v52 = v50;
    if (v52)
    {
      if (v52 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v53 = (char *)operator new(24 * v52);
    }
    else
    {
      v53 = 0;
    }
    v54 = &v53[8 * ((v46 - v49) >> 3)];
    *(_DWORD *)v54 = v42;
    *((_DWORD *)v54 + 1) = v24;
    *((_QWORD *)v54 + 1) = v37;
    *((_QWORD *)v54 + 2) = v38;
    v55 = v54;
    if (v46 == v49)
    {
      a1 = v48;
    }
    else
    {
      do
      {
        v56 = *(_OWORD *)(v46 - 24);
        *((_QWORD *)v55 - 1) = *((_QWORD *)v46 - 1);
        *(_OWORD *)(v55 - 24) = v56;
        v55 -= 24;
        v46 -= 24;
      }
      while (v46 != v49);
      a1 = v48;
      v46 = *(char **)(v48 + 560);
    }
    *(_QWORD *)(a1 + 560) = v55;
    v57 = v54 + 24;
    *(_QWORD *)(a1 + 568) = v54 + 24;
    *(_QWORD *)(a1 + 576) = &v53[24 * v52];
    v13 = v64;
    if (v46)
      operator delete(v46);
    v3 = a2;
    *(_QWORD *)(a1 + 568) = v57;
    if (!(_DWORD)v18)
    {
LABEL_2:
      v6 = *(unsigned __int8 **)(v3 + 8);
      goto LABEL_3;
    }
  }
}

uint64_t llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  char v7;
  uint64_t result;
  _BYTE *v9;
  char v10;
  char v11;

  v6 = operator new(0x30uLL);
  v7 = 1;
  v11 = 1;
  if (*a1)
  {
    v9 = a1;
    v7 = 3;
  }
  v10 = v7;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v6, &v9, *a2);
  *a3 = result;
  return result;
}

void llvm::object::WasmObjectFile::parseLinkingSection(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char *v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int128 *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  char *v109;
  unint64_t *v110;
  uint64_t v111;
  __int128 v112;
  unint64_t v113;
  __int16 v114;
  void *v115;
  const char *v116;
  char *v117;
  _QWORD *v118;
  unint64_t v120;
  _QWORD v121[4];
  __int16 v122;
  _QWORD v123[4];
  __int16 v124;
  _QWORD v125[4];
  __int16 v126;
  const char *v127;
  const char *v128;
  __int16 v129;

  v4 = a1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  *(_BYTE *)(a1 + 588) = 1;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned __int8 **)(a2 + 16);
  v10 = "malformed uleb128, extends past end";
  do
  {
    if ((unsigned __int8 *)(v8 + v5) == v9)
      goto LABEL_132;
    v11 = *(_BYTE *)(v8 + v5);
    v12 = v11 & 0x7F;
    if (v7 >= 0x40 && (v11 & 0x7F) != 0 || (unint64_t)(v12 << v7) >> v7 != v12)
    {
      v10 = "uleb128 too big for uint64";
LABEL_132:
      llvm::report_fatal_error((llvm *)v10, (const char *)1);
    }
    v6 += v12 << v7;
    v7 += 7;
    ++v5;
  }
  while (v11 < 0);
  v13 = (unsigned __int8 *)(v8 + v5);
  *(_QWORD *)(a2 + 8) = v13;
  if (HIDWORD(v6))
    goto LABEL_133;
  *(_DWORD *)(v4 + 592) = v6;
  if ((_DWORD)v6 != 2)
  {
    v121[0] = "unexpected metadata version: ";
    v121[2] = v6;
    v122 = 2307;
    v123[0] = v121;
    v123[2] = " (Expected: ";
    v114 = 770;
    v124 = 770;
    v125[0] = v123;
    v125[2] = 2;
    v126 = 2306;
    v127 = (const char *)v125;
    v128 = ")";
    goto LABEL_119;
  }
  v117 = "malformed uleb128, extends past end";
  while (2)
  {
    if (v13 >= v9)
    {
      if (v13 == v9)
      {
        *a3 = 0;
        return;
      }
      v115 = operator new(0x30uLL);
      v116 = "linking section ended prematurely";
LABEL_124:
      v127 = v116;
      v129 = 259;
      goto LABEL_120;
    }
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v13 + 1;
    *(_QWORD *)(a2 + 8) = v13 + 1;
    *(_QWORD *)(a2 + 16) = v9;
    v18 = *v13;
    do
    {
      v19 = v15;
      if (&v17[v14] == v9)
LABEL_128:
        llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
      v20 = v17[v14];
      v21 = v20 & 0x7F;
      if (v16 >= 0x40 && (v20 & 0x7F) != 0 || (v22 = v21 << v16, (unint64_t)(v21 << v16) >> v16 != v21))
LABEL_127:
        llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
      v15 = v22 + v19;
      v16 += 7;
      ++v14;
    }
    while ((v20 & 0x80) != 0);
    v23 = &v17[v14];
    *(_QWORD *)(a2 + 8) = v23;
    if (HIDWORD(v15))
      goto LABEL_133;
    v24 = &v23[v15];
    *(_QWORD *)(a2 + 16) = &v23[v15];
    switch(v18)
    {
      case 5:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = (uint64_t)&v13[v14 + 1];
        v29 = v19 + v22;
        do
        {
          if (v29 == v25)
            goto LABEL_130;
          v30 = *(_BYTE *)(v28 + v25);
          v31 = v30 & 0x7F;
          if (v27 >= 0x40 && (v30 & 0x7F) != 0 || (unint64_t)(v31 << v27) >> v27 != v31)
            goto LABEL_129;
          v26 += v31 << v27;
          v27 += 7;
          ++v25;
        }
        while (v30 < 0);
        v32 = &v23[v25];
        *(_QWORD *)(a2 + 8) = v32;
        if (HIDWORD(v26))
          goto LABEL_133;
        v33 = *(_QWORD *)(v4 + 472);
        if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v4 + 480) - v33) >> 3) < v26)
        {
          v115 = operator new(0x30uLL);
          v116 = "too many segment names";
          goto LABEL_124;
        }
        if (v26)
        {
          v34 = 0;
          while (1)
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            do
            {
              if (&v32[v35] == v24)
                goto LABEL_128;
              v38 = v32[v35];
              v39 = v38 & 0x7F;
              if (v37 >= 0x40 && (v38 & 0x7F) != 0 || (unint64_t)(v39 << v37) >> v37 != v39)
                goto LABEL_127;
              v36 += v39 << v37;
              v37 += 7;
              ++v35;
            }
            while ((v38 & 0x80) != 0);
            v40 = &v32[v35];
            *(_QWORD *)(a2 + 8) = v40;
            v41 = v36;
            v42 = (unint64_t)&v40[v36];
            if (v42 > (unint64_t)v24)
              llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
            v43 = 0;
            v44 = 0;
            v45 = 0;
            *(_QWORD *)(a2 + 8) = v42;
            v46 = v33 + 104 * v34;
            *(_QWORD *)(v46 + 72) = v40;
            *(_QWORD *)(v46 + 80) = v41;
            v47 = *(_QWORD *)(a2 + 8);
            v24 = *(unsigned __int8 **)(a2 + 16);
            do
            {
              if ((unsigned __int8 *)(v47 + v43) == v24)
                goto LABEL_128;
              v48 = *(_BYTE *)(v47 + v43);
              v49 = v48 & 0x7F;
              if (v45 >= 0x40 && (v48 & 0x7F) != 0 || (unint64_t)(v49 << v45) >> v45 != v49)
                goto LABEL_127;
              v44 += v49 << v45;
              v45 += 7;
              ++v43;
            }
            while (v48 < 0);
            v50 = v47 + v43;
            *(_QWORD *)(a2 + 8) = v50;
            if (HIDWORD(v44))
              break;
            v51 = 0;
            v52 = 0;
            v53 = 0;
            v33 = *(_QWORD *)(v4 + 472);
            *(_DWORD *)(v33 + 104 * v34 + 88) = v44;
            v54 = v47 + v43;
            do
            {
              if ((unsigned __int8 *)(v54 + v51) == v24)
                goto LABEL_128;
              v55 = *(_BYTE *)(v54 + v51);
              v56 = v55 & 0x7F;
              if (v53 >= 0x40 && (v55 & 0x7F) != 0 || (unint64_t)(v56 << v53) >> v53 != v56)
                goto LABEL_127;
              v52 += v56 << v53;
              v53 += 7;
              ++v51;
            }
            while (v55 < 0);
            v32 = (unsigned __int8 *)(v50 + v51);
            *(_QWORD *)(a2 + 8) = v32;
            if (HIDWORD(v52))
              break;
            *(_DWORD *)(v33 + 104 * v34++ + 92) = v52;
            if (v34 == v26)
              goto LABEL_11;
          }
LABEL_133:
          llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
        }
LABEL_11:
        v13 = *(unsigned __int8 **)(a2 + 8);
        if (v13 == *(unsigned __int8 **)(a2 + 16))
          continue;
        v115 = operator new(0x30uLL);
        v116 = "linking sub-section ended prematurely";
        goto LABEL_124;
      case 6:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = (uint64_t)&v13[v14 + 1];
        v61 = v19 + v22;
        do
        {
          if (v61 == v57)
            goto LABEL_130;
          v62 = *(_BYTE *)(v60 + v57);
          v63 = v62 & 0x7F;
          if (v59 >= 0x40 && (v62 & 0x7F) != 0 || (unint64_t)(v63 << v59) >> v59 != v63)
          {
LABEL_129:
            v117 = "uleb128 too big for uint64";
LABEL_130:
            llvm::report_fatal_error((llvm *)v117, (const char *)1);
          }
          v58 += v63 << v59;
          v59 += 7;
          ++v57;
        }
        while (v62 < 0);
        *(_QWORD *)(a2 + 8) = &v23[v57];
        if (HIDWORD(v58))
          goto LABEL_133;
        v64 = *(_BYTE **)(v4 + 600);
        if (v58 <= (uint64_t)(*(_QWORD *)(v4 + 616) - (_QWORD)v64) >> 3)
          goto LABEL_76;
        v65 = *(_BYTE **)(v4 + 608);
        v66 = (char *)operator new(8 * v58);
        v67 = v65 - v64;
        v68 = &v66[(v65 - v64) & 0xFFFFFFFFFFFFFFF8];
        v69 = v68;
        if (v65 == v64)
          goto LABEL_74;
        v70 = v65 - 8 - v64;
        if (v70 < 0x58)
        {
          v69 = &v66[(v65 - v64) & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_73:
            v79 = *((_QWORD *)v65 - 1);
            v65 -= 8;
            *((_QWORD *)v69 - 1) = v79;
            v69 -= 8;
          }
          while (v65 != v64);
          goto LABEL_74;
        }
        v69 = &v66[(v65 - v64) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(&v65[-(v67 & 0xFFFFFFFFFFFFFFF8)] - v66) < 0x20)
          goto LABEL_73;
        v71 = v67 >> 3;
        v72 = (v70 >> 3) + 1;
        v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v65[-v73];
        v69 = &v68[-v73];
        v75 = &v66[8 * v71 - 16];
        v76 = (__int128 *)(v65 - 16);
        v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *v76;
          *((_OWORD *)v75 - 1) = *(v76 - 1);
          *(_OWORD *)v75 = v78;
          v75 -= 32;
          v76 -= 2;
          v77 -= 4;
        }
        while (v77);
        v65 = v74;
        if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_73;
LABEL_74:
        *(_QWORD *)(v4 + 600) = v69;
        *(_QWORD *)(v4 + 608) = v68;
        *(_QWORD *)(v4 + 616) = &v66[8 * v58];
        if (v64)
          operator delete(v64);
LABEL_76:
        if (!(_DWORD)v58)
          goto LABEL_11;
        v80 = 0;
        v118 = (_QWORD *)v4;
        while (2)
        {
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v86 = *(_QWORD *)(a2 + 8);
          v85 = *(_QWORD *)(a2 + 16);
          do
          {
            if (v86 + v82 == v85)
              goto LABEL_128;
            v87 = *(_BYTE *)(v86 + v82);
            v88 = v87 & 0x7F;
            if (v84 >= 0x40 && (v87 & 0x7F) != 0 || (unint64_t)(v88 << v84) >> v84 != v88)
              goto LABEL_127;
            v83 += v88 << v84;
            v84 += 7;
            ++v82;
          }
          while (v87 < 0);
          v89 = v86 + v82;
          *(_QWORD *)(a2 + 8) = v89;
          v90 = HIDWORD(v83);
          if (HIDWORD(v83))
            goto LABEL_133;
          v91 = 0;
          v92 = 0;
          v93 = v86 + v82;
          do
          {
            if (v93 + v90 == v85)
              goto LABEL_128;
            v94 = *(_BYTE *)(v93 + v90);
            v95 = v94 & 0x7F;
            if (v92 >= 0x40 && (v94 & 0x7F) != 0 || (unint64_t)(v95 << v92) >> v92 != v95)
              goto LABEL_127;
            v91 += v95 << v92;
            v92 += 7;
            ++v90;
          }
          while (v94 < 0);
          *(_QWORD *)(a2 + 8) = v89 + v90;
          if (HIDWORD(v91))
            goto LABEL_133;
          v96 = *(_QWORD *)(v4 + 536);
          if (v91 < (*(_QWORD *)(v4 + 544) - v96) >> 5 && !*(_BYTE *)(*(_QWORD *)(v96 + 32 * v91) + 16))
          {
            v97 = *(unint64_t **)(v4 + 608);
            v98 = *(_QWORD *)(v4 + 616);
            if ((unint64_t)v97 < v98)
            {
              *v97 = v83 | ((unint64_t)v91 << 32);
              v81 = (uint64_t)(v97 + 1);
              goto LABEL_79;
            }
            v99 = *(char **)(v4 + 600);
            v100 = ((char *)v97 - v99) >> 3;
            v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 61)
              abort();
            v102 = v98 - (_QWORD)v99;
            if (v102 >> 2 > v101)
              v101 = v102 >> 2;
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
              v101 = 0x1FFFFFFFFFFFFFFFLL;
            v120 = v101;
            if (v101)
            {
              if (v101 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v103 = (char *)operator new(8 * v101);
              v104 = (unint64_t *)&v103[8 * v100];
              *v104 = v83 | ((unint64_t)v91 << 32);
              v81 = (uint64_t)(v104 + 1);
              if (v97 != (unint64_t *)v99)
              {
LABEL_105:
                v105 = (char *)(v97 - 1) - v99;
                if (v105 < 0x58)
                  goto LABEL_139;
                if ((unint64_t)(v99 - v103) < 0x20)
                  goto LABEL_139;
                v106 = (v105 >> 3) + 1;
                v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
                v108 = &v97[v107 / 0xFFFFFFFFFFFFFFF8];
                v104 = (unint64_t *)((char *)v104 - v107);
                v109 = &v103[8 * v100 - 16];
                v110 = v97 - 2;
                v111 = v106 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v112 = *(_OWORD *)v110;
                  *((_OWORD *)v109 - 1) = *((_OWORD *)v110 - 1);
                  *(_OWORD *)v109 = v112;
                  v109 -= 32;
                  v110 -= 4;
                  v111 -= 4;
                }
                while (v111);
                v97 = v108;
                if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_139:
                  do
                  {
                    v113 = *--v97;
                    *--v104 = v113;
                  }
                  while (v97 != (unint64_t *)v99);
                }
                v4 = (uint64_t)v118;
                v97 = (unint64_t *)v118[75];
                v118[75] = v104;
                v118[76] = v81;
                v118[77] = &v103[8 * v120];
                if (v97)
                  goto LABEL_116;
                goto LABEL_79;
              }
            }
            else
            {
              v103 = 0;
              v104 = (unint64_t *)(8 * v100);
              *(_QWORD *)(8 * v100) = v83 | ((unint64_t)v91 << 32);
              v81 = 8 * v100 + 8;
              if (v97 != (unint64_t *)v99)
                goto LABEL_105;
            }
            v4 = (uint64_t)v118;
            v118[75] = v104;
            v118[76] = v81;
            v118[77] = &v103[8 * v120];
            if (v97)
LABEL_116:
              operator delete(v97);
LABEL_79:
            *(_QWORD *)(v4 + 608) = v81;
            if (++v80 == (_DWORD)v58)
              goto LABEL_11;
            continue;
          }
          break;
        }
        v127 = "invalid function symbol: ";
        v128 = (const char *)v91;
        v114 = 2307;
LABEL_119:
        v129 = v114;
        v115 = operator new(0x30uLL);
LABEL_120:
        *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v115, &v127, 3);
        return;
      case 7:
        llvm::object::WasmObjectFile::parseLinkingSectionComdat(v4, a2, a3);
        if (*a3)
          return;
        goto LABEL_11;
      case 8:
        llvm::object::WasmObjectFile::parseLinkingSectionSymtab((_QWORD *)v4, a2, a3);
        if (*a3)
          return;
        goto LABEL_11;
      default:
        *(_QWORD *)(a2 + 8) = v24;
        goto LABEL_11;
    }
  }
}

void llvm::object::WasmObjectFile::parseLinkingSectionSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  _QWORD *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  int v112;
  unsigned __int8 *v113;
  int8x16_t *v114;
  unsigned __int8 v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  int8x16_t *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  char v140;
  char v141;
  char v142;
  char v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  int8x16_t *v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  int8x16_t *v165;
  unsigned int v166;
  char *v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  unsigned __int8 *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  unsigned __int8 *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  int v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  char *v262;
  int8x16_t *v263;
  char *v264;
  const unsigned __int8 *v265;
  _QWORD *v266;
  char v267;
  char v268;
  char v269;
  int8x16_t **v270;
  unint64_t v271;
  int v272;
  int8x16_t **v273;
  char *v274;
  unint64_t v275;
  _QWORD *v276;
  unint64_t v277;
  unint64_t v278;
  char v279;
  char v280;
  const unsigned __int8 *v281;
  int8x16_t *v282;
  char *v283;
  char *v284;
  int v285;
  char *v286;
  unint64_t v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  char *v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  char *v301;
  int8x16_t ***v302;
  char *v303;
  char *v304;
  __int128 v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  llvm *v313;
  __int16 v315;
  void *v316;
  const char *v317;
  char *v318;
  _QWORD *v319;
  char *v320;
  char *v321;
  char v322;
  char *v323;
  unint64_t v324;
  char *v325;
  char *__p;
  char *v327;
  int8x16_t **v328;
  char *v329;
  int8x16_t **v330;
  char *v331;
  unint64_t v332;
  char *v333;
  int8x16_t *v334;
  char *v335;
  int8x16_t *v336;
  char *v337;
  char v338;
  char *v339;
  int v340;
  _QWORD *__sz;
  uint64_t v342;
  const char *v343;
  __int16 v344;
  unint64_t *v345;
  __int16 v346;
  const char *v347;
  __int16 v348;
  int8x16_t **v349;
  __int16 v350;
  const char *v351;
  __int16 v352;
  uint64_t v353[4];
  __int16 v354;
  uint64_t v355[5];
  uint64_t v356[5];
  unint64_t v357;
  uint64_t v358[4];
  __int16 v359;
  uint64_t v360[4];
  __int16 v361;
  int8x16_t *v362;
  _BYTE v363[7];
  _BYTE v364[7];
  _BYTE v365[7];
  __int16 v366;
  char v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD v371[2];
  int8x16_t *v372;
  unint64_t v373;
  __int16 v374;
  _BYTE v375[15];
  _QWORD v376[2];
  _QWORD v377[4];

  v4 = a2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v377[2] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 8);
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v10 + v7 == *(_QWORD *)(a2 + 16))
      goto LABEL_423;
    v12 = *(_BYTE *)(v10 + v7);
    v13 = v12 & 0x7F;
    if (v9 >= 0x40 && (v12 & 0x7F) != 0 || (unint64_t)(v13 << v9) >> v9 != v13)
    {
      v11 = "uleb128 too big for uint64";
LABEL_423:
      llvm::report_fatal_error((llvm *)v11, (const char *)1);
    }
    v8 += v13 << v9;
    v9 += 7;
    ++v7;
  }
  while (v12 < 0);
  *(_QWORD *)(a2 + 8) = v10 + v7;
  if (HIDWORD(v8))
LABEL_425:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v14 = (void *)a1[81];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[83] - (_QWORD)v14) >> 3) < v8)
  {
    v3 = a1[82];
    v15 = (char *)operator new(120 * v8);
    v16 = &v15[120 * ((uint64_t)(v3 - (_QWORD)v14) / 120)];
    v17 = v16;
    if ((void *)v3 != v14)
    {
      v18 = &v15[120 * ((uint64_t)(v3 - (_QWORD)v14) / 120)];
      do
      {
        v19 = *(_OWORD *)(v3 - 120);
        v20 = *(_OWORD *)(v3 - 104);
        v21 = *(_OWORD *)(v3 - 88);
        *(_OWORD *)(v18 - 72) = *(_OWORD *)(v3 - 72);
        *(_OWORD *)(v18 - 88) = v21;
        *(_OWORD *)(v18 - 104) = v20;
        *(_OWORD *)(v18 - 120) = v19;
        v22 = *(_OWORD *)(v3 - 56);
        v23 = *(_OWORD *)(v3 - 40);
        v24 = *(_OWORD *)(v3 - 24);
        v17 = v18 - 120;
        *((_QWORD *)v18 - 1) = *(_QWORD *)(v3 - 8);
        *(_OWORD *)(v18 - 24) = v24;
        *(_OWORD *)(v18 - 40) = v23;
        *(_OWORD *)(v18 - 56) = v22;
        v3 -= 120;
        v18 -= 120;
      }
      while ((void *)v3 != v14);
    }
    a1[81] = v17;
    a1[82] = v16;
    a1[83] = &v15[120 * v8];
    if (v14)
      operator delete(v14);
  }
  v25 = (void *)a1[67];
  if (v8 > (uint64_t)(a1[69] - (_QWORD)v25) >> 5)
  {
    v3 = a1[68];
    v26 = (char *)operator new(32 * v8);
    v27 = &v26[(v3 - (_QWORD)v25) & 0xFFFFFFFFFFFFFFE0];
    v28 = v27;
    if ((void *)v3 != v25)
    {
      v29 = &v26[(v3 - (_QWORD)v25) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        v28 = v29 - 32;
        v30 = *(_OWORD *)(v3 - 16);
        *((_OWORD *)v29 - 2) = *(_OWORD *)(v3 - 32);
        *((_OWORD *)v29 - 1) = v30;
        v3 -= 32;
        v29 -= 32;
      }
      while ((void *)v3 != v25);
    }
    a1[67] = v28;
    a1[68] = v27;
    a1[69] = &v26[32 * v8];
    if (v25)
      operator delete(v25);
  }
  v368 = 0;
  v369 = 0;
  v370 = 0x800000000;
  v32 = (int8x16_t *)a1[50];
  v31 = (int8x16_t *)a1[51];
  __sz = a1;
  v342 = v4;
  v319 = a3;
  if (v31 != v32)
  {
    if ((0x8E38E38E38E38E39 * (((char *)v31 - (char *)v32) >> 3)) >> 61)
LABEL_424:
      abort();
    v33 = 0x71C71C71C71C71C8 * (((char *)v31 - (char *)v32) >> 3);
    v34 = (char *)operator new(v33);
    v331 = &v34[v33];
    v3 = (unint64_t)operator new(v33);
    v329 = (char *)(v3 + v33);
    v35 = (char *)operator new(v33);
    v327 = &v35[v33];
    v36 = (char *)operator new(v33);
    v323 = &v36[v33];
    v325 = v34;
    v333 = v34;
    v335 = (char *)v3;
    __p = (char *)v3;
    v37 = v36;
    v337 = v35;
    v339 = v36;
    while (1)
    {
      switch(v32[2].i8[0])
      {
        case 0:
          if (v335 < v329)
          {
            *(_QWORD *)v335 = v32;
            v335 += 8;
            goto LABEL_25;
          }
          LODWORD(v3) = (_DWORD)v35;
          v38 = (v335 - __p) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
            goto LABEL_424;
          if ((v329 - __p) >> 2 > v39)
            v39 = (v329 - __p) >> 2;
          if ((unint64_t)(v329 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
          {
            if (v40 >> 61)
              goto LABEL_426;
            v41 = operator new(8 * v40);
          }
          else
          {
            v41 = 0;
          }
          v58 = &v41[8 * v38];
          *(_QWORD *)v58 = v32;
          v59 = v58 + 8;
          v60 = __p;
          if (v335 != __p)
          {
            v61 = v335 - 8 - __p;
            if (v61 < 0x168)
            {
              v62 = v335;
              goto LABEL_95;
            }
            if (&v41[v335 - __p - 8 - (v61 & 0xFFFFFFFFFFFFFFF8)] <= &v41[v335 - __p - 8]
              && &v335[-(v61 & 0xFFFFFFFFFFFFFFF8) - 8] <= v335 - 8
              && (unint64_t)(__p - v41) >= 0x20)
            {
              v82 = (v61 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v62 = &v335[-v83];
              v58 -= v83;
              v84 = &v41[8 * v38 - 16];
              v85 = v335 - 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *(_OWORD *)v85;
                *(v84 - 1) = *((_OWORD *)v85 - 1);
                *v84 = v87;
                v84 -= 2;
                v85 -= 32;
                v86 -= 4;
              }
              while (v86);
              v60 = __p;
              a1 = __sz;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_97;
            }
            else
            {
              v62 = v335;
LABEL_95:
              v60 = __p;
              a1 = __sz;
            }
            do
            {
              v78 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *((_QWORD *)v58 - 1) = v78;
              v58 -= 8;
            }
            while (v62 != v60);
            goto LABEL_97;
          }
          a1 = __sz;
LABEL_97:
          v329 = &v41[8 * v40];
          if (v60)
            operator delete(v60);
          v335 = v59;
          __p = v58;
LABEL_24:
          v4 = v342;
LABEL_25:
          v32 = (int8x16_t *)((char *)v32 + 72);
          if (v32 == v31)
            goto LABEL_143;
          break;
        case 1:
          if (v339 < v323)
          {
            *(_QWORD *)v339 = v32;
            v339 += 8;
            goto LABEL_25;
          }
          LODWORD(v3) = (_DWORD)v35;
          v42 = (v339 - v37) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            goto LABEL_424;
          if ((v323 - v37) >> 2 > v43)
            v43 = (v323 - v37) >> 2;
          if ((unint64_t)(v323 - v37) >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
          {
            if (v44 >> 61)
              goto LABEL_426;
            v45 = (char *)operator new(8 * v44);
          }
          else
          {
            v45 = 0;
          }
          v63 = &v45[8 * v42];
          *(_QWORD *)v63 = v32;
          v64 = v63 + 8;
          v65 = v37;
          if (v339 == v37)
          {
            a1 = __sz;
          }
          else
          {
            v66 = v339 - 8 - v37;
            if (v66 < 0x168)
            {
              v67 = v339;
              goto LABEL_104;
            }
            if (&v45[v339 - v37 - 8 - (v66 & 0xFFFFFFFFFFFFFFF8)] <= &v45[v339 - v37 - 8]
              && &v339[-(v66 & 0xFFFFFFFFFFFFFFF8) - 8] <= v339 - 8
              && (unint64_t)(v37 - v45) >= 0x20)
            {
              v88 = (v66 >> 3) + 1;
              v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
              v67 = &v339[-v89];
              v63 -= v89;
              v90 = &v45[8 * v42 - 16];
              v91 = (__int128 *)(v339 - 16);
              v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v93 = *v91;
                *((_OWORD *)v90 - 1) = *(v91 - 1);
                *(_OWORD *)v90 = v93;
                v90 -= 32;
                v91 -= 2;
                v92 -= 4;
              }
              while (v92);
              v65 = v37;
              a1 = __sz;
              if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_105;
            }
            else
            {
              v67 = v339;
LABEL_104:
              v65 = v37;
              a1 = __sz;
              do
              {
LABEL_105:
                v79 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v63 - 1) = v79;
                v63 -= 8;
              }
              while (v67 != v65);
            }
          }
          v323 = &v45[8 * v44];
          if (v65)
            operator delete(v65);
          v339 = v64;
          v37 = v63;
          goto LABEL_24;
        case 3:
          if (v333 < v331)
          {
            *(_QWORD *)v333 = v32;
            v333 += 8;
            goto LABEL_25;
          }
          LODWORD(v3) = (_DWORD)v35;
          v46 = (v333 - v325) >> 3;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
            goto LABEL_424;
          if ((v331 - v325) >> 2 > v47)
            v47 = (v331 - v325) >> 2;
          if ((unint64_t)(v331 - v325) >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
          {
            if (v48 >> 61)
              goto LABEL_426;
            v49 = operator new(8 * v48);
          }
          else
          {
            v49 = 0;
          }
          v68 = &v49[8 * v46];
          *(_QWORD *)v68 = v32;
          v69 = v68 + 8;
          v70 = v325;
          if (v333 == v325)
          {
            a1 = __sz;
          }
          else
          {
            v71 = v333 - 8 - v325;
            if (v71 < 0x168)
            {
              v72 = v333;
              goto LABEL_112;
            }
            if (&v49[v333 - v325 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] <= &v49[v333 - v325 - 8]
              && &v333[-(v71 & 0xFFFFFFFFFFFFFFF8) - 8] <= v333 - 8
              && (unint64_t)(v325 - v49) >= 0x20)
            {
              v94 = (v71 >> 3) + 1;
              v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
              v72 = &v333[-v95];
              v68 -= v95;
              v96 = &v49[8 * v46 - 16];
              v97 = v333 - 16;
              v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v99 = *(_OWORD *)v97;
                *(v96 - 1) = *((_OWORD *)v97 - 1);
                *v96 = v99;
                v96 -= 2;
                v97 -= 32;
                v98 -= 4;
              }
              while (v98);
              v70 = v325;
              a1 = __sz;
              if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_113;
            }
            else
            {
              v72 = v333;
LABEL_112:
              v70 = v325;
              a1 = __sz;
              do
              {
LABEL_113:
                v80 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v68 - 1) = v80;
                v68 -= 8;
              }
              while (v72 != v70);
            }
          }
          v331 = &v49[8 * v48];
          if (v70)
            operator delete(v70);
          v333 = v69;
          v325 = v68;
          goto LABEL_24;
        case 4:
          if (v337 < v327)
          {
            *(_QWORD *)v337 = v32;
            v337 += 8;
            goto LABEL_25;
          }
          v50 = v35;
          v51 = v337 - v35;
          v52 = v51 >> 3;
          v53 = (v51 >> 3) + 1;
          if (v53 >> 61)
            goto LABEL_424;
          v3 = (unint64_t)v50;
          v54 = v327 - v50;
          v55 = (v327 - v50) >> 2;
          if (v55 > v53)
            v53 = v55;
          if (v54 >= 0x7FFFFFFFFFFFFFF8)
            v56 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v56 = v53;
          if (v56)
          {
            if (v56 >> 61)
LABEL_426:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v57 = operator new(8 * v56);
          }
          else
          {
            v57 = 0;
          }
          v73 = &v57[8 * v52];
          *(_QWORD *)v73 = v32;
          v74 = v73 + 8;
          v75 = (char *)v3;
          if (v337 == (char *)v3)
          {
            a1 = __sz;
          }
          else
          {
            v76 = (unint64_t)&v337[-v3 - 8];
            if (v76 < 0x168)
            {
              v77 = v337;
              goto LABEL_121;
            }
            if (&v57[v51 - 8 - (v76 & 0xFFFFFFFFFFFFFFF8)] <= &v57[v51 - 8]
              && &v337[-(v76 & 0xFFFFFFFFFFFFFFF8) - 8] <= v337 - 8
              && (unint64_t)(v337 - &v57[v51]) >= 0x20)
            {
              v100 = (v76 >> 3) + 1;
              v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
              v77 = &v337[-v101];
              v73 -= v101;
              v102 = &v57[8 * v52 - 16];
              v103 = v337 - 16;
              v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
              v75 = (char *)v3;
              do
              {
                v105 = *(_OWORD *)v103;
                *(v102 - 1) = *((_OWORD *)v103 - 1);
                *v102 = v105;
                v102 -= 2;
                v103 -= 32;
                v104 -= 4;
              }
              while (v104);
              a1 = __sz;
              if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_122;
            }
            else
            {
              v77 = v337;
LABEL_121:
              v75 = (char *)v3;
              a1 = __sz;
              do
              {
LABEL_122:
                v81 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v73 - 1) = v81;
                v73 -= 8;
              }
              while (v77 != v75);
            }
          }
          v327 = &v57[8 * v56];
          if (v75)
            operator delete(v75);
          v337 = v74;
          v35 = v73;
          goto LABEL_24;
        default:
          goto LABEL_25;
      }
    }
  }
  v37 = 0;
  v35 = 0;
  v325 = 0;
  __p = 0;
LABEL_143:
  v320 = v37;
  if (!(_DWORD)v8)
  {
LABEL_384:
    v309 = v320;
    *v319 = 0;
    v310 = v325;
    v311 = __p;
    if (!v320)
      goto LABEL_386;
    goto LABEL_385;
  }
  v318 = "malformed uleb128, extends past end";
  v321 = v35;
  while (2)
  {
    v108 = *(unsigned __int8 **)(v4 + 8);
    v107 = *(unsigned __int8 **)(v4 + 16);
    if (v108 == v107)
      llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112 = v8 - 1;
    v113 = v108 + 1;
    *(_QWORD *)(v4 + 8) = v108 + 1;
    v114 = (int8x16_t *)*v108;
    do
    {
      if (&v113[v109] == v107)
LABEL_419:
        llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
      v115 = v113[v109];
      v116 = v115 & 0x7F;
      if (v111 >= 0x40 && (v115 & 0x7F) != 0 || (unint64_t)(v116 << v111) >> v111 != v116)
LABEL_418:
        llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
      v110 += v116 << v111;
      v111 += 7;
      ++v109;
    }
    while ((v115 & 0x80) != 0);
    v117 = &v113[v109];
    *(_QWORD *)(v4 + 8) = v117;
    if (HIDWORD(v110))
      goto LABEL_425;
    v118 = v110 & 0x10;
    v338 = (char)v114;
    v340 = v112;
    switch((int)v114)
    {
      case 0:
        v119 = 0;
        v3 = 0;
        v120 = 0;
        v121 = (uint64_t)&v108[v109 + 1];
        do
        {
          if ((unsigned __int8 *)(v121 + v119) == v107)
            goto LABEL_419;
          v122 = *(_BYTE *)(v121 + v119);
          v123 = v122 & 0x7F;
          if (v120 >= 0x40 && (v122 & 0x7F) != 0 || (unint64_t)(v123 << v120) >> v120 != v123)
            goto LABEL_418;
          v3 += v123 << v120;
          v120 += 7;
          ++v119;
        }
        while (v122 < 0);
        v124 = &v117[v119];
        *(_QWORD *)(v4 + 8) = v124;
        if (HIDWORD(v3))
          goto LABEL_425;
        v125 = *((unsigned int *)a1 + 170);
        v126 = a1[64];
        if (v125 + ((a1[65] - v126) >> 7) <= v3
          || ((v127 = v3 >= v125, v128 = (v3 - v125), !v127)
            ? (v129 = 0)
            : (v129 = 1),
              ((v118 >> 4) ^ 1) != v129))
        {
          v316 = operator new(0x30uLL);
          v317 = "invalid function symbol index";
          goto LABEL_413;
        }
        v334 = (int8x16_t *)v37;
        v336 = v31;
        if ((v110 & 0x10) != 0)
        {
          v232 = *(_QWORD *)&__p[8 * v3];
          if ((v110 & 0x40) != 0)
          {
            v235 = 0;
            v236 = 0;
            v237 = 0;
            v238 = (uint64_t)&v108[v109 + 1 + v119];
            do
            {
              if ((unsigned __int8 *)(v238 + v235) == v107)
                goto LABEL_421;
              v239 = *(_BYTE *)(v238 + v235);
              v240 = v239 & 0x7F;
              if (v237 >= 0x40 && (v239 & 0x7F) != 0 || (unint64_t)(v240 << v237) >> v237 != v240)
                goto LABEL_420;
              v236 += v240 << v237;
              v237 += 7;
              ++v235;
            }
            while (v239 < 0);
            v136 = (int8x16_t *)&v124[v235];
            *(_QWORD *)(v4 + 8) = v136;
            v137 = v236;
            v241 = &v136->i8[v236];
            if (v241 > (char *)v107)
              goto LABEL_428;
            *(_QWORD *)(v4 + 8) = v241;
            v141 = *(_BYTE *)(v232 + 16);
            v376[0] = *(_QWORD *)(v232 + 17);
            *(_QWORD *)((char *)v376 + 7) = *(_QWORD *)(v232 + 24);
            v140 = 1;
          }
          else
          {
            v140 = 0;
            v141 = 0;
            v136 = *(int8x16_t **)(v232 + 16);
            v137 = *(_QWORD *)(v232 + 24);
          }
          v328 = 0;
          v330 = 0;
          v332 = a1[35] + ((unint64_t)*(unsigned int *)(v232 + 40) << 6);
          v143 = *(_BYTE *)v232;
          v377[0] = *(_QWORD *)(v232 + 1);
          *(_QWORD *)((char *)v377 + 7) = *(_QWORD *)(v232 + 8);
          v142 = 1;
          if ((v110 & 3) != 2)
            goto LABEL_342;
        }
        else
        {
          v130 = 0;
          v131 = 0;
          v132 = 0;
          v133 = (uint64_t)&v108[v109 + 1 + v119];
          do
          {
            if ((unsigned __int8 *)(v133 + v130) == v107)
              goto LABEL_421;
            v134 = *(_BYTE *)(v133 + v130);
            v135 = v134 & 0x7F;
            if (v132 >= 0x40 && (v134 & 0x7F) != 0 || (unint64_t)(v135 << v132) >> v132 != v135)
              goto LABEL_420;
            v131 += v135 << v132;
            v132 += 7;
            ++v130;
          }
          while (v134 < 0);
          v136 = (int8x16_t *)&v124[v130];
          *(_QWORD *)(v4 + 8) = v136;
          v137 = v131;
          v138 = &v136->i8[v131];
          if (v138 > (char *)v107)
            goto LABEL_428;
          *(_QWORD *)(v4 + 8) = v138;
          v139 = v126 + (v128 << 7);
          v332 = a1[35] + ((unint64_t)*(unsigned int *)(v139 + 4) << 6);
          if (*(_QWORD *)(v139 + 96))
          {
            v140 = 0;
            v141 = 0;
            v142 = 0;
            v143 = 0;
LABEL_290:
            v328 = 0;
            v330 = 0;
            if ((v110 & 3) != 2)
              goto LABEL_342;
          }
          else
          {
            v140 = 0;
            v141 = 0;
            v142 = 0;
            v143 = 0;
            v328 = 0;
            v330 = 0;
            *(_QWORD *)(v139 + 88) = v136;
            *(_QWORD *)(v139 + 96) = v131;
            if ((v110 & 3) != 2)
              goto LABEL_342;
          }
        }
        goto LABEL_343;
      case 1:
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v147 = (uint64_t)&v108[v109 + 1];
        do
        {
          if ((unsigned __int8 *)(v147 + v144) == v107)
            goto LABEL_419;
          v148 = *(_BYTE *)(v147 + v144);
          v149 = v148 & 0x7F;
          if (v146 >= 0x40 && (v148 & 0x7F) != 0 || (unint64_t)(v149 << v146) >> v146 != v149)
            goto LABEL_418;
          v145 += v149 << v146;
          v146 += 7;
          ++v144;
        }
        while (v148 < 0);
        v136 = (int8x16_t *)&v117[v144];
        *(_QWORD *)(v4 + 8) = v136;
        v137 = v145;
        v150 = &v136->i8[v145];
        if (v150 > (char *)v107)
          goto LABEL_428;
        *(_QWORD *)(v4 + 8) = v150;
        if ((v110 & 0x10) != 0)
        {
          v334 = (int8x16_t *)v37;
          v336 = v31;
        }
        else
        {
          v151 = 0;
          v152 = 0;
          v153 = 0;
          v154 = (uint64_t)&v108[v109 + 1 + v137 + v144];
          do
          {
            if ((unsigned __int8 *)(v154 + v151) == v107)
              goto LABEL_421;
            v155 = *(_BYTE *)(v154 + v151);
            v156 = v155 & 0x7F;
            if (v153 >= 0x40 && (v155 & 0x7F) != 0 || (unint64_t)(v156 << v153) >> v153 != v156)
              goto LABEL_420;
            v152 += v156 << v153;
            v153 += 7;
            ++v151;
          }
          while (v155 < 0);
          v157 = &v150[v151];
          *(_QWORD *)(v4 + 8) = v157;
          v158 = HIDWORD(v152);
          if (HIDWORD(v152))
            goto LABEL_425;
          v159 = 0;
          v160 = 0;
          LODWORD(v3) = v152;
          v161 = (uint64_t)&v108[v109 + 1 + v137 + v144 + v151];
          do
          {
            if ((unsigned __int8 *)(v161 + v159) == v107)
              goto LABEL_421;
            v162 = *(_BYTE *)(v161 + v159);
            v163 = v162 & 0x7F;
            if (v158 >= 0x40 && (v162 & 0x7F) != 0 || (unint64_t)(v163 << v158) >> v158 != v163)
              goto LABEL_420;
            v160 = (int8x16_t *)((char *)v160 + (v163 << v158));
            LODWORD(v158) = v158 + 7;
            ++v159;
          }
          while (v162 < 0);
          v164 = 0;
          v165 = 0;
          v166 = 0;
          v167 = &v157[v159];
          *(_QWORD *)(v4 + 8) = v167;
          v362 = v160;
          v168 = (uint64_t)&v108[v109
                              + 1
                              + v137
                              + v144
                              + v151
                              + v159];
          do
          {
            if ((unsigned __int8 *)(v168 + v164) == v107)
              goto LABEL_421;
            v169 = *(_BYTE *)(v168 + v164);
            v170 = v169 & 0x7F;
            if (v166 >= 0x40 && (v169 & 0x7F) != 0 || (unint64_t)(v170 << v166) >> v166 != v170)
              goto LABEL_420;
            v165 = (int8x16_t *)((char *)v165 + (v170 << v166));
            v166 += 7;
            ++v164;
          }
          while (v169 < 0);
          *(_QWORD *)(v4 + 8) = &v167[v164];
          if ((v110 & 0x200) == 0)
          {
            v171 = a1[59];
            if (0x4EC4EC4EC4EC4EC5 * ((a1[60] - v171) >> 3) <= (unint64_t)v152)
            {
              v360[0] = (uint64_t)"invalid data segment index: ";
              v361 = 259;
              v359 = 265;
              LODWORD(v358[0]) = v152;
              llvm::operator+(v360, v358, (uint64_t)v371);
              goto LABEL_409;
            }
            v357 = *(_QWORD *)(v171 + 104 * v152 + 64);
            if ((unint64_t)v160 > v357)
            {
              v354 = 1283;
              v353[2] = (uint64_t)v136;
              v353[3] = v137;
              v352 = 259;
              llvm::operator+(v353, (uint64_t *)&v351, (uint64_t)v355);
              v350 = 269;
              v349 = &v362;
              llvm::operator+(v355, (uint64_t *)&v349, (uint64_t)v356);
              v347 = " segment size: ";
              v348 = 259;
              llvm::operator+(v356, (uint64_t *)&v347, (uint64_t)v358);
              v346 = 267;
              v345 = &v357;
              llvm::operator+(v358, (uint64_t *)&v345, (uint64_t)v360);
              v343 = ")";
              v344 = 259;
              llvm::operator+(v360, (uint64_t *)&v343, (uint64_t)v371);
              goto LABEL_409;
            }
          }
          v334 = v160;
          v336 = v165;
        }
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v332 = 0;
        goto LABEL_290;
      case 2:
        v172 = 0;
        v3 = 0;
        v173 = 0;
        v174 = (uint64_t)&v108[v109 + 1];
        do
        {
          if ((unsigned __int8 *)(v174 + v172) == v107)
            goto LABEL_419;
          v175 = *(_BYTE *)(v174 + v172);
          v176 = v175 & 0x7F;
          if (v173 >= 0x40 && (v175 & 0x7F) != 0 || (unint64_t)(v176 << v173) >> v173 != v176)
            goto LABEL_418;
          v3 += v176 << v173;
          v173 += 7;
          ++v172;
        }
        while (v175 < 0);
        v177 = &v117[v172];
        *(_QWORD *)(v4 + 8) = v177;
        if (HIDWORD(v3))
          goto LABEL_425;
        v178 = *((unsigned int *)a1 + 168);
        v179 = a1[44];
        if (v178 + ((a1[45] - v179) >> 6) <= v3
          || ((v127 = v3 >= v178, v180 = (v3 - v178), !v127)
            ? (v181 = 0)
            : (v181 = 1),
              ((v118 >> 4) ^ 1) != v181))
        {
          v316 = operator new(0x30uLL);
          v317 = "invalid global symbol index";
          goto LABEL_413;
        }
        v334 = (int8x16_t *)v37;
        v336 = v31;
        if ((v110 & 0x10) == 0)
        {
          v182 = 0;
          v183 = 0;
          v184 = 0;
          v185 = (uint64_t)&v108[v109 + 1 + v172];
          do
          {
            if ((unsigned __int8 *)(v185 + v182) == v107)
              goto LABEL_421;
            v186 = *(_BYTE *)(v185 + v182);
            v187 = v186 & 0x7F;
            if (v184 >= 0x40 && (v186 & 0x7F) != 0 || (unint64_t)(v187 << v184) >> v184 != v187)
              goto LABEL_420;
            v183 += v187 << v184;
            v184 += 7;
            ++v182;
          }
          while (v186 < 0);
          v136 = (int8x16_t *)&v177[v182];
          *(_QWORD *)(v4 + 8) = v136;
          v137 = v183;
          v188 = &v136->i8[v183];
          if (v188 > (char *)v107)
            goto LABEL_428;
          *(_QWORD *)(v4 + 8) = v188;
          v189 = v179 + (v180 << 6);
          v330 = (int8x16_t **)(v189 + 4);
          if (*(_QWORD *)(v189 + 56))
          {
            v140 = 0;
            v141 = 0;
            v142 = 0;
            v143 = 0;
            v332 = 0;
            v328 = 0;
            if ((v110 & 3) == 2)
              goto LABEL_343;
            goto LABEL_342;
          }
          v140 = 0;
          v141 = 0;
          v142 = 0;
          v143 = 0;
          v332 = 0;
          v328 = 0;
          *(_QWORD *)(v189 + 48) = v136;
          *(_QWORD *)(v189 + 56) = v183;
          if ((v110 & 3) != 2)
            goto LABEL_342;
LABEL_343:
          v270 = (int8x16_t **)a1[82];
          v271 = a1[83];
          if ((unint64_t)v270 >= v271)
          {
            v276 = (_QWORD *)a1[81];
            v277 = 0xEEEEEEEEEEEEEEEFLL * (v270 - (int8x16_t **)v276) + 1;
            if (v277 > 0x222222222222222)
              goto LABEL_424;
            v278 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v271 - (_QWORD)v276) >> 3);
            if (2 * v278 > v277)
              v277 = 2 * v278;
            if (v278 >= 0x111111111111111)
              v277 = 0x222222222222222;
            v324 = v277;
            if (v277)
            {
              v322 = v142;
              if (v277 > 0x222222222222222)
                goto LABEL_426;
              v279 = v143;
              v280 = v141;
              v281 = (const unsigned __int8 *)v137;
              v282 = v136;
              v283 = (char *)operator new(120 * v277);
              v136 = v282;
              v137 = (unint64_t)v281;
              v141 = v280;
              v143 = v279;
              v142 = v322;
            }
            else
            {
              v283 = 0;
            }
            v284 = &v283[8 * (v270 - (int8x16_t **)v276)];
            *(_QWORD *)v284 = v136;
            *((_QWORD *)v284 + 1) = v137;
            v284[16] = v338;
            *(_WORD *)(v284 + 17) = v366;
            v284[19] = v367;
            *((_DWORD *)v284 + 5) = v110;
            v284[24] = v143;
            *(_QWORD *)(v284 + 25) = v377[0];
            *((_QWORD *)v284 + 4) = *(_QWORD *)((char *)v377 + 7);
            v284[40] = v142;
            *((_DWORD *)v284 + 11) = *(_DWORD *)&v365[3];
            *(_DWORD *)(v284 + 41) = *(_DWORD *)v365;
            v284[48] = v141;
            *(_QWORD *)(v284 + 49) = v376[0];
            *((_QWORD *)v284 + 7) = *(_QWORD *)((char *)v376 + 7);
            v284[64] = v140;
            *(_DWORD *)(v284 + 65) = *(_DWORD *)v364;
            *((_DWORD *)v284 + 17) = *(_DWORD *)&v364[3];
            v284[72] = 0;
            *(_QWORD *)(v284 + 73) = *(_QWORD *)v375;
            *((_QWORD *)v284 + 10) = *(_QWORD *)&v375[7];
            v284[88] = 0;
            v285 = *(_DWORD *)v363;
            *((_DWORD *)v284 + 23) = *(_DWORD *)&v363[3];
            *((_DWORD *)v284 + 24) = v3;
            *(_DWORD *)(v284 + 89) = v285;
            v37 = (char *)v334;
            v31 = v336;
            *((_QWORD *)v284 + 13) = v334;
            *((_QWORD *)v284 + 14) = v336;
            v286 = v284;
            if (v270 == v276)
            {
              v35 = v321;
              LODWORD(v8) = v340;
              a1 = __sz;
              v287 = v324;
            }
            else
            {
              v35 = v321;
              LODWORD(v8) = v340;
              v287 = v324;
              do
              {
                v288 = *(_OWORD *)(v270 - 15);
                v289 = *(_OWORD *)(v270 - 13);
                v290 = *(_OWORD *)(v270 - 11);
                *(_OWORD *)(v286 - 72) = *(_OWORD *)(v270 - 9);
                *(_OWORD *)(v286 - 88) = v290;
                *(_OWORD *)(v286 - 104) = v289;
                *(_OWORD *)(v286 - 120) = v288;
                v291 = *(_OWORD *)(v270 - 7);
                v292 = *(_OWORD *)(v270 - 5);
                v293 = *(_OWORD *)(v270 - 3);
                *((_QWORD *)v286 - 1) = *(v270 - 1);
                *(_OWORD *)(v286 - 24) = v293;
                *(_OWORD *)(v286 - 40) = v292;
                *(_OWORD *)(v286 - 56) = v291;
                v286 -= 120;
                v270 -= 15;
              }
              while (v270 != v276);
              a1 = __sz;
              v270 = (int8x16_t **)__sz[81];
            }
            a1[81] = v286;
            v294 = v284 + 120;
            a1[82] = v284 + 120;
            a1[83] = &v283[120 * v287];
            if (v270)
              operator delete(v270);
            v4 = v342;
            a1[82] = v294;
            v273 = (int8x16_t **)(v294 - 120);
            v274 = (char *)a1[68];
            v275 = a1[69];
            if ((unint64_t)v274 < v275)
            {
LABEL_145:
              *(_QWORD *)v274 = v273;
              *((_QWORD *)v274 + 1) = v330;
              v106 = v274 + 32;
              *((_QWORD *)v274 + 2) = v328;
              *((_QWORD *)v274 + 3) = v332;
              goto LABEL_146;
            }
          }
          else
          {
            *v270 = v136;
            v270[1] = (int8x16_t *)v137;
            *((_BYTE *)v270 + 16) = v338;
            *(_WORD *)((char *)v270 + 17) = v366;
            *((_BYTE *)v270 + 19) = v367;
            *((_DWORD *)v270 + 5) = v110;
            *((_BYTE *)v270 + 24) = v143;
            *(int8x16_t **)((char *)v270 + 25) = (int8x16_t *)v377[0];
            v270[4] = *(int8x16_t **)((char *)v377 + 7);
            *((_BYTE *)v270 + 40) = v142;
            *((_DWORD *)v270 + 11) = *(_DWORD *)&v365[3];
            *(_DWORD *)((char *)v270 + 41) = *(_DWORD *)v365;
            *((_BYTE *)v270 + 48) = v141;
            *(int8x16_t **)((char *)v270 + 49) = (int8x16_t *)v376[0];
            v270[7] = *(int8x16_t **)((char *)v376 + 7);
            *((_BYTE *)v270 + 64) = v140;
            *(_DWORD *)((char *)v270 + 65) = *(_DWORD *)v364;
            *((_DWORD *)v270 + 17) = *(_DWORD *)&v364[3];
            *((_BYTE *)v270 + 72) = 0;
            *(int8x16_t **)((char *)v270 + 73) = *(int8x16_t **)v375;
            v270[10] = *(int8x16_t **)&v375[7];
            *((_BYTE *)v270 + 88) = 0;
            v272 = *(_DWORD *)v363;
            *((_DWORD *)v270 + 23) = *(_DWORD *)&v363[3];
            *((_DWORD *)v270 + 24) = v3;
            *(_DWORD *)((char *)v270 + 89) = v272;
            v37 = (char *)v334;
            v31 = v336;
            v270[13] = v334;
            v270[14] = v336;
            v4 = v342;
            LODWORD(v8) = v340;
            a1[82] = v270 + 15;
            v273 = v270;
            v274 = (char *)a1[68];
            v275 = a1[69];
            if ((unint64_t)v274 < v275)
              goto LABEL_145;
          }
          v295 = (char *)a1[67];
          v296 = (v274 - v295) >> 5;
          v297 = v296 + 1;
          if ((unint64_t)(v296 + 1) >> 59)
            goto LABEL_424;
          v298 = v275 - (_QWORD)v295;
          if (v298 >> 4 > v297)
            v297 = v298 >> 4;
          v127 = (unint64_t)v298 >= 0x7FFFFFFFFFFFFFE0;
          v299 = 0x7FFFFFFFFFFFFFFLL;
          if (!v127)
            v299 = v297;
          if (v299 >> 59)
            goto LABEL_426;
          v300 = 32 * v299;
          v301 = (char *)operator new(32 * v299);
          v302 = (int8x16_t ***)&v301[32 * v296];
          *v302 = v273;
          v302[1] = v330;
          v302[2] = v328;
          v302[3] = (int8x16_t **)v332;
          if (v274 == v295)
          {
            v304 = &v301[32 * v296];
            v4 = v342;
          }
          else
          {
            v303 = &v301[32 * v296];
            v4 = v342;
            do
            {
              v304 = v303 - 32;
              v305 = *((_OWORD *)v274 - 1);
              *((_OWORD *)v303 - 2) = *((_OWORD *)v274 - 2);
              *((_OWORD *)v303 - 1) = v305;
              v274 -= 32;
              v303 -= 32;
            }
            while (v274 != v295);
          }
          v306 = &v301[v300];
          a1 = __sz;
          __sz[67] = v304;
          v106 = v302 + 4;
          __sz[68] = v302 + 4;
          __sz[69] = v306;
          if (v295)
            operator delete(v295);
LABEL_146:
          a1[68] = v106;
          if (!(_DWORD)v8)
            goto LABEL_384;
          continue;
        }
        if ((v110 & 3) == 1)
          goto LABEL_411;
        v233 = *(_QWORD *)&v325[8 * v3];
        if ((v110 & 0x40) != 0)
        {
          v242 = 0;
          v243 = 0;
          v244 = 0;
          v245 = (uint64_t)&v108[v109 + 1 + v172];
          do
          {
            if ((unsigned __int8 *)(v245 + v242) == v107)
              goto LABEL_421;
            v246 = *(_BYTE *)(v245 + v242);
            v247 = v246 & 0x7F;
            if (v244 >= 0x40 && (v246 & 0x7F) != 0 || (unint64_t)(v247 << v244) >> v244 != v247)
              goto LABEL_420;
            v243 += v247 << v244;
            v244 += 7;
            ++v242;
          }
          while (v246 < 0);
          v136 = (int8x16_t *)&v177[v242];
          *(_QWORD *)(v4 + 8) = v136;
          v137 = v243;
          v248 = &v136->i8[v243];
          if (v248 > (char *)v107)
            goto LABEL_428;
          *(_QWORD *)(v4 + 8) = v248;
          v141 = *(_BYTE *)(v233 + 16);
          v376[0] = *(_QWORD *)(v233 + 17);
          *(_QWORD *)((char *)v376 + 7) = *(_QWORD *)(v233 + 24);
          v140 = 1;
        }
        else
        {
          v140 = 0;
          v141 = 0;
          v136 = *(int8x16_t **)(v233 + 16);
          v137 = *(_QWORD *)(v233 + 24);
        }
        v328 = 0;
        v330 = (int8x16_t **)(v233 + 40);
        v332 = 0;
LABEL_341:
        v143 = *(_BYTE *)v233;
        v377[0] = *(_QWORD *)(v233 + 1);
        *(_QWORD *)((char *)v377 + 7) = *(_QWORD *)(v233 + 8);
        v142 = 1;
        if ((v110 & 3) == 2)
          goto LABEL_343;
LABEL_342:
        v263 = v136;
        v264 = v35;
        v265 = (const unsigned __int8 *)v137;
        v266 = a1;
        v267 = v140;
        v268 = v143;
        llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>((uint64_t)&v368, v136, (const unsigned __int8 *)v137);
        v143 = v268;
        v140 = v267;
        a1 = v266;
        v137 = (unint64_t)v265;
        v35 = v264;
        v136 = v263;
        if ((v269 & 1) != 0)
          goto LABEL_343;
        v371[0] = "duplicate symbol name ";
        v372 = v263;
        v373 = v137;
        v315 = 1283;
LABEL_408:
        v374 = v315;
LABEL_409:
        v316 = operator new(0x30uLL);
LABEL_414:
        *v319 = llvm::object::GenericBinaryError::GenericBinaryError(v316, v371, 3);
        v310 = v325;
        v311 = __p;
        v309 = v320;
        if (v320)
LABEL_385:
          operator delete(v309);
LABEL_386:
        if (v35)
          operator delete(v35);
        if (v311)
          operator delete(v311);
        if (v310)
          operator delete(v310);
        if (HIDWORD(v369) && (_DWORD)v369)
        {
          v312 = 0;
          do
          {
            v313 = *(llvm **)&v368[v312];
            if (v313 != (llvm *)-8 && v313 != 0)
              llvm::deallocate_buffer(v313, (void *)(*(_QWORD *)v313 + 9));
            v312 += 8;
          }
          while (8 * v369 != v312);
        }
        free(v368);
        return;
      case 3:
        if ((v110 & 3) != 2)
        {
          v316 = operator new(0x30uLL);
          v317 = "section symbols must have local binding";
          goto LABEL_413;
        }
        v190 = 0;
        v3 = 0;
        v191 = 0;
        v192 = (uint64_t)&v108[v109 + 1];
        do
        {
          if ((unsigned __int8 *)(v192 + v190) == v107)
            goto LABEL_419;
          v193 = *(_BYTE *)(v192 + v190);
          v194 = v193 & 0x7F;
          if (v191 >= 0x40 && (v193 & 0x7F) != 0 || (unint64_t)(v194 << v191) >> v191 != v194)
            goto LABEL_418;
          v3 += v194 << v191;
          v191 += 7;
          ++v190;
        }
        while (v193 < 0);
        v334 = (int8x16_t *)v37;
        v336 = v31;
        *(_QWORD *)(v4 + 8) = &v117[v190];
        if (HIDWORD(v3))
          goto LABEL_425;
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v330 = 0;
        v332 = 0;
        v328 = 0;
        v195 = a1[9] + 80 * v3;
        v136 = *(int8x16_t **)(v195 + 8);
        v137 = *(_QWORD *)(v195 + 16);
        if ((v110 & 3) != 2)
          goto LABEL_342;
        goto LABEL_343;
      case 4:
        v196 = 0;
        v3 = 0;
        v197 = 0;
        v198 = (uint64_t)&v108[v109 + 1];
        do
        {
          if ((unsigned __int8 *)(v198 + v196) == v107)
            goto LABEL_419;
          v199 = *(_BYTE *)(v198 + v196);
          v200 = v199 & 0x7F;
          if (v197 >= 0x40 && (v199 & 0x7F) != 0 || (unint64_t)(v200 << v197) >> v197 != v200)
            goto LABEL_418;
          v3 += v200 << v197;
          v197 += 7;
          ++v196;
        }
        while (v199 < 0);
        v201 = &v117[v196];
        *(_QWORD *)(v4 + 8) = v201;
        if (HIDWORD(v3))
          goto LABEL_425;
        v202 = *((unsigned int *)a1 + 171);
        v203 = a1[47];
        if (v202 - 0x5555555555555555 * ((a1[48] - v203) >> 3) <= v3
          || ((v127 = v3 >= v202, v204 = v3 - v202, !v127) ? (v205 = 0) : (v205 = 1),
              ((v118 >> 4) ^ 1) != v205))
        {
          v316 = operator new(0x30uLL);
          v317 = "invalid tag symbol index";
          goto LABEL_413;
        }
        v334 = (int8x16_t *)v37;
        v336 = v31;
        if ((v110 & 0x10) != 0)
        {
          if ((v110 & 3) == 1)
          {
LABEL_411:
            v316 = operator new(0x30uLL);
            v317 = "undefined weak global symbol";
            goto LABEL_413;
          }
          v234 = *(_QWORD *)&v35[8 * v3];
          if ((v110 & 0x40) != 0)
          {
            v249 = 0;
            v250 = 0;
            v251 = 0;
            v252 = (uint64_t)&v108[v109 + 1 + v196];
            do
            {
              if ((unsigned __int8 *)(v252 + v249) == v107)
                goto LABEL_421;
              v253 = *(_BYTE *)(v252 + v249);
              v254 = v253 & 0x7F;
              if (v251 >= 0x40 && (v253 & 0x7F) != 0 || (unint64_t)(v254 << v251) >> v251 != v254)
                goto LABEL_420;
              v250 += v254 << v251;
              v251 += 7;
              ++v249;
            }
            while (v253 < 0);
            v136 = (int8x16_t *)&v201[v249];
            *(_QWORD *)(v4 + 8) = v136;
            v137 = v250;
            v255 = &v136->i8[v250];
            if (v255 > (char *)v107)
              goto LABEL_428;
            *(_QWORD *)(v4 + 8) = v255;
            v141 = *(_BYTE *)(v234 + 16);
            v376[0] = *(_QWORD *)(v234 + 17);
            *(_QWORD *)((char *)v376 + 7) = *(_QWORD *)(v234 + 24);
            v140 = 1;
          }
          else
          {
            v140 = 0;
            v141 = 0;
            v136 = *(int8x16_t **)(v234 + 16);
            v137 = *(_QWORD *)(v234 + 24);
          }
          v328 = 0;
          v330 = 0;
          v332 = a1[35] + ((unint64_t)*(unsigned int *)(v234 + 40) << 6);
          v143 = *(_BYTE *)v234;
          v377[0] = *(_QWORD *)(v234 + 1);
          *(_QWORD *)((char *)v377 + 7) = *(_QWORD *)(v234 + 8);
          v142 = 1;
          if ((v110 & 3) != 2)
            goto LABEL_342;
        }
        else
        {
          v206 = 0;
          v207 = 0;
          v208 = 0;
          v209 = (uint64_t)&v108[v109 + 1 + v196];
          do
          {
            if ((unsigned __int8 *)(v209 + v206) == v107)
              goto LABEL_421;
            v210 = *(_BYTE *)(v209 + v206);
            v211 = v210 & 0x7F;
            if (v208 >= 0x40 && (v210 & 0x7F) != 0 || (unint64_t)(v211 << v208) >> v208 != v211)
              goto LABEL_420;
            v207 += v211 << v208;
            v208 += 7;
            ++v206;
          }
          while (v210 < 0);
          v136 = (int8x16_t *)&v201[v206];
          *(_QWORD *)(v4 + 8) = v136;
          v137 = v207;
          v212 = &v136->i8[v207];
          if (v212 > (char *)v107)
            goto LABEL_428;
          *(_QWORD *)(v4 + 8) = v212;
          v213 = v203 + 24 * v204;
          v332 = a1[35] + ((unint64_t)*(unsigned int *)(v213 + 4) << 6);
          if (*(_QWORD *)(v213 + 16))
          {
            v140 = 0;
            v141 = 0;
            v142 = 0;
            v143 = 0;
            v328 = 0;
            v330 = 0;
            if ((v110 & 3) == 2)
              goto LABEL_343;
            goto LABEL_342;
          }
          v140 = 0;
          v141 = 0;
          v142 = 0;
          v143 = 0;
          v328 = 0;
          v330 = 0;
          v307 = v203 + 24 * v204;
          *(_QWORD *)(v307 + 8) = v136;
          *(_QWORD *)(v307 + 16) = v207;
          if ((v110 & 3) != 2)
            goto LABEL_342;
        }
        goto LABEL_343;
      case 5:
        v214 = 0;
        v3 = 0;
        v215 = 0;
        v216 = (uint64_t)&v108[v109 + 1];
        do
        {
          if ((unsigned __int8 *)(v216 + v214) == v107)
            goto LABEL_419;
          v217 = *(_BYTE *)(v216 + v214);
          v218 = v217 & 0x7F;
          if (v215 >= 0x40 && (v217 & 0x7F) != 0 || (unint64_t)(v218 << v215) >> v215 != v218)
            goto LABEL_418;
          v3 += v218 << v215;
          v215 += 7;
          ++v214;
        }
        while (v217 < 0);
        v219 = &v117[v214];
        *(_QWORD *)(v4 + 8) = v219;
        if (HIDWORD(v3))
          goto LABEL_425;
        v220 = *((unsigned int *)a1 + 169);
        v221 = a1[38];
        if (v220 + 0x6DB6DB6DB6DB6DB7 * ((a1[39] - v221) >> 3) <= v3
          || ((v127 = v3 >= v220, v222 = v3 - v220, !v127) ? (v223 = 0) : (v223 = 1),
              ((v118 >> 4) ^ 1) != v223))
        {
          v316 = operator new(0x30uLL);
          v317 = "invalid table symbol index";
          goto LABEL_413;
        }
        v334 = (int8x16_t *)v37;
        v336 = v31;
        if ((v110 & 0x10) != 0)
        {
          if ((v110 & 3) != 1)
          {
            v233 = *(_QWORD *)&v320[8 * v3];
            if ((v110 & 0x40) != 0)
            {
              v256 = 0;
              v257 = 0;
              v258 = 0;
              v259 = (uint64_t)&v108[v109 + 1 + v214];
              do
              {
                if ((unsigned __int8 *)(v259 + v256) == v107)
                  goto LABEL_421;
                v260 = *(_BYTE *)(v259 + v256);
                v261 = v260 & 0x7F;
                if (v258 >= 0x40 && (v260 & 0x7F) != 0 || (unint64_t)(v261 << v258) >> v258 != v261)
                {
LABEL_420:
                  v318 = "uleb128 too big for uint64";
LABEL_421:
                  llvm::report_fatal_error((llvm *)v318, (const char *)1);
                }
                v257 += v261 << v258;
                v258 += 7;
                ++v256;
              }
              while (v260 < 0);
              v136 = (int8x16_t *)&v219[v256];
              *(_QWORD *)(v4 + 8) = v136;
              v137 = v257;
              v262 = &v136->i8[v257];
              if (v262 > (char *)v107)
LABEL_428:
                llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
              *(_QWORD *)(v4 + 8) = v262;
              v141 = *(_BYTE *)(v233 + 16);
              v376[0] = *(_QWORD *)(v233 + 17);
              *(_QWORD *)((char *)v376 + 7) = *(_QWORD *)(v233 + 24);
              v140 = 1;
            }
            else
            {
              v140 = 0;
              v141 = 0;
              v136 = *(int8x16_t **)(v233 + 16);
              v137 = *(_QWORD *)(v233 + 24);
            }
            v330 = 0;
            v332 = 0;
            v328 = (int8x16_t **)(v233 + 40);
            goto LABEL_341;
          }
          v316 = operator new(0x30uLL);
          v317 = "undefined weak table symbol";
LABEL_413:
          v371[0] = v317;
          v374 = 259;
          goto LABEL_414;
        }
        v224 = 0;
        v225 = 0;
        v226 = 0;
        v227 = (uint64_t)&v108[v109 + 1 + v214];
        do
        {
          if ((unsigned __int8 *)(v227 + v224) == v107)
            goto LABEL_421;
          v228 = *(_BYTE *)(v227 + v224);
          v229 = v228 & 0x7F;
          if (v226 >= 0x40 && (v228 & 0x7F) != 0 || (unint64_t)(v229 << v226) >> v226 != v229)
            goto LABEL_420;
          v225 += v229 << v226;
          v226 += 7;
          ++v224;
        }
        while (v228 < 0);
        v136 = (int8x16_t *)&v219[v224];
        *(_QWORD *)(v4 + 8) = v136;
        v137 = v225;
        v230 = &v136->i8[v225];
        if (v230 > (char *)v107)
          goto LABEL_428;
        *(_QWORD *)(v4 + 8) = v230;
        v231 = v221 + 56 * v222;
        v328 = (int8x16_t **)(v231 + 8);
        if (*(_QWORD *)(v231 + 48))
        {
          v140 = 0;
          v141 = 0;
          v142 = 0;
          v143 = 0;
          v330 = 0;
          v332 = 0;
          if ((v110 & 3) == 2)
            goto LABEL_343;
          goto LABEL_342;
        }
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v330 = 0;
        v332 = 0;
        v308 = v221 + 56 * v222;
        *(_QWORD *)(v308 + 40) = v136;
        *(_QWORD *)(v308 + 48) = v225;
        if ((v110 & 3) != 2)
          goto LABEL_342;
        goto LABEL_343;
      default:
        v371[0] = "invalid symbol type: ";
        v372 = v114;
        v315 = 2307;
        goto LABEL_408;
    }
  }
}

void llvm::object::WasmObjectFile::parseLinkingSectionComdat(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  const unsigned __int8 *v22;
  unint64_t v23;
  char v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  void *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  llvm *v75;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[4];
  __int16 v82;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v10 + v6 == v9)
      goto LABEL_105;
    v12 = *(_BYTE *)(v10 + v6);
    v13 = v12 & 0x7F;
    if (v8 >= 0x40 && (v12 & 0x7F) != 0 || (unint64_t)(v13 << v8) >> v8 != v13)
    {
      v11 = "uleb128 too big for uint64";
LABEL_105:
      llvm::report_fatal_error((llvm *)v11, (const char *)1);
    }
    v7 += v13 << v8;
    v8 += 7;
    ++v6;
  }
  while (v12 < 0);
  v14 = v10 + v6;
  *(_QWORD *)(a2 + 8) = v14;
  if (HIDWORD(v7))
LABEL_106:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v78 = 0;
  v79 = 0;
  v80 = 0x800000000;
  if (!(_DWORD)v7)
  {
LABEL_82:
    *a3 = 0;
    if (HIDWORD(v79))
      goto LABEL_93;
    goto LABEL_101;
  }
  v15 = 0;
  while (1)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (v14 + v16 == v9)
LABEL_103:
        llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
      v19 = *(_BYTE *)(v14 + v16);
      v20 = v19 & 0x7F;
      if (v18 >= 0x40 && (v19 & 0x7F) != 0 || (unint64_t)(v20 << v18) >> v18 != v20)
LABEL_102:
        llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
      v17 += v20 << v18;
      v18 += 7;
      ++v16;
    }
    while (v19 < 0);
    v21 = v14 + v16;
    *(_QWORD *)(a2 + 8) = v21;
    v22 = (const unsigned __int8 *)v17;
    v23 = v21 + v17;
    if (v23 > v9)
      llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
    *(_QWORD *)(a2 + 8) = v23;
    if (!v22
      || (llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>((uint64_t)&v78, (int8x16_t *)(v14 + v16), v22), (v24 & 1) == 0))
    {
      v81[0] = "bad/duplicate COMDAT name ";
      v81[2] = v21;
      v81[3] = v22;
      v82 = 1283;
      v71 = operator new(0x30uLL);
      *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v71, v81, 3);
      if (HIDWORD(v79))
        goto LABEL_93;
      goto LABEL_101;
    }
    v25 = *(char **)(a1 + 632);
    v26 = *(_QWORD *)(a1 + 640);
    if ((unint64_t)v25 >= v26)
    {
      v28 = v15;
      v77 = a3;
      v29 = *(char **)(a1 + 624);
      v30 = (v25 - v29) >> 4;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 60)
        abort();
      v32 = v26 - (_QWORD)v29;
      if (v32 >> 3 > v31)
        v31 = v32 >> 3;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
        v33 = 0xFFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v34 = (char *)operator new(16 * v33);
        v35 = &v34[16 * v30];
        *(_QWORD *)v35 = v21;
        *((_QWORD *)v35 + 1) = v22;
        v36 = (uint64_t)v35;
        v15 = v28;
        if (v25 == v29)
          goto LABEL_34;
      }
      else
      {
        v34 = 0;
        v35 = (char *)(16 * v30);
        *(_QWORD *)v35 = v21;
        *((_QWORD *)v35 + 1) = v22;
        v36 = 16 * v30;
        v15 = v28;
        if (v25 == v29)
          goto LABEL_34;
      }
      do
      {
        *(_OWORD *)(v36 - 16) = *((_OWORD *)v25 - 1);
        v36 -= 16;
        v25 -= 16;
      }
      while (v25 != v29);
      v25 = *(char **)(a1 + 624);
LABEL_34:
      v37 = &v34[16 * v33];
      *(_QWORD *)(a1 + 624) = v36;
      v27 = v35 + 16;
      *(_QWORD *)(a1 + 632) = v35 + 16;
      *(_QWORD *)(a1 + 640) = v37;
      a3 = v77;
      if (v25)
        operator delete(v25);
      goto LABEL_36;
    }
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v27 = v25 + 16;
LABEL_36:
    v38 = 0;
    v39 = 0;
    v40 = 0;
    *(_QWORD *)(a1 + 632) = v27;
    v41 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v41 + v38 == v9)
        goto LABEL_103;
      v42 = *(_BYTE *)(v41 + v38);
      v43 = v42 & 0x7F;
      if (v40 >= 0x40 && (v42 & 0x7F) != 0 || (unint64_t)(v43 << v40) >> v40 != v43)
        goto LABEL_102;
      v39 += v43 << v40;
      v40 += 7;
      ++v38;
    }
    while (v42 < 0);
    v44 = v41 + v38;
    *(_QWORD *)(a2 + 8) = v44;
    if (HIDWORD(v39))
      goto LABEL_106;
    if (v39)
      break;
    v45 = 0;
    v46 = 0;
    v47 = v41 + v38;
    do
    {
      if (v47 + v45 == v9)
        goto LABEL_103;
      v48 = *(_BYTE *)(v47 + v45);
      v49 = v48 & 0x7F;
      if (v46 >= 0x40 && (v48 & 0x7F) != 0 || (unint64_t)(v49 << v46) >> v46 != v49)
        goto LABEL_102;
      v39 += v49 << v46;
      v46 += 7;
      ++v45;
    }
    while (v48 < 0);
    v14 = v44 + v45;
    *(_QWORD *)(a2 + 8) = v14;
    if (HIDWORD(v39))
      goto LABEL_106;
    for (; (_DWORD)v39; *v63 = v15)
    {
      v50 = 0;
      v51 = 0;
      v52 = 0;
      LODWORD(v39) = v39 - 1;
      do
      {
        if (v14 + v50 == v9)
          goto LABEL_103;
        v53 = *(_BYTE *)(v14 + v50);
        v54 = v53 & 0x7F;
        if (v52 >= 0x40 && (v53 & 0x7F) != 0 || (unint64_t)(v54 << v52) >> v52 != v54)
          goto LABEL_102;
        v51 += v54 << v52;
        v52 += 7;
        ++v50;
      }
      while (v53 < 0);
      v55 = v14 + v50;
      *(_QWORD *)(a2 + 8) = v55;
      v56 = HIDWORD(v51);
      if (HIDWORD(v51))
        goto LABEL_106;
      v57 = 0;
      v58 = 0;
      v59 = v14 + v50;
      do
      {
        if (v59 + v57 == v9)
          goto LABEL_103;
        v60 = *(_BYTE *)(v59 + v57);
        v61 = v60 & 0x7F;
        if (v58 >= 0x40 && (v60 & 0x7F) != 0 || (unint64_t)(v61 << v58) >> v58 != v61)
          goto LABEL_102;
        v56 += v61 << v58;
        v58 += 7;
        ++v57;
      }
      while (v60 < 0);
      v14 = v55 + v57;
      *(_QWORD *)(a2 + 8) = v14;
      if (HIDWORD(v56))
        goto LABEL_106;
      if ((_DWORD)v51)
      {
        if ((_DWORD)v51 == 1)
        {
          v67 = *(unsigned int *)(a1 + 680);
          if (v56 < v67
            || (v68 = *(_QWORD *)(a1 + 512), v67 + ((*(_QWORD *)(a1 + 520) - v68) >> 7) <= v56))
          {
            v72 = operator new(0x30uLL);
            v73 = "COMDAT function index out of range";
            goto LABEL_92;
          }
          v69 = v68 + ((unint64_t)(v56 - v67) << 7);
          v70 = *(_DWORD *)(v69 + 120);
          v63 = (_DWORD *)(v69 + 120);
          if (v70 != -1)
          {
            v72 = operator new(0x30uLL);
            v73 = "function in two COMDATs";
            goto LABEL_92;
          }
        }
        else
        {
          if ((_DWORD)v51 != 5)
          {
            v72 = operator new(0x30uLL);
            v73 = "invalid COMDAT entry type";
            goto LABEL_92;
          }
          v62 = *(_QWORD *)(a1 + 72);
          if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 80) - v62) >> 4) <= v56)
          {
            v72 = operator new(0x30uLL);
            v73 = "COMDAT section index out of range";
            goto LABEL_92;
          }
          if (*(_DWORD *)(v62 + 80 * v56))
          {
            v72 = operator new(0x30uLL);
            v73 = "non-custom section in a COMDAT";
            goto LABEL_92;
          }
          v63 = (_DWORD *)(v62 + 80 * v56 + 24);
        }
      }
      else
      {
        v64 = *(_QWORD *)(a1 + 472);
        if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 480) - v64) >> 3) <= v56)
        {
          v72 = operator new(0x30uLL);
          v73 = "COMDAT data index out of range";
          goto LABEL_92;
        }
        v65 = v64 + 104 * v56;
        v66 = *(_DWORD *)(v65 + 96);
        v63 = (_DWORD *)(v65 + 96);
        if (v66 != -1)
        {
          v72 = operator new(0x30uLL);
          v73 = "data segment in two COMDATs";
          goto LABEL_92;
        }
      }
    }
    if (++v15 == (_DWORD)v7)
      goto LABEL_82;
  }
  v72 = operator new(0x30uLL);
  v73 = "unsupported COMDAT flags";
LABEL_92:
  v81[0] = v73;
  v82 = 259;
  *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v72, v81, 3);
  if (!HIDWORD(v79))
    goto LABEL_101;
LABEL_93:
  if ((_DWORD)v79)
  {
    v74 = 0;
    do
    {
      v75 = *(llvm **)((char *)v78 + v74);
      if (v75 != (llvm *)-8 && v75 != 0)
        llvm::deallocate_buffer(v75, (void *)(*(_QWORD *)v75 + 9));
      v74 += 8;
    }
    while (8 * v79 != v74);
  }
LABEL_101:
  free(v78);
}

void llvm::object::WasmObjectFile::parseProducersSection(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  char *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  size_t v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  _QWORD **v53;
  _QWORD *v54;
  size_t v55;
  size_t v56;
  const void *v57;
  int v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  BOOL v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  size_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD **v84;
  _QWORD *v85;
  const void *v86;
  size_t v87;
  size_t v88;
  size_t v89;
  const void *v90;
  int v91;
  int v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  const void *v107;
  __int128 *p_dst;
  size_t v109;
  void *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  void *v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v124;
  uint64_t v125;
  uint64_t v127;
  char *__src;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *__p[2];
  uint64_t v133;
  size_t __len[2];
  _QWORD *v135;
  uint64_t v136;
  __int128 __dst;
  unint64_t v138;
  __int16 v139;
  void *v140;
  uint64_t v141;
  _BYTE v142[16];
  __int16 v143;
  uint64_t **v144;
  _QWORD *v145;
  uint64_t v146;
  void *v147[2];
  _BYTE v148[48];
  _QWORD **v149;
  _QWORD *v150[4];

  v3 = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v150[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v147[0] = v148;
  v147[1] = (void *)0x300000000;
  v150[0] = 0;
  v150[1] = 0;
  v149 = v150;
  v8 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = "malformed uleb128, extends past end";
  do
  {
    if (v8 + v4 == v7)
      goto LABEL_213;
    v10 = *(_BYTE *)(v8 + v4);
    v11 = v10 & 0x7F;
    if (v6 >= 0x40 && (v10 & 0x7F) != 0 || (unint64_t)(v11 << v6) >> v6 != v11)
    {
      v9 = "uleb128 too big for uint64";
LABEL_213:
      llvm::report_fatal_error((llvm *)v9, (const char *)1);
    }
    v5 += v11 << v6;
    v6 += 7;
    ++v4;
  }
  while (v10 < 0);
  v12 = v8 + v4;
  *(_QWORD *)(a2 + 8) = v12;
  if (HIDWORD(v5))
LABEL_216:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  if (v5)
  {
    v13 = 0;
    v121 = a1 + 184;
    v122 = a1 + 232;
    v120 = a1 + 208;
    v124 = v5;
    while (1)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v18 = *(_QWORD *)(v3 + 8);
      v17 = *(_QWORD *)(v3 + 16);
      do
      {
        if (v18 + v14 == v17)
LABEL_211:
          llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
        v19 = *(_BYTE *)(v18 + v14);
        v20 = v19 & 0x7F;
        if (v16 >= 0x40 && (v19 & 0x7F) != 0 || (unint64_t)(v20 << v16) >> v16 != v20)
LABEL_210:
          llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
        v15 += v20 << v16;
        v16 += 7;
        ++v14;
      }
      while (v19 < 0);
      v21 = (_QWORD *)(v18 + v14);
      *(_QWORD *)(v3 + 8) = v21;
      if ((unint64_t)v21 + v15 > v17)
LABEL_214:
        llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
      *(_QWORD *)(v3 + 8) = (char *)v21 + v15;
      v135 = v21;
      v136 = v15;
      llvm::SmallSet<llvm::StringRef,3u,std::less<llvm::StringRef>>::insert((uint64_t)v147, (uint64_t)&v135, (uint64_t)&v140);
      if (!v142[0])
      {
        v118 = operator new(0x30uLL);
        v119 = "producers section does not have unique fields";
        goto LABEL_206;
      }
      if (v136 == 3)
      {
        v22 = v122;
        if (memcmp(v135, "sdk", 3uLL))
          goto LABEL_203;
      }
      else if (v136 == 12)
      {
        v22 = v120;
        if (memcmp(v135, "processed-by", 0xCuLL))
          goto LABEL_203;
      }
      else if (v136 != 8 || (v22 = v121, *v135 != 0x65676175676E616CLL))
      {
LABEL_203:
        v118 = operator new(0x30uLL);
        v119 = "producers section field is not named one of language, processed-by, or sdk";
        goto LABEL_206;
      }
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = *(_QWORD *)(v3 + 8);
      do
      {
        if (v26 + v23 == *(_QWORD *)(v3 + 16))
          goto LABEL_211;
        v27 = *(_BYTE *)(v26 + v23);
        v28 = v27 & 0x7F;
        if (v25 >= 0x40 && (v27 & 0x7F) != 0 || (unint64_t)(v28 << v25) >> v25 != v28)
          goto LABEL_210;
        v24 += v28 << v25;
        v25 += 7;
        ++v23;
      }
      while (v27 < 0);
      *(_QWORD *)(v3 + 8) = v26 + v23;
      if (HIDWORD(v24))
        goto LABEL_216;
      v125 = v13;
      v140 = v142;
      v141 = 0x800000000;
      v145 = 0;
      v146 = 0;
      v144 = &v145;
      if (v24)
        break;
LABEL_195:
      v30 = 0;
LABEL_196:
      std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v144, v145);
      if (v140 != v142)
        free(v140);
      if (v30)
        goto LABEL_207;
      v13 = v125 + 1;
      if (v125 + 1 == v124)
      {
        v12 = *(_QWORD *)(v3 + 8);
        v7 = *(_QWORD *)(v3 + 16);
        goto LABEL_201;
      }
    }
    v29 = 0;
    v30 = 1;
    v127 = v22;
    while (1)
    {
      while (1)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v38 = *(_QWORD *)(v3 + 8);
        v37 = *(_QWORD *)(v3 + 16);
        do
        {
          if (v38 + v34 == v37)
            goto LABEL_211;
          v39 = *(_BYTE *)(v38 + v34);
          v40 = v39 & 0x7F;
          if (v36 >= 0x40 && (v39 & 0x7F) != 0 || (unint64_t)(v40 << v36) >> v36 != v40)
            goto LABEL_210;
          v35 += v40 << v36;
          v36 += 7;
          ++v34;
        }
        while (v39 < 0);
        v41 = (char *)(v38 + v34);
        *(_QWORD *)(v3 + 8) = v41;
        v42 = v35;
        v43 = &v41[v35];
        if ((unint64_t)v43 > v37)
          goto LABEL_214;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_QWORD *)(v3 + 8) = v43;
        __len[0] = v38 + v34;
        __len[1] = v42;
        v47 = v38 + v42 + v34;
        do
        {
          if (v47 + v44 == v37)
            goto LABEL_211;
          v48 = *(_BYTE *)(v47 + v44);
          v49 = v48 & 0x7F;
          if (v46 >= 0x40 && (v48 & 0x7F) != 0 || (unint64_t)(v49 << v46) >> v46 != v49)
            goto LABEL_210;
          v45 += v49 << v46;
          v46 += 7;
          ++v44;
        }
        while (v48 < 0);
        v50 = &v43[v44];
        *(_QWORD *)(v3 + 8) = v50;
        __src = v50;
        v51 = &v50[v45];
        if ((unint64_t)v51 > v37)
          goto LABEL_214;
        v129 = v29;
        *(_QWORD *)(v3 + 8) = v51;
        if (v146)
        {
          v130 = v146;
          v52 = v145;
          v53 = &v145;
LABEL_55:
          v54 = v53;
          if (v52)
          {
            while (1)
            {
              v53 = (_QWORD **)v52;
              v55 = v52[5];
              v56 = v55 >= v42 ? v42 : v52[5];
              if (!v56)
                break;
              v57 = (const void *)v52[4];
              v58 = memcmp(v41, v57, v56);
              if (v58)
              {
                if (v58 < 0)
                  goto LABEL_54;
              }
              else if (v42 < v55)
              {
LABEL_54:
                v52 = *v53;
                goto LABEL_55;
              }
              v59 = memcmp(v57, v41, v56);
              if (!v59)
                goto LABEL_69;
              if ((v59 & 0x80000000) == 0)
                goto LABEL_194;
LABEL_70:
              v52 = v53[1];
              if (!v52)
              {
                v54 = v53 + 1;
                goto LABEL_72;
              }
            }
            if (v42 < v55)
              goto LABEL_54;
LABEL_69:
            if (v55 >= v42)
              goto LABEL_194;
            goto LABEL_70;
          }
LABEL_72:
          v60 = operator new(0x30uLL);
          *((_OWORD *)v60 + 2) = *(_OWORD *)__len;
          *v60 = 0;
          v60[1] = 0;
          v60[2] = v53;
          *v54 = v60;
          if (*v144)
          {
            v144 = (uint64_t **)*v144;
            v60 = (_QWORD *)*v54;
          }
          v61 = v127;
          v62 = v145;
          v63 = v60 == v145;
          *((_BYTE *)v60 + 24) = v60 == v145;
          if (!v63)
          {
            do
            {
              v64 = v60[2];
              if (*(_BYTE *)(v64 + 24))
                break;
              v65 = *(_QWORD **)(v64 + 16);
              v66 = *v65;
              if (*v65 == v64)
              {
                v69 = v65[1];
                if (!v69 || (v70 = *(unsigned __int8 *)(v69 + 24), v67 = (_BYTE *)(v69 + 24), v70))
                {
                  if (*(_QWORD **)v64 == v60)
                  {
                    *(_BYTE *)(v64 + 24) = 1;
                    *((_BYTE *)v65 + 24) = 0;
                    v73 = *(_QWORD *)(v64 + 8);
                    *v65 = v73;
                    if (v73)
                      goto LABEL_89;
                  }
                  else
                  {
                    v71 = *(uint64_t **)(v64 + 8);
                    v72 = *v71;
                    *(_QWORD *)(v64 + 8) = *v71;
                    if (v72)
                    {
                      *(_QWORD *)(v72 + 16) = v64;
                      v65 = *(_QWORD **)(v64 + 16);
                    }
                    v71[2] = (uint64_t)v65;
                    *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8 * (**(_QWORD **)(v64 + 16) != v64)) = v71;
                    *v71 = v64;
                    *(_QWORD *)(v64 + 16) = v71;
                    v65 = (_QWORD *)v71[2];
                    v64 = *v65;
                    *((_BYTE *)v71 + 24) = 1;
                    *((_BYTE *)v65 + 24) = 0;
                    v73 = *(_QWORD *)(v64 + 8);
                    *v65 = v73;
                    if (v73)
LABEL_89:
                      *(_QWORD *)(v73 + 16) = v65;
                  }
                  *(_QWORD *)(v64 + 16) = v65[2];
                  *(_QWORD *)(v65[2] + 8 * (*(_QWORD *)v65[2] != (_QWORD)v65)) = v64;
                  *(_QWORD *)(v64 + 8) = v65;
LABEL_105:
                  v65[2] = v64;
                  break;
                }
              }
              else if (!v66 || (v68 = *(unsigned __int8 *)(v66 + 24), v67 = (_BYTE *)(v66 + 24), v68))
              {
                if (*(_QWORD **)v64 == v60)
                {
                  v116 = v60[1];
                  *(_QWORD *)v64 = v116;
                  if (v116)
                  {
                    *(_QWORD *)(v116 + 16) = v64;
                    v65 = *(_QWORD **)(v64 + 16);
                  }
                  v60[2] = v65;
                  *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8 * (**(_QWORD **)(v64 + 16) != v64)) = v60;
                  v60[1] = v64;
                  *(_QWORD *)(v64 + 16) = v60;
                  v65 = (_QWORD *)v60[2];
                  *((_BYTE *)v60 + 24) = 1;
                  *((_BYTE *)v65 + 24) = 0;
                  v64 = v65[1];
                  v78 = *(_QWORD **)v64;
                  v65[1] = *(_QWORD *)v64;
                  if (v78)
LABEL_103:
                    v78[2] = v65;
                }
                else
                {
                  *(_BYTE *)(v64 + 24) = 1;
                  *((_BYTE *)v65 + 24) = 0;
                  v64 = v65[1];
                  v78 = *(_QWORD **)v64;
                  v65[1] = *(_QWORD *)v64;
                  if (v78)
                    goto LABEL_103;
                }
                *(_QWORD *)(v64 + 16) = v65[2];
                *(_QWORD *)(v65[2] + 8 * (*(_QWORD *)v65[2] != (_QWORD)v65)) = v64;
                *(_QWORD *)v64 = v65;
                goto LABEL_105;
              }
              *(_BYTE *)(v64 + 24) = 1;
              v60 = v65;
              *((_BYTE *)v65 + 24) = v65 == v62;
              *v67 = 1;
            }
            while (v65 != v62);
          }
          v146 = v130 + 1;
          v79 = __len[1];
          if (__len[1] >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_215;
        }
        else
        {
          v74 = (char *)v140;
          v75 = v141;
          if ((_DWORD)v141)
          {
            if (v42)
            {
              v76 = 16 * v141;
              v77 = (char *)v140;
              while (*((_QWORD *)v77 + 1) != v42 || memcmp(*(const void **)v77, v41, v42))
              {
                v77 += 16;
                v76 -= 16;
                if (!v76)
                  goto LABEL_111;
              }
            }
            else
            {
              v80 = 16 * v141;
              v77 = (char *)v140;
              while (*((_QWORD *)v77 + 1))
              {
                v77 += 16;
                v80 -= 16;
                if (!v80)
                  goto LABEL_111;
              }
            }
            if (v77 != &v74[16 * v75])
            {
LABEL_194:
              v117 = operator new(0x30uLL);
              *(_QWORD *)&__dst = "producers section contains repeated producer";
              v139 = 259;
              *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v117, &__dst, 3);
              goto LABEL_196;
            }
LABEL_111:
            if (v75 >= 8)
            {
              v131 = 0;
              while (1)
              {
                v82 = v145;
                v83 = (char *)v140 + 16 * v75;
                v84 = &v145;
                v85 = &v145;
                if (v145)
                  break;
LABEL_141:
                v93 = operator new(0x30uLL);
                *((_OWORD *)v93 + 2) = *((_OWORD *)v83 - 1);
                *v93 = 0;
                v93[1] = 0;
                v93[2] = v84;
                *v85 = v93;
                if (*v144)
                {
                  v144 = (uint64_t **)*v144;
                  v93 = (_QWORD *)*v85;
                }
                v94 = v145;
                v63 = v93 == v145;
                *((_BYTE *)v93 + 24) = v93 == v145;
                if (!v63)
                {
                  do
                  {
                    v95 = v93[2];
                    if (*(_BYTE *)(v95 + 24))
                      break;
                    v96 = *(_QWORD **)(v95 + 16);
                    v97 = *v96;
                    if (*v96 == v95)
                    {
                      v100 = v96[1];
                      if (!v100 || (v101 = *(unsigned __int8 *)(v100 + 24), v98 = (_BYTE *)(v100 + 24), v101))
                      {
                        if (*(_QWORD **)v95 == v93)
                        {
                          *(_BYTE *)(v95 + 24) = 1;
                          *((_BYTE *)v96 + 24) = 0;
                          v104 = *(_QWORD *)(v95 + 8);
                          *v96 = v104;
                          if (v104)
                            goto LABEL_158;
                        }
                        else
                        {
                          v102 = *(uint64_t **)(v95 + 8);
                          v103 = *v102;
                          *(_QWORD *)(v95 + 8) = *v102;
                          if (v103)
                          {
                            *(_QWORD *)(v103 + 16) = v95;
                            v96 = *(_QWORD **)(v95 + 16);
                          }
                          v102[2] = (uint64_t)v96;
                          *(_QWORD *)(*(_QWORD *)(v95 + 16) + 8 * (**(_QWORD **)(v95 + 16) != v95)) = v102;
                          *v102 = v95;
                          *(_QWORD *)(v95 + 16) = v102;
                          v96 = (_QWORD *)v102[2];
                          v95 = *v96;
                          *((_BYTE *)v102 + 24) = 1;
                          *((_BYTE *)v96 + 24) = 0;
                          v104 = *(_QWORD *)(v95 + 8);
                          *v96 = v104;
                          if (v104)
LABEL_158:
                            *(_QWORD *)(v104 + 16) = v96;
                        }
                        *(_QWORD *)(v95 + 16) = v96[2];
                        *(_QWORD *)(v96[2] + 8 * (*(_QWORD *)v96[2] != (_QWORD)v96)) = v95;
                        *(_QWORD *)(v95 + 8) = v96;
LABEL_119:
                        v96[2] = v95;
                        break;
                      }
                    }
                    else if (!v97 || (v99 = *(unsigned __int8 *)(v97 + 24), v98 = (_BYTE *)(v97 + 24), v99))
                    {
                      if (*(_QWORD **)v95 == v93)
                      {
                        v106 = v93[1];
                        *(_QWORD *)v95 = v106;
                        if (v106)
                        {
                          *(_QWORD *)(v106 + 16) = v95;
                          v96 = *(_QWORD **)(v95 + 16);
                        }
                        v93[2] = v96;
                        *(_QWORD *)(*(_QWORD *)(v95 + 16) + 8 * (**(_QWORD **)(v95 + 16) != v95)) = v93;
                        v93[1] = v95;
                        *(_QWORD *)(v95 + 16) = v93;
                        v96 = (_QWORD *)v93[2];
                        *((_BYTE *)v93 + 24) = 1;
                        *((_BYTE *)v96 + 24) = 0;
                        v95 = v96[1];
                        v105 = *(_QWORD **)v95;
                        v96[1] = *(_QWORD *)v95;
                        if (!v105)
                          goto LABEL_118;
                      }
                      else
                      {
                        *(_BYTE *)(v95 + 24) = 1;
                        *((_BYTE *)v96 + 24) = 0;
                        v95 = v96[1];
                        v105 = *(_QWORD **)v95;
                        v96[1] = *(_QWORD *)v95;
                        if (!v105)
                          goto LABEL_118;
                      }
                      v105[2] = v96;
LABEL_118:
                      *(_QWORD *)(v95 + 16) = v96[2];
                      *(_QWORD *)(v96[2] + 8 * (*(_QWORD *)v96[2] != (_QWORD)v96)) = v95;
                      *(_QWORD *)v95 = v96;
                      goto LABEL_119;
                    }
                    *(_BYTE *)(v95 + 24) = 1;
                    v93 = v96;
                    *((_BYTE *)v96 + 24) = v96 == v94;
                    *v98 = 1;
                  }
                  while (v96 != v94);
                }
                v146 = ++v131;
LABEL_121:
                LODWORD(v75) = v75 - 1;
                LODWORD(v141) = v75;
                if (!(_DWORD)v75)
                {
                  std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)&v144, (uint64_t)__len, __len);
                  v61 = v127;
                  v79 = __len[1];
                  if (__len[1] < 0x7FFFFFFFFFFFFFF8)
                    goto LABEL_170;
LABEL_215:
                  abort();
                }
              }
              v86 = (const void *)*((_QWORD *)v83 - 2);
              v87 = *((_QWORD *)v83 - 1);
              while (2)
              {
                while (2)
                {
                  v84 = (_QWORD **)v82;
                  v88 = v82[5];
                  if (v88 >= v87)
                    v89 = v87;
                  else
                    v89 = v82[5];
                  if (v89)
                  {
                    v90 = (const void *)v82[4];
                    v91 = memcmp(v86, v90, v89);
                    if (v91)
                    {
                      if (v91 < 0)
                        goto LABEL_124;
                    }
                    else if (v87 < v88)
                    {
LABEL_124:
                      v82 = *v84;
                      v85 = v84;
                      if (!*v84)
                        goto LABEL_141;
                      continue;
                    }
                    v92 = memcmp(v90, v86, v89);
                    if (v92)
                    {
                      if ((v92 & 0x80000000) == 0)
                        goto LABEL_121;
                      goto LABEL_139;
                    }
                  }
                  else if (v87 < v88)
                  {
                    goto LABEL_124;
                  }
                  break;
                }
                if (v88 >= v87)
                  goto LABEL_121;
LABEL_139:
                v82 = v84[1];
                if (!v82)
                {
                  v85 = v84 + 1;
                  goto LABEL_141;
                }
                continue;
              }
            }
          }
          if (v75 >= HIDWORD(v141))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v142, v75 + 1, 16);
            v75 = v141;
            v74 = (char *)v140;
          }
          v81 = &v74[16 * v75];
          *(_QWORD *)v81 = v41;
          *((_QWORD *)v81 + 1) = v42;
          LODWORD(v141) = v141 + 1;
          v61 = v127;
          v79 = __len[1];
          if (__len[1] >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_215;
        }
LABEL_170:
        v107 = (const void *)__len[0];
        if (v79 < 0x17)
          break;
        v112 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v79 | 7) != 0x17)
          v112 = v79 | 7;
        v113 = v112 + 1;
        p_dst = (__int128 *)operator new(v112 + 1);
        *((_QWORD *)&__dst + 1) = v79;
        v138 = v113 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
        v3 = a2;
LABEL_179:
        memmove(p_dst, v107, v79);
        *((_BYTE *)p_dst + v79) = 0;
        v109 = v45;
        if (v45 >= 0x17uLL)
          goto LABEL_180;
LABEL_173:
        HIBYTE(v133) = v45;
        v110 = __p;
        if (v109)
          goto LABEL_184;
        LOBYTE(__p[0]) = 0;
        v111 = *(_QWORD *)(v61 + 8);
        if (v111 >= *(_QWORD *)(v61 + 16))
          goto LABEL_35;
LABEL_185:
        v115 = __dst;
        *(_QWORD *)(v111 + 16) = v138;
        *(_OWORD *)v111 = v115;
        v138 = 0;
        __dst = 0uLL;
        *(_OWORD *)(v111 + 24) = *(_OWORD *)__p;
        *(_QWORD *)(v111 + 40) = v133;
        *(_QWORD *)(v61 + 8) = v111 + 48;
        v33 = v129;
        if (SHIBYTE(v138) < 0)
          goto LABEL_186;
LABEL_37:
        v29 = v33 + 1;
        v30 = v29 < v24;
        if (v29 == v24)
          goto LABEL_195;
      }
      HIBYTE(v138) = v79;
      p_dst = &__dst;
      v3 = a2;
      if (v79)
        goto LABEL_179;
      LOBYTE(__dst) = 0;
      v109 = v45;
      if (v45 < 0x17uLL)
        goto LABEL_173;
LABEL_180:
      if ((v109 | 7) == 0x17)
        v114 = (v45 & 0xFFFFFFF8) + 8;
      else
        v114 = v109 | 7;
      v110 = operator new(v114 + 1);
      __p[1] = (void *)v109;
      v133 = v114 - 0x7FFFFFFFFFFFFFFFLL;
      __p[0] = v110;
LABEL_184:
      memmove(v110, __src, v109);
      *((_BYTE *)v110 + v109) = 0;
      v111 = *(_QWORD *)(v61 + 8);
      if (v111 < *(_QWORD *)(v61 + 16))
        goto LABEL_185;
LABEL_35:
      v31 = std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string,std::string>((void **)v61, (uint64_t)&__dst, (uint64_t)__p);
      v32 = SHIBYTE(v133);
      *(_QWORD *)(v61 + 8) = v31;
      v33 = v129;
      if (v32 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v138) < 0)
          goto LABEL_186;
        goto LABEL_37;
      }
      if ((SHIBYTE(v138) & 0x80000000) == 0)
        goto LABEL_37;
LABEL_186:
      operator delete((void *)__dst);
      v29 = v33 + 1;
      v30 = v29 < v24;
      if (v29 == v24)
        goto LABEL_195;
    }
  }
LABEL_201:
  if (v12 == v7)
  {
    *a3 = 0;
    goto LABEL_207;
  }
  v118 = operator new(0x30uLL);
  v119 = "producers section ended prematurely";
LABEL_206:
  v140 = v119;
  v143 = 259;
  *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v118, &v140, 3);
LABEL_207:
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v149, v150[0]);
  if (v147[0] != v148)
    free(v147[0]);
}

void llvm::SmallSet<llvm::StringRef,3u,std::less<llvm::StringRef>>::insert(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  int v18;
  uint64_t **v19;

  if (*(_QWORD *)(a1 + 80))
  {
    v6 = std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)(a1 + 64), a2, (_OWORD *)a2);
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 16) = v7;
    return;
  }
  v8 = *(_QWORD *)a1;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  if (!(_DWORD)v9)
    goto LABEL_15;
  if (v11)
  {
    v12 = 16 * v9;
    v13 = *(_QWORD *)a1;
    while (*(_QWORD *)(v13 + 8) != v11 || memcmp(*(const void **)v13, v10, v11))
    {
      v13 += 16;
      v12 -= 16;
      if (!v12)
        goto LABEL_14;
    }
  }
  else
  {
    v14 = 16 * v9;
    v13 = *(_QWORD *)a1;
    while (*(_QWORD *)(v13 + 8))
    {
      v13 += 16;
      v14 -= 16;
      if (!v14)
        goto LABEL_14;
    }
  }
  if (v13 != v8 + 16 * v9)
  {
    *(_BYTE *)(a3 + 8) = 1;
    *(_QWORD *)a3 = v13;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
LABEL_14:
  if (v9 > 2)
  {
    do
    {
      v17 = (_OWORD *)(*(_QWORD *)a1 + 16 * v9 - 16);
      std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)(a1 + 64), (uint64_t)v17, v17);
      v18 = *(_DWORD *)(a1 + 8);
      LODWORD(v9) = v18 - 1;
      *(_DWORD *)(a1 + 8) = v18 - 1;
    }
    while (v18 != 1);
    v19 = std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)(a1 + 64), a2, (_OWORD *)a2);
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)a3 = v19;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
LABEL_15:
    if (v9 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v9 + 1, 16);
      v9 = *(unsigned int *)(a1 + 8);
      v8 = *(_QWORD *)a1;
    }
    v15 = (_QWORD *)(v8 + 16 * v9);
    *v15 = v10;
    v15[1] = v11;
    LODWORD(v15) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = (_DWORD)v15;
    v16 = *(_QWORD *)a1 + 16 * v15 - 16;
    *(_BYTE *)(a3 + 8) = 1;
    *(_QWORD *)a3 = v16;
    *(_BYTE *)(a3 + 16) = 1;
  }
}

void llvm::object::WasmObjectFile::parseTargetFeaturesSection(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 *v28;
  size_t v29;
  char *v30;
  __int128 *p_dst;
  unint64_t v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  std::string *v36;
  std::string::size_type v37;
  void *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  std::string v44;
  void *v45[2];
  std::string::size_type v46;
  char v47[8];
  __int128 __p;
  uint64_t v49;
  __int128 __dst;
  uint64_t v51;
  __int16 v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[192];
  char **v56;
  char *v57[4];

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v57[2] = *(char **)MEMORY[0x1E0C80C00];
  v53 = v55;
  v54 = 0x800000000;
  v57[0] = 0;
  v57[1] = 0;
  v56 = v57;
  v10 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v10 + v6 == v9)
      goto LABEL_67;
    v12 = *(_BYTE *)(v10 + v6);
    v13 = v12 & 0x7F;
    if (v8 >= 0x40 && (v12 & 0x7F) != 0 || (unint64_t)(v13 << v8) >> v8 != v13)
    {
      v11 = "uleb128 too big for uint64";
LABEL_67:
      llvm::report_fatal_error((llvm *)v11, (const char *)1);
    }
    v7 += v13 << v8;
    v8 += 7;
    ++v6;
  }
  while (v12 < 0);
  v14 = v10 + v6;
  *(_QWORD *)(a2 + 8) = v14;
  if (HIDWORD(v7))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  if (!v7)
  {
LABEL_47:
    if (v14 == v9)
    {
      *a3 = 0;
    }
    else
    {
      v39 = operator new(0x30uLL);
      *(_QWORD *)&__dst = "target features section ended prematurely";
      v52 = 259;
      *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v39, &__dst, 3);
    }
    goto LABEL_53;
  }
  v43 = a3;
  v15 = 0;
  while (1)
  {
    __p = 0uLL;
    v49 = 0;
    v17 = *(unsigned __int8 **)(a2 + 8);
    v16 = *(unsigned __int8 **)(a2 + 16);
    if (v17 == v16)
      llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
    v18 = v17 + 1;
    *(_QWORD *)(a2 + 8) = v17 + 1;
    v19 = *v17;
    v47[0] = v19;
    v20 = v19 > 0x3D;
    v21 = (1 << v19) & 0x2000280000000000;
    if (v20 || v21 == 0)
      break;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    do
    {
      if (&v18[v23] == v16)
        llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
      v26 = v18[v23];
      v27 = v26 & 0x7F;
      if (v25 >= 0x40 && (v26 & 0x7F) != 0 || (unint64_t)(v27 << v25) >> v25 != v27)
        llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
      v24 += v27 << v25;
      v25 += 7;
      ++v23;
    }
    while ((v26 & 0x80) != 0);
    v28 = &v18[v23];
    *(_QWORD *)(a2 + 8) = v28;
    v29 = v24;
    v30 = (char *)&v28[v24];
    if (v30 > (char *)v16)
      llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
    *(_QWORD *)(a2 + 8) = v30;
    if (v24 >= 0x17uLL)
    {
      if ((v24 | 7) == 0x17)
        v35 = (v24 & 0xFFFFFFF8) + 8;
      else
        v35 = v24 | 7;
      p_dst = (__int128 *)operator new(v35 + 1);
      *((_QWORD *)&__dst + 1) = v29;
      v51 = v35 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__dst = p_dst;
LABEL_36:
      memmove(p_dst, v28, v29);
      *((_BYTE *)p_dst + v29) = 0;
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_37;
    }
    HIBYTE(v51) = v24;
    p_dst = &__dst;
    if ((_DWORD)v24)
      goto LABEL_36;
    LOBYTE(__dst) = 0;
    if ((SHIBYTE(v49) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_37:
    operator delete((void *)__p);
LABEL_27:
    __p = __dst;
    v49 = v51;
    llvm::SmallSet<std::string,8u,std::less<std::string>>::insert((uint64_t)&v53, (unint64_t)&__p, (uint64_t)&__dst);
    if (!(_BYTE)v51)
    {
      std::operator+<char>();
      v36 = std::string::append(&v44, "\"");
      v37 = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)v45 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v46 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = operator new(0x30uLL);
      v52 = 260;
      *(_QWORD *)&__dst = v45;
      *v43 = llvm::object::GenericBinaryError::GenericBinaryError(v38, &__dst, 3);
      if (SHIBYTE(v46) < 0)
      {
        operator delete(v45[0]);
        if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_44;
      }
      else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(v49) & 0x80000000) == 0)
          goto LABEL_53;
        goto LABEL_52;
      }
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_52;
    }
    v32 = *(_QWORD *)(a1 + 264);
    if (v32 >= *(_QWORD *)(a1 + 272))
    {
      *(_QWORD *)(a1 + 264) = std::vector<llvm::wasm::WasmFeatureEntry>::__push_back_slow_path<llvm::wasm::WasmFeatureEntry const&>(a1 + 256, (uint64_t)v47);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        goto LABEL_11;
    }
    else
    {
      *(_BYTE *)v32 = v47[0];
      v33 = (std::string *)(v32 + 8);
      if (SHIBYTE(v49) < 0)
      {
        std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        *(_QWORD *)(a1 + 264) = v32 + 32;
        if ((SHIBYTE(v49) & 0x80000000) == 0)
          goto LABEL_11;
      }
      else
      {
        v34 = __p;
        *(_QWORD *)(v32 + 24) = v49;
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
        *(_QWORD *)(a1 + 264) = v32 + 32;
        if ((SHIBYTE(v49) & 0x80000000) == 0)
          goto LABEL_11;
      }
    }
    operator delete((void *)__p);
LABEL_11:
    if (++v15 == v7)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 16);
      a3 = v43;
      goto LABEL_47;
    }
  }
  v42 = operator new(0x30uLL);
  *(_QWORD *)&__dst = "unknown feature policy prefix";
  v52 = 259;
  *v43 = llvm::object::GenericBinaryError::GenericBinaryError(v42, &__dst, 3);
  if (SHIBYTE(v49) < 0)
LABEL_52:
    operator delete((void *)__p);
LABEL_53:
  std::__tree<std::string>::destroy((uint64_t)&v56, v57[0]);
  v40 = (char *)v53;
  if ((_DWORD)v54)
  {
    v41 = 24 * v54;
    do
    {
      if (v40[v41 - 1] < 0)
        operator delete(*(void **)&v40[v41 - 24]);
      v41 -= 24;
    }
    while (v41);
    v40 = (char *)v53;
  }
  if (v40 != v55)
    free(v40);
}

void llvm::SmallSet<std::string,8u,std::less<std::string>>::insert(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *Address;
  uint64_t v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  uint64_t **v24;

  if (*(_QWORD *)(a1 + 224))
  {
    v6 = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 208), (const void **)a2, a2);
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 16) = v7;
    return;
  }
  v8 = *(_DWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_24;
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)a1 + 24 * v8;
  v11 = *(_BYTE *)(a2 + 23);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  if (v11 >= 0)
    v13 = (unsigned __int8 *)a2;
  else
    v13 = *(unsigned __int8 **)a2;
  while (1)
  {
    v14 = *(unsigned __int8 *)(v9 + 23);
    if ((v14 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v9 + 23);
    else
      v15 = *(_QWORD *)(v9 + 8);
    if (v15 != v12)
      goto LABEL_11;
    if ((v14 & 0x80) == 0)
      break;
    if (!memcmp(*(const void **)v9, v13, *(_QWORD *)(v9 + 8)))
      goto LABEL_21;
LABEL_11:
    v9 += 24;
    if (v9 == v10)
      goto LABEL_23;
  }
  if (*(_BYTE *)(v9 + 23))
  {
    v16 = 0;
    while (*(unsigned __int8 *)(v9 + v16) == v13[v16])
    {
      if (v14 == ++v16)
        goto LABEL_21;
    }
    goto LABEL_11;
  }
LABEL_21:
  if (v9 != v10)
  {
    *(_BYTE *)(a3 + 8) = 1;
    *(_QWORD *)a3 = v9;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
LABEL_23:
  if (v8 >= 8)
  {
    do
    {
      v22 = (const void **)(*(_QWORD *)a1 + 24 * v8 - 24);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 208), v22, (uint64_t)v22);
      v8 = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v8;
      v23 = *(_QWORD *)a1 + 24 * v8;
      if (*(char *)(v23 + 23) < 0)
      {
        operator delete(*(void **)v23);
        v8 = *(_DWORD *)(a1 + 8);
      }
    }
    while (v8);
    v24 = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 208), (const void **)a2, a2);
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)a3 = v24;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
LABEL_24:
    Address = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress(a1, a2, 1);
    v18 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    if (Address[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8)), *(const std::string::value_type **)Address, *((_QWORD *)Address + 1));
    }
    else
    {
      v19 = *(_OWORD *)Address;
      *(_QWORD *)(v18 + 16) = *((_QWORD *)Address + 2);
      *(_OWORD *)v18 = v19;
    }
    v20 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v20;
    v21 = *(_QWORD *)a1 + 24 * v20 - 24;
    *(_BYTE *)(a3 + 8) = 1;
    *(_QWORD *)a3 = v21;
    *(_BYTE *)(a3 + 16) = 1;
  }
}

void llvm::object::WasmObjectFile::parseRelocSection(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  void **v27;
  char **v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  char *v67;
  char v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _BYTE *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  char v99;
  uint64_t v100;
  BOOL v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  void *v106;
  const char *v107;
  char *v108;
  uint64_t *v109;
  void **v110;
  char **v111;
  void **v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD v115[4];
  __int16 v116;

  v3 = a2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v10 + v6 == v9)
      goto LABEL_189;
    v12 = *(_BYTE *)(v10 + v6);
    v13 = v12 & 0x7F;
    if (v8 >= 0x40 && (v12 & 0x7F) != 0 || (unint64_t)(v13 << v8) >> v8 != v13)
    {
      v11 = "uleb128 too big for uint64";
LABEL_189:
      llvm::report_fatal_error((llvm *)v11, (const char *)1);
    }
    v7 += v13 << v8;
    v8 += 7;
    ++v6;
  }
  while (v12 < 0);
  v14 = v10 + v6;
  *(_QWORD *)(a2 + 8) = v14;
  if (HIDWORD(v7))
    goto LABEL_193;
  v15 = a1[9];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[10] - v15) >> 4) <= v7)
  {
    v104 = operator new(0x30uLL);
    v105 = "invalid section index";
    goto LABEL_174;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = v10 + v6;
  v11 = "malformed uleb128, extends past end";
  do
  {
    if (v19 + v16 == v9)
      goto LABEL_189;
    v20 = *(_BYTE *)(v19 + v16);
    v21 = v20 & 0x7F;
    if (v18 >= 0x40 && (v20 & 0x7F) != 0 || (unint64_t)(v21 << v18) >> v18 != v21)
      llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
    v17 += v21 << v18;
    v18 += 7;
    ++v16;
  }
  while (v20 < 0);
  v22 = v14 + v16;
  *(_QWORD *)(a2 + 8) = v22;
  if (HIDWORD(v17))
LABEL_193:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  if (!(_DWORD)v17)
    goto LABEL_172;
  LODWORD(v23) = 0;
  v24 = v15 + 80 * v7;
  v25 = *(unsigned int *)(v24 + 40);
  v26 = (void **)(v24 + 48);
  v27 = (void **)(v24 + 56);
  v28 = (char **)(v24 + 64);
  v108 = "malformed sleb128, extends past end";
  v109 = a3;
  v113 = v3;
  v114 = v25;
  v111 = (char **)(v24 + 64);
  v112 = (void **)(v24 + 56);
  v110 = (void **)(v24 + 48);
  while (2)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = v23;
    v34 = *(_QWORD *)(v3 + 8);
    v33 = *(char **)(v3 + 16);
    LODWORD(v17) = v17 - 1;
    do
    {
      if ((char *)(v34 + v29) == v33)
LABEL_187:
        llvm::report_fatal_error((llvm *)"malformed uleb128, extends past end", (const char *)1);
      v35 = *(_BYTE *)(v34 + v29);
      v36 = v35 & 0x7F;
      if (v31 >= 0x40 && (v35 & 0x7F) != 0 || (unint64_t)(v36 << v31) >> v31 != v36)
LABEL_186:
        llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
      v30 += v36 << v31;
      v31 += 7;
      ++v29;
    }
    while (v35 < 0);
    v37 = v34 + v29;
    *(_QWORD *)(v3 + 8) = v37;
    v38 = HIDWORD(v30);
    if (HIDWORD(v30))
      goto LABEL_193;
    v23 = 0;
    v39 = 0;
    v40 = v34 + v29;
    do
    {
      if ((char *)(v40 + v38) == v33)
        goto LABEL_187;
      v41 = *(_BYTE *)(v40 + v38);
      v42 = v41 & 0x7F;
      if (v39 >= 0x40 && (v41 & 0x7F) != 0 || (unint64_t)(v42 << v39) >> v39 != v42)
        goto LABEL_186;
      v23 += v42 << v39;
      v39 += 7;
      ++v38;
    }
    while (v41 < 0);
    v43 = v37 + v38;
    *(_QWORD *)(v3 + 8) = v43;
    if (HIDWORD(v23))
      goto LABEL_193;
    if (v32 > v23)
    {
      v106 = operator new(0x30uLL);
      v107 = "relocations not in offset order";
LABEL_178:
      v115[0] = v107;
      v116 = 259;
LABEL_179:
      *v109 = llvm::object::GenericBinaryError::GenericBinaryError(v106, v115, 3);
      return;
    }
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = v34 + v29 + v38;
    do
    {
      if ((char *)(v47 + v44) == v33)
        goto LABEL_187;
      v48 = *(_BYTE *)(v47 + v44);
      v49 = v48 & 0x7F;
      if (v46 >= 0x40 && (v48 & 0x7F) != 0 || (unint64_t)(v49 << v46) >> v46 != v49)
        goto LABEL_186;
      v45 += v49 << v46;
      v46 += 7;
      ++v44;
    }
    while (v48 < 0);
    v50 = (char *)(v43 + v44);
    *(_QWORD *)(v3 + 8) = v50;
    if (HIDWORD(v45))
      goto LABEL_193;
    switch((int)v30)
    {
      case 0:
      case 1:
      case 2:
      case 12:
      case 18:
      case 19:
      case 24:
      case 26:
        v51 = a1[67];
        if (v45 >= (a1[68] - v51) >> 5 || *(_BYTE *)(*(_QWORD *)(v51 + 32 * v45) + 16))
          goto LABEL_177;
        v52 = 0;
        v53 = v30 - 14;
        if ((v30 - 14) > 3u)
          goto LABEL_45;
        goto LABEL_111;
      case 3:
      case 4:
      case 5:
      case 11:
      case 21:
      case 23:
        v56 = a1[67];
        if (v45 >= (a1[68] - v56) >> 5 || *(_BYTE *)(*(_QWORD *)(v56 + 32 * v45) + 16) != 1)
          goto LABEL_176;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = v34 + v29 + v38 + v44;
        while ((char *)(v60 + v57) != v33)
        {
          v61 = *(_BYTE *)(v60 + v57);
          v62 = v61 & 0x7F;
          if (v59 >= 0x40)
          {
            if (((v58 >> 63) & 0x7F) != v62)
              goto LABEL_191;
          }
          else if (v59 == 63 && (_DWORD)v62 != 127 && (_DWORD)v62 != 0)
          {
            goto LABEL_191;
          }
          v58 |= v62 << v59;
          v59 += 7;
          ++v57;
          if ((v61 & 0x80) == 0)
            goto LABEL_104;
        }
        goto LABEL_192;
      case 6:
        if (v45 < (uint64_t)(a1[36] - a1[35]) >> 6)
          goto LABEL_146;
        v106 = operator new(0x30uLL);
        v107 = "invalid relocation type index";
        goto LABEL_178;
      case 7:
        v71 = a1[67];
        if (v45 < (a1[68] - v71) >> 5 && *(unsigned __int8 *)(*(_QWORD *)(v71 + 32 * v45) + 16) < 3u)
          goto LABEL_146;
        LODWORD(v115[0]) = 3;
        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>("invalid relocation global index", (unsigned int *)v115, v109);
        return;
      case 8:
        v72 = a1[67];
        if (v45 >= (a1[68] - v72) >> 5 || *(_BYTE *)(*(_QWORD *)(v72 + 32 * v45) + 16))
          goto LABEL_177;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v73 = v34 + v29 + v38 + v44;
        while ((char *)(v73 + v57) != v33)
        {
          v61 = *(_BYTE *)(v73 + v57);
          v74 = v61 & 0x7F;
          if (v59 >= 0x40)
          {
            if (((v58 >> 63) & 0x7F) != v74)
              goto LABEL_191;
          }
          else if (v59 == 63 && (_DWORD)v74 != 127 && (_DWORD)v74 != 0)
          {
            goto LABEL_191;
          }
          v58 |= v74 << v59;
          v59 += 7;
          ++v57;
          if ((v61 & 0x80) == 0)
            goto LABEL_104;
        }
        goto LABEL_192;
      case 9:
        v76 = a1[67];
        if (v45 >= (a1[68] - v76) >> 5 || *(_BYTE *)(*(_QWORD *)(v76 + 32 * v45) + 16) != 3)
        {
          v106 = operator new(0x30uLL);
          v107 = "invalid relocation section index";
          goto LABEL_178;
        }
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v77 = v34 + v29 + v38 + v44;
        do
        {
          if ((char *)(v77 + v57) == v33)
            goto LABEL_192;
          v61 = *(_BYTE *)(v77 + v57);
          v78 = v61 & 0x7F;
          if (v59 >= 0x40)
          {
            if (((v58 >> 63) & 0x7F) != v78)
              goto LABEL_191;
          }
          else if (v59 == 63 && (_DWORD)v78 != 127 && (_DWORD)v78 != 0)
          {
            goto LABEL_191;
          }
          v58 |= v78 << v59;
          v59 += 7;
          ++v57;
        }
        while (v61 < 0);
LABEL_104:
        v80 = (v61 & 0x40) == 0 || v59 > 0x3F;
        v81 = -1 << v59;
        if (v80)
          v81 = 0;
        v52 = v58 | v81;
        *(_QWORD *)(v3 + 8) = &v50[v57];
        if (v52 != (int)v52)
          llvm::report_fatal_error((llvm *)"LEB is outside Varint32 range", (const char *)1);
        v53 = v30 - 14;
        if ((v30 - 14) <= 3u)
          goto LABEL_111;
        goto LABEL_45;
      case 10:
        v94 = a1[67];
        if (v45 < (a1[68] - v94) >> 5 && *(_BYTE *)(*(_QWORD *)(v94 + 32 * v45) + 16) == 4)
          goto LABEL_146;
        v106 = operator new(0x30uLL);
        v107 = "invalid relocation tag index";
        goto LABEL_178;
      case 13:
        v95 = a1[67];
        if (v45 >= (a1[68] - v95) >> 5 || *(_BYTE *)(*(_QWORD *)(v95 + 32 * v45) + 16) != 2)
        {
          v106 = operator new(0x30uLL);
          v107 = "invalid relocation global index";
          goto LABEL_178;
        }
        v52 = 0;
        goto LABEL_113;
      case 14:
      case 15:
      case 16:
      case 17:
      case 25:
        v64 = a1[67];
        if (v45 < (a1[68] - v64) >> 5 && *(_BYTE *)(*(_QWORD *)(v64 + 32 * v45) + 16) == 1)
        {
          v65 = 0;
          v66 = 0;
          v67 = (char *)(v43 + v44);
          while (v67 != v33)
          {
            v68 = *v67;
            v69 = *v67 & 0x7F;
            if (v66 >= 0x40)
            {
              if (((v65 >> 63) & 0x7F) != v69)
                goto LABEL_191;
            }
            else if (v66 == 63 && (_DWORD)v69 != 127 && (_DWORD)v69 != 0)
            {
              goto LABEL_191;
            }
            v65 |= v69 << v66;
            v66 += 7;
            ++v67;
            if ((v68 & 0x80) == 0)
              goto LABEL_161;
          }
LABEL_192:
          llvm::report_fatal_error((llvm *)v108, (const char *)1);
        }
LABEL_176:
        v106 = operator new(0x30uLL);
        v107 = "invalid relocation data index";
        goto LABEL_178;
      case 20:
        v96 = a1[67];
        if (v45 >= (a1[68] - v96) >> 5 || *(_BYTE *)(*(_QWORD *)(v96 + 32 * v45) + 16) != 5)
        {
          v106 = operator new(0x30uLL);
          v107 = "invalid relocation table index";
          goto LABEL_178;
        }
LABEL_146:
        v52 = 0;
        if (v23 + 5 > v25)
          goto LABEL_170;
        goto LABEL_119;
      case 22:
        v97 = a1[67];
        if (v45 >= (a1[68] - v97) >> 5 || *(_BYTE *)(*(_QWORD *)(v97 + 32 * v45) + 16))
        {
LABEL_177:
          v106 = operator new(0x30uLL);
          v107 = "invalid relocation function index";
          goto LABEL_178;
        }
        v65 = 0;
        v98 = 0;
        v67 = v50;
        do
        {
          if (v67 == v33)
            goto LABEL_192;
          v99 = *v67;
          v100 = *v67 & 0x7F;
          if (v98 >= 0x40)
          {
            if (((v65 >> 63) & 0x7F) != v100)
              goto LABEL_191;
          }
          else if (v98 == 63 && (_DWORD)v100 != 127 && (_DWORD)v100 != 0)
          {
LABEL_191:
            v108 = "sleb128 too big for int64";
            goto LABEL_192;
          }
          v65 |= v100 << v98;
          v98 += 7;
          ++v67;
          v66 = v98;
          v68 = v99;
        }
        while (v99 < 0);
LABEL_161:
        v102 = (v68 & 0x40) == 0 || v66 > 0x3F;
        v103 = -1 << v66;
        if (v102)
          v103 = 0;
        v52 = v65 | v103;
        *(_QWORD *)(v3 + 8) = &v50[(_DWORD)v67 - (_DWORD)v50];
        v53 = v30 - 14;
        if ((v30 - 14) <= 3u)
        {
LABEL_111:
          v54 = *(_QWORD *)&asc_181267A28[8 * v53];
          v55 = v30;
          if (v30 > 0x1Au)
            goto LABEL_114;
        }
        else
        {
LABEL_45:
          v54 = 5;
          v55 = v30;
          if (v30 > 0x1Au)
            goto LABEL_114;
        }
        if (((1 << v55) & 0x4802324) != 0)
LABEL_113:
          v54 = 4;
LABEL_114:
        v82 = 8;
        if (((1 << v30) & 0x490000) == 0)
          v82 = v54;
        if (v30 <= 0x16u)
          v54 = v82;
        if (v54 + v23 > v25)
        {
LABEL_170:
          v106 = operator new(0x30uLL);
          v107 = "invalid relocation offset";
          goto LABEL_178;
        }
LABEL_119:
        v83 = (char *)*v27;
        if (*v27 < *v28)
        {
          *v83 = v30;
          *(_WORD *)(v83 + 1) = 0;
          v83[3] = 0;
          *((_DWORD *)v83 + 1) = v45;
          *((_QWORD *)v83 + 1) = v23;
          *((_QWORD *)v83 + 2) = v52;
          *v27 = v83 + 24;
          if (!(_DWORD)v17)
            goto LABEL_171;
          continue;
        }
        v84 = *v26;
        v85 = 0xAAAAAAAAAAAAAAABLL * ((v83 - v84) >> 3) + 1;
        if (v85 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((*v28 - v84) >> 3) > v85)
          v85 = 0x5555555555555556 * ((*v28 - v84) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((*v28 - v84) >> 3) >= 0x555555555555555)
          v86 = 0xAAAAAAAAAAAAAAALL;
        else
          v86 = v85;
        if (v86)
        {
          if (v86 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v87 = v52;
          v88 = (char *)operator new(24 * v86);
          v52 = v87;
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[8 * ((v83 - v84) >> 3)];
        *v89 = v30;
        *(_WORD *)(v89 + 1) = 0;
        v89[3] = 0;
        *((_DWORD *)v89 + 1) = v45;
        *((_QWORD *)v89 + 1) = v23;
        *((_QWORD *)v89 + 2) = v52;
        v90 = v89;
        if (v83 == v84)
        {
          v3 = v113;
          v26 = v110;
        }
        else
        {
          do
          {
            v91 = *(_OWORD *)(v83 - 24);
            *((_QWORD *)v90 - 1) = *((_QWORD *)v83 - 1);
            *(_OWORD *)(v90 - 24) = v91;
            v90 -= 24;
            v83 -= 24;
          }
          while (v83 != v84);
          v26 = v110;
          v83 = (char *)*v110;
          v3 = v113;
        }
        v92 = &v88[24 * v86];
        *v26 = v90;
        v93 = v89 + 24;
        v28 = v111;
        v27 = v112;
        *v112 = v89 + 24;
        *v111 = v92;
        if (v83)
          operator delete(v83);
        v25 = v114;
        *v112 = v93;
        if ((_DWORD)v17)
          continue;
LABEL_171:
        v22 = *(_QWORD *)(v3 + 8);
        v9 = *(_QWORD *)(v3 + 16);
        a3 = v109;
LABEL_172:
        if (v22 == v9)
        {
          *a3 = 0;
        }
        else
        {
          v104 = operator new(0x30uLL);
          v105 = "reloc section ended prematurely";
LABEL_174:
          v115[0] = v105;
          v116 = 259;
          *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v104, v115, 3);
        }
        return;
      default:
        v115[0] = "invalid relocation type: ";
        v115[2] = v30;
        v116 = 2307;
        v106 = operator new(0x30uLL);
        goto LABEL_179;
    }
  }
}

void std::vector<llvm::wasm::WasmSignature>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    if (a2 >> 58)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = a2 << 6;
    v6 = (char *)operator new(a2 << 6);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        *(_QWORD *)&v8[v9 - 64] = &v8[v9 - 48];
        v11 = &v4[v9];
        *(_QWORD *)&v8[v9 - 56] = 0x100000000;
        if (*(_DWORD *)&v4[v9 - 56])
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v8[v9 - 64], (uint64_t)(v11 - 64));
        *((_QWORD *)v10 - 5) = v10 - 24;
        v12 = (uint64_t)(v10 - 40);
        *(_QWORD *)(v12 + 8) = 0x400000000;
        if (*((_DWORD *)v11 - 8))
          llvm::SmallVectorImpl<unsigned int>::operator=(v12, (uint64_t)&v4[v9 - 40]);
        *(_DWORD *)&v8[v9 - 8] = *(_DWORD *)&v4[v9 - 8];
        v9 -= 64;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v13 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v13 != v2)
      {
        v14 = v13 - 24;
        do
        {
          v16 = (char *)*((_QWORD *)v14 - 2);
          if (v14 != v16)
            free(v16);
          v17 = (char *)*((_QWORD *)v14 - 5);
          if (v14 - 24 != v17)
            free(v17);
          v15 = v14 - 40;
          v14 -= 64;
        }
        while (v15 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t readLimits(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = "malformed uleb128, extends past end";
  do
  {
    if (v6 + v2 == v5)
      goto LABEL_27;
    v8 = *(_BYTE *)(v6 + v2);
    v9 = v8 & 0x7F;
    if (v4 >= 0x40 && (v8 & 0x7F) != 0 || (unint64_t)(v9 << v4) >> v4 != v9)
      llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
    v3 += v9 << v4;
    v4 += 7;
    ++v2;
  }
  while (v8 < 0);
  v10 = v6 + v2;
  *(_QWORD *)(a2 + 8) = v10;
  if (HIDWORD(v3))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  *(_BYTE *)result = v3;
  v14 = v6 + v2;
  v7 = "malformed uleb128, extends past end";
  do
  {
    if (v14 + v11 == v5)
      goto LABEL_27;
    v15 = *(_BYTE *)(v14 + v11);
    v16 = v15 & 0x7F;
    if (v13 >= 0x40 && (v15 & 0x7F) != 0 || (unint64_t)(v16 << v13) >> v13 != v16)
      llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
    v12 += v16 << v13;
    v13 += 7;
    ++v11;
  }
  while (v15 < 0);
  v17 = v10 + v11;
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(result + 8) = v12;
  if ((v3 & 1) == 0)
    return result;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v6 + v2 + v11;
  v7 = "malformed uleb128, extends past end";
  do
  {
    if (v21 + v18 == v5)
      goto LABEL_27;
    v22 = *(_BYTE *)(v21 + v18);
    v23 = v22 & 0x7F;
    if (v20 >= 0x40 && (v22 & 0x7F) != 0)
      llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
    if ((unint64_t)(v23 << v20) >> v20 != v23)
    {
      v7 = "uleb128 too big for uint64";
LABEL_27:
      llvm::report_fatal_error((llvm *)v7, (const char *)1);
    }
    v19 += v23 << v20;
    v20 += 7;
    ++v18;
  }
  while (v22 < 0);
  *(_QWORD *)(a2 + 8) = v17 + v18;
  *(_QWORD *)(result + 16) = v19;
  return result;
}

void std::vector<llvm::wasm::WasmFunction>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  void *v17;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 7)
  {
    if (a2 >> 57)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = a2 << 7;
    v6 = (char *)operator new(a2 << 7);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *((_QWORD *)v10 - 16) = *(_QWORD *)&v4[v9 - 128];
        *(_OWORD *)(v10 - 120) = *(_OWORD *)&v4[v9 - 120];
        *((_QWORD *)v10 - 13) = *(_QWORD *)&v4[v9 - 104];
        *((_QWORD *)v11 - 14) = 0;
        *((_QWORD *)v11 - 13) = 0;
        *((_QWORD *)v11 - 15) = 0;
        v13 = *(_OWORD *)&v4[v9 - 48];
        v12 = *(_OWORD *)&v4[v9 - 32];
        v14 = *(_OWORD *)&v4[v9 - 64];
        *(_OWORD *)(v10 - 20) = *(_OWORD *)&v4[v9 - 20];
        *((_OWORD *)v10 - 3) = v13;
        *((_OWORD *)v10 - 2) = v12;
        *((_OWORD *)v10 - 4) = v14;
        v15 = *(_OWORD *)&v4[v9 - 80];
        *((_OWORD *)v10 - 6) = *(_OWORD *)&v4[v9 - 96];
        *((_OWORD *)v10 - 5) = v15;
        v9 -= 128;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v16 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v16 != v2)
      {
        v17 = (void *)*((_QWORD *)v16 - 15);
        if (v17)
        {
          *((_QWORD *)v16 - 14) = v17;
          operator delete(v17);
        }
        v16 -= 128;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *readInitExpr(char *result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 v45;
  _QWORD v48[4];
  __int16 v49;

  v3 = *(unsigned __int8 **)(a3 + 8);
  *(_BYTE *)a2 = 0;
  v4 = *(_QWORD *)(a3 + 16);
  if (v3 == (unsigned __int8 *)v4)
    goto LABEL_82;
  v5 = result;
  v6 = v3 + 1;
  *(_QWORD *)(a3 + 8) = v3 + 1;
  v7 = *v3;
  *(_BYTE *)(a2 + 8) = v7;
  switch(v7)
  {
    case '#':
      v8 = 0;
      v9 = 0;
      v10 = 0;
      result = "malformed uleb128, extends past end";
      v11 = "uleb128 too big for uint64";
      do
      {
        if ((_DWORD *)((char *)v6 + v8) == (_DWORD *)v4)
          goto LABEL_41;
        v12 = *((_BYTE *)v6 + v8);
        v13 = v12 & 0x7F;
        if (v10 >= 0x40 && (v12 & 0x7F) != 0 || (unint64_t)(v13 << v10) >> v10 != v13)
          goto LABEL_40;
        v9 += v13 << v10;
        v10 += 7;
        ++v8;
      }
      while (v12 < 0);
      *(_QWORD *)(a3 + 8) = (char *)v6 + v8;
      *(_DWORD *)(a2 + 16) = v9;
      goto LABEL_59;
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
      goto LABEL_61;
    case 'A':
      v20 = 0;
      v21 = 0;
      v22 = 0;
      result = "malformed sleb128, extends past end";
      v11 = "sleb128 too big for int64";
      do
      {
        if ((_DWORD *)((char *)v6 + v20) == (_DWORD *)v4)
          goto LABEL_41;
        v23 = *((_BYTE *)v6 + v20);
        v24 = v23 & 0x7F;
        if (v22 >= 0x40)
        {
          if (((v21 >> 63) & 0x7F) != v24)
            goto LABEL_40;
        }
        else if (v22 == 63 && (_DWORD)v24 != 127 && (_DWORD)v24 != 0)
        {
          goto LABEL_40;
        }
        v21 |= v24 << v22;
        v22 += 7;
        ++v20;
      }
      while (v23 < 0);
      v36 = (v23 & 0x40) == 0 || v22 > 0x3F;
      v37 = -1 << v22;
      if (v36)
        v37 = 0;
      v38 = v21 | v37;
      *(_QWORD *)(a3 + 8) = (char *)v6 + v20;
      if (v38 != (int)v38)
        llvm::report_fatal_error((llvm *)"LEB is outside Varint32 range", (const char *)1);
      *(_DWORD *)(a2 + 16) = v38;
      goto LABEL_59;
    case 'B':
      v26 = 0;
      v27 = 0;
      v28 = 0;
      result = "malformed sleb128, extends past end";
      v11 = "sleb128 too big for int64";
      do
      {
        if ((_DWORD *)((char *)v6 + v26) == (_DWORD *)v4)
          goto LABEL_41;
        v29 = *((_BYTE *)v6 + v26);
        v30 = v29 & 0x7F;
        if (v28 >= 0x40)
        {
          if (((v27 >> 63) & 0x7F) != v30)
            goto LABEL_40;
        }
        else if (v28 == 63 && (_DWORD)v30 != 127 && (_DWORD)v30 != 0)
        {
          goto LABEL_40;
        }
        v27 |= v30 << v28;
        v28 += 7;
        ++v26;
      }
      while (v29 < 0);
      v34 = (v29 & 0x40) == 0 || v28 > 0x3F;
      v35 = -1 << v28;
      if (v34)
        v35 = 0;
      *(_QWORD *)(a3 + 8) = (char *)v6 + v26;
      *(_QWORD *)(a2 + 16) = v27 | v35;
      goto LABEL_59;
    case 'C':
      if ((unint64_t)(v3 + 5) > v4)
        goto LABEL_83;
      v33 = *v6;
      *(_QWORD *)(a3 + 8) = v3 + 5;
      *(_DWORD *)(a2 + 16) = v33;
      goto LABEL_59;
    case 'D':
      if ((unint64_t)(v3 + 9) > v4)
LABEL_83:
        llvm::report_fatal_error((llvm *)"EOF while reading float64", (const char *)1);
      v32 = *(_QWORD *)v6;
      *(_QWORD *)(a3 + 8) = v3 + 9;
      *(_QWORD *)(a2 + 16) = v32;
      goto LABEL_59;
    default:
      if (v7 != 208)
        goto LABEL_61;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      result = "malformed uleb128, extends past end";
      v11 = "uleb128 too big for uint64";
      break;
  }
  do
  {
    if ((_DWORD *)((char *)v6 + v14) == (_DWORD *)v4)
      goto LABEL_41;
    v17 = *((_BYTE *)v6 + v14);
    v18 = v17 & 0x7F;
    if (v16 >= 0x40 && (v17 & 0x7F) != 0 || (unint64_t)(v18 << v16) >> v16 != v18)
    {
LABEL_40:
      result = (char *)v11;
LABEL_41:
      llvm::report_fatal_error((llvm *)result, (const char *)1);
    }
    v15 += v18 << v16;
    v16 += 7;
    ++v14;
  }
  while (v17 < 0);
  *(_QWORD *)(a3 + 8) = (char *)v6 + v14;
  if ((_DWORD)v15 != 111)
  {
    v19 = operator new(0x30uLL);
    v48[0] = "invalid type for ref.null";
    v49 = 259;
    goto LABEL_79;
  }
LABEL_59:
  v39 = *(_BYTE **)(a3 + 8);
  v4 = *(_QWORD *)(a3 + 16);
  if (v39 == (_BYTE *)v4)
    goto LABEL_82;
  *(_QWORD *)(a3 + 8) = v39 + 1;
  if (*v39 == 11)
  {
LABEL_81:
    *v5 = 0;
    return result;
  }
LABEL_61:
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a3 + 8) = v3;
  if (v3 == (unsigned __int8 *)v4)
LABEL_82:
    llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
  result = "malformed uleb128, extends past end";
  v40 = v3;
  while (2)
  {
    v41 = v40 + 1;
    *(_QWORD *)(a3 + 8) = v40 + 1;
    v42 = *v40;
    switch((int)v42)
    {
      case 11:
        *(_QWORD *)(a2 + 24) = v3;
        *(_QWORD *)(a2 + 32) = v41 - v3;
        goto LABEL_81;
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
        goto LABEL_78;
      case 35:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_65;
      case 106:
      case 107:
      case 108:
      case 124:
      case 125:
      case 126:
        goto LABEL_63;
      default:
        if ((_DWORD)v42 == 208)
        {
LABEL_65:
          v43 = 0;
          v44 = 0;
          do
          {
            if (&v41[v43] == (unsigned __int8 *)v4)
              goto LABEL_41;
            v45 = v41[v43];
            if ((v45 & 0x7F) != 0 && v44 > 0x3F || 0xFFFFFFFFFFFFFFFFLL >> v44 < (v45 & 0x7Fu))
              llvm::report_fatal_error((llvm *)"uleb128 too big for uint64", (const char *)1);
            v44 += 7;
            ++v43;
          }
          while ((v45 & 0x80) != 0);
          v41 += v43;
          *(_QWORD *)(a3 + 8) = v41;
LABEL_63:
          v40 = v41;
          if (v41 == (unsigned __int8 *)v4)
            goto LABEL_82;
          continue;
        }
LABEL_78:
        v48[0] = "invalid opcode in init_expr: ";
        v48[2] = v42;
        v49 = 2307;
        v19 = operator new(0x30uLL);
LABEL_79:
        result = (char *)llvm::object::GenericBinaryError::GenericBinaryError(v19, v48, 3);
        *v5 = result;
        return result;
    }
  }
}

void std::vector<llvm::wasm::WasmElemSegment>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 5);
        v11 = *((_OWORD *)v4 - 4);
        v12 = *((_OWORD *)v4 - 3);
        *((_QWORD *)v9 - 4) = *((_QWORD *)v4 - 4);
        *((_OWORD *)v9 - 4) = v11;
        *((_OWORD *)v9 - 3) = v12;
        *((_OWORD *)v9 - 5) = v10;
        *(_OWORD *)(v9 - 24) = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        v9 -= 80;
        *((_QWORD *)v4 - 3) = 0;
        *((_QWORD *)v4 - 2) = 0;
        *((_QWORD *)v4 - 1) = 0;
        v4 -= 80;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v13 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v13 != v2)
      {
        v14 = (void *)*((_QWORD *)v13 - 3);
        if (v14)
        {
          *((_QWORD *)v13 - 2) = v14;
          operator delete(v14);
        }
        v13 -= 80;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void llvm::object::WasmObjectFile::moveSymbolNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::WasmObjectFile::getSymbolFlags@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 3) == 1)
  {
    v5 = 6;
  }
  else if ((v4 & 3) == 2)
  {
    v5 = 0;
  }
  else
  {
    v5 = 2;
  }
  if ((v4 & 0xC) == 4)
    v5 |= 0x200u;
  v6 = v5 | (v4 >> 4) & 1;
  if (*(_BYTE *)(v3 + 16))
    v7 = v6;
  else
    v7 = v6 | 0x800;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v7;
  return result;
}

uint64_t llvm::object::WasmObjectFile::symbol_begin(llvm::object::WasmObjectFile *this)
{
  return 1;
}

unint64_t llvm::object::WasmObjectFile::symbol_end(llvm::object::WasmObjectFile *this)
{
  return ((unint64_t)((*((_QWORD *)this + 68) - *((_QWORD *)this + 67)) >> 5) << 32) | 1;
}

__n128 llvm::object::WasmObjectFile::getSymbolName@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = *(__n128 **)(*(_QWORD *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  a3[1].n128_u8[0] &= ~1u;
  result = *v3;
  *a3 = *v3;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + (((unint64_t)a2 >> 27) & 0x1FFFFFFFE0));
  if (*(_BYTE *)(v3 + 16))
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  v4 = *(unsigned int *)(v3 + 96);
  v5 = *(unsigned int *)(a1 + 680);
  if (v4 < v5)
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 512);
  if (v5 + ((*(_QWORD *)(a1 + 520) - v6) >> 7) <= v4)
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = *(unsigned int *)(v6 + ((unint64_t)(v4 - v5) << 7) + 48);
  return a1;
}

uint64_t llvm::object::WasmObjectFile::getSymbolValueImpl(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (((1 << v4) & 0x35) != 0)
    return *(unsigned int *)(v3 + 96);
  result = 0;
  if (v4 == 1)
  {
    v6 = *(_DWORD *)(v3 + 96);
    v7 = *(_QWORD *)(a1 + 472);
    if (*(_BYTE *)(v7 + 104 * v6 + 24) == 65)
      v8 = *(int *)(v7 + 104 * v6 + 32);
    else
      v8 = *(_QWORD *)(v7 + 104 * v6 + 32);
    return *(_QWORD *)(v3 + 104) + v8;
  }
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = dword_181267A48[*(char *)(*(_QWORD *)(*(_QWORD *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0)) + 16)];
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v3;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolSection@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1[67] + ((a2 >> 27) & 0x1FFFFFFFE0));
  if ((*(_BYTE *)(v4 + 20) & 0x10) == 0)
    __asm { BR              X11 }
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
  result = v6;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  return result;
}

void llvm::object::WasmObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
  ++*a2;
}

void llvm::object::WasmObjectFile::getSectionName(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  llvm::wasm *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::error_code v9;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = (llvm::wasm *)*(unsigned int *)(v4 + 80 * a2);
  if ((_DWORD)v5)
  {
    if (v5 < 0xE)
    {
      v6 = llvm::wasm::sectionTypeToString(v5);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
    }
    else
    {
      *(_QWORD *)&v9.__val_ = llvm::object::object_category(v5);
      v9.__cat_ = (const std::error_category *)"";
      llvm::createStringError((llvm *)6, v9, &v8);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_OWORD *)a3 = *(_OWORD *)(v4 + 80 * a2 + 8);
  }
}

uint64_t llvm::object::WasmObjectFile::getSectionAddress()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::WasmObjectFile::getSectionSize(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 80 * a2 + 40);
}

__n128 llvm::object::WasmObjectFile::getSectionContents@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)(*(_QWORD *)(a1 + 72) + 80 * a2);
  a3[1].n128_u8[0] &= ~1u;
  result = v3[2];
  *a3 = result;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSectionAlignment()
{
  return 1;
}

uint64_t llvm::object::WasmObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::WasmObjectFile::isSectionText(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 72) + 80 * a2) == 10;
}

BOOL llvm::object::WasmObjectFile::isSectionData(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 72) + 80 * a2) == 11;
}

uint64_t llvm::object::WasmObjectFile::isSectionBSS()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::isSectionVirtual()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::WasmObjectFile::section_rel_end(uint64_t a1, unsigned int a2)
{
  return a2 | ((unint64_t)(-1431655765
                                * ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 80 * a2 + 56)
                                                - *(_QWORD *)(*(_QWORD *)(a1 + 72) + 80 * a2 + 48)) >> 3)) << 32);
}

void llvm::object::WasmObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::WasmObjectFile::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 80 * a2 + 48) + 24 * HIDWORD(a2) + 8);
}

unint64_t llvm::object::WasmObjectFile::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1[9] + 80 * a2 + 48);
  if (*(_BYTE *)(v2 + 24 * HIDWORD(a2)) == 6)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  else
    return ((unint64_t)*(unsigned int *)(v2 + 24 * HIDWORD(a2) + 4) << 32) | 1;
}

uint64_t llvm::object::WasmObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 80 * a2 + 48) + 24 * HIDWORD(a2));
}

void *llvm::object::WasmObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  void *result;

  v4 = *(char *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 80 * a2 + 48) + 24 * HIDWORD(a2));
  if (v4 <= 0x1A)
  {
    v5 = v4;
    v6 = off_1E0E5AB18[v5];
    v7 = *(_QWORD *)((char *)&unk_181267A60 + v5 * 8);
    v8 = a3[1];
    v9 = a3[2];
    v10 = v8 + v7;
    if (v9 >= v8 + v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = "Unknown";
  v7 = 7;
  v8 = a3[1];
  v11 = a3[2];
  v10 = v8 + 7;
  if (v11 < v8 + 7)
  {
LABEL_5:
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v10, 1);
    v8 = a3[1];
  }
LABEL_6:
  result = memcpy((void *)(*a3 + v8), v6, v7);
  a3[1] += v7;
  return result;
}

uint64_t llvm::object::WasmObjectFile::section_begin(llvm::object::WasmObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_end(llvm::object::WasmObjectFile *this)
{
  return -858993459 * ((*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
}

uint64_t llvm::object::WasmObjectFile::getBytesInAddress(llvm::object::WasmObjectFile *this)
{
  if (*((_BYTE *)this + 590))
    return 8;
  else
    return 4;
}

const char *llvm::object::WasmObjectFile::getFileFormatName(llvm::object::WasmObjectFile *this)
{
  return "WASM";
}

uint64_t llvm::object::WasmObjectFile::getArch(llvm::object::WasmObjectFile *this)
{
  if (*((_BYTE *)this + 590))
    return 62;
  else
    return 61;
}

double llvm::object::WasmObjectFile::getFeatures@<D0>(uint64_t a1@<X8>)
{
  double result;
  std::vector<std::string> v4;

  llvm::SubtargetFeatures::SubtargetFeatures(&v4, "", 0);
  *(_BYTE *)(a1 + 24) &= ~1u;
  result = *(double *)&v4.__begin_;
  *(std::vector<std::string> *)a1 = v4;
  return result;
}

uint64_t llvm::object::WasmObjectFile::isRelocatableObject(llvm::object::WasmObjectFile *this)
{
  return *((unsigned __int8 *)this + 588);
}

uint64_t llvm::object::WasmSectionOrderChecker::getSectionOrder(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  result = a2;
  switch((int)a2)
  {
    case 0:
      switch(a4)
      {
        case 8uLL:
          if (*(_QWORD *)a3 == 0x302E6B6E696C7964)
            return 14;
          break;
        case 7uLL:
          if (*(_DWORD *)a3 == 1802398060 && *(_DWORD *)(a3 + 3) == 1735289195)
            return 15;
          break;
        case 6uLL:
          if (*(_DWORD *)a3 == 1768716644 && *(_WORD *)(a3 + 4) == 27502)
            return 14;
          break;
        default:
          if (a4 < 6)
          {
            if (a4 != 4 || *(_DWORD *)a3 != 1701667182)
              return 0;
            return 17;
          }
          break;
      }
      if (*(_DWORD *)a3 == 1869374834 && *(_WORD *)(a3 + 4) == 11875)
        return 16;
      if (a4 == 15)
      {
        if (*(_QWORD *)a3 ^ 0x665F746567726174 | *(_QWORD *)(a3 + 7) ^ 0x7365727574616566)
          return 0;
        else
          return 19;
      }
      else
      {
        if (a4 != 9)
          return 0;
        if (*(_QWORD *)a3 != 0x72656375646F7270 || *(_BYTE *)(a3 + 8) != 115)
          return 0;
        return 18;
      }
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return result;
    case 6:
      return 7;
    case 7:
      return 8;
    case 8:
      return 9;
    case 9:
      return 10;
    case 10:
      return 12;
    case 11:
      return 13;
    case 12:
      return 11;
    case 13:
      return 6;
    default:
      return 0;
  }
}

uint64_t llvm::object::WasmSectionOrderChecker::isValidSectionOrder(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int SectionOrder;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  _BOOL8 v12;
  void *v13;
  _QWORD v15[2];
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[11];

  v19[10] = *MEMORY[0x1E0C80C00];
  SectionOrder = llvm::object::WasmSectionOrderChecker::getSectionOrder(a1, a2, a3, a4);
  if (!SectionOrder)
    return 1;
  v6 = SectionOrder;
  v7 = 0;
  v17 = v19;
  v18 = 0x1400000000;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  LODWORD(v8) = SectionOrder;
  while (1)
  {
    v9 = llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v8];
    if (v9)
    {
      v10 = &llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v8 + 1];
      do
      {
        if (!*((_BYTE *)v15 + v9))
        {
          if (v7 >= HIDWORD(v18))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v7 + 1, 4);
            v7 = v18;
          }
          *((_DWORD *)v17 + v7) = v9;
          v7 = v18 + 1;
          LODWORD(v18) = v18 + 1;
          *((_BYTE *)v15 + v9) = 1;
        }
        v11 = *v10++;
        v9 = v11;
      }
      while (v11);
    }
    v12 = v7 == 0;
    if (!v7)
      break;
    v13 = v17;
    v8 = *((int *)v17 + --v7);
    LODWORD(v18) = v7;
    if (*(_BYTE *)(a1 + v8))
    {
      if (v17 == v19)
        return v12;
      goto LABEL_16;
    }
  }
  *(_BYTE *)(a1 + v6) = 1;
  v13 = v17;
  if (v17 == v19)
    return v12;
LABEL_16:
  free(v13);
  return v12;
}

void llvm::object::WasmObjectFile::~WasmObjectFile(llvm::object::WasmObjectFile *this)
{
  void *v1;

  llvm::object::WasmObjectFile::~WasmObjectFile(this);
  operator delete(v1);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;

  *(_QWORD *)this = off_1E0E24E58;
  v2 = (void *)*((_QWORD *)this + 81);
  if (v2)
  {
    *((_QWORD *)this + 82) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 78);
  if (v3)
  {
    *((_QWORD *)this + 79) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 75);
  if (v4)
  {
    *((_QWORD *)this + 76) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 70);
  if (v5)
  {
    *((_QWORD *)this + 71) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 67);
  if (v6)
  {
    *((_QWORD *)this + 68) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 64);
  if (v7)
  {
    v8 = *((_QWORD *)this + 65);
    v9 = (void *)*((_QWORD *)this + 64);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 120);
        if (v10)
        {
          *(_QWORD *)(v8 - 112) = v10;
          operator delete(v10);
        }
        v8 -= 128;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 64);
    }
    *((_QWORD *)this + 65) = v7;
    operator delete(v9);
  }
  v11 = (void *)*((_QWORD *)this + 59);
  if (v11)
  {
    *((_QWORD *)this + 60) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 56);
  if (v12)
  {
    v13 = *((_QWORD *)this + 57);
    v14 = (void *)*((_QWORD *)this + 56);
    if (v13 != v12)
    {
      do
      {
        v15 = *(void **)(v13 - 24);
        if (v15)
        {
          *(_QWORD *)(v13 - 16) = v15;
          operator delete(v15);
        }
        v13 -= 80;
      }
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 56);
    }
    *((_QWORD *)this + 57) = v12;
    operator delete(v14);
  }
  v16 = (void *)*((_QWORD *)this + 53);
  if (v16)
  {
    *((_QWORD *)this + 54) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 50);
  if (v17)
  {
    *((_QWORD *)this + 51) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 47);
  if (v18)
  {
    *((_QWORD *)this + 48) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 44);
  if (v19)
  {
    *((_QWORD *)this + 45) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 41);
  if (v20)
  {
    *((_QWORD *)this + 42) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 38);
  if (v21)
  {
    *((_QWORD *)this + 39) = v21;
    operator delete(v21);
  }
  v22 = (char *)*((_QWORD *)this + 35);
  if (v22)
  {
    v23 = (char *)*((_QWORD *)this + 36);
    v24 = (void *)*((_QWORD *)this + 35);
    if (v23 != v22)
    {
      v25 = v23 - 24;
      do
      {
        v27 = (char *)*((_QWORD *)v25 - 2);
        if (v25 != v27)
          free(v27);
        v28 = (char *)*((_QWORD *)v25 - 5);
        if (v25 - 24 != v28)
          free(v28);
        v26 = v25 - 40;
        v25 -= 64;
      }
      while (v26 != v22);
      v24 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v22;
    operator delete(v24);
  }
  v29 = *((_QWORD *)this + 32);
  if (v29)
  {
    v30 = *((_QWORD *)this + 33);
    v31 = (void *)*((_QWORD *)this + 32);
    if (v30 != v29)
    {
      do
      {
        if (*(char *)(v30 - 1) < 0)
          operator delete(*(void **)(v30 - 24));
        v30 -= 32;
      }
      while (v30 != v29);
      v31 = (void *)*((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v29;
    operator delete(v31);
  }
  llvm::wasm::WasmProducerInfo::~WasmProducerInfo((llvm::object::WasmObjectFile *)((char *)this + 184));
  v32 = (void *)*((_QWORD *)this + 20);
  if (v32)
  {
    *((_QWORD *)this + 21) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 17);
  if (v33)
  {
    *((_QWORD *)this + 18) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 14);
  if (v34)
  {
    *((_QWORD *)this + 15) = v34;
    operator delete(v34);
  }
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = *((_QWORD *)this + 10);
    v37 = (void *)*((_QWORD *)this + 9);
    if (v36 != v35)
    {
      do
      {
        v38 = *(void **)(v36 - 32);
        if (v38)
        {
          *(_QWORD *)(v36 - 24) = v38;
          operator delete(v38);
        }
        v36 -= 80;
      }
      while (v36 != v35);
      v37 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v35;
    operator delete(v37);
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
}

uint64_t llvm::object::WasmObjectFile::is64Bit(llvm::object::WasmObjectFile *this)
{
  return 0;
}

void llvm::to_string<unsigned int>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  __int128 v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = &unk_1E0E22B10;
  v13 = v14;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v5, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v5, *a1);
  if ((*((char *)v13 + 23) & 0x80000000) == 0)
  {
    v4 = *(_OWORD *)v13;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v14[0]);
    return;
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
  if (SHIBYTE(v15) < 0)
    goto LABEL_5;
}

void llvm::wasm::WasmProducerInfo::~WasmProducerInfo(llvm::wasm::WasmProducerInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 7) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0)
LABEL_9:
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 6);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v5 = *((_QWORD *)this + 3);
  if (!v5)
    goto LABEL_23;
  v6 = *((_QWORD *)this + 4);
  v7 = (void *)*((_QWORD *)this + 3);
  if (v6 != v5)
  {
    while (1)
    {
      if (*(char *)(v6 - 1) < 0)
      {
        operator delete(*(void **)(v6 - 24));
        if (*(char *)(v6 - 25) < 0)
LABEL_20:
          operator delete(*(void **)(v6 - 48));
      }
      else if (*(char *)(v6 - 25) < 0)
      {
        goto LABEL_20;
      }
      v6 -= 48;
      if (v6 == v5)
      {
        v7 = (void *)*((_QWORD *)this + 3);
        break;
      }
    }
  }
  *((_QWORD *)this + 4) = v5;
  operator delete(v7);
LABEL_23:
  v8 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return;
  v9 = *((_QWORD *)this + 1);
  v10 = *(void **)this;
  if (v9 != v8)
  {
    while (1)
    {
      if (*(char *)(v9 - 1) < 0)
      {
        operator delete(*(void **)(v9 - 24));
        if (*(char *)(v9 - 25) < 0)
LABEL_31:
          operator delete(*(void **)(v9 - 48));
      }
      else if (*(char *)(v9 - 25) < 0)
      {
        goto LABEL_31;
      }
      v9 -= 48;
      if (v9 == v8)
      {
        v10 = *(void **)this;
        break;
      }
    }
  }
  *((_QWORD *)this + 1) = v8;
  operator delete(v10);
}

char *std::vector<llvm::object::WasmSection>::__push_back_slow_path<llvm::object::WasmSection const&>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  _WORD *v7;
  char *v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  void *v23;
  unint64_t v25;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    goto LABEL_25;
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 4) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  v25 = v5;
  if (v5)
  {
    if (v5 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = operator new(80 * v5);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[40 * v4];
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 8) = 0;
  v11 = *(_BYTE **)(a2 + 48);
  v10 = *(_BYTE **)(a2 + 56);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) < 0xAAAAAAAAAAAAAABLL)
    {
      v13 = (char *)operator new(v12);
      *((_QWORD *)v8 + 6) = v13;
      v14 = &v13[8 * (v12 >> 3)];
      *((_QWORD *)v8 + 8) = v14;
      memcpy(v13, v11, v12);
      *((_QWORD *)v8 + 7) = v14;
      goto LABEL_13;
    }
LABEL_25:
    abort();
  }
LABEL_13:
  v15 = (char *)&v7[40 * v25];
  v7[40 * v4 + 36] = *(_WORD *)(a2 + 72);
  v16 = v8 + 80;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v16;
    a1[2] = v15;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v8[v17];
      v19 = &v2[v17];
      v20 = *(_OWORD *)&v2[v17 - 80];
      v21 = *(_OWORD *)&v2[v17 - 48];
      *((_OWORD *)v18 - 4) = *(_OWORD *)&v2[v17 - 64];
      *((_OWORD *)v18 - 3) = v21;
      *((_OWORD *)v18 - 5) = v20;
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *((_OWORD *)v18 - 2) = *(_OWORD *)&v2[v17 - 32];
      *((_QWORD *)v18 - 2) = *(_QWORD *)&v2[v17 - 16];
      *((_QWORD *)v19 - 4) = 0;
      *((_QWORD *)v19 - 3) = 0;
      *((_QWORD *)v19 - 2) = 0;
      *((_WORD *)v18 - 4) = *(_WORD *)&v2[v17 - 8];
      v17 -= 80;
    }
    while (&v2[v17] != v3);
    v2 = (char *)*a1;
    v22 = (char *)a1[1];
    *a1 = &v8[v17];
    a1[1] = v16;
    a1[2] = v15;
    while (v22 != v2)
    {
      v23 = (void *)*((_QWORD *)v22 - 4);
      if (v23)
      {
        *((_QWORD *)v22 - 3) = v23;
        operator delete(v23);
      }
      v22 -= 80;
    }
  }
  if (v2)
    operator delete(v2);
  return v8 + 80;
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(char *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v4 = result;
  v6 = *(_QWORD *)result;
  v7 = *((_DWORD *)result + 4);
  if (!v7)
    goto LABEL_23;
  v8 = v7 - 1;
  v9 = (37 * *a2) & (v7 - 1);
  v10 = (uint64_t *)(v6 + 8 * v9);
  v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    v12 = 0;
    goto LABEL_10;
  }
  v14 = 0;
  v15 = 1;
  while (v11 != -1)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v11 == -2;
    if (v16)
      v14 = v10;
    v17 = v9 + v15++;
    v9 = v17 & v8;
    v10 = (uint64_t *)(v6 + 8 * (v17 & v8));
    v11 = *v10;
    if (*a2 == *v10)
      goto LABEL_3;
  }
  if (v14)
    v10 = v14;
  v18 = *((_DWORD *)result + 2);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *((_DWORD *)result + 3) > v7 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_23:
    v7 *= 2;
  }
  result = llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::grow((uint64_t)result, v7);
  v6 = *(_QWORD *)v4;
  v7 = *((_DWORD *)v4 + 4);
  v13 = *a2;
  v19 = v7 - 1;
  v20 = (37 * *a2) & (v7 - 1);
  v10 = (uint64_t *)(*(_QWORD *)v4 + 8 * v20);
  v21 = *v10;
  if (*a2 == *v10)
    goto LABEL_7;
  v22 = 0;
  v23 = 1;
  while (v21 != -1)
  {
    if (v22)
      v24 = 0;
    else
      v24 = v21 == -2;
    if (v24)
      v22 = v10;
    v25 = v20 + v23++;
    v20 = v25 & v19;
    v10 = (uint64_t *)(v6 + 8 * (v25 & v19));
    v21 = *v10;
    if (v13 == *v10)
      goto LABEL_7;
  }
  if (v22)
    v10 = v22;
LABEL_6:
  v13 = *v10;
LABEL_7:
  ++*((_DWORD *)v4 + 2);
  if (v13 != -1)
    --*((_DWORD *)v4 + 3);
  *v10 = *a2;
  v12 = 1;
LABEL_10:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v6 + 8 * v7;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

uint64_t **std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  const void *v7;
  size_t v8;
  uint64_t **v9;
  size_t v10;
  size_t v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v9 = a1 + 1;
    goto LABEL_21;
  }
  v7 = *(const void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  do
  {
    while (1)
    {
      v9 = (uint64_t **)v5;
      v10 = v5[5];
      if (v10 >= v8)
        v11 = v8;
      else
        v11 = v5[5];
      if (!v11)
      {
        if (v8 >= v10)
          goto LABEL_17;
        goto LABEL_3;
      }
      v12 = (const void *)v5[4];
      v13 = memcmp(v7, v12, v11);
      if (v13)
        break;
      if (v8 >= v10)
        goto LABEL_14;
LABEL_3:
      v5 = *v9;
      v6 = v9;
      if (!*v9)
        goto LABEL_21;
    }
    if (v13 < 0)
      goto LABEL_3;
LABEL_14:
    v14 = memcmp(v12, v7, v11);
    if (v14)
    {
      if ((v14 & 0x80000000) == 0)
        return v9;
      goto LABEL_18;
    }
LABEL_17:
    if (v10 >= v8)
      return v9;
LABEL_18:
    v5 = v9[1];
  }
  while (v5);
  v6 = v9 + 1;
LABEL_21:
  v15 = (uint64_t *)v9;
  v9 = (uint64_t **)operator new(0x30uLL);
  *((_OWORD *)v9 + 2) = *a3;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v15;
  *v6 = (uint64_t *)v9;
  v16 = (uint64_t *)**a1;
  v17 = (uint64_t *)v9;
  if (v16)
  {
    *a1 = v16;
    v17 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

char *std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string,std::string>(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  __int128 v15;
  __int128 v16;
  void **v17;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[48 * v3];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v11 = &v9[48 * v8];
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v12 = v10 + 48;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 != *a1)
  {
    do
    {
      v15 = *((_OWORD *)v14 - 3);
      *((_QWORD *)v10 - 4) = *(v14 - 4);
      *((_OWORD *)v10 - 3) = v15;
      *(v14 - 5) = 0;
      *(v14 - 4) = 0;
      *(v14 - 6) = 0;
      v16 = *(_OWORD *)(v14 - 3);
      *((_QWORD *)v10 - 1) = *(v14 - 1);
      *(_OWORD *)(v10 - 24) = v16;
      v10 -= 48;
      *(v14 - 2) = 0;
      *(v14 - 1) = 0;
      *(v14 - 3) = 0;
      v14 -= 6;
    }
    while (v14 != v13);
    v14 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    while (1)
    {
      if (v17 == v14)
        goto LABEL_22;
      if (*((char *)v17 - 1) < 0)
      {
        operator delete(*(v17 - 3));
        if ((*((char *)v17 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v17 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v17 - 6));
LABEL_14:
      v17 -= 6;
    }
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
LABEL_22:
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t std::vector<llvm::wasm::WasmFeatureEntry>::__push_back_slow_path<llvm::wasm::WasmFeatureEntry const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  std::string *v12;
  char *v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  void **v17;

  v2 = *(void ***)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(32 * v9);
    v11 = (uint64_t)&v10[32 * v4];
    *(_BYTE *)v11 = *(_BYTE *)a2;
    v12 = (std::string *)(v11 + 8);
    if ((*(char *)(a2 + 31) & 0x80000000) == 0)
    {
LABEL_10:
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
      v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
      v13 = &v10[32 * v9];
      v14 = v11 + 32;
      if ((void **)v3 == v2)
        goto LABEL_20;
      goto LABEL_14;
    }
  }
  else
  {
    v10 = 0;
    v11 = 32 * v4;
    *(_BYTE *)v11 = *(_BYTE *)a2;
    v12 = (std::string *)(v11 + 8);
    if ((*(char *)(a2 + 31) & 0x80000000) == 0)
      goto LABEL_10;
  }
  std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  v2 = *(void ***)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v13 = &v10[32 * v9];
  v14 = v11 + 32;
  if (v3 == *(_QWORD *)a1)
  {
LABEL_20:
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    goto LABEL_21;
  }
  do
  {
LABEL_14:
    v15 = *(_BYTE *)(v3 - 32);
    v3 -= 32;
    *(_BYTE *)(v11 - 32) = v15;
    v11 -= 32;
    v16 = *(_OWORD *)(v3 + 8);
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v3 + 24);
    *(_OWORD *)(v11 + 8) = v16;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
  }
  while ((void **)v3 != v2);
  v2 = *(void ***)a1;
  v17 = *(void ***)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v13;
  while (v17 != v2)
  {
    if (*((char *)v17 - 1) < 0)
      operator delete(*(v17 - 3));
    v17 -= 4;
  }
LABEL_21:
  if (v2)
    operator delete(v2);
  return v14;
}

_QWORD *std::vector<llvm::wasm::WasmSignature>::__push_back_slow_path<llvm::wasm::WasmSignature>(void **a1, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58)
    abort();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 5 > v3)
    v3 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 58)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v8 = operator new(v7 << 6);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v2];
  *v9 = v9 + 2;
  v9[1] = 0x100000000;
  if (a2[2])
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v8[16 * v2], (uint64_t)a2);
  v9[3] = v9 + 5;
  v9[4] = 0x400000000;
  if (a2[8])
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v9 + 3), (uint64_t)(a2 + 6));
  v10 = (char *)&v8[16 * v7];
  v8[16 * v2 + 14] = a2[14];
  v11 = v9 + 8;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v9[v14];
      v9[v14 - 8] = &v9[v14 - 6];
      v16 = &v12[v14 * 8];
      v9[v14 - 7] = 0x100000000;
      if (*(_DWORD *)&v12[v14 * 8 - 56])
        llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v9[v14 - 8], (uint64_t)(v16 - 64));
      *(v15 - 5) = v15 - 3;
      v17 = (uint64_t)(v15 - 5);
      *(_QWORD *)(v17 + 8) = 0x400000000;
      if (*((_DWORD *)v16 - 8))
        llvm::SmallVectorImpl<unsigned int>::operator=(v17, (uint64_t)&v12[v14 * 8 - 40]);
      LODWORD(v9[v14 - 1]) = *(_DWORD *)&v12[v14 * 8 - 8];
      v14 -= 8;
    }
    while (&v12[v14 * 8] != v13);
    v12 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    if (v18 != v12)
    {
      v19 = v18 - 24;
      do
      {
        v21 = (char *)*((_QWORD *)v19 - 2);
        if (v19 != v21)
          free(v21);
        v22 = (char *)*((_QWORD *)v19 - 5);
        if (v19 - 24 != v22)
          free(v22);
        v20 = v19 - 40;
        v19 -= 64;
      }
      while (v20 != v12);
    }
  }
  if (v12)
    operator delete(v12);
  return v9 + 8;
}

char *std::vector<llvm::wasm::WasmFunction>::__push_back_slow_path<llvm::wasm::WasmFunction const&>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  void *v29;
  char *v31;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 7;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 57)
    goto LABEL_26;
  v7 = (_BYTE *)a1[2] - v3;
  if (v7 >> 6 > v5)
    v5 = v7 >> 6;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFF80)
    v8 = 0x1FFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 57)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(v8 << 7);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[128 * v4];
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  v11 = *(_BYTE **)(a2 + 8);
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *((_QWORD *)v10 + 3) = 0;
  v12 = *(_BYTE **)(a2 + 16);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    v31 = v9;
    if ((v13 & 0x8000000000000000) == 0)
    {
      v14 = (char *)operator new(v13);
      *((_QWORD *)v10 + 1) = v14;
      v15 = &v14[8 * (v13 >> 3)];
      *((_QWORD *)v10 + 3) = v15;
      memcpy(v14, v11, v13);
      *((_QWORD *)v10 + 2) = v15;
      v9 = v31;
      goto LABEL_14;
    }
LABEL_26:
    abort();
  }
LABEL_14:
  v16 = *(_OWORD *)(a2 + 80);
  v17 = &v9[128 * v8];
  *((_OWORD *)v10 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v10 + 5) = v16;
  *((_OWORD *)v10 + 6) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v10 + 108) = *(_OWORD *)(a2 + 108);
  v18 = *(_OWORD *)(a2 + 32);
  v19 = *(_OWORD *)(a2 + 48);
  v20 = v10 + 128;
  *((_OWORD *)v10 + 2) = v18;
  *((_OWORD *)v10 + 3) = v19;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v20;
    a1[2] = v17;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = &v10[v21];
      v23 = &v2[v21];
      *((_QWORD *)v22 - 16) = *(_QWORD *)&v2[v21 - 128];
      *((_QWORD *)v22 - 14) = 0;
      *((_QWORD *)v22 - 13) = 0;
      *(_OWORD *)(v22 - 120) = *(_OWORD *)&v2[v21 - 120];
      *((_QWORD *)v22 - 13) = *(_QWORD *)&v2[v21 - 104];
      *((_QWORD *)v23 - 14) = 0;
      *((_QWORD *)v23 - 13) = 0;
      *((_QWORD *)v23 - 15) = 0;
      v25 = *(_OWORD *)&v2[v21 - 48];
      v24 = *(_OWORD *)&v2[v21 - 32];
      v26 = *(_OWORD *)&v2[v21 - 64];
      *(_OWORD *)(v22 - 20) = *(_OWORD *)&v2[v21 - 20];
      *((_OWORD *)v22 - 3) = v25;
      *((_OWORD *)v22 - 2) = v24;
      *((_OWORD *)v22 - 4) = v26;
      v27 = *(_OWORD *)&v2[v21 - 80];
      *((_OWORD *)v22 - 6) = *(_OWORD *)&v2[v21 - 96];
      *((_OWORD *)v22 - 5) = v27;
      v21 -= 128;
    }
    while (&v2[v21] != v3);
    v2 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = &v10[v21];
    a1[1] = v20;
    a1[2] = v17;
    while (v28 != v2)
    {
      v29 = (void *)*((_QWORD *)v28 - 15);
      if (v29)
      {
        *((_QWORD *)v28 - 14) = v29;
        operator delete(v29);
      }
      v28 -= 128;
    }
  }
  if (v2)
    operator delete(v2);
  return v10 + 128;
}

char *std::vector<llvm::wasm::WasmElemSegment>::__push_back_slow_path<llvm::wasm::WasmElemSegment const&>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  __int128 v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  void *v24;
  char *v26;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    goto LABEL_25;
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 4) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 4) >= 0x199999999999999)
    v8 = 0x333333333333333;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(80 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_OWORD *)(a2 + 16);
  v11 = &v9[80 * v4];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v10;
  v12 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 7) = 0;
  *((_OWORD *)v11 + 2) = v12;
  *((_QWORD *)v11 + 8) = 0;
  v13 = *(_BYTE **)(a2 + 56);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *((_QWORD *)v11 + 9) = 0;
  v14 = *(_BYTE **)(a2 + 64);
  v15 = v14 - v13;
  if (v14 != v13)
  {
    v26 = v9;
    if ((v15 & 0x8000000000000000) == 0)
    {
      v16 = (char *)operator new(v15);
      *((_QWORD *)v11 + 7) = v16;
      v17 = &v16[4 * (v15 >> 2)];
      *((_QWORD *)v11 + 9) = v17;
      memcpy(v16, v13, v15);
      *((_QWORD *)v11 + 8) = v17;
      v9 = v26;
      goto LABEL_14;
    }
LABEL_25:
    abort();
  }
LABEL_14:
  v18 = &v9[80 * v8];
  v19 = v11 + 80;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v19;
    a1[2] = v18;
  }
  else
  {
    do
    {
      v20 = *((_OWORD *)v2 - 5);
      v21 = *((_OWORD *)v2 - 4);
      v22 = *((_OWORD *)v2 - 3);
      *((_QWORD *)v11 - 4) = *((_QWORD *)v2 - 4);
      *((_OWORD *)v11 - 4) = v21;
      *((_OWORD *)v11 - 3) = v22;
      *((_OWORD *)v11 - 5) = v20;
      *((_QWORD *)v11 - 2) = 0;
      *((_QWORD *)v11 - 1) = 0;
      *(_OWORD *)(v11 - 24) = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v11 - 1) = *((_QWORD *)v2 - 1);
      v11 -= 80;
      *((_QWORD *)v2 - 3) = 0;
      *((_QWORD *)v2 - 2) = 0;
      *((_QWORD *)v2 - 1) = 0;
      v2 -= 80;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
    v23 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v19;
    a1[2] = v18;
    while (v23 != v2)
    {
      v24 = (void *)*((_QWORD *)v23 - 3);
      if (v24)
      {
        *((_QWORD *)v23 - 2) = v24;
        operator delete(v24);
      }
      v23 -= 80;
    }
  }
  if (v2)
    operator delete(v2);
  return v19;
}

llvm::object *llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  llvm::object *result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  int8x16_t v18;
  std::string *v19;
  std::string::size_type v20;
  unint64_t v21;
  llvm::object *v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  llvm::object *v32;
  std::string v33;
  void *__p[2];
  std::string::size_type v35;
  _QWORD v36[4];
  __int16 v37;
  _QWORD v38[4];
  __int16 v39;
  _QWORD v40[4];
  __int16 v41;
  _QWORD v42[4];
  __int16 v43;
  std::error_code v44;
  std::error_code v45;

  v6 = a1[6];
  v7 = *(_QWORD *)(a2 + 40);
  result = (llvm::object *)(*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((_DWORD)result)
  {
    v9 = *(_DWORD *)(a2 + 56);
LABEL_3:
    v10 = bswap32(v9);
LABEL_5:
    v11 = v10;
    v12 = 1;
    goto LABEL_6;
  }
  v10 = bswap32(*(_DWORD *)(a2 + 56));
  if (v10 < 0xFFFF)
    goto LABEL_5;
  v24 = a1[8];
  result = (llvm::object *)(*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v25 = a1[6];
  if (*(_WORD *)(v25 + 2))
  {
    v26 = (_DWORD *)(v24 + 36);
    v27 = 40 * __rev16(*(unsigned __int16 *)(v25 + 2));
    while (*v26 != 0x800000
         || bswap32(*((unsigned __int16 *)v26 - 2)) >> 16 != (unsigned __int16)(-29127 * ((a2 - v24) >> 3)
                                                                              + 1))
    {
      v26 += 10;
      v27 -= 40;
      if (!v27)
        goto LABEL_22;
    }
    v9 = *(v26 - 7);
    goto LABEL_3;
  }
LABEL_22:
  *(_QWORD *)&v45.__val_ = llvm::object::object_category(result);
  result = (llvm::object *)llvm::errorCodeToError((llvm *)3, v45, v42);
  v28 = v42[0];
  if (v42[0])
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v28;
    return result;
  }
  v11 = 0;
  v12 = 0;
LABEL_6:
  v13 = v6 + bswap64(v7);
  v14 = 14 * v11;
  v15 = v14 + v13;
  if ((__CFADD__(v14, v13) || v15 < v14 || (v16 = a1[2], v16 > v13) || v15 > v16 + a1[3])
    && (*(_QWORD *)&v44.__val_ = llvm::object::object_category(result),
        result = (llvm::object *)llvm::errorCodeToError((llvm *)4, v44, v42),
        v42[0]))
  {
    v32 = (llvm::object *)v42[0];
    llvm::toString((_QWORD **)&v32, &v33, v17, v18);
    v19 = std::string::append(&v33, ": relocations with offset 0x");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v35 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = bswap64(*(_QWORD *)(a2 + 40));
    v30 = 14 * v11;
    v31 = v21;
    v36[0] = __p;
    v36[2] = &v31;
    v37 = 3844;
    v38[0] = v36;
    v38[2] = " and size 0x";
    v39 = 770;
    v40[0] = v38;
    v40[2] = &v30;
    v41 = 3842;
    v42[0] = v40;
    v42[2] = " go past the end of the file";
    v43 = 770;
    v22 = (llvm::object *)operator new(0x38uLL);
    v23 = llvm::object::object_category(v22);
    llvm::StringError::StringError((uint64_t)v22, (llvm::Twine *)v42, 3, (uint64_t)v23);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v22;
    if (SHIBYTE(v35) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        result = v32;
        if (!v32)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v33.__r_.__value_.__l.__data_);
    result = v32;
    if (v32)
LABEL_26:
      result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v11;
  }
LABEL_27:
  if (v11)
    v29 = v12;
  else
    v29 = 1;
  if ((v29 & 1) == 0)
    return (llvm::object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

llvm::object *llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  llvm::object *result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::object *v13;
  unint64_t v14;
  int64x2_t v17;
  int8x16_t v18;
  std::string *v19;
  std::string::size_type v20;
  uint64_t v21;
  llvm::object *v22;
  _UNKNOWN **v23;
  unint64_t v24;
  uint64_t v25;
  llvm::object *v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  llvm::object *v38;
  char v39;
  uint64_t v40;
  std::error_code v41;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a1[6];
  v7 = *(_DWORD *)(a2 + 24);
  result = llvm::object::XCOFFObjectFile::getNumberOfRelocationEntries<llvm::object::XCOFFSectionHeader32>(a1, a2, (uint64_t)&v38);
  if ((v39 & 1) != 0)
  {
    v13 = v38;
    v38 = 0;
    if (v13)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v13;
      goto LABEL_25;
    }
    v9 = 0;
    v10 = v6 + bswap32(v7);
    v11 = 0;
    v12 = v10;
  }
  else
  {
    v9 = v38;
    v10 = v6 + bswap32(v7);
    v11 = 10 * v38;
    v12 = v11 + v10;
    if (__CFADD__(v11, v10))
      goto LABEL_16;
  }
  v14 = a1[2];
  if (v12 >= v11 && v14 <= v10 && v12 <= v14 + a1[3])
    goto LABEL_21;
LABEL_16:
  *(_QWORD *)&v41.__val_ = llvm::object::object_category(result);
  result = (llvm::object *)llvm::errorCodeToError((llvm *)4, v41, v36);
  if (!v36[0])
  {
LABEL_21:
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v9;
    goto LABEL_25;
  }
  v26 = (llvm::object *)v36[0];
  llvm::toString((_QWORD **)&v26, &v27, v17, v18);
  v19 = std::string::append(&v27, ": relocations with offset 0x");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v29 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = bswap32(*(_DWORD *)(a2 + 24));
  v24 = v11;
  v25 = v21;
  v30[0] = __p;
  v30[2] = &v25;
  v31 = 3844;
  v32[0] = v30;
  v32[2] = " and size 0x";
  v33 = 770;
  v34[0] = v32;
  v34[2] = &v24;
  v35 = 3842;
  v36[0] = v34;
  v36[2] = " go past the end of the file";
  v37 = 770;
  v22 = (llvm::object *)operator new(0x38uLL);
  v23 = llvm::object::object_category(v22);
  llvm::StringError::StringError((uint64_t)v22, (llvm::Twine *)v36, 3, (uint64_t)v23);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v22;
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_23:
    operator delete(v27.__r_.__value_.__l.__data_);
    result = v26;
    if (!v26)
      goto LABEL_25;
    goto LABEL_24;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
LABEL_19:
  result = v26;
  if (v26)
LABEL_24:
    result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(_QWORD *)result + 8))(result);
LABEL_25:
  if ((v39 & 1) != 0)
  {
    result = v38;
    v38 = 0;
    if (result)
      return (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

llvm::object *llvm::object::XCOFFObjectFile::getNumberOfRelocationEntries<llvm::object::XCOFFSectionHeader32>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object *result;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::error_code v12;

  result = (llvm::object *)(*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = bswap32(*(unsigned __int16 *)(a2 + 32)) >> 16;
  }
  else
  {
    v7 = *(unsigned __int16 *)(a2 + 32);
    if (v7 == 0xFFFF)
    {
      v8 = a1[8];
      result = (llvm::object *)(*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
      if (*(_WORD *)(a1[6] + 2))
      {
        v9 = (_DWORD *)(v8 + 36);
        v10 = 40 * __rev16(*(unsigned __int16 *)(a1[6] + 2));
        while (*v9 != 0x800000
             || bswap32(*((unsigned __int16 *)v9 - 2)) >> 16 != (unsigned __int16)(-13107
                                                                                 * ((a2 - v8) >> 3)
                                                                                 + 1))
        {
          v9 += 10;
          v10 -= 40;
          if (!v10)
            goto LABEL_11;
        }
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = bswap32(*(v9 - 7));
      }
      else
      {
LABEL_11:
        *(_QWORD *)&v12.__val_ = llvm::object::object_category(result);
        result = (llvm::object *)llvm::errorCodeToError((llvm *)3, v12, &v11);
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v11;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = __rev16(v7);
    }
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::fileHeader32(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t llvm::object::XCOFFObjectFile::auxiliaryHeader32(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t llvm::object::XCOFFObjectFile::moveSymbolNext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  *a2 = v3 + 18 * *(unsigned __int8 *)(v3 + 17) + 18;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getStringTableEntry@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const char *v5;
  llvm::object *v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;

  if (a2 > 3)
  {
    v4 = *(_QWORD *)(this + 88);
    if (v4 && *(_DWORD *)(this + 80) > a2)
    {
      v5 = (const char *)(v4 + a2);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v5;
      this = strlen(v5);
      *(_QWORD *)(a3 + 8) = this;
    }
    else
    {
      v9 = a2;
      v10[0] = "entry with offset 0x";
      v10[2] = &v9;
      v11 = 3843;
      v12[0] = v10;
      v12[2] = " in a string table with size 0x";
      v13 = 770;
      v8 = *(unsigned int *)(this + 80);
      v14[0] = v12;
      v14[2] = &v8;
      v15 = 3842;
      v16[0] = v14;
      v16[2] = " is invalid";
      v17 = 770;
      v6 = (llvm::object *)operator new(0x38uLL);
      v7 = llvm::object::object_category(v6);
      this = llvm::StringError::StringError((uint64_t)v6, (llvm::Twine *)v16, 3, (uint64_t)v7);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v6;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return this;
}

_BYTE *llvm::object::XCOFFObjectFile::getSymbolName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a1;
  return llvm::object::XCOFFSymbolRef::getName((llvm::object::XCOFFSymbolRef *)v4, a3);
}

_BYTE *llvm::object::XCOFFSymbolRef::getName@<X0>(llvm::object::XCOFFSymbolRef *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *result;
  unsigned int *v5;
  uint64_t v6;

  result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if (*(char *)(*(_QWORD *)this + 16) < 0)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = "Unimplemented Debug Name";
    *(_QWORD *)(a2 + 8) = 24;
  }
  else if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) & 1) != 0)
  {
    return (_BYTE *)llvm::object::XCOFFObjectFile::getStringTableEntry(*((_QWORD *)this + 1), bswap32(*(_DWORD *)(*(_QWORD *)this + 8)), a2);
  }
  else
  {
    v5 = *(unsigned int **)this;
    if (**(_DWORD **)this)
    {
      result = memchr(v5, 0, 8uLL);
      v6 = result - (_BYTE *)v5;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if (!result)
        v6 = 8;
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v6;
    }
    else
    {
      return (_BYTE *)llvm::object::XCOFFObjectFile::getStringTableEntry(*((_QWORD *)this + 1), bswap32(v5[1]), a2);
    }
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v6;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((_DWORD)result)
    v6 = bswap64(*(_QWORD *)a2);
  else
    v6 = bswap32(*(_DWORD *)(a2 + 8));
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return bswap64(*(_QWORD *)a2);
  else
    return bswap32(*(_DWORD *)(a2 + 8));
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6[0] = a2;
  v6[1] = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 != 2 && v3 != 111 && v3 != 107)
    return 0;
  llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v6, (uint64_t)v9);
  v4 = v9[0];
  if ((v10 & 1) != 0)
  {
    v7 = (_QWORD *)v9[0];
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v7, &v8);
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    return 0;
  }
  if (!v9[0])
    v4 = v9[1];
  return (1 << (*(_BYTE *)(v4 + 10) >> 3));
}

uint64_t llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef@<X0>(llvm::object::XCOFFSymbolRef *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t result;
  _QWORD *v10;
  char *v11;
  __int16 v12;
  llvm::object *v13;
  _UNKNOWN **v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  __int16 v20;
  _QWORD v21[2];
  unint64_t v22;
  __int16 v23;
  _QWORD *v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v4 = *(unsigned __int8 *)(*(_QWORD *)this + 17);
  llvm::object::XCOFFSymbolRef::getName(this, (uint64_t)&v27);
  v5 = v29;
  if ((v29 & 1) != 0)
  {
    v6 = v27;
    v27 = 0;
    if (v6)
    {
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v6;
      goto LABEL_15;
    }
  }
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (*(_QWORD *)this - v7[9]) / 0x12uLL;
  if (v4)
  {
    result = (*(uint64_t (**)(_QWORD *))(*v7 + 64))(v7);
    v10 = *(_QWORD **)this;
    if (!(_DWORD)result)
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = (char *)v10 + 18 * v4;
      *(_QWORD *)(a2 + 8) = 0;
      if ((v5 & 1) == 0)
        return result;
      goto LABEL_15;
    }
    while (1)
    {
      v11 = (char *)v10 + 18 * v4;
      if (v11[17] == 251)
        break;
      LOBYTE(v4) = v4 - 1;
      if (!(_BYTE)v4)
      {
        v20 = 1283;
        v17[0] = "a csect auxiliary entry has not been found for symbol \"";
        v18 = (const char *)v27;
        v19 = v28;
        v21[0] = v17;
        v22 = (unint64_t)"\" with index ";
        v23 = 770;
        v24 = v21;
        v25 = v8;
        v12 = 2306;
        goto LABEL_10;
      }
    }
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v11;
    if ((v5 & 1) != 0)
    {
LABEL_15:
      result = v27;
      if (v27)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  else
  {
    v16 = 1283;
    v15[0] = "csect symbol \"";
    v15[2] = v27;
    v15[3] = v28;
    v17[0] = v15;
    v18 = "\" with index ";
    v12 = 770;
    v20 = 770;
    v21[0] = v17;
    v22 = v8;
    v23 = 2306;
    v24 = v21;
    v25 = (unint64_t)" contains no auxiliary entry";
LABEL_10:
    v26 = v12;
    v13 = (llvm::object *)operator new(0x38uLL);
    v14 = llvm::object::object_category(v13);
    result = llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)&v24, 3, (uint64_t)v14);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v13;
    if ((v5 & 1) != 0)
      goto LABEL_15;
  }
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD v5[2];
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5[0] = a2;
  v5[1] = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 != 2 && v3 != 111 && v3 != 107)
    return 0;
  llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v5, (uint64_t)&v8);
  if ((v10 & 1) != 0)
  {
    v6 = v8;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6, &v7);
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    return 0;
  }
  if (v8)
    return bswap32(*(_DWORD *)v8);
  else
    return bswap64(v9[3] | ((unint64_t)*v9 << 32));
}

void llvm::object::XCOFFObjectFile::getSymbolType(llvm::object::XCOFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  void *v7;
  const void *v8;
  size_t v9;
  BOOL v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];
  _BYTE *v15;
  size_t v16;
  char v17;
  _BYTE *v18;
  char v19;
  _BYTE *v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14[0] = a2;
  v14[1] = a1;
  llvm::object::XCOFFSymbolRef::isFunction((llvm::object::XCOFFSymbolRef *)v14, (BOOL *)&v20);
  if ((v21 & 1) != 0)
  {
    v6 = v20;
    v20 = 0;
  }
  else
  {
    if ((_BYTE)v20)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 5;
      return;
    }
    (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)a1 + 64))(a1);
    if (*(_BYTE *)(a2 + 16) == 103)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 4;
      return;
    }
    (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)a1 + 64))(a1);
    if ((int)bswap32(*(unsigned __int16 *)(a2 + 12)) >> 16 <= 0)
      goto LABEL_25;
    (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)a1 + 64))(a1);
    llvm::object::XCOFFObjectFile::getSectionByNum(a1, (int)bswap32(*(unsigned __int16 *)(a2 + 12)) >> 16, (uint64_t)&v18);
    if ((v19 & 1) != 0)
    {
      v6 = v18;
    }
    else
    {
      v7 = v18;
      llvm::object::XCOFFSymbolRef::getName((llvm::object::XCOFFSymbolRef *)v14, (uint64_t)&v15);
      if ((v17 & 1) == 0)
      {
        v8 = v15;
        v9 = v16;
        if (v16 != 3 || (*(_WORD *)v15 == 20308 ? (v10 = v15[2] == 67) : (v10 = 0), !v10))
        {
          (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)a1 + 64))(a1);
          v11 = memchr(v7, 0, 8uLL);
          v12 = v11 - (_BYTE *)v7;
          if (!v11)
            v12 = 8;
          if (v12 != v9 || v9 && memcmp(v7, v8, v9))
          {
            if (((*(uint64_t (**)(llvm::object::XCOFFObjectFile *, void *))(*(_QWORD *)a1 + 208))(a1, v7) & 1) != 0
              || (*(unsigned int (**)(llvm::object::XCOFFObjectFile *, void *))(*(_QWORD *)a1 + 216))(a1, v7))
            {
              *(_BYTE *)(a3 + 8) &= ~1u;
              *(_DWORD *)a3 = 2;
              return;
            }
            v13 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *, void *))(*(_QWORD *)a1 + 264))(a1, v7);
            *(_BYTE *)(a3 + 8) &= ~1u;
            if (v13)
            {
              *(_DWORD *)a3 = 3;
              return;
            }
LABEL_26:
            *(_DWORD *)a3 = 1;
            return;
          }
        }
LABEL_25:
        *(_BYTE *)(a3 + 8) &= ~1u;
        goto LABEL_26;
      }
      v6 = v15;
    }
  }
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v6;
}

void llvm::object::XCOFFSymbolRef::isFunction(llvm::object::XCOFFSymbolRef *this@<X0>, BOOL *a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v4 = *(unsigned __int8 *)(*(_QWORD *)this + 16);
  if (v4 != 2 && v4 != 107 && v4 != 111)
    goto LABEL_12;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(_WORD *)(*(_QWORD *)this + 14) & 0x2000) != 0)
  {
    a2[8] &= ~1u;
    *a2 = 1;
    return;
  }
  llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef(this, (uint64_t)&v13);
  v5 = v13;
  if ((v15 & 1) != 0)
    goto LABEL_18;
  if (v13)
  {
    if ((*(_BYTE *)(v13 + 10) & 7) != 2)
      goto LABEL_12;
  }
  else
  {
    v5 = v14;
    if ((*(_BYTE *)(v14 + 10) & 7) != 2)
    {
LABEL_12:
      a2[8] &= ~1u;
      *a2 = 0;
      return;
    }
  }
  if (*(_BYTE *)(v5 + 11))
    goto LABEL_12;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  llvm::object::XCOFFObjectFile::getSectionByNum(*((llvm::object::XCOFFObjectFile **)this + 1), (int)bswap32(*(unsigned __int16 *)(*(_QWORD *)this + 12)) >> 16, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v5 = v11;
LABEL_18:
    a2[8] |= 1u;
    *(_QWORD *)a2 = v5;
    return;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = v11;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v9 = 36;
  if (v8)
    v9 = 64;
  v10 = *(_DWORD *)(v7 + v9);
  a2[8] &= ~1u;
  *a2 = (v10 & 0x20000000) != 0;
}

void llvm::object::XCOFFObjectFile::getSectionByNum(llvm::object::XCOFFObjectFile *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  llvm::object::XCOFFObjectFile *v6;
  _UNKNOWN **v7;
  std::error_code v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  std::string v17;

  v5 = a2 - 1;
  if (a2 >= 1
    && (v6 = this,
        this = (llvm::object::XCOFFObjectFile *)(*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this),
        a2 <= (int)(bswap32(*(unsigned __int16 *)(*((_QWORD *)v6 + 6) + 2)) >> 16)))
  {
    v9 = *((_QWORD *)v6 + 8);
    v10 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)v6 + 64))(v6);
    v11 = 40;
    if (v10)
      v11 = 72;
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v9 + v11 * (unint64_t)v5;
  }
  else
  {
    v7 = llvm::object::object_category(this);
    v12[0] = "the section index (";
    v12[2] = a2;
    v13 = 2563;
    v14[0] = v12;
    v14[2] = ") is invalid";
    v15 = 770;
    llvm::Twine::str((llvm::Twine *)v14, &v17);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8.__cat_ = (const std::error_category *)&v17;
    else
      v8.__cat_ = (const std::error_category *)v17.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v8.__val_ = v7;
    llvm::createStringError((llvm *)6, v8, &v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v16;
  }
}

void llvm::object::XCOFFObjectFile::getSymbolSection(llvm::object::XCOFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)a1 + 64))(a1);
  v6 = bswap32(*(unsigned __int16 *)(a2 + 12)) >> 16;
  if ((unsigned __int16)(v6 + 2) > 2u)
  {
    llvm::object::XCOFFObjectFile::getSectionByNum(a1, (__int16)v6, (uint64_t)&v11);
    v9 = *(_BYTE *)(a3 + 16);
    v10 = v11;
    if ((v12 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) = v9 | 1;
    }
    else
    {
      *(_BYTE *)(a3 + 16) = v9 & 0xFE;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v10;
  }
  else
  {
    v7 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
  }
}

uint64_t llvm::object::XCOFFObjectFile::moveSectionNext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = 40;
  if ((_DWORD)result)
    v5 = 72;
  *a2 = v3 + v5;
  return result;
}

_BYTE *llvm::object::XCOFFObjectFile::getSectionName@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *result;
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  result = memchr(a2, 0, 8uLL);
  v6 = result - (_BYTE *)a2;
  *(_BYTE *)(a3 + 16) &= ~1u;
  if (!result)
    v6 = 8;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return bswap64(*(_QWORD *)(a2 + 16));
  else
    return bswap32(*(_DWORD *)(a2 + 12));
}

uint64_t llvm::object::XCOFFObjectFile::getSectionIndex(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v5 = 40;
  if (v4)
    v5 = 72;
  return (a2 - a1[8]) / v5 + 1;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionSize(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return bswap64(*(_QWORD *)(a2 + 24));
  else
    return bswap32(*(_DWORD *)(a2 + 16));
}

llvm::object *llvm::object::XCOFFObjectFile::getSectionContents@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object *result;
  unint64_t v7;
  unint64_t v8;
  llvm::object *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  int64x2_t v13;
  int8x16_t v14;
  std::string *v15;
  std::string::size_type v16;
  llvm::object *v17;
  _UNKNOWN **v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD *v32;
  llvm::object *v33;
  unint64_t v34;
  std::error_code v35;

  result = (llvm::object *)(*(uint64_t (**)(_QWORD *))(*a1 + 224))(a1);
  if ((_DWORD)result)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) &= ~1u;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
    v7 = bswap64(*(_QWORD *)(a2 + 32));
  else
    v7 = bswap32(*(_DWORD *)(a2 + 20));
  v34 = v7;
  v8 = a1[2] + v7;
  result = (llvm::object *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 168))(a1, a2);
  v9 = result;
  v33 = result;
  v10 = (char *)result + v8;
  if (!__CFADD__(result, v8)
    && v10 >= (char *)result
    && ((v11 = a1[2], v11 <= v8) ? (v12 = (unint64_t)v10 > v11 + a1[3]) : (v12 = 1), !v12)
    || (*(_QWORD *)&v35.__val_ = llvm::object::object_category(result),
        result = (llvm::object *)llvm::errorCodeToError((llvm *)4, v35, &v32),
        !v32))
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v9;
    return result;
  }
  v20 = v32;
  v32 = 0;
  llvm::toString(&v20, &v21, v13, v14);
  v15 = std::string::append(&v21, ": section data with offset 0x");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v23 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v24[0] = __p;
  v24[2] = &v34;
  v25 = 3844;
  v26[0] = v24;
  v26[2] = " and size 0x";
  v27 = 770;
  v28[0] = v26;
  v28[2] = &v33;
  v29 = 3842;
  v30[0] = v28;
  v30[2] = " goes past the end of the file";
  v31 = 770;
  v17 = (llvm::object *)operator new(0x38uLL);
  v18 = llvm::object::object_category(v17);
  llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v30, 3, (uint64_t)v18);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v17;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      v19 = v20;
      if (!v20)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  v19 = v20;
  if (v20)
LABEL_18:
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
LABEL_19:
  result = (llvm::object *)v32;
  if (v32)
    return (llvm::object *)(*(uint64_t (**)(_QWORD *))(*v32 + 8))(v32);
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 36;
  if (v3)
    v4 = 64;
  return (*(unsigned __int8 *)(a2 + v4 + 3) >> 5) & 1;
}

BOOL llvm::object::XCOFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 36;
  if (v3)
    v4 = 64;
  return (*(_WORD *)(a2 + v4 + 2) & 0x4004) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 36;
  if (v3)
    v4 = 64;
  return (*(_WORD *)(a2 + v4 + 2) & 0x8008) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isDebugSection(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 36;
  if (v3)
    v4 = 64;
  return (*(_WORD *)(a2 + v4 + 2) & 0x1020) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return *(_QWORD *)(a2 + 32) == 0;
  else
    return *(_DWORD *)(a2 + 20) == 0;
}

_QWORD *llvm::object::XCOFFObjectFile::section_rel_begin(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>(a1, a2, (uint64_t)v8);
    result = (_QWORD *)v8[0];
    if ((v9 & 1) == 0)
      return result;
  }
  else
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>(a1, a2, (uint64_t)v8);
    result = (_QWORD *)v8[0];
    if ((v9 & 1) == 0)
      return result;
  }
  v8[0] = 0;
  if (result)
  {
    v6 = result;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6, &v7);
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    if ((v9 & 1) != 0)
    {
      v5 = v8[0];
      v8[0] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    return 0;
  }
  return result;
}

char *llvm::object::XCOFFObjectFile::section_rel_end(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>(a1, a2, (uint64_t)&v11);
    v4 = v11;
    if ((v13 & 1) == 0 || (v11 = 0, !v4))
    {
      v5 = v12;
      v6 = 14;
      return (char *)v4 + v5 * v6;
    }
  }
  else
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>(a1, a2, (uint64_t)&v11);
    v4 = v11;
    if ((v13 & 1) == 0 || (v11 = 0, !v4))
    {
      v5 = v12;
      v6 = 10;
      return (char *)v4 + v5 * v6;
    }
  }
  v9 = v4;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v9, &v10);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  if ((v13 & 1) != 0)
  {
    v7 = v11;
    v11 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::moveRelocationNext(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 10;
  if ((_DWORD)result)
    v4 = 14;
  *a2 += v4;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationOffset(_QWORD *a1, unint64_t *a2)
{
  int v4;
  uint64_t v5;
  void (*v6)(_QWORD *);
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t *i;
  unint64_t v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *j;
  unsigned int v23;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v5 = a1[8];
  v6 = *(void (**)(_QWORD *))(*a1 + 64);
  if (v4)
  {
    v7 = *a2;
    v6(a1);
    v8 = a1[6];
    v9 = *(unsigned __int16 *)(v8 + 2);
    if (*(_WORD *)(v8 + 2))
    {
      v10 = 0;
      v11 = bswap64(v7);
      v12 = __rev16(v9);
      for (i = (unint64_t *)(v5 + 24); ; i += 9)
      {
        v14 = bswap64(*(i - 1));
        result = v11 - v14;
        if (v11 >= v14 && v11 < bswap64(*i) + v14)
          break;
        if (v12 <= (unsigned __int16)++v10)
          return -1;
      }
      return result;
    }
    return -1;
  }
  v16 = *(_DWORD *)a2;
  v6(a1);
  v17 = a1[6];
  v18 = *(unsigned __int16 *)(v17 + 2);
  if (!*(_WORD *)(v17 + 2))
    return -1;
  v19 = 0;
  v20 = bswap32(v16);
  v21 = __rev16(v18);
  for (j = (unsigned int *)(v5 + 16); ; j += 10)
  {
    v23 = bswap32(*(j - 1));
    result = v20 - v23;
    if (v20 >= v23 && v20 < bswap32(*j) + v23)
      break;
    if (v21 <= (unsigned __int16)++v19)
      return -1;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  int v6;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    v4 = bswap32(*(_DWORD *)(a2 + 8));
    if (v4 >= bswap32(*(_DWORD *)(a1[6] + 20)))
      return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  }
  else
  {
    v4 = bswap32(*(_DWORD *)(a2 + 4));
    v6 = bswap32(*(_DWORD *)(a1[6] + 12));
    if (v4 >= (v6 & ~(v6 >> 31)))
      return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  }
  return a1[9] + 18 * v4;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 9;
  if (v3)
    v4 = 13;
  return *(unsigned __int8 *)(a2 + v4);
}

void llvm::object::XCOFFObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  size_t v7;
  const char *RelocationTypeString;
  size_t v9;
  uint64_t v10;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = 9;
  if (v5)
    v6 = 13;
  RelocationTypeString = llvm::XCOFF::getRelocationTypeString(*(unsigned __int8 *)(a2 + v6));
  v9 = v7;
  v10 = a3[1];
  if (a3[2] < v7 + v10)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v7 + v10, 1);
    v10 = a3[1];
  }
  if (v9)
  {
    memcpy((void *)(*a3 + v10), RelocationTypeString, v9);
    v10 = a3[1];
  }
  a3[1] = v10 + v9;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolFlags@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD v18[2];
  _QWORD v19[2];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18[0] = a2;
  v18[1] = a1;
  (*(void (**)(_QWORD *))(*a1 + 64))(a1);
  v6 = 8 * (*(__int16 *)(a2 + 12) == -1);
  (*(void (**)(_QWORD *))(*a1 + 64))(a1);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 111)
    v8 = 6;
  else
    v8 = 2;
  v9 = v8 | v6;
  if (v7 == 111 || v7 == 2)
    v6 = v9;
  (*(void (**)(_QWORD *))(*a1 + 64))(a1);
  v11 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 2 || v11 == 111 || v11 == 107)
  {
    result = llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v18, (uint64_t)v19);
    v13 = v19[0];
    if ((v20 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v13;
      return result;
    }
    if (!v19[0])
      v13 = v19[1];
    if ((*(_BYTE *)(v13 + 10) & 7) == 3)
      v6 |= 0x10u;
  }
  (*(void (**)(_QWORD *))(*a1 + 64))(a1);
  v14 = v6 | (*(_WORD *)(a2 + 12) == 0);
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((result & 1) != 0 || (v15 = a1[7]) != 0 && *(_WORD *)(v15 + 2) == 512)
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
    v16 = (*(unsigned __int16 *)(a2 + 14) << 8) & 0x7000;
    v17 = v14 | 0x200;
    if (v16 != 0x2000)
      v17 = v14;
    if (v16 == 0x4000)
      v14 |= 0x40u;
    else
      v14 = v17;
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v14;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::symbol_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t llvm::object::XCOFFObjectFile::symbol_end(llvm::object::XCOFFObjectFile *this)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;

  v2 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this);
  v3 = *((_QWORD *)this + 6);
  if (v2)
  {
    v4 = bswap32(*(_DWORD *)(v3 + 20));
  }
  else
  {
    v5 = bswap32(*(_DWORD *)(v3 + 12));
    v4 = v5 & ~(v5 >> 31);
  }
  return *((_QWORD *)this + 9) + 18 * v4;
}

uint64_t llvm::object::XCOFFObjectFile::section_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t llvm::object::XCOFFObjectFile::section_end(llvm::object::XCOFFObjectFile *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;

  v2 = *((_QWORD *)this + 8);
  (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this);
  v3 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 6) + 2)) >> 16;
  v4 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this);
  v5 = 40;
  if (v4)
    v5 = 72;
  return v2 + v5 * (unint64_t)v3;
}

uint64_t llvm::object::XCOFFObjectFile::getBytesInAddress(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this))
    return 8;
  else
    return 4;
}

const char *llvm::object::XCOFFObjectFile::getFileFormatName(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this))
    return "aix5coff64-rs6000";
  else
    return "aixcoff-rs6000";
}

uint64_t llvm::object::XCOFFObjectFile::getArch(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this))
    return 23;
  else
    return 21;
}

double llvm::object::XCOFFObjectFile::getFeatures@<D0>(uint64_t a1@<X8>)
{
  double result;
  std::vector<std::string> v4;

  llvm::SubtargetFeatures::SubtargetFeatures(&v4, "", 0);
  *(_BYTE *)(a1 + 24) &= ~1u;
  result = *(double *)&v4.__begin_;
  *(std::vector<std::string> *)a1 = v4;
  return result;
}

BOOL llvm::object::XCOFFObjectFile::isRelocatableObject(llvm::object::XCOFFObjectFile *this)
{
  (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this);
  return (*(_WORD *)(*((_QWORD *)this + 6) + 18) & 0x100) == 0;
}

void llvm::object::XCOFFObjectFile::getStartAddress(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = 0;
}

const char *llvm::object::XCOFFObjectFile::mapDebugSectionName(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  const void *v3;

  v3 = a2;
  switch(a3)
  {
    case 5:
      if (!memcmp(a2, "dwstr", 5uLL))
      {
        return "debug_str";
      }
      else if (!memcmp(v3, "dwloc", 5uLL))
      {
        return "debug_loc";
      }
      else
      {
        if (!memcmp(v3, "dwmac", 5uLL))
          return "debug_macinfo";
        return (const char *)v3;
      }
    case 7:
      if (*a2 == 1651537764 && *(_DWORD *)((char *)a2 + 3) == 1936551522)
      {
        return "debug_pubnames";
      }
      else if (*a2 == 1651537764 && *(_DWORD *)((char *)a2 + 3) == 1887007842)
      {
        return "debug_pubtypes";
      }
      else if (*a2 == 1918990180 && *(_DWORD *)((char *)a2 + 3) == 1701277298)
      {
        return "debug_aranges";
      }
      else if (*a2 == 1650554724 && *(_DWORD *)((char *)a2 + 3) == 1986359906)
      {
        return "debug_abbrev";
      }
      else if (*a2 == 1852995428 && *(_DWORD *)((char *)a2 + 3) == 1936025454)
      {
        return "debug_ranges";
      }
      else if (*a2 == 1919317860 && *(_DWORD *)((char *)a2 + 3) == 1701667186)
      {
        return "debug_frame";
      }
      else
      {
        return (const char *)a2;
      }
    case 6:
      if (*a2 == 1852405604 && *((_WORD *)a2 + 2) == 28518)
      {
        return "debug_info";
      }
      else
      {
        if (*a2 != 1768716132 || *((_WORD *)a2 + 2) != 25966)
          return (const char *)a2;
        return "debug_line";
      }
    default:
      return (const char *)a2;
  }
}

BOOL llvm::object::XCOFFObjectFile::is64Bit(llvm::object::XCOFFObjectFile *this)
{
  return *((_DWORD *)this + 2) == 12;
}

_QWORD *llvm::object::XCOFFObjectFile::parseStringTable@<X0>(_QWORD *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  int64x2_t v11;
  int8x16_t v12;
  std::string *v13;
  std::string::size_type v14;
  llvm::object *v15;
  _UNKNOWN **v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD *v27[4];
  __int16 v28;
  uint64_t v29[4];
  __int16 v30;
  unint64_t v31;
  std::error_code v32;
  std::error_code v33;
  std::error_code v34;

  v4 = this;
  v31 = a2;
  v6 = this[2];
  if (v6 + a2 > 0xFFFFFFFFFFFFFFFBLL || (a2 & 0x8000000000000000) != 0 || v6 + a2 + 4 > v6 + this[3])
  {
    *(_QWORD *)&v32.__val_ = llvm::object::object_category((llvm::object *)this);
    this = llvm::errorCodeToError((llvm *)4, v32, v25);
    v7 = (_QWORD *)v25[0];
    if (v25[0])
    {
      v25[0] = 0;
      v27[0] = v7;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(v27, v29);
      if (v27[0])
        (*(void (**)(_QWORD *))(*v27[0] + 8))(v27[0]);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      this = (_QWORD *)v25[0];
      if (v25[0])
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      return this;
    }
    v6 = v4[2];
    v8 = (char *)(v6 + a2);
    v9 = bswap32(*(_DWORD *)(v6 + a2));
    if (v9 <= 4)
      goto LABEL_10;
  }
  else
  {
    v8 = (char *)(v6 + a2);
    v9 = bswap32(*(_DWORD *)(v6 + a2));
    if (v9 <= 4)
    {
LABEL_10:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_DWORD *)a3 = 4;
      *(_QWORD *)(a3 + 8) = 0;
      return this;
    }
  }
  v10 = &v8[v9];
  if (__CFADD__(v9, v8)
    || (unint64_t)v10 < v9
    || (a2 & 0x8000000000000000) != 0
    || (unint64_t)v10 > v6 + v4[3])
  {
    *(_QWORD *)&v33.__val_ = llvm::object::object_category((llvm::object *)this);
    this = llvm::errorCodeToError((llvm *)4, v33, v29);
    if (v29[0])
    {
      v19 = (_QWORD *)v29[0];
      llvm::toString(&v19, &v20, v11, v12);
      v13 = std::string::append(&v20, ": string table with offset 0x");
      v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v22 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v23[0] = __p;
      v23[2] = &v31;
      v24 = 3844;
      v25[0] = v23;
      v25[2] = " and size 0x";
      v26 = 770;
      v18 = v9;
      v27[0] = v25;
      v27[2] = &v18;
      v28 = 3842;
      v29[0] = (uint64_t)v27;
      v29[2] = (uint64_t)" goes past the end of the file";
      v30 = 770;
      v15 = (llvm::object *)operator new(0x38uLL);
      v16 = llvm::object::object_category(v15);
      llvm::StringError::StringError((uint64_t)v15, (llvm::Twine *)v29, 3, (uint64_t)v16);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v15;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          this = v19;
          if (!v19)
            return this;
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        }
      }
      else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(v20.__r_.__value_.__l.__data_);
      this = v19;
      if (!v19)
        return this;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  if (v8[(v9 - 1)])
  {
    *(_QWORD *)&v34.__val_ = llvm::object::object_category((llvm::object *)this);
    this = llvm::errorCodeToError((llvm *)5, v34, &v17);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_DWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v8;
  }
  return this;
}

_QWORD *llvm::object::XCOFFObjectFile::create@<X0>(int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  void (***v6)(llvm::object::XCOFFObjectFile *__hidden);
  __int128 v7;
  uint64_t v8;
  void (**v9)(llvm::object::XCOFFObjectFile *__hidden);
  void (**v10)(llvm::object::XCOFFObjectFile *__hidden);
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  llvm::object *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  llvm::object *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  int64x2_t v26;
  int8x16_t v27;
  std::string *v28;
  std::string::size_type v29;
  llvm::object *v30;
  _UNKNOWN **v31;
  _QWORD *v32;
  _QWORD *result;
  void (**v34)(llvm::object::XCOFFObjectFile *__hidden);
  unsigned int v35;
  int v36;
  llvm::object *v37;
  void (**v38)(llvm::object::XCOFFObjectFile *__hidden);
  unint64_t v39;
  unint64_t v40;
  void (**v41)(llvm::object::XCOFFObjectFile *__hidden);
  unint64_t v42;
  int64x2_t v43;
  int8x16_t v44;
  std::string *v45;
  std::string::size_type v46;
  llvm::object *v47;
  _UNKNOWN **v48;
  _QWORD *v49;
  _QWORD *v50;
  std::string v51;
  void *__p[2];
  std::string::size_type v53;
  _QWORD v54[2];
  unint64_t *v55;
  __int16 v56;
  _QWORD v57[2];
  const char *v58;
  __int16 v59;
  _QWORD v60[2];
  unint64_t *v61;
  __int16 v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int16 v67;
  uint64_t v68;
  std::error_code v69;
  std::error_code v70;
  std::error_code v71;
  std::error_code v72;

  v68 = *MEMORY[0x1E0C80C00];
  v6 = (void (***)(llvm::object::XCOFFObjectFile *__hidden))operator new(0x60uLL);
  v7 = a2[1];
  v65 = *a2;
  v66 = v7;
  llvm::object::ObjectFile::ObjectFile((uint64_t)v6, a1, &v65);
  v9 = off_1E0E251F8;
  *(_QWORD *)v8 = off_1E0E251F8;
  *(_QWORD *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_DWORD *)(v8 + 80) = 0;
  v64 = 0;
  v10 = *(void (***)(llvm::object::XCOFFObjectFile *__hidden))(v8 + 16);
  v11 = 20;
  if (*(_DWORD *)(v8 + 8) == 12)
    v11 = 24;
  v12 = (unint64_t)v10 + *(_QWORD *)(v8 + 24);
  v13 = (unint64_t)v10 + v11;
  if (__CFADD__(v11, v10) || (v13 >= v11 ? (v14 = v13 > v12) : (v14 = 1), v14))
  {
    *(_QWORD *)&v69.__val_ = llvm::object::object_category((llvm::object *)v8);
    llvm::errorCodeToError((llvm *)4, v69, &v65);
    v15 = v65;
    if ((_QWORD)v65)
      goto LABEL_19;
    v9 = *v6;
  }
  v6[6] = v10;
  v16 = ((uint64_t (*)(_QWORD *))v9[8])(v6);
  v17 = 20;
  if (v16)
    v17 = 24;
  v64 += v17;
  (*v6)[8]((llvm::object::XCOFFObjectFile *)v6);
  if (*((_WORD *)v6[6] + 8))
  {
    v18 = (llvm::object *)((uint64_t (*)(_QWORD *))(*v6)[8])(v6);
    v19 = bswap32(*((unsigned __int16 *)v6[6] + 8)) >> 16;
    v20 = (unint64_t)v10 + v64 + v19;
    if (__CFADD__(v19, (char *)v10 + v64) || v20 < v19 || (v64 & 0x8000000000000000) != 0 || v20 > v12)
    {
      *(_QWORD *)&v70.__val_ = llvm::object::object_category(v18);
      llvm::errorCodeToError((llvm *)4, v70, &v65);
      v15 = v65;
      if ((_QWORD)v65)
        goto LABEL_19;
    }
    v6[7] = (void (**)(llvm::object::XCOFFObjectFile *__hidden))((char *)v10 + v64);
  }
  (*v6)[8]((llvm::object::XCOFFObjectFile *)v6);
  v64 += bswap32(*((unsigned __int16 *)v6[6] + 8)) >> 16;
  (*v6)[8]((llvm::object::XCOFFObjectFile *)v6);
  if (*((_WORD *)v6[6] + 1))
  {
    (*v6)[8]((llvm::object::XCOFFObjectFile *)v6);
    v21 = bswap32(*((unsigned __int16 *)v6[6] + 1)) >> 16;
    v22 = (llvm::object *)((uint64_t (*)(_QWORD *))(*v6)[8])(v6);
    v23 = 40;
    if ((_DWORD)v22)
      v23 = 72;
    v24 = v23 * (unint64_t)v21;
    v63 = v24;
    v25 = (unint64_t)v10 + v64 + v24;
    if (__CFADD__(v24, (char *)v10 + v64) || v25 < v24 || (v64 & 0x8000000000000000) != 0 || v25 > v12)
    {
      *(_QWORD *)&v71.__val_ = llvm::object::object_category(v22);
      llvm::errorCodeToError((llvm *)4, v71, &v65);
      if ((_QWORD)v65)
      {
        v50 = (_QWORD *)v65;
        llvm::toString(&v50, &v51, v26, v27);
        v28 = std::string::append(&v51, ": section headers with offset 0x");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v53 = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v54[0] = __p;
        v55 = &v64;
        v56 = 3844;
        v57[0] = v54;
        v58 = " and size 0x";
        v59 = 770;
        v60[0] = v57;
        v61 = &v63;
        v62 = 3842;
        *(_QWORD *)&v65 = v60;
        *(_QWORD *)&v66 = " go past the end of the file";
        v67 = 770;
        v30 = (llvm::object *)operator new(0x38uLL);
        v31 = llvm::object::object_category(v30);
        llvm::StringError::StringError((uint64_t)v30, (llvm::Twine *)&v65, 3, (uint64_t)v31);
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v30;
        if (SHIBYTE(v53) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_31:
            v32 = v50;
            if (!v50)
              return (_QWORD *)((uint64_t (*)(_QWORD *))(*v6)[1])(v6);
LABEL_32:
            (*(void (**)(_QWORD *))(*v32 + 8))(v32);
            return (_QWORD *)((uint64_t (*)(_QWORD *))(*v6)[1])(v6);
          }
        }
        else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_31;
        }
        operator delete(v51.__r_.__value_.__l.__data_);
        v32 = v50;
        if (!v50)
          return (_QWORD *)((uint64_t (*)(_QWORD *))(*v6)[1])(v6);
        goto LABEL_32;
      }
    }
    v6[8] = (void (**)(llvm::object::XCOFFObjectFile *__hidden))((char *)v10 + v64);
  }
  result = (_QWORD *)((uint64_t (*)(_QWORD *))(*v6)[8])(v6);
  v34 = v6[6];
  if ((_DWORD)result)
  {
    v35 = bswap32(*((_DWORD *)v34 + 5));
    if (!v35)
      goto LABEL_56;
LABEL_39:
    v37 = (llvm::object *)((uint64_t (*)(_QWORD *))(*v6)[8])(v6);
    v38 = v6[6];
    if ((_DWORD)v37)
    {
      v39 = bswap64((unint64_t)v38[1]);
      v40 = 18 * v35;
      v63 = v40;
      v64 = v39;
      v41 = (void (**)(llvm::object::XCOFFObjectFile *__hidden))((char *)v10 + v39);
      v42 = (unint64_t)v41 + v40;
      if (!__CFADD__(v40, v41))
        goto LABEL_44;
    }
    else
    {
      v39 = bswap32(*((_DWORD *)v38 + 2));
      v40 = 18 * v35;
      v63 = v40;
      v64 = v39;
      v41 = (void (**)(llvm::object::XCOFFObjectFile *__hidden))((char *)v10 + v39);
      v42 = (unint64_t)v41 + v40;
      if (!__CFADD__(v40, v41))
      {
LABEL_44:
        if (v42 >= v40 && (v39 & 0x8000000000000000) == 0 && v42 <= v12)
          goto LABEL_53;
      }
    }
    *(_QWORD *)&v72.__val_ = llvm::object::object_category(v37);
    llvm::errorCodeToError((llvm *)4, v72, &v65);
    if ((_QWORD)v65)
    {
      v49 = (_QWORD *)v65;
      llvm::toString(&v49, &v51, v43, v44);
      v45 = std::string::append(&v51, ": symbol table with offset 0x");
      v46 = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v53 = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v54[0] = __p;
      v55 = &v64;
      v56 = 3844;
      v57[0] = v54;
      v58 = " and size 0x";
      v59 = 770;
      v60[0] = v57;
      v61 = &v63;
      v62 = 3842;
      *(_QWORD *)&v65 = v60;
      *(_QWORD *)&v66 = " goes past the end of the file";
      v67 = 770;
      v47 = (llvm::object *)operator new(0x38uLL);
      v48 = llvm::object::object_category(v47);
      llvm::StringError::StringError((uint64_t)v47, (llvm::Twine *)&v65, 3, (uint64_t)v48);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v47;
      if (SHIBYTE(v53) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_50:
          v32 = v49;
          if (!v49)
            return (_QWORD *)((uint64_t (*)(_QWORD *))(*v6)[1])(v6);
          goto LABEL_32;
        }
      }
      else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_50;
      }
      operator delete(v51.__r_.__value_.__l.__data_);
      v32 = v49;
      if (!v49)
        return (_QWORD *)((uint64_t (*)(_QWORD *))(*v6)[1])(v6);
      goto LABEL_32;
    }
    v39 = v64;
LABEL_53:
    v6[9] = v41;
    v64 = v39 + v40;
    result = llvm::object::XCOFFObjectFile::parseStringTable(v6, v39 + v40, (uint64_t)&v65);
    if ((v66 & 1) == 0 || (v15 = v65, *(_QWORD *)&v65 = 0, !v15))
    {
      *((_OWORD *)v6 + 5) = v65;
      goto LABEL_56;
    }
LABEL_19:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v15;
    return (_QWORD *)((uint64_t (*)(_QWORD *))(*v6)[1])(v6);
  }
  v36 = bswap32(*((_DWORD *)v34 + 3));
  v35 = v36 & ~(v36 >> 31);
  if (v35)
    goto LABEL_39;
LABEL_56:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
  return result;
}

_QWORD *llvm::object::ObjectFile::createXCOFFObjectFile@<X0>(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  _QWORD *result;
  __int128 v6[2];
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  result = llvm::object::XCOFFObjectFile::create(a2, v6, (uint64_t)&v7);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v8 & 1;
  *(_QWORD *)a3 = v7;
  return result;
}

void llvm::object::XCOFFObjectFile::tryGetCPUName(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "future";
  *(_QWORD *)(a1 + 8) = 6;
  *(_BYTE *)(a1 + 16) = 1;
}

void llvm::object::XCOFFObjectFile::~XCOFFObjectFile(llvm::object::XCOFFObjectFile *this)
{
  void *v1;

  llvm::object::SymbolicFile::~SymbolicFile(this);
  operator delete(v1);
}

uint64_t llvm::MCAssembler::isThumbFunc(llvm::MCAssembler *this, const llvm::MCSymbol *a2)
{
  uint64_t v4;
  llvm::SmallPtrSetImplBase *v5;
  const void **BucketFor;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v4 = *((_QWORD *)this + 24);
  v5 = (llvm::MCAssembler *)((char *)this + 184);
  if (v4 == *((_QWORD *)this + 23))
  {
    v9 = *((unsigned int *)this + 51);
    BucketFor = (const void **)(v4 + 8 * v9);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = 8 * v9;
      while (*(const llvm::MCSymbol **)(v4 + v10) != a2)
      {
        v10 += 8;
        if (v11 == v10)
          goto LABEL_12;
      }
      BucketFor = (const void **)(v4 + v10);
    }
LABEL_12:
    v7 = v4;
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::MCAssembler *)((char *)this + 184), a2);
    v4 = *((_QWORD *)this + 23);
    v7 = *((_QWORD *)this + 24);
    if (*BucketFor != a2)
    {
      v8 = 200;
      if (v7 == v4)
        v8 = 204;
      BucketFor = (const void **)(v7 + 8 * *(unsigned int *)((char *)this + v8));
    }
  }
  v12 = v7 == v4;
  v13 = 200;
  if (v12)
    v13 = 204;
  if (BucketFor != (const void **)(v7 + 8 * *(unsigned int *)((char *)this + v13)))
    return 1;
  if ((*((_DWORD *)a2 + 2) & 0x7000) != 0x2000)
    return 0;
  *((_DWORD *)a2 + 2) |= 8u;
  v15 = *((_QWORD *)a2 + 3);
  v18 = 0;
  v19 = 0;
  v21 = 0;
  v20 = 0;
  v16 = llvm::MCExpr::evaluateAsRelocatable(v15, (uint64_t)&v18, 0, 0);
  result = 0;
  if (v16 && !v19 && !v21)
  {
    if (!v18 || *(_WORD *)(v18 + 1))
      return 0;
    result = llvm::MCAssembler::isThumbFunc(this, *(const llvm::MCSymbol **)(v18 + 16));
    if ((_DWORD)result)
    {
      llvm::SmallPtrSetImpl<llvm::MCSymbol const*>::insert(v5, a2, (uint64_t)v17);
      return 1;
    }
  }
  return result;
}

const void **llvm::SmallPtrSetImpl<llvm::MCSymbol const*>::insert@<X0>(llvm::SmallPtrSetImplBase *this@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void **result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *((_QWORD *)this + 1);
  if (v5 != *(_QWORD *)this)
    goto LABEL_2;
  v11 = *((unsigned int *)this + 5);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 8 * v11;
    result = (const void **)*((_QWORD *)this + 1);
    do
    {
      if (*result == a2)
      {
        v7 = 0;
        goto LABEL_3;
      }
      if (*result == (const void *)-2)
        v12 = result;
      ++result;
      v13 -= 8;
    }
    while (v13);
    if (!v12)
      goto LABEL_18;
    *v12 = a2;
    --*((_DWORD *)this + 6);
    v7 = 1;
    result = v12;
  }
  else
  {
LABEL_18:
    if (v11 >= *((_DWORD *)this + 4))
    {
LABEL_2:
      result = llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
      goto LABEL_3;
    }
    *((_DWORD *)this + 5) = v11 + 1;
    v14 = 8 * v11;
    *(_QWORD *)(v5 + v14) = a2;
    result = (const void **)(*(_QWORD *)this + v14);
    v7 = 1;
  }
LABEL_3:
  v8 = *((_QWORD *)this + 1);
  v9 = 16;
  if (v8 == *(_QWORD *)this)
    v9 = 20;
  v10 = (const void **)(v8 + 8 * *(unsigned int *)((char *)this + v9));
  if (v10 != result)
  {
    while ((unint64_t)*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v10)
      {
        result = v10;
        break;
      }
    }
  }
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v7;
  return result;
}

BOOL llvm::MCSymbol::isUndefined(llvm::MCSymbol *this, int a2)
{
  int v4;
  int v5;
  void *AssociatedFragment;

  if (*(_QWORD *)this)
    return 0;
  v4 = *((_DWORD *)this + 2);
  if ((v4 & 0x7080) != 0x2000)
    return 1;
  if (a2 | ((v4 & 8) >> 3))
    v5 = 8;
  else
    v5 = 0;
  *((_DWORD *)this + 2) = v5 | v4 & 0xFFFFFFF7;
  AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)this + 3));
  *(_QWORD *)this = AssociatedFragment;
  return AssociatedFragment == 0;
}

void llvm::MCAssembler::computeFragmentSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_180C2259C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t sub_180C225B8()
{
  uint64_t v0;
  uint64_t v1;
  llvm::MCAsmLayout *v2;
  uint64_t v3;
  int FragmentOffset;
  unsigned int v5;
  char v6;
  unsigned int v7;

  FragmentOffset = llvm::MCAsmLayout::getFragmentOffset(v2, (const llvm::MCFragment *)v0);
  v5 = ((FragmentOffset + (1 << *(_BYTE *)(v0 + 52)) - 1) & -(int)(1 << *(_BYTE *)(v0 + 52))) - FragmentOffset;
  *(_DWORD *)(v3 - 88) = v5;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v0 + 16) + 8))(*(_QWORD *)(v0 + 16))
    || (*(_BYTE *)(v0 + 53) & 1) == 0
    || (v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 8) + 96))(*(_QWORD *)(v1 + 8), v0, v3 - 88), v5 = *(_DWORD *)(v3 - 88), (v6 & 1) == 0))
  {
    if (v5
      && (*(_BYTE *)(v0 + 53) & 1) != 0
      && v5 % (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 192))(*(_QWORD *)(v1 + 8)))
    {
      do
      {
        v7 = *(_DWORD *)(v3 - 88) + (1 << *(_BYTE *)(v0 + 52));
        *(_DWORD *)(v3 - 88) = v7;
      }
      while (v7 % (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 192))(*(_QWORD *)(v1 + 8)));
    }
    if (*(_DWORD *)(v3 - 88) <= *(_DWORD *)(v0 + 68))
      return *(unsigned int *)(v3 - 88);
    else
      return 0;
  }
  return v5;
}

uint64_t sub_180C226AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  *(_QWORD *)(v2 - 176) = 0;
  if (llvm::MCExpr::evaluateKnownAbsolute(*(_QWORD *)(v0 + 64), (_QWORD *)(v2 - 176)))
  {
    if (((*(_QWORD *)(v2 - 176) * *(unsigned __int8 *)(v0 + 52)) & 0x8000000000000000) == 0)
      JUMPOUT(0x180C225A0);
    v3 = *v1;
    v4 = *(_QWORD *)(v0 + 72);
    v5 = "invalid number of bytes";
  }
  else
  {
    v3 = *v1;
    v4 = *(_QWORD *)(v0 + 72);
    v5 = "expected assembly-time absolute expression";
  }
  *(_QWORD *)(v2 - 88) = v5;
  *(_WORD *)(v2 - 56) = 259;
  llvm::MCContext::reportError(v3, v4, v2 - 88);
  return 0;
}

unint64_t llvm::MCAsmLayout::layoutFragment(llvm::MCAsmLayout *this, llvm::MCFragment *a2)
{
  uint64_t v4;
  llvm::MCFragment *v5;
  uint64_t v6;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t result;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;

  v4 = *((_QWORD *)a2 + 2);
  v5 = *(llvm::MCFragment **)(v4 + 112);
  v6 = *(_QWORD *)a2;
  *((_BYTE *)a2 + 49) = 1;
  if (v5 == a2 || v6 == 0)
  {
    *((_QWORD *)a2 + 4) = 0;
    *((_BYTE *)a2 + 49) = 0;
    v8 = (char *)this + 152;
    v9 = *((_QWORD *)this + 19);
    v10 = *((_DWORD *)this + 42);
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v19 = *(_QWORD *)(v6 + 32);
    llvm::MCAssembler::computeFragmentSize(*(_QWORD *)this, (uint64_t)this, v6);
    v21 = v20 + v19;
    v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 4) = v21;
    *((_BYTE *)a2 + 49) = 0;
    v8 = (char *)this + 152;
    v9 = *((_QWORD *)this + 19);
    v10 = *((_DWORD *)this + 42);
    if (!v10)
    {
LABEL_18:
      v13 = 0;
      v22 = *((_DWORD *)this + 40);
      if (4 * v22 + 4 < 3 * v10)
        goto LABEL_19;
      goto LABEL_33;
    }
  }
  v11 = v10 - 1;
  v12 = ((v4 >> 4) ^ (v4 >> 9)) & (v10 - 1);
  v13 = (_QWORD *)(v9 + 16 * v12);
  v14 = *v13;
  if (v4 != *v13)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (_QWORD *)(v9 + 16 * (v18 & v11));
      v14 = *v13;
      if (v4 == *v13)
        goto LABEL_23;
    }
    if (v15)
      v13 = v15;
    v22 = *((_DWORD *)this + 40);
    if (4 * v22 + 4 < 3 * v10)
    {
LABEL_19:
      if (v10 + ~v22 - *((_DWORD *)this + 41) > v10 >> 3)
        goto LABEL_20;
      goto LABEL_34;
    }
LABEL_33:
    v10 *= 2;
LABEL_34:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v8, v10);
    v28 = *((_QWORD *)this + 19);
    v29 = *((_DWORD *)this + 42) - 1;
    v30 = v29 & ((v4 >> 4) ^ (v4 >> 9));
    v13 = (_QWORD *)(v28 + 16 * v30);
    v31 = *v13;
    if (v4 == *v13)
    {
LABEL_35:
      ++*((_DWORD *)this + 40);
      if (v4 == -4096)
        goto LABEL_22;
      goto LABEL_21;
    }
    v32 = 0;
    v33 = 1;
    while (v31 != -4096)
    {
      if (v32)
        v34 = 0;
      else
        v34 = v31 == -8192;
      if (v34)
        v32 = v13;
      v35 = v30 + v33++;
      v30 = v35 & v29;
      v13 = (_QWORD *)(v28 + 16 * (v35 & v29));
      v31 = *v13;
      if (v4 == *v13)
        goto LABEL_35;
    }
    if (v32)
      v13 = v32;
LABEL_20:
    v23 = *v13;
    ++*((_DWORD *)this + 40);
    if (v23 == -4096)
    {
LABEL_22:
      *v13 = v4;
      v13[1] = 0;
      goto LABEL_23;
    }
LABEL_21:
    --*((_DWORD *)this + 41);
    goto LABEL_22;
  }
LABEL_23:
  v13[1] = a2;
  result = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 472) && *((_BYTE *)a2 + 50))
  {
    llvm::MCAssembler::computeFragmentSize(result, (uint64_t)this, (uint64_t)a2);
    v26 = v25;
    v27 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 476) & 1) == 0 && v26 > *(unsigned int *)(v27 + 472))
      llvm::report_fatal_error((llvm *)"Fragment can't be larger than a bundle size", (const char *)1);
    result = llvm::computeBundlePadding(v27, (uint64_t)a2, *((_QWORD *)a2 + 4), v26);
    if (result >= 0x100)
      llvm::report_fatal_error((llvm *)"Padding cannot exceed 255 bytes", (const char *)1);
    *((_BYTE *)a2 + 53) = result;
    *((_QWORD *)a2 + 4) += result;
  }
  return result;
}

double llvm::CodeViewContext::CodeViewContext(llvm::CodeViewContext *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x1000000000;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 5) = (char *)this + 56;
  *((_QWORD *)this + 6) = 0x400000000;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = (char *)this + 192;
  result = 0.0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_BYTE *)this + 256) = 0;
  return result;
}

void llvm::CodeViewContext::~CodeViewContext(llvm::CodeViewContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;

  if (!*((_BYTE *)this + 32))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 3);
    if (v2)
    {
      v3 = (_QWORD *)v2[15];
      if (v3 != v2 + 17)
        free(v3);
      v4 = (_QWORD *)v2[8];
      if (v4 != v2 + 11)
        free(v4);
      operator delete(v2);
    }
  }
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    v6 = *((_QWORD *)this + 30);
    v7 = (void *)*((_QWORD *)this + 29);
    if (v6 != v5)
      llvm::deallocate_buffer(*(llvm **)(v6 - 24), (void *)(16 * *(unsigned int *)(v6 - 8)));
    *((_QWORD *)this + 30) = v5;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 26);
  if (v8)
  {
    *((_QWORD *)this + 27) = v8;
    operator delete(v8);
  }
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  v9 = (char *)*((_QWORD *)this + 5);
  if (v9 != (char *)this + 56)
    free(v9);
  if (*((_DWORD *)this + 3))
  {
    v10 = *((unsigned int *)this + 2);
    if ((_DWORD)v10)
    {
      v11 = 0;
      do
      {
        v12 = *(llvm **)(*(_QWORD *)this + v11);
        if (v12 != (llvm *)-8 && v12 != 0)
          llvm::deallocate_buffer(v12, (void *)(*(_QWORD *)v12 + 17));
        v11 += 8;
      }
      while (8 * v10 != v11);
    }
  }
  free(*(void **)this);
}

BOOL llvm::CodeViewContext::isValidFileNumber(llvm::CodeViewContext *this, int a2)
{
  uint64_t v2;

  v2 = (a2 - 1);
  return *((_DWORD *)this + 12) > v2 && *(_BYTE *)(*((_QWORD *)this + 5) + 32 * v2 + 4) != 0;
}

BOOL llvm::CodeViewContext::addFile(uint64_t a1, uint64_t a2, unsigned int a3, int8x16_t *a4, const unsigned __int8 *a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v14;
  int8x16_t *v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int8x16_t *v23;
  int v24;
  llvm::MCContext *v25;
  uint64_t TempSymbol;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  __int16 v33;
  _QWORD v34[3];

  llvm::CodeViewContext::addToStringTable(a1, a4, a5, (uint64_t)v34);
  v15 = (int8x16_t *)v34[0];
  v14 = v34[1];
  v16 = a3 - 1;
  v17 = (_QWORD *)(a1 + 40);
  v18 = *(_DWORD *)(a1 + 48);
  if (v18 > v16 || v18 == a3)
  {
    v20 = *v17 + 32 * v16;
    v21 = *(unsigned __int8 *)(v20 + 4);
    if (*(_BYTE *)(v20 + 4))
      return v21 == 0;
    goto LABEL_7;
  }
  if (v18 <= a3)
  {
    v29 = a3;
    if (*(_DWORD *)(a1 + 52) < a3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, (void *)(a1 + 56), a3, 32);
      v29 = a3;
      v18 = *(_DWORD *)(a1 + 48);
    }
    if (v18 != a3)
      bzero((void *)(*v17 + 32 * v18), 32 * (v29 - v18));
  }
  *(_DWORD *)(a1 + 48) = a3;
  v30 = *v17 + 32 * v16;
  v21 = *(unsigned __int8 *)(v30 + 4);
  if (!*(_BYTE *)(v30 + 4))
  {
LABEL_7:
    if (v14)
      v22 = v14;
    else
      v22 = 7;
    if (v14)
      v23 = v15;
    else
      v23 = (int8x16_t *)"<stdin>";
    llvm::CodeViewContext::addToStringTable(a1, v23, (const unsigned __int8 *)v22, (uint64_t)v31);
    v24 = v32;
    v25 = *(llvm::MCContext **)(a2 + 8);
    v31[0] = "checksum_offset";
    v33 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v25, (const llvm::Twine *)v31, 0);
    v27 = *(_QWORD *)(a1 + 40) + 32 * v16;
    *(_DWORD *)v27 = v24;
    *(_QWORD *)(v27 + 16) = a7;
    *(_QWORD *)(v27 + 24) = TempSymbol;
    *(_BYTE *)(v27 + 4) = 1;
    *(_QWORD *)(v27 + 8) = a6;
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32 * v16 + 5) = a8;
  }
  return v21 == 0;
}

void llvm::CodeViewContext::addToStringTable(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  const void *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  int v19;

  v8 = *(_DWORD **)(a1 + 24);
  if (v8)
  {
    v9 = v8[18];
  }
  else
  {
    v8 = operator new(0xE8uLL);
    v9 = 1;
    v10 = llvm::MCFragment::MCFragment((uint64_t)v8, 1, 0, 0);
    *(_BYTE *)(v10 + 88) = 0;
    *(_WORD *)(v10 + 52) = 0;
    *(_QWORD *)(v10 + 56) = 0;
    *(_QWORD *)(v10 + 64) = v10 + 88;
    *(_QWORD *)(v10 + 120) = v10 + 136;
    *(_QWORD *)(v10 + 128) = 0x400000000;
    *(_QWORD *)(a1 + 24) = v10;
    *(_OWORD *)(v10 + 72) = xmmword_181267BF0;
  }
  v19 = v9;
  v11 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(a1, a2, a3, &v19);
  v12 = (_QWORD *)*v11;
  v13 = (const void *)(*v11 + 16);
  v14 = *(_QWORD *)*v11;
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v14;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)v12 + 2);
  if (v15)
  {
    v16 = (uint64_t)v13 + v14 + 1;
    v17 = v14 + 1;
    v18 = *((_QWORD *)v8 + 9);
    if (*((_QWORD *)v8 + 10) < v17 + v18)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v8 + 16), v8 + 22, v17 + v18, 1);
      v18 = *((_QWORD *)v8 + 9);
    }
    if (v13 != (const void *)v16)
    {
      memcpy((void *)(*((_QWORD *)v8 + 8) + v18), v13, v17);
      v18 = *((_QWORD *)v8 + 9);
    }
    *((_QWORD *)v8 + 9) = v18 + v17;
  }
}

uint64_t llvm::CodeViewContext::getCVFunctionInfo(llvm::CodeViewContext *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 29);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 30) - v2) >> 4) <= a2)
    return 0;
  if (*(_DWORD *)(v2 + 48 * a2))
    return v2 + 48 * a2;
  return 0;
}

BOOL llvm::CodeViewContext::recordFunctionId(llvm::CodeViewContext *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;

  v4 = *((_QWORD *)this + 29);
  v3 = *((_QWORD *)this + 30);
  v5 = (_QWORD *)((char *)this + 232);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 4);
  if (v6 <= a2)
  {
    v7 = a2 + 1;
    if (v7 <= v6)
    {
      if (v7 < v6)
      {
        v8 = v4 + 48 * v7;
        if (v3 != v8)
          llvm::deallocate_buffer(*(llvm **)(v3 - 24), (void *)(16 * *(unsigned int *)(v3 - 8)));
        *((_QWORD *)this + 30) = v8;
      }
    }
    else
    {
      std::vector<llvm::MCCVFunctionInfo>::__append((char **)this + 29, v7 - v6);
    }
  }
  v9 = (int *)(*v5 + 48 * a2);
  v10 = *v9;
  if (!*v9)
    *v9 = -1;
  return v10 == 0;
}

BOOL llvm::CodeViewContext::recordInlinedCallSiteId(llvm::CodeViewContext *this, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  int v46;
  BOOL v47;
  unsigned int v48;

  v14 = *((_QWORD *)this + 29);
  v13 = *((_QWORD *)this + 30);
  v15 = (uint64_t *)((char *)this + 232);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 4);
  if (v16 <= a2)
  {
    v17 = a2 + 1;
    if (v17 <= v16)
    {
      if (v17 < v16)
      {
        v18 = v14 + 48 * v17;
        if (v13 != v18)
          llvm::deallocate_buffer(*(llvm **)(v13 - 24), (void *)(16 * *(unsigned int *)(v13 - 8)));
        *((_QWORD *)this + 30) = v18;
      }
    }
    else
    {
      std::vector<llvm::MCCVFunctionInfo>::__append((char **)this + 29, v17 - v16);
    }
  }
  v19 = *v15;
  v20 = *v15 + 48 * a2;
  v21 = *(_DWORD *)v20;
  if (!*(_DWORD *)v20)
  {
    *(_DWORD *)v20 = a3 + 1;
    v22 = (_DWORD *)(v19 + 48 * a2);
    v22[1] = a4;
    v22[2] = a5;
    v22[3] = a6;
    if (a3 <= 0xFFFFFFFD)
    {
      v23 = 37 * a2;
      do
      {
        v28 = v20;
        v29 = *((_QWORD *)this + 29);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 30) - v29) >> 4) <= a3)
        {
          v20 = 0;
          v30 = *(_QWORD *)(v28 + 4);
          v31 = *(_DWORD *)(v28 + 12);
          v32 = 24;
          v33 = MEMORY[0x18];
          v34 = MEMORY[0x28];
          if (!MEMORY[0x28])
            goto LABEL_20;
        }
        else
        {
          if (*(_DWORD *)(v29 + 48 * a3))
            v20 = v29 + 48 * a3;
          else
            v20 = 0;
          v30 = *(_QWORD *)(v28 + 4);
          v31 = *(_DWORD *)(v28 + 12);
          v32 = v20 + 24;
          v33 = *(_QWORD *)(v20 + 24);
          v34 = *(_DWORD *)(v20 + 40);
          if (!v34)
          {
LABEL_20:
            v26 = 0;
            v35 = *(_DWORD *)(v20 + 32);
            if (4 * v35 + 4 < 3 * v34)
              goto LABEL_21;
LABEL_37:
            v34 *= 2;
            goto LABEL_38;
          }
        }
        v24 = v34 - 1;
        v25 = (v34 - 1) & v23;
        v26 = (unsigned int *)(v33 + 16 * v25);
        v27 = *v26;
        if (*v26 != a2)
        {
          v36 = 0;
          v37 = 1;
          while (v27 != -1)
          {
            if (v36)
              v38 = 0;
            else
              v38 = v27 == -2;
            if (v38)
              v36 = v26;
            v39 = v25 + v37++;
            v25 = v39 & v24;
            v26 = (unsigned int *)(v33 + 16 * (v39 & v24));
            v27 = *v26;
            if (*v26 == a2)
              goto LABEL_12;
          }
          if (v36)
            v26 = v36;
          v35 = *(_DWORD *)(v20 + 32);
          if (4 * v35 + 4 >= 3 * v34)
            goto LABEL_37;
LABEL_21:
          if (v34 + ~v35 - *(_DWORD *)(v20 + 36) <= v34 >> 3)
          {
LABEL_38:
            llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::grow(v32, v34);
            v40 = *(_DWORD *)(v20 + 40);
            if (v40)
            {
              v41 = *(_QWORD *)(v20 + 24);
              v42 = v40 - 1;
              v43 = (v40 - 1) & v23;
              v26 = (unsigned int *)(v41 + 16 * v43);
              v44 = *v26;
              if (*v26 != a2)
              {
                v45 = 0;
                v46 = 1;
                while (v44 != -1)
                {
                  if (v45)
                    v47 = 0;
                  else
                    v47 = v44 == -2;
                  if (v47)
                    v45 = v26;
                  v48 = v43 + v46++;
                  v43 = v48 & v42;
                  v26 = (unsigned int *)(v41 + 16 * (v48 & v42));
                  v44 = *v26;
                  if (*v26 == a2)
                    goto LABEL_22;
                }
                if (v45)
                  v26 = v45;
              }
            }
            else
            {
              v26 = 0;
            }
          }
LABEL_22:
          ++*(_DWORD *)(v20 + 32);
          if (*v26 != -1)
            --*(_DWORD *)(v20 + 36);
          *v26 = a2;
          *(_QWORD *)(v26 + 1) = 0;
          v26[3] = 0;
        }
LABEL_12:
        *(_QWORD *)(v26 + 1) = v30;
        v26[3] = v31;
        a3 = *(_DWORD *)v20 - 1;
      }
      while (a3 < 0xFFFFFFFE);
    }
  }
  return v21 == 0;
}

void std::vector<llvm::MCCVFunctionInfo>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  int v21;
  int v22;
  llvm **v23;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_21:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        v20 = *(_OWORD *)&v5[v17 - 48];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v5[v17 - 32];
        *((_OWORD *)v18 - 3) = v20;
        *((_QWORD *)v18 - 2) = 0;
        *((_DWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 3) = *(_QWORD *)&v5[v17 - 24];
        *((_QWORD *)v19 - 3) = 0;
        *((_DWORD *)v18 - 4) = *(_DWORD *)&v5[v17 - 16];
        *((_DWORD *)v19 - 4) = 0;
        v21 = *(_DWORD *)&v13[v17 - 12];
        *((_DWORD *)v18 - 3) = *(_DWORD *)&v5[v17 - 12];
        *((_DWORD *)v19 - 3) = v21;
        v22 = *(_DWORD *)&v13[v17 - 8];
        *((_DWORD *)v18 - 2) = *(_DWORD *)&v5[v17 - 8];
        *((_DWORD *)v19 - 2) = v22;
        v17 -= 48;
      }
      while (&v5[v17] != v6);
      v5 = *a1;
      v23 = (llvm **)a1[1];
      *a1 = &v13[v17];
      a1[1] = v16;
      a1[2] = v14;
      if (v23 != (llvm **)v5)
        llvm::deallocate_buffer(*(v23 - 3), (void *)(16 * *((unsigned int *)v23 - 2)));
      if (v5)
        goto LABEL_21;
    }
  }
}

_DWORD *llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)4uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -1;
        *v13 = -1;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -1;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v19 = *(_DWORD *)v16;
        if (*(_DWORD *)v16 <= 0xFFFFFFFD)
        {
          v20 = *(_DWORD *)(a1 + 16);
          if (v20)
          {
            v21 = v20 - 1;
            v22 = (v20 - 1) & (37 * v19);
            v17 = *(_QWORD *)a1 + 16 * v22;
            v23 = *(_DWORD *)v17;
            if (v19 != *(_DWORD *)v17)
            {
              v24 = 0;
              v25 = 1;
              while (v23 != -1)
              {
                if (v24)
                  v26 = 0;
                else
                  v26 = v23 == -2;
                if (v26)
                  v24 = v17;
                v27 = v22 + v25++;
                v22 = v27 & v21;
                v17 = *(_QWORD *)a1 + 16 * (v27 & v21);
                v23 = *(_DWORD *)v17;
                if (v19 == *(_DWORD *)v17)
                  goto LABEL_15;
              }
              if (v24)
                v17 = v24;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_15:
          *(_DWORD *)v17 = v19;
          v18 = *(_QWORD *)((char *)v16 + 4);
          *(_DWORD *)(v17 + 12) = *((_DWORD *)v16 + 3);
          *(_QWORD *)(v17 + 4) = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v28 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v28)
  {
    if (((v28 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_38;
    v29 = ((v28 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v29 & 0x1FFFFFFFFFFFFFFELL)];
    v30 = result + 4;
    v31 = v29 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 4) = -1;
      *v30 = -1;
      v30 += 8;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_38:
      v32 = &result[4 * v28];
      do
      {
        *v10 = -1;
        v10 += 4;
      }
      while (v10 != v32);
    }
  }
  return result;
}

uint64_t llvm::MCContext::MCContext(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  std::string *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  const void *v27;
  std::string::size_type v28;
  std::string *p_p;
  int v30;
  uint64_t v31;
  uint64_t v32;
  std::string __p;

  *(_QWORD *)(a1 + 8) = a9;
  *(_QWORD *)(a1 + 16) = a10;
  v18 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    v18->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  v20 = *(__int128 *)((char *)a2 + 24);
  v21 = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 72) = a6;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = &unk_1E0E4FFE8;
  *(_QWORD *)(a1 + 120) = defaultDiagHandler;
  *(_QWORD *)(a1 + 136) = a1 + 112;
  *(_QWORD *)(a1 + 144) = a3;
  *(_QWORD *)(a1 + 152) = a4;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a5;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x400000000;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 1;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 0x400000000;
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 408;
  *(_QWORD *)(a1 + 400) = 0x400000000;
  *(_QWORD *)(a1 + 440) = a1 + 456;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = a1 + 504;
  *(_QWORD *)(a1 + 496) = 0x400000000;
  *(_QWORD *)(a1 + 536) = a1 + 552;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = a1 + 600;
  *(_QWORD *)(a1 + 592) = 0x400000000;
  *(_QWORD *)(a1 + 632) = a1 + 648;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = a1 + 696;
  *(_QWORD *)(a1 + 688) = 0x400000000;
  *(_QWORD *)(a1 + 728) = a1 + 744;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 776) = a1 + 792;
  *(_QWORD *)(a1 + 784) = 0x400000000;
  *(_QWORD *)(a1 + 824) = a1 + 840;
  *(_QWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_QWORD *)(a1 + 872) = a1 + 888;
  *(_QWORD *)(a1 + 880) = 0x400000000;
  *(_QWORD *)(a1 + 920) = a1 + 936;
  *(_QWORD *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_QWORD *)(a1 + 968) = a1 + 984;
  *(_QWORD *)(a1 + 976) = 0x400000000;
  *(_QWORD *)(a1 + 1016) = a1 + 1032;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_QWORD *)(a1 + 1064) = a1 + 1080;
  *(_QWORD *)(a1 + 1072) = 0x400000000;
  *(_QWORD *)(a1 + 1112) = a1 + 1128;
  *(_OWORD *)(a1 + 1148) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1164) = 16;
  *(_QWORD *)(a1 + 1168) = a1 + 184;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_DWORD *)(a1 + 1220) = 16;
  *(_QWORD *)(a1 + 1224) = a1 + 184;
  *(_DWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_DWORD *)(a1 + 1252) = 16;
  *(_QWORD *)(a1 + 1256) = a1 + 184;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1284) = 16;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_BYTE *)(a1 + 1312) = 2;
  *(_BYTE *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_QWORD *)(a1 + 1360) = a1 + 1384;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1376) = 128;
  v22 = (void **)(a1 + 1528);
  *(_QWORD *)(a1 + 1512) = a1 + 1528;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_QWORD *)(a1 + 1552) = a1 + 1560;
  *(_QWORD *)(a1 + 1576) = 0;
  *(_WORD *)(a1 + 1584) = 0;
  *(_BYTE *)(a1 + 1586) = 1;
  *(_DWORD *)(a1 + 1590) = 0;
  *(_DWORD *)(a1 + 1587) = 0;
  *(_QWORD *)(a1 + 1612) = 0;
  *(_OWORD *)(a1 + 1596) = 0u;
  *(_QWORD *)(a1 + 1624) = a1 + 1640;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_DWORD *)(a1 + 1696) = 16777220;
  *(_BYTE *)(a1 + 1700) = 0;
  *(_DWORD *)(a1 + 1704) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_DWORD *)(a1 + 1744) = 1065353216;
  *(_DWORD *)(a1 + 1768) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_DWORD *)(a1 + 1772) = 16;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_QWORD *)(a1 + 1776) = a1 + 1784;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_QWORD *)(a1 + 1800) = a1 + 1808;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_QWORD *)(a1 + 1824) = a1 + 1832;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_QWORD *)(a1 + 1848) = a1 + 1856;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_QWORD *)(a1 + 1872) = a1 + 1880;
  *(_DWORD *)(a1 + 1912) = 0;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_DWORD *)(a1 + 1916) = 16;
  *(_DWORD *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_DWORD *)(a1 + 1940) = 16;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_QWORD *)(a1 + 1960) = a1 + 1976;
  *(_QWORD *)(a1 + 1968) = 0x400000000;
  *(_QWORD *)(a1 + 2008) = a1 + 2024;
  *(_QWORD *)(a1 + 2032) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_BYTE *)(a1 + 2040) = a8;
  *(_QWORD *)(a1 + 2048) = a7;
  *(_BYTE *)(a1 + 2056) = 0;
  *(_DWORD *)(a1 + 2080) = 0;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_DWORD *)(a1 + 2084) = 96;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_QWORD *)(a1 + 2088) = a1 + 2096;
  *(_DWORD *)(a1 + 2128) = 0;
  *(_OWORD *)(a1 + 2112) = 0u;
  if (a7)
  {
    if (*(char *)(a7 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a7 + 88), *(_QWORD *)(a7 + 96));
      std::string::operator=((std::string *)(a1 + 1320), &__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
    __p = *(std::string *)(a7 + 88);
    std::string::operator=((std::string *)(a1 + 1320), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    std::string::operator=((std::string *)(a1 + 1320), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
LABEL_10:
  v23 = *(_QWORD ***)(a1 + 72);
  if (v23)
  {
    v24 = *v23;
    if (-1431655765 * ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) - (_QWORD)v24) >> 3))
    {
      v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v24 + 16))(*v24);
      if (v26 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v27 = (const void *)v25;
      v28 = v26;
      if (v26 >= 0x17)
      {
        v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v31 = v26 | 7;
        v32 = v31 + 1;
        p_p = (std::string *)operator new(v31 + 1);
        __p.__r_.__value_.__l.__size_ = v28;
        __p.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v26;
        p_p = &__p;
        if (!v26)
        {
          __p.__r_.__value_.__s.__data_[0] = 0;
          if ((*(char *)(a1 + 1551) & 0x80000000) == 0)
          {
LABEL_16:
            *(_OWORD *)v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(a1 + 1544) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            goto LABEL_17;
          }
LABEL_26:
          operator delete(*v22);
          goto LABEL_16;
        }
      }
      memmove(p_p, v27, v28);
      p_p->__r_.__value_.__s.__data_[v28] = 0;
      if ((*(char *)(a1 + 1551) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_26;
    }
  }
LABEL_17:
  v30 = 0;
  switch(*((_DWORD *)a2 + 11))
  {
    case 0:
      llvm::report_fatal_error((llvm *)"Cannot initialize MC for unknown object file format.", (const char *)1);
    case 1:
      if ((*((_DWORD *)a2 + 9) - 13) >= 2)
        llvm::report_fatal_error((llvm *)"Cannot initialize MC for non-Windows COFF object files.", (const char *)1);
      v30 = 3;
      goto LABEL_33;
    case 2:
      v30 = 7;
      goto LABEL_33;
    case 3:
      v30 = 1;
      goto LABEL_33;
    case 4:
      v30 = 2;
      goto LABEL_33;
    case 5:
      goto LABEL_33;
    case 6:
      v30 = 4;
      goto LABEL_33;
    case 7:
      v30 = 5;
      goto LABEL_33;
    case 8:
      llvm::report_fatal_error((llvm *)"Cannot initialize MC for MetalLib object files.", (const char *)1);
    case 9:
      v30 = 6;
LABEL_33:
      *(_DWORD *)a1 = v30;
      break;
    default:
      return a1;
  }
  return a1;
}

{
  return llvm::MCContext::MCContext(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void defaultDiagHandler(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::SMDiagnostic::print(a1, 0, v2, 1, 1);
}

void llvm::MCContext::~MCContext(llvm **this)
{
  if (*((_BYTE *)this + 2040))
    llvm::MCContext::reset((llvm::MCContext *)this);
  llvm::deallocate_buffer(this[264], (void *)(16 * *((unsigned int *)this + 532)));
}

void llvm::MCContext::reset(llvm::MCContext *this)
{
  llvm::SourceMgr *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int64x2_t **v31;
  uint64_t v32;
  int64x2_t *v33;
  unint64_t v34;
  int64x2_t *v35;
  unint64_t v36;
  int64x2_t *v37;
  int64x2_t v38;
  uint64_t v39;
  int64x2_t *v40;
  llvm::CodeViewContext *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm *v51;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm *v66;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::SourceMgr *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    llvm::SourceMgr::~SourceMgr(v2);
    operator delete(v3);
  }
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  v68[0] = &unk_1E0E4FFE8;
  v68[1] = defaultDiagHandler;
  v69 = v68;
  std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](v68, (_QWORD *)this + 14);
  v4 = v69;
  if (v69 == v68)
  {
    v5 = 4;
    v4 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((unint64_t)this + 280);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((unint64_t)this + 376);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionELF>::DestroyAll((unint64_t)this + 472);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionGOFF>::DestroyAll((unint64_t)this + 664);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((unint64_t)this + 568);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionWasm>::DestroyAll((unint64_t)this + 856);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionXCOFF>::DestroyAll((unint64_t)this + 952);
  llvm::SpecificBumpPtrAllocator<llvm::MCInst>::DestroyAll((uint64_t)this + 1048);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((unint64_t)this + 760);
  llvm::SpecificBumpPtrAllocator<llvm::MCSubtargetInfo>::DestroyAll((uint64_t)this + 1944);
  if (*((_DWORD *)this + 311))
  {
    v6 = *((unsigned int *)this + 310);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 8 * v6;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 154) + v7) = 0;
        v7 += 8;
      }
      while (v8 != v7);
    }
    *(_QWORD *)((char *)this + 1244) = 0;
  }
  if (*((_DWORD *)this + 303))
  {
    v9 = *((unsigned int *)this + 302);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = 8 * v9;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 150) + v10) = 0;
        v10 += 8;
      }
      while (v11 != v10);
    }
    *(_QWORD *)((char *)this + 1212) = 0;
  }
  if (*((_DWORD *)this + 289))
  {
    v12 = *((unsigned int *)this + 288);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 8 * v12;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 143) + v13) = 0;
        v13 += 8;
      }
      while (v14 != v13);
    }
    *(_QWORD *)((char *)this + 1156) = 0;
  }
  if (*((_DWORD *)this + 64))
    llvm::deallocate_buffer(**((llvm ***)this + 31), *(void **)(*((_QWORD *)this + 31) + 8));
  *((_DWORD *)this + 64) = 0;
  v15 = *((_DWORD *)this + 52);
  if (v15)
  {
    *((_QWORD *)this + 33) = 0;
    v16 = *((_QWORD *)this + 25);
    v17 = *(_QWORD *)v16 + 4096;
    *((_QWORD *)this + 23) = *(_QWORD *)v16;
    *((_QWORD *)this + 24) = v17;
    if (v15 != 1)
    {
      v18 = ((unint64_t)(v16 + 8 - *((_QWORD *)this + 25)) >> 10) & 0x1FFFFFF;
      if (v18 >= 0x1E)
        LOBYTE(v18) = 30;
      llvm::deallocate_buffer(*(llvm **)(v16 + 8), (void *)(4096 << v18));
    }
    *((_DWORD *)this + 52) = 1;
  }
  v19 = *((_DWORD *)this + 324);
  if (v19 || *((_DWORD *)this + 325))
  {
    v20 = (_QWORD *)((char *)this + 1288);
    v21 = *((unsigned int *)this + 326);
    if (v21 > 4 * v19 && v21 >= 0x41)
    {
      llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::shrink_and_clear((uint64_t)v20);
      goto LABEL_36;
    }
    if ((_DWORD)v21)
    {
      v22 = (_DWORD *)*v20;
      v23 = (v21 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v23)
      {
        v24 = v23 + 1;
        v25 = (v23 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v26 = &v22[4 * v25];
        v27 = v22 + 4;
        v28 = v25;
        do
        {
          *(v27 - 4) = -1;
          *v27 = -1;
          v27 += 8;
          v28 -= 2;
        }
        while (v28);
        if (v24 == v25)
          goto LABEL_47;
      }
      else
      {
        v26 = (_DWORD *)*v20;
      }
      v29 = &v22[4 * v21];
      do
      {
        *v26 = -1;
        v26 += 4;
      }
      while (v26 != v29);
    }
LABEL_47:
    *((_QWORD *)this + 162) = 0;
    *((_QWORD *)this + 171) = 0;
    if ((*((char *)this + 1551) & 0x80000000) == 0)
      goto LABEL_37;
LABEL_48:
    **((_BYTE **)this + 191) = 0;
    *((_QWORD *)this + 192) = 0;
    goto LABEL_49;
  }
LABEL_36:
  *((_QWORD *)this + 171) = 0;
  if (*((char *)this + 1551) < 0)
    goto LABEL_48;
LABEL_37:
  *((_BYTE *)this + 1528) = 0;
  *((_BYTE *)this + 1551) = 0;
LABEL_49:
  std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy((uint64_t)this + 1552, *((_QWORD *)this + 195));
  *((_QWORD *)this + 194) = (char *)this + 1560;
  *((_QWORD *)this + 196) = 0;
  *((_QWORD *)this + 195) = 0;
  v30 = *((_DWORD *)this + 402);
  if (v30 || *((_DWORD *)this + 403))
  {
    v31 = (int64x2_t **)((char *)this + 1600);
    v32 = *((unsigned int *)this + 404);
    if (v32 <= 4 * v30 || v32 < 0x41)
    {
      if ((_DWORD)v32)
      {
        v33 = *v31;
        v34 = (v32 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v35 = *v31;
        if (v34 < 3)
          goto LABEL_59;
        v36 = v34 + 1;
        v35 = (int64x2_t *)((char *)v33 + 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL));
        v37 = v33 + 1;
        v38 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v37[-1] = v38;
          *v37 = v38;
          v37 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_59:
          v40 = (int64x2_t *)((char *)v33 + 8 * v32);
          do
          {
            v35->i64[0] = -4096;
            v35 = (int64x2_t *)((char *)v35 + 8);
          }
          while (v35 != v40);
        }
      }
      *((_QWORD *)this + 201) = 0;
    }
    else
    {
      llvm::DenseMap<llvm::MCSection *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::MCSection *,void>,llvm::detail::DenseSetPair<llvm::MCSection *>>::shrink_and_clear((uint64_t)v31);
    }
  }
  *((_DWORD *)this + 408) = 0;
  *((_QWORD *)this + 206) = *((_QWORD *)this + 205);
  *((_OWORD *)this + 104) = 0u;
  *((_DWORD *)this + 426) = 0;
  *((_QWORD *)this + 197) = 0;
  *((_QWORD *)this + 198) = 0x10000;
  v41 = (llvm::CodeViewContext *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v41)
  {
    llvm::CodeViewContext::~CodeViewContext(v41);
    operator delete(v42);
  }
  if (*((_DWORD *)this + 441))
  {
    v43 = *((unsigned int *)this + 440);
    if ((_DWORD)v43)
    {
      v44 = 0;
      do
      {
        v45 = *((_QWORD *)this + 219);
        v46 = *(llvm **)(v45 + v44);
        if (v46 != (llvm *)-8 && v46 != 0)
          llvm::deallocate_buffer(v46, (void *)(*(_QWORD *)v46 + 17));
        *(_QWORD *)(v45 + v44) = 0;
        v44 += 8;
      }
      while (8 * v43 != v44);
    }
    *(_QWORD *)((char *)this + 1764) = 0;
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 1776, *((char **)this + 223));
  *((_QWORD *)this + 222) = (char *)this + 1784;
  *((_QWORD *)this + 224) = 0;
  *((_QWORD *)this + 223) = 0;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 1824, *((char **)this + 229));
  *((_QWORD *)this + 228) = (char *)this + 1832;
  *((_QWORD *)this + 230) = 0;
  *((_QWORD *)this + 229) = 0;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 1800, *((char **)this + 226));
  *((_QWORD *)this + 225) = (char *)this + 1808;
  *((_QWORD *)this + 227) = 0;
  *((_QWORD *)this + 226) = 0;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 1848, *((char **)this + 232));
  *((_QWORD *)this + 231) = (char *)this + 1856;
  *((_QWORD *)this + 233) = 0;
  *((_QWORD *)this + 232) = 0;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 1872, *((char **)this + 235));
  *((_QWORD *)this + 234) = (char *)this + 1880;
  *((_QWORD *)this + 236) = 0;
  *((_QWORD *)this + 235) = 0;
  if (*((_DWORD *)this + 477))
  {
    v48 = *((unsigned int *)this + 476);
    if ((_DWORD)v48)
    {
      v49 = 0;
      do
      {
        v50 = *((_QWORD *)this + 237);
        v51 = *(llvm **)(v50 + v49);
        if (v51 != (llvm *)-8 && v51 != 0)
          llvm::deallocate_buffer(v51, (void *)(*(_QWORD *)v51 + 17));
        *(_QWORD *)(v50 + v49) = 0;
        v49 += 8;
      }
      while (8 * v48 != v49);
    }
    *(_QWORD *)((char *)this + 1908) = 0;
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 2088, *((char **)this + 262));
  *((_QWORD *)this + 261) = (char *)this + 2096;
  *((_QWORD *)this + 263) = 0;
  *((_QWORD *)this + 262) = 0;
  v53 = *((_DWORD *)this + 530);
  if (!v53 && !*((_DWORD *)this + 531))
  {
LABEL_89:
    if (!*((_DWORD *)this + 319))
      goto LABEL_108;
    goto LABEL_99;
  }
  v54 = (_QWORD *)((char *)this + 2112);
  v55 = *((unsigned int *)this + 532);
  if (v55 > 4 * v53 && v55 >= 0x41)
  {
    llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::shrink_and_clear((uint64_t)v54);
    goto LABEL_89;
  }
  if ((_DWORD)v55)
  {
    v56 = (_OWORD *)*v54;
    v57 = (v55 - 1) & 0xFFFFFFFFFFFFFFFLL;
    v58 = (_OWORD *)*v54;
    if (v57 < 3)
      goto LABEL_96;
    v59 = v57 + 1;
    v58 = &v56[v59 & 0x1FFFFFFFFFFFFFFCLL];
    v60 = v56 + 2;
    v61 = v59 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v60 - 2) = xmmword_181234BE0;
      *(v60 - 1) = xmmword_181234BE0;
      *v60 = xmmword_181234BE0;
      v60[1] = xmmword_181234BE0;
      v60 += 4;
      v61 -= 4;
    }
    while (v61);
    if (v59 != (v59 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_96:
      v62 = &v56[v55];
      do
        *v58++ = xmmword_181234BE0;
      while (v58 != v62);
    }
  }
  *((_QWORD *)this + 265) = 0;
  if (*((_DWORD *)this + 319))
  {
LABEL_99:
    v63 = *((unsigned int *)this + 318);
    if ((_DWORD)v63)
    {
      v64 = 0;
      do
      {
        v65 = *((_QWORD *)this + 158);
        v66 = *(llvm **)(v65 + v64);
        if (v66 != (llvm *)-8 && v66 != 0)
          llvm::deallocate_buffer(v66, (void *)(*(_QWORD *)v66 + 17));
        *(_QWORD *)(v65 + v64) = 0;
        v64 += 8;
      }
      while (8 * v63 != v64);
    }
    *(_QWORD *)((char *)this + 1276) = 0;
  }
LABEL_108:
  *((_BYTE *)this + 1699) = 1;
  *((_WORD *)this + 796) = 0;
  *((_DWORD *)this + 399) = 0;
  *((_BYTE *)this + 2056) = 0;
}

unint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = &v3[v2];
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *v3;
      if (*v3 != *(_QWORD *)(v5 + 8 * *(unsigned int *)(v1 + 24) - 8))
        break;
      v8 = *(_QWORD *)v1;
      result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (result + 248 <= *(_QWORD *)v1)
        goto LABEL_10;
LABEL_3:
      if (++v3 == v4)
        goto LABEL_12;
    }
    v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = v6 + (4096 << v7);
    result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (result + 248 > v8)
      goto LABEL_3;
    do
    {
LABEL_10:
      llvm::MCSection::~MCSection((llvm::MCSection *)result);
      v10 = v9 + 496;
      result = v9 + 248;
    }
    while (v10 <= v8);
    goto LABEL_3;
  }
LABEL_12:
  v11 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(v1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      result = (*v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v14 = *v12 + v12[1];
      if (result + 248 <= v14)
      {
        do
        {
          llvm::MCSection::~MCSection((llvm::MCSection *)result);
          v16 = v15 + 496;
          result = v15 + 248;
        }
        while (v16 <= v14);
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(v1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(v1 + 64), *(void **)(*(_QWORD *)(v1 + 64) + 8));
  }
  *(_DWORD *)(v1 + 72) = 0;
  v17 = *(_DWORD *)(v1 + 24);
  if (v17)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v18 = *(_QWORD *)(v1 + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)v1 = *(_QWORD *)v18;
    *(_QWORD *)(v1 + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(v1 + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = &v3[v2];
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *v3;
      if (*v3 != *(_QWORD *)(v5 + 8 * *(unsigned int *)(v1 + 24) - 8))
        break;
      v8 = *(_QWORD *)v1;
      result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (result + 224 <= *(_QWORD *)v1)
        goto LABEL_10;
LABEL_3:
      if (++v3 == v4)
        goto LABEL_12;
    }
    v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = v6 + (4096 << v7);
    result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (result + 224 > v8)
      goto LABEL_3;
    do
    {
LABEL_10:
      llvm::MCSection::~MCSection((llvm::MCSection *)result);
      v10 = v9 + 448;
      result = v9 + 224;
    }
    while (v10 <= v8);
    goto LABEL_3;
  }
LABEL_12:
  v11 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(v1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      result = (*v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v14 = *v12 + v12[1];
      if (result + 224 <= v14)
      {
        do
        {
          llvm::MCSection::~MCSection((llvm::MCSection *)result);
          v16 = v15 + 448;
          result = v15 + 224;
        }
        while (v16 <= v14);
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(v1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(v1 + 64), *(void **)(*(_QWORD *)(v1 + 64) + 8));
  }
  *(_DWORD *)(v1 + 72) = 0;
  v17 = *(_DWORD *)(v1 + 24);
  if (v17)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v18 = *(_QWORD *)(v1 + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)v1 = *(_QWORD *)v18;
    *(_QWORD *)(v1 + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(v1 + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionELF>::DestroyAll(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = &v3[v2];
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *v3;
      if (*v3 != *(_QWORD *)(v5 + 8 * *(unsigned int *)(v1 + 24) - 8))
        break;
      v8 = *(_QWORD *)v1;
      result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (result + 256 <= *(_QWORD *)v1)
        goto LABEL_10;
LABEL_3:
      if (++v3 == v4)
        goto LABEL_12;
    }
    v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = v6 + (4096 << v7);
    result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (result + 256 > v8)
      goto LABEL_3;
    do
    {
LABEL_10:
      llvm::MCSection::~MCSection((llvm::MCSection *)result);
      v10 = v9 + 512;
      result = v9 + 256;
    }
    while (v10 <= v8);
    goto LABEL_3;
  }
LABEL_12:
  v11 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(v1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      result = (*v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v14 = *v12 + v12[1];
      if (result + 256 <= v14)
      {
        do
        {
          llvm::MCSection::~MCSection((llvm::MCSection *)result);
          v16 = v15 + 512;
          result = v15 + 256;
        }
        while (v16 <= v14);
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(v1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(v1 + 64), *(void **)(*(_QWORD *)(v1 + 64) + 8));
  }
  *(_DWORD *)(v1 + 72) = 0;
  v17 = *(_DWORD *)(v1 + 24);
  if (v17)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v18 = *(_QWORD *)(v1 + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)v1 = *(_QWORD *)v18;
    *(_QWORD *)(v1 + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(v1 + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionGOFF>::DestroyAll(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = &v3[v2];
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *v3;
      if (*v3 != *(_QWORD *)(v5 + 8 * *(unsigned int *)(v1 + 24) - 8))
        break;
      v8 = *(_QWORD *)v1;
      result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (result + 240 <= *(_QWORD *)v1)
        goto LABEL_10;
LABEL_3:
      if (++v3 == v4)
        goto LABEL_12;
    }
    v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = v6 + (4096 << v7);
    result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (result + 240 > v8)
      goto LABEL_3;
    do
    {
LABEL_10:
      llvm::MCSection::~MCSection((llvm::MCSection *)result);
      v10 = v9 + 480;
      result = v9 + 240;
    }
    while (v10 <= v8);
    goto LABEL_3;
  }
LABEL_12:
  v11 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(v1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      result = (*v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v14 = *v12 + v12[1];
      if (result + 240 <= v14)
      {
        do
        {
          llvm::MCSection::~MCSection((llvm::MCSection *)result);
          v16 = v15 + 480;
          result = v15 + 240;
        }
        while (v16 <= v14);
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(v1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(v1 + 64), *(void **)(*(_QWORD *)(v1 + 64) + 8));
  }
  *(_DWORD *)(v1 + 72) = 0;
  v17 = *(_DWORD *)(v1 + 24);
  if (v17)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v18 = *(_QWORD *)(v1 + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)v1 = *(_QWORD *)v18;
    *(_QWORD *)(v1 + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(v1 + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionWasm>::DestroyAll(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = &v3[v2];
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *v3;
      if (*v3 != *(_QWORD *)(v5 + 8 * *(unsigned int *)(v1 + 24) - 8))
        break;
      v8 = *(_QWORD *)v1;
      result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (result + 264 <= *(_QWORD *)v1)
        goto LABEL_10;
LABEL_3:
      if (++v3 == v4)
        goto LABEL_12;
    }
    v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = v6 + (4096 << v7);
    result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (result + 264 > v8)
      goto LABEL_3;
    do
    {
LABEL_10:
      llvm::MCSection::~MCSection((llvm::MCSection *)result);
      v10 = v9 + 528;
      result = v9 + 264;
    }
    while (v10 <= v8);
    goto LABEL_3;
  }
LABEL_12:
  v11 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(v1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      result = (*v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v14 = *v12 + v12[1];
      if (result + 264 <= v14)
      {
        do
        {
          llvm::MCSection::~MCSection((llvm::MCSection *)result);
          v16 = v15 + 528;
          result = v15 + 264;
        }
        while (v16 <= v14);
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(v1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(v1 + 64), *(void **)(*(_QWORD *)(v1 + 64) + 8));
  }
  *(_DWORD *)(v1 + 72) = 0;
  v17 = *(_DWORD *)(v1 + 24);
  if (v17)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v18 = *(_QWORD *)(v1 + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)v1 = *(_QWORD *)v18;
    *(_QWORD *)(v1 + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(v1 + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionXCOFF>::DestroyAll(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = &v3[v2];
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *v3;
      if (*v3 != *(_QWORD *)(v5 + 8 * *(unsigned int *)(v1 + 24) - 8))
        break;
      v8 = *(_QWORD *)v1;
      result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (result + 272 <= *(_QWORD *)v1)
        goto LABEL_10;
LABEL_3:
      if (++v3 == v4)
        goto LABEL_12;
    }
    v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = v6 + (4096 << v7);
    result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (result + 272 > v8)
      goto LABEL_3;
    do
    {
LABEL_10:
      llvm::MCSectionXCOFF::~MCSectionXCOFF((llvm::MCSectionXCOFF *)result);
      v10 = v9 + 544;
      result = v9 + 272;
    }
    while (v10 <= v8);
    goto LABEL_3;
  }
LABEL_12:
  v11 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(v1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      result = (*v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v14 = *v12 + v12[1];
      if (result + 272 <= v14)
      {
        do
        {
          llvm::MCSectionXCOFF::~MCSectionXCOFF((llvm::MCSectionXCOFF *)result);
          v16 = v15 + 544;
          result = v15 + 272;
        }
        while (v16 <= v14);
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(v1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(v1 + 64), *(void **)(*(_QWORD *)(v1 + 64) + 8));
  }
  *(_DWORD *)(v1 + 72) = 0;
  v17 = *(_DWORD *)(v1 + 24);
  if (v17)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v18 = *(_QWORD *)(v1 + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)v1 = *(_QWORD *)v18;
    *(_QWORD *)(v1 + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(v1 + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

void llvm::SpecificBumpPtrAllocator<llvm::MCInst>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; i <= v8; i += 192)
      {
        v10 = *(void **)(i - 176);
        if ((void *)(i - 160) != v10)
          free(v10);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; j <= v14; j += 192)
      {
        v16 = *(void **)(j - 176);
        if ((void *)(j - 160) != v16)
          free(v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(a1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(a1 + 64), *(void **)(*(_QWORD *)(a1 + 64) + 8));
  }
  *(_DWORD *)(a1 + 72) = 0;
  v17 = *(_DWORD *)(a1 + 24);
  if (v17)
  {
    *(_QWORD *)(a1 + 80) = 0;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)a1 = *(_QWORD *)v18;
    *(_QWORD *)(a1 + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(a1 + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSubtargetInfo>::DestroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (***v9)(_QWORD);
  uint64_t (***v10)(_QWORD);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t (***v14)(_QWORD);
  unint64_t v15;
  uint64_t (***v16)(_QWORD);
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = &v3[v2];
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *v3;
      if (*v3 != *(_QWORD *)(v5 + 8 * *(unsigned int *)(v1 + 24) - 8))
        break;
      v8 = *(_QWORD *)v1;
      v9 = (uint64_t (***)(_QWORD))((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)(v9 + 42) <= *(_QWORD *)v1)
        goto LABEL_10;
LABEL_3:
      if (++v3 == v4)
        goto LABEL_12;
    }
    v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = v6 + (4096 << v7);
    v9 = (uint64_t (***)(_QWORD))((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)(v9 + 42) > v8)
      goto LABEL_3;
    do
    {
LABEL_10:
      result = (**v9)(v9);
      v10 = v9 + 84;
      v9 += 42;
    }
    while ((unint64_t)v10 <= v8);
    goto LABEL_3;
  }
LABEL_12:
  v11 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(v1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = (uint64_t (***)(_QWORD))((*v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      v15 = *v12 + v12[1];
      if ((unint64_t)(v14 + 42) <= v15)
      {
        do
        {
          result = (**v14)(v14);
          v16 = v14 + 84;
          v14 += 42;
        }
        while ((unint64_t)v16 <= v15);
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(v1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(v1 + 64), *(void **)(*(_QWORD *)(v1 + 64) + 8));
  }
  *(_DWORD *)(v1 + 72) = 0;
  v17 = *(_DWORD *)(v1 + 24);
  if (v17)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v18 = *(_QWORD *)(v1 + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)v1 = *(_QWORD *)v18;
    *(_QWORD *)(v1 + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(v1 + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t llvm::MCContext::getOrCreateSymbol(llvm::MCContext *this, const char **a2)
{
  size_t v3;
  int8x16_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t Symbol;
  int v9;
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = xmmword_181236BB0;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (int8x16_t *)*a2;
        if (*a2)
          v3 = strlen(*a2);
        else
          v3 = 0;
        break;
      case 4:
        v9 = (*a2)[23];
        if (v9 >= 0)
          v4 = (int8x16_t *)*a2;
        else
          v4 = *(int8x16_t **)*a2;
        if (v9 >= 0)
          v3 = *((unsigned __int8 *)*a2 + 23);
        else
          v3 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
      case 6:
        v4 = (int8x16_t *)*a2;
        v3 = (size_t)a2[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v10);
    v4 = (int8x16_t *)v10;
    v3 = v11;
  }
  v5 = llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>((uint64_t)this + 1144, v4, (const unsigned __int8 *)v3);
  v6 = *v5;
  Symbol = *(_QWORD *)(*v5 + 8);
  if (!Symbol)
  {
    Symbol = llvm::MCContext::createSymbol((uint64_t)this, v4, (const unsigned __int8 *)v3, 0, 0);
    *(_QWORD *)(v6 + 8) = Symbol;
  }
  if (v10 != v12)
    free(v10);
  return Symbol;
}

uint64_t llvm::MCContext::createSymbol(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, int a4, int a5)
{
  _BOOL4 v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  uint64_t v14;
  const unsigned __int8 *v15;
  unint64_t v16;
  uint64_t *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t SymbolImpl;
  char v22[8];
  void (**v23)(llvm::raw_svector_ostream *__hidden);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  void *v32;
  __int128 v33;
  _QWORD v34[17];

  v34[16] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 1700))
      return llvm::MCContext::createSymbolImpl((_DWORD *)a1, 0, 1);
    goto LABEL_3;
  }
  if (*(_BYTE *)(a1 + 1699) && (v10 = *(_QWORD *)(a1 + 144), v11 = *(_QWORD *)(v10 + 96), (unint64_t)a3 >= v11))
  {
    if (!v11)
    {
LABEL_3:
      v9 = 1;
      goto LABEL_10;
    }
    v9 = memcmp(a2, *(const void **)(v10 + 88), v11) == 0;
  }
  else
  {
    v9 = 0;
  }
LABEL_10:
  v32 = v34;
  v33 = xmmword_181236BB0;
  if ((unint64_t)a3 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v32, v34, (unint64_t)a3, 1);
    v13 = v33;
LABEL_13:
    memcpy((char *)v32 + v13, a2, (size_t)a3);
    v13 = v33;
    goto LABEL_14;
  }
  v13 = 0;
  if (a3)
    goto LABEL_13;
LABEL_14:
  *(_QWORD *)&v33 = &a3[v13];
  v14 = *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1 + 1264, a2, a3);
  if (!a4)
    goto LABEL_23;
  do
  {
    v15 = (const unsigned __int8 *)v33;
    if ((const unsigned __int8 *)v33 != a3)
    {
      if ((unint64_t)v33 <= (unint64_t)a3)
      {
        if (*((_QWORD *)&v33 + 1) < (unint64_t)a3)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v32, v34, (unint64_t)a3, 1);
          v15 = (const unsigned __int8 *)v33;
        }
        if (a3 != v15)
          bzero((void *)&v15[(_QWORD)v32], a3 - v15);
      }
      *(_QWORD *)&v33 = a3;
    }
    v24 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 1;
    v26 = 0;
    v27 = 0;
    v25 = 0;
    v23 = off_1E0E22B88;
    v31 = &v32;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v23, 0, 0, 0);
    v16 = *(unsigned int *)(v14 + 8);
    *(_DWORD *)(v14 + 8) = v16 + 1;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v23, v16);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
LABEL_23:
    v22[0] = 1;
    v17 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, (int8x16_t *)v32, (const unsigned __int8 *)v33, v22);
    v19 = v18;
    v20 = *v17;
  }
  while (!v19 && *(_BYTE *)(v20 + 8));
  *(_BYTE *)(v20 + 8) = 1;
  SymbolImpl = llvm::MCContext::createSymbolImpl((_DWORD *)a1, v20, v9);
  if (v32 != v34)
    free(v32);
  return SymbolImpl;
}

uint64_t llvm::MCContext::createSymbolImpl(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  switch(*a1)
  {
    case 0:
      result = llvm::MCSymbol::operator new(32, a2, (uint64_t)a1);
      *(_QWORD *)result = 0;
      v6 = *(_DWORD *)(result + 8) & 0xFFF00000;
      v7 = a3 == 0;
      v8 = 1024;
      v9 = 1026;
      goto LABEL_14;
    case 1:
      result = llvm::MCSymbol::operator new(40, a2, (uint64_t)a1);
      *(_QWORD *)result = 0;
      v10 = *(_DWORD *)(result + 8) & 0xFFF00000;
      if (a3)
        v11 = 514;
      else
        v11 = 512;
      *(_WORD *)(result + 12) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 8) = v11 | (a2 != 0) | v10;
      if (a2)
        *(_QWORD *)(result - 8) = a2;
      *(_QWORD *)(result + 32) = 0;
      return result;
    case 2:
      result = llvm::MCSymbol::operator new(32, a2, (uint64_t)a1);
      *(_QWORD *)result = 0;
      v6 = *(_DWORD *)(result + 8) & 0xFFF00000;
      v7 = a3 == 0;
      v8 = 768;
      v9 = 770;
LABEL_14:
      if (!v7)
        v8 = v9;
      goto LABEL_16;
    case 3:
      result = llvm::MCSymbol::operator new(40, a2, (uint64_t)a1);
      *(_QWORD *)result = 0;
      v12 = *(_DWORD *)(result + 8) & 0xFFF00000;
      if (a3)
        v13 = 258;
      else
        v13 = 256;
      *(_WORD *)(result + 12) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 8) = v13 | (a2 != 0) | v12;
      if (a2)
        *(_QWORD *)(result - 8) = a2;
      *(_WORD *)(result + 32) = 0;
      return result;
    case 5:
      result = llvm::MCSymbol::operator new(184, a2, (uint64_t)a1);
      *(_QWORD *)result = 0;
      v14 = *(_DWORD *)(result + 8) & 0xFFF00000;
      if (a3)
        v15 = 1282;
      else
        v15 = 1280;
      *(_WORD *)(result + 12) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 8) = v15 | (a2 != 0) | v14;
      if (a2)
        *(_QWORD *)(result - 8) = a2;
      *(_BYTE *)(result + 32) = 0;
      *(_BYTE *)(result + 36) = 0;
      *(_BYTE *)(result + 48) = 0;
      *(_BYTE *)(result + 64) = 0;
      *(_BYTE *)(result + 72) = 0;
      *(_BYTE *)(result + 88) = 0;
      *(_BYTE *)(result + 96) = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = 0;
      *(_BYTE *)(result + 128) = 0;
      *(_BYTE *)(result + 130) = 0;
      *(_BYTE *)(result + 136) = 0;
      *(_BYTE *)(result + 168) = 0;
      *(_QWORD *)(result + 176) = 0;
      *(_DWORD *)(result + 40) = 0;
      *(_WORD *)(result + 44) = 0;
      return result;
    case 6:
      return llvm::MCContext::createXCOFFSymbolImpl((uint64_t)a1, a2, a3);
    default:
      result = llvm::MCSymbol::operator new(32, a2, (uint64_t)a1);
      *(_QWORD *)result = 0;
      if (a3)
        v8 = 2;
      else
        v8 = 0;
      v6 = *(_DWORD *)(result + 8) & 0xFFF00000;
LABEL_16:
      *(_WORD *)(result + 12) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 8) = v8 | (a2 != 0) | v6;
      if (a2)
        *(_QWORD *)(result - 8) = a2;
      return result;
  }
}

uint64_t llvm::MCContext::createXCOFFSymbolImpl(uint64_t a1, uint64_t a2, int a3)
{
  void (**v6)(llvm::raw_svector_ostream *__hidden);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  const char *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  void *v36;
  unint64_t v38;
  char v39[8];
  void (**v40)(llvm::raw_svector_ostream *__hidden);
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  void **v48;
  unsigned __int8 v49;
  void *v50;
  __int128 v51;
  _QWORD v52[16];
  char *v53;
  __int128 v54;
  _WORD v55[64];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v8 = llvm::MCSymbol::operator new(72, 0, a1);
    v9 = v8;
    *(_QWORD *)v8 = 0;
    v10 = *(_DWORD *)(v8 + 8) & 0xFFF00000;
    *(_WORD *)(v8 + 12) = 0;
    if (a3)
      v11 = 1538;
    else
      v11 = 1536;
    *(_DWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    goto LABEL_27;
  }
  v6 = (void (**)(llvm::raw_svector_ostream *__hidden))(a2 + 16);
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 < 0xBuLL)
  {
    if (v7 != 10)
      goto LABEL_23;
LABEL_13:
    if (*v6 != (void (*)(llvm::raw_svector_ostream *__hidden))0x64656D616E65525FLL
      || *(_WORD *)(a2 + 24) != 11822)
    {
      goto LABEL_23;
    }
    goto LABEL_18;
  }
  if (*v6 != (void (*)(llvm::raw_svector_ostream *__hidden))0x656D616E65525F2ELL
    || *(_QWORD *)(a2 + 19) != 0x2E2E64656D616E65)
  {
    goto LABEL_13;
  }
LABEL_18:
  v53 = "invalid symbol name from source";
  v55[4] = 259;
  v40 = 0;
  *(_BYTE *)(a1 + 2056) = 1;
  v50 = off_1E0E50618;
  *(_QWORD *)&v51 = &v40;
  *((_QWORD *)&v51 + 1) = &v53;
  v52[0] = &v50;
  llvm::MCContext::reportCommon((_QWORD *)a1, 0, (uint64_t)&v50);
  v14 = (void **)v52[0];
  if ((void **)v52[0] == &v50)
  {
    v15 = 4;
    v14 = &v50;
  }
  else
  {
    if (!v52[0])
      goto LABEL_23;
    v15 = 5;
  }
  (*((void (**)(void))*v14 + v15))();
LABEL_23:
  if ((*(unsigned int (**)(_QWORD, void (**)(llvm::raw_svector_ostream *__hidden), unint64_t))(**(_QWORD **)(a1 + 144) + 56))(*(_QWORD *)(a1 + 144), v6, v7))
  {
    v8 = llvm::MCSymbol::operator new(72, a2, a1);
    v9 = v8;
    *(_QWORD *)(v8 - 8) = a2;
    *(_QWORD *)v8 = 0;
    v10 = *(_DWORD *)(v8 + 8) & 0xFFF00000;
    *(_WORD *)(v8 + 12) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    if (a3)
      v11 = 1539;
    else
      v11 = 1537;
LABEL_27:
    *(_DWORD *)(v8 + 8) = v10 | v11;
    *(_WORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_WORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    return v9;
  }
  v53 = (char *)v55;
  v54 = xmmword_181236BB0;
  if (v7 < 0x81)
  {
    v16 = 0;
    v17 = 0;
    if (!v7)
      goto LABEL_32;
  }
  else
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v53, v55, v7, 1);
    v16 = v54;
  }
  memcpy(&v53[v16], v6, v7);
  v17 = v54;
LABEL_32:
  *(_QWORD *)&v54 = v17 + v7;
  if (v17 + v7)
  {
    v18 = *v53 == 46;
    if (*v53 == 46)
      v19 = "._Renamed..";
    else
      v19 = "_Renamed..";
  }
  else
  {
    v18 = 0;
    v19 = "_Renamed..";
  }
  v20 = strlen(v19);
  v21 = v20;
  v50 = v52;
  v51 = xmmword_181236BB0;
  if (v20 < 0x81)
  {
    v22 = 0;
    v23 = 0;
    if (!v20)
      goto LABEL_41;
  }
  else
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v20, 1);
    v22 = v51;
  }
  memcpy((char *)v50 + v22, v19, v21);
  v23 = v51;
LABEL_41:
  *(_QWORD *)&v51 = v23 + v21;
  if (!(_QWORD)v54)
  {
    v25 = 0;
    if (v18)
      goto LABEL_49;
LABEL_58:
    v26 = v53;
    v27 = v51;
    v28 = v51 + v25;
    if (*((_QWORD *)&v51 + 1) >= (unint64_t)v51 + v25)
      goto LABEL_60;
    goto LABEL_59;
  }
  v24 = 0;
  do
  {
    if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 48))(*(_QWORD *)(a1 + 144), v53[v24])|| v53[v24] == 95)
    {
      LODWORD(v41) = 0;
      v45 = 0;
      v46 = 0;
      v47 = 1;
      v43 = 0;
      v44 = 0;
      v42 = 0;
      v40 = off_1E0E22B88;
      v48 = &v50;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v40, 0, 0, 0);
      llvm::raw_ostream::write_hex((llvm::raw_ostream *)&v40, v53[v24]);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v40);
      v53[v24] = 95;
    }
    ++v24;
    v25 = v54;
  }
  while (v24 < (unint64_t)v54);
  if (!v18)
    goto LABEL_58;
LABEL_49:
  if (v25)
    v26 = v53 + 1;
  else
    v26 = v53;
  if (v25 - (v25 != 0) >= v25 - 1)
    --v25;
  else
    v25 -= v25 != 0;
  v27 = v51;
  v28 = v51 + v25;
  if (*((_QWORD *)&v51 + 1) < (unint64_t)v51 + v25)
  {
LABEL_59:
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v28, 1);
    v27 = v51;
  }
LABEL_60:
  if (v25)
  {
    memcpy((char *)v50 + v27, v26, v25);
    v27 = v51;
  }
  *(_QWORD *)&v51 = v27 + v25;
  v39[0] = 1;
  v29 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, (int8x16_t *)v50, (const unsigned __int8 *)(v27 + v25), v39);
  v30 = *v29;
  *(_BYTE *)(v30 + 8) = 1;
  v31 = llvm::MCSymbol::operator new(72, v30, a1);
  v9 = v31;
  v32 = *v29;
  *(_QWORD *)v31 = 0;
  v33 = *(_DWORD *)(v31 + 8) & 0xFFF00000;
  if (a3)
    v34 = 1538;
  else
    v34 = 1536;
  *(_WORD *)(v31 + 12) = 0;
  *(_DWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  *(_DWORD *)(v31 + 8) = v34 | (v32 != 0) | v33;
  if (v32)
    *(_QWORD *)(v31 - 8) = v32;
  *(_WORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  *(_WORD *)(v31 + 48) = 0;
  *(_QWORD *)(v31 + 56) = 0;
  *(_QWORD *)(v31 + 64) = 0;
  v40 = v6;
  v41 = v7;
  if (*((_BYTE *)v6 + v7 - 1) != 93)
  {
LABEL_72:
    *(_QWORD *)(v9 + 56) = v6;
    *(_QWORD *)(v9 + 64) = v7;
    v36 = v50;
    if (v50 == v52)
      goto LABEL_74;
    goto LABEL_73;
  }
  v49 = 91;
  v35 = llvm::StringRef::rfind(&v40, &v49, 1);
  if (v35 != -1)
  {
    v6 = v40;
    if (v35 >= v41)
      v7 = v41;
    else
      v7 = v35;
    goto LABEL_72;
  }
  v38 = v41;
  *(_QWORD *)(v9 + 56) = v40;
  *(_QWORD *)(v9 + 64) = v38;
  v36 = v50;
  if (v50 != v52)
LABEL_73:
    free(v36);
LABEL_74:
  if (v53 != (char *)v55)
    free(v53);
  return v9;
}

uint64_t llvm::MCContext::createTempSymbol(llvm::MCContext *this, const llvm::Twine *a2, int a3)
{
  uint64_t v6;
  const void *v7;
  size_t v8;
  uint64_t Symbol;
  void (**v11)(llvm::raw_svector_ostream *__hidden);
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  __int128 v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = xmmword_181236BB0;
  v12 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v11 = off_1E0E22B88;
  v19 = &v20;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v11, 0, 0, 0);
  v6 = *((_QWORD *)this + 18);
  v7 = *(const void **)(v6 + 88);
  v8 = *(_QWORD *)(v6 + 96);
  if (v8 <= v14 - (uint64_t)v15)
  {
    if (v8)
    {
      memcpy(v15, v7, v8);
      v15 += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v11, (const char *)v7, v8);
  }
  llvm::Twine::print(a2, (llvm::raw_ostream *)&v11);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v11);
  Symbol = llvm::MCContext::createSymbol((uint64_t)this, (int8x16_t *)v20, (const unsigned __int8 *)v21, a3, 1);
  if (v20 != v22)
    free(v20);
  return Symbol;
}

uint64_t llvm::MCContext::createNamedTempSymbol(llvm::MCContext *this, const llvm::Twine *a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t Symbol;
  void (**v9)(llvm::raw_svector_ostream *__hidden);
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18;
  __int128 v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = xmmword_181236BB0;
  v10 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v9 = off_1E0E22B88;
  v17 = &v18;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v9, 0, 0, 0);
  v4 = *((_QWORD *)this + 18);
  v5 = *(const void **)(v4 + 88);
  v6 = *(_QWORD *)(v4 + 96);
  if (v6 <= v12 - (uint64_t)v13)
  {
    if (v6)
    {
      memcpy(v13, v5, v6);
      v13 += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v9, (const char *)v5, v6);
  }
  llvm::Twine::print(a2, (llvm::raw_ostream *)&v9);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v9);
  Symbol = llvm::MCContext::createSymbol((uint64_t)this, (int8x16_t *)v18, (const unsigned __int8 *)v19, 1, 0);
  if (v18 != v20)
    free(v18);
  return Symbol;
}

uint64_t llvm::MCContext::createTempSymbol(llvm::MCContext *this)
{
  const char *v2;
  __int16 v3;

  v2 = "tmp";
  v3 = 259;
  return llvm::MCContext::createTempSymbol(this, (const llvm::Twine *)&v2, 1);
}

uint64_t llvm::MCContext::NextInstance(llvm::MCContext *this, size_t __sz)
{
  int v2;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *buffer;
  uint64_t v18;
  uint64_t result;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  int *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  char *v30;

  v2 = __sz;
  v4 = *((_DWORD *)this + 326);
  if (!v4)
    goto LABEL_33;
  v5 = *((_QWORD *)this + 161);
  v6 = (v4 - 1) & (37 * v2);
  v7 = (int *)(v5 + 16 * v6);
  v8 = *v7;
  if (*v7 == v2)
    goto LABEL_17;
  v9 = 0;
  v10 = 1;
  while (v8 != -1)
  {
    if (v9)
      v11 = 0;
    else
      v11 = v8 == -2;
    if (v11)
      v9 = v7;
    v12 = v6 + v10++;
    v6 = v12 & (v4 - 1);
    v7 = (int *)(v5 + 16 * v6);
    v8 = *v7;
    if (*v7 == v2)
      goto LABEL_17;
  }
  if (v9)
    v7 = v9;
  v20 = *((_DWORD *)this + 324);
  if (4 * v20 + 4 >= 3 * v4)
  {
LABEL_33:
    v4 *= 2;
LABEL_34:
    llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)this + 1288, v4);
    v21 = *((_DWORD *)this + 326);
    if (v21)
    {
      v22 = *((_QWORD *)this + 161);
      v23 = v21 - 1;
      v24 = v23 & (37 * v2);
      v7 = (int *)(v22 + 16 * v24);
      v25 = *v7;
      if (*v7 != v2)
      {
        v26 = 0;
        v27 = 1;
        while (v25 != -1)
        {
          if (v26)
            v28 = 0;
          else
            v28 = v25 == -2;
          if (v28)
            v26 = v7;
          v29 = v24 + v27++;
          v24 = v29 & v23;
          v7 = (int *)(v22 + 16 * v24);
          v25 = *v7;
          if (*v7 == v2)
            goto LABEL_14;
        }
        if (v26)
          v7 = v26;
      }
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_14;
  }
  if (v4 + ~v20 - *((_DWORD *)this + 325) <= v4 >> 3)
    goto LABEL_34;
LABEL_14:
  ++*((_DWORD *)this + 324);
  if (*v7 != -1)
    --*((_DWORD *)this + 325);
  *v7 = v2;
  *((_QWORD *)v7 + 1) = 0;
LABEL_17:
  v13 = (_DWORD *)*((_QWORD *)v7 + 1);
  if (!v13)
  {
    *((_QWORD *)this + 33) += 4;
    v14 = *((_QWORD *)this + 23);
    if (v14 && ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 4 <= *((_QWORD *)this + 24) - v14)
    {
      v13 = (_DWORD *)((v14 + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)this + 23) = v13 + 1;
      if (!v13)
        goto LABEL_28;
    }
    else
    {
      v15 = *((_DWORD *)this + 52) >> 7;
      if (v15 >= 0x1E)
        LOBYTE(v15) = 30;
      v16 = 4096 << v15;
      buffer = (char *)llvm::allocate_buffer(4096 << v15, (std::align_val_t)8uLL);
      v18 = *((unsigned int *)this + 52);
      if (v18 >= *((_DWORD *)this + 53))
      {
        v30 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 200, (char *)this + 216, v18 + 1, 8);
        buffer = v30;
        LODWORD(v18) = *((_DWORD *)this + 52);
      }
      *(_QWORD *)(*((_QWORD *)this + 25) + 8 * v18) = buffer;
      ++*((_DWORD *)this + 52);
      *((_QWORD *)this + 24) = &buffer[v16];
      v13 = (_DWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)this + 23) = v13 + 1;
      if (!v13)
        goto LABEL_28;
    }
    *v13 = 0;
LABEL_28:
    *((_QWORD *)v7 + 1) = v13;
  }
  result = (*v13 + 1);
  *v13 = result;
  return result;
}

uint64_t llvm::MCContext::GetInstance(llvm::MCContext *this, size_t __sz)
{
  int v2;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  char *buffer;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  int *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  char *v31;

  v2 = __sz;
  v4 = *((_DWORD *)this + 326);
  if (!v4)
    goto LABEL_33;
  v5 = *((_QWORD *)this + 161);
  v6 = (v4 - 1) & (37 * v2);
  v7 = (int *)(v5 + 16 * v6);
  v8 = *v7;
  if (*v7 == v2)
    goto LABEL_17;
  v9 = 0;
  v10 = 1;
  while (v8 != -1)
  {
    if (v9)
      v11 = 0;
    else
      v11 = v8 == -2;
    if (v11)
      v9 = v7;
    v12 = v6 + v10++;
    v6 = v12 & (v4 - 1);
    v7 = (int *)(v5 + 16 * v6);
    v8 = *v7;
    if (*v7 == v2)
      goto LABEL_17;
  }
  if (v9)
    v7 = v9;
  v21 = *((_DWORD *)this + 324);
  if (4 * v21 + 4 >= 3 * v4)
  {
LABEL_33:
    v4 *= 2;
LABEL_34:
    llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)this + 1288, v4);
    v22 = *((_DWORD *)this + 326);
    if (v22)
    {
      v23 = *((_QWORD *)this + 161);
      v24 = v22 - 1;
      v25 = v24 & (37 * v2);
      v7 = (int *)(v23 + 16 * v25);
      v26 = *v7;
      if (*v7 != v2)
      {
        v27 = 0;
        v28 = 1;
        while (v26 != -1)
        {
          if (v27)
            v29 = 0;
          else
            v29 = v26 == -2;
          if (v29)
            v27 = v7;
          v30 = v25 + v28++;
          v25 = v30 & v24;
          v7 = (int *)(v23 + 16 * v25);
          v26 = *v7;
          if (*v7 == v2)
            goto LABEL_14;
        }
        if (v27)
          v7 = v27;
      }
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_14;
  }
  if (v4 + ~v21 - *((_DWORD *)this + 325) <= v4 >> 3)
    goto LABEL_34;
LABEL_14:
  ++*((_DWORD *)this + 324);
  if (*v7 != -1)
    --*((_DWORD *)this + 325);
  *v7 = v2;
  *((_QWORD *)v7 + 1) = 0;
LABEL_17:
  v13 = (unsigned int *)*((_QWORD *)v7 + 1);
  if (v13)
    return *v13;
  *((_QWORD *)this + 33) += 4;
  v15 = *((_QWORD *)this + 23);
  if (v15 && ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 4 <= *((_QWORD *)this + 24) - v15)
  {
    v16 = (unsigned int *)((v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 23) = v16 + 1;
    if (!v16)
      goto LABEL_29;
  }
  else
  {
    v17 = *((_DWORD *)this + 52) >> 7;
    if (v17 >= 0x1E)
      LOBYTE(v17) = 30;
    v18 = 4096 << v17;
    buffer = (char *)llvm::allocate_buffer(4096 << v17, (std::align_val_t)8uLL);
    v20 = *((unsigned int *)this + 52);
    if (v20 >= *((_DWORD *)this + 53))
    {
      v31 = buffer;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 200, (char *)this + 216, v20 + 1, 8);
      buffer = v31;
      LODWORD(v20) = *((_DWORD *)this + 52);
    }
    *(_QWORD *)(*((_QWORD *)this + 25) + 8 * v20) = buffer;
    ++*((_DWORD *)this + 52);
    *((_QWORD *)this + 24) = &buffer[v18];
    v16 = (unsigned int *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 23) = v16 + 1;
    if (!v16)
      goto LABEL_29;
  }
  *v16 = 0;
LABEL_29:
  *((_QWORD *)v7 + 1) = v16;
  return *v16;
}

uint64_t llvm::MCContext::createDirectionalLocalSymbol(llvm::MCContext *this, size_t a2)
{
  char *v3;
  uint64_t result;
  int v5[8];
  __int16 v6;

  *(_QWORD *)v5 = a2 | (unint64_t)(llvm::MCContext::NextInstance(this, a2) << 32);
  v3 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::FindAndConstruct((uint64_t)this + 1176, v5);
  result = *((_QWORD *)v3 + 1);
  if (!result)
  {
    *(_QWORD *)v5 = "tmp";
    v6 = 259;
    result = llvm::MCContext::createNamedTempSymbol(this, (const llvm::Twine *)v5);
    *((_QWORD *)v3 + 1) = result;
  }
  return result;
}

uint64_t llvm::MCContext::getDirectionalLocalSymbol(llvm::MCContext *this, size_t a2, int a3)
{
  char *v4;
  uint64_t result;
  int v6[8];
  __int16 v7;

  *(_QWORD *)v6 = a2 | ((unint64_t)(llvm::MCContext::GetInstance(this, a2) + (a3 ^ 1)) << 32);
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::FindAndConstruct((uint64_t)this + 1176, v6);
  result = *((_QWORD *)v4 + 1);
  if (!result)
  {
    *(_QWORD *)v6 = "tmp";
    v7 = 259;
    result = llvm::MCContext::createNamedTempSymbol(this, (const llvm::Twine *)v6);
    *((_QWORD *)v4 + 1) = result;
  }
  return result;
}

uint64_t llvm::MCContext::lookupSymbol(llvm::MCContext *this, const char **a2)
{
  size_t v3;
  int8x16_t *v4;
  int Key;
  uint64_t v6;
  void *v7;
  int v9;
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = xmmword_181236BB0;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (int8x16_t *)*a2;
        if (*a2)
          v3 = strlen(*a2);
        else
          v3 = 0;
        break;
      case 4:
        v9 = (*a2)[23];
        if (v9 >= 0)
          v4 = (int8x16_t *)*a2;
        else
          v4 = *(int8x16_t **)*a2;
        if (v9 >= 0)
          v3 = *((unsigned __int8 *)*a2 + 23);
        else
          v3 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
      case 6:
        v4 = (int8x16_t *)*a2;
        v3 = (size_t)a2[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v10);
    v4 = (int8x16_t *)v10;
    v3 = v11;
  }
  Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 143, v4, (const unsigned __int8 *)v3);
  if (Key != -1 && Key != (unint64_t)*((unsigned int *)this + 288))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 143) + 8 * Key) + 8);
    v7 = v10;
    if (v10 == v12)
      return v6;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = v10;
  if (v10 != v12)
LABEL_8:
    free(v7);
  return v6;
}

_QWORD *llvm::MCContext::reportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 2056) = 1;
  v5 = a2;
  v6[0] = off_1E0E50618;
  v6[1] = &v5;
  v6[2] = a3;
  v7 = v6;
  llvm::MCContext::reportCommon((_QWORD *)a1, a2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t llvm::MCContext::getMachOSection(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, _BYTE *a9)
{
  uint64_t v16;
  int8x16_t *v17;
  std::string::size_type size;
  uint64_t *v19;
  char v20;
  char v21;
  char v22;
  uint64_t TempSymbol;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char *buffer;
  uint64_t v31;
  unint64_t v32;
  int v34;
  int v35;
  int v36;
  _QWORD v37[4];
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  std::string v41;

  v37[0] = a2;
  v37[1] = a3;
  v37[2] = 44;
  v38 = 2053;
  v16 = a1 + 1752;
  v39[0] = v37;
  v39[2] = a4;
  v39[3] = a5;
  v40 = 1282;
  llvm::Twine::str((llvm::Twine *)v39, &v41);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = (int8x16_t *)&v41;
  else
    v17 = (int8x16_t *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  v19 = llvm::StringMap<mlir::Attribute,llvm::MallocAllocator>::try_emplace<>(v16, v17, (const unsigned __int8 *)size);
  v21 = v20;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (v21)
  {
    v36 = a6;
    v35 = a8;
    if (a9)
    {
      v22 = 1;
      HIBYTE(v40) = 1;
      if (*a9)
      {
        v39[0] = a9;
        v22 = 3;
      }
      LOBYTE(v40) = v22;
      TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)a1, (const llvm::Twine *)v39, 0);
    }
    else
    {
      TempSymbol = 0;
    }
    v24 = *v19 + 16;
    v25 = *(_QWORD *)*v19;
    *(_QWORD *)(a1 + 648) += 248;
    v26 = *(_QWORD *)(a1 + 568);
    if (v26 && ((v26 + 7) & 0xFFFFFFFFFFFFFFF8) - v26 + 248 <= *(_QWORD *)(a1 + 576) - v26)
    {
      v27 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v34 = a7;
      v28 = *(_DWORD *)(a1 + 592) >> 7;
      if (v28 >= 0x1E)
        LOBYTE(v28) = 30;
      v29 = 4096 << v28;
      buffer = (char *)llvm::allocate_buffer(4096 << v28, (std::align_val_t)8uLL);
      v31 = *(unsigned int *)(a1 + 592);
      if (v31 >= *(_DWORD *)(a1 + 596))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 584, (void *)(a1 + 600), v31 + 1, 8);
        LODWORD(v31) = *(_DWORD *)(a1 + 592);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * v31) = buffer;
      ++*(_DWORD *)(a1 + 592);
      *(_QWORD *)(a1 + 576) = &buffer[v29];
      v27 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
      a7 = v34;
    }
    *(_QWORD *)(a1 + 568) = v27 + 248;
    v32 = v25 - a5;
    if (v25 < v25 - a5)
      v32 = v25;
    *(_QWORD *)(*v19 + 8) = llvm::MCSectionMachO::MCSectionMachO(v27, a2, a3, v24 + v32, v25 - v32, v36, a7, v35, TempSymbol);
  }
  return *(_QWORD *)(*v19 + 8);
}

unint64_t llvm::MCContext::createELFSectionImpl(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, int a4, int a5, int a6, int a7, uint64_t a8, char a9, int a10, uint64_t a11)
{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *AssociatedFragment;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char *buffer;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v39;
  char v44[8];
  const char *v45;
  __int16 v46;
  uint64_t v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v15 = llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(a1 + 1144, a2, a3);
  v16 = *v15;
  v17 = *(_QWORD *)(*v15 + 8);
  if (!v17)
    goto LABEL_21;
  v18 = *(_QWORD **)v17;
  if (*(_QWORD *)v17)
  {
LABEL_3:
    if (v18 != (_QWORD *)llvm::MCSymbol::AbsolutePseudoFragment)
    {
      v17 = *(_QWORD *)(v16 + 8);
      AssociatedFragment = *(_QWORD **)v17;
      if (!*(_QWORD *)v17)
      {
        *(_DWORD *)(v17 + 8) |= 8u;
        AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
        *(_QWORD *)v17 = AssociatedFragment;
        v17 = *(_QWORD *)(v16 + 8);
      }
      if (*(_QWORD *)(AssociatedFragment[2] + 8) == v17)
      {
LABEL_19:
        if (!v17)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
LABEL_7:
    v45 = "invalid symbol redefinition";
    v46 = 259;
    *(_BYTE *)(a1 + 2056) = 1;
    v47 = 0;
    v48[0] = off_1E0E50618;
    v48[1] = &v47;
    v48[2] = &v45;
    v49 = v48;
    llvm::MCContext::reportCommon((_QWORD *)a1, 0, (uint64_t)v48);
    v20 = v49;
    if (v49 == v48)
    {
      v21 = 4;
      v20 = v48;
    }
    else
    {
      if (!v49)
      {
LABEL_18:
        v17 = *(_QWORD *)(v16 + 8);
        goto LABEL_19;
      }
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
    goto LABEL_18;
  }
  if ((*(_DWORD *)(v17 + 8) & 0x7080) == 0x2000)
  {
    *(_DWORD *)(v17 + 8) |= 8u;
    v22 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
    *(_QWORD *)v17 = v22;
    v17 = *(_QWORD *)(v16 + 8);
    if (!v22)
      goto LABEL_19;
    v18 = *(_QWORD **)v17;
    if (!*(_QWORD *)v17)
    {
      if ((*(_DWORD *)(v17 + 8) & 0x7080) != 0x2000)
        goto LABEL_7;
      *(_DWORD *)(v17 + 8) |= 8u;
      v18 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
      *(_QWORD *)v17 = v18;
      if (!v18)
        goto LABEL_7;
    }
    goto LABEL_3;
  }
LABEL_20:
  if (!*(_QWORD *)v17)
  {
    if ((*(_DWORD *)(v17 + 8) & 0x7080) != 0x2000)
      goto LABEL_25;
    *(_DWORD *)(v17 + 8) |= 8u;
    v39 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
    *(_QWORD *)v17 = v39;
    if (!v39)
    {
      v17 = *(_QWORD *)(v16 + 8);
      goto LABEL_25;
    }
  }
LABEL_21:
  v44[0] = 0;
  v23 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, a2, a3, v44);
  v24 = llvm::MCSymbol::operator new(40, *v23, a1);
  v17 = v24;
  v25 = *v23;
  *(_QWORD *)v24 = 0;
  v26 = *(_DWORD *)(v24 + 8) & 0xFFF00000;
  *(_WORD *)(v24 + 12) = 0;
  *(_DWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  *(_DWORD *)(v24 + 8) = v26 | (v25 != 0) | 0x200;
  if (v25)
    *(_QWORD *)(v24 - 8) = v25;
  *(_QWORD *)(v24 + 32) = 0;
  if (!*(_QWORD *)(v16 + 8))
    *(_QWORD *)(v16 + 8) = v24;
LABEL_25:
  llvm::MCSymbolELF::setBinding((llvm::MCSymbolELF *)v17, 0);
  llvm::MCSymbolELF::setType(v17, 3);
  *(_QWORD *)(a1 + 552) += 256;
  v27 = *(_QWORD *)(a1 + 472);
  if (v27 && ((v27 + 7) & 0xFFFFFFFFFFFFFFF8) - v27 + 256 <= *(_QWORD *)(a1 + 480) - v27)
  {
    v28 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v29 = *(_DWORD *)(a1 + 496) >> 7;
    if (v29 >= 0x1E)
      LOBYTE(v29) = 30;
    v30 = 4096 << v29;
    buffer = (char *)llvm::allocate_buffer(4096 << v29, (std::align_val_t)8uLL);
    v32 = *(unsigned int *)(a1 + 496);
    if (v32 >= *(_DWORD *)(a1 + 500))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 488, (void *)(a1 + 504), v32 + 1, 8);
      LODWORD(v32) = *(_DWORD *)(a1 + 496);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 488) + 8 * v32) = buffer;
    ++*(_DWORD *)(a1 + 496);
    *(_QWORD *)(a1 + 480) = &buffer[v30];
    v28 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 472) = v28 + 256;
  llvm::MCSection::MCSection(v28, 1, (uint64_t)a2, (uint64_t)a3, a6, v17);
  *(_QWORD *)v28 = &unk_1E0E20120;
  *(_DWORD *)(v28 + 224) = a4;
  *(_DWORD *)(v28 + 228) = a5;
  *(_DWORD *)(v28 + 232) = a10;
  *(_DWORD *)(v28 + 236) = a7;
  v33 = 4;
  if (!a9)
    v33 = 0;
  *(_QWORD *)(v28 + 240) = v33 | a8 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(v28 + 248) = a11;
  if ((a8 & 0xFFFFFFFFFFFFFFF8) != 0)
    llvm::MCSymbolELF::setIsSignature(a8 & 0xFFFFFFFFFFFFFFF8);
  v34 = operator new(0xE8uLL);
  v35 = llvm::MCFragment::MCFragment((uint64_t)v34, 1, 0, 0);
  *(_WORD *)(v35 + 52) = 0;
  *(_QWORD *)(v35 + 56) = 0;
  *(_QWORD *)(v35 + 64) = v35 + 88;
  *(_OWORD *)(v35 + 72) = xmmword_181233280;
  *(_QWORD *)(v35 + 120) = v35 + 136;
  *(_QWORD *)(v35 + 128) = 0x400000000;
  v36 = *(uint64_t **)(v28 + 112);
  v37 = *v36;
  *(_QWORD *)v35 = *v36;
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)(v37 + 8) = v35;
  *v36 = v35;
  *(_QWORD *)(v35 + 16) = v28;
  *(_QWORD *)v17 = v35;
  return v28;
}

unint64_t llvm::MCContext::getELFSection(llvm::MCContext *this, const llvm::Twine *a2, int a3, int a4, int a5, const llvm::Twine *a6, char a7, int a8, const llvm::MCSymbolELF *a9)
{
  std::string::size_type size;
  const llvm::MCSymbolELF *Symbol;
  std::string __p;

  if (*((unsigned __int8 *)a6 + 32) < 2u)
    goto LABEL_9;
  llvm::Twine::str(a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_7;
LABEL_9:
    Symbol = 0;
    return llvm::MCContext::getELFSection(this, a2, a3, a4, a5, Symbol, a7, a8, a9);
  }
  if (!size)
    goto LABEL_9;
LABEL_7:
  Symbol = (const llvm::MCSymbolELF *)llvm::MCContext::getOrCreateSymbol(this, (const char **)a6);
  return llvm::MCContext::getELFSection(this, a2, a3, a4, a5, Symbol, a7, a8, a9);
}

unint64_t llvm::MCContext::getELFSection(llvm::MCContext *this, const llvm::Twine *a2, int a3, int a4, int a5, const llvm::MCSymbolELF *a6, char a7, int a8, const llvm::MCSymbolELF *a9)
{
  const llvm::MCSymbolELF *v9;
  _QWORD *v14;
  std::string *v15;
  size_t size;
  const char *v17;
  uint64_t v18;
  __int128 *p_dst;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  const llvm::MCSymbolELF *v25;
  llvm::MCContext *v26;
  uint64_t v27;
  std::string *v28;
  __int128 *v29;
  unint64_t v30;
  uint64_t *v31;
  char v32;
  char v33;
  int v34;
  uint64_t *v35;
  unint64_t v36;
  const llvm::MCSymbolELF *v37;
  int v38;
  unint64_t ELFSectionImpl;
  _QWORD *v40;
  uint64_t v41;
  BOOL v46;
  BOOL v60;
  _BOOL4 v64;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v71;
  uint64_t **v73;
  __int128 v74;
  std::string v76;
  __int128 __dst;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  int v81;
  void *__p[2];
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;

  v9 = a6;
  if (a6)
  {
    if ((*((_BYTE *)a6 + 8) & 1) != 0)
    {
      v14 = (_QWORD *)*((_QWORD *)a6 - 1);
      *(_QWORD *)&v74 = v14 + 2;
      *((_QWORD *)&v74 + 1) = *v14;
    }
    else
    {
      v74 = 0uLL;
    }
  }
  else
  {
    *(_QWORD *)&v74 = "";
    *((_QWORD *)&v74 + 1) = 0;
  }
  llvm::Twine::str(a2, &v76);
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v76;
  else
    v15 = (std::string *)v76.__r_.__value_.__r.__words[0];
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
  else
    size = v76.__r_.__value_.__l.__size_;
  if (a9)
  {
    if ((*((_BYTE *)a9 + 8) & 1) != 0)
    {
      v40 = (_QWORD *)*((_QWORD *)a9 - 1);
      v41 = *v40;
      v17 = (const char *)(v40 + 2);
      v18 = v41;
      if (size >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_41;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      if (size >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
        abort();
    }
  }
  else
  {
    v18 = 0;
    v17 = "";
    if (size >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  v73 = (uint64_t **)((char *)this + 1776);
  if (size >= 0x17)
  {
    v21 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v21 = size | 7;
    v22 = a3;
    v23 = a4;
    v24 = a5;
    v25 = v9;
    v26 = this;
    v27 = v21 + 1;
    v28 = v15;
    v29 = (__int128 *)operator new(v21 + 1);
    v15 = v28;
    p_dst = v29;
    v30 = v27 | 0x8000000000000000;
    this = v26;
    v9 = v25;
    a5 = v24;
    a4 = v23;
    a3 = v22;
    *((_QWORD *)&__dst + 1) = size;
    v78 = v30;
    *(_QWORD *)&__dst = v29;
    v20 = a8;
    goto LABEL_23;
  }
  HIBYTE(v78) = size;
  p_dst = &__dst;
  v20 = a8;
  if (size)
LABEL_23:
    memmove(p_dst, v15, size);
  *((_BYTE *)p_dst + size) = 0;
  v79 = v74;
  *(_QWORD *)&v80 = v17;
  *((_QWORD *)&v80 + 1) = v18;
  v81 = v20;
  *(_OWORD *)__p = __dst;
  v83 = v78;
  v86 = v20;
  v84 = v74;
  v85 = v80;
  v87 = 0;
  v31 = std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::__emplace_unique_key_args<llvm::MCContext::ELFSectionKey,std::pair<llvm::MCContext::ELFSectionKey,decltype(nullptr)>>(v73, (unsigned __int8 *)__p, (uint64_t)__p);
  v33 = v32;
  if (SHIBYTE(v83) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if (v33)
        goto LABEL_27;
      return v31[12];
    }
  }
  else if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v76.__r_.__value_.__l.__data_);
  if (v33)
  {
LABEL_27:
    v34 = *((char *)v31 + 55);
    if (v34 >= 0)
      v35 = v31 + 4;
    else
      v35 = (uint64_t *)v31[4];
    if (v34 >= 0)
      v36 = *((unsigned __int8 *)v31 + 55);
    else
      v36 = v31[5];
    if ((a4 & 0x20000000) != 0)
    {
      v38 = 3;
      v37 = a9;
      goto LABEL_84;
    }
    v37 = a9;
    if ((a4 & 4) != 0)
    {
      v38 = 2;
      goto LABEL_84;
    }
    if ((a4 & 1) == 0)
    {
LABEL_36:
      v38 = 4;
LABEL_84:
      ELFSectionImpl = llvm::MCContext::createELFSectionImpl((uint64_t)this, (int8x16_t *)v35, (const unsigned __int8 *)v36, a3, a4, v38, a5, (uint64_t)v9, a7, v20, (uint64_t)v37);
      v31[12] = ELFSectionImpl;
      llvm::MCContext::recordELFMergeableSectionInfo((uint64_t)this, *(void **)(ELFSectionImpl + 200), *(void **)(ELFSectionImpl + 208), *(_DWORD *)(ELFSectionImpl + 228), *(_DWORD *)(ELFSectionImpl + 232), *(_DWORD *)(ELFSectionImpl + 236));
      return ELFSectionImpl;
    }
    if ((a4 & 0x400) != 0)
    {
      if ((a3 & 8) != 0)
        v38 = 12;
      else
        v38 = 13;
      goto LABEL_84;
    }
    if (v36 == 4)
    {
      if (*(_DWORD *)v35 != 1936941614)
        goto LABEL_36;
LABEL_83:
      v38 = 15;
      goto LABEL_84;
    }
    if (v36 < 5)
      goto LABEL_36;
    if (*(_DWORD *)v35 == 1936941614 && *((_BYTE *)v35 + 4) == 46)
      goto LABEL_83;
    if (v36 >= 0x10)
    {
      if (*v35 == 0x6E696C2E756E672ELL && v35[1] == 0x2E622E65636E6F6BLL)
        goto LABEL_83;
      if (v36 >= 0x11)
      {
        v46 = *v35 == 0x696C2E6D766C6C2ELL && v35[1] == 0x622E65636E6F6B6ELL;
        if (v46 && *((_BYTE *)v35 + 16) == 46)
          goto LABEL_83;
      }
    }
    else
    {
      switch(v36)
      {
        case 0xCuLL:
          if (*v35 == 0x65722E617461642ELL && *((_DWORD *)v35 + 2) == 1869753964)
          {
            v38 = 20;
            goto LABEL_84;
          }
          break;
        case 6uLL:
          if (*(_DWORD *)v35 == 1952539694 && *((_WORD *)v35 + 2) == 12641)
            goto LABEL_116;
          break;
        case 5uLL:
          if (*(_DWORD *)v35 != 1952539694 || *((_BYTE *)v35 + 4) != 97)
          {
            if (*(_DWORD *)v35 == 1935832110 && *((_BYTE *)v35 + 4) == 115)
            {
              v38 = 12;
              goto LABEL_84;
            }
            goto LABEL_36;
          }
LABEL_116:
          v38 = 19;
          goto LABEL_84;
      }
    }
    if (*(_DWORD *)v35 == 1952539694 && *((_WORD *)v35 + 2) == 11873)
      goto LABEL_116;
    if (v36 == 8)
    {
      if (*v35 == 0x31617461646F722ELL)
        goto LABEL_36;
    }
    else
    {
      if (v36 == 7)
      {
        if (*(_DWORD *)v35 == 1685025326 && *(_DWORD *)((char *)v35 + 3) == 1635017060)
          goto LABEL_36;
        if ((*(_DWORD *)v35 != 1935832110 || *((_WORD *)v35 + 2) != 11891)
          && (*(_DWORD *)v35 != 1633973294 || *(_DWORD *)((char *)v35 + 3) != 778138721))
        {
LABEL_158:
          v64 = *(_DWORD *)v35 != 1650811950 || *(_DWORD *)((char *)v35 + 3) != 1600615778;
          v38 = 4 * v64;
          goto LABEL_84;
        }
        goto LABEL_153;
      }
      if (v36 < 8)
      {
LABEL_121:
        if (*(_DWORD *)v35 != 1935832110 || *((_WORD *)v35 + 2) != 11891)
        {
          if (v36 >= 0x11)
          {
            if (*v35 != 0x6E696C2E756E672ELL || v35[1] != 0x62742E65636E6F6BLL || *((_BYTE *)v35 + 16) != 46)
            {
              if (v36 >= 0x12)
              {
                v66 = *v35 == 0x696C2E6D766C6C2ELL && v35[1] == 0x742E65636E6F6B6ELL && *((_WORD *)v35 + 8) == 11874;
                if (v66
                  || (*(_DWORD *)v35 == 1633973294 ? (v67 = *(_DWORD *)((char *)v35 + 3) == 778138721) : (v67 = 0),
                      v67
                   || (*v35 == 0x6E696C2E756E672ELL ? (v68 = v35[1] == 0x64742E65636E6F6BLL) : (v68 = 0),
                       v68 ? (v69 = *((_BYTE *)v35 + 16) == 46) : (v69 = 0),
                       v69)))
                {
                  v38 = 13;
                  v37 = a9;
                  goto LABEL_84;
                }
                v71 = *v35 == 0x696C2E6D766C6C2ELL && v35[1] == 0x742E65636E6F6B6ELL && *((_WORD *)v35 + 8) == 11876;
                v37 = a9;
                if (!v71)
                  goto LABEL_158;
              }
              else if (*(_DWORD *)v35 != 1633973294 || *(_DWORD *)((char *)v35 + 3) != 778138721)
              {
                v60 = *v35 == 0x6E696C2E756E672ELL && v35[1] == 0x64742E65636E6F6BLL;
                if (!v60 || *((_BYTE *)v35 + 16) != 46)
                  goto LABEL_158;
              }
            }
          }
          else if (v36 == 6)
          {
            if (*(_DWORD *)v35 != 1633973294 || *((_WORD *)v35 + 2) != 24948)
              goto LABEL_36;
          }
          else if (*(_DWORD *)v35 != 1633973294 || *(_DWORD *)((char *)v35 + 3) != 778138721)
          {
            goto LABEL_158;
          }
        }
LABEL_153:
        v38 = 13;
        goto LABEL_84;
      }
    }
    if (*v35 == 0x2E617461646F722ELL)
      goto LABEL_36;
    goto LABEL_121;
  }
  return v31[12];
}

void llvm::MCContext::recordELFMergeableSectionInfo(uint64_t a1, void *a2, void *a3, unsigned int a4, int a5, unsigned int a6)
{
  size_t v9;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  BOOL v14;
  _QWORD **v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  void *__p[2];
  unint64_t v31;
  unint64_t v32;
  int v33;
  void *__src[2];
  uint64_t v35;

  v9 = (size_t)a3;
  __src[0] = a2;
  __src[1] = a3;
  if (a5 == -1)
  {
    __p[0] = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 2112), (uint64_t)__src, __p) & 1) == 0)
    {
      v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(a1 + 2112, (uint64_t)__src, (uint64_t)__src, (_QWORD *)__p[0]);
      *(_OWORD *)v12 = *(_OWORD *)__src;
    }
    v11 = __src[0];
    v9 = (size_t)__src[1];
    if ((a4 & 0x10) != 0)
      goto LABEL_18;
  }
  else
  {
    v11 = __src[0];
    if ((a4 & 0x10) != 0)
      goto LABEL_18;
  }
  __p[0] = v11;
  __p[1] = (void *)v9;
  if (v9 < 0xB
    || (*v11 == 0x2E617461646F722ELL ? (v13 = *(_QWORD *)((char *)v11 + 3) == 0x7274732E61746164) : (v13 = 0),
        !v13
     && (*v11 == 0x2E617461646F722ELL ? (v14 = *(_QWORD *)((char *)v11 + 3) == 0x7473632E61746164) : (v14 = 0), !v14)))
  {
    *(_QWORD *)&v27 = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 2112), (uint64_t)__p, &v27))return;
    v11 = __src[0];
    v9 = (size_t)__src[1];
  }
LABEL_18:
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v15 = (_QWORD **)(a1 + 2088);
  if (v9 >= 0x17)
  {
    v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v17 = v9 | 7;
    v18 = v17 + 1;
    v16 = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&v27 + 1) = v9;
    v28 = v18 | 0x8000000000000000;
    *(_QWORD *)&v27 = v16;
    goto LABEL_25;
  }
  HIBYTE(v28) = v9;
  v16 = &v27;
  if (v9)
LABEL_25:
    memmove(v16, v11, v9);
  *((_BYTE *)v16 + v9) = 0;
  v29 = __PAIR64__(a6, a4);
  *(_OWORD *)__p = v27;
  v31 = v28;
  v32 = __PAIR64__(a6, a4);
  v33 = a5;
  v19 = std::__tree<std::__value_type<llvm::MCContext::ELFEntrySizeKey,unsigned int>,std::__map_value_compare<llvm::MCContext::ELFEntrySizeKey,std::__value_type<llvm::MCContext::ELFEntrySizeKey,unsigned int>,std::less<llvm::MCContext::ELFEntrySizeKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFEntrySizeKey,unsigned int>>>::__find_equal<llvm::MCContext::ELFEntrySizeKey>(a1 + 2088, &v35, __p);
  if (*v19)
  {
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(__p[0]);
    return;
  }
  v20 = v19;
  v21 = operator new(0x48uLL);
  v21[2] = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v22 = v31;
  v23 = v32;
  v31 = 0;
  *((_QWORD *)v21 + 6) = v22;
  *((_QWORD *)v21 + 7) = v23;
  *((_DWORD *)v21 + 16) = v33;
  v24 = v35;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v24;
  *v20 = (uint64_t)v21;
  v25 = (_QWORD *)**v15;
  if (v25)
  {
    *v15 = v25;
    v26 = (uint64_t *)*v20;
  }
  else
  {
    v26 = (uint64_t *)v21;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 2096), v26);
  ++*(_QWORD *)(a1 + 2104);
  if (SHIBYTE(v31) < 0)
    goto LABEL_33;
}

uint64_t *llvm::MCContext::getGOFFSection(uint64_t a1, void *__src, size_t __len, int a4, uint64_t a5, uint64_t a6)
{
  void **p_dst;
  size_t v13;
  size_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *result;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *buffer;
  uint64_t v23;
  char *v24;
  void **__dst;
  size_t v26;
  unint64_t v27;
  void **v28;

  if (!__src)
  {
    __dst = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v26 = __len;
    v27 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v27) = __len;
    p_dst = (void **)&__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_12:
  v28 = (void **)&__dst;
  v15 = std::__tree<std::__value_type<std::string,llvm::MCSectionGOFF *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::MCSectionGOFF *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::MCSectionGOFF *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1824), (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  v16 = v15;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__dst);
    result = v16[7];
    if (result)
      return result;
  }
  else
  {
    result = v15[7];
    if (result)
      return result;
  }
  *(_QWORD *)(a1 + 744) += 240;
  v18 = *(_QWORD *)(a1 + 664);
  if (v18 && ((v18 + 7) & 0xFFFFFFFFFFFFFFF8) - v18 + 240 <= *(_QWORD *)(a1 + 672) - v18)
  {
    v19 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 688) >> 7;
    if (v20 >= 0x1E)
      LOBYTE(v20) = 30;
    v21 = 4096 << v20;
    buffer = (char *)llvm::allocate_buffer(4096 << v20, (std::align_val_t)8uLL);
    v23 = *(unsigned int *)(a1 + 688);
    if (v23 >= *(_DWORD *)(a1 + 692))
    {
      v24 = buffer;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 680, (void *)(a1 + 696), v23 + 1, 8);
      buffer = v24;
      LODWORD(v23) = *(_DWORD *)(a1 + 688);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * v23) = buffer;
    ++*(_DWORD *)(a1 + 688);
    *(_QWORD *)(a1 + 672) = &buffer[v21];
    v19 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 664) = v19 + 240;
  result = (uint64_t *)llvm::MCSection::MCSection(v19, 2, (uint64_t)__src, __len, a4, 0);
  *result = (uint64_t)&unk_1E0E20180;
  result[28] = a5;
  result[29] = a6;
  v16[7] = result;
  return result;
}

unint64_t llvm::MCContext::getCOFFSection(uint64_t **this, const void *a2, std::string::size_type a3, int a4, int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8, unsigned int a9, _BYTE *a10)
{
  _QWORD *v11;
  uint64_t Symbol;
  uint64_t v18;
  uint64_t v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t *v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t TempSymbol;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  char *buffer;
  uint64_t v39;
  int v41;
  int v42;
  std::string v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  std::string __dst;
  __int128 v48;
  unint64_t v49;

  v11 = (_QWORD *)a6;
  if (a7)
  {
    WORD4(v44) = 261;
    v43.__r_.__value_.__r.__words[0] = a6;
    v43.__r_.__value_.__l.__size_ = a7;
    Symbol = llvm::MCContext::getOrCreateSymbol((llvm::MCContext *)this, (const char **)&v43.__r_.__value_.__l.__data_);
    v18 = Symbol;
    if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
    {
      v30 = *(uint64_t **)(Symbol - 8);
      v31 = *v30;
      v11 = v30 + 2;
      v19 = v31;
      if (a3 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_26;
    }
    else
    {
      v11 = 0;
      v19 = 0;
      if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
        abort();
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  v42 = a4;
  v41 = a5;
  if (a3 >= 0x17)
  {
    v21 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v21 = a3 | 7;
    v22 = v21 + 1;
    p_dst = (std::string *)operator new(v21 + 1);
    __dst.__r_.__value_.__l.__size_ = a3;
    __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_12:
    memmove(p_dst, a2, a3);
  p_dst->__r_.__value_.__s.__data_[a3] = 0;
  *(_QWORD *)&v48 = v11;
  *((_QWORD *)&v48 + 1) = v19;
  v49 = __PAIR64__(a9, a8);
  v23 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v43, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v43 = __dst;
  v44 = v48;
  v45 = v49;
  v46 = 0;
  v25 = std::__tree<std::__value_type<llvm::MCContext::COFFSectionKey,llvm::MCSectionCOFF *>,std::__map_value_compare<llvm::MCContext::COFFSectionKey,std::__value_type<llvm::MCContext::COFFSectionKey,llvm::MCSectionCOFF *>,std::less<llvm::MCContext::COFFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::COFFSectionKey,llvm::MCSectionCOFF *>>>::__emplace_unique_key_args<llvm::MCContext::COFFSectionKey,std::pair<llvm::MCContext::COFFSectionKey,decltype(nullptr)>>(this + 225, (unsigned __int8 *)&v43, (uint64_t)&v43);
  v26 = v24;
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v24 & 1) == 0)
      goto LABEL_18;
LABEL_21:
    if (a10)
    {
      v28 = 1;
      BYTE9(v44) = 1;
      if (*a10)
      {
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)a10;
        v28 = 3;
      }
      BYTE8(v44) = v28;
      TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)this, (const llvm::Twine *)&v43, 0);
    }
    else
    {
      TempSymbol = 0;
    }
    v32 = *((char *)v25 + 55);
    if (v32 >= 0)
      v33 = (uint64_t)(v25 + 4);
    else
      v33 = v25[4];
    if (v32 >= 0)
      v34 = *((unsigned __int8 *)v25 + 55);
    else
      v34 = v25[5];
    this[45] += 31;
    v35 = this[35];
    if (v35
      && (((unint64_t)v35 + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v35 + 248 <= (char *)this[36]
                                                                                             - (char *)v35)
    {
      v27 = ((unint64_t)v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v36 = *((_DWORD *)this + 76) >> 7;
      if (v36 >= 0x1E)
        LOBYTE(v36) = 30;
      v37 = 4096 << v36;
      buffer = (char *)llvm::allocate_buffer(4096 << v36, (std::align_val_t)8uLL);
      v39 = *((unsigned int *)this + 76);
      if (v39 >= *((_DWORD *)this + 77))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(this + 37), this + 39, v39 + 1, 8);
        LODWORD(v39) = *((_DWORD *)this + 76);
      }
      this[37][v39] = (uint64_t)buffer;
      ++*((_DWORD *)this + 76);
      this[36] = (uint64_t *)&buffer[v37];
      v27 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    this[35] = (uint64_t *)(v27 + 248);
    llvm::MCSection::MCSection(v27, 0, v33, v34, v41, TempSymbol);
    *(_QWORD *)v27 = &unk_1E0E20150;
    *(_DWORD *)(v27 + 224) = v42;
    *(_DWORD *)(v27 + 228) = -1;
    *(_QWORD *)(v27 + 232) = v18;
    *(_DWORD *)(v27 + 240) = a8;
    v25[10] = v27;
    if (v23 < 0)
      goto LABEL_43;
    return v27;
  }
  operator delete(v43.__r_.__value_.__l.__data_);
  if ((v26 & 1) != 0)
    goto LABEL_21;
LABEL_18:
  v27 = v25[10];
  if (v23 < 0)
LABEL_43:
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v27;
}

unint64_t llvm::MCContext::getCOFFSection(uint64_t **a1, const void *a2, std::string::size_type a3, int a4, int a5, _BYTE *a6)
{
  return llvm::MCContext::getCOFFSection(a1, a2, a3, a4, a5, (std::string::size_type)"", 0, 0, 0xFFFFFFFF, a6);
}

unint64_t llvm::MCContext::getWasmSection(llvm::MCContext *a1, llvm::Twine *a2, int a3, int a4, llvm::Twine *this, int a6)
{
  std::string::size_type size;
  uint64_t Symbol;
  std::string __p;

  if (*((unsigned __int8 *)this + 32) < 2u)
    goto LABEL_9;
  llvm::Twine::str(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_7;
LABEL_9:
    Symbol = 0;
    return llvm::MCContext::getWasmSection((uint64_t)a1, a2, a3, a4, Symbol, a6);
  }
  if (!size)
    goto LABEL_9;
LABEL_7:
  Symbol = llvm::MCContext::getOrCreateSymbol(a1, (const char **)this);
  *(_BYTE *)(Symbol + 42) = 1;
  return llvm::MCContext::getWasmSection((uint64_t)a1, a2, a3, a4, Symbol, a6);
}

unint64_t llvm::MCContext::getWasmSection(uint64_t a1, llvm::Twine *this, int a3, int a4, uint64_t a5, int a6)
{
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  size_t size;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  char v21;
  int v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t Symbol;
  int8x16_t *v26;
  const unsigned __int8 *v27;
  unint64_t v28;
  _QWORD *v29;
  const unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char *buffer;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v41;
  std::string v43;
  __int128 __dst;
  unint64_t v45;
  __int128 v46;
  int v47;
  void *__p[2];
  unint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;

  if (a5)
  {
    if ((*(_BYTE *)(a5 + 8) & 1) != 0)
    {
      v12 = *(_QWORD **)(a5 - 8);
      v13 = *v12;
      v10 = (const char *)(v12 + 2);
      v11 = v13;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v10 = "";
  }
  llvm::Twine::str(this, &v43);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v43;
  else
    v14 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  else
    size = v43.__r_.__value_.__l.__size_;
  if (size >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v41 = a4;
  if (size >= 0x17)
  {
    v17 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v17 = size | 7;
    v18 = v17 + 1;
    p_dst = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&__dst + 1) = size;
    v45 = v18 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v45) = size;
  p_dst = &__dst;
  if (size)
LABEL_19:
    memmove(p_dst, v14, size);
  *((_BYTE *)p_dst + size) = 0;
  *(_QWORD *)&v46 = v10;
  *((_QWORD *)&v46 + 1) = v11;
  v47 = a6;
  *(_OWORD *)__p = __dst;
  v49 = v45;
  v51 = a6;
  v50 = v46;
  v52 = 0;
  v19 = std::__tree<std::__value_type<llvm::MCContext::WasmSectionKey,llvm::MCSectionWasm *>,std::__map_value_compare<llvm::MCContext::WasmSectionKey,std::__value_type<llvm::MCContext::WasmSectionKey,llvm::MCSectionWasm *>,std::less<llvm::MCContext::WasmSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::WasmSectionKey,llvm::MCSectionWasm *>>>::__emplace_unique_key_args<llvm::MCContext::WasmSectionKey,std::pair<llvm::MCContext::WasmSectionKey,decltype(nullptr)>>((uint64_t **)(a1 + 1848), (unsigned __int8 *)__p, (uint64_t)__p);
  v21 = v20;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
LABEL_32:
    operator delete(v43.__r_.__value_.__l.__data_);
    if (v21)
      goto LABEL_23;
    return v19[10];
  }
  operator delete(__p[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_32;
LABEL_22:
  if (!v21)
    return v19[10];
LABEL_23:
  v22 = *((char *)v19 + 55);
  if (v22 >= 0)
    v23 = (int8x16_t *)(v19 + 4);
  else
    v23 = (int8x16_t *)v19[4];
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)v19 + 55);
  else
    v24 = v19[5];
  Symbol = llvm::MCContext::createSymbol(a1, v23, (const unsigned __int8 *)v24, 1, 0);
  if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
  {
    v29 = *(_QWORD **)(Symbol - 8);
    v30 = (const unsigned __int8 *)*v29;
    v26 = (int8x16_t *)(v29 + 2);
    v27 = v30;
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  *(_QWORD *)(*llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(a1 + 1144, v26, v27)+ 8) = Symbol;
  *(_DWORD *)(Symbol + 32) = 3;
  *(_BYTE *)(Symbol + 36) = 1;
  *(_QWORD *)(a1 + 936) += 264;
  v31 = *(_QWORD *)(a1 + 856);
  if (v31 && ((v31 + 7) & 0xFFFFFFFFFFFFFFF8) - v31 + 264 <= *(_QWORD *)(a1 + 864) - v31)
  {
    v28 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v32 = *(_DWORD *)(a1 + 880) >> 7;
    if (v32 >= 0x1E)
      LOBYTE(v32) = 30;
    v33 = 4096 << v32;
    buffer = (char *)llvm::allocate_buffer(4096 << v32, (std::align_val_t)8uLL);
    v35 = *(unsigned int *)(a1 + 880);
    if (v35 >= *(_DWORD *)(a1 + 884))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 872, (void *)(a1 + 888), v35 + 1, 8);
      LODWORD(v35) = *(_DWORD *)(a1 + 880);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 872) + 8 * v35) = buffer;
    ++*(_DWORD *)(a1 + 880);
    *(_QWORD *)(a1 + 864) = &buffer[v33];
    v28 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 856) = v28 + 264;
  llvm::MCSection::MCSection(v28, 4, (uint64_t)v23, v24, a3, Symbol);
  *(_QWORD *)v28 = &unk_1E0E201B0;
  *(_DWORD *)(v28 + 224) = a6;
  *(_QWORD *)(v28 + 232) = a5;
  *(_QWORD *)(v28 + 240) = 0;
  *(_DWORD *)(v28 + 248) = 0;
  *(_BYTE *)(v28 + 252) = 0;
  *(_DWORD *)(v28 + 256) = v41;
  v19[10] = v28;
  v36 = operator new(0xE8uLL);
  v37 = llvm::MCFragment::MCFragment((uint64_t)v36, 1, 0, 0);
  *(_WORD *)(v37 + 52) = 0;
  *(_QWORD *)(v37 + 56) = 0;
  *(_QWORD *)(v37 + 64) = v37 + 88;
  *(_OWORD *)(v37 + 72) = xmmword_181233280;
  *(_QWORD *)(v37 + 120) = v37 + 136;
  *(_QWORD *)(v37 + 128) = 0x400000000;
  v38 = *(uint64_t **)(v28 + 112);
  v39 = *v38;
  *(_QWORD *)v37 = *v38;
  *(_QWORD *)(v37 + 8) = v38;
  *(_QWORD *)(v39 + 8) = v37;
  *v38 = v37;
  *(_QWORD *)(v37 + 16) = v28;
  *(_QWORD *)Symbol = v37;
  return v28;
}

unint64_t llvm::MCContext::getXCOFFSection(uint64_t a1, void *__src, size_t __len, int a4, __int16 a5, int a6, _BYTE *TempSymbol, uint64_t a8)
{
  int v8;
  uint64_t v14;
  _QWORD *p_dst;
  void *p_p;
  size_t v17;
  _QWORD *v18;
  unsigned int v19;
  size_t v20;
  size_t v21;
  _QWORD *v22;
  size_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  size_t v28;
  void **v29;
  unsigned int v30;
  size_t v31;
  size_t v32;
  void **v33;
  size_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  char v40;
  void *v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t Symbol;
  unint64_t v46;
  const char *MappingClassString;
  uint64_t v48;
  char v49;
  uint64_t v50;
  BOOL v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char *buffer;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  void *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char *v77;
  _QWORD v80[4];
  __int16 v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v84;
  __int16 v85;
  void *__p;
  size_t v87;
  unint64_t v88;
  _QWORD *__dst;
  size_t v90;
  unint64_t v91;
  __int128 v92;
  const char *v93;
  int v94;
  char v95;
  uint64_t v96;

  v8 = a8;
  v14 = a8 & 0xFF00000000;
  if ((a8 & 0xFF00000000) != 0)
  {
    if (!__src)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      __dst = 0;
      v90 = 0;
      v91 = 0;
      goto LABEL_18;
    }
    if (__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_127;
    if (__len >= 0x17)
    {
      v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v20 = __len | 7;
      v21 = v20 + 1;
      p_dst = operator new(v20 + 1);
      v90 = __len;
      v91 = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v91) = __len;
      p_dst = &__dst;
      if (!__len)
        goto LABEL_17;
    }
    memmove(p_dst, __src, __len);
LABEL_17:
    *((_BYTE *)p_dst + __len) = 0;
    v19 = HIBYTE(v91);
    v18 = __dst;
    v17 = v90;
LABEL_18:
    if ((v19 & 0x80u) == 0)
      v22 = &__dst;
    else
      v22 = v18;
    if ((v19 & 0x80u) == 0)
      v23 = v19;
    else
      v23 = v17;
    if (v23 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v23 >= 0x17)
      {
        v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v25 = v23 | 7;
        v26 = v25 + 1;
        v24 = (__int128 *)operator new(v25 + 1);
        *((_QWORD *)&v82 + 1) = v23;
        v83 = v26 | 0x8000000000000000;
        *(_QWORD *)&v82 = v24;
      }
      else
      {
        HIBYTE(v83) = v23;
        v24 = &v82;
        if (!v23)
          goto LABEL_32;
      }
      memmove(v24, v22, v23);
LABEL_32:
      v27 = 0;
      *((_BYTE *)v24 + v23) = 0;
      LODWORD(v84) = v8;
      goto LABEL_54;
    }
LABEL_127:
    abort();
  }
  if (!__src)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    __p = 0;
    v87 = 0;
    v88 = 0;
    goto LABEL_39;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_127;
  if (__len >= 0x17)
  {
    v31 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v31 = __len | 7;
    v32 = v31 + 1;
    p_p = operator new(v31 + 1);
    v87 = __len;
    v88 = v32 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v88) = __len;
    p_p = &__p;
    if (!__len)
      goto LABEL_38;
  }
  memmove(p_p, __src, __len);
LABEL_38:
  *((_BYTE *)p_p + __len) = 0;
  v30 = HIBYTE(v88);
  v29 = (void **)__p;
  v28 = v87;
LABEL_39:
  if ((v30 & 0x80u) == 0)
    v33 = &__p;
  else
    v33 = v29;
  if ((v30 & 0x80u) == 0)
    v34 = v30;
  else
    v34 = v28;
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_127;
  if (v34 >= 0x17)
  {
    v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v36 = v34 | 7;
    v37 = v36 + 1;
    v35 = (__int128 *)operator new(v36 + 1);
    *((_QWORD *)&v82 + 1) = v34;
    v83 = v37 | 0x8000000000000000;
    *(_QWORD *)&v82 = v35;
  }
  else
  {
    HIBYTE(v83) = v34;
    v35 = &v82;
    if (!v34)
      goto LABEL_53;
  }
  memmove(v35, v33, v34);
LABEL_53:
  *((_BYTE *)v35 + v34) = 0;
  LOBYTE(v84) = a5;
  v27 = 1;
LABEL_54:
  BYTE4(v84) = v27;
  v92 = v82;
  v93 = (const char *)v83;
  v82 = 0uLL;
  v83 = 0;
  v94 = v84;
  v95 = v27;
  v96 = 0;
  v38 = std::__tree<std::__value_type<llvm::MCContext::XCOFFSectionKey,llvm::MCSectionXCOFF *>,std::__map_value_compare<llvm::MCContext::XCOFFSectionKey,std::__value_type<llvm::MCContext::XCOFFSectionKey,llvm::MCSectionXCOFF *>,std::less<llvm::MCContext::XCOFFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::XCOFFSectionKey,llvm::MCSectionXCOFF *>>>::__emplace_unique_key_args<llvm::MCContext::XCOFFSectionKey,std::pair<llvm::MCContext::XCOFFSectionKey,decltype(nullptr)>>((uint64_t **)(a1 + 1872), (const void **)&v92, (uint64_t)&v92);
  v40 = v39;
  if (SHIBYTE(v93) < 0)
  {
    operator delete((void *)v92);
    if (v14)
      goto LABEL_56;
  }
  else if (v14)
  {
LABEL_56:
    if ((SHIBYTE(v91) & 0x80000000) == 0)
      goto LABEL_62;
    v41 = __dst;
    goto LABEL_61;
  }
  if ((SHIBYTE(v88) & 0x80000000) == 0)
    goto LABEL_62;
  v41 = __p;
LABEL_61:
  operator delete(v41);
LABEL_62:
  if (v40)
  {
    v42 = *((char *)v38 + 55);
    if (v42 >= 0)
      v43 = v38 + 4;
    else
      v43 = (uint64_t *)v38[4];
    if (v42 >= 0)
      v44 = *((unsigned __int8 *)v38 + 55);
    else
      v44 = v38[5];
    if (v14)
    {
      LOWORD(v96) = 261;
      *(_QWORD *)&v92 = v43;
      *((_QWORD *)&v92 + 1) = v44;
      Symbol = llvm::MCContext::getOrCreateSymbol((llvm::MCContext *)a1, (const char **)&v92);
      if (!TempSymbol)
        goto LABEL_78;
    }
    else
    {
      v81 = 773;
      v80[0] = v43;
      v80[1] = v44;
      v80[2] = "[";
      MappingClassString = llvm::XCOFF::getMappingClassString(a5);
      *(_QWORD *)&v82 = v80;
      *((_QWORD *)&v82 + 1) = v44;
      v83 = (unint64_t)MappingClassString;
      v84 = v48;
      v85 = 1282;
      *(_QWORD *)&v92 = &v82;
      *((_QWORD *)&v92 + 1) = v48;
      v93 = "]";
      LOWORD(v96) = 770;
      Symbol = llvm::MCContext::getOrCreateSymbol((llvm::MCContext *)a1, (const char **)&v92);
      if (!TempSymbol)
        goto LABEL_78;
    }
    v49 = 1;
    BYTE1(v96) = 1;
    if (*TempSymbol)
    {
      *(_QWORD *)&v92 = TempSymbol;
      v49 = 3;
    }
    LOBYTE(v96) = v49;
    TempSymbol = (_BYTE *)llvm::MCContext::createTempSymbol((llvm::MCContext *)a1, (const llvm::Twine *)&v92, 0);
LABEL_78:
    *(_QWORD *)(a1 + 1032) += 272;
    v50 = *(_QWORD *)(a1 + 952);
    if (v50)
      v51 = ((v50 + 7) & 0xFFFFFFFFFFFFFFF8) - v50 + 272 > *(_QWORD *)(a1 + 960) - v50;
    else
      v51 = 1;
    v52 = v51;
    if (v14)
    {
      if ((v52 & 1) != 0)
      {
        v53 = *(_DWORD *)(a1 + 976) >> 7;
        if (v53 >= 0x1E)
          LOBYTE(v53) = 30;
        v54 = 4096 << v53;
        buffer = (char *)llvm::allocate_buffer(4096 << v53, (std::align_val_t)8uLL);
        v56 = *(unsigned int *)(a1 + 976);
        if (v56 >= *(_DWORD *)(a1 + 980))
        {
          v77 = buffer;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 968, (void *)(a1 + 984), v56 + 1, 8);
          buffer = v77;
          LODWORD(v56) = *(_DWORD *)(a1 + 976);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 968) + 8 * v56) = buffer;
        ++*(_DWORD *)(a1 + 976);
        *(_QWORD *)(a1 + 960) = &buffer[v54];
        v46 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a1 + 952) = v46 + 272;
        if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
        {
LABEL_91:
          v57 = *(uint64_t **)(Symbol - 8);
          v60 = *v57;
          v58 = (uint64_t)(v57 + 2);
          v59 = v60;
          *(_QWORD *)&v92 = v58;
          *((_QWORD *)&v92 + 1) = v60;
          if (*(_BYTE *)(v60 + v58 - 1) != 93)
            goto LABEL_114;
          goto LABEL_103;
        }
      }
      else
      {
        v46 = (v50 + 7) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a1 + 952) = v46 + 272;
        if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
          goto LABEL_91;
      }
      v58 = 0;
      v59 = 0;
      v92 = 0uLL;
      if (MEMORY[0xFFFFFFFFFFFFFFFF] != 93)
      {
LABEL_114:
        llvm::MCSection::MCSection(v46, 5, v58, v59, a4, (uint64_t)TempSymbol);
        *(_QWORD *)v46 = &unk_1E0E205B0;
        *(_BYTE *)(v46 + 224) = 0;
        *(_BYTE *)(v46 + 226) = 0;
        *(_QWORD *)(v46 + 232) = Symbol;
        *(_QWORD *)(v46 + 240) = v43;
        *(_QWORD *)(v46 + 248) = v44;
        *(_DWORD *)(v46 + 256) = v8;
        *(_BYTE *)(v46 + 260) = 1;
        *(_BYTE *)(v46 + 264) = a6;
        llvm::MCSymbolXCOFF::setRepresentedCsect(Symbol, (llvm::MCSectionXCOFF *)v46);
        *(_BYTE *)(v46 + 24) = 5;
LABEL_121:
        v38[8] = v46;
        v72 = operator new(0xE8uLL);
        v73 = llvm::MCFragment::MCFragment((uint64_t)v72, 1, 0, 0);
        *(_WORD *)(v73 + 52) = 0;
        *(_QWORD *)(v73 + 56) = 0;
        *(_QWORD *)(v73 + 64) = v73 + 88;
        *(_OWORD *)(v73 + 72) = xmmword_181233280;
        *(_QWORD *)(v73 + 120) = v73 + 136;
        *(_QWORD *)(v73 + 128) = 0x400000000;
        v74 = *(uint64_t **)(v46 + 112);
        v75 = *v74;
        *(_QWORD *)v73 = *v74;
        *(_QWORD *)(v73 + 8) = v74;
        *(_QWORD *)(v75 + 8) = v73;
        *v74 = v73;
        *(_QWORD *)(v73 + 16) = v46;
        if (TempSymbol)
          *(_QWORD *)TempSymbol = v73;
        if (!v14 && !(_BYTE)a5)
          *(_QWORD *)Symbol = v73;
        return v46;
      }
LABEL_103:
      LOBYTE(v82) = 91;
      v69 = llvm::StringRef::rfind(&v92, (unsigned __int8 *)&v82, 1);
      if (v69 == -1)
      {
        v59 = *((_QWORD *)&v92 + 1);
        v58 = v92;
      }
      else
      {
        v58 = v92;
        if (v69 >= *((_QWORD *)&v92 + 1))
          v59 = *((_QWORD *)&v92 + 1);
        else
          v59 = v69;
      }
      goto LABEL_114;
    }
    if ((v52 & 1) != 0)
    {
      v61 = *(_DWORD *)(a1 + 976) >> 7;
      if (v61 >= 0x1E)
        LOBYTE(v61) = 30;
      v62 = 4096 << v61;
      v63 = (char *)llvm::allocate_buffer(4096 << v61, (std::align_val_t)8uLL);
      v64 = *(unsigned int *)(a1 + 976);
      if (v64 >= *(_DWORD *)(a1 + 980))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 968, (void *)(a1 + 984), v64 + 1, 8);
        LODWORD(v64) = *(_DWORD *)(a1 + 976);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 968) + 8 * v64) = v63;
      ++*(_DWORD *)(a1 + 976);
      *(_QWORD *)(a1 + 960) = &v63[v62];
      v46 = (unint64_t)(v63 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a1 + 952) = v46 + 272;
      if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
      {
LABEL_99:
        v65 = *(uint64_t **)(Symbol - 8);
        v68 = *v65;
        v66 = (uint64_t)(v65 + 2);
        v67 = v68;
        *(_QWORD *)&v92 = v66;
        *((_QWORD *)&v92 + 1) = v68;
        if (*(_BYTE *)(v68 + v66 - 1) != 93)
          goto LABEL_116;
        goto LABEL_109;
      }
    }
    else
    {
      v46 = (v50 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a1 + 952) = v46 + 272;
      if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
        goto LABEL_99;
    }
    v66 = 0;
    v67 = 0;
    v92 = 0uLL;
    if (MEMORY[0xFFFFFFFFFFFFFFFF] != 93)
      goto LABEL_116;
LABEL_109:
    LOBYTE(v82) = 91;
    v70 = llvm::StringRef::rfind(&v92, (unsigned __int8 *)&v82, 1);
    if (v70 == -1)
    {
      v67 = *((_QWORD *)&v92 + 1);
      v66 = v92;
    }
    else
    {
      v66 = v92;
      if (v70 >= *((_QWORD *)&v92 + 1))
        v67 = *((_QWORD *)&v92 + 1);
      else
        v67 = v70;
    }
LABEL_116:
    llvm::MCSection::MCSection(v46, 5, v66, v67, a4, (uint64_t)TempSymbol);
    *(_QWORD *)v46 = &unk_1E0E205B0;
    *(_WORD *)(v46 + 224) = a5;
    *(_BYTE *)(v46 + 226) = 1;
    *(_QWORD *)(v46 + 232) = Symbol;
    *(_QWORD *)(v46 + 240) = v43;
    *(_QWORD *)(v46 + 248) = v44;
    *(_BYTE *)(v46 + 256) = 0;
    *(_BYTE *)(v46 + 260) = 0;
    *(_BYTE *)(v46 + 264) = a6;
    llvm::MCSymbolXCOFF::setRepresentedCsect(Symbol, (llvm::MCSectionXCOFF *)v46);
    *(_WORD *)(Symbol + 32) = 363;
    if ((a5 & 0xFF00) != 0)
    {
      if ((_BYTE)a5)
        v71 = 2;
      else
        v71 = 5;
      *(_BYTE *)(v46 + 24) = v71;
    }
    goto LABEL_121;
  }
  v46 = v38[8];
  if ((*(_BYTE *)(v46 + 264) != 0) != a6)
    llvm::report_fatal_error((llvm *)"section's multiply symbols policy does not match", (const char *)1);
  return v46;
}

_QWORD *llvm::MCContext::getSPIRVSection(llvm::MCContext *this)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v4;
  uint64_t v5;
  char *buffer;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  *((_QWORD *)this + 105) += 224;
  v2 = *((_QWORD *)this + 95);
  if (v2)
    v3 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) - v2 + 224 > *((_QWORD *)this + 96) - v2;
  else
    v3 = 1;
  if (v3)
  {
    v4 = *((_DWORD *)this + 196) >> 7;
    if (v4 >= 0x1E)
      LOBYTE(v4) = 30;
    v5 = 4096 << v4;
    buffer = (char *)llvm::allocate_buffer(4096 << v4, (std::align_val_t)8uLL);
    v7 = *((unsigned int *)this + 196);
    if (v7 >= *((_DWORD *)this + 197))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 776, (char *)this + 792, v7 + 1, 8);
      LODWORD(v7) = *((_DWORD *)this + 196);
    }
    *(_QWORD *)(*((_QWORD *)this + 97) + 8 * v7) = buffer;
    ++*((_DWORD *)this + 196);
    *((_QWORD *)this + 96) = &buffer[v5];
    v8 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v8 = (_QWORD *)((v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *((_QWORD *)this + 95) = v8 + 28;
  llvm::MCSection::MCSection((uint64_t)v8, 6, (uint64_t)"", 0, 2, 0);
  *v8 = &unk_1E0E20580;
  v9 = operator new(0xE8uLL);
  v10 = llvm::MCFragment::MCFragment((uint64_t)v9, 1, 0, 0);
  *(_WORD *)(v10 + 52) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = v10 + 88;
  *(_OWORD *)(v10 + 72) = xmmword_181233280;
  *(_QWORD *)(v10 + 120) = v10 + 136;
  *(_QWORD *)(v10 + 128) = 0x400000000;
  v11 = (uint64_t *)v8[14];
  v12 = *v11;
  *(_QWORD *)v10 = *v11;
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v12 + 8) = v10;
  *v11 = v10;
  *(_QWORD *)(v10 + 16) = v8;
  return v8;
}

uint64_t llvm::MCContext::getDXContainerSection(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, int a4)
{
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  char *buffer;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v6 = llvm::StringMap<mlir::Attribute,llvm::MallocAllocator>::try_emplace<>(a1 + 1896, a2, a3);
  v7 = (uint64_t *)*v6;
  if (!v8)
    return v7[1];
  v9 = v6;
  v12 = *v7;
  v10 = (uint64_t)(v7 + 2);
  v11 = v12;
  *(_QWORD *)(a1 + 456) += 224;
  v13 = *(_QWORD *)(a1 + 376);
  if (v13 && ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 224 <= *(_QWORD *)(a1 + 384) - v13)
  {
    v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v16 = *(_DWORD *)(a1 + 400) >> 7;
    if (v16 >= 0x1E)
      LOBYTE(v16) = 30;
    v17 = 4096 << v16;
    buffer = (char *)llvm::allocate_buffer(4096 << v16, (std::align_val_t)8uLL);
    v19 = *(unsigned int *)(a1 + 400);
    if (v19 >= *(_DWORD *)(a1 + 404))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 392, (void *)(a1 + 408), v19 + 1, 8);
      LODWORD(v19) = *(_DWORD *)(a1 + 400);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v19) = buffer;
    ++*(_DWORD *)(a1 + 400);
    *(_QWORD *)(a1 + 384) = &buffer[v17];
    v14 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 376) = v14 + 224;
  v20 = (_QWORD *)llvm::MCSection::MCSection(v14, 7, v10, v11, a4, 0);
  *v20 = &unk_1E0E22C30;
  *(_QWORD *)(*v9 + 8) = v20;
  v21 = operator new(0xE8uLL);
  v22 = llvm::MCFragment::MCFragment((uint64_t)v21, 1, 0, 0);
  *(_WORD *)(v22 + 52) = 0;
  *(_QWORD *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 64) = v22 + 88;
  *(_OWORD *)(v22 + 72) = xmmword_181233280;
  *(_QWORD *)(v22 + 120) = v22 + 136;
  *(_QWORD *)(v22 + 128) = 0x400000000;
  v23 = *(uint64_t **)(*(_QWORD *)(*v9 + 8) + 112);
  v24 = *v23;
  *(_QWORD *)v22 = *v23;
  *(_QWORD *)(v22 + 8) = v23;
  *(_QWORD *)(v24 + 8) = v22;
  *v23 = v22;
  result = *(_QWORD *)(*v9 + 8);
  v21[2] = result;
  return result;
}

uint64_t llvm::MCContext::emitDwarfUnwindInfo(llvm::MCContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 256);
  if (v1)
    return *(unsigned int *)(v1 + 4);
  else
    return 2;
}

double llvm::MCContext::setMCLineTableRootFile(uint64_t a1, unsigned int a2, void *__src, size_t __len, void *a5, size_t a6, uint64_t a7, __n128 *a8)
{
  char *v15;
  uint64_t **v16;
  char *v17;
  unsigned int v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  double result;
  void *v23;
  __n128 v24;
  unint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v15 = *(char **)(a1 + 1560);
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v17 = v15;
        v18 = *((_DWORD *)v15 + 8);
        if (v18 <= a2)
          break;
        v15 = *(char **)v17;
        v16 = (uint64_t **)v17;
        if (!*(_QWORD *)v17)
          goto LABEL_8;
      }
      if (v18 >= a2)
        break;
      v15 = (char *)*((_QWORD *)v17 + 1);
      if (!v15)
      {
        v16 = (uint64_t **)(v17 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v16 = (uint64_t **)(a1 + 1560);
    v17 = (char *)(a1 + 1560);
LABEL_8:
    v23 = __src;
    v19 = v17;
    v17 = (char *)operator new(0x218uLL);
    *((_DWORD *)v17 + 8) = a2;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_OWORD *)(v17 + 120) = 0u;
    *(_OWORD *)(v17 + 136) = 0u;
    *(_OWORD *)(v17 + 168) = 0u;
    *(_OWORD *)(v17 + 184) = 0u;
    *(_OWORD *)(v17 + 200) = 0u;
    *(_OWORD *)(v17 + 216) = 0u;
    *(_OWORD *)(v17 + 232) = 0u;
    *(_OWORD *)(v17 + 248) = 0u;
    *(_OWORD *)(v17 + 264) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 280) = 0u;
    *(_OWORD *)(v17 + 296) = 0u;
    *(_OWORD *)(v17 + 312) = 0u;
    *(_OWORD *)(v17 + 328) = 0u;
    *(_OWORD *)(v17 + 344) = 0u;
    *(_OWORD *)(v17 + 360) = 0u;
    *(_OWORD *)(v17 + 376) = 0u;
    *(_OWORD *)(v17 + 392) = 0u;
    *(_OWORD *)(v17 + 408) = 0u;
    *(_OWORD *)(v17 + 424) = 0u;
    *(_OWORD *)(v17 + 440) = 0u;
    *(_OWORD *)(v17 + 456) = 0u;
    *(_OWORD *)(v17 + 472) = 0u;
    *(_OWORD *)(v17 + 488) = 0u;
    *(_OWORD *)(v17 + 504) = 0u;
    *(_OWORD *)(v17 + 152) = 0u;
    *((_QWORD *)v17 + 6) = v17 + 64;
    *((_DWORD *)v17 + 15) = 3;
    *((_QWORD *)v17 + 17) = v17 + 152;
    *((_DWORD *)v17 + 37) = 3;
    *((_QWORD *)v17 + 47) = 0;
    *((_QWORD *)v17 + 46) = 0;
    *((_QWORD *)v17 + 48) = 0x1000000000;
    *(_OWORD *)(v17 + 392) = 0u;
    *(_OWORD *)(v17 + 408) = 0u;
    *(_OWORD *)(v17 + 424) = 0u;
    *(_QWORD *)(v17 + 437) = 0;
    v17[489] = 1;
    *((_QWORD *)v17 + 63) = 0;
    *((_QWORD *)v17 + 62) = 0;
    *((_DWORD *)v17 + 128) = 0;
    *((_QWORD *)v17 + 65) = v17 + 536;
    *((_QWORD *)v17 + 66) = 0;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v19;
    *v16 = (uint64_t *)v17;
    v20 = (uint64_t *)v17;
    v21 = **(_QWORD **)(a1 + 1552);
    if (v21)
    {
      *(_QWORD *)(a1 + 1552) = v21;
      v20 = *v16;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1560), v20);
    ++*(_QWORD *)(a1 + 1568);
    __src = v23;
  }
  v26 = *(_OWORD *)a7;
  v27 = *(_BYTE *)(a7 + 16);
  v24 = *a8;
  v25 = a8[1].n128_u64[0];
  *(_QWORD *)&result = llvm::MCDwarfLineTable::setRootFile((uint64_t)(v17 + 40), __src, __len, a5, a6, &v26, &v24).n128_u64[0];
  return result;
}

void llvm::MCContext::getDwarfFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  char *v15;
  uint64_t **v16;
  char *v17;
  unsigned int v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v25[0] = a2;
  v25[1] = a3;
  v24[0] = a4;
  v24[1] = a5;
  v15 = *(char **)(a1 + 1560);
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v17 = v15;
        v18 = *((_DWORD *)v15 + 8);
        if (v18 <= a10)
          break;
        v15 = *(char **)v17;
        v16 = (uint64_t **)v17;
        if (!*(_QWORD *)v17)
          goto LABEL_8;
      }
      if (v18 >= a10)
        break;
      v15 = (char *)*((_QWORD *)v17 + 1);
      if (!v15)
      {
        v16 = (uint64_t **)(v17 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v16 = (uint64_t **)(a1 + 1560);
    v17 = (char *)(a1 + 1560);
LABEL_8:
    v19 = v17;
    v17 = (char *)operator new(0x218uLL);
    *((_DWORD *)v17 + 8) = a10;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_OWORD *)(v17 + 120) = 0u;
    *(_OWORD *)(v17 + 136) = 0u;
    *(_OWORD *)(v17 + 168) = 0u;
    *(_OWORD *)(v17 + 184) = 0u;
    *(_OWORD *)(v17 + 200) = 0u;
    *(_OWORD *)(v17 + 216) = 0u;
    *(_OWORD *)(v17 + 232) = 0u;
    *(_OWORD *)(v17 + 248) = 0u;
    *(_OWORD *)(v17 + 264) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 280) = 0u;
    *(_OWORD *)(v17 + 296) = 0u;
    *(_OWORD *)(v17 + 312) = 0u;
    *(_OWORD *)(v17 + 328) = 0u;
    *(_OWORD *)(v17 + 344) = 0u;
    *(_OWORD *)(v17 + 360) = 0u;
    *(_OWORD *)(v17 + 376) = 0u;
    *(_OWORD *)(v17 + 392) = 0u;
    *(_OWORD *)(v17 + 408) = 0u;
    *(_OWORD *)(v17 + 424) = 0u;
    *(_OWORD *)(v17 + 440) = 0u;
    *(_OWORD *)(v17 + 456) = 0u;
    *(_OWORD *)(v17 + 472) = 0u;
    *(_OWORD *)(v17 + 488) = 0u;
    *(_OWORD *)(v17 + 504) = 0u;
    *(_OWORD *)(v17 + 152) = 0u;
    *((_QWORD *)v17 + 6) = v17 + 64;
    *((_DWORD *)v17 + 15) = 3;
    *((_QWORD *)v17 + 17) = v17 + 152;
    *((_DWORD *)v17 + 37) = 3;
    *((_QWORD *)v17 + 47) = 0;
    *((_QWORD *)v17 + 46) = 0;
    *((_QWORD *)v17 + 48) = 0x1000000000;
    *(_OWORD *)(v17 + 392) = 0u;
    *(_OWORD *)(v17 + 408) = 0u;
    *(_OWORD *)(v17 + 424) = 0u;
    *(_QWORD *)(v17 + 437) = 0;
    v17[489] = 1;
    *((_QWORD *)v17 + 63) = 0;
    *((_QWORD *)v17 + 62) = 0;
    *((_DWORD *)v17 + 128) = 0;
    *((_QWORD *)v17 + 65) = v17 + 536;
    *((_QWORD *)v17 + 66) = 0;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v19;
    *v16 = (uint64_t *)v17;
    v20 = (uint64_t *)v17;
    v21 = **(_QWORD **)(a1 + 1552);
    if (v21)
    {
      *(_QWORD *)(a1 + 1552) = v21;
      v20 = *v16;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1560), v20);
    ++*(_QWORD *)(a1 + 1568);
  }
  v26 = *a7;
  v27 = *((_BYTE *)a7 + 16);
  v22 = *a8;
  v23 = *((_QWORD *)a8 + 2);
  llvm::MCDwarfLineTable::tryGetFile((uint64_t)(v17 + 40), (uint64_t)v25, (uint64_t)v24, (uint64_t)&v26, (uint64_t)&v22, *(unsigned __int16 *)(a1 + 1696), a6, a9);
}

BOOL llvm::MCContext::isValidDwarfFileNumber(llvm::MCContext *this, unsigned int a2, unsigned int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  unsigned int v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (char *)*((_QWORD *)this + 195);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)((char *)this + 1560);
    v8 = (char *)this + 1560;
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x218uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 168) = 0u;
    *(_OWORD *)(v8 + 184) = 0u;
    *(_OWORD *)(v8 + 200) = 0u;
    *(_OWORD *)(v8 + 216) = 0u;
    *(_OWORD *)(v8 + 232) = 0u;
    *(_OWORD *)(v8 + 248) = 0u;
    *(_OWORD *)(v8 + 264) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 280) = 0u;
    *(_OWORD *)(v8 + 296) = 0u;
    *(_OWORD *)(v8 + 312) = 0u;
    *(_OWORD *)(v8 + 328) = 0u;
    *(_OWORD *)(v8 + 344) = 0u;
    *(_OWORD *)(v8 + 360) = 0u;
    *(_OWORD *)(v8 + 376) = 0u;
    *(_OWORD *)(v8 + 392) = 0u;
    *(_OWORD *)(v8 + 408) = 0u;
    *(_OWORD *)(v8 + 424) = 0u;
    *(_OWORD *)(v8 + 440) = 0u;
    *(_OWORD *)(v8 + 456) = 0u;
    *(_OWORD *)(v8 + 472) = 0u;
    *(_OWORD *)(v8 + 488) = 0u;
    *(_OWORD *)(v8 + 504) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *((_QWORD *)v8 + 6) = v8 + 64;
    *((_DWORD *)v8 + 15) = 3;
    *((_QWORD *)v8 + 17) = v8 + 152;
    *((_DWORD *)v8 + 37) = 3;
    *((_QWORD *)v8 + 47) = 0;
    *((_QWORD *)v8 + 46) = 0;
    *((_QWORD *)v8 + 48) = 0x1000000000;
    *(_OWORD *)(v8 + 392) = 0u;
    *(_OWORD *)(v8 + 408) = 0u;
    *(_OWORD *)(v8 + 424) = 0u;
    *(_QWORD *)(v8 + 437) = 0;
    v8[489] = 1;
    *((_QWORD *)v8 + 63) = 0;
    *((_QWORD *)v8 + 62) = 0;
    *((_DWORD *)v8 + 128) = 0;
    *((_QWORD *)v8 + 65) = v8 + 536;
    *((_QWORD *)v8 + 66) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)v8;
    v12 = **((_QWORD **)this + 194);
    if (v12)
    {
      *((_QWORD *)this + 194) = v12;
      v11 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 195), v11);
    ++*((_QWORD *)this + 196);
  }
  if (!a2)
    return *((unsigned __int16 *)this + 848) > 4u;
  if (*((_DWORD *)v8 + 36) <= a2)
    return 0;
  v13 = *((_QWORD *)v8 + 17) + 72 * a2;
  if (*(char *)(v13 + 23) < 0)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = *(unsigned __int8 *)(v13 + 23);
  return v14 != 0;
}

void llvm::MCContext::getCVContext(llvm::MCContext *this)
{
  llvm::CodeViewContext *v2;
  llvm::CodeViewContext *v3;
  uint64_t v4;
  void *v5;

  if (!*((_QWORD *)this + 22))
  {
    v2 = (llvm::CodeViewContext *)operator new(0x108uLL);
    llvm::CodeViewContext::CodeViewContext(v2);
    v3 = (llvm::CodeViewContext *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v4;
    if (v3)
    {
      llvm::CodeViewContext::~CodeViewContext(v3);
      operator delete(v5);
    }
  }
}

void llvm::MCContext::diagnose(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = a1[9];
  v3 = v2;
  if (!v2)
    v3 = a1[10];
  v8 = v2 == 0;
  v4 = a1[17];
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t, BOOL *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(a1[17], a2, &v8, v3, a1 + 11);
  }
  else
  {
    v5 = (_QWORD *)std::__throw_bad_function_call[abi:nn180100]();
    llvm::MCContext::reportCommon(v5, v6, v7);
  }
}

void llvm::MCContext::reportCommon(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[72];
  _BYTE *v13;
  __int128 v14;
  void *v15[2];
  __int128 v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[22];

  v25[21] = *MEMORY[0x1E0C80C00];
  v6 = v12;
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)v12);
  if (a2 && (v6 = (_BYTE *)a1[9]) == 0)
  {
    v6 = (_BYTE *)a1[10];
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v17 = 0;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  __p = 0u;
  v22 = 0;
  v23 = v25;
  v24 = 0x400000000;
  v13 = v6;
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8
    || ((*(void (**)(uint64_t, __int128 *, _BYTE **))(*(_QWORD *)v8 + 48))(v8, &v14, &v13),
        LOBYTE(v13) = v7,
        (v9 = a1[17]) == 0))
  {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(uint64_t, __int128 *, _BYTE **, _BYTE *, _QWORD *))(*(_QWORD *)v9 + 48))(v9, &v14, &v13, v6, a1 + 11);
  v10 = (char *)v23;
  if ((_DWORD)v24)
  {
    v11 = 40 * v24;
    do
    {
      if (v10[v11 - 1] < 0)
        operator delete(*(void **)&v10[v11 - 24]);
      v11 -= 40;
    }
    while (v11);
    v10 = (char *)v23;
  }
  if (v10 != (char *)v25)
    free(v10);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    if ((SBYTE7(v19) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_22:
    operator delete((void *)v18);
    if ((SBYTE7(v16) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_23:
    operator delete(v15[0]);
    goto LABEL_20;
  }
  operator delete(*((void **)&v19 + 1));
  if (SBYTE7(v19) < 0)
    goto LABEL_22;
LABEL_19:
  if (SBYTE7(v16) < 0)
    goto LABEL_23;
LABEL_20:
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v12);
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[4];
      v2[4] = 0;
      if (v7)
      {
        v8 = *(void **)(v7 + 40);
        if (v8)
        {
          *(_QWORD *)(v7 + 48) = v8;
          operator delete(v8);
        }
        v5 = (void *)std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(v7);
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

llvm::raw_ostream *llvm::MCSectionGOFF::printSwitchToSection(uint64_t a1, int a2, int a3, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v4;
  uint64_t v6;
  llvm::raw_ostream *result;
  const void *v8;
  size_t v9;

  v4 = this;
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 0xA)
  {
    *(_DWORD *)(v6 + 7) = 571043439;
    *(_QWORD *)v6 = *(_QWORD *)"\t.section\t\"";
    result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 11);
    *((_QWORD *)this + 4) = result;
    v8 = *(const void **)(a1 + 200);
    v9 = *(_QWORD *)(a1 + 208);
    if (v9 <= *((_QWORD *)this + 3) - (_QWORD)result)
    {
LABEL_3:
      if (v9)
      {
        memcpy(result, v8, v9);
        result = (llvm::raw_ostream *)(*((_QWORD *)v4 + 4) + v9);
        *((_QWORD *)v4 + 4) = result;
      }
      if (*((_QWORD *)v4 + 3) - (_QWORD)result <= 1uLL)
        return llvm::raw_ostream::write(v4, "\"\n", 2uLL);
      goto LABEL_9;
    }
  }
  else
  {
    v4 = llvm::raw_ostream::write(this, "\t.section\t\"", 0xBuLL);
    result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
    v8 = *(const void **)(a1 + 200);
    v9 = *(_QWORD *)(a1 + 208);
    if (v9 <= *((_QWORD *)v4 + 3) - (_QWORD)result)
      goto LABEL_3;
  }
  v4 = llvm::raw_ostream::write(v4, (const char *)v8, v9);
  result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)result <= 1uLL)
    return llvm::raw_ostream::write(v4, "\"\n", 2uLL);
LABEL_9:
  *(_WORD *)result = 2594;
  *((_QWORD *)v4 + 4) += 2;
  return result;
}

uint64_t llvm::MCSectionGOFF::useCodeAlign(llvm::MCSectionGOFF *this)
{
  return 0;
}

uint64_t llvm::MCSectionGOFF::isVirtualSection(llvm::MCSectionGOFF *this)
{
  return 0;
}

uint64_t llvm::MCSectionSPIRV::useCodeAlign(llvm::MCSectionSPIRV *this)
{
  return 0;
}

uint64_t llvm::MCSectionSPIRV::isVirtualSection(llvm::MCSectionSPIRV *this)
{
  return 0;
}

__n128 llvm::MCDwarfLineTable::setRootFile(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, __int128 *a6, __n128 *a7)
{
  __int128 *p_dst;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  unsigned __int8 v19;
  __n128 result;
  char v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 __dst;
  unint64_t v27;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_15;
  if (__len >= 0x17)
  {
    v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v22 = __len | 7;
    v23 = v22 + 1;
    p_dst = (__int128 *)operator new(v22 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v27 = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v27) = __len;
    p_dst = &__dst;
    if (!__len)
    {
      LOBYTE(__dst) = 0;
      v15 = a1 + 352;
      if ((*(char *)(a1 + 375) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_14;
    }
  }
  memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v15 = a1 + 352;
  if ((*(char *)(a1 + 375) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)v15 = __dst;
    *(_QWORD *)(v15 + 16) = v27;
    if (a5 <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_6;
LABEL_15:
    abort();
  }
LABEL_14:
  operator delete(*(void **)v15);
  *(_OWORD *)v15 = __dst;
  *(_QWORD *)(v15 + 16) = v27;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_15;
LABEL_6:
  if (a5 >= 0x17)
  {
    v24 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v24 = a5 | 7;
    v25 = v24 + 1;
    v16 = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&__dst + 1) = a5;
    v27 = v25 | 0x8000000000000000;
    *(_QWORD *)&__dst = v16;
LABEL_19:
    memmove(v16, a4, a5);
    *((_BYTE *)v16 + a5) = 0;
    v17 = a1 + 376;
    if ((*(char *)(a1 + 399) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_20:
    operator delete(*(void **)v17);
    goto LABEL_9;
  }
  HIBYTE(v27) = a5;
  v16 = &__dst;
  if (a5)
    goto LABEL_19;
  LOBYTE(__dst) = 0;
  v17 = a1 + 376;
  if (*(char *)(a1 + 399) < 0)
    goto LABEL_20;
LABEL_9:
  *(_OWORD *)v17 = __dst;
  *(_QWORD *)(v17 + 16) = v27;
  *(_DWORD *)(a1 + 400) = 0;
  v18 = *a6;
  *(_BYTE *)(a1 + 420) = *((_BYTE *)a6 + 16);
  *(_OWORD *)(v17 + 28) = v18;
  v19 = a7[1].n128_u8[0];
  result = *a7;
  *(__n128 *)(v17 + 48) = *a7;
  *(_BYTE *)(a1 + 440) = v19;
  v21 = *((_BYTE *)a6 + 16);
  *(_BYTE *)(a1 + 449) &= v21;
  *(_BYTE *)(a1 + 450) |= v21;
  *(_BYTE *)(a1 + 448) = a7[1].n128_u8[0];
  return result;
}

void llvm::MCDwarfLineTableHeader::~MCDwarfLineTableHeader(void **this)
{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;

  if (*((char *)this + 399) < 0)
  {
    operator delete(this[47]);
    if ((*((char *)this + 375) & 0x80000000) == 0)
    {
LABEL_3:
      if (!*((_DWORD *)this + 85))
        goto LABEL_15;
      goto LABEL_7;
    }
  }
  else if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[44]);
  if (!*((_DWORD *)this + 85))
    goto LABEL_15;
LABEL_7:
  v2 = *((unsigned int *)this + 84);
  if ((_DWORD)v2)
  {
    v3 = 0;
    do
    {
      v4 = *(llvm **)((char *)this[41] + v3);
      if (v4 != (llvm *)-8 && v4 != 0)
        llvm::deallocate_buffer(v4, (void *)(*(_QWORD *)v4 + 17));
      v3 += 8;
    }
    while (8 * v2 != v3);
  }
LABEL_15:
  free(this[41]);
  v6 = (void **)this[12];
  v7 = *((unsigned int *)this + 26);
  if ((_DWORD)v7)
  {
    v8 = 9 * v7;
    do
    {
      if (*((char *)&v6[v8 - 6] - 1) < 0)
        operator delete(v6[v8 - 9]);
      v8 -= 9;
    }
    while (v8 * 8);
    v6 = (void **)this[12];
  }
  if (v6 != this + 14)
    free(v6);
  v9 = (void **)this[1];
  v10 = *((unsigned int *)this + 4);
  if ((_DWORD)v10)
  {
    v11 = 3 * v10;
    do
    {
      if (SHIBYTE(v9[v11 - 1]) < 0)
        operator delete(v9[v11 - 3]);
      v11 -= 3;
    }
    while (v11 * 8);
    v9 = (void **)this[1];
  }
  if (v9 != this + 3)
    free(v9);
}

_QWORD *std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E4FFE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E0E4FFE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a1 + 8))(a2, *a3, a4, a5);
}

uint64_t std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181267D4CLL)
    return a1 + 8;
  if (((v3 & 0x8000000181267D4CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181267D4CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181267D4CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::target_type()
{
}

uint64_t std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(char **)(a2 + 520);
    v5 = *(unsigned int *)(a2 + 528);
    if ((_DWORD)v5)
    {
      v6 = 32 * v5;
      do
      {
        v7 = *(void **)&v4[v6 - 24];
        if (v7)
        {
          *(_QWORD *)&v4[v6 - 16] = v7;
          operator delete(v7);
        }
        v6 -= 32;
      }
      while (v6);
      v4 = *(char **)(a2 + 520);
    }
    if (v4 != (char *)(a2 + 536))
      free(v4);
    llvm::deallocate_buffer(*(llvm **)(a2 + 496), (void *)(16 * *(unsigned int *)(a2 + 512)));
  }
  return result;
}

void sub_180C2A534(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void **v15;

  llvm::MCDwarfLineTableHeader::~MCDwarfLineTableHeader(v15);
  operator delete(v14);
}

void llvm::MCAsmMacro::~MCAsmMacro(llvm::MCAsmMacro *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *((_QWORD *)this + 5);
    v7 = (void *)*((_QWORD *)this + 4);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 32);
        if (v9)
        {
          v10 = *(_QWORD *)(v6 - 24);
          v8 = *(void **)(v6 - 32);
          if (v10 != v9)
          {
            do
            {
              if (*(_DWORD *)(v10 - 8) >= 0x41u)
              {
                v11 = *(void **)(v10 - 16);
                if (v11)
                  operator delete[](v11);
              }
              v10 -= 40;
            }
            while (v10 != v9);
            v8 = *(void **)(v6 - 32);
          }
          *(_QWORD *)(v6 - 24) = v9;
          operator delete(v8);
        }
        v6 -= 48;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v5;
    operator delete(v7);
  }
}

uint64_t llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;
  _DWORD *v10;
  uint64_t v11;
  llvm *v12;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = (v1 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v9 = (llvm *)((char *)v5 + 16 * v8);
      v10 = (_DWORD *)((char *)v5 + 16);
      v11 = v8;
      do
      {
        *(v10 - 4) = -1;
        *v10 = -1;
        v10 += 8;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        return result;
    }
    else
    {
      v9 = *(llvm **)result;
    }
    v12 = (llvm *)((char *)v5 + 16 * v1);
    do
    {
      *(_DWORD *)v9 = -1;
      v9 = (llvm *)((char *)v9 + 16);
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::MCSection *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::MCSection *,void>,llvm::detail::DenseSetPair<llvm::MCSection *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  unint64_t v6;
  llvm *v7;
  unint64_t v8;
  int64x2_t *v9;
  int64x2_t v10;
  uint64_t v11;
  llvm *v12;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = (v1 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v7 = *(llvm **)result;
    if (v6 < 3)
      goto LABEL_12;
    v8 = v6 + 1;
    v7 = (llvm *)((char *)v5 + 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL));
    v9 = (int64x2_t *)((char *)v5 + 16);
    v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v9[-1] = v10;
      *v9 = v10;
      v9 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      v12 = (llvm *)((char *)v5 + 8 * v1);
      do
      {
        *(_QWORD *)v7 = -4096;
        v7 = (llvm *)((char *)v7 + 8);
      }
      while (v7 != v12);
    }
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  unint64_t v6;
  llvm *v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  llvm *v11;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = (v1 - 1) & 0xFFFFFFFFFFFFFFFLL;
    v7 = *(llvm **)result;
    if (v6 < 3)
      goto LABEL_12;
    v8 = v6 + 1;
    v7 = (llvm *)((char *)v5 + 16 * (v8 & 0x1FFFFFFFFFFFFFFCLL));
    v9 = (_OWORD *)((char *)v5 + 32);
    v10 = v8 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v9 - 2) = xmmword_181234BE0;
      *(v9 - 1) = xmmword_181234BE0;
      *v9 = xmmword_181234BE0;
      v9[1] = xmmword_181234BE0;
      v9 += 4;
      v10 -= 4;
    }
    while (v10);
    if (v8 != (v8 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      v11 = (llvm *)((char *)v5 + 16 * v1);
      do
      {
        *(_OWORD *)v7 = xmmword_181234BE0;
        v7 = (llvm *)((char *)v7 + 16);
      }
      while (v7 != v11);
    }
  }
  return result;
}

uint64_t *llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = v7[1];
      ++v7;
      v8 = v9;
    }
    return v7;
  }
  v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(uint64_t **)(a1 + 24), (uint64_t)(a3 + 17), 3);
  v11 = (_QWORD *)v10;
  v12 = v10 + 16;
  if (a3)
    memcpy((void *)(v10 + 16), a2, (size_t)a3);
  a3[v12] = 0;
  *v11 = a3;
  v11[1] = 0;
  *v7 = (uint64_t)v11;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v13 = *v7 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v7[1];
      ++v7;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v7;
}

uint64_t *llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      v11 = v9[1];
      ++v9;
      v10 = v11;
    }
    return v9;
  }
  v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(uint64_t **)(a1 + 24), (uint64_t)(a3 + 17), 3);
  v13 = v12;
  v14 = v12 + 16;
  if (a3)
    memcpy((void *)(v12 + 16), a2, (size_t)a3);
  a3[v14] = 0;
  *(_QWORD *)v13 = a3;
  *(_BYTE *)(v13 + 8) = *a4;
  *v9 = v13;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v15 = *v9 == -8;
  else
    v15 = 1;
  if (v15)
  {
    do
    {
      v17 = v9[1];
      ++v9;
      v16 = v17;
      if (v17)
        v18 = v16 == -8;
      else
        v18 = 1;
    }
    while (v18);
  }
  return v9;
}

char *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::FindAndConstruct(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  char *v12;
  int v13;
  int v14;
  char *v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v22;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = ((37 * v5) | ((unint64_t)(37 * *a2) << 32))
       + ~((unint64_t)(37 * v5) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = (char *)(*(_QWORD *)a1 + 16 * v11);
    v13 = *(_DWORD *)v12;
    v14 = *((_DWORD *)v12 + 1);
    if (*a2 == *(_DWORD *)v12 && v5 == v14)
      return v12;
    v18 = 0;
    v19 = 1;
    while (v13 != -1 || v14 != -1)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v14 == -2;
      if (v20 && v13 == -2)
        v18 = v12;
      v22 = v11 + v19++;
      v11 = v22 & v10;
      v12 = (char *)(*(_QWORD *)a1 + 16 * (v22 & v10));
      v13 = *(_DWORD *)v12;
      v14 = *((_DWORD *)v12 + 1);
      if (v4 == *(_DWORD *)v12 && v5 == v14)
        return v12;
    }
    if (v18)
      v17 = v18;
    else
      v17 = v12;
  }
  else
  {
    v17 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::InsertIntoBucket<std::pair<unsigned int,unsigned int>>(a1, v17, a2);
}

char *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::InsertIntoBucket<std::pair<unsigned int,unsigned int>>(uint64_t a1, char *a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  int v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  char *v31;
  int v32;
  BOOL v33;
  unsigned int v35;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(int **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::moveFromOldBuckets(a1, v10, (int *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = buffer;
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_48;
    v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = buffer + 2;
    v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -1;
      *v20 = -1;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_48:
      do
      {
        *v18 = -1;
        v18 += 2;
      }
      while (v18 != &buffer[2 * v17]);
    }
    v22 = a3[1];
    v23 = ((37 * v22) | ((unint64_t)(37 * *a3) << 32))
        + ~((unint64_t)(37 * v22) << 32);
    v24 = (v23 ^ (v23 >> 22)) + ~((v23 ^ (v23 >> 22)) << 13);
    v25 = (9 * (v24 ^ (v24 >> 8))) ^ ((9 * (v24 ^ (v24 >> 8))) >> 15);
    v26 = v17 - 1;
    v27 = v26 & (((v25 + ~(v25 << 27)) >> 31) ^ (v25 + ~((_DWORD)v25 << 27)));
    a2 = (char *)&buffer[2 * v27];
    v28 = *(_DWORD *)a2;
    v29 = *((_DWORD *)a2 + 1);
    if (*a3 != *(_DWORD *)a2 || v22 != v29)
    {
      v31 = 0;
      v32 = 1;
      while (v28 != -1 || v29 != -1)
      {
        if (v31)
          v33 = 0;
        else
          v33 = v29 == -2;
        if (v33 && v28 == -2)
          v31 = a2;
        v35 = v27 + v32++;
        v27 = v35 & v26;
        a2 = (char *)&buffer[2 * v27];
        v28 = *(_DWORD *)a2;
        v29 = *((_DWORD *)a2 + 1);
        if (*a3 == *(_DWORD *)a2 && v22 == v29)
          goto LABEL_3;
      }
      if (v31)
        a2 = v31;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1 || *((_DWORD *)a2 + 1) != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = *a3;
  *((_DWORD *)a2 + 1) = a3[1];
  *((_QWORD *)a2 + 1) = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::moveFromOldBuckets(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v22;
  int v23;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v5)
    {
      v6 = v5 + 1;
      v7 = (v5 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v8 = &v4[2 * v7];
      v9 = v4 + 2;
      v10 = v7;
      do
      {
        *(v9 - 2) = -1;
        *v9 = -1;
        v9 += 4;
        v10 -= 2;
      }
      while (v10);
      if (v6 == v7)
        goto LABEL_10;
    }
    else
    {
      v8 = *(_QWORD **)result;
    }
    v11 = &v4[2 * v3];
    do
    {
      *v8 = -1;
      v8 += 2;
    }
    while (v8 != v11);
  }
LABEL_10:
  while (a2 != a3)
  {
    v22 = *a2;
    v23 = a2[1];
    if ((*a2 != -1 || v23 != -1) && (v22 != -2 || v23 != -2))
    {
      v26 = ((37 * v23) | ((unint64_t)(37 * v22) << 32))
          + ~((unint64_t)(37 * v23) << 32);
      v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
      v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
      v29 = ((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~((_DWORD)v28 << 27));
      v30 = *(_DWORD *)(result + 16) - 1;
      v17 = v30 & v29;
      v18 = *(_QWORD *)result + 16 * v17;
      v19 = *(_DWORD *)v18;
      v20 = *(_DWORD *)(v18 + 4);
      if (v22 != *(_DWORD *)v18 || v23 != v20)
      {
        v14 = 0;
        v16 = 1;
        while (v19 != -1 || v20 != -1)
        {
          if (v14)
            v12 = 0;
          else
            v12 = v20 == -2;
          if (v12 && v19 == -2)
            v14 = v18;
          v15 = v17 + v16++;
          v17 = v15 & v30;
          v18 = *(_QWORD *)result + 16 * (v15 & v30);
          v19 = *(_DWORD *)v18;
          v20 = *(_DWORD *)(v18 + 4);
          if (v22 == *(_DWORD *)v18 && v23 == v20)
            goto LABEL_29;
        }
        if (v14)
          v18 = v14;
      }
LABEL_29:
      *(_DWORD *)v18 = v22;
      *(_DWORD *)(v18 + 4) = a2[1];
      *(_QWORD *)(v18 + 8) = *((_QWORD *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
    a2 += 4;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::__emplace_unique_key_args<llvm::MCContext::ELFSectionKey,std::pair<llvm::MCContext::ELFSectionKey,decltype(nullptr)>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (unsigned __int8 *)(v5 + 4);
        if (!llvm::MCContext::ELFSectionKey::operator<(a2, (unsigned __int8 **)v5 + 4))
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (!llvm::MCContext::ELFSectionKey::operator<(v9, (unsigned __int8 **)a2))
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_9;
    }
    if (*v6)
      return *v6;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_9:
  v10 = operator new(0x68uLL);
  v10[2] = *(_OWORD *)a3;
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)((char *)v10 + 56) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)((char *)v10 + 72) = *(_OWORD *)(a3 + 40);
  *((_DWORD *)v10 + 22) = *(_DWORD *)(a3 + 56);
  *((_QWORD *)v10 + 12) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v8;
  *v6 = (uint64_t *)v10;
  v11 = (uint64_t *)**a1;
  v12 = (uint64_t *)v10;
  if (v11)
  {
    *a1 = v11;
    v12 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v10;
}

BOOL llvm::MCContext::ELFSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  char v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  size_t v16;
  const void *v17;
  unsigned __int8 *v18;
  size_t v19;
  size_t v20;
  int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  size_t v25;
  int v26;

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        v9 = v7;
        v10 = a1;
        v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11)
            goto LABEL_27;
        }
        goto LABEL_18;
      }
LABEL_27:
      v17 = (const void *)*((_QWORD *)a1 + 3);
      v16 = *((_QWORD *)a1 + 4);
      v18 = a2[3];
      v19 = (size_t)a2[4];
      if (v16 == v19)
      {
        if (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((_QWORD *)a1 + 4)))
        {
          v23 = a2[6];
          v24 = (unsigned __int8 *)*((_QWORD *)a1 + 6);
          if (v23 >= v24)
            v25 = *((_QWORD *)a1 + 6);
          else
            v25 = (size_t)a2[6];
          if (v25)
          {
            v26 = memcmp(*((const void **)a1 + 5), a2[5], v25);
            if (v26)
              return ((v26 >> 31) | 1u) >> 31;
          }
          if (v24 == v23)
            return *((_DWORD *)a1 + 14) < *((_DWORD *)a2 + 14);
          if (v24 < v23)
            v22 = -1;
          else
            v22 = 1;
          return v22 >> 31;
        }
        if (v19 >= v16)
          v20 = v16;
        else
          v20 = v19;
        if (!v20)
          return 0;
      }
      else
      {
        if (v19 >= v16)
          v20 = *((_QWORD *)a1 + 4);
        else
          v20 = (size_t)a2[4];
        if (!v20)
        {
LABEL_43:
          if (v16 < v19)
            v22 = -1;
          else
            v22 = 1;
          return v22 >> 31;
        }
      }
      v21 = memcmp(v17, v18, v20);
      v22 = (v21 >> 31) | 1;
      if (!v21)
        v22 = 0;
      if (v16 == v19 || v21)
        return v22 >> 31;
      goto LABEL_43;
    }
    if (!memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)))
      goto LABEL_27;
  }
LABEL_18:
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *(const void **)a1;
  if (v6 >= v4)
    v13 = v4;
  else
    v13 = v6;
  v14 = memcmp(v12, v7, v13);
  if (v14)
    return v14 < 0;
  else
    return v4 < v6;
}

uint64_t *std::__tree<std::__value_type<llvm::MCContext::ELFEntrySizeKey,unsigned int>,std::__map_value_compare<llvm::MCContext::ELFEntrySizeKey,std::__value_type<llvm::MCContext::ELFEntrySizeKey,unsigned int>,std::less<llvm::MCContext::ELFEntrySizeKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFEntrySizeKey,unsigned int>>>::__find_equal<llvm::MCContext::ELFEntrySizeKey>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  size_t v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  const void *v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  BOOL v22;
  unsigned __int8 *v23;
  size_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  BOOL v28;
  unsigned __int8 *v31;
  size_t v32;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;

  v4 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v5 = *((_BYTE *)a3 + 23);
    v36 = v5;
    v31 = *(unsigned __int8 **)a3;
    v32 = *((_QWORD *)a3 + 1);
    if ((v5 & 0x80u) == 0)
      v6 = *((unsigned __int8 *)a3 + 23);
    else
      v6 = *((_QWORD *)a3 + 1);
    if ((v5 & 0x80u) == 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *(unsigned __int8 **)a3;
    v34 = a3[7];
    v35 = a3[6];
    while (1)
    {
      while (1)
      {
        v8 = v3;
        v9 = (unsigned __int8 *)(v3 + 4);
        v10 = (const void *)v3[4];
        v11 = *((unsigned __int8 *)v3 + 55);
        v12 = v3[5];
        if ((v11 & 0x80u) == 0)
          v13 = *((unsigned __int8 *)v3 + 55);
        else
          v13 = v3[5];
        if ((v11 & 0x80u) == 0)
          v14 = (unsigned __int8 *)(v3 + 4);
        else
          v14 = (unsigned __int8 *)v3[4];
        if (v6 != v13)
          goto LABEL_24;
        if ((v36 & 0x80) == 0)
          break;
        if (memcmp(v31, v14, v32))
          goto LABEL_24;
LABEL_31:
        v21 = *((_DWORD *)v8 + 14);
        v22 = v35 >= v21;
        if (v35 == v21)
          v22 = v34 >= *((_DWORD *)v8 + 15);
        if (v22)
          goto LABEL_35;
LABEL_9:
        v3 = (uint64_t *)*v8;
        v4 = v8;
        if (!*v8)
          goto LABEL_56;
      }
      if (!(_DWORD)v36)
        goto LABEL_31;
      v15 = v14;
      v16 = (unsigned __int8 *)a3;
      v17 = v36;
      while (*v16 == *v15)
      {
        ++v16;
        ++v15;
        if (!--v17)
          goto LABEL_31;
      }
LABEL_24:
      if (v13 >= v6)
        v18 = v6;
      else
        v18 = v13;
      v19 = memcmp(v7, v14, v18);
      v20 = v6 < v13;
      if (v19)
        v20 = v19 < 0;
      if (v20)
        goto LABEL_9;
LABEL_35:
      if (v6 == v13)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(v10, v7, v12))
          {
LABEL_50:
            v27 = *((_DWORD *)v8 + 14);
            v28 = v27 >= v35;
            if (v27 == v35)
              v28 = *((_DWORD *)v8 + 15) >= v34;
            if (v28)
              goto LABEL_56;
            goto LABEL_53;
          }
        }
        else
        {
          if (!(_DWORD)v11)
            goto LABEL_50;
          v23 = v7;
          while (*v9 == *v23)
          {
            ++v9;
            ++v23;
            if (!--v11)
              goto LABEL_50;
          }
        }
      }
      if (v6 >= v13)
        v24 = v13;
      else
        v24 = v6;
      v25 = memcmp(v14, v7, v24);
      v26 = v13 < v6;
      if (v25)
        v26 = v25 < 0;
      if (!v26)
        goto LABEL_56;
LABEL_53:
      v4 = v8 + 1;
      v3 = (uint64_t *)v8[1];
      if (!v3)
        goto LABEL_56;
    }
  }
  v8 = (uint64_t *)(a1 + 8);
LABEL_56:
  *a2 = v8;
  return v4;
}

uint64_t **std::__tree<std::__value_type<std::string,llvm::MCSectionGOFF *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::MCSectionGOFF *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::MCSectionGOFF *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x40uLL);
    v24 = *a4;
    v25 = (uint64_t *)*((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t *std::__tree<std::__value_type<llvm::MCContext::COFFSectionKey,llvm::MCSectionCOFF *>,std::__map_value_compare<llvm::MCContext::COFFSectionKey,std::__value_type<llvm::MCContext::COFFSectionKey,llvm::MCSectionCOFF *>,std::less<llvm::MCContext::COFFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::COFFSectionKey,llvm::MCSectionCOFF *>>>::__emplace_unique_key_args<llvm::MCContext::COFFSectionKey,std::pair<llvm::MCContext::COFFSectionKey,decltype(nullptr)>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (unsigned __int8 *)(v5 + 4);
        if (!llvm::MCContext::COFFSectionKey::operator<(a2, (unsigned __int8 **)v5 + 4))
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (!llvm::MCContext::COFFSectionKey::operator<(v9, (unsigned __int8 **)a2))
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_9;
    }
    if (*v6)
      return *v6;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_9:
  v10 = operator new(0x58uLL);
  v10[2] = *(_OWORD *)a3;
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)((char *)v10 + 56) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v10 + 9) = *(_QWORD *)(a3 + 40);
  *((_QWORD *)v10 + 10) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v8;
  *v6 = (uint64_t *)v10;
  v11 = (uint64_t *)**a1;
  v12 = (uint64_t *)v10;
  if (v11)
  {
    *a1 = v11;
    v12 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v10;
}

BOOL llvm::MCContext::COFFSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  char v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  size_t v16;
  const void *v17;
  unsigned __int8 *v18;
  size_t v19;
  size_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        v9 = v7;
        v10 = a1;
        v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11)
            goto LABEL_27;
        }
        goto LABEL_18;
      }
LABEL_27:
      v17 = (const void *)*((_QWORD *)a1 + 3);
      v16 = *((_QWORD *)a1 + 4);
      v18 = a2[3];
      v19 = (size_t)a2[4];
      if (v16 == v19)
      {
        if (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((_QWORD *)a1 + 4)))
        {
          v23 = *((_DWORD *)a1 + 10);
          v24 = *((_DWORD *)a2 + 10);
          if (v23 == v24)
            return *((_DWORD *)a1 + 11) < *((_DWORD *)a2 + 11);
          else
            return v23 < v24;
        }
        if (v19 >= v16)
          v20 = v16;
        else
          v20 = v19;
        if (!v20)
          return 0;
      }
      else
      {
        if (v19 >= v16)
          v20 = *((_QWORD *)a1 + 4);
        else
          v20 = (size_t)a2[4];
        if (!v20)
        {
LABEL_43:
          if (v16 < v19)
            v22 = -1;
          else
            v22 = 1;
          return v22 >> 31;
        }
      }
      v21 = memcmp(v17, v18, v20);
      v22 = (v21 >> 31) | 1;
      if (!v21)
        v22 = 0;
      if (v16 == v19 || v21)
        return v22 >> 31;
      goto LABEL_43;
    }
    if (!memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)))
      goto LABEL_27;
  }
LABEL_18:
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *(const void **)a1;
  if (v6 >= v4)
    v13 = v4;
  else
    v13 = v6;
  v14 = memcmp(v12, v7, v13);
  if (v14)
    return v14 < 0;
  else
    return v4 < v6;
}

uint64_t *std::__tree<std::__value_type<llvm::MCContext::WasmSectionKey,llvm::MCSectionWasm *>,std::__map_value_compare<llvm::MCContext::WasmSectionKey,std::__value_type<llvm::MCContext::WasmSectionKey,llvm::MCSectionWasm *>,std::less<llvm::MCContext::WasmSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::WasmSectionKey,llvm::MCSectionWasm *>>>::__emplace_unique_key_args<llvm::MCContext::WasmSectionKey,std::pair<llvm::MCContext::WasmSectionKey,decltype(nullptr)>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (unsigned __int8 *)(v5 + 4);
        if (!llvm::MCContext::WasmSectionKey::operator<(a2, (unsigned __int8 **)v5 + 4))
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (!llvm::MCContext::WasmSectionKey::operator<(v9, (unsigned __int8 **)a2))
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_9;
    }
    if (*v6)
      return *v6;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_9:
  v10 = operator new(0x58uLL);
  v10[2] = *(_OWORD *)a3;
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)((char *)v10 + 56) = *(_OWORD *)(a3 + 24);
  *((_DWORD *)v10 + 18) = *(_DWORD *)(a3 + 40);
  *((_QWORD *)v10 + 10) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v8;
  *v6 = (uint64_t *)v10;
  v11 = (uint64_t *)**a1;
  v12 = (uint64_t *)v10;
  if (v11)
  {
    *a1 = v11;
    v12 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v10;
}

BOOL llvm::MCContext::WasmSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  char v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  size_t v16;
  const void *v17;
  unsigned __int8 *v18;
  size_t v19;
  size_t v20;
  int v21;
  unsigned int v22;

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        v9 = v7;
        v10 = a1;
        v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11)
            goto LABEL_27;
        }
        goto LABEL_18;
      }
LABEL_27:
      v17 = (const void *)*((_QWORD *)a1 + 3);
      v16 = *((_QWORD *)a1 + 4);
      v18 = a2[3];
      v19 = (size_t)a2[4];
      if (v16 == v19)
      {
        if (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((_QWORD *)a1 + 4)))
          return *((_DWORD *)a1 + 10) < *((_DWORD *)a2 + 10);
        if (v19 >= v16)
          v20 = v16;
        else
          v20 = v19;
        if (!v20)
          return 0;
      }
      else
      {
        if (v19 >= v16)
          v20 = *((_QWORD *)a1 + 4);
        else
          v20 = (size_t)a2[4];
        if (!v20)
        {
LABEL_43:
          if (v16 < v19)
            v22 = -1;
          else
            v22 = 1;
          return v22 >> 31;
        }
      }
      v21 = memcmp(v17, v18, v20);
      v22 = (v21 >> 31) | 1;
      if (!v21)
        v22 = 0;
      if (v16 == v19 || v21)
        return v22 >> 31;
      goto LABEL_43;
    }
    if (!memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)))
      goto LABEL_27;
  }
LABEL_18:
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *(const void **)a1;
  if (v6 >= v4)
    v13 = v4;
  else
    v13 = v6;
  v14 = memcmp(v12, v7, v13);
  if (v14)
    return v14 < 0;
  else
    return v4 < v6;
}

uint64_t llvm::MCContext::XCOFFSectionKey::operator<(const void **a1, const void **a2)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;

  v4 = *((unsigned __int8 *)a1 + 28);
  v5 = *((unsigned __int8 *)a2 + 28);
  if (*((_BYTE *)a1 + 28))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4 != v5)
      return v4 != 0;
    v7 = *((char *)a2 + 23);
    v8 = *((char *)a1 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a1 + 23);
    else
      v9 = (size_t)a1[1];
    if (v8 >= 0)
      v10 = a1;
    else
      v10 = *a1;
    if (v7 >= 0)
      v11 = *((unsigned __int8 *)a2 + 23);
    else
      v11 = (size_t)a2[1];
    if (v7 >= 0)
      v12 = a2;
    else
      v12 = *a2;
    if (v11 >= v9)
      v13 = v9;
    else
      v13 = v11;
    v14 = memcmp(v10, v12, v13);
    v15 = v9 < v11;
    if (v14)
      v15 = v14 < 0;
    if (v15)
      return 1;
    v16 = memcmp(v12, v10, v13);
    v17 = v11 < v9;
    if (v16)
      v17 = v16 < 0;
    if (!v17)
      return *((_DWORD *)a1 + 6) < *((_DWORD *)a2 + 6);
    return 0;
  }
  v19 = *((char *)a2 + 23);
  v20 = *((char *)a1 + 23);
  if (v20 >= 0)
    v21 = *((unsigned __int8 *)a1 + 23);
  else
    v21 = (size_t)a1[1];
  if (v20 >= 0)
    v22 = a1;
  else
    v22 = *a1;
  if (v19 >= 0)
    v23 = *((unsigned __int8 *)a2 + 23);
  else
    v23 = (size_t)a2[1];
  if (v19 >= 0)
    v24 = a2;
  else
    v24 = *a2;
  if (v23 >= v21)
    v25 = v21;
  else
    v25 = v23;
  v26 = memcmp(v22, v24, v25);
  v27 = v21 < v23;
  if (v26)
    v27 = v26 < 0;
  if (v27)
    return 1;
  v28 = memcmp(v24, v22, v25);
  v29 = v23 < v21;
  if (v28)
    v29 = v28 < 0;
  if (v29)
    return 0;
  return *((unsigned __int8 *)a1 + 24) < *((unsigned __int8 *)a2 + 24);
}

uint64_t *std::__tree<std::__value_type<llvm::MCContext::XCOFFSectionKey,llvm::MCSectionXCOFF *>,std::__map_value_compare<llvm::MCContext::XCOFFSectionKey,std::__value_type<llvm::MCContext::XCOFFSectionKey,llvm::MCSectionXCOFF *>,std::less<llvm::MCContext::XCOFFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::XCOFFSectionKey,llvm::MCSectionXCOFF *>>>::__emplace_unique_key_args<llvm::MCContext::XCOFFSectionKey,std::pair<llvm::MCContext::XCOFFSectionKey,decltype(nullptr)>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (const void **)(v5 + 4);
        if (!llvm::MCContext::XCOFFSectionKey::operator<(a2, (const void **)v5 + 4))
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (!llvm::MCContext::XCOFFSectionKey::operator<(v9, a2))
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_9;
    }
    if (*v6)
      return *v6;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_9:
  v10 = operator new(0x48uLL);
  v10[2] = *(_OWORD *)a3;
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v10 + 14) = *(_DWORD *)(a3 + 24);
  *((_BYTE *)v10 + 60) = *(_BYTE *)(a3 + 28);
  *((_QWORD *)v10 + 8) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v8;
  *v6 = (uint64_t *)v10;
  v11 = (uint64_t *)**a1;
  v12 = (uint64_t *)v10;
  if (v11)
  {
    *a1 = v11;
    v12 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v10;
}

__n128 std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1E0E50618;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E50618;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  void *v21;
  unsigned int v22;
  _QWORD v23[21];

  v23[20] = *MEMORY[0x1E0C80C00];
  llvm::SourceMgr::GetMessage(*a3, **(const char ***)(a1 + 8), 0, *(llvm::Twine **)(a1 + 16), 0, 0, 0, 0, (uint64_t)&v10);
  *(_OWORD *)a2 = v10;
  v4 = (void **)(a2 + 16);
  if (*(char *)(a2 + 39) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v11;
  *(_QWORD *)(a2 + 32) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  *(_QWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 48) = v14;
  v5 = (void **)(a2 + 56);
  if (*(char *)(a2 + 79) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v15;
  *(_QWORD *)(a2 + 72) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  v6 = (void **)(a2 + 80);
  if (*(char *)(a2 + 103) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v17;
  *(_QWORD *)(a2 + 96) = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  v7 = *(void **)(a2 + 104);
  if (v7)
  {
    *(_QWORD *)(a2 + 112) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(a2 + 104) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 120) = v20;
  __p[1] = 0;
  v20 = 0;
  __p[0] = 0;
  llvm::SmallVectorImpl<llvm::SMFixIt>::operator=(a2 + 128, (uint64_t *)&v21);
  v8 = (char *)v21;
  if (v22)
  {
    v9 = 40 * v22;
    do
    {
      if (v8[v9 - 1] < 0)
        operator delete(*(void **)&v8[v9 - 24]);
      v9 -= 40;
    }
    while (v9);
    v8 = (char *)v21;
  }
  if (v8 != (char *)v23)
    free(v8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18) < 0)
  {
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        return;
LABEL_25:
      operator delete((void *)v11);
      return;
    }
  }
  else if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v12) < 0)
    goto LABEL_25;
}

uint64_t std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4llvm9MCContext11reportErrorENS_5SMLocERKNS_5TwineEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4llvm9MCContext11reportErrorENS_5SMLocERKNS_5TwineEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4llvm9MCContext11reportErrorENS_5SMLocERKNS_5TwineEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4llvm9MCContext11reportErrorENS_5SMLocERKNS_5TwineEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::target_type()
{
}

uint64_t llvm::SmallVectorImpl<llvm::SMFixIt>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  void **v18;
  char *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  void **v23;
  _OWORD *v24;
  char *v25;
  unsigned int v26;
  char *v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void **i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  if ((uint64_t *)a1 != a2)
  {
    v4 = a2 + 2;
    v5 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      v9 = a2 + 1;
      v11 = *((unsigned int *)a2 + 2);
      v12 = *(unsigned int *)(a1 + 8);
      if (v12 >= v11)
      {
        v15 = *(char **)a1;
        if ((_DWORD)v11)
        {
          v16 = v5 + 40 * v11;
          do
          {
            *(_OWORD *)v15 = *(_OWORD *)v5;
            v18 = (void **)(v15 + 16);
            if (v15[39] < 0)
              operator delete(*v18);
            v17 = *(_OWORD *)(v5 + 16);
            *((_QWORD *)v15 + 4) = *(_QWORD *)(v5 + 32);
            *(_OWORD *)v18 = v17;
            *(_BYTE *)(v5 + 39) = 0;
            *(_BYTE *)(v5 + 16) = 0;
            v15 += 40;
            v5 += 40;
          }
          while (v5 != v16);
          v19 = *(char **)a1;
          LODWORD(v12) = *(_DWORD *)(a1 + 8);
        }
        else
        {
          v19 = *(char **)a1;
        }
        for (i = (void **)&v19[40 * v12]; i != (void **)v15; i -= 5)
        {
          if (*((char *)i - 1) < 0)
            operator delete(*(i - 3));
        }
        *(_DWORD *)(a1 + 8) = v11;
        v33 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v33)
        {
          v34 = *a2;
          v35 = 40 * v33;
          do
          {
            if (*(char *)(v34 + v35 - 1) < 0)
              operator delete(*(void **)(v34 + v35 - 24));
            v35 -= 40;
          }
          while (v35);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v11)
        {
          v20 = *(_OWORD **)a1;
          if ((_DWORD)v12)
          {
            v21 = v5 + 40 * v12;
            do
            {
              *v20 = *(_OWORD *)v5;
              v23 = (void **)(v20 + 1);
              if (*((char *)v20 + 39) < 0)
                operator delete(*v23);
              v22 = *(_OWORD *)(v5 + 16);
              *((_QWORD *)v20 + 4) = *(_QWORD *)(v5 + 32);
              *(_OWORD *)v23 = v22;
              *(_BYTE *)(v5 + 39) = 0;
              *(_BYTE *)(v5 + 16) = 0;
              v20 = (_OWORD *)((char *)v20 + 40);
              v5 += 40;
            }
            while (v5 != v21);
            v20 = *(_OWORD **)a1;
          }
          else
          {
            v12 = 0;
          }
        }
        else
        {
          if ((_DWORD)v12)
          {
            v13 = *(char **)a1;
            v14 = 40 * v12;
            do
            {
              if (v13[v14 - 1] < 0)
                operator delete(*(void **)&v13[v14 - 24]);
              v14 -= 40;
            }
            while (v14);
          }
          *(_DWORD *)(a1 + 8) = 0;
          v45 = 0;
          v24 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v11, 40, &v45);
          v20 = v24;
          v25 = *(char **)a1;
          v26 = *(_DWORD *)(a1 + 8);
          if (v26)
          {
            v27 = &v25[40 * v26];
            v28 = v24;
            do
            {
              *(_OWORD *)v28 = *(_OWORD *)v25;
              v29 = *((_OWORD *)v25 + 1);
              v28[4] = *((_QWORD *)v25 + 4);
              *((_OWORD *)v28 + 1) = v29;
              *((_QWORD *)v25 + 3) = 0;
              *((_QWORD *)v25 + 4) = 0;
              *((_QWORD *)v25 + 2) = 0;
              v25 += 40;
              v28 += 5;
            }
            while (v25 != v27);
            v25 = *(char **)a1;
            v30 = *(unsigned int *)(a1 + 8);
            if ((_DWORD)v30)
            {
              v31 = 40 * v30;
              do
              {
                if (v25[v31 - 1] < 0)
                  operator delete(*(void **)&v25[v31 - 24]);
                v31 -= 40;
              }
              while (v31);
              v25 = *(char **)a1;
            }
          }
          v36 = v45;
          if (v25 != (char *)(a1 + 16))
            free(v25);
          v12 = 0;
          *(_QWORD *)a1 = v20;
          *(_DWORD *)(a1 + 12) = v36;
        }
        v37 = *a2;
        v38 = *((unsigned int *)a2 + 2);
        if (v12 != v38)
        {
          v39 = v37 + 40 * v38;
          v40 = (char *)v20 + 40 * v12;
          v41 = v37 + 40 * v12;
          do
          {
            *(_OWORD *)v40 = *(_OWORD *)v41;
            v42 = *(_OWORD *)(v41 + 16);
            *((_QWORD *)v40 + 4) = *(_QWORD *)(v41 + 32);
            *((_OWORD *)v40 + 1) = v42;
            *(_QWORD *)(v41 + 24) = 0;
            *(_QWORD *)(v41 + 32) = 0;
            *(_QWORD *)(v41 + 16) = 0;
            v41 += 40;
            v40 += 40;
          }
          while (v41 != v39);
          v37 = *a2;
        }
        *(_DWORD *)(a1 + 8) = v11;
        v43 = *v9;
        if ((_DWORD)v43)
        {
          v44 = 40 * v43;
          do
          {
            if (*(char *)(v37 + v44 - 1) < 0)
              operator delete(*(void **)(v37 + v44 - 24));
            v44 -= 40;
          }
          while (v44);
        }
      }
    }
    else
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 40 * v7;
        do
        {
          if (v6[v8 - 1] < 0)
            operator delete(*(void **)&v6[v8 - 24]);
          v8 -= 40;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *a2;
      v9 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    *v9 = 0;
  }
  return a1;
}

void llvm::MCDwarfLineTable::tryGetFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)a4;
  v11 = *(_BYTE *)(a4 + 16);
  v8 = *(_OWORD *)a5;
  v9 = *(_QWORD *)(a5 + 16);
  llvm::MCDwarfLineTableHeader::tryGetFile(a1, a2, a3, &v10, &v8, a6, a7, a8);
}

void llvm::MCDwarfLineTableHeader::tryGetFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  int v15;
  const void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  int v23;
  size_t v24;
  const void *v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const void *v35;
  uint64_t *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  __int128 *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  const char *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  _BYTE *v65;
  char *Address;
  uint64_t v67;
  __int128 v68;
  int v69;
  size_t v70;
  const void *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  char v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  _QWORD v88[4];
  __int16 v89;
  _QWORD v90[4];
  __int16 v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  _BYTE __dst[24];
  _WORD v96[128];
  __int128 v97;
  char v98;
  uint64_t v99;

  v13 = a1;
  v99 = *MEMORY[0x1E0C80C00];
  v15 = *(char *)(a1 + 375);
  if (v15 >= 0)
    v16 = (const void *)(a1 + 352);
  else
    v16 = *(const void **)(a1 + 352);
  v18 = *(const char **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v19 = *(unsigned __int8 *)(a1 + 375);
  if (v15 < 0)
    v19 = *(_QWORD *)(a1 + 360);
  if (v17 == v19)
  {
    if (!v17 || (a1 = memcmp(*(const void **)a2, v16, *(_QWORD *)(a2 + 8)), !(_DWORD)a1))
    {
      v17 = 0;
      v18 = "";
      *(_QWORD *)a2 = "";
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  if (*(_QWORD *)(a3 + 8))
  {
    v20 = *(_DWORD *)(v13 + 104);
    if (v20)
      goto LABEL_12;
LABEL_15:
    v21 = *((_BYTE *)a4 + 16);
    *(_BYTE *)(v13 + 449) &= v21;
    *(_BYTE *)(v13 + 450) |= v21;
    *(_BYTE *)(v13 + 448) = *((_BYTE *)a5 + 16);
    if (a6 < 5)
      goto LABEL_24;
    goto LABEL_16;
  }
  v17 = 0;
  *(_QWORD *)a3 = "<stdin>";
  *(_QWORD *)(a3 + 8) = 7;
  v18 = "";
  *(_QWORD *)a2 = "";
  *(_QWORD *)(a2 + 8) = 0;
  v20 = *(_DWORD *)(v13 + 104);
  if (!v20)
    goto LABEL_15;
LABEL_12:
  if (a6 < 5)
    goto LABEL_24;
LABEL_16:
  v97 = *a4;
  v98 = *((_BYTE *)a4 + 16);
  v22 = *(unsigned __int8 *)(v13 + 399);
  v23 = (char)v22;
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(v13 + 384);
  if (v22)
  {
    v24 = *(_QWORD *)(a3 + 8);
    if (v22 == v24)
    {
      v25 = v23 >= 0 ? (const void *)(v13 + 376) : *(const void **)(v13 + 376);
      a1 = memcmp(v25, *(const void **)a3, v24);
      if (!(_DWORD)a1)
      {
        if (*(_BYTE *)(v13 + 420) && v98)
        {
          if (*(_QWORD *)(v13 + 404) != (_QWORD)v97 || *(_QWORD *)(v13 + 412) != *((_QWORD *)&v97 + 1))
            goto LABEL_24;
        }
        else if ((*(_BYTE *)(v13 + 420) != 0) != (v98 != 0))
        {
          goto LABEL_24;
        }
        *(_BYTE *)(a8 + 8) &= ~1u;
        *(_DWORD *)a8 = 0;
        return;
      }
    }
  }
LABEL_24:
  if (a7)
  {
    v26 = (uint64_t *)(v13 + 96);
    v27 = a7;
    if (v20 > a7)
      goto LABEL_27;
    goto LABEL_26;
  }
  *(_QWORD *)__dst = v96;
  if (v20 <= 1)
    a7 = 1;
  else
    a7 = v20;
  *(_OWORD *)&__dst[8] = xmmword_181236410;
  v88[0] = v18;
  v88[1] = v17;
  v88[2] = 0;
  v89 = 2053;
  v35 = *(const void **)a3;
  v34 = *(_QWORD *)(a3 + 8);
  v90[0] = v88;
  v90[2] = v35;
  v90[3] = v34;
  v91 = 1282;
  llvm::Twine::toVector((uint64_t)v90, (uint64_t)__dst);
  v92 = *(_QWORD *)__dst;
  v93 = *(_QWORD *)&__dst[8];
  v94 = a7;
  v36 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(v13 + 328, *(int8x16_t **)__dst, *(const unsigned __int8 **)&__dst[8], &v94);
  v38 = v37;
  if (!v37)
  {
    v39 = *v36;
    *(_BYTE *)(a8 + 8) &= ~1u;
    *(_DWORD *)a8 = *(_DWORD *)(v39 + 8);
  }
  a1 = *(_QWORD *)__dst;
  if (*(_WORD **)__dst != v96)
    free(*(void **)__dst);
  if (v38)
  {
    v26 = (uint64_t *)(v13 + 96);
    v27 = a7;
    if (*(_DWORD *)(v13 + 104) > a7)
    {
LABEL_27:
      v28 = *v26 + 72 * v27;
      if (*(char *)(v28 + 23) < 0)
      {
        if (*(_QWORD *)(v28 + 8))
          goto LABEL_29;
      }
      else if (*(_BYTE *)(v28 + 23))
      {
LABEL_29:
        v29 = llvm::inconvertibleErrorCode((llvm *)a1);
        v31 = v30;
        v32 = operator new(0x38uLL);
        v33 = "file number already allocated";
LABEL_59:
        *(_QWORD *)__dst = v33;
        v96[4] = 259;
        v57 = llvm::StringError::StringError((uint64_t)v32, (llvm::Twine *)__dst, v29, v31);
        *(_BYTE *)(a8 + 8) |= 1u;
        *(_QWORD *)a8 = v57;
        return;
      }
      if (*(unsigned __int8 *)(v13 + 448) != *((unsigned __int8 *)a5 + 16))
      {
        v29 = llvm::inconvertibleErrorCode((llvm *)a1);
        v31 = v56;
        v32 = operator new(0x38uLL);
        v33 = "inconsistent use of embedded source";
        goto LABEL_59;
      }
      v83 = *v26;
      v84 = v27;
      v40 = *(_QWORD *)(a2 + 8);
      if (!v40)
      {
        v41 = llvm::sys::path::filename(*(unsigned __int8 **)a3, *(unsigned __int8 **)(a3 + 8), 0);
        if (v42)
        {
          v43 = v41;
          v44 = v42;
          *(_QWORD *)a2 = llvm::sys::path::parent_path(*(unsigned __int8 **)a3, *(_QWORD *)(a3 + 8), 0);
          *(_QWORD *)(a2 + 8) = v45;
          if (!v45)
          {
            v69 = 0;
            v46 = v84;
            goto LABEL_85;
          }
          *(_QWORD *)a3 = v43;
          *(_QWORD *)(a3 + 8) = v44;
        }
        v40 = *(_QWORD *)(a2 + 8);
        v46 = v84;
        if (!v40)
        {
          v69 = 0;
          goto LABEL_85;
        }
      }
      v47 = *(_QWORD *)(v13 + 8);
      v48 = *(unsigned int *)(v13 + 16);
      if ((_DWORD)v48)
      {
        v80 = v47 + 24 * v48;
        v81 = *(_QWORD *)(v13 + 8);
        v85 = a8;
        v49 = a5;
        v50 = *(const char **)a2;
        v82 = *(unsigned int *)(v13 + 16);
        v51 = 24 * v48;
        v52 = v81;
        while (1)
        {
          v53 = *(unsigned __int8 *)(v52 + 23);
          v54 = (char)v53;
          if ((v53 & 0x80u) != 0)
            v53 = *(_QWORD *)(v52 + 8);
          if (v53 == v40)
          {
            v55 = v54 >= 0 ? (const void *)v52 : *(const void **)v52;
            if (!memcmp(v55, v50, v40))
              break;
          }
          v52 += 24;
          v51 -= 24;
          if (!v51)
          {
            v52 = v80;
            break;
          }
        }
        a5 = v49;
        a8 = v85;
        v47 = v81;
        v48 = v82;
      }
      else
      {
        v52 = *(_QWORD *)(v13 + 8);
      }
      v59 = 0xAAAAAAAAAAAAAAABLL * ((v52 - v47) >> 3);
      v46 = v84;
      if (v48 <= v59)
      {
        if (v40 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_100;
        v86 = v59;
        v60 = *(const char **)a2;
        if (v40 >= 0x17)
        {
          v62 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v62 = v40 | 7;
          v63 = v62 + 1;
          v64 = v60;
          v65 = operator new(v62 + 1);
          v60 = v64;
          v61 = v65;
          *(_QWORD *)&__dst[8] = v40;
          *(_QWORD *)&__dst[16] = v63 | 0x8000000000000000;
          *(_QWORD *)__dst = v65;
        }
        else
        {
          __dst[23] = v40;
          v61 = __dst;
        }
        memmove(v61, v60, v40);
        v61[v40] = 0;
        Address = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress(v13 + 8, (unint64_t)__dst, 1);
        v67 = *(_QWORD *)(v13 + 8) + 24 * *(unsigned int *)(v13 + 16);
        v68 = *(_OWORD *)Address;
        *(_QWORD *)(v67 + 16) = *((_QWORD *)Address + 2);
        *(_OWORD *)v67 = v68;
        *((_QWORD *)Address + 1) = 0;
        *((_QWORD *)Address + 2) = 0;
        *(_QWORD *)Address = 0;
        ++*(_DWORD *)(v13 + 16);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        LODWORD(v59) = v86;
      }
      v69 = v59 + 1;
LABEL_85:
      v70 = *(_QWORD *)(a3 + 8);
      if (v70 <= 0x7FFFFFFFFFFFFFF7)
      {
        v71 = *(const void **)a3;
        if (v70 >= 0x17)
        {
          v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v70 | 7) != 0x17)
            v73 = v70 | 7;
          v74 = v73 + 1;
          v72 = operator new(v73 + 1);
          v75 = v74 | 0x8000000000000000;
          v46 = v84;
          *(_QWORD *)&__dst[8] = v70;
          *(_QWORD *)&__dst[16] = v75;
          *(_QWORD *)__dst = v72;
        }
        else
        {
          __dst[23] = v70;
          v72 = __dst;
          if (!v70)
            goto LABEL_93;
        }
        memmove(v72, v71, v70);
LABEL_93:
        v72[v70] = 0;
        if (*(char *)(v28 + 23) < 0)
          operator delete(*(void **)v28);
        *(_OWORD *)v28 = *(_OWORD *)__dst;
        *(_QWORD *)(v28 + 16) = *(_QWORD *)&__dst[16];
        v76 = v83 + 72 * v46;
        *(_DWORD *)(v76 + 24) = v69;
        v77 = *a4;
        *(_BYTE *)(v76 + 44) = *((_BYTE *)a4 + 16);
        *(_OWORD *)(v76 + 28) = v77;
        v78 = *((_BYTE *)a4 + 16);
        *(_BYTE *)(v13 + 449) &= v78;
        *(_BYTE *)(v13 + 450) |= v78;
        v79 = *a5;
        *(_BYTE *)(v76 + 64) = *((_BYTE *)a5 + 16);
        *(_OWORD *)(v76 + 48) = v79;
        if (*((_BYTE *)a5 + 16))
          *(_BYTE *)(v13 + 448) = 1;
        *(_BYTE *)(a8 + 8) &= ~1u;
        *(_DWORD *)a8 = a7;
        return;
      }
LABEL_100:
      abort();
    }
LABEL_26:
    llvm::SmallVectorImpl<llvm::MCDwarfFile>::resizeImpl<false>((uint64_t)v26, a7 + 1);
    goto LABEL_27;
  }
}

void llvm::MCGenDwarfLabelEntry::Make(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int BufferContainingLoc;
  int LineAndColumn;
  uint64_t TempSymbol;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  int v29;
  int v30;
  uint64_t v31;

  v4 = *(_DWORD *)(a1 + 8);
  if ((v4 & 2) == 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 152);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 32 * v9 - 32);
      v11 = *(_DWORD *)(v8 + 1616);
      if (!v11)
        return;
    }
    else
    {
      v10 = 0;
      v11 = *(_DWORD *)(v8 + 1616);
      if (!v11)
        return;
    }
    v12 = *(_QWORD *)(v8 + 1600);
    v13 = v11 - 1;
    v14 = ((v10 >> 4) ^ (v10 >> 9)) & v13;
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15 == v10)
    {
LABEL_7:
      if ((v4 & 1) != 0)
      {
        v17 = *(_QWORD **)(a1 - 8);
        v19 = *v17;
        v16 = v17 + 2;
        v18 = v19;
        if (v19)
        {
          if (*v16 == 95)
          {
            v16 = (_BYTE *)(*(_QWORD *)(a1 - 8) + 17);
            v20 = v18 - 1;
          }
          else
          {
            v20 = v18;
          }
          goto LABEL_14;
        }
      }
      else
      {
        v16 = 0;
      }
      v20 = 0;
LABEL_14:
      v21 = *(_DWORD *)(v8 + 1596);
      BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a3, *a4);
      LineAndColumn = llvm::SourceMgr::getLineAndColumn(a3, (char *)*a4, BufferContainingLoc);
      TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v8);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, TempSymbol, 0);
      v25 = *(_QWORD **)(a2 + 8);
      *(_QWORD *)&v28 = v16;
      *((_QWORD *)&v28 + 1) = v20;
      v29 = v21;
      v30 = LineAndColumn;
      v31 = TempSymbol;
      llvm::MCContext::addMCGenDwarfLabelEntry(v25, &v28);
      return;
    }
    v26 = 1;
    while (v15 != -4096)
    {
      v27 = v14 + v26++;
      v14 = v27 & v13;
      v15 = *(_QWORD *)(v12 + 8 * v14);
      if (v15 == v10)
        goto LABEL_7;
    }
  }
}

void llvm::MCContext::addMCGenDwarfLabelEntry(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  unint64_t v5;
  __int128 v6;
  _OWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;

  v4 = (char *)a1[206];
  v5 = a1[207];
  if ((unint64_t)v4 < v5)
  {
    v6 = a2[1];
    *(_OWORD *)v4 = *a2;
    *((_OWORD *)v4 + 1) = v6;
    v7 = v4 + 32;
LABEL_3:
    a1[206] = v7;
    return;
  }
  v8 = (char *)a1[205];
  v9 = (v4 - v8) >> 5;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 59)
    abort();
  v11 = v5 - (_QWORD)v8;
  if (v11 >> 4 > v10)
    v10 = v11 >> 4;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
    v12 = 0x7FFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = (char *)operator new(32 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[32 * v9];
  v15 = a2[1];
  *(_OWORD *)v14 = *a2;
  *((_OWORD *)v14 + 1) = v15;
  v7 = v14 + 32;
  if (v4 != v8)
  {
    do
    {
      v16 = *((_OWORD *)v4 - 1);
      *((_OWORD *)v14 - 2) = *((_OWORD *)v4 - 2);
      *((_OWORD *)v14 - 1) = v16;
      v14 -= 32;
      v4 -= 32;
    }
    while (v4 != v8);
    v4 = (char *)a1[205];
  }
  a1[205] = v14;
  a1[206] = v7;
  a1[207] = &v13[32 * v12];
  if (!v4)
    goto LABEL_3;
  operator delete(v4);
  a1[206] = v7;
}

void llvm::SmallVectorImpl<llvm::MCDwarfFile>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = 72 * v2;
      v6 = v5 + *(_QWORD *)a1 - 72;
      v7 = 72 * a2 - v5;
      do
      {
        if (*(char *)(v6 + 23) < 0)
          operator delete(*(void **)v6);
        v6 -= 72;
        v7 += 72;
      }
      while (v7);
      goto LABEL_24;
    }
    if (*(unsigned int *)(a1 + 12) >= a2)
    {
      v10 = *(char **)a1;
      if (v2 == a2)
      {
LABEL_24:
        *(_DWORD *)(a1 + 8) = a2;
        return;
      }
    }
    else
    {
      v24 = 0;
      v8 = (char *)(a1 + 16);
      v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 72, &v24);
      v10 = v9;
      v11 = *(char **)a1;
      v12 = *(_DWORD *)(a1 + 8);
      if (v12)
      {
        v13 = &v11[72 * v12];
        v14 = v9;
        do
        {
          v15 = *(_OWORD *)v11;
          *((_QWORD *)v14 + 2) = *((_QWORD *)v11 + 2);
          *(_OWORD *)v14 = v15;
          *((_QWORD *)v11 + 1) = 0;
          *((_QWORD *)v11 + 2) = 0;
          *(_QWORD *)v11 = 0;
          v16 = *(_OWORD *)(v11 + 24);
          v17 = *(_OWORD *)(v11 + 40);
          *(_OWORD *)(v14 + 49) = *(_OWORD *)(v11 + 49);
          *(_OWORD *)(v14 + 40) = v17;
          *(_OWORD *)(v14 + 24) = v16;
          v11 += 72;
          v14 += 72;
        }
        while (v11 != v13);
        v11 = *(char **)a1;
        v18 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v18)
        {
          v19 = 72 * v18;
          do
          {
            if (v11[v19 - 49] < 0)
              operator delete(*(void **)&v11[v19 - 72]);
            v19 -= 72;
          }
          while (v19);
          v11 = *(char **)a1;
        }
      }
      v20 = v24;
      if (v11 != v8)
        free(v11);
      *(_QWORD *)a1 = v10;
      *(_DWORD *)(a1 + 12) = v20;
      v2 = *(unsigned int *)(a1 + 8);
      if (v2 == a2)
        goto LABEL_24;
    }
    v21 = 72 * v2;
    v22 = &v10[72 * v2];
    v23 = 72 * a2 - v21;
    do
    {
      *((_QWORD *)v22 + 8) = 0;
      *((_OWORD *)v22 + 2) = 0uLL;
      *((_OWORD *)v22 + 3) = 0uLL;
      *(_OWORD *)v22 = 0uLL;
      *((_OWORD *)v22 + 1) = 0uLL;
      v22 += 72;
      v23 -= 72;
    }
    while (v23);
    goto LABEL_24;
  }
}

std::string::size_type *std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>(std::string::size_type *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  __int128 v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (a4)
  {
    if (a4 >= 0x2E8BA2E8BA2E8BBLL)
LABEL_14:
      abort();
    v6 = result;
    v7 = 11 * a4;
    result = (std::string::size_type *)operator new(88 * a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v8 = a2 + 64;
      v9 = (std::string *)(result + 8);
      do
      {
        while (1)
        {
          v12 = *(_OWORD *)(v8 - 48);
          *(_OWORD *)&v9[-3].__r_.__value_.__r.__words[1] = *(_OWORD *)(v8 - 64);
          *(_OWORD *)&v9[-2].__r_.__value_.__l.__data_ = v12;
          v13 = *(_BYTE **)(v8 - 24);
          v9[-2].__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 - 32);
          v9[-1].__r_.__value_.__r.__words[0] = 0;
          v9[-1].__r_.__value_.__l.__size_ = 0;
          v9[-1].__r_.__value_.__r.__words[2] = 0;
          v14 = *(_BYTE **)(v8 - 16);
          v15 = v14 - v13;
          if (v14 != v13)
          {
            if ((v15 & 0x8000000000000000) != 0)
              goto LABEL_14;
            v16 = (char *)operator new(v14 - v13);
            v9[-1].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
            v9[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v16;
            v17 = &v16[v15];
            v9[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v16[v15];
            memcpy(v16, v13, v15);
            v9[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v17;
          }
          v18 = v8 - 64;
          if ((*(char *)(v8 + 23) & 0x80000000) == 0)
            break;
          v10 = *(const std::string::value_type **)v8;
          v11 = *(_QWORD *)(v8 + 8);
          v8 += 88;
          std::string::__init_copy_ctor_external(v9, v10, v11);
          v9 = (std::string *)((char *)v9 + 88);
          if (v18 + 88 == a3)
            goto LABEL_11;
        }
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v8;
        v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
        v8 += 88;
        v9 = (std::string *)((char *)v9 + 88);
      }
      while (v18 + 88 != a3);
LABEL_11:
      result = &v9[-3].__r_.__value_.__l.__size_;
    }
    v6[1] = result;
  }
  return result;
}

void llvm::MCExpr::print(uint64_t a1)
{
  __asm { BR              X9 }
}

llvm::raw_ostream *sub_180C2D58C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  llvm::raw_ostream *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  llvm::raw_ostream *result;
  _BYTE *v55;

  if (**(unsigned __int8 **)(v46 + 16) - 1 <= 1)
  {
    llvm::MCExpr::print();
    v50 = *(_DWORD *)(v46 + 1) & 0xFFFFFF;
    if (v50 > 0x13)
      goto LABEL_12;
LABEL_11:
    __asm { BR              X9 }
  }
  v51 = (_BYTE *)*((_QWORD *)v44 + 4);
  if ((unint64_t)v51 >= *((_QWORD *)v44 + 3))
  {
    llvm::raw_ostream::write(v44, 40);
  }
  else
  {
    *((_QWORD *)v44 + 4) = v51 + 1;
    *v51 = v49;
  }
  ((void (*)(_QWORD, llvm::raw_ostream *, uint64_t, _QWORD))llvm::MCExpr::print)(*(_QWORD *)(v46 + 16), v44, v45, 0);
  v52 = (_BYTE *)*((_QWORD *)v44 + 4);
  if ((unint64_t)v52 >= *((_QWORD *)v44 + 3))
  {
    llvm::raw_ostream::write(v44, 41);
    v50 = *(_DWORD *)(v46 + 1) & 0xFFFFFF;
    if (v50 > 0x13)
      goto LABEL_12;
    goto LABEL_11;
  }
  *((_QWORD *)v44 + 4) = v52 + 1;
  *v52 = v47;
  v50 = *(_DWORD *)(v46 + 1) & 0xFFFFFF;
  if (v50 <= 0x13)
    goto LABEL_11;
LABEL_12:
  if (**(unsigned __int8 **)(v46 + 24) - 1 < 2)
    JUMPOUT(0x180C2D574);
  v53 = (_BYTE *)*((_QWORD *)v44 + 4);
  if ((unint64_t)v53 >= *((_QWORD *)v44 + 3))
  {
    llvm::raw_ostream::write(v44, 40);
  }
  else
  {
    *((_QWORD *)v44 + 4) = v53 + 1;
    *v53 = 40;
  }
  result = (llvm::raw_ostream *)((uint64_t (*)(_QWORD, llvm::raw_ostream *, uint64_t, _QWORD))llvm::MCExpr::print)(*(_QWORD *)(v46 + 24), v44, v45, 0);
  v55 = (_BYTE *)*((_QWORD *)v44 + 4);
  if ((unint64_t)v55 >= *((_QWORD *)v44 + 3))
    return llvm::raw_ostream::write(v44, 41);
  *((_QWORD *)v44 + 4) = v55 + 1;
  *v55 = 41;
  return result;
}

char *llvm::MCSymbolRefExpr::getVariantKindName(__int16 a1)
{
  return off_1E0E5ABF0[a1];
}

unint64_t llvm::MCBinaryExpr::create(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  char *buffer;
  uint64_t v15;
  unint64_t result;

  *(_QWORD *)(a4 + 264) += 32;
  v10 = *(_QWORD *)(a4 + 184);
  if (v10)
    v11 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 32 > *(_QWORD *)(a4 + 192) - v10;
  else
    v11 = 1;
  if (!v11)
  {
    result = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a4 + 184) = result + 32;
    if (!result)
      return result;
    goto LABEL_13;
  }
  v12 = *(_DWORD *)(a4 + 208) >> 7;
  if (v12 >= 0x1E)
    LOBYTE(v12) = 30;
  v13 = 4096 << v12;
  buffer = (char *)llvm::allocate_buffer(4096 << v12, (std::align_val_t)8uLL);
  v15 = *(unsigned int *)(a4 + 208);
  if (v15 >= *(_DWORD *)(a4 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 200, (void *)(a4 + 216), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a4 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(a4 + 200) + 8 * v15) = buffer;
  ++*(_DWORD *)(a4 + 208);
  *(_QWORD *)(a4 + 192) = &buffer[v13];
  result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a4 + 184) = result + 32;
  if (result)
  {
LABEL_13:
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 1) = a1 & 0xFFFFFF | (*(unsigned __int8 *)(result + 4) << 24);
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = a3;
  }
  return result;
}

unint64_t llvm::MCUnaryExpr::create(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  char *buffer;
  uint64_t v13;
  unint64_t result;

  *(_QWORD *)(a3 + 264) += 24;
  v8 = *(_QWORD *)(a3 + 184);
  if (v8)
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(_QWORD *)(a3 + 192) - v8;
  else
    v9 = 1;
  if (!v9)
  {
    result = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a3 + 184) = result + 24;
    if (!result)
      return result;
    goto LABEL_13;
  }
  v10 = *(_DWORD *)(a3 + 208) >> 7;
  if (v10 >= 0x1E)
    LOBYTE(v10) = 30;
  v11 = 4096 << v10;
  buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
  v13 = *(unsigned int *)(a3 + 208);
  if (v13 >= *(_DWORD *)(a3 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 200, (void *)(a3 + 216), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a3 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 200) + 8 * v13) = buffer;
  ++*(_DWORD *)(a3 + 208);
  *(_QWORD *)(a3 + 192) = &buffer[v11];
  result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a3 + 184) = result + 24;
  if (result)
  {
LABEL_13:
    *(_BYTE *)result = 3;
    *(_DWORD *)(result + 1) = a1 & 0xFFFFFF | (*(unsigned __int8 *)(result + 4) << 24);
    *(_QWORD *)(result + 8) = a4;
    *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

unint64_t llvm::MCConstantExpr::create(llvm::MCConstantExpr *this, uint64_t a2, llvm::MCContext *a3, int a4)
{
  int v5;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  char *buffer;
  uint64_t v13;
  unint64_t result;
  int v15;

  v5 = (int)a3;
  *(_QWORD *)(a2 + 264) += 24;
  v8 = *(_QWORD *)(a2 + 184);
  if (v8)
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(_QWORD *)(a2 + 192) - v8;
  else
    v9 = 1;
  if (!v9)
  {
    result = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 184) = result + 24;
    if (!result)
      return result;
    goto LABEL_13;
  }
  v10 = *(_DWORD *)(a2 + 208) >> 7;
  if (v10 >= 0x1E)
    LOBYTE(v10) = 30;
  v11 = 4096 << v10;
  buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
  v13 = *(unsigned int *)(a2 + 208);
  if (v13 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 200) + 8 * v13) = buffer;
  ++*(_DWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = &buffer[v11];
  result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a2 + 184) = result + 24;
  if (result)
  {
LABEL_13:
    if (v5)
      v15 = 256;
    else
      v15 = 0;
    *(_BYTE *)result = 1;
    *(_DWORD *)(result + 1) = a4 & 0xFFFFFF | v15 | (*(unsigned __int8 *)(result + 4) << 24);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = this;
  }
  return result;
}

unint64_t llvm::MCSymbolRefExpr::create(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  char *buffer;
  uint64_t v13;
  unint64_t result;
  int v15;

  *(_QWORD *)(a3 + 264) += 24;
  v8 = *(_QWORD *)(a3 + 184);
  if (v8)
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(_QWORD *)(a3 + 192) - v8;
  else
    v9 = 1;
  if (!v9)
  {
    result = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a3 + 184) = result + 24;
    if (!result)
      return result;
    goto LABEL_13;
  }
  v10 = *(_DWORD *)(a3 + 208) >> 7;
  if (v10 >= 0x1E)
    LOBYTE(v10) = 30;
  v11 = 4096 << v10;
  buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
  v13 = *(unsigned int *)(a3 + 208);
  if (v13 >= *(_DWORD *)(a3 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 200, (void *)(a3 + 216), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a3 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 200) + 8 * v13) = buffer;
  ++*(_DWORD *)(a3 + 208);
  *(_QWORD *)(a3 + 192) = &buffer[v11];
  result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a3 + 184) = result + 24;
  if (result)
  {
LABEL_13:
    v15 = a2 | (*(unsigned __int8 *)(*(_QWORD *)(a3 + 144) + 18) << 16);
    *(_BYTE *)result = 2;
    *(_DWORD *)(result + 1) = v15 | (*(unsigned __int8 *)(result + 4) << 24);
    *(_QWORD *)(result + 8) = a4;
    *(_QWORD *)(result + 16) = a1;
  }
  return result;
}

uint64_t llvm::MCSymbolRefExpr::getVariantKindForName(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  int v3;
  void *v4;
  size_t v5;
  int v6;
  uint64_t v7;
  _QWORD v69[2];
  unsigned __int8 v70;
  _QWORD v71[2];

  v71[0] = a1;
  v71[1] = a2;
  v2 = v69;
  llvm::StringRef::lower(v71, (uint64_t)v69);
  v3 = (char)v70;
  v4 = (void *)v69[0];
  if ((v70 & 0x80u) == 0)
  {
    v5 = v70;
  }
  else
  {
    v2 = (_WORD *)v69[0];
    v5 = v69[1];
  }
  switch(v5)
  {
    case 1uLL:
      v6 = *(unsigned __int8 *)v2;
      if (v6 == 104)
      {
        v7 = 49;
      }
      else if (v6 == 108)
      {
        v7 = 48;
      }
      else if (!memcmp(v2, "u", v5))
      {
        v7 = 65;
      }
      else
      {
        if (memcmp(v2, "l", v5))
          goto LABEL_339;
        v7 = 66;
      }
      break;
    case 2uLL:
      if (*v2 == 24936)
      {
        v7 = 50;
      }
      else if (!memcmp(v2, "ie", v5))
      {
        v7 = 125;
      }
      else if (!memcmp(v2, "hi", v5))
      {
        v7 = 140;
      }
      else
      {
        if (memcmp(v2, "lo", v5))
          goto LABEL_339;
        v7 = 141;
      }
      break;
    case 3uLL:
      if (*v2 == 28519 && *((_BYTE *)v2 + 2) == 116)
      {
        v7 = 2;
      }
      else if (*v2 == 27760 && *((_BYTE *)v2 + 2) == 116)
      {
        v7 = 12;
      }
      else if (!memcmp(v2, "toc", v5))
      {
        v7 = 61;
      }
      else if (!memcmp(v2, "tls", v5))
      {
        v7 = 94;
      }
      else if (!memcmp(v2, "lo8", v5))
      {
        v7 = 41;
      }
      else
      {
        if (memcmp(v2, "hi8", v5))
          goto LABEL_339;
        v7 = 42;
      }
      break;
    case 4uLL:
      switch(*(_DWORD *)v2)
      {
        case 0x70766C74:
          v7 = 20;
          break;
        case 0x65676170:
          v7 = 23;
          break;
        case 0x657A6973:
          v7 = 28;
          break;
        case 0x38736261:
          v7 = 30;
          break;
        case 0x68676968:
          v7 = 51;
          break;
        default:
          if (!memcmp(v2, "none", v5))
          {
            v7 = 32;
          }
          else
          {
            if (memcmp(v2, "hlo8", v5))
              goto LABEL_339;
            v7 = 43;
          }
          break;
      }
      break;
    case 5uLL:
      if (*(_DWORD *)v2 == 1701995376 && *((_BYTE *)v2 + 4) == 108)
      {
        v7 = 5;
      }
      else if (*(_DWORD *)v2 == 1735617652 && *((_BYTE *)v2 + 4) == 100)
      {
        v7 = 13;
      }
      else if (*(_DWORD *)v2 == 1819503732 && *((_BYTE *)v2 + 4) == 100)
      {
        v7 = 14;
      }
      else if (*(_DWORD *)v2 == 1718579316 && *((_BYTE *)v2 + 4) == 102)
      {
        v7 = 16;
      }
      else if (*(_DWORD *)v2 == 1701998708 && *((_BYTE *)v2 + 4) == 108)
      {
        v7 = 154;
      }
      else if (*(_DWORD *)v2 == 1751607656 && *((_BYTE *)v2 + 4) == 97)
      {
        v7 = 52;
      }
      else if (*(_DWORD *)v2 == 1081372519 && *((_BYTE *)v2 + 4) == 108)
      {
        v7 = 57;
      }
      else if (*(_DWORD *)v2 == 1081372519 && *((_BYTE *)v2 + 4) == 104)
      {
        v7 = 58;
      }
      else if (*(_DWORD *)v2 == 1633906540 && *((_BYTE *)v2 + 4) == 108)
      {
        v7 = 114;
      }
      else if (*(_DWORD *)v2 == 1080258420 && *((_BYTE *)v2 + 4) == 108)
      {
        v7 = 62;
      }
      else if (*(_DWORD *)v2 == 1080258420 && *((_BYTE *)v2 + 4) == 104)
      {
        v7 = 63;
      }
      else if (*(_DWORD *)v2 == 1869901678 && *((_BYTE *)v2 + 4) == 99)
      {
        v7 = 115;
      }
      else if (*(_DWORD *)v2 == 1869046887 && *((_BYTE *)v2 + 4) == 116)
      {
        v7 = 121;
      }
      else if (*(_DWORD *)v2 == 1819305063 && *((_BYTE *)v2 + 4) == 116)
      {
        v7 = 123;
      }
      else if (*(_DWORD *)v2 == 1869047145 && *((_BYTE *)v2 + 4) == 116)
      {
        v7 = 126;
      }
      else if (*(_DWORD *)v2 == 1869046892 && *((_BYTE *)v2 + 4) == 116)
      {
        v7 = 122;
      }
      else if (*(_DWORD *)v2 == 1819305068 && *((_BYTE *)v2 + 4) == 116)
      {
        v7 = 124;
      }
      else if (*(_DWORD *)v2 == 1701995123 && *((_BYTE *)v2 + 4) == 108)
      {
        v7 = 37;
      }
      else if (*(_DWORD *)v2 == 1701995124 && *((_BYTE *)v2 + 4) == 108)
      {
        v7 = 130;
      }
      else if (*(_DWORD *)v2 == 1701995117 && *((_BYTE *)v2 + 4) == 108)
      {
        v7 = 129;
      }
      else if (*(_DWORD *)v2 == 913073522 && *((_BYTE *)v2 + 4) == 52)
      {
        v7 = 137;
      }
      else if (*(_DWORD *)v2 == 1751081840 && *((_BYTE *)v2 + 4) == 105)
      {
        v7 = 142;
      }
      else
      {
        if (*(_DWORD *)v2 != 1818190704 || *((_BYTE *)v2 + 4) != 111)
          goto LABEL_339;
        v7 = 143;
      }
      break;
    case 6uLL:
      if (*(_DWORD *)v2 == 1919972452 && v2[2] == 27749)
      {
        v7 = 155;
      }
      else if (*(_DWORD *)v2 == 1869640804 && v2[2] == 26214)
      {
        v7 = 17;
      }
      else if (*(_DWORD *)v2 == 1869901671 && v2[2] == 26214)
      {
        v7 = 3;
      }
      else if (*(_DWORD *)v2 == 1920233319 && v2[2] == 27749)
      {
        v7 = 4;
      }
      else if (*(_DWORD *)v2 == 1869640814 && v2[2] == 26214)
      {
        v7 = 10;
      }
      else if (*(_DWORD *)v2 == 1819503732 && v2[2] == 28004)
      {
        v7 = 15;
      }
      else if (*(_DWORD *)v2 == 1919380841 && v2[2] == 27749)
      {
        v7 = 117;
      }
      else if (*(_DWORD *)v2 == 1869900912 && v2[2] == 26214)
      {
        v7 = 31;
      }
      else if (!memcmp(v2, "higher", v5))
      {
        v7 = 53;
      }
      else if (!memcmp(v2, "got@ha", v5))
      {
        v7 = 59;
      }
      else if (!memcmp(v2, "toc@ha", v5))
      {
        v7 = 64;
      }
      else if (!memcmp(v2, "dtpmod", v5))
      {
        v7 = 67;
      }
      else if (!memcmp(v2, "prel31", v5))
      {
        v7 = 36;
      }
      else if (!memcmp(v2, "tlsldo", v5))
      {
        v7 = 38;
      }
      else if (!memcmp(v2, "tlsrel", v5))
      {
        v7 = 128;
      }
      else if (!memcmp(v2, "got_hi", v5))
      {
        v7 = 144;
      }
      else if (!memcmp(v2, "got_lo", v5))
      {
        v7 = 145;
      }
      else if (!memcmp(v2, "plt_hi", v5))
      {
        v7 = 148;
      }
      else
      {
        if (memcmp(v2, "plt_lo", v5))
          goto LABEL_339;
        v7 = 149;
      }
      break;
    case 7uLL:
      if (*(_DWORD *)v2 == 1668508788 && *(_DWORD *)((char *)v2 + 3) == 1819042147)
      {
        v7 = 18;
      }
      else if (*(_DWORD *)v2 == 1685286004 && *(_DWORD *)((char *)v2 + 3) == 1668506980)
      {
        v7 = 19;
      }
      else if (*(_DWORD *)v2 == 1701273968 && *(_DWORD *)((char *)v2 + 3) == 1717989221)
      {
        v7 = 24;
      }
      else if (*(_DWORD *)v2 == 1886678887 && *(_DWORD *)((char *)v2 + 3) == 1701273968)
      {
        v7 = 25;
      }
      else if (*(_DWORD *)v2 == 1751607656 && *(_DWORD *)((char *)v2 + 3) == 1634887016)
      {
        v7 = 54;
      }
      else if (*(_DWORD *)v2 == 1751607656 && *(_DWORD *)((char *)v2 + 3) == 1953719656)
      {
        v7 = 55;
      }
      else if (*(_DWORD *)v2 == 1650683764 && *(_DWORD *)((char *)v2 + 3) == 1702060386)
      {
        v7 = 60;
      }
      else if (*(_DWORD *)v2 == 1701998708 && *(_DWORD *)((char *)v2 + 3) == 1816161381)
      {
        v7 = 68;
      }
      else if (*(_DWORD *)v2 == 1701998708 && *(_DWORD *)((char *)v2 + 3) == 1749052517)
      {
        v7 = 69;
      }
      else if (*(_DWORD *)v2 == 1735549300 && *(_DWORD *)((char *)v2 + 3) == 829711719)
      {
        v7 = 34;
      }
      else if (*(_DWORD *)v2 == 1735549300 && *(_DWORD *)((char *)v2 + 3) == 846488935)
      {
        v7 = 35;
      }
      else
      {
        if (*(_DWORD *)v2 != 1081372519 || *(_DWORD *)((char *)v2 + 3) != 1936487488)
          goto LABEL_339;
        v7 = 131;
      }
      break;
    case 8uLL:
      switch(*(_QWORD *)v2)
      {
        case 0x6C65726370746F67:
          v7 = 6;
          break;
        case 0x66666F7074746F67:
          v7 = 8;
          break;
        case 0x6567617070766C74:
          v7 = 21;
          break;
        case 0x32336C6572636573:
          v7 = 27;
          break;
        default:
          if (!memcmp(v2, "highesta", v5))
          {
            v7 = 56;
          }
          else if (!memcmp(v2, "tprel@ha", v5))
          {
            v7 = 70;
          }
          else if (!memcmp(v2, "dtprel@l", v5))
          {
            v7 = 77;
          }
          else if (!memcmp(v2, "dtprel@h", v5))
          {
            v7 = 78;
          }
          else if (!memcmp(v2, "got_prel", v5))
          {
            v7 = 33;
          }
          else if (!memcmp(v2, "rel32@lo", v5))
          {
            v7 = 135;
          }
          else if (!memcmp(v2, "rel32@hi", v5))
          {
            v7 = 136;
          }
          else if (!memcmp(v2, "abs32@lo", v5))
          {
            v7 = 138;
          }
          else if (!memcmp(v2, "abs32@hi", v5))
          {
            v7 = 139;
          }
          else if (!memcmp(v2, "tpoff_hi", v5))
          {
            v7 = 152;
          }
          else
          {
            if (memcmp(v2, "tpoff_lo", v5))
              goto LABEL_339;
            v7 = 153;
          }
          break;
      }
      break;
    case 9uLL:
      if (*(_QWORD *)v2 == 0x666F70746E646E69 && *((_BYTE *)v2 + 8) == 102)
      {
        v7 = 9;
      }
      else if (*(_QWORD *)v2 == 0x666F70746E746F67 && *((_BYTE *)v2 + 8) == 102)
      {
        v7 = 11;
      }
      else if (!memcmp(v2, "dtprel@ha", v5))
      {
        v7 = 79;
      }
      else if (!memcmp(v2, "got@tprel", v5))
      {
        v7 = 86;
      }
      else if (!memcmp(v2, "got@tlsgd", v5))
      {
        v7 = 95;
      }
      else if (!memcmp(v2, "got@tlsld", v5))
      {
        v7 = 104;
      }
      else if (!memcmp(v2, "got@pcrel", v5))
      {
        v7 = 108;
      }
      else if (!memcmp(v2, "tls@pcrel", v5))
      {
        v7 = 112;
      }
      else if (!memcmp(v2, "typeindex", v5))
      {
        v7 = 127;
      }
      else if (!memcmp(v2, "funcindex", v5))
      {
        v7 = 132;
      }
      else if (!memcmp(v2, "gotoff_hi", v5))
      {
        v7 = 146;
      }
      else if (!memcmp(v2, "gotoff_lo", v5))
      {
        v7 = 147;
      }
      else if (!memcmp(v2, "tls_gd_hi", v5))
      {
        v7 = 150;
      }
      else
      {
        if (memcmp(v2, "tls_gd_lo", v5))
          goto LABEL_339;
        v7 = 151;
      }
      break;
    case 0xAuLL:
      if (*(_QWORD *)v2 == 0x6F65676170746F67 && v2[4] == 26214)
      {
        v7 = 26;
      }
      else if (*(_QWORD *)v2 == 0x6968406C65727074 && v2[4] == 26727)
      {
        v7 = 71;
      }
      else
      {
        if (*(_QWORD *)v2 != 0x7270746440746F67 || v2[4] != 27749)
          goto LABEL_339;
        v7 = 90;
      }
      break;
    case 0xBuLL:
      if (*(_QWORD *)v2 == 0x6567617070766C74 && *(_QWORD *)((char *)v2 + 3) == 0x66666F6567617070)
      {
        v7 = 22;
      }
      else if (*(_QWORD *)v2 == 0x6968406C65727074 && *(_QWORD *)((char *)v2 + 3) == 0x6168676968406C65)
      {
        v7 = 72;
      }
      else if (*(_QWORD *)v2 == 0x68406C6572707464 && *(_QWORD *)((char *)v2 + 3) == 0x68676968406C6572)
      {
        v7 = 80;
      }
      else if (*(_QWORD *)v2 == 0x6572707440746F67 && *(_QWORD *)((char *)v2 + 3) == 0x6C406C6572707440)
      {
        v7 = 87;
      }
      else if (*(_QWORD *)v2 == 0x6572707440746F67 && *(_QWORD *)((char *)v2 + 3) == 0x68406C6572707440)
      {
        v7 = 88;
      }
      else if (*(_QWORD *)v2 == 0x67736C7440746F67 && *(_QWORD *)((char *)v2 + 3) == 0x6C406467736C7440)
      {
        v7 = 96;
      }
      else if (*(_QWORD *)v2 == 0x67736C7440746F67 && *(_QWORD *)((char *)v2 + 3) == 0x68406467736C7440)
      {
        v7 = 97;
      }
      else if (*(_QWORD *)v2 == 0x6C736C7440746F67 && *(_QWORD *)((char *)v2 + 3) == 0x6C40646C736C7440)
      {
        v7 = 105;
      }
      else
      {
        if (*(_QWORD *)v2 != 0x6C736C7440746F67 || *(_QWORD *)((char *)v2 + 3) != 0x6840646C736C7440)
          goto LABEL_339;
        v7 = 106;
      }
      break;
    case 0xCuLL:
      if (!memcmp(v2, "tprel@higher", v5))
      {
        v7 = 73;
      }
      else if (!memcmp(v2, "dtprel@higha", v5))
      {
        v7 = 81;
      }
      else if (!memcmp(v2, "got@tprel@ha", v5))
      {
        v7 = 89;
      }
      else if (!memcmp(v2, "got@dtprel@l", v5))
      {
        v7 = 91;
      }
      else if (!memcmp(v2, "got@dtprel@h", v5))
      {
        v7 = 92;
      }
      else if (!memcmp(v2, "got@tlsgd@ha", v5))
      {
        v7 = 98;
      }
      else
      {
        if (memcmp(v2, "got@tlsld@ha", v5))
          goto LABEL_339;
        v7 = 107;
      }
      break;
    case 0xDuLL:
      if (!memcmp(v2, "tprel@highera", v5))
      {
        v7 = 74;
      }
      else if (!memcmp(v2, "tprel@highest", v5))
      {
        v7 = 75;
      }
      else if (!memcmp(v2, "dtprel@higher", v5))
      {
        v7 = 82;
      }
      else if (!memcmp(v2, "got@dtprel@ha", v5))
      {
        v7 = 93;
      }
      else if (!memcmp(v2, "gotpcrel32@lo", v5))
      {
        v7 = 133;
      }
      else
      {
        if (memcmp(v2, "gotpcrel32@hi", v5))
          goto LABEL_339;
        v7 = 134;
      }
      break;
    case 0xEuLL:
      if (!memcmp(v2, "tprel@highesta", v5))
      {
        v7 = 76;
      }
      else if (!memcmp(v2, "dtprel@highera", v5))
      {
        v7 = 83;
      }
      else
      {
        if (memcmp(v2, "dtprel@highest", v5))
          goto LABEL_339;
        v7 = 84;
      }
      break;
    case 0xFuLL:
      if (!memcmp(v2, "dtprel@highesta", v5))
      {
        v7 = 85;
      }
      else if (!memcmp(v2, "got@tlsgd@pcrel", v5))
      {
        v7 = 109;
      }
      else if (!memcmp(v2, "got@tlsld@pcrel", v5))
      {
        v7 = 110;
      }
      else
      {
        if (memcmp(v2, "got@tprel@pcrel", v5))
          goto LABEL_339;
        v7 = 111;
      }
      break;
    case 0x10uLL:
      if (*(_QWORD *)v2 != 0x6C65726370746F67 || *((_QWORD *)v2 + 1) != 0x78616C65726F6E5FLL)
        goto LABEL_339;
      v7 = 7;
      break;
    default:
LABEL_339:
      v7 = 1;
      break;
  }
  if (v3 < 0)
    operator delete(v4);
  return v7;
}

BOOL llvm::MCExpr::evaluateAsAbsolute(llvm::MCExpr *this, uint64_t *a2)
{
  _BOOL8 result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = 0;
  v8 = 0;
  v7 = 0;
  if (*(_BYTE *)this == 1)
  {
    *a2 = *((_QWORD *)this + 2);
    return 1;
  }
  else
  {
    v4 = llvm::MCExpr::evaluateAsRelocatableImpl(this, &v5, 0, 0, 0, 0, 0);
    result = 0;
    *a2 = v7;
    if (v4)
    {
      if (!v5)
        return v6 == 0;
    }
  }
  return result;
}

uint64_t llvm::MCExpr::evaluateAsAbsolute(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  int v5;

  if (*(_BYTE *)a1 == 1)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    return 1;
  }
  else
  {
    llvm::MCExpr::evaluateAsRelocatableImpl(a1);
    v5 = v4;
    result = 0;
    *a2 = 0;
    if (v5)
      return 1;
  }
  return result;
}

BOOL llvm::MCExpr::evaluateKnownAbsolute(uint64_t a1, _QWORD *a2)
{
  int v4;

  if (*(_BYTE *)a1 == 1)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    return 1;
  }
  else
  {
    llvm::MCExpr::evaluateAsRelocatableImpl(a1);
    *a2 = 0;
    return v4 != 0;
  }
}

void llvm::MCExpr::evaluateAsRelocatableImpl(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_180C2F900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  llvm::MCAsmLayout *v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int v8;
  uint64_t result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  int8x16_t v25;
  uint64_t v26;
  int v27;
  int64x2_t v28;
  uint64_t v29;
  int v30;
  int64x2_t v31;
  uint64_t v32;
  int v33;

  v31 = 0uLL;
  v33 = 0;
  v32 = 0;
  v28 = 0uLL;
  v30 = 0;
  v29 = 0;
  if (!llvm::MCExpr::evaluateAsRelocatableImpl(*(_QWORD *)(v1 + 16), &v31, v2, v4, v6, v3, v5)
    || (llvm::MCExpr::evaluateAsRelocatableImpl(*(_QWORD *)(v1 + 24), &v28, v2, v4, v6, v3, v5) & 1) == 0)
  {
    v10 = *(unsigned __int8 **)(v1 + 16);
    v12 = *v10;
    v11 = v10 - 8;
    if (v12 != 4)
      return 0;
    v13 = *(_QWORD *)(v1 + 24);
    v14 = v13 - 8;
    if (!v13)
      v14 = 0;
    v15 = *(_DWORD *)(v1 + 1) & 0xFFFFFF;
    if (v15 == 12)
    {
      v19 = v14 + 8;
      if (v13)
        v20 = v19;
      else
        v20 = 0;
      v21 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v11 + 40))(v11, v20);
      *(_QWORD *)v0 = 0;
      *(_QWORD *)(v0 + 8) = 0;
      v18 = v21 - 1;
      goto LABEL_8;
    }
    if (v15 != 3)
      return 0;
    v16 = v14 + 8;
    if (v13)
      v17 = v16;
    else
      v17 = 0;
    v18 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v11 + 40))(v11, v17) << 63 >> 63;
LABEL_7:
    *(_QWORD *)v0 = 0;
    *(_QWORD *)(v0 + 8) = 0;
LABEL_8:
    *(_QWORD *)(v0 + 16) = v18;
    *(_DWORD *)(v0 + 24) = 0;
    return 1;
  }
  v7 = (int8x16_t)v28;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v31), (int32x4_t)vceqzq_s64(v28))))) & 1) == 0)
  {
    v22 = *(_DWORD *)(v1 + 1) & 0xFFFFFF;
    switch(v22)
    {
      case 0u:
        v23 = v29 + v32;
        goto LABEL_53;
      case 1u:
        v23 = v29 & v32;
        goto LABEL_53;
      case 2u:
      case 0xAu:
        if (!v29)
          return 0;
        if (v22 == 2)
        {
          v23 = v32 / v29;
LABEL_53:
          *(_QWORD *)v0 = 0;
          *(_QWORD *)(v0 + 8) = 0;
          *(_QWORD *)(v0 + 16) = v23;
          result = 1;
          *(_DWORD *)(v0 + 24) = 0;
          return result;
        }
        v23 = v32 % v29;
LABEL_55:
        if (v22 > 0xC || ((1 << *(_BYTE *)(v1 + 1)) & 0x1338) == 0)
          goto LABEL_53;
LABEL_57:
        if (v23)
          v18 = -1;
        else
          v18 = 0;
        break;
      case 3u:
        v23 = v32 == v29;
        goto LABEL_57;
      case 4u:
        v23 = v32 > v29;
        goto LABEL_57;
      case 5u:
        v23 = v32 >= v29;
        goto LABEL_57;
      case 6u:
        if (v32)
          v24 = v29 == 0;
        else
          v24 = 1;
        v23 = !v24;
        goto LABEL_53;
      case 7u:
        v23 = (v32 | v29) != 0;
        goto LABEL_53;
      case 8u:
        v23 = v32 < v29;
        goto LABEL_57;
      case 9u:
        v23 = v32 <= v29;
        goto LABEL_57;
      case 0xBu:
        v23 = v29 * v32;
        goto LABEL_53;
      case 0xCu:
        v23 = v32 != v29;
        goto LABEL_57;
      case 0xDu:
        v23 = v29 | v32;
        goto LABEL_53;
      case 0xEu:
        v23 = v32 | ~v29;
        goto LABEL_53;
      case 0xFu:
        v23 = v32 << v29;
        goto LABEL_53;
      case 0x10u:
        v23 = v32 >> v29;
        goto LABEL_53;
      case 0x11u:
        v23 = (unint64_t)v32 >> v29;
        goto LABEL_53;
      case 0x12u:
        v23 = v32 - v29;
        goto LABEL_53;
      case 0x13u:
        v23 = v29 ^ v32;
        goto LABEL_53;
      default:
        v23 = 0;
        goto LABEL_55;
    }
    goto LABEL_7;
  }
  if ((*(_DWORD *)(v1 + 1) & 0xFFFFFF) == 0)
  {
    v8 = v30;
    v26 = v29;
    goto LABEL_27;
  }
  if ((*(_DWORD *)(v1 + 1) & 0xFFFFFF) == 0x12)
  {
    v8 = v30;
    v26 = -v29;
    v7 = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL);
LABEL_27:
    v25 = v7;
    v27 = v8;
    return EvaluateSymbolicAdd(v2, v4, v3, v5, (uint64_t)&v31, (uint64_t)&v25, v0);
  }
  return 0;
}

uint64_t llvm::MCExpr::evaluateAsRelocatable(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v5;

  v5 = a3;
  if (a3)
    a3 = (_QWORD *)*a3;
  return llvm::MCExpr::evaluateAsRelocatableImpl(a1, a2, a3, v5, a4, 0, 0);
}

uint64_t llvm::MCExpr::evaluateAsValue(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return llvm::MCExpr::evaluateAsRelocatableImpl(a1, a2, *a3, a3, 0, 0, 1);
}

uint64_t EvaluateSymbolicAdd(uint64_t a1, llvm::MCAsmLayout *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)a5;
  v21 = *(_QWORD *)(a5 + 8);
  v22 = v7;
  v8 = *(_QWORD *)(a5 + 16);
  v9 = *(_QWORD *)a6;
  v19 = *(_QWORD *)(a6 + 8);
  v20 = v9;
  if (*(_DWORD *)(a5 + 24) != *(_DWORD *)(a6 + 24))
    return 0;
  v18 = *(_QWORD *)(a6 + 16) + v8;
  if (a1)
  {
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v22, &v21, &v18);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v22, &v19, &v18);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v20, &v21, &v18);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v20, &v19, &v18);
    v7 = v22;
    v9 = v20;
  }
  if (v7 && v9)
    return 0;
  v15 = v21;
  if (v21)
  {
    if (v19)
      return 0;
  }
  if (!v7)
    v7 = v9;
  v17 = v18;
  if (!v21)
    v15 = v19;
  *(_QWORD *)a7 = v7;
  *(_QWORD *)(a7 + 8) = v15;
  *(_QWORD *)(a7 + 16) = v17;
  *(_DWORD *)(a7 + 24) = 0;
  return 1;
}

void *llvm::MCExpr::findAssociatedFragment(llvm::MCExpr *this)
{
  llvm::MCExpr *v1;
  int v2;
  void *AssociatedFragment;
  void *result;
  void *v5;
  uint64_t v6;

  v1 = this;
  v2 = *(unsigned __int8 *)this;
  if (v2 == 3)
  {
LABEL_2:
    v1 = (llvm::MCExpr *)*((_QWORD *)v1 + 2);
    v2 = *(unsigned __int8 *)v1;
  }
  switch(v2)
  {
    case 0:
      AssociatedFragment = (void *)llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v1 + 2));
      result = (void *)llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v1 + 3));
      if (AssociatedFragment != llvm::MCSymbol::AbsolutePseudoFragment)
      {
        if (result == llvm::MCSymbol::AbsolutePseudoFragment)
        {
          result = AssociatedFragment;
        }
        else
        {
          if (AssociatedFragment)
            v5 = AssociatedFragment;
          else
            v5 = result;
          if ((*(_DWORD *)((_BYTE *)v1 + 1) & 0xFFFFFF) == 0x12)
            result = llvm::MCSymbol::AbsolutePseudoFragment;
          else
            result = v5;
        }
      }
      break;
    case 1:
      result = llvm::MCSymbol::AbsolutePseudoFragment;
      break;
    case 2:
      v6 = *((_QWORD *)v1 + 2);
      result = *(void **)v6;
      if (!*(_QWORD *)v6)
      {
        if ((*(_DWORD *)(v6 + 8) & 0x7080) == 0x2000)
        {
          *(_DWORD *)(v6 + 8) |= 8u;
          result = (void *)llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v6 + 24));
          *(_QWORD *)v6 = result;
        }
        else
        {
          result = 0;
        }
      }
      break;
    default:
      goto LABEL_2;
  }
  return result;
}

uint64_t AttemptToFoldSymbolOffsetDifference(uint64_t result, llvm::MCAsmLayout *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  BOOL v8;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const llvm::MCFragment *v27;
  const llvm::MCFragment *v28;
  uint64_t v29;
  unint64_t SymbolOffset;
  uint64_t *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v47;

  v7 = *a6;
  if (*a5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return result;
  v14 = (uint64_t *)result;
  v15 = *(_QWORD *)(*a5 + 16);
  v16 = *(_QWORD *)(v7 + 16);
  if (!*(_QWORD *)v15)
  {
    if ((*(_DWORD *)(v15 + 8) & 0x7080) != 0x2000)
      return result;
    *(_DWORD *)(v15 + 8) |= 8u;
    result = (uint64_t)llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v15 + 24));
    *(_QWORD *)v15 = result;
    if (!result)
      return result;
  }
  if (!*(_QWORD *)v16)
  {
    if ((*(_DWORD *)(v16 + 8) & 0x7080) != 0x2000)
      return result;
    *(_DWORD *)(v16 + 8) |= 8u;
    result = (uint64_t)llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v16 + 24));
    *(_QWORD *)v16 = result;
    if (!result)
      return result;
  }
  result = llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(v14[3], (uint64_t)v14, *a5, *a6, a4);
  if (!(_DWORD)result)
    return result;
  v17 = *(_QWORD *)v15;
  if (!*(_QWORD *)v15)
  {
    if ((*(_DWORD *)(v15 + 8) & 0x7080) == 0x2000)
    {
      *(_DWORD *)(v15 + 8) |= 8u;
      result = (uint64_t)llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v15 + 24));
      v17 = result;
      *(_QWORD *)v15 = result;
      v18 = *(_QWORD *)v16;
      if (!*(_QWORD *)v16)
        goto LABEL_46;
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)v16;
      if (!*(_QWORD *)v16)
        goto LABEL_46;
    }
LABEL_10:
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v18 + 16);
    if (a3)
      goto LABEL_12;
    goto LABEL_11;
  }
  v18 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
    goto LABEL_10;
LABEL_46:
  if ((*(_DWORD *)(v16 + 8) & 0x7080) == 0x2000)
  {
    *(_DWORD *)(v16 + 8) |= 8u;
    result = (uint64_t)llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v16 + 24));
    v18 = result;
    *(_QWORD *)v16 = result;
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(result + 16);
    if (a3)
      goto LABEL_12;
  }
  else
  {
    v18 = 0;
    v19 = *(_QWORD *)(v17 + 16);
    v20 = MEMORY[0x10];
    if (a3)
      goto LABEL_12;
  }
LABEL_11:
  if (v19 != v20)
    return result;
LABEL_12:
  if (a2 && ((a4 & 1) != 0 || (*(_BYTE *)(v19 + 44) & 2) == 0 || (*(_DWORD *)(*v14 + 48) - 27) >= 2))
  {
    if (v17 != v18 || (*(_DWORD *)(v15 + 8) & 0x7000) == 0x2000 || (*(_DWORD *)(v16 + 8) & 0x7000) == 0x2000)
    {
      v27 = (const llvm::MCFragment *)v18;
      v28 = (const llvm::MCFragment *)v17;
      v29 = v19;
      result = llvm::MCAsmLayout::canGetFragmentOffset(a2, v28);
      if (!(_DWORD)result)
        return result;
      result = llvm::MCAsmLayout::canGetFragmentOffset(a2, v27);
      if (!(_DWORD)result)
        return result;
      SymbolOffset = llvm::MCAsmLayout::getSymbolOffset(a2, *(const llvm::MCSymbol **)(*a5 + 16));
      v31 = a7;
      *a7 += SymbolOffset - llvm::MCAsmLayout::getSymbolOffset(a2, *(const llvm::MCSymbol **)(*a6 + 16));
      if (v29 == v20 || a3 == 0)
        goto LABEL_84;
      v33 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>>,llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>>::lookup(a3, v29);
      v34 = v33
          - llvm::DenseMapBase<llvm::DenseMap<llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>>,llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>>::lookup(a3, v20);
    }
    else
    {
      v34 = *(_QWORD *)(v15 + 24) - *(_QWORD *)(v16 + 24);
      v31 = a7;
    }
    v35 = v34 + *v31;
LABEL_83:
    *v31 = v35;
LABEL_84:
    result = llvm::MCAssembler::isThumbFunc((llvm::MCAssembler *)v14, (const llvm::MCSymbol *)v15);
    if ((_DWORD)result)
      *v31 |= 1uLL;
    *a6 = 0;
    *a5 = 0;
    return result;
  }
  if ((*(_DWORD *)(v15 + 8) & 0x7000) == 0x2000
    || (*(_DWORD *)(v16 + 8) & 0x7000) == 0x2000
    || *(_DWORD *)(v17 + 44) != *(_DWORD *)(v18 + 44))
  {
    return result;
  }
  if (v17 != v18)
  {
    if (*(_BYTE *)(v17 + 48) == 15)
    {
LABEL_24:
      v44 = 0;
      v23 = *(_QWORD *)(v15 + 24);
      v24 = *(_QWORD *)(v16 + 24);
      v25 = v23 - v24;
    }
    else
    {
      v21 = *(_QWORD *)(v17 + 8);
      v22 = v19 + 104;
      if (v21 != v19 + 104)
      {
        while (v18 != v21)
        {
          v21 = *(_QWORD *)(v21 + 8);
          if (v21 == v22)
            goto LABEL_24;
        }
        v21 = v18;
      }
      v23 = *(_QWORD *)(v15 + 24);
      v24 = *(_QWORD *)(v16 + 24);
      v25 = v23 - v24;
      if (v21 != v22)
        goto LABEL_57;
      v44 = 0;
    }
    v26 = v18;
    v18 = v17;
    goto LABEL_58;
  }
  v23 = *(_QWORD *)(v15 + 24);
  v24 = *(_QWORD *)(v16 + 24);
  v25 = v23 - v24;
  if (v23 >= v24)
  {
    v44 = 0;
    v26 = v17;
    v18 = v17;
    goto LABEL_58;
  }
LABEL_57:
  result = v23;
  v25 = -(uint64_t)v25;
  v44 = 1;
  v26 = v17;
  v23 = v24;
  v24 = result;
LABEL_58:
  v36 = v19 + 104;
  if (v26 == v19 + 104)
  {
LABEL_79:
    if (v44)
      v41 = -(uint64_t)v25;
    else
      v41 = v25;
    v31 = a7;
    v35 = *a7 + v41;
    goto LABEL_83;
  }
  v42 = v23;
  v43 = v24;
  v45 = 0;
  v37 = 0;
  v38 = v26;
  while (1)
  {
    while (1)
    {
      v39 = *(unsigned __int8 *)(v38 + 48);
      if (!v38 || v39 != 1)
        break;
      if (*(_BYTE *)(v38 + 51))
      {
        if (v38 != v26 || v43 != *(_QWORD *)(v26 + 72))
          v37 = 1;
        if (v38 != v18 || v42 == *(_QWORD *)(v18 + 72))
          v45 = 1;
        if ((v37 & v45 & 1) != 0)
          return result;
      }
      if (v38 != v18)
      {
        v25 += *(_QWORD *)(v38 + 72);
        v38 = *(_QWORD *)(v38 + 8);
        if (v38 != v36)
          continue;
      }
      goto LABEL_79;
    }
    if (v38 == v18)
      goto LABEL_79;
    v47 = 0;
    if (!v38)
      return result;
    if (v39 != 3)
      return result;
    v40 = v18;
    result = llvm::MCExpr::evaluateAsAbsolute(*(llvm::MCExpr **)(v38 + 64), &v47);
    if (!(_DWORD)result)
      return result;
    v18 = v40;
    v25 += v47 * *(unsigned __int8 *)(v38 + 52);
    v38 = *(_QWORD *)(v38 + 8);
    if (v38 == v36)
      goto LABEL_79;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>>,llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>>::lookup(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*a1 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

BOOL llvm::MCAsmLayout::canGetFragmentOffset(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v4 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)this + 19);
  v5 = (char *)this + 152;
  v6 = v7;
  v8 = *((_DWORD *)v5 + 4);
  if (!v8)
    goto LABEL_26;
  v9 = v8 - 1;
  v10 = ((v4 >> 4) ^ (v4 >> 9)) & (v8 - 1);
  v11 = (_QWORD *)(v6 + 16 * v10);
  v12 = *v11;
  if (v4 == *v11)
    goto LABEL_17;
  v13 = 0;
  v14 = 1;
  while (v12 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v13 = v11;
    v16 = v10 + v14++;
    v10 = v16 & v9;
    v11 = (_QWORD *)(v6 + 16 * (v16 & v9));
    v12 = *v11;
    if (v4 == *v11)
      goto LABEL_17;
  }
  if (v13)
    v11 = v13;
  v21 = *((_DWORD *)this + 40);
  if (4 * v21 + 4 < 3 * v8)
  {
    if (v8 + ~v21 - *((_DWORD *)this + 41) > v8 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_26:
    v8 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v5, v8);
  v22 = *((_QWORD *)this + 19);
  v23 = *((_DWORD *)this + 42) - 1;
  v24 = v23 & ((v4 >> 4) ^ (v4 >> 9));
  v11 = (_QWORD *)(v22 + 16 * v24);
  v25 = *v11;
  if (v4 == *v11)
  {
LABEL_28:
    ++*((_DWORD *)this + 40);
    if (v4 == -4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v26 = 0;
  v27 = 1;
  while (v25 != -4096)
  {
    if (v26)
      v28 = 0;
    else
      v28 = v25 == -8192;
    if (v28)
      v26 = v11;
    v29 = v24 + v27++;
    v24 = v29 & v23;
    v11 = (_QWORD *)(v22 + 16 * (v29 & v23));
    v25 = *v11;
    if (v4 == *v11)
      goto LABEL_28;
  }
  if (v26)
    v11 = v26;
LABEL_14:
  v17 = *v11;
  ++*((_DWORD *)this + 40);
  if (v17 != -4096)
LABEL_15:
    --*((_DWORD *)this + 41);
LABEL_16:
  *v11 = v4;
  v11[1] = 0;
LABEL_17:
  v18 = v11[1];
  if (!v18)
  {
    v19 = v4 + 112;
    return *(unsigned __int8 *)(*(_QWORD *)v19 + 49) == 0;
  }
  if (*((_DWORD *)a2 + 10) > *(_DWORD *)(v18 + 40))
  {
    v19 = v18 + 8;
    return *(unsigned __int8 *)(*(_QWORD *)v19 + 49) == 0;
  }
  return 1;
}

uint64_t llvm::MCAsmLayout::ensureValid(uint64_t this, const llvm::MCFragment *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MCFragment **v18;
  llvm::MCFragment *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;

  v3 = this;
  v4 = *((_QWORD *)a2 + 2);
  v6 = (uint64_t *)(this + 152);
  v5 = *(_QWORD *)(this + 152);
  v7 = *(_DWORD *)(this + 168);
  if (!v7)
    goto LABEL_33;
  v8 = v7 - 1;
  v9 = ((v4 >> 4) ^ (v4 >> 9)) & (v7 - 1);
  v10 = (_QWORD *)(v5 + 16 * v9);
  v11 = *v10;
  if (v4 == *v10)
    goto LABEL_17;
  v12 = 0;
  v13 = 1;
  while (v11 != -4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -8192;
    if (v14)
      v12 = v10;
    v15 = v9 + v13++;
    v9 = v15 & v8;
    v10 = (_QWORD *)(v5 + 16 * (v15 & v8));
    v11 = *v10;
    if (v4 == *v10)
      goto LABEL_17;
  }
  if (v12)
    v10 = v12;
  v27 = *(_DWORD *)(this + 160);
  if (4 * v27 + 4 < 3 * v7)
  {
    if (v7 + ~v27 - *(_DWORD *)(this + 164) > v7 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_33:
    v7 *= 2;
  }
  this = (uint64_t)llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(this + 152, v7);
  v28 = *(_QWORD *)(v3 + 152);
  v7 = *(_DWORD *)(v3 + 168);
  v29 = v7 - 1;
  v30 = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v10 = (_QWORD *)(v28 + 16 * v30);
  v31 = *v10;
  if (v4 == *v10)
  {
LABEL_35:
    ++*(_DWORD *)(v3 + 160);
    if (v4 == -4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v32 = 0;
  v33 = 1;
  while (v31 != -4096)
  {
    if (v32)
      v34 = 0;
    else
      v34 = v31 == -8192;
    if (v34)
      v32 = v10;
    v35 = v30 + v33++;
    v30 = v35 & v29;
    v10 = (_QWORD *)(v28 + 16 * (v35 & v29));
    v31 = *v10;
    if (v4 == *v10)
      goto LABEL_35;
  }
  if (v32)
    v10 = v32;
LABEL_14:
  v16 = *v10;
  ++*(_DWORD *)(v3 + 160);
  if (v16 != -4096)
LABEL_15:
    --*(_DWORD *)(v3 + 164);
LABEL_16:
  *v10 = v4;
  v10[1] = 0;
LABEL_17:
  v17 = v10[1];
  if (v17)
    v18 = (llvm::MCFragment **)(v17 + 8);
  else
    v18 = (llvm::MCFragment **)(v4 + 112);
  while (1)
  {
    v19 = *v18;
    if (!v7)
      goto LABEL_20;
    v20 = *((_QWORD *)a2 + 2);
    v21 = *v6;
    v22 = ((v20 >> 4) ^ (v20 >> 9)) & (v7 - 1);
    v23 = *(_QWORD *)(*v6 + 16 * v22);
    if (v23 == v20)
      break;
    v25 = 1;
    while (v23 != -4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v7 - 1);
      v23 = *(_QWORD *)(v21 + 16 * v22);
      if (v23 == v20)
        goto LABEL_23;
    }
LABEL_20:
    this = llvm::MCAsmLayout::layoutFragment((llvm::MCAsmLayout *)v3, v19);
    v18 = (llvm::MCFragment **)((char *)v19 + 8);
    v7 = *(_DWORD *)(v3 + 168);
  }
LABEL_23:
  v24 = *(_QWORD *)(v21 + 16 * v22 + 8);
  if (!v24 || *((_DWORD *)a2 + 10) > *(_DWORD *)(v24 + 40))
    goto LABEL_20;
  return this;
}

uint64_t llvm::MCAsmLayout::getFragmentOffset(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  llvm::MCAsmLayout::ensureValid((uint64_t)this, a2);
  return *((_QWORD *)a2 + 4);
}

uint64_t llvm::MCAsmLayout::getSymbolOffset(llvm::MCAsmLayout *this, const llvm::MCSymbol *a2, unint64_t *a3)
{
  return getSymbolOffsetImpl(this, a2, 0, a3);
}

uint64_t getSymbolOffsetImpl(const llvm::MCAsmLayout *a1, const llvm::MCSymbol *a2, _BOOL4 a3, unint64_t *a4)
{
  int v8;
  unint64_t v9;
  uint64_t result;
  const llvm::MCFragment *AssociatedFragment;
  uint64_t Name;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  unint64_t v23[5];

  v8 = *((_DWORD *)a2 + 2);
  if ((v8 & 0x7000) != 0x2000)
  {
    AssociatedFragment = *(const llvm::MCFragment **)a2;
    if (*(_QWORD *)a2
      || (v8 & 0x7080) == 0x2000
      && (*((_DWORD *)a2 + 2) = v8 | 8,
          AssociatedFragment = (const llvm::MCFragment *)llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a2 + 3)),
          (*(_QWORD *)a2 = AssociatedFragment) != 0))
    {
      llvm::MCAsmLayout::ensureValid((uint64_t)a1, AssociatedFragment);
      *a4 = *((_QWORD *)a2 + 3) + *((_QWORD *)AssociatedFragment + 4);
      return 1;
    }
    if (!a3)
      return 0;
    Name = llvm::MCSymbol::getName(a2);
    v22 = 1283;
    v14 = "unable to evaluate offset to undefined symbol '";
LABEL_20:
    v21[0] = (uint64_t)v14;
    v21[2] = Name;
    v21[3] = v13;
    v19 = "'";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  v15 = 0;
  v16 = 0;
  v18 = 0;
  v17 = 0;
  *((_DWORD *)a2 + 2) = v8 | 8;
  if ((llvm::MCExpr::evaluateAsValue(*((_QWORD *)a2 + 3), (uint64_t)&v15, a1) & 1) == 0)
  {
    Name = llvm::MCSymbol::getName(a2);
    v22 = 1283;
    v14 = "unable to evaluate offset for variable '";
    goto LABEL_20;
  }
  v9 = v17;
  if (v15)
  {
    v23[0] = 0;
    result = getSymbolOffsetImpl(a1, *(const llvm::MCSymbol **)(v15 + 16), a3, v23);
    if (!(_DWORD)result)
      return result;
    v9 += v23[0];
  }
  if (v16)
  {
    v23[0] = 0;
    result = getSymbolOffsetImpl(a1, *(const llvm::MCSymbol **)(v16 + 16), a3, v23);
    if (!(_DWORD)result)
      return result;
    v9 -= v23[0];
  }
  *a4 = v9;
  return 1;
}

unint64_t llvm::MCAsmLayout::getSymbolOffset(llvm::MCAsmLayout *this, const llvm::MCSymbol *a2)
{
  unint64_t v3;

  v3 = 0;
  getSymbolOffsetImpl(this, a2, 1, &v3);
  return v3;
}

uint64_t llvm::MCSymbol::getName(llvm::MCSymbol *this)
{
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return *((_QWORD *)this - 1) + 16;
  else
    return 0;
}

unint64_t llvm::computeBundlePadding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;

  v4 = *(unsigned int *)(a1 + 472);
  v5 = (v4 - 1) & a3;
  v6 = v5 + a4;
  if (*(_BYTE *)(a2 + 52))
  {
    result = v4 - v6;
    if (v4 != v6 && v4 <= v6)
      return 2 * v4 - v6;
  }
  else if (v4 >= v6 || v5 == 0)
  {
    return 0;
  }
  else
  {
    return v4 - v5;
  }
  return result;
}

void llvm::MCFragment::destroy(llvm::MCFragment *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  switch(*((_BYTE *)this + 48))
  {
    case 0:
    case 3:
    case 4:
    case 6:
    case 0xA:
    case 0xB:
    case 0xF:
      goto LABEL_2;
    case 1:
      goto LABEL_14;
    case 2:
      goto LABEL_17;
    case 5:
      v2 = (char *)*((_QWORD *)this + 19);
      if (v2 != (char *)this + 168)
        free(v2);
      goto LABEL_7;
    case 7:
    case 8:
    case 0xE:
LABEL_7:
      v3 = (char *)*((_QWORD *)this + 12);
      v4 = (char *)this + 112;
      goto LABEL_15;
    case 9:
      v3 = (char *)*((_QWORD *)this + 13);
      v4 = (char *)this + 120;
      goto LABEL_15;
    case 0xC:
      v5 = (char *)*((_QWORD *)this + 10);
      v6 = (char *)this + 104;
      goto LABEL_18;
    case 0xD:
      v7 = (char *)*((_QWORD *)this + 35);
      if (v7 != (char *)this + 304)
        free(v7);
      v8 = (char *)*((_QWORD *)this + 29);
      if (v8 != (char *)this + 248)
        free(v8);
LABEL_14:
      v3 = (char *)*((_QWORD *)this + 15);
      v4 = (char *)this + 136;
LABEL_15:
      if (v3 != v4)
        free(v3);
LABEL_17:
      v5 = (char *)*((_QWORD *)this + 8);
      v6 = (char *)this + 88;
LABEL_18:
      if (v5 == v6)
        goto LABEL_2;
      free(v5);
      operator delete(this);
      break;
    default:
      if (*((unsigned __int8 *)this + 48) != 255)
        return;
LABEL_2:
      operator delete(this);
      break;
  }
}

uint64_t llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  unsigned int v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t MachOSection;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  _BYTE *v19;
  size_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  _BYTE *v25;
  size_t v26;
  uint64_t v27;
  _BYTE *v28;
  size_t v29;
  uint64_t v30;
  _BYTE *v31;
  size_t v32;
  uint64_t v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  _BYTE *v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  size_t v41;
  uint64_t v42;
  _BYTE *v43;
  size_t v44;
  uint64_t v45;
  _BYTE *v46;
  size_t v47;
  uint64_t v48;
  _BYTE *v49;
  size_t v50;

  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 57) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__eh_frame", 10, 1744830475, 0, 4, 0);
  v4 = *((_DWORD *)a2 + 9);
  if (v4 <= 0x1F && ((1 << v4) & 0xFC000222) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    if (v6 == 3 || v6 == 5 || v4 == 30 || *((_DWORD *)a2 + 10) == 24)
      *((_BYTE *)this + 9) = 1;
  }
  v7 = llvm::MCContext::emitDwarfUnwindInfo(*((llvm::MCContext **)this + 110));
  switch(v7)
  {
    case 2:
      if (*((_DWORD *)a2 + 7) != 25)
      {
        v8 = *((_BYTE *)this + 9) != 0;
        goto LABEL_17;
      }
LABEL_15:
      v8 = 1;
LABEL_17:
      *((_BYTE *)this + 10) = v8;
      break;
    case 1:
      goto LABEL_15;
    case 0:
      *((_BYTE *)this + 10) = 0;
      break;
  }
  *((_DWORD *)this + 3) = 16;
  *((_QWORD *)this + 3) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__text", 6, 0x80000000, 0, 2, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__data", 6, 0, 0, 19, 0);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 52) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__thread_data", 13, 17, 0, 19, 0);
  *((_QWORD *)this + 53) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__thread_bss", 12, 18, 0, 12, 0);
  *((_QWORD *)this + 67) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__thread_vars", 13, 19, 0, 19, 0);
  *((_QWORD *)this + 68) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__thread_init", 13, 21, 0, 19, 0);
  *((_QWORD *)this + 69) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 5, 0);
  *((_QWORD *)this + 70) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__ustring", 9, 0, 0, 6, 0);
  *((_QWORD *)this + 78) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__literal4", 10, 3, 0, 8, 0);
  *((_QWORD *)this + 79) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__literal8", 10, 4, 0, 9, 0);
  *((_QWORD *)this + 80) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__literal16", 11, 14, 0, 10, 0);
  *((_QWORD *)this + 6) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__const", 7, 0, 0, 4, 0);
  v9 = *((_DWORD *)a2 + 6);
  MachOSection = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__const", 7, 0, 0, 20, 0);
  *((_QWORD *)this + 73) = MachOSection;
  if ((v9 & 0xFFFFFFFD) == 0x15)
  {
    *((_QWORD *)this + 71) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__textcoal_nt", 13, -2147483637, 0, 2, 0);
    *((_QWORD *)this + 72) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__const_coal", 12, 11, 0, 4, 0);
    MachOSection = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__datacoal_nt", 13, 11, 0, 19, 0);
    v11 = MachOSection;
  }
  else
  {
    v11 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 71) = *((_QWORD *)this + 3);
    *((_QWORD *)this + 72) = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 74) = v11;
  *((_QWORD *)this + 75) = MachOSection;
  *((_QWORD *)this + 76) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__common", 8, 1, 0, 15, 0);
  *((_QWORD *)this + 77) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__bss", 5, 1, 0, 15, 0);
  *((_QWORD *)this + 81) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__la_symbol_ptr", 15, 7, 0, 0, 0);
  *((_QWORD *)this + 82) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__nl_symbol_ptr", 15, 6, 0, 0, 0);
  *((_QWORD *)this + 83) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__thread_ptr", 12, 20, 0, 0, 0);
  *((_QWORD *)this + 84) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DATA", 6uLL, (uint64_t)"__llvm_addrsig", 14, 0, 0, 19, 0);
  *((_QWORD *)this + 7) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__TEXT", 6uLL, (uint64_t)"__gcc_except_tab", 16, 0, 0, 20, 0);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  v12 = *((_DWORD *)a2 + 9);
  if (v12 > 0x1F || ((1 << v12) & 0xFC000222) == 0)
    goto LABEL_39;
  v13 = *((_DWORD *)a2 + 6);
  if (v13 != 3 && v13 != 5 && *((_DWORD *)a2 + 7) != 25)
  {
    if ((v12 & 0xFFFFFFF7) == 1)
    {
      if (!llvm::Triple::isMacOSXVersionLT((llvm::Triple **)a2, 0xAu, 6, 0))
        goto LABEL_35;
      v12 = *((_DWORD *)a2 + 9);
    }
    if (v12 == 26 || v12 == 5)
    {
      if ((*((_DWORD *)a2 + 6) - 37) < 2)
        goto LABEL_35;
    }
    else if (v12 == 30)
    {
      goto LABEL_35;
    }
    if (*((_DWORD *)a2 + 10) != 24)
      goto LABEL_39;
  }
LABEL_35:
  *((_QWORD *)this + 8) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__LD", 4uLL, (uint64_t)"__compact_unwind", 16, 0x2000000, 0, 4, 0);
  v14 = *((_DWORD *)a2 + 6);
  if ((v14 - 37) < 2)
  {
LABEL_37:
    v16 = 0x4000000;
LABEL_38:
    *((_DWORD *)this + 4) = v16;
  }
  else
  {
    v15 = v14 - 1;
    v16 = 50331648;
    switch(v15)
    {
      case 0:
      case 34:
        goto LABEL_37;
      case 2:
      case 4:
        goto LABEL_38;
      default:
        break;
    }
  }
LABEL_39:
  *((_QWORD *)this + 23) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_names", 13, 0x2000000, 0, 0, "debug_names_begin");
  *((_QWORD *)this + 24) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__apple_names", 13, 0x2000000, 0, 0, "names_begin");
  *((_QWORD *)this + 25) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__apple_objc", 12, 0x2000000, 0, 0, "objc_begin");
  *((_QWORD *)this + 26) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__apple_namespac", 16, 0x2000000, 0, 0, "namespac_begin");
  *((_QWORD *)this + 27) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__apple_types", 13, 0x2000000, 0, 0, "types_begin");
  *((_QWORD *)this + 47) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__swift_ast", 11, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_abbrev", 14, 0x2000000, 0, 0, "section_abbrev");
  *((_QWORD *)this + 10) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_info", 12, 0x2000000, 0, 0, "section_info");
  *((_QWORD *)this + 11) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_line", 12, 0x2000000, 0, 0, "section_line");
  *((_QWORD *)this + 12) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_line_str", 16, 0x2000000, 0, 0, "section_line_str");
  *((_QWORD *)this + 13) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_frame", 13, 0x2000000, 0, 0, "section_frame");
  *((_QWORD *)this + 22) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_pubnames", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 14) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_pubtypes", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 45) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_gnu_pubn", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 46) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_gnu_pubt", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 16) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_str", 11, 0x2000000, 0, 0, "info_string");
  *((_QWORD *)this + 37) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_str_offs", 16, 0x2000000, 0, 0, "section_str_off");
  *((_QWORD *)this + 38) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_addr", 12, 0x2000000, 0, 0, "section_info");
  *((_QWORD *)this + 17) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_loc", 11, 0x2000000, 0, 0, "section_debug_loc");
  *((_QWORD *)this + 40) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_loclists", 16, 0x2000000, 0, 0, "section_debug_loc");
  *((_QWORD *)this + 18) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_aranges", 15, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 19) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_ranges", 14, 0x2000000, 0, 0, "debug_range");
  *((_QWORD *)this + 39) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_rnglists", 16, 0x2000000, 0, 0, "debug_range");
  *((_QWORD *)this + 20) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_macinfo", 15, 0x2000000, 0, 0, "debug_macinfo");
  *((_QWORD *)this + 21) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_macro", 13, 0x2000000, 0, 0, "debug_macro");
  *((_QWORD *)this + 15) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_inlined", 15, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 43) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_cu_index", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 44) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__DWARF", 7uLL, (uint64_t)"__debug_tu_index", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 54) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__LLVM_STACKMAPS", 0x10uLL, (uint64_t)"__llvm_stackmaps", 16, 0, 0, 0, 0);
  *((_QWORD *)this + 55) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__LLVM_FAULTMAPS", 0x10uLL, (uint64_t)"__llvm_faultmaps", 16, 0, 0, 0, 0);
  result = llvm::MCContext::getMachOSection(*((_QWORD *)this + 110), "__LLVM", 6uLL, (uint64_t)"__remarks", 9, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 56) = result;
  v18 = *((_QWORD *)this + 110);
  if (*(_QWORD *)(v18 + 16))
  {
    v19 = *(_BYTE **)(v18 + 8);
    if (v19)
      v20 = strlen(*(const char **)(v18 + 8));
    else
      v20 = 0;
    *((_QWORD *)this + 98) = llvm::MCContext::getMachOSection(v18, v19, v20, (uint64_t)"__swift5_fieldmd", 16, 0, 0, 0, 0);
    v21 = *((_QWORD *)this + 110);
    v22 = *(_BYTE **)(v21 + 8);
    if (v22)
      v23 = strlen(*(const char **)(v21 + 8));
    else
      v23 = 0;
    *((_QWORD *)this + 99) = llvm::MCContext::getMachOSection(v21, v22, v23, (uint64_t)"__swift5_assocty", 16, 0, 0, 0, 0);
    v24 = *((_QWORD *)this + 110);
    v25 = *(_BYTE **)(v24 + 8);
    if (v25)
      v26 = strlen(*(const char **)(v24 + 8));
    else
      v26 = 0;
    *((_QWORD *)this + 100) = llvm::MCContext::getMachOSection(v24, v25, v26, (uint64_t)"__swift5_builtin", 16, 0, 0, 0, 0);
    v27 = *((_QWORD *)this + 110);
    v28 = *(_BYTE **)(v27 + 8);
    if (v28)
      v29 = strlen(*(const char **)(v27 + 8));
    else
      v29 = 0;
    *((_QWORD *)this + 101) = llvm::MCContext::getMachOSection(v27, v28, v29, (uint64_t)"__swift5_capture", 16, 0, 0, 0, 0);
    v30 = *((_QWORD *)this + 110);
    v31 = *(_BYTE **)(v30 + 8);
    if (v31)
      v32 = strlen(*(const char **)(v30 + 8));
    else
      v32 = 0;
    *((_QWORD *)this + 102) = llvm::MCContext::getMachOSection(v30, v31, v32, (uint64_t)"__swift5_typeref", 16, 0, 0, 0, 0);
    v33 = *((_QWORD *)this + 110);
    v34 = *(_BYTE **)(v33 + 8);
    if (v34)
      v35 = strlen(*(const char **)(v33 + 8));
    else
      v35 = 0;
    *((_QWORD *)this + 103) = llvm::MCContext::getMachOSection(v33, v34, v35, (uint64_t)"__swift5_reflstr", 16, 0, 0, 0, 0);
    v36 = *((_QWORD *)this + 110);
    v37 = *(_BYTE **)(v36 + 8);
    if (v37)
      v38 = strlen(*(const char **)(v36 + 8));
    else
      v38 = 0;
    *((_QWORD *)this + 104) = llvm::MCContext::getMachOSection(v36, v37, v38, (uint64_t)"__swift5_proto", 14, 0, 0, 0, 0);
    v39 = *((_QWORD *)this + 110);
    v40 = *(_BYTE **)(v39 + 8);
    if (v40)
      v41 = strlen(*(const char **)(v39 + 8));
    else
      v41 = 0;
    *((_QWORD *)this + 105) = llvm::MCContext::getMachOSection(v39, v40, v41, (uint64_t)"__swift5_protos", 15, 0, 0, 0, 0);
    v42 = *((_QWORD *)this + 110);
    v43 = *(_BYTE **)(v42 + 8);
    if (v43)
      v44 = strlen(*(const char **)(v42 + 8));
    else
      v44 = 0;
    *((_QWORD *)this + 106) = llvm::MCContext::getMachOSection(v42, v43, v44, (uint64_t)"__swift5_acfuncs", 16, 0, 0, 0, 0);
    v45 = *((_QWORD *)this + 110);
    v46 = *(_BYTE **)(v45 + 8);
    if (v46)
      v47 = strlen(*(const char **)(v45 + 8));
    else
      v47 = 0;
    *((_QWORD *)this + 107) = llvm::MCContext::getMachOSection(v45, v46, v47, (uint64_t)"__swift5_mpenum", 15, 0, 0, 0, 0);
    v48 = *((_QWORD *)this + 110);
    v49 = *(_BYTE **)(v48 + 8);
    if (v49)
      v50 = strlen(*(const char **)(v48 + 8));
    else
      v50 = 0;
    result = llvm::MCContext::getMachOSection(v48, v49, v50, (uint64_t)"__swift_ast", 11, 0, 0, 0, 0);
    *((_QWORD *)this + 108) = result;
  }
  *((_QWORD *)this + 51) = *((_QWORD *)this + 67);
  return result;
}

unint64_t llvm::MCObjectFileInfo::initELFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2, int a3)
{
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  llvm::MCContext *v11;
  int v12;
  llvm::MCContext *v13;
  llvm::MCContext *v14;
  llvm::MCContext *v15;
  llvm::MCContext *v16;
  llvm::MCContext *v17;
  llvm::MCContext *v18;
  llvm::MCContext *v19;
  llvm::MCContext *v20;
  llvm::MCContext *v21;
  llvm::MCContext *v22;
  llvm::MCContext *v23;
  int v24;
  llvm::MCContext *v25;
  llvm::MCContext *v26;
  llvm::MCContext *v27;
  llvm::MCContext *v28;
  llvm::MCContext *v29;
  llvm::MCContext *v30;
  llvm::MCContext *v31;
  llvm::MCContext *v32;
  llvm::MCContext *v33;
  llvm::MCContext *v34;
  llvm::MCContext *v35;
  llvm::MCContext *v36;
  llvm::MCContext *v37;
  llvm::MCContext *v38;
  llvm::MCContext *v39;
  llvm::MCContext *v40;
  llvm::MCContext *v41;
  llvm::MCContext *v42;
  llvm::MCContext *v43;
  llvm::MCContext *v44;
  llvm::MCContext *v45;
  llvm::MCContext *v46;
  llvm::MCContext *v47;
  llvm::MCContext *v48;
  llvm::MCContext *v49;
  llvm::MCContext *v50;
  llvm::MCContext *v51;
  llvm::MCContext *v52;
  llvm::MCContext *v53;
  llvm::MCContext *v54;
  llvm::MCContext *v55;
  llvm::MCContext *v56;
  llvm::MCContext *v57;
  llvm::MCContext *v58;
  llvm::MCContext *v59;
  llvm::MCContext *v60;
  llvm::MCContext *v61;
  llvm::MCContext *v62;
  llvm::MCContext *v63;
  llvm::MCContext *v64;
  llvm::MCContext *v65;
  llvm::MCContext *v66;
  llvm::MCContext *v67;
  llvm::MCContext *v68;
  unint64_t result;
  _QWORD v70[4];
  __int16 v71;
  _BYTE v72[32];
  __int16 v73;

  v5 = *((_DWORD *)a2 + 6);
  v6 = 12;
  switch(v5)
  {
    case 3:
    case 4:
    case 23:
    case 24:
    case 38:
      if (a3)
        v6 = 28;
      else
        v6 = 27;
      break;
    case 8:
    case 9:
      break;
    case 12:
      v6 = 16 * *((unsigned __int8 *)this + 872);
      break;
    case 16:
    case 17:
    case 18:
    case 19:
      if (*((_BYTE *)this + 872))
        v7 = a3 == 0;
      else
        v7 = 0;
      if (v7)
        goto LABEL_12;
      if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 110) + 144) + 8) == 4)
        v6 = 11;
      else
        v6 = 12;
      break;
    case 40:
      v6 = 11;
      break;
    default:
LABEL_12:
      v6 = 27;
      break;
  }
  *((_DWORD *)this + 3) = v6;
  v8 = *((_DWORD *)a2 + 9);
  if (v5 == 38)
    v9 = 2;
  else
    v9 = 3;
  if (v5 == 38)
    v10 = 1879048193;
  else
    v10 = 1;
  v11 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".bss";
  v71 = 259;
  v73 = 257;
  if (v8 == 12)
    v12 = v9;
  else
    v12 = 2;
  *((_QWORD *)this + 5) = llvm::MCContext::getELFSection(v11, (const llvm::Twine *)v70, 8, 3, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v13 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".text";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 3) = llvm::MCContext::getELFSection(v13, (const llvm::Twine *)v70, 1, 6, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v14 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".data";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 4) = llvm::MCContext::getELFSection(v14, (const llvm::Twine *)v70, 1, 3, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v15 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".rodata";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 6) = llvm::MCContext::getELFSection(v15, (const llvm::Twine *)v70, 1, 2, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v16 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".tdata";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 52) = llvm::MCContext::getELFSection(v16, (const llvm::Twine *)v70, 1, 1027, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v17 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".tbss";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 53) = llvm::MCContext::getELFSection(v17, (const llvm::Twine *)v70, 8, 1027, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v18 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".data.rel.ro";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 62) = llvm::MCContext::getELFSection(v18, (const llvm::Twine *)v70, 1, 3, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v19 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".rodata.cst4";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 63) = llvm::MCContext::getELFSection(v19, (const llvm::Twine *)v70, 1, 18, 4, (const llvm::Twine *)v72, 0, -1, 0);
  v20 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".rodata.cst8";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 64) = llvm::MCContext::getELFSection(v20, (const llvm::Twine *)v70, 1, 18, 8, (const llvm::Twine *)v72, 0, -1, 0);
  v21 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".rodata.cst16";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 65) = llvm::MCContext::getELFSection(v21, (const llvm::Twine *)v70, 1, 18, 16, (const llvm::Twine *)v72, 0, -1, 0);
  v22 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".rodata.cst32";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 66) = llvm::MCContext::getELFSection(v22, (const llvm::Twine *)v70, 1, 18, 32, (const llvm::Twine *)v72, 0, -1, 0);
  v23 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".gcc_except_table";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 7) = llvm::MCContext::getELFSection(v23, (const llvm::Twine *)v70, 1, 2, 0, (const llvm::Twine *)v72, 0, -1, 0);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  if ((*((_DWORD *)a2 + 6) & 0xFFFFFFFC) == 0x10)
    v24 = 1879048222;
  else
    v24 = 1;
  v25 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_abbrev";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 9) = llvm::MCContext::getELFSection(v25, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v26 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_info";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 10) = llvm::MCContext::getELFSection(v26, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v27 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_line";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 11) = llvm::MCContext::getELFSection(v27, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v28 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_line_str";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 12) = llvm::MCContext::getELFSection(v28, (const llvm::Twine *)v70, v24, 48, 1, (const llvm::Twine *)v72, 0, -1, 0);
  v29 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_frame";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 13) = llvm::MCContext::getELFSection(v29, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v30 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_pubnames";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 22) = llvm::MCContext::getELFSection(v30, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v31 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_pubtypes";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 14) = llvm::MCContext::getELFSection(v31, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v32 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_gnu_pubnames";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 45) = llvm::MCContext::getELFSection(v32, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v33 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_gnu_pubtypes";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 46) = llvm::MCContext::getELFSection(v33, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v34 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_str";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 16) = llvm::MCContext::getELFSection(v34, (const llvm::Twine *)v70, v24, 48, 1, (const llvm::Twine *)v72, 0, -1, 0);
  v35 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_loc";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 17) = llvm::MCContext::getELFSection(v35, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v36 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_aranges";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 18) = llvm::MCContext::getELFSection(v36, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v37 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_ranges";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 19) = llvm::MCContext::getELFSection(v37, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v38 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_macinfo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 20) = llvm::MCContext::getELFSection(v38, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v39 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_macro";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 21) = llvm::MCContext::getELFSection(v39, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v40 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_names";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 23) = llvm::MCContext::getELFSection(v40, (const llvm::Twine *)v70, 1, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v41 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".apple_names";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 24) = llvm::MCContext::getELFSection(v41, (const llvm::Twine *)v70, 1, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v42 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".apple_objc";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 25) = llvm::MCContext::getELFSection(v42, (const llvm::Twine *)v70, 1, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v43 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".apple_namespaces";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 26) = llvm::MCContext::getELFSection(v43, (const llvm::Twine *)v70, 1, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v44 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".apple_types";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 27) = llvm::MCContext::getELFSection(v44, (const llvm::Twine *)v70, 1, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v45 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_str_offsets";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 37) = llvm::MCContext::getELFSection(v45, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v46 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_addr";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 38) = llvm::MCContext::getELFSection(v46, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v47 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_rnglists";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 39) = llvm::MCContext::getELFSection(v47, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v48 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_loclists";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 40) = llvm::MCContext::getELFSection(v48, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v49 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_info.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 28) = llvm::MCContext::getELFSection(v49, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v50 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_types.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 29) = llvm::MCContext::getELFSection(v50, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v51 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_abbrev.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 30) = llvm::MCContext::getELFSection(v51, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v52 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_str.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 31) = llvm::MCContext::getELFSection(v52, (const llvm::Twine *)v70, v24, -2147483600, 1, (const llvm::Twine *)v72, 0, -1, 0);
  v53 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_line.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 32) = llvm::MCContext::getELFSection(v53, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v54 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_loc.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 33) = llvm::MCContext::getELFSection(v54, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v55 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_str_offsets.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 34) = llvm::MCContext::getELFSection(v55, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v56 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_rnglists.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 41) = llvm::MCContext::getELFSection(v56, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v57 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_macinfo.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 35) = llvm::MCContext::getELFSection(v57, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v58 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_macro.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 36) = llvm::MCContext::getELFSection(v58, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v59 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_loclists.dwo";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 42) = llvm::MCContext::getELFSection(v59, (const llvm::Twine *)v70, v24, 0x80000000, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v60 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_cu_index";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 43) = llvm::MCContext::getELFSection(v60, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v61 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".debug_tu_index";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 44) = llvm::MCContext::getELFSection(v61, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v62 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".llvm_stackmaps";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 54) = llvm::MCContext::getELFSection(v62, (const llvm::Twine *)v70, 1, 2, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v63 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".llvm_faultmaps";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 55) = llvm::MCContext::getELFSection(v63, (const llvm::Twine *)v70, 1, 2, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v64 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".eh_frame";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 57) = llvm::MCContext::getELFSection(v64, (const llvm::Twine *)v70, v10, v12, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v65 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".stack_sizes";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 58) = llvm::MCContext::getELFSection(v65, (const llvm::Twine *)v70, 1, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v66 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".pseudo_probe";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 59) = llvm::MCContext::getELFSection(v66, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v67 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".pseudo_probe_desc";
  v71 = 259;
  v73 = 257;
  *((_QWORD *)this + 60) = llvm::MCContext::getELFSection(v67, (const llvm::Twine *)v70, v24, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  v68 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v70[0] = ".llvm_stats";
  v71 = 259;
  v73 = 257;
  result = llvm::MCContext::getELFSection(v68, (const llvm::Twine *)v70, 1, 0, 0, (const llvm::Twine *)v72, 0, -1, 0);
  *((_QWORD *)this + 61) = result;
  return result;
}

unint64_t llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unint64_t COFFSection;
  unint64_t result;

  *((_QWORD *)this + 57) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".eh_frame", 9uLL, 1073741888, 19, 0);
  v4 = *((_DWORD *)a2 + 6);
  *((_QWORD *)this + 5) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".bss", 4uLL, -1073741696, 15, 0);
  if (v4 == 35)
    v5 = 1610743840;
  else
    v5 = 1610612768;
  *((_QWORD *)this + 3) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".text", 5uLL, v5, 2, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".data", 5uLL, -1073741760, 19, 0);
  *((_QWORD *)this + 6) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".rdata", 6uLL, 1073741888, 4, 0);
  v6 = *((_DWORD *)a2 + 6);
  if (v6 > 0x26 || (COFFSection = 0, ((1 << v6) & 0x480000000ALL) == 0))
    COFFSection = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".gcc_except_table", 0x11uLL, 1073741888, 4, 0);
  *((_QWORD *)this + 7) = COFFSection;
  *((_QWORD *)this + 48) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug$S", 8uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 49) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug$T", 8uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 50) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug$H", 8uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_abbrev", 0xDuLL, 1107296320, 0, "section_abbrev");
  *((_QWORD *)this + 10) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_info", 0xBuLL, 1107296320, 0, "section_info");
  *((_QWORD *)this + 11) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_line", 0xBuLL, 1107296320, 0, "section_line");
  *((_QWORD *)this + 12) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_line_str", 0xFuLL, 1107296320, 0, "section_line_str");
  *((_QWORD *)this + 13) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_frame", 0xCuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 22) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_pubnames", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 14) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_pubtypes", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 45) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_gnu_pubnames", 0x13uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 46) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_gnu_pubtypes", 0x13uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 16) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_str", 0xAuLL, 1107296320, 0, "info_string");
  *((_QWORD *)this + 37) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_str_offsets", 0x12uLL, 1107296320, 0, "section_str_off");
  *((_QWORD *)this + 17) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_loc", 0xAuLL, 1107296320, 0, "section_debug_loc");
  *((_QWORD *)this + 40) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_loclists", 0xFuLL, 1107296320, 0, "section_debug_loclists");
  *((_QWORD *)this + 18) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_aranges", 0xEuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 19) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_ranges", 0xDuLL, 1107296320, 0, "debug_range");
  *((_QWORD *)this + 39) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_rnglists", 0xFuLL, 1107296320, 0, "debug_rnglists");
  *((_QWORD *)this + 20) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_macinfo", 0xEuLL, 1107296320, 0, "debug_macinfo");
  *((_QWORD *)this + 21) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_macro", 0xCuLL, 1107296320, 0, "debug_macro");
  *((_QWORD *)this + 35) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_macinfo.dwo", 0x12uLL, 1107296320, 0, "debug_macinfo.dwo");
  *((_QWORD *)this + 36) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_macro.dwo", 0x10uLL, 1107296320, 0, "debug_macro.dwo");
  *((_QWORD *)this + 28) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_info.dwo", 0xFuLL, 1107296320, 0, "section_info_dwo");
  *((_QWORD *)this + 29) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_types.dwo", 0x10uLL, 1107296320, 0, "section_types_dwo");
  *((_QWORD *)this + 30) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_abbrev.dwo", 0x11uLL, 1107296320, 0, "section_abbrev_dwo");
  *((_QWORD *)this + 31) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_str.dwo", 0xEuLL, 1107296320, 0, "skel_string");
  *((_QWORD *)this + 32) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_line.dwo", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 33) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_loc.dwo", 0xEuLL, 1107296320, 0, "skel_loc");
  *((_QWORD *)this + 34) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_str_offsets.dwo", 0x16uLL, 1107296320, 0, "section_str_off_dwo");
  *((_QWORD *)this + 38) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_addr", 0xBuLL, 1107296320, 0, "addr_sec");
  *((_QWORD *)this + 43) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_cu_index", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 44) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_tu_index", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 23) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".debug_names", 0xCuLL, 1107296320, 0, "debug_names_begin");
  *((_QWORD *)this + 24) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".apple_names", 0xCuLL, 1107296320, 0, "names_begin");
  *((_QWORD *)this + 26) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".apple_namespaces", 0x11uLL, 1107296320, 0, "namespac_begin");
  *((_QWORD *)this + 27) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".apple_types", 0xCuLL, 1107296320, 0, "types_begin");
  *((_QWORD *)this + 25) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".apple_objc", 0xBuLL, 1107296320, 0, "objc_begin");
  *((_QWORD *)this + 85) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".drectve", 8uLL, 2560, 0, 0);
  *((_QWORD *)this + 86) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".pdata", 6uLL, 1073741888, 19, 0);
  *((_QWORD *)this + 87) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".xdata", 6uLL, 1073741888, 19, 0);
  *((_QWORD *)this + 88) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".sxdata", 7uLL, 512, 0, 0);
  *((_QWORD *)this + 89) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".gehcont$y", 0xAuLL, 1073741888, 0, 0);
  *((_QWORD *)this + 90) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".gfids$y", 8uLL, 1073741888, 0, 0);
  *((_QWORD *)this + 91) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".giats$y", 8uLL, 1073741888, 0, 0);
  *((_QWORD *)this + 92) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".gljmp$y", 8uLL, 1073741888, 0, 0);
  *((_QWORD *)this + 52) = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".tls$", 5uLL, -1073741760, 19, 0);
  result = llvm::MCContext::getCOFFSection(*((uint64_t ***)this + 110), ".llvm_stackmaps", 0xFuLL, 1073741888, 4, 0);
  *((_QWORD *)this + 54) = result;
  return result;
}

unint64_t llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  llvm::MCContext *v3;
  llvm::MCContext *v4;
  llvm::MCContext *v5;
  llvm::MCContext *v6;
  llvm::MCContext *v7;
  llvm::MCContext *v8;
  llvm::MCContext *v9;
  llvm::MCContext *v10;
  llvm::MCContext *v11;
  llvm::MCContext *v12;
  llvm::MCContext *v13;
  llvm::MCContext *v14;
  llvm::MCContext *v15;
  llvm::MCContext *v16;
  llvm::MCContext *v17;
  llvm::MCContext *v18;
  llvm::MCContext *v19;
  llvm::MCContext *v20;
  llvm::MCContext *v21;
  llvm::MCContext *v22;
  llvm::MCContext *v23;
  llvm::MCContext *v24;
  llvm::MCContext *v25;
  llvm::MCContext *v26;
  llvm::MCContext *v27;
  llvm::MCContext *v28;
  llvm::MCContext *v29;
  llvm::MCContext *v30;
  llvm::MCContext *v31;
  llvm::MCContext *v32;
  llvm::MCContext *v33;
  llvm::MCContext *v34;
  llvm::MCContext *v35;
  llvm::MCContext *v36;
  llvm::MCContext *v37;
  llvm::MCContext *v38;
  llvm::MCContext *v39;
  llvm::MCContext *v40;
  unint64_t result;
  _QWORD v42[4];
  __int16 v43;
  _BYTE v44[32];
  __int16 v45;

  v3 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".text";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 3) = llvm::MCContext::getWasmSection(v3, (llvm::Twine *)v42, 2, 0, (llvm::Twine *)v44, -1);
  v4 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".data";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 4) = llvm::MCContext::getWasmSection(v4, (llvm::Twine *)v42, 19, 0, (llvm::Twine *)v44, -1);
  v5 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_line";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 11) = llvm::MCContext::getWasmSection(v5, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v6 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_line_str";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 12) = llvm::MCContext::getWasmSection(v6, (llvm::Twine *)v42, 0, 1, (llvm::Twine *)v44, -1);
  v7 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_str";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 16) = llvm::MCContext::getWasmSection(v7, (llvm::Twine *)v42, 0, 1, (llvm::Twine *)v44, -1);
  v8 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_loc";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 17) = llvm::MCContext::getWasmSection(v8, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v9 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_abbrev";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 9) = llvm::MCContext::getWasmSection(v9, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v10 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_aranges";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 18) = llvm::MCContext::getWasmSection(v10, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v11 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_ranges";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 19) = llvm::MCContext::getWasmSection(v11, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v12 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_macinfo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 20) = llvm::MCContext::getWasmSection(v12, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v13 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_macro";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 21) = llvm::MCContext::getWasmSection(v13, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v14 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_cu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 43) = llvm::MCContext::getWasmSection(v14, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v15 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_tu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 44) = llvm::MCContext::getWasmSection(v15, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v16 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_info";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 10) = llvm::MCContext::getWasmSection(v16, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v17 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_frame";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 13) = llvm::MCContext::getWasmSection(v17, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v18 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_pubnames";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 22) = llvm::MCContext::getWasmSection(v18, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v19 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_pubtypes";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 14) = llvm::MCContext::getWasmSection(v19, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v20 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_gnu_pubnames";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 45) = llvm::MCContext::getWasmSection(v20, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v21 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_gnu_pubtypes";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 46) = llvm::MCContext::getWasmSection(v21, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v22 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_names";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 23) = llvm::MCContext::getWasmSection(v22, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v23 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_str_offsets";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 37) = llvm::MCContext::getWasmSection(v23, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v24 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_addr";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 38) = llvm::MCContext::getWasmSection(v24, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v25 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_rnglists";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 39) = llvm::MCContext::getWasmSection(v25, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v26 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_loclists";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 40) = llvm::MCContext::getWasmSection(v26, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v27 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_info.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 28) = llvm::MCContext::getWasmSection(v27, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v28 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_types.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 29) = llvm::MCContext::getWasmSection(v28, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v29 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_abbrev.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 30) = llvm::MCContext::getWasmSection(v29, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v30 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_str.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 31) = llvm::MCContext::getWasmSection(v30, (llvm::Twine *)v42, 0, 1, (llvm::Twine *)v44, -1);
  v31 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_line.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 32) = llvm::MCContext::getWasmSection(v31, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v32 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_loc.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 33) = llvm::MCContext::getWasmSection(v32, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v33 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_str_offsets.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 34) = llvm::MCContext::getWasmSection(v33, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v34 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_rnglists.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 41) = llvm::MCContext::getWasmSection(v34, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v35 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_macinfo.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 35) = llvm::MCContext::getWasmSection(v35, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v36 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_macro.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 36) = llvm::MCContext::getWasmSection(v36, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v37 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_loclists.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 42) = llvm::MCContext::getWasmSection(v37, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v38 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_cu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 43) = llvm::MCContext::getWasmSection(v38, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v39 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".debug_tu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 44) = llvm::MCContext::getWasmSection(v39, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  v40 = (llvm::MCContext *)*((_QWORD *)this + 110);
  v42[0] = ".rodata.gcc_except_table";
  v43 = 259;
  v45 = 257;
  result = llvm::MCContext::getWasmSection(v40, (llvm::Twine *)v42, 20, 0, (llvm::Twine *)v44, -1);
  *((_QWORD *)this + 7) = result;
  return result;
}

unint64_t llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  unint64_t XCOFFSection;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;

  *((_QWORD *)this + 3) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), "", 0, 2, 256, 1, 0, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".data", 5uLL, 19, 261, 1, 0, 0);
  XCOFFSection = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".rodata", 7uLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 6) = XCOFFSection;
  *(_BYTE *)(XCOFFSection + 24) = 2;
  v4 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".rodata.8", 9uLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 96) = v4;
  *(_BYTE *)(v4 + 24) = 3;
  v5 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".rodata.16", 0xAuLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 97) = v5;
  *(_BYTE *)(v5 + 24) = 4;
  *((_QWORD *)this + 52) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".tdata", 6uLL, 13, 276, 1, 0, 0);
  v6 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), "TOC", 3uLL, 19, 271, 0, 0, 0);
  *((_QWORD *)this + 95) = v6;
  *(_BYTE *)(v6 + 24) = 2;
  *((_QWORD *)this + 7) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".gcc_except_table", 0x11uLL, 4, 257, 0, 0, 0);
  *((_QWORD *)this + 8) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".eh_info_table", 0xEuLL, 19, 261, 0, 0, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwabrev", 8uLL, 0, 0, 1, ".dwabrev", 0x100060000);
  *((_QWORD *)this + 10) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwinfo", 7uLL, 0, 0, 1, ".dwinfo", 0x100010000);
  *((_QWORD *)this + 11) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwline", 7uLL, 0, 0, 1, ".dwline", 0x100020000);
  *((_QWORD *)this + 13) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwframe", 8uLL, 0, 0, 1, ".dwframe", 0x1000A0000);
  *((_QWORD *)this + 22) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwpbnms", 8uLL, 0, 0, 1, ".dwpbnms", 0x100030000);
  *((_QWORD *)this + 14) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwpbtyp", 8uLL, 0, 0, 1, ".dwpbtyp", 0x100040000);
  *((_QWORD *)this + 16) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwstr", 6uLL, 0, 0, 1, ".dwstr", 0x100070000);
  *((_QWORD *)this + 17) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwloc", 6uLL, 0, 0, 1, ".dwloc", 0x100090000);
  *((_QWORD *)this + 18) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwarnge", 8uLL, 0, 0, 1, ".dwarnge", 0x100050000);
  *((_QWORD *)this + 19) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwrnges", 8uLL, 0, 0, 1, ".dwrnges", 0x100080000);
  result = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 110), ".dwmac", 6uLL, 0, 0, 1, ".dwmac", 0x1000B0000);
  *((_QWORD *)this + 20) = result;
  return result;
}

void llvm::MCObjectFileInfo::~MCObjectFileInfo(void **this)
{
  *this = off_1E0E20BA8;
  if (*((_BYTE *)this + 952))
  {
    if (*((char *)this + 927) < 0)
      operator delete(this[113]);
  }
}

{
  *this = off_1E0E20BA8;
  if (*((_BYTE *)this + 952) && *((char *)this + 927) < 0)
  {
    operator delete(this[113]);
    operator delete(this);
  }
  else
  {
    operator delete(this);
  }
}

void llvm::MCObjectFileInfo::initMCObjectFileInfo(llvm::MCObjectFileInfo *this, llvm::MCContext *a2, char a3, int a4)
{
  llvm::MCContext *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t SPIRVSection;
  std::string __p;
  __int128 v13;
  uint64_t v14;

  *((_BYTE *)this + 872) = a3;
  *((_QWORD *)this + 110) = a2;
  *((_WORD *)this + 4) = 1;
  *((_BYTE *)this + 10) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
    v7 = (llvm::MCContext *)*((_QWORD *)this + 110);
  }
  else
  {
    __p = *(std::string *)((_BYTE *)a2 + 1);
    v7 = a2;
  }
  v13 = *((_OWORD *)a2 + 3);
  v14 = *((_QWORD *)a2 + 8);
  switch(*(_DWORD *)v7)
  {
    case 0:
      llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(this, (const llvm::Triple *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_21;
      return;
    case 1:
      llvm::MCObjectFileInfo::initELFMCObjectFileInfo(this, (const llvm::Triple *)&__p, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_21;
      return;
    case 2:
      *((_QWORD *)this + 3) = llvm::MCContext::getGOFFSection((uint64_t)v7, ".text", 5uLL, 2, 0, 0);
      *((_QWORD *)this + 5) = llvm::MCContext::getGOFFSection(*((_QWORD *)this + 110), ".bss", 4uLL, 15, 0, 0);
      v8 = *((_QWORD *)this + 110);
      v9 = *((_QWORD *)this + 3);
      v10 = llvm::MCConstantExpr::create((llvm::MCConstantExpr *)2, v8, 0, 0);
      *((_QWORD *)this + 93) = llvm::MCContext::getGOFFSection(v8, ".ppa1", 5uLL, 0, v9, v10);
      *((_QWORD *)this + 94) = llvm::MCContext::getGOFFSection(*((_QWORD *)this + 110), ".ada", 4uLL, 19, 0, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_21;
      return;
    case 3:
      llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(this, (const llvm::Triple *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_21;
      return;
    case 4:
      SPIRVSection = (uint64_t)llvm::MCContext::getSPIRVSection(v7);
      goto LABEL_20;
    case 5:
      llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(this, a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_21;
      return;
    case 6:
      llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(this, a2);
      goto LABEL_17;
    case 7:
      SPIRVSection = llvm::MCContext::getDXContainerSection((uint64_t)v7, (int8x16_t *)"DXBC", (const unsigned __int8 *)4, 2);
LABEL_20:
      *((_QWORD *)this + 3) = SPIRVSection;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_21;
      return;
    default:
LABEL_17:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_21:
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
  }
}

uint64_t llvm::MCObjectFileInfo::getTextSectionAlignment(llvm::MCObjectFileInfo *this)
{
  return 4;
}

uint64_t llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  void *AssociatedFragment;
  void *v12;

  if (*(_WORD *)(a3 + 1))
    return 0;
  if (*(_WORD *)(a4 + 1))
    return 0;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a4 + 16);
  if (!*(_QWORD *)v9)
  {
    if ((*(_DWORD *)(v9 + 8) & 0x7080) != 0x2000)
      return 0;
    *(_DWORD *)(v9 + 8) |= 8u;
    AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
    *(_QWORD *)v9 = AssociatedFragment;
    if (!AssociatedFragment)
      return 0;
  }
  if (*(_QWORD *)v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, v9, v10, a5);
  if ((*(_DWORD *)(v10 + 8) & 0x7080) == 0x2000
    && (*(_DWORD *)(v10 + 8) |= 8u,
        v12 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v10 + 24)),
        (*(_QWORD *)v10 = v12) != 0))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, v9, v10, a5);
  }
  else
  {
    return 0;
  }
}

void llvm::MCPseudoProbeInlineTree::addPseudoProbe(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _OWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (a3[2])
    v6 = *(_QWORD **)a3;
  else
    v6 = (_QWORD *)a2;
  *(_QWORD *)&v43 = *v6;
  v7 = v43;
  DWORD2(v43) = 0;
  v8 = operator new(0x50uLL);
  *v8 = 0u;
  v8[1] = 0u;
  *((_DWORD *)v8 + 8) = 1065353216;
  *(_OWORD *)((char *)v8 + 56) = 0u;
  *(_OWORD *)((char *)v8 + 40) = 0u;
  *((_QWORD *)v8 + 8) = v7;
  *((_QWORD *)v8 + 9) = 0;
  *(_QWORD *)&v42 = v8;
  v9 = std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::__emplace_unique_key_args<std::tuple<unsigned long long,unsigned int>,std::tuple<unsigned long long,unsigned int> const&,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>(a1, (uint64_t *)&v43, &v43, (uint64_t *)&v42);
  v10 = v42;
  *(_QWORD *)&v42 = 0;
  if (v10)
  {
    v11 = *(void **)(v10 + 40);
    if (v11)
    {
      *(_QWORD *)(v10 + 48) = v11;
      operator delete(v11);
    }
    v12 = (void *)std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(v10);
    operator delete(v12);
  }
  *(_QWORD *)(v9[4] + 72) = a1;
  v13 = (_QWORD *)v9[4];
  v14 = a3[2];
  if (v14)
  {
    v15 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    if (v14 != 1)
    {
      v32 = *(_QWORD *)a3 + 16;
      do
      {
        *(_QWORD *)&v42 = *(_QWORD *)v32;
        v34 = v42;
        DWORD2(v42) = v15;
        v35 = operator new(0x50uLL);
        *v35 = 0u;
        v35[1] = 0u;
        *((_DWORD *)v35 + 8) = 1065353216;
        *(_OWORD *)((char *)v35 + 56) = 0u;
        *(_OWORD *)((char *)v35 + 40) = 0u;
        *((_QWORD *)v35 + 8) = v34;
        *((_QWORD *)v35 + 9) = 0;
        v44 = (uint64_t)v35;
        v36 = std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::__emplace_unique_key_args<std::tuple<unsigned long long,unsigned int>,std::tuple<unsigned long long,unsigned int> const&,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>((uint64_t)v13, (uint64_t *)&v42, &v42, &v44);
        v37 = v44;
        v44 = 0;
        if (v37)
        {
          v38 = *(void **)(v37 + 40);
          if (v38)
          {
            *(_QWORD *)(v37 + 48) = v38;
            operator delete(v38);
          }
          v33 = (void *)std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(v37);
          operator delete(v33);
        }
        *(_QWORD *)(v36[4] + 72) = v13;
        v13 = (_QWORD *)v36[4];
        v15 = *(_DWORD *)(v32 + 8);
        v32 += 16;
      }
      while (v32 != *(_QWORD *)a3 + 16 * a3[2]);
    }
    *(_QWORD *)&v42 = *(_QWORD *)a2;
    v16 = v42;
    DWORD2(v42) = v15;
    v17 = operator new(0x50uLL);
    *v17 = 0u;
    v17[1] = 0u;
    *((_DWORD *)v17 + 8) = 1065353216;
    *(_OWORD *)((char *)v17 + 56) = 0u;
    *(_OWORD *)((char *)v17 + 40) = 0u;
    *((_QWORD *)v17 + 8) = v16;
    *((_QWORD *)v17 + 9) = 0;
    v44 = (uint64_t)v17;
    v18 = std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::__emplace_unique_key_args<std::tuple<unsigned long long,unsigned int>,std::tuple<unsigned long long,unsigned int> const&,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>((uint64_t)v13, (uint64_t *)&v42, &v42, &v44);
    v19 = v44;
    v44 = 0;
    if (v19)
    {
      v20 = *(void **)(v19 + 40);
      if (v20)
      {
        *(_QWORD *)(v19 + 48) = v20;
        operator delete(v20);
      }
      v21 = (void *)std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(v19);
      operator delete(v21);
    }
    *(_QWORD *)(v18[4] + 72) = v13;
    v13 = (_QWORD *)v18[4];
  }
  v23 = (char *)v13[6];
  v22 = v13[7];
  if ((unint64_t)v23 >= v22)
  {
    v26 = (char *)v13[5];
    v27 = (v23 - v26) >> 5;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 59)
      abort();
    v29 = v22 - (_QWORD)v26;
    if (v29 >> 4 > v28)
      v28 = v29 >> 4;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
      v30 = 0x7FFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      if (v30 >> 59)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v31 = (char *)operator new(32 * v30);
    }
    else
    {
      v31 = 0;
    }
    v39 = &v31[32 * v27];
    v40 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v39 = *(_OWORD *)a2;
    *((_OWORD *)v39 + 1) = v40;
    v25 = v39 + 32;
    if (v23 != v26)
    {
      do
      {
        v41 = *((_OWORD *)v23 - 1);
        *((_OWORD *)v39 - 2) = *((_OWORD *)v23 - 2);
        *((_OWORD *)v39 - 1) = v41;
        v39 -= 32;
        v23 -= 32;
      }
      while (v23 != v26);
      v23 = (char *)v13[5];
    }
    v13[5] = v39;
    v13[6] = v25;
    v13[7] = &v31[32 * v30];
    if (v23)
      operator delete(v23);
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v23 = *(_OWORD *)a2;
    *((_OWORD *)v23 + 1) = v24;
    v25 = v23 + 32;
  }
  v13[6] = v25;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::__emplace_unique_key_args<std::tuple<unsigned long long,unsigned int>,std::tuple<unsigned long long,unsigned int> const&,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>(uint64_t a1, uint64_t *a2, _OWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  size_t v28;
  uint8x8_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  v9 = *((unsigned int *)a2 + 2);
  v10 = *a2 ^ v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = *a2 ^ v9;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v14[1];
            if (v17 == v10)
            {
              if (v14[2] == v8 && *((_DWORD *)v14 + 6) == (_DWORD)v9)
                return v14;
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_31;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v8 && *((_DWORD *)v14 + 6) == (_DWORD)v9)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v10;
  *((_OWORD *)v14 + 1) = *a3;
  v19 = *a4;
  *a4 = 0;
  v14[4] = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_45;
    if (prime < v11)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 >= 3)
      {
        v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] <= 1uLL)
        {
          v30 = 1 << -(char)__clz(v28 - 1);
          if (v28 >= 2)
            v28 = v30;
          if (prime <= v28)
            prime = v28;
          if (prime >= v11)
            goto LABEL_58;
LABEL_45:
          std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(a1, prime);
          goto LABEL_58;
        }
      }
      v31 = std::__next_prime(v28);
      if (prime <= v31)
        prime = v31;
      if (prime < v11)
        goto LABEL_45;
    }
LABEL_58:
    v11 = *(_QWORD *)(a1 + 8);
    v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v23)
          goto LABEL_34;
      }
      else
      {
        v4 = v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v23)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v32 & v10;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v10));
      if (v23)
        goto LABEL_34;
    }
    goto LABEL_60;
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
LABEL_34:
    *v14 = *v23;
LABEL_71:
    *v23 = v14;
    goto LABEL_72;
  }
LABEL_60:
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v33 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11)
        v33 %= v11;
    }
    else
    {
      v33 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_71;
  }
LABEL_72:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

uint64_t llvm::MCRegisterInfo::getDwarfRegNum(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;

  v3 = 128;
  if (a3)
    v3 = 136;
  v4 = *(_DWORD **)(a1 + v3);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = 112;
  if (a3)
    v5 = 116;
  v6 = *(unsigned int *)(a1 + v5);
  if (!(_DWORD)v6)
    return 0xFFFFFFFFLL;
  v7 = &v4[2 * v6];
  do
  {
    v8 = v6 >> 1;
    v9 = &v4[2 * (v6 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v6 += ~(v6 >> 1);
    if (v11 < a2)
      v4 = v10;
    else
      v6 = v8;
  }
  while (v6);
  if (v4 != v7 && *v4 == a2)
    return v4[1];
  else
    return 0xFFFFFFFFLL;
}

uint64_t llvm::MCRegisterInfo::getSEHRegNum(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & (37 * a2);
    v5 = (int *)(v2 + 8 * v4);
    v6 = *v5;
    if (*v5 == (_DWORD)a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 8 * v4);
      if (v6 == (_DWORD)a2)
      {
        v5 = (int *)(v2 + 8 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (int *)(v2 + 8 * v3);
LABEL_8:
  if (v5 != (int *)(v2 + 8 * v3))
    return v5[1];
  return a2;
}

uint64_t llvm::MCSection::MCSection(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(_QWORD *)a1 = &unk_1E0E258D8;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 44) &= 0xF8u;
  llvm::MCFragment::MCFragment(a1 + 48, 15, 0, a1);
  *(_QWORD *)(a1 + 104) = a1 + 104;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x100000000;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)(a1 + 160) = 0x200000000;
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 208) = a4;
  *(_DWORD *)(a1 + 216) = a2;
  *(_DWORD *)(a1 + 220) = a5;
  return a1;
}

void llvm::MCSection::~MCSection(llvm::MCSection *this)
{
  char *v2;
  char *v3;
  llvm::MCSection *v4;
  uint64_t v5;
  llvm::MCSection *v6;

  *(_QWORD *)this = &unk_1E0E258D8;
  v2 = (char *)*((_QWORD *)this + 19);
  if (v2 != (char *)this + 168)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 != (char *)this + 136)
    free(v3);
  v4 = (llvm::MCSection *)*((_QWORD *)this + 14);
  if (v4 != (llvm::MCSection *)((char *)this + 104))
  {
    do
    {
      v5 = *(_QWORD *)v4;
      v6 = (llvm::MCSection *)*((_QWORD *)v4 + 1);
      *(_QWORD *)v6 = *(_QWORD *)v4;
      *(_QWORD *)(v5 + 8) = v6;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      llvm::ilist_alloc_traits<llvm::MCFragment>::deleteNode();
      v4 = v6;
    }
    while (v6 != (llvm::MCSection *)((char *)this + 104));
  }
}

const char *llvm::MCSection::getVirtualSectionKind(llvm::MCSection *this)
{
  return "virtual";
}

uint64_t llvm::MCSectionCOFF::setSelection(uint64_t this, int a2)
{
  *(_DWORD *)(this + 240) = a2;
  *(_DWORD *)(this + 224) |= 0x1000u;
  return this;
}

llvm::raw_ostream *llvm::MCSectionCOFF::printSwitchToSection(uint64_t a1, _BYTE *a2, int a3, llvm::raw_ostream **this)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *result;
  const char *v10;
  size_t v11;
  _BYTE *v12;
  int v13;
  char *v14;
  unint64_t v15;
  char v16;
  int *v17;
  uint64_t v18;
  int v20;
  int v21;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  int *v27;
  int v28;
  int v29;
  BOOL v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  const void *v38;
  size_t v39;
  _QWORD *v40;
  int *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;

  v4 = (llvm::raw_ostream *)this;
  if (*(_QWORD *)(a1 + 232))
    goto LABEL_2;
  v17 = *(int **)(a1 + 200);
  v18 = *(_QWORD *)(a1 + 208);
  if (v18 == 4)
  {
    if (*v17 != 1936941614)
      goto LABEL_2;
LABEL_84:
    v37 = this[4];
    if (v37 >= this[3])
    {
      v4 = llvm::raw_ostream::write((llvm::raw_ostream *)this, 9);
      v38 = *(const void **)(a1 + 200);
      v39 = *(_QWORD *)(a1 + 208);
      result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
      if (v39 <= *((_QWORD *)v4 + 3) - (_QWORD)result)
      {
LABEL_86:
        if (v39)
        {
          memcpy(result, v38, v39);
          result = (llvm::raw_ostream *)(*((_QWORD *)v4 + 4) + v39);
          *((_QWORD *)v4 + 4) = result;
        }
        if ((unint64_t)result >= *((_QWORD *)v4 + 3))
          return llvm::raw_ostream::write(v4, 10);
        goto LABEL_98;
      }
    }
    else
    {
      this[4] = (llvm::raw_ostream *)((char *)v37 + 1);
      *(_BYTE *)v37 = 9;
      v38 = *(const void **)(a1 + 200);
      v39 = *(_QWORD *)(a1 + 208);
      result = this[4];
      if (v39 <= this[3] - result)
        goto LABEL_86;
    }
    v4 = llvm::raw_ostream::write(v4, (const char *)v38, v39);
    result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
    if ((unint64_t)result >= *((_QWORD *)v4 + 3))
      return llvm::raw_ostream::write(v4, 10);
LABEL_98:
    *((_QWORD *)v4 + 4) = (char *)result + 1;
    *(_BYTE *)result = 10;
    return result;
  }
  if (v18 == 5)
  {
    if (*v17 == 2019914798 && *((_BYTE *)v17 + 4) == 116)
      goto LABEL_84;
    v20 = *v17;
    v21 = *((unsigned __int8 *)v17 + 4);
    if (v20 == 1952539694 && v21 == 97)
      goto LABEL_84;
  }
LABEL_2:
  v7 = this[4];
  if ((unint64_t)(this[3] - v7) <= 9)
  {
    v8 = llvm::raw_ostream::write((llvm::raw_ostream *)this, "\t.section\t", 0xAuLL);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    v10 = *(const char **)(a1 + 200);
    v11 = *(_QWORD *)(a1 + 208);
    if (v11 <= *((_QWORD *)v8 + 3) - (_QWORD)result)
      goto LABEL_4;
LABEL_10:
    v8 = llvm::raw_ostream::write(v8, v10, v11);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)result <= 1uLL)
      goto LABEL_7;
LABEL_11:
    *(_WORD *)result = 8748;
    *((_QWORD *)v8 + 4) += 2;
    if ((*(_BYTE *)(a1 + 224) & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_12;
  }
  *((_WORD *)v7 + 4) = 2414;
  *(_QWORD *)v7 = *(_QWORD *)"\t.section\t";
  result = (llvm::raw_ostream *)((char *)this[4] + 10);
  this[4] = result;
  v8 = (llvm::raw_ostream *)this;
  v10 = *(const char **)(a1 + 200);
  v11 = *(_QWORD *)(a1 + 208);
  if (v11 > this[3] - result)
    goto LABEL_10;
LABEL_4:
  if (v11)
  {
    memcpy(result, v10, v11);
    result = (llvm::raw_ostream *)(*((_QWORD *)v8 + 4) + v11);
    *((_QWORD *)v8 + 4) = result;
  }
  if (*((_QWORD *)v8 + 3) - (_QWORD)result > 1uLL)
    goto LABEL_11;
LABEL_7:
  result = llvm::raw_ostream::write(v8, ",\"", 2uLL);
  if ((*(_BYTE *)(a1 + 224) & 0x40) == 0)
  {
LABEL_14:
    if ((*(_BYTE *)(a1 + 224) & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_12:
  v12 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v12 < *((_QWORD *)v4 + 3))
  {
    *((_QWORD *)v4 + 4) = v12 + 1;
    *v12 = 100;
    goto LABEL_14;
  }
  result = llvm::raw_ostream::write(v4, 100);
  if ((*(_BYTE *)(a1 + 224) & 0x80) == 0)
  {
LABEL_15:
    v13 = *(_DWORD *)(a1 + 224);
    if ((v13 & 0x20000000) == 0)
      goto LABEL_16;
LABEL_39:
    v24 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v24 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 120);
      v13 = *(_DWORD *)(a1 + 224);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_17;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v24 + 1;
      *v24 = 120;
      v13 = *(_DWORD *)(a1 + 224);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_35:
  v23 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)v4 + 3))
  {
    result = llvm::raw_ostream::write(v4, 98);
    v13 = *(_DWORD *)(a1 + 224);
    if ((v13 & 0x20000000) != 0)
      goto LABEL_39;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v23 + 1;
    *v23 = 98;
    v13 = *(_DWORD *)(a1 + 224);
    if ((v13 & 0x20000000) != 0)
      goto LABEL_39;
  }
LABEL_16:
  if ((v13 & 0x80000000) == 0)
  {
LABEL_17:
    v15 = *((_QWORD *)v4 + 3);
    v14 = (char *)*((_QWORD *)v4 + 4);
    if ((v13 & 0x40000000) == 0)
    {
      if ((unint64_t)v14 < v15)
      {
        *((_QWORD *)v4 + 4) = v14 + 1;
        v16 = 121;
        goto LABEL_45;
      }
      result = llvm::raw_ostream::write(v4, 121);
      if ((*(_BYTE *)(a1 + 225) & 8) != 0)
        goto LABEL_52;
LABEL_54:
      if ((*(_BYTE *)(a1 + 227) & 0x10) == 0)
        goto LABEL_55;
      goto LABEL_58;
    }
    if ((unint64_t)v14 >= v15)
    {
      result = llvm::raw_ostream::write(v4, 114);
      if ((*(_BYTE *)(a1 + 225) & 8) == 0)
        goto LABEL_54;
      goto LABEL_52;
    }
    *((_QWORD *)v4 + 4) = v14 + 1;
    v16 = 114;
    goto LABEL_45;
  }
LABEL_43:
  v14 = (char *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v4 + 3))
  {
    result = llvm::raw_ostream::write(v4, 119);
    if ((*(_BYTE *)(a1 + 225) & 8) != 0)
      goto LABEL_52;
    goto LABEL_54;
  }
  *((_QWORD *)v4 + 4) = v14 + 1;
  v16 = 119;
LABEL_45:
  *v14 = v16;
  if ((*(_BYTE *)(a1 + 225) & 8) == 0)
    goto LABEL_54;
LABEL_52:
  v25 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v25 < *((_QWORD *)v4 + 3))
  {
    *((_QWORD *)v4 + 4) = v25 + 1;
    *v25 = 110;
    goto LABEL_54;
  }
  result = llvm::raw_ostream::write(v4, 110);
  if ((*(_BYTE *)(a1 + 227) & 0x10) == 0)
  {
LABEL_55:
    if ((*(_BYTE *)(a1 + 227) & 2) == 0)
      goto LABEL_69;
    goto LABEL_62;
  }
LABEL_58:
  v26 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v26 >= *((_QWORD *)v4 + 3))
  {
    result = llvm::raw_ostream::write(v4, 115);
    if ((*(_BYTE *)(a1 + 227) & 2) == 0)
      goto LABEL_69;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v26 + 1;
    *v26 = 115;
    if ((*(_BYTE *)(a1 + 227) & 2) == 0)
      goto LABEL_69;
  }
LABEL_62:
  if (*(_QWORD *)(a1 + 208) < 6uLL
    || ((v27 = *(int **)(a1 + 200), v28 = *v27, v29 = *((unsigned __int16 *)v27 + 2), v28 == 1650811950)
      ? (v30 = v29 == 26485)
      : (v30 = 0),
        !v30))
  {
    v31 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v31 >= *((_QWORD *)v4 + 3))
    {
      result = llvm::raw_ostream::write(v4, 68);
      if ((*(_BYTE *)(a1 + 225) & 2) == 0)
        goto LABEL_74;
      goto LABEL_70;
    }
    *((_QWORD *)v4 + 4) = v31 + 1;
    *v31 = 68;
  }
LABEL_69:
  if ((*(_BYTE *)(a1 + 225) & 2) == 0)
    goto LABEL_74;
LABEL_70:
  v32 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v32 >= *((_QWORD *)v4 + 3))
  {
    result = llvm::raw_ostream::write(v4, 105);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v32 + 1;
    *v32 = 105;
  }
LABEL_74:
  v33 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v33 >= *((_QWORD *)v4 + 3))
  {
    result = llvm::raw_ostream::write(v4, 34);
    if ((*(_BYTE *)(a1 + 225) & 0x10) == 0)
      goto LABEL_126;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v33 + 1;
    *v33 = 34;
    if ((*(_BYTE *)(a1 + 225) & 0x10) == 0)
      goto LABEL_126;
  }
  v35 = *((_QWORD *)v4 + 3);
  v34 = *((_QWORD *)v4 + 4);
  if (*(_QWORD *)(a1 + 232))
  {
    if (v35 == v34)
    {
      result = llvm::raw_ostream::write(v4, ",", 1uLL);
      goto LABEL_93;
    }
    *(_BYTE *)v34 = 44;
    v36 = *((_QWORD *)v4 + 4) + 1;
  }
  else
  {
    if ((unint64_t)(v35 - v34) <= 0xB)
    {
      result = llvm::raw_ostream::write(v4, "\n\t.linkonce\t", 0xCuLL);
      goto LABEL_93;
    }
    *(_DWORD *)(v34 + 8) = 157639534;
    *(_QWORD *)v34 = *(_QWORD *)"\n\t.linkonce\t";
    v36 = *((_QWORD *)v4 + 4) + 12;
  }
  *((_QWORD *)v4 + 4) = v36;
LABEL_93:
  switch(*(_DWORD *)(a1 + 240))
  {
    case 1:
      v40 = (_QWORD *)*((_QWORD *)v4 + 4);
      if (*((_QWORD *)v4 + 3) - (_QWORD)v40 > 7uLL)
      {
        *v40 = 0x796C6E6F5F656E6FLL;
        v47 = *((_QWORD *)v4 + 4) + 8;
        goto LABEL_120;
      }
      result = llvm::raw_ostream::write(v4, "one_only", 8uLL);
      goto LABEL_121;
    case 2:
      v41 = (int *)*((_QWORD *)v4 + 4);
      if (*((_QWORD *)v4 + 3) - (_QWORD)v41 <= 6uLL)
      {
        v42 = "discard";
        goto LABEL_109;
      }
      *(int *)((char *)v41 + 3) = 1685217635;
      v48 = 1668508004;
      goto LABEL_118;
    case 3:
      v43 = *((_QWORD *)v4 + 4);
      if ((unint64_t)(*((_QWORD *)v4 + 3) - v43) <= 8)
      {
        result = llvm::raw_ostream::write(v4, "same_size", 9uLL);
        goto LABEL_121;
      }
      *(_BYTE *)(v43 + 8) = 101;
      *(_QWORD *)v43 = *(_QWORD *)"same_size";
      v47 = *((_QWORD *)v4 + 4) + 9;
      goto LABEL_120;
    case 4:
      v44 = (void *)*((_QWORD *)v4 + 4);
      if (*((_QWORD *)v4 + 3) - (_QWORD)v44 <= 0xCuLL)
      {
        result = llvm::raw_ostream::write(v4, "same_contents", 0xDuLL);
        goto LABEL_121;
      }
      qmemcpy(v44, "same_contents", 13);
      v47 = *((_QWORD *)v4 + 4) + 13;
      goto LABEL_120;
    case 5:
      v45 = *((_QWORD *)v4 + 4);
      if ((unint64_t)(*((_QWORD *)v4 + 3) - v45) <= 0xA)
      {
        result = llvm::raw_ostream::write(v4, "associative", 0xBuLL);
        goto LABEL_121;
      }
      *(_DWORD *)(v45 + 7) = 1702259060;
      *(_QWORD *)v45 = *(_QWORD *)"associative";
      v47 = *((_QWORD *)v4 + 4) + 11;
      goto LABEL_120;
    case 6:
      v41 = (int *)*((_QWORD *)v4 + 4);
      if (*((_QWORD *)v4 + 3) - (_QWORD)v41 <= 6uLL)
      {
        v42 = "largest";
LABEL_109:
        result = llvm::raw_ostream::write(v4, v42, 7uLL);
        goto LABEL_121;
      }
      *(int *)((char *)v41 + 3) = 1953719655;
      v48 = 1735549292;
LABEL_118:
      *v41 = v48;
      v47 = *((_QWORD *)v4 + 4) + 7;
      goto LABEL_120;
    case 7:
      v46 = *((_QWORD *)v4 + 4);
      if ((unint64_t)(*((_QWORD *)v4 + 3) - v46) > 5)
      {
        *(_WORD *)(v46 + 4) = 29811;
        *(_DWORD *)v46 = 1702323566;
        v47 = *((_QWORD *)v4 + 4) + 6;
LABEL_120:
        *((_QWORD *)v4 + 4) = v47;
      }
      else
      {
        result = llvm::raw_ostream::write(v4, "newest", 6uLL);
      }
LABEL_121:
      if (*(_QWORD *)(a1 + 232))
      {
        v49 = (_BYTE *)*((_QWORD *)v4 + 4);
        if (*((_BYTE **)v4 + 3) == v49)
        {
          llvm::raw_ostream::write(v4, ",", 1uLL);
        }
        else
        {
          *v49 = 44;
          ++*((_QWORD *)v4 + 4);
        }
        result = llvm::MCSymbol::print(*(_QWORD *)(a1 + 232), v4, a2);
      }
      break;
    default:
      goto LABEL_121;
  }
LABEL_126:
  v50 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v50 < *((_QWORD *)v4 + 3))
  {
    *((_QWORD *)v4 + 4) = v50 + 1;
    *v50 = 10;
    return result;
  }
  return llvm::raw_ostream::write(v4, 10);
}

BOOL llvm::MCSectionCOFF::useCodeAlign(llvm::MCSectionCOFF *this)
{
  return (*((_DWORD *)this + 55) & 0xFE) == 2;
}

uint64_t llvm::MCSectionCOFF::isVirtualSection(llvm::MCSectionCOFF *this)
{
  return *((unsigned __int8 *)this + 224) >> 7;
}

const char *llvm::MCSectionCOFF::getVirtualSectionKind(llvm::MCSectionCOFF *this)
{
  return "IMAGE_SCN_CNT_UNINITIALIZED_DATA";
}

uint64_t llvm::MCSectionDXContainer::useCodeAlign(llvm::MCSectionDXContainer *this)
{
  return 0;
}

uint64_t llvm::MCSectionDXContainer::isVirtualSection(llvm::MCSectionDXContainer *this)
{
  return 0;
}

void llvm::MCSectionELF::printSwitchToSection(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *this, uint64_t a5)
{
  _BYTE *v10;
  llvm::raw_ostream *v11;
  const void *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  _WORD *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  char v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  _OWORD *v55;
  void *v56;
  _DWORD *v57;
  uint64_t v58;
  const char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  const char *v64;
  int v65;
  const char *v66;
  int v67;
  _BYTE *v68;
  llvm::raw_ostream *v69;
  _BYTE *v70;
  uint64_t v71;
  const char *v72;
  int64_t v73;
  _BYTE *v74;
  unint64_t v75;
  _BYTE *v76;
  _DWORD *v77;
  _QWORD *v78;
  int64_t v79;
  _QWORD *v80;
  llvm::raw_ostream *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[4];
  __int16 v86;
  const char *v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90[4];
  __int16 v91;
  const char *v92;
  __int16 v93;
  uint64_t v94[5];
  uint64_t v95[5];
  _BYTE v96[40];

  if (*(_DWORD *)(a1 + 232) == -1
    && (*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208)))
  {
    v10 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v10 >= *((_QWORD *)this + 3))
    {
      v11 = llvm::raw_ostream::write(this, 9);
      v12 = *(const void **)(a1 + 200);
      v13 = *(_QWORD *)(a1 + 208);
      v14 = (void *)*((_QWORD *)v11 + 4);
      if (v13 <= *((_QWORD *)v11 + 3) - (_QWORD)v14)
      {
LABEL_5:
        if (v13)
        {
          memcpy(v14, v12, v13);
          *((_QWORD *)v11 + 4) += v13;
        }
        goto LABEL_81;
      }
    }
    else
    {
      *((_QWORD *)this + 4) = v10 + 1;
      *v10 = 9;
      v11 = this;
      v12 = *(const void **)(a1 + 200);
      v13 = *(_QWORD *)(a1 + 208);
      v14 = (void *)*((_QWORD *)this + 4);
      if (v13 <= *((_QWORD *)this + 3) - (_QWORD)v14)
        goto LABEL_5;
    }
    llvm::raw_ostream::write(v11, (const char *)v12, v13);
LABEL_81:
    if (!a5)
      goto LABEL_243;
    v32 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v32 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 9);
    }
    else
    {
      *((_QWORD *)this + 4) = v32 + 1;
      *v32 = 9;
    }
LABEL_242:
    llvm::MCExpr::print(a5);
LABEL_243:
    v17 = *((_QWORD *)this + 4);
    if (v17 >= *((_QWORD *)this + 3))
      goto LABEL_244;
    goto LABEL_18;
  }
  v15 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 9)
  {
    *(_WORD *)(v15 + 8) = 2414;
    *(_QWORD *)v15 = *(_QWORD *)"\t.section\t";
    *((_QWORD *)this + 4) += 10;
    printName(this, *(const char **)(a1 + 200), *(_QWORD *)(a1 + 208));
    if (!*(_BYTE *)(a2 + 336))
      goto LABEL_19;
LABEL_11:
    v16 = *(_DWORD *)(a1 + 228);
    if ((v16 & 0x10) != 0)
      goto LABEL_19;
    v17 = *((_QWORD *)this + 4);
    if ((v16 & 2) == 0)
    {
      if ((*(_BYTE *)(a1 + 228) & 4) == 0)
        goto LABEL_14;
LABEL_102:
      if (*((_QWORD *)this + 3) - v17 > 0xA)
      {
        *(_DWORD *)(v17 + 7) = 1920234350;
        *(_QWORD *)v17 = *(_QWORD *)",#execinstr";
        v17 = *((_QWORD *)this + 4) + 11;
        *((_QWORD *)this + 4) = v17;
        v18 = *(_DWORD *)(a1 + 228);
        if ((v18 & 1) != 0)
          goto LABEL_106;
      }
      else
      {
        llvm::raw_ostream::write(this, ",#execinstr", 0xBuLL);
        v17 = *((_QWORD *)this + 4);
        v18 = *(_DWORD *)(a1 + 228);
        if ((v18 & 1) != 0)
          goto LABEL_106;
      }
LABEL_15:
      if ((v18 & 0x80000000) == 0)
        goto LABEL_16;
LABEL_110:
      if (*((_QWORD *)this + 3) - v17 > 8)
      {
        *(_BYTE *)(v17 + 8) = 101;
        *(_QWORD *)v17 = *(_QWORD *)",#exclude";
        v17 = *((_QWORD *)this + 4) + 9;
        *((_QWORD *)this + 4) = v17;
        if ((*(_BYTE *)(a1 + 229) & 4) != 0)
          goto LABEL_115;
      }
      else
      {
        llvm::raw_ostream::write(this, ",#exclude", 9uLL);
        v17 = *((_QWORD *)this + 4);
        if ((*(_BYTE *)(a1 + 229) & 4) != 0)
          goto LABEL_115;
      }
LABEL_17:
      if (v17 >= *((_QWORD *)this + 3))
      {
LABEL_244:
        llvm::raw_ostream::write(this, 10);
        return;
      }
LABEL_18:
      *((_QWORD *)this + 4) = v17 + 1;
      *(_BYTE *)v17 = 10;
      return;
    }
    if (*((_QWORD *)this + 3) - v17 > 6)
    {
      *(_DWORD *)(v17 + 3) = 1668246636;
      *(_DWORD *)v17 = 1818305324;
      v17 = *((_QWORD *)this + 4) + 7;
      *((_QWORD *)this + 4) = v17;
      if ((*(_BYTE *)(a1 + 228) & 4) != 0)
        goto LABEL_102;
    }
    else
    {
      llvm::raw_ostream::write(this, ",#alloc", 7uLL);
      v17 = *((_QWORD *)this + 4);
      if ((*(_BYTE *)(a1 + 228) & 4) != 0)
        goto LABEL_102;
    }
LABEL_14:
    v18 = *(_DWORD *)(a1 + 228);
    if ((v18 & 1) == 0)
      goto LABEL_15;
LABEL_106:
    if (*((_QWORD *)this + 3) - v17 > 6)
    {
      *(_DWORD *)(v17 + 3) = 1702127986;
      *(_DWORD *)v17 = 1920410412;
      v17 = *((_QWORD *)this + 4) + 7;
      *((_QWORD *)this + 4) = v17;
      if ((*(_DWORD *)(a1 + 228) & 0x80000000) != 0)
        goto LABEL_110;
    }
    else
    {
      llvm::raw_ostream::write(this, ",#write", 7uLL);
      v17 = *((_QWORD *)this + 4);
      if ((*(_DWORD *)(a1 + 228) & 0x80000000) != 0)
        goto LABEL_110;
    }
LABEL_16:
    if ((*(_BYTE *)(a1 + 229) & 4) == 0)
      goto LABEL_17;
LABEL_115:
    if (*((_QWORD *)this + 3) - v17 > 4)
    {
      *(_BYTE *)(v17 + 4) = 115;
      *(_DWORD *)v17 = 1819550508;
      v38 = *((_QWORD *)this + 3);
      v17 = *((_QWORD *)this + 4) + 5;
      *((_QWORD *)this + 4) = v17;
      if (v17 >= v38)
        goto LABEL_244;
      goto LABEL_18;
    }
    llvm::raw_ostream::write(this, ",#tls", 5uLL);
    goto LABEL_243;
  }
  llvm::raw_ostream::write(this, "\t.section\t", 0xAuLL);
  printName(this, *(const char **)(a1 + 200), *(_QWORD *)(a1 + 208));
  if (*(_BYTE *)(a2 + 336))
    goto LABEL_11;
LABEL_19:
  v19 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v19 <= 1uLL)
  {
    llvm::raw_ostream::write(this, ",\"", 2uLL);
    v20 = *(_DWORD *)(a1 + 228);
    if ((v20 & 2) != 0)
      goto LABEL_21;
LABEL_25:
    if (v20 < 0)
      goto LABEL_39;
    goto LABEL_26;
  }
  *v19 = 8748;
  *((_QWORD *)this + 4) += 2;
  v20 = *(_DWORD *)(a1 + 228);
  if ((v20 & 2) == 0)
    goto LABEL_25;
LABEL_21:
  v21 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v21 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 97);
    if ((*(_DWORD *)(a1 + 228) & 0x80000000) != 0)
      goto LABEL_39;
LABEL_26:
    if ((*(_BYTE *)(a1 + 228) & 4) != 0)
      goto LABEL_46;
    goto LABEL_27;
  }
  *((_QWORD *)this + 4) = v21 + 1;
  *v21 = 97;
  if ((*(_DWORD *)(a1 + 228) & 0x80000000) == 0)
    goto LABEL_26;
LABEL_39:
  v23 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v23 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 101);
    if ((*(_BYTE *)(a1 + 228) & 4) != 0)
      goto LABEL_46;
LABEL_27:
    if ((*(_BYTE *)(a1 + 229) & 2) != 0)
      goto LABEL_50;
    goto LABEL_28;
  }
  *((_QWORD *)this + 4) = v23 + 1;
  *v23 = 101;
  if ((*(_BYTE *)(a1 + 228) & 4) == 0)
    goto LABEL_27;
LABEL_46:
  v24 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v24 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 120);
    if ((*(_BYTE *)(a1 + 229) & 2) != 0)
      goto LABEL_50;
LABEL_28:
    if ((*(_BYTE *)(a1 + 228) & 1) != 0)
      goto LABEL_54;
    goto LABEL_29;
  }
  *((_QWORD *)this + 4) = v24 + 1;
  *v24 = 120;
  if ((*(_BYTE *)(a1 + 229) & 2) == 0)
    goto LABEL_28;
LABEL_50:
  v25 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v25 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 71);
    if ((*(_BYTE *)(a1 + 228) & 1) != 0)
      goto LABEL_54;
LABEL_29:
    if ((*(_BYTE *)(a1 + 228) & 0x10) != 0)
      goto LABEL_58;
    goto LABEL_30;
  }
  *((_QWORD *)this + 4) = v25 + 1;
  *v25 = 71;
  if ((*(_BYTE *)(a1 + 228) & 1) == 0)
    goto LABEL_29;
LABEL_54:
  v26 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v26 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 119);
    if ((*(_BYTE *)(a1 + 228) & 0x10) != 0)
      goto LABEL_58;
LABEL_30:
    if ((*(_BYTE *)(a1 + 228) & 0x20) != 0)
      goto LABEL_62;
    goto LABEL_31;
  }
  *((_QWORD *)this + 4) = v26 + 1;
  *v26 = 119;
  if ((*(_BYTE *)(a1 + 228) & 0x10) == 0)
    goto LABEL_30;
LABEL_58:
  v27 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v27 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 77);
    if ((*(_BYTE *)(a1 + 228) & 0x20) != 0)
      goto LABEL_62;
LABEL_31:
    if ((*(_BYTE *)(a1 + 229) & 4) != 0)
      goto LABEL_66;
    goto LABEL_32;
  }
  *((_QWORD *)this + 4) = v27 + 1;
  *v27 = 77;
  if ((*(_BYTE *)(a1 + 228) & 0x20) == 0)
    goto LABEL_31;
LABEL_62:
  v28 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v28 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 83);
    if ((*(_BYTE *)(a1 + 229) & 4) != 0)
      goto LABEL_66;
LABEL_32:
    if ((*(_BYTE *)(a1 + 228) & 0x80) != 0)
      goto LABEL_70;
    goto LABEL_33;
  }
  *((_QWORD *)this + 4) = v28 + 1;
  *v28 = 83;
  if ((*(_BYTE *)(a1 + 229) & 4) == 0)
    goto LABEL_32;
LABEL_66:
  v29 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v29 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 84);
    if ((*(_BYTE *)(a1 + 228) & 0x80) != 0)
      goto LABEL_70;
LABEL_33:
    if ((*(_BYTE *)(a1 + 230) & 0x20) != 0)
      goto LABEL_74;
    goto LABEL_34;
  }
  *((_QWORD *)this + 4) = v29 + 1;
  *v29 = 84;
  if ((*(_BYTE *)(a1 + 228) & 0x80) == 0)
    goto LABEL_33;
LABEL_70:
  v30 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v30 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 111);
    if ((*(_BYTE *)(a1 + 230) & 0x20) != 0)
      goto LABEL_74;
LABEL_34:
    if (*(_DWORD *)(a3 + 36) != 12)
      goto LABEL_85;
    goto LABEL_35;
  }
  *((_QWORD *)this + 4) = v30 + 1;
  *v30 = 111;
  if ((*(_BYTE *)(a1 + 230) & 0x20) == 0)
    goto LABEL_34;
LABEL_74:
  v31 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v31 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 82);
    if (*(_DWORD *)(a3 + 36) != 12)
      goto LABEL_85;
  }
  else
  {
    *((_QWORD *)this + 4) = v31 + 1;
    *v31 = 82;
    if (*(_DWORD *)(a3 + 36) != 12)
      goto LABEL_85;
  }
LABEL_35:
  if ((*(_BYTE *)(a1 + 230) & 0x10) != 0)
  {
    v22 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v22 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 82);
    }
    else
    {
      *((_QWORD *)this + 4) = v22 + 1;
      *v22 = 82;
    }
  }
LABEL_85:
  switch(*(_DWORD *)(a3 + 24))
  {
    case 1:
    case 2:
    case 0x23:
    case 0x24:
      if ((*(_BYTE *)(a1 + 231) & 0x20) != 0)
      {
        v33 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v33 < *((_QWORD *)this + 3))
        {
          *((_QWORD *)this + 4) = v33 + 1;
          v34 = 121;
          goto LABEL_89;
        }
        v36 = this;
        v37 = 121;
        goto LABEL_100;
      }
      break;
    case 0xC:
      if ((*(_BYTE *)(a1 + 231) & 0x10) != 0)
      {
        v33 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v33 < *((_QWORD *)this + 3))
        {
          *((_QWORD *)this + 4) = v33 + 1;
          v34 = 115;
          goto LABEL_89;
        }
        v36 = this;
        v37 = 115;
        goto LABEL_100;
      }
      break;
    case 0x26:
      if ((*(_BYTE *)(a1 + 231) & 0x10) != 0)
      {
        v33 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v33 < *((_QWORD *)this + 3))
        {
          *((_QWORD *)this + 4) = v33 + 1;
          v34 = 108;
          goto LABEL_89;
        }
        v36 = this;
        v37 = 108;
        goto LABEL_100;
      }
      break;
    case 0x27:
      if ((*(_BYTE *)(a1 + 231) & 0x20) != 0)
      {
        v35 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v35 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 99);
        }
        else
        {
          *((_QWORD *)this + 4) = v35 + 1;
          *v35 = 99;
        }
      }
      if ((*(_BYTE *)(a1 + 231) & 0x10) != 0)
      {
        v33 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v33 >= *((_QWORD *)this + 3))
        {
          v36 = this;
          v37 = 100;
LABEL_100:
          llvm::raw_ostream::write(v36, v37);
        }
        else
        {
          *((_QWORD *)this + 4) = v33 + 1;
          v34 = 100;
LABEL_89:
          *v33 = v34;
        }
      }
      break;
    default:
      break;
  }
  v39 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v39 < *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 4) = v39 + 1;
    *v39 = 34;
    v40 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v40 >= *((_QWORD *)this + 3))
      goto LABEL_125;
LABEL_129:
    *((_QWORD *)this + 4) = v40 + 1;
    *v40 = 44;
    v42 = *((_QWORD *)this + 3);
    v41 = (char *)*((_QWORD *)this + 4);
    if (**(_BYTE **)(a2 + 48) != 64)
      goto LABEL_126;
LABEL_130:
    if ((unint64_t)v41 >= v42)
    {
      llvm::raw_ostream::write(this, 37);
      v44 = *(unsigned int *)(a1 + 224);
      if ((int)v44 > 1879002111)
        goto LABEL_133;
      goto LABEL_139;
    }
    *((_QWORD *)this + 4) = v41 + 1;
    v43 = 37;
    goto LABEL_132;
  }
  llvm::raw_ostream::write(this, 34);
  v40 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v40 < *((_QWORD *)this + 3))
    goto LABEL_129;
LABEL_125:
  llvm::raw_ostream::write(this, 44);
  v42 = *((_QWORD *)this + 3);
  v41 = (char *)*((_QWORD *)this + 4);
  if (**(_BYTE **)(a2 + 48) == 64)
    goto LABEL_130;
LABEL_126:
  if ((unint64_t)v41 >= v42)
  {
    llvm::raw_ostream::write(this, 64);
    v44 = *(unsigned int *)(a1 + 224);
    if ((int)v44 > 1879002111)
      goto LABEL_133;
    goto LABEL_139;
  }
  *((_QWORD *)this + 4) = v41 + 1;
  v43 = 64;
LABEL_132:
  *v41 = v43;
  v44 = *(unsigned int *)(a1 + 224);
  if ((int)v44 > 1879002111)
  {
LABEL_133:
    switch((int)v44)
    {
      case 1879002112:
        v45 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v45) <= 0xA)
        {
          llvm::raw_ostream::write(this, "llvm_odrtab", 0xBuLL);
          goto LABEL_203;
        }
        *(_DWORD *)(v45 + 7) = 1650553970;
        *(_QWORD *)v45 = *(_QWORD *)"llvm_odrtab";
        v61 = *((_QWORD *)this + 4) + 11;
        goto LABEL_202;
      case 1879002113:
        v50 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v50) <= 0x12)
        {
          v51 = "llvm_linker_options";
          goto LABEL_156;
        }
        v65 = 1936617321;
        v66 = "llvm_linker_options";
        goto LABEL_188;
      case 1879002114:
      case 1879002115:
      case 1879002118:
      case 1879002119:
        goto LABEL_245;
      case 1879002116:
        v52 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v52 <= 0x17uLL)
        {
          llvm::raw_ostream::write(this, "llvm_dependent_libraries", 0x18uLL);
          goto LABEL_203;
        }
        qmemcpy(v52, "llvm_dependent_libraries", 24);
        v61 = *((_QWORD *)this + 4) + 24;
        goto LABEL_202;
      case 1879002117:
        v53 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v53) <= 0xB)
        {
          llvm::raw_ostream::write(this, "llvm_sympart", 0xCuLL);
          goto LABEL_203;
        }
        *(_DWORD *)(v53 + 8) = 1953653104;
        *(_QWORD *)v53 = *(_QWORD *)"llvm_sympart";
        v61 = *((_QWORD *)this + 4) + 12;
        goto LABEL_202;
      case 1879002120:
        v50 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v50) <= 0x12)
        {
          v51 = "llvm_bb_addr_map_v0";
LABEL_156:
          llvm::raw_ostream::write(this, v51, 0x13uLL);
          goto LABEL_203;
        }
        v65 = 813064048;
        v66 = "llvm_bb_addr_map_v0";
LABEL_188:
        *(_DWORD *)(v50 + 15) = v65;
        *(_OWORD *)v50 = *(_OWORD *)v66;
        v61 = *((_QWORD *)this + 4) + 19;
        goto LABEL_202;
      case 1879002121:
        v54 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v54 <= 0x16uLL)
        {
          llvm::raw_ostream::write(this, "llvm_call_graph_profile", 0x17uLL);
          goto LABEL_203;
        }
        qmemcpy(v54, "llvm_call_graph_profile", 23);
        v61 = *((_QWORD *)this + 4) + 23;
        goto LABEL_202;
      case 1879002122:
        v55 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v55 <= 0xFuLL)
        {
          llvm::raw_ostream::write(this, "llvm_bb_addr_map", 0x10uLL);
          goto LABEL_203;
        }
        *v55 = *(_OWORD *)"llvm_bb_addr_map";
        v61 = *((_QWORD *)this + 4) + 16;
        goto LABEL_202;
      case 1879002123:
        v56 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v56 <= 0xEuLL)
        {
          llvm::raw_ostream::write(this, "llvm_offloading", 0xFuLL);
          goto LABEL_203;
        }
        qmemcpy(v56, "llvm_offloading", 15);
        v61 = *((_QWORD *)this + 4) + 15;
        goto LABEL_202;
      case 1879002124:
        v46 = (uint64_t *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v46 <= 7uLL)
        {
          v47 = "llvm_lto";
          goto LABEL_165;
        }
        v62 = 0x6F746C5F6D766C6CLL;
        goto LABEL_193;
      default:
        if ((_DWORD)v44 != 1879048193)
        {
          if ((_DWORD)v44 != 1879048222)
          {
LABEL_245:
            v92 = "unsupported type 0x";
            v93 = 259;
            v89 = v44;
            v90[0] = (uint64_t)&v89;
            v90[2] = 0;
            v91 = 271;
            llvm::operator+((uint64_t *)&v92, v90, (uint64_t)v94);
            v87 = " for section ";
            v88 = 259;
            llvm::operator+(v94, (uint64_t *)&v87, (uint64_t)v95);
            v83 = *(_QWORD *)(a1 + 200);
            v84 = *(_QWORD *)(a1 + 208);
            v86 = 261;
            v85[0] = v83;
            v85[1] = v84;
            llvm::operator+(v95, v85, (uint64_t)v96);
            llvm::report_fatal_error((llvm::Twine *)v96, 1);
          }
          v48 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v48) <= 9)
          {
            v49 = "0x7000001e";
            goto LABEL_174;
          }
          v63 = 25905;
          v64 = "0x7000001e";
          goto LABEL_198;
        }
        v58 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v58) <= 5)
        {
          v59 = "unwind";
          goto LABEL_179;
        }
        *(_WORD *)(v58 + 4) = 25710;
        v67 = 1769434741;
        break;
    }
LABEL_201:
    *(_DWORD *)v58 = v67;
    v61 = *((_QWORD *)this + 4) + 6;
    goto LABEL_202;
  }
LABEL_139:
  switch((int)v44)
  {
    case 1:
      v46 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v46 <= 7uLL)
      {
        v47 = "progbits";
LABEL_165:
        llvm::raw_ostream::write(this, v47, 8uLL);
        goto LABEL_203;
      }
      v62 = 0x73746962676F7270;
LABEL_193:
      *v46 = v62;
      v61 = *((_QWORD *)this + 4) + 8;
      break;
    case 7:
      v57 = (_DWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v57 <= 3uLL)
      {
        llvm::raw_ostream::write(this, "note", 4uLL);
        goto LABEL_203;
      }
      *v57 = 1702129518;
      v61 = *((_QWORD *)this + 4) + 4;
      break;
    case 8:
      v58 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v58) > 5)
      {
        *(_WORD *)(v58 + 4) = 29556;
        v67 = 1768058734;
        goto LABEL_201;
      }
      v59 = "nobits";
LABEL_179:
      llvm::raw_ostream::write(this, v59, 6uLL);
      goto LABEL_203;
    case 14:
      v48 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v48) <= 9)
      {
        v49 = "init_array";
        goto LABEL_174;
      }
      v63 = 31073;
      v64 = "init_array";
      goto LABEL_198;
    case 15:
      v48 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v48) <= 9)
      {
        v49 = "fini_array";
LABEL_174:
        llvm::raw_ostream::write(this, v49, 0xAuLL);
        goto LABEL_203;
      }
      v63 = 31073;
      v64 = "fini_array";
LABEL_198:
      *(_WORD *)(v48 + 8) = v63;
      *(_QWORD *)v48 = *(_QWORD *)v64;
      v61 = *((_QWORD *)this + 4) + 10;
      break;
    case 16:
      v60 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v60 <= 0xCuLL)
      {
        llvm::raw_ostream::write(this, "preinit_array", 0xDuLL);
        goto LABEL_203;
      }
      qmemcpy(v60, "preinit_array", 13);
      v61 = *((_QWORD *)this + 4) + 13;
      break;
    default:
      goto LABEL_245;
  }
LABEL_202:
  *((_QWORD *)this + 4) = v61;
LABEL_203:
  if (*(_DWORD *)(a1 + 236))
  {
    v68 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v68)
    {
      v69 = llvm::raw_ostream::write(this, ",", 1uLL);
    }
    else
    {
      *v68 = 44;
      ++*((_QWORD *)this + 4);
      v69 = this;
    }
    llvm::raw_ostream::operator<<(v69, *(unsigned int *)(a1 + 236));
  }
  if ((*(_BYTE *)(a1 + 229) & 2) == 0)
  {
LABEL_209:
    if ((*(_BYTE *)(a1 + 228) & 0x80) == 0)
      goto LABEL_230;
    goto LABEL_210;
  }
  v74 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) != v74)
  {
    *v74 = 44;
    ++*((_QWORD *)this + 4);
    v75 = *(_QWORD *)(a1 + 240) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)(v75 + 8) & 1) == 0)
      goto LABEL_216;
LABEL_222:
    printName(this, (const char *)(*(_QWORD *)(v75 - 8) + 16), **(_QWORD **)(v75 - 8));
    if ((*(_BYTE *)(a1 + 240) & 4) == 0)
      goto LABEL_209;
    goto LABEL_223;
  }
  llvm::raw_ostream::write(this, ",", 1uLL);
  v75 = *(_QWORD *)(a1 + 240) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v75 + 8) & 1) != 0)
    goto LABEL_222;
LABEL_216:
  printName(this, 0, 0);
  if ((*(_BYTE *)(a1 + 240) & 4) == 0)
    goto LABEL_209;
LABEL_223:
  v77 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v77 <= 6uLL)
  {
    llvm::raw_ostream::write(this, ",comdat", 7uLL);
    goto LABEL_209;
  }
  *(_DWORD *)((char *)v77 + 3) = 1952539757;
  *v77 = 1836016428;
  *((_QWORD *)this + 4) += 7;
  if ((*(_BYTE *)(a1 + 228) & 0x80) == 0)
    goto LABEL_230;
LABEL_210:
  v70 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v70)
  {
    llvm::raw_ostream::write(this, ",", 1uLL);
    v71 = *(_QWORD *)(a1 + 248);
    if (v71)
      goto LABEL_212;
LABEL_219:
    v76 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v76 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 48);
    }
    else
    {
      *((_QWORD *)this + 4) = v76 + 1;
      *v76 = 48;
    }
    goto LABEL_230;
  }
  *v70 = 44;
  ++*((_QWORD *)this + 4);
  v71 = *(_QWORD *)(a1 + 248);
  if (!v71)
    goto LABEL_219;
LABEL_212:
  if ((*(_BYTE *)(v71 + 8) & 1) != 0)
  {
    v78 = *(_QWORD **)(v71 - 8);
    v79 = *v78;
    v72 = (const char *)(v78 + 2);
    v73 = v79;
  }
  else
  {
    v72 = 0;
    v73 = 0;
  }
  printName(this, v72, v73);
LABEL_230:
  v80 = (_QWORD *)*((_QWORD *)this + 4);
  if (*(_DWORD *)(a1 + 232) != -1)
  {
    if (*((_QWORD *)this + 3) - (_QWORD)v80 > 7uLL)
    {
      *v80 = 0x2C657571696E752CLL;
      *((_QWORD *)this + 4) += 8;
      v81 = this;
    }
    else
    {
      v81 = llvm::raw_ostream::write(this, ",unique,", 8uLL);
    }
    llvm::raw_ostream::operator<<(v81, *(unsigned int *)(a1 + 232));
    v80 = (_QWORD *)*((_QWORD *)this + 4);
  }
  if ((unint64_t)v80 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 10);
    if (a5)
    {
LABEL_237:
      v82 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v82 > 0xCuLL)
      {
        qmemcpy(v82, "\t.subsection\t", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "\t.subsection\t", 0xDuLL);
      }
      goto LABEL_242;
    }
  }
  else
  {
    *((_QWORD *)this + 4) = (char *)v80 + 1;
    *(_BYTE *)v80 = 10;
    if (a5)
      goto LABEL_237;
  }
}

llvm::raw_ostream *printName(llvm::raw_ostream *a1, const char *a2, int64_t a3)
{
  llvm::raw_ostream *result;
  _BYTE *v5;
  int64_t v6;
  int64_t v7;
  const char *v8;
  const char *v9;
  int v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  const char *v13;
  char *v14;
  _BYTE *v15;
  char v16;
  char *v17;
  _BYTE *v18;
  _WORD *v19;
  _BYTE *v20;
  const char *v21;
  int64_t v22;

  v21 = a2;
  v22 = a3;
  result = (llvm::raw_ostream *)llvm::StringRef::find_first_not_of(&v21, "0123456789_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 64, 0);
  if (result != (llvm::raw_ostream *)-1)
  {
    v5 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)a1 + 3))
    {
      result = llvm::raw_ostream::write(a1, 34);
      v6 = v22;
      if (v22 < 1)
        goto LABEL_30;
    }
    else
    {
      *((_QWORD *)a1 + 4) = v5 + 1;
      *v5 = 34;
      v6 = v22;
      if (v22 < 1)
      {
LABEL_30:
        v20 = (_BYTE *)*((_QWORD *)a1 + 4);
        if ((unint64_t)v20 >= *((_QWORD *)a1 + 3))
          return llvm::raw_ostream::write(a1, 34);
        *((_QWORD *)a1 + 4) = v20 + 1;
        *v20 = 34;
        return result;
      }
    }
    v8 = v21;
    v9 = &v21[v6];
    while (1)
    {
      v10 = *(unsigned __int8 *)v8;
      if (v10 == 92)
      {
        v14 = (char *)(v8 + 1);
        if (v8 + 1 != v9)
        {
          v15 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v15 >= *((_QWORD *)a1 + 3))
          {
            result = llvm::raw_ostream::write(a1, 92);
            v16 = *v14;
            v17 = (char *)*((_QWORD *)result + 4);
            if ((unint64_t)v17 < *((_QWORD *)result + 3))
              goto LABEL_26;
LABEL_18:
            result = llvm::raw_ostream::write(result, v16);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v15 + 1;
            *v15 = 92;
            result = a1;
            v16 = *v14;
            v17 = (char *)*((_QWORD *)a1 + 4);
            if ((unint64_t)v17 >= *((_QWORD *)a1 + 3))
              goto LABEL_18;
LABEL_26:
            *((_QWORD *)result + 4) = v17 + 1;
            *v17 = v16;
          }
          ++v8;
          goto LABEL_10;
        }
        v19 = (_WORD *)*((_QWORD *)a1 + 4);
        if (*((_QWORD *)a1 + 3) - (_QWORD)v19 > 1uLL)
        {
          *v19 = 23644;
          goto LABEL_29;
        }
        v12 = a1;
        v13 = "\\\\";
      }
      else
      {
        if (v10 != 34)
        {
          v18 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v18 >= *((_QWORD *)a1 + 3))
          {
            result = llvm::raw_ostream::write(a1, v10);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v18 + 1;
            *v18 = v10;
          }
          goto LABEL_10;
        }
        v11 = (_WORD *)*((_QWORD *)a1 + 4);
        if (*((_QWORD *)a1 + 3) - (_QWORD)v11 > 1uLL)
        {
          *v11 = 8796;
LABEL_29:
          *((_QWORD *)a1 + 4) += 2;
          goto LABEL_10;
        }
        v12 = a1;
        v13 = "\\\"";
      }
      result = llvm::raw_ostream::write(v12, v13, 2uLL);
LABEL_10:
      if (++v8 >= v9)
        goto LABEL_30;
    }
  }
  v7 = v22;
  result = (llvm::raw_ostream *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v22 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a1, v21, v22);
  if (v22)
  {
    result = (llvm::raw_ostream *)memcpy(result, v21, v22);
    *((_QWORD *)a1 + 4) += v7;
  }
  return result;
}

uint64_t llvm::MCSectionELF::useCodeAlign(llvm::MCSectionELF *this)
{
  return (*((unsigned __int8 *)this + 228) >> 2) & 1;
}

BOOL llvm::MCSectionELF::isVirtualSection(llvm::MCSectionELF *this)
{
  return *((_DWORD *)this + 56) == 8;
}

const char *llvm::MCSectionELF::getVirtualSectionKind(llvm::MCSectionELF *this)
{
  return "SHT_NOBITS";
}

uint64_t llvm::MCSectionMachO::MCSectionMachO(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t result;

  result = llvm::MCSection::MCSection(a1, 3, a4, a5, a8, a9);
  *(_QWORD *)result = &off_1E0E20550;
  *(_DWORD *)(result + 240) = a6;
  *(_DWORD *)(result + 244) = a7;
  if (!a3)
  {
    *(_WORD *)(result + 224) = 0;
    goto LABEL_8;
  }
  *(_BYTE *)(result + 224) = *a2;
  if (a3 == 1)
  {
    *(_BYTE *)(result + 225) = 0;
LABEL_8:
    *(_WORD *)(result + 226) = 0;
    goto LABEL_9;
  }
  *(_BYTE *)(result + 225) = a2[1];
  if (a3 <= 2)
    goto LABEL_8;
  *(_BYTE *)(result + 226) = a2[2];
  if (a3 == 3)
  {
    *(_BYTE *)(result + 227) = 0;
LABEL_9:
    *(_WORD *)(result + 228) = 0;
LABEL_10:
    *(_WORD *)(result + 230) = 0;
LABEL_11:
    *(_WORD *)(result + 232) = 0;
LABEL_12:
    *(_WORD *)(result + 234) = 0;
LABEL_13:
    *(_WORD *)(result + 236) = 0;
LABEL_14:
    *(_BYTE *)(result + 238) = 0;
    *(_BYTE *)(result + 239) = 0;
    return result;
  }
  *(_BYTE *)(result + 227) = a2[3];
  if (a3 <= 4)
    goto LABEL_9;
  *(_BYTE *)(result + 228) = a2[4];
  if (a3 == 5)
  {
    *(_BYTE *)(result + 229) = 0;
    goto LABEL_10;
  }
  *(_BYTE *)(result + 229) = a2[5];
  if (a3 <= 6)
    goto LABEL_10;
  *(_BYTE *)(result + 230) = a2[6];
  if (a3 == 7)
  {
    *(_BYTE *)(result + 231) = 0;
    goto LABEL_11;
  }
  *(_BYTE *)(result + 231) = a2[7];
  if (a3 <= 8)
    goto LABEL_11;
  *(_BYTE *)(result + 232) = a2[8];
  if (a3 == 9)
  {
    *(_BYTE *)(result + 233) = 0;
    goto LABEL_12;
  }
  *(_BYTE *)(result + 233) = a2[9];
  if (a3 <= 0xA)
    goto LABEL_12;
  *(_BYTE *)(result + 234) = a2[10];
  if (a3 == 11)
  {
    *(_BYTE *)(result + 235) = 0;
    goto LABEL_13;
  }
  *(_BYTE *)(result + 235) = a2[11];
  if (a3 <= 0xC)
    goto LABEL_13;
  *(_BYTE *)(result + 236) = a2[12];
  if (a3 == 13)
  {
    *(_BYTE *)(result + 237) = 0;
    goto LABEL_14;
  }
  *(_BYTE *)(result + 237) = a2[13];
  if (a3 <= 0xE)
    goto LABEL_14;
  *(_BYTE *)(result + 238) = a2[14];
  if (a3 == 15)
    *(_BYTE *)(result + 239) = 0;
  else
    *(_BYTE *)(result + 239) = a2[15];
  return result;
}

{
  return llvm::MCSectionMachO::MCSectionMachO(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

llvm::raw_ostream *llvm::MCSectionMachO::printSwitchToSection(uint64_t a1, int a2, int a3, llvm::raw_ostream *this)
{
  uint64_t v6;
  llvm::raw_ostream *v7;
  const char *v8;
  void *v9;
  _QWORD *v10;
  size_t v11;
  _BYTE *v12;
  const char *v13;
  size_t v14;
  llvm::raw_ostream *result;
  int v16;
  char **v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  size_t v30;
  const void *v31;
  void *v32;
  _WORD *v33;
  llvm::raw_ostream *v34;
  const char *v35;
  size_t v36;
  unint64_t v37;
  llvm::raw_ostream *v38;

  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) <= 9)
  {
    v7 = llvm::raw_ostream::write(this, "\t.section\t", 0xAuLL);
    v8 = (const char *)(a1 + 224);
    if (*(_BYTE *)(a1 + 239))
      goto LABEL_3;
LABEL_6:
    v11 = strlen(v8);
    v10 = (_QWORD *)((char *)v7 + 32);
    v9 = (void *)*((_QWORD *)v7 + 4);
    if (v11 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
    {
      if (!v11)
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_7:
    v7 = llvm::raw_ostream::write(v7, v8, v11);
    goto LABEL_10;
  }
  *(_WORD *)(v6 + 8) = 2414;
  *(_QWORD *)v6 = *(_QWORD *)"\t.section\t";
  *((_QWORD *)this + 4) += 10;
  v7 = this;
  v8 = (const char *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 239))
    goto LABEL_6;
LABEL_3:
  v10 = (_QWORD *)((char *)v7 + 32);
  v9 = (void *)*((_QWORD *)v7 + 4);
  v11 = 16;
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 <= 0xFuLL)
    goto LABEL_7;
LABEL_9:
  memcpy(v9, v8, v11);
  *v10 += v11;
LABEL_10:
  v12 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v12 < *((_QWORD *)v7 + 3))
  {
    *((_QWORD *)v7 + 4) = v12 + 1;
    *v12 = 44;
    v13 = *(const char **)(a1 + 200);
    v14 = *(_QWORD *)(a1 + 208);
    result = (llvm::raw_ostream *)*((_QWORD *)v7 + 4);
    if (v14 <= *((_QWORD *)v7 + 3) - (_QWORD)result)
      goto LABEL_12;
LABEL_17:
    result = llvm::raw_ostream::write(v7, v13, v14);
    v16 = *(_DWORD *)(a1 + 240);
    if (!v16)
      goto LABEL_56;
    goto LABEL_18;
  }
  v7 = llvm::raw_ostream::write(v7, 44);
  v13 = *(const char **)(a1 + 200);
  v14 = *(_QWORD *)(a1 + 208);
  result = (llvm::raw_ostream *)*((_QWORD *)v7 + 4);
  if (v14 > *((_QWORD *)v7 + 3) - (_QWORD)result)
    goto LABEL_17;
LABEL_12:
  if (v14)
  {
    result = (llvm::raw_ostream *)memcpy(result, v13, v14);
    *((_QWORD *)v7 + 4) += v14;
  }
  v16 = *(_DWORD *)(a1 + 240);
  if (!v16)
    goto LABEL_56;
LABEL_18:
  v17 = &(&SectionTypeDescriptors)[4 * v16];
  v18 = (size_t)v17[1];
  v20 = *((_QWORD *)this + 3);
  v19 = *((_QWORD *)this + 4);
  if (!v18)
  {
    if (v19 < v20)
      goto LABEL_58;
    return llvm::raw_ostream::write(this, 10);
  }
  if (v19 < v20)
  {
    *((_QWORD *)this + 4) = v19 + 1;
    *(_BYTE *)v19 = 44;
    v21 = *v17;
    v22 = (void *)*((_QWORD *)this + 4);
    if (v18 <= *((_QWORD *)this + 3) - (_QWORD)v22)
      goto LABEL_21;
LABEL_48:
    result = llvm::raw_ostream::write(this, v21, v18);
    v23 = v16 & 0xFFFFFF00;
    if ((v16 & 0xFFFFFF00) != 0)
      goto LABEL_22;
LABEL_49:
    v37 = *((_QWORD *)this + 3);
    v19 = *((_QWORD *)this + 4);
    if (*(_DWORD *)(a1 + 244))
    {
      if (v37 - v19 > 5)
      {
        *(_WORD *)(v19 + 4) = 11365;
        *(_DWORD *)v19 = 1852796460;
        *((_QWORD *)this + 4) += 6;
LABEL_54:
        v38 = this;
      }
      else
      {
        v38 = llvm::raw_ostream::write(this, ",none,", 6uLL);
      }
      goto LABEL_55;
    }
    goto LABEL_57;
  }
  llvm::raw_ostream::write(this, 44);
  v21 = *v17;
  v22 = (void *)*((_QWORD *)this + 4);
  if (v18 > *((_QWORD *)this + 3) - (_QWORD)v22)
    goto LABEL_48;
LABEL_21:
  result = (llvm::raw_ostream *)memcpy(v22, v21, v18);
  *((_QWORD *)this + 4) += v18;
  v23 = v16 & 0xFFFFFF00;
  if ((v16 & 0xFFFFFF00) == 0)
    goto LABEL_49;
LABEL_22:
  v24 = 0;
  v25 = 44;
  do
  {
    v26 = v24 + 40;
    if ((_DWORD)v24 == 400)
      break;
    v27 = *(int *)((char *)&SectionAttrDescriptors + v24);
    if ((v27 & v23) == 0)
      goto LABEL_25;
    v28 = (char *)*((_QWORD *)this + 4);
    if ((unint64_t)v28 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, v25);
      v23 &= ~v27;
      v29 = (char *)&SectionAttrDescriptors + v24;
      v30 = *(_QWORD *)((char *)&SectionAttrDescriptors + v24 + 16);
      if (v30)
      {
LABEL_30:
        v31 = (const void *)*((_QWORD *)v29 + 1);
        v32 = (void *)*((_QWORD *)this + 4);
        if (v30 <= *((_QWORD *)this + 3) - (_QWORD)v32)
        {
          result = (llvm::raw_ostream *)memcpy(v32, v31, v30);
          *((_QWORD *)this + 4) += v30;
        }
        else
        {
          result = llvm::raw_ostream::write(this, (const char *)v31, v30);
        }
        goto LABEL_24;
      }
    }
    else
    {
      *((_QWORD *)this + 4) = v28 + 1;
      *v28 = v25;
      v23 &= ~v27;
      v29 = (char *)&SectionAttrDescriptors + v24;
      v30 = *(_QWORD *)((char *)&SectionAttrDescriptors + v24 + 16);
      if (v30)
        goto LABEL_30;
    }
    v33 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v33 > 1uLL)
    {
      *v33 = 15420;
      result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 2);
      *((_QWORD *)this + 4) = result;
      v34 = this;
      v35 = *(const char **)((char *)&SectionAttrDescriptors + v24 + 24);
      v36 = *(_QWORD *)((char *)&SectionAttrDescriptors + v24 + 32);
      if (v36 > *((_QWORD *)this + 3) - (_QWORD)result)
      {
LABEL_40:
        v34 = llvm::raw_ostream::write(v34, v35, v36);
        result = (llvm::raw_ostream *)*((_QWORD *)v34 + 4);
        if (*((_QWORD *)v34 + 3) - (_QWORD)result > 1uLL)
          goto LABEL_41;
        goto LABEL_38;
      }
    }
    else
    {
      v34 = llvm::raw_ostream::write(this, "<<", 2uLL);
      result = (llvm::raw_ostream *)*((_QWORD *)v34 + 4);
      v35 = *(const char **)((char *)&SectionAttrDescriptors + v24 + 24);
      v36 = *(_QWORD *)((char *)&SectionAttrDescriptors + v24 + 32);
      if (v36 > *((_QWORD *)v34 + 3) - (_QWORD)result)
        goto LABEL_40;
    }
    if (v36)
    {
      memcpy(result, v35, v36);
      result = (llvm::raw_ostream *)(*((_QWORD *)v34 + 4) + v36);
      *((_QWORD *)v34 + 4) = result;
    }
    if (*((_QWORD *)v34 + 3) - (_QWORD)result > 1uLL)
    {
LABEL_41:
      *(_WORD *)result = 15934;
      *((_QWORD *)v34 + 4) += 2;
      goto LABEL_24;
    }
LABEL_38:
    result = llvm::raw_ostream::write(v34, ">>", 2uLL);
LABEL_24:
    v25 = 43;
LABEL_25:
    v24 = v26;
  }
  while (v23);
  v37 = *((_QWORD *)this + 3);
  v19 = *((_QWORD *)this + 4);
  if (*(_DWORD *)(a1 + 244))
  {
    if (v19 < v37)
    {
      *((_QWORD *)this + 4) = v19 + 1;
      *(_BYTE *)v19 = 44;
      goto LABEL_54;
    }
    v38 = llvm::raw_ostream::write(this, 44);
LABEL_55:
    result = llvm::raw_ostream::operator<<(v38, *(unsigned int *)(a1 + 244));
LABEL_56:
    v37 = *((_QWORD *)this + 3);
    v19 = *((_QWORD *)this + 4);
  }
LABEL_57:
  if (v19 >= v37)
    return llvm::raw_ostream::write(this, 10);
LABEL_58:
  *((_QWORD *)this + 4) = v19 + 1;
  *(_BYTE *)v19 = 10;
  return result;
}

uint64_t llvm::MCSectionMachO::useCodeAlign(llvm::MCSectionMachO *this)
{
  return *((_DWORD *)this + 60) >> 31;
}

uint64_t llvm::MCSectionMachO::isVirtualSection(llvm::MCSectionMachO *this)
{
  return (*((unsigned __int8 *)this + 240) < 0x13u) & (0x41002u >> *((_BYTE *)this + 240));
}

void llvm::MCSectionMachO::ParseSectionSpecifier(char *a1@<X0>, char *a2@<X1>, void **a3@<X2>, void **a4@<X3>, _DWORD *a5@<X4>, _BYTE *a6@<X5>, _DWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  llvm *last_not_of;
  _QWORD *v14;
  unint64_t first_not_of;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  llvm *v60;
  std::error_code v61;
  char **v63;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  size_t v101;
  llvm *As;
  llvm *v103;
  void *v104;
  llvm *v105;
  llvm *v106;
  llvm *v107;
  char *v108;
  void *v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  char *v114[2];
  void *__s1;
  unint64_t v116;
  void *v117;
  unint64_t v118;
  _BYTE v119[16];
  void *v120;
  uint64_t v121;
  _QWORD v122[12];
  std::error_code v123;
  std::error_code v124;
  std::error_code v125;
  std::error_code v126;

  v122[10] = *MEMORY[0x1E0C80C00];
  v114[0] = a1;
  v114[1] = a2;
  *a6 = 0;
  v120 = v122;
  v121 = 0x500000000;
  llvm::StringRef::split(v114, (uint64_t)&v120, 44, -1, 1);
  if (!(_DWORD)v121)
  {
    *a3 = 0;
    a3[1] = 0;
LABEL_52:
    a4[1] = 0;
    v31 = (unint64_t *)(a4 + 1);
    *a4 = 0;
LABEL_53:
    v41 = 0;
    v38 = 0;
    goto LABEL_54;
  }
  v14 = v120;
  first_not_of = llvm::StringRef::find_first_not_of(v120, " \t\n\v\f\r", 6, 0);
  v16 = v14[1];
  if (first_not_of >= v16)
    v17 = v14[1];
  else
    v17 = first_not_of;
  v18 = v16 - v17;
  v117 = (void *)(*v14 + v17);
  v118 = v16 - v17;
  last_not_of = (llvm *)llvm::StringRef::find_last_not_of(&v117, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)last_not_of + 1 < v118)
    v19 = (char *)last_not_of + 1;
  else
    v19 = (char *)v118;
  v20 = (unint64_t)&v19[v118 - v18];
  v21 = v121;
  if (v118 < v20)
    v20 = v118;
  *a3 = v117;
  a3[1] = (void *)v20;
  if (v21 <= 1)
    goto LABEL_52;
  v22 = v120;
  v23 = llvm::StringRef::find_first_not_of((_QWORD *)v120 + 2, " \t\n\v\f\r", 6, 0);
  v25 = v22[2];
  v24 = v22[3];
  if (v23 >= v24)
    v26 = v22[3];
  else
    v26 = v23;
  v27 = v24 - v26;
  v117 = (void *)(v25 + v26);
  v118 = v24 - v26;
  last_not_of = (llvm *)llvm::StringRef::find_last_not_of(&v117, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)last_not_of + 1 < v118)
    v28 = (char *)last_not_of + 1;
  else
    v28 = (char *)v118;
  v29 = (unint64_t)&v28[v118 - v27];
  if (v118 < v29)
    v29 = v118;
  v30 = v121;
  *a4 = v117;
  a4[1] = (void *)v29;
  v31 = (unint64_t *)(a4 + 1);
  if (v30 <= 2)
    goto LABEL_53;
  v32 = v120;
  v33 = llvm::StringRef::find_first_not_of((_QWORD *)v120 + 4, " \t\n\v\f\r", 6, 0);
  v35 = v32[4];
  v34 = v32[5];
  if (v33 >= v34)
    v36 = v32[5];
  else
    v36 = v33;
  v37 = v34 - v36;
  v117 = (void *)(v35 + v36);
  v118 = v34 - v36;
  last_not_of = (llvm *)llvm::StringRef::find_last_not_of(&v117, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  v38 = (char *)v117;
  if ((unint64_t)last_not_of + 1 < v118)
    v39 = (char *)last_not_of + 1;
  else
    v39 = (char *)v118;
  v40 = (unint64_t)&v39[v118 - v37];
  if (v118 >= v40)
    v41 = v40;
  else
    v41 = v118;
  if (v121 <= 3)
  {
LABEL_54:
    v49 = 0;
    v58 = 0;
    v112 = 0;
    v113 = 0;
    v110 = 0;
    v111 = 0;
    v59 = *v31;
    if (!*v31)
      goto LABEL_50;
    goto LABEL_55;
  }
  v42 = v120;
  v43 = llvm::StringRef::find_first_not_of((_QWORD *)v120 + 6, " \t\n\v\f\r", 6, 0);
  v44 = v42[7];
  if (v43 >= v44)
    v45 = v42[7];
  else
    v45 = v43;
  v46 = v44 - v45;
  v117 = (void *)(v42[6] + v45);
  v118 = v44 - v45;
  last_not_of = (llvm *)llvm::StringRef::find_last_not_of(&v117, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)last_not_of + 1 < v118)
    v47 = (char *)last_not_of + 1;
  else
    v47 = (char *)v118;
  v48 = (unint64_t)&v47[v118 - v46];
  if (v118 >= v48)
    v49 = v48;
  else
    v49 = v118;
  v112 = (char *)v117;
  v113 = v49;
  if (v121 >= 5)
  {
    v50 = v120;
    v51 = llvm::StringRef::find_first_not_of((_QWORD *)v120 + 8, " \t\n\v\f\r", 6, 0);
    v53 = v50[8];
    v52 = v50[9];
    if (v51 >= v52)
      v54 = v50[9];
    else
      v54 = v51;
    v55 = v52 - v54;
    v117 = (void *)(v53 + v54);
    v118 = v52 - v54;
    last_not_of = (llvm *)llvm::StringRef::find_last_not_of(&v117, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    if ((unint64_t)last_not_of + 1 < v118)
      v56 = (char *)last_not_of + 1;
    else
      v56 = (char *)v118;
    v57 = (unint64_t)&v56[v118 - v55];
    if (v118 >= v57)
      v58 = v57;
    else
      v58 = v118;
    v110 = v117;
    v111 = v58;
    v59 = *v31;
    if (!*v31)
      goto LABEL_50;
    goto LABEL_55;
  }
  v58 = 0;
  v110 = 0;
  v111 = 0;
  v59 = *v31;
  if (!*v31)
  {
LABEL_50:
    v60 = (llvm *)llvm::inconvertibleErrorCode(last_not_of);
    v61.__cat_ = (const std::error_category *)"mach-o section specifier requires a segment and section separated by a comma";
LABEL_189:
    llvm::createStringError(v60, v61, a8);
    goto LABEL_190;
  }
LABEL_55:
  if (v59 >= 0x11)
  {
    v60 = (llvm *)llvm::inconvertibleErrorCode(last_not_of);
    v61.__cat_ = (const std::error_category *)"mach-o section specifier requires a section whose length is between 1 and 16 characters";
    goto LABEL_189;
  }
  *a5 = 0;
  *a7 = 0;
  switch(v41)
  {
    case 0uLL:
      goto LABEL_226;
    case 7uLL:
      if (*(_DWORD *)v38 != 1969710450 || *(_DWORD *)(v38 + 3) != 1918987381)
        goto LABEL_188;
      v63 = &SectionTypeDescriptors;
      goto LABEL_199;
    case 8uLL:
      if (*(_QWORD *)v38 != 0x6C6C69666F72657ALL)
        goto LABEL_188;
      v63 = &off_1E0E5B0F0;
      goto LABEL_199;
    case 9uLL:
      if (*(_QWORD *)v38 != 0x656373656C616F63 || v38[8] != 100)
        goto LABEL_188;
      v63 = &off_1E0E5B230;
      goto LABEL_199;
    case 0xBuLL:
      if (*(_QWORD *)v38 != 0x736F707265746E69 || *(_QWORD *)(v38 + 3) != 0x676E69736F707265)
        goto LABEL_188;
      v63 = &off_1E0E5B270;
      goto LABEL_199;
    case 0xCuLL:
      if (*(_QWORD *)v38 != 0x735F6C6F626D7973 || *((_DWORD *)v38 + 2) != 1935832436)
        goto LABEL_188;
      v63 = &off_1E0E5B1D0;
      goto LABEL_199;
    case 0xEuLL:
      if (*(_QWORD *)v38 == 0x696C5F6574796234 && *(_QWORD *)(v38 + 6) == 0x736C61726574696CLL)
      {
        v63 = &off_1E0E5B130;
        goto LABEL_199;
      }
      if (*(_QWORD *)v38 == 0x696C5F6574796238 && *(_QWORD *)(v38 + 6) == 0x736C61726574696CLL)
      {
        v63 = &off_1E0E5B150;
        goto LABEL_199;
      }
      if (*(_QWORD *)v38 == 0x74696E695F646F6DLL && *(_QWORD *)(v38 + 6) == 0x73636E75665F7469)
      {
        v63 = &off_1E0E5B1F0;
        goto LABEL_199;
      }
      if (*(_QWORD *)v38 == 0x6D7265745F646F6DLL && *(_QWORD *)(v38 + 6) == 0x73636E75665F6D72)
      {
        v63 = &off_1E0E5B210;
        goto LABEL_199;
      }
      goto LABEL_188;
    case 0xFuLL:
      if (*(_QWORD *)v38 != 0x6C5F657479623631 || *(_QWORD *)(v38 + 7) != 0x736C61726574696CLL)
        goto LABEL_188;
      v63 = &off_1E0E5B290;
      goto LABEL_199;
    case 0x10uLL:
      if (*(_QWORD *)v38 == 0x5F676E6972747363 && *((_QWORD *)v38 + 1) == 0x736C61726574696CLL)
      {
        v63 = &off_1E0E5B110;
        goto LABEL_199;
      }
      if (*(_QWORD *)v38 == 0x5F6C61726574696CLL && *((_QWORD *)v38 + 1) == 0x737265746E696F70)
      {
        v63 = &off_1E0E5B170;
        goto LABEL_199;
      }
      goto LABEL_188;
    case 0x14uLL:
      if (*(_QWORD *)v38 == 0x6D79735F797A616CLL
        && *((_QWORD *)v38 + 1) == 0x6E696F705F6C6F62
        && *((_DWORD *)v38 + 4) == 1936876916)
      {
        v63 = &off_1E0E5B1B0;
      }
      else
      {
        if (*(_QWORD *)v38 != 0x6C5F646165726874
          || *((_QWORD *)v38 + 1) != 0x6765725F6C61636FLL
          || *((_DWORD *)v38 + 4) != 1918987381)
        {
LABEL_188:
          v60 = (llvm *)llvm::inconvertibleErrorCode(last_not_of);
          v61.__cat_ = (const std::error_category *)"mach-o section specifier uses an unknown section type";
          goto LABEL_189;
        }
        v63 = &off_1E0E5B2F0;
      }
LABEL_199:
      v91 = (unint64_t)((char *)v63 - (char *)&SectionTypeDescriptors) >> 5;
      *a5 = v91;
      *a6 = 1;
      if (v49)
      {
        v117 = v119;
        v118 = 0x100000000;
        llvm::StringRef::split(&v112, (uint64_t)&v117, 43, -1, 0);
        if ((_DWORD)v118)
        {
          v93 = (char *)v117;
          v108 = (char *)v117 + 16 * v118;
          do
          {
            v94 = 0;
            while (1)
            {
              v95 = llvm::StringRef::find_first_not_of(v93, " \t\n\v\f\r", 6, 0);
              v96 = *((_QWORD *)v93 + 1);
              v97 = v95 >= v96 ? *((_QWORD *)v93 + 1) : v95;
              v98 = v96 - v97;
              __s1 = (void *)(*(_QWORD *)v93 + v97);
              v116 = v96 - v97;
              v92 = llvm::StringRef::find_last_not_of(&__s1, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
              v99 = v92 + 1 < v116 ? v92 + 1 : v116;
              v100 = v116 - v98 + v99;
              v101 = v116 >= v100 ? v100 : v116;
              if (v101 == *(_QWORD *)&SectionAttrDescriptors[v94 + 4])
              {
                if (!v101)
                  break;
                v92 = memcmp(__s1, *(const void **)&SectionAttrDescriptors[v94 + 2], v101);
                if (!(_DWORD)v92)
                  break;
              }
              v94 += 10;
              if (v94 == 110)
              {
                v105 = (llvm *)llvm::inconvertibleErrorCode((llvm *)v92);
                v124.__cat_ = (const std::error_category *)"mach-o section specifier has invalid attribute";
                llvm::createStringError(v105, v124, a8);
                v104 = v117;
                if (v117 == v119)
                  goto LABEL_190;
                goto LABEL_223;
              }
            }
            *a5 |= SectionAttrDescriptors[v94];
            v93 += 16;
          }
          while (v93 != v108);
        }
        if (!v58)
        {
          if (*a5 == 8)
          {
            v106 = (llvm *)llvm::inconvertibleErrorCode((llvm *)v92);
            v125.__cat_ = (const std::error_category *)"mach-o section specifier of type 'symbol_stubs' requires a size specifier";
            llvm::createStringError(v106, v125, a8);
            v104 = v117;
            if (v117 == v119)
              goto LABEL_190;
            goto LABEL_223;
          }
LABEL_230:
          *a8 = 0;
          v104 = v117;
          if (v117 == v119)
            goto LABEL_190;
LABEL_223:
          free(v104);
          goto LABEL_190;
        }
        if (*a5 == 8)
        {
          As = (llvm *)llvm::StringRef::getAsInteger<unsigned int>((uint64_t)&v110, 0, a7);
          if ((_DWORD)As)
          {
            v103 = (llvm *)llvm::inconvertibleErrorCode(As);
            v123.__cat_ = (const std::error_category *)"mach-o section specifier has a malformed stub size";
            llvm::createStringError(v103, v123, a8);
            v104 = v117;
            if (v117 == v119)
              goto LABEL_190;
            goto LABEL_223;
          }
          goto LABEL_230;
        }
        v107 = (llvm *)llvm::inconvertibleErrorCode((llvm *)v92);
        v126.__cat_ = (const std::error_category *)"mach-o section specifier cannot have a stub size specified because it"
                                                   " does not have type 'symbol_stubs'";
        llvm::createStringError(v107, v126, a8);
        v104 = v117;
        if (v117 != v119)
          goto LABEL_223;
      }
      else
      {
        if ((_DWORD)v91 == 8)
        {
          v60 = (llvm *)llvm::inconvertibleErrorCode(last_not_of);
          v61.__cat_ = (const std::error_category *)"mach-o section specifier of type 'symbol_stubs' requires a size specifier";
          goto LABEL_189;
        }
LABEL_226:
        *a8 = 0;
      }
LABEL_190:
      if (v120 != v122)
        free(v120);
      return;
    case 0x15uLL:
      if (*(_QWORD *)v38 != 0x6C5F646165726874
        || *((_QWORD *)v38 + 1) != 0x72657A5F6C61636FLL
        || *(_QWORD *)(v38 + 13) != 0x6C6C69666F72657ALL)
      {
        goto LABEL_188;
      }
      v63 = &off_1E0E5B310;
      goto LABEL_199;
    case 0x16uLL:
      if (*(_QWORD *)v38 != 0x6C5F646165726874
        || *((_QWORD *)v38 + 1) != 0x7261765F6C61636FLL
        || *(_QWORD *)(v38 + 14) != 0x73656C6261697261)
      {
        goto LABEL_188;
      }
      v63 = &off_1E0E5B330;
      goto LABEL_199;
    case 0x18uLL:
      if (*(_QWORD *)v38 != 0x797A616C5F6E6F6ELL
        || *((_QWORD *)v38 + 1) != 0x5F6C6F626D79735FLL
        || *((_QWORD *)v38 + 2) != 0x737265746E696F70)
      {
        goto LABEL_188;
      }
      v63 = &off_1E0E5B190;
      goto LABEL_199;
    case 0x1EuLL:
      if (*(_QWORD *)v38 != 0x6C5F646165726874
        || *((_QWORD *)v38 + 1) != 0x7261765F6C61636FLL
        || *((_QWORD *)v38 + 2) != 0x6F705F656C626169
        || *(_QWORD *)(v38 + 22) != 0x737265746E696F70)
      {
        goto LABEL_188;
      }
      v63 = &off_1E0E5B350;
      goto LABEL_199;
    case 0x23uLL:
      if (*(_QWORD *)v38 != 0x6C5F646165726874
        || *((_QWORD *)v38 + 1) != 0x696E695F6C61636FLL
        || *((_QWORD *)v38 + 2) != 0x6974636E75665F74
        || *((_QWORD *)v38 + 3) != 0x746E696F705F6E6FLL
        || *(_QWORD *)(v38 + 27) != 0x737265746E696F70)
      {
        goto LABEL_188;
      }
      v63 = &off_1E0E5B370;
      goto LABEL_199;
    default:
      goto LABEL_188;
  }
}

uint64_t llvm::StringRef::getAsInteger<unsigned int>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v5;

  v5 = 0;
  if ((llvm::getAsUnsignedInteger(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8), a2, &v5) & 1) != 0 || HIDWORD(v5))
    return 1;
  result = 0;
  *a3 = v5;
  return result;
}

void llvm::MCSectionWasm::printSwitchToSection(uint64_t a1, _BYTE **a2, uint64_t a3, llvm::raw_ostream *a4, uint64_t a5)
{
  _BYTE *v9;
  llvm::raw_ostream *v10;
  const void *v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  _WORD *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  _DWORD *v27;
  llvm::raw_ostream *v28;
  void *v29;
  _BYTE *v30;

  if (!(*((unsigned int (**)(_BYTE **, _QWORD, _QWORD))*a2 + 8))(a2, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208)))
  {
    v14 = *((_QWORD *)a4 + 4);
    if ((unint64_t)(*((_QWORD *)a4 + 3) - v14) > 9)
    {
      *(_WORD *)(v14 + 8) = 2414;
      *(_QWORD *)v14 = *(_QWORD *)"\t.section\t";
      *((_QWORD *)a4 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a4, "\t.section\t", 0xAuLL);
    }
    printName(a4, *(const char **)(a1 + 200), *(_QWORD *)(a1 + 208));
    v16 = (_WORD *)*((_QWORD *)a4 + 4);
    if (*((_QWORD *)a4 + 3) - (_QWORD)v16 > 1uLL)
    {
      *v16 = 8748;
      *((_QWORD *)a4 + 4) += 2;
      if (!*(_BYTE *)(a1 + 252))
        goto LABEL_20;
    }
    else
    {
      llvm::raw_ostream::write(a4, ",\"", 2uLL);
      if (!*(_BYTE *)(a1 + 252))
        goto LABEL_20;
    }
    v17 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 112);
      if (!*(_QWORD *)(a1 + 232))
        goto LABEL_26;
LABEL_24:
      v18 = (_BYTE *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v18 >= *((_QWORD *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 71);
        if ((*(_BYTE *)(a1 + 256) & 1) == 0)
        {
LABEL_27:
          if ((*(_BYTE *)(a1 + 256) & 2) == 0)
            goto LABEL_28;
LABEL_41:
          v25 = (_BYTE *)*((_QWORD *)a4 + 4);
          if ((unint64_t)v25 >= *((_QWORD *)a4 + 3))
          {
            llvm::raw_ostream::write(a4, 84);
            v19 = (_BYTE *)*((_QWORD *)a4 + 4);
            if ((unint64_t)v19 >= *((_QWORD *)a4 + 3))
              goto LABEL_45;
          }
          else
          {
            *((_QWORD *)a4 + 4) = v25 + 1;
            *v25 = 84;
            v19 = (_BYTE *)*((_QWORD *)a4 + 4);
            if ((unint64_t)v19 >= *((_QWORD *)a4 + 3))
              goto LABEL_45;
          }
LABEL_29:
          *((_QWORD *)a4 + 4) = v19 + 1;
          *v19 = 34;
          v20 = (_BYTE *)*((_QWORD *)a4 + 4);
          if ((unint64_t)v20 >= *((_QWORD *)a4 + 3))
            goto LABEL_30;
          goto LABEL_46;
        }
LABEL_35:
        v24 = (_BYTE *)*((_QWORD *)a4 + 4);
        if ((unint64_t)v24 >= *((_QWORD *)a4 + 3))
        {
          llvm::raw_ostream::write(a4, 83);
          if ((*(_BYTE *)(a1 + 256) & 2) != 0)
            goto LABEL_41;
        }
        else
        {
          *((_QWORD *)a4 + 4) = v24 + 1;
          *v24 = 83;
          if ((*(_BYTE *)(a1 + 256) & 2) != 0)
            goto LABEL_41;
        }
LABEL_28:
        v19 = (_BYTE *)*((_QWORD *)a4 + 4);
        if ((unint64_t)v19 < *((_QWORD *)a4 + 3))
          goto LABEL_29;
LABEL_45:
        llvm::raw_ostream::write(a4, 34);
        v20 = (_BYTE *)*((_QWORD *)a4 + 4);
        if ((unint64_t)v20 >= *((_QWORD *)a4 + 3))
        {
LABEL_30:
          llvm::raw_ostream::write(a4, 44);
          v22 = *((_QWORD *)a4 + 3);
          v21 = (_BYTE *)*((_QWORD *)a4 + 4);
          if (*a2[6] != 64)
          {
LABEL_31:
            if ((unint64_t)v21 < v22)
            {
              *((_QWORD *)a4 + 4) = v21 + 1;
              *v21 = 64;
              v23 = (_QWORD *)*((_QWORD *)a4 + 4);
              if (!*(_QWORD *)(a1 + 232))
                goto LABEL_55;
LABEL_51:
              if (*((_QWORD **)a4 + 3) == v23)
              {
                llvm::raw_ostream::write(a4, ",", 1uLL);
                v26 = *(_QWORD *)(a1 + 232);
                if ((*(_BYTE *)(v26 + 8) & 1) == 0)
                {
LABEL_53:
                  printName(a4, 0, 0);
                  v27 = (_DWORD *)*((_QWORD *)a4 + 4);
                  if (*((_QWORD *)a4 + 3) - (_QWORD)v27 > 6uLL)
                  {
LABEL_54:
                    *(_DWORD *)((char *)v27 + 3) = 1952539757;
                    *v27 = 1836016428;
                    v23 = (_QWORD *)(*((_QWORD *)a4 + 4) + 7);
                    *((_QWORD *)a4 + 4) = v23;
                    goto LABEL_55;
                  }
LABEL_61:
                  llvm::raw_ostream::write(a4, ",comdat", 7uLL);
                  v23 = (_QWORD *)*((_QWORD *)a4 + 4);
                  if (*(_DWORD *)(a1 + 224) == -1)
                  {
LABEL_56:
                    if ((unint64_t)v23 < *((_QWORD *)a4 + 3))
                      goto LABEL_57;
                    goto LABEL_66;
                  }
LABEL_62:
                  if (*((_QWORD *)a4 + 3) - (_QWORD)v23 > 7uLL)
                  {
                    *v23 = 0x2C657571696E752CLL;
                    *((_QWORD *)a4 + 4) += 8;
                    v28 = a4;
                  }
                  else
                  {
                    v28 = llvm::raw_ostream::write(a4, ",unique,", 8uLL);
                  }
                  llvm::raw_ostream::operator<<(v28, *(unsigned int *)(a1 + 224));
                  v23 = (_QWORD *)*((_QWORD *)a4 + 4);
                  if ((unint64_t)v23 < *((_QWORD *)a4 + 3))
                  {
LABEL_57:
                    *((_QWORD *)a4 + 4) = (char *)v23 + 1;
                    *(_BYTE *)v23 = 10;
                    if (!a5)
                      return;
LABEL_67:
                    v29 = (void *)*((_QWORD *)a4 + 4);
                    if (*((_QWORD *)a4 + 3) - (_QWORD)v29 > 0xCuLL)
                    {
                      qmemcpy(v29, "\t.subsection\t", 13);
                      *((_QWORD *)a4 + 4) += 13;
                    }
                    else
                    {
                      llvm::raw_ostream::write(a4, "\t.subsection\t", 0xDuLL);
                    }
                    goto LABEL_70;
                  }
LABEL_66:
                  llvm::raw_ostream::write(a4, 10);
                  if (!a5)
                    return;
                  goto LABEL_67;
                }
              }
              else
              {
                *(_BYTE *)v23 = 44;
                ++*((_QWORD *)a4 + 4);
                v26 = *(_QWORD *)(a1 + 232);
                if ((*(_BYTE *)(v26 + 8) & 1) == 0)
                  goto LABEL_53;
              }
              printName(a4, (const char *)(*(_QWORD *)(v26 - 8) + 16), **(_QWORD **)(v26 - 8));
              v27 = (_DWORD *)*((_QWORD *)a4 + 4);
              if (*((_QWORD *)a4 + 3) - (_QWORD)v27 > 6uLL)
                goto LABEL_54;
              goto LABEL_61;
            }
            llvm::raw_ostream::write(a4, 64);
            v23 = (_QWORD *)*((_QWORD *)a4 + 4);
            if (*(_QWORD *)(a1 + 232))
              goto LABEL_51;
            goto LABEL_55;
          }
LABEL_47:
          if ((unint64_t)v21 >= v22)
          {
            llvm::raw_ostream::write(a4, 37);
            v23 = (_QWORD *)*((_QWORD *)a4 + 4);
            if (!*(_QWORD *)(a1 + 232))
              goto LABEL_55;
            goto LABEL_51;
          }
          *((_QWORD *)a4 + 4) = v21 + 1;
          *v21 = 37;
          v23 = (_QWORD *)*((_QWORD *)a4 + 4);
          if (*(_QWORD *)(a1 + 232))
            goto LABEL_51;
LABEL_55:
          if (*(_DWORD *)(a1 + 224) == -1)
            goto LABEL_56;
          goto LABEL_62;
        }
LABEL_46:
        *((_QWORD *)a4 + 4) = v20 + 1;
        *v20 = 44;
        v22 = *((_QWORD *)a4 + 3);
        v21 = (_BYTE *)*((_QWORD *)a4 + 4);
        if (*a2[6] != 64)
          goto LABEL_31;
        goto LABEL_47;
      }
      *((_QWORD *)a4 + 4) = v18 + 1;
      *v18 = 71;
LABEL_26:
      if ((*(_BYTE *)(a1 + 256) & 1) == 0)
        goto LABEL_27;
      goto LABEL_35;
    }
    *((_QWORD *)a4 + 4) = v17 + 1;
    *v17 = 112;
LABEL_20:
    if (!*(_QWORD *)(a1 + 232))
      goto LABEL_26;
    goto LABEL_24;
  }
  v9 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)a4 + 3))
  {
    v10 = llvm::raw_ostream::write(a4, 9);
    v11 = *(const void **)(a1 + 200);
    v12 = *(_QWORD *)(a1 + 208);
    v13 = (void *)*((_QWORD *)v10 + 4);
    if (v12 <= *((_QWORD *)v10 + 3) - (_QWORD)v13)
    {
LABEL_4:
      if (v12)
      {
        memcpy(v13, v11, v12);
        *((_QWORD *)v10 + 4) += v12;
      }
      goto LABEL_10;
    }
  }
  else
  {
    *((_QWORD *)a4 + 4) = v9 + 1;
    *v9 = 9;
    v10 = a4;
    v11 = *(const void **)(a1 + 200);
    v12 = *(_QWORD *)(a1 + 208);
    v13 = (void *)*((_QWORD *)a4 + 4);
    if (v12 <= *((_QWORD *)a4 + 3) - (_QWORD)v13)
      goto LABEL_4;
  }
  llvm::raw_ostream::write(v10, (const char *)v11, v12);
LABEL_10:
  if (!a5)
    goto LABEL_71;
  v15 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 9);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v15 + 1;
    *v15 = 9;
  }
LABEL_70:
  llvm::MCExpr::print(a5);
LABEL_71:
  v30 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v30 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 10);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v30 + 1;
    *v30 = 10;
  }
}

uint64_t llvm::MCSectionWasm::useCodeAlign(llvm::MCSectionWasm *this)
{
  return 0;
}

uint64_t llvm::MCSectionWasm::isVirtualSection(llvm::MCSectionWasm *this)
{
  return 0;
}

llvm::raw_ostream *llvm::MCSectionXCOFF::printCsectDirective(llvm::MCSectionXCOFF *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  _QWORD *v4;
  uint64_t v5;
  size_t *v6;
  const void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  _BYTE *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;
  llvm::raw_ostream *v14;

  v2 = a2;
  v4 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 7uLL)
  {
    *v4 = 0x2074636573632E09;
    *((_QWORD *)a2 + 4) += 8;
    v5 = *((_QWORD *)this + 29);
    if ((*(_BYTE *)(v5 + 8) & 1) == 0)
      goto LABEL_9;
  }
  else
  {
    v2 = llvm::raw_ostream::write(a2, "\t.csect ", 8uLL);
    v5 = *((_QWORD *)this + 29);
    if ((*(_BYTE *)(v5 + 8) & 1) == 0)
      goto LABEL_9;
  }
  v6 = *(size_t **)(v5 - 8);
  v9 = *v6;
  v7 = v6 + 2;
  v8 = v9;
  v10 = (void *)*((_QWORD *)v2 + 4);
  if (v9 <= *((_QWORD *)v2 + 3) - (_QWORD)v10)
  {
    if (v8)
    {
      memcpy(v10, v7, v8);
      *((_QWORD *)v2 + 4) += v8;
    }
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, (const char *)v7, v8);
  }
LABEL_9:
  v11 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v11)
  {
    v14 = llvm::raw_ostream::write(v2, ",", 1uLL);
    result = llvm::raw_ostream::operator<<(v14, *((unsigned __int8 *)this + 24));
    v13 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v13 < *((_QWORD *)result + 3))
      goto LABEL_11;
  }
  else
  {
    *v11 = 44;
    ++*((_QWORD *)v2 + 4);
    result = llvm::raw_ostream::operator<<(v2, *((unsigned __int8 *)this + 24));
    v13 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v13 < *((_QWORD *)result + 3))
    {
LABEL_11:
      *((_QWORD *)result + 4) = v13 + 1;
      *v13 = 10;
      return result;
    }
  }
  return llvm::raw_ostream::write(result, 10);
}

llvm::raw_ostream *llvm::MCSectionXCOFF::printSwitchToSection(llvm::raw_ostream *this, uint64_t a2, int a3, llvm::raw_ostream *a4)
{
  llvm::raw_ostream *v5;
  int v6;
  int v8;
  unsigned int v10;
  unsigned int v11;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  _BYTE *v19;
  _QWORD v20[2];
  int v21;

  v5 = this;
  v6 = *((unsigned __int8 *)this + 220);
  if ((v6 & 0xFE) == 2)
  {
    if (*((_BYTE *)this + 224))
      llvm::report_fatal_error((llvm *)"Unhandled storage-mapping class for .text csect", (const char *)1);
    return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  }
  if ((v6 & 0xFC) == 8 || (v6 & 0xFC) == 4)
  {
    v8 = *((unsigned __int8 *)this + 224);
    if (v8 != 1 && v8 != 16)
      llvm::report_fatal_error((llvm *)"Unhandled storage-mapping class for .rodata csect.", (const char *)1);
    return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  }
  switch(v6)
  {
    case 13:
      if (*((_BYTE *)this + 224) != 20)
        llvm::report_fatal_error((llvm *)"Unhandled storage-mapping class for .tdata csect.", (const char *)1);
      return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
    case 19:
      v11 = *((unsigned __int8 *)this + 224);
      if (v11 <= 0x16)
      {
        if (((1 << v11) & 0x10420) != 0)
          return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
        if (((1 << v11) & 0x400008) != 0)
          return this;
        if (v11 == 15)
          return llvm::raw_ostream::operator<<(a4, "\t.toc\n");
      }
      llvm::report_fatal_error((llvm *)"Unhandled storage-mapping class for .data csect.", (const char *)1);
    case 20:
      v10 = *((unsigned __int8 *)this + 224);
      if (v10 > 0x10 || ((1 << v10) & 0x10022) == 0)
        llvm::report_fatal_error((llvm *)"Unexepected storage-mapping class for ReadOnlyWithRel kind", (const char *)1);
      return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  }
  if (!*((_BYTE *)this + 226))
    goto LABEL_31;
  if (*((_BYTE *)this + 224) == 16)
    return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  if (*((_BYTE *)this + 225) == 3)
    return this;
LABEL_31:
  if ((v6 & 0xFFFFFFFD) == 0xC)
    return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  if (*((_BYTE *)this + 220) || !*((_BYTE *)this + 260))
    llvm::report_fatal_error((llvm *)"Printing for this SectionKind is unimplemented.", (const char *)1);
  v13 = llvm::raw_ostream::operator<<(a4, "\n\t.dwsect ");
  v14 = *((_QWORD *)v5 + 32);
  v20[0] = &unk_1E0E201E0;
  v20[1] = "0x%x";
  v21 = v14;
  v15 = llvm::raw_ostream::operator<<(v13, (uint64_t)v20);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 10);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 10;
  }
  v17 = llvm::raw_ostream::operator<<(a4, *(const char **)(a2 + 104), *(_QWORD *)(a2 + 112));
  this = llvm::raw_ostream::operator<<(v17, *((const char **)v5 + 25), *((_QWORD *)v5 + 26));
  v18 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v18 >= *((_QWORD *)this + 3))
  {
    this = llvm::raw_ostream::write(this, 58);
  }
  else
  {
    *((_QWORD *)this + 4) = v18 + 1;
    *v18 = 58;
  }
  v19 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v19 >= *((_QWORD *)this + 3))
    return llvm::raw_ostream::write(this, 10);
  *((_QWORD *)this + 4) = v19 + 1;
  *v19 = 10;
  return this;
}

BOOL llvm::MCSectionXCOFF::useCodeAlign(llvm::MCSectionXCOFF *this)
{
  return (*((_DWORD *)this + 55) & 0xFE) == 2;
}

BOOL llvm::MCSectionXCOFF::isVirtualSection(llvm::MCSectionXCOFF *this)
{
  return !*((_BYTE *)this + 260) && *((_BYTE *)this + 225) == 3;
}

uint64_t llvm::format_object<llvm::XCOFF::DwarfSectionSubtypeFlags>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

double llvm::MCStreamer::MCStreamer(llvm::MCStreamer *this, llvm::MCContext *a2)
{
  double result;

  *(_QWORD *)this = off_1E0E1F9D0;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x100000000;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 18) = (char *)this + 160;
  *((_QWORD *)this + 36) = 0;
  *(_QWORD *)((char *)this + 295) = 0;
  *((_OWORD *)this + 11) = 0u;
  *(_QWORD *)&result = 0x400000001;
  *((_QWORD *)this + 19) = 0x400000001;
  return result;
}

void llvm::MCStreamer::~MCStreamer(llvm::MCStreamer *this)
{
  char *v2;

  *(_QWORD *)this = off_1E0E1F9D0;
  v2 = (char *)*((_QWORD *)this + 18);
  if (v2 != (char *)this + 160)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 15), (void *)(16 * *((unsigned int *)this + 34)));
}

double llvm::MCStreamer::reset(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  llvm::WinEH::FrameInfo *v10;
  llvm::WinEH::FrameInfo *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _OWORD *v24;
  double result;

  v2 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v2; i -= 88)
  {
    v5 = *(_QWORD *)(i - 56);
    if (v5)
    {
      v6 = *(_QWORD *)(i - 48);
      v4 = *(void **)(i - 56);
      if (v6 == v5)
      {
LABEL_3:
        *(_QWORD *)(i - 48) = v5;
        operator delete(v4);
        continue;
      }
      while (2)
      {
        if (*(char *)(v6 - 1) < 0)
        {
          operator delete(*(void **)(v6 - 24));
          v7 = *(void **)(v6 - 48);
          if (!v7)
            goto LABEL_9;
        }
        else
        {
          v7 = *(void **)(v6 - 48);
          if (!v7)
          {
LABEL_9:
            v6 -= 88;
            if (v6 == v5)
            {
              v4 = *(void **)(i - 56);
              goto LABEL_3;
            }
            continue;
          }
        }
        break;
      }
      *(_QWORD *)(v6 - 40) = v7;
      operator delete(v7);
      goto LABEL_9;
    }
  }
  *((_QWORD *)this + 4) = v2;
  *((_QWORD *)this + 13) = 0;
  v8 = (_QWORD *)*((_QWORD *)this + 10);
  v9 = (_QWORD *)*((_QWORD *)this + 11);
  while (v9 != v8)
  {
    v11 = (llvm::WinEH::FrameInfo *)*--v9;
    v10 = v11;
    *v9 = 0;
    if (v11)
      llvm::WinEH::FrameInfo::~FrameInfo(v10);
  }
  *((_QWORD *)this + 11) = v8;
  v12 = *((_DWORD *)this + 32);
  if (v12 || *((_DWORD *)this + 33))
  {
    v13 = (_QWORD *)((char *)this + 120);
    v14 = *((unsigned int *)this + 34);
    if (v14 > 4 * v12 && v14 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)v13);
      goto LABEL_34;
    }
    if (!(_DWORD)v14)
      goto LABEL_33;
    v15 = (_QWORD *)*v13;
    v16 = (v14 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v16)
    {
      v17 = v16 + 1;
      v18 = (v16 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v19 = &v15[2 * v18];
      v20 = v15 + 2;
      v21 = v18;
      do
      {
        *(v20 - 2) = -4096;
        *v20 = -4096;
        v20 += 4;
        v21 -= 2;
      }
      while (v21);
      if (v17 == v18)
        goto LABEL_33;
    }
    else
    {
      v19 = (_QWORD *)*v13;
    }
    v22 = &v15[2 * v14];
    do
    {
      *v19 = -4096;
      v19 += 2;
    }
    while (v19 != v22);
LABEL_33:
    *((_QWORD *)this + 16) = 0;
  }
LABEL_34:
  *((_DWORD *)this + 38) = 0;
  if (*((_DWORD *)this + 39))
  {
    v23 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 144, (char *)this + 160, 1uLL, 32);
    v23 = *((unsigned int *)this + 38);
  }
  v24 = (_OWORD *)(*((_QWORD *)this + 18) + 32 * v23);
  result = 0.0;
  *v24 = 0u;
  v24[1] = 0u;
  ++*((_DWORD *)this + 38);
  return result;
}

uint64_t llvm::MCStreamer::emitIntValue(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)this + 496))();
}

void llvm::MCStreamer::emitIntValue(_QWORD *a1, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  llvm::APInt *v8;
  uint64_t v9;
  size_t v10;
  void *__p;
  unsigned int v12;
  llvm::APInt *__dst;
  __int128 v14;
  _QWORD v15[3];

  v2 = a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  if (((v4 + 63) & 0x1FFFFFFC0) == 0x40)
  {
    if (v4 >= 0x41)
    {
      if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) > 0x40)
      {
        v5 = -1;
LABEL_17:
        (*(void (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 520))(a1, v5, v4 >> 3);
        return;
      }
      v2 = *(unsigned int **)v2;
    }
    v5 = *(_QWORD *)v2;
    goto LABEL_17;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1[1] + 144) + 16))
  {
    v12 = a2[2];
    if (v4 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a2);
    else
      __p = *(void **)a2;
  }
  else
  {
    llvm::APInt::byteSwap((llvm::APInt *)a2, (uint64_t)&__p);
  }
  v6 = v2[2];
  v7 = v6 >> 3;
  __dst = (llvm::APInt *)v15;
  v14 = xmmword_18125D420;
  if (v6 >= 8)
  {
    if (v6 < 0x58)
    {
      v9 = 0;
      v8 = (llvm::APInt *)v15;
      v10 = v6 >> 3;
      if (!v7)
      {
LABEL_20:
        *(_QWORD *)&v14 = v7;
        goto LABEL_21;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v15, v6 >> 3, 1);
      v8 = __dst;
      v9 = v14;
      v10 = v7 - v14;
      if (v7 == (_QWORD)v14)
        goto LABEL_20;
    }
    bzero((char *)v8 + v9, v10);
    v8 = __dst;
    goto LABEL_20;
  }
  v8 = (llvm::APInt *)v15;
LABEL_21:
  llvm::StoreIntToMemory((llvm **)&__p, v8, v7);
  (*(void (**)(_QWORD *, llvm::APInt *, _QWORD))(*a1 + 496))(a1, __dst, v14);
  if (__dst != (llvm::APInt *)v15)
    free(__dst);
  if (v12 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

uint64_t llvm::MCStreamer::emitValue(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
}

void llvm::MCStreamer::emitDTPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitDTPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitTPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitTPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitGPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitGPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

uint64_t llvm::MCStreamer::emitFill(uint64_t this, llvm::MCConstantExpr *a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v5;

  if (a2)
  {
    v4 = this;
    v5 = llvm::MCConstantExpr::create(a2, *(_QWORD *)(this + 8), 0, 0);
    return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 616))(v4, v5, a3, 0);
  }
  return this;
}

void llvm::MCStreamer::tryEmitDwarfFileDirective(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 8);
  v13 = *(_OWORD *)a7;
  v14 = *(_BYTE *)(a7 + 16);
  v11 = *(_OWORD *)a8;
  v12 = *(_QWORD *)(a8 + 16);
  llvm::MCContext::getDwarfFile(v10, a3, a4, a5, a6, a2, &v13, &v11, a9, a10);
}

double llvm::MCStreamer::emitDwarfFile0Directive(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, __int128 *a6, __n128 *a7, unsigned int a8)
{
  uint64_t v8;
  __n128 v10;
  unint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  v12 = *a6;
  v13 = *((_BYTE *)a6 + 16);
  v10 = *a7;
  v11 = a7[1].n128_u64[0];
  return llvm::MCContext::setMCLineTableRootFile(v8, a8, __src, __len, a4, a5, (uint64_t)&v12, &v10);
}

_QWORD *llvm::MCStreamer::emitCFIBKeyFrame(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v1 = this;
  v2 = *((unsigned int *)this + 14);
  if ((_DWORD)v2)
  {
    v3 = this[3];
    if (v3)
      *(_BYTE *)(v3 + 88 * *(_QWORD *)(this[6] + 16 * v2 - 16) + 80) = 1;
  }
  else
  {
    v4 = this[1];
    v5 = (uint64_t *)v1[36];
    if (v5)
      v6 = *v5;
    else
      v6 = 0;
    v7 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v8 = 259;
    return llvm::MCContext::reportError(v4, v6, (uint64_t)&v7);
  }
  return this;
}

_QWORD *llvm::MCStreamer::emitCFIMTETaggedFrame(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v1 = this;
  v2 = *((unsigned int *)this + 14);
  if ((_DWORD)v2)
  {
    v3 = this[3];
    if (v3)
      *(_BYTE *)(v3 + 88 * *(_QWORD *)(this[6] + 16 * v2 - 16) + 81) = 1;
  }
  else
  {
    v4 = this[1];
    v5 = (uint64_t *)v1[36];
    if (v5)
      v6 = *v5;
    else
      v6 = 0;
    v7 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v8 = 259;
    return llvm::MCContext::reportError(v4, v6, (uint64_t)&v7);
  }
  return this;
}

uint64_t llvm::MCStreamer::emitDwarfLocDirective(uint64_t result, int a2, int a3, __int16 a4, char a5, char a6, int a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v7 + 1576) = a2;
  *(_DWORD *)(v7 + 1580) = a3;
  *(_WORD *)(v7 + 1584) = a4;
  *(_BYTE *)(v7 + 1586) = a5;
  *(_BYTE *)(v7 + 1587) = a6;
  *(_DWORD *)(v7 + 1588) = a7;
  *(_BYTE *)(v7 + 1592) = 1;
  return result;
}

uint64_t llvm::MCStreamer::getDwarfLineTableSymbol(llvm::MCStreamer *this, unsigned int a2)
{
  uint64_t v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  unsigned int v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  llvm::MCContext *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  const char *v19[4];
  __int16 v20;

  v4 = *((_QWORD *)this + 1);
  v5 = *(char **)(v4 + 1560);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_8;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(v4 + 1560);
    v7 = (char *)(v4 + 1560);
LABEL_8:
    v9 = v7;
    v7 = (char *)operator new(0x218uLL);
    *((_DWORD *)v7 + 8) = a2;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 264) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 280) = 0u;
    *(_OWORD *)(v7 + 296) = 0u;
    *(_OWORD *)(v7 + 312) = 0u;
    *(_OWORD *)(v7 + 328) = 0u;
    *(_OWORD *)(v7 + 344) = 0u;
    *(_OWORD *)(v7 + 360) = 0u;
    *(_OWORD *)(v7 + 376) = 0u;
    *(_OWORD *)(v7 + 392) = 0u;
    *(_OWORD *)(v7 + 408) = 0u;
    *(_OWORD *)(v7 + 424) = 0u;
    *(_OWORD *)(v7 + 440) = 0u;
    *(_OWORD *)(v7 + 456) = 0u;
    *(_OWORD *)(v7 + 472) = 0u;
    *(_OWORD *)(v7 + 488) = 0u;
    *(_OWORD *)(v7 + 504) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *((_QWORD *)v7 + 6) = v7 + 64;
    *((_DWORD *)v7 + 15) = 3;
    *((_QWORD *)v7 + 17) = v7 + 152;
    *((_DWORD *)v7 + 37) = 3;
    *((_QWORD *)v7 + 47) = 0;
    *((_QWORD *)v7 + 46) = 0;
    *((_QWORD *)v7 + 48) = 0x1000000000;
    *(_OWORD *)(v7 + 392) = 0u;
    *(_OWORD *)(v7 + 408) = 0u;
    *(_OWORD *)(v7 + 424) = 0u;
    *(_QWORD *)(v7 + 437) = 0;
    v7[489] = 1;
    *((_QWORD *)v7 + 63) = 0;
    *((_QWORD *)v7 + 62) = 0;
    *((_DWORD *)v7 + 128) = 0;
    *((_QWORD *)v7 + 65) = v7 + 536;
    *((_QWORD *)v7 + 66) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)v7;
    v11 = **(_QWORD **)(v4 + 1552);
    if (v11)
    {
      *(_QWORD *)(v4 + 1552) = v11;
      v10 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 1560), v10);
    ++*(_QWORD *)(v4 + 1568);
  }
  result = *((_QWORD *)v7 + 5);
  if (!result)
  {
    v13 = (llvm::MCContext *)*((_QWORD *)this + 1);
    v14 = *((_QWORD *)v13 + 18);
    v16 = *(_QWORD *)(v14 + 88);
    v15 = *(_QWORD *)(v14 + 96);
    v18 = 773;
    v17[0] = v16;
    v17[1] = v15;
    v17[2] = "line_table_start";
    v19[0] = (const char *)v17;
    v19[2] = (const char *)a2;
    v20 = 2306;
    result = llvm::MCContext::getOrCreateSymbol(v13, v19);
    *((_QWORD *)v7 + 5) = result;
  }
  return result;
}

BOOL llvm::MCStreamer::emitCVFileDirective(uint64_t a1, unsigned int a2, int8x16_t *a3, const unsigned __int8 *a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;

  llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  return llvm::CodeViewContext::addFile(v14, a1, a2, a3, a4, a5, a6, a7);
}

BOOL llvm::MCStreamer::emitCVFuncIdDirective(llvm::MCContext **this, unsigned int a2)
{
  llvm::CodeViewContext *v3;

  llvm::MCContext::getCVContext(this[1]);
  return llvm::CodeViewContext::recordFunctionId(v3, a2);
}

BOOL llvm::MCStreamer::emitCVInlineSiteIdDirective(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7)
{
  llvm::CodeViewContext *v14;
  uint64_t CVFunctionInfo;
  llvm::MCContext *v16;
  llvm::CodeViewContext *v17;
  const char *v19;
  __int16 v20;

  llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  CVFunctionInfo = llvm::CodeViewContext::getCVFunctionInfo(v14, a3);
  v16 = *(llvm::MCContext **)(a1 + 8);
  if (CVFunctionInfo)
  {
    llvm::MCContext::getCVContext(v16);
    return llvm::CodeViewContext::recordInlinedCallSiteId(v17, a2, a3, a4, a5, a6);
  }
  else
  {
    v19 = "parent function id not introduced by .cv_func_id or .cv_inline_site_id";
    v20 = 259;
    llvm::MCContext::reportError((uint64_t)v16, a7, (uint64_t)&v19);
    return 1;
  }
}

void llvm::MCStreamer::emitCVDefRangeDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 4421;
  v5 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)a1 + 776))(a1, a2, a3, &v4, 10);
}

{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 4419;
  v5 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)a1 + 776))(a1, a2, a3, &v4, 10);
}

void llvm::MCStreamer::emitCVDefRangeDirective(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 4417;
  v5 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)a1 + 776))(a1, a2, a3, &v4, 6);
}

{
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 4418;
  v5 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)a1 + 776))(a1, a2, a3, &v4, 6);
}

uint64_t llvm::MCStreamer::initSections(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 168))(a1, *(_QWORD *)(*(_QWORD *)(a1[1] + 160) + 24), 0);
}

_QWORD *llvm::MCStreamer::emitLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  void *AssociatedFragment;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;

  v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 4) != 0)
  {
    if ((*(_DWORD *)(a2 + 8) & 0x7000) == 0x2000)
    {
      *(_QWORD *)(a2 + 24) = 0;
      v6 &= 0xFFFF8FFF;
    }
    *(_QWORD *)a2 = 0;
    v6 &= ~4u;
    *(_DWORD *)(a2 + 8) = v6;
    if ((v6 & 0x7080) != 0x2000)
      goto LABEL_9;
LABEL_8:
    *(_DWORD *)(a2 + 8) = v6 | 8;
    AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
    *(_QWORD *)a2 = AssociatedFragment;
    v6 = *(_DWORD *)(a2 + 8);
    if (AssociatedFragment)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*(_QWORD *)a2)
    goto LABEL_10;
  if ((*(_DWORD *)(a2 + 8) & 0x7080) == 0x2000)
    goto LABEL_8;
LABEL_9:
  if ((v6 & 0x7000) != 0x2000)
  {
    v14 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v14)
    {
      *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v14 - 32) + 48;
      result = *(_QWORD **)(a1 + 16);
      if (!result)
        return result;
    }
    else
    {
      *(_QWORD *)a2 = 48;
      result = *(_QWORD **)(a1 + 16);
      if (!result)
        return result;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a2);
  }
LABEL_10:
  v8 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
  {
    v11 = *(uint64_t **)(a2 - 8);
    v12 = *v11;
    v9 = v11 + 2;
    v10 = v12;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v15[0] = "symbol '";
  v15[2] = v9;
  v15[3] = v10;
  v16 = 1283;
  v17[0] = v15;
  v17[2] = "' is already defined";
  v18 = 770;
  return llvm::MCContext::reportError(v8, a3, (uint64_t)v17);
}

void llvm::MCStreamer::emitCFIStartProc(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  uint64_t *v21;
  void **v22;
  void **v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *__p[2];
  _BYTE v29[34];

  v4 = (_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v6)
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v6 - 32) != *(_QWORD *)(*v4 + 16 * v5 - 8))
        goto LABEL_4;
    }
    else if (*(_QWORD *)(*v4 + 16 * v5 - 8))
    {
      goto LABEL_4;
    }
    v25 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v26 = "starting new .cfi frame before finishing the previous one";
    LOWORD(__p[0]) = 259;
    llvm::MCContext::reportError(v25, a3, (uint64_t)&v26);
    return;
  }
LABEL_4:
  *(_OWORD *)__p = 0u;
  memset(v29, 0, 26);
  v26 = 0u;
  v27 = 0u;
  *(_DWORD *)&v29[28] = 0x7FFFFFFF;
  *(_WORD *)&v29[32] = 0;
  v29[25] = a2;
  (**(void (***)(uint64_t, __int128 *))a1)(a1, &v26);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  if (v7)
  {
    v8 = *(_DWORD **)(v7 + 448);
    for (i = *(_DWORD **)(v7 + 456); v8 != i; v8 += 22)
    {
      if (*v8 <= 7u && ((1 << *v8) & 0xB0) != 0)
        *(_DWORD *)&v29[8] = v8[4];
    }
  }
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (uint64_t)(v11 - *(_QWORD *)(a1 + 24)) >> 3;
  v13 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v13 - 32);
    v15 = 0x2E8BA2E8BA2E8BA3 * v12;
    v16 = *(unsigned int *)(a1 + 56);
    if (v16 < *(_DWORD *)(a1 + 60))
      goto LABEL_15;
  }
  else
  {
    v14 = 0;
    v15 = 0x2E8BA2E8BA2E8BA3 * v12;
    v16 = *(unsigned int *)(a1 + 56);
    if (v16 < *(_DWORD *)(a1 + 60))
    {
LABEL_15:
      v17 = (uint64_t *)(*v4 + 16 * v16);
      *v17 = v15;
      v17[1] = v14;
      *(_DWORD *)(a1 + 56) = v16 + 1;
      if (v11 < *(_QWORD *)(a1 + 40))
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, (void *)(a1 + 64), v16 + 1, 16);
  v21 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 56));
  *v21 = v15;
  v21[1] = v14;
  ++*(_DWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 < *(_QWORD *)(a1 + 40))
  {
LABEL_16:
    v18 = v27;
    *(_OWORD *)v11 = v26;
    *(_OWORD *)(v11 + 16) = v18;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>((std::string::size_type *)(v11 + 32), (uint64_t)__p[0], (uint64_t)__p[1], 0x2E8BA2E8BA2E8BA3 * (((char *)__p[1] - (char *)__p[0]) >> 3));
    v19 = *(_OWORD *)&v29[8];
    *(_OWORD *)(v11 + 66) = *(_OWORD *)&v29[18];
    *(_OWORD *)(v11 + 56) = v19;
    *(_QWORD *)(a1 + 32) = v11 + 88;
    v20 = (void **)__p[0];
    if (!__p[0])
      return;
    goto LABEL_21;
  }
LABEL_20:
  *(_QWORD *)(a1 + 32) = std::vector<llvm::MCDwarfFrameInfo>::__push_back_slow_path<llvm::MCDwarfFrameInfo const&>((void **)(a1 + 24), (uint64_t)&v26);
  v20 = (void **)__p[0];
  if (__p[0])
  {
LABEL_21:
    v22 = (void **)__p[1];
    v23 = v20;
    if (__p[1] == v20)
    {
LABEL_30:
      __p[1] = v20;
      operator delete(v23);
      return;
    }
    while (*((char *)v22 - 1) < 0)
    {
      operator delete(*(v22 - 3));
      v24 = *(v22 - 6);
      if (v24)
        goto LABEL_28;
LABEL_23:
      v22 -= 11;
      if (v22 == v20)
      {
        v23 = (void **)__p[0];
        goto LABEL_30;
      }
    }
    v24 = *(v22 - 6);
    if (!v24)
      goto LABEL_23;
LABEL_28:
    *(v22 - 5) = v24;
    operator delete(v24);
    goto LABEL_23;
  }
}

_QWORD *llvm::MCStreamer::emitCFIEndProc(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v1 = this;
  v2 = *((unsigned int *)this + 14);
  if ((_DWORD)v2)
  {
    v3 = this[3];
    if (v3)
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*this + 8))(this, v3 + 88 * *(_QWORD *)(this[6] + 16 * v2 - 16));
      --*((_DWORD *)v1 + 14);
    }
  }
  else
  {
    v4 = this[1];
    v5 = (uint64_t *)v1[36];
    if (v5)
      v6 = *v5;
    else
      v6 = 0;
    v7 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v8 = 259;
    return llvm::MCContext::reportError(v4, v6, (uint64_t)&v7);
  }
  return this;
}

void llvm::MCStreamer::emitCFIEndProcImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = 1;
}

uint64_t llvm::MCStreamer::emitCFILabel(llvm::MCStreamer *this)
{
  return 1;
}

void llvm::MCStreamer::emitCFIDefCfa(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v32;
  const char *v33;
  __int16 v34;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v25) = 7;
  *((_QWORD *)&v25 + 1) = v8;
  *(_QWORD *)&v26 = __PAIR64__(a3, a2);
  DWORD2(v26) = -1;
  HIBYTE(v32) = 0;
  v27 = a4;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9 - 16);
      v12 = v10 + 88 * v11;
      v13 = *(_QWORD *)(v12 + 40);
      v14 = *(_QWORD *)(v12 + 48);
      v15 = (unint64_t *)(v12 + 40);
      if (v13 >= v14)
      {
        v22 = v10 + 88 * v11;
        v23 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v22 + 32), &v25);
        v24 = SHIBYTE(v32);
        *v15 = v23;
        *(_DWORD *)(v22 + 56) = a2;
        if (v24 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v16 = v26;
        v17 = v27;
        *(_OWORD *)v13 = v25;
        *(_OWORD *)(v13 + 16) = v16;
        *(_QWORD *)(v13 + 32) = v17;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 56) = 0;
        v18 = *(_OWORD *)__p;
        *(_QWORD *)(v13 + 80) = v32;
        *(_OWORD *)(v13 + 64) = v18;
        *v15 = v13 + 88;
        *(_DWORD *)(v10 + 88 * v11 + 56) = a2;
      }
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(uint64_t **)(a1 + 288);
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    v33 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v34 = 259;
    llvm::MCContext::reportError(v19, v21, (uint64_t)&v33);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void llvm::MCStreamer::emitCFIDefCfaOffset(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  __int128 v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  void *v22[2];
  __int128 v23;
  void *__p[2];
  uint64_t v25;
  const char *v26;
  __int16 v27;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v20) = 6;
  *((_QWORD *)&v20 + 1) = v4;
  LODWORD(v21) = 0;
  *(_QWORD *)((char *)&v21 + 4) = a2 | 0xFFFFFFFF00000000;
  HIBYTE(v25) = 0;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  LOBYTE(__p[0]) = 0;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v5 - 16);
      v8 = v6 + 88 * v7;
      v9 = *(_QWORD *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 48);
      v11 = (unint64_t *)(v8 + 40);
      if (v9 >= v10)
      {
        v18 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v6 + 88 * v7 + 32), &v20);
        v19 = SHIBYTE(v25);
        *v11 = v18;
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = v21;
        v13 = v22[0];
        *(_OWORD *)v9 = v20;
        *(_OWORD *)(v9 + 16) = v12;
        *(_QWORD *)(v9 + 32) = v13;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        v14 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 80) = v25;
        *(_OWORD *)(v9 + 64) = v14;
        *v11 = v9 + 88;
      }
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(uint64_t **)(a1 + 288);
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    v26 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v27 = 259;
    llvm::MCContext::reportError(v15, v17, (uint64_t)&v26);
  }
  if (v22[1])
  {
    *(void **)&v23 = v22[1];
    operator delete(v22[1]);
  }
}

void llvm::MCStreamer::emitCFIAdjustCfaOffset(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  const char *v30;
  __int16 v31;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v22) = 9;
  *((_QWORD *)&v22 + 1) = v6;
  LODWORD(v23) = 0;
  *(_QWORD *)((char *)&v23 + 4) = a2 | 0xFFFFFFFF00000000;
  HIBYTE(v29) = 0;
  v24 = a3;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v7 - 16);
      v10 = v8 + 88 * v9;
      v11 = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = (unint64_t *)(v10 + 40);
      if (v11 >= v12)
      {
        v20 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v8 + 88 * v9 + 32), &v22);
        v21 = SHIBYTE(v29);
        *v13 = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v14 = v23;
        v15 = v24;
        *(_OWORD *)v11 = v22;
        *(_OWORD *)(v11 + 16) = v14;
        *(_QWORD *)(v11 + 32) = v15;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        v16 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 80) = v29;
        *(_OWORD *)(v11 + 64) = v16;
        *v13 = v11 + 88;
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(uint64_t **)(a1 + 288);
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    v30 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v31 = 259;
    llvm::MCContext::reportError(v17, v19, (uint64_t)&v30);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void llvm::MCStreamer::emitCFIDefCfaRegister(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  const char *v31;
  __int16 v32;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v23) = 5;
  *((_QWORD *)&v23 + 1) = v6;
  LODWORD(v24) = a2;
  *(_QWORD *)((char *)&v24 + 4) = 0xFFFFFFFF00000000;
  HIBYTE(v30) = 0;
  v25 = a3;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v7 - 16);
      v10 = v8 + 88 * v9;
      v11 = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = (unint64_t *)(v10 + 40);
      if (v11 >= v12)
      {
        v20 = v8 + 88 * v9;
        v21 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v20 + 32), &v23);
        v22 = SHIBYTE(v30);
        *v13 = v21;
        *(_DWORD *)(v20 + 56) = a2;
        if (v22 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v14 = v24;
        v15 = v25;
        *(_OWORD *)v11 = v23;
        *(_OWORD *)(v11 + 16) = v14;
        *(_QWORD *)(v11 + 32) = v15;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        v16 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 80) = v30;
        *(_OWORD *)(v11 + 64) = v16;
        *v13 = v11 + 88;
        *(_DWORD *)(v8 + 88 * v9 + 56) = a2;
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(uint64_t **)(a1 + 288);
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    v31 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v32 = 259;
    llvm::MCContext::reportError(v17, v19, (uint64_t)&v31);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void llvm::MCStreamer::emitCFILLVMDefAspaceCfa(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30[2];
  void *__p[4];
  const char *v32;
  __int16 v33;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v27) = 4;
  *((_QWORD *)&v27 + 1) = v10;
  *(_QWORD *)&v28 = __PAIR64__(a3, a2);
  DWORD2(v28) = a4;
  v29 = a5;
  *(_OWORD *)v30 = 0u;
  memset(__p, 0, sizeof(__p));
  v11 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11 - 16);
      v14 = v12 + 88 * v13;
      v15 = *(_QWORD *)(v14 + 40);
      v16 = *(_QWORD *)(v14 + 48);
      v17 = (unint64_t *)(v14 + 40);
      if (v15 >= v16)
      {
        v24 = v12 + 88 * v13;
        v25 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v24 + 32), &v27);
        v26 = SHIBYTE(__p[3]);
        *v17 = v25;
        *(_DWORD *)(v24 + 56) = a2;
        if (v26 < 0)
          operator delete(__p[1]);
      }
      else
      {
        v18 = v28;
        v19 = v29;
        *(_OWORD *)v15 = v27;
        *(_OWORD *)(v15 + 16) = v18;
        *(_QWORD *)(v15 + 32) = v19;
        *(_QWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        v20 = *(_OWORD *)&__p[1];
        *(void **)(v15 + 80) = __p[3];
        *(_OWORD *)(v15 + 64) = v20;
        *v17 = v15 + 88;
        *(_DWORD *)(v12 + 88 * v13 + 56) = a2;
      }
    }
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(uint64_t **)(a1 + 288);
    if (v22)
      v23 = *v22;
    else
      v23 = 0;
    v32 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v33 = 259;
    llvm::MCContext::reportError(v21, v23, (uint64_t)&v32);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
}

void llvm::MCStreamer::emitCFIOffset(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  const char *v32;
  __int16 v33;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v24) = 3;
  *((_QWORD *)&v24 + 1) = v8;
  *(_QWORD *)&v25 = __PAIR64__(a3, a2);
  DWORD2(v25) = -1;
  HIBYTE(v31) = 0;
  v26 = a4;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9 - 16);
      v12 = v10 + 88 * v11;
      v13 = *(_QWORD *)(v12 + 40);
      v14 = *(_QWORD *)(v12 + 48);
      v15 = (unint64_t *)(v12 + 40);
      if (v13 >= v14)
      {
        v22 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v10 + 88 * v11 + 32), &v24);
        v23 = SHIBYTE(v31);
        *v15 = v22;
        if (v23 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v16 = v25;
        v17 = v26;
        *(_OWORD *)v13 = v24;
        *(_OWORD *)(v13 + 16) = v16;
        *(_QWORD *)(v13 + 32) = v17;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 56) = 0;
        v18 = *(_OWORD *)__p;
        *(_QWORD *)(v13 + 80) = v31;
        *(_OWORD *)(v13 + 64) = v18;
        *v15 = v13 + 88;
      }
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(uint64_t **)(a1 + 288);
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    v32 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v33 = 259;
    llvm::MCContext::reportError(v19, v21, (uint64_t)&v32);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void llvm::MCStreamer::emitCFIRelOffset(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  const char *v32;
  __int16 v33;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v24) = 8;
  *((_QWORD *)&v24 + 1) = v8;
  *(_QWORD *)&v25 = __PAIR64__(a3, a2);
  DWORD2(v25) = -1;
  HIBYTE(v31) = 0;
  v26 = a4;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9 - 16);
      v12 = v10 + 88 * v11;
      v13 = *(_QWORD *)(v12 + 40);
      v14 = *(_QWORD *)(v12 + 48);
      v15 = (unint64_t *)(v12 + 40);
      if (v13 >= v14)
      {
        v22 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v10 + 88 * v11 + 32), &v24);
        v23 = SHIBYTE(v31);
        *v15 = v22;
        if (v23 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v16 = v25;
        v17 = v26;
        *(_OWORD *)v13 = v24;
        *(_OWORD *)(v13 + 16) = v16;
        *(_QWORD *)(v13 + 32) = v17;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 56) = 0;
        v18 = *(_OWORD *)__p;
        *(_QWORD *)(v13 + 80) = v31;
        *(_OWORD *)(v13 + 64) = v18;
        *v15 = v13 + 88;
      }
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(uint64_t **)(a1 + 288);
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    v32 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v33 = 259;
    llvm::MCContext::reportError(v19, v21, (uint64_t)&v32);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

_QWORD *llvm::MCStreamer::emitCFIPersonality(_QWORD *this, const llvm::MCSymbol *a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;

  v3 = this;
  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4)
  {
    v5 = this[3];
    if (v5)
    {
      v6 = v5 + 88 * *(_QWORD *)(this[6] + 16 * v4 - 16);
      *(_QWORD *)(v6 + 16) = a2;
      *(_DWORD *)(v6 + 60) = a3;
    }
  }
  else
  {
    v7 = this[1];
    v8 = (uint64_t *)v3[36];
    if (v8)
      v9 = *v8;
    else
      v9 = 0;
    v10 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v11 = 259;
    return llvm::MCContext::reportError(v7, v9, (uint64_t)&v10);
  }
  return this;
}

_QWORD *llvm::MCStreamer::emitCFILsda(_QWORD *this, const llvm::MCSymbol *a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;

  v3 = this;
  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4)
  {
    v5 = this[3];
    if (v5)
    {
      v6 = v5 + 88 * *(_QWORD *)(this[6] + 16 * v4 - 16);
      *(_QWORD *)(v6 + 24) = a2;
      *(_DWORD *)(v6 + 64) = a3;
    }
  }
  else
  {
    v7 = this[1];
    v8 = (uint64_t *)v3[36];
    if (v8)
      v9 = *v8;
    else
      v9 = 0;
    v10 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v11 = 259;
    return llvm::MCContext::reportError(v7, v9, (uint64_t)&v10);
  }
  return this;
}

void llvm::MCStreamer::emitCFIRememberState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  const char *v28;
  __int16 v29;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v20) = 1;
  *((_QWORD *)&v20 + 1) = v4;
  *(_QWORD *)&v21 = 0;
  DWORD2(v21) = -1;
  HIBYTE(v27) = 0;
  v22 = a2;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LOBYTE(__p[0]) = 0;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v5 - 16);
      v8 = v6 + 88 * v7;
      v9 = *(_QWORD *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 48);
      v11 = (unint64_t *)(v8 + 40);
      if (v9 >= v10)
      {
        v18 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v6 + 88 * v7 + 32), &v20);
        v19 = SHIBYTE(v27);
        *v11 = v18;
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = v21;
        v13 = v22;
        *(_OWORD *)v9 = v20;
        *(_OWORD *)(v9 + 16) = v12;
        *(_QWORD *)(v9 + 32) = v13;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        v14 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 80) = v27;
        *(_OWORD *)(v9 + 64) = v14;
        *v11 = v9 + 88;
      }
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(uint64_t **)(a1 + 288);
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    v28 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v29 = 259;
    llvm::MCContext::reportError(v15, v17, (uint64_t)&v28);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void llvm::MCStreamer::emitCFIRestoreState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  const char *v28;
  __int16 v29;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v20) = 2;
  *((_QWORD *)&v20 + 1) = v4;
  *(_QWORD *)&v21 = 0;
  DWORD2(v21) = -1;
  HIBYTE(v27) = 0;
  v22 = a2;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LOBYTE(__p[0]) = 0;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v5 - 16);
      v8 = v6 + 88 * v7;
      v9 = *(_QWORD *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 48);
      v11 = (unint64_t *)(v8 + 40);
      if (v9 >= v10)
      {
        v18 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v6 + 88 * v7 + 32), &v20);
        v19 = SHIBYTE(v27);
        *v11 = v18;
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = v21;
        v13 = v22;
        *(_OWORD *)v9 = v20;
        *(_OWORD *)(v9 + 16) = v12;
        *(_QWORD *)(v9 + 32) = v13;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        v14 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 80) = v27;
        *(_OWORD *)(v9 + 64) = v14;
        *v11 = v9 + 88;
      }
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(uint64_t **)(a1 + 288);
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    v28 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v29 = 259;
    llvm::MCContext::reportError(v15, v17, (uint64_t)&v28);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void llvm::MCStreamer::emitCFISameValue(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  const char *v30;
  __int16 v31;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v22) = 0;
  *((_QWORD *)&v22 + 1) = v6;
  LODWORD(v23) = a2;
  *(_QWORD *)((char *)&v23 + 4) = 0xFFFFFFFF00000000;
  HIBYTE(v29) = 0;
  v24 = a3;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v7 - 16);
      v10 = v8 + 88 * v9;
      v11 = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = (unint64_t *)(v10 + 40);
      if (v11 >= v12)
      {
        v20 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v8 + 88 * v9 + 32), &v22);
        v21 = SHIBYTE(v29);
        *v13 = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v14 = v23;
        v15 = v24;
        *(_OWORD *)v11 = v22;
        *(_OWORD *)(v11 + 16) = v14;
        *(_QWORD *)(v11 + 32) = v15;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        v16 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 80) = v29;
        *(_OWORD *)(v11 + 64) = v16;
        *v13 = v11 + 88;
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(uint64_t **)(a1 + 288);
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    v30 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v31 = 259;
    llvm::MCContext::reportError(v17, v19, (uint64_t)&v30);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void llvm::MCStreamer::emitCFIRestore(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  const char *v30;
  __int16 v31;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v22) = 11;
  *((_QWORD *)&v22 + 1) = v6;
  LODWORD(v23) = a2;
  *(_QWORD *)((char *)&v23 + 4) = 0xFFFFFFFF00000000;
  HIBYTE(v29) = 0;
  v24 = a3;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v7 - 16);
      v10 = v8 + 88 * v9;
      v11 = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = (unint64_t *)(v10 + 40);
      if (v11 >= v12)
      {
        v20 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v8 + 88 * v9 + 32), &v22);
        v21 = SHIBYTE(v29);
        *v13 = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v14 = v23;
        v15 = v24;
        *(_OWORD *)v11 = v22;
        *(_OWORD *)(v11 + 16) = v14;
        *(_QWORD *)(v11 + 32) = v15;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        v16 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 80) = v29;
        *(_OWORD *)(v11 + 64) = v16;
        *v13 = v11 + 88;
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(uint64_t **)(a1 + 288);
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    v30 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v31 = 259;
    llvm::MCContext::reportError(v17, v19, (uint64_t)&v30);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void llvm::MCStreamer::emitCFIEscape(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  void *__p[2];
  uint64_t v36;
  const char *v37;
  __int16 v38;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v29) = 10;
  *((_QWORD *)&v29 + 1) = v8;
  *(_QWORD *)&v30 = 0;
  DWORD2(v30) = -1;
  v31 = a4;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  if (!a3)
  {
    v10 = 0;
    v9 = 0;
    HIBYTE(v36) = 0;
    LOBYTE(__p[0]) = 0;
    v11 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v11)
      goto LABEL_4;
LABEL_11:
    v24 = *(_QWORD *)(a1 + 8);
    v25 = *(uint64_t **)(a1 + 288);
    if (v25)
      v26 = *v25;
    else
      v26 = 0;
    v37 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v38 = 259;
    llvm::MCContext::reportError(v24, v26, (uint64_t)&v37);
    goto LABEL_17;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_20;
  v9 = (char *)operator new(a3);
  v10 = &v9[a3];
  v32 = v9;
  v34 = &v9[a3];
  memcpy(v9, a2, a3);
  v33 = &v9[a3];
  HIBYTE(v36) = 0;
  LOBYTE(__p[0]) = 0;
  v11 = *(unsigned int *)(a1 + 56);
  if (!(_DWORD)v11)
    goto LABEL_11;
LABEL_4:
  v12 = *(_QWORD *)(a1 + 24);
  if (!v12)
    goto LABEL_17;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11 - 16);
  v14 = v12 + 88 * v13;
  v17 = *(_QWORD *)(v14 + 40);
  v15 = *(_QWORD *)(v14 + 48);
  v16 = (unint64_t *)(v14 + 40);
  if (v17 < v15)
  {
    v18 = v30;
    v19 = v31;
    *(_OWORD *)v17 = v29;
    *(_OWORD *)(v17 + 16) = v18;
    *(_QWORD *)(v17 + 32) = v19;
    *(_QWORD *)(v17 + 40) = 0;
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = 0;
    v20 = v10 - v9;
    if (v10 == v9)
    {
LABEL_9:
      v23 = *(_OWORD *)__p;
      *(_QWORD *)(v17 + 80) = v36;
      *(_OWORD *)(v17 + 64) = v23;
      *v16 = v17 + 88;
      goto LABEL_17;
    }
    if ((v20 & 0x8000000000000000) == 0)
    {
      v21 = (char *)operator new(v10 - v9);
      *(_QWORD *)(v17 + 40) = v21;
      *(_QWORD *)(v17 + 48) = v21;
      v22 = &v21[v20];
      *(_QWORD *)(v17 + 56) = &v21[v20];
      memcpy(v21, v9, v20);
      *(_QWORD *)(v17 + 48) = v22;
      goto LABEL_9;
    }
LABEL_20:
    abort();
  }
  v27 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v12 + 88 * v13 + 32), &v29);
  v28 = SHIBYTE(v36);
  *v16 = v27;
  if (v28 < 0)
    operator delete(__p[0]);
LABEL_17:
  if (v32)
  {
    v33 = (char *)v32;
    operator delete(v32);
  }
}

void llvm::MCStreamer::emitCFIGnuArgsSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  const char *v30;
  __int16 v31;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v22) = 16;
  *((_QWORD *)&v22 + 1) = v6;
  LODWORD(v23) = 0;
  *(_QWORD *)((char *)&v23 + 4) = a2 | 0xFFFFFFFF00000000;
  HIBYTE(v29) = 0;
  v24 = a3;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v7 - 16);
      v10 = v8 + 88 * v9;
      v11 = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = (unint64_t *)(v10 + 40);
      if (v11 >= v12)
      {
        v20 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v8 + 88 * v9 + 32), &v22);
        v21 = SHIBYTE(v29);
        *v13 = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v14 = v23;
        v15 = v24;
        *(_OWORD *)v11 = v22;
        *(_OWORD *)(v11 + 16) = v14;
        *(_QWORD *)(v11 + 32) = v15;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        v16 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 80) = v29;
        *(_OWORD *)(v11 + 64) = v16;
        *v13 = v11 + 88;
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(uint64_t **)(a1 + 288);
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    v30 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v31 = 259;
    llvm::MCContext::reportError(v17, v19, (uint64_t)&v30);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

_QWORD *llvm::MCStreamer::emitCFISignalFrame(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v1 = this;
  v2 = *((unsigned int *)this + 14);
  if ((_DWORD)v2)
  {
    v3 = this[3];
    if (v3)
      *(_BYTE *)(v3 + 88 * *(_QWORD *)(this[6] + 16 * v2 - 16) + 72) = 1;
  }
  else
  {
    v4 = this[1];
    v5 = (uint64_t *)v1[36];
    if (v5)
      v6 = *v5;
    else
      v6 = 0;
    v7 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v8 = 259;
    return llvm::MCContext::reportError(v4, v6, (uint64_t)&v7);
  }
  return this;
}

void llvm::MCStreamer::emitCFIUndefined(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  const char *v30;
  __int16 v31;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v22) = 12;
  *((_QWORD *)&v22 + 1) = v6;
  LODWORD(v23) = a2;
  *(_QWORD *)((char *)&v23 + 4) = 0xFFFFFFFF00000000;
  HIBYTE(v29) = 0;
  v24 = a3;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v7 - 16);
      v10 = v8 + 88 * v9;
      v11 = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = (unint64_t *)(v10 + 40);
      if (v11 >= v12)
      {
        v20 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v8 + 88 * v9 + 32), &v22);
        v21 = SHIBYTE(v29);
        *v13 = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v14 = v23;
        v15 = v24;
        *(_OWORD *)v11 = v22;
        *(_OWORD *)(v11 + 16) = v14;
        *(_QWORD *)(v11 + 32) = v15;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        v16 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 80) = v29;
        *(_OWORD *)(v11 + 64) = v16;
        *v13 = v11 + 88;
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(uint64_t **)(a1 + 288);
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    v30 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v31 = 259;
    llvm::MCContext::reportError(v17, v19, (uint64_t)&v30);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void llvm::MCStreamer::emitCFIRegister(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27[2];
  void *__p[4];
  const char *v29;
  __int16 v30;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v24) = 13;
  *((_QWORD *)&v24 + 1) = v8;
  *(_QWORD *)&v25 = __PAIR64__(a3, a2);
  DWORD2(v25) = -1;
  v26 = a4;
  *(_OWORD *)v27 = 0u;
  memset(__p, 0, sizeof(__p));
  v9 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9 - 16);
      v12 = v10 + 88 * v11;
      v13 = *(_QWORD *)(v12 + 40);
      v14 = *(_QWORD *)(v12 + 48);
      v15 = (unint64_t *)(v12 + 40);
      if (v13 >= v14)
      {
        v22 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v10 + 88 * v11 + 32), &v24);
        v23 = SHIBYTE(__p[3]);
        *v15 = v22;
        if (v23 < 0)
          operator delete(__p[1]);
      }
      else
      {
        v16 = v25;
        v17 = v26;
        *(_OWORD *)v13 = v24;
        *(_OWORD *)(v13 + 16) = v16;
        *(_QWORD *)(v13 + 32) = v17;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 56) = 0;
        v18 = *(_OWORD *)&__p[1];
        *(void **)(v13 + 80) = __p[3];
        *(_OWORD *)(v13 + 64) = v18;
        *v15 = v13 + 88;
      }
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(uint64_t **)(a1 + 288);
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    v29 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v30 = 259;
    llvm::MCContext::reportError(v19, v21, (uint64_t)&v29);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
}

void llvm::MCStreamer::emitCFIWindowSave(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  const char *v28;
  __int16 v29;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v20) = 14;
  *((_QWORD *)&v20 + 1) = v4;
  *(_QWORD *)&v21 = 0;
  DWORD2(v21) = -1;
  HIBYTE(v27) = 0;
  v22 = a2;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LOBYTE(__p[0]) = 0;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v5 - 16);
      v8 = v6 + 88 * v7;
      v9 = *(_QWORD *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 48);
      v11 = (unint64_t *)(v8 + 40);
      if (v9 >= v10)
      {
        v18 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v6 + 88 * v7 + 32), &v20);
        v19 = SHIBYTE(v27);
        *v11 = v18;
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = v21;
        v13 = v22;
        *(_OWORD *)v9 = v20;
        *(_OWORD *)(v9 + 16) = v12;
        *(_QWORD *)(v9 + 32) = v13;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        v14 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 80) = v27;
        *(_OWORD *)(v9 + 64) = v14;
        *v11 = v9 + 88;
      }
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(uint64_t **)(a1 + 288);
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    v28 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v29 = 259;
    llvm::MCContext::reportError(v15, v17, (uint64_t)&v28);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void llvm::MCStreamer::emitCFINegateRAState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  const char *v28;
  __int16 v29;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v20) = 15;
  *((_QWORD *)&v20 + 1) = v4;
  *(_QWORD *)&v21 = 0;
  DWORD2(v21) = -1;
  HIBYTE(v27) = 0;
  v22 = a2;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LOBYTE(__p[0]) = 0;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v5 - 16);
      v8 = v6 + 88 * v7;
      v9 = *(_QWORD *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 48);
      v11 = (unint64_t *)(v8 + 40);
      if (v9 >= v10)
      {
        v18 = std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>((unint64_t *)(v6 + 88 * v7 + 32), &v20);
        v19 = SHIBYTE(v27);
        *v11 = v18;
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = v21;
        v13 = v22;
        *(_OWORD *)v9 = v20;
        *(_OWORD *)(v9 + 16) = v12;
        *(_QWORD *)(v9 + 32) = v13;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        v14 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 80) = v27;
        *(_OWORD *)(v9 + 64) = v14;
        *v11 = v9 + 88;
      }
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(uint64_t **)(a1 + 288);
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    v28 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v29 = 259;
    llvm::MCContext::reportError(v15, v17, (uint64_t)&v28);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

_QWORD *llvm::MCStreamer::emitCFIReturnColumn(_QWORD *this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v2 = this;
  v3 = *((unsigned int *)this + 14);
  if ((_DWORD)v3)
  {
    v4 = this[3];
    if (v4)
      *(_DWORD *)(v4 + 88 * *(_QWORD *)(this[6] + 16 * v3 - 16) + 76) = a2;
  }
  else
  {
    v5 = this[1];
    v6 = (uint64_t *)v2[36];
    if (v6)
      v7 = *v6;
    else
      v7 = 0;
    v8 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
    v9 = 259;
    return llvm::MCContext::reportError(v5, v7, (uint64_t)&v8);
  }
  return this;
}

llvm::WinEH::FrameInfo *llvm::MCStreamer::emitWinCFIStartProc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  llvm::WinEH::FrameInfo *result;
  uint64_t v10;
  uint64_t v11;
  llvm::WinEH::FrameInfo **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::WinEH::FrameInfo *v17[4];
  __int16 v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 144);
  if (*(_DWORD *)(v5 + 420) != 4 || ((v6 = *(_DWORD *)(v5 + 428), v6 != 6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    v17[0] = (llvm::WinEH::FrameInfo *)".seh_* directives are not supported on this target";
    v18 = 259;
    return (llvm::WinEH::FrameInfo *)llvm::MCContext::reportError(v4, a3, (uint64_t)v17);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 104);
    if (v10 && !*(_QWORD *)(v10 + 8))
    {
      v17[0] = (llvm::WinEH::FrameInfo *)"Starting a function before ending the previous one!";
      v18 = 259;
      llvm::MCContext::reportError(v4, a3, (uint64_t)v17);
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    v12 = *(llvm::WinEH::FrameInfo ***)(a1 + 88);
    *(_QWORD *)(a1 + 112) = ((uint64_t)v12 - *(_QWORD *)(a1 + 80)) >> 3;
    result = (llvm::WinEH::FrameInfo *)operator new(0xB0uLL);
    *(_QWORD *)result = v11;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = a2;
    *(_OWORD *)((char *)result + 40) = 0u;
    *(_OWORD *)((char *)result + 56) = 0u;
    *((_QWORD *)result + 9) = 0xFFFFFFFF00000000;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_DWORD *)result + 32) = 0;
    *((_QWORD *)result + 17) = (char *)result + 152;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 10) = 0u;
    v17[0] = result;
    if ((unint64_t)v12 >= *(_QWORD *)(a1 + 96))
    {
      v13 = std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__emplace_back_slow_path<std::unique_ptr<llvm::WinEH::FrameInfo>>((_QWORD *)(a1 + 80), (uint64_t *)v17);
      result = v17[0];
      *(_QWORD *)(a1 + 88) = v13;
      v17[0] = 0;
      if (result)
        llvm::WinEH::FrameInfo::~FrameInfo(result);
    }
    else
    {
      *v12 = result;
      v13 = v12 + 1;
      *(_QWORD *)(a1 + 88) = v13;
    }
    v14 = *(v13 - 1);
    *(_QWORD *)(a1 + 104) = v14;
    v15 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v15)
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v15 - 32);
    else
      v16 = 0;
    *(_QWORD *)(v14 + 56) = v16;
  }
  return result;
}

_QWORD *llvm::MCStreamer::emitWinCFIEndProc(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  const char *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _QWORD v13[4];
  __int16 v14;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 144);
  if (*(_DWORD *)(v4 + 420) != 4 || ((v5 = *(_DWORD *)(v4 + 428), v5 != 6) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v7 = ".seh_* directives are not supported on this target";
LABEL_8:
    v13[0] = v7;
    v14 = 259;
    return llvm::MCContext::reportError(v3, a2, (uint64_t)v13);
  }
  v9 = (_QWORD *)a1[13];
  if (!v9 || v9[1])
  {
    v7 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if (v9[10])
  {
    v13[0] = "Not all chained regions terminated!";
    v14 = 259;
    llvm::MCContext::reportError(v3, a2, (uint64_t)v13);
  }
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v9[1] = v10;
  if (!v9[2])
    v9[2] = v10;
  v11 = a1[14];
  for (i = (uint64_t)(a1[11] - a1[10]) >> 3; i != v11; ++v11)
    (*(void (**)(_QWORD *, _QWORD))(*a1 + 16))(a1, *(_QWORD *)(a1[10] + 8 * v11));
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 168))(a1, v9[7], 0);
}

_QWORD *llvm::MCStreamer::emitWinCFIFuncletOrFuncEnd(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  const char *v7;
  _QWORD *result;
  _QWORD *v9;
  _QWORD v10[4];
  __int16 v11;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 144);
  if (*(_DWORD *)(v4 + 420) != 4 || ((v5 = *(_DWORD *)(v4 + 428), v5 != 6) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v7 = ".seh_* directives are not supported on this target";
LABEL_8:
    v10[0] = v7;
    v11 = 259;
    return llvm::MCContext::reportError(v3, a2, (uint64_t)v10);
  }
  v9 = (_QWORD *)a1[13];
  if (!v9 || v9[1])
  {
    v7 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if (v9[10])
  {
    v10[0] = "Not all chained regions terminated!";
    v11 = 259;
    llvm::MCContext::reportError(v3, a2, (uint64_t)v10);
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v9[2] = result;
  return result;
}

llvm::WinEH::FrameInfo *llvm::MCStreamer::emitWinCFIStartChained(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  const char *v7;
  llvm::WinEH::FrameInfo *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::WinEH::FrameInfo **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::WinEH::FrameInfo *v16[4];
  __int16 v17;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 144);
  if (*(_DWORD *)(v4 + 420) != 4 || ((v5 = *(_DWORD *)(v4 + 428), v5 != 6) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v7 = ".seh_* directives are not supported on this target";
LABEL_8:
    v16[0] = (llvm::WinEH::FrameInfo *)v7;
    v17 = 259;
    return (llvm::WinEH::FrameInfo *)llvm::MCContext::reportError(v3, a2, (uint64_t)v16);
  }
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9 || *(_QWORD *)(v9 + 8))
  {
    v7 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  result = (llvm::WinEH::FrameInfo *)operator new(0xB0uLL);
  v11 = *(_QWORD *)(v9 + 32);
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = 0;
  *(_QWORD *)result = v10;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 4) = v11;
  *(_OWORD *)((char *)result + 56) = 0u;
  *(_OWORD *)((char *)result + 40) = 0u;
  *((_QWORD *)result + 9) = 0xFFFFFFFF00000000;
  *((_QWORD *)result + 10) = v9;
  *(_OWORD *)((char *)result + 116) = 0u;
  *(_OWORD *)((char *)result + 104) = 0u;
  *(_OWORD *)((char *)result + 88) = 0u;
  *((_QWORD *)result + 17) = (char *)result + 152;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  v16[0] = result;
  v12 = *(llvm::WinEH::FrameInfo ***)(a1 + 88);
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 96))
  {
    v13 = std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__emplace_back_slow_path<std::unique_ptr<llvm::WinEH::FrameInfo>>((_QWORD *)(a1 + 80), (uint64_t *)v16);
    result = v16[0];
    *(_QWORD *)(a1 + 88) = v13;
    v16[0] = 0;
    if (result)
      llvm::WinEH::FrameInfo::~FrameInfo(result);
  }
  else
  {
    *v12 = result;
    v13 = v12 + 1;
    *(_QWORD *)(a1 + 88) = v13;
  }
  v14 = *(v13 - 1);
  *(_QWORD *)(a1 + 104) = v14;
  v15 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v15)
    *(_QWORD *)(v14 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v15 - 32);
  else
    *(_QWORD *)(v14 + 56) = 0;
  return result;
}

_QWORD *llvm::MCStreamer::emitWinCFIEndChained(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  const char *v7;
  _QWORD *result;
  uint64_t v9;
  const char *v10;
  __int16 v11;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 144);
  if (*(_DWORD *)(v4 + 420) != 4 || ((v5 = *(_DWORD *)(v4 + 428), v5 != 6) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v7 = ".seh_* directives are not supported on this target";
LABEL_8:
    v10 = v7;
    v11 = 259;
    return llvm::MCContext::reportError(v3, a2, (uint64_t)&v10);
  }
  v9 = a1[13];
  if (!v9 || *(_QWORD *)(v9 + 8))
  {
    v7 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v9 + 80))
  {
    v7 = "End of a chained region outside a chained region!";
    goto LABEL_8;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  *(_QWORD *)(v9 + 8) = result;
  a1[13] = *(_QWORD *)(v9 + 80);
  return result;
}

_QWORD *llvm::MCStreamer::emitWinEHHandler(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v7;
  int v8;
  BOOL v9;
  const char *v10;
  uint64_t v11;
  _QWORD v14[4];
  __int16 v15;

  result = *(_QWORD **)(a1 + 8);
  v7 = result[18];
  if (*(_DWORD *)(v7 + 420) != 4 || ((v8 = *(_DWORD *)(v7 + 428), v8 != 6) ? (v9 = v8 == 0) : (v9 = 1), v9))
  {
    v10 = ".seh_* directives are not supported on this target";
LABEL_8:
    v14[0] = v10;
    v15 = 259;
    return llvm::MCContext::reportError((uint64_t)result, a5, (uint64_t)v14);
  }
  v11 = *(_QWORD *)(a1 + 104);
  if (!v11 || *(_QWORD *)(v11 + 8))
  {
    v10 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if (*(_QWORD *)(v11 + 80))
  {
    v10 = "Chained unwind areas can't have handlers!";
    goto LABEL_8;
  }
  *(_QWORD *)(v11 + 24) = a2;
  if ((a3 & 1) == 0 && (a4 & 1) == 0)
  {
    v14[0] = "Don't know what kind of handler this is!";
    v15 = 259;
    result = llvm::MCContext::reportError((uint64_t)result, a5, (uint64_t)v14);
  }
  if (a3)
  {
    *(_BYTE *)(v11 + 72) = 1;
    if (a4)
LABEL_22:
      *(_BYTE *)(v11 + 73) = 1;
  }
  else if (a4)
  {
    goto LABEL_22;
  }
  return result;
}

_QWORD *llvm::MCStreamer::emitWinEHHandlerData(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  BOOL v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  __int16 v10;

  result = *(_QWORD **)(a1 + 8);
  v4 = result[18];
  if (*(_DWORD *)(v4 + 420) != 4 || ((v5 = *(_DWORD *)(v4 + 428), v5 != 6) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v7 = ".seh_* directives are not supported on this target";
LABEL_8:
    v9 = v7;
    v10 = 259;
    return llvm::MCContext::reportError((uint64_t)result, a2, (uint64_t)&v9);
  }
  v8 = *(_QWORD *)(a1 + 104);
  if (!v8 || *(_QWORD *)(v8 + 8))
  {
    v7 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if (*(_QWORD *)(v8 + 80))
  {
    v7 = "Chained unwind areas can't have handlers!";
    goto LABEL_8;
  }
  return result;
}

void llvm::MCStreamer::emitWinCFIPushReg(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v11;
  unsigned int SEHRegNum;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  const char *v24;
  __int16 v25;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 144);
  if (*(_DWORD *)(v5 + 420) != 4 || ((v6 = *(_DWORD *)(v5 + 428), v6 != 6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    v8 = ".seh_* directives are not supported on this target";
LABEL_8:
    v24 = v8;
    v25 = 259;
    llvm::MCContext::reportError(v4, a3, (uint64_t)&v24);
    return;
  }
  v9 = (_QWORD *)a1[13];
  if (!v9 || v9[1])
  {
    v8 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  SEHRegNum = llvm::MCRegisterInfo::getSEHRegNum(*(_QWORD *)(a1[1] + 152), a2);
  v13 = SEHRegNum;
  v15 = (uint64_t *)v9[12];
  v14 = v9[13];
  if ((unint64_t)v15 >= v14)
  {
    v17 = (_QWORD *)v9[11];
    v18 = 0xAAAAAAAAAAAAAAABLL * (v15 - v17) + 1;
    if (v18 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v17) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (char *)operator new(24 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * (v15 - v17)];
    *(_QWORD *)v22 = v11;
    *((_DWORD *)v22 + 2) = -1;
    *((_DWORD *)v22 + 3) = v13;
    *((_DWORD *)v22 + 4) = 0;
    v16 = v22 + 24;
    if (v15 != v17)
    {
      do
      {
        v23 = *(_OWORD *)(v15 - 3);
        *((_DWORD *)v22 - 2) = *((_DWORD *)v15 - 2);
        *(_OWORD *)(v22 - 24) = v23;
        v22 -= 24;
        v15 -= 3;
      }
      while (v15 != v17);
      v15 = (uint64_t *)v9[11];
    }
    v9[11] = v22;
    v9[12] = v16;
    v9[13] = &v21[24 * v20];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = v11;
    *((_DWORD *)v15 + 2) = -1;
    *(uint64_t *)((char *)v15 + 12) = SEHRegNum;
    v16 = v15 + 3;
  }
  v9[12] = v16;
}

void llvm::MCStreamer::emitWinCFISetFrame(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  const char *v9;
  uint64_t v10;
  uint64_t v13;
  int SEHRegNum;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  const char *v28;
  __int16 v29;

  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 144);
  if (*(_DWORD *)(v6 + 420) != 4 || ((v7 = *(_DWORD *)(v6 + 428), v7 != 6) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    v9 = ".seh_* directives are not supported on this target";
LABEL_8:
    v28 = v9;
    v29 = 259;
    llvm::MCContext::reportError(v5, a4, (uint64_t)&v28);
    return;
  }
  v10 = a1[13];
  if (!v10 || *(_QWORD *)(v10 + 8))
  {
    v9 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if ((*(_DWORD *)(v10 + 76) & 0x80000000) == 0)
  {
    v9 = "frame register and offset can be set at most once";
    goto LABEL_8;
  }
  if ((a3 & 0xF) != 0)
  {
    v9 = "offset is not a multiple of 16";
    goto LABEL_8;
  }
  if (a3 >= 0xF1)
  {
    v9 = "frame offset must be less than or equal to 240";
    goto LABEL_8;
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  SEHRegNum = llvm::MCRegisterInfo::getSEHRegNum(*(_QWORD *)(a1[1] + 152), a2);
  v15 = SEHRegNum;
  v17 = *(char **)(v10 + 88);
  v16 = *(char **)(v10 + 96);
  v18 = (v16 - v17) >> 3;
  v19 = 0xAAAAAAAAAAAAAAABLL * v18;
  *(_DWORD *)(v10 + 76) = -1431655765 * v18;
  v20 = *(_QWORD *)(v10 + 104);
  if ((unint64_t)v16 >= v20)
  {
    v22 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v17) >> 3);
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x555555555555555)
      v24 = 0xAAAAAAAAAAAAAAALL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v25 = (char *)operator new(24 * v24);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[24 * v19];
    *(_QWORD *)v26 = v13;
    *((_DWORD *)v26 + 2) = a3;
    *((_DWORD *)v26 + 3) = v15;
    *((_DWORD *)v26 + 4) = 3;
    v21 = v26 + 24;
    if (v16 != v17)
    {
      do
      {
        v27 = *(_OWORD *)(v16 - 24);
        *((_DWORD *)v26 - 2) = *((_DWORD *)v16 - 2);
        *(_OWORD *)(v26 - 24) = v27;
        v26 -= 24;
        v16 -= 24;
      }
      while (v16 != v17);
      v16 = *(char **)(v10 + 88);
    }
    *(_QWORD *)(v10 + 88) = v26;
    *(_QWORD *)(v10 + 96) = v21;
    *(_QWORD *)(v10 + 104) = &v25[24 * v24];
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_QWORD *)v16 = v13;
    *((_DWORD *)v16 + 2) = a3;
    *((_DWORD *)v16 + 3) = SEHRegNum;
    *((_DWORD *)v16 + 4) = 3;
    v21 = v16 + 24;
  }
  *(_QWORD *)(v10 + 96) = v21;
}

void llvm::MCStreamer::emitWinCFIAllocStack(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  const char *v24;
  __int16 v25;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 144);
  if (*(_DWORD *)(v5 + 420) != 4 || ((v6 = *(_DWORD *)(v5 + 428), v6 != 6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    v8 = ".seh_* directives are not supported on this target";
LABEL_8:
    v24 = v8;
    v25 = 259;
    llvm::MCContext::reportError(v4, a3, (uint64_t)&v24);
    return;
  }
  v9 = (_QWORD *)a1[13];
  if (!v9 || v9[1])
  {
    v8 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if (!a2)
  {
    v8 = "stack allocation size must be non-zero";
    goto LABEL_8;
  }
  if ((a2 & 7) != 0)
  {
    v8 = "stack allocation size is not a multiple of 8";
    goto LABEL_8;
  }
  v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v12 = v11;
  if (a2 > 0x80)
    v13 = 1;
  else
    v13 = 2;
  v15 = (char *)v9[12];
  v14 = v9[13];
  if ((unint64_t)v15 >= v14)
  {
    v17 = (char *)v9[11];
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v17) >> 3) + 1;
    if (v18 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v17) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (char *)operator new(24 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * ((v15 - v17) >> 3)];
    *(_QWORD *)v22 = v12;
    *((_DWORD *)v22 + 2) = a2;
    *((_DWORD *)v22 + 3) = -1;
    *((_DWORD *)v22 + 4) = v13;
    v16 = v22 + 24;
    if (v15 != v17)
    {
      do
      {
        v23 = *(_OWORD *)(v15 - 24);
        *((_DWORD *)v22 - 2) = *((_DWORD *)v15 - 2);
        *(_OWORD *)(v22 - 24) = v23;
        v22 -= 24;
        v15 -= 24;
      }
      while (v15 != v17);
      v15 = (char *)v9[11];
    }
    v9[11] = v22;
    v9[12] = v16;
    v9[13] = &v21[24 * v20];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_QWORD *)v15 = v11;
    *((_DWORD *)v15 + 2) = a2;
    *((_DWORD *)v15 + 3) = -1;
    *((_DWORD *)v15 + 4) = v13;
    v16 = v15 + 24;
  }
  v9[12] = v16;
}

void llvm::MCStreamer::emitWinCFISaveReg(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v13;
  int SEHRegNum;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  const char *v27;
  __int16 v28;

  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 144);
  if (*(_DWORD *)(v6 + 420) != 4 || ((v7 = *(_DWORD *)(v6 + 428), v7 != 6) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    v9 = ".seh_* directives are not supported on this target";
LABEL_8:
    v27 = v9;
    v28 = 259;
    llvm::MCContext::reportError(v5, a4, (uint64_t)&v27);
    return;
  }
  v10 = (_QWORD *)a1[13];
  if (!v10 || v10[1])
  {
    v9 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if ((a3 & 7) != 0)
  {
    v9 = "register save offset is not 8 byte aligned";
    goto LABEL_8;
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  SEHRegNum = llvm::MCRegisterInfo::getSEHRegNum(*(_QWORD *)(a1[1] + 152), a2);
  v15 = SEHRegNum;
  if (a3 <= 0x7FFF8)
    v16 = 4;
  else
    v16 = 5;
  v18 = (char *)v10[12];
  v17 = v10[13];
  if ((unint64_t)v18 >= v17)
  {
    v20 = (char *)v10[11];
    v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v20) >> 3) + 1;
    if (v21 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v20) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x555555555555555)
      v23 = 0xAAAAAAAAAAAAAAALL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v24 = (char *)operator new(24 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[8 * ((v18 - v20) >> 3)];
    *(_QWORD *)v25 = v13;
    *((_DWORD *)v25 + 2) = a3;
    *((_DWORD *)v25 + 3) = v15;
    *((_DWORD *)v25 + 4) = v16;
    v19 = v25 + 24;
    if (v18 != v20)
    {
      do
      {
        v26 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v25 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v25 - 24) = v26;
        v25 -= 24;
        v18 -= 24;
      }
      while (v18 != v20);
      v18 = (char *)v10[11];
    }
    v10[11] = v25;
    v10[12] = v19;
    v10[13] = &v24[24 * v23];
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v18 = v13;
    *((_DWORD *)v18 + 2) = a3;
    *((_DWORD *)v18 + 3) = SEHRegNum;
    v19 = v18 + 24;
    *((_DWORD *)v18 + 4) = v16;
  }
  v10[12] = v19;
}

void llvm::MCStreamer::emitWinCFISaveXMM(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v13;
  int SEHRegNum;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  const char *v27;
  __int16 v28;

  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 144);
  if (*(_DWORD *)(v6 + 420) != 4 || ((v7 = *(_DWORD *)(v6 + 428), v7 != 6) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    v9 = ".seh_* directives are not supported on this target";
LABEL_8:
    v27 = v9;
    v28 = 259;
    llvm::MCContext::reportError(v5, a4, (uint64_t)&v27);
    return;
  }
  v10 = (_QWORD *)a1[13];
  if (!v10 || v10[1])
  {
    v9 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if ((a3 & 0xF) != 0)
  {
    v9 = "offset is not a multiple of 16";
    goto LABEL_8;
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  SEHRegNum = llvm::MCRegisterInfo::getSEHRegNum(*(_QWORD *)(a1[1] + 152), a2);
  v15 = SEHRegNum;
  if (a3 <= 0x7FFF8)
    v16 = 8;
  else
    v16 = 9;
  v18 = (char *)v10[12];
  v17 = v10[13];
  if ((unint64_t)v18 >= v17)
  {
    v20 = (char *)v10[11];
    v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v20) >> 3) + 1;
    if (v21 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v20) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x555555555555555)
      v23 = 0xAAAAAAAAAAAAAAALL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v24 = (char *)operator new(24 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[8 * ((v18 - v20) >> 3)];
    *(_QWORD *)v25 = v13;
    *((_DWORD *)v25 + 2) = a3;
    *((_DWORD *)v25 + 3) = v15;
    *((_DWORD *)v25 + 4) = v16;
    v19 = v25 + 24;
    if (v18 != v20)
    {
      do
      {
        v26 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v25 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v25 - 24) = v26;
        v25 -= 24;
        v18 -= 24;
      }
      while (v18 != v20);
      v18 = (char *)v10[11];
    }
    v10[11] = v25;
    v10[12] = v19;
    v10[13] = &v24[24 * v23];
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v18 = v13;
    *((_DWORD *)v18 + 2) = a3;
    *((_DWORD *)v18 + 3) = SEHRegNum;
    v19 = v18 + 24;
    *((_DWORD *)v18 + 4) = v16;
  }
  v10[12] = v19;
}

void llvm::MCStreamer::emitWinCFIPushFrame(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  const char *v23;
  __int16 v24;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 144);
  if (*(_DWORD *)(v5 + 420) != 4 || ((v6 = *(_DWORD *)(v5 + 428), v6 != 6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    v8 = ".seh_* directives are not supported on this target";
LABEL_8:
    v23 = v8;
    v24 = 259;
    llvm::MCContext::reportError(v4, a3, (uint64_t)&v23);
    return;
  }
  v9 = (_QWORD *)a1[13];
  if (!v9 || v9[1])
  {
    v8 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  if (v9[11] != v9[12])
  {
    v8 = "If present, PushMachFrame must be the first UOP";
    goto LABEL_8;
  }
  v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v12 = v11;
  v14 = (uint64_t *)v9[12];
  v13 = v9[13];
  if ((unint64_t)v14 >= v13)
  {
    v16 = (_QWORD *)v9[11];
    v17 = 0xAAAAAAAAAAAAAAABLL * (v14 - v16) + 1;
    if (v17 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v16) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = (char *)operator new(24 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[8 * (v14 - v16)];
    *(_QWORD *)v21 = v12;
    *((_DWORD *)v21 + 2) = a2;
    *(_QWORD *)(v21 + 12) = 0xAFFFFFFFFLL;
    v15 = v21 + 24;
    if (v14 != v16)
    {
      do
      {
        v22 = *(_OWORD *)(v14 - 3);
        *((_DWORD *)v21 - 2) = *((_DWORD *)v14 - 2);
        *(_OWORD *)(v21 - 24) = v22;
        v21 -= 24;
        v14 -= 3;
      }
      while (v14 != v16);
      v14 = (uint64_t *)v9[11];
    }
    v9[11] = v21;
    v9[12] = v15;
    v9[13] = &v20[24 * v19];
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v14 = v11;
    *((_DWORD *)v14 + 2) = a2;
    *(uint64_t *)((char *)v14 + 12) = 0xAFFFFFFFFLL;
    v15 = v14 + 3;
  }
  v9[12] = v15;
}

_QWORD *llvm::MCStreamer::emitWinCFIEndProlog(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  const char *v7;
  _QWORD *result;
  uint64_t v9;
  const char *v10;
  __int16 v11;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 144);
  if (*(_DWORD *)(v4 + 420) != 4 || ((v5 = *(_DWORD *)(v4 + 428), v5 != 6) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v7 = ".seh_* directives are not supported on this target";
LABEL_8:
    v10 = v7;
    v11 = 259;
    return llvm::MCContext::reportError(v3, a2, (uint64_t)&v10);
  }
  v9 = a1[13];
  if (!v9 || *(_QWORD *)(v9 + 8))
  {
    v7 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  *(_QWORD *)(v9 + 40) = result;
  return result;
}

void llvm::MCStreamer::emitRawTextImpl()
{
  llvm::report_fatal_error((llvm *)"EmitRawText called on an MCStreamer that doesn't support it (target backend is likely missing an AsmStreamer implementation)", (const char *)1);
}

_QWORD *llvm::MCStreamer::finish(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v3 = a1[4];
  if ((a1[3] == v3 || *(_QWORD *)(v3 - 80)) && ((v4 = a1[11], a1[10] == v4) || *(_QWORD *)(*(_QWORD *)(v4 - 8) + 8)))
  {
    v5 = a1[2];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 1240))(a1);
  }
  else
  {
    v7 = a1[1];
    v8 = "Unfinished frame!";
    v9 = 259;
    return llvm::MCContext::reportError(v7, a2, (uint64_t)&v8);
  }
}

uint64_t llvm::MCStreamer::emitDwarfUnitLength(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v8;
  __int16 v9;

  if (*(_BYTE *)(a1[1] + 1698) == 1)
  {
    v8 = "DWARF64 Mark";
    v9 = 259;
    (*(void (**)(_QWORD *, const char **, uint64_t))(*a1 + 112))(a1, &v8, 1);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 520))(a1, 0xFFFFFFFFLL, 4);
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 112))(a1, a3, 1);
  if (*(_BYTE *)(a1[1] + 1698))
    v6 = 8;
  else
    v6 = 4;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 520))(a1, a2, v6);
}

uint64_t llvm::MCStreamer::emitDwarfUnitLength(llvm::MCStreamer *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  llvm::MCContext *v6;
  int v7;
  uint64_t v8;
  const llvm::Twine *v9;
  uint64_t TempSymbol;
  llvm::MCContext *v11;
  int v12;
  uint64_t v13;
  const llvm::Twine *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v18;
  uint64_t v19;
  const char *v20;
  __int16 v21;

  if (*(_BYTE *)(*((_QWORD *)this + 1) + 1698) == 1)
  {
    v18 = "DWARF64 Mark";
    v21 = 259;
    (*(void (**)(llvm::MCStreamer *, const char **, uint64_t))(*(_QWORD *)this + 112))(this, &v18, 1);
    (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)this + 520))(this, 0xFFFFFFFFLL, 4);
  }
  (*(void (**)(llvm::MCStreamer *, const llvm::Twine *, uint64_t))(*(_QWORD *)this + 112))(this, a3, 1);
  v6 = (llvm::MCContext *)*((_QWORD *)this + 1);
  v7 = *((unsigned __int8 *)a2 + 32);
  if (v7 == 1)
  {
    v18 = "_start";
    v21 = 259;
  }
  else if (*((_BYTE *)a2 + 32))
  {
    v8 = *((_QWORD *)a2 + 1);
    if (*((_BYTE *)a2 + 33) == 1)
    {
      v9 = *(const llvm::Twine **)a2;
    }
    else
    {
      LOBYTE(v7) = 2;
      v9 = a2;
    }
    v18 = (const char *)v9;
    v19 = v8;
    v20 = "_start";
    LOBYTE(v21) = v7;
    HIBYTE(v21) = 3;
  }
  else
  {
    v21 = 256;
  }
  TempSymbol = llvm::MCContext::createTempSymbol(v6, (const llvm::Twine *)&v18, 1);
  v11 = (llvm::MCContext *)*((_QWORD *)this + 1);
  v12 = *((unsigned __int8 *)a2 + 32);
  if (v12 == 1)
  {
    v18 = "_end";
    v21 = 259;
  }
  else if (*((_BYTE *)a2 + 32))
  {
    v13 = *((_QWORD *)a2 + 1);
    if (*((_BYTE *)a2 + 33) == 1)
    {
      v14 = *(const llvm::Twine **)a2;
    }
    else
    {
      LOBYTE(v12) = 2;
      v14 = a2;
    }
    v18 = (const char *)v14;
    v19 = v13;
    v20 = "_end";
    LOBYTE(v21) = v12;
    HIBYTE(v21) = 3;
  }
  else
  {
    v21 = 256;
  }
  v15 = llvm::MCContext::createTempSymbol(v11, (const llvm::Twine *)&v18, 1);
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 1698))
    v16 = 8;
  else
    v16 = 4;
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 848))(this, v15, TempSymbol, v16);
  (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD))(*(_QWORD *)this + 192))(this, TempSymbol, 0);
  return v15;
}

uint64_t llvm::MCStreamer::emitDwarfLineStartLabel(llvm::MCStreamer *this, llvm::MCSymbol *a2)
{
  return (*(uint64_t (**)(llvm::MCStreamer *, llvm::MCSymbol *, _QWORD))(*(_QWORD *)this + 192))(this, a2, 0);
}

uint64_t llvm::MCStreamer::emitAssignment(llvm::MCStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr *a3)
{
  uint64_t result;

  llvm::MCStreamer::visitUsedExpr(this, a3);
  llvm::MCSymbol::setVariableValue((uint64_t)a2, a3);
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t, llvm::MCSymbol *, const llvm::MCExpr *))(*(_QWORD *)result + 24))(result, a2, a3);
  return result;
}

llvm::MCStreamer *llvm::MCStreamer::visitUsedExpr(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  const llvm::MCExpr *v2;
  llvm::MCStreamer *v3;
  unsigned int v4;

  v2 = a2;
  v3 = this;
  v4 = *(unsigned __int8 *)a2;
  if (v4 <= 4)
  {
    while (2)
    {
      switch(v4)
      {
        case 0u:
          this = (llvm::MCStreamer *)llvm::MCStreamer::visitUsedExpr(v3, *((const llvm::MCExpr **)v2 + 2));
          v2 = (const llvm::MCExpr *)*((_QWORD *)v2 + 3);
          v4 = *(unsigned __int8 *)v2;
          if (v4 <= 4)
            continue;
          break;
        case 2u:
          this = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCStreamer *, _QWORD))(*(_QWORD *)v3 + 56))(v3, *((_QWORD *)v2 + 2));
          break;
        case 3u:
          v2 = (const llvm::MCExpr *)*((_QWORD *)v2 + 2);
          v4 = *(unsigned __int8 *)v2;
          continue;
        case 4u:
          this = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t, llvm::MCStreamer *))(*((_QWORD *)v2 - 1) + 56))((uint64_t)v2 - 8, v3);
          break;
        default:
          return this;
      }
      break;
    }
  }
  return this;
}

llvm::MCStreamer *llvm::MCStreamer::emitInstruction(llvm::MCStreamer *this, uint64_t a2)
{
  int v2;
  llvm::MCStreamer *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2)
  {
    v4 = this;
    v5 = v2 - 1;
    do
    {
      v6 = v5;
      v7 = *(_QWORD *)(a2 + 16);
      if (*(_BYTE *)(v7 + 16 * v5) == 5)
        this = llvm::MCStreamer::visitUsedExpr(v4, *(const llvm::MCExpr **)(v7 + 16 * v5 + 8));
      --v5;
    }
    while (v6);
  }
  return this;
}

void llvm::MCStreamer::emitPseudoProbe(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, char a5, int a6, _DWORD *a7, uint64_t a8)
{
  llvm::MCContext *v16;
  uint64_t TempSymbol;
  char *v18;
  _QWORD v19[2];
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v16 = (llvm::MCContext *)a1[1];
  TempSymbol = llvm::MCContext::createTempSymbol(v16);
  (*(void (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 192))(a1, TempSymbol, 0);
  v19[0] = a2;
  v19[1] = a3;
  v20 = a6;
  v21 = a5;
  v22 = a4;
  v23 = TempSymbol;
  v24 = a8;
  v25 = &v24;
  v18 = std::__hash_table<std::__hash_value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__unordered_map_hasher<llvm::MCSymbol *,std::__hash_value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::hash<llvm::MCSymbol *>,std::equal_to<llvm::MCSymbol *>,true>,std::__unordered_map_equal<llvm::MCSymbol *,std::__hash_value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::equal_to<llvm::MCSymbol *>,std::hash<llvm::MCSymbol *>,true>,std::allocator<std::__hash_value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::__emplace_unique_key_args<llvm::MCSymbol *,std::piecewise_construct_t const&,std::tuple<llvm::MCSymbol * const&>,std::tuple<>>((uint64_t)v16 + 1712, &v24, (uint64_t)&std::piecewise_construct, &v25);
  llvm::MCPseudoProbeInlineTree::addPseudoProbe((uint64_t)(v18 + 24), (uint64_t)v19, a7);
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiff(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  llvm::MCContext *v10;
  uint64_t TempSymbol;
  unint64_t v12;
  const char *v14;
  __int16 v15;

  v7 = llvm::MCSymbolRefExpr::create((uint64_t)a2, 0, *((_QWORD *)this + 1), 0);
  v8 = llvm::MCSymbolRefExpr::create((uint64_t)a3, 0, *((_QWORD *)this + 1), 0);
  v9 = llvm::MCBinaryExpr::create(18, v7, v8, *((_QWORD *)this + 1), 0);
  v10 = (llvm::MCContext *)*((_QWORD *)this + 1);
  if (!*(_BYTE *)(*((_QWORD *)v10 + 18) + 352))
    return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 512))(this, v9, a4, 0);
  v14 = "set";
  v15 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v10, (const llvm::Twine *)&v14, 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, unint64_t))(*(_QWORD *)this + 272))(this, TempSymbol, v9);
  v12 = llvm::MCSymbolRefExpr::create(TempSymbol, 0, *((_QWORD *)this + 1), 0);
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 512))(this, v12, a4, 0);
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiffAsULEB128(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = llvm::MCSymbolRefExpr::create((uint64_t)a2, 0, *((_QWORD *)this + 1), 0);
  v6 = llvm::MCSymbolRefExpr::create((uint64_t)a3, 0, *((_QWORD *)this + 1), 0);
  v7 = llvm::MCBinaryExpr::create(18, v5, v6, *((_QWORD *)this + 1), 0);
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t))(*(_QWORD *)this + 552))(this, v7);
}

void llvm::MCStreamer::emitXCOFFExceptDirective(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  llvm::report_fatal_error((llvm *)"emitXCOFFExceptDirective is only supported on XCOFF targets", (const char *)1);
}

uint64_t llvm::MCStreamer::emitBinaryData(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
}

_QWORD *llvm::MCStreamer::switchSection(_QWORD *this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  uint64_t v3;
  llvm::MCSection *v4;
  const llvm::MCExpr *v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this[18] + 32 * *((unsigned int *)this + 38);
  v4 = *(llvm::MCSection **)(v3 - 32);
  v5 = *(const llvm::MCExpr **)(v3 - 24);
  *(_QWORD *)(v3 - 16) = v4;
  *(_QWORD *)(v3 - 8) = v5;
  if (v4 != a2 || v5 != a3)
  {
    v9 = this;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
    v10 = v9[18] + 32 * *((unsigned int *)v9 + 38);
    *(_QWORD *)(v10 - 32) = a2;
    *(_QWORD *)(v10 - 24) = a3;
    v11 = *((_QWORD *)a2 + 1);
    if (v11)
    {
      this = *(_QWORD **)v11;
      if (!*(_QWORD *)v11)
      {
        if ((*(_DWORD *)(v11 + 8) & 0x7080) != 0x2000)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + 192))(v9, v11, 0);
        *(_DWORD *)(v11 + 8) |= 8u;
        this = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
        *(_QWORD *)v11 = this;
        if (!this)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + 192))(v9, v11, 0);
      }
      if (this == (_QWORD *)llvm::MCSymbol::AbsolutePseudoFragment)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + 192))(v9, v11, 0);
    }
  }
  return this;
}

char *std::__hash_table<std::__hash_value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__unordered_map_hasher<llvm::MCSymbol *,std::__hash_value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::hash<llvm::MCSymbol *>,std::equal_to<llvm::MCSymbol *>,true>,std::__unordered_map_equal<llvm::MCSymbol *,std::__hash_value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::equal_to<llvm::MCSymbol *>,std::hash<llvm::MCSymbol *>,true>,std::allocator<std::__hash_value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::__emplace_unique_key_args<llvm::MCSymbol *,std::piecewise_construct_t const&,std::tuple<llvm::MCSymbol * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  char *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  size_t v27;
  uint8x8_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return (char *)v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return (char *)v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = (char *)operator new(0x68uLL);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  *((_QWORD *)v18 + 2) = **a4;
  *((_QWORD *)v18 + 7) = 0;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *((_DWORD *)v18 + 14) = 1065353216;
  *((_OWORD *)v18 + 4) = 0u;
  *((_OWORD *)v18 + 5) = 0u;
  *((_QWORD *)v18 + 12) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 >= 3)
      {
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.u32[0] <= 1uLL)
        {
          v29 = 1 << -(char)__clz(v27 - 1);
          if (v27 >= 2)
            v27 = v29;
          if (prime <= v27)
            prime = v27;
          if (prime >= v11)
            goto LABEL_50;
LABEL_37:
          std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(a1, prime);
          goto LABEL_50;
        }
      }
      v30 = std::__next_prime(v27);
      if (prime <= v30)
        prime = v30;
      if (prime < v11)
        goto LABEL_37;
    }
LABEL_50:
    v11 = *(_QWORD *)(a1 + 8);
    v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v31 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v10));
      if (v22)
        goto LABEL_26;
    }
    goto LABEL_52;
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
LABEL_26:
    *(_QWORD *)v18 = *v22;
LABEL_63:
    *v22 = v18;
    goto LABEL_64;
  }
LABEL_52:
  *(_QWORD *)v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v18)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11)
        v32 %= v11;
    }
    else
    {
      v32 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

char *std::vector<llvm::MCDwarfFrameInfo>::__push_back_slow_path<llvm::MCDwarfFrameInfo const&>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v2 = 0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[88 * v2];
  v9 = &v7[88 * v6];
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v10;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 4) = 0;
  std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>((std::string::size_type *)v8 + 4, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v8 + 66) = *(_OWORD *)(a2 + 66);
  v11 = v8 + 88;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 != *a1)
  {
    v14 = 0;
    do
    {
      v15 = &v8[v14];
      v16 = &v13[v14];
      v17 = *(_OWORD *)&v13[v14 - 88];
      *(_OWORD *)(v15 - 72) = *(_OWORD *)&v13[v14 - 72];
      *(_OWORD *)(v15 - 88) = v17;
      *((_QWORD *)v15 - 6) = 0;
      *((_QWORD *)v15 - 5) = 0;
      *((_QWORD *)v15 - 7) = 0;
      *(_OWORD *)(v15 - 56) = *(_OWORD *)&v13[v14 - 56];
      *((_QWORD *)v15 - 5) = *(_QWORD *)&v13[v14 - 40];
      *((_QWORD *)v16 - 7) = 0;
      *((_QWORD *)v16 - 6) = 0;
      *((_QWORD *)v16 - 5) = 0;
      v18 = *(_OWORD *)&v13[v14 - 32];
      *(_OWORD *)(v15 - 22) = *(_OWORD *)&v13[v14 - 22];
      *((_OWORD *)v15 - 2) = v18;
      v14 -= 88;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v8[v14];
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v19 == v13)
        goto LABEL_29;
      v21 = *((_QWORD *)v19 - 7);
      if (v21)
        break;
LABEL_17:
      v19 -= 88;
    }
    v22 = *((_QWORD *)v19 - 6);
    v20 = (void *)*((_QWORD *)v19 - 7);
    if (v22 == v21)
    {
LABEL_16:
      *((_QWORD *)v19 - 6) = v21;
      operator delete(v20);
      goto LABEL_17;
    }
    while (*(char *)(v22 - 1) < 0)
    {
      operator delete(*(void **)(v22 - 24));
      v23 = *(void **)(v22 - 48);
      if (v23)
        goto LABEL_27;
LABEL_22:
      v22 -= 88;
      if (v22 == v21)
      {
        v20 = (void *)*((_QWORD *)v19 - 7);
        goto LABEL_16;
      }
    }
    v23 = *(void **)(v22 - 48);
    if (!v23)
      goto LABEL_22;
LABEL_27:
    *(_QWORD *)(v22 - 40) = v23;
    operator delete(v23);
    goto LABEL_22;
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_29:
  if (v13)
    operator delete(v13);
  return v8 + 88;
}

unint64_t std::vector<llvm::MCCFIInstruction>::__push_back_slow_path<llvm::MCCFIInstruction const&>(unint64_t *a1, __int128 *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  std::string *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  v4 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v3[-*a1] >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    goto LABEL_29;
  if (0x5D1745D1745D1746 * ((uint64_t)(a1[2] - (_QWORD)v2) >> 3) > v5)
    v5 = 0x5D1745D1745D1746 * ((uint64_t)(a1[2] - (_QWORD)v2) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[2] - (_QWORD)v2) >> 3)) >= 0x1745D1745D1745DLL)
    v5 = 0x2E8BA2E8BA2E8BALL;
  v32 = v5;
  if (v5)
  {
    if (v5 > 0x2E8BA2E8BA2E8BALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v5 = (unint64_t)operator new(88 * v5);
  }
  v31 = v4;
  v9 = *a2;
  v10 = a2[1];
  v8 = v5 + 88 * v4;
  *(_QWORD *)(v8 + 40) = 0;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 5);
  *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(v8 + 56) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 6);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    v30 = v5;
    if ((v13 & 0x8000000000000000) == 0)
    {
      v14 = (char *)operator new(v12 - v11);
      *(_QWORD *)(v8 + 40) = v14;
      v15 = &v14[v13];
      *(_QWORD *)(v8 + 56) = &v14[v13];
      memcpy(v14, v11, v13);
      *(_QWORD *)(v8 + 48) = v15;
      v5 = v30;
      goto LABEL_12;
    }
LABEL_29:
    abort();
  }
LABEL_12:
  v16 = (std::string *)(v5 + 88 * v31 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    v27 = v5;
    std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
    v28 = v27;
    v2 = (char *)*a1;
    v3 = (char *)a1[1];
    v17 = v28 + 88 * v32;
    v18 = v8 + 88;
    if (v3 != (char *)*a1)
    {
LABEL_14:
      v19 = 0;
      do
      {
        v20 = v8 + v19;
        v21 = &v3[v19];
        v22 = *(_OWORD *)&v3[v19 - 88];
        v23 = *(_QWORD *)&v3[v19 - 56];
        *(_OWORD *)(v20 - 72) = *(_OWORD *)&v3[v19 - 72];
        *(_OWORD *)(v20 - 88) = v22;
        *(_QWORD *)(v20 - 56) = v23;
        *(_QWORD *)(v20 - 48) = 0;
        *(_QWORD *)(v20 - 40) = 0;
        *(_QWORD *)(v20 - 32) = 0;
        *(_OWORD *)(v20 - 48) = *(_OWORD *)&v3[v19 - 48];
        *(_QWORD *)(v20 - 32) = *(_QWORD *)&v3[v19 - 32];
        *((_QWORD *)v21 - 6) = 0;
        *((_QWORD *)v21 - 5) = 0;
        *((_QWORD *)v21 - 4) = 0;
        v24 = *(_OWORD *)&v3[v19 - 24];
        *(_QWORD *)(v20 - 8) = *(_QWORD *)&v3[v19 - 8];
        *(_OWORD *)(v20 - 24) = v24;
        *((_QWORD *)v21 - 2) = 0;
        *((_QWORD *)v21 - 1) = 0;
        *((_QWORD *)v21 - 3) = 0;
        v19 -= 88;
      }
      while (&v3[v19] != v2);
      v2 = (char *)*a1;
      v25 = (char *)a1[1];
      *a1 = v8 + v19;
      a1[1] = v18;
      a1[2] = v17;
      while (1)
      {
        if (v25 == v2)
          goto LABEL_26;
        if (*(v25 - 1) < 0)
          break;
        v26 = (void *)*((_QWORD *)v25 - 6);
        if (v26)
          goto LABEL_23;
LABEL_17:
        v25 -= 88;
      }
      operator delete(*((void **)v25 - 3));
      v26 = (void *)*((_QWORD *)v25 - 6);
      if (!v26)
        goto LABEL_17;
LABEL_23:
      *((_QWORD *)v25 - 5) = v26;
      operator delete(v26);
      goto LABEL_17;
    }
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = a2[4];
    *(_QWORD *)(v5 + 88 * v31 + 80) = *((_QWORD *)a2 + 10);
    v17 = v5 + 88 * v32;
    v18 = v8 + 88;
    if (v3 != v2)
      goto LABEL_14;
  }
  *a1 = v8;
  a1[1] = v18;
  a1[2] = v17;
LABEL_26:
  if (v2)
    operator delete(v2);
  return v18;
}

void llvm::WinEH::FrameInfo::~FrameInfo(llvm::WinEH::FrameInfo *this)
{
  _QWORD *v2;
  char *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = (char *)this + 152;
  v2 = (_QWORD *)*((_QWORD *)this + 19);
  if (v2)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 20);
    v5 = (void *)*((_QWORD *)this + 19);
    if (v4 != v2)
    {
      v6 = (_QWORD *)*(v4 - 2);
      if (v4 != v6)
        free(v6);
      llvm::deallocate_buffer((llvm *)*(v4 - 5), (void *)(16 * *((unsigned int *)v4 - 6)));
    }
    *((_QWORD *)this + 20) = v2;
    operator delete(v5);
  }
  v7 = (char *)*((_QWORD *)this + 17);
  v8 = *((unsigned int *)this + 36);
  if ((_DWORD)v8)
  {
    v9 = 48 * v8;
    do
    {
      v10 = *(void **)&v7[v9 - 40];
      if (v10)
      {
        *(_QWORD *)&v7[v9 - 32] = v10;
        operator delete(v10);
      }
      v9 -= 48;
    }
    while (v9);
    v7 = (char *)*((_QWORD *)this + 17);
  }
  if (v7 != v3)
    free(v7);
  llvm::deallocate_buffer(*((llvm **)this + 14), (void *)(16 * *((unsigned int *)this + 32)));
}

uint64_t sub_180C3DA90()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 88);
  if (v1)
  {
    *(_QWORD *)(v0 + 96) = v1;
    operator delete(v1);
  }
  return v0;
}

_QWORD *std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__emplace_back_slow_path<std::unique_ptr<llvm::WinEH::FrameInfo>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  llvm::WinEH::FrameInfo *v27;
  llvm::WinEH::FrameInfo *v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = (llvm::WinEH::FrameInfo *)*((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        llvm::WinEH::FrameInfo::~FrameInfo(v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t llvm::MCSymbol::operator new(int a1, uint64_t a2, uint64_t a3)
{
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(a3 + 184), a1 + 8 * (a2 != 0), 3)+ 8 * (a2 != 0);
}

uint64_t llvm::MCSymbol::setVariableValue(uint64_t this, const llvm::MCExpr *a2)
{
  *(_QWORD *)(this + 24) = a2;
  *(_DWORD *)(this + 8) = *(_DWORD *)(this + 8) & 0xFFFF8FFF | 0x2000;
  *(_QWORD *)this = 0;
  return this;
}

llvm::raw_ostream *llvm::MCSymbol::print(uint64_t a1, llvm::raw_ostream *this, _BYTE *a3)
{
  const char *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  llvm::raw_ostream *result;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  const char *v12;
  int v13;
  _WORD *v14;
  _WORD *v15;
  _BYTE *v16;
  _BYTE *v17;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v7 = *(_QWORD **)(a1 - 8);
    v8 = *v7;
    v5 = (const char *)(v7 + 2);
    v6 = v8;
    if (!a3)
      goto LABEL_6;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    if (!a3)
    {
LABEL_6:
      result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
      if (v6 > *((_QWORD *)this + 3) - (_QWORD)result)
        return llvm::raw_ostream::write(this, v5, v6);
      if (v6)
      {
        result = (llvm::raw_ostream *)memcpy(result, v5, v6);
        *((_QWORD *)this + 4) += v6;
      }
      return result;
    }
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(_BYTE *, const char *, size_t))(*(_QWORD *)a3 + 56))(a3, v5, v6);
  if ((_DWORD)result)
    goto LABEL_6;
  if (!a3[185])
    llvm::report_fatal_error((llvm *)"Symbol name with unsupported characters", (const char *)1);
  v10 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v10 < *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 4) = v10 + 1;
    *v10 = 34;
    if (v6)
      goto LABEL_20;
    goto LABEL_31;
  }
  for (result = llvm::raw_ostream::write(this, 34); v6; --v6)
  {
LABEL_20:
    v13 = *(unsigned __int8 *)v5;
    if (v13 == 34)
    {
      v15 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 > 1uLL)
      {
        *v15 = 8796;
        goto LABEL_29;
      }
      v11 = this;
      v12 = "\\\"";
    }
    else
    {
      if (v13 != 10)
      {
        v16 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v16 >= *((_QWORD *)this + 3))
        {
          result = llvm::raw_ostream::write(this, v13);
        }
        else
        {
          *((_QWORD *)this + 4) = v16 + 1;
          *v16 = v13;
        }
        goto LABEL_19;
      }
      v14 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 > 1uLL)
      {
        *v14 = 28252;
LABEL_29:
        *((_QWORD *)this + 4) += 2;
        goto LABEL_19;
      }
      v11 = this;
      v12 = "\\n";
    }
    result = llvm::raw_ostream::write(v11, v12, 2uLL);
LABEL_19:
    ++v5;
  }
LABEL_31:
  v17 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v17 >= *((_QWORD *)this + 3))
    return llvm::raw_ostream::write(this, 34);
  *((_QWORD *)this + 4) = v17 + 1;
  *v17 = 34;
  return result;
}

uint64_t llvm::MCSymbolELF::setBinding(llvm::MCSymbolELF *this, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_180C3DEE4 + 4 * byte_1812686D8[a2]))();
}

uint64_t sub_180C3DEE4@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 12) = a2 & 0xEFE7 | 0x1008;
  return result;
}

uint64_t sub_180C3DEFC@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 12) = a2 & 0xEFE7 | 0x1010;
  return result;
}

uint64_t sub_180C3DF14@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 12) = a2 & 0xEFE7 | 0x1018;
  return result;
}

uint64_t llvm::MCSymbolELF::setType(uint64_t this, int a2)
{
  *(_WORD *)(this + 12) = *(_WORD *)(this + 12) & 0xFFF8 | word_1812686E4[a2];
  return this;
}

uint64_t llvm::MCSymbolELF::setIsSignature(uint64_t this)
{
  *(_WORD *)(this + 12) |= 0x400u;
  return this;
}

uint64_t llvm::MCSymbolXCOFF::setRepresentedCsect(uint64_t this, llvm::MCSectionXCOFF *a2)
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

double llvm::MCTargetOptions::MCTargetOptions(llvm::MCTargetOptions *this)
{
  double result;

  *(_WORD *)this = *(_WORD *)this & 0xE000 | 0x800;
  *(_QWORD *)((char *)this + 4) = 2;
  *((_DWORD *)this + 3) = 2;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_BYTE *)this + 160) &= 0xFCu;
  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 184) = 0;
  return result;
}

uint64_t llvm::TargetRegistry::lookupTarget(std::string::size_type a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  uint64_t v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string::size_type v24;
  __int16 v25;
  std::string __p;
  unsigned int v27;
  __int16 v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  if (!FirstTarget)
  {
    MEMORY[0x186DA1308](a3, "Unable to find target for this triple (no targets are registered)");
    return 0;
  }
  v25 = 261;
  v23.__r_.__value_.__r.__words[0] = a1;
  v23.__r_.__value_.__l.__size_ = a2;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v23);
  v6 = v27;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = FirstTarget;
    if (FirstTarget)
      goto LABEL_8;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v7 = FirstTarget;
  if (!FirstTarget)
  {
LABEL_10:
    v25 = 1283;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)"No available targets are compatible with triple \"";
    v23.__r_.__value_.__r.__words[2] = a1;
    v24 = a2;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)"\"";
    v28 = 770;
    llvm::Twine::str((llvm::Twine *)&__p, &v22);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v7 = 0;
    *(std::string *)a3 = v22;
    return v7;
  }
LABEL_8:
  while (1)
  {
    v8 = (*(uint64_t (**)(uint64_t))(v7 + 8))(v6);
    v9 = *(_QWORD *)v7;
    if (v8)
      break;
    v7 = *(_QWORD *)v7;
    if (!v9)
      goto LABEL_10;
  }
  if (v9)
  {
    while (((*(uint64_t (**)(uint64_t))(v9 + 8))(v6) & 1) == 0)
    {
      v9 = *(_QWORD *)v9;
      if (!v9)
        return v7;
    }
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = xmmword_181261470;
    strcpy(v21.__r_.__value_.__l.__data_, "Cannot choose between targets \"");
    v11 = std::string::append(&v21, *(const std::string::value_type **)(v7 + 16));
    v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v22, "\" and \"");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v23, *(const std::string::value_type **)(v9 + 16));
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&__p, "\"");
    v18 = v17->__r_.__value_.__r.__words[0];
    v29[0] = v17->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v20 = v29[0];
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v20;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v29 + 7);
    *(_BYTE *)(a3 + 23) = v19;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_28;
      return 0;
    }
LABEL_27:
    operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
LABEL_28:
      operator delete(v21.__r_.__value_.__l.__data_);
    return 0;
  }
  return v7;
}

void llvm::AsmLexer::AsmLexer(llvm::MCAsmLexer *a1, uint64_t a2)
{
  uint64_t v3;

  llvm::MCAsmLexer::MCAsmLexer(a1);
  *(_QWORD *)v3 = &off_1E0E25800;
  *(_QWORD *)(v3 + 136) = a2;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_DWORD *)(v3 + 168) = 16777473;
  if (*(_QWORD *)(a2 + 56))
    *(_BYTE *)(v3 + 105) = **(_BYTE **)(a2 + 48) != 64;
  else
    *(_BYTE *)(v3 + 105) = 1;
  *(_BYTE *)(v3 + 111) = *(_BYTE *)(a2 + 491);
}

void llvm::AsmLexer::~AsmLexer(void **this)
{
  void *v1;

  llvm::MCAsmLexer::~MCAsmLexer(this);
  operator delete(v1);
}

uint64_t llvm::AsmLexer::setBuffer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_QWORD *)(result + 152) = a2;
  *(_QWORD *)(result + 160) = a3;
  if (a4)
    v5 = a4;
  else
    v5 = a2;
  *(_QWORD *)(result + 144) = v5;
  *(_QWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 171) = a5;
  return result;
}

void llvm::AsmLexer::LexFloatLiteral(std::string *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *data;
  int v5;
  unsigned __int8 *v6;
  int v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  std::string __str;

  data = (unsigned __int8 *)this[6].__r_.__value_.__l.__data_;
  v5 = *data;
  if ((v5 - 48) <= 9)
  {
    v6 = data + 1;
    do
    {
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v7 = *v6++;
      v5 = v7;
    }
    while ((v7 - 48) < 0xA);
    data = v6 - 1;
  }
  if (v5 > 68)
  {
    if (v5 == 69 || v5 == 101)
    {
      v9 = data + 1;
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
      v10 = data[1];
      if (v10 == 45 || v10 == 43)
      {
        v9 = data + 2;
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 2);
        v10 = data[2];
      }
      data = v9;
      if ((v10 - 48) <= 9)
      {
        v11 = v9 + 1;
        do
        {
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v12 = *v11++;
        }
        while ((v12 - 48) < 0xA);
        data = v11 - 1;
      }
    }
    goto LABEL_19;
  }
  if (v5 != 43 && v5 != 45)
  {
LABEL_19:
    v13 = (unsigned __int8 *)this[4].__r_.__value_.__l.__data_;
    *(_DWORD *)a2 = 6;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = data - v13;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
    return;
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181268710;
  strcpy(__str.__r_.__value_.__l.__data_, "invalid sign in float literal");
  this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)data;
  std::string::operator=(this + 3, &__str);
  v8 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)data;
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = data;
  *(_QWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 32) = 64;
  *(_QWORD *)(a2 + 24) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void llvm::AsmLexer::LexHexFloatLiteral(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *data;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  std::string::pointer v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  std::string::pointer v15;
  std::string::size_type v16;
  std::string __str;

  data = (unsigned __int8 *)this[6].__r_.__value_.__l.__data_;
  v6 = *data;
  if (v6 == 46)
  {
    v7 = 0;
    do
    {
      v8 = &data[v7 + 1];
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v6 = *v8;
      ++v7;
    }
    while (llvm::hexDigitValue(char)::LUT[*v8] != -1);
    data += v7;
    if (v7 != 1)
      goto LABEL_7;
  }
  if (a2)
  {
    v9 = this[4].__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181268720;
    strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal floating-point constant: expected at least one significand digit");
  }
  else
  {
LABEL_7:
    if ((v6 | 0x20) == 0x70)
    {
      v10 = data + 1;
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
      v11 = data[1];
      if (v11 == 45 || v11 == 43)
      {
        v10 = data + 2;
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 2);
        v11 = data[2];
      }
      if ((v11 - 48) <= 9)
      {
        v12 = 0;
        v13 = v10 + 1;
        do
        {
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v13[v12];
          v14 = v13[v12++] - 48;
        }
        while (v14 < 0xA);
        if (v12)
        {
          v15 = this[4].__r_.__value_.__l.__data_;
          *(_DWORD *)a3 = 6;
          *(_QWORD *)(a3 + 8) = v15;
          *(_QWORD *)(a3 + 16) = v10 - (unsigned __int8 *)v15 + v12;
          *(_DWORD *)(a3 + 32) = 64;
          *(_QWORD *)(a3 + 24) = 0;
          return;
        }
      }
      v9 = this[4].__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181262A00;
      strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal floating-point constant: expected at least one exponent digit");
    }
    else
    {
      v9 = this[4].__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1812629F0;
      strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal floating-point constant: expected exponent part 'p'");
    }
  }
  this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
  std::string::operator=(this + 3, &__str);
  v16 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v9;
  *(_DWORD *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = 64;
  *(_QWORD *)(a3 + 24) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void llvm::AsmLexer::LexIdentifier(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::pointer data;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v7;
  int v8;
  uint64_t i;
  int v10;
  BOOL v13;
  _BOOL4 v14;
  BOOL v15;
  std::string::pointer v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;

  data = this[6].__r_.__value_.__l.__data_;
  if (*(data - 1) == 46 && *data - 48 <= 9)
  {
    v3 = (unsigned __int8 *)(data + 1);
    do
    {
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
      v5 = *v3++;
      v4 = v5;
    }
    while ((v5 - 48) < 0xA);
    data = (std::string::pointer)(v3 - 1);
    if ((v4 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      if ((v4 - 36) > 0x3B || ((1 << (v4 - 36)) & 0x800000008000401) == 0)
      {
        v17 = v4 != 35 || this[4].__r_.__value_.__s.__data_[10] == 0;
        v18 = !v17;
        v19 = this[4].__r_.__value_.__s.__data_[9] && v4 == 64;
        if (!v19 && !v18)
          goto LABEL_7;
      }
    }
    else if ((v4 | 0x20) == 0x65)
    {
LABEL_7:
      llvm::AsmLexer::LexFloatLiteral(this, a2);
      return;
    }
  }
  v7 = this[4].__r_.__value_.__s.__data_[9];
  v8 = this[4].__r_.__value_.__s.__data_[10];
  for (i = -(uint64_t)data; ; --i)
  {
    v10 = *data;
    if ((v10 - 48) >= 0xA
      && (v10 & 0xFFFFFFDF) - 65 >= 0x1A
      && ((v10 - 36) > 0x3B || ((1 << (v10 - 36)) & 0x800000008000401) == 0))
    {
      v13 = v10 != 35 || v8 == 0;
      v14 = !v13;
      v15 = v7 && v10 == 64;
      if (!v15 && !v14)
        break;
    }
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++data;
  }
  v16 = this[4].__r_.__value_.__l.__data_;
  if (data == v16 + 1 && *v16 == 46)
  {
    *(_DWORD *)a2 = 25;
    *(_QWORD *)(a2 + 8) = v16;
    *(_DWORD *)(a2 + 32) = 64;
    *(_OWORD *)(a2 + 16) = xmmword_1812362D0;
  }
  else
  {
    *(_DWORD *)a2 = 2;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = -i - (_QWORD)v16;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void llvm::AsmLexer::LexSlash(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::pointer data;
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::string::size_type v9;
  uint64_t v10;
  std::string::pointer v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  std::string::pointer v16;
  std::string::size_type v17;
  int v18;
  uint64_t v19;
  std::string::pointer v20;
  std::string::size_type size;
  std::string::pointer v23;
  std::string::size_type v24;
  std::string __p;

  if (!*(_BYTE *)(this[5].__r_.__value_.__r.__words[2] + 65))
    goto LABEL_10;
  data = this[6].__r_.__value_.__l.__data_;
  v5 = *data;
  if (v5 == 47)
  {
    v12 = data + 1;
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v13 = (char *)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
    if (data + 1 == v13)
    {
      v18 = -1;
      i = data + 1;
      goto LABEL_20;
    }
    v14 = data + 2;
    for (i = data + 1; ; v14 = i + 1)
    {
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      v18 = *i;
      i = v14;
LABEL_20:
      if ((v18 + 1) <= 0xE && ((1 << (v18 + 1)) & 0x4801) != 0)
        break;
      if (i == v13)
      {
        v18 = -1;
        i = v13;
        break;
      }
    }
    if (v18 == 13 && i != v13 && *i == 10)
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 1);
    size = this[5].__r_.__value_.__l.__size_;
    if (size)
      (*(void (**)(std::string::size_type, char *, char *, char *))(*(_QWORD *)size + 16))(size, v12, v12, &i[~(unint64_t)v12]);
    this[7].__r_.__value_.__s.__data_[0] = 1;
    if (this[7].__r_.__value_.__s.__data_[1])
    {
      v23 = this[4].__r_.__value_.__l.__data_;
      v24 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v23;
    }
    else
    {
      this[7].__r_.__value_.__s.__data_[1] = 1;
      v23 = this[4].__r_.__value_.__l.__data_;
      v24 = ~(unint64_t)v23 + this[6].__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)a2 = 9;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = v24;
    goto LABEL_38;
  }
  if (v5 == 42)
  {
    this[7].__r_.__value_.__s.__data_[1] = 0;
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = (char *)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
    if (data + 1 != v6)
    {
      v7 = 0;
      while (1)
      {
        v8 = &data[v7 + 2];
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
        if (__PAIR64__(*v8, data[v7 + 1]) == 0x2F0000002ALL)
          break;
        if (&data[++v7 + 1] == v6)
          goto LABEL_14;
      }
      v9 = this[5].__r_.__value_.__l.__size_;
      if (v9)
      {
        (*(void (**)(std::string::size_type, std::string::pointer, std::string::pointer))(*(_QWORD *)v9 + 16))(v9, data + 1, data + 1);
        v10 = (uint64_t)this[6].__r_.__value_.__l.__data_;
      }
      else
      {
        v10 = (uint64_t)&data[v7 + 2];
      }
      v19 = v10 + 1;
      this[6].__r_.__value_.__r.__words[0] = v19;
      v20 = this[4].__r_.__value_.__l.__data_;
      *(_DWORD *)a2 = 7;
      *(_QWORD *)(a2 + 8) = v20;
      *(_QWORD *)(a2 + 16) = v19 - (_QWORD)v20;
LABEL_38:
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 24) = 0;
      return;
    }
LABEL_14:
    v16 = this[4].__r_.__value_.__l.__data_;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&__p, "unterminated comment");
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v16;
    std::string::operator=(this + 3, &__p);
    v17 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v16;
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v17;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_10:
    this[7].__r_.__value_.__s.__data_[1] = 0;
    v11 = this[4].__r_.__value_.__l.__data_;
    *(_DWORD *)a2 = 15;
    *(_QWORD *)(a2 + 8) = v11;
    *(_DWORD *)(a2 + 32) = 64;
    *(_OWORD *)(a2 + 16) = xmmword_1812362D0;
  }
}

void llvm::AsmLexer::LexDigit(llvm::AsmLexer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  std::string::size_type v20;
  unint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  std::string *p_str;
  std::string::size_type v28;
  std::string::size_type v29;
  int v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  void *v38;
  BOOL v39;
  BOOL v40;
  _BYTE *v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  std::string::size_type v45;
  int AsInteger;
  uint64_t v47;
  unsigned __int8 **v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  unsigned int v53;
  char *v54;
  char v55;
  std::string::size_type v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  std::string *v61;
  char v62;
  int v63;
  unsigned int v64;
  unsigned __int8 *v65;
  int v66;
  uint64_t v67;
  const void *v68;
  int v69;
  std::string *v70;
  std::string::size_type v71;
  std::string::size_type v72;
  int v73;
  std::string::size_type v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  std::string::size_type v85;
  int v86;
  int v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  std::string::size_type v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  std::string::size_type v106;
  uint64_t v107;
  uint64_t v108;
  std::string v109;
  std::string v110;
  _BYTE *v111;
  uint64_t v112;
  std::string __str;

  v4 = *((unsigned __int8 *)this + 109);
  if (!*((_BYTE *)this + 109))
    goto LABEL_89;
  v5 = (unsigned __int8 *)*((_QWORD *)this + 18);
  v6 = v5 - 1;
  if (((char)*(v5 - 1) & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(v5 - 1) + 60) & 0x400) != 0)
  {
    if ((*(v5 - 1) & 0xFE) == 0x30)
      v13 = 0;
    else
      v13 = v5 - 1;
    if (*(v5 - 1) - 58 >= 0xFFFFFFF6)
      v6 = 0;
    v14 = *v5;
    if (llvm::hexDigitValue(char)::LUT[v14] == -1)
    {
      v17 = (unsigned __int8 *)*((_QWORD *)this + 18);
      if ((_DWORD)v14 != 46)
        goto LABEL_28;
LABEL_26:
      *((_QWORD *)this + 18) = v17 + 1;
      goto LABEL_129;
    }
    v15 = v5 + 1;
    while (1)
    {
      if (((char)v14 - 50) < 8)
        goto LABEL_17;
      if (((char)v14 - 48) >= 2)
        break;
LABEL_19:
      *((_QWORD *)this + 18) = v15;
      v16 = *v15++;
      LODWORD(v14) = v16;
      if (llvm::hexDigitValue(char)::LUT[v16] == -1)
      {
        v17 = v15 - 1;
        if ((_DWORD)v14 == 46)
          goto LABEL_26;
LABEL_28:
        if (*((_BYTE *)this + 108))
        {
          v18 = 16;
          switch((int)v14)
          {
            case 'H':
            case 'h':
              goto LABEL_37;
            case 'O':
            case 'Q':
            case 'o':
            case 'q':
              goto LABEL_33;
            case 'R':
            case 'r':
              *((_QWORD *)this + 18) = v17 + 1;
              v19 = *((_QWORD *)this + 12);
              *(_DWORD *)a2 = 6;
              *(_QWORD *)(a2 + 8) = v19;
              *(_QWORD *)(a2 + 16) = &v17[-v19 + 1];
              goto LABEL_31;
            case 'T':
            case 't':
              goto LABEL_35;
            case 'Y':
            case 'y':
              goto LABEL_36;
            default:
              goto LABEL_72;
          }
        }
        v18 = 16;
        switch((int)v14)
        {
          case 'H':
          case 'h':
            goto LABEL_37;
          case 'O':
          case 'Q':
          case 'o':
          case 'q':
LABEL_33:
            v18 = 8;
            goto LABEL_37;
          case 'T':
          case 't':
LABEL_35:
            v18 = 10;
            goto LABEL_37;
          case 'Y':
          case 'y':
LABEL_36:
            v18 = 2;
LABEL_37:
            *((_QWORD *)this + 18) = ++v17;
            goto LABEL_38;
          default:
LABEL_72:
            if (v6)
              v39 = v6 + 1 == v17;
            else
              v39 = 0;
            if (v39 && *((_DWORD *)this + 29) <= 0xDu && (*v6 | 0x20) == 0x64)
            {
              v18 = 10;
            }
            else
            {
              if (v13)
                v40 = v13 + 1 == v17;
              else
                v40 = 0;
              if (!v40 || *((_DWORD *)this + 29) > 0xBu || (*v13 | 0x20) != 0x62)
              {
                *((_QWORD *)this + 18) = v5;
                if (*((_BYTE *)this + 112))
                  goto LABEL_5;
                goto LABEL_89;
              }
              v18 = 2;
            }
LABEL_38:
            v20 = *((_QWORD *)this + 12);
            v21 = (unint64_t)&v17[-v20];
            LODWORD(v112) = 128;
            llvm::APInt::initSlowCase((llvm::APInt *)&v111, 0, 1);
            v22 = v21 - 1;
            if (v21 < v21 - 1)
              v22 = v21;
            __str.__r_.__value_.__r.__words[0] = v20;
            __str.__r_.__value_.__l.__size_ = v22;
            if (!llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, v18, (llvm::APInt *)&v111))
            {
              v24 = (unsigned __int8 *)*((_QWORD *)this + 18);
              v25 = *v24;
              if ((v25 | 0x20) == 0x75)
              {
                *((_QWORD *)this + 18) = v24 + 1;
                v25 = *++v24;
              }
              if ((v25 | 0x20) == 0x6C)
              {
                *((_QWORD *)this + 18) = v24 + 1;
                v25 = *++v24;
              }
              if ((v25 | 0x20) == 0x6C)
                *((_QWORD *)this + 18) = v24 + 1;
              v26 = v112;
              if (v112 >= 0x41)
              {
                if (v26 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v111) >= 0x41)
                {
                  LODWORD(__str.__r_.__value_.__r.__words[1]) = v26;
                  llvm::APInt::initSlowCase((llvm::APInt *)&__str, (const void **)&v111);
                  v29 = __str.__r_.__value_.__r.__words[0];
                  v30 = __str.__r_.__value_.__r.__words[1];
                  *(_DWORD *)a2 = 5;
                  *(_QWORD *)(a2 + 8) = v20;
                  *(_QWORD *)(a2 + 16) = v21;
                  *(_DWORD *)(a2 + 32) = v30;
                  *(_QWORD *)(a2 + 24) = v29;
                  if (v112 >= 0x41)
                    goto LABEL_67;
                  return;
                }
                LODWORD(__str.__r_.__value_.__r.__words[1]) = v26;
                p_str = &__str;
                llvm::APInt::initSlowCase((llvm::APInt *)&__str, (const void **)&v111);
                v26 = __str.__r_.__value_.__r.__words[1];
              }
              else
              {
                p_str = (std::string *)&v111;
              }
              v28 = p_str->__r_.__value_.__r.__words[0];
              *(_DWORD *)a2 = 4;
              *(_QWORD *)(a2 + 8) = v20;
              *(_QWORD *)(a2 + 16) = v21;
              *(_DWORD *)(a2 + 32) = v26;
              *(_QWORD *)(a2 + 24) = v28;
              LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
              if (v112 >= 0x41)
                goto LABEL_67;
              return;
            }
            v23 = *((_QWORD *)this + 12);
            switch((v18 - 2) >> 1)
            {
              case 0u:
                *((_BYTE *)&v109.__r_.__value_.__s + 23) = 6;
                strcpy((char *)&v109, "binary");
                break;
              case 3u:
                *((_BYTE *)&v109.__r_.__value_.__s + 23) = 5;
                strcpy((char *)&v109, "octal");
                break;
              case 4u:
                *((_BYTE *)&v109.__r_.__value_.__s + 23) = 7;
                strcpy((char *)&v109, "decimal");
                break;
              case 7u:
                *((_BYTE *)&v109.__r_.__value_.__s + 23) = 11;
                strcpy((char *)&v109, "hexadecimal");
                break;
              default:
                std::to_string(&__str, v18);
                v31 = std::string::insert(&__str, 0, "base-");
                v32 = v31->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
                v109.__r_.__value_.__r.__words[2] = v32;
                v31->__r_.__value_.__l.__size_ = 0;
                v31->__r_.__value_.__r.__words[2] = 0;
                v31->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                break;
            }
            v33 = std::string::insert(&v109, 0, "invalid ");
            v34 = v33->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            v110.__r_.__value_.__r.__words[2] = v34;
            v33->__r_.__value_.__l.__size_ = 0;
            v33->__r_.__value_.__r.__words[2] = 0;
            v33->__r_.__value_.__r.__words[0] = 0;
            v35 = std::string::append(&v110, " number");
            v36 = v35->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v36;
            v35->__r_.__value_.__l.__size_ = 0;
            v35->__r_.__value_.__r.__words[2] = 0;
            v35->__r_.__value_.__r.__words[0] = 0;
            *((_QWORD *)this + 8) = v23;
            std::string::operator=((std::string *)this + 3, &__str);
            v37 = *((_QWORD *)this + 18) - v23;
            *(_DWORD *)a2 = 1;
            *(_QWORD *)(a2 + 8) = v23;
            *(_QWORD *)(a2 + 16) = v37;
            *(_QWORD *)(a2 + 24) = 0;
            *(_DWORD *)(a2 + 32) = 64;
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_64;
            goto LABEL_63;
        }
      }
    }
    if (!v6)
      v6 = v15 - 1;
LABEL_17:
    if (!v13)
      v13 = v15 - 1;
    goto LABEL_19;
  }
  if (*((_BYTE *)this + 112))
  {
LABEL_5:
    v7 = v5 - 1;
    v8 = v5 - 1;
    do
    {
      v9 = *++v8;
      ++v7;
    }
    while ((unsigned __int16)llvm::hexDigitValue(char)::LUT[v9] < 0x10u);
    *((_QWORD *)this + 18) = v8;
    v111 = (_BYTE *)*((_QWORD *)this + 12);
    v112 = v7 - v111;
    LODWORD(v108) = 128;
    llvm::APInt::initSlowCase((llvm::APInt *)&v107, 0, 1);
    if (llvm::StringRef::getAsInteger((llvm::StringRef *)&v111, *((_DWORD *)this + 29), (llvm::APInt *)&v107))
    {
      v10 = *((_QWORD *)this + 12);
      v11 = *((_DWORD *)this + 29);
      HIDWORD(v12) = v11;
      LODWORD(v12) = v11 - 2;
      switch((v12 >> 1))
      {
        case 0u:
          *((_BYTE *)&v109.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&v109, "binary");
          break;
        case 3u:
          *((_BYTE *)&v109.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&v109, "octal");
          break;
        case 4u:
          goto LABEL_133;
        case 7u:
          goto LABEL_147;
        default:
          goto LABEL_154;
      }
LABEL_156:
      v77 = std::string::insert(&v109, 0, "invalid ");
      v78 = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      v79 = std::string::append(&v110, " number");
      v80 = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 8) = v10;
      std::string::operator=((std::string *)this + 3, &__str);
      v81 = *((_QWORD *)this + 18) - v10;
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v81;
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 24) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_158:
          if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_159;
LABEL_164:
          operator delete(v109.__r_.__value_.__l.__data_);
          if (v108 < 0x41)
            return;
          goto LABEL_160;
        }
      }
      else if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_158;
      }
      operator delete(v110.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_159:
        if (v108 < 0x41)
          return;
        goto LABEL_160;
      }
      goto LABEL_164;
    }
    goto LABEL_141;
  }
LABEL_89:
  if (!*((_BYTE *)this + 111))
    goto LABEL_97;
  v41 = (_BYTE *)*((_QWORD *)this + 18);
  v42 = *(v41 - 1);
  if (v42 != 37)
  {
    if (v42 == 36)
    {
      if (llvm::hexDigitValue(char)::LUT[*v41] != -1)
      {
        v43 = v41 + 1;
        do
        {
          *((_QWORD *)this + 18) = v43;
          v44 = *v43++;
        }
        while (llvm::hexDigitValue(char)::LUT[v44] != -1);
      }
      LODWORD(v110.__r_.__value_.__r.__words[1]) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v110, 0, 0);
      v45 = *((_QWORD *)this + 18) - (_QWORD)v41;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      __str.__r_.__value_.__l.__size_ = v45;
      AsInteger = llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 0x10u, (llvm::APInt *)&v110);
      v47 = *((_QWORD *)this + 12);
      if (AsInteger)
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181268730;
        strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal number");
        goto LABEL_117;
      }
LABEL_119:
      v59 = *((_QWORD *)this + 18) - v47;
      v60 = v110.__r_.__value_.__r.__words[1];
      if (LODWORD(v110.__r_.__value_.__r.__words[1]) >= 0x41)
      {
        if (v60 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v110) >= 0x41)
        {
          LODWORD(__str.__r_.__value_.__r.__words[1]) = v60;
          llvm::APInt::initSlowCase((llvm::APInt *)&__str, (const void **)&v110.__r_.__value_.__l.__data_);
          v85 = __str.__r_.__value_.__r.__words[0];
          v86 = __str.__r_.__value_.__r.__words[1];
          *(_DWORD *)a2 = 5;
          *(_QWORD *)(a2 + 8) = v47;
          *(_QWORD *)(a2 + 16) = v59;
          *(_DWORD *)(a2 + 32) = v86;
          *(_QWORD *)(a2 + 24) = v85;
          goto LABEL_175;
        }
        LODWORD(__str.__r_.__value_.__r.__words[1]) = v60;
        v61 = &__str;
        llvm::APInt::initSlowCase((llvm::APInt *)&__str, (const void **)&v110.__r_.__value_.__l.__data_);
        v60 = __str.__r_.__value_.__r.__words[1];
      }
      else
      {
        v61 = &v110;
      }
      v74 = v61->__r_.__value_.__r.__words[0];
      *(_DWORD *)a2 = 4;
      *(_QWORD *)(a2 + 8) = v47;
      *(_QWORD *)(a2 + 16) = v59;
      *(_DWORD *)(a2 + 32) = v60;
      *(_QWORD *)(a2 + 24) = v74;
      LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
      goto LABEL_175;
    }
LABEL_97:
    v48 = (unsigned __int8 **)((char *)this + 144);
    v49 = (unsigned __int8 *)*((_QWORD *)this + 18);
    v50 = *((unsigned __int8 *)this + 120);
    if (*((_BYTE *)this + 120) || *(v49 - 1) != 48 || (v51 = *v49, v51 == 46))
    {
      if (v4)
      {
        v52 = 0;
        while (1)
        {
          if ((*v49 - 48) >= 0xAu)
          {
            if (!v52)
              v52 = v49;
            if (llvm::hexDigitValue(char)::LUT[*v49] == -1)
              break;
          }
          ++v49;
        }
        if ((*v49 & 0xDF) == 0x48)
        {
          v52 = v49;
          v53 = 16;
        }
        else
        {
          v53 = 10;
        }
        *v48 = v52;
        if (v50)
          goto LABEL_130;
      }
      else
      {
        v52 = v49 - 1;
        do
          v62 = *++v52;
        while ((v62 - 48) < 0xAu);
        v53 = 10;
        *v48 = v52;
        if (v50)
          goto LABEL_130;
      }
      if (v53 != 16)
      {
        v63 = *v52;
        if (v63 == 101 || v63 == 69)
          goto LABEL_129;
        if (v63 == 46)
        {
          *v48 = v52 + 1;
LABEL_129:
          llvm::AsmLexer::LexFloatLiteral((std::string *)this, a2);
          return;
        }
      }
LABEL_130:
      v111 = (_BYTE *)*((_QWORD *)this + 12);
      v112 = v52 - v111;
      LODWORD(v108) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v107, 0, 1);
      if (llvm::StringRef::getAsInteger((llvm::StringRef *)&v111, v53, (llvm::APInt *)&v107))
      {
        v10 = *((_QWORD *)this + 12);
        v64 = (v53 - 2) >> 1;
        if (v64 == 7)
        {
LABEL_147:
          *((_BYTE *)&v109.__r_.__value_.__s + 23) = 11;
          strcpy((char *)&v109, "hexadecimal");
        }
        else if (v64 == 4)
        {
LABEL_133:
          *((_BYTE *)&v109.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v109, "decimal");
        }
        else
        {
          v11 = v53;
LABEL_154:
          std::to_string(&__str, v11);
          v75 = std::string::insert(&__str, 0, "base-");
          v76 = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v109.__r_.__value_.__r.__words[2] = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_156;
      }
      if (!*((_BYTE *)this + 120))
      {
        v65 = *v48;
        v66 = **v48;
        if ((v66 | 0x20) == 0x75)
        {
          *v48 = v65 + 1;
          v66 = *++v65;
        }
        if ((v66 | 0x20) == 0x6C)
        {
          *v48 = v65 + 1;
          v66 = *++v65;
        }
        if ((v66 | 0x20) == 0x6C)
          *v48 = v65 + 1;
      }
LABEL_141:
      v68 = v111;
      v67 = v112;
      v69 = v108;
      if (v108 >= 0x41)
      {
        if (v69 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v107) >= 0x41)
        {
          LODWORD(__str.__r_.__value_.__r.__words[1]) = v69;
          llvm::APInt::initSlowCase((llvm::APInt *)&__str, (const void **)&v107);
          v72 = __str.__r_.__value_.__r.__words[0];
          v73 = __str.__r_.__value_.__r.__words[1];
          *(_DWORD *)a2 = 5;
          *(_QWORD *)(a2 + 8) = v68;
          *(_QWORD *)(a2 + 16) = v67;
          *(_DWORD *)(a2 + 32) = v73;
          *(_QWORD *)(a2 + 24) = v72;
          if (v108 < 0x41)
            return;
LABEL_160:
          v38 = (void *)v107;
          if (!v107)
            return;
          goto LABEL_177;
        }
        LODWORD(__str.__r_.__value_.__r.__words[1]) = v69;
        v70 = &__str;
        llvm::APInt::initSlowCase((llvm::APInt *)&__str, (const void **)&v107);
        v69 = __str.__r_.__value_.__r.__words[1];
      }
      else
      {
        v70 = (std::string *)&v107;
      }
      v71 = v70->__r_.__value_.__r.__words[0];
      *(_DWORD *)a2 = 4;
      *(_QWORD *)(a2 + 8) = v68;
      *(_QWORD *)(a2 + 16) = v67;
      *(_DWORD *)(a2 + 32) = v69;
      *(_QWORD *)(a2 + 24) = v71;
      LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
      if (v108 < 0x41)
        return;
      goto LABEL_160;
    }
    if (v4)
    {
      if ((v51 | 0x20) == 0x78)
        goto LABEL_168;
LABEL_194:
      LODWORD(v112) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v111, 0, 1);
      v95 = doHexLookAhead((const char **)this + 18, 8, *((_BYTE *)this + 109));
      v96 = *((_QWORD *)this + 18) - *((_QWORD *)this + 12);
      v107 = *((_QWORD *)this + 12);
      v108 = v96;
      if (!llvm::StringRef::getAsInteger((llvm::StringRef *)&v107, v95, (llvm::APInt *)&v111))
      {
        if (v95 == 16)
          ++*v48;
        SkipIgnoredIntegerSuffix((unsigned __int8 **)this + 18);
        intToken((_QWORD *)a2, v107, v108, (const void **)&v111);
        if (v112 < 0x41)
          return;
        goto LABEL_67;
      }
      v97 = *((_QWORD *)this + 12);
      radixName((char *)&v109, v95);
      v98 = std::string::insert(&v109, 0, "invalid ");
      v99 = v98->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v99;
      v98->__r_.__value_.__l.__size_ = 0;
      v98->__r_.__value_.__r.__words[2] = 0;
      v98->__r_.__value_.__r.__words[0] = 0;
      v100 = std::string::append(&v110, " number");
      v101 = v100->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 8) = v97;
      std::string::operator=((std::string *)this + 3, &__str);
      v102 = *((_QWORD *)this + 18) - v97;
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v97;
      *(_QWORD *)(a2 + 16) = v102;
      *(_QWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 32) = 64;
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_64:
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v110.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_66:
            if (v112 < 0x41)
              return;
            goto LABEL_67;
          }
        }
        else if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_66;
        }
        operator delete(v109.__r_.__value_.__l.__data_);
        if (v112 < 0x41)
          return;
LABEL_67:
        v38 = v111;
        if (!v111)
          return;
        goto LABEL_177;
      }
LABEL_63:
      operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_64;
    }
    if (*v49 > 0x61u)
    {
      if (v51 == 120)
        goto LABEL_168;
      if (v51 != 98)
        goto LABEL_194;
    }
    else if (v51 != 66)
    {
      if (v51 != 88)
        goto LABEL_194;
LABEL_168:
      v82 = 0;
      do
      {
        v83 = &v49[v82 + 1];
        *v48 = v83;
        v84 = *v83;
        ++v82;
      }
      while (llvm::hexDigitValue(char)::LUT[v84] != -1);
      if ((_DWORD)v84 == 46 || (_DWORD)v84 == 112 || (_DWORD)v84 == 80)
      {
        llvm::AsmLexer::LexHexFloatLiteral((std::string *)this, v82 == 1, a2);
        return;
      }
      if (v82 != 1)
      {
        LODWORD(v110.__r_.__value_.__r.__words[1]) = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v110, 0, 0);
        v106 = *((_QWORD *)this + 18) - *((_QWORD *)this + 12);
        __str.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 12);
        __str.__r_.__value_.__l.__size_ = v106;
        if (!llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 0, (llvm::APInt *)&v110))
        {
          if (*((_BYTE *)this + 109) && (**v48 | 0x20) == 0x68)
            ++*v48;
          SkipIgnoredIntegerSuffix((unsigned __int8 **)this + 18);
          intToken((_QWORD *)a2, *((_QWORD *)this + 12), *((_QWORD *)this + 18) - *((_QWORD *)this + 12), (const void **)&v110.__r_.__value_.__l.__data_);
          goto LABEL_175;
        }
        v47 = *((_QWORD *)this + 12);
        std::string::basic_string[abi:nn180100]<0>(&__str, "invalid hexadecimal number");
        goto LABEL_117;
      }
      v103 = v49 - 1;
      std::string::basic_string[abi:nn180100]<0>(&__str, "invalid hexadecimal number");
      *((_QWORD *)this + 8) = v49 - 1;
      std::string::operator=((std::string *)this + 3, &__str);
      v104 = *((_QWORD *)this + 18) - (_QWORD)v49 + 1;
LABEL_207:
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v103;
      *(_QWORD *)(a2 + 16) = v104;
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 24) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
    *v48 = v49 + 1;
    v87 = v49[1];
    if ((v87 - 48) > 9)
    {
      *((_QWORD *)this + 18) = v49;
      v105 = *((_QWORD *)this + 12);
      *(_DWORD *)a2 = 4;
      *(_QWORD *)(a2 + 8) = v105;
      *(_QWORD *)(a2 + 16) = &v49[-v105];
LABEL_31:
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 24) = 0;
      return;
    }
    if ((v87 & 0xFE) == 0x30)
    {
      v88 = v49 + 1;
      v89 = v49 + 2;
      do
      {
        *v48 = v89;
        v90 = *v89++;
        ++v88;
      }
      while ((v90 & 0xFE) == 0x30);
      v91 = *((_QWORD *)this + 12);
      LODWORD(v110.__r_.__value_.__r.__words[1]) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v110, 0, 1);
      v92 = 2;
      if ((unint64_t)&v88[-v91] < 2)
        v92 = (uint64_t)&v88[-v91];
      __str.__r_.__value_.__r.__words[0] = v91 + v92;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v88[-v91 - v92];
      if (!llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 2u, (llvm::APInt *)&v110))
      {
        SkipIgnoredIntegerSuffix((unsigned __int8 **)this + 18);
        intToken((_QWORD *)a2, v91, (uint64_t)&v88[-v91], (const void **)&v110.__r_.__value_.__l.__data_);
        goto LABEL_175;
      }
      v93 = *((_QWORD *)this + 12);
      std::string::basic_string[abi:nn180100]<0>(&__str, "invalid binary number");
      *((_QWORD *)this + 8) = v93;
      std::string::operator=((std::string *)this + 3, &__str);
      v94 = *((_QWORD *)this + 18) - v93;
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v93;
      *(_QWORD *)(a2 + 16) = v94;
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 24) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_118;
      goto LABEL_175;
    }
    v103 = (unsigned __int8 *)*((_QWORD *)this + 12);
    std::string::basic_string[abi:nn180100]<0>(&__str, "invalid binary number");
    *((_QWORD *)this + 8) = v103;
    std::string::operator=((std::string *)this + 3, &__str);
    v104 = *((_QWORD *)this + 18) - (_QWORD)v103;
    goto LABEL_207;
  }
  if ((*v41 & 0xFE) == 0x30)
  {
    v54 = v41 + 1;
    do
    {
      *((_QWORD *)this + 18) = v54;
      v55 = *v54++;
    }
    while ((v55 & 0xFE) == 0x30);
  }
  LODWORD(v110.__r_.__value_.__r.__words[1]) = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v110, 0, 0);
  v56 = *((_QWORD *)this + 18) - (_QWORD)v41;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  __str.__r_.__value_.__l.__size_ = v56;
  v57 = llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 2u, (llvm::APInt *)&v110);
  v47 = *((_QWORD *)this + 12);
  if (!v57)
    goto LABEL_119;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&__str, "invalid binary number");
LABEL_117:
  *((_QWORD *)this + 8) = v47;
  std::string::operator=((std::string *)this + 3, &__str);
  v58 = *((_QWORD *)this + 18) - v47;
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v47;
  *(_QWORD *)(a2 + 16) = v58;
  *(_DWORD *)(a2 + 32) = 64;
  *(_QWORD *)(a2 + 24) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
LABEL_118:
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_175:
  if (LODWORD(v110.__r_.__value_.__r.__words[1]) >= 0x41)
  {
    v38 = (void *)v110.__r_.__value_.__r.__words[0];
    if (v110.__r_.__value_.__r.__words[0])
LABEL_177:
      operator delete[](v38);
  }
}

void radixName(char *a1, unsigned int a2)
{
  unint64_t v3;
  std::string *v4;
  std::string v5;

  HIDWORD(v3) = a2;
  LODWORD(v3) = a2 - 2;
  switch((v3 >> 1))
  {
    case 0u:
      a1[23] = 6;
      strcpy(a1, "binary");
      break;
    case 3u:
      a1[23] = 5;
      strcpy(a1, "octal");
      break;
    case 4u:
      a1[23] = 7;
      strcpy(a1, "decimal");
      break;
    case 7u:
      a1[23] = 11;
      strcpy(a1, "hexadecimal");
      break;
    default:
      std::to_string(&v5, a2);
      v4 = std::string::insert(&v5, 0, "base-");
      *(std::string *)a1 = *v4;
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v5.__r_.__value_.__l.__data_);
      break;
  }
}

unsigned __int8 **SkipIgnoredIntegerSuffix(unsigned __int8 **result)
{
  uint64_t v1;
  int v2;

  v1 = (uint64_t)*result;
  v2 = **result;
  if ((v2 | 0x20) == 0x75)
  {
    *result = (unsigned __int8 *)(v1 + 1);
    v2 = *(unsigned __int8 *)++v1;
  }
  if ((v2 | 0x20) == 0x6C)
  {
    *result = (unsigned __int8 *)(v1 + 1);
    v2 = *(unsigned __int8 *)++v1;
  }
  if ((v2 | 0x20) == 0x6C)
    *result = (unsigned __int8 *)(v1 + 1);
  return result;
}

_QWORD *intToken(_QWORD *result, uint64_t a2, uint64_t a3, const void **a4)
{
  const void **v4;
  _QWORD *v7;
  unsigned int v8;
  const void *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char v14[8];
  unsigned int v15;

  v4 = a4;
  v7 = result;
  v8 = *((_DWORD *)a4 + 2);
  if (v8 < 0x41)
    goto LABEL_4;
  if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4) < 0x41)
  {
    v15 = v8;
    result = llvm::APInt::initSlowCase((llvm::APInt *)v14, v4);
    v8 = v15;
    v4 = (const void **)v14;
LABEL_4:
    v9 = *v4;
    *(_DWORD *)v7 = 4;
    v7[1] = a2;
    v7[2] = a3;
    *((_DWORD *)v7 + 8) = v8;
    v7[3] = v9;
    v15 = 0;
    return result;
  }
  v13 = v8;
  result = llvm::APInt::initSlowCase((llvm::APInt *)&v12, v4);
  v10 = v12;
  v11 = v13;
  *(_DWORD *)v7 = 5;
  v7[1] = a2;
  v7[2] = a3;
  *((_DWORD *)v7 + 8) = v11;
  v7[3] = v10;
  return result;
}

uint64_t doHexLookAhead(const char **a1, uint64_t a2, char a3)
{
  const char *v3;
  const char *v4;
  const char *v6;
  char v7;

  v3 = *a1;
  if ((a3 & 1) != 0)
  {
    v4 = 0;
    while (1)
    {
      if ((*v3 - 48) >= 0xAu)
      {
        if (!v4)
          v4 = v3;
        if (llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)v3] == -1)
          break;
      }
      ++v3;
    }
    if ((*v3 & 0xDF) == 0x48)
    {
      a2 = 16;
    }
    else
    {
      v3 = v4;
      a2 = a2;
    }
    *a1 = v3;
    return a2;
  }
  else
  {
    v6 = v3 - 1;
    do
      v7 = *++v6;
    while ((v7 - 48) < 0xAu);
    *a1 = v6;
    return a2;
  }
}

void llvm::AsmLexer::LexSingleQuote(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::pointer data;
  std::string::pointer v5;
  int v6;
  std::string::pointer v7;
  std::string::size_type v8;
  _BYTE *v9;
  std::string::pointer v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  std::string::pointer v15;
  std::string::pointer v16;
  char *v17;
  const char *v18;
  std::string __str;

  data = this[6].__r_.__value_.__l.__data_;
  v5 = (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
  if (data == v5)
  {
    v6 = -1;
    if (this[5].__r_.__value_.__s.__data_[1])
      goto LABEL_3;
  }
  else
  {
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = *data++;
    if (this[5].__r_.__value_.__s.__data_[1])
    {
LABEL_3:
      v7 = this[4].__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181268740;
      strcpy(__str.__r_.__value_.__l.__data_, "invalid usage of character literals");
      goto LABEL_4;
    }
  }
  if (!this[4].__r_.__value_.__s.__data_[14])
  {
    if (v6 != -1)
    {
      if (v6 != 92)
        goto LABEL_12;
      if (data != v5)
      {
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++data;
LABEL_12:
        if (data != v5)
        {
          v9 = data + 1;
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
          if (*data == 39)
          {
            v10 = this[4].__r_.__value_.__l.__data_;
            v11 = v9 - v10;
            if ((unint64_t)(v9 - v10) >= 2 && *(_WORD *)v10 == 23591)
            {
              v12 = v10[2];
              switch(v10[2])
              {
                case 'b':
                  v12 = 8;
                  break;
                case 'c':
                case 'd':
                case 'e':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'o':
                case 'p':
                case 'q':
                case 's':
                  goto LABEL_38;
                case 'f':
                  v12 = 12;
                  break;
                case 'n':
                  v12 = 10;
                  break;
                case 'r':
                  v12 = 13;
                  break;
                case 't':
                  v12 = 9;
                  break;
                default:
                  if ((_DWORD)v12 != 39)
LABEL_38:
                    v12 = v10[2];
                  break;
              }
            }
            else
            {
              v12 = v10[1];
            }
            *(_DWORD *)a2 = 4;
            *(_QWORD *)(a2 + 8) = v10;
            *(_QWORD *)(a2 + 16) = v11;
            *(_DWORD *)(a2 + 32) = 64;
            *(_QWORD *)(a2 + 24) = v12;
            return;
          }
        }
        v7 = this[4].__r_.__value_.__l.__data_;
        v17 = (char *)operator new(0x20uLL);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181268760;
        v18 = "single quote way too long";
        goto LABEL_34;
      }
    }
    v7 = this[4].__r_.__value_.__l.__data_;
    v17 = (char *)operator new(0x20uLL);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181268760;
    v18 = "unterminated single quote";
LABEL_34:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 9) = *(_OWORD *)(v18 + 9);
    v17[25] = 0;
LABEL_4:
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
    std::string::operator=(this + 3, &__str);
    v8 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v7;
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  while (1)
  {
    while (1)
    {
      v15 = data;
      if (v6 == 39)
        break;
      if (v6 == -1)
      {
        v7 = this[4].__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181268750;
        strcpy(__str.__r_.__value_.__l.__data_, "unterminated string constant");
        goto LABEL_4;
      }
      v6 = -1;
      data = v5;
      if (v15 != v5)
      {
        v13 = 1;
        v14 = (unsigned __int8 *)v15;
        goto LABEL_19;
      }
    }
    if (data == v5)
      goto LABEL_31;
    if (*data != 39)
      break;
    v14 = (unsigned __int8 *)(data + 1);
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = -1;
    data = v5;
    if (v15 + 1 != v5)
    {
      v13 = 2;
LABEL_19:
      data = &v15[v13];
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      v6 = *v14;
    }
  }
  v5 = data;
LABEL_31:
  v16 = this[4].__r_.__value_.__l.__data_;
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v5 - v16;
  *(_DWORD *)(a2 + 32) = 64;
  *(_QWORD *)(a2 + 24) = 0;
}

void llvm::AsmLexer::LexQuote(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::pointer data;
  std::string::pointer v5;
  int v6;
  std::string::pointer v7;
  uint64_t v8;
  unsigned __int8 *v9;
  std::string::pointer v10;
  unsigned __int8 *v11;
  std::string::pointer v12;
  std::string::size_type v13;
  std::string::pointer v14;
  std::string __str;

  data = this[6].__r_.__value_.__l.__data_;
  v5 = (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
  if (data == v5)
  {
    v6 = -1;
    if (this[5].__r_.__value_.__s.__data_[1])
    {
LABEL_3:
      v7 = this[4].__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181261460;
      strcpy(__str.__r_.__value_.__l.__data_, "invalid usage of string literals");
LABEL_27:
      this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      std::string::operator=(this + 3, &__str);
      v13 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v7;
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v13;
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 24) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = *data++;
    if (this[5].__r_.__value_.__s.__data_[1])
      goto LABEL_3;
  }
  if (!this[4].__r_.__value_.__s.__data_[14])
  {
    while (1)
    {
      while (v6 == 92)
      {
        if (data == v5)
          goto LABEL_26;
        v11 = (unsigned __int8 *)(data + 1);
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
        v6 = -1;
        data = v5;
        if (v11 != (unsigned __int8 *)v5)
          goto LABEL_21;
      }
      if (v6 == -1)
        goto LABEL_26;
      if (v6 == 34)
      {
        v12 = this[4].__r_.__value_.__l.__data_;
        *(_DWORD *)a2 = 3;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = data - v12;
        goto LABEL_31;
      }
      v11 = (unsigned __int8 *)data;
      v6 = -1;
      data = v5;
      if (v11 != (unsigned __int8 *)v5)
      {
LABEL_21:
        data = (std::string::pointer)(v11 + 1);
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v11 + 1);
        v6 = *v11;
      }
    }
  }
  while (1)
  {
    while (1)
    {
      v10 = data;
      if (v6 == 34)
        break;
      if (v6 == -1)
      {
LABEL_26:
        v7 = this[4].__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_181268750;
        strcpy(__str.__r_.__value_.__l.__data_, "unterminated string constant");
        goto LABEL_27;
      }
      v6 = -1;
      data = v5;
      if (v10 != v5)
      {
        v8 = 1;
        v9 = (unsigned __int8 *)v10;
        goto LABEL_8;
      }
    }
    if (data == v5)
      goto LABEL_30;
    if (*data != 34)
      break;
    v9 = (unsigned __int8 *)(data + 1);
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = -1;
    data = v5;
    if (v10 + 1 != v5)
    {
      v8 = 2;
LABEL_8:
      data = &v10[v8];
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      v6 = *v9;
    }
  }
  v5 = data;
LABEL_30:
  v14 = this[4].__r_.__value_.__l.__data_;
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v5 - v14;
LABEL_31:
  *(_DWORD *)(a2 + 32) = 64;
  *(_QWORD *)(a2 + 24) = 0;
}

const char *llvm::AsmLexer::LexUntilEndOfStatement(llvm::AsmLexer *this)
{
  const char *v2;
  uint64_t v3;
  size_t v4;
  int v5;
  const char *v6;
  const char *v7;
  const char *v8;
  size_t v9;
  int v10;
  size_t v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  size_t v16;
  int v17;
  const char *v18;
  size_t v19;
  const char *v20;
  int v21;
  size_t v23;
  const char *v24;
  const char *v25;
  size_t v26;
  int v27;
  const char *v28;
  const char *v29;
  size_t v30;
  int v31;

  v3 = *((_QWORD *)this + 17);
  v2 = (const char *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 12) = v2;
  if (*(_BYTE *)(v3 + 64))
  {
    if (*((_BYTE *)this + 169))
    {
      v4 = *(_QWORD *)(v3 + 56);
      if (v4 == 1)
      {
        v5 = *(unsigned __int8 *)v2;
        if (**(unsigned __int8 **)(v3 + 48) != v5)
        {
          v6 = *(const char **)(v3 + 40);
          v7 = v2 + 1;
          v8 = v2;
          do
          {
            v9 = strlen(v6);
            if (!strncmp(v7 - 1, v6, v9))
              break;
            if (v5 == 10)
              break;
            if (v5 == 13)
              break;
            if (v7 - 1 == (const char *)(*((_QWORD *)this + 19) + *((_QWORD *)this + 20)))
              break;
            ++v8;
            *((_QWORD *)this + 18) = v7;
            v10 = *(unsigned __int8 *)v7++;
            v5 = v10;
          }
          while (**(unsigned __int8 **)(v3 + 48) != v10);
        }
      }
      else
      {
        v24 = v2;
        v25 = *(const char **)(v3 + 48);
        if (v25[1] == 35)
          goto LABEL_33;
LABEL_31:
        if (strncmp(v24, v25, v4))
        {
          do
          {
            v26 = strlen(*(const char **)(v3 + 40));
            if (!strncmp(v24, *(const char **)(v3 + 40), v26))
              break;
            v27 = *(unsigned __int8 *)v24;
            if (v27 == 10 || v27 == 13 || v24 == (const char *)(*((_QWORD *)this + 19) + *((_QWORD *)this + 20)))
              break;
            *((_QWORD *)this + 18) = ++v24;
            v25 = *(const char **)(v3 + 48);
            if (v25[1] != 35)
              goto LABEL_31;
LABEL_33:
            ;
          }
          while (*(unsigned __int8 *)v25 != *(unsigned __int8 *)v24);
        }
      }
    }
    else
    {
      v18 = *(const char **)(v3 + 40);
      v19 = strlen(v18);
      if (strncmp(v2, v18, v19))
      {
        v20 = v2;
        do
        {
          v21 = *(unsigned __int8 *)v20;
          if (v21 == 10 || v21 == 13)
            break;
          if (v20 == (const char *)(*((_QWORD *)this + 19) + *((_QWORD *)this + 20)))
            break;
          *((_QWORD *)this + 18) = ++v20;
          v23 = strlen(v18);
        }
        while (strncmp(v20, v18, v23));
      }
    }
  }
  else
  {
    v11 = *(_QWORD *)(v3 + 56);
    if (v11 == 1)
    {
      v12 = *(unsigned __int8 *)v2;
      if (**(unsigned __int8 **)(v3 + 48) != v12)
      {
        v13 = *(const char **)(v3 + 40);
        v14 = v2 + 1;
        v15 = v2;
        do
        {
          v16 = strlen(v13);
          if (!strncmp(v14 - 1, v13, v16))
            break;
          if (v12 == 10)
            break;
          if (v12 == 13)
            break;
          if (v14 - 1 == (const char *)(*((_QWORD *)this + 19) + *((_QWORD *)this + 20)))
            break;
          ++v15;
          *((_QWORD *)this + 18) = v14;
          v17 = *(unsigned __int8 *)v14++;
          v12 = v17;
        }
        while (**(unsigned __int8 **)(v3 + 48) != v17);
      }
    }
    else
    {
      v28 = v2;
      v29 = *(const char **)(v3 + 48);
      if (v29[1] == 35)
        goto LABEL_43;
LABEL_41:
      if (strncmp(v28, v29, v11))
      {
        do
        {
          v30 = strlen(*(const char **)(v3 + 40));
          if (!strncmp(v28, *(const char **)(v3 + 40), v30))
            break;
          v31 = *(unsigned __int8 *)v28;
          if (v31 == 10 || v31 == 13 || v28 == (const char *)(*((_QWORD *)this + 19) + *((_QWORD *)this + 20)))
            break;
          *((_QWORD *)this + 18) = ++v28;
          v29 = *(const char **)(v3 + 48);
          if (v29[1] != 35)
            goto LABEL_41;
LABEL_43:
          ;
        }
        while (*(unsigned __int8 *)v29 != *(unsigned __int8 *)v28);
      }
    }
  }
  return v2;
}

uint64_t llvm::AsmLexer::peekTokens(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;
  int v18;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  void *__p;
  unsigned int v26;
  std::string __str;

  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_BYTE *)(a1 + 168);
  v10 = *(_BYTE *)(a1 + 169);
  v11 = *(_BYTE *)(a1 + 104);
  *(_BYTE *)(a1 + 104) = a4;
  v21 = *(_BYTE *)(a1 + 170);
  v22 = v11;
  *(_BYTE *)(a1 + 170) = 1;
  v12 = (std::string *)(a1 + 72);
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
    v13 = *(_QWORD *)(a1 + 64);
    if (a3)
      goto LABEL_3;
LABEL_14:
    v14 = 0;
    goto LABEL_17;
  }
  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  v13 = *(_QWORD *)(a1 + 64);
  if (!a3)
    goto LABEL_14;
LABEL_3:
  v20 = v8;
  v14 = 0;
  v15 = a2 + 24;
  do
  {
    (**(void (***)(__int128 *__return_ptr, uint64_t))a1)(&v23, a1);
    v16 = v23;
    *(_QWORD *)(v15 - 8) = v24;
    *(_OWORD *)(v15 - 24) = v16;
    if (*(_DWORD *)(v15 + 8) > 0x40u || (v17 = v26, v26 > 0x40))
    {
      llvm::APInt::assignSlowCase((const void **)v15, (const void **)&__p);
      v18 = v23;
      if (v26 >= 0x41 && __p)
        operator delete[](__p);
      if (!v18)
        goto LABEL_16;
    }
    else
    {
      *(_QWORD *)v15 = __p;
      *(_DWORD *)(v15 + 8) = v17;
      if (!(_DWORD)v23)
        goto LABEL_16;
    }
    ++v14;
    v15 += 40;
  }
  while (a3 != v14);
  v14 = a3;
LABEL_16:
  v8 = v20;
LABEL_17:
  *(_QWORD *)(a1 + 64) = v13;
  std::string::operator=(v12, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 170) = v21;
  *(_BYTE *)(a1 + 104) = v22;
  *(_BYTE *)(a1 + 169) = v10;
  *(_BYTE *)(a1 + 168) = v9;
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 96) = v7;
  return v14;
}

void llvm::AsmLexer::LexToken(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  const char *data;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v13;
  unint64_t v15;
  int v16;
  std::string::size_type v17;
  const char *v18;
  size_t v19;
  std::string::pointer v20;
  char *v21;
  std::string::pointer i;
  int v23;
  const char *v24;
  size_t v25;
  std::string::value_type v26;
  size_t v27;
  int v28;
  std::string::pointer v29;
  char *v30;
  std::string::pointer j;
  int v32;
  int v33;
  std::string::pointer v34;
  int64_t v35;
  unsigned __int8 *v36;
  int v37;
  int v39;
  int v41;
  int v42;
  std::string::pointer v43;
  std::string::pointer v44;
  int v45;
  std::string::pointer v46;
  size_t v47;
  std::string::pointer v48;
  std::string::pointer v49;
  std::string::pointer v50;
  int v51;
  std::string::pointer v52;
  std::string::pointer v53;
  int v54;
  std::string::pointer v55;
  std::string::pointer v56;
  std::string::size_type v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v74;
  std::string::size_type v76;
  std::string::size_type v78;
  std::string::pointer v79;
  std::string::size_type v80;
  std::string __str;
  void *v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  void *__p;
  unsigned int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  data = this[6].__r_.__value_.__l.__data_;
  size = this[6].__r_.__value_.__l.__size_;
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  if (data == (const char *)(size + this[6].__r_.__value_.__r.__words[2]))
  {
    v6 = -1;
    v17 = this[5].__r_.__value_.__r.__words[2];
    if (*(_BYTE *)(v17 + 64))
      goto LABEL_24;
    goto LABEL_25;
  }
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
  v6 = *(unsigned __int8 *)data;
  if (this[7].__r_.__value_.__s.__data_[2] || v6 != 35)
  {
LABEL_23:
    v17 = this[5].__r_.__value_.__r.__words[2];
    if (*(_BYTE *)(v17 + 64))
      goto LABEL_24;
LABEL_25:
    v18 = *(const char **)(v17 + 48);
    v19 = *(_QWORD *)(v17 + 56);
    if (v19 == 1 || v18[1] == 35)
    {
      if (*(unsigned __int8 *)v18 == *(unsigned __int8 *)data)
        goto LABEL_28;
    }
    else if (!strncmp(data, v18, v19))
    {
LABEL_28:
      v20 = this[6].__r_.__value_.__l.__data_;
      v21 = (char *)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
      i = v20;
      if (v20 != v21)
        goto LABEL_274;
      v23 = -1;
      for (i = this[6].__r_.__value_.__l.__data_; (v23 + 1) > 0xE || ((1 << (v23 + 1)) & 0x4801) == 0; ++i)
      {
        if (i == v21)
        {
          v23 = -1;
          i = v21;
          break;
        }
LABEL_274:
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 1);
        v23 = *i;
      }
      if (v23 == 13 && i != v21 && *i == 10)
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 1);
      v78 = this[5].__r_.__value_.__l.__size_;
      if (v78)
        (*(void (**)(std::string::size_type, std::string::pointer, std::string::pointer, char *))(*(_QWORD *)v78 + 16))(v78, v20, v20, &i[~(unint64_t)v20]);
      this[7].__r_.__value_.__s.__data_[0] = 1;
      if (this[7].__r_.__value_.__s.__data_[1])
      {
        v79 = this[4].__r_.__value_.__l.__data_;
        v80 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v79;
      }
      else
      {
        this[7].__r_.__value_.__s.__data_[1] = 1;
        v79 = this[4].__r_.__value_.__l.__data_;
        v80 = ~(unint64_t)v79 + this[6].__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)a2 = 9;
      *(_QWORD *)(a2 + 8) = v79;
      *(_QWORD *)(a2 + 16) = v80;
      goto LABEL_292;
    }
LABEL_31:
    v24 = *(const char **)(v17 + 40);
    v25 = strlen(v24);
    if (!strncmp(data, v24, v25))
    {
      this[6].__r_.__value_.__r.__words[0] = v25 + this[6].__r_.__value_.__r.__words[0] - 1;
      LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
      v27 = strlen(v24);
      *(_DWORD *)a2 = 9;
      *(_QWORD *)(a2 + 8) = data;
      *(_QWORD *)(a2 + 16) = v27;
LABEL_292:
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 24) = 0;
      return;
    }
    if (v6 != -1)
    {
      v26 = this[7].__r_.__value_.__s.__data_[1];
      LOWORD(this[7].__r_.__value_.__l.__data_) = 0;
      switch(v6)
      {
        case 0u:
        case 9u:
        case 0x20u:
          this[7].__r_.__value_.__s.__data_[1] = v26;
          v34 = this[6].__r_.__value_.__l.__data_;
          v35 = v34 - data;
          v36 = (unsigned __int8 *)(v34 + 1);
          v37 = *(v36 - 1);
          if (v37 == 32 || v37 == 9)
          {
            do
            {
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
              ++v35;
              v39 = *v36++;
            }
            while (v39 == 32 || v39 == 9);
          }
          if (!this[4].__r_.__value_.__s.__data_[8])
          {
            *(_DWORD *)a2 = 11;
            goto LABEL_67;
          }
          (*(void (**)(std::string *))this->__r_.__value_.__l.__data_)(this);
          return;
        case 0xAu:
          LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
          v42 = 9;
          goto LABEL_161;
        case 0xDu:
          LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
          v43 = this[6].__r_.__value_.__l.__data_;
          if (v43 != (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2])
            && *v43 == 10)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++v43;
          }
          *(_DWORD *)a2 = 9;
          v35 = v43 - data;
          goto LABEL_67;
        case 0x21u:
          v44 = this[6].__r_.__value_.__l.__data_;
          if (*v44 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v44 + 1);
            v45 = 36;
            goto LABEL_135;
          }
          v42 = 35;
          goto LABEL_161;
        case 0x22u:
          llvm::AsmLexer::LexQuote(this, a2);
          return;
        case 0x23u:
          if (*(_BYTE *)(v17 + 184))
            goto LABEL_121;
          v42 = 38;
          goto LABEL_161;
        case 0x24u:
          if (this[4].__r_.__value_.__s.__data_[15]
            && llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)this[6].__r_.__value_.__l.__data_] != -1)
          {
            goto LABEL_34;
          }
          if (*(_BYTE *)(v17 + 182))
            goto LABEL_121;
          v42 = 27;
          goto LABEL_161;
        case 0x25u:
          if (this[4].__r_.__value_.__s.__data_[15] && (*this[6].__r_.__value_.__l.__data_ & 0xFE) == 0x30)
            goto LABEL_34;
          if (!*(_BYTE *)(v17 + 490))
            goto LABEL_160;
          v46 = this[6].__r_.__value_.__l.__data_;
          if (!v46)
            goto LABEL_160;
          v47 = strlen(this[6].__r_.__value_.__l.__data_);
          if (v47 < 6)
          {
            if (v47 < 3)
            {
              if (v47 != 2)
                goto LABEL_160;
LABEL_157:
              v59 = 0x30000003DLL;
              if (*(_WORD *)v46 == 26984)
                goto LABEL_239;
              if (*(_WORD *)v46 != 28524)
              {
                if (v47 < 3)
                {
LABEL_160:
                  v42 = 37;
                  goto LABEL_161;
                }
                if (*(_WORD *)v46 == 25966 && v46[2] == 103)
                {
                  v59 = 0x400000041;
                }
                else
                {
                  if (v47 < 8)
                  {
                    if (v47 < 5)
                      goto LABEL_160;
                    goto LABEL_222;
                  }
                  if (*(_QWORD *)v46 != 0x69685F6C65726370)
                  {
                    if (*(_QWORD *)v46 != 0x6F6C5F6C65726370)
                    {
LABEL_222:
                      if (*(_DWORD *)v46 == 1735617652 && v46[4] == 100)
                      {
                        LODWORD(v59) = 68;
                        LODWORD(v74) = 6;
                      }
                      else
                      {
                        if (v47 < 6)
                          goto LABEL_160;
                        if (*(_DWORD *)v46 == 1819503732 && *((_WORD *)v46 + 2) == 28004)
                        {
                          LODWORD(v59) = 69;
                          LODWORD(v74) = 7;
                        }
                        else
                        {
                          if (v47 < 8)
                            goto LABEL_160;
                          if (*(_QWORD *)v46 == 0x69685F6C65727074)
                          {
                            LODWORD(v59) = 70;
                          }
                          else
                          {
                            if (*(_QWORD *)v46 != 0x6F6C5F6C65727074)
                              goto LABEL_160;
                            LODWORD(v59) = 71;
                          }
                          LODWORD(v74) = 9;
                        }
                      }
                      goto LABEL_240;
                    }
                    LODWORD(v59) = 67;
                    LODWORD(v74) = 9;
LABEL_240:
                    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v46[(v74 - 1)];
                    *(_DWORD *)a2 = v59;
                    v35 = v74;
LABEL_67:
                    *(_QWORD *)(a2 + 8) = data;
                    *(_QWORD *)(a2 + 16) = v35;
                    goto LABEL_292;
                  }
                  v59 = 0x900000042;
                }
LABEL_239:
                v74 = HIDWORD(v59);
                goto LABEL_240;
              }
LABEL_199:
              v59 += 3;
              goto LABEL_239;
            }
LABEL_152:
            if (*(_WORD *)v46 == 28519 && v46[2] == 116)
            {
              v59 = 0x400000035;
              goto LABEL_239;
            }
            if (v47 >= 6)
            {
              if (*(_DWORD *)v46 == 1918857319 && *((_WORD *)v46 + 2) == 27749)
              {
                v59 = 0x70000003CLL;
                goto LABEL_239;
              }
              if (*(_DWORD *)v46 == 1751607656 && *((_WORD *)v46 + 2) == 29285)
              {
                v59 = 0x70000003ELL;
                goto LABEL_239;
              }
              if (v47 >= 7)
              {
                if (*(_DWORD *)v46 == 1751607656 && *(_DWORD *)(v46 + 3) == 1953719656)
                {
                  v59 = 0x80000003FLL;
                  goto LABEL_239;
                }
              }
              else
              {
                v47 = 6;
              }
            }
            goto LABEL_157;
          }
          v59 = 0x700000030;
          if (*(_DWORD *)v46 == 1819042147 && *((_WORD *)v46 + 2) == 13873)
            goto LABEL_239;
          if (v47 < 7)
          {
            v47 = 6;
            goto LABEL_143;
          }
          if (*(_DWORD *)v46 == 1819042147 && *(_DWORD *)(v46 + 3) == 1768447852)
          {
            v59 = 0x800000031;
            goto LABEL_239;
          }
          if (*(_DWORD *)v46 == 1819042147 && *(_DWORD *)(v46 + 3) == 1869373292)
          {
            v59 = 0x800000032;
            goto LABEL_239;
          }
          if (v47 >= 9)
          {
            if (*(_QWORD *)v46 == 0x685F6C6572707464 && v46[8] == 105)
            {
              LODWORD(v59) = 51;
              LODWORD(v74) = 10;
              goto LABEL_240;
            }
            if (*(_QWORD *)v46 == 0x6C5F6C6572707464 && v46[8] == 111)
            {
              LODWORD(v59) = 52;
              LODWORD(v74) = 10;
              goto LABEL_240;
            }
          }
          else if (v47 != 8)
          {
            v47 = 7;
            goto LABEL_143;
          }
          if (*(_QWORD *)v46 == 0x707369645F746F67)
          {
            v59 = 0x900000036;
            goto LABEL_239;
          }
LABEL_143:
          if (*(_DWORD *)v46 == 1601466215 && *((_WORD *)v46 + 2) == 26984)
          {
            v59 = 0x700000037;
            goto LABEL_239;
          }
          if (*(_DWORD *)v46 == 1601466215 && *((_WORD *)v46 + 2) == 28524)
          {
            v59 = 0x700000038;
            goto LABEL_239;
          }
          if (v47 >= 8)
          {
            v59 = 0x900000036;
            switch(*(_QWORD *)v46)
            {
              case 0x7473666F5F746F67:
                goto LABEL_199;
              case 0x656761705F746F67:
                v59 = 0x90000003ALL;
                goto LABEL_239;
              case 0x6C65727074746F67:
                v59 = 0x90000003BLL;
                goto LABEL_239;
            }
          }
          goto LABEL_152;
        case 0x26u:
          v48 = this[6].__r_.__value_.__l.__data_;
          if (*v48 == 38)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v48 + 1);
            v45 = 34;
            goto LABEL_135;
          }
          v42 = 33;
          goto LABEL_161;
        case 0x27u:
          llvm::AsmLexer::LexSingleQuote(this, a2);
          return;
        case 0x28u:
          v42 = 17;
          goto LABEL_161;
        case 0x29u:
          v42 = 18;
          goto LABEL_161;
        case 0x2Au:
          v42 = 24;
          goto LABEL_161;
        case 0x2Bu:
          v42 = 12;
          goto LABEL_161;
        case 0x2Cu:
          v42 = 26;
          goto LABEL_161;
        case 0x2Du:
          v49 = this[6].__r_.__value_.__l.__data_;
          if (*v49 == 62)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v49 + 1);
            v45 = 47;
            goto LABEL_135;
          }
          v42 = 13;
          goto LABEL_161;
        case 0x2Fu:
          this[7].__r_.__value_.__s.__data_[1] = v26;
          llvm::AsmLexer::LexSlash(this, a2);
          return;
        case 0x30u:
        case 0x31u:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x36u:
        case 0x37u:
        case 0x38u:
        case 0x39u:
LABEL_34:
          llvm::AsmLexer::LexDigit((llvm::AsmLexer *)this, a2);
          return;
        case 0x3Au:
          v42 = 10;
          goto LABEL_161;
        case 0x3Cu:
          v50 = this[6].__r_.__value_.__l.__data_;
          v51 = *v50;
          switch(v51)
          {
            case '>':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v50 + 1);
              v45 = 42;
              goto LABEL_135;
            case '=':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v50 + 1);
              v45 = 40;
              goto LABEL_135;
            case '<':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v50 + 1);
              v45 = 41;
              goto LABEL_135;
          }
          v42 = 39;
          goto LABEL_161;
        case 0x3Du:
          v52 = this[6].__r_.__value_.__l.__data_;
          if (*v52 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v52 + 1);
            v45 = 29;
            goto LABEL_135;
          }
          v42 = 28;
          goto LABEL_161;
        case 0x3Eu:
          v53 = this[6].__r_.__value_.__l.__data_;
          v54 = *v53;
          if (v54 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v53 + 1);
            v45 = 44;
            goto LABEL_135;
          }
          if (v54 == 62)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v53 + 1);
            v45 = 45;
            goto LABEL_135;
          }
          v42 = 43;
          goto LABEL_161;
        case 0x3Fu:
          if (*(_BYTE *)(v17 + 181))
            goto LABEL_121;
          v42 = 23;
          goto LABEL_161;
        case 0x40u:
          if (*(_BYTE *)(v17 + 183))
            goto LABEL_121;
          v42 = 46;
          goto LABEL_161;
        case 0x5Bu:
          v42 = 19;
          goto LABEL_161;
        case 0x5Cu:
          v42 = 16;
          goto LABEL_161;
        case 0x5Du:
          v42 = 20;
          goto LABEL_161;
        case 0x5Eu:
          v42 = 32;
          goto LABEL_161;
        case 0x7Bu:
          v42 = 21;
          goto LABEL_161;
        case 0x7Cu:
          v55 = this[6].__r_.__value_.__l.__data_;
          if (*v55 == 124)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v55 + 1);
            v45 = 31;
LABEL_135:
            *(_DWORD *)a2 = v45;
            *(_QWORD *)(a2 + 8) = data;
            *(_DWORD *)(a2 + 32) = 64;
            v58 = xmmword_181268770;
          }
          else
          {
            v42 = 30;
LABEL_161:
            *(_DWORD *)a2 = v42;
            *(_QWORD *)(a2 + 8) = data;
            *(_DWORD *)(a2 + 32) = 64;
            v58 = xmmword_1812362D0;
          }
          *(_OWORD *)(a2 + 16) = v58;
          return;
        case 0x7Du:
          v42 = 22;
          goto LABEL_161;
        case 0x7Eu:
          v42 = 14;
          goto LABEL_161;
        default:
          if (v6 <= 0x7F)
            v41 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x100;
          else
            v41 = __maskrune(v6, 0x100uLL);
          if (v41 || v6 == 95 || v6 == 46)
          {
LABEL_121:
            llvm::AsmLexer::LexIdentifier(this, a2);
          }
          else
          {
            v56 = this[4].__r_.__value_.__l.__data_;
            std::string::basic_string[abi:nn180100]<0>(&__str, "invalid character in input");
            this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v56;
            std::string::operator=(this + 3, &__str);
            v57 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v56;
            *(_DWORD *)a2 = 1;
            *(_QWORD *)(a2 + 8) = v56;
            *(_QWORD *)(a2 + 16) = v57;
            *(_DWORD *)(a2 + 32) = 64;
            *(_QWORD *)(a2 + 24) = 0;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          return;
      }
    }
    v28 = this[7].__r_.__value_.__s.__data_[3];
    if (this[7].__r_.__value_.__s.__data_[1])
    {
      LOWORD(this[7].__r_.__value_.__l.__data_) = 0;
      if (!v28)
      {
LABEL_45:
        *(_DWORD *)a2 = 0;
        goto LABEL_46;
      }
      LOBYTE(v28) = 1;
    }
    else if (this[7].__r_.__value_.__s.__data_[3])
    {
      LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
      *(_DWORD *)a2 = 9;
LABEL_46:
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = data;
      return;
    }
    this[7].__r_.__value_.__s.__data_[0] = v28;
    this[7].__r_.__value_.__s.__data_[1] = v28;
    goto LABEL_45;
  }
  if (!this[7].__r_.__value_.__s.__data_[1])
  {
    v6 = 35;
    goto LABEL_23;
  }
  LODWORD(__str.__r_.__value_.__l.__data_) = 0;
  v82 = 0;
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
  v83 = 1;
  v84 = 0;
  v86 = 0;
  __p = 0;
  v85 = 0;
  v88 = 1;
  v7 = (*(uint64_t (**)(std::string *, std::string *, uint64_t, uint64_t))(this->__r_.__value_.__r.__words[0]
                                                                                 + 32))(this, &__str, 2, 1);
  if (this[7].__r_.__value_.__s.__data_[0] && v7 == 2 && LODWORD(__str.__r_.__value_.__l.__data_) == 4 && v84 == 3)
  {
    v8 = 0;
    v9 = this[4].__r_.__value_.__r.__words[0];
    v10 = (unsigned __int8 *)v9;
    this[6].__r_.__value_.__r.__words[0] = v9;
    v11 = *(unsigned __int8 *)v9;
    if (v11 != 10 && v11 != 13)
    {
      do
      {
        if (v10 == (unsigned __int8 *)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]))
          break;
        ++v8;
        v10 = (unsigned __int8 *)(v9 + v8);
        this[6].__r_.__value_.__r.__words[0] = v9 + v8;
        v13 = *(unsigned __int8 *)(v9 + v8);
      }
      while (v13 != 10 && v13 != 13);
    }
    v15 = this->__r_.__value_.__l.__size_;
    this[4].__r_.__value_.__s.__data_[11] = 0;
    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)&this->__r_.__value_.__l.__size_, v15, (unint64_t)&v84);
    this[4].__r_.__value_.__s.__data_[11] = 0;
    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)&this->__r_.__value_.__l.__size_, this->__r_.__value_.__l.__size_, (unint64_t)&__str);
    v16 = 8;
LABEL_264:
    v33 = 0;
    *(_DWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
    goto LABEL_265;
  }
  if (*(_BYTE *)(this[5].__r_.__value_.__r.__words[2] + 65))
  {
    v29 = this[6].__r_.__value_.__l.__data_;
    v30 = (char *)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
    j = v29;
    if (v29 != v30)
      goto LABEL_246;
    v32 = -1;
    for (j = this[6].__r_.__value_.__l.__data_; (v32 + 1) > 0xE || ((1 << (v32 + 1)) & 0x4801) == 0; ++j)
    {
      if (j == v30)
      {
        v32 = -1;
        j = v30;
        break;
      }
LABEL_246:
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 1);
      v32 = *j;
    }
    if (v32 == 13 && j != v30 && *j == 10)
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 1);
    v76 = this[5].__r_.__value_.__l.__size_;
    if (v76)
      (*(void (**)(std::string::size_type, std::string::pointer, std::string::pointer, char *))(*(_QWORD *)v76 + 16))(v76, v29, v29, &j[~(unint64_t)v29]);
    this[7].__r_.__value_.__s.__data_[0] = 1;
    if (this[7].__r_.__value_.__s.__data_[1])
    {
      v9 = this[4].__r_.__value_.__r.__words[0];
      v8 = this[6].__r_.__value_.__r.__words[0] - v9;
    }
    else
    {
      this[7].__r_.__value_.__s.__data_[1] = 1;
      v9 = this[4].__r_.__value_.__r.__words[0];
      v8 = ~v9 + this[6].__r_.__value_.__r.__words[0];
    }
    v16 = 9;
    goto LABEL_264;
  }
  v33 = 1;
LABEL_265:
  if (v88 >= 0x41 && __p)
    operator delete[](__p);
  if (v83 >= 0x41 && v82)
    operator delete[](v82);
  if (v33)
  {
    data = this[4].__r_.__value_.__l.__data_;
    v17 = this[5].__r_.__value_.__r.__words[2];
    if (!*(_BYTE *)(v17 + 64))
      goto LABEL_25;
LABEL_24:
    if (!this[7].__r_.__value_.__s.__data_[1])
      goto LABEL_31;
    goto LABEL_25;
  }
}

uint64_t llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  unint64_t v17;
  _BOOL4 v19;
  __int128 *v20;
  __int128 v21;
  unint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  const void **v25;
  const void **v26;
  unint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  unint64_t v30;
  __int128 v31;
  llvm::APInt *v32;
  const void **v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v37;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a1 + 40 * v6;
  if (v7 == a2)
  {
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      v39 = v6 + 1;
      if (v5 <= a3 && a2 > a3)
      {
        v42 = a3 - v5;
        llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(a1, v39);
        v5 = *(_QWORD *)a1;
        v3 = *(_QWORD *)a1 + v42;
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(a1, v39);
        v5 = *(_QWORD *)a1;
      }
    }
    v30 = v5 + 40 * *(unsigned int *)(a1 + 8);
    v31 = *(_OWORD *)v3;
    *(_QWORD *)(v30 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v30 = v31;
    v32 = (llvm::APInt *)(v30 + 24);
    v33 = (const void **)(v3 + 24);
    v34 = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(v30 + 32) = v34;
    if (v34 > 0x40)
      llvm::APInt::initSlowCase(v32, v33);
    else
      *(_QWORD *)v32 = *v33;
    v35 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v35;
    return *(_QWORD *)a1 + 40 * v35 - 40;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v5) >> 3);
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      v37 = v6 + 1;
      if (v5 <= a3 && v7 > a3)
      {
        v41 = a3 - v5;
        llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(a1, v37);
        v5 = *(_QWORD *)a1;
        v3 = *(_QWORD *)a1 + v41;
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(a1, v37);
        v5 = *(_QWORD *)a1;
      }
    }
    v9 = v5 + 40 * v8;
    v10 = v5 + 40 * *(unsigned int *)(a1 + 8);
    *(_OWORD *)v10 = *(_OWORD *)(v10 - 40);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(v10 - 8);
    v11 = *(_QWORD *)(v10 - 16);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v10 - 24);
    *(_QWORD *)(v10 + 24) = v11;
    *(_DWORD *)(v10 - 8) = 0;
    v12 = *(_QWORD *)a1;
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_QWORD *)a1 + 40 * v13 - 40;
    if (v14 != v9)
    {
      do
      {
        *(_OWORD *)v14 = *(_OWORD *)(v14 - 40);
        *(_QWORD *)(v14 + 16) = *(_QWORD *)(v14 - 24);
        if (*(_DWORD *)(v14 + 32) >= 0x41u)
        {
          v15 = *(void **)(v14 + 24);
          if (v15)
            operator delete[](v15);
        }
        *(_QWORD *)(v14 + 24) = *(_QWORD *)(v14 - 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 - 8);
        *(_DWORD *)(v14 - 8) = 0;
        v14 -= 40;
      }
      while (v14 != v9);
      v13 = *(_DWORD *)(a1 + 8);
      v12 = *(_QWORD *)a1;
    }
    v16 = v13 + 1;
    *(_DWORD *)(a1 + 8) = v16;
    v17 = v12 + 40 * v16;
    v19 = v3 >= v9 && v3 < v17;
    v20 = (__int128 *)(v3 + 40 * v19);
    v21 = *v20;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)v20 + 2);
    *(_OWORD *)v9 = v21;
    v22 = v5 + 40 * v8;
    v24 = *(_DWORD *)(v22 + 32);
    v23 = (_DWORD *)(v22 + 32);
    v25 = (const void **)(v23 - 2);
    v26 = (const void **)v20 + 3;
    if (v24 > 0x40 || (v27 = v3 + 40 * v19, v29 = *(_DWORD *)(v27 + 32), v28 = (_DWORD *)(v27 + 32), v29 > 0x40))
    {
      llvm::APInt::assignSlowCase(v25, v26);
    }
    else
    {
      *v25 = *v26;
      *v23 = *v28;
    }
  }
  return v9;
}

void llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 40, &v15);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = &v6[40 * v7];
    v9 = v4;
    do
    {
      v10 = *(_OWORD *)v6;
      v9[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)v9 = v10;
      *((_DWORD *)v9 + 8) = *((_DWORD *)v6 + 8);
      v9[3] = *((_QWORD *)v6 + 3);
      *((_DWORD *)v6 + 8) = 0;
      v6 += 40;
      v9 += 5;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 40 * v11;
      do
      {
        if (*(_DWORD *)&v6[v12 - 8] >= 0x41u)
        {
          v13 = *(void **)&v6[v12 - 16];
          if (v13)
            operator delete[](v13);
        }
        v12 -= 40;
      }
      while (v12);
      v6 = *(char **)a1;
    }
  }
  v14 = v15;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v14;
}

uint64_t llvm::MCParserUtils::parseAssignmentExpression(const char *a1, uint64_t a2, int a3, llvm::MCAsmParser *a4, uint64_t *a5, const llvm::MCExpr **a6)
{
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t result;
  llvm::MCContext *v15;
  llvm::MCParserUtils *v16;
  const llvm::MCExpr *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  llvm::MCContext *v23;
  int v24;
  int v25;
  void *AssociatedFragment;
  void *v27;
  const char *v28;
  __int16 v29;
  uint64_t v30[2];
  const char *v31;
  uint64_t v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  __int16 v37;

  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(a4);
  Loc = mlir::Token::getLoc(Tok);
  if (llvm::MCAsmParser::parseExpression(a4, a6))
  {
    v34 = "missing expression";
    v37 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)a4, (uint64_t)&v34, 0, 0);
  }
  if (llvm::MCAsmParser::parseEOL(a4))
    return 1;
  v15 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a4 + 48))(a4);
  v37 = 261;
  v34 = a1;
  v35 = a2;
  v16 = (llvm::MCParserUtils *)llvm::MCContext::lookupSymbol(v15, &v34);
  *a5 = (uint64_t)v16;
  if (!v16)
  {
    if (a2 == 1 && *a1 == 46)
    {
      v19 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a4 + 56))(a4);
      (*(void (**)(uint64_t, const llvm::MCExpr *, _QWORD, uint64_t))(*(_QWORD *)v19 + 656))(v19, *a6, 0, Loc);
      return 0;
    }
    v23 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a4 + 48))(a4);
    v37 = 261;
    v34 = a1;
    v35 = a2;
    v20 = llvm::MCContext::getOrCreateSymbol(v23, &v34);
    *a5 = v20;
    goto LABEL_20;
  }
  llvm::MCParserUtils::isSymbolUsedInExpression(v16, *a6, v17);
  if (v18)
  {
    v33 = 1283;
    v30[0] = (uint64_t)"Recursive use of '";
    v31 = a1;
    v32 = a2;
    v34 = (const char *)v30;
    v36 = "'";
    v37 = 770;
    return llvm::MCAsmParser::Error((uint64_t)a4, Loc, (uint64_t)&v34, 0, 0);
  }
  v20 = *a5;
  if (!*(_QWORD *)*a5)
  {
    v25 = *(_DWORD *)(v20 + 8);
    if ((v25 & 0x7080) == 0x2000)
    {
      AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
      *(_QWORD *)v20 = AssociatedFragment;
      v20 = *a5;
      if (AssociatedFragment)
        goto LABEL_12;
      v25 = *(_DWORD *)(v20 + 8);
    }
    if ((v25 & 8) == 0 && (v25 & 0x7000) != 0x2000)
      goto LABEL_20;
  }
LABEL_12:
  v21 = *(_DWORD *)(v20 + 8);
  if ((v21 & 0x7000) == 0x2000 && (v21 & 8) == 0 && (a3 & 1) != 0)
    goto LABEL_20;
  if (*(_QWORD *)v20)
  {
    if ((v21 & 0x7000) != 0x2000)
    {
LABEL_18:
      v33 = 1283;
      v22 = "redefinition of '";
LABEL_39:
      v30[0] = (uint64_t)v22;
      v31 = a1;
      v32 = a2;
      v28 = "'";
      v29 = 259;
      llvm::operator+(v30, (uint64_t *)&v28, (uint64_t)&v34);
      return llvm::MCAsmParser::Error((uint64_t)a4, Loc, (uint64_t)&v34, 0, 0);
    }
    goto LABEL_17;
  }
  if ((v21 & 0x7080) == 0x2000)
  {
    *(_DWORD *)(v20 + 8) = v21 | 8;
    v27 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
    *(_QWORD *)v20 = v27;
    v20 = *a5;
    v21 = *(_DWORD *)(*a5 + 8);
    if (v27)
    {
      if ((*(_DWORD *)(*a5 + 8) & 0x7000) != 0x2000)
        goto LABEL_18;
LABEL_17:
      if ((a3 & 1) == 0)
        goto LABEL_18;
    }
  }
  if ((v21 & 0x7000) != 0x2000)
  {
    v33 = 1283;
    v22 = "invalid assignment to '";
    goto LABEL_39;
  }
  *(_DWORD *)(v20 + 8) = v21 | 8;
  if (**(_BYTE **)(v20 + 24) != 1)
  {
    v33 = 1283;
    v22 = "invalid reassignment of non-absolute variable '";
    goto LABEL_39;
  }
  v20 = *a5;
LABEL_20:
  result = 0;
  if (a3)
    v24 = 4;
  else
    v24 = 0;
  *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0xFFFFFFFB | v24;
  return result;
}

void llvm::MCParserUtils::isSymbolUsedInExpression(llvm::MCParserUtils *this, const llvm::MCSymbol *a2, const llvm::MCExpr *a3)
{
  __asm { BR              X9 }
}

uint64_t sub_180C41DF8(int a1, int a2, const llvm::MCExpr *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  llvm::MCParserUtils *v14;
  uint64_t v15;
  char v16;

  llvm::MCParserUtils::isSymbolUsedInExpression(v14, *(const llvm::MCSymbol **)(v15 + 16), a3);
  if ((v16 & 1) == 0)
    JUMPOUT(0x180C41DE0);
  return 1;
}

uint64_t llvm::createMCAsmParser(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  void *v11;
  uint64_t result;
  void *v13;

  if (a2[12] == 32 && a2[15] == 15)
  {
    v13 = operator new(0x370uLL);
    *(_QWORD *)result = off_1E0E15A88;
    *(_QWORD *)(result + 864) = result + 40;
    *(_QWORD *)(result + 872) = a3;
    *(_BYTE *)(result + 144) = 0;
    *(_BYTE *)(result + 146) = 1;
    *(_WORD *)(result + 160) = 257;
  }
  else
  {
    v11 = operator new(0x360uLL);
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::AsmParser(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm *v20;
  _QWORD *DarwinAsmParser;
  uint64_t v22;
  uint64_t ELFAsmParser;
  uint64_t v24;
  _QWORD *GOFFAsmParser;
  _QWORD *COFFAsmParser;
  uint64_t WasmAsmParser;
  _QWORD *XCOFFAsmParser;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unsigned int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unsigned int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unsigned int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unsigned int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unsigned int v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unsigned int v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unsigned int v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unsigned int v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unsigned int v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unsigned int v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unsigned int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unsigned int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unsigned int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unsigned int v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unsigned int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unsigned int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unsigned int v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unsigned int v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unsigned int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unsigned int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unsigned int v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unsigned int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unsigned int v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unsigned int v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unsigned int v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unsigned int v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unsigned int v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unsigned int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unsigned int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  unsigned int v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unsigned int v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unsigned int v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unsigned int v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unsigned int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unsigned int v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unsigned int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unsigned int v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unsigned int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unsigned int v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unsigned int v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  char *buffer;
  uint64_t *v708;
  BOOL v709;
  uint64_t v710;
  BOOL v711;
  char *v712;
  uint64_t *v713;
  BOOL v714;
  uint64_t v715;
  BOOL v716;
  char *v717;
  uint64_t *v718;
  BOOL v719;
  uint64_t v720;
  BOOL v721;
  char *v722;
  uint64_t *v723;
  BOOL v724;
  uint64_t v725;
  BOOL v726;
  char *v727;
  uint64_t *v728;
  BOOL v729;
  uint64_t v730;
  BOOL v731;
  char *v732;
  uint64_t *v733;
  BOOL v734;
  uint64_t v735;
  BOOL v736;
  char *v737;
  uint64_t *v738;
  BOOL v739;
  uint64_t v740;
  BOOL v741;
  char *v742;
  uint64_t *v743;
  BOOL v744;
  uint64_t v745;
  BOOL v746;
  char *v747;
  uint64_t *v748;
  BOOL v749;
  uint64_t v750;
  BOOL v751;
  char *v752;
  uint64_t *v753;
  BOOL v754;
  uint64_t v755;
  BOOL v756;
  char *v757;
  uint64_t *v758;
  BOOL v759;
  uint64_t v760;
  BOOL v761;
  char *v762;
  uint64_t *v763;
  BOOL v764;
  uint64_t v765;
  BOOL v766;
  char *v767;
  uint64_t *v768;
  BOOL v769;
  uint64_t v770;
  BOOL v771;
  char *v772;
  uint64_t *v773;
  BOOL v774;
  uint64_t v775;
  BOOL v776;
  char *v777;
  uint64_t *v778;
  BOOL v779;
  uint64_t v780;
  BOOL v781;
  char *v782;
  uint64_t *v783;
  BOOL v784;
  uint64_t v785;
  BOOL v786;
  char *v787;
  uint64_t *v788;
  BOOL v789;
  uint64_t v790;
  BOOL v791;
  char *v792;
  uint64_t *v793;
  BOOL v794;
  uint64_t v795;
  BOOL v796;
  char *v797;
  uint64_t *v798;
  BOOL v799;
  uint64_t v800;
  BOOL v801;
  char *v802;
  uint64_t *v803;
  BOOL v804;
  uint64_t v805;
  BOOL v806;
  char *v807;
  uint64_t *v808;
  BOOL v809;
  uint64_t v810;
  BOOL v811;
  char *v812;
  uint64_t *v813;
  BOOL v814;
  uint64_t v815;
  BOOL v816;
  char *v817;
  uint64_t *v818;
  BOOL v819;
  uint64_t v820;
  BOOL v821;
  char *v822;
  uint64_t *v823;
  BOOL v824;
  uint64_t v825;
  BOOL v826;
  char *v827;
  uint64_t *v828;
  BOOL v829;
  uint64_t v830;
  BOOL v831;
  char *v832;
  uint64_t *v833;
  BOOL v834;
  uint64_t v835;
  BOOL v836;
  char *v837;
  uint64_t *v838;
  BOOL v839;
  uint64_t v840;
  BOOL v841;
  char *v842;
  uint64_t *v843;
  BOOL v844;
  uint64_t v845;
  BOOL v846;
  char *v847;
  uint64_t *v848;
  BOOL v849;
  uint64_t v850;
  BOOL v851;
  char *v852;
  uint64_t *v853;
  BOOL v854;
  uint64_t v855;
  BOOL v856;
  char *v857;
  uint64_t *v858;
  BOOL v859;
  uint64_t v860;
  BOOL v861;
  char *v862;
  uint64_t *v863;
  BOOL v864;
  uint64_t v865;
  BOOL v866;
  char *v867;
  uint64_t *v868;
  BOOL v869;
  uint64_t v870;
  BOOL v871;
  char *v872;
  uint64_t *v873;
  BOOL v874;
  uint64_t v875;
  BOOL v876;
  char *v877;
  uint64_t *v878;
  BOOL v879;
  uint64_t v880;
  BOOL v881;
  char *v882;
  uint64_t *v883;
  BOOL v884;
  uint64_t v885;
  BOOL v886;
  char *v887;
  uint64_t *v888;
  BOOL v889;
  uint64_t v890;
  BOOL v891;
  char *v892;
  uint64_t *v893;
  BOOL v894;
  uint64_t v895;
  BOOL v896;
  char *v897;
  uint64_t *v898;
  BOOL v899;
  uint64_t v900;
  BOOL v901;
  char *v902;
  uint64_t *v903;
  BOOL v904;
  uint64_t v905;
  BOOL v906;
  char *v907;
  uint64_t *v908;
  BOOL v909;
  uint64_t v910;
  BOOL v911;
  char *v912;
  uint64_t *v913;
  BOOL v914;
  uint64_t v915;
  BOOL v916;
  char *v917;
  uint64_t *v918;
  BOOL v919;
  uint64_t v920;
  BOOL v921;
  char *v922;
  uint64_t *v923;
  BOOL v924;
  uint64_t v925;
  BOOL v926;
  char *v927;
  uint64_t *v928;
  BOOL v929;
  uint64_t v930;
  BOOL v931;
  char *v932;
  uint64_t *v933;
  BOOL v934;
  uint64_t v935;
  BOOL v936;
  char *v937;
  uint64_t *v938;
  BOOL v939;
  uint64_t v940;
  BOOL v941;
  char *v942;
  uint64_t *v943;
  BOOL v944;
  uint64_t v945;
  BOOL v946;
  char *v947;
  uint64_t *v948;
  BOOL v949;
  uint64_t v950;
  BOOL v951;
  char *v952;
  uint64_t *v953;
  BOOL v954;
  uint64_t v955;
  BOOL v956;
  char *v957;
  uint64_t *v958;
  BOOL v959;
  uint64_t v960;
  BOOL v961;
  char *v962;
  uint64_t *v963;
  BOOL v964;
  uint64_t v965;
  BOOL v966;
  char *v967;
  uint64_t *v968;
  BOOL v969;
  uint64_t v970;
  BOOL v971;
  char *v972;
  uint64_t *v973;
  BOOL v974;
  uint64_t v975;
  BOOL v976;
  char *v977;
  uint64_t *v978;
  BOOL v979;
  uint64_t v980;
  BOOL v981;
  char *v982;
  uint64_t *v983;
  BOOL v984;
  uint64_t v985;
  BOOL v986;
  char *v987;
  uint64_t *v988;
  BOOL v989;
  uint64_t v990;
  BOOL v991;
  char *v992;
  uint64_t *v993;
  BOOL v994;
  uint64_t v995;
  BOOL v996;
  _DWORD *v997;
  uint64_t *v998;
  BOOL v999;
  uint64_t v1000;
  BOOL v1001;
  char *v1002;
  uint64_t *v1003;
  BOOL v1004;
  uint64_t v1005;
  BOOL v1006;
  char *v1007;
  uint64_t *v1008;
  BOOL v1009;
  uint64_t v1010;
  BOOL v1011;
  char *v1012;
  uint64_t *v1013;
  BOOL v1014;
  uint64_t v1015;
  BOOL v1016;
  char *v1017;
  uint64_t *v1018;
  BOOL v1019;
  uint64_t v1020;
  BOOL v1021;
  char *v1022;
  uint64_t *v1023;
  BOOL v1024;
  uint64_t v1025;
  BOOL v1026;
  char *v1027;
  uint64_t *v1028;
  BOOL v1029;
  uint64_t v1030;
  BOOL v1031;
  char *v1032;
  uint64_t *v1033;
  BOOL v1034;
  uint64_t v1035;
  BOOL v1036;
  char *v1037;
  uint64_t *v1038;
  BOOL v1039;
  uint64_t v1040;
  BOOL v1041;
  char *v1042;
  uint64_t *v1043;
  BOOL v1044;
  uint64_t v1045;
  BOOL v1046;
  char *v1047;
  uint64_t *v1048;
  BOOL v1049;
  uint64_t v1050;
  BOOL v1051;
  char *v1052;
  uint64_t *v1053;
  BOOL v1054;
  uint64_t v1055;
  BOOL v1056;
  char *v1057;
  uint64_t *v1058;
  BOOL v1059;
  uint64_t v1060;
  BOOL v1061;
  char *v1062;
  uint64_t *v1063;
  BOOL v1064;
  uint64_t v1065;
  BOOL v1066;
  char *v1067;
  uint64_t *v1068;
  BOOL v1069;
  uint64_t v1070;
  BOOL v1071;
  char *v1072;
  uint64_t *v1073;
  BOOL v1074;
  uint64_t v1075;
  BOOL v1076;
  char *v1077;
  uint64_t *v1078;
  BOOL v1079;
  uint64_t v1080;
  BOOL v1081;
  char *v1082;
  uint64_t *v1083;
  BOOL v1084;
  uint64_t v1085;
  BOOL v1086;
  char *v1087;
  uint64_t *v1088;
  BOOL v1089;
  uint64_t v1090;
  BOOL v1091;
  char *v1092;
  uint64_t *v1093;
  BOOL v1094;
  uint64_t v1095;
  BOOL v1096;
  char *v1097;
  uint64_t *v1098;
  BOOL v1099;
  uint64_t v1100;
  BOOL v1101;
  char *v1102;
  uint64_t *v1103;
  BOOL v1104;
  uint64_t v1105;
  BOOL v1106;
  char *v1107;
  uint64_t *v1108;
  BOOL v1109;
  uint64_t v1110;
  BOOL v1111;
  char *v1112;
  uint64_t *v1113;
  BOOL v1114;
  uint64_t v1115;
  BOOL v1116;
  char *v1117;
  uint64_t *v1118;
  BOOL v1119;
  uint64_t v1120;
  BOOL v1121;
  char *v1122;
  uint64_t *v1123;
  BOOL v1124;
  uint64_t v1125;
  BOOL v1126;
  char *v1127;
  uint64_t *v1128;
  BOOL v1129;
  uint64_t v1130;
  BOOL v1131;
  char *v1132;
  uint64_t *v1133;
  BOOL v1134;
  uint64_t v1135;
  BOOL v1136;
  char *v1137;
  uint64_t *v1138;
  BOOL v1139;
  uint64_t v1140;
  BOOL v1141;
  char *v1142;
  uint64_t *v1143;
  BOOL v1144;
  uint64_t v1145;
  BOOL v1146;
  char *v1147;
  uint64_t *v1148;
  BOOL v1149;
  uint64_t v1150;
  BOOL v1151;
  char *v1152;
  uint64_t *v1153;
  BOOL v1154;
  uint64_t v1155;
  BOOL v1156;
  char *v1157;
  uint64_t *v1158;
  BOOL v1159;
  uint64_t v1160;
  BOOL v1161;
  char *v1162;
  uint64_t *v1163;
  BOOL v1164;
  uint64_t v1165;
  BOOL v1166;
  char *v1167;
  uint64_t *v1168;
  BOOL v1169;
  uint64_t v1170;
  BOOL v1171;
  char *v1172;
  uint64_t *v1173;
  BOOL v1174;
  uint64_t v1175;
  BOOL v1176;
  char *v1177;
  uint64_t *v1178;
  BOOL v1179;
  uint64_t v1180;
  BOOL v1181;
  char *v1182;
  uint64_t *v1183;
  BOOL v1184;
  uint64_t v1185;
  BOOL v1186;
  char *v1187;
  uint64_t *v1188;
  BOOL v1189;
  uint64_t v1190;
  BOOL v1191;
  char *v1192;
  uint64_t *v1193;
  BOOL v1194;
  uint64_t v1195;
  BOOL v1196;
  char *v1197;
  uint64_t *v1198;
  BOOL v1199;
  uint64_t v1200;
  BOOL v1201;
  char *v1202;
  uint64_t *v1203;
  BOOL v1204;
  uint64_t v1205;
  BOOL v1206;
  char *v1207;
  uint64_t *v1208;
  BOOL v1209;
  uint64_t v1210;
  BOOL v1211;
  char *v1212;
  uint64_t *v1213;
  BOOL v1214;
  uint64_t v1215;
  BOOL v1216;
  char *v1217;
  uint64_t *v1218;
  BOOL v1219;
  uint64_t v1220;
  BOOL v1221;
  char *v1222;
  uint64_t *v1223;
  BOOL v1224;
  uint64_t v1225;
  BOOL v1226;
  char *v1227;
  uint64_t *v1228;
  BOOL v1229;
  uint64_t v1230;
  BOOL v1231;
  char *v1232;
  uint64_t *v1233;
  BOOL v1234;
  uint64_t v1235;
  BOOL v1236;
  char *v1237;
  uint64_t *v1238;
  BOOL v1239;
  uint64_t v1240;
  BOOL v1241;
  char *v1242;
  uint64_t *v1243;
  BOOL v1244;
  uint64_t v1245;
  BOOL v1246;
  char *v1247;
  uint64_t *v1248;
  BOOL v1249;
  uint64_t v1250;
  BOOL v1251;
  char *v1252;
  uint64_t *v1253;
  BOOL v1254;
  uint64_t v1255;
  BOOL v1256;
  char *v1257;
  uint64_t *v1258;
  BOOL v1259;
  uint64_t v1260;
  BOOL v1261;
  char *v1262;
  uint64_t *v1263;
  BOOL v1264;
  uint64_t v1265;
  BOOL v1266;
  char *v1267;
  uint64_t *v1268;
  BOOL v1269;
  uint64_t v1270;
  BOOL v1271;
  char *v1272;
  uint64_t *v1273;
  BOOL v1274;
  uint64_t v1275;
  BOOL v1276;
  char *v1277;
  uint64_t *v1278;
  BOOL v1279;
  uint64_t v1280;
  BOOL v1281;
  char *v1282;
  uint64_t *v1283;
  BOOL v1284;
  uint64_t v1285;
  BOOL v1286;
  char *v1287;
  uint64_t *v1288;
  BOOL v1289;
  uint64_t v1290;
  BOOL v1291;
  char *v1292;
  uint64_t *v1293;
  BOOL v1294;
  uint64_t v1295;
  BOOL v1296;
  char *v1297;
  uint64_t *v1298;
  BOOL v1299;
  uint64_t v1300;
  BOOL v1301;
  char *v1302;
  uint64_t *v1303;
  BOOL v1304;
  uint64_t v1305;
  BOOL v1306;
  char *v1307;
  uint64_t *v1308;
  BOOL v1309;
  uint64_t v1310;
  BOOL v1311;
  char *v1312;
  uint64_t *v1313;
  BOOL v1314;
  uint64_t v1315;
  BOOL v1316;
  char *v1317;
  uint64_t *v1318;
  BOOL v1319;
  uint64_t v1320;
  BOOL v1321;
  char *v1322;
  uint64_t *v1323;
  BOOL v1324;
  uint64_t v1325;
  BOOL v1326;
  char *v1327;
  uint64_t *v1328;
  BOOL v1329;
  uint64_t v1330;
  BOOL v1331;
  char *v1332;
  uint64_t *v1333;
  BOOL v1334;
  uint64_t v1335;
  BOOL v1336;
  char *v1337;
  uint64_t *v1338;
  BOOL v1339;
  uint64_t v1340;
  BOOL v1341;
  char *v1342;
  uint64_t *v1343;
  BOOL v1344;
  uint64_t v1345;
  BOOL v1346;
  char *v1347;
  uint64_t *v1348;
  BOOL v1349;
  uint64_t v1350;
  BOOL v1351;
  char *v1352;
  uint64_t *v1353;
  BOOL v1354;
  uint64_t v1355;
  BOOL v1356;
  char *v1357;
  uint64_t *v1358;
  BOOL v1359;
  uint64_t v1360;
  BOOL v1361;
  char *v1362;
  uint64_t *v1363;
  BOOL v1364;
  uint64_t v1365;
  BOOL v1366;
  char *v1367;
  uint64_t *v1368;
  BOOL v1369;
  uint64_t v1370;
  BOOL v1371;
  char *v1372;
  uint64_t *v1373;
  BOOL v1374;
  uint64_t v1375;
  BOOL v1376;
  char *v1377;
  uint64_t *v1378;
  BOOL v1379;
  uint64_t v1380;
  BOOL v1381;
  _DWORD *v1382;
  uint64_t *v1383;
  BOOL v1384;
  uint64_t v1385;
  BOOL v1386;
  char *v1387;
  uint64_t *v1388;
  BOOL v1389;
  uint64_t v1390;
  BOOL v1391;
  char *v1392;
  uint64_t *v1393;
  BOOL v1394;
  uint64_t v1395;
  BOOL v1396;
  char *v1397;
  uint64_t *v1398;
  BOOL v1399;
  uint64_t v1400;
  BOOL v1401;
  char *v1402;
  uint64_t *v1403;
  BOOL v1404;
  uint64_t v1405;
  BOOL v1406;
  char *v1407;
  uint64_t *v1408;
  BOOL v1409;
  uint64_t v1410;
  BOOL v1411;
  char *v1412;
  uint64_t *v1413;
  BOOL v1414;
  uint64_t v1415;
  BOOL v1416;
  char *v1417;
  uint64_t *v1418;
  BOOL v1419;
  uint64_t v1420;
  BOOL v1421;
  char *v1422;
  uint64_t *v1423;
  BOOL v1424;
  uint64_t v1425;
  BOOL v1426;
  char *v1427;
  uint64_t *v1428;
  BOOL v1429;
  uint64_t v1430;
  BOOL v1431;
  char *v1432;
  uint64_t *v1433;
  BOOL v1434;
  uint64_t v1435;
  BOOL v1436;
  char *v1437;
  uint64_t *v1438;
  BOOL v1439;
  uint64_t v1440;
  BOOL v1441;
  char *v1442;
  uint64_t *v1443;
  BOOL v1444;
  uint64_t v1445;
  BOOL v1446;
  char *v1447;
  uint64_t *v1448;
  BOOL v1449;
  uint64_t v1450;
  BOOL v1451;
  char *v1452;
  uint64_t *v1453;
  BOOL v1454;
  uint64_t v1455;
  BOOL v1456;
  _DWORD *v1457;
  uint64_t *v1458;
  BOOL v1459;
  uint64_t v1460;
  BOOL v1461;
  char *v1462;
  uint64_t *v1463;
  BOOL v1464;
  uint64_t v1465;
  BOOL v1466;
  char *v1467;
  uint64_t *v1468;
  BOOL v1469;
  uint64_t v1470;
  BOOL v1471;
  char *v1472;
  uint64_t *v1473;
  BOOL v1474;
  uint64_t v1475;
  BOOL v1476;
  char *v1477;
  uint64_t *v1478;
  BOOL v1479;
  uint64_t v1480;
  BOOL v1481;
  char *v1482;
  uint64_t *v1483;
  BOOL v1484;
  uint64_t v1485;
  BOOL v1486;
  char *v1487;
  uint64_t *v1488;
  BOOL v1489;
  uint64_t v1490;
  BOOL v1491;
  char *v1492;
  uint64_t *v1493;
  BOOL v1494;
  uint64_t v1495;
  BOOL v1496;
  char *v1497;
  uint64_t *v1498;
  BOOL v1499;
  uint64_t v1500;
  BOOL v1501;
  char *v1502;
  uint64_t *v1503;
  BOOL v1504;
  uint64_t v1505;
  BOOL v1506;
  char *v1507;
  uint64_t *v1508;
  BOOL v1509;
  uint64_t v1510;
  BOOL v1511;
  char *v1512;
  uint64_t *v1513;
  BOOL v1514;
  uint64_t v1515;
  BOOL v1516;
  char *v1517;
  uint64_t *v1518;
  BOOL v1519;
  uint64_t v1520;
  BOOL v1521;
  char *v1522;
  uint64_t *v1523;
  BOOL v1524;
  uint64_t v1525;
  BOOL v1526;
  char *v1527;
  uint64_t *v1528;
  BOOL v1529;
  uint64_t v1530;
  BOOL v1531;
  _DWORD *v1532;
  uint64_t *v1533;
  BOOL v1534;
  uint64_t v1535;
  BOOL v1536;
  char *v1537;
  uint64_t *v1538;
  BOOL v1539;
  uint64_t v1540;
  BOOL v1541;
  char *v1542;
  uint64_t *v1543;
  BOOL v1544;
  uint64_t v1545;
  BOOL v1546;
  char *v1547;
  uint64_t *v1548;
  BOOL v1549;
  uint64_t v1550;
  BOOL v1551;

  v12 = (_QWORD *)llvm::MCAsmParser::MCAsmParser(a1);
  *v12 = off_1E0E1A740;
  llvm::AsmLexer::AsmLexer((llvm::MCAsmLexer *)(v12 + 5), a5);
  *(_QWORD *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 224) = a4;
  *(_QWORD *)(a1 + 232) = a5;
  *(_QWORD *)(a1 + 240) = a2;
  v14 = (_OWORD *)(a1 + 264);
  *(_BYTE *)(a1 + 288) = 0;
  if (a6 <= 1)
    v15 = 1;
  else
    v15 = a6;
  *v14 = 0u;
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 296) = v15;
  *(_DWORD *)(a1 + 300) = 0;
  *(_WORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_DWORD *)(a1 + 356) = 24;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) |= 1u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = a1 + 512;
  *(_QWORD *)(a1 + 504) = 0x400000000;
  *(_QWORD *)(a1 + 736) = a1 + 752;
  *(_QWORD *)(a1 + 744) = 0x200000000;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_QWORD *)(a1 + 784) = a1 + 792;
  *(_DWORD *)(a1 + 808) = -1;
  *(_QWORD *)(a1 + 828) = 0;
  *(_OWORD *)(a1 + 812) = 0u;
  *(_DWORD *)(a1 + 836) = 16;
  v16 = (uint64_t *)(a1 + 840);
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 860) = 16;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = a1;
  v17 = *(_QWORD *)(*(_QWORD *)a2 + 24 * (v15 - 1));
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(_QWORD *)(v17 + 16) - v18;
  *(_BYTE *)(a1 + 32) = 0;
  v20 = (llvm *)llvm::AsmLexer::setBuffer(v13, v18, v19, 0, 1);
  *(_QWORD *)(a4 + 288) = a1 + 272;
  switch(*a3)
  {
    case 0:
      DarwinAsmParser = llvm::createDarwinAsmParser(v20);
      v22 = *(_QWORD *)v14;
      *(_QWORD *)v14 = DarwinAsmParser;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      *(_BYTE *)(a1 + 812) = 1;
      break;
    case 1:
      ELFAsmParser = llvm::createELFAsmParser(v20);
      v24 = *(_QWORD *)v14;
      *(_QWORD *)v14 = ELFAsmParser;
      if (!v24)
        break;
      goto LABEL_17;
    case 2:
      GOFFAsmParser = llvm::createGOFFAsmParser(v20);
      v24 = *(_QWORD *)v14;
      *(_QWORD *)v14 = GOFFAsmParser;
      if (!v24)
        break;
      goto LABEL_17;
    case 3:
      COFFAsmParser = llvm::createCOFFAsmParser(v20);
      v24 = *(_QWORD *)v14;
      *(_QWORD *)v14 = COFFAsmParser;
      if (!v24)
        break;
      goto LABEL_17;
    case 4:
      llvm::report_fatal_error((llvm *)"Need to implement createSPIRVAsmParser for SPIRV format.", (const char *)1);
    case 5:
      WasmAsmParser = llvm::createWasmAsmParser(v20);
      v24 = *(_QWORD *)v14;
      *(_QWORD *)v14 = WasmAsmParser;
      if (!v24)
        break;
      goto LABEL_17;
    case 6:
      XCOFFAsmParser = llvm::createXCOFFAsmParser(v20);
      v24 = *(_QWORD *)v14;
      *(_QWORD *)v14 = XCOFFAsmParser;
      if (v24)
LABEL_17:
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      break;
    case 7:
      llvm::report_fatal_error((llvm *)"DXContainer is not supported yet", (const char *)1);
    default:
      break;
  }
  v29 = (uint64_t *)(a1 + 816);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 264) + 16))(*(_QWORD *)(a1 + 264), a1);
  v30 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".set", (const unsigned __int8 *)4);
  v31 = *(_QWORD *)(a1 + 816);
  v32 = v30;
  v33 = *(_QWORD *)(v31 + 8 * v30);
  if (v33 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v33)
  {
    goto LABEL_20;
  }
  buffer = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(buffer + 16, ".set");
  *(_QWORD *)buffer = 4;
  *((_DWORD *)buffer + 2) = 0;
  *(_QWORD *)(v31 + 8 * v32) = buffer;
  ++*(_DWORD *)(a1 + 828);
  v708 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v32));
  v33 = *v708;
  if (*v708)
    v709 = v33 == -8;
  else
    v709 = 1;
  if (v709)
  {
    do
    {
      v710 = v708[1];
      ++v708;
      v33 = v710;
      if (v710)
        v711 = v33 == -8;
      else
        v711 = 1;
    }
    while (v711);
  }
LABEL_20:
  *(_DWORD *)(v33 + 8) = 1;
  v34 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".equ", (const unsigned __int8 *)4);
  v35 = *v29;
  v36 = v34;
  v37 = *(_QWORD *)(*v29 + 8 * v34);
  if (v37 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v37)
  {
    goto LABEL_22;
  }
  v712 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v712 + 16, ".equ");
  *(_QWORD *)v712 = 4;
  *((_DWORD *)v712 + 2) = 0;
  *(_QWORD *)(v35 + 8 * v36) = v712;
  ++*(_DWORD *)(a1 + 828);
  v713 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v36));
  v37 = *v713;
  if (*v713)
    v714 = v37 == -8;
  else
    v714 = 1;
  if (v714)
  {
    do
    {
      v715 = v713[1];
      ++v713;
      v37 = v715;
      if (v715)
        v716 = v37 == -8;
      else
        v716 = 1;
    }
    while (v716);
  }
LABEL_22:
  *(_DWORD *)(v37 + 8) = 2;
  v38 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".equiv", (const unsigned __int8 *)6);
  v39 = *v29;
  v40 = v38;
  v41 = *(_QWORD *)(*v29 + 8 * v38);
  if (v41 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v41)
  {
    goto LABEL_24;
  }
  v717 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v717 + 16, ".equiv");
  *(_QWORD *)v717 = 6;
  *((_DWORD *)v717 + 2) = 0;
  *(_QWORD *)(v39 + 8 * v40) = v717;
  ++*(_DWORD *)(a1 + 828);
  v718 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v40));
  v41 = *v718;
  if (*v718)
    v719 = v41 == -8;
  else
    v719 = 1;
  if (v719)
  {
    do
    {
      v720 = v718[1];
      ++v718;
      v41 = v720;
      if (v720)
        v721 = v41 == -8;
      else
        v721 = 1;
    }
    while (v721);
  }
LABEL_24:
  *(_DWORD *)(v41 + 8) = 3;
  v42 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ascii", (const unsigned __int8 *)6);
  v43 = *v29;
  v44 = v42;
  v45 = *(_QWORD *)(*v29 + 8 * v42);
  if (v45 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v45)
  {
    goto LABEL_26;
  }
  v722 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v722 + 16, ".ascii");
  *(_QWORD *)v722 = 6;
  *((_DWORD *)v722 + 2) = 0;
  *(_QWORD *)(v43 + 8 * v44) = v722;
  ++*(_DWORD *)(a1 + 828);
  v723 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v44));
  v45 = *v723;
  if (*v723)
    v724 = v45 == -8;
  else
    v724 = 1;
  if (v724)
  {
    do
    {
      v725 = v723[1];
      ++v723;
      v45 = v725;
      if (v725)
        v726 = v45 == -8;
      else
        v726 = 1;
    }
    while (v726);
  }
LABEL_26:
  *(_DWORD *)(v45 + 8) = 4;
  v46 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".asciz", (const unsigned __int8 *)6);
  v47 = *v29;
  v48 = v46;
  v49 = *(_QWORD *)(*v29 + 8 * v46);
  if (v49 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v49)
  {
    goto LABEL_28;
  }
  v727 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v727 + 16, ".asciz");
  *(_QWORD *)v727 = 6;
  *((_DWORD *)v727 + 2) = 0;
  *(_QWORD *)(v47 + 8 * v48) = v727;
  ++*(_DWORD *)(a1 + 828);
  v728 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v48));
  v49 = *v728;
  if (*v728)
    v729 = v49 == -8;
  else
    v729 = 1;
  if (v729)
  {
    do
    {
      v730 = v728[1];
      ++v728;
      v49 = v730;
      if (v730)
        v731 = v49 == -8;
      else
        v731 = 1;
    }
    while (v731);
  }
LABEL_28:
  *(_DWORD *)(v49 + 8) = 5;
  v50 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".string", (const unsigned __int8 *)7);
  v51 = *v29;
  v52 = v50;
  v53 = *(_QWORD *)(*v29 + 8 * v50);
  if (v53 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v53)
  {
    goto LABEL_30;
  }
  v732 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v732 + 16, ".string");
  *(_QWORD *)v732 = 7;
  *((_DWORD *)v732 + 2) = 0;
  *(_QWORD *)(v51 + 8 * v52) = v732;
  ++*(_DWORD *)(a1 + 828);
  v733 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v52));
  v53 = *v733;
  if (*v733)
    v734 = v53 == -8;
  else
    v734 = 1;
  if (v734)
  {
    do
    {
      v735 = v733[1];
      ++v733;
      v53 = v735;
      if (v735)
        v736 = v53 == -8;
      else
        v736 = 1;
    }
    while (v736);
  }
LABEL_30:
  *(_DWORD *)(v53 + 8) = 6;
  v54 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".byte", (const unsigned __int8 *)5);
  v55 = *v29;
  v56 = v54;
  v57 = *(_QWORD *)(*v29 + 8 * v54);
  if (v57 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v57)
  {
    goto LABEL_32;
  }
  v737 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v737 + 16, ".byte");
  *(_QWORD *)v737 = 5;
  *((_DWORD *)v737 + 2) = 0;
  *(_QWORD *)(v55 + 8 * v56) = v737;
  ++*(_DWORD *)(a1 + 828);
  v738 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v56));
  v57 = *v738;
  if (*v738)
    v739 = v57 == -8;
  else
    v739 = 1;
  if (v739)
  {
    do
    {
      v740 = v738[1];
      ++v738;
      v57 = v740;
      if (v740)
        v741 = v57 == -8;
      else
        v741 = 1;
    }
    while (v741);
  }
LABEL_32:
  *(_DWORD *)(v57 + 8) = 7;
  v58 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".short", (const unsigned __int8 *)6);
  v59 = *v29;
  v60 = v58;
  v61 = *(_QWORD *)(*v29 + 8 * v58);
  if (v61 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v61)
  {
    goto LABEL_34;
  }
  v742 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v742 + 16, ".short");
  *(_QWORD *)v742 = 6;
  *((_DWORD *)v742 + 2) = 0;
  *(_QWORD *)(v59 + 8 * v60) = v742;
  ++*(_DWORD *)(a1 + 828);
  v743 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v60));
  v61 = *v743;
  if (*v743)
    v744 = v61 == -8;
  else
    v744 = 1;
  if (v744)
  {
    do
    {
      v745 = v743[1];
      ++v743;
      v61 = v745;
      if (v745)
        v746 = v61 == -8;
      else
        v746 = 1;
    }
    while (v746);
  }
LABEL_34:
  *(_DWORD *)(v61 + 8) = 8;
  v62 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".value", (const unsigned __int8 *)6);
  v63 = *v29;
  v64 = v62;
  v65 = *(_QWORD *)(*v29 + 8 * v62);
  if (v65 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v65)
  {
    goto LABEL_36;
  }
  v747 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v747 + 16, ".value");
  *(_QWORD *)v747 = 6;
  *((_DWORD *)v747 + 2) = 0;
  *(_QWORD *)(v63 + 8 * v64) = v747;
  ++*(_DWORD *)(a1 + 828);
  v748 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v64));
  v65 = *v748;
  if (*v748)
    v749 = v65 == -8;
  else
    v749 = 1;
  if (v749)
  {
    do
    {
      v750 = v748[1];
      ++v748;
      v65 = v750;
      if (v750)
        v751 = v65 == -8;
      else
        v751 = 1;
    }
    while (v751);
  }
LABEL_36:
  *(_DWORD *)(v65 + 8) = 10;
  v66 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".2byte", (const unsigned __int8 *)6);
  v67 = *v29;
  v68 = v66;
  v69 = *(_QWORD *)(*v29 + 8 * v66);
  if (v69 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v69)
  {
    goto LABEL_38;
  }
  v752 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v752 + 16, ".2byte");
  *(_QWORD *)v752 = 6;
  *((_DWORD *)v752 + 2) = 0;
  *(_QWORD *)(v67 + 8 * v68) = v752;
  ++*(_DWORD *)(a1 + 828);
  v753 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v68));
  v69 = *v753;
  if (*v753)
    v754 = v69 == -8;
  else
    v754 = 1;
  if (v754)
  {
    do
    {
      v755 = v753[1];
      ++v753;
      v69 = v755;
      if (v755)
        v756 = v69 == -8;
      else
        v756 = 1;
    }
    while (v756);
  }
LABEL_38:
  *(_DWORD *)(v69 + 8) = 11;
  v70 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".long", (const unsigned __int8 *)5);
  v71 = *v29;
  v72 = v70;
  v73 = *(_QWORD *)(*v29 + 8 * v70);
  if (v73 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v73)
  {
    goto LABEL_40;
  }
  v757 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v757 + 16, ".long");
  *(_QWORD *)v757 = 5;
  *((_DWORD *)v757 + 2) = 0;
  *(_QWORD *)(v71 + 8 * v72) = v757;
  ++*(_DWORD *)(a1 + 828);
  v758 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v72));
  v73 = *v758;
  if (*v758)
    v759 = v73 == -8;
  else
    v759 = 1;
  if (v759)
  {
    do
    {
      v760 = v758[1];
      ++v758;
      v73 = v760;
      if (v760)
        v761 = v73 == -8;
      else
        v761 = 1;
    }
    while (v761);
  }
LABEL_40:
  *(_DWORD *)(v73 + 8) = 12;
  v74 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".int", (const unsigned __int8 *)4);
  v75 = *v29;
  v76 = v74;
  v77 = *(_QWORD *)(*v29 + 8 * v74);
  if (v77 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v77)
  {
    goto LABEL_42;
  }
  v762 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v762 + 16, ".int");
  *(_QWORD *)v762 = 4;
  *((_DWORD *)v762 + 2) = 0;
  *(_QWORD *)(v75 + 8 * v76) = v762;
  ++*(_DWORD *)(a1 + 828);
  v763 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v76));
  v77 = *v763;
  if (*v763)
    v764 = v77 == -8;
  else
    v764 = 1;
  if (v764)
  {
    do
    {
      v765 = v763[1];
      ++v763;
      v77 = v765;
      if (v765)
        v766 = v77 == -8;
      else
        v766 = 1;
    }
    while (v766);
  }
LABEL_42:
  *(_DWORD *)(v77 + 8) = 13;
  v78 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".4byte", (const unsigned __int8 *)6);
  v79 = *v29;
  v80 = v78;
  v81 = *(_QWORD *)(*v29 + 8 * v78);
  if (v81 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v81)
  {
    goto LABEL_44;
  }
  v767 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v767 + 16, ".4byte");
  *(_QWORD *)v767 = 6;
  *((_DWORD *)v767 + 2) = 0;
  *(_QWORD *)(v79 + 8 * v80) = v767;
  ++*(_DWORD *)(a1 + 828);
  v768 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v80));
  v81 = *v768;
  if (*v768)
    v769 = v81 == -8;
  else
    v769 = 1;
  if (v769)
  {
    do
    {
      v770 = v768[1];
      ++v768;
      v81 = v770;
      if (v770)
        v771 = v81 == -8;
      else
        v771 = 1;
    }
    while (v771);
  }
LABEL_44:
  *(_DWORD *)(v81 + 8) = 14;
  v82 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".quad", (const unsigned __int8 *)5);
  v83 = *v29;
  v84 = v82;
  v85 = *(_QWORD *)(*v29 + 8 * v82);
  if (v85 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v85)
  {
    goto LABEL_46;
  }
  v772 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v772 + 16, ".quad");
  *(_QWORD *)v772 = 5;
  *((_DWORD *)v772 + 2) = 0;
  *(_QWORD *)(v83 + 8 * v84) = v772;
  ++*(_DWORD *)(a1 + 828);
  v773 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v84));
  v85 = *v773;
  if (*v773)
    v774 = v85 == -8;
  else
    v774 = 1;
  if (v774)
  {
    do
    {
      v775 = v773[1];
      ++v773;
      v85 = v775;
      if (v775)
        v776 = v85 == -8;
      else
        v776 = 1;
    }
    while (v776);
  }
LABEL_46:
  *(_DWORD *)(v85 + 8) = 15;
  v86 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".8byte", (const unsigned __int8 *)6);
  v87 = *v29;
  v88 = v86;
  v89 = *(_QWORD *)(*v29 + 8 * v86);
  if (v89 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v89)
  {
    goto LABEL_48;
  }
  v777 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v777 + 16, ".8byte");
  *(_QWORD *)v777 = 6;
  *((_DWORD *)v777 + 2) = 0;
  *(_QWORD *)(v87 + 8 * v88) = v777;
  ++*(_DWORD *)(a1 + 828);
  v778 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v88));
  v89 = *v778;
  if (*v778)
    v779 = v89 == -8;
  else
    v779 = 1;
  if (v779)
  {
    do
    {
      v780 = v778[1];
      ++v778;
      v89 = v780;
      if (v780)
        v781 = v89 == -8;
      else
        v781 = 1;
    }
    while (v781);
  }
LABEL_48:
  *(_DWORD *)(v89 + 8) = 16;
  v90 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".octa", (const unsigned __int8 *)5);
  v91 = *v29;
  v92 = v90;
  v93 = *(_QWORD *)(*v29 + 8 * v90);
  if (v93 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v93)
  {
    goto LABEL_50;
  }
  v782 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v782 + 16, ".octa");
  *(_QWORD *)v782 = 5;
  *((_DWORD *)v782 + 2) = 0;
  *(_QWORD *)(v91 + 8 * v92) = v782;
  ++*(_DWORD *)(a1 + 828);
  v783 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v92));
  v93 = *v783;
  if (*v783)
    v784 = v93 == -8;
  else
    v784 = 1;
  if (v784)
  {
    do
    {
      v785 = v783[1];
      ++v783;
      v93 = v785;
      if (v785)
        v786 = v93 == -8;
      else
        v786 = 1;
    }
    while (v786);
  }
LABEL_50:
  *(_DWORD *)(v93 + 8) = 17;
  v94 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".single", (const unsigned __int8 *)7);
  v95 = *v29;
  v96 = v94;
  v97 = *(_QWORD *)(*v29 + 8 * v94);
  if (v97 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v97)
  {
    goto LABEL_52;
  }
  v787 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v787 + 16, ".single");
  *(_QWORD *)v787 = 7;
  *((_DWORD *)v787 + 2) = 0;
  *(_QWORD *)(v95 + 8 * v96) = v787;
  ++*(_DWORD *)(a1 + 828);
  v788 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v96));
  v97 = *v788;
  if (*v788)
    v789 = v97 == -8;
  else
    v789 = 1;
  if (v789)
  {
    do
    {
      v790 = v788[1];
      ++v788;
      v97 = v790;
      if (v790)
        v791 = v97 == -8;
      else
        v791 = 1;
    }
    while (v791);
  }
LABEL_52:
  *(_DWORD *)(v97 + 8) = 41;
  v98 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".float", (const unsigned __int8 *)6);
  v99 = *v29;
  v100 = v98;
  v101 = *(_QWORD *)(*v29 + 8 * v98);
  if (v101 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v101)
  {
    goto LABEL_54;
  }
  v792 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v792 + 16, ".float");
  *(_QWORD *)v792 = 6;
  *((_DWORD *)v792 + 2) = 0;
  *(_QWORD *)(v99 + 8 * v100) = v792;
  ++*(_DWORD *)(a1 + 828);
  v793 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v100));
  v101 = *v793;
  if (*v793)
    v794 = v101 == -8;
  else
    v794 = 1;
  if (v794)
  {
    do
    {
      v795 = v793[1];
      ++v793;
      v101 = v795;
      if (v795)
        v796 = v101 == -8;
      else
        v796 = 1;
    }
    while (v796);
  }
LABEL_54:
  *(_DWORD *)(v101 + 8) = 42;
  v102 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".double", (const unsigned __int8 *)7);
  v103 = *v29;
  v104 = v102;
  v105 = *(_QWORD *)(*v29 + 8 * v102);
  if (v105 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v105)
  {
    goto LABEL_56;
  }
  v797 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v797 + 16, ".double");
  *(_QWORD *)v797 = 7;
  *((_DWORD *)v797 + 2) = 0;
  *(_QWORD *)(v103 + 8 * v104) = v797;
  ++*(_DWORD *)(a1 + 828);
  v798 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v104));
  v105 = *v798;
  if (*v798)
    v799 = v105 == -8;
  else
    v799 = 1;
  if (v799)
  {
    do
    {
      v800 = v798[1];
      ++v798;
      v105 = v800;
      if (v800)
        v801 = v105 == -8;
      else
        v801 = 1;
    }
    while (v801);
  }
LABEL_56:
  *(_DWORD *)(v105 + 8) = 43;
  v106 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".align", (const unsigned __int8 *)6);
  v107 = *v29;
  v108 = v106;
  v109 = *(_QWORD *)(*v29 + 8 * v106);
  if (v109 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v109)
  {
    goto LABEL_58;
  }
  v802 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v802 + 16, ".align");
  *(_QWORD *)v802 = 6;
  *((_DWORD *)v802 + 2) = 0;
  *(_QWORD *)(v107 + 8 * v108) = v802;
  ++*(_DWORD *)(a1 + 828);
  v803 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v108));
  v109 = *v803;
  if (*v803)
    v804 = v109 == -8;
  else
    v804 = 1;
  if (v804)
  {
    do
    {
      v805 = v803[1];
      ++v803;
      v109 = v805;
      if (v805)
        v806 = v109 == -8;
      else
        v806 = 1;
    }
    while (v806);
  }
LABEL_58:
  *(_DWORD *)(v109 + 8) = 44;
  v110 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".align32", (const unsigned __int8 *)8);
  v111 = *v29;
  v112 = v110;
  v113 = *(_QWORD *)(*v29 + 8 * v110);
  if (v113 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v113)
  {
    goto LABEL_60;
  }
  v807 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v807 + 16, ".align32");
  *(_QWORD *)v807 = 8;
  *((_DWORD *)v807 + 2) = 0;
  *(_QWORD *)(v111 + 8 * v112) = v807;
  ++*(_DWORD *)(a1 + 828);
  v808 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v112));
  v113 = *v808;
  if (*v808)
    v809 = v113 == -8;
  else
    v809 = 1;
  if (v809)
  {
    do
    {
      v810 = v808[1];
      ++v808;
      v113 = v810;
      if (v810)
        v811 = v113 == -8;
      else
        v811 = 1;
    }
    while (v811);
  }
LABEL_60:
  *(_DWORD *)(v113 + 8) = 45;
  v114 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".balign", (const unsigned __int8 *)7);
  v115 = *v29;
  v116 = v114;
  v117 = *(_QWORD *)(*v29 + 8 * v114);
  if (v117 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v117)
  {
    goto LABEL_62;
  }
  v812 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v812 + 16, ".balign");
  *(_QWORD *)v812 = 7;
  *((_DWORD *)v812 + 2) = 0;
  *(_QWORD *)(v115 + 8 * v116) = v812;
  ++*(_DWORD *)(a1 + 828);
  v813 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v116));
  v117 = *v813;
  if (*v813)
    v814 = v117 == -8;
  else
    v814 = 1;
  if (v814)
  {
    do
    {
      v815 = v813[1];
      ++v813;
      v117 = v815;
      if (v815)
        v816 = v117 == -8;
      else
        v816 = 1;
    }
    while (v816);
  }
LABEL_62:
  *(_DWORD *)(v117 + 8) = 46;
  v118 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".balignw", (const unsigned __int8 *)8);
  v119 = *v29;
  v120 = v118;
  v121 = *(_QWORD *)(*v29 + 8 * v118);
  if (v121 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v121)
  {
    goto LABEL_64;
  }
  v817 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v817 + 16, ".balignw");
  *(_QWORD *)v817 = 8;
  *((_DWORD *)v817 + 2) = 0;
  *(_QWORD *)(v119 + 8 * v120) = v817;
  ++*(_DWORD *)(a1 + 828);
  v818 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v120));
  v121 = *v818;
  if (*v818)
    v819 = v121 == -8;
  else
    v819 = 1;
  if (v819)
  {
    do
    {
      v820 = v818[1];
      ++v818;
      v121 = v820;
      if (v820)
        v821 = v121 == -8;
      else
        v821 = 1;
    }
    while (v821);
  }
LABEL_64:
  *(_DWORD *)(v121 + 8) = 47;
  v122 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".balignl", (const unsigned __int8 *)8);
  v123 = *v29;
  v124 = v122;
  v125 = *(_QWORD *)(*v29 + 8 * v122);
  if (v125 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v125)
  {
    goto LABEL_66;
  }
  v822 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v822 + 16, ".balignl");
  *(_QWORD *)v822 = 8;
  *((_DWORD *)v822 + 2) = 0;
  *(_QWORD *)(v123 + 8 * v124) = v822;
  ++*(_DWORD *)(a1 + 828);
  v823 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v124));
  v125 = *v823;
  if (*v823)
    v824 = v125 == -8;
  else
    v824 = 1;
  if (v824)
  {
    do
    {
      v825 = v823[1];
      ++v823;
      v125 = v825;
      if (v825)
        v826 = v125 == -8;
      else
        v826 = 1;
    }
    while (v826);
  }
LABEL_66:
  *(_DWORD *)(v125 + 8) = 48;
  v126 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".p2align", (const unsigned __int8 *)8);
  v127 = *v29;
  v128 = v126;
  v129 = *(_QWORD *)(*v29 + 8 * v126);
  if (v129 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v129)
  {
    goto LABEL_68;
  }
  v827 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v827 + 16, ".p2align");
  *(_QWORD *)v827 = 8;
  *((_DWORD *)v827 + 2) = 0;
  *(_QWORD *)(v127 + 8 * v128) = v827;
  ++*(_DWORD *)(a1 + 828);
  v828 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v128));
  v129 = *v828;
  if (*v828)
    v829 = v129 == -8;
  else
    v829 = 1;
  if (v829)
  {
    do
    {
      v830 = v828[1];
      ++v828;
      v129 = v830;
      if (v830)
        v831 = v129 == -8;
      else
        v831 = 1;
    }
    while (v831);
  }
LABEL_68:
  *(_DWORD *)(v129 + 8) = 49;
  v130 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".p2alignw", (const unsigned __int8 *)9);
  v131 = *v29;
  v132 = v130;
  v133 = *(_QWORD *)(*v29 + 8 * v130);
  if (v133 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v133)
  {
    goto LABEL_70;
  }
  v832 = (char *)llvm::allocate_buffer(0x1AuLL, (std::align_val_t)8uLL);
  strcpy(v832 + 16, ".p2alignw");
  *(_QWORD *)v832 = 9;
  *((_DWORD *)v832 + 2) = 0;
  *(_QWORD *)(v131 + 8 * v132) = v832;
  ++*(_DWORD *)(a1 + 828);
  v833 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v132));
  v133 = *v833;
  if (*v833)
    v834 = v133 == -8;
  else
    v834 = 1;
  if (v834)
  {
    do
    {
      v835 = v833[1];
      ++v833;
      v133 = v835;
      if (v835)
        v836 = v133 == -8;
      else
        v836 = 1;
    }
    while (v836);
  }
LABEL_70:
  *(_DWORD *)(v133 + 8) = 50;
  v134 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".p2alignl", (const unsigned __int8 *)9);
  v135 = *v29;
  v136 = v134;
  v137 = *(_QWORD *)(*v29 + 8 * v134);
  if (v137 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v137)
  {
    goto LABEL_72;
  }
  v837 = (char *)llvm::allocate_buffer(0x1AuLL, (std::align_val_t)8uLL);
  strcpy(v837 + 16, ".p2alignl");
  *(_QWORD *)v837 = 9;
  *((_DWORD *)v837 + 2) = 0;
  *(_QWORD *)(v135 + 8 * v136) = v837;
  ++*(_DWORD *)(a1 + 828);
  v838 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v136));
  v137 = *v838;
  if (*v838)
    v839 = v137 == -8;
  else
    v839 = 1;
  if (v839)
  {
    do
    {
      v840 = v838[1];
      ++v838;
      v137 = v840;
      if (v840)
        v841 = v137 == -8;
      else
        v841 = 1;
    }
    while (v841);
  }
LABEL_72:
  *(_DWORD *)(v137 + 8) = 51;
  v138 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".org", (const unsigned __int8 *)4);
  v139 = *v29;
  v140 = v138;
  v141 = *(_QWORD *)(*v29 + 8 * v138);
  if (v141 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v141)
  {
    goto LABEL_74;
  }
  v842 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v842 + 16, ".org");
  *(_QWORD *)v842 = 4;
  *((_DWORD *)v842 + 2) = 0;
  *(_QWORD *)(v139 + 8 * v140) = v842;
  ++*(_DWORD *)(a1 + 828);
  v843 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v140));
  v141 = *v843;
  if (*v843)
    v844 = v141 == -8;
  else
    v844 = 1;
  if (v844)
  {
    do
    {
      v845 = v843[1];
      ++v843;
      v141 = v845;
      if (v845)
        v846 = v141 == -8;
      else
        v846 = 1;
    }
    while (v846);
  }
LABEL_74:
  *(_DWORD *)(v141 + 8) = 52;
  v142 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".fill", (const unsigned __int8 *)5);
  v143 = *v29;
  v144 = v142;
  v145 = *(_QWORD *)(*v29 + 8 * v142);
  if (v145 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v145)
  {
    goto LABEL_76;
  }
  v847 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v847 + 16, ".fill");
  *(_QWORD *)v847 = 5;
  *((_DWORD *)v847 + 2) = 0;
  *(_QWORD *)(v143 + 8 * v144) = v847;
  ++*(_DWORD *)(a1 + 828);
  v848 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v144));
  v145 = *v848;
  if (*v848)
    v849 = v145 == -8;
  else
    v849 = 1;
  if (v849)
  {
    do
    {
      v850 = v848[1];
      ++v848;
      v145 = v850;
      if (v850)
        v851 = v145 == -8;
      else
        v851 = 1;
    }
    while (v851);
  }
LABEL_76:
  *(_DWORD *)(v145 + 8) = 53;
  v146 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".zero", (const unsigned __int8 *)5);
  v147 = *v29;
  v148 = v146;
  v149 = *(_QWORD *)(*v29 + 8 * v146);
  if (v149 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v149)
  {
    goto LABEL_78;
  }
  v852 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v852 + 16, ".zero");
  *(_QWORD *)v852 = 5;
  *((_DWORD *)v852 + 2) = 0;
  *(_QWORD *)(v147 + 8 * v148) = v852;
  ++*(_DWORD *)(a1 + 828);
  v853 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v148));
  v149 = *v853;
  if (*v853)
    v854 = v149 == -8;
  else
    v854 = 1;
  if (v854)
  {
    do
    {
      v855 = v853[1];
      ++v853;
      v149 = v855;
      if (v855)
        v856 = v149 == -8;
      else
        v856 = 1;
    }
    while (v856);
  }
LABEL_78:
  *(_DWORD *)(v149 + 8) = 58;
  v150 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".extern", (const unsigned __int8 *)7);
  v151 = *v29;
  v152 = v150;
  v153 = *(_QWORD *)(*v29 + 8 * v150);
  if (v153 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v153)
  {
    goto LABEL_80;
  }
  v857 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v857 + 16, ".extern");
  *(_QWORD *)v857 = 7;
  *((_DWORD *)v857 + 2) = 0;
  *(_QWORD *)(v151 + 8 * v152) = v857;
  ++*(_DWORD *)(a1 + 828);
  v858 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v152));
  v153 = *v858;
  if (*v858)
    v859 = v153 == -8;
  else
    v859 = 1;
  if (v859)
  {
    do
    {
      v860 = v858[1];
      ++v858;
      v153 = v860;
      if (v860)
        v861 = v153 == -8;
      else
        v861 = 1;
    }
    while (v861);
  }
LABEL_80:
  *(_DWORD *)(v153 + 8) = 59;
  v154 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".globl", (const unsigned __int8 *)6);
  v155 = *v29;
  v156 = v154;
  v157 = *(_QWORD *)(*v29 + 8 * v154);
  if (v157 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v157)
  {
    goto LABEL_82;
  }
  v862 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v862 + 16, ".globl");
  *(_QWORD *)v862 = 6;
  *((_DWORD *)v862 + 2) = 0;
  *(_QWORD *)(v155 + 8 * v156) = v862;
  ++*(_DWORD *)(a1 + 828);
  v863 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v156));
  v157 = *v863;
  if (*v863)
    v864 = v157 == -8;
  else
    v864 = 1;
  if (v864)
  {
    do
    {
      v865 = v863[1];
      ++v863;
      v157 = v865;
      if (v865)
        v866 = v157 == -8;
      else
        v866 = 1;
    }
    while (v866);
  }
LABEL_82:
  *(_DWORD *)(v157 + 8) = 60;
  v158 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".global", (const unsigned __int8 *)7);
  v159 = *v29;
  v160 = v158;
  v161 = *(_QWORD *)(*v29 + 8 * v158);
  if (v161 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v161)
  {
    goto LABEL_84;
  }
  v867 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v867 + 16, ".global");
  *(_QWORD *)v867 = 7;
  *((_DWORD *)v867 + 2) = 0;
  *(_QWORD *)(v159 + 8 * v160) = v867;
  ++*(_DWORD *)(a1 + 828);
  v868 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v160));
  v161 = *v868;
  if (*v868)
    v869 = v161 == -8;
  else
    v869 = 1;
  if (v869)
  {
    do
    {
      v870 = v868[1];
      ++v868;
      v161 = v870;
      if (v870)
        v871 = v161 == -8;
      else
        v871 = 1;
    }
    while (v871);
  }
LABEL_84:
  *(_DWORD *)(v161 + 8) = 61;
  v162 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".lazy_reference", (const unsigned __int8 *)0xF);
  v163 = *v29;
  v164 = v162;
  v165 = *(_QWORD *)(*v29 + 8 * v162);
  if (v165 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v165)
  {
    goto LABEL_86;
  }
  v872 = (char *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
  strcpy(v872 + 16, ".lazy_reference");
  *(_QWORD *)v872 = 15;
  *((_DWORD *)v872 + 2) = 0;
  *(_QWORD *)(v163 + 8 * v164) = v872;
  ++*(_DWORD *)(a1 + 828);
  v873 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v164));
  v165 = *v873;
  if (*v873)
    v874 = v165 == -8;
  else
    v874 = 1;
  if (v874)
  {
    do
    {
      v875 = v873[1];
      ++v873;
      v165 = v875;
      if (v875)
        v876 = v165 == -8;
      else
        v876 = 1;
    }
    while (v876);
  }
LABEL_86:
  *(_DWORD *)(v165 + 8) = 62;
  v166 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".no_dead_strip", (const unsigned __int8 *)0xE);
  v167 = *v29;
  v168 = v166;
  v169 = *(_QWORD *)(*v29 + 8 * v166);
  if (v169 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v169)
  {
    goto LABEL_88;
  }
  v877 = (char *)llvm::allocate_buffer(0x1FuLL, (std::align_val_t)8uLL);
  strcpy(v877 + 16, ".no_dead_strip");
  *(_QWORD *)v877 = 14;
  *((_DWORD *)v877 + 2) = 0;
  *(_QWORD *)(v167 + 8 * v168) = v877;
  ++*(_DWORD *)(a1 + 828);
  v878 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v168));
  v169 = *v878;
  if (*v878)
    v879 = v169 == -8;
  else
    v879 = 1;
  if (v879)
  {
    do
    {
      v880 = v878[1];
      ++v878;
      v169 = v880;
      if (v880)
        v881 = v169 == -8;
      else
        v881 = 1;
    }
    while (v881);
  }
LABEL_88:
  *(_DWORD *)(v169 + 8) = 63;
  v170 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".symbol_resolver", (const unsigned __int8 *)0x10);
  v171 = *v29;
  v172 = v170;
  v173 = *(_QWORD *)(*v29 + 8 * v170);
  if (v173 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v173)
  {
    goto LABEL_90;
  }
  v882 = (char *)llvm::allocate_buffer(0x21uLL, (std::align_val_t)8uLL);
  strcpy(v882 + 16, ".symbol_resolver");
  *(_QWORD *)v882 = 16;
  *((_DWORD *)v882 + 2) = 0;
  *(_QWORD *)(v171 + 8 * v172) = v882;
  ++*(_DWORD *)(a1 + 828);
  v883 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v172));
  v173 = *v883;
  if (*v883)
    v884 = v173 == -8;
  else
    v884 = 1;
  if (v884)
  {
    do
    {
      v885 = v883[1];
      ++v883;
      v173 = v885;
      if (v885)
        v886 = v173 == -8;
      else
        v886 = 1;
    }
    while (v886);
  }
LABEL_90:
  *(_DWORD *)(v173 + 8) = 64;
  v174 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".private_extern", (const unsigned __int8 *)0xF);
  v175 = *v29;
  v176 = v174;
  v177 = *(_QWORD *)(*v29 + 8 * v174);
  if (v177 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v177)
  {
    goto LABEL_92;
  }
  v887 = (char *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
  strcpy(v887 + 16, ".private_extern");
  *(_QWORD *)v887 = 15;
  *((_DWORD *)v887 + 2) = 0;
  *(_QWORD *)(v175 + 8 * v176) = v887;
  ++*(_DWORD *)(a1 + 828);
  v888 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v176));
  v177 = *v888;
  if (*v888)
    v889 = v177 == -8;
  else
    v889 = 1;
  if (v889)
  {
    do
    {
      v890 = v888[1];
      ++v888;
      v177 = v890;
      if (v890)
        v891 = v177 == -8;
      else
        v891 = 1;
    }
    while (v891);
  }
LABEL_92:
  *(_DWORD *)(v177 + 8) = 65;
  v178 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".reference", (const unsigned __int8 *)0xA);
  v179 = *v29;
  v180 = v178;
  v181 = *(_QWORD *)(*v29 + 8 * v178);
  if (v181 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v181)
  {
    goto LABEL_94;
  }
  v892 = (char *)llvm::allocate_buffer(0x1BuLL, (std::align_val_t)8uLL);
  strcpy(v892 + 16, ".reference");
  *(_QWORD *)v892 = 10;
  *((_DWORD *)v892 + 2) = 0;
  *(_QWORD *)(v179 + 8 * v180) = v892;
  ++*(_DWORD *)(a1 + 828);
  v893 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v180));
  v181 = *v893;
  if (*v893)
    v894 = v181 == -8;
  else
    v894 = 1;
  if (v894)
  {
    do
    {
      v895 = v893[1];
      ++v893;
      v181 = v895;
      if (v895)
        v896 = v181 == -8;
      else
        v896 = 1;
    }
    while (v896);
  }
LABEL_94:
  *(_DWORD *)(v181 + 8) = 66;
  v182 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".weak_definition", (const unsigned __int8 *)0x10);
  v183 = *v29;
  v184 = v182;
  v185 = *(_QWORD *)(*v29 + 8 * v182);
  if (v185 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v185)
  {
    goto LABEL_96;
  }
  v897 = (char *)llvm::allocate_buffer(0x21uLL, (std::align_val_t)8uLL);
  strcpy(v897 + 16, ".weak_definition");
  *(_QWORD *)v897 = 16;
  *((_DWORD *)v897 + 2) = 0;
  *(_QWORD *)(v183 + 8 * v184) = v897;
  ++*(_DWORD *)(a1 + 828);
  v898 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v184));
  v185 = *v898;
  if (*v898)
    v899 = v185 == -8;
  else
    v899 = 1;
  if (v899)
  {
    do
    {
      v900 = v898[1];
      ++v898;
      v185 = v900;
      if (v900)
        v901 = v185 == -8;
      else
        v901 = 1;
    }
    while (v901);
  }
LABEL_96:
  *(_DWORD *)(v185 + 8) = 67;
  v186 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".weak_reference", (const unsigned __int8 *)0xF);
  v187 = *v29;
  v188 = v186;
  v189 = *(_QWORD *)(*v29 + 8 * v186);
  if (v189 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v189)
  {
    goto LABEL_98;
  }
  v902 = (char *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
  strcpy(v902 + 16, ".weak_reference");
  *(_QWORD *)v902 = 15;
  *((_DWORD *)v902 + 2) = 0;
  *(_QWORD *)(v187 + 8 * v188) = v902;
  ++*(_DWORD *)(a1 + 828);
  v903 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v188));
  v189 = *v903;
  if (*v903)
    v904 = v189 == -8;
  else
    v904 = 1;
  if (v904)
  {
    do
    {
      v905 = v903[1];
      ++v903;
      v189 = v905;
      if (v905)
        v906 = v189 == -8;
      else
        v906 = 1;
    }
    while (v906);
  }
LABEL_98:
  *(_DWORD *)(v189 + 8) = 68;
  v190 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".weak_def_can_be_hidden", (const unsigned __int8 *)0x17);
  v191 = *v29;
  v192 = v190;
  v193 = *(_QWORD *)(*v29 + 8 * v190);
  if (v193 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v193)
  {
    goto LABEL_100;
  }
  v907 = (char *)llvm::allocate_buffer(0x28uLL, (std::align_val_t)8uLL);
  strcpy(v907 + 16, ".weak_def_can_be_hidden");
  *(_QWORD *)v907 = 23;
  *((_DWORD *)v907 + 2) = 0;
  *(_QWORD *)(v191 + 8 * v192) = v907;
  ++*(_DWORD *)(a1 + 828);
  v908 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v192));
  v193 = *v908;
  if (*v908)
    v909 = v193 == -8;
  else
    v909 = 1;
  if (v909)
  {
    do
    {
      v910 = v908[1];
      ++v908;
      v193 = v910;
      if (v910)
        v911 = v193 == -8;
      else
        v911 = 1;
    }
    while (v911);
  }
LABEL_100:
  *(_DWORD *)(v193 + 8) = 69;
  v194 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cold", (const unsigned __int8 *)5);
  v195 = *v29;
  v196 = v194;
  v197 = *(_QWORD *)(*v29 + 8 * v194);
  if (v197 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v197)
  {
    goto LABEL_102;
  }
  v912 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v912 + 16, ".cold");
  *(_QWORD *)v912 = 5;
  *((_DWORD *)v912 + 2) = 0;
  *(_QWORD *)(v195 + 8 * v196) = v912;
  ++*(_DWORD *)(a1 + 828);
  v913 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v196));
  v197 = *v913;
  if (*v913)
    v914 = v197 == -8;
  else
    v914 = 1;
  if (v914)
  {
    do
    {
      v915 = v913[1];
      ++v913;
      v197 = v915;
      if (v915)
        v916 = v197 == -8;
      else
        v916 = 1;
    }
    while (v916);
  }
LABEL_102:
  *(_DWORD *)(v197 + 8) = 70;
  v198 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".comm", (const unsigned __int8 *)5);
  v199 = *v29;
  v200 = v198;
  v201 = *(_QWORD *)(*v29 + 8 * v198);
  if (v201 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v201)
  {
    goto LABEL_104;
  }
  v917 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v917 + 16, ".comm");
  *(_QWORD *)v917 = 5;
  *((_DWORD *)v917 + 2) = 0;
  *(_QWORD *)(v199 + 8 * v200) = v917;
  ++*(_DWORD *)(a1 + 828);
  v918 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v200));
  v201 = *v918;
  if (*v918)
    v919 = v201 == -8;
  else
    v919 = 1;
  if (v919)
  {
    do
    {
      v920 = v918[1];
      ++v918;
      v201 = v920;
      if (v920)
        v921 = v201 == -8;
      else
        v921 = 1;
    }
    while (v921);
  }
LABEL_104:
  *(_DWORD *)(v201 + 8) = 71;
  v202 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".common", (const unsigned __int8 *)7);
  v203 = *v29;
  v204 = v202;
  v205 = *(_QWORD *)(*v29 + 8 * v202);
  if (v205 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v205)
  {
    goto LABEL_106;
  }
  v922 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v922 + 16, ".common");
  *(_QWORD *)v922 = 7;
  *((_DWORD *)v922 + 2) = 0;
  *(_QWORD *)(v203 + 8 * v204) = v922;
  ++*(_DWORD *)(a1 + 828);
  v923 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v204));
  v205 = *v923;
  if (*v923)
    v924 = v205 == -8;
  else
    v924 = 1;
  if (v924)
  {
    do
    {
      v925 = v923[1];
      ++v923;
      v205 = v925;
      if (v925)
        v926 = v205 == -8;
      else
        v926 = 1;
    }
    while (v926);
  }
LABEL_106:
  *(_DWORD *)(v205 + 8) = 72;
  v206 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".lcomm", (const unsigned __int8 *)6);
  v207 = *v29;
  v208 = v206;
  v209 = *(_QWORD *)(*v29 + 8 * v206);
  if (v209 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v209)
  {
    goto LABEL_108;
  }
  v927 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v927 + 16, ".lcomm");
  *(_QWORD *)v927 = 6;
  *((_DWORD *)v927 + 2) = 0;
  *(_QWORD *)(v207 + 8 * v208) = v927;
  ++*(_DWORD *)(a1 + 828);
  v928 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v208));
  v209 = *v928;
  if (*v928)
    v929 = v209 == -8;
  else
    v929 = 1;
  if (v929)
  {
    do
    {
      v930 = v928[1];
      ++v928;
      v209 = v930;
      if (v930)
        v931 = v209 == -8;
      else
        v931 = 1;
    }
    while (v931);
  }
LABEL_108:
  *(_DWORD *)(v209 + 8) = 73;
  v210 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".abort", (const unsigned __int8 *)6);
  v211 = *v29;
  v212 = v210;
  v213 = *(_QWORD *)(*v29 + 8 * v210);
  if (v213 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v213)
  {
    goto LABEL_110;
  }
  v932 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v932 + 16, ".abort");
  *(_QWORD *)v932 = 6;
  *((_DWORD *)v932 + 2) = 0;
  *(_QWORD *)(v211 + 8 * v212) = v932;
  ++*(_DWORD *)(a1 + 828);
  v933 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v212));
  v213 = *v933;
  if (*v933)
    v934 = v213 == -8;
  else
    v934 = 1;
  if (v934)
  {
    do
    {
      v935 = v933[1];
      ++v933;
      v213 = v935;
      if (v935)
        v936 = v213 == -8;
      else
        v936 = 1;
    }
    while (v936);
  }
LABEL_110:
  *(_DWORD *)(v213 + 8) = 74;
  v214 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".include", (const unsigned __int8 *)8);
  v215 = *v29;
  v216 = v214;
  v217 = *(_QWORD *)(*v29 + 8 * v214);
  if (v217 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v217)
  {
    goto LABEL_112;
  }
  v937 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v937 + 16, ".include");
  *(_QWORD *)v937 = 8;
  *((_DWORD *)v937 + 2) = 0;
  *(_QWORD *)(v215 + 8 * v216) = v937;
  ++*(_DWORD *)(a1 + 828);
  v938 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v216));
  v217 = *v938;
  if (*v938)
    v939 = v217 == -8;
  else
    v939 = 1;
  if (v939)
  {
    do
    {
      v940 = v938[1];
      ++v938;
      v217 = v940;
      if (v940)
        v941 = v217 == -8;
      else
        v941 = 1;
    }
    while (v941);
  }
LABEL_112:
  *(_DWORD *)(v217 + 8) = 75;
  v218 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".incbin", (const unsigned __int8 *)7);
  v219 = *v29;
  v220 = v218;
  v221 = *(_QWORD *)(*v29 + 8 * v218);
  if (v221 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v221)
  {
    goto LABEL_114;
  }
  v942 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v942 + 16, ".incbin");
  *(_QWORD *)v942 = 7;
  *((_DWORD *)v942 + 2) = 0;
  *(_QWORD *)(v219 + 8 * v220) = v942;
  ++*(_DWORD *)(a1 + 828);
  v943 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v220));
  v221 = *v943;
  if (*v943)
    v944 = v221 == -8;
  else
    v944 = 1;
  if (v944)
  {
    do
    {
      v945 = v943[1];
      ++v943;
      v221 = v945;
      if (v945)
        v946 = v221 == -8;
      else
        v946 = 1;
    }
    while (v946);
  }
LABEL_114:
  *(_DWORD *)(v221 + 8) = 76;
  v222 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".code16", (const unsigned __int8 *)7);
  v223 = *v29;
  v224 = v222;
  v225 = *(_QWORD *)(*v29 + 8 * v222);
  if (v225 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v225)
  {
    goto LABEL_116;
  }
  v947 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v947 + 16, ".code16");
  *(_QWORD *)v947 = 7;
  *((_DWORD *)v947 + 2) = 0;
  *(_QWORD *)(v223 + 8 * v224) = v947;
  ++*(_DWORD *)(a1 + 828);
  v948 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v224));
  v225 = *v948;
  if (*v948)
    v949 = v225 == -8;
  else
    v949 = 1;
  if (v949)
  {
    do
    {
      v950 = v948[1];
      ++v948;
      v225 = v950;
      if (v950)
        v951 = v225 == -8;
      else
        v951 = 1;
    }
    while (v951);
  }
LABEL_116:
  *(_DWORD *)(v225 + 8) = 77;
  v226 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".code16gcc", (const unsigned __int8 *)0xA);
  v227 = *v29;
  v228 = v226;
  v229 = *(_QWORD *)(*v29 + 8 * v226);
  if (v229 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v229)
  {
    goto LABEL_118;
  }
  v952 = (char *)llvm::allocate_buffer(0x1BuLL, (std::align_val_t)8uLL);
  strcpy(v952 + 16, ".code16gcc");
  *(_QWORD *)v952 = 10;
  *((_DWORD *)v952 + 2) = 0;
  *(_QWORD *)(v227 + 8 * v228) = v952;
  ++*(_DWORD *)(a1 + 828);
  v953 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v228));
  v229 = *v953;
  if (*v953)
    v954 = v229 == -8;
  else
    v954 = 1;
  if (v954)
  {
    do
    {
      v955 = v953[1];
      ++v953;
      v229 = v955;
      if (v955)
        v956 = v229 == -8;
      else
        v956 = 1;
    }
    while (v956);
  }
LABEL_118:
  *(_DWORD *)(v229 + 8) = 78;
  v230 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".rept", (const unsigned __int8 *)5);
  v231 = *v29;
  v232 = v230;
  v233 = *(_QWORD *)(*v29 + 8 * v230);
  if (v233 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v233)
  {
    goto LABEL_120;
  }
  v957 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v957 + 16, ".rept");
  *(_QWORD *)v957 = 5;
  *((_DWORD *)v957 + 2) = 0;
  *(_QWORD *)(v231 + 8 * v232) = v957;
  ++*(_DWORD *)(a1 + 828);
  v958 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v232));
  v233 = *v958;
  if (*v958)
    v959 = v233 == -8;
  else
    v959 = 1;
  if (v959)
  {
    do
    {
      v960 = v958[1];
      ++v958;
      v233 = v960;
      if (v960)
        v961 = v233 == -8;
      else
        v961 = 1;
    }
    while (v961);
  }
LABEL_120:
  *(_DWORD *)(v233 + 8) = 79;
  v234 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".rep", (const unsigned __int8 *)4);
  v235 = *v29;
  v236 = v234;
  v237 = *(_QWORD *)(*v29 + 8 * v234);
  if (v237 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v237)
  {
    goto LABEL_122;
  }
  v962 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v962 + 16, ".rep");
  *(_QWORD *)v962 = 4;
  *((_DWORD *)v962 + 2) = 0;
  *(_QWORD *)(v235 + 8 * v236) = v962;
  ++*(_DWORD *)(a1 + 828);
  v963 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v236));
  v237 = *v963;
  if (*v963)
    v964 = v237 == -8;
  else
    v964 = 1;
  if (v964)
  {
    do
    {
      v965 = v963[1];
      ++v963;
      v237 = v965;
      if (v965)
        v966 = v237 == -8;
      else
        v966 = 1;
    }
    while (v966);
  }
LABEL_122:
  *(_DWORD *)(v237 + 8) = 79;
  v238 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".irp", (const unsigned __int8 *)4);
  v239 = *v29;
  v240 = v238;
  v241 = *(_QWORD *)(*v29 + 8 * v238);
  if (v241 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v241)
  {
    goto LABEL_124;
  }
  v967 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v967 + 16, ".irp");
  *(_QWORD *)v967 = 4;
  *((_DWORD *)v967 + 2) = 0;
  *(_QWORD *)(v239 + 8 * v240) = v967;
  ++*(_DWORD *)(a1 + 828);
  v968 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v240));
  v241 = *v968;
  if (*v968)
    v969 = v241 == -8;
  else
    v969 = 1;
  if (v969)
  {
    do
    {
      v970 = v968[1];
      ++v968;
      v241 = v970;
      if (v970)
        v971 = v241 == -8;
      else
        v971 = 1;
    }
    while (v971);
  }
LABEL_124:
  *(_DWORD *)(v241 + 8) = 80;
  v242 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".irpc", (const unsigned __int8 *)5);
  v243 = *v29;
  v244 = v242;
  v245 = *(_QWORD *)(*v29 + 8 * v242);
  if (v245 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v245)
  {
    goto LABEL_126;
  }
  v972 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v972 + 16, ".irpc");
  *(_QWORD *)v972 = 5;
  *((_DWORD *)v972 + 2) = 0;
  *(_QWORD *)(v243 + 8 * v244) = v972;
  ++*(_DWORD *)(a1 + 828);
  v973 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v244));
  v245 = *v973;
  if (*v973)
    v974 = v245 == -8;
  else
    v974 = 1;
  if (v974)
  {
    do
    {
      v975 = v973[1];
      ++v973;
      v245 = v975;
      if (v975)
        v976 = v245 == -8;
      else
        v976 = 1;
    }
    while (v976);
  }
LABEL_126:
  *(_DWORD *)(v245 + 8) = 81;
  v246 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".endr", (const unsigned __int8 *)5);
  v247 = *v29;
  v248 = v246;
  v249 = *(_QWORD *)(*v29 + 8 * v246);
  if (v249 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v249)
  {
    goto LABEL_128;
  }
  v977 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v977 + 16, ".endr");
  *(_QWORD *)v977 = 5;
  *((_DWORD *)v977 + 2) = 0;
  *(_QWORD *)(v247 + 8 * v248) = v977;
  ++*(_DWORD *)(a1 + 828);
  v978 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v248));
  v249 = *v978;
  if (*v978)
    v979 = v249 == -8;
  else
    v979 = 1;
  if (v979)
  {
    do
    {
      v980 = v978[1];
      ++v978;
      v249 = v980;
      if (v980)
        v981 = v249 == -8;
      else
        v981 = 1;
    }
    while (v981);
  }
LABEL_128:
  *(_DWORD *)(v249 + 8) = 54;
  v250 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".bundle_align_mode", (const unsigned __int8 *)0x12);
  v251 = *v29;
  v252 = v250;
  v253 = *(_QWORD *)(*v29 + 8 * v250);
  if (v253 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v253)
  {
    goto LABEL_130;
  }
  v982 = (char *)llvm::allocate_buffer(0x23uLL, (std::align_val_t)8uLL);
  strcpy(v982 + 16, ".bundle_align_mode");
  *(_QWORD *)v982 = 18;
  *((_DWORD *)v982 + 2) = 0;
  *(_QWORD *)(v251 + 8 * v252) = v982;
  ++*(_DWORD *)(a1 + 828);
  v983 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v252));
  v253 = *v983;
  if (*v983)
    v984 = v253 == -8;
  else
    v984 = 1;
  if (v984)
  {
    do
    {
      v985 = v983[1];
      ++v983;
      v253 = v985;
      if (v985)
        v986 = v253 == -8;
      else
        v986 = 1;
    }
    while (v986);
  }
LABEL_130:
  *(_DWORD *)(v253 + 8) = 55;
  v254 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".bundle_lock", (const unsigned __int8 *)0xC);
  v255 = *v29;
  v256 = v254;
  v257 = *(_QWORD *)(*v29 + 8 * v254);
  if (v257 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v257)
  {
    goto LABEL_132;
  }
  v987 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v987 + 16, ".bundle_lock");
  *(_QWORD *)v987 = 12;
  *((_DWORD *)v987 + 2) = 0;
  *(_QWORD *)(v255 + 8 * v256) = v987;
  ++*(_DWORD *)(a1 + 828);
  v988 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v256));
  v257 = *v988;
  if (*v988)
    v989 = v257 == -8;
  else
    v989 = 1;
  if (v989)
  {
    do
    {
      v990 = v988[1];
      ++v988;
      v257 = v990;
      if (v990)
        v991 = v257 == -8;
      else
        v991 = 1;
    }
    while (v991);
  }
LABEL_132:
  *(_DWORD *)(v257 + 8) = 56;
  v258 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".bundle_unlock", (const unsigned __int8 *)0xE);
  v259 = *v29;
  v260 = v258;
  v261 = *(_QWORD *)(*v29 + 8 * v258);
  if (v261 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v261)
  {
    goto LABEL_134;
  }
  v992 = (char *)llvm::allocate_buffer(0x1FuLL, (std::align_val_t)8uLL);
  strcpy(v992 + 16, ".bundle_unlock");
  *(_QWORD *)v992 = 14;
  *((_DWORD *)v992 + 2) = 0;
  *(_QWORD *)(v259 + 8 * v260) = v992;
  ++*(_DWORD *)(a1 + 828);
  v993 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v260));
  v261 = *v993;
  if (*v993)
    v994 = v261 == -8;
  else
    v994 = 1;
  if (v994)
  {
    do
    {
      v995 = v993[1];
      ++v993;
      v261 = v995;
      if (v995)
        v996 = v261 == -8;
      else
        v996 = 1;
    }
    while (v996);
  }
LABEL_134:
  *(_DWORD *)(v261 + 8) = 57;
  v262 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".if", (const unsigned __int8 *)3);
  v263 = *v29;
  v264 = v262;
  v265 = *(_QWORD *)(*v29 + 8 * v262);
  if (v265 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v265)
  {
    goto LABEL_136;
  }
  v997 = llvm::allocate_buffer(0x14uLL, (std::align_val_t)8uLL);
  v997[4] = 6711598;
  *(_QWORD *)v997 = 3;
  v997[2] = 0;
  *(_QWORD *)(v263 + 8 * v264) = v997;
  ++*(_DWORD *)(a1 + 828);
  v998 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                   + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v264));
  v265 = *v998;
  if (*v998)
    v999 = v265 == -8;
  else
    v999 = 1;
  if (v999)
  {
    do
    {
      v1000 = v998[1];
      ++v998;
      v265 = v1000;
      if (v1000)
        v1001 = v265 == -8;
      else
        v1001 = 1;
    }
    while (v1001);
  }
LABEL_136:
  *(_DWORD *)(v265 + 8) = 82;
  v266 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifeq", (const unsigned __int8 *)5);
  v267 = *v29;
  v268 = v266;
  v269 = *(_QWORD *)(*v29 + 8 * v266);
  if (v269 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v269)
  {
    goto LABEL_138;
  }
  v1002 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1002 + 16, ".ifeq");
  *(_QWORD *)v1002 = 5;
  *((_DWORD *)v1002 + 2) = 0;
  *(_QWORD *)(v267 + 8 * v268) = v1002;
  ++*(_DWORD *)(a1 + 828);
  v1003 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v268));
  v269 = *v1003;
  if (*v1003)
    v1004 = v269 == -8;
  else
    v1004 = 1;
  if (v1004)
  {
    do
    {
      v1005 = v1003[1];
      ++v1003;
      v269 = v1005;
      if (v1005)
        v1006 = v269 == -8;
      else
        v1006 = 1;
    }
    while (v1006);
  }
LABEL_138:
  *(_DWORD *)(v269 + 8) = 83;
  v270 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifge", (const unsigned __int8 *)5);
  v271 = *v29;
  v272 = v270;
  v273 = *(_QWORD *)(*v29 + 8 * v270);
  if (v273 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v273)
  {
    goto LABEL_140;
  }
  v1007 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1007 + 16, ".ifge");
  *(_QWORD *)v1007 = 5;
  *((_DWORD *)v1007 + 2) = 0;
  *(_QWORD *)(v271 + 8 * v272) = v1007;
  ++*(_DWORD *)(a1 + 828);
  v1008 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v272));
  v273 = *v1008;
  if (*v1008)
    v1009 = v273 == -8;
  else
    v1009 = 1;
  if (v1009)
  {
    do
    {
      v1010 = v1008[1];
      ++v1008;
      v273 = v1010;
      if (v1010)
        v1011 = v273 == -8;
      else
        v1011 = 1;
    }
    while (v1011);
  }
LABEL_140:
  *(_DWORD *)(v273 + 8) = 84;
  v274 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifgt", (const unsigned __int8 *)5);
  v275 = *v29;
  v276 = v274;
  v277 = *(_QWORD *)(*v29 + 8 * v274);
  if (v277 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v277)
  {
    goto LABEL_142;
  }
  v1012 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1012 + 16, ".ifgt");
  *(_QWORD *)v1012 = 5;
  *((_DWORD *)v1012 + 2) = 0;
  *(_QWORD *)(v275 + 8 * v276) = v1012;
  ++*(_DWORD *)(a1 + 828);
  v1013 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v276));
  v277 = *v1013;
  if (*v1013)
    v1014 = v277 == -8;
  else
    v1014 = 1;
  if (v1014)
  {
    do
    {
      v1015 = v1013[1];
      ++v1013;
      v277 = v1015;
      if (v1015)
        v1016 = v277 == -8;
      else
        v1016 = 1;
    }
    while (v1016);
  }
LABEL_142:
  *(_DWORD *)(v277 + 8) = 85;
  v278 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifle", (const unsigned __int8 *)5);
  v279 = *v29;
  v280 = v278;
  v281 = *(_QWORD *)(*v29 + 8 * v278);
  if (v281 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v281)
  {
    goto LABEL_144;
  }
  v1017 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1017 + 16, ".ifle");
  *(_QWORD *)v1017 = 5;
  *((_DWORD *)v1017 + 2) = 0;
  *(_QWORD *)(v279 + 8 * v280) = v1017;
  ++*(_DWORD *)(a1 + 828);
  v1018 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v280));
  v281 = *v1018;
  if (*v1018)
    v1019 = v281 == -8;
  else
    v1019 = 1;
  if (v1019)
  {
    do
    {
      v1020 = v1018[1];
      ++v1018;
      v281 = v1020;
      if (v1020)
        v1021 = v281 == -8;
      else
        v1021 = 1;
    }
    while (v1021);
  }
LABEL_144:
  *(_DWORD *)(v281 + 8) = 86;
  v282 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".iflt", (const unsigned __int8 *)5);
  v283 = *v29;
  v284 = v282;
  v285 = *(_QWORD *)(*v29 + 8 * v282);
  if (v285 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v285)
  {
    goto LABEL_146;
  }
  v1022 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1022 + 16, ".iflt");
  *(_QWORD *)v1022 = 5;
  *((_DWORD *)v1022 + 2) = 0;
  *(_QWORD *)(v283 + 8 * v284) = v1022;
  ++*(_DWORD *)(a1 + 828);
  v1023 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v284));
  v285 = *v1023;
  if (*v1023)
    v1024 = v285 == -8;
  else
    v1024 = 1;
  if (v1024)
  {
    do
    {
      v1025 = v1023[1];
      ++v1023;
      v285 = v1025;
      if (v1025)
        v1026 = v285 == -8;
      else
        v1026 = 1;
    }
    while (v1026);
  }
LABEL_146:
  *(_DWORD *)(v285 + 8) = 87;
  v286 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifne", (const unsigned __int8 *)5);
  v287 = *v29;
  v288 = v286;
  v289 = *(_QWORD *)(*v29 + 8 * v286);
  if (v289 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v289)
  {
    goto LABEL_148;
  }
  v1027 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1027 + 16, ".ifne");
  *(_QWORD *)v1027 = 5;
  *((_DWORD *)v1027 + 2) = 0;
  *(_QWORD *)(v287 + 8 * v288) = v1027;
  ++*(_DWORD *)(a1 + 828);
  v1028 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v288));
  v289 = *v1028;
  if (*v1028)
    v1029 = v289 == -8;
  else
    v1029 = 1;
  if (v1029)
  {
    do
    {
      v1030 = v1028[1];
      ++v1028;
      v289 = v1030;
      if (v1030)
        v1031 = v289 == -8;
      else
        v1031 = 1;
    }
    while (v1031);
  }
LABEL_148:
  *(_DWORD *)(v289 + 8) = 88;
  v290 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifb", (const unsigned __int8 *)4);
  v291 = *v29;
  v292 = v290;
  v293 = *(_QWORD *)(*v29 + 8 * v290);
  if (v293 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v293)
  {
    goto LABEL_150;
  }
  v1032 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v1032 + 16, ".ifb");
  *(_QWORD *)v1032 = 4;
  *((_DWORD *)v1032 + 2) = 0;
  *(_QWORD *)(v291 + 8 * v292) = v1032;
  ++*(_DWORD *)(a1 + 828);
  v1033 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v292));
  v293 = *v1033;
  if (*v1033)
    v1034 = v293 == -8;
  else
    v1034 = 1;
  if (v1034)
  {
    do
    {
      v1035 = v1033[1];
      ++v1033;
      v293 = v1035;
      if (v1035)
        v1036 = v293 == -8;
      else
        v1036 = 1;
    }
    while (v1036);
  }
LABEL_150:
  *(_DWORD *)(v293 + 8) = 89;
  v294 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifnb", (const unsigned __int8 *)5);
  v295 = *v29;
  v296 = v294;
  v297 = *(_QWORD *)(*v29 + 8 * v294);
  if (v297 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v297)
  {
    goto LABEL_152;
  }
  v1037 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1037 + 16, ".ifnb");
  *(_QWORD *)v1037 = 5;
  *((_DWORD *)v1037 + 2) = 0;
  *(_QWORD *)(v295 + 8 * v296) = v1037;
  ++*(_DWORD *)(a1 + 828);
  v1038 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v296));
  v297 = *v1038;
  if (*v1038)
    v1039 = v297 == -8;
  else
    v1039 = 1;
  if (v1039)
  {
    do
    {
      v1040 = v1038[1];
      ++v1038;
      v297 = v1040;
      if (v1040)
        v1041 = v297 == -8;
      else
        v1041 = 1;
    }
    while (v1041);
  }
LABEL_152:
  *(_DWORD *)(v297 + 8) = 90;
  v298 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifc", (const unsigned __int8 *)4);
  v299 = *v29;
  v300 = v298;
  v301 = *(_QWORD *)(*v29 + 8 * v298);
  if (v301 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v301)
  {
    goto LABEL_154;
  }
  v1042 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v1042 + 16, ".ifc");
  *(_QWORD *)v1042 = 4;
  *((_DWORD *)v1042 + 2) = 0;
  *(_QWORD *)(v299 + 8 * v300) = v1042;
  ++*(_DWORD *)(a1 + 828);
  v1043 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v300));
  v301 = *v1043;
  if (*v1043)
    v1044 = v301 == -8;
  else
    v1044 = 1;
  if (v1044)
  {
    do
    {
      v1045 = v1043[1];
      ++v1043;
      v301 = v1045;
      if (v1045)
        v1046 = v301 == -8;
      else
        v1046 = 1;
    }
    while (v1046);
  }
LABEL_154:
  *(_DWORD *)(v301 + 8) = 91;
  v302 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifeqs", (const unsigned __int8 *)6);
  v303 = *v29;
  v304 = v302;
  v305 = *(_QWORD *)(*v29 + 8 * v302);
  if (v305 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v305)
  {
    goto LABEL_156;
  }
  v1047 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1047 + 16, ".ifeqs");
  *(_QWORD *)v1047 = 6;
  *((_DWORD *)v1047 + 2) = 0;
  *(_QWORD *)(v303 + 8 * v304) = v1047;
  ++*(_DWORD *)(a1 + 828);
  v1048 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v304));
  v305 = *v1048;
  if (*v1048)
    v1049 = v305 == -8;
  else
    v1049 = 1;
  if (v1049)
  {
    do
    {
      v1050 = v1048[1];
      ++v1048;
      v305 = v1050;
      if (v1050)
        v1051 = v305 == -8;
      else
        v1051 = 1;
    }
    while (v1051);
  }
LABEL_156:
  *(_DWORD *)(v305 + 8) = 92;
  v306 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifnc", (const unsigned __int8 *)5);
  v307 = *v29;
  v308 = v306;
  v309 = *(_QWORD *)(*v29 + 8 * v306);
  if (v309 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v309)
  {
    goto LABEL_158;
  }
  v1052 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1052 + 16, ".ifnc");
  *(_QWORD *)v1052 = 5;
  *((_DWORD *)v1052 + 2) = 0;
  *(_QWORD *)(v307 + 8 * v308) = v1052;
  ++*(_DWORD *)(a1 + 828);
  v1053 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v308));
  v309 = *v1053;
  if (*v1053)
    v1054 = v309 == -8;
  else
    v1054 = 1;
  if (v1054)
  {
    do
    {
      v1055 = v1053[1];
      ++v1053;
      v309 = v1055;
      if (v1055)
        v1056 = v309 == -8;
      else
        v1056 = 1;
    }
    while (v1056);
  }
LABEL_158:
  *(_DWORD *)(v309 + 8) = 93;
  v310 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifnes", (const unsigned __int8 *)6);
  v311 = *v29;
  v312 = v310;
  v313 = *(_QWORD *)(*v29 + 8 * v310);
  if (v313 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v313)
  {
    goto LABEL_160;
  }
  v1057 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1057 + 16, ".ifnes");
  *(_QWORD *)v1057 = 6;
  *((_DWORD *)v1057 + 2) = 0;
  *(_QWORD *)(v311 + 8 * v312) = v1057;
  ++*(_DWORD *)(a1 + 828);
  v1058 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v312));
  v313 = *v1058;
  if (*v1058)
    v1059 = v313 == -8;
  else
    v1059 = 1;
  if (v1059)
  {
    do
    {
      v1060 = v1058[1];
      ++v1058;
      v313 = v1060;
      if (v1060)
        v1061 = v313 == -8;
      else
        v1061 = 1;
    }
    while (v1061);
  }
LABEL_160:
  *(_DWORD *)(v313 + 8) = 94;
  v314 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifdef", (const unsigned __int8 *)6);
  v315 = *v29;
  v316 = v314;
  v317 = *(_QWORD *)(*v29 + 8 * v314);
  if (v317 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v317)
  {
    goto LABEL_162;
  }
  v1062 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1062 + 16, ".ifdef");
  *(_QWORD *)v1062 = 6;
  *((_DWORD *)v1062 + 2) = 0;
  *(_QWORD *)(v315 + 8 * v316) = v1062;
  ++*(_DWORD *)(a1 + 828);
  v1063 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v316));
  v317 = *v1063;
  if (*v1063)
    v1064 = v317 == -8;
  else
    v1064 = 1;
  if (v1064)
  {
    do
    {
      v1065 = v1063[1];
      ++v1063;
      v317 = v1065;
      if (v1065)
        v1066 = v317 == -8;
      else
        v1066 = 1;
    }
    while (v1066);
  }
LABEL_162:
  *(_DWORD *)(v317 + 8) = 95;
  v318 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifndef", (const unsigned __int8 *)7);
  v319 = *v29;
  v320 = v318;
  v321 = *(_QWORD *)(*v29 + 8 * v318);
  if (v321 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v321)
  {
    goto LABEL_164;
  }
  v1067 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v1067 + 16, ".ifndef");
  *(_QWORD *)v1067 = 7;
  *((_DWORD *)v1067 + 2) = 0;
  *(_QWORD *)(v319 + 8 * v320) = v1067;
  ++*(_DWORD *)(a1 + 828);
  v1068 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v320));
  v321 = *v1068;
  if (*v1068)
    v1069 = v321 == -8;
  else
    v1069 = 1;
  if (v1069)
  {
    do
    {
      v1070 = v1068[1];
      ++v1068;
      v321 = v1070;
      if (v1070)
        v1071 = v321 == -8;
      else
        v1071 = 1;
    }
    while (v1071);
  }
LABEL_164:
  *(_DWORD *)(v321 + 8) = 96;
  v322 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ifnotdef", (const unsigned __int8 *)9);
  v323 = *v29;
  v324 = v322;
  v325 = *(_QWORD *)(*v29 + 8 * v322);
  if (v325 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v325)
  {
    goto LABEL_166;
  }
  v1072 = (char *)llvm::allocate_buffer(0x1AuLL, (std::align_val_t)8uLL);
  strcpy(v1072 + 16, ".ifnotdef");
  *(_QWORD *)v1072 = 9;
  *((_DWORD *)v1072 + 2) = 0;
  *(_QWORD *)(v323 + 8 * v324) = v1072;
  ++*(_DWORD *)(a1 + 828);
  v1073 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v324));
  v325 = *v1073;
  if (*v1073)
    v1074 = v325 == -8;
  else
    v1074 = 1;
  if (v1074)
  {
    do
    {
      v1075 = v1073[1];
      ++v1073;
      v325 = v1075;
      if (v1075)
        v1076 = v325 == -8;
      else
        v1076 = 1;
    }
    while (v1076);
  }
LABEL_166:
  *(_DWORD *)(v325 + 8) = 97;
  v326 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".elseif", (const unsigned __int8 *)7);
  v327 = *v29;
  v328 = v326;
  v329 = *(_QWORD *)(*v29 + 8 * v326);
  if (v329 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v329)
  {
    goto LABEL_168;
  }
  v1077 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v1077 + 16, ".elseif");
  *(_QWORD *)v1077 = 7;
  *((_DWORD *)v1077 + 2) = 0;
  *(_QWORD *)(v327 + 8 * v328) = v1077;
  ++*(_DWORD *)(a1 + 828);
  v1078 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v328));
  v329 = *v1078;
  if (*v1078)
    v1079 = v329 == -8;
  else
    v1079 = 1;
  if (v1079)
  {
    do
    {
      v1080 = v1078[1];
      ++v1078;
      v329 = v1080;
      if (v1080)
        v1081 = v329 == -8;
      else
        v1081 = 1;
    }
    while (v1081);
  }
LABEL_168:
  *(_DWORD *)(v329 + 8) = 98;
  v330 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".else", (const unsigned __int8 *)5);
  v331 = *v29;
  v332 = v330;
  v333 = *(_QWORD *)(*v29 + 8 * v330);
  if (v333 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v333)
  {
    goto LABEL_170;
  }
  v1082 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1082 + 16, ".else");
  *(_QWORD *)v1082 = 5;
  *((_DWORD *)v1082 + 2) = 0;
  *(_QWORD *)(v331 + 8 * v332) = v1082;
  ++*(_DWORD *)(a1 + 828);
  v1083 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v332));
  v333 = *v1083;
  if (*v1083)
    v1084 = v333 == -8;
  else
    v1084 = 1;
  if (v1084)
  {
    do
    {
      v1085 = v1083[1];
      ++v1083;
      v333 = v1085;
      if (v1085)
        v1086 = v333 == -8;
      else
        v1086 = 1;
    }
    while (v1086);
  }
LABEL_170:
  *(_DWORD *)(v333 + 8) = 99;
  v334 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".end", (const unsigned __int8 *)4);
  v335 = *v29;
  v336 = v334;
  v337 = *(_QWORD *)(*v29 + 8 * v334);
  if (v337 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v337)
  {
    goto LABEL_172;
  }
  v1087 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v1087 + 16, ".end");
  *(_QWORD *)v1087 = 4;
  *((_DWORD *)v1087 + 2) = 0;
  *(_QWORD *)(v335 + 8 * v336) = v1087;
  ++*(_DWORD *)(a1 + 828);
  v1088 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v336));
  v337 = *v1088;
  if (*v1088)
    v1089 = v337 == -8;
  else
    v1089 = 1;
  if (v1089)
  {
    do
    {
      v1090 = v1088[1];
      ++v1088;
      v337 = v1090;
      if (v1090)
        v1091 = v337 == -8;
      else
        v1091 = 1;
    }
    while (v1091);
  }
LABEL_172:
  *(_DWORD *)(v337 + 8) = 164;
  v338 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".endif", (const unsigned __int8 *)6);
  v339 = *v29;
  v340 = v338;
  v341 = *(_QWORD *)(*v29 + 8 * v338);
  if (v341 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v341)
  {
    goto LABEL_174;
  }
  v1092 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1092 + 16, ".endif");
  *(_QWORD *)v1092 = 6;
  *((_DWORD *)v1092 + 2) = 0;
  *(_QWORD *)(v339 + 8 * v340) = v1092;
  ++*(_DWORD *)(a1 + 828);
  v1093 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v340));
  v341 = *v1093;
  if (*v1093)
    v1094 = v341 == -8;
  else
    v1094 = 1;
  if (v1094)
  {
    do
    {
      v1095 = v1093[1];
      ++v1093;
      v341 = v1095;
      if (v1095)
        v1096 = v341 == -8;
      else
        v1096 = 1;
    }
    while (v1096);
  }
LABEL_174:
  *(_DWORD *)(v341 + 8) = 100;
  v342 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".skip", (const unsigned __int8 *)5);
  v343 = *v29;
  v344 = v342;
  v345 = *(_QWORD *)(*v29 + 8 * v342);
  if (v345 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v345)
  {
    goto LABEL_176;
  }
  v1097 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1097 + 16, ".skip");
  *(_QWORD *)v1097 = 5;
  *((_DWORD *)v1097 + 2) = 0;
  *(_QWORD *)(v343 + 8 * v344) = v1097;
  ++*(_DWORD *)(a1 + 828);
  v1098 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v344));
  v345 = *v1098;
  if (*v1098)
    v1099 = v345 == -8;
  else
    v1099 = 1;
  if (v1099)
  {
    do
    {
      v1100 = v1098[1];
      ++v1098;
      v345 = v1100;
      if (v1100)
        v1101 = v345 == -8;
      else
        v1101 = 1;
    }
    while (v1101);
  }
LABEL_176:
  *(_DWORD *)(v345 + 8) = 102;
  v346 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".space", (const unsigned __int8 *)6);
  v347 = *v29;
  v348 = v346;
  v349 = *(_QWORD *)(*v29 + 8 * v346);
  if (v349 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v349)
  {
    goto LABEL_178;
  }
  v1102 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1102 + 16, ".space");
  *(_QWORD *)v1102 = 6;
  *((_DWORD *)v1102 + 2) = 0;
  *(_QWORD *)(v347 + 8 * v348) = v1102;
  ++*(_DWORD *)(a1 + 828);
  v1103 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v348));
  v349 = *v1103;
  if (*v1103)
    v1104 = v349 == -8;
  else
    v1104 = 1;
  if (v1104)
  {
    do
    {
      v1105 = v1103[1];
      ++v1103;
      v349 = v1105;
      if (v1105)
        v1106 = v349 == -8;
      else
        v1106 = 1;
    }
    while (v1106);
  }
LABEL_178:
  *(_DWORD *)(v349 + 8) = 101;
  v350 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".file", (const unsigned __int8 *)5);
  v351 = *v29;
  v352 = v350;
  v353 = *(_QWORD *)(*v29 + 8 * v350);
  if (v353 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v353)
  {
    goto LABEL_180;
  }
  v1107 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1107 + 16, ".file");
  *(_QWORD *)v1107 = 5;
  *((_DWORD *)v1107 + 2) = 0;
  *(_QWORD *)(v351 + 8 * v352) = v1107;
  ++*(_DWORD *)(a1 + 828);
  v1108 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v352));
  v353 = *v1108;
  if (*v1108)
    v1109 = v353 == -8;
  else
    v1109 = 1;
  if (v1109)
  {
    do
    {
      v1110 = v1108[1];
      ++v1108;
      v353 = v1110;
      if (v1110)
        v1111 = v353 == -8;
      else
        v1111 = 1;
    }
    while (v1111);
  }
LABEL_180:
  *(_DWORD *)(v353 + 8) = 103;
  v354 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".line", (const unsigned __int8 *)5);
  v355 = *v29;
  v356 = v354;
  v357 = *(_QWORD *)(*v29 + 8 * v354);
  if (v357 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v357)
  {
    goto LABEL_182;
  }
  v1112 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1112 + 16, ".line");
  *(_QWORD *)v1112 = 5;
  *((_DWORD *)v1112 + 2) = 0;
  *(_QWORD *)(v355 + 8 * v356) = v1112;
  ++*(_DWORD *)(a1 + 828);
  v1113 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v356));
  v357 = *v1113;
  if (*v1113)
    v1114 = v357 == -8;
  else
    v1114 = 1;
  if (v1114)
  {
    do
    {
      v1115 = v1113[1];
      ++v1113;
      v357 = v1115;
      if (v1115)
        v1116 = v357 == -8;
      else
        v1116 = 1;
    }
    while (v1116);
  }
LABEL_182:
  *(_DWORD *)(v357 + 8) = 104;
  v358 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".loc", (const unsigned __int8 *)4);
  v359 = *v29;
  v360 = v358;
  v361 = *(_QWORD *)(*v29 + 8 * v358);
  if (v361 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v361)
  {
    goto LABEL_184;
  }
  v1117 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v1117 + 16, ".loc");
  *(_QWORD *)v1117 = 4;
  *((_DWORD *)v1117 + 2) = 0;
  *(_QWORD *)(v359 + 8 * v360) = v1117;
  ++*(_DWORD *)(a1 + 828);
  v1118 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v360));
  v361 = *v1118;
  if (*v1118)
    v1119 = v361 == -8;
  else
    v1119 = 1;
  if (v1119)
  {
    do
    {
      v1120 = v1118[1];
      ++v1118;
      v361 = v1120;
      if (v1120)
        v1121 = v361 == -8;
      else
        v1121 = 1;
    }
    while (v1121);
  }
LABEL_184:
  *(_DWORD *)(v361 + 8) = 105;
  v362 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".stabs", (const unsigned __int8 *)6);
  v363 = *v29;
  v364 = v362;
  v365 = *(_QWORD *)(*v29 + 8 * v362);
  if (v365 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v365)
  {
    goto LABEL_186;
  }
  v1122 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1122 + 16, ".stabs");
  *(_QWORD *)v1122 = 6;
  *((_DWORD *)v1122 + 2) = 0;
  *(_QWORD *)(v363 + 8 * v364) = v1122;
  ++*(_DWORD *)(a1 + 828);
  v1123 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v364));
  v365 = *v1123;
  if (*v1123)
    v1124 = v365 == -8;
  else
    v1124 = 1;
  if (v1124)
  {
    do
    {
      v1125 = v1123[1];
      ++v1123;
      v365 = v1125;
      if (v1125)
        v1126 = v365 == -8;
      else
        v1126 = 1;
    }
    while (v1126);
  }
LABEL_186:
  *(_DWORD *)(v365 + 8) = 106;
  v366 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_file", (const unsigned __int8 *)8);
  v367 = *v29;
  v368 = v366;
  v369 = *(_QWORD *)(*v29 + 8 * v366);
  if (v369 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v369)
  {
    goto LABEL_188;
  }
  v1127 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v1127 + 16, ".cv_file");
  *(_QWORD *)v1127 = 8;
  *((_DWORD *)v1127 + 2) = 0;
  *(_QWORD *)(v367 + 8 * v368) = v1127;
  ++*(_DWORD *)(a1 + 828);
  v1128 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v368));
  v369 = *v1128;
  if (*v1128)
    v1129 = v369 == -8;
  else
    v1129 = 1;
  if (v1129)
  {
    do
    {
      v1130 = v1128[1];
      ++v1128;
      v369 = v1130;
      if (v1130)
        v1131 = v369 == -8;
      else
        v1131 = 1;
    }
    while (v1131);
  }
LABEL_188:
  *(_DWORD *)(v369 + 8) = 107;
  v370 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_func_id", (const unsigned __int8 *)0xB);
  v371 = *v29;
  v372 = v370;
  v373 = *(_QWORD *)(*v29 + 8 * v370);
  if (v373 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v373)
  {
    goto LABEL_190;
  }
  v1132 = (char *)llvm::allocate_buffer(0x1CuLL, (std::align_val_t)8uLL);
  strcpy(v1132 + 16, ".cv_func_id");
  *(_QWORD *)v1132 = 11;
  *((_DWORD *)v1132 + 2) = 0;
  *(_QWORD *)(v371 + 8 * v372) = v1132;
  ++*(_DWORD *)(a1 + 828);
  v1133 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v372));
  v373 = *v1133;
  if (*v1133)
    v1134 = v373 == -8;
  else
    v1134 = 1;
  if (v1134)
  {
    do
    {
      v1135 = v1133[1];
      ++v1133;
      v373 = v1135;
      if (v1135)
        v1136 = v373 == -8;
      else
        v1136 = 1;
    }
    while (v1136);
  }
LABEL_190:
  *(_DWORD *)(v373 + 8) = 108;
  v374 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_loc", (const unsigned __int8 *)7);
  v375 = *v29;
  v376 = v374;
  v377 = *(_QWORD *)(*v29 + 8 * v374);
  if (v377 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v377)
  {
    goto LABEL_192;
  }
  v1137 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v1137 + 16, ".cv_loc");
  *(_QWORD *)v1137 = 7;
  *((_DWORD *)v1137 + 2) = 0;
  *(_QWORD *)(v375 + 8 * v376) = v1137;
  ++*(_DWORD *)(a1 + 828);
  v1138 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v376));
  v377 = *v1138;
  if (*v1138)
    v1139 = v377 == -8;
  else
    v1139 = 1;
  if (v1139)
  {
    do
    {
      v1140 = v1138[1];
      ++v1138;
      v377 = v1140;
      if (v1140)
        v1141 = v377 == -8;
      else
        v1141 = 1;
    }
    while (v1141);
  }
LABEL_192:
  *(_DWORD *)(v377 + 8) = 110;
  v378 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_linetable", (const unsigned __int8 *)0xD);
  v379 = *v29;
  v380 = v378;
  v381 = *(_QWORD *)(*v29 + 8 * v378);
  if (v381 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v381)
  {
    goto LABEL_194;
  }
  v1142 = (char *)llvm::allocate_buffer(0x1EuLL, (std::align_val_t)8uLL);
  strcpy(v1142 + 16, ".cv_linetable");
  *(_QWORD *)v1142 = 13;
  *((_DWORD *)v1142 + 2) = 0;
  *(_QWORD *)(v379 + 8 * v380) = v1142;
  ++*(_DWORD *)(a1 + 828);
  v1143 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v380));
  v381 = *v1143;
  if (*v1143)
    v1144 = v381 == -8;
  else
    v1144 = 1;
  if (v1144)
  {
    do
    {
      v1145 = v1143[1];
      ++v1143;
      v381 = v1145;
      if (v1145)
        v1146 = v381 == -8;
      else
        v1146 = 1;
    }
    while (v1146);
  }
LABEL_194:
  *(_DWORD *)(v381 + 8) = 111;
  v382 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_inline_linetable", (const unsigned __int8 *)0x14);
  v383 = *v29;
  v384 = v382;
  v385 = *(_QWORD *)(*v29 + 8 * v382);
  if (v385 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v385)
  {
    goto LABEL_196;
  }
  v1147 = (char *)llvm::allocate_buffer(0x25uLL, (std::align_val_t)8uLL);
  strcpy(v1147 + 16, ".cv_inline_linetable");
  *(_QWORD *)v1147 = 20;
  *((_DWORD *)v1147 + 2) = 0;
  *(_QWORD *)(v383 + 8 * v384) = v1147;
  ++*(_DWORD *)(a1 + 828);
  v1148 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v384));
  v385 = *v1148;
  if (*v1148)
    v1149 = v385 == -8;
  else
    v1149 = 1;
  if (v1149)
  {
    do
    {
      v1150 = v1148[1];
      ++v1148;
      v385 = v1150;
      if (v1150)
        v1151 = v385 == -8;
      else
        v1151 = 1;
    }
    while (v1151);
  }
LABEL_196:
  *(_DWORD *)(v385 + 8) = 112;
  v386 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_inline_site_id", (const unsigned __int8 *)0x12);
  v387 = *v29;
  v388 = v386;
  v389 = *(_QWORD *)(*v29 + 8 * v386);
  if (v389 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v389)
  {
    goto LABEL_198;
  }
  v1152 = (char *)llvm::allocate_buffer(0x23uLL, (std::align_val_t)8uLL);
  strcpy(v1152 + 16, ".cv_inline_site_id");
  *(_QWORD *)v1152 = 18;
  *((_DWORD *)v1152 + 2) = 0;
  *(_QWORD *)(v387 + 8 * v388) = v1152;
  ++*(_DWORD *)(a1 + 828);
  v1153 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v388));
  v389 = *v1153;
  if (*v1153)
    v1154 = v389 == -8;
  else
    v1154 = 1;
  if (v1154)
  {
    do
    {
      v1155 = v1153[1];
      ++v1153;
      v389 = v1155;
      if (v1155)
        v1156 = v389 == -8;
      else
        v1156 = 1;
    }
    while (v1156);
  }
LABEL_198:
  *(_DWORD *)(v389 + 8) = 109;
  v390 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_def_range", (const unsigned __int8 *)0xD);
  v391 = *v29;
  v392 = v390;
  v393 = *(_QWORD *)(*v29 + 8 * v390);
  if (v393 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v393)
  {
    goto LABEL_200;
  }
  v1157 = (char *)llvm::allocate_buffer(0x1EuLL, (std::align_val_t)8uLL);
  strcpy(v1157 + 16, ".cv_def_range");
  *(_QWORD *)v1157 = 13;
  *((_DWORD *)v1157 + 2) = 0;
  *(_QWORD *)(v391 + 8 * v392) = v1157;
  ++*(_DWORD *)(a1 + 828);
  v1158 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v392));
  v393 = *v1158;
  if (*v1158)
    v1159 = v393 == -8;
  else
    v1159 = 1;
  if (v1159)
  {
    do
    {
      v1160 = v1158[1];
      ++v1158;
      v393 = v1160;
      if (v1160)
        v1161 = v393 == -8;
      else
        v1161 = 1;
    }
    while (v1161);
  }
LABEL_200:
  *(_DWORD *)(v393 + 8) = 113;
  v394 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_string", (const unsigned __int8 *)0xA);
  v395 = *v29;
  v396 = v394;
  v397 = *(_QWORD *)(*v29 + 8 * v394);
  if (v397 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v397)
  {
    goto LABEL_202;
  }
  v1162 = (char *)llvm::allocate_buffer(0x1BuLL, (std::align_val_t)8uLL);
  strcpy(v1162 + 16, ".cv_string");
  *(_QWORD *)v1162 = 10;
  *((_DWORD *)v1162 + 2) = 0;
  *(_QWORD *)(v395 + 8 * v396) = v1162;
  ++*(_DWORD *)(a1 + 828);
  v1163 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v396));
  v397 = *v1163;
  if (*v1163)
    v1164 = v397 == -8;
  else
    v1164 = 1;
  if (v1164)
  {
    do
    {
      v1165 = v1163[1];
      ++v1163;
      v397 = v1165;
      if (v1165)
        v1166 = v397 == -8;
      else
        v1166 = 1;
    }
    while (v1166);
  }
LABEL_202:
  *(_DWORD *)(v397 + 8) = 115;
  v398 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_stringtable", (const unsigned __int8 *)0xF);
  v399 = *v29;
  v400 = v398;
  v401 = *(_QWORD *)(*v29 + 8 * v398);
  if (v401 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v401)
  {
    goto LABEL_204;
  }
  v1167 = (char *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
  strcpy(v1167 + 16, ".cv_stringtable");
  *(_QWORD *)v1167 = 15;
  *((_DWORD *)v1167 + 2) = 0;
  *(_QWORD *)(v399 + 8 * v400) = v1167;
  ++*(_DWORD *)(a1 + 828);
  v1168 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v400));
  v401 = *v1168;
  if (*v1168)
    v1169 = v401 == -8;
  else
    v1169 = 1;
  if (v1169)
  {
    do
    {
      v1170 = v1168[1];
      ++v1168;
      v401 = v1170;
      if (v1170)
        v1171 = v401 == -8;
      else
        v1171 = 1;
    }
    while (v1171);
  }
LABEL_204:
  *(_DWORD *)(v401 + 8) = 114;
  v402 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_filechecksums", (const unsigned __int8 *)0x11);
  v403 = *v29;
  v404 = v402;
  v405 = *(_QWORD *)(*v29 + 8 * v402);
  if (v405 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v405)
  {
    goto LABEL_206;
  }
  v1172 = (char *)llvm::allocate_buffer(0x22uLL, (std::align_val_t)8uLL);
  strcpy(v1172 + 16, ".cv_filechecksums");
  *(_QWORD *)v1172 = 17;
  *((_DWORD *)v1172 + 2) = 0;
  *(_QWORD *)(v403 + 8 * v404) = v1172;
  ++*(_DWORD *)(a1 + 828);
  v1173 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v404));
  v405 = *v1173;
  if (*v1173)
    v1174 = v405 == -8;
  else
    v1174 = 1;
  if (v1174)
  {
    do
    {
      v1175 = v1173[1];
      ++v1173;
      v405 = v1175;
      if (v1175)
        v1176 = v405 == -8;
      else
        v1176 = 1;
    }
    while (v1176);
  }
LABEL_206:
  *(_DWORD *)(v405 + 8) = 116;
  v406 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_filechecksumoffset", (const unsigned __int8 *)0x16);
  v407 = *v29;
  v408 = v406;
  v409 = *(_QWORD *)(*v29 + 8 * v406);
  if (v409 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v409)
  {
    goto LABEL_208;
  }
  v1177 = (char *)llvm::allocate_buffer(0x27uLL, (std::align_val_t)8uLL);
  strcpy(v1177 + 16, ".cv_filechecksumoffset");
  *(_QWORD *)v1177 = 22;
  *((_DWORD *)v1177 + 2) = 0;
  *(_QWORD *)(v407 + 8 * v408) = v1177;
  ++*(_DWORD *)(a1 + 828);
  v1178 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v408));
  v409 = *v1178;
  if (*v1178)
    v1179 = v409 == -8;
  else
    v1179 = 1;
  if (v1179)
  {
    do
    {
      v1180 = v1178[1];
      ++v1178;
      v409 = v1180;
      if (v1180)
        v1181 = v409 == -8;
      else
        v1181 = 1;
    }
    while (v1181);
  }
LABEL_208:
  *(_DWORD *)(v409 + 8) = 117;
  v410 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cv_fpo_data", (const unsigned __int8 *)0xC);
  v411 = *v29;
  v412 = v410;
  v413 = *(_QWORD *)(*v29 + 8 * v410);
  if (v413 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v413)
  {
    goto LABEL_210;
  }
  v1182 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v1182 + 16, ".cv_fpo_data");
  *(_QWORD *)v1182 = 12;
  *((_DWORD *)v1182 + 2) = 0;
  *(_QWORD *)(v411 + 8 * v412) = v1182;
  ++*(_DWORD *)(a1 + 828);
  v1183 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v412));
  v413 = *v1183;
  if (*v1183)
    v1184 = v413 == -8;
  else
    v1184 = 1;
  if (v1184)
  {
    do
    {
      v1185 = v1183[1];
      ++v1183;
      v413 = v1185;
      if (v1185)
        v1186 = v413 == -8;
      else
        v1186 = 1;
    }
    while (v1186);
  }
LABEL_210:
  *(_DWORD *)(v413 + 8) = 118;
  v414 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".sleb128", (const unsigned __int8 *)8);
  v415 = *v29;
  v416 = v414;
  v417 = *(_QWORD *)(*v29 + 8 * v414);
  if (v417 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v417)
  {
    goto LABEL_212;
  }
  v1187 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v1187 + 16, ".sleb128");
  *(_QWORD *)v1187 = 8;
  *((_DWORD *)v1187 + 2) = 0;
  *(_QWORD *)(v415 + 8 * v416) = v1187;
  ++*(_DWORD *)(a1 + 828);
  v1188 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v416));
  v417 = *v1188;
  if (*v1188)
    v1189 = v417 == -8;
  else
    v1189 = 1;
  if (v1189)
  {
    do
    {
      v1190 = v1188[1];
      ++v1188;
      v417 = v1190;
      if (v1190)
        v1191 = v417 == -8;
      else
        v1191 = 1;
    }
    while (v1191);
  }
LABEL_212:
  *(_DWORD *)(v417 + 8) = 151;
  v418 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".uleb128", (const unsigned __int8 *)8);
  v419 = *v29;
  v420 = v418;
  v421 = *(_QWORD *)(*v29 + 8 * v418);
  if (v421 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v421)
  {
    goto LABEL_214;
  }
  v1192 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v1192 + 16, ".uleb128");
  *(_QWORD *)v1192 = 8;
  *((_DWORD *)v1192 + 2) = 0;
  *(_QWORD *)(v419 + 8 * v420) = v1192;
  ++*(_DWORD *)(a1 + 828);
  v1193 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v420));
  v421 = *v1193;
  if (*v1193)
    v1194 = v421 == -8;
  else
    v1194 = 1;
  if (v1194)
  {
    do
    {
      v1195 = v1193[1];
      ++v1193;
      v421 = v1195;
      if (v1195)
        v1196 = v421 == -8;
      else
        v1196 = 1;
    }
    while (v1196);
  }
LABEL_214:
  *(_DWORD *)(v421 + 8) = 152;
  v422 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_sections", (const unsigned __int8 *)0xD);
  v423 = *v29;
  v424 = v422;
  v425 = *(_QWORD *)(*v29 + 8 * v422);
  if (v425 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v425)
  {
    goto LABEL_216;
  }
  v1197 = (char *)llvm::allocate_buffer(0x1EuLL, (std::align_val_t)8uLL);
  strcpy(v1197 + 16, ".cfi_sections");
  *(_QWORD *)v1197 = 13;
  *((_DWORD *)v1197 + 2) = 0;
  *(_QWORD *)(v423 + 8 * v424) = v1197;
  ++*(_DWORD *)(a1 + 828);
  v1198 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v424));
  v425 = *v1198;
  if (*v1198)
    v1199 = v425 == -8;
  else
    v1199 = 1;
  if (v1199)
  {
    do
    {
      v1200 = v1198[1];
      ++v1198;
      v425 = v1200;
      if (v1200)
        v1201 = v425 == -8;
      else
        v1201 = 1;
    }
    while (v1201);
  }
LABEL_216:
  *(_DWORD *)(v425 + 8) = 119;
  v426 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_startproc", (const unsigned __int8 *)0xE);
  v427 = *v29;
  v428 = v426;
  v429 = *(_QWORD *)(*v29 + 8 * v426);
  if (v429 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v429)
  {
    goto LABEL_218;
  }
  v1202 = (char *)llvm::allocate_buffer(0x1FuLL, (std::align_val_t)8uLL);
  strcpy(v1202 + 16, ".cfi_startproc");
  *(_QWORD *)v1202 = 14;
  *((_DWORD *)v1202 + 2) = 0;
  *(_QWORD *)(v427 + 8 * v428) = v1202;
  ++*(_DWORD *)(a1 + 828);
  v1203 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v428));
  v429 = *v1203;
  if (*v1203)
    v1204 = v429 == -8;
  else
    v1204 = 1;
  if (v1204)
  {
    do
    {
      v1205 = v1203[1];
      ++v1203;
      v429 = v1205;
      if (v1205)
        v1206 = v429 == -8;
      else
        v1206 = 1;
    }
    while (v1206);
  }
LABEL_218:
  *(_DWORD *)(v429 + 8) = 120;
  v430 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_endproc", (const unsigned __int8 *)0xC);
  v431 = *v29;
  v432 = v430;
  v433 = *(_QWORD *)(*v29 + 8 * v430);
  if (v433 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v433)
  {
    goto LABEL_220;
  }
  v1207 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v1207 + 16, ".cfi_endproc");
  *(_QWORD *)v1207 = 12;
  *((_DWORD *)v1207 + 2) = 0;
  *(_QWORD *)(v431 + 8 * v432) = v1207;
  ++*(_DWORD *)(a1 + 828);
  v1208 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v432));
  v433 = *v1208;
  if (*v1208)
    v1209 = v433 == -8;
  else
    v1209 = 1;
  if (v1209)
  {
    do
    {
      v1210 = v1208[1];
      ++v1208;
      v433 = v1210;
      if (v1210)
        v1211 = v433 == -8;
      else
        v1211 = 1;
    }
    while (v1211);
  }
LABEL_220:
  *(_DWORD *)(v433 + 8) = 121;
  v434 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_def_cfa", (const unsigned __int8 *)0xC);
  v435 = *v29;
  v436 = v434;
  v437 = *(_QWORD *)(*v29 + 8 * v434);
  if (v437 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v437)
  {
    goto LABEL_222;
  }
  v1212 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v1212 + 16, ".cfi_def_cfa");
  *(_QWORD *)v1212 = 12;
  *((_DWORD *)v1212 + 2) = 0;
  *(_QWORD *)(v435 + 8 * v436) = v1212;
  ++*(_DWORD *)(a1 + 828);
  v1213 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v436));
  v437 = *v1213;
  if (*v1213)
    v1214 = v437 == -8;
  else
    v1214 = 1;
  if (v1214)
  {
    do
    {
      v1215 = v1213[1];
      ++v1213;
      v437 = v1215;
      if (v1215)
        v1216 = v437 == -8;
      else
        v1216 = 1;
    }
    while (v1216);
  }
LABEL_222:
  *(_DWORD *)(v437 + 8) = 122;
  v438 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_def_cfa_offset", (const unsigned __int8 *)0x13);
  v439 = *v29;
  v440 = v438;
  v441 = *(_QWORD *)(*v29 + 8 * v438);
  if (v441 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v441)
  {
    goto LABEL_224;
  }
  v1217 = (char *)llvm::allocate_buffer(0x24uLL, (std::align_val_t)8uLL);
  strcpy(v1217 + 16, ".cfi_def_cfa_offset");
  *(_QWORD *)v1217 = 19;
  *((_DWORD *)v1217 + 2) = 0;
  *(_QWORD *)(v439 + 8 * v440) = v1217;
  ++*(_DWORD *)(a1 + 828);
  v1218 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v440));
  v441 = *v1218;
  if (*v1218)
    v1219 = v441 == -8;
  else
    v1219 = 1;
  if (v1219)
  {
    do
    {
      v1220 = v1218[1];
      ++v1218;
      v441 = v1220;
      if (v1220)
        v1221 = v441 == -8;
      else
        v1221 = 1;
    }
    while (v1221);
  }
LABEL_224:
  *(_DWORD *)(v441 + 8) = 123;
  v442 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_adjust_cfa_offset", (const unsigned __int8 *)0x16);
  v443 = *v29;
  v444 = v442;
  v445 = *(_QWORD *)(*v29 + 8 * v442);
  if (v445 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v445)
  {
    goto LABEL_226;
  }
  v1222 = (char *)llvm::allocate_buffer(0x27uLL, (std::align_val_t)8uLL);
  strcpy(v1222 + 16, ".cfi_adjust_cfa_offset");
  *(_QWORD *)v1222 = 22;
  *((_DWORD *)v1222 + 2) = 0;
  *(_QWORD *)(v443 + 8 * v444) = v1222;
  ++*(_DWORD *)(a1 + 828);
  v1223 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v444));
  v445 = *v1223;
  if (*v1223)
    v1224 = v445 == -8;
  else
    v1224 = 1;
  if (v1224)
  {
    do
    {
      v1225 = v1223[1];
      ++v1223;
      v445 = v1225;
      if (v1225)
        v1226 = v445 == -8;
      else
        v1226 = 1;
    }
    while (v1226);
  }
LABEL_226:
  *(_DWORD *)(v445 + 8) = 124;
  v446 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_def_cfa_register", (const unsigned __int8 *)0x15);
  v447 = *v29;
  v448 = v446;
  v449 = *(_QWORD *)(*v29 + 8 * v446);
  if (v449 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v449)
  {
    goto LABEL_228;
  }
  v1227 = (char *)llvm::allocate_buffer(0x26uLL, (std::align_val_t)8uLL);
  strcpy(v1227 + 16, ".cfi_def_cfa_register");
  *(_QWORD *)v1227 = 21;
  *((_DWORD *)v1227 + 2) = 0;
  *(_QWORD *)(v447 + 8 * v448) = v1227;
  ++*(_DWORD *)(a1 + 828);
  v1228 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v448));
  v449 = *v1228;
  if (*v1228)
    v1229 = v449 == -8;
  else
    v1229 = 1;
  if (v1229)
  {
    do
    {
      v1230 = v1228[1];
      ++v1228;
      v449 = v1230;
      if (v1230)
        v1231 = v449 == -8;
      else
        v1231 = 1;
    }
    while (v1231);
  }
LABEL_228:
  *(_DWORD *)(v449 + 8) = 125;
  v450 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_llvm_def_aspace_cfa", (const unsigned __int8 *)0x18);
  v451 = *v29;
  v452 = v450;
  v453 = *(_QWORD *)(*v29 + 8 * v450);
  if (v453 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v453)
  {
    goto LABEL_230;
  }
  v1232 = (char *)llvm::allocate_buffer(0x29uLL, (std::align_val_t)8uLL);
  strcpy(v1232 + 16, ".cfi_llvm_def_aspace_cfa");
  *(_QWORD *)v1232 = 24;
  *((_DWORD *)v1232 + 2) = 0;
  *(_QWORD *)(v451 + 8 * v452) = v1232;
  ++*(_DWORD *)(a1 + 828);
  v1233 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v452));
  v453 = *v1233;
  if (*v1233)
    v1234 = v453 == -8;
  else
    v1234 = 1;
  if (v1234)
  {
    do
    {
      v1235 = v1233[1];
      ++v1233;
      v453 = v1235;
      if (v1235)
        v1236 = v453 == -8;
      else
        v1236 = 1;
    }
    while (v1236);
  }
LABEL_230:
  *(_DWORD *)(v453 + 8) = 126;
  v454 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_offset", (const unsigned __int8 *)0xB);
  v455 = *v29;
  v456 = v454;
  v457 = *(_QWORD *)(*v29 + 8 * v454);
  if (v457 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v457)
  {
    goto LABEL_232;
  }
  v1237 = (char *)llvm::allocate_buffer(0x1CuLL, (std::align_val_t)8uLL);
  strcpy(v1237 + 16, ".cfi_offset");
  *(_QWORD *)v1237 = 11;
  *((_DWORD *)v1237 + 2) = 0;
  *(_QWORD *)(v455 + 8 * v456) = v1237;
  ++*(_DWORD *)(a1 + 828);
  v1238 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v456));
  v457 = *v1238;
  if (*v1238)
    v1239 = v457 == -8;
  else
    v1239 = 1;
  if (v1239)
  {
    do
    {
      v1240 = v1238[1];
      ++v1238;
      v457 = v1240;
      if (v1240)
        v1241 = v457 == -8;
      else
        v1241 = 1;
    }
    while (v1241);
  }
LABEL_232:
  *(_DWORD *)(v457 + 8) = 127;
  v458 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_rel_offset", (const unsigned __int8 *)0xF);
  v459 = *v29;
  v460 = v458;
  v461 = *(_QWORD *)(*v29 + 8 * v458);
  if (v461 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v461)
  {
    goto LABEL_234;
  }
  v1242 = (char *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
  strcpy(v1242 + 16, ".cfi_rel_offset");
  *(_QWORD *)v1242 = 15;
  *((_DWORD *)v1242 + 2) = 0;
  *(_QWORD *)(v459 + 8 * v460) = v1242;
  ++*(_DWORD *)(a1 + 828);
  v1243 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v460));
  v461 = *v1243;
  if (*v1243)
    v1244 = v461 == -8;
  else
    v1244 = 1;
  if (v1244)
  {
    do
    {
      v1245 = v1243[1];
      ++v1243;
      v461 = v1245;
      if (v1245)
        v1246 = v461 == -8;
      else
        v1246 = 1;
    }
    while (v1246);
  }
LABEL_234:
  *(_DWORD *)(v461 + 8) = 128;
  v462 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_personality", (const unsigned __int8 *)0x10);
  v463 = *v29;
  v464 = v462;
  v465 = *(_QWORD *)(*v29 + 8 * v462);
  if (v465 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v465)
  {
    goto LABEL_236;
  }
  v1247 = (char *)llvm::allocate_buffer(0x21uLL, (std::align_val_t)8uLL);
  strcpy(v1247 + 16, ".cfi_personality");
  *(_QWORD *)v1247 = 16;
  *((_DWORD *)v1247 + 2) = 0;
  *(_QWORD *)(v463 + 8 * v464) = v1247;
  ++*(_DWORD *)(a1 + 828);
  v1248 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v464));
  v465 = *v1248;
  if (*v1248)
    v1249 = v465 == -8;
  else
    v1249 = 1;
  if (v1249)
  {
    do
    {
      v1250 = v1248[1];
      ++v1248;
      v465 = v1250;
      if (v1250)
        v1251 = v465 == -8;
      else
        v1251 = 1;
    }
    while (v1251);
  }
LABEL_236:
  *(_DWORD *)(v465 + 8) = 129;
  v466 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_lsda", (const unsigned __int8 *)9);
  v467 = *v29;
  v468 = v466;
  v469 = *(_QWORD *)(*v29 + 8 * v466);
  if (v469 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v469)
  {
    goto LABEL_238;
  }
  v1252 = (char *)llvm::allocate_buffer(0x1AuLL, (std::align_val_t)8uLL);
  strcpy(v1252 + 16, ".cfi_lsda");
  *(_QWORD *)v1252 = 9;
  *((_DWORD *)v1252 + 2) = 0;
  *(_QWORD *)(v467 + 8 * v468) = v1252;
  ++*(_DWORD *)(a1 + 828);
  v1253 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v468));
  v469 = *v1253;
  if (*v1253)
    v1254 = v469 == -8;
  else
    v1254 = 1;
  if (v1254)
  {
    do
    {
      v1255 = v1253[1];
      ++v1253;
      v469 = v1255;
      if (v1255)
        v1256 = v469 == -8;
      else
        v1256 = 1;
    }
    while (v1256);
  }
LABEL_238:
  *(_DWORD *)(v469 + 8) = 130;
  v470 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_remember_state", (const unsigned __int8 *)0x13);
  v471 = *v29;
  v472 = v470;
  v473 = *(_QWORD *)(*v29 + 8 * v470);
  if (v473 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v473)
  {
    goto LABEL_240;
  }
  v1257 = (char *)llvm::allocate_buffer(0x24uLL, (std::align_val_t)8uLL);
  strcpy(v1257 + 16, ".cfi_remember_state");
  *(_QWORD *)v1257 = 19;
  *((_DWORD *)v1257 + 2) = 0;
  *(_QWORD *)(v471 + 8 * v472) = v1257;
  ++*(_DWORD *)(a1 + 828);
  v1258 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v472));
  v473 = *v1258;
  if (*v1258)
    v1259 = v473 == -8;
  else
    v1259 = 1;
  if (v1259)
  {
    do
    {
      v1260 = v1258[1];
      ++v1258;
      v473 = v1260;
      if (v1260)
        v1261 = v473 == -8;
      else
        v1261 = 1;
    }
    while (v1261);
  }
LABEL_240:
  *(_DWORD *)(v473 + 8) = 131;
  v474 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_restore_state", (const unsigned __int8 *)0x12);
  v475 = *v29;
  v476 = v474;
  v477 = *(_QWORD *)(*v29 + 8 * v474);
  if (v477 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v477)
  {
    goto LABEL_242;
  }
  v1262 = (char *)llvm::allocate_buffer(0x23uLL, (std::align_val_t)8uLL);
  strcpy(v1262 + 16, ".cfi_restore_state");
  *(_QWORD *)v1262 = 18;
  *((_DWORD *)v1262 + 2) = 0;
  *(_QWORD *)(v475 + 8 * v476) = v1262;
  ++*(_DWORD *)(a1 + 828);
  v1263 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v476));
  v477 = *v1263;
  if (*v1263)
    v1264 = v477 == -8;
  else
    v1264 = 1;
  if (v1264)
  {
    do
    {
      v1265 = v1263[1];
      ++v1263;
      v477 = v1265;
      if (v1265)
        v1266 = v477 == -8;
      else
        v1266 = 1;
    }
    while (v1266);
  }
LABEL_242:
  *(_DWORD *)(v477 + 8) = 132;
  v478 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_same_value", (const unsigned __int8 *)0xF);
  v479 = *v29;
  v480 = v478;
  v481 = *(_QWORD *)(*v29 + 8 * v478);
  if (v481 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v481)
  {
    goto LABEL_244;
  }
  v1267 = (char *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
  strcpy(v1267 + 16, ".cfi_same_value");
  *(_QWORD *)v1267 = 15;
  *((_DWORD *)v1267 + 2) = 0;
  *(_QWORD *)(v479 + 8 * v480) = v1267;
  ++*(_DWORD *)(a1 + 828);
  v1268 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v480));
  v481 = *v1268;
  if (*v1268)
    v1269 = v481 == -8;
  else
    v1269 = 1;
  if (v1269)
  {
    do
    {
      v1270 = v1268[1];
      ++v1268;
      v481 = v1270;
      if (v1270)
        v1271 = v481 == -8;
      else
        v1271 = 1;
    }
    while (v1271);
  }
LABEL_244:
  *(_DWORD *)(v481 + 8) = 133;
  v482 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_restore", (const unsigned __int8 *)0xC);
  v483 = *v29;
  v484 = v482;
  v485 = *(_QWORD *)(*v29 + 8 * v482);
  if (v485 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v485)
  {
    goto LABEL_246;
  }
  v1272 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v1272 + 16, ".cfi_restore");
  *(_QWORD *)v1272 = 12;
  *((_DWORD *)v1272 + 2) = 0;
  *(_QWORD *)(v483 + 8 * v484) = v1272;
  ++*(_DWORD *)(a1 + 828);
  v1273 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v484));
  v485 = *v1273;
  if (*v1273)
    v1274 = v485 == -8;
  else
    v1274 = 1;
  if (v1274)
  {
    do
    {
      v1275 = v1273[1];
      ++v1273;
      v485 = v1275;
      if (v1275)
        v1276 = v485 == -8;
      else
        v1276 = 1;
    }
    while (v1276);
  }
LABEL_246:
  *(_DWORD *)(v485 + 8) = 134;
  v486 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_escape", (const unsigned __int8 *)0xB);
  v487 = *v29;
  v488 = v486;
  v489 = *(_QWORD *)(*v29 + 8 * v486);
  if (v489 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v489)
  {
    goto LABEL_248;
  }
  v1277 = (char *)llvm::allocate_buffer(0x1CuLL, (std::align_val_t)8uLL);
  strcpy(v1277 + 16, ".cfi_escape");
  *(_QWORD *)v1277 = 11;
  *((_DWORD *)v1277 + 2) = 0;
  *(_QWORD *)(v487 + 8 * v488) = v1277;
  ++*(_DWORD *)(a1 + 828);
  v1278 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v488));
  v489 = *v1278;
  if (*v1278)
    v1279 = v489 == -8;
  else
    v1279 = 1;
  if (v1279)
  {
    do
    {
      v1280 = v1278[1];
      ++v1278;
      v489 = v1280;
      if (v1280)
        v1281 = v489 == -8;
      else
        v1281 = 1;
    }
    while (v1281);
  }
LABEL_248:
  *(_DWORD *)(v489 + 8) = 135;
  v490 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_return_column", (const unsigned __int8 *)0x12);
  v491 = *v29;
  v492 = v490;
  v493 = *(_QWORD *)(*v29 + 8 * v490);
  if (v493 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v493)
  {
    goto LABEL_250;
  }
  v1282 = (char *)llvm::allocate_buffer(0x23uLL, (std::align_val_t)8uLL);
  strcpy(v1282 + 16, ".cfi_return_column");
  *(_QWORD *)v1282 = 18;
  *((_DWORD *)v1282 + 2) = 0;
  *(_QWORD *)(v491 + 8 * v492) = v1282;
  ++*(_DWORD *)(a1 + 828);
  v1283 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v492));
  v493 = *v1283;
  if (*v1283)
    v1284 = v493 == -8;
  else
    v1284 = 1;
  if (v1284)
  {
    do
    {
      v1285 = v1283[1];
      ++v1283;
      v493 = v1285;
      if (v1285)
        v1286 = v493 == -8;
      else
        v1286 = 1;
    }
    while (v1286);
  }
LABEL_250:
  *(_DWORD *)(v493 + 8) = 136;
  v494 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_signal_frame", (const unsigned __int8 *)0x11);
  v495 = *v29;
  v496 = v494;
  v497 = *(_QWORD *)(*v29 + 8 * v494);
  if (v497 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v497)
  {
    goto LABEL_252;
  }
  v1287 = (char *)llvm::allocate_buffer(0x22uLL, (std::align_val_t)8uLL);
  strcpy(v1287 + 16, ".cfi_signal_frame");
  *(_QWORD *)v1287 = 17;
  *((_DWORD *)v1287 + 2) = 0;
  *(_QWORD *)(v495 + 8 * v496) = v1287;
  ++*(_DWORD *)(a1 + 828);
  v1288 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v496));
  v497 = *v1288;
  if (*v1288)
    v1289 = v497 == -8;
  else
    v1289 = 1;
  if (v1289)
  {
    do
    {
      v1290 = v1288[1];
      ++v1288;
      v497 = v1290;
      if (v1290)
        v1291 = v497 == -8;
      else
        v1291 = 1;
    }
    while (v1291);
  }
LABEL_252:
  *(_DWORD *)(v497 + 8) = 137;
  v498 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_undefined", (const unsigned __int8 *)0xE);
  v499 = *v29;
  v500 = v498;
  v501 = *(_QWORD *)(*v29 + 8 * v498);
  if (v501 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v501)
  {
    goto LABEL_254;
  }
  v1292 = (char *)llvm::allocate_buffer(0x1FuLL, (std::align_val_t)8uLL);
  strcpy(v1292 + 16, ".cfi_undefined");
  *(_QWORD *)v1292 = 14;
  *((_DWORD *)v1292 + 2) = 0;
  *(_QWORD *)(v499 + 8 * v500) = v1292;
  ++*(_DWORD *)(a1 + 828);
  v1293 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v500));
  v501 = *v1293;
  if (*v1293)
    v1294 = v501 == -8;
  else
    v1294 = 1;
  if (v1294)
  {
    do
    {
      v1295 = v1293[1];
      ++v1293;
      v501 = v1295;
      if (v1295)
        v1296 = v501 == -8;
      else
        v1296 = 1;
    }
    while (v1296);
  }
LABEL_254:
  *(_DWORD *)(v501 + 8) = 138;
  v502 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_register", (const unsigned __int8 *)0xD);
  v503 = *v29;
  v504 = v502;
  v505 = *(_QWORD *)(*v29 + 8 * v502);
  if (v505 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v505)
  {
    goto LABEL_256;
  }
  v1297 = (char *)llvm::allocate_buffer(0x1EuLL, (std::align_val_t)8uLL);
  strcpy(v1297 + 16, ".cfi_register");
  *(_QWORD *)v1297 = 13;
  *((_DWORD *)v1297 + 2) = 0;
  *(_QWORD *)(v503 + 8 * v504) = v1297;
  ++*(_DWORD *)(a1 + 828);
  v1298 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v504));
  v505 = *v1298;
  if (*v1298)
    v1299 = v505 == -8;
  else
    v1299 = 1;
  if (v1299)
  {
    do
    {
      v1300 = v1298[1];
      ++v1298;
      v505 = v1300;
      if (v1300)
        v1301 = v505 == -8;
      else
        v1301 = 1;
    }
    while (v1301);
  }
LABEL_256:
  *(_DWORD *)(v505 + 8) = 139;
  v506 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_window_save", (const unsigned __int8 *)0x10);
  v507 = *v29;
  v508 = v506;
  v509 = *(_QWORD *)(*v29 + 8 * v506);
  if (v509 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v509)
  {
    goto LABEL_258;
  }
  v1302 = (char *)llvm::allocate_buffer(0x21uLL, (std::align_val_t)8uLL);
  strcpy(v1302 + 16, ".cfi_window_save");
  *(_QWORD *)v1302 = 16;
  *((_DWORD *)v1302 + 2) = 0;
  *(_QWORD *)(v507 + 8 * v508) = v1302;
  ++*(_DWORD *)(a1 + 828);
  v1303 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v508));
  v509 = *v1303;
  if (*v1303)
    v1304 = v509 == -8;
  else
    v1304 = 1;
  if (v1304)
  {
    do
    {
      v1305 = v1303[1];
      ++v1303;
      v509 = v1305;
      if (v1305)
        v1306 = v509 == -8;
      else
        v1306 = 1;
    }
    while (v1306);
  }
LABEL_258:
  *(_DWORD *)(v509 + 8) = 140;
  v510 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_b_key_frame", (const unsigned __int8 *)0x10);
  v511 = *v29;
  v512 = v510;
  v513 = *(_QWORD *)(*v29 + 8 * v510);
  if (v513 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v513)
  {
    goto LABEL_260;
  }
  v1307 = (char *)llvm::allocate_buffer(0x21uLL, (std::align_val_t)8uLL);
  strcpy(v1307 + 16, ".cfi_b_key_frame");
  *(_QWORD *)v1307 = 16;
  *((_DWORD *)v1307 + 2) = 0;
  *(_QWORD *)(v511 + 8 * v512) = v1307;
  ++*(_DWORD *)(a1 + 828);
  v1308 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v512));
  v513 = *v1308;
  if (*v1308)
    v1309 = v513 == -8;
  else
    v1309 = 1;
  if (v1309)
  {
    do
    {
      v1310 = v1308[1];
      ++v1308;
      v513 = v1310;
      if (v1310)
        v1311 = v513 == -8;
      else
        v1311 = 1;
    }
    while (v1311);
  }
LABEL_260:
  *(_DWORD *)(v513 + 8) = 141;
  v514 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".cfi_mte_tagged_frame", (const unsigned __int8 *)0x15);
  v515 = *v29;
  v516 = v514;
  v517 = *(_QWORD *)(*v29 + 8 * v514);
  if (v517 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v517)
  {
    goto LABEL_262;
  }
  v1312 = (char *)llvm::allocate_buffer(0x26uLL, (std::align_val_t)8uLL);
  strcpy(v1312 + 16, ".cfi_mte_tagged_frame");
  *(_QWORD *)v1312 = 21;
  *((_DWORD *)v1312 + 2) = 0;
  *(_QWORD *)(v515 + 8 * v516) = v1312;
  ++*(_DWORD *)(a1 + 828);
  v1313 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v516));
  v517 = *v1313;
  if (*v1313)
    v1314 = v517 == -8;
  else
    v1314 = 1;
  if (v1314)
  {
    do
    {
      v1315 = v1313[1];
      ++v1313;
      v517 = v1315;
      if (v1315)
        v1316 = v517 == -8;
      else
        v1316 = 1;
    }
    while (v1316);
  }
LABEL_262:
  *(_DWORD *)(v517 + 8) = 162;
  v518 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".macros_on", (const unsigned __int8 *)0xA);
  v519 = *v29;
  v520 = v518;
  v521 = *(_QWORD *)(*v29 + 8 * v518);
  if (v521 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v521)
  {
    goto LABEL_264;
  }
  v1317 = (char *)llvm::allocate_buffer(0x1BuLL, (std::align_val_t)8uLL);
  strcpy(v1317 + 16, ".macros_on");
  *(_QWORD *)v1317 = 10;
  *((_DWORD *)v1317 + 2) = 0;
  *(_QWORD *)(v519 + 8 * v520) = v1317;
  ++*(_DWORD *)(a1 + 828);
  v1318 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v520));
  v521 = *v1318;
  if (*v1318)
    v1319 = v521 == -8;
  else
    v1319 = 1;
  if (v1319)
  {
    do
    {
      v1320 = v1318[1];
      ++v1318;
      v521 = v1320;
      if (v1320)
        v1321 = v521 == -8;
      else
        v1321 = 1;
    }
    while (v1321);
  }
LABEL_264:
  *(_DWORD *)(v521 + 8) = 142;
  v522 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".macros_off", (const unsigned __int8 *)0xB);
  v523 = *v29;
  v524 = v522;
  v525 = *(_QWORD *)(*v29 + 8 * v522);
  if (v525 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v525)
  {
    goto LABEL_266;
  }
  v1322 = (char *)llvm::allocate_buffer(0x1CuLL, (std::align_val_t)8uLL);
  strcpy(v1322 + 16, ".macros_off");
  *(_QWORD *)v1322 = 11;
  *((_DWORD *)v1322 + 2) = 0;
  *(_QWORD *)(v523 + 8 * v524) = v1322;
  ++*(_DWORD *)(a1 + 828);
  v1323 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v524));
  v525 = *v1323;
  if (*v1323)
    v1324 = v525 == -8;
  else
    v1324 = 1;
  if (v1324)
  {
    do
    {
      v1325 = v1323[1];
      ++v1323;
      v525 = v1325;
      if (v1325)
        v1326 = v525 == -8;
      else
        v1326 = 1;
    }
    while (v1326);
  }
LABEL_266:
  *(_DWORD *)(v525 + 8) = 143;
  v526 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".macro", (const unsigned __int8 *)6);
  v527 = *v29;
  v528 = v526;
  v529 = *(_QWORD *)(*v29 + 8 * v526);
  if (v529 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v529)
  {
    goto LABEL_268;
  }
  v1327 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1327 + 16, ".macro");
  *(_QWORD *)v1327 = 6;
  *((_DWORD *)v1327 + 2) = 0;
  *(_QWORD *)(v527 + 8 * v528) = v1327;
  ++*(_DWORD *)(a1 + 828);
  v1328 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v528));
  v529 = *v1328;
  if (*v1328)
    v1329 = v529 == -8;
  else
    v1329 = 1;
  if (v1329)
  {
    do
    {
      v1330 = v1328[1];
      ++v1328;
      v529 = v1330;
      if (v1330)
        v1331 = v529 == -8;
      else
        v1331 = 1;
    }
    while (v1331);
  }
LABEL_268:
  *(_DWORD *)(v529 + 8) = 146;
  v530 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".exitm", (const unsigned __int8 *)6);
  v531 = *v29;
  v532 = v530;
  v533 = *(_QWORD *)(*v29 + 8 * v530);
  if (v533 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v533)
  {
    goto LABEL_270;
  }
  v1332 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1332 + 16, ".exitm");
  *(_QWORD *)v1332 = 6;
  *((_DWORD *)v1332 + 2) = 0;
  *(_QWORD *)(v531 + 8 * v532) = v1332;
  ++*(_DWORD *)(a1 + 828);
  v1333 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v532));
  v533 = *v1333;
  if (*v1333)
    v1334 = v533 == -8;
  else
    v1334 = 1;
  if (v1334)
  {
    do
    {
      v1335 = v1333[1];
      ++v1333;
      v533 = v1335;
      if (v1335)
        v1336 = v533 == -8;
      else
        v1336 = 1;
    }
    while (v1336);
  }
LABEL_270:
  *(_DWORD *)(v533 + 8) = 147;
  v534 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".endm", (const unsigned __int8 *)5);
  v535 = *v29;
  v536 = v534;
  v537 = *(_QWORD *)(*v29 + 8 * v534);
  if (v537 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v537)
  {
    goto LABEL_272;
  }
  v1337 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1337 + 16, ".endm");
  *(_QWORD *)v1337 = 5;
  *((_DWORD *)v1337 + 2) = 0;
  *(_QWORD *)(v535 + 8 * v536) = v1337;
  ++*(_DWORD *)(a1 + 828);
  v1338 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v536));
  v537 = *v1338;
  if (*v1338)
    v1339 = v537 == -8;
  else
    v1339 = 1;
  if (v1339)
  {
    do
    {
      v1340 = v1338[1];
      ++v1338;
      v537 = v1340;
      if (v1340)
        v1341 = v537 == -8;
      else
        v1341 = 1;
    }
    while (v1341);
  }
LABEL_272:
  *(_DWORD *)(v537 + 8) = 148;
  v538 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".endmacro", (const unsigned __int8 *)9);
  v539 = *v29;
  v540 = v538;
  v541 = *(_QWORD *)(*v29 + 8 * v538);
  if (v541 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v541)
  {
    goto LABEL_274;
  }
  v1342 = (char *)llvm::allocate_buffer(0x1AuLL, (std::align_val_t)8uLL);
  strcpy(v1342 + 16, ".endmacro");
  *(_QWORD *)v1342 = 9;
  *((_DWORD *)v1342 + 2) = 0;
  *(_QWORD *)(v539 + 8 * v540) = v1342;
  ++*(_DWORD *)(a1 + 828);
  v1343 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v540));
  v541 = *v1343;
  if (*v1343)
    v1344 = v541 == -8;
  else
    v1344 = 1;
  if (v1344)
  {
    do
    {
      v1345 = v1343[1];
      ++v1343;
      v541 = v1345;
      if (v1345)
        v1346 = v541 == -8;
      else
        v1346 = 1;
    }
    while (v1346);
  }
LABEL_274:
  *(_DWORD *)(v541 + 8) = 149;
  v542 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".purgem", (const unsigned __int8 *)7);
  v543 = *v29;
  v544 = v542;
  v545 = *(_QWORD *)(*v29 + 8 * v542);
  if (v545 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v545)
  {
    goto LABEL_276;
  }
  v1347 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v1347 + 16, ".purgem");
  *(_QWORD *)v1347 = 7;
  *((_DWORD *)v1347 + 2) = 0;
  *(_QWORD *)(v543 + 8 * v544) = v1347;
  ++*(_DWORD *)(a1 + 828);
  v1348 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v544));
  v545 = *v1348;
  if (*v1348)
    v1349 = v545 == -8;
  else
    v1349 = 1;
  if (v1349)
  {
    do
    {
      v1350 = v1348[1];
      ++v1348;
      v545 = v1350;
      if (v1350)
        v1351 = v545 == -8;
      else
        v1351 = 1;
    }
    while (v1351);
  }
LABEL_276:
  *(_DWORD *)(v545 + 8) = 150;
  v546 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".err", (const unsigned __int8 *)4);
  v547 = *v29;
  v548 = v546;
  v549 = *(_QWORD *)(*v29 + 8 * v546);
  if (v549 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v549)
  {
    goto LABEL_278;
  }
  v1352 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v1352 + 16, ".err");
  *(_QWORD *)v1352 = 4;
  *((_DWORD *)v1352 + 2) = 0;
  *(_QWORD *)(v547 + 8 * v548) = v1352;
  ++*(_DWORD *)(a1 + 828);
  v1353 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v548));
  v549 = *v1353;
  if (*v1353)
    v1354 = v549 == -8;
  else
    v1354 = 1;
  if (v1354)
  {
    do
    {
      v1355 = v1353[1];
      ++v1353;
      v549 = v1355;
      if (v1355)
        v1356 = v549 == -8;
      else
        v1356 = 1;
    }
    while (v1356);
  }
LABEL_278:
  *(_DWORD *)(v549 + 8) = 153;
  v550 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".error", (const unsigned __int8 *)6);
  v551 = *v29;
  v552 = v550;
  v553 = *(_QWORD *)(*v29 + 8 * v550);
  if (v553 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v553)
  {
    goto LABEL_280;
  }
  v1357 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1357 + 16, ".error");
  *(_QWORD *)v1357 = 6;
  *((_DWORD *)v1357 + 2) = 0;
  *(_QWORD *)(v551 + 8 * v552) = v1357;
  ++*(_DWORD *)(a1 + 828);
  v1358 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v552));
  v553 = *v1358;
  if (*v1358)
    v1359 = v553 == -8;
  else
    v1359 = 1;
  if (v1359)
  {
    do
    {
      v1360 = v1358[1];
      ++v1358;
      v553 = v1360;
      if (v1360)
        v1361 = v553 == -8;
      else
        v1361 = 1;
    }
    while (v1361);
  }
LABEL_280:
  *(_DWORD *)(v553 + 8) = 154;
  v554 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".warning", (const unsigned __int8 *)8);
  v555 = *v29;
  v556 = v554;
  v557 = *(_QWORD *)(*v29 + 8 * v554);
  if (v557 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v557)
  {
    goto LABEL_282;
  }
  v1362 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v1362 + 16, ".warning");
  *(_QWORD *)v1362 = 8;
  *((_DWORD *)v1362 + 2) = 0;
  *(_QWORD *)(v555 + 8 * v556) = v1362;
  ++*(_DWORD *)(a1 + 828);
  v1363 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v556));
  v557 = *v1363;
  if (*v1363)
    v1364 = v557 == -8;
  else
    v1364 = 1;
  if (v1364)
  {
    do
    {
      v1365 = v1363[1];
      ++v1363;
      v557 = v1365;
      if (v1365)
        v1366 = v557 == -8;
      else
        v1366 = 1;
    }
    while (v1366);
  }
LABEL_282:
  *(_DWORD *)(v557 + 8) = 155;
  v558 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".altmacro", (const unsigned __int8 *)9);
  v559 = *v29;
  v560 = v558;
  v561 = *(_QWORD *)(*v29 + 8 * v558);
  if (v561 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v561)
  {
    goto LABEL_284;
  }
  v1367 = (char *)llvm::allocate_buffer(0x1AuLL, (std::align_val_t)8uLL);
  strcpy(v1367 + 16, ".altmacro");
  *(_QWORD *)v1367 = 9;
  *((_DWORD *)v1367 + 2) = 0;
  *(_QWORD *)(v559 + 8 * v560) = v1367;
  ++*(_DWORD *)(a1 + 828);
  v1368 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v560));
  v561 = *v1368;
  if (*v1368)
    v1369 = v561 == -8;
  else
    v1369 = 1;
  if (v1369)
  {
    do
    {
      v1370 = v1368[1];
      ++v1368;
      v561 = v1370;
      if (v1370)
        v1371 = v561 == -8;
      else
        v1371 = 1;
    }
    while (v1371);
  }
LABEL_284:
  *(_DWORD *)(v561 + 8) = 144;
  v562 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".noaltmacro", (const unsigned __int8 *)0xB);
  v563 = *v29;
  v564 = v562;
  v565 = *(_QWORD *)(*v29 + 8 * v562);
  if (v565 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v565)
  {
    goto LABEL_286;
  }
  v1372 = (char *)llvm::allocate_buffer(0x1CuLL, (std::align_val_t)8uLL);
  strcpy(v1372 + 16, ".noaltmacro");
  *(_QWORD *)v1372 = 11;
  *((_DWORD *)v1372 + 2) = 0;
  *(_QWORD *)(v563 + 8 * v564) = v1372;
  ++*(_DWORD *)(a1 + 828);
  v1373 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v564));
  v565 = *v1373;
  if (*v1373)
    v1374 = v565 == -8;
  else
    v1374 = 1;
  if (v1374)
  {
    do
    {
      v1375 = v1373[1];
      ++v1373;
      v565 = v1375;
      if (v1375)
        v1376 = v565 == -8;
      else
        v1376 = 1;
    }
    while (v1376);
  }
LABEL_286:
  *(_DWORD *)(v565 + 8) = 145;
  v566 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".reloc", (const unsigned __int8 *)6);
  v567 = *v29;
  v568 = v566;
  v569 = *(_QWORD *)(*v29 + 8 * v566);
  if (v569 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v569)
  {
    goto LABEL_288;
  }
  v1377 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1377 + 16, ".reloc");
  *(_QWORD *)v1377 = 6;
  *((_DWORD *)v1377 + 2) = 0;
  *(_QWORD *)(v567 + 8 * v568) = v1377;
  ++*(_DWORD *)(a1 + 828);
  v1378 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v568));
  v569 = *v1378;
  if (*v1378)
    v1379 = v569 == -8;
  else
    v1379 = 1;
  if (v1379)
  {
    do
    {
      v1380 = v1378[1];
      ++v1378;
      v569 = v1380;
      if (v1380)
        v1381 = v569 == -8;
      else
        v1381 = 1;
    }
    while (v1381);
  }
LABEL_288:
  *(_DWORD *)(v569 + 8) = 9;
  v570 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dc", (const unsigned __int8 *)3);
  v571 = *v29;
  v572 = v570;
  v573 = *(_QWORD *)(*v29 + 8 * v570);
  if (v573 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v573)
  {
    goto LABEL_290;
  }
  v1382 = llvm::allocate_buffer(0x14uLL, (std::align_val_t)8uLL);
  v1382[4] = 6513710;
  *(_QWORD *)v1382 = 3;
  v1382[2] = 0;
  *(_QWORD *)(v571 + 8 * v572) = v1382;
  ++*(_DWORD *)(a1 + 828);
  v1383 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v572));
  v573 = *v1383;
  if (*v1383)
    v1384 = v573 == -8;
  else
    v1384 = 1;
  if (v1384)
  {
    do
    {
      v1385 = v1383[1];
      ++v1383;
      v573 = v1385;
      if (v1385)
        v1386 = v573 == -8;
      else
        v1386 = 1;
    }
    while (v1386);
  }
LABEL_290:
  *(_DWORD *)(v573 + 8) = 18;
  v574 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dc.a", (const unsigned __int8 *)5);
  v575 = *v29;
  v576 = v574;
  v577 = *(_QWORD *)(*v29 + 8 * v574);
  if (v577 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v577)
  {
    goto LABEL_292;
  }
  v1387 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1387 + 16, ".dc.a");
  *(_QWORD *)v1387 = 5;
  *((_DWORD *)v1387 + 2) = 0;
  *(_QWORD *)(v575 + 8 * v576) = v1387;
  ++*(_DWORD *)(a1 + 828);
  v1388 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v576));
  v577 = *v1388;
  if (*v1388)
    v1389 = v577 == -8;
  else
    v1389 = 1;
  if (v1389)
  {
    do
    {
      v1390 = v1388[1];
      ++v1388;
      v577 = v1390;
      if (v1390)
        v1391 = v577 == -8;
      else
        v1391 = 1;
    }
    while (v1391);
  }
LABEL_292:
  *(_DWORD *)(v577 + 8) = 19;
  v578 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dc.b", (const unsigned __int8 *)5);
  v579 = *v29;
  v580 = v578;
  v581 = *(_QWORD *)(*v29 + 8 * v578);
  if (v581 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v581)
  {
    goto LABEL_294;
  }
  v1392 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1392 + 16, ".dc.b");
  *(_QWORD *)v1392 = 5;
  *((_DWORD *)v1392 + 2) = 0;
  *(_QWORD *)(v579 + 8 * v580) = v1392;
  ++*(_DWORD *)(a1 + 828);
  v1393 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v580));
  v581 = *v1393;
  if (*v1393)
    v1394 = v581 == -8;
  else
    v1394 = 1;
  if (v1394)
  {
    do
    {
      v1395 = v1393[1];
      ++v1393;
      v581 = v1395;
      if (v1395)
        v1396 = v581 == -8;
      else
        v1396 = 1;
    }
    while (v1396);
  }
LABEL_294:
  *(_DWORD *)(v581 + 8) = 20;
  v582 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dc.d", (const unsigned __int8 *)5);
  v583 = *v29;
  v584 = v582;
  v585 = *(_QWORD *)(*v29 + 8 * v582);
  if (v585 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v585)
  {
    goto LABEL_296;
  }
  v1397 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1397 + 16, ".dc.d");
  *(_QWORD *)v1397 = 5;
  *((_DWORD *)v1397 + 2) = 0;
  *(_QWORD *)(v583 + 8 * v584) = v1397;
  ++*(_DWORD *)(a1 + 828);
  v1398 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v584));
  v585 = *v1398;
  if (*v1398)
    v1399 = v585 == -8;
  else
    v1399 = 1;
  if (v1399)
  {
    do
    {
      v1400 = v1398[1];
      ++v1398;
      v585 = v1400;
      if (v1400)
        v1401 = v585 == -8;
      else
        v1401 = 1;
    }
    while (v1401);
  }
LABEL_296:
  *(_DWORD *)(v585 + 8) = 21;
  v586 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dc.l", (const unsigned __int8 *)5);
  v587 = *v29;
  v588 = v586;
  v589 = *(_QWORD *)(*v29 + 8 * v586);
  if (v589 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v589)
  {
    goto LABEL_298;
  }
  v1402 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1402 + 16, ".dc.l");
  *(_QWORD *)v1402 = 5;
  *((_DWORD *)v1402 + 2) = 0;
  *(_QWORD *)(v587 + 8 * v588) = v1402;
  ++*(_DWORD *)(a1 + 828);
  v1403 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v588));
  v589 = *v1403;
  if (*v1403)
    v1404 = v589 == -8;
  else
    v1404 = 1;
  if (v1404)
  {
    do
    {
      v1405 = v1403[1];
      ++v1403;
      v589 = v1405;
      if (v1405)
        v1406 = v589 == -8;
      else
        v1406 = 1;
    }
    while (v1406);
  }
LABEL_298:
  *(_DWORD *)(v589 + 8) = 22;
  v590 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dc.s", (const unsigned __int8 *)5);
  v591 = *v29;
  v592 = v590;
  v593 = *(_QWORD *)(*v29 + 8 * v590);
  if (v593 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v593)
  {
    goto LABEL_300;
  }
  v1407 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1407 + 16, ".dc.s");
  *(_QWORD *)v1407 = 5;
  *((_DWORD *)v1407 + 2) = 0;
  *(_QWORD *)(v591 + 8 * v592) = v1407;
  ++*(_DWORD *)(a1 + 828);
  v1408 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v592));
  v593 = *v1408;
  if (*v1408)
    v1409 = v593 == -8;
  else
    v1409 = 1;
  if (v1409)
  {
    do
    {
      v1410 = v1408[1];
      ++v1408;
      v593 = v1410;
      if (v1410)
        v1411 = v593 == -8;
      else
        v1411 = 1;
    }
    while (v1411);
  }
LABEL_300:
  *(_DWORD *)(v593 + 8) = 23;
  v594 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dc.w", (const unsigned __int8 *)5);
  v595 = *v29;
  v596 = v594;
  v597 = *(_QWORD *)(*v29 + 8 * v594);
  if (v597 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v597)
  {
    goto LABEL_302;
  }
  v1412 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1412 + 16, ".dc.w");
  *(_QWORD *)v1412 = 5;
  *((_DWORD *)v1412 + 2) = 0;
  *(_QWORD *)(v595 + 8 * v596) = v1412;
  ++*(_DWORD *)(a1 + 828);
  v1413 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v596));
  v597 = *v1413;
  if (*v1413)
    v1414 = v597 == -8;
  else
    v1414 = 1;
  if (v1414)
  {
    do
    {
      v1415 = v1413[1];
      ++v1413;
      v597 = v1415;
      if (v1415)
        v1416 = v597 == -8;
      else
        v1416 = 1;
    }
    while (v1416);
  }
LABEL_302:
  *(_DWORD *)(v597 + 8) = 24;
  v598 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dc.x", (const unsigned __int8 *)5);
  v599 = *v29;
  v600 = v598;
  v601 = *(_QWORD *)(*v29 + 8 * v598);
  if (v601 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v601)
  {
    goto LABEL_304;
  }
  v1417 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1417 + 16, ".dc.x");
  *(_QWORD *)v1417 = 5;
  *((_DWORD *)v1417 + 2) = 0;
  *(_QWORD *)(v599 + 8 * v600) = v1417;
  ++*(_DWORD *)(a1 + 828);
  v1418 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v600));
  v601 = *v1418;
  if (*v1418)
    v1419 = v601 == -8;
  else
    v1419 = 1;
  if (v1419)
  {
    do
    {
      v1420 = v1418[1];
      ++v1418;
      v601 = v1420;
      if (v1420)
        v1421 = v601 == -8;
      else
        v1421 = 1;
    }
    while (v1421);
  }
LABEL_304:
  *(_DWORD *)(v601 + 8) = 25;
  v602 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dcb", (const unsigned __int8 *)4);
  v603 = *v29;
  v604 = v602;
  v605 = *(_QWORD *)(*v29 + 8 * v602);
  if (v605 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v605)
  {
    goto LABEL_306;
  }
  v1422 = (char *)llvm::allocate_buffer(0x15uLL, (std::align_val_t)8uLL);
  strcpy(v1422 + 16, ".dcb");
  *(_QWORD *)v1422 = 4;
  *((_DWORD *)v1422 + 2) = 0;
  *(_QWORD *)(v603 + 8 * v604) = v1422;
  ++*(_DWORD *)(a1 + 828);
  v1423 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v604));
  v605 = *v1423;
  if (*v1423)
    v1424 = v605 == -8;
  else
    v1424 = 1;
  if (v1424)
  {
    do
    {
      v1425 = v1423[1];
      ++v1423;
      v605 = v1425;
      if (v1425)
        v1426 = v605 == -8;
      else
        v1426 = 1;
    }
    while (v1426);
  }
LABEL_306:
  *(_DWORD *)(v605 + 8) = 26;
  v606 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dcb.b", (const unsigned __int8 *)6);
  v607 = *v29;
  v608 = v606;
  v609 = *(_QWORD *)(*v29 + 8 * v606);
  if (v609 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v609)
  {
    goto LABEL_308;
  }
  v1427 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1427 + 16, ".dcb.b");
  *(_QWORD *)v1427 = 6;
  *((_DWORD *)v1427 + 2) = 0;
  *(_QWORD *)(v607 + 8 * v608) = v1427;
  ++*(_DWORD *)(a1 + 828);
  v1428 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v608));
  v609 = *v1428;
  if (*v1428)
    v1429 = v609 == -8;
  else
    v1429 = 1;
  if (v1429)
  {
    do
    {
      v1430 = v1428[1];
      ++v1428;
      v609 = v1430;
      if (v1430)
        v1431 = v609 == -8;
      else
        v1431 = 1;
    }
    while (v1431);
  }
LABEL_308:
  *(_DWORD *)(v609 + 8) = 27;
  v610 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dcb.d", (const unsigned __int8 *)6);
  v611 = *v29;
  v612 = v610;
  v613 = *(_QWORD *)(*v29 + 8 * v610);
  if (v613 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v613)
  {
    goto LABEL_310;
  }
  v1432 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1432 + 16, ".dcb.d");
  *(_QWORD *)v1432 = 6;
  *((_DWORD *)v1432 + 2) = 0;
  *(_QWORD *)(v611 + 8 * v612) = v1432;
  ++*(_DWORD *)(a1 + 828);
  v1433 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v612));
  v613 = *v1433;
  if (*v1433)
    v1434 = v613 == -8;
  else
    v1434 = 1;
  if (v1434)
  {
    do
    {
      v1435 = v1433[1];
      ++v1433;
      v613 = v1435;
      if (v1435)
        v1436 = v613 == -8;
      else
        v1436 = 1;
    }
    while (v1436);
  }
LABEL_310:
  *(_DWORD *)(v613 + 8) = 28;
  v614 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dcb.l", (const unsigned __int8 *)6);
  v615 = *v29;
  v616 = v614;
  v617 = *(_QWORD *)(*v29 + 8 * v614);
  if (v617 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v617)
  {
    goto LABEL_312;
  }
  v1437 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1437 + 16, ".dcb.l");
  *(_QWORD *)v1437 = 6;
  *((_DWORD *)v1437 + 2) = 0;
  *(_QWORD *)(v615 + 8 * v616) = v1437;
  ++*(_DWORD *)(a1 + 828);
  v1438 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v616));
  v617 = *v1438;
  if (*v1438)
    v1439 = v617 == -8;
  else
    v1439 = 1;
  if (v1439)
  {
    do
    {
      v1440 = v1438[1];
      ++v1438;
      v617 = v1440;
      if (v1440)
        v1441 = v617 == -8;
      else
        v1441 = 1;
    }
    while (v1441);
  }
LABEL_312:
  *(_DWORD *)(v617 + 8) = 29;
  v618 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dcb.s", (const unsigned __int8 *)6);
  v619 = *v29;
  v620 = v618;
  v621 = *(_QWORD *)(*v29 + 8 * v618);
  if (v621 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v621)
  {
    goto LABEL_314;
  }
  v1442 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1442 + 16, ".dcb.s");
  *(_QWORD *)v1442 = 6;
  *((_DWORD *)v1442 + 2) = 0;
  *(_QWORD *)(v619 + 8 * v620) = v1442;
  ++*(_DWORD *)(a1 + 828);
  v1443 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v620));
  v621 = *v1443;
  if (*v1443)
    v1444 = v621 == -8;
  else
    v1444 = 1;
  if (v1444)
  {
    do
    {
      v1445 = v1443[1];
      ++v1443;
      v621 = v1445;
      if (v1445)
        v1446 = v621 == -8;
      else
        v1446 = 1;
    }
    while (v1446);
  }
LABEL_314:
  *(_DWORD *)(v621 + 8) = 30;
  v622 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dcb.w", (const unsigned __int8 *)6);
  v623 = *v29;
  v624 = v622;
  v625 = *(_QWORD *)(*v29 + 8 * v622);
  if (v625 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v625)
  {
    goto LABEL_316;
  }
  v1447 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1447 + 16, ".dcb.w");
  *(_QWORD *)v1447 = 6;
  *((_DWORD *)v1447 + 2) = 0;
  *(_QWORD *)(v623 + 8 * v624) = v1447;
  ++*(_DWORD *)(a1 + 828);
  v1448 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v624));
  v625 = *v1448;
  if (*v1448)
    v1449 = v625 == -8;
  else
    v1449 = 1;
  if (v1449)
  {
    do
    {
      v1450 = v1448[1];
      ++v1448;
      v625 = v1450;
      if (v1450)
        v1451 = v625 == -8;
      else
        v1451 = 1;
    }
    while (v1451);
  }
LABEL_316:
  *(_DWORD *)(v625 + 8) = 31;
  v626 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".dcb.x", (const unsigned __int8 *)6);
  v627 = *v29;
  v628 = v626;
  v629 = *(_QWORD *)(*v29 + 8 * v626);
  if (v629 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v629)
  {
    goto LABEL_318;
  }
  v1452 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1452 + 16, ".dcb.x");
  *(_QWORD *)v1452 = 6;
  *((_DWORD *)v1452 + 2) = 0;
  *(_QWORD *)(v627 + 8 * v628) = v1452;
  ++*(_DWORD *)(a1 + 828);
  v1453 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v628));
  v629 = *v1453;
  if (*v1453)
    v1454 = v629 == -8;
  else
    v1454 = 1;
  if (v1454)
  {
    do
    {
      v1455 = v1453[1];
      ++v1453;
      v629 = v1455;
      if (v1455)
        v1456 = v629 == -8;
      else
        v1456 = 1;
    }
    while (v1456);
  }
LABEL_318:
  *(_DWORD *)(v629 + 8) = 32;
  v630 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ds", (const unsigned __int8 *)3);
  v631 = *v29;
  v632 = v630;
  v633 = *(_QWORD *)(*v29 + 8 * v630);
  if (v633 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v633)
  {
    goto LABEL_320;
  }
  v1457 = llvm::allocate_buffer(0x14uLL, (std::align_val_t)8uLL);
  v1457[4] = 7562286;
  *(_QWORD *)v1457 = 3;
  v1457[2] = 0;
  *(_QWORD *)(v631 + 8 * v632) = v1457;
  ++*(_DWORD *)(a1 + 828);
  v1458 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v632));
  v633 = *v1458;
  if (*v1458)
    v1459 = v633 == -8;
  else
    v1459 = 1;
  if (v1459)
  {
    do
    {
      v1460 = v1458[1];
      ++v1458;
      v633 = v1460;
      if (v1460)
        v1461 = v633 == -8;
      else
        v1461 = 1;
    }
    while (v1461);
  }
LABEL_320:
  *(_DWORD *)(v633 + 8) = 33;
  v634 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ds.b", (const unsigned __int8 *)5);
  v635 = *v29;
  v636 = v634;
  v637 = *(_QWORD *)(*v29 + 8 * v634);
  if (v637 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v637)
  {
    goto LABEL_322;
  }
  v1462 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1462 + 16, ".ds.b");
  *(_QWORD *)v1462 = 5;
  *((_DWORD *)v1462 + 2) = 0;
  *(_QWORD *)(v635 + 8 * v636) = v1462;
  ++*(_DWORD *)(a1 + 828);
  v1463 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v636));
  v637 = *v1463;
  if (*v1463)
    v1464 = v637 == -8;
  else
    v1464 = 1;
  if (v1464)
  {
    do
    {
      v1465 = v1463[1];
      ++v1463;
      v637 = v1465;
      if (v1465)
        v1466 = v637 == -8;
      else
        v1466 = 1;
    }
    while (v1466);
  }
LABEL_322:
  *(_DWORD *)(v637 + 8) = 34;
  v638 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ds.d", (const unsigned __int8 *)5);
  v639 = *v29;
  v640 = v638;
  v641 = *(_QWORD *)(*v29 + 8 * v638);
  if (v641 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v641)
  {
    goto LABEL_324;
  }
  v1467 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1467 + 16, ".ds.d");
  *(_QWORD *)v1467 = 5;
  *((_DWORD *)v1467 + 2) = 0;
  *(_QWORD *)(v639 + 8 * v640) = v1467;
  ++*(_DWORD *)(a1 + 828);
  v1468 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v640));
  v641 = *v1468;
  if (*v1468)
    v1469 = v641 == -8;
  else
    v1469 = 1;
  if (v1469)
  {
    do
    {
      v1470 = v1468[1];
      ++v1468;
      v641 = v1470;
      if (v1470)
        v1471 = v641 == -8;
      else
        v1471 = 1;
    }
    while (v1471);
  }
LABEL_324:
  *(_DWORD *)(v641 + 8) = 35;
  v642 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ds.l", (const unsigned __int8 *)5);
  v643 = *v29;
  v644 = v642;
  v645 = *(_QWORD *)(*v29 + 8 * v642);
  if (v645 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v645)
  {
    goto LABEL_326;
  }
  v1472 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1472 + 16, ".ds.l");
  *(_QWORD *)v1472 = 5;
  *((_DWORD *)v1472 + 2) = 0;
  *(_QWORD *)(v643 + 8 * v644) = v1472;
  ++*(_DWORD *)(a1 + 828);
  v1473 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v644));
  v645 = *v1473;
  if (*v1473)
    v1474 = v645 == -8;
  else
    v1474 = 1;
  if (v1474)
  {
    do
    {
      v1475 = v1473[1];
      ++v1473;
      v645 = v1475;
      if (v1475)
        v1476 = v645 == -8;
      else
        v1476 = 1;
    }
    while (v1476);
  }
LABEL_326:
  *(_DWORD *)(v645 + 8) = 36;
  v646 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ds.p", (const unsigned __int8 *)5);
  v647 = *v29;
  v648 = v646;
  v649 = *(_QWORD *)(*v29 + 8 * v646);
  if (v649 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v649)
  {
    goto LABEL_328;
  }
  v1477 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1477 + 16, ".ds.p");
  *(_QWORD *)v1477 = 5;
  *((_DWORD *)v1477 + 2) = 0;
  *(_QWORD *)(v647 + 8 * v648) = v1477;
  ++*(_DWORD *)(a1 + 828);
  v1478 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v648));
  v649 = *v1478;
  if (*v1478)
    v1479 = v649 == -8;
  else
    v1479 = 1;
  if (v1479)
  {
    do
    {
      v1480 = v1478[1];
      ++v1478;
      v649 = v1480;
      if (v1480)
        v1481 = v649 == -8;
      else
        v1481 = 1;
    }
    while (v1481);
  }
LABEL_328:
  *(_DWORD *)(v649 + 8) = 37;
  v650 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ds.s", (const unsigned __int8 *)5);
  v651 = *v29;
  v652 = v650;
  v653 = *(_QWORD *)(*v29 + 8 * v650);
  if (v653 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v653)
  {
    goto LABEL_330;
  }
  v1482 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1482 + 16, ".ds.s");
  *(_QWORD *)v1482 = 5;
  *((_DWORD *)v1482 + 2) = 0;
  *(_QWORD *)(v651 + 8 * v652) = v1482;
  ++*(_DWORD *)(a1 + 828);
  v1483 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v652));
  v653 = *v1483;
  if (*v1483)
    v1484 = v653 == -8;
  else
    v1484 = 1;
  if (v1484)
  {
    do
    {
      v1485 = v1483[1];
      ++v1483;
      v653 = v1485;
      if (v1485)
        v1486 = v653 == -8;
      else
        v1486 = 1;
    }
    while (v1486);
  }
LABEL_330:
  *(_DWORD *)(v653 + 8) = 38;
  v654 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ds.w", (const unsigned __int8 *)5);
  v655 = *v29;
  v656 = v654;
  v657 = *(_QWORD *)(*v29 + 8 * v654);
  if (v657 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v657)
  {
    goto LABEL_332;
  }
  v1487 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1487 + 16, ".ds.w");
  *(_QWORD *)v1487 = 5;
  *((_DWORD *)v1487 + 2) = 0;
  *(_QWORD *)(v655 + 8 * v656) = v1487;
  ++*(_DWORD *)(a1 + 828);
  v1488 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v656));
  v657 = *v1488;
  if (*v1488)
    v1489 = v657 == -8;
  else
    v1489 = 1;
  if (v1489)
  {
    do
    {
      v1490 = v1488[1];
      ++v1488;
      v657 = v1490;
      if (v1490)
        v1491 = v657 == -8;
      else
        v1491 = 1;
    }
    while (v1491);
  }
LABEL_332:
  *(_DWORD *)(v657 + 8) = 39;
  v658 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".ds.x", (const unsigned __int8 *)5);
  v659 = *v29;
  v660 = v658;
  v661 = *(_QWORD *)(*v29 + 8 * v658);
  if (v661 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v661)
  {
    goto LABEL_334;
  }
  v1492 = (char *)llvm::allocate_buffer(0x16uLL, (std::align_val_t)8uLL);
  strcpy(v1492 + 16, ".ds.x");
  *(_QWORD *)v1492 = 5;
  *((_DWORD *)v1492 + 2) = 0;
  *(_QWORD *)(v659 + 8 * v660) = v1492;
  ++*(_DWORD *)(a1 + 828);
  v1493 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v660));
  v661 = *v1493;
  if (*v1493)
    v1494 = v661 == -8;
  else
    v1494 = 1;
  if (v1494)
  {
    do
    {
      v1495 = v1493[1];
      ++v1493;
      v661 = v1495;
      if (v1495)
        v1496 = v661 == -8;
      else
        v1496 = 1;
    }
    while (v1496);
  }
LABEL_334:
  *(_DWORD *)(v661 + 8) = 40;
  v662 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".print", (const unsigned __int8 *)6);
  v663 = *v29;
  v664 = v662;
  v665 = *(_QWORD *)(*v29 + 8 * v662);
  if (v665 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v665)
  {
    goto LABEL_336;
  }
  v1497 = (char *)llvm::allocate_buffer(0x17uLL, (std::align_val_t)8uLL);
  strcpy(v1497 + 16, ".print");
  *(_QWORD *)v1497 = 6;
  *((_DWORD *)v1497 + 2) = 0;
  *(_QWORD *)(v663 + 8 * v664) = v1497;
  ++*(_DWORD *)(a1 + 828);
  v1498 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v664));
  v665 = *v1498;
  if (*v1498)
    v1499 = v665 == -8;
  else
    v1499 = 1;
  if (v1499)
  {
    do
    {
      v1500 = v1498[1];
      ++v1498;
      v665 = v1500;
      if (v1500)
        v1501 = v665 == -8;
      else
        v1501 = 1;
    }
    while (v1501);
  }
LABEL_336:
  *(_DWORD *)(v665 + 8) = 156;
  v666 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".addrsig", (const unsigned __int8 *)8);
  v667 = *v29;
  v668 = v666;
  v669 = *(_QWORD *)(*v29 + 8 * v666);
  if (v669 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v669)
  {
    goto LABEL_338;
  }
  v1502 = (char *)llvm::allocate_buffer(0x19uLL, (std::align_val_t)8uLL);
  strcpy(v1502 + 16, ".addrsig");
  *(_QWORD *)v1502 = 8;
  *((_DWORD *)v1502 + 2) = 0;
  *(_QWORD *)(v667 + 8 * v668) = v1502;
  ++*(_DWORD *)(a1 + 828);
  v1503 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v668));
  v669 = *v1503;
  if (*v1503)
    v1504 = v669 == -8;
  else
    v1504 = 1;
  if (v1504)
  {
    do
    {
      v1505 = v1503[1];
      ++v1503;
      v669 = v1505;
      if (v1505)
        v1506 = v669 == -8;
      else
        v1506 = 1;
    }
    while (v1506);
  }
LABEL_338:
  *(_DWORD *)(v669 + 8) = 157;
  v670 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".addrsig_sym", (const unsigned __int8 *)0xC);
  v671 = *v29;
  v672 = v670;
  v673 = *(_QWORD *)(*v29 + 8 * v670);
  if (v673 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v673)
  {
    goto LABEL_340;
  }
  v1507 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v1507 + 16, ".addrsig_sym");
  *(_QWORD *)v1507 = 12;
  *((_DWORD *)v1507 + 2) = 0;
  *(_QWORD *)(v671 + 8 * v672) = v1507;
  ++*(_DWORD *)(a1 + 828);
  v1508 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v672));
  v673 = *v1508;
  if (*v1508)
    v1509 = v673 == -8;
  else
    v1509 = 1;
  if (v1509)
  {
    do
    {
      v1510 = v1508[1];
      ++v1508;
      v673 = v1510;
      if (v1510)
        v1511 = v673 == -8;
      else
        v1511 = 1;
    }
    while (v1511);
  }
LABEL_340:
  *(_DWORD *)(v673 + 8) = 158;
  v674 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".pseudoprobe", (const unsigned __int8 *)0xC);
  v675 = *v29;
  v676 = v674;
  v677 = *(_QWORD *)(*v29 + 8 * v674);
  if (v677 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v677)
  {
    goto LABEL_342;
  }
  v1512 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v1512 + 16, ".pseudoprobe");
  *(_QWORD *)v1512 = 12;
  *((_DWORD *)v1512 + 2) = 0;
  *(_QWORD *)(v675 + 8 * v676) = v1512;
  ++*(_DWORD *)(a1 + 828);
  v1513 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v676));
  v677 = *v1513;
  if (*v1513)
    v1514 = v677 == -8;
  else
    v1514 = 1;
  if (v1514)
  {
    do
    {
      v1515 = v1513[1];
      ++v1513;
      v677 = v1515;
      if (v1515)
        v1516 = v677 == -8;
      else
        v1516 = 1;
    }
    while (v1516);
  }
LABEL_342:
  *(_DWORD *)(v677 + 8) = 159;
  v678 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".lto_discard", (const unsigned __int8 *)0xC);
  v679 = *v29;
  v680 = v678;
  v681 = *(_QWORD *)(*v29 + 8 * v678);
  if (v681 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v681)
  {
    goto LABEL_344;
  }
  v1517 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v1517 + 16, ".lto_discard");
  *(_QWORD *)v1517 = 12;
  *((_DWORD *)v1517 + 2) = 0;
  *(_QWORD *)(v679 + 8 * v680) = v1517;
  ++*(_DWORD *)(a1 + 828);
  v1518 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v680));
  v681 = *v1518;
  if (*v1518)
    v1519 = v681 == -8;
  else
    v1519 = 1;
  if (v1519)
  {
    do
    {
      v1520 = v1518[1];
      ++v1518;
      v681 = v1520;
      if (v1520)
        v1521 = v681 == -8;
      else
        v1521 = 1;
    }
    while (v1521);
  }
LABEL_344:
  *(_DWORD *)(v681 + 8) = 160;
  v682 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".lto_set_conditional", (const unsigned __int8 *)0x14);
  v683 = *v29;
  v684 = v682;
  v685 = *(_QWORD *)(*v29 + 8 * v682);
  if (v685 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v685)
  {
    goto LABEL_346;
  }
  v1522 = (char *)llvm::allocate_buffer(0x25uLL, (std::align_val_t)8uLL);
  strcpy(v1522 + 16, ".lto_set_conditional");
  *(_QWORD *)v1522 = 20;
  *((_DWORD *)v1522 + 2) = 0;
  *(_QWORD *)(v683 + 8 * v684) = v1522;
  ++*(_DWORD *)(a1 + 828);
  v1523 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v684));
  v685 = *v1523;
  if (*v1523)
    v1524 = v685 == -8;
  else
    v1524 = 1;
  if (v1524)
  {
    do
    {
      v1525 = v1523[1];
      ++v1523;
      v685 = v1525;
      if (v1525)
        v1526 = v685 == -8;
      else
        v1526 = 1;
    }
    while (v1526);
  }
LABEL_346:
  *(_DWORD *)(v685 + 8) = 161;
  v686 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 816), (int8x16_t *)".memtag", (const unsigned __int8 *)7);
  v687 = *v29;
  v688 = v686;
  v689 = *(_QWORD *)(*v29 + 8 * v686);
  if (v689 == -8)
  {
    --*(_DWORD *)(a1 + 832);
  }
  else if (v689)
  {
    goto LABEL_348;
  }
  v1527 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v1527 + 16, ".memtag");
  *(_QWORD *)v1527 = 7;
  *((_DWORD *)v1527 + 2) = 0;
  *(_QWORD *)(v687 + 8 * v688) = v1527;
  ++*(_DWORD *)(a1 + 828);
  v1528 = (uint64_t *)(*(_QWORD *)(a1 + 816)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 816), v688));
  v689 = *v1528;
  if (*v1528)
    v1529 = v689 == -8;
  else
    v1529 = 1;
  if (v1529)
  {
    do
    {
      v1530 = v1528[1];
      ++v1528;
      v689 = v1530;
      if (v1530)
        v1531 = v689 == -8;
      else
        v1531 = 1;
    }
    while (v1531);
  }
LABEL_348:
  *(_DWORD *)(v689 + 8) = 163;
  v690 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 840), (int8x16_t *)"reg", (const unsigned __int8 *)3);
  v691 = *v16;
  v692 = v690;
  v693 = *(_QWORD *)(*v16 + 8 * v690);
  if (v693 == -8)
  {
    --*(_DWORD *)(a1 + 856);
  }
  else if (v693)
  {
    goto LABEL_350;
  }
  v1532 = llvm::allocate_buffer(0x14uLL, (std::align_val_t)8uLL);
  v1532[4] = 6776178;
  *(_QWORD *)v1532 = 3;
  v1532[2] = 0;
  *(_QWORD *)(v691 + 8 * v692) = v1532;
  ++*(_DWORD *)(a1 + 852);
  v1533 = (uint64_t *)(*(_QWORD *)(a1 + 840)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 840), v692));
  v693 = *v1533;
  if (*v1533)
    v1534 = v693 == -8;
  else
    v1534 = 1;
  if (v1534)
  {
    do
    {
      v1535 = v1533[1];
      ++v1533;
      v693 = v1535;
      if (v1535)
        v1536 = v693 == -8;
      else
        v1536 = 1;
    }
    while (v1536);
  }
LABEL_350:
  *(_DWORD *)(v693 + 8) = 1;
  v694 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 840), (int8x16_t *)"frame_ptr_rel", (const unsigned __int8 *)0xD);
  v695 = *v16;
  v696 = v694;
  v697 = *(_QWORD *)(*v16 + 8 * v694);
  if (v697 == -8)
  {
    --*(_DWORD *)(a1 + 856);
  }
  else if (v697)
  {
    goto LABEL_352;
  }
  v1537 = (char *)llvm::allocate_buffer(0x1EuLL, (std::align_val_t)8uLL);
  strcpy(v1537 + 16, "frame_ptr_rel");
  *(_QWORD *)v1537 = 13;
  *((_DWORD *)v1537 + 2) = 0;
  *(_QWORD *)(v695 + 8 * v696) = v1537;
  ++*(_DWORD *)(a1 + 852);
  v1538 = (uint64_t *)(*(_QWORD *)(a1 + 840)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 840), v696));
  v697 = *v1538;
  if (*v1538)
    v1539 = v697 == -8;
  else
    v1539 = 1;
  if (v1539)
  {
    do
    {
      v1540 = v1538[1];
      ++v1538;
      v697 = v1540;
      if (v1540)
        v1541 = v697 == -8;
      else
        v1541 = 1;
    }
    while (v1541);
  }
LABEL_352:
  *(_DWORD *)(v697 + 8) = 2;
  v698 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 840), (int8x16_t *)"subfield_reg", (const unsigned __int8 *)0xC);
  v699 = *v16;
  v700 = v698;
  v701 = *(_QWORD *)(*v16 + 8 * v698);
  if (v701 == -8)
  {
    --*(_DWORD *)(a1 + 856);
  }
  else if (v701)
  {
    goto LABEL_354;
  }
  v1542 = (char *)llvm::allocate_buffer(0x1DuLL, (std::align_val_t)8uLL);
  strcpy(v1542 + 16, "subfield_reg");
  *(_QWORD *)v1542 = 12;
  *((_DWORD *)v1542 + 2) = 0;
  *(_QWORD *)(v699 + 8 * v700) = v1542;
  ++*(_DWORD *)(a1 + 852);
  v1543 = (uint64_t *)(*(_QWORD *)(a1 + 840)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 840), v700));
  v701 = *v1543;
  if (*v1543)
    v1544 = v701 == -8;
  else
    v1544 = 1;
  if (v1544)
  {
    do
    {
      v1545 = v1543[1];
      ++v1543;
      v701 = v1545;
      if (v1545)
        v1546 = v701 == -8;
      else
        v1546 = 1;
    }
    while (v1546);
  }
LABEL_354:
  *(_DWORD *)(v701 + 8) = 3;
  v702 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)(a1 + 840), (int8x16_t *)"reg_rel", (const unsigned __int8 *)7);
  v703 = *v16;
  v704 = v702;
  v705 = *(_QWORD *)(*v16 + 8 * v702);
  if (v705 == -8)
  {
    --*(_DWORD *)(a1 + 856);
  }
  else if (v705)
  {
    goto LABEL_356;
  }
  v1547 = (char *)llvm::allocate_buffer(0x18uLL, (std::align_val_t)8uLL);
  strcpy(v1547 + 16, "reg_rel");
  *(_QWORD *)v1547 = 7;
  *((_DWORD *)v1547 + 2) = 0;
  *(_QWORD *)(v703 + 8 * v704) = v1547;
  ++*(_DWORD *)(a1 + 852);
  v1548 = (uint64_t *)(*(_QWORD *)(a1 + 840)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 840), v704));
  v705 = *v1548;
  if (*v1548)
    v1549 = v705 == -8;
  else
    v1549 = 1;
  if (v1549)
  {
    do
    {
      v1550 = v1548[1];
      ++v1548;
      v705 = v1550;
      if (v1550)
        v1551 = v705 == -8;
      else
        v1551 = 1;
    }
    while (v1551);
  }
LABEL_356:
  *(_DWORD *)(v705 + 8) = 4;
  *(_DWORD *)(a1 + 436) = 0;
  return a1;
}

uint64_t `anonymous namespace'::AsmParser::getLexer(_anonymous_namespace_::AsmParser *this)
{
  return (uint64_t)this + 40;
}

void `anonymous namespace'::HLASMAsmParser::~HLASMAsmParser(_anonymous_namespace_::HLASMAsmParser *this)
{
  *(_BYTE *)(*((_QWORD *)this + 108) + 104) = 1;
}

{
  void *v1;

  *(_BYTE *)(*((_QWORD *)this + 108) + 104) = 1;
  operator delete(v1);
}

uint64_t *`anonymous namespace'::AsmParser::addDirectiveHandler(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v8;

  result = llvm::StringMap<std::pair<llvm::MCAsmParserExtension *,BOOL (*)(llvm::MCAsmParserExtension *,llvm::StringRef,llvm::SMLoc)>,llvm::MallocAllocator>::try_emplace<>(a1 + 336, a2, a3);
  v8 = *result;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 16) = a5;
  return result;
}

void `anonymous namespace'::AsmParser::addAliasForDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void **v6;
  const unsigned __int8 *v7;
  int v8;
  void **v9;
  const unsigned __int8 *v10;
  void *__p[2];
  unsigned __int8 v12;
  void *v13[2];
  unsigned __int8 v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v16[0] = a2;
  v16[1] = a3;
  v15[0] = a4;
  v15[1] = a5;
  v5 = a1 + 816;
  llvm::StringRef::lower(v15, (uint64_t)v13);
  if ((v14 & 0x80u) == 0)
    v6 = v13;
  else
    v6 = (void **)v13[0];
  if ((v14 & 0x80u) == 0)
    v7 = (const unsigned __int8 *)v14;
  else
    v7 = (const unsigned __int8 *)v13[1];
  llvm::StringRef::lower(v16, (uint64_t)__p);
  if ((v12 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v10 = (const unsigned __int8 *)v12;
  else
    v10 = (const unsigned __int8 *)__p[1];
  if (((char)v12 & 0x80000000) == 0)
  {
    if (((char)v14 & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v13[0]);
    return;
  }
  operator delete(__p[0]);
  if ((char)v14 < 0)
    goto LABEL_17;
}

uint64_t `anonymous namespace'::AsmParser::getSourceManager(_anonymous_namespace_::AsmParser *this)
{
  return *((_QWORD *)this + 30);
}

uint64_t `anonymous namespace'::AsmParser::getContext(_anonymous_namespace_::AsmParser *this)
{
  return *((_QWORD *)this + 27);
}

uint64_t `anonymous namespace'::AsmParser::getStreamer(_anonymous_namespace_::AsmParser *this)
{
  return *((_QWORD *)this + 28);
}

uint64_t `anonymous namespace'::AsmParser::getAssemblerDialect(_anonymous_namespace_::AsmParser *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 202);
  if ((_DWORD)result == -1)
    return *(unsigned int *)(*((_QWORD *)this + 29) + 176);
  return result;
}

uint64_t `anonymous namespace'::AsmParser::setAssemblerDialect(uint64_t this, int a2)
{
  *(_DWORD *)(this + 808) = a2;
  return this;
}

BOOL `anonymous namespace'::AsmParser::Run(_anonymous_namespace_::AsmParser *this, char a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t STI;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  llvm::MCContext *v12;
  uint64_t TempSymbol;
  uint64_t v14;
  int64x2_t *v15;
  const char *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  int v54;
  BOOL v55;
  BOOL v56;
  mlir::Token *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  void *AssociatedFragment;
  mlir::Token *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  void *v92;
  char v94;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  void *v101;
  uint64_t v102;
  _QWORD v103[2];
  __int16 v104;
  int v105;
  char v106;
  _QWORD *v107;
  _QWORD v108[2];
  _QWORD v109[66];

  v109[64] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 186) = 0;
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)this + 784, *((_QWORD **)this + 99));
  *((_QWORD *)this + 98) = (char *)this + 792;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 99) = 0;
  if ((a2 & 1) == 0)
  {
    v6 = *((_QWORD *)this + 28);
    STI = llvm::MCTargetAsmParser::getSTI(*((llvm::MCTargetAsmParser **)this + 1));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 176))(v6, 0, STI);
  }
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  *((_BYTE *)this + 32) = 0;
  v8 = *((_DWORD *)this + 75);
  v94 = *((_BYTE *)this + 305);
  v108[0] = v109;
  v108[1] = 0x400000000;
  if (*(_BYTE *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this) + 1593))
  {
    v9 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    v10 = *(unsigned int *)(v9 + 152);
    if ((_DWORD)v10)
    {
      v11 = *(const char **)(*(_QWORD *)(v9 + 144) + 32 * v10 - 32);
      if (*((_QWORD *)v11 + 1))
        goto LABEL_7;
    }
    else
    {
      v11 = 0;
      if (MEMORY[8])
      {
LABEL_7:
        v15 = (int64x2_t *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
        v96 = v11;
        llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v15 + 100, (uint64_t *)&v96, (uint64_t)&v101);
        if (LOBYTE(v103[0]))
        {
          v16 = v96;
          v17 = v15[102].u32[0];
          if (v17 >= v15[102].i32[1])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15[101].i64[1], &v15[102].u64[1], v17 + 1, 8);
            LODWORD(v17) = v15[102].i32[0];
          }
          *(_QWORD *)(v15[101].i64[1] + 8 * v17) = v16;
          ++v15[102].i32[0];
        }
        goto LABEL_11;
      }
    }
    v12 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
    TempSymbol = llvm::MCContext::createTempSymbol(v12);
    v14 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 192))(v14, TempSymbol, 0);
    *((_QWORD *)v11 + 1) = TempSymbol;
    goto LABEL_7;
  }
LABEL_11:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
  if (**((_DWORD **)this + 6))
  {
    while (1)
    {
      v101 = v103;
      v102 = 0x800000000;
      v105 = -1;
      v106 = 0;
      v107 = v108;
      v18 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void **, _QWORD))(*(_QWORD *)this + 280))(this, &v101, 0);
      v19 = *((_DWORD *)this + 6);
      if (!v18)
        break;
      if (v19
        || **((_DWORD **)this + 6) == 1
        && ((*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this),
            (v19 = *((_DWORD *)this + 6)) != 0))
      {
        v20 = (uint64_t *)*((_QWORD *)this + 2);
        v3 = (uint64_t)&v20[14 * v19];
        do
        {
          v21 = *v20;
          v100 = 261;
          v96 = (const char *)v20[1];
          v97 = v20[2];
          (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, const char **, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, v21, &v96, v20[12], v20[13]);
          v20 += 14;
        }
        while (v20 != (uint64_t *)v3);
        v22 = *((unsigned int *)this + 6);
        if ((_DWORD)v22)
        {
          v23 = *((_QWORD *)this + 2);
          v3 = 112 * v22;
          do
          {
            v24 = *(void **)(v23 + v3 - 104);
            if ((void *)(v23 + v3 - 80) != v24)
              free(v24);
            v3 -= 112;
          }
          while (v3);
        }
      }
      *((_DWORD *)this + 6) = 0;
      if (*(_BYTE *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                    + 107))
      {
        v30 = v101;
        v31 = v102;
        if ((_DWORD)v102)
          goto LABEL_37;
      }
      else
      {
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 224))(this);
        v30 = v101;
        v31 = v102;
        if ((_DWORD)v102)
          goto LABEL_37;
      }
LABEL_42:
      if (v30 != v103)
        free(v30);
      if (!**((_DWORD **)this + 6))
        goto LABEL_46;
    }
    if (v19)
    {
      v25 = (uint64_t *)*((_QWORD *)this + 2);
      v3 = (uint64_t)&v25[14 * v19];
      do
      {
        v26 = *v25;
        v100 = 261;
        v96 = (const char *)v25[1];
        v97 = v25[2];
        (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, const char **, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, v26, &v96, v25[12], v25[13]);
        v25 += 14;
      }
      while (v25 != (uint64_t *)v3);
      v27 = *((unsigned int *)this + 6);
      if ((_DWORD)v27)
      {
        v28 = *((_QWORD *)this + 2);
        v3 = 112 * v27;
        do
        {
          v29 = *(void **)(v28 + v3 - 104);
          if ((void *)(v28 + v3 - 80) != v29)
            free(v29);
          v3 -= 112;
        }
        while (v3);
      }
    }
    *((_DWORD *)this + 6) = 0;
    v30 = v101;
    v31 = v102;
    if (!(_DWORD)v102)
      goto LABEL_42;
LABEL_37:
    v32 = 8 * v31;
    v3 = (uint64_t)(v30 - 1);
    do
    {
      v33 = *(_QWORD *)(v3 + v32);
      *(_QWORD *)(v3 + v32) = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v32 -= 8;
    }
    while (v32);
    v30 = v101;
    goto LABEL_42;
  }
LABEL_46:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1));
  v34 = *((_DWORD *)this + 6);
  if (v34)
  {
    v35 = (uint64_t *)*((_QWORD *)this + 2);
    v36 = &v35[14 * v34];
    v3 = 261;
    do
    {
      v37 = *v35;
      v104 = 261;
      v101 = (void *)v35[1];
      v102 = v35[2];
      (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, v37, &v101, v35[12], v35[13]);
      v35 += 14;
    }
    while (v35 != v36);
    v38 = *((unsigned int *)this + 6);
    if ((_DWORD)v38)
    {
      v39 = *((_QWORD *)this + 2);
      v40 = 112 * v38;
      do
      {
        v41 = *(void **)(v39 + v40 - 104);
        if ((void *)(v39 + v40 - 80) != v41)
          free(v41);
        v40 -= 112;
      }
      while (v40);
    }
  }
  *((_DWORD *)this + 6) = 0;
  v42 = *((_QWORD *)this + 1);
  v43 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 184))(v42, v43);
  if (*((_DWORD *)this + 75) != v8 || *((_BYTE *)this + 305) != (v94 & 1))
  {
    Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
    Loc = mlir::Token::getLoc(Tok);
    v101 = "unmatched .ifs or .elses";
    v104 = 259;
    (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 176))(this, Loc, &v101, 0, 0);
  }
  v46 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  if (*(_QWORD *)(v46 + 1568))
  {
    v47 = *(_QWORD *)(v46 + 1552);
    v48 = *(unsigned int *)(v47 + 144);
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = 72 * v48;
      v51 = *(_QWORD *)(v47 + 136) + 23;
      v52 = (char *)v51;
      do
      {
        v54 = *v52;
        v52 += 72;
        v53 = v54;
        if (v54 < 0)
        {
          if (*(_QWORD *)(v51 - 15))
            v56 = 1;
          else
            v56 = (_DWORD)v49 == 0;
          if (v56)
            goto LABEL_60;
        }
        else
        {
          if (v53)
            v55 = 1;
          else
            v55 = (_DWORD)v49 == 0;
          if (v55)
            goto LABEL_60;
        }
        v57 = (mlir::Token *)llvm::MCAsmParser::getTok(this);
        v58 = mlir::Token::getLoc(v57);
        v3 = v49 + (v3 & 0xFFFFFFFF00000000);
        v96 = "unassigned file number: ";
        v98 = v3;
        v100 = 2307;
        v101 = &v96;
        v103[0] = " for .file directives";
        v104 = 770;
        (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)this + 176))(this, v58, &v101, 0, 0);
LABEL_60:
        ++v49;
        v51 = (uint64_t)v52;
        v50 -= 72;
      }
      while (v50);
    }
  }
  if ((a3 & 1) != 0)
    goto LABEL_116;
  if (*(_BYTE *)(*((_QWORD *)this + 29) + 18))
  {
    v59 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
    v60 = *(uint64_t **)(v59 + 1144);
    v61 = *(unsigned int *)(v59 + 1152);
    if ((_DWORD)v61)
    {
      v62 = *(uint64_t **)(v59 + 1144);
      if (*v60)
        v63 = *v60 == -8;
      else
        v63 = 1;
      if (v63)
      {
        do
        {
          v65 = v62[1];
          ++v62;
          v64 = v65;
          if (v65)
            v66 = v64 == -8;
          else
            v66 = 1;
        }
        while (v66);
      }
      v67 = &v60[v61];
      if (v62 == v67)
        goto LABEL_104;
      goto LABEL_89;
    }
    v62 = *(uint64_t **)(v59 + 1144);
    v67 = &v60[v61];
    if (v60 != v67)
    {
LABEL_89:
      v68 = *v62;
      do
      {
        v69 = *(_QWORD *)(v68 + 8);
        v70 = *(_DWORD *)(v69 + 8);
        if ((v70 & 2) != 0 && (*(_DWORD *)(v69 + 8) & 0x7000) != 0x2000 && !*(_QWORD *)v69)
        {
          if ((*(_DWORD *)(v69 + 8) & 0x7080) != 0x2000
            || (*(_DWORD *)(v69 + 8) = v70 | 8,
                AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v69 + 24)),
                (*(_QWORD *)v69 = AssociatedFragment) == 0))
          {
            v72 = (mlir::Token *)llvm::MCAsmParser::getTok(this);
            v73 = mlir::Token::getLoc(v72);
            if ((*(_BYTE *)(v69 + 8) & 1) != 0)
            {
              v76 = *(uint64_t **)(v69 - 8);
              v77 = *v76;
              v74 = v76 + 2;
              v75 = v77;
            }
            else
            {
              v74 = 0;
              v75 = 0;
            }
            v100 = 1283;
            v96 = "assembler local symbol '";
            v98 = (uint64_t)v74;
            v99 = v75;
            v101 = &v96;
            v103[0] = "' not defined";
            v104 = 770;
            (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)this + 176))(this, v73, &v101, 0, 0);
          }
        }
        do
        {
          v78 = v62[1];
          ++v62;
          v68 = v78;
          if (v78)
            v79 = v68 == -8;
          else
            v79 = 1;
        }
        while (v79);
      }
      while (v62 != v67);
    }
  }
LABEL_104:
  v80 = *((unsigned int *)this + 126);
  if ((_DWORD)v80)
  {
    v81 = (uint64_t *)*((_QWORD *)this + 62);
    v82 = 56 * v80;
    do
    {
      v86 = v81[6];
      if (!*(_QWORD *)v86)
      {
        if ((*(_DWORD *)(v86 + 8) & 0x7080) != 0x2000
          || (*(_DWORD *)(v86 + 8) |= 8u,
              v87 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v86 + 24)),
              (*(_QWORD *)v86 = v87) == 0))
        {
          v83 = *(_OWORD *)(v81 + 1);
          v84 = *(_OWORD *)(v81 + 3);
          *((_DWORD *)this + 118) = *((_DWORD *)v81 + 10);
          *(_OWORD *)((char *)this + 440) = v83;
          *(_OWORD *)((char *)this + 456) = v84;
          v85 = *v81;
          v101 = "directional label undefined";
          v104 = 259;
          (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)this + 176))(this, v85, &v101, 0, 0);
        }
      }
      v81 += 7;
      v82 -= 56;
    }
    while (v82);
  }
  if (*((_BYTE *)this + 32))
    goto LABEL_117;
  v88 = (_QWORD *)*((_QWORD *)this + 28);
  v89 = v88[2];
  if (v89)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 72))(v89);
    v88 = (_QWORD *)*((_QWORD *)this + 28);
  }
  v90 = llvm::MCAsmLexer::getLoc((_anonymous_namespace_::AsmParser *)((char *)this + 40));
  llvm::MCStreamer::finish(v88, v90);
LABEL_116:
  if (!*((_BYTE *)this + 32))
  {
    v91 = *(_BYTE *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this)
                   + 2056) != 0;
    v92 = (void *)v108[0];
    if ((_QWORD *)v108[0] == v109)
      return v91;
    goto LABEL_118;
  }
LABEL_117:
  v91 = 1;
  v92 = (void *)v108[0];
  if ((_QWORD *)v108[0] != v109)
LABEL_118:
    free(v92);
  return v91;
}

uint64_t `anonymous namespace'::AsmParser::setParsingMSInlineAsm(uint64_t this, char a2)
{
  *(_BYTE *)(this + 813) = a2;
  *(_BYTE *)(this + 149) = a2;
  return this;
}

uint64_t `anonymous namespace'::AsmParser::isParsingMSInlineAsm(_anonymous_namespace_::AsmParser *this)
{
  return *((unsigned __int8 *)this + 813);
}

BOOL `anonymous namespace'::AsmParser::discardLTOSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::contains(a1 + 736, (uint64_t)v4);
}

uint64_t llvm::MCAsmParser::isParsingMasm(llvm::MCAsmParser *this)
{
  return 0;
}

uint64_t llvm::MCAsmParser::defineMacro()
{
  return 1;
}

uint64_t llvm::MCAsmParser::lookUpField()
{
  return 1;
}

{
  return 1;
}

uint64_t llvm::MCAsmParser::lookUpType()
{
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseMSInlineAsm(uint64_t a1, std::string *a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  std::string::value_type *v15;
  std::string::size_type Loc;
  int v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint16x4_t *v21;
  int v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  const char *v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char *Address;
  char *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char **p_dst;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  unint64_t v74;
  std::string *p_str;
  std::string *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int64_t v84;
  unsigned int v85;
  _BYTE *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  int v123;
  unsigned int v124;
  std::string *v125;
  std::string *v126;
  const char *v127;
  size_t v128;
  uint64_t v129;
  unsigned int data;
  std::string::size_type size;
  unint64_t v132;
  _DWORD *v133;
  int *v134;
  llvm::raw_ostream *v135;
  llvm::raw_ostream *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  const void *v140;
  size_t v141;
  char *v142;
  std::string *v143;
  std::string::size_type *p_size;
  size_t v145;
  char *v146;
  size_t v147;
  const void *v148;
  unsigned int v149;
  llvm::raw_ostream *v150;
  uint64_t v151;
  std::string::pointer v152;
  _BYTE *v153;
  llvm::raw_ostream *v154;
  int v155;
  _BYTE *v156;
  llvm::raw_ostream *v157;
  _BYTE *v158;
  llvm::raw_ostream *v159;
  unsigned int v160;
  llvm::raw_ostream *v161;
  uint64_t v162;
  _QWORD *v163;
  std::string::pointer v164;
  size_t v165;
  char *v166;
  const char *v167;
  char **v168;
  char **v169;
  const char *v170;
  size_t v171;
  _DWORD *v172;
  llvm::raw_ostream *v173;
  std::string::pointer v174;
  const char *v175;
  size_t v176;
  llvm::raw_ostream *v177;
  _WORD *v178;
  size_t v179;
  const char *v180;
  std::string *v181;
  std::string *v182;
  llvm::raw_ostream *v183;
  _DWORD *v184;
  char **v185;
  char *v186;
  char **v187;
  _QWORD *v188;
  _BYTE *v189;
  llvm::raw_ostream *v190;
  const char *v191;
  const char *v192;
  const char *v193;
  llvm::raw_ostream *v194;
  uint64_t v195;
  uint64_t v196;
  std::string *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  uint64_t *v206;
  uint64_t *v207;
  unsigned __int16 *v208;
  int v209;
  unsigned __int16 *v210;
  std::string::value_type *v211;
  uint64_t v212;
  _QWORD *v213;
  char *v215;
  _DWORD *v216;
  size_t __len;
  unsigned int v220;
  int v221;
  std::string __p;
  uint64_t v223;
  char v224;
  void *v225;
  __int128 v226;
  uint64_t v227;
  void *v228;
  __int128 v229;
  uint64_t v230;
  char *__dst;
  size_t v232;
  unint64_t v233;
  size_t v234;
  __int16 v235;
  std::string *v236;
  size_t v237;
  _BYTE v238[512];
  char *v239;
  size_t __nel;
  _BYTE v241[16];
  char *v242;
  uint64_t v243;
  _BYTE v244[96];
  char *v245;
  uint64_t v246;
  _BYTE v247[96];
  _QWORD *v248;
  uint64_t v249;
  _BYTE v250[32];
  _QWORD *v251;
  uint64_t v252;
  _BYTE v253[32];
  std::string __str;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  int v263;
  char v264;
  uint64_t v265;

  v265 = *MEMORY[0x1E0C80C00];
  v251 = v253;
  v252 = 0x400000000;
  v248 = v250;
  v249 = 0x400000000;
  v228 = &v230;
  v229 = xmmword_181234800;
  v225 = &v227;
  v226 = xmmword_181234800;
  v245 = v247;
  v246 = 0x400000000;
  v242 = v244;
  v243 = 0x400000000;
  v239 = v241;
  __nel = 0x400000000;
  v236 = (std::string *)v238;
  v237 = 0x400000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v212 = a5;
  v213 = a6;
  v216 = a4;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
  {
    v207 = a8;
    v220 = 0;
    v15 = &__str.__r_.__value_.__s.__data_[16];
    while (1)
    {
      if ((**(_DWORD **)(a1 + 48) - 21) <= 1)
      {
        Loc = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 40));
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        if (**(_DWORD **)(a1 + 48) == 9)
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v17 = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 40)) - Loc;
        if (v237 >= HIDWORD(v237))
        {
          __str.__r_.__value_.__l.__size_ = Loc;
          LODWORD(__str.__r_.__value_.__l.__data_) = 9;
          LODWORD(__str.__r_.__value_.__r.__words[2]) = v17;
          __str.__r_.__value_.__s.__data_[20] = 0;
          v259 = 0u;
          v260 = 0u;
          v261 = 0u;
          v262 = 0;
          v256 = 0;
          v257 = 0;
          v255 = 0;
          LOBYTE(v258) = 0;
          v263 = 1;
          v264 = 0;
          v74 = v237 + 1;
          if (v236 <= &__str && (std::string *)((char *)v236 + 128 * (unint64_t)v237) > &__str)
          {
            v84 = (char *)&__str - (char *)v236;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v236, v238, v74, 128);
            v76 = v236;
            p_str = (std::string *)((char *)v236 + v84);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v236, v238, v74, 128);
            p_str = &__str;
            v76 = v236;
          }
          v77 = (_OWORD *)((char *)v76 + 128 * (unint64_t)v237);
          v78 = *(_OWORD *)&p_str->__r_.__value_.__l.__data_;
          v79 = *(_OWORD *)&p_str->__r_.__value_.__r.__words[2];
          v80 = *(_OWORD *)&p_str[2].__r_.__value_.__l.__data_;
          v77[2] = *(_OWORD *)&p_str[1].__r_.__value_.__r.__words[1];
          v77[3] = v80;
          *v77 = v78;
          v77[1] = v79;
          v81 = *(_OWORD *)&p_str[2].__r_.__value_.__r.__words[2];
          v82 = *(_OWORD *)&p_str[3].__r_.__value_.__r.__words[1];
          v83 = *(_OWORD *)&p_str[4].__r_.__value_.__r.__words[2];
          v77[6] = *(_OWORD *)&p_str[4].__r_.__value_.__l.__data_;
          v77[7] = v83;
          v77[4] = v81;
          v77[5] = v82;
        }
        else
        {
          v18 = (char *)v236 + 128 * (unint64_t)v237;
          *(_DWORD *)v18 = 9;
          *((_QWORD *)v18 + 1) = Loc;
          *((_DWORD *)v18 + 4) = v17;
          v18[20] = 0;
          *(_OWORD *)(v18 + 56) = 0u;
          *(_OWORD *)(v18 + 72) = 0u;
          *(_OWORD *)(v18 + 88) = 0u;
          *((_QWORD *)v18 + 13) = 0;
          *((_QWORD *)v18 + 4) = 0;
          *((_QWORD *)v18 + 5) = 0;
          *((_QWORD *)v18 + 3) = 0;
          v18[48] = 0;
          *((_DWORD *)v18 + 28) = 1;
          v18[120] = 0;
        }
        LODWORD(v237) = v237 + 1;
        goto LABEL_9;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      __str.__r_.__value_.__l.__size_ = 0x800000000;
      DWORD2(v260) = -1;
      BYTE12(v260) = 0;
      *(_QWORD *)&v261 = &v236;
      v211 = v15;
      if (((*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 280))(a1, &__str, a10) & 1) == 0
        && !BYTE12(v260))
      {
        break;
      }
      v25 = *(_DWORD *)(a1 + 24);
      if (v25)
      {
        v26 = *(uint64_t **)(a1 + 16);
        v27 = &v26[14 * v25];
        do
        {
          v28 = *v26;
          v235 = 261;
          __dst = (char *)v26[1];
          v232 = v26[2];
          (*(void (**)(uint64_t, uint64_t, char **, uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v28, &__dst, v26[12], v26[13]);
          v26 += 14;
        }
        while (v26 != v27);
        v29 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v29)
        {
          v30 = *(_QWORD *)(a1 + 16);
          v31 = 112 * v29;
          do
          {
            v32 = *(void **)(v30 + v31 - 104);
            if ((void *)(v30 + v31 - 80) != v32)
              free(v32);
            v31 -= 112;
          }
          while (v31);
        }
      }
      *(_DWORD *)(a1 + 24) = 0;
      v22 = 1;
      v23 = (char *)__str.__r_.__value_.__r.__words[0];
      v24 = LODWORD(__str.__r_.__value_.__r.__words[1]);
      if (LODWORD(__str.__r_.__value_.__r.__words[1]))
        goto LABEL_28;
LABEL_33:
      v15 = v211;
      if (v23 != v211)
        free(v23);
      if ((v22 | 2) != 2)
      {
        v196 = 1;
        v197 = v236;
        if (v236 == (std::string *)v238)
          goto LABEL_332;
LABEL_331:
        free(v197);
        goto LABEL_332;
      }
LABEL_9:
      if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
        goto LABEL_101;
    }
    if (DWORD2(v260) == -1)
    {
      v22 = 2;
      v23 = (char *)__str.__r_.__value_.__r.__words[0];
      v24 = LODWORD(__str.__r_.__value_.__r.__words[1]);
      if (!LODWORD(__str.__r_.__value_.__r.__words[1]))
        goto LABEL_33;
LABEL_28:
      v33 = 8 * v24;
      v34 = v23 - 8;
      do
      {
        v35 = *(_QWORD *)&v34[v33];
        *(_QWORD *)&v34[v33] = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v33 -= 8;
      }
      while (v33);
      v23 = (char *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_33;
    }
    v19 = __str.__r_.__value_.__r.__words[1];
    v203 = -(uint64_t)DWORD2(v260);
    v204 = *v207;
    v210 = (unsigned __int16 *)(*v207 - 32 * DWORD2(v260));
    if (LODWORD(__str.__r_.__value_.__r.__words[1]) == 1)
    {
LABEL_15:
      v20 = v204 + 32 * v203;
      v21 = (uint16x4_t *)&v210[16 * *v210 + 16 + *(unsigned __int16 *)(v20 + 10) + *(unsigned __int8 *)(v20 + 8)];
      llvm::SmallVectorImpl<unsigned int>::insert<unsigned short const*,void>((uint64_t)&v239, (uint64_t)&v239[4 * __nel], v21, (unsigned __int16 *)v21 + *(unsigned __int8 *)(v20 + 9));
      v22 = 0;
      a4 = v216;
      v23 = (char *)__str.__r_.__value_.__r.__words[0];
      v24 = LODWORD(__str.__r_.__value_.__r.__words[1]);
      if (!LODWORD(__str.__r_.__value_.__r.__words[1]))
        goto LABEL_33;
      goto LABEL_28;
    }
    v36 = *v207 - 32 * DWORD2(v260);
    v205 = (_BYTE *)(v36 + 4);
    v206 = (uint64_t *)(v36 + 16);
    v208 = (unsigned __int16 *)(v36 + 12);
    v209 = __str.__r_.__value_.__r.__words[1];
    v37 = v36 + 34;
    v38 = 1;
    while (1)
    {
      v42 = *(char **)(__str.__r_.__value_.__r.__words[0] + 8 * v38);
      if ((*(unsigned int (**)(char *))(*(_QWORD *)v42 + 48))(v42))
      {
        if (((*(uint64_t (**)(char *))(*(_QWORD *)v42 + 96))(v42) & 1) == 0)
        {
          v43 = *(_QWORD *)(a1 + 8);
          v44 = (*(uint64_t (**)(char *))(*(_QWORD *)v42 + 56))(v42);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 88))(v43, v44) & 1) == 0)
          {
            if (*v205 && *((_DWORD *)v42 + 2) < *v205)
            {
              v67 = (*(uint64_t (**)(char *))(*(_QWORD *)v42 + 56))(v42);
              v68 = __nel;
              if (__nel >= (unint64_t)HIDWORD(__nel))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v239, v241, __nel + 1, 4);
                v68 = __nel;
              }
              *(_DWORD *)&v239[4 * v68] = v67;
              LODWORD(__nel) = __nel + 1;
            }
            goto LABEL_42;
          }
        }
      }
      v45 = (*(uint64_t (**)(char *))(*(_QWORD *)v42 + 16))(v42);
      if (v46)
      {
        v47 = v45;
        v48 = v46;
        v49 = (*(uint64_t (**)(char *))(*(_QWORD *)v42 + 24))(v42);
        if (v49)
          break;
      }
LABEL_42:
      ++v38;
      v37 += 6;
      if (v19 == (_DWORD)v38)
        goto LABEL_15;
    }
    v50 = v49;
    v51 = v42[39];
    v52 = v51 < 0;
    if (v51 >= 0)
      v53 = v42 + 16;
    else
      v53 = (const char *)*((_QWORD *)v42 + 2);
    v54 = v42[39];
    if (v52)
      v54 = *((_QWORD *)v42 + 3);
    __len = v54;
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v42 + 40))(v42))
    {
      if ((*(unsigned int (**)(char *))(*(_QWORD *)v42 + 104))(v42))
        v53 = "r";
      else
        v53 = "i";
      __len = 1;
    }
    v215 = v48;
    if (v38 == 1)
    {
      v55 = *v206;
      v224 = 0;
      v224 = (*(uint64_t (**)(char *))(*(_QWORD *)v42 + 72))(v42);
      v223 = v47;
      if ((v55 & 0x100000) != 0)
      {
        v56 = v249;
        if (v249 >= (unint64_t)HIDWORD(v249))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v248, v250, v249 + 1, 8);
          v56 = v249;
        }
        v248[v56] = v50;
        LODWORD(v249) = v249 + 1;
        v57 = (*(uint64_t (**)(char *))(*(_QWORD *)v42 + 96))(v42);
        v58 = v226;
        if ((unint64_t)(v226 + 1) > *((_QWORD *)&v226 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v225, &v227, v226 + 1, 1);
          v58 = v226;
        }
        *((_BYTE *)v225 + v58) = v57;
        *(_QWORD *)&v226 = v226 + 1;
        v235 = 1283;
        __dst = "=";
        v233 = (unint64_t)v53;
        v234 = __len;
        llvm::Twine::str((llvm::Twine *)&__dst, &__p);
        Address = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v242, (unint64_t)&__p, 1);
        v60 = &v242[24 * v243];
        v61 = *(_OWORD *)Address;
        *((_QWORD *)v60 + 2) = *((_QWORD *)Address + 2);
        *(_OWORD *)v60 = v61;
        *((_QWORD *)Address + 1) = 0;
        *((_QWORD *)Address + 2) = 0;
        *(_QWORD *)Address = 0;
        LODWORD(v243) = v243 + 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v220;
        v221 = 0;
        LODWORD(__p.__r_.__value_.__l.__data_) = 5;
        __dst = v215;
        v19 = v209;
        if (v237 >= HIDWORD(v237))
        {
LABEL_94:
          llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>((uint64_t)&v236, (int *)&__p, &v223, (uint64_t *)&__dst, &v221, &v224);
          goto LABEL_42;
        }
        v39 = (char *)v236 + 128 * (unint64_t)v237;
        v62 = v223;
        v41 = v224;
        *(_DWORD *)v39 = 5;
        *((_QWORD *)v39 + 1) = v62;
        *((_DWORD *)v39 + 4) = (_DWORD)v215;
LABEL_41:
        v39[20] = 0;
        *(_OWORD *)(v39 + 56) = 0u;
        *(_OWORD *)(v39 + 72) = 0u;
        *(_OWORD *)(v39 + 88) = 0u;
        *((_QWORD *)v39 + 13) = 0;
        *((_QWORD *)v39 + 4) = 0;
        *((_QWORD *)v39 + 5) = 0;
        *((_QWORD *)v39 + 3) = 0;
        v39[48] = 0;
        *((_DWORD *)v39 + 28) = 1;
        v39[120] = v41;
        LODWORD(v237) = v237 + 1;
        goto LABEL_42;
      }
    }
    else
    {
      v224 = 0;
      v224 = (*(uint64_t (**)(char *))(*(_QWORD *)v42 + 72))(v42);
      v223 = v47;
    }
    v63 = v252;
    if (v252 >= (unint64_t)HIDWORD(v252))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v251, v253, v252 + 1, 8);
      v63 = v252;
    }
    v251[v63] = v50;
    LODWORD(v252) = v252 + 1;
    v64 = (*(uint64_t (**)(char *))(*(_QWORD *)v42 + 96))(v42);
    v65 = v64;
    if ((unint64_t)(v229 + 1) > *((_QWORD *)&v229 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v228, &v230, v229 + 1, 1);
      *((_BYTE *)v228 + v229) = v65;
      *(_QWORD *)&v229 = v229 + 1;
      if (v53)
      {
LABEL_73:
        if (__len >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (__len >= 0x17)
        {
          v69 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len | 7) != 0x17)
            v69 = __len | 7;
          v70 = v69 + 1;
          p_dst = (char **)operator new(v69 + 1);
          v232 = __len;
          v233 = v70 | 0x8000000000000000;
          __dst = (char *)p_dst;
        }
        else
        {
          HIBYTE(v233) = __len;
          p_dst = &__dst;
          if (!__len)
            goto LABEL_86;
        }
        memmove(p_dst, v53, __len);
LABEL_86:
        *((_BYTE *)p_dst + __len) = 0;
LABEL_89:
        v71 = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v245, (unint64_t)&__dst, 1);
        v72 = &v245[24 * v246];
        v73 = *(_OWORD *)v71;
        *((_QWORD *)v72 + 2) = *((_QWORD *)v71 + 2);
        *(_OWORD *)v72 = v73;
        *((_QWORD *)v71 + 1) = 0;
        *((_QWORD *)v71 + 2) = 0;
        *(_QWORD *)v71 = 0;
        LODWORD(v246) = v246 + 1;
        v19 = v209;
        if (SHIBYTE(v233) < 0)
          operator delete(__dst);
        if ((*(_BYTE *)(v37 + 32 * *v210 + 6 * *v208) & 8) != 0)
        {
          v221 = 0;
          LODWORD(__p.__r_.__value_.__l.__data_) = 3;
          __dst = v215;
          if (v237 >= HIDWORD(v237))
            goto LABEL_94;
          v39 = (char *)v236 + 128 * (unint64_t)v237;
          v40 = v223;
          v41 = v224;
          *(_DWORD *)v39 = 3;
        }
        else
        {
          v221 = 0;
          LODWORD(__p.__r_.__value_.__l.__data_) = 4;
          __dst = v215;
          if (v237 >= HIDWORD(v237))
            goto LABEL_94;
          v39 = (char *)v236 + 128 * (unint64_t)v237;
          v40 = v223;
          v41 = v224;
          *(_DWORD *)v39 = 4;
        }
        *((_QWORD *)v39 + 1) = v40;
        *((_DWORD *)v39 + 4) = (_DWORD)v215;
        goto LABEL_41;
      }
    }
    else
    {
      *((_BYTE *)v228 + v229) = v64;
      *(_QWORD *)&v229 = v229 + 1;
      if (v53)
        goto LABEL_73;
    }
    __dst = 0;
    v232 = 0;
    v233 = 0;
    goto LABEL_89;
  }
  v220 = 0;
LABEL_101:
  *a3 = v249;
  *a4 = v252;
  v85 = __nel;
  if (__nel >= 2)
  {
    qsort(v239, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<unsigned int>);
    v85 = __nel;
  }
  v86 = v239;
  if (v85)
  {
    v87 = &v239[4 * v85];
    v88 = 4 * v85 - 8;
    v89 = v239;
    v90 = (uint64_t)a7;
    while (1)
    {
      v91 = v89;
      v89 += 4;
      if (v89 == v87)
        break;
      v92 = v88;
      v93 = *(_DWORD *)v91;
      v88 -= 4;
      if (*(_DWORD *)v91 == *((_DWORD *)v91 + 1))
      {
        if (v91 + 8 != v87)
        {
          v94 = 4;
          do
          {
            v95 = v93;
            v93 = *(_DWORD *)&v89[v94];
            if (v95 != v93)
            {
              *((_DWORD *)v91 + 1) = v93;
              v91 += 4;
            }
            v94 += 4;
            v92 -= 4;
          }
          while (v92);
        }
        v87 = v91 + 4;
        break;
      }
    }
  }
  else
  {
    v87 = v239;
    v90 = (uint64_t)a7;
  }
  LODWORD(__nel) = (unint64_t)(v87 - v86) >> 2;
  memset(&__str, 0, sizeof(__str));
  llvm::SmallVectorImpl<std::string>::assign(v90, __nel, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v96 = __nel;
  if ((_DWORD)__nel)
  {
    v97 = 0;
    do
    {
      v98 = *a7;
      LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
      LOBYTE(v257) = 0;
      v258 = 0;
      LODWORD(v259) = 1;
      v255 = 0;
      v256 = 0;
      __str.__r_.__value_.__r.__words[2] = 0;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
      *((_QWORD *)&v259 + 1) = v98 + 24 * v97;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&__str, 0, 0, 0);
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)a9 + 40))(a9, &__str, *(unsigned int *)&v239[4 * v97]);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__str);
      ++v97;
    }
    while (v97 != v96);
  }
  if (*a3 | *v216)
  {
    v99 = (*v216 + *a3);
    v100 = *(_DWORD *)(v212 + 8);
    if (v100 != (_DWORD)v99)
    {
      if (v100 <= v99)
      {
        if (*(_DWORD *)(v212 + 12) < v99)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v212, (void *)(v212 + 16), v99, 16);
          v100 = *(_DWORD *)(v212 + 8);
        }
        if (v100 != (_DWORD)v99)
        {
          v101 = *(_QWORD *)v212;
          v102 = 16 * v100;
          v103 = *(_QWORD *)v212 + v102;
          v104 = 16 * v99 - 16 - v102;
          if (!v104)
            goto LABEL_129;
          v105 = (v104 >> 4) + 1;
          v103 += 16 * (v105 & 0x1FFFFFFFFFFFFFFELL);
          v106 = v102 + v101 + 16;
          v107 = v105 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            *(_QWORD *)(v106 - 16) = 0;
            *(_QWORD *)v106 = 0;
            *(_BYTE *)(v106 - 8) = 0;
            *(_BYTE *)(v106 + 8) = 0;
            v106 += 32;
            v107 -= 2;
          }
          while (v107);
          if (v105 != (v105 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_129:
            v108 = v101 + 16 * v99;
            do
            {
              *(_QWORD *)v103 = 0;
              *(_BYTE *)(v103 + 8) = 0;
              v103 += 16;
            }
            while (v103 != v108);
          }
        }
      }
      *(_DWORD *)(v212 + 8) = v99;
    }
    llvm::SmallVectorImpl<std::string>::resizeImpl<false>((uint64_t)v213, v99);
    LODWORD(v109) = *a3;
    if (*a3)
    {
      v110 = 0;
      v111 = 0;
      v112 = 0;
      do
      {
        v113 = *((_BYTE *)v225 + v112);
        v114 = *(_QWORD *)v212 + v111;
        *(_QWORD *)v114 = v248[v112];
        *(_BYTE *)(v114 + 8) = v113;
        std::string::operator=((std::string *)(*v213 + v110), (const std::string *)&v242[v110]);
        ++v112;
        v109 = *a3;
        v111 += 16;
        v110 += 24;
      }
      while (v112 < v109);
    }
    if (*v216)
    {
      v115 = 0;
      v116 = 0;
      v117 = v109;
      do
      {
        v118 = *((_BYTE *)v228 + v116);
        v119 = *(_QWORD *)v212 + 16 * (v117 + v116);
        *(_QWORD *)v119 = v251[v116];
        *(_BYTE *)(v119 + 8) = v118;
        std::string::operator=((std::string *)(*v213 + 24 * (v117 + v116++)), (const std::string *)&v245[v115]);
        v115 += 24;
      }
      while (v116 < *v216);
    }
  }
  __dst = 0;
  v232 = 0;
  v233 = 0;
  LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
  LOBYTE(v257) = 0;
  v258 = 0;
  LODWORD(v259) = 1;
  __str.__r_.__value_.__r.__words[2] = 0;
  v256 = 0;
  v255 = 0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
  *((_QWORD *)&v259 + 1) = &__dst;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&__str, 0, 0, 0);
  v120 = ***(_QWORD ***)(a1 + 240);
  v121 = *(_BYTE **)(v120 + 8);
  v122 = *(_BYTE **)(v120 + 16);
  v123 = v237;
  if (v237 >= 2)
  {
    qsort(v236, v237, 0x80uLL, (int (__cdecl *)(const void *, const void *))rewritesSort);
    v123 = v237;
  }
  if (v123)
  {
    v124 = 0;
    v125 = v236;
    while (1)
    {
      if (v125->__r_.__value_.__s.__data_[20])
        goto LABEL_146;
      data = v125->__r_.__value_.__l.__data_;
      size = v125->__r_.__value_.__l.__size_;
      v132 = (size - (_DWORD)v121);
      if ((_DWORD)size == (_DWORD)v121)
        goto LABEL_151;
      if (v132 > v255 - v256)
        break;
      memcpy(v256, v121, (size - (_DWORD)v121));
      v256 += v132;
LABEL_154:
      switch(data)
      {
        case 0u:
          v133 = v256;
          if ((unint64_t)(v255 - v256) > 5)
          {
            *((_WORD *)v256 + 2) = 28263;
            *v133 = 1768710446;
            v256 += 6;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, ".align", 6uLL);
          }
          if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 144) + 339))
            goto LABEL_144;
          v152 = v125[1].__r_.__value_.__l.__data_;
          v153 = v256;
          if (v256 >= v255)
          {
            v154 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 32);
          }
          else
          {
            ++v256;
            *v153 = 32;
            v154 = (llvm::raw_ostream *)&__str;
          }
          llvm::raw_ostream::operator<<(v154, v152);
          v129 = 3;
          if (v152 >= 7)
            v129 = 4;
          if (v152 < 4)
            v129 = 2;
          goto LABEL_145;
        case 1u:
          v134 = (int *)v256;
          if ((unint64_t)(v255 - v256) <= 4)
          {
            v126 = &__str;
            v127 = ".even";
            v128 = 5;
            goto LABEL_143;
          }
          v129 = 0;
          v256[4] = 110;
          v155 = 1702257966;
          goto LABEL_196;
        case 2u:
          v134 = (int *)v256;
          if ((unint64_t)(v255 - v256) <= 4)
          {
            v126 = &__str;
            v127 = ".byte";
            v128 = 5;
            goto LABEL_143;
          }
          v129 = 0;
          v256[4] = 101;
          v155 = 1954112046;
LABEL_196:
          *v134 = v155;
          v146 = v256 + 5;
          goto LABEL_315;
        case 3u:
          goto LABEL_162;
        case 4u:
          if (v125[5].__r_.__value_.__s.__data_[0])
          {
LABEL_162:
            if ((unint64_t)(v255 - v256) > 1)
            {
              *(_WORD *)v256 = 31524;
              v256 += 2;
              v135 = (llvm::raw_ostream *)&__str;
            }
            else
            {
              v135 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
            }
            v149 = v220 + 1;
            v150 = llvm::raw_ostream::operator<<(v135, v220);
            v151 = *((_QWORD *)v150 + 4);
            if ((unint64_t)(*((_QWORD *)v150 + 3) - v151) > 2)
            {
              v129 = 0;
              *(_BYTE *)(v151 + 2) = 125;
              *(_WORD *)v151 = 20538;
              *((_QWORD *)v150 + 4) += 3;
              ++v220;
              goto LABEL_145;
            }
            llvm::raw_ostream::write(v150, ":P}", 3uLL);
          }
          else
          {
            v156 = v256;
            if (v256 >= v255)
            {
              v157 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
            }
            else
            {
              ++v256;
              *v156 = 36;
              v157 = (llvm::raw_ostream *)&__str;
            }
            v149 = v220 + 1;
            llvm::raw_ostream::operator<<(v157, v220);
          }
          v129 = 0;
          v220 = v149;
          goto LABEL_145;
        case 5u:
          if (v125[5].__r_.__value_.__s.__data_[0])
          {
            if ((unint64_t)(v255 - v256) > 1)
            {
              *(_WORD *)v256 = 31524;
              v256 += 2;
              v136 = (llvm::raw_ostream *)&__str;
            }
            else
            {
              v136 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
            }
            v160 = v124 + 1;
            v161 = llvm::raw_ostream::operator<<(v136, v124);
            v162 = *((_QWORD *)v161 + 4);
            if ((unint64_t)(*((_QWORD *)v161 + 3) - v162) > 2)
            {
              v129 = 0;
              *(_BYTE *)(v162 + 2) = 125;
              *(_WORD *)v162 = 20538;
              *((_QWORD *)v161 + 4) += 3;
              ++v124;
              goto LABEL_145;
            }
            llvm::raw_ostream::write(v161, ":P}", 3uLL);
          }
          else
          {
            v158 = v256;
            if (v256 >= v255)
            {
              v159 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
            }
            else
            {
              ++v256;
              *v158 = 36;
              v159 = (llvm::raw_ostream *)&__str;
            }
            v160 = v124 + 1;
            llvm::raw_ostream::operator<<(v159, v124);
          }
          v129 = 0;
          v124 = v160;
          goto LABEL_145;
        case 6u:
          v129 = 0;
          v137 = (uint64_t)v125[1].__r_.__value_.__l.__data_;
          if (v137 <= 63)
          {
            switch(v137)
            {
              case 8:
                v188 = v256;
                if ((unint64_t)(v255 - v256) <= 8)
                {
                  v126 = &__str;
                  v127 = "byte ptr ";
LABEL_300:
                  v128 = 9;
                  goto LABEL_143;
                }
                v129 = 0;
                v256[8] = 32;
                v193 = "byte ptr ";
                break;
              case 16:
                v188 = v256;
                if ((unint64_t)(v255 - v256) <= 8)
                {
                  v126 = &__str;
                  v127 = "word ptr ";
                  goto LABEL_300;
                }
                v129 = 0;
                v256[8] = 32;
                v193 = "word ptr ";
                break;
              case 32:
                v138 = v256;
                if ((unint64_t)(v255 - v256) <= 9)
                {
                  v126 = &__str;
                  v127 = "dword ptr ";
                  v128 = 10;
                  goto LABEL_143;
                }
                v129 = 0;
                *((_WORD *)v256 + 4) = 8306;
                v191 = "dword ptr ";
LABEL_309:
                *v138 = *(_QWORD *)v191;
                v146 = v256 + 10;
                goto LABEL_315;
              default:
                goto LABEL_145;
            }
            *v188 = *(_QWORD *)v193;
            v146 = v256 + 9;
            goto LABEL_315;
          }
          if (v137 <= 127)
          {
            if (v137 == 64)
            {
              v138 = v256;
              if ((unint64_t)(v255 - v256) <= 9)
              {
                v126 = &__str;
                v127 = "qword ptr ";
                v128 = 10;
                goto LABEL_143;
              }
              v129 = 0;
              *((_WORD *)v256 + 4) = 8306;
              v191 = "qword ptr ";
            }
            else
            {
              if (v137 != 80)
                goto LABEL_145;
              v138 = v256;
              if ((unint64_t)(v255 - v256) <= 9)
              {
                v126 = &__str;
                v127 = "xword ptr ";
                v128 = 10;
                goto LABEL_143;
              }
              v129 = 0;
              *((_WORD *)v256 + 4) = 8306;
              v191 = "xword ptr ";
            }
            goto LABEL_309;
          }
          if (v137 != 128)
          {
            if (v137 != 256)
              goto LABEL_145;
            v163 = v256;
            if ((unint64_t)(v255 - v256) <= 0xB)
            {
              v126 = &__str;
              v127 = "ymmword ptr ";
              v128 = 12;
              goto LABEL_143;
            }
            v129 = 0;
            *((_DWORD *)v256 + 2) = 544371824;
            v192 = "ymmword ptr ";
LABEL_314:
            *v163 = *(_QWORD *)v192;
            v146 = v256 + 12;
LABEL_315:
            v256 = v146;
            goto LABEL_145;
          }
          v163 = v256;
          if ((unint64_t)(v255 - v256) > 0xB)
          {
            v129 = 0;
            *((_DWORD *)v256 + 2) = 544371824;
            v192 = "xmmword ptr ";
            goto LABEL_314;
          }
          v126 = &__str;
          v127 = "xmmword ptr ";
          v128 = 12;
          goto LABEL_143;
        case 7u:
          v139 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 144);
          v140 = *(const void **)(v139 + 104);
          v141 = *(_QWORD *)(v139 + 112);
          v142 = v256;
          if (v141 <= v255 - v256)
          {
            if (v141)
            {
              memcpy(v256, v140, v141);
              v142 = &v256[v141];
              v256 += v141;
            }
            v143 = &__str;
            p_size = (std::string::size_type *)&v256;
            v127 = (const char *)v125[1].__r_.__value_.__l.__size_;
            v145 = v125[1].__r_.__value_.__r.__words[2];
            if (v145 > v255 - v142)
            {
LABEL_200:
              v126 = v143;
              v128 = v145;
              goto LABEL_143;
            }
          }
          else
          {
            v143 = (std::string *)llvm::raw_ostream::write((llvm::raw_ostream *)&__str, (const char *)v140, v141);
            p_size = &v143[1].__r_.__value_.__l.__size_;
            v142 = (char *)v143[1].__r_.__value_.__l.__size_;
            v127 = (const char *)v125[1].__r_.__value_.__l.__size_;
            v145 = v125[1].__r_.__value_.__r.__words[2];
            if (v145 > v143[1].__r_.__value_.__r.__words[0] - (unint64_t)v142)
              goto LABEL_200;
          }
          if (!v145)
            goto LABEL_144;
          memcpy(v142, v127, v145);
          v129 = 0;
          *p_size += v145;
          goto LABEL_145;
        case 8u:
          if ((unint64_t)(v255 - v256) <= 1)
          {
            v126 = &__str;
            v127 = "\n\t";
            v128 = 2;
            goto LABEL_143;
          }
          v129 = 0;
          *(_WORD *)v256 = 2314;
          v146 = v256 + 2;
          goto LABEL_315;
        case 9u:
          v121 = (_BYTE *)(size + LODWORD(v125->__r_.__value_.__r.__words[2]));
          goto LABEL_146;
        case 0xAu:
          if (!v125[2].__r_.__value_.__s.__data_[0])
            goto LABEL_183;
          if (v255 == v256)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "[", 1uLL);
            v147 = v125[3].__r_.__value_.__r.__words[0];
            if (!v147)
              goto LABEL_220;
LABEL_184:
            v148 = (const void *)v125[2].__r_.__value_.__r.__words[2];
            if (v147 <= v255 - v256)
            {
              memcpy(v256, v148, v147);
              v256 += v147;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&__str, (const char *)v148, v147);
            }
            goto LABEL_220;
          }
          *v256++ = 91;
LABEL_183:
          v147 = v125[3].__r_.__value_.__r.__words[0];
          if (v147)
            goto LABEL_184;
LABEL_220:
          if (!v125[3].__r_.__value_.__r.__words[2])
            goto LABEL_231;
          v164 = v125[3].__r_.__value_.__l.__data_;
          if (v164)
            v165 = 3;
          else
            v165 = 0;
          v166 = v256;
          if (v165 <= v255 - v256)
          {
            if (v164)
            {
              v256[2] = 32;
              *(_WORD *)v166 = 11040;
              v166 = v256 + 3;
              v256 += 3;
            }
            v168 = (char **)&__str;
            v169 = &v256;
            v170 = (const char *)v125[3].__r_.__value_.__l.__size_;
            v171 = v125[3].__r_.__value_.__r.__words[2];
            if (v171 > v255 - v166)
            {
LABEL_238:
              llvm::raw_ostream::write((llvm::raw_ostream *)v168, v170, v171);
              if (LODWORD(v125[4].__r_.__value_.__r.__words[2]) < 2)
                goto LABEL_239;
              goto LABEL_232;
            }
          }
          else
          {
            if (v164)
              v167 = " + ";
            else
              v167 = "";
            v168 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__str, v167, v165);
            v169 = v168 + 4;
            v166 = v168[4];
            v170 = (const char *)v125[3].__r_.__value_.__l.__size_;
            v171 = v125[3].__r_.__value_.__r.__words[2];
            if (v171 > v168[3] - v166)
              goto LABEL_238;
          }
          if (v171)
          {
            memcpy(v166, v170, v171);
            *v169 += v171;
          }
LABEL_231:
          if (LODWORD(v125[4].__r_.__value_.__r.__words[2]) < 2)
          {
LABEL_239:
            if (!v125[4].__r_.__value_.__l.__size_)
              goto LABEL_240;
            goto LABEL_253;
          }
LABEL_232:
          v172 = v256;
          if ((unint64_t)(v255 - v256) > 4)
          {
            v256[4] = 36;
            *v172 = 606087712;
            v256 += 5;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, LODWORD(v125[4].__r_.__value_.__r.__words[2]));
            if (!v125[4].__r_.__value_.__l.__size_)
              goto LABEL_240;
          }
          else
          {
            v173 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, " * $$", 5uLL);
            llvm::raw_ostream::operator<<(v173, LODWORD(v125[4].__r_.__value_.__r.__words[2]));
            if (!v125[4].__r_.__value_.__l.__size_)
              goto LABEL_240;
          }
LABEL_253:
          if (v125[3].__r_.__value_.__r.__words[0] || v125[3].__r_.__value_.__r.__words[2])
          {
            v178 = v256;
            if ((unint64_t)(v255 - v256) > 2)
            {
              v256[2] = 32;
              *v178 = 11040;
              v256 += 3;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&__str, " + ", 3uLL);
            }
          }
          v180 = v125[4].__r_.__value_.__l.__data_;
          v179 = v125[4].__r_.__value_.__l.__size_;
          v181 = (std::string *)((char *)v236 + 128 * (unint64_t)v237);
          v182 = v125;
          if (v125 != v181)
          {
            v182 = v125;
            while ((const char *)v182->__r_.__value_.__l.__size_ != v180
                 || v179 != LODWORD(v182->__r_.__value_.__r.__words[2])
                 || (LODWORD(v182->__r_.__value_.__l.__data_) - 3) >= 2)
            {
              v182 = (std::string *)((char *)v182 + 128);
              if (v182 == v181)
                goto LABEL_268;
            }
          }
          if (v182 == v181)
          {
LABEL_268:
            v184 = v256;
            if ((unint64_t)(v255 - v256) > 6)
            {
              *(_DWORD *)(v256 + 3) = 544499059;
              *v184 = 1936090735;
              v186 = v256 + 7;
              v256 = v186;
              v185 = (char **)&__str;
              v187 = &v256;
              if (v179 > v255 - v186)
              {
LABEL_274:
                llvm::raw_ostream::write((llvm::raw_ostream *)v185, v180, v179);
                v174 = v125[3].__r_.__value_.__l.__data_;
                if (v125[2].__r_.__value_.__l.__size_)
                  goto LABEL_241;
                goto LABEL_275;
              }
            }
            else
            {
              v185 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "offset ", 7uLL);
              v187 = v185 + 4;
              v186 = v185[4];
              if (v179 > v185[3] - v186)
                goto LABEL_274;
            }
            if (!v179)
              goto LABEL_240;
            memcpy(v186, v180, v179);
            *v187 += v179;
            v174 = v125[3].__r_.__value_.__l.__data_;
            if (v125[2].__r_.__value_.__l.__size_)
              goto LABEL_241;
          }
          else
          {
            if (LODWORD(v182->__r_.__value_.__l.__data_) != 3)
            {
              v189 = v256;
              if (v256 >= v255)
              {
                v190 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
              }
              else
              {
                ++v256;
                *v189 = 36;
                v190 = (llvm::raw_ostream *)&__str;
              }
              llvm::raw_ostream::operator<<(v190, v220);
              v182->__r_.__value_.__s.__data_[20] = 1;
              ++v220;
LABEL_240:
              v174 = v125[3].__r_.__value_.__l.__data_;
              if (v125[2].__r_.__value_.__l.__size_)
                goto LABEL_241;
              goto LABEL_275;
            }
            if ((unint64_t)(v255 - v256) > 1)
            {
              *(_WORD *)v256 = 31524;
              v256 += 2;
              v183 = (llvm::raw_ostream *)&__str;
            }
            else
            {
              v183 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
            }
            v194 = llvm::raw_ostream::operator<<(v183, v220);
            v195 = *((_QWORD *)v194 + 4);
            if ((unint64_t)(*((_QWORD *)v194 + 3) - v195) > 2)
            {
              *(_BYTE *)(v195 + 2) = 125;
              *(_WORD *)v195 = 20538;
              *((_QWORD *)v194 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v194, ":P}", 3uLL);
            }
            ++v220;
            v182->__r_.__value_.__s.__data_[20] = 1;
            v174 = v125[3].__r_.__value_.__l.__data_;
            if (v125[2].__r_.__value_.__l.__size_)
            {
LABEL_241:
              v175 = " + $$";
              if (v174 || v125[3].__r_.__value_.__r.__words[2])
                goto LABEL_246;
              goto LABEL_243;
            }
          }
LABEL_275:
          if (v174 || v125[3].__r_.__value_.__r.__words[2] || v125[4].__r_.__value_.__l.__size_)
            goto LABEL_278;
LABEL_243:
          if (v125[4].__r_.__value_.__l.__size_)
            v175 = " + $$";
          else
            v175 = "$$";
LABEL_246:
          v176 = strlen(v175);
          if (v176 <= v255 - v256)
          {
            if (v176)
            {
              memcpy(v256, v175, v176);
              v256 += v176;
            }
            v177 = (llvm::raw_ostream *)&__str;
          }
          else
          {
            v177 = llvm::raw_ostream::write((llvm::raw_ostream *)&__str, v175, v176);
          }
          llvm::raw_ostream::operator<<(v177, v125[2].__r_.__value_.__l.__size_);
LABEL_278:
          if (v125[2].__r_.__value_.__s.__data_[0])
          {
            if (v255 != v256)
            {
              v129 = 0;
              *v256 = 93;
              v146 = v256 + 1;
              goto LABEL_315;
            }
            v126 = &__str;
            v127 = "]";
            v128 = 1;
LABEL_143:
            llvm::raw_ostream::write((llvm::raw_ostream *)v126, v127, v128);
          }
LABEL_144:
          v129 = 0;
LABEL_145:
          v121 = (_BYTE *)(size + LODWORD(v125->__r_.__value_.__r.__words[2]) + v129);
LABEL_146:
          v125 = (std::string *)((char *)v125 + 128);
          if (v125 == (std::string *)((char *)v236 + 128 * (unint64_t)v237))
            goto LABEL_324;
          break;
        default:
          goto LABEL_144;
      }
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)&__str, v121, (size - (_DWORD)v121));
LABEL_151:
    if (data > 0xA)
      goto LABEL_144;
    goto LABEL_154;
  }
LABEL_324:
  if (v121 != v122)
  {
    if (v122 - v121 <= (unint64_t)(v255 - v256))
    {
      memcpy(v256, v121, v122 - v121);
      v256 += v122 - v121;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__str, v121, v122 - v121);
    }
  }
  std::string::operator=(a2, *((const std::string **)&v259 + 1));
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__str);
  if (SHIBYTE(v233) < 0)
    operator delete(__dst);
  v196 = 0;
  v197 = v236;
  if (v236 != (std::string *)v238)
    goto LABEL_331;
LABEL_332:
  if (v239 != v241)
    free(v239);
  v198 = v242;
  if ((_DWORD)v243)
  {
    v199 = 24 * v243;
    do
    {
      if (v198[v199 - 1] < 0)
        operator delete(*(void **)&v198[v199 - 24]);
      v199 -= 24;
    }
    while (v199);
    v198 = v242;
  }
  if (v198 != v244)
    free(v198);
  v200 = v245;
  if ((_DWORD)v246)
  {
    v201 = 24 * v246;
    do
    {
      if (v200[v201 - 1] < 0)
        operator delete(*(void **)&v200[v201 - 24]);
      v201 -= 24;
    }
    while (v201);
    v200 = v245;
  }
  if (v200 != v247)
    free(v200);
  if (v225 != &v227)
    free(v225);
  if (v228 != &v230)
    free(v228);
  if (v248 != (_QWORD *)v250)
    free(v248);
  if (v251 != (_QWORD *)v253)
    free(v251);
  return v196;
}

void `anonymous namespace'::AsmParser::Note(uint64_t a1, const char *a2, llvm::Twine *a3, const char *a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  llvm *v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  const char *v22;
  llvm *v23;
  const char *v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27[2];

  v10 = *(_DWORD *)(a1 + 24);
  if (v10)
  {
    v11 = *(uint64_t **)(a1 + 16);
    v12 = &v11[14 * v10];
    do
    {
      v13 = *v11;
      v26 = 261;
      v24 = (const char *)v11[1];
      v25 = v11[2];
      (*(void (**)(uint64_t, uint64_t, const char **, uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v13, &v24, v11[12], v11[13]);
      v11 += 14;
    }
    while (v11 != v12);
    v14 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = 112 * v14;
      do
      {
        v17 = *(void **)(v15 + v16 - 104);
        if ((void *)(v15 + v16 - 80) != v17)
          free(v17);
        v16 -= 112;
      }
      while (v16);
    }
  }
  *(_DWORD *)(a1 + 24) = 0;
  v18 = *(llvm **)(a1 + 240);
  v24 = a4;
  v25 = a5;
  llvm::SourceMgr::PrintMessage(v18, a2, 3, a3, (unint64_t *)&v24, 1, 0, 0, 1);
  v20 = *(_QWORD *)(a1 + 360);
  v19 = *(_QWORD *)(a1 + 368);
  while (v19 != v20)
  {
    v21 = *(const char ***)(v19 - 8);
    v19 -= 8;
    v22 = *v21;
    v24 = "while in macro instantiation";
    v26 = 259;
    v23 = *(llvm **)(a1 + 240);
    v27[0] = 0;
    v27[1] = 0;
    llvm::SourceMgr::PrintMessage(v23, v22, 3, (llvm::Twine *)&v24, v27, 1, 0, 0, 1);
  }
}

uint64_t `anonymous namespace'::AsmParser::Warning(_QWORD *a1, const char *a2, llvm::Twine *a3, uint64_t a4, uint64_t a5)
{
  char v10;
  char v11;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  const char **v15;
  const char *v16;
  llvm *v17;
  unint64_t v19[2];
  unint64_t v20[4];
  __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)v20, (const llvm::MCTargetOptions *)(a1[1] + 136));
  v10 = v20[0];
  llvm::MCTargetOptions::~MCTargetOptions((llvm::MCTargetOptions *)v20);
  if ((v10 & 8) == 0)
  {
    llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)v20, (const llvm::MCTargetOptions *)(a1[1] + 136));
    v11 = v20[0];
    llvm::MCTargetOptions::~MCTargetOptions((llvm::MCTargetOptions *)v20);
    if ((v11 & 4) != 0)
      return llvm::MCAsmParser::Error((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
    v12 = (llvm *)a1[30];
    v20[0] = a4;
    v20[1] = a5;
    llvm::SourceMgr::PrintMessage(v12, a2, 1, a3, v20, 1, 0, 0, 1);
    v14 = a1[45];
    v13 = a1[46];
    while (v13 != v14)
    {
      v15 = *(const char ***)(v13 - 8);
      v13 -= 8;
      v16 = *v15;
      v19[1] = 0;
      v20[0] = (unint64_t)"while in macro instantiation";
      v21 = 259;
      v17 = (llvm *)a1[30];
      v19[0] = 0;
      llvm::SourceMgr::PrintMessage(v17, v16, 3, (llvm::Twine *)v20, v19, 1, 0, 0, 1);
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::printError(uint64_t a1, const char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  const char *v10;
  llvm *v11;
  unint64_t v13[4];
  __int16 v14;
  unint64_t v15[2];

  *(_BYTE *)(a1 + 32) = 1;
  v6 = *(llvm **)(a1 + 240);
  v13[0] = a4;
  v13[1] = a5;
  llvm::SourceMgr::PrintMessage(v6, a2, 0, a3, v13, 1, 0, 0, 1);
  v8 = *(_QWORD *)(a1 + 360);
  v7 = *(_QWORD *)(a1 + 368);
  while (v7 != v8)
  {
    v9 = *(const char ***)(v7 - 8);
    v7 -= 8;
    v10 = *v9;
    v13[0] = (unint64_t)"while in macro instantiation";
    v14 = 259;
    v11 = *(llvm **)(a1 + 240);
    v15[0] = 0;
    v15[1] = 0;
    llvm::SourceMgr::PrintMessage(v11, v10, 3, (llvm::Twine *)v13, v15, 1, 0, 0, 1);
  }
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::Lex(_anonymous_namespace_::AsmParser *this)
{
  llvm::MCAsmLexer *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Tok;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int BufferContainingLoc;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int16 v18;

  v2 = (_anonymous_namespace_::AsmParser *)((char *)this + 40);
  if (**((_DWORD **)this + 6) == 1)
  {
    v3 = *((_QWORD *)this + 13);
    v18 = 260;
    v16 = (char *)this + 112;
    llvm::MCAsmParser::Error((uint64_t)this, v3, (uint64_t)&v16, 0, 0);
  }
  if (*(_DWORD *)llvm::MCAsmParser::getTok(this) == 9
    && *(_QWORD *)(llvm::MCAsmParser::getTok(this) + 16)
    && **(_BYTE **)(llvm::MCAsmParser::getTok(this) + 8) != 10
    && **(_BYTE **)(llvm::MCAsmParser::getTok(this) + 8) != 13
    && *(_BYTE *)(*((_QWORD *)this + 29) + 482))
  {
    v4 = *((_QWORD *)this + 28);
    Tok = llvm::MCAsmParser::getTok(this);
    v6 = *(char **)(Tok + 8);
    v7 = *(_QWORD *)(Tok + 16);
    v18 = 261;
    v16 = v6;
    v17 = v7;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 136))(v4, &v16);
  }
  while (1)
  {
    result = llvm::MCAsmLexer::Lex(v2);
    if (*(_DWORD *)result != 7)
      break;
    if (*(_BYTE *)(*((_QWORD *)this + 29) + 482))
    {
      v9 = *((_QWORD *)this + 28);
      v10 = *(char **)(result + 8);
      v11 = *(_QWORD *)(result + 16);
      v18 = 261;
      v16 = v10;
      v17 = v11;
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v9 + 136))(v9, &v16);
    }
  }
  if (!*(_DWORD *)result)
  {
    v12 = **((_QWORD **)this + 30) + 24 * (*((_DWORD *)this + 74) - 1);
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*((uint64_t **)this + 30), *(_QWORD *)(v12 + 16));
      *((_DWORD *)this + 74) = BufferContainingLoc;
      v15 = *(_QWORD *)(**((_QWORD **)this + 30) + 24 * (BufferContainingLoc - 1));
      llvm::AsmLexer::setBuffer((uint64_t)v2, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8), v13, 1);
      return (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseIdentifier(_anonymous_namespace_::AsmParser *this, llvm::StringRef *a2)
{
  int v4;
  llvm::MCAsmLexer *v6;
  uint64_t Loc;
  uint64_t Tok;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = **((_DWORD **)this + 6);
  if ((v4 - 2) >= 2)
  {
    if (v4 != 46 && v4 != 27)
      return 1;
    v6 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
    Loc = llvm::MCAsmLexer::getLoc(v6);
    v17 = 0;
    v19 = 0;
    __p = 0;
    v18 = 0;
    v11 = 1;
    v21 = 1;
    llvm::AsmLexer::peekTokens((uint64_t)this + 40, (uint64_t)&v17, 1, 0);
    if (v17 == 4 || v17 == 2)
    {
      if (Loc + 1 == mlir::Token::getLoc((mlir::Token *)&v17))
      {
        llvm::MCAsmLexer::Lex((_anonymous_namespace_::AsmParser *)((char *)this + 40));
        v16 = *(_QWORD *)(llvm::MCAsmParser::getTok(this) + 16) + 1;
        *(_QWORD *)a2 = Loc;
        *((_QWORD *)a2 + 1) = v16;
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
        v11 = 0;
        if (v21 < 0x41)
          return v11;
LABEL_12:
        if (__p)
          operator delete[](__p);
        return v11;
      }
      v11 = 1;
    }
    if (v21 < 0x41)
      return v11;
    goto LABEL_12;
  }
  Tok = llvm::MCAsmParser::getTok(this);
  if (*(_DWORD *)Tok == 2)
  {
    v9 = *(_QWORD *)(Tok + 8);
    v10 = *(_QWORD *)(Tok + 16);
  }
  else
  {
    v9 = *(_QWORD *)(Tok + 8);
    v12 = *(_QWORD *)(Tok + 16);
    v13 = v12 - 1;
    v14 = v12 != 0;
    if (v12)
      ++v9;
    if (v13 < v14)
      v13 = 1;
    if (v13 < v12)
      v12 = v13;
    v10 = v12 - v14;
  }
  *(_QWORD *)a2 = v9;
  *((_QWORD *)a2 + 1) = v10;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseStringToEndOfStatement(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t Loc;
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  mlir::Token *v8;

  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v4 = **((_DWORD **)this + 6);
  if (v4)
    v5 = v4 == 9;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      llvm::MCAsmLexer::Lex((_anonymous_namespace_::AsmParser *)((char *)this + 40));
      v6 = **((_DWORD **)this + 6);
      if (v6)
        v7 = v6 == 9;
      else
        v7 = 1;
    }
    while (!v7);
  }
  v8 = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  mlir::Token::getLoc(v8);
  return Loc;
}

uint64_t `anonymous namespace'::AsmParser::parseEscapedString(llvm::MCAsmParser *a1, std::string *a2)
{
  _BOOL8 v4;
  uint64_t Tok;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  _QWORD v22[4];
  __int16 v23;

  v4 = *(_DWORD *)llvm::MCAsmParser::getTok(a1) != 3;
  v22[0] = "expected string";
  v23 = 259;
  if ((llvm::MCAsmParser::check(a1, v4, (const llvm::Twine *)v22) & 1) != 0)
    return 1;
  MEMORY[0x186DA1308](a2, "");
  Tok = llvm::MCAsmParser::getTok(a1);
  v7 = *(_QWORD *)(Tok + 16);
  v8 = v7 != 0;
  if (v7)
    v9 = *(_QWORD *)(Tok + 8) + 1;
  else
    v9 = *(_QWORD *)(Tok + 8);
  if (v7 - 1 < v8)
    v10 = 1;
  else
    v10 = v7 - 1;
  if (v10 < v7)
    v7 = v10;
  v11 = v7 - v8;
  if ((_DWORD)v7 == (_DWORD)v8)
  {
LABEL_38:
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    return 0;
  }
  v12 = 0;
  while (1)
  {
    v14 = *(unsigned __int8 *)(v9 + v12);
    if (v14 != 92)
      goto LABEL_13;
    v13 = v12 + 1;
    if (v12 + 1 == (_DWORD)v11)
      break;
    v14 = *(unsigned __int8 *)(v9 + v13);
    if ((v14 | 0x20) != 0x78)
    {
      if ((v14 & 0xF8) != 0x30)
      {
        v19 = (char)v14 - 92;
        LOBYTE(v14) = 8;
        switch(v19)
        {
          case 0:
            LOBYTE(v14) = 92;
            goto LABEL_14;
          case 6:
            goto LABEL_14;
          case 10:
            LOBYTE(v14) = 12;
            goto LABEL_14;
          case 18:
            LOBYTE(v14) = 10;
            goto LABEL_14;
          case 22:
            LOBYTE(v14) = 13;
            goto LABEL_14;
          case 24:
            LOBYTE(v14) = 9;
            goto LABEL_14;
          default:
            v21 = "invalid escape sequence (unrecognized character)";
            goto LABEL_41;
        }
      }
      v14 -= 48;
      v17 = v12 + 2;
      if (v12 + 2 == (_DWORD)v11)
        goto LABEL_14;
      v18 = *(unsigned __int8 *)(v9 + v17);
      if ((v18 & 0xF8) != 0x30)
        goto LABEL_14;
      v14 = v18 + 8 * v14 - 48;
      v12 += 3;
      if (v12 == (_DWORD)v11)
      {
        v13 = v17;
        goto LABEL_14;
      }
      v20 = *(unsigned __int8 *)(v9 + v12);
      v13 = v17;
      if ((v20 & 0xF8) != 0x30)
        goto LABEL_14;
      v14 = v20 + 8 * v14 - 48;
      if (v14 > 0xFF)
      {
        v21 = "invalid octal escape sequence (out of range)";
        goto LABEL_41;
      }
LABEL_13:
      v13 = v12;
      goto LABEL_14;
    }
    v15 = v12 + 2;
    if (v11 <= v15
      || (v16 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v9 + v15)], v16 == 0xFFFF))
    {
      v21 = "invalid hexadecimal escape sequence";
      goto LABEL_41;
    }
    LOBYTE(v14) = 0;
    do
    {
      v13 = v15;
      LOBYTE(v14) = v16 + 16 * v14;
      v15 = (v15 + 1);
      if (v11 <= v15)
        break;
      v16 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v9 + v15)];
    }
    while (v16 != 0xFFFF);
LABEL_14:
    std::string::push_back(a2, v14);
    v12 = v13 + 1;
    if (v13 + 1 == (_DWORD)v11)
      goto LABEL_38;
  }
  v21 = "unexpected backslash at end of string";
LABEL_41:
  v22[0] = v21;
  v23 = 259;
  return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)v22, 0, 0);
}

BOOL `anonymous namespace'::AsmParser::parseAngleBracketString(uint64_t a1, uint64_t a2)
{
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int BufferContainingLoc;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;

  Tok = (mlir::Token *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  Loc = mlir::Token::getLoc(Tok);
  v6 = Loc;
  v7 = 0;
  while (2)
  {
    v8 = *(unsigned __int8 *)(Loc + v7);
    switch(*(_BYTE *)(Loc + v7))
    {
      case 0:
      case 0xA:
      case 0xD:
        goto LABEL_6;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xB:
      case 0xC:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_3;
      case 0x21:
        ++v7;
        goto LABEL_3;
      default:
        if (v8 != 62)
        {
LABEL_3:
          ++v7;
          continue;
        }
LABEL_6:
        if (v8 == 62)
        {
          BufferContainingLoc = *(_DWORD *)(a1 + 296);
          if (!BufferContainingLoc)
            BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(a1 + 240), v6 + v7 + 1);
          *(_DWORD *)(a1 + 296) = BufferContainingLoc;
          v10 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (BufferContainingLoc - 1));
          llvm::AsmLexer::setBuffer(a1 + 40, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8), v6 + v7 + 1, 1);
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
          memset(&v15, 0, sizeof(v15));
          if (v7 != 1)
          {
            v11 = 0;
            v12 = v6 + 1;
            do
            {
              if (*(_BYTE *)(v12 + v11) == 33)
                v13 = v11 + 1;
              else
                v13 = v11;
              std::string::push_back(&v15, *(_BYTE *)(v12 + v13));
              v11 = v13 + 1;
            }
            while (v13 + 1 < (unint64_t)(v7 - 1));
          }
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          *(std::string *)a2 = v15;
        }
        return v8 != 62;
    }
  }
}

uint64_t `anonymous namespace'::AsmParser::eatToEndOfStatement(uint64_t this)
{
  uint64_t v1;
  llvm::MCAsmLexer *v2;
  int v3;

  v1 = this;
  v2 = (llvm::MCAsmLexer *)(this + 40);
  v3 = **(_DWORD **)(this + 48);
  if (v3)
  {
    while (v3 != 9)
    {
      this = llvm::MCAsmLexer::Lex(v2);
      v3 = **(_DWORD **)(v1 + 48);
      if (!v3)
        return this;
    }
    return llvm::MCAsmLexer::Lex(v2);
  }
  return this;
}

uint64_t `anonymous namespace'::AsmParser::parseExpression(llvm::MCAsmParser *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t Tok;
  uint64_t v8;
  llvm::MCConstantExpr *v9;
  uint64_t v10;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[2];
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  uint64_t v35[4];
  __int16 v36;

  *a2 = 0;
  v6 = 1;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 24))(*((_QWORD *)a1 + 1)) & 1) != 0
  {
    return v6;
  }
  if (**((_DWORD **)a1 + 6) != 46)
  {
LABEL_9:
    v35[0] = 0;
    if (llvm::MCExpr::evaluateAsAbsolute((llvm::MCExpr *)*a2, v35))
    {
      v9 = (llvm::MCConstantExpr *)v35[0];
      v10 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
      *a2 = llvm::MCConstantExpr::create(v9, v10, 0, 0);
    }
    return 0;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
  if (**((_DWORD **)a1 + 6) != 2)
  {
    v35[0] = (uint64_t)"unexpected symbol modifier following '@'";
    v12 = 259;
LABEL_33:
    v36 = v12;
    return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)v35, 0, 0);
  }
  Tok = llvm::MCAsmParser::getTok(a1);
  if (*(_DWORD *)Tok != 2)
  {
    v13 = *(_QWORD *)(Tok + 16);
    v14 = v13 != 0;
    if (v13)
      v15 = *(_QWORD *)(Tok + 8) + 1;
    else
      v15 = *(_QWORD *)(Tok + 8);
    if (v13 - 1 < v14)
      v16 = 1;
    else
      v16 = v13 - 1;
    if (v16 >= v13)
      v16 = v13;
    if (llvm::MCSymbolRefExpr::getVariantKindForName(v15, v16 - v14) != 1)
      goto LABEL_7;
    goto LABEL_23;
  }
  if (llvm::MCSymbolRefExpr::getVariantKindForName(*(_QWORD *)(Tok + 8), *(_QWORD *)(Tok + 16)) == 1)
  {
LABEL_23:
    v17 = llvm::MCAsmParser::getTok(a1);
    if (*(_DWORD *)v17 == 2)
    {
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
    }
    else
    {
      v18 = *(_QWORD *)(v17 + 8);
      v20 = *(_QWORD *)(v17 + 16);
      v21 = v20 - 1;
      v22 = v20 != 0;
      if (v20)
        ++v18;
      if (v21 < v22)
        v21 = 1;
      if (v21 < v20)
        v20 = v21;
      v19 = v20 - v22;
    }
    v34 = 1283;
    v31[0] = (uint64_t)"invalid variant '";
    v32 = v18;
    v33 = v19;
    v35[0] = (uint64_t)v31;
    v35[2] = (uint64_t)"'";
    v12 = 770;
    goto LABEL_33;
  }
LABEL_7:
  if (v8)
  {
    *a2 = v8;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    goto LABEL_9;
  }
  v23 = llvm::MCAsmParser::getTok(a1);
  if (*(_DWORD *)v23 == 2)
  {
    v24 = *(_QWORD *)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    v24 = *(_QWORD *)(v23 + 8);
    v26 = *(_QWORD *)(v23 + 16);
    v27 = v26 - 1;
    v28 = v26 != 0;
    if (v26)
      ++v24;
    if (v27 < v28)
      v27 = 1;
    if (v27 < v26)
      v26 = v27;
    v25 = v26 - v28;
  }
  v34 = 1283;
  v31[0] = (uint64_t)"invalid modifier '";
  v32 = v24;
  v33 = v25;
  v29 = "' (no symbols present)";
  v30 = 259;
  llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v35);
  return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)v35, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parsePrimaryExpr(unsigned int **a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  llvm::MCAsmLexer *v8;
  uint64_t Loc;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  const char *v13;
  uint64_t TempSymbol;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  llvm::MCAsmLexer *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  mlir::Token *Tok;
  uint64_t v25;
  uint64_t v26;
  llvm::MCConstantExpr **v27;
  llvm::MCConstantExpr **v28;
  llvm::MCConstantExpr *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  llvm::APFloatBase *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const char *v44;
  const unsigned __int8 *v45;
  int VariantKindForName;
  unsigned int *v47;
  llvm::MCAsmLexer *v48;
  const char *v49;
  int v50;
  uint64_t v51;
  void *p_p;
  int Key;
  uint64_t Symbol;
  llvm::MCContext *v55;
  unsigned int *v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  llvm::MCConstantExpr *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  llvm::MCSymbol *DirectionalLocalSymbol;
  uint64_t v66;
  unsigned int *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[4];
  __int16 v73;
  void *__p;
  const unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[24];
  __int128 v82;
  unsigned int *v83;
  llvm::MCSymbol *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v8 = (llvm::MCAsmLexer *)(*((uint64_t (**)(unsigned int **))*a1 + 5))(a1);
  Loc = llvm::MCAsmLexer::getLoc(v8);
  v10 = *a1[6];
  v11 = Loc;
  result = 1;
  switch((int)v10)
  {
    case 1:
      return result;
    case 2:
    case 3:
    case 24:
    case 27:
    case 46:
      v69 = 0uLL;
      if ((*((unsigned int (**)(unsigned int **, __int128 *))*a1 + 24))(a1, &v69)
        && (*(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) == 27
         || *(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) == 24))
      {
        if ((*(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) != 27 || !*((_BYTE *)a1[29] + 32))
          && (*(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) != 24 || !*((_BYTE *)a1[29] + 34)))
        {
          v44 = "invalid token in expression";
          goto LABEL_53;
        }
        (*((void (**)(unsigned int **))*a1 + 23))(a1);
        TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)a1[27]);
        (*(void (**)(unsigned int *, uint64_t, _QWORD))(*(_QWORD *)a1[28] + 192))(a1[28], TempSymbol, 0);
        v15 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
        v16 = llvm::MCSymbolRefExpr::create(TempSymbol, 0, v15, 0);
        result = 0;
        *a2 = v16;
        *a3 = v11;
        return result;
      }
      v80 = 0uLL;
      if (*((_BYTE *)a1[29] + 438))
      {
        if (*a1[6] == 17)
        {
          (*((void (**)(unsigned int **))*a1 + 23))(a1);
          __p = 0;
          v75 = 0;
          (*((void (**)(unsigned int **, void **))*a1 + 24))(a1, &__p);
          *(_QWORD *)v81 = "expected ')'";
          WORD4(v82) = 259;
          if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v81))
            return 1;
LABEL_54:
          v80 = v69;
          v23 = __p;
          v22 = (uint64_t)v75;
          goto LABEL_56;
        }
        goto LABEL_27;
      }
      if ((_DWORD)v10 == 3)
      {
        if (*a1[6] == 46)
        {
          (*((void (**)(unsigned int **))*a1 + 23))(a1);
          v18 = (llvm::MCAsmLexer *)(*((uint64_t (**)(unsigned int **))*a1 + 5))(a1);
          v19 = llvm::MCAsmLexer::getLoc(v18);
          __p = 0;
          v75 = 0;
          if ((*((unsigned int (**)(unsigned int **, void **))*a1 + 24))(a1, &__p))
          {
            *(_QWORD *)v81 = "expected symbol variant after '@'";
            WORD4(v82) = 259;
            v20 = (uint64_t)a1;
            v21 = v19;
            return llvm::MCAsmParser::Error(v20, v21, (uint64_t)v81, 0, 0);
          }
          goto LABEL_54;
        }
LABEL_27:
        v22 = 0;
        v23 = 0;
        goto LABEL_56;
      }
      llvm::StringRef::split((llvm::StringRef *)&v69, 64, (uint64_t)v81);
      v80 = *(_OWORD *)v81;
      v23 = *(void **)&v81[16];
      v22 = v82;
LABEL_56:
      *a3 = v69 + *((_QWORD *)&v69 + 1);
      v79 = v69;
      v45 = (const unsigned __int8 *)*((_QWORD *)&v69 + 1);
      if (!*((_QWORD *)&v69 + 1))
      {
        v48 = (llvm::MCAsmLexer *)(*((uint64_t (**)(unsigned int **))*a1 + 5))(a1);
        v21 = llvm::MCAsmLexer::getLoc(v48);
        v49 = "expected a symbol reference";
LABEL_63:
        *(_QWORD *)v81 = v49;
        WORD4(v82) = 259;
        v20 = (uint64_t)a1;
        return llvm::MCAsmParser::Error(v20, v21, (uint64_t)v81, 0, 0);
      }
      if (v22)
      {
        VariantKindForName = llvm::MCSymbolRefExpr::getVariantKindForName((uint64_t)v23, v22);
        if (VariantKindForName != 1)
        {
          v50 = VariantKindForName;
          v79 = v80;
          v45 = (const unsigned __int8 *)*((_QWORD *)&v80 + 1);
          goto LABEL_67;
        }
        v47 = a1[29];
        if (!*((_BYTE *)v47 + 180) || *((_BYTE *)v47 + 438))
        {
          v78 = 1283;
          __p = "invalid variant '";
          v76 = (uint64_t)v23;
          v77 = v22;
          v72[0] = (uint64_t)"'";
          v73 = 259;
          llvm::operator+((uint64_t *)&__p, v72, (uint64_t)v81);
          v20 = (uint64_t)a1;
          v21 = (uint64_t)v23;
          return llvm::MCAsmParser::Error(v20, v21, (uint64_t)v81, 0, 0);
        }
      }
      v50 = 0;
LABEL_67:
      v51 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      p_p = (void *)v79;
      Key = llvm::StringMapImpl::FindKey((uint64_t *)(v51 + 1232), (int8x16_t *)v79, v45);
      if (Key == -1
        || Key == (unint64_t)*(unsigned int *)(v51 + 1240)
        || (Symbol = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 1232) + 8 * Key) + 8)) == 0)
      {
        v55 = (llvm::MCContext *)(*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
        v56 = a1[29];
        v57 = *((unsigned __int8 *)v56 + 80);
        if (*((_BYTE *)v56 + 80))
        {
          llvm::StringRef::upper(&v79, (uint64_t)&__p);
          if (v76 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v76 >= 0)
            v45 = (const unsigned __int8 *)HIBYTE(v76);
          else
            v45 = v75;
        }
        WORD4(v82) = 261;
        *(_QWORD *)v81 = p_p;
        *(_QWORD *)&v81[8] = v45;
        Symbol = llvm::MCContext::getOrCreateSymbol(v55, (const char **)v81);
        if (v57 && SHIBYTE(v76) < 0)
          operator delete(__p);
      }
      if ((*(_DWORD *)(Symbol + 8) & 0x7000) == 0x2000)
      {
        v58 = *(unsigned __int8 **)(Symbol + 24);
        v59 = *v58;
        if (v59 == 4)
        {
          if (((*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v58 - 1) + 48))(v58 - 8) & 1) != 0)
          {
            if (v50)
            {
              v21 = *a3;
              v49 = "unexpected modifier on variable reference";
              goto LABEL_63;
            }
LABEL_97:
            result = 0;
            *a2 = *(_QWORD *)(Symbol + 24);
            return result;
          }
        }
        else if (!v50 && v59 == 1)
        {
          goto LABEL_97;
        }
      }
      v62 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      v43 = llvm::MCSymbolRefExpr::create(Symbol, v50, v62, v11);
LABEL_99:
      v63 = v43;
      result = 0;
      *a2 = v63;
      return result;
    case 4:
      Tok = (mlir::Token *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
      v11 = mlir::Token::getLoc(Tok);
      v25 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
      v28 = *(llvm::MCConstantExpr ***)(v25 + 24);
      v26 = v25 + 24;
      v27 = v28;
      if (*(_DWORD *)(v26 + 8) < 0x41u)
        v27 = (llvm::MCConstantExpr **)v26;
      v29 = *v27;
      v30 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      *a2 = llvm::MCConstantExpr::create(v29, v30, 0, 0);
      *a3 = mlir::Token::getEndLoc((mlir::Token *)a1[6]);
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      result = 0;
      if (*a1[6] != 2)
        return result;
      v80 = *(_OWORD *)(llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) + 8);
      llvm::StringRef::split((llvm::StringRef *)&v80, 64, (uint64_t)&v69);
      v31 = *((_QWORD *)&v69 + 1);
      if (*((_QWORD *)&v69 + 1) == *((_QWORD *)&v80 + 1))
      {
        v32 = 0;
      }
      else
      {
        v64 = llvm::MCSymbolRefExpr::getVariantKindForName(v70, v71);
        if (v64 == 1)
        {
          v78 = 1283;
          __p = "invalid variant '";
          v76 = v70;
          v77 = v71;
          v72[0] = (uint64_t)"'";
          v73 = 259;
          llvm::operator+((uint64_t *)&__p, v72, (uint64_t)v81);
          return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)v81, 0, 0);
        }
        v32 = v64;
        v80 = v69;
        v31 = *((_QWORD *)&v69 + 1);
      }
      if (v31 != 1 || (*(unsigned __int8 *)v80 | 4) != 0x66)
        return 0;
      DirectionalLocalSymbol = (llvm::MCSymbol *)llvm::MCContext::getDirectionalLocalSymbol((llvm::MCContext *)a1[27], (size_t)v29, *(unsigned __int8 *)v80 == 98);
      v66 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      *a2 = llvm::MCSymbolRefExpr::create((uint64_t)DirectionalLocalSymbol, v32, v66, 0);
      if (*((_QWORD *)&v80 + 1) == 1 && *(_BYTE *)v80 == 98 && llvm::MCSymbol::isUndefined(DirectionalLocalSymbol, 1))
      {
        v44 = "directional label undefined";
LABEL_53:
        *(_QWORD *)v81 = v44;
        WORD4(v82) = 259;
        v20 = (uint64_t)a1;
        v21 = v11;
        return llvm::MCAsmParser::Error(v20, v21, (uint64_t)v81, 0, 0);
      }
      else
      {
        v67 = a1[59];
        *(_QWORD *)v81 = v11;
        v83 = v67;
        v84 = DirectionalLocalSymbol;
        v68 = *(_OWORD *)(a1 + 57);
        *(_OWORD *)&v81[8] = *(_OWORD *)(a1 + 55);
        v82 = v68;
        *a3 = mlir::Token::getEndLoc((mlir::Token *)a1[6]);
        (*((void (**)(unsigned int **))*a1 + 23))(a1);
        return 0;
      }
    case 5:
      v13 = "literal value out of range for directive";
      goto LABEL_7;
    case 6:
      v33 = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)1);
      v34 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
      v35 = llvm::APFloat::APFloat((llvm::APFloatBase *)v81, v33, *(unsigned __int8 **)(v34 + 8), *(_QWORD *)(v34 + 16));
      v36 = *(void **)&v81[8];
      v37 = llvm::APFloatBase::PPCDoubleDouble(v35);
      if (v37 == v36)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v81[8], (llvm::APInt *)&__p);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v81[8], (uint64_t)&__p);
      if (v75 > 0x40)
      {
        v60 = *(llvm::MCConstantExpr **)__p;
        operator delete[](__p);
      }
      else
      {
        v60 = (llvm::MCConstantExpr *)__p;
      }
      v61 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      *a2 = llvm::MCConstantExpr::create(v60, v61, 0, 0);
      *a3 = mlir::Token::getEndLoc((mlir::Token *)a1[6]);
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if (v37 == *(void **)&v81[8])
        std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v81[16]);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v81[8]);
      return 0;
    case 12:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if (((*((uint64_t (**)(unsigned int **, uint64_t *, uint64_t *, uint64_t))*a1 + 30))(a1, a2, a3, a4) & 1) != 0)
        return 1;
      v38 = *a2;
      v39 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      v40 = 3;
      goto LABEL_51;
    case 13:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if (((*((uint64_t (**)(unsigned int **, uint64_t *, uint64_t *, uint64_t))*a1 + 30))(a1, a2, a3, a4) & 1) != 0)
        return 1;
      v38 = *a2;
      v39 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      v40 = 1;
      goto LABEL_51;
    case 14:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if (((*((uint64_t (**)(unsigned int **, uint64_t *, uint64_t *, uint64_t))*a1 + 30))(a1, a2, a3, a4) & 1) != 0)
        return 1;
      v38 = *a2;
      v39 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      v40 = 2;
      goto LABEL_51;
    case 17:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      *(_QWORD *)v81 = 0;
      if (((*((uint64_t (**)(unsigned int **, uint64_t *, _BYTE *))*a1 + 29))(a1, a2, v81) & 1) != 0)
        return 1;
      *a3 = mlir::Token::getEndLoc((mlir::Token *)a1[6]);
      *(_QWORD *)v81 = "expected ')'";
      WORD4(v82) = 259;
      return llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v81);
    case 19:
      if (*((_BYTE *)a1[33] + 16))
      {
        (*((void (**)(unsigned int **))*a1 + 23))(a1);
      }
      v13 = "brackets expression not supported on this target";
      goto LABEL_7;
    case 25:
      if (*((_BYTE *)a1[29] + 33))
      {
        v41 = llvm::MCContext::createTempSymbol((llvm::MCContext *)a1[27]);
        (*(void (**)(unsigned int *, uint64_t, _QWORD))(*(_QWORD *)a1[28] + 192))(a1[28], v41, 0);
        v42 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
        *a2 = llvm::MCSymbolRefExpr::create(v41, 0, v42, 0);
        *a3 = mlir::Token::getEndLoc((mlir::Token *)a1[6]);
        (*((void (**)(unsigned int **))*a1 + 23))(a1);
        return 0;
      }
      v13 = "cannot use . as current PC";
      goto LABEL_7;
    case 35:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if (((*((uint64_t (**)(unsigned int **, uint64_t *, uint64_t *, uint64_t))*a1 + 30))(a1, a2, a3, a4) & 1) != 0)
        return 1;
      v38 = *a2;
      v39 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      v40 = 0;
LABEL_51:
      v43 = llvm::MCUnaryExpr::create(v40, v38, v39, v11);
      goto LABEL_99;
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if (*a1[6] == 17)
      {
        (*((void (**)(unsigned int **))*a1 + 23))(a1);
        if (((*((uint64_t (**)(unsigned int **, uint64_t *, uint64_t *))*a1 + 29))(a1, a2, a3) & 1) != 0)
          return 1;
        *(_QWORD *)v81 = "expected ')'";
        WORD4(v82) = 259;
        if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v81))
        {
          return 1;
        }
        else
        {
          v17 = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1[1] + 192))(a1[1], *a2, v10, a1[27]);
          *a2 = v17;
          return v17 == 0;
        }
      }
      else
      {
        v13 = "expected '(' after operator";
LABEL_7:
        *(_QWORD *)v81 = v13;
        WORD4(v82) = 259;
        return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)v81, 0, 0);
      }
    default:
      v13 = "unknown token in expression";
      goto LABEL_7;
  }
}

uint64_t `anonymous namespace'::AsmParser::parseParenExpression(mlir::Token **a1, uint64_t *a2, _QWORD *a3)
{
  const char *v7;
  __int16 v8;

  *a2 = 0;
  v7 = 0;
  if (((*((uint64_t (**)(mlir::Token **))*a1 + 29))(a1) & 1) != 0)
    return 1;
  *a3 = mlir::Token::getEndLoc(a1[6]);
  v7 = "expected ')'";
  v8 = 259;
  if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)&v7))
    return 1;
  else
}

uint64_t `anonymous namespace'::AsmParser::parseAbsoluteExpression(_anonymous_namespace_::AsmParser *this, uint64_t *a2)
{
  uint64_t Loc;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  Loc = llvm::MCAsmLexer::getLoc((_anonymous_namespace_::AsmParser *)((char *)this + 40));
  v8[0] = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)this + 232))(this, &v10, v8) & 1) != 0)return 1;
  v6 = v10;
  v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  if ((llvm::MCExpr::evaluateAsAbsolute(v6, a2) & 1) != 0)
    return 0;
  v8[0] = "expected absolute expression";
  v9 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v8, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::checkForValidSection(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t STI;
  mlir::Token *Tok;
  uint64_t Loc;
  const char *v9;
  __int16 v10;

  if (*((_BYTE *)this + 813))
    return 0;
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  v4 = *(unsigned int *)(v3 + 152);
  if ((_DWORD)v4 && *(_QWORD *)(*(_QWORD *)(v3 + 144) + 32 * v4 - 32))
    return 0;
  v5 = *((_QWORD *)this + 28);
  STI = llvm::MCTargetAsmParser::getSTI(*((llvm::MCTargetAsmParser **)this + 1));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 176))(v5, 0, STI);
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v9 = "expected section directive before assembly directive";
  v10 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)&v9, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseParenExprOfDepth(mlir::Token **a1, int a2, uint64_t *a3, _QWORD *a4)
{
  _BOOL8 v8;
  mlir::Token *Tok;
  _QWORD v11[4];
  __int16 v12;

  v11[0] = 0;
  if (((*((uint64_t (**)(mlir::Token **, uint64_t *, _QWORD *))*a1 + 29))(a1, a3, v11) & 1) != 0)
    return 1;
  *a4 = mlir::Token::getEndLoc(a1[6]);
  v11[0] = "expected ')'";
  v12 = 259;
  if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v11))
    return 1;
  if (!a2)
    return 0;
  v8 = 1;
  {
    v8 = --a2 != 0;
    if (!a2)
      break;
    Tok = (mlir::Token *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    *a4 = mlir::Token::getEndLoc(Tok);
    v11[0] = "expected ')'";
    v12 = 259;
    if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v11))
      break;
  }
  return v8;
}

uint64_t `anonymous namespace'::HLASMAsmParser::parseStatement(uint64_t a1, uint64_t a2)
{
  int *Tok;
  llvm::MCAsmLexer *v5;
  int v6;
  int i;
  uint64_t v8;
  __int128 v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  int v15;
  llvm::MCAsmLexer *v16;
  uint64_t v17;
  __int128 v18;
  const void **v19;
  char *Loc;
  llvm::MCAsmLexer *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::MCContext *v25;
  uint64_t v26;
  int v27;
  void **v28;
  unint64_t v29;
  uint64_t Symbol;
  void *v31[2];
  unsigned __int8 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  void **v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  void *__p;
  unsigned int v43;

  Tok = (int *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  v5 = *(llvm::MCAsmLexer **)(a1 + 864);
  v6 = **((_DWORD **)v5 + 1);
  if (v6 == 9)
  {
    if (*(_QWORD *)(llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) + 16)
      && **(_BYTE **)(llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) + 8) != 13
      && **(_BYTE **)(llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) + 8) != 10)
    {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  for (i = *Tok; v6 == 11; v6 = **((_DWORD **)v5 + 1))
  {
    llvm::MCAsmLexer::Lex(v5);
    v5 = *(llvm::MCAsmLexer **)(a1 + 864);
  }
  if (v6 == 9
    && (**(_BYTE **)(llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) + 8) == 10
     || **(_BYTE **)(llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) + 8) == 13))
  {
LABEL_13:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 872) + 152))(*(_QWORD *)(a1 + 872));
LABEL_14:
    return 0;
  }
  if (i == 11)
  {
LABEL_32:
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 864) + 8);
    v18 = *(_OWORD *)v17;
    v41 = *(_QWORD *)(v17 + 16);
    v40 = v18;
    v19 = (const void **)(v17 + 24);
    v43 = *(_DWORD *)(v17 + 32);
    if (v43 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, v19);
    else
      __p = (void *)*v19;
    Loc = (char *)mlir::Token::getLoc((mlir::Token *)&v40);
    v38 = 0;
    v39 = 0;
    {
      *(_QWORD *)&v34 = "unexpected token at start of statement";
      LOWORD(v37) = 259;
      v11 = llvm::MCAsmParser::Error(a1, (uint64_t)Loc, (uint64_t)&v34, 0, 0);
    }
    else
    {
      while (1)
      {
        v21 = *(llvm::MCAsmLexer **)(a1 + 864);
        if (**((_DWORD **)v21 + 1) != 11)
          break;
        llvm::MCAsmLexer::Lex(v21);
      }
      v22 = (uint64_t)v38;
      v23 = v39;
      v34 = v40;
      v35 = v41;
      v37 = v43;
      if (v43 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v36, (const void **)&__p);
      else
        v36 = __p;
      if (v37 >= 0x41 && v36)
        operator delete[](v36);
    }
    if (v43 >= 0x41 && __p)
      operator delete[](__p);
    return v11;
  }
  v8 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  v9 = *(_OWORD *)v8;
  v41 = *(_QWORD *)(v8 + 16);
  v40 = v9;
  v10 = (const void **)(v8 + 24);
  v43 = *(_DWORD *)(v8 + 32);
  if (v43 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v10);
  else
    __p = (void *)*v10;
  v12 = mlir::Token::getLoc((mlir::Token *)&v40);
  v33 = v12;
  v38 = 0;
  v39 = 0;
  {
    v13 = "The HLASM Label has to be an Identifier";
    goto LABEL_18;
  }
  if (!(*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), &v40)
  {
    v14 = 1;
    if (v43 < 0x41)
      goto LABEL_25;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = *(llvm::MCAsmLexer **)(a1 + 864);
    if (**((_DWORD **)v16 + 1) != 11)
      break;
    llvm::MCAsmLexer::Lex(v16);
  }
  if (*(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) == 9)
  {
    v13 = "Cannot have just a label for an HLASM inline asm statement";
LABEL_18:
    *(_QWORD *)&v34 = v13;
    LOWORD(v37) = 259;
    v14 = llvm::MCAsmParser::Error(a1, v12, (uint64_t)&v34, 0, 0);
    if (v43 < 0x41)
      goto LABEL_25;
    goto LABEL_23;
  }
  v25 = *(llvm::MCContext **)(a1 + 216);
  v26 = *((_QWORD *)v25 + 18);
  v27 = *(unsigned __int8 *)(v26 + 80);
  if (*(_BYTE *)(v26 + 80))
  {
    llvm::StringRef::upper(&v38, (uint64_t)v31);
    v28 = (void **)v31[0];
    if ((v32 & 0x80u) == 0)
      v28 = v31;
    v29 = v32;
    if ((v32 & 0x80u) != 0)
      v29 = (unint64_t)v31[1];
  }
  else
  {
    v28 = v38;
    v29 = v39;
  }
  LOWORD(v37) = 261;
  *(_QWORD *)&v34 = v28;
  *((_QWORD *)&v34 + 1) = v29;
  Symbol = llvm::MCContext::getOrCreateSymbol(v25, (const char **)&v34);
  if (v27 && (char)v32 < 0)
    operator delete(v31[0]);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), Symbol, v12);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 872) + 192))(*(_QWORD *)(a1 + 872), Symbol, v12);
    llvm::MCGenDwarfLabelEntry::Make(Symbol, *(_QWORD *)(a1 + 224), *(uint64_t **)(a1 + 240), (unint64_t *)&v33);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), Symbol);
  v14 = 0;
  if (v43 >= 0x41)
  {
LABEL_23:
    if (__p)
      operator delete[](__p);
  }
LABEL_25:
  if (!v14)
    goto LABEL_32;
  v15 = **(_DWORD **)(a1 + 48);
  if (v15)
  {
    while (v15 != 9)
    {
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
      v15 = **(_DWORD **)(a1 + 48);
      if (!v15)
        return 1;
    }
    llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
  }
  return 1;
}

void `anonymous namespace'::AsmParser::DiagHandler(_anonymous_namespace_::AsmParser *this, const llvm::SMDiagnostic *a2, void *a3)
{
  llvm::raw_ostream *v5;
  uint64_t *v6;
  char *v7;
  int BufferContainingLoc;
  int v9;
  unsigned int v10;
  BOOL v11;
  size_t v12;
  const void *v13;
  void **p_dst;
  void (*v15)(_anonymous_namespace_::AsmParser *, _QWORD);
  uint64_t v16;
  uint64_t v17;
  int LineAndColumn;
  int v19;
  void **v20;
  size_t v21;
  int v22;
  char *v23;
  BOOL v24;
  size_t v25;
  int v26;
  char *v27;
  BOOL v28;
  size_t v29;
  void (*v30)(_anonymous_namespace_::AsmParser *, _QWORD);
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  void **__dst;
  size_t v37;
  int64_t v38;
  _BYTE v39[16];
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *__p;
  void *v47;
  void *v48;
  unsigned int v49;
  _QWORD v50[21];

  v50[20] = *MEMORY[0x1E0C80C00];
  v5 = (llvm::raw_ostream *)llvm::errs(this);
  v6 = *(uint64_t **)this;
  v7 = (char *)*((_QWORD *)this + 1);
  BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)this, (unint64_t)v7);
  v9 = llvm::SourceMgr::FindBufferContainingLoc(*((uint64_t **)a2 + 30), *((_QWORD *)a2 + 58));
  v10 = llvm::SourceMgr::FindBufferContainingLoc(v6, (unint64_t)v7);
  if (*((_QWORD *)a2 + 31))
    v11 = 0;
  else
    v11 = v10 >= 2;
  if (v11)
    llvm::SourceMgr::PrintIncludeStack((llvm::raw_ostream *)v6, *(const char **)(*v6 + 24 * (v10 - 1) + 16), v5);
  if (!*((_QWORD *)a2 + 57) || BufferContainingLoc != v9)
  {
    v15 = (void (*)(_anonymous_namespace_::AsmParser *, _QWORD))*((_QWORD *)a2 + 31);
    if (v15)
    {
      v15(this, *((_QWORD *)a2 + 32));
    }
    else
    {
      v33 = (_QWORD *)(*(uint64_t (**)(const llvm::SMDiagnostic *))(*(_QWORD *)a2 + 48))(a2);
      llvm::MCContext::diagnose(v33, (uint64_t)this);
    }
    return;
  }
  v12 = *((_QWORD *)a2 + 56);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v13 = (const void *)*((_QWORD *)a2 + 55);
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v37 = v12;
    v38 = v17 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_18;
  }
  HIBYTE(v38) = *((_QWORD *)a2 + 56);
  p_dst = (void **)&__dst;
  if (v12)
LABEL_18:
    memmove(p_dst, v13, v12);
  *((_BYTE *)p_dst + v12) = 0;
  LineAndColumn = llvm::SourceMgr::getLineAndColumn(v6, v7, BufferContainingLoc);
  v19 = ~llvm::SourceMgr::getLineAndColumn(*((uint64_t **)a2 + 30), *((char **)a2 + 58), BufferContainingLoc)+ LineAndColumn+ *((_DWORD *)a2 + 114);
  if (v38 >= 0)
    v20 = (void **)&__dst;
  else
    v20 = __dst;
  if (v38 >= 0)
    v21 = HIBYTE(v38);
  else
    v21 = v37;
  v22 = *((char *)this + 79);
  v23 = (char *)this + 56;
  v24 = v22 < 0;
  if (v22 < 0)
    v23 = (char *)*((_QWORD *)this + 7);
  v25 = *((unsigned __int8 *)this + 79);
  if (v24)
    v25 = *((_QWORD *)this + 8);
  v26 = *((char *)this + 103);
  v27 = (char *)this + 80;
  v28 = v26 < 0;
  if (v26 < 0)
    v27 = (char *)*((_QWORD *)this + 10);
  v29 = *((unsigned __int8 *)this + 103);
  if (v28)
    v29 = *((_QWORD *)this + 11);
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v39, *(_QWORD *)this, *((_QWORD *)this + 1), v20, v21, v19, *((_DWORD *)this + 11), *((_DWORD *)this + 12), v23, v25, v27, v29, *((const void **)this + 13), (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3, 0, 0);
  v30 = (void (*)(_anonymous_namespace_::AsmParser *, _QWORD))*((_QWORD *)a2 + 31);
  if (v30)
  {
    v30(this, *((_QWORD *)a2 + 32));
    v31 = (char *)v48;
    v32 = v49;
    if (!v49)
      goto LABEL_43;
  }
  else
  {
    v34 = (_QWORD *)(*(uint64_t (**)(const llvm::SMDiagnostic *))(*(_QWORD *)a2 + 48))(a2);
    llvm::MCContext::diagnose(v34, (uint64_t)v39);
    v31 = (char *)v48;
    v32 = v49;
    if (!v49)
      goto LABEL_43;
  }
  v35 = 40 * v32;
  do
  {
    if (v31[v35 - 1] < 0)
      operator delete(*(void **)&v31[v35 - 24]);
    v35 -= 40;
  }
  while (v35);
  v31 = (char *)v48;
LABEL_43:
  if (v31 != (char *)v50)
    free(v31);
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if ((v45 & 0x80000000) == 0)
  {
    if ((v43 & 0x80000000) == 0)
      goto LABEL_49;
LABEL_53:
    operator delete(v42);
    if ((v41 & 0x80000000) == 0)
    {
LABEL_50:
      if ((SHIBYTE(v38) & 0x80000000) == 0)
        return;
LABEL_55:
      operator delete(__dst);
      return;
    }
    goto LABEL_54;
  }
  operator delete(v44);
  if (v43 < 0)
    goto LABEL_53;
LABEL_49:
  if ((v41 & 0x80000000) == 0)
    goto LABEL_50;
LABEL_54:
  operator delete(v40);
  if (SHIBYTE(v38) < 0)
    goto LABEL_55;
}

void `anonymous namespace'::AsmParser::~AsmParser(_anonymous_namespace_::AsmParser *this)
{
  void *v1;

  operator delete(v1);
}

{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  char *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  void *v17;
  uint64_t v18;

  *(_QWORD *)this = off_1E0E1A740;
  *(_QWORD *)(*((_QWORD *)this + 28) + 288) = 0;
  *(_OWORD *)(*((_QWORD *)this + 30) + 48) = *(_OWORD *)((char *)this + 248);
  if (*((_DWORD *)this + 213))
  {
    v2 = *((unsigned int *)this + 212);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        v4 = *(llvm **)(*((_QWORD *)this + 105) + v3);
        if (v4 != (llvm *)-8 && v4 != 0)
          llvm::deallocate_buffer(v4, (void *)(*(_QWORD *)v4 + 17));
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*((void **)this + 105));
  if (*((_DWORD *)this + 207))
  {
    v6 = *((unsigned int *)this + 206);
    if ((_DWORD)v6)
    {
      v7 = 0;
      do
      {
        v8 = *(llvm **)(*((_QWORD *)this + 102) + v7);
        if (v8 != (llvm *)-8 && v8 != 0)
          llvm::deallocate_buffer(v8, (void *)(*(_QWORD *)v8 + 17));
        v7 += 8;
      }
      while (8 * v6 != v7);
    }
  }
  free(*((void **)this + 102));
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)this + 784, *((_QWORD **)this + 99));
  v10 = (char *)*((_QWORD *)this + 92);
  if (v10 != (char *)this + 752)
    free(v10);
  v11 = (char *)*((_QWORD *)this + 62);
  if (v11 != (char *)this + 512)
    free(v11);
  std::deque<llvm::MCAsmMacro>::~deque[abi:nn180100]((uint64_t)this + 384);
  v12 = (void *)*((_QWORD *)this + 45);
  if (v12)
  {
    *((_QWORD *)this + 46) = v12;
    operator delete(v12);
  }
  if (*((_DWORD *)this + 87))
  {
    v13 = *((unsigned int *)this + 86);
    if ((_DWORD)v13)
    {
      v14 = 0;
      do
      {
        v15 = *(llvm **)(*((_QWORD *)this + 42) + v14);
        if (v15 != (llvm *)-8 && v15 != 0)
          llvm::deallocate_buffer(v15, (void *)(*(_QWORD *)v15 + 25));
        v14 += 8;
      }
      while (8 * v13 != v14);
    }
  }
  free(*((void **)this + 42));
  v17 = (void *)*((_QWORD *)this + 39);
  if (v17)
  {
    *((_QWORD *)this + 40) = v17;
    operator delete(v17);
  }
  v18 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  llvm::AsmLexer::~AsmLexer((_anonymous_namespace_::AsmParser *)((char *)this + 40));
  llvm::MCAsmParser::~MCAsmParser(this);
}

uint64_t `anonymous namespace'::AsmParser::parseStatement(llvm::MCAsmParser *this, _QWORD *a2, uint64_t a3)
{
  int **v6;
  int i;
  uint64_t v8;
  uint64_t Tok;
  __int128 v10;
  const void **v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  size_t *v15;
  size_t *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  int8x16_t *v33;
  const unsigned __int8 *v34;
  int Key;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  unint64_t v40;
  int v41;
  size_t v42;
  size_t v43;
  char *v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  llvm::MCAsmParser *v50;
  int v51;
  char *v52;
  int v53;
  __int16 v54;
  _BOOL8 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  uint64_t *v67;
  char v68;
  llvm::MCAsmParser *v69;
  char v70;
  llvm::MCAsmParser *v71;
  int v72;
  uint64_t Symbol;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, size_t, size_t, char *);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::MCContext *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  void *v93;
  llvm::MCAsmParser *v94;
  unsigned int v95;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  llvm::MCAsmParser *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  llvm::MCAsmParser *v103;
  unsigned int v104;
  int v105;
  _anonymous_namespace_::AsmParser *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  llvm::APFloatBase *v110;
  _BOOL4 v111;
  llvm::MCTargetAsmParser **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _anonymous_namespace_::AsmParser *v116;
  int v117;
  uint64_t v118;
  _anonymous_namespace_::AsmParser *v119;
  char v120;
  char *v121;
  llvm::MCAsmParser *v122;
  char v123;
  __int128 v124;
  uint64_t v125;
  void *v126;
  unsigned int v127;
  uint64_t v128[4];
  __int16 v129;
  __int128 v130;
  uint64_t v131;
  void *__p;
  unsigned int v133;
  uint64_t v134[4];
  __int16 v135;
  size_t __n[2];
  char *Loc;
  __int128 v138;
  uint64_t v139;
  void *v140;
  unsigned int v141;
  __int128 v142;
  uint64_t v143;
  void *v144;
  unsigned int v145;

  v6 = (int **)((char *)this + 48);
  for (i = **((_DWORD **)this + 6); i == 11; i = **v6)
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
  if (i == 9)
  {
    if (!*(_QWORD *)(llvm::MCAsmParser::getTok(this) + 16)
      || **(_BYTE **)(llvm::MCAsmParser::getTok(this) + 8) == 13
      || **(_BYTE **)(llvm::MCAsmParser::getTok(this) + 8) == 10)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 28) + 152))(*((_QWORD *)this + 28));
    }
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
    return 0;
  }
  Tok = llvm::MCAsmParser::getTok(this);
  v10 = *(_OWORD *)Tok;
  v139 = *(_QWORD *)(Tok + 16);
  v138 = v10;
  v11 = (const void **)&v140;
  v12 = (const void **)(Tok + 24);
  v141 = *(_DWORD *)(Tok + 32);
  if (v141 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v140, v12);
  else
    v140 = (void *)*v12;
  Loc = (char *)mlir::Token::getLoc((mlir::Token *)&v138);
  __n[0] = 0;
  __n[1] = 0;
  *((_QWORD *)this + 34) = mlir::Token::getLoc((mlir::Token *)&v138);
  switch(**((_DWORD **)this + 6))
  {
    case 4:
      v13 = llvm::MCAsmParser::getTok(this);
      v16 = *(size_t **)(v13 + 24);
      v14 = v13 + 24;
      v15 = v16;
      if (*(_DWORD *)(v14 + 8) < 0x41u)
        v15 = (size_t *)v14;
      v17 = *v15;
      if ((*v15 & 0x8000000000000000) != 0)
      {
        if (!*((_BYTE *)this + 305))
          goto LABEL_73;
        v32 = 0;
        __n[0] = (size_t)"";
        goto LABEL_38;
      }
      *(_OWORD *)__n = *(_OWORD *)(llvm::MCAsmParser::getTok(this) + 8);
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
      if (**((_DWORD **)this + 6) == 10 || *((_BYTE *)this + 305))
        goto LABEL_39;
      goto LABEL_73;
    case 8:
      v18 = Loc;
      v19 = *((_QWORD *)this + 45);
      v20 = *((_QWORD *)this + 46);
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
      v21 = llvm::MCAsmParser::getTok(this);
      v24 = *(uint64_t **)(v21 + 24);
      v22 = v21 + 24;
      v23 = v24;
      if (*(_DWORD *)(v22 + 8) < 0x41u)
        v23 = (uint64_t *)v22;
      v25 = *v23;
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
      v26 = llvm::MCAsmParser::getTok(this);
      v27 = *(_QWORD *)(v26 + 8);
      v28 = *(_QWORD *)(v26 + 16);
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
      if (v19 != v20)
        goto LABEL_85;
      v29 = v28 - 2;
      if (v28)
        v30 = v27 + 1;
      else
        v30 = v27;
      if (v28 - (unint64_t)(v28 != 0) < v29)
        v29 = v28 - (v28 != 0);
      *((_QWORD *)this + 55) = v30;
      *((_QWORD *)this + 56) = v29;
      *((_QWORD *)this + 57) = v25;
      *((_QWORD *)this + 58) = v18;
      *((_DWORD *)this + 118) = *((_DWORD *)this + 74);
      if (*((_QWORD *)this + 61))
        goto LABEL_85;
      v8 = 0;
      *((_QWORD *)this + 60) = v30;
      *((_QWORD *)this + 61) = v29;
      goto LABEL_86;
    case 0x15:
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
      v31 = "{";
      goto LABEL_37;
    case 0x16:
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
      v31 = "}";
      goto LABEL_37;
    case 0x18:
      if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1)))
        goto LABEL_33;
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
      v31 = "*";
LABEL_37:
      __n[0] = (size_t)v31;
      v17 = -1;
      v32 = 1;
      goto LABEL_38;
    case 0x19:
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
      v31 = ".";
      goto LABEL_37;
    default:
LABEL_33:
      if ((*(unsigned int (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)this + 192))(this, __n))
      {
        if (!*((_BYTE *)this + 305))
        {
LABEL_73:
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
          v44 = Loc;
          v45 = "unexpected token at start of statement";
          goto LABEL_74;
        }
        v32 = 0;
        __n[0] = (size_t)"";
        v17 = -1;
LABEL_38:
        __n[1] = v32;
      }
      else
      {
        v17 = -1;
      }
LABEL_39:
      llvm::StringRef::lower(__n, (uint64_t)&v142);
      if (v143 >= 0)
        v33 = (int8x16_t *)&v142;
      else
        v33 = (int8x16_t *)v142;
      if (v143 >= 0)
        v34 = (const unsigned __int8 *)HIBYTE(v143);
      else
        v34 = (const unsigned __int8 *)*((_QWORD *)&v142 + 1);
      Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 102, v33, v34);
      v36 = *((_QWORD *)this + 102);
      if (Key == -1)
      {
        v37 = v36 + 8 * *((unsigned int *)this + 206);
        if ((SHIBYTE(v143) & 0x80000000) == 0)
        {
LABEL_47:
          if (v37 != v36 + 8 * *((unsigned int *)this + 206))
            goto LABEL_48;
          goto LABEL_53;
        }
      }
      else
      {
        v37 = v36 + 8 * Key;
        if ((SHIBYTE(v143) & 0x80000000) == 0)
          goto LABEL_47;
      }
      operator delete((void *)v142);
      if (v37 != *((_QWORD *)this + 102) + 8 * *((unsigned int *)this + 206))
      {
LABEL_48:
        v38 = *(_DWORD *)(*(_QWORD *)v37 + 8);
        switch(v38)
        {
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
            v39 = (_QWORD *)((char *)this + 300);
            a2 = (_QWORD *)*((_QWORD *)this + 40);
            v40 = *((_QWORD *)this + 41);
            if ((unint64_t)a2 >= v40)
            {
              v11 = (const void **)*((_QWORD *)this + 39);
              a3 = (const void **)a2 - v11;
              v46 = a3 + 1;
              if ((unint64_t)(a3 + 1) >> 61)
                abort();
              v47 = v40 - (_QWORD)v11;
              if (v47 >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v17 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v17 = v46;
              if (v17)
              {
                if (v17 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v48 = (char *)operator new(8 * v17);
              }
              else
              {
                v48 = 0;
              }
              v52 = &v48[8 * a3];
              *(_QWORD *)v52 = *v39;
              v6 = (int **)(v52 + 8);
              if (a2 != v11)
              {
                do
                {
                  v53 = *((_DWORD *)a2-- - 2);
                  v54 = *((_WORD *)a2 + 2);
                  *((_DWORD *)v52 - 2) = v53;
                  v52 -= 8;
                  *((_WORD *)v52 + 2) = v54;
                }
                while (a2 != v11);
                a2 = (_QWORD *)*((_QWORD *)this + 39);
              }
              *((_QWORD *)this + 39) = v52;
              *((_QWORD *)this + 40) = v6;
              *((_QWORD *)this + 41) = &v48[8 * v17];
              if (a2)
                operator delete(a2);
            }
            else
            {
              *a2++ = *v39;
              v6 = (int **)a2;
            }
            *((_QWORD *)this + 40) = v6;
            *((_DWORD *)this + 75) = 1;
            if (*((_BYTE *)this + 305))
              goto LABEL_84;
            *(_QWORD *)&v142 = 0;
            if (((*(uint64_t (**)(llvm::MCAsmParser *, __int128 *))(*(_QWORD *)this + 256))(this, &v142) & 1) != 0
              || llvm::MCAsmParser::parseEOL(this))
            {
              goto LABEL_155;
            }
            switch(v38)
            {
              case 'R':
              case 'X':
                goto LABEL_188;
              case 'S':
                v56 = v142 == 0;
                goto LABEL_187;
              case 'T':
                v89 = ~(_QWORD)v142;
                goto LABEL_186;
              case 'U':
                v56 = (uint64_t)v142 > 0;
                goto LABEL_187;
              case 'V':
                v56 = (uint64_t)v142 < 1;
                goto LABEL_187;
              case 'W':
                v89 = v142;
LABEL_186:
                v56 = v89 >> 63;
LABEL_187:
                *(_QWORD *)&v142 = v56;
LABEL_188:
                v8 = 0;
                v90 = (_QWORD)v142 == 0;
                *((_BYTE *)this + 304) = (_QWORD)v142 != 0;
                *((_BYTE *)this + 305) = v90;
                break;
              default:
                goto LABEL_54;
            }
            goto LABEL_86;
          case 'Y':
            v67 = (uint64_t *)this;
            v68 = 1;
            goto LABEL_127;
          case 'Z':
            v67 = (uint64_t *)this;
            v68 = 0;
LABEL_127:
            goto LABEL_86;
          case '[':
            v69 = this;
            v70 = 1;
            goto LABEL_131;
          case '\\':
            v71 = this;
            v72 = 1;
            goto LABEL_133;
          case ']':
            v69 = this;
            v70 = 0;
LABEL_131:
            goto LABEL_86;
          case '^':
            v71 = this;
            v72 = 0;
LABEL_133:
            goto LABEL_86;
          case '_':
            v50 = this;
            v51 = 1;
            goto LABEL_135;
          case 'a':
            v50 = this;
            v51 = 0;
LABEL_135:
            break;
          case 'b':
            break;
          case 'c':
            break;
          case 'd':
            break;
          default:
            goto LABEL_54;
        }
        goto LABEL_86;
      }
LABEL_53:
      v38 = 0;
LABEL_54:
      if (*((_BYTE *)this + 305))
      {
LABEL_84:
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 224))(this);
LABEL_85:
        v8 = 0;
        goto LABEL_86;
      }
      v41 = **v6;
      if (v41 != 10)
        goto LABEL_95;
      if (((*(uint64_t (**)(_QWORD, __int128 *))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), &v138) & 1) != 0)
      {
        if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 264))(this) & 1) == 0)
        {
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
          v42 = __n[0];
          v43 = __n[1];
          if (__n[1] == 1 && *(_BYTE *)__n[0] == 46)
          {
            v44 = Loc;
            v45 = "invalid use of pseudo-symbol '.' as a label";
LABEL_74:
            *(_QWORD *)&v142 = v45;
            LOWORD(v145) = 259;
            v49 = (uint64_t *)&v142;
LABEL_75:
            v8 = llvm::MCAsmParser::Error((uint64_t)this, (uint64_t)v44, (uint64_t)v49, 0, 0);
            goto LABEL_86;
          }
          if (v17 == -1)
          {
            if (a3 && *((_BYTE *)this + 813))
            {
              v79 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 32))(this);
              *(_QWORD *)&v142 = (*(uint64_t (**)(uint64_t, size_t, size_t, uint64_t, char *, uint64_t))(*(_QWORD *)a3 + 24))(a3, v42, v43, v79, Loc, 1);
              *((_QWORD *)&v142 + 1) = v80;
              v81 = a2[11];
              LODWORD(v128[0]) = 7;
              v134[0] = __n[1];
              llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(v81, (int *)v128, (uint64_t *)&Loc, v134, &v142);
              *(_OWORD *)__n = v142;
            }
            v82 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 48))(this);
            LOWORD(v145) = 261;
            v142 = *(_OWORD *)__n;
            Symbol = llvm::MCContext::getOrCreateSymbol(v82, (const char **)&v142);
          }
          else
          {
            Symbol = llvm::MCContext::createDirectionalLocalSymbol(*((llvm::MCContext **)this + 27), v17);
          }
          v83 = Symbol;
          if (*(_DWORD *)llvm::MCAsmParser::getTok(this) == 38)
          {
            v84 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 200))(this);
            v86 = v85;
            llvm::MCAsmLexer::Lex((llvm::MCAsmParser *)((char *)this + 40));
            LODWORD(v142) = 9;
            *((_QWORD *)&v142 + 1) = v84;
            v143 = v86;
            v145 = 64;
            v144 = 0;
            *((_BYTE *)this + 147) = 0;
            llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)v6, *((_QWORD *)this + 6), (unint64_t)&v142);
            if (v145 >= 0x41)
            {
              if (v144)
                operator delete[](v144);
            }
          }
          if (*(_DWORD *)llvm::MCAsmParser::getTok(this) == 9)
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
          if (*(_BYTE *)(*((_QWORD *)this + 29) + 18) && *((_BYTE *)this + 288) && (*(_BYTE *)(v83 + 8) & 0x20) != 0)
          {
            v92 = *((_QWORD *)this + 34);
            *(_QWORD *)&v142 = "non-private labels cannot appear between .cfi_startproc / .cfi_endproc pairs";
            LOWORD(v145) = 259;
            if (llvm::MCAsmParser::Error((uint64_t)this, v92, (uint64_t)&v142, 0, 0))
            {
              v44 = (char *)*((_QWORD *)this + 35);
              v134[0] = (uint64_t)"previous .cfi_startproc was here";
              v135 = 259;
              v49 = v134;
              goto LABEL_75;
            }
          }
          else if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t, size_t))(*(_QWORD *)this + 104))(this, __n[0], __n[1]) & 1) == 0)
          {
            (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)this + 1) + 168))(*((_QWORD *)this + 1), v83, Loc);
            if (!*(_BYTE *)(*((_QWORD *)this + 1) + 120))
              (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)this + 28) + 192))(*((_QWORD *)this + 28), v83, Loc);
            {
              v87 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 56))(this);
              v88 = (uint64_t *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 32))(this);
              llvm::MCGenDwarfLabelEntry::Make(v83, v87, v88, (unint64_t *)&Loc);
            }
            (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), v83);
          }
          goto LABEL_85;
        }
        goto LABEL_155;
      }
      v41 = **v6;
LABEL_95:
      if (v41 == 28
        && (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1)))
      {
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
        goto LABEL_86;
      }
      if ((*((_BYTE *)this + 432) & 1) != 0)
      {
        v57 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 48))(this);
        v58 = llvm::StringMapImpl::FindKey((uint64_t *)(v57 + 2064), (int8x16_t *)__n[0], (const unsigned __int8 *)__n[1]);
        if (v58 != -1 && v58 != (unint64_t)*(unsigned int *)(v57 + 2072))
        {
          goto LABEL_86;
        }
      }
      v59 = __n[1];
      if (__n[1] && *(_BYTE *)__n[0] == 46 && __n[1] != 1)
      {
        v60 = *((_QWORD *)this + 1);
        v61 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 56))(this);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 184))(v60, v61);
        v62 = *((_QWORD *)this + 1);
        v130 = v138;
        v131 = v139;
        v133 = v141;
        if (v141 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v11);
        else
          __p = v140;
        v8 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v62 + 72))(v62, &v130);
        if (v133 >= 0x41 && __p)
          operator delete[](__p);
        if (v8 >= 2)
        {
          v74 = llvm::StringMap<std::pair<llvm::MCAsmParserExtension *,BOOL (*)(llvm::MCAsmParserExtension *,llvm::StringRef,llvm::SMLoc)>,llvm::MallocAllocator>::lookup((uint64_t)this + 336, (int8x16_t *)__n[0], (const unsigned __int8 *)__n[1]);
          if (v74)
          {
            v8 = v75(v74, __n[0], __n[1], Loc);
          }
          else
          {
            switch(v38)
            {
              case 1:
              case 2:
                v94 = this;
                v95 = 0;
                goto LABEL_321;
              case 3:
                v94 = this;
                v95 = 1;
                goto LABEL_321;
              case 4:
                LOBYTE(v134[0]) = 0;
                goto LABEL_215;
              case 5:
              case 6:
                LOBYTE(v134[0]) = 1;
LABEL_215:
                *(_QWORD *)&v142 = this;
                *((_QWORD *)&v142 + 1) = v134;
                goto LABEL_324;
              case 7:
              case 20:
                v91 = 1;
                goto LABEL_219;
              case 8:
              case 10:
              case 11:
              case 18:
              case 24:
                v91 = 2;
                goto LABEL_219;
              case 9:
                goto LABEL_86;
              case 12:
              case 13:
              case 14:
              case 22:
                v91 = 4;
                goto LABEL_219;
              case 15:
              case 16:
                v91 = 8;
                goto LABEL_219;
              case 17:
                *(_QWORD *)&v142 = this;
                goto LABEL_324;
              case 19:
                v91 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 48))(this)
                                            + 144)
                                + 8);
LABEL_219:
                LODWORD(v134[0]) = v91;
                *(_QWORD *)&v142 = this;
                *((_QWORD *)&v142 + 1) = v134;
                goto LABEL_324;
              case 21:
              case 43:
                v93 = llvm::APFloatBase::IEEEdouble(0);
                goto LABEL_202;
              case 23:
              case 41:
              case 42:
                v93 = llvm::APFloatBase::IEEEsingle(0);
LABEL_202:
                *(_QWORD *)&v142 = this;
                *((_QWORD *)&v142 + 1) = v93;
                goto LABEL_324;
              case 25:
              case 32:
              case 77:
              case 78:
                v135 = 261;
                v134[0] = __n[0];
                v134[1] = __n[1];
                v128[0] = (uint64_t)" not currently supported for this target";
                v129 = 259;
                llvm::operator+(v134, v128, (uint64_t)&v142);
                goto LABEL_195;
              case 26:
              case 31:
                v97 = __n[0];
                v98 = __n[1];
                v99 = this;
                v100 = 2;
                goto LABEL_223;
              case 27:
                v97 = __n[0];
                v98 = __n[1];
                v99 = this;
                v100 = 1;
                goto LABEL_223;
              case 28:
                v108 = __n[0];
                v109 = __n[1];
                v110 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(0);
                goto LABEL_225;
              case 29:
                v97 = __n[0];
                v98 = __n[1];
                v99 = this;
                v100 = 4;
LABEL_223:
                goto LABEL_86;
              case 30:
                v108 = __n[0];
                v109 = __n[1];
                v110 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(0);
LABEL_225:
                goto LABEL_86;
              case 33:
              case 39:
                v101 = __n[0];
                v102 = __n[1];
                v103 = this;
                v104 = 2;
                goto LABEL_228;
              case 34:
                v101 = __n[0];
                v102 = __n[1];
                v103 = this;
                v104 = 1;
                goto LABEL_228;
              case 35:
                v101 = __n[0];
                v102 = __n[1];
                v103 = this;
                v104 = 8;
                goto LABEL_228;
              case 36:
              case 38:
                v101 = __n[0];
                v102 = __n[1];
                v103 = this;
                v104 = 4;
                goto LABEL_228;
              case 37:
              case 40:
                v101 = __n[0];
                v102 = __n[1];
                v103 = this;
                v104 = 12;
LABEL_228:
                goto LABEL_86;
              case 44:
                v111 = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 48))(this)
                                            + 144)
                                + 339) == 0;
                v112 = (llvm::MCTargetAsmParser **)this;
                goto LABEL_235;
              case 45:
                v111 = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 48))(this)
                                            + 144)
                                + 339) == 0;
                v112 = (llvm::MCTargetAsmParser **)this;
                goto LABEL_238;
              case 46:
                v112 = (llvm::MCTargetAsmParser **)this;
                v111 = 0;
                goto LABEL_235;
              case 47:
                v112 = (llvm::MCTargetAsmParser **)this;
                v111 = 0;
                v113 = 2;
                goto LABEL_239;
              case 48:
                v112 = (llvm::MCTargetAsmParser **)this;
                v111 = 0;
                goto LABEL_238;
              case 49:
                v112 = (llvm::MCTargetAsmParser **)this;
                v111 = 1;
LABEL_235:
                v113 = 1;
                goto LABEL_239;
              case 50:
                v112 = (llvm::MCTargetAsmParser **)this;
                v111 = 1;
                v113 = 2;
                goto LABEL_239;
              case 51:
                v112 = (llvm::MCTargetAsmParser **)this;
                v111 = 1;
LABEL_238:
                v113 = 4;
LABEL_239:
                goto LABEL_86;
              case 52:
                goto LABEL_86;
              case 53:
                goto LABEL_86;
              case 54:
                goto LABEL_86;
              case 55:
                goto LABEL_86;
              case 56:
                goto LABEL_86;
              case 57:
                goto LABEL_86;
              case 58:
                goto LABEL_86;
              case 59:
                goto LABEL_84;
              case 60:
              case 61:
                v105 = 9;
                goto LABEL_323;
              case 62:
                v105 = 16;
                goto LABEL_323;
              case 63:
                v105 = 18;
                goto LABEL_323;
              case 64:
                v105 = 19;
                goto LABEL_323;
              case 65:
                v105 = 21;
                goto LABEL_323;
              case 66:
                v105 = 23;
                goto LABEL_323;
              case 67:
                v105 = 25;
                goto LABEL_323;
              case 68:
                v105 = 26;
                goto LABEL_323;
              case 69:
                v105 = 27;
                goto LABEL_323;
              case 70:
                v105 = 1;
                goto LABEL_323;
              case 71:
              case 72:
                v106 = this;
                v107 = 0;
                goto LABEL_257;
              case 73:
                v106 = this;
                v107 = 1;
LABEL_257:
                goto LABEL_86;
              case 74:
                goto LABEL_86;
              case 75:
                goto LABEL_86;
              case 76:
                goto LABEL_86;
              case 79:
                goto LABEL_86;
              case 80:
                goto LABEL_86;
              case 81:
                goto LABEL_86;
              case 101:
              case 102:
                goto LABEL_86;
              case 103:
                goto LABEL_86;
              case 104:
                goto LABEL_86;
              case 105:
                goto LABEL_86;
              case 106:
                *(_QWORD *)&v142 = "unsupported directive '.stabs'";
                LOWORD(v145) = 259;
LABEL_195:
                v8 = llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)&v142, 0, 0);
                goto LABEL_86;
              case 107:
                goto LABEL_86;
              case 108:
                goto LABEL_86;
              case 109:
                goto LABEL_86;
              case 110:
                goto LABEL_86;
              case 111:
                goto LABEL_86;
              case 112:
                goto LABEL_86;
              case 113:
                goto LABEL_86;
              case 114:
                v114 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 56))(this);
                (*(void (**)(uint64_t))(*(_QWORD *)v114 + 816))(v114);
                goto LABEL_85;
              case 115:
                goto LABEL_86;
              case 116:
                v115 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 56))(this);
                (*(void (**)(uint64_t))(*(_QWORD *)v115 + 824))(v115);
                goto LABEL_85;
              case 117:
                goto LABEL_86;
              case 118:
                goto LABEL_86;
              case 119:
                goto LABEL_86;
              case 120:
                goto LABEL_86;
              case 121:
                goto LABEL_86;
              case 122:
                goto LABEL_86;
              case 123:
                goto LABEL_86;
              case 124:
                goto LABEL_86;
              case 125:
                goto LABEL_86;
              case 126:
                goto LABEL_86;
              case 127:
                goto LABEL_86;
              case 128:
                goto LABEL_86;
              case 129:
                v116 = this;
                v117 = 1;
                goto LABEL_293;
              case 130:
                v116 = this;
                v117 = 0;
LABEL_293:
                goto LABEL_86;
              case 131:
                goto LABEL_86;
              case 132:
                goto LABEL_86;
              case 133:
                goto LABEL_86;
              case 134:
                goto LABEL_86;
              case 135:
                goto LABEL_86;
              case 136:
                goto LABEL_86;
              case 137:
                if (llvm::MCAsmParser::parseEOL(this))
                  goto LABEL_155;
                v118 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 56))(this);
                (*(void (**)(uint64_t))(*(_QWORD *)v118 + 1008))(v118);
                goto LABEL_85;
              case 138:
                goto LABEL_86;
              case 139:
                goto LABEL_86;
              case 140:
                goto LABEL_86;
              case 142:
              case 143:
                goto LABEL_86;
              case 144:
              case 145:
                goto LABEL_86;
              case 146:
                goto LABEL_86;
              case 147:
                goto LABEL_86;
              case 148:
              case 149:
                goto LABEL_86;
              case 150:
                goto LABEL_86;
              case 151:
                v119 = this;
                v120 = 1;
                goto LABEL_310;
              case 152:
                v119 = this;
                v120 = 0;
LABEL_310:
                goto LABEL_86;
              case 153:
                v121 = Loc;
                v122 = this;
                v123 = 0;
                goto LABEL_313;
              case 154:
                v121 = Loc;
                v122 = this;
                v123 = 1;
LABEL_313:
                break;
              case 155:
                break;
              case 156:
                break;
              case 157:
                break;
              case 158:
                break;
              case 159:
                break;
              case 160:
                break;
              case 161:
                v94 = this;
                v95 = 3;
LABEL_321:
                break;
              case 163:
                v105 = 29;
LABEL_323:
                LODWORD(v134[0]) = v105;
                *(_QWORD *)&v142 = this;
                *((_QWORD *)&v142 + 1) = v134;
LABEL_324:
                v8 = llvm::MCAsmParser::parseMany(this, v96, (uint64_t)&v142, 1);
                break;
              case 164:
                break;
              default:
                v44 = Loc;
                v45 = "unknown directive";
                goto LABEL_74;
            }
          }
        }
        goto LABEL_86;
      }
      if (!*((_BYTE *)this + 813))
        goto LABEL_154;
      v63 = (_BYTE *)__n[0];
      switch(__n[1])
      {
        case 4uLL:
          if (*(_DWORD *)__n[0] == 1852143205 || *(_DWORD *)__n[0] == 1313166917)
          {
            v76 = a2[11];
            LODWORD(v142) = 1;
            LODWORD(v134[0]) = 4;
            llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,int>(v76, (int *)&v142, (uint64_t *)&Loc, (int *)v134);
          }
          break;
        case 6uLL:
          if (!memcmp((const void *)__n[0], "__emit", 6uLL) || !memcmp(v63, "__EMIT", 6uLL))
            goto LABEL_162;
          break;
        case 5uLL:
          v64 = *(_DWORD *)__n[0] == 1768777055 && *(_BYTE *)(__n[0] + 4) == 116;
          if (!v64 && memcmp((const void *)__n[0], "_EMIT", __n[1]))
          {
            v65 = *(_DWORD *)v63 == 1734962273 && v63[4] == 110;
            if (v65 || (*(_DWORD *)v63 == 1195985985 ? (v66 = v63[4] == 78) : (v66 = 0), v66))
            {
              goto LABEL_86;
            }
            break;
          }
LABEL_162:
          goto LABEL_86;
      }
LABEL_154:
      if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
      {
LABEL_155:
        v8 = 1;
        goto LABEL_86;
      }
      v77 = __n[0];
      v78 = __n[1];
      v124 = v138;
      v125 = v139;
      v127 = v141;
      if (v141 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v126, v11);
      else
        v126 = v140;
      if (v127 >= 0x41 && v126)
        operator delete[](v126);
LABEL_86:
      if (v141 >= 0x41 && v140)
        operator delete[](v140);
      return v8;
  }
}

uint64_t llvm::StringMap<`anonymous namespace'::AsmParser::DirectiveKind,llvm::MallocAllocator>::operator[](uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *buffer;
  char *v12;
  char *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = *(_QWORD *)a1;
  v8 = v6;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v6);
  if (v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v9)
  {
    return v9 + 8;
  }
  buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
  v12 = buffer;
  v13 = buffer + 16;
  if (a3)
    memcpy(buffer + 16, a2, (size_t)a3);
  a3[(_QWORD)v13] = 0;
  *(_QWORD *)v12 = a3;
  *((_DWORD *)v12 + 2) = 0;
  *(_QWORD *)(v7 + 8 * v8) = v12;
  ++*(_DWORD *)(a1 + 12);
  v14 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  v9 = *v14;
  if (*v14)
    v15 = v9 == -8;
  else
    v15 = 1;
  if (v15)
  {
    do
    {
      v16 = v14[1];
      ++v14;
      v9 = v16;
      if (v16)
        v17 = v9 == -8;
      else
        v17 = 1;
    }
    while (v17);
  }
  return v9 + 8;
}

uint64_t std::deque<llvm::MCAsmMacro>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  llvm::MCAsmMacro *v6;
  unint64_t v7;
  uint64_t v8;
  llvm::MCAsmMacro *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v10 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x2E];
    v6 = (llvm::MCAsmMacro *)((char *)*v5 + 88 * (v4 % 0x2E));
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x2E] + 88 * ((*(_QWORD *)(a1 + 40) + v4) % 0x2E);
    if (v6 != (llvm::MCAsmMacro *)v7)
    {
      do
      {
        llvm::MCAsmMacro::~MCAsmMacro(v6);
        v6 = (llvm::MCAsmMacro *)(v8 + 88);
        if (v6 - (llvm::MCAsmMacro *)*v5 == 4048)
        {
          v9 = (llvm::MCAsmMacro *)v5[1];
          ++v5;
          v6 = v9;
        }
      }
      while (v6 != (llvm::MCAsmMacro *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 23;
    goto LABEL_15;
  }
  if (v11 == 2)
  {
    v12 = 46;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void **std::vector<llvm::MCAsmMacroParameter>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 4);
        if (v6)
        {
          v7 = *((_QWORD *)v3 - 3);
          v5 = (void *)*((_QWORD *)v3 - 4);
          if (v7 != v6)
          {
            do
            {
              if (*(_DWORD *)(v7 - 8) >= 0x41u)
              {
                v8 = *(void **)(v7 - 16);
                if (v8)
                  operator delete[](v8);
              }
              v7 -= 40;
            }
            while (v7 != v6);
            v5 = (void *)*((_QWORD *)v3 - 4);
          }
          *((_QWORD *)v3 - 3) = v6;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIfb(uint64_t *a1, char a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = (uint64_t *)((char *)a1 + 300);
  v6 = (char *)a1[40];
  v5 = a1[41];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)a1[39];
    v9 = (v6 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = *v4;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        v16 = *((_WORD *)v6 + 2);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *((_WORD *)v14 + 2) = v16;
      }
      while (v6 != v8);
      v6 = (char *)a1[39];
    }
    a1[39] = (uint64_t)v14;
    a1[40] = (uint64_t)v7;
    a1[41] = (uint64_t)&v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *v4;
    v7 = v6 + 8;
  }
  a1[40] = (uint64_t)v7;
  *((_DWORD *)a1 + 75) = 1;
  v17 = *a1;
  if (*((_BYTE *)a1 + 305))
  {
    (*(void (**)(uint64_t *))(v17 + 224))(a1);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t *))(v17 + 200))(a1);
    v20 = v19;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      result = 0;
      v21 = (v20 == 0) ^ a2;
      *((_BYTE *)a1 + 304) = v21 ^ 1;
      *((_BYTE *)a1 + 305) = v21;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIfc(llvm::MCAsmParser *this, char a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  __int16 v16;
  uint64_t result;
  mlir::Token *Tok;
  uint64_t Loc;
  unsigned int v20;
  BOOL v21;
  int v22;
  mlir::Token *v24;
  unint64_t v26;
  unint64_t first_not_of;
  unint64_t v28;
  unint64_t v29;
  uint64_t last_not_of;
  void *v31;
  unint64_t v32;
  size_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *__s2;
  unint64_t v48;
  __int16 v49;

  v4 = (_QWORD *)((char *)this + 300);
  v6 = (char *)*((_QWORD *)this + 40);
  v5 = *((_QWORD *)this + 41);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)this + 39);
    v9 = (v6 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = *v4;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        v16 = *((_WORD *)v6 + 2);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *((_WORD *)v14 + 2) = v16;
      }
      while (v6 != v8);
      v6 = (char *)*((_QWORD *)this + 39);
    }
    *((_QWORD *)this + 39) = v14;
    *((_QWORD *)this + 40) = v7;
    *((_QWORD *)this + 41) = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *v4;
    v7 = v6 + 8;
  }
  *((_QWORD *)this + 40) = v7;
  *((_DWORD *)this + 75) = 1;
  if (*((_BYTE *)this + 305))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 224))(this);
    return 0;
  }
  else
  {
    Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
    Loc = mlir::Token::getLoc(Tok);
    while (1)
    {
      v20 = **((_DWORD **)this + 6);
      v21 = v20 > 0x1A;
      v22 = (1 << v20) & 0x4000201;
      if (!v21 && v22 != 0)
        break;
      llvm::MCAsmLexer::Lex((llvm::MCAsmParser *)((char *)this + 40));
    }
    v24 = (mlir::Token *)llvm::MCAsmParser::getTok(this);
    v45 = Loc;
    v46 = mlir::Token::getLoc(v24) - Loc;
    __s2 = "expected comma";
    v49 = 259;
    if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&__s2))
      return 1;
    v43 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 200))(this);
    v44 = v26;
    if (llvm::MCAsmParser::parseEOL(this))
    {
      return 1;
    }
    else
    {
      first_not_of = llvm::StringRef::find_first_not_of(&v45, " \t\n\v\f\r", 6, 0);
      if (first_not_of >= v46)
        v28 = v46;
      else
        v28 = first_not_of;
      v29 = v46 - v28;
      __s2 = (void *)(v45 + v28);
      v48 = v46 - v28;
      last_not_of = llvm::StringRef::find_last_not_of(&__s2, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
      v31 = __s2;
      if (last_not_of + 1 < v48)
        v32 = last_not_of + 1;
      else
        v32 = v48;
      v33 = v48 - v29 + v32;
      if (v48 >= v33)
        v34 = v33;
      else
        v34 = v48;
      v35 = llvm::StringRef::find_first_not_of(&v43, " \t\n\v\f\r", 6, 0);
      if (v35 >= v44)
        v36 = v44;
      else
        v36 = v35;
      v37 = v44 - v36;
      __s2 = (void *)(v43 + v36);
      v48 = v44 - v36;
      v38 = llvm::StringRef::find_last_not_of(&__s2, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
      if (v38 + 1 < v48)
        v39 = v38 + 1;
      else
        v39 = v48;
      v40 = v48 - v37 + v39;
      if (v48 < v40)
        v40 = v48;
      if (v34 == v40)
      {
        if (v34)
          v41 = memcmp(v31, __s2, v34) == 0;
        else
          v41 = 1;
      }
      else
      {
        v41 = 0;
      }
      result = 0;
      v42 = v41 ^ a2;
      *((_BYTE *)this + 304) = v42 ^ 1;
      *((_BYTE *)this + 305) = v42;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIfeqs(llvm::MCAsmParser *this, int a2)
{
  uint64_t Tok;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  const char *v20;
  uint64_t result;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  __int16 v31;
  BOOL v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  const char *v37;
  __int16 v38;

  if (**((_DWORD **)this + 6) != 3)
    goto LABEL_24;
  Tok = llvm::MCAsmParser::getTok(this);
  v5 = *(_QWORD *)(Tok + 16);
  v6 = v5 != 0;
  if (v5)
    v7 = (const void *)(*(_QWORD *)(Tok + 8) + 1);
  else
    v7 = *(const void **)(Tok + 8);
  if (v5 - 1 < v6)
    v8 = 1;
  else
    v8 = v5 - 1;
  if (v8 >= v5)
    v9 = *(_QWORD *)(Tok + 16);
  else
    v9 = v8;
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
  if (**((_DWORD **)this + 6) != 26)
  {
    if (a2)
      v20 = "expected comma after first string for '.ifeqs' directive";
    else
      v20 = "expected comma after first string for '.ifnes' directive";
    goto LABEL_30;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
  if (**((_DWORD **)this + 6) != 3)
  {
LABEL_24:
    if (a2)
      v20 = "expected string parameter for '.ifeqs' directive";
    else
      v20 = "expected string parameter for '.ifnes' directive";
LABEL_30:
    v37 = v20;
    v38 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)&v37, 0, 0);
  }
  v10 = llvm::MCAsmParser::getTok(this);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 != 0;
  if (v11)
    v13 = (const void *)(*(_QWORD *)(v10 + 8) + 1);
  else
    v13 = *(const void **)(v10 + 8);
  if (v11 - 1 < v12)
    v14 = 1;
  else
    v14 = v11 - 1;
  if (v14 >= v11)
    v15 = *(_QWORD *)(v10 + 16);
  else
    v15 = v14;
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
  v16 = (_QWORD *)((char *)this + 300);
  v18 = (char *)*((_QWORD *)this + 40);
  v17 = *((_QWORD *)this + 41);
  if ((unint64_t)v18 < v17)
  {
    *(_QWORD *)v18 = *v16;
    v19 = v18 + 8;
    goto LABEL_46;
  }
  v34 = v15;
  v35 = v12;
  v36 = v13;
  v22 = (_BYTE *)*((_QWORD *)this + 39);
  v23 = (v18 - v22) >> 3;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 61)
    abort();
  v25 = v17 - (_QWORD)v22;
  if (v25 >> 2 > v24)
    v24 = v25 >> 2;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
  {
    if (v26 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = (char *)operator new(8 * v26);
  }
  else
  {
    v27 = 0;
  }
  v28 = &v27[8 * v23];
  v29 = &v27[8 * v26];
  *(_QWORD *)v28 = *v16;
  v19 = v28 + 8;
  if (v18 == v22)
  {
    v12 = v35;
    v13 = v36;
    *((_QWORD *)this + 39) = v28;
    *((_QWORD *)this + 40) = v19;
    *((_QWORD *)this + 41) = v29;
    v15 = v34;
    if (!v18)
      goto LABEL_46;
    goto LABEL_45;
  }
  v12 = v35;
  v13 = v36;
  do
  {
    v30 = *((_DWORD *)v18 - 2);
    v18 -= 8;
    v31 = *((_WORD *)v18 + 2);
    *((_DWORD *)v28 - 2) = v30;
    v28 -= 8;
    *((_WORD *)v28 + 2) = v31;
  }
  while (v18 != v22);
  v18 = (char *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = v28;
  *((_QWORD *)this + 40) = v19;
  *((_QWORD *)this + 41) = v29;
  v15 = v34;
  if (v18)
LABEL_45:
    operator delete(v18);
LABEL_46:
  *((_QWORD *)this + 40) = v19;
  *((_DWORD *)this + 75) = 1;
  v32 = v9 - v6 == v15 - v12 && (v9 == v6 || memcmp(v7, v13, v9 - v6) == 0);
  result = 0;
  v33 = v32 ^ a2;
  *((_BYTE *)this + 304) = v33 ^ 1;
  *((_BYTE *)this + 305) = v33;
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIfdef(_BYTE *a1, int a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  llvm::MCContext *v20;
  void **v21;
  void **v22;
  void *AssociatedFragment;
  void *v24;
  BOOL v25;
  const char *v26[4];
  __int16 v27;
  const char *v28;
  const char *v29;

  v28 = 0;
  v29 = 0;
  v4 = a1 + 300;
  v6 = (char *)*((_QWORD *)a1 + 40);
  v5 = *((_QWORD *)a1 + 41);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)a1 + 39);
    v9 = (v6 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = *v4;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        v16 = *((_WORD *)v6 + 2);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *((_WORD *)v14 + 2) = v16;
      }
      while (v6 != v8);
      v6 = (char *)*((_QWORD *)a1 + 39);
    }
    *((_QWORD *)a1 + 39) = v14;
    *((_QWORD *)a1 + 40) = v7;
    *((_QWORD *)a1 + 41) = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *v4;
    v7 = v6 + 8;
  }
  *((_QWORD *)a1 + 40) = v7;
  *((_DWORD *)a1 + 75) = 1;
  v17 = *(_QWORD *)a1;
  if (a1[305])
  {
    (*(void (**)(_BYTE *))(v17 + 224))(a1);
    return 0;
  }
  else
  {
    v19 = (*(uint64_t (**)(_BYTE *, const char **))(v17 + 192))(a1, &v28);
    v26[0] = "expected identifier after '.ifdef'";
    v27 = 259;
    if ((llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v19, (const llvm::Twine *)v26) & 1) != 0
      || llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      v20 = (llvm::MCContext *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
      v27 = 261;
      v26[0] = v28;
      v26[1] = v29;
      v21 = (void **)llvm::MCContext::lookupSymbol(v20, v26);
      v22 = v21;
      if (a2)
      {
        if (v21)
        {
          AssociatedFragment = *v21;
          if (!*v22)
          {
            if (((_DWORD)v22[1] & 0x7080) == 0x2000)
            {
              AssociatedFragment = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v22[3]);
              *v22 = AssociatedFragment;
            }
            else
            {
              AssociatedFragment = 0;
            }
          }
          v25 = AssociatedFragment != 0;
        }
        else
        {
          v25 = 0;
        }
      }
      else if (v21)
      {
        v24 = *v21;
        if (!*v22)
        {
          if (((_DWORD)v22[1] & 0x7080) == 0x2000)
          {
            v24 = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v22[3]);
            *v22 = v24;
          }
          else
          {
            v24 = 0;
          }
        }
        v25 = v24 == 0;
      }
      else
      {
        v25 = 1;
      }
      a1[304] = v25;
      result = 0;
      a1[305] = !v25;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveElseIf(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  _QWORD v6[4];
  __int16 v7;

  if ((*(_DWORD *)(a1 + 300) - 1) >= 2)
  {
    v6[0] = "Encountered a .elseif that doesn't follow an .if or  an .elseif";
    v7 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (uint64_t)v6, 0, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 300) = 2;
    v3 = *(_QWORD *)(a1 + 320);
    if (*(_QWORD *)(a1 + 312) != v3 && *(_BYTE *)(v3 - 3) || *(_BYTE *)(a1 + 304))
    {
      *(_BYTE *)(a1 + 305) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
      return 0;
    }
    else
    {
      v6[0] = 0;
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 256))(a1, v6) & 1) != 0
        || llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
      {
        return 1;
      }
      else
      {
        result = 0;
        v5 = v6[0] == 0;
        *(_BYTE *)(a1 + 304) = v6[0] != 0;
        *(_BYTE *)(a1 + 305) = v5;
      }
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveElse(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  if ((*(_DWORD *)(a1 + 300) - 1) >= 2)
  {
    v6 = "Encountered a .else that doesn't follow  an .if or an .elseif";
    v7 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (uint64_t)&v6, 0, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 300) = 3;
    v5 = *(_QWORD *)(a1 + 320);
    if (*(_QWORD *)(a1 + 312) != v5 && *(_BYTE *)(v5 - 3) || *(_BYTE *)(a1 + 304))
    {
      result = 0;
      *(_BYTE *)(a1 + 305) = 1;
    }
    else
    {
      result = 0;
      *(_BYTE *)(a1 + 305) = 0;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveEndIf(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;

  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  if (!*(_DWORD *)(a1 + 300) || (v5 = *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 312) == v5))
  {
    v8 = "Encountered a .endif that doesn't follow an .if or .else";
    v9 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (uint64_t)&v8, 0, 0);
  }
  else
  {
    result = 0;
    v7 = *(_DWORD *)(v5 - 8);
    v6 = v5 - 8;
    *(_WORD *)(a1 + 304) = *(_WORD *)(v6 + 4);
    *(_DWORD *)(a1 + 300) = v7;
    *(_QWORD *)(a1 + 320) = v6;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4, __int128 *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(a1, a2, a3, a4, a5);
  v6 = *(_QWORD *)a1 + (v5 << 7);
  v7 = *a3;
  v8 = *a4;
  *(_DWORD *)v6 = *a2;
  *(_DWORD *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 20) = 0;
  v9 = *a5;
  *(_QWORD *)(v6 + 8) = v7;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 112) = 1;
  *(_BYTE *)(v6 + 120) = 0;
  *(_OWORD *)(v6 + 32) = v9;
  v10 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v10;
  return *(_QWORD *)a1 + (v10 << 7) - 128;
}

uint64_t llvm::MCAsmLexer::Lex(llvm::MCAsmLexer *this)
{
  _DWORD *v2;
  char *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v11[3];
  void *__p;
  unsigned int v13;

  v3 = (char *)this + 8;
  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_BYTE *)this + 107) = *v2 == 9;
  v4 = *((_DWORD *)this + 4);
  if (v4 == 1)
  {
    v5 = 0;
    *((_DWORD *)this + 4) = 0;
    if (v2[8] < 0x41u)
      goto LABEL_12;
    goto LABEL_10;
  }
  v6 = v2 + 10;
  v7 = 40 * v4 - 40;
  do
  {
    *(_OWORD *)(v6 - 10) = *(_OWORD *)v6;
    *((_QWORD *)v6 - 3) = *((_QWORD *)v6 + 2);
    if (*(v6 - 2) >= 0x41u)
    {
      v8 = (void *)*((_QWORD *)v6 - 2);
      if (v8)
        operator delete[](v8);
    }
    *((_QWORD *)v6 - 2) = *((_QWORD *)v6 + 3);
    *(v6 - 2) = v6[8];
    v6[8] = 0;
    v6 += 10;
    v7 -= 40;
  }
  while (v7);
  v2 = (_DWORD *)*((_QWORD *)this + 1);
  v5 = *((_DWORD *)this + 4) - 1;
  *((_DWORD *)this + 4) = v5;
  if (v2[10 * v5 + 8] >= 0x41u)
  {
LABEL_10:
    v9 = *(void **)&v2[10 * v5 + 6];
    if (v9)
    {
      operator delete[](v9);
      v5 = *((_DWORD *)this + 4);
    }
  }
LABEL_12:
  if (v5)
    return *(_QWORD *)v3;
  (**(void (***)(void **__return_ptr, llvm::MCAsmLexer *))this)(v11, this);
  llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)v3, *((_QWORD *)this + 1), (unint64_t)v11);
  if (v13 < 0x41 || !__p)
    return *(_QWORD *)v3;
  operator delete[](__p);
  return *(_QWORD *)v3;
}

BOOL `anonymous namespace'::AsmParser::enabledGenDwarfForAssembly(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  int v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  __n128 v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[17];
  __int128 v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v3 = *(unsigned __int8 *)(v2 + 1593);
  if (*(_BYTE *)(v2 + 1593)
    && !*(_DWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this) + 1596))
  {
    if (*((_QWORD *)this + 61))
    {
      v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v7 = *(void **)(v6 + 1360);
      v8 = *(_QWORD *)(v6 + 1368);
      v9 = (void *)*((_QWORD *)this + 60);
      v10 = *((_QWORD *)this + 61);
      v31[0] = 0;
      v31[16] = 0;
      v27.n128_u8[0] = 0;
      v28 = 0;
      v4.n128_f64[0] = llvm::MCContext::setMCLineTableRootFile(v5, 0, v7, v8, v9, v10, (uint64_t)v31, &v27);
    }
    v11 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, __n128))(*(_QWORD *)this + 48))(this, v4);
    v12 = v11;
    v13 = *(uint64_t **)(v11 + 1560);
    if (v13)
    {
      while (1)
      {
        v14 = (uint64_t **)v13;
        if (!*((_DWORD *)v13 + 8))
          break;
        v13 = (uint64_t *)*v13;
        if (!*v14)
          goto LABEL_10;
      }
      v15 = (char *)v13;
    }
    else
    {
      v14 = (uint64_t **)(v11 + 1560);
LABEL_10:
      v15 = (char *)operator new(0x218uLL);
      *((_DWORD *)v15 + 8) = 0;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_OWORD *)(v15 + 72) = 0u;
      *(_OWORD *)(v15 + 88) = 0u;
      *(_OWORD *)(v15 + 104) = 0u;
      *(_OWORD *)(v15 + 120) = 0u;
      *(_OWORD *)(v15 + 136) = 0u;
      *(_OWORD *)(v15 + 168) = 0u;
      *(_OWORD *)(v15 + 184) = 0u;
      *(_OWORD *)(v15 + 200) = 0u;
      *(_OWORD *)(v15 + 216) = 0u;
      *(_OWORD *)(v15 + 232) = 0u;
      *(_OWORD *)(v15 + 248) = 0u;
      *(_OWORD *)(v15 + 264) = 0u;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 280) = 0u;
      *(_OWORD *)(v15 + 296) = 0u;
      *(_OWORD *)(v15 + 312) = 0u;
      *(_OWORD *)(v15 + 328) = 0u;
      *(_OWORD *)(v15 + 344) = 0u;
      *(_OWORD *)(v15 + 360) = 0u;
      *(_OWORD *)(v15 + 376) = 0u;
      *(_OWORD *)(v15 + 392) = 0u;
      *(_OWORD *)(v15 + 408) = 0u;
      *(_OWORD *)(v15 + 424) = 0u;
      *(_OWORD *)(v15 + 440) = 0u;
      *(_OWORD *)(v15 + 456) = 0u;
      *(_OWORD *)(v15 + 472) = 0u;
      *(_OWORD *)(v15 + 488) = 0u;
      *(_OWORD *)(v15 + 504) = 0u;
      *(_OWORD *)(v15 + 152) = 0u;
      *((_QWORD *)v15 + 6) = v15 + 64;
      *((_DWORD *)v15 + 15) = 3;
      *((_QWORD *)v15 + 17) = v15 + 152;
      *((_DWORD *)v15 + 37) = 3;
      *((_QWORD *)v15 + 47) = 0;
      *((_QWORD *)v15 + 46) = 0;
      *((_QWORD *)v15 + 48) = 0x1000000000;
      *(_OWORD *)(v15 + 392) = 0u;
      *(_OWORD *)(v15 + 408) = 0u;
      *(_OWORD *)(v15 + 424) = 0u;
      *(_QWORD *)(v15 + 437) = 0;
      v15[489] = 1;
      *((_QWORD *)v15 + 63) = 0;
      *((_QWORD *)v15 + 62) = 0;
      *((_DWORD *)v15 + 128) = 0;
      *((_QWORD *)v15 + 65) = v15 + 536;
      *((_QWORD *)v15 + 66) = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v14;
      *v14 = (uint64_t *)v15;
      v16 = (uint64_t *)v15;
      v17 = **(_QWORD **)(v12 + 1552);
      if (v17)
      {
        *(_QWORD *)(v12 + 1552) = v17;
        v16 = *v14;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v12 + 1560), v16);
      ++*(_QWORD *)(v12 + 1568);
    }
    v18 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
    v19 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    v20 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
    v21 = *(_QWORD *)(v20 + 1360);
    v22 = *(_QWORD *)(v20 + 1368);
    v23 = v15[439];
    if (v23 >= 0)
      v24 = v15 + 416;
    else
      v24 = (char *)*((_QWORD *)v15 + 52);
    if (v23 >= 0)
      v25 = v15[439];
    else
      v25 = *((_QWORD *)v15 + 53);
    v32 = *(_OWORD *)(v15 + 444);
    v33 = v15[460];
    v29 = *((_OWORD *)v15 + 29);
    v30 = *((_QWORD *)v15 + 60);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, char *, uint64_t, __int128 *, __int128 *, _DWORD))(*(_QWORD *)v19 + 688))(v34, v19, 0, v21, v22, v24, v25, &v32, &v29, 0);
    *(_DWORD *)(v18 + 1596) = v34[0];
  }
  return v3 != 0;
}

uint64_t `anonymous namespace'::AsmParser::parseAssignment(llvm::MCAsmParser *a1, const char *a2, uint64_t a3, unsigned int a4)
{
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v11;
  void (*v12)(void);
  const char *v13;
  __int16 v14;
  const llvm::MCExpr *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(a1);
  Loc = mlir::Token::getLoc(Tok);
  if ((llvm::MCParserUtils::parseAssignmentExpression(a2, a3, (a4 & 0xFFFFFFFD) == 0, a1, &v16, &v15) & 1) != 0)
    return 1;
  v11 = v16;
  if (!v16
    || ((*(uint64_t (**)(llvm::MCAsmParser *, const char *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, a3) & 1) != 0)
  {
    return 0;
  }
  if (a4 < 2)
  {
    (*(void (**)(_QWORD *, uint64_t, const llvm::MCExpr *))(**((_QWORD **)a1 + 28) + 272))(*((_QWORD **)a1 + 28), v11, v15);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)a1 + 28) + 296))(*((_QWORD **)a1 + 28), v11, 18);
    return 0;
  }
  if (a4 != 3)
  {
    if (a4 == 2)
    {
      v12 = *(void (**)(void))(**((_QWORD **)a1 + 28) + 272);
LABEL_12:
      v12();
    }
    return 0;
  }
  if (*(_BYTE *)v15 == 2)
  {
    v12 = *(void (**)(void))(**((_QWORD **)a1 + 28) + 280);
    goto LABEL_12;
  }
  v13 = "expected identifier";
  v14 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, Loc, (uint64_t)&v13, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::handleMacroEntry(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  mlir::Token *Tok;
  uint64_t Loc;
  _QWORD *v24;
  void *v25;
  size_t v26;
  _DWORD *v27;
  mlir::Token *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 *v54;
  uint64_t v55;
  __n128 *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  void **v60;
  void **v61;
  void *v62;
  void **v63;
  void *v64;
  char *v65;
  char *v66;
  char *v67;
  void *v68;
  __n128 __p;
  uint64_t v71;
  __int16 v72;
  unint64_t v73;
  void (**p_p)(llvm::raw_svector_ostream *__hidden);
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  int v81;
  void **v82;
  void *v83;
  void **v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  _BYTE v88[48];
  __int128 v89;
  __int128 v90;
  int v91;
  _QWORD v92[23];

  v92[21] = *MEMORY[0x1E0C80C00];
  if (dword_1EDC0A4E0 == (uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 3)
  {
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = MEMORY[0x1E0DE4F60];
    v7 = *(void **)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
    v92[0] = MEMORY[0x1E0DE4FE0] + 64;
    v86 = v7;
    *(void **)((char *)&v86 + *((_QWORD *)v7 - 3)) = v8;
    v9 = (std::ios_base *)((char *)&v86 + *((_QWORD *)v86 - 3));
    std::ios_base::init(v9, &v87);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v86 = (void *)(v4 + 24);
    v92[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8] + 16;
    *(_QWORD *)&v87 = MEMORY[0x1E0DE4FB8] + 16;
    v89 = 0u;
    v90 = 0u;
    v91 = 16;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v86, (uint64_t)"macros cannot be nested more than ", 34);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)" levels deep.", 13);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" Use -asm-macro-max-nesting-depth to increase this limit.", 57);
    std::stringbuf::str();
    LOWORD(v78) = 260;
    p_p = (void (**)(llvm::raw_svector_ostream *__hidden))&__p;
    v13 = llvm::MCAsmParser::TokError(a1, (uint64_t)&p_p, 0, 0);
    if (SHIBYTE(v71) < 0)
      operator delete((void *)__p.n128_u64[0]);
    v86 = *(void **)v6;
    *(void **)((char *)&v86 + *((_QWORD *)v86 - 3)) = *(void **)(v6 + 24);
    *(_QWORD *)&v87 = v10;
    if (SBYTE7(v90) < 0)
      operator delete((void *)v89);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x186DA15C0](v92);
    return v13;
  }
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v13 = 1;
  {
    v86 = v88;
    v87 = xmmword_181236410;
    v16 = (char *)a2[2];
    v17 = a2[3];
    v75 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 1;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    p_p = off_1E0E22B88;
    v82 = &v86;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&p_p, 0, 0, 0);
    v18 = a2[4];
    v19 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - v18) >> 4);
    v20 = v83;
    v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (_BYTE *)v83) >> 3);
    Tok = (mlir::Token *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    Loc = mlir::Token::getLoc(Tok);
    if ((v13 & 1) != 0)
    {
LABEL_39:
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&p_p);
      if (v86 != v88)
        free(v86);
      goto LABEL_41;
    }
    v24 = (_QWORD *)v78;
    if ((unint64_t)(v77 - v78) > 9)
    {
      *(_WORD *)(v78 + 8) = 2671;
      *v24 = *(_QWORD *)".endmacro\n";
      v78 += 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&p_p, ".endmacro\n", 0xAuLL);
    }
    v25 = *v82;
    v26 = (size_t)v82[1];
    __p.n128_u64[0] = (unint64_t)"<instantiation>";
    v72 = 259;
    llvm::MemoryBuffer::getMemBufferCopy(v25, v26, (uint64_t)&__p, 0, &v73);
    v27 = operator new(0x20uLL);
    *(_QWORD *)v27 = a3;
    v27[2] = *(_DWORD *)(a1 + 296);
    v28 = (mlir::Token *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    v29 = mlir::Token::getLoc(v28);
    v30 = (uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 3;
    *((_QWORD *)v27 + 2) = v29;
    *((_QWORD *)v27 + 3) = v30;
    v32 = *(char **)(a1 + 368);
    v31 = *(_QWORD *)(a1 + 376);
    if ((unint64_t)v32 < v31)
    {
      *(_QWORD *)v32 = v27;
      v33 = (uint64_t)(v32 + 8);
LABEL_34:
      *(_QWORD *)(a1 + 368) = v33;
      ++*(_DWORD *)(a1 + 436);
      v52 = *(_QWORD *)(a1 + 240);
      v53 = v73;
      v73 = 0;
      v71 = 0;
      __p = (__n128)v53;
      v54 = *(__n128 **)(v52 + 8);
      if ((unint64_t)v54 >= *(_QWORD *)(v52 + 16))
      {
        v56 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)v52, &__p);
      }
      else
      {
        llvm::SourceMgr::SrcBuffer::SrcBuffer(v54, &__p);
        v56 = (__n128 *)(v55 + 24);
      }
      *(_QWORD *)(v52 + 8) = v56;
      v57 = -1431655765 * (((unint64_t)v56->n128_u64 - *(_QWORD *)v52) >> 3);
      llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&__p);
      *(_DWORD *)(a1 + 296) = v57;
      v58 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (v57 - 1));
      llvm::AsmLexer::setBuffer(a1 + 40, *(_QWORD *)(v58 + 8), *(_QWORD *)(v58 + 16) - *(_QWORD *)(v58 + 8), 0, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      v59 = v73;
      v73 = 0;
      if (v59)
        (*(void (**)(unint64_t))(*(_QWORD *)v59 + 8))(v59);
      goto LABEL_39;
    }
    v34 = *(char **)(a1 + 360);
    v35 = (v32 - v34) >> 3;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v37 = v31 - (_QWORD)v34;
    if (v37 >> 2 > v36)
      v36 = v37 >> 2;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      if (v38 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v39 = (char *)operator new(8 * v38);
      v40 = &v39[8 * v35];
      v41 = &v39[8 * v38];
      *(_QWORD *)v40 = v27;
      v33 = (uint64_t)(v40 + 8);
      v42 = (char *)(v32 - v34);
      if (v32 == v34)
        goto LABEL_32;
    }
    else
    {
      v39 = 0;
      v40 = (char *)(8 * v35);
      v41 = 0;
      *(_QWORD *)(8 * v35) = v27;
      v33 = 8 * v35 + 8;
      v42 = (char *)(v32 - v34);
      if (v32 == v34)
      {
LABEL_32:
        *(_QWORD *)(a1 + 360) = v40;
        *(_QWORD *)(a1 + 368) = v33;
        *(_QWORD *)(a1 + 376) = v41;
        if (v32)
          operator delete(v32);
        goto LABEL_34;
      }
    }
    v43 = (unint64_t)(v42 - 8);
    if (v43 < 0x58)
      goto LABEL_61;
    if ((unint64_t)(v34 - v39) < 0x20)
      goto LABEL_61;
    v44 = (v43 >> 3) + 1;
    v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    v46 = &v32[-v45];
    v40 -= v45;
    v47 = &v39[8 * v35 - 16];
    v48 = v32 - 16;
    v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *(_OWORD *)v48;
      *((_OWORD *)v47 - 1) = *((_OWORD *)v48 - 1);
      *(_OWORD *)v47 = v50;
      v47 -= 32;
      v48 -= 32;
      v49 -= 4;
    }
    while (v49);
    v32 = v46;
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_61:
      do
      {
        v51 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v40 - 1) = v51;
        v40 -= 8;
      }
      while (v32 != v34);
    }
    v32 = *(char **)(a1 + 360);
    goto LABEL_32;
  }
LABEL_41:
  v60 = (void **)v83;
  if (v83)
  {
    v61 = v84;
    v62 = v83;
    if (v84 != v83)
    {
      v63 = v84;
      do
      {
        v66 = (char *)*(v63 - 3);
        v63 -= 3;
        v65 = v66;
        if (v66)
        {
          v67 = (char *)*(v61 - 2);
          v64 = v65;
          if (v67 != v65)
          {
            do
            {
              if (*((_DWORD *)v67 - 2) >= 0x41u)
              {
                v68 = (void *)*((_QWORD *)v67 - 2);
                if (v68)
                  operator delete[](v68);
              }
              v67 -= 40;
            }
            while (v67 != v65);
            v64 = *v63;
          }
          *(v61 - 2) = v65;
          operator delete(v64);
        }
        v61 = v63;
      }
      while (v63 != v60);
      v62 = v83;
    }
    v84 = v60;
    operator delete(v62);
  }
  return v13;
}

uint64_t llvm::StringMap<std::pair<llvm::MCAsmParserExtension *,BOOL (*)(llvm::MCAsmParserExtension *,llvm::StringRef,llvm::SMLoc)>,llvm::MallocAllocator>::lookup(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  int Key;

  Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * Key) + 8);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveSet(llvm::MCAsmParser *a1, unsigned int a2)
{
  uint64_t v4;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;

  v8 = 0;
  v9 = 0;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *, const char **))(*(_QWORD *)a1 + 192))(a1, &v8);
  v6 = "expected identifier";
  v7 = 259;
  if ((llvm::MCAsmParser::check(a1, v4, (const llvm::Twine *)&v6) & 1) != 0)
    return 1;
  v10 = "expected comma";
  v11 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)&v10))
    return 1;
  else
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveAlign(llvm::MCTargetAsmParser **this, int a2, uint64_t a3)
{
  llvm::MCAsmLexer *v6;
  uint64_t Loc;
  uint64_t v8;
  int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t STI;
  int v30;
  uint64_t v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD *v36;
  __int128 v37;
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;

  v6 = (llvm::MCAsmLexer *)(*((uint64_t (**)(llvm::MCTargetAsmParser **))*this + 5))(this);
  Loc = llvm::MCAsmLexer::getLoc(v6);
  v43 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  if (((*((uint64_t (**)(llvm::MCTargetAsmParser **))*this + 33))(this) & 1) != 0)
    return 1;
  v45 = 0;
  if ((_DWORD)a3 != 1 || !a2 || *(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)this) != 9)
  {
    if (((*((uint64_t (**)(llvm::MCTargetAsmParser **, int64_t *))*this + 32))(this, &v45) & 1) == 0)
    {
      if (!llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)this, 26))
      {
        v9 = 0;
        goto LABEL_16;
      }
      if (*(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)this) == 26)
      {
        v9 = 0;
        goto LABEL_13;
      }
      if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &v41) & 1) == 0)
      {
        v9 = 1;
        v8 = 1;
        if (((*((uint64_t (**)(llvm::MCTargetAsmParser **, uint64_t *))*this + 32))(this, &v43) & 1) != 0)
          return v8;
LABEL_13:
        if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)this, 26)
          && ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &v44) & 1) != 0
           || ((*((uint64_t (**)(llvm::MCTargetAsmParser **, uint64_t *))*this + 32))(this, &v42) & 1) != 0))
        {
          return 1;
        }
LABEL_16:
        if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)this))
          return 1;
        v11 = v45;
        if (a2)
        {
          if (v45 < 32)
          {
            v8 = 0;
          }
          else
          {
            v39[0] = "invalid alignment value";
            v40 = 259;
            v8 = llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v39, 0, 0);
            LOBYTE(v11) = 31;
          }
          v12 = 1 << v11;
        }
        else if (v45)
        {
          if ((v45 & (v45 - 1)) != 0)
          {
            v39[0] = "alignment must be a power of 2";
            v40 = 259;
            v8 = llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v39, 0, 0);
            v13 = 1 << ~__clz(v45);
            if (v45)
              v11 = v13;
            else
              v11 = 0;
            v45 = v11;
          }
          else
          {
            v8 = 0;
          }
          if (!HIDWORD(v11))
          {
LABEL_35:
            if (v9)
            {
              if (v43)
              {
                v14 = (*((uint64_t (**)(llvm::MCTargetAsmParser **))*this + 7))(this);
                v15 = *(unsigned int *)(v14 + 152);
                if ((_DWORD)v15)
                {
                  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 32 * v15 - 32);
                  if (v16)
                  {
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
                    {
                      v17 = v41;
                      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
                      v33 = 1283;
                      v32[0] = "ignoring non-zero fill value in ";
                      v32[2] = v18;
                      v32[3] = v19;
                      v34[0] = v32;
                      v34[2] = " section '";
                      v35 = 770;
                      v36 = v34;
                      v37 = *(_OWORD *)(v16 + 200);
                      v38 = 1282;
                      v39[0] = &v36;
                      v39[2] = "'";
                      v40 = 770;
                      v8 = v8 | (*((unsigned int (**)(llvm::MCTargetAsmParser **, uint64_t, _QWORD *, _QWORD, _QWORD))*this
                                               + 21))(this, v17, v39, 0, 0);
                      v43 = 0;
                    }
                  }
                }
              }
            }
            if (v44)
            {
              v20 = v42;
              if (v42 <= 0)
              {
                v39[0] = "alignment directive can never be satisfied in this many bytes, ignoring maximum bytes expression";
                v40 = 259;
                v21 = llvm::MCAsmParser::Error((uint64_t)this, v44, (uint64_t)v39, 0, 0);
                v20 = 0;
                v8 = v8 | v21;
                v42 = 0;
              }
              if (v20 >= v45)
              {
                v39[0] = "maximum bytes expression exceeds alignment and has no effect";
                v40 = 259;
                (*((void (**)(llvm::MCTargetAsmParser **, uint64_t, _QWORD *, _QWORD, _QWORD))*this + 21))(this, v44, v39, 0, 0);
                v42 = 0;
              }
            }
            v22 = (*((uint64_t (**)(llvm::MCTargetAsmParser **))*this + 7))(this);
            v23 = *(_QWORD *)(*(_QWORD *)(v22 + 144) + 32 * *(unsigned int *)(v22 + 152) - 32);
            v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            if (v9)
            {
              if ((_DWORD)a3 == 1 && v43 == *((_DWORD *)this[22] + 85))
                v26 = v24;
              else
                v26 = 0;
              if ((v26 & 1) != 0)
              {
LABEL_54:
                v27 = (*((uint64_t (**)(llvm::MCTargetAsmParser **))*this + 7))(this);
                v28 = 63 - __clz(v45);
                STI = llvm::MCTargetAsmParser::getSTI(this[1]);
                (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v27 + 648))(v27, v28, STI, v42);
                return v8;
              }
            }
            else
            {
              if ((_DWORD)a3 == 1)
                v30 = v24;
              else
                v30 = 0;
              if (v30 == 1)
                goto LABEL_54;
            }
            v31 = (*((uint64_t (**)(llvm::MCTargetAsmParser **))*this + 7))(this);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v31 + 640))(v31, (63 - __clz(v45)), v43, a3, v42);
            return v8;
          }
          v39[0] = "alignment must be smaller than 2**32";
          v40 = 259;
          v8 = v8 | llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v39, 0, 0);
          v12 = 0x80000000;
        }
        else
        {
          v8 = 0;
          v12 = 1;
        }
        v45 = v12;
        goto LABEL_35;
      }
    }
    return 1;
  }
  v39[0] = "p2align directive with no operand(s) is ignored";
  v40 = 259;
  (*((void (**)(llvm::MCTargetAsmParser **, uint64_t, _QWORD *, _QWORD, _QWORD))*this + 21))(this, Loc, v39, 0, 0);
  return llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)this);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveOrg(_anonymous_namespace_::AsmParser *this)
{
  uint64_t Loc;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Loc = llvm::MCAsmLexer::getLoc((_anonymous_namespace_::AsmParser *)((char *)this + 40));
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v5 = 0;
  v6 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, uint64_t *))(*(_QWORD *)this + 232))(this, &v5, &v6) & 1) != 0)return 1;
  v6 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 26)
    && ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v6) & 1) != 0)
  {
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 656))(v4, v5, v6, Loc);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveFill(_anonymous_namespace_::AsmParser *this)
{
  uint64_t Loc;
  uint64_t v4;
  uint64_t v5;
  mlir::Token *Tok;
  mlir::Token *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  Loc = llvm::MCAsmLexer::getLoc((_anonymous_namespace_::AsmParser *)((char *)this + 40));
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v14 = 0;
  v10[0] = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)this + 232))(this, &v14, v10) & 1) != 0)return 1;
  v12 = 0;
  v13 = 1;
  v4 = 0;
  v5 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 26))
  {
    Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
    v5 = mlir::Token::getLoc(Tok);
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v13) & 1) != 0)return 1;
    if (llvm::MCAsmParser::parseOptionalToken(this, 26))
    {
      v7 = (mlir::Token *)llvm::MCAsmParser::getTok(this);
      v4 = mlir::Token::getLoc(v7);
      if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v12) & 1) != 0)return 1;
    }
    else
    {
      v4 = 0;
    }
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v8 = v13;
  if ((v13 & 0x8000000000000000) != 0)
  {
    v10[0] = "'.fill' directive with negative size has no effect";
    v11 = 259;
    (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                  + 168))(this, v5, v10, 0, 0);
    return 0;
  }
  else
  {
    if (v13 >= 9)
    {
      v10[0] = "'.fill' directive with size greater than 8 has been truncated to 8";
      v11 = 259;
      (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, v5, v10, 0, 0);
      v8 = 8;
      v13 = 8;
    }
    if (HIDWORD(v12))
    {
      if (v8 >= 5)
      {
        v10[0] = "'.fill' directive pattern has been truncated to 32-bits";
        v11 = 259;
        (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, v4, v10, 0, 0);
      }
    }
    v9 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 624))(v9, v14, v13, v12, Loc);
    return 0;
  }
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveZero(_anonymous_namespace_::AsmParser *this)
{
  uint64_t Loc;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Loc = llvm::MCAsmLexer::getLoc((_anonymous_namespace_::AsmParser *)((char *)this + 40));
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v5 = 0;
  v6 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, uint64_t *))(*(_QWORD *)this + 232))(this, &v5, &v6) & 1) != 0)return 1;
  v6 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 26)
  {
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v6) & 1) != 0)return 1;
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 616))(v4, v5, v6, Loc);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveComm(_anonymous_namespace_::AsmParser *this, int a2)
{
  llvm::MCAsmLexer *v5;
  uint64_t Loc;
  llvm::MCContext *v7;
  uint64_t Symbol;
  llvm::MCAsmLexer *v9;
  uint64_t v10;
  llvm::MCAsmLexer *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint8x8_t v16;
  int v17;
  uint64_t v18;
  void (*v19)(void);
  _anonymous_namespace_::AsmParser *v20;
  uint64_t v21;
  int8x8_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  const char *v26[4];
  __int16 v27;

  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v5 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  Loc = llvm::MCAsmLexer::getLoc(v5);
  v24 = 0;
  v25 = 0;
  if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v24))
  {
    v26[0] = "expected identifier in directive";
    v27 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)v26, 0, 0);
  }
  v7 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v27 = 261;
  v26[0] = v24;
  v26[1] = v25;
  Symbol = llvm::MCContext::getOrCreateSymbol(v7, v26);
  v26[0] = "expected comma";
  v27 = 259;
  if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)v26))
    return 1;
  v23 = 0;
  v9 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  v10 = llvm::MCAsmLexer::getLoc(v9);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v23) & 1) != 0)
    return 1;
  v22 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) != 26)
    goto LABEL_18;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  v11 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  v12 = llvm::MCAsmLexer::getLoc(v11);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, int8x8_t *))(*(_QWORD *)this + 256))(this, &v22) & 1) != 0)return 1;
  v13 = *((_QWORD *)this + 22);
  v14 = *(_DWORD *)(v13 + 356);
  if (a2 && !v14)
  {
    v15 = "alignment not supported on this target";
LABEL_32:
    v26[0] = v15;
    v27 = 259;
    v20 = this;
    v21 = v12;
    return llvm::MCAsmParser::Error((uint64_t)v20, v21, (uint64_t)v26, 0, 0);
  }
  if ((a2 & 1) != 0)
  {
    if (v14 != 1)
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(v13 + 354))
  {
    goto LABEL_18;
  }
  v16 = (uint8x8_t)vcnt_s8(v22);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] != 1)
  {
    v15 = "alignment must be a power of 2";
    goto LABEL_32;
  }
  v22 = (int8x8_t)(63 - __clz(*(_QWORD *)&v22));
LABEL_18:
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  if (v23 < 0)
  {
    v26[0] = "size must be non-negative";
    v27 = 259;
    v20 = this;
    v21 = v10;
    return llvm::MCAsmParser::Error((uint64_t)v20, v21, (uint64_t)v26, 0, 0);
  }
  v17 = *(_DWORD *)(Symbol + 8);
  if ((v17 & 4) != 0)
  {
    if ((*(_DWORD *)(Symbol + 8) & 0x7000) == 0x2000)
    {
      *(_QWORD *)(Symbol + 24) = 0;
      v17 &= 0xFFFF8FFF;
    }
    *(_QWORD *)Symbol = 0;
    *(_DWORD *)(Symbol + 8) = v17 & 0xFFFFFFFB;
  }
  if (!llvm::MCSymbol::isUndefined((llvm::MCSymbol *)Symbol, 1))
  {
    v26[0] = "invalid symbol redefinition";
    v27 = 259;
    v20 = this;
    v21 = Loc;
    return llvm::MCAsmParser::Error((uint64_t)v20, v21, (uint64_t)v26, 0, 0);
  }
  v18 = *(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (a2)
    v19 = *(void (**)(void))(v18 + 472);
  else
    v19 = *(void (**)(void))(v18 + 464);
  v19();
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveAbort(_anonymous_namespace_::AsmParser *this)
{
  llvm::MCAsmLexer *v2;
  uint64_t Loc;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  v2 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  Loc = llvm::MCAsmLexer::getLoc(v2);
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 200))(this);
  v6 = v5;
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  if (v6)
  {
    v10 = 1283;
    v9[0] = ".abort '";
    v9[2] = v4;
    v9[3] = v6;
    v11[0] = v9;
    v11[2] = "' detected. Assembly stopping.";
    v8 = 770;
  }
  else
  {
    v11[0] = ".abort detected. Assembly stopping.";
    v8 = 259;
  }
  v12 = v8;
  return llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v11, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveInclude(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t Loc;
  _BOOL8 v4;
  _BOOL8 v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  std::string v15;
  void *v16[2];
  std::string::size_type v17;
  void *__p[2];
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  void *v25[2];
  uint64_t v26;

  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v4 = *(_DWORD *)llvm::MCAsmParser::getTok(this) != 3;
  v23 = "expected string in '.include' directive";
  v24 = 259;
  if ((llvm::MCAsmParser::check(this, v4, (const llvm::Twine *)&v23) & 1) == 0
    && ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void **))(*(_QWORD *)this + 208))(this, v25) & 1) == 0)
  {
    v5 = *(_DWORD *)llvm::MCAsmParser::getTok(this) != 9;
    v21 = "unexpected token in '.include' directive";
    v22 = 259;
    if ((llvm::MCAsmParser::check(this, v5, (const llvm::Twine *)&v21) & 1) == 0)
    {
      __p[0] = 0;
      __p[1] = 0;
      v19 = 0;
      v7 = (_QWORD *)*((_QWORD *)this + 30);
      v8 = llvm::MCAsmLexer::getLoc((_anonymous_namespace_::AsmParser *)((char *)this + 40));
      v9 = llvm::SourceMgr::AddIncludeFile(v7, (uint64_t)v25, v8, (uint64_t)__p);
      v10 = v9;
      if (v9)
      {
        *((_DWORD *)this + 74) = v9;
        v11 = *(_QWORD *)(**((_QWORD **)this + 30) + 24 * (v9 - 1));
        llvm::AsmLexer::setBuffer((uint64_t)this + 40, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8), 0, 1);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(__p[0]);
      std::operator+<char>();
      v12 = std::string::append(&v15, "'");
      v13 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)v16 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v17 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v20 = 260;
      __p[0] = v16;
      v6 = llvm::MCAsmParser::check((uint64_t)this, v10 == 0, Loc, (uint64_t)__p);
      if (SHIBYTE(v17) < 0)
      {
        operator delete(v16[0]);
        if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_12:
          if ((SHIBYTE(v26) & 0x80000000) == 0)
            return v6;
          goto LABEL_5;
        }
      }
      else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v15.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return v6;
      goto LABEL_5;
    }
  }
  v6 = 1;
  if (SHIBYTE(v26) < 0)
LABEL_5:
    operator delete(v25[0]);
  return v6;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIncbin(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t Loc;
  _BOOL8 v4;
  uint64_t v5;
  mlir::Token *v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  std::string *v22;
  std::string::size_type v23;
  std::string v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *__p[2];
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  __int128 v32;
  std::string::size_type v33;

  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v4 = *(_DWORD *)llvm::MCAsmParser::getTok(this) != 3;
  v30[0] = "expected string in '.incbin' directive";
  v31 = 259;
  if ((llvm::MCAsmParser::check(this, v4, (const llvm::Twine *)v30) & 1) != 0
    || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void **))(*(_QWORD *)this + 208))(this, __p) & 1) != 0)
  {
    goto LABEL_13;
  }
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v5 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 26))
  {
    if (*(_DWORD *)llvm::MCAsmParser::getTok(this) != 26
      && ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &v25) & 1) != 0
       || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v27) & 1) != 0))
    {
      goto LABEL_13;
    }
    if (llvm::MCAsmParser::parseOptionalToken(this, 26))
    {
      v6 = (mlir::Token *)llvm::MCAsmParser::getTok(this);
      v5 = mlir::Token::getLoc(v6);
      v30[0] = 0;
      if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)this + 232))(this, &v26, v30) & 1) != 0)
      {
LABEL_13:
        v7 = 1;
        goto LABEL_14;
      }
    }
    else
    {
      v5 = 0;
    }
  }
  if (llvm::MCAsmParser::parseEOL(this))
    goto LABEL_13;
  v30[0] = "skip is negative";
  v31 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v27 >> 63, v25, (uint64_t)v30) & 1) != 0)
    goto LABEL_13;
  v9 = v26;
  v10 = v27;
  v32 = 0uLL;
  v33 = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 30);
  v12 = llvm::MCAsmLexer::getLoc((_anonymous_namespace_::AsmParser *)((char *)this + 40));
  v13 = llvm::SourceMgr::AddIncludeFile(v11, (uint64_t)__p, v12, (uint64_t)&v32);
  if (v13)
  {
    v14 = *(_QWORD *)(**((_QWORD **)this + 30) + 24 * (v13 - 1));
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 16) - v15;
    if (v16 < v10)
      v10 = v16;
    v17 = v16 - v10;
    if (!v9)
      goto LABEL_25;
    v24.__r_.__value_.__r.__words[0] = 0;
    v18 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
    if ((llvm::MCExpr::evaluateAsAbsolute(v9, &v24) & 1) != 0)
    {
      if ((v24.__r_.__value_.__r.__words[0] & 0x8000000000000000) == 0)
      {
        if (v17 >= v24.__r_.__value_.__r.__words[0])
          v17 = v24.__r_.__value_.__r.__words[0];
LABEL_25:
        v19 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
        (*(void (**)(uint64_t, unint64_t, std::string::size_type))(*(_QWORD *)v19 + 496))(v19, v15 + v10, v17);
        v20 = 0;
        goto LABEL_30;
      }
      v30[0] = "negative count has no effect";
      v31 = 259;
      v21 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, v5, v30, 0, 0);
    }
    else
    {
      v30[0] = "expected absolute expression";
      v31 = 259;
      v21 = llvm::MCAsmParser::Error((uint64_t)this, v5, (uint64_t)v30, 0, 0);
    }
    v20 = v21;
  }
  else
  {
    v20 = 1;
  }
LABEL_30:
  if (SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  if (!v20)
  {
    v7 = 0;
    goto LABEL_14;
  }
  std::operator+<char>();
  v22 = std::string::append(&v24, "'");
  v23 = v22->__r_.__value_.__r.__words[2];
  v32 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v33 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v31 = 260;
  v30[0] = &v32;
  v7 = llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v30, 0, 0);
  if (SHIBYTE(v33) < 0)
  {
    operator delete((void *)v32);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
LABEL_14:
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  return v7;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveRept(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  char *v17;
  size_t v18;
  mlir::Token *v19;
  uint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  void **v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(a1);
  Loc = mlir::Token::getLoc(Tok);
  v32 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, void **))(*(_QWORD *)a1 + 232))(a1, &v31, &v32) & 1) != 0)
    return 1;
  v30 = 0;
  v10 = v31;
  v11 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  if ((llvm::MCExpr::evaluateAsAbsolute(v10, &v30) & 1) == 0)
  {
    LOWORD(v25) = 1283;
    v21 = "unexpected token in '";
    v23 = a3;
    v24 = a4;
    v32 = &v21;
    *((_QWORD *)&v33 + 1) = "' directive";
    v35 = 770;
    return llvm::MCAsmParser::Error((uint64_t)a1, Loc, (uint64_t)&v32, 0, 0);
  }
  v32 = "Count is negative";
  v35 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)a1, v30 >> 63, Loc, (uint64_t)&v32) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v12 = 1;
  if (v14)
  {
    v15 = v14;
    v32 = &v34;
    v33 = xmmword_181236410;
    v22 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v21 = (const char *)off_1E0E22B88;
    v29 = &v32;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v21, 0, 0, 0);
    while (1)
    {
      v16 = v30 != 0;
      v12 = v30-- != 0;
      if (!v16)
        break;
      v17 = *(char **)(v15 + 16);
      v18 = *(_QWORD *)(v15 + 24);
      v19 = (mlir::Token *)llvm::MCAsmParser::getTok(a1);
      v20 = mlir::Token::getLoc(v19);
    }
LABEL_13:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
    if (v32 != &v34)
      free(v32);
  }
  return v12;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIrp(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void **v23;
  void **v24;
  char *v25;
  size_t v26;
  mlir::Token *Tok;
  uint64_t Loc;
  const char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  void **v37;
  void *__p;
  void **v39;
  uint64_t v40;
  _OWORD v41[3];
  void *v42;
  __int128 v43;
  _WORD v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  memset(v41, 0, 42);
  __p = 0;
  v39 = 0;
  v40 = 0;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *, _OWORD *))(*(_QWORD *)a1 + 192))(a1, v41);
  v29 = "expected identifier in '.irp' directive";
  LOWORD(v33) = 259;
  if ((llvm::MCAsmParser::check(a1, v4, (const llvm::Twine *)&v29) & 1) != 0
    || (v42 = "expected comma", v44[4] = 259, llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)&v42))
    || llvm::MCAsmParser::parseEOL(a1))
  {
    v5 = 1;
  }
  else
  {
    v5 = 1;
    if (v20)
    {
      v21 = v20;
      v42 = v44;
      v43 = xmmword_181236410;
      v30 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 1;
      v32 = 0;
      v33 = 0;
      v31 = 0;
      v29 = (const char *)off_1E0E22B88;
      v37 = &v42;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v29, 0, 0, 0);
      v22 = (char *)__p;
      v23 = v39;
      if (__p == v39)
      {
LABEL_36:
        v5 = 0;
      }
      else
      {
        v5 = 1;
        v24 = (void **)__p;
        while (1)
        {
          v25 = *(char **)(v21 + 16);
          v26 = *(_QWORD *)(v21 + 24);
          Tok = (mlir::Token *)llvm::MCAsmParser::getTok(a1);
          Loc = mlir::Token::getLoc(Tok);
          v24 += 3;
          v22 += 24;
          if (v24 == v23)
            goto LABEL_36;
        }
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v29);
      if (v42 != v44)
        free(v42);
    }
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v39;
    v8 = __p;
    if (v39 != __p)
    {
      v9 = v39;
      do
      {
        v12 = (char *)*(v9 - 3);
        v9 -= 3;
        v11 = v12;
        if (v12)
        {
          v13 = (char *)*(v7 - 2);
          v10 = v11;
          if (v13 != v11)
          {
            do
            {
              if (*((_DWORD *)v13 - 2) >= 0x41u)
              {
                v14 = (void *)*((_QWORD *)v13 - 2);
                if (v14)
                  operator delete[](v14);
              }
              v13 -= 40;
            }
            while (v13 != v11);
            v10 = *v9;
          }
          *(v7 - 2) = v11;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = __p;
    }
    v39 = v6;
    operator delete(v8);
  }
  v15 = *(_QWORD *)&v41[1];
  if (*(_QWORD *)&v41[1])
  {
    v16 = *((_QWORD *)&v41[1] + 1);
    v17 = *(void **)&v41[1];
    if (*((_QWORD *)&v41[1] + 1) != *(_QWORD *)&v41[1])
    {
      do
      {
        if (*(_DWORD *)(v16 - 8) >= 0x41u)
        {
          v18 = *(void **)(v16 - 16);
          if (v18)
            operator delete[](v18);
        }
        v16 -= 40;
      }
      while (v16 != v15);
      v17 = *(void **)&v41[1];
    }
    *((_QWORD *)&v41[1] + 1) = v15;
    operator delete(v17);
  }
  return v5;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIrpc(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  mlir::Token *Tok;
  uint64_t Loc;
  char v32;
  char *v33;
  char *v34;
  void *v35;
  __int128 v36;
  int v37;
  void *v38;
  char *v39;
  uint64_t v40;
  _QWORD v41[4];
  __int16 v42;
  void *__p;
  void **v44;
  uint64_t v45;
  _OWORD v46[3];
  void *v47;
  __int128 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  memset(v46, 0, 42);
  __p = 0;
  v44 = 0;
  v45 = 0;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *, _OWORD *))(*(_QWORD *)a1 + 192))(a1, v46);
  v41[0] = "expected identifier in '.irpc' directive";
  v42 = 259;
  if ((llvm::MCAsmParser::check(a1, v4, (const llvm::Twine *)v41) & 1) != 0)
    goto LABEL_4;
  v47 = "expected comma";
  v50 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)&v47)
  {
    goto LABEL_4;
  }
  if ((char *)v44 - (_BYTE *)__p == 24 && *((_QWORD *)__p + 1) - *(_QWORD *)__p == 40)
  {
    if (llvm::MCAsmParser::parseEOL(a1)
    {
LABEL_4:
      v5 = 1;
      goto LABEL_5;
    }
    v21 = v20;
    v47 = &v49;
    v48 = xmmword_181236410;
    llvm::raw_svector_ostream::raw_svector_ostream((uint64_t)v41, (uint64_t)&v47);
    v22 = 0;
    v23 = *(_QWORD *)(*(_QWORD *)__p + 8);
    v24 = *(_QWORD *)(*(_QWORD *)__p + 16);
    while (1)
    {
      v5 = v22 != v24;
      if (v22 == v24)
        break;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v37 = 2;
      v26 = v22 + 1;
      if (v24 >= v22)
        v27 = v22;
      else
        v27 = v24;
      if (v27 <= v26)
        ++v22;
      if (v22 >= v24)
        v22 = v24;
      *(_QWORD *)&v36 = v23 + v27;
      *((_QWORD *)&v36 + 1) = v22 - v27;
      v39 = std::vector<llvm::AsmToken>::__emplace_back_slow_path<llvm::AsmToken::TokenKind,llvm::StringRef &>((char **)&v38, &v37, &v36);
      v28 = *(char **)(v21 + 16);
      v29 = *(_QWORD *)(v21 + 24);
      Tok = (mlir::Token *)llvm::MCAsmParser::getTok(a1);
      Loc = mlir::Token::getLoc(Tok);
      v33 = (char *)v38;
      if (v38)
      {
        v34 = v39;
        v25 = v38;
        if (v39 != v38)
        {
          do
          {
            if (*((_DWORD *)v34 - 2) >= 0x41u)
            {
              v35 = (void *)*((_QWORD *)v34 - 2);
              if (v35)
                operator delete[](v35);
            }
            v34 -= 40;
          }
          while (v34 != v33);
          v25 = v38;
        }
        v39 = v33;
        operator delete(v25);
      }
      v22 = v26;
      if ((v32 & 1) != 0)
        goto LABEL_55;
    }
LABEL_55:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v41);
    if (v47 != &v49)
      free(v47);
  }
  else
  {
    v47 = "unexpected token in '.irpc' directive";
    v50 = 259;
    v5 = llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v47, 0, 0);
  }
LABEL_5:
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v44;
    v8 = __p;
    if (v44 != __p)
    {
      v9 = v44;
      do
      {
        v12 = (char *)*(v9 - 3);
        v9 -= 3;
        v11 = v12;
        if (v12)
        {
          v13 = (char *)*(v7 - 2);
          v10 = v11;
          if (v13 != v11)
          {
            do
            {
              if (*((_DWORD *)v13 - 2) >= 0x41u)
              {
                v14 = (void *)*((_QWORD *)v13 - 2);
                if (v14)
                  operator delete[](v14);
              }
              v13 -= 40;
            }
            while (v13 != v11);
            v10 = *v9;
          }
          *(v7 - 2) = v11;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = __p;
    }
    v44 = v6;
    operator delete(v8);
  }
  v15 = *(_QWORD *)&v46[1];
  if (*(_QWORD *)&v46[1])
  {
    v16 = *((_QWORD *)&v46[1] + 1);
    v17 = *(void **)&v46[1];
    if (*((_QWORD *)&v46[1] + 1) != *(_QWORD *)&v46[1])
    {
      do
      {
        if (*(_DWORD *)(v16 - 8) >= 0x41u)
        {
          v18 = *(void **)(v16 - 16);
          if (v18)
            operator delete[](v18);
        }
        v16 -= 40;
      }
      while (v16 != v15);
      v17 = *(void **)&v46[1];
    }
    *((_QWORD *)&v46[1] + 1) = v15;
    operator delete(v17);
  }
  return v5;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveEndr(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int BufferContainingLoc;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  const char *v10;
  __int16 v11;

  v2 = *(_QWORD *)(a1 + 368);
  if (*(_QWORD *)(a1 + 360) == v2)
  {
    v10 = "unmatched '.endr' directive";
    v11 = 259;
    return llvm::MCAsmParser::TokError(a1, (uint64_t)&v10, 0, 0);
  }
  else
  {
    v3 = *(_QWORD *)(v2 - 8);
    v4 = *(_QWORD *)(v3 + 16);
    BufferContainingLoc = *(_DWORD *)(v3 + 8);
    if (!BufferContainingLoc)
      BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(a1 + 240), *(_QWORD *)(v3 + 16));
    *(_DWORD *)(a1 + 296) = BufferContainingLoc;
    v6 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (BufferContainingLoc - 1));
    llvm::AsmLexer::setBuffer(a1 + 40, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8), v4, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v7 = *(_QWORD *)(a1 + 368);
    v8 = *(void **)(v7 - 8);
    if (v8)
    {
      operator delete(v8);
      v7 = *(_QWORD *)(a1 + 368);
    }
    result = 0;
    *(_QWORD *)(a1 + 368) = v7 - 8;
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveBundleAlignMode(_anonymous_namespace_::AsmParser *this)
{
  llvm::MCAsmLexer *v2;
  uint64_t Loc;
  uint64_t v5;
  const char *v6;
  __int16 v7;
  unint64_t v8;

  v2 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  Loc = llvm::MCAsmLexer::getLoc(v2);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v8 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v8) & 1) != 0)return 1;
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v6 = "invalid bundle alignment size (expected between 0 and 30)";
  v7 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v8 > 0x1E, Loc, (uint64_t)&v6) & 1) != 0)
    return 1;
  v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 1216))(v5, v8);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveBundleLock(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t Loc;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL8 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v14 = 0;
  v15 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v5 = llvm::MCAsmParser::parseOptionalToken(this, 9);
  if (!v5)
  {
    v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v14);
    v12 = "invalid option for '.bundle_lock' directive";
    v13 = 259;
    if ((llvm::MCAsmParser::check((uint64_t)this, v7, Loc, (uint64_t)&v12) & 1) != 0)
      return 1;
    if (v15 == 12)
    {
      v8 = *(_QWORD *)v14 == 0x6F745F6E67696C61 && *(_DWORD *)(v14 + 8) == 1684956511;
      v9 = !v8;
    }
    else
    {
      v9 = 1;
    }
    v10 = "invalid option for '.bundle_lock' directive";
    v11 = 259;
    if ((llvm::MCAsmParser::check((uint64_t)this, v9, Loc, (uint64_t)&v10) & 1) != 0 || llvm::MCAsmParser::parseEOL(this))
      return 1;
  }
  v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v6 + 1224))(v6, !v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveBundleUnlock(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3;

  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1232))(v3);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveLEB128(_anonymous_namespace_::AsmParser *this, char a2)
{
  _QWORD v4[2];
  char v5;

  v5 = a2;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v4[0] = this;
  v4[1] = &v5;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveSpace(llvm::MCAsmParser *a1)
{
  uint64_t Loc;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Loc = llvm::MCAsmLexer::getLoc((llvm::MCAsmParser *)((char *)a1 + 40));
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v5 = 0;
  v6 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 232))(a1, &v5, &v6) & 1) != 0)
    return 1;
  v6 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(a1, 26)
    && ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v6) & 1) != 0)
  {
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 616))(v4, v5, v6, Loc);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveFile(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t Tok;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  char v17;
  char v18;
  size_t v19;
  char v20;
  uint64_t *v21;
  uint64_t **v22;
  _BOOL8 v23;
  BOOL v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  void *v40;
  uint64_t v41;
  int64x2_t v42;
  int8x16_t v43;
  _QWORD *v44;
  _WORD *v45;
  unsigned int v46;
  void *v47;
  const void *v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD **v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  uint64_t v72;
  void **v73;
  _QWORD *v74;
  _QWORD v75[2];
  char v76;
  _BYTE v77[7];
  _QWORD v78[2];
  char v79;
  _BYTE v80[7];
  std::string __p;
  __int16 v82;
  void *v83;
  size_t v84;
  uint64_t v85;
  _BYTE v86[7];
  unint64_t v87;
  unint64_t v88;
  void **v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[4];
  __int16 v96;
  _BYTE v97[17];
  _BYTE v98[17];
  _WORD *v99;
  uint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 4)
  {
    v9 = -1;
    goto LABEL_7;
  }
  Tok = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  v8 = *(uint64_t **)(Tok + 24);
  v6 = Tok + 24;
  v7 = v8;
  if (*(_DWORD *)(v6 + 8) < 0x41u)
    v7 = (uint64_t *)v6;
  v9 = *v7;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if ((v9 & 0x8000000000000000) == 0)
  {
LABEL_7:
    v92 = 0;
    v93 = 0;
    v94 = 0;
    if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, &v92) & 1) != 0)
    {
      v10 = 1;
      if ((SHIBYTE(v94) & 0x80000000) == 0)
        return v10;
LABEL_9:
      operator delete(v92);
      return v10;
    }
    v89 = 0;
    v90 = 0;
    v91 = 0;
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 3)
    {
      v95[0] = "explicit path specified, but no file number";
      v96 = 259;
      if ((llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v9 == -1, (const llvm::Twine *)v95) & 1) != 0
        || ((*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)a1 + 208))(a1, &v89) & 1) != 0)
      {
        v10 = 1;
        if (SHIBYTE(v91) < 0)
          goto LABEL_14;
LABEL_112:
        if ((SHIBYTE(v94) & 0x80000000) == 0)
          return v10;
        goto LABEL_9;
      }
      v13 = v89;
      if (v91 >= 0)
        v13 = (void **)&v89;
      v14 = HIBYTE(v91);
      if (v91 < 0)
        v14 = v90;
      v72 = v14;
      v73 = v13;
      v15 = &v92;
      if (v94 < 0)
        v15 = (void **)v92;
      v16 = HIBYTE(v94);
      if (v94 < 0)
        v16 = v93;
      v70 = v16;
      v71 = v15;
    }
    else
    {
      v70 = 0;
      v71 = 0;
      v11 = &v92;
      if (v94 < 0)
        v11 = (void **)v92;
      v12 = HIBYTE(v94);
      if (v94 < 0)
        v12 = v93;
      v72 = v12;
      v73 = v11;
    }
    v69 = a2;
    v87 = 0;
    v88 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    if (!llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 9))
    {
      v18 = 0;
      v17 = 0;
      v2 = 109;
      while (1)
      {
        v99 = 0;
        v100 = 0;
        v23 = *(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) != 2;
        v95[0] = "unexpected token in '.file' directive";
        v96 = 259;
        if ((llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v23, (const llvm::Twine *)v95) & 1) != 0
          || ((*(uint64_t (**)(uint64_t, _WORD **))(*(_QWORD *)a1 + 192))(a1, &v99) & 1) != 0)
        {
          break;
        }
        if (v100 == 6)
        {
          if (memcmp(v99, "source", 6uLL))
            goto LABEL_62;
          v95[0] = "source specified, but no file number";
          v96 = 259;
          if ((llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v9 == -1, (const llvm::Twine *)v95) & 1) != 0)
            break;
          v25 = *(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) != 3;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.file' directive";
          v82 = 259;
          if ((llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v25, (const llvm::Twine *)&__p) & 1) != 0)
            break;
          v10 = 1;
          v17 = 1;
          if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, &v83) & 1) != 0)
            goto LABEL_110;
        }
        else
        {
          if (v100 != 3 || (*v99 == 25709 ? (v24 = *((_BYTE *)v99 + 2) == 53) : (v24 = 0), !v24))
          {
LABEL_62:
            v95[0] = "unexpected token in '.file' directive";
            v96 = 259;
            v27 = llvm::MCAsmParser::TokError(a1, (uint64_t)v95, 0, 0);
            goto LABEL_122;
          }
          v95[0] = "MD5 checksum specified, but no file number";
          v96 = 259;
          if ((llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v9 == -1, (const llvm::Twine *)v95) & 1) != 0)
            break;
          v10 = 1;
          v18 = 1;
          if ((parseHexOcta((_anonymous_namespace_::AsmParser *)a1, (void **)&v88, (void **)&v87) & 1) != 0)
            goto LABEL_110;
        }
        if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 9))
          goto LABEL_32;
      }
      v10 = 1;
      if ((SHIBYTE(v85) & 0x80000000) == 0)
        goto LABEL_111;
      goto LABEL_123;
    }
    v17 = 0;
    v18 = 0;
LABEL_32:
    if (v9 == -1)
    {
      if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 144) + 364))
      {
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v26 + 664))(v26, v73, v72);
        v10 = 0;
        if (SHIBYTE(v85) < 0)
          goto LABEL_123;
        goto LABEL_111;
      }
      goto LABEL_109;
    }
    v19 = *(_QWORD *)(a1 + 216);
    v20 = *(_BYTE *)(v19 + 1593);
    if (!v20)
    {
LABEL_82:
      if ((v18 & 1) != 0)
      {
        v18 = v87;
        v2 = v88;
        v37 = HIBYTE(v88);
        v67 = HIWORD(v87);
        v68 = HIBYTE(v87);
        v65 = HIWORD(v88);
        v66 = v87 >> 40;
        v63 = v88 >> 40;
        v64 = HIDWORD(v87);
        v61 = HIDWORD(v88);
        v62 = v87 >> 24;
        v58 = v88 >> 16;
        v59 = v88 >> 24;
        v60 = v87 >> 16;
        v38 = 1;
        v56 = v88 >> 8;
        v57 = v87 >> 8;
        if ((v17 & 1) == 0)
          goto LABEL_84;
      }
      else
      {
        v38 = 0;
        LOBYTE(v37) = 0;
        LOBYTE(v65) = v20;
        LOBYTE(v63) = v20;
        LOBYTE(v61) = v20;
        LOBYTE(v59) = v20;
        LOBYTE(v58) = v20;
        LOBYTE(v56) = v20;
        LOBYTE(v68) = v20;
        LOBYTE(v67) = v20;
        LOBYTE(v66) = v20;
        LOBYTE(v64) = v20;
        LOBYTE(v62) = v20;
        LOBYTE(v60) = v20;
        LOBYTE(v57) = v20;
        if ((v17 & 1) == 0)
        {
LABEL_84:
          v39 = 0;
          v40 = 0;
          if (v9)
            goto LABEL_85;
LABEL_105:
          v50 = *(_QWORD *)(a1 + 216);
          if (*(unsigned __int16 *)(v50 + 1696) <= 4u)
            *(_WORD *)(v50 + 1696) = 5;
          v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
          v98[0] = v37;
          v98[1] = v65;
          v98[2] = v63;
          v98[3] = v61;
          v98[4] = v59;
          v98[5] = v58;
          v98[6] = v56;
          v98[7] = v2;
          v98[8] = v68;
          v98[9] = v67;
          v98[10] = v66;
          v98[11] = v64;
          v98[12] = v62;
          v98[13] = v60;
          v98[14] = v57;
          v98[15] = v18;
          v98[16] = v38;
          v78[0] = v40;
          v78[1] = v19;
          v79 = v39;
          *(_DWORD *)&v80[3] = *(_DWORD *)&v86[3];
          *(_DWORD *)v80 = *(_DWORD *)v86;
          (*(void (**)(uint64_t, void **, uint64_t, void **, uint64_t, _BYTE *, _QWORD *, _QWORD))(*(_QWORD *)v51 + 696))(v51, v71, v70, v73, v72, v98, v78, 0);
          goto LABEL_108;
        }
      }
      v46 = HIBYTE(v85);
      if (v85 < 0)
        v46 = v84;
      v47 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v19 + 184), v46, 3);
      v40 = v47;
      if (v85 >= 0)
        v48 = &v83;
      else
        v48 = v83;
      if (v85 >= 0)
        v49 = HIBYTE(v85);
      else
        v49 = v84;
      memcpy(v47, v48, v49);
      if (SHIBYTE(v85) < 0)
      {
        v39 = 1;
        v19 = v84;
        if (!v9)
          goto LABEL_105;
      }
      else
      {
        v19 = HIBYTE(v85);
        v39 = 1;
        if (!v9)
          goto LABEL_105;
      }
LABEL_85:
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v97[0] = v37;
      v97[1] = v65;
      v97[2] = v63;
      v97[3] = v61;
      v97[4] = v59;
      v97[5] = v58;
      v97[6] = v56;
      v97[7] = v2;
      v97[8] = v68;
      v97[9] = v67;
      v97[10] = v66;
      v97[11] = v64;
      v97[12] = v62;
      v97[13] = v60;
      v97[14] = v57;
      v97[15] = v18;
      v97[16] = v38;
      v75[0] = v40;
      v75[1] = v19;
      v76 = v39;
      *(_DWORD *)&v77[3] = *(_DWORD *)&v86[3];
      *(_DWORD *)v77 = *(_DWORD *)v86;
      (*(void (**)(_WORD **__return_ptr, uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _BYTE *, _QWORD *, _DWORD))(*(_QWORD *)v41 + 688))(&v99, v41, v9, v71, v70, v73, v72, v97, v75, 0);
      if ((v100 & 1) != 0)
      {
        v44 = v99;
        v99 = 0;
        v74 = v44;
        llvm::toString(&v74, &__p, v42, v43);
        v96 = 260;
        v95[0] = &__p;
        v10 = llvm::MCAsmParser::Error(a1, v69, (uint64_t)v95, 0, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v74)
          (*(void (**)(_QWORD *))(*v74 + 8))(v74);
        if ((v100 & 1) != 0)
        {
          v45 = v99;
          v99 = 0;
          if (v45)
          {
            (*(void (**)(_WORD *))(*(_QWORD *)v45 + 8))(v45);
            if (SHIBYTE(v85) < 0)
              goto LABEL_123;
LABEL_111:
            if ((SHIBYTE(v91) & 0x80000000) == 0)
              goto LABEL_112;
            goto LABEL_14;
          }
        }
LABEL_110:
        if (SHIBYTE(v85) < 0)
          goto LABEL_123;
        goto LABEL_111;
      }
LABEL_108:
      if (!*(_BYTE *)(a1 + 814))
      {
        v53 = (_QWORD **)(*(_QWORD *)(a1 + 216) + 1560);
        v54 = *v53;
        if (!*v53)
          goto LABEL_118;
        do
        {
          v55 = (uint64_t)v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
        if ((_QWORD **)v55 == v53 || *(_DWORD *)(v55 + 32))
LABEL_118:
          v55 = *(_QWORD *)(a1 + 216) + 1560;
        if (*(_DWORD *)(v55 + 144) && *(unsigned __int8 *)(v55 + 489) != *(unsigned __int8 *)(v55 + 490))
        {
          *(_BYTE *)(a1 + 814) = 1;
          v95[0] = "inconsistent use of MD5 checksums";
          v96 = 259;
          v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v69, v95, 0, 0);
LABEL_122:
          v10 = v27;
          if ((SHIBYTE(v85) & 0x80000000) == 0)
            goto LABEL_111;
LABEL_123:
          operator delete(v83);
          if ((SHIBYTE(v91) & 0x80000000) == 0)
            goto LABEL_112;
LABEL_14:
          operator delete(v89);
          if ((SHIBYTE(v94) & 0x80000000) == 0)
            return v10;
          goto LABEL_9;
        }
      }
LABEL_109:
      v10 = 0;
      goto LABEL_110;
    }
    v21 = *(uint64_t **)(v19 + 1560);
    if (v21)
    {
      while (1)
      {
        v22 = (uint64_t **)v21;
        if (!*((_DWORD *)v21 + 8))
          break;
        v21 = (uint64_t *)*v21;
        if (!*v22)
          goto LABEL_64;
      }
      v28 = (char *)v21;
      v31 = *((unsigned int *)v21 + 14);
      if (!(_DWORD)v31)
        goto LABEL_73;
    }
    else
    {
      v22 = (uint64_t **)(v19 + 1560);
LABEL_64:
      v28 = (char *)operator new(0x218uLL);
      *((_DWORD *)v28 + 8) = 0;
      *(_OWORD *)(v28 + 56) = 0u;
      *(_OWORD *)(v28 + 72) = 0u;
      *(_OWORD *)(v28 + 88) = 0u;
      *(_OWORD *)(v28 + 104) = 0u;
      *(_OWORD *)(v28 + 120) = 0u;
      *(_OWORD *)(v28 + 136) = 0u;
      *(_OWORD *)(v28 + 168) = 0u;
      *(_OWORD *)(v28 + 184) = 0u;
      *(_OWORD *)(v28 + 200) = 0u;
      *(_OWORD *)(v28 + 216) = 0u;
      *(_OWORD *)(v28 + 232) = 0u;
      *(_OWORD *)(v28 + 248) = 0u;
      *(_OWORD *)(v28 + 264) = 0u;
      *(_OWORD *)(v28 + 40) = 0u;
      *(_OWORD *)(v28 + 280) = 0u;
      *(_OWORD *)(v28 + 296) = 0u;
      *(_OWORD *)(v28 + 312) = 0u;
      *(_OWORD *)(v28 + 328) = 0u;
      *(_OWORD *)(v28 + 344) = 0u;
      *(_OWORD *)(v28 + 360) = 0u;
      *(_OWORD *)(v28 + 376) = 0u;
      *(_OWORD *)(v28 + 392) = 0u;
      *(_OWORD *)(v28 + 408) = 0u;
      *(_OWORD *)(v28 + 424) = 0u;
      *(_OWORD *)(v28 + 440) = 0u;
      *(_OWORD *)(v28 + 456) = 0u;
      *(_OWORD *)(v28 + 472) = 0u;
      *(_OWORD *)(v28 + 488) = 0u;
      *(_OWORD *)(v28 + 504) = 0u;
      *(_OWORD *)(v28 + 152) = 0u;
      *((_QWORD *)v28 + 6) = v28 + 64;
      *((_DWORD *)v28 + 15) = 3;
      *((_QWORD *)v28 + 17) = v28 + 152;
      *((_DWORD *)v28 + 37) = 3;
      *((_QWORD *)v28 + 47) = 0;
      *((_QWORD *)v28 + 46) = 0;
      *((_QWORD *)v28 + 48) = 0x1000000000;
      *(_OWORD *)(v28 + 392) = 0u;
      *(_OWORD *)(v28 + 408) = 0u;
      *(_OWORD *)(v28 + 424) = 0u;
      *(_QWORD *)(v28 + 437) = 0;
      v28[489] = 1;
      *((_QWORD *)v28 + 63) = 0;
      *((_QWORD *)v28 + 62) = 0;
      *((_DWORD *)v28 + 128) = 0;
      *((_QWORD *)v28 + 65) = v28 + 536;
      *((_QWORD *)v28 + 66) = 0;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = v22;
      *v22 = (uint64_t *)v28;
      v29 = (uint64_t *)v28;
      v30 = **(_QWORD **)(v19 + 1552);
      if (v30)
      {
        *(_QWORD *)(v19 + 1552) = v30;
        v29 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v19 + 1560), v29);
      ++*(_QWORD *)(v19 + 1568);
      v31 = *((unsigned int *)v28 + 14);
      if (!(_DWORD)v31)
        goto LABEL_73;
    }
    v32 = *((_QWORD *)v28 + 6);
    v33 = 24 * v31;
    do
    {
      if (*(char *)(v32 + v33 - 1) < 0)
        operator delete(*(void **)(v32 + v33 - 24));
      v33 -= 24;
    }
    while (v33);
LABEL_73:
    *((_DWORD *)v28 + 14) = 0;
    v34 = *((unsigned int *)v28 + 36);
    if ((_DWORD)v34)
    {
      v35 = *((_QWORD *)v28 + 17);
      v36 = 72 * v34;
      do
      {
        if (*(char *)(v35 + v36 - 49) < 0)
          operator delete(*(void **)(v35 + v36 - 72));
        v36 -= 72;
      }
      while (v36);
    }
    *((_DWORD *)v28 + 36) = 0;
    if (v28[439] < 0)
    {
      **((_BYTE **)v28 + 52) = 0;
      *((_QWORD *)v28 + 53) = 0;
    }
    else
    {
      v28[416] = 0;
      v28[439] = 0;
    }
    v28[490] = 0;
    v20 = 0;
    *((_WORD *)v28 + 244) = 256;
    v19 = *(_QWORD *)(a1 + 216);
    *(_BYTE *)(v19 + 1593) = 0;
    goto LABEL_82;
  }
  v95[0] = "negative file number";
  v96 = 259;
  return llvm::MCAsmParser::TokError(a1, (uint64_t)v95, 0, 0);
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveLine(_anonymous_namespace_::AsmParser *this)
{
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v5 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4
    && (v3 = "unexpected token in '.line' directive",
        v4 = 259,
        llvm::MCAsmParser::parseIntToken(this, &v5, (const llvm::Twine *)&v3)))
  {
    return 1;
  }
  else
  {
    return llvm::MCAsmParser::parseEOL(this);
  }
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveLoc(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t Loc;
  _BOOL8 v4;
  llvm::MCContext *v5;
  _BOOL4 isValidDwarfFileNumber;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23[8];
  __int16 v24;
  unsigned int v25[8];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  uint64_t v29;

  v29 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v27[0] = "unexpected token in '.loc' directive";
  v28 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v29, (const llvm::Twine *)v27))
    return 1;
  v4 = v29 <= 0 && (unint64_t)(*(unsigned __int16 *)(*((_QWORD *)this + 27) + 1696) < 5u);
  *(_QWORD *)v25 = "file number less than one in '.loc' directive";
  v26 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v4, Loc, (uint64_t)v25) & 1) != 0)
    return 1;
  v5 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  isValidDwarfFileNumber = llvm::MCContext::isValidDwarfFileNumber(v5, v29, 0);
  *(_QWORD *)v23 = "unassigned file number in '.loc' directive";
  v24 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, !isValidDwarfFileNumber, Loc, (uint64_t)v23) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v9 = llvm::MCAsmParser::getTok(this);
    v12 = *(uint64_t **)(v9 + 24);
    v10 = v9 + 24;
    v11 = v12;
    if (*(_DWORD *)(v10 + 8) < 0x41u)
      v11 = (uint64_t *)v10;
    v13 = *v11;
    if (*v11 < 0)
    {
      v21 = "line number less than zero in '.loc' directive";
LABEL_25:
      v27[0] = v21;
      v28 = 259;
      return llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)v27, 0, 0);
    }
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  }
  else
  {
    v13 = 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) != 4)
  {
    v18 = 0;
    goto LABEL_21;
  }
  v14 = llvm::MCAsmParser::getTok(this);
  v17 = *(uint64_t **)(v14 + 24);
  v15 = v14 + 24;
  v16 = v17;
  if (*(_DWORD *)(v15 + 8) < 0x41u)
    v16 = (uint64_t *)v15;
  v18 = *v16;
  if (*v16 < 0)
  {
    v21 = "column position less than zero in '.loc' directive";
    goto LABEL_25;
  }
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
LABEL_21:
  v19 = *(_BYTE *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this) + 1586) & 1;
  v22 = 0;
  v23[0] = v19;
  *(_QWORD *)v25 = 0;
  v27[0] = this;
  v27[1] = v23;
  v27[2] = &v22;
  v27[3] = v25;
  if ((v7 & 1) != 0)
    return v7;
  v20 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20 + 720))(v20, v29, v13, v18, v23[0], v22, v25[0]);
  return v7;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVFile(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t Loc;
  _BOOL8 v4;
  std::string::size_type size;
  std::string::size_type v6;
  unsigned int v7;
  int v8;
  std::string *p_p;
  unint64_t v10;
  std::string *v11;
  std::string *v12;
  int v13;
  std::string *v14;
  unint64_t v15;
  std::string::value_type *v16;
  int v17;
  int v18;
  unsigned int v20;
  void *v21;
  void *v22;
  std::string *v23;
  size_t v24;
  std::string::size_type v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  const char *v32;
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  std::string v36;
  __int16 v37;
  uint64_t v38;
  std::string __p;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v42 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  memset(&__p, 0, sizeof(__p));
  v38 = 0;
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected file number in '.cv_file' directive";
  v37 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v43, (const llvm::Twine *)&v36))
    goto LABEL_57;
  v34[0] = "file number less than one";
  v35 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v43 < 1, Loc, (uint64_t)v34) & 1) != 0)
    goto LABEL_57;
  v4 = *(_DWORD *)llvm::MCAsmParser::getTok(this) != 3;
  v32 = "unexpected token in '.cv_file' directive";
  v33 = 259;
  if ((llvm::MCAsmParser::check(this, v4, (const llvm::Twine *)&v32) & 1) != 0
    || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void ***))(*(_QWORD *)this + 208))(this, &v40) & 1) != 0)
  {
    goto LABEL_57;
  }
  if (llvm::MCAsmParser::parseOptionalToken(this, 9))
  {
    size = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_7;
  }
  v30 = *(_DWORD *)llvm::MCAsmParser::getTok(this) != 3;
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_file' directive";
  v37 = 259;
  if ((llvm::MCAsmParser::check(this, v30, (const llvm::Twine *)&v36) & 1) != 0
    || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, std::string *))(*(_QWORD *)this + 208))(this, &__p) & 1) != 0|| (v34[0] = "expected checksum kind in '.cv_file' directive", v35 = 259, llvm::MCAsmParser::parseIntToken(this, &v38, (const llvm::Twine *)v34))|| llvm::MCAsmParser::parseEOL(this))
  {
LABEL_57:
    v29 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_61;
    goto LABEL_58;
  }
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  v6 = __p.__r_.__value_.__r.__words[0];
LABEL_7:
  v8 = (char)v7;
  if ((v7 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v6;
  if ((v7 & 0x80u) == 0)
    v10 = v7;
  else
    v10 = size;
  memset(&v36, 0, sizeof(v36));
  if (v10)
  {
    std::string::resize(&v36, (v10 + 1) >> 1, 0);
    v11 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v36;
    else
      v12 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v10 & 1) != 0)
    {
      v13 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[p_p->__r_.__value_.__s.__data_[0]];
      if (v13 == 0xFFFF)
        goto LABEL_31;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v36;
      v12->__r_.__value_.__s.__data_[0] = v13;
      v12 = (std::string *)((char *)&v11->__r_.__value_.__l.__data_ + 1);
      v14 = &__p;
      if (v8 < 0)
        v14 = (std::string *)v6;
      p_p = (std::string *)((char *)&v14->__r_.__value_.__l.__data_ + 1);
      --v10;
    }
    if (v10 >= 2)
    {
      v15 = v10 >> 1;
      v16 = &p_p->__r_.__value_.__s.__data_[1];
      do
      {
        v17 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(v16 - 1)];
        v18 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*v16];
        if (v17 == 0xFFFF || v18 == 0xFFFF)
          break;
        v16 += 2;
        v12->__r_.__value_.__s.__data_[0] = v18 | (16 * v17);
        v12 = (std::string *)((char *)v12 + 1);
        --v15;
      }
      while (v15);
    }
  }
LABEL_31:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v36;
  v20 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = v36.__r_.__value_.__r.__words[1];
  v21 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(*((_QWORD *)this + 27) + 184), v20, 0);
  v22 = v21;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &__p;
  else
    v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v24 = __p.__r_.__value_.__l.__size_;
  memcpy(v21, v23, v24);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (v42 >= 0)
    v27 = (void **)&v40;
  else
    v27 = v40;
  if (v42 >= 0)
    v28 = HIBYTE(v42);
  else
    v28 = v41;
  if (((*(uint64_t (**)(uint64_t, _QWORD, void **, uint64_t, void *, std::string::size_type, _QWORD))(*(_QWORD *)v26 + 728))(v26, v43, v27, v28, v22, v25, v38) & 1) != 0)
  {
    v29 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_61:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42) < 0)
        goto LABEL_62;
      return v29;
    }
  }
  else
  {
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)"file number already allocated";
    v37 = 259;
    v29 = llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)&v36, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_61;
  }
LABEL_58:
  if (SHIBYTE(v42) < 0)
LABEL_62:
    operator delete(v40);
  return v29;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVFuncId(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;

  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v6 = 0;
  v13 = 0;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &v13) & 1) != 0)
    return 1;
  v10 = 1283;
  v9[0] = "expected function id in '";
  v9[2] = ".cv_func_id";
  v9[3] = 11;
  v11[0] = v9;
  v11[2] = "' directive";
  v12 = 770;
  if (llvm::MCAsmParser::parseIntToken(this, &v6, (const llvm::Twine *)v11))
    return 1;
  v7 = "expected function id within range [0, UINT_MAX)";
  v8 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, (unint64_t)v6 > 0xFFFFFFFE, v13, (uint64_t)&v7) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 736))(v5, v6) & 1) != 0)
    return 0;
  v11[0] = "function id already allocated";
  v12 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v11, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVInlineSiteId(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v4;
  int *v5;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  _BOOL8 v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[2];
  const char *v37;
  uint64_t v38;
  __int16 v39;
  _QWORD v40[2];
  const char *v41;
  __int16 v42;
  uint64_t v43;

  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v43 = 0;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &v43) & 1) != 0)
    return 1;
  v39 = 1283;
  v36[0] = "expected function id in '";
  v37 = ".cv_inline_site_id";
  v38 = 18;
  v40[0] = v36;
  v41 = "' directive";
  v42 = 770;
  if (llvm::MCAsmParser::parseIntToken(this, &v33, (const llvm::Twine *)v40))
    return 1;
  v34[0] = "expected function id within range [0, UINT_MAX)";
  v35 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, (unint64_t)v33 > 0xFFFFFFFE, v43, (uint64_t)v34) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) != 2)
    goto LABEL_7;
  v4 = llvm::MCAsmParser::getTok(this);
  if (*(_DWORD *)v4 != 2)
  {
    v5 = *(int **)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = v7 - 1;
    v9 = v7 != 0;
    if (v7)
      v5 = (int *)((char *)v5 + 1);
    if (v8 < v9)
      v8 = 1;
    if (v8 < v7)
      v7 = v8;
    if (v7 - v9 != 6)
      goto LABEL_7;
LABEL_15:
    v10 = *v5;
    v11 = *((unsigned __int16 *)v5 + 2);
    v6 = v10 != 1752459639 || v11 != 28265;
    goto LABEL_21;
  }
  v5 = *(int **)(v4 + 8);
  if (*(_QWORD *)(v4 + 16) == 6)
    goto LABEL_15;
LABEL_7:
  v6 = 1;
LABEL_21:
  v40[0] = "expected 'within' identifier in '.cv_inline_site_id' directive";
  v42 = 259;
  if ((llvm::MCAsmParser::check(this, v6, (const llvm::Twine *)v40) & 1) != 0)
    return 1;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  v43 = 0;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &v43) & 1) != 0)
    return 1;
  v39 = 1283;
  v36[0] = "expected function id in '";
  v37 = ".cv_inline_site_id";
  v38 = 18;
  v40[0] = v36;
  v41 = "' directive";
  v42 = 770;
  if (llvm::MCAsmParser::parseIntToken(this, &v32, (const llvm::Twine *)v40))
    return 1;
  v34[0] = "expected function id within range [0, UINT_MAX)";
  v35 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, (unint64_t)v32 > 0xFFFFFFFE, v43, (uint64_t)v34) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) != 2)
    goto LABEL_42;
  v13 = llvm::MCAsmParser::getTok(this);
  if (*(_DWORD *)v13 == 2)
  {
    v14 = *(uint64_t **)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
  }
  else
  {
    v14 = *(uint64_t **)(v13 + 8);
    v16 = *(_QWORD *)(v13 + 16);
    v17 = v16 - 1;
    v18 = v16 != 0;
    if (v16)
      v14 = (uint64_t *)((char *)v14 + 1);
    if (v17 < v18)
      v17 = 1;
    if (v17 < v16)
      v16 = v17;
    v15 = v16 - v18;
  }
  if (v15 == 10)
  {
    v19 = *v14;
    v20 = *((unsigned __int16 *)v14 + 4);
    v21 = v19 == 0x5F64656E696C6E69 && v20 == 29793;
    v22 = !v21;
  }
  else
  {
LABEL_42:
    v22 = 1;
  }
  v40[0] = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
  v42 = 259;
  if ((llvm::MCAsmParser::check(this, v22, (const llvm::Twine *)v40) & 1) != 0)
    return 1;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  v40[0] = "expected line number after 'inlined_at'";
  v42 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v30, (const llvm::Twine *)v40))
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v23 = llvm::MCAsmParser::getTok(this);
    v26 = *(unsigned int **)(v23 + 24);
    v24 = (unsigned int *)(v23 + 24);
    v25 = v26;
    if (v24[2] < 0x41)
      v25 = v24;
    v27 = *v25;
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  }
  else
  {
    v27 = 0;
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v29 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v29 + 744))(v29, v33, v32, v31, v30, v27, Loc) & 1) != 0)return 0;
  v40[0] = "function id already allocated";
  v42 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v40, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVLoc(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19[32];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[2];
  const char *v24;
  __int16 v25;
  uint64_t v26;

  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  mlir::Token::getLoc(Tok);
  v17 = 0;
  v18 = 0;
  v26 = 0;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &v26) & 1) != 0)
    return 1;
  v22 = 1283;
  v21[0] = "expected function id in '";
  v21[2] = ".cv_loc";
  v21[3] = 7;
  v23[0] = v21;
  v24 = "' directive";
  v25 = 770;
  if (llvm::MCAsmParser::parseIntToken(this, &v18, (const llvm::Twine *)v23))
    return 1;
  *(_QWORD *)v19 = "expected function id within range [0, UINT_MAX)";
  v20 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, (unint64_t)v18 > 0xFFFFFFFE, v26, (uint64_t)v19) & 1) != 0
  {
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v5 = llvm::MCAsmParser::getTok(this);
    v8 = *(uint64_t **)(v5 + 24);
    v6 = v5 + 24;
    v7 = v8;
    if (*(_DWORD *)(v6 + 8) < 0x41u)
      v7 = (uint64_t *)v6;
    v9 = *v7;
    if (*v7 < 0)
    {
      v16 = "line number less than zero in '.cv_loc' directive";
      goto LABEL_23;
    }
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  }
  else
  {
    v9 = 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v10 = llvm::MCAsmParser::getTok(this);
    v13 = *(uint64_t **)(v10 + 24);
    v11 = v10 + 24;
    v12 = v13;
    if (*(_DWORD *)(v11 + 8) < 0x41u)
      v12 = (uint64_t *)v11;
    v14 = *v12;
    if ((*v12 & 0x8000000000000000) == 0)
    {
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      goto LABEL_19;
    }
    v16 = "column position less than zero in '.cv_loc' directive";
LABEL_23:
    v23[0] = v16;
    v25 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)v23, 0, 0);
  }
  v14 = 0;
LABEL_19:
  v19[0] = 0;
  v21[0] = 0;
  v23[0] = this;
  v23[1] = v19;
  v24 = (const char *)v21;
  if ((v3 & 1) == 0)
  {
    v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, BOOL))(*(_QWORD *)v15 + 752))(v15, v18, v17, v9, v14, v19[0], v21[0] != 0);
  }
  return v3;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVLinetable(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t v3;
  uint64_t v4;
  llvm::MCContext *v6;
  uint64_t v7;
  llvm::MCContext *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Loc;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;

  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v21 = 0;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &v21) & 1) != 0)
    return 1;
  v20 = 1283;
  v19[0] = "expected function id in '";
  v19[2] = ".cv_linetable";
  v19[3] = 13;
  v22 = (const char *)v19;
  v24 = "' directive";
  v25 = 770;
  if (llvm::MCAsmParser::parseIntToken(this, &v16, (const llvm::Twine *)&v22))
    return 1;
  v17[0] = "expected function id within range [0, UINT_MAX)";
  v18 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, (unint64_t)v16 > 0xFFFFFFFE, v21, (uint64_t)v17) & 1) != 0)
    return 1;
  v22 = "expected comma";
  v25 = 259;
  if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v22))
    return 1;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &Loc) & 1) != 0)
    return 1;
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v14);
  v19[0] = "expected identifier in directive";
  v20 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v3, Loc, (uint64_t)v19) & 1) != 0)
    return 1;
  v22 = "expected comma";
  v25 = 259;
  if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v22))
    return 1;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &Loc) & 1) != 0)
    return 1;
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v12);
  v17[0] = "expected identifier in directive";
  v18 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v4, Loc, (uint64_t)v17) & 1) != 0)
    return 1;
  v6 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v25 = 261;
  v22 = v14;
  v23 = v15;
  v7 = llvm::MCContext::getOrCreateSymbol(v6, &v22);
  v8 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v25 = 261;
  v22 = v12;
  v23 = v13;
  v9 = llvm::MCContext::getOrCreateSymbol(v8, &v22);
  v10 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 760))(v10, v16, v7, v9);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVInlineLinetable(_anonymous_namespace_::AsmParser *this)
{
  mlir::Token *Tok;
  uint64_t v3;
  uint64_t v4;
  llvm::MCContext *v6;
  uint64_t v7;
  llvm::MCContext *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  uint64_t Loc;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  __int16 v32;

  v24 = 0;
  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(this);
  Loc = mlir::Token::getLoc(Tok);
  v15[0] = 0;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, v15) & 1) != 0)
    return 1;
  v28 = 1283;
  v27[0] = "expected function id in '";
  v27[2] = ".cv_inline_linetable";
  v27[3] = 20;
  v29 = (const char *)v27;
  v31 = "' directive";
  v32 = 770;
  if (llvm::MCAsmParser::parseIntToken(this, &v24, (const llvm::Twine *)&v29))
    return 1;
  v25[0] = "expected function id within range [0, UINT_MAX)";
  v26 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, (unint64_t)v24 > 0xFFFFFFFE, v15[0], (uint64_t)v25) & 1) != 0)
    return 1;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &Loc) & 1) != 0)
    return 1;
  v29 = "expected SourceField in '.cv_inline_linetable' directive";
  v32 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v23, (const llvm::Twine *)&v29))
    return 1;
  v27[0] = "File id less than zero in '.cv_inline_linetable' directive";
  v28 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v23 < 1, Loc, (uint64_t)v27) & 1) != 0)
    return 1;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &Loc) & 1) != 0)
    return 1;
  v25[0] = "expected SourceLineNum in '.cv_inline_linetable' directive";
  v26 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v22, (const llvm::Twine *)v25))
    return 1;
  v15[0] = (uint64_t)"Line number less than zero in '.cv_inline_linetable' directive";
  v16 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, (unint64_t)v22 >> 63, Loc, (uint64_t)v15) & 1) != 0)
    return 1;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &Loc) & 1) != 0)
    return 1;
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v20);
  v13 = "expected identifier in directive";
  v14 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v3, Loc, (uint64_t)&v13) & 1) != 0)
    return 1;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)this, &Loc) & 1) != 0)
    return 1;
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v18);
  v11 = "expected identifier in directive";
  v12 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)this, v4, Loc, (uint64_t)&v11) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v6 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v32 = 261;
  v29 = v20;
  v30 = v21;
  v7 = llvm::MCContext::getOrCreateSymbol(v6, &v29);
  v8 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v32 = 261;
  v29 = v18;
  v30 = v19;
  v9 = llvm::MCContext::getOrCreateSymbol(v8, &v29);
  v10 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 768))(v10, v24, v23, v22, v7, v9);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVDefRange(_anonymous_namespace_::AsmParser *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  llvm::MCAsmLexer *v5;
  uint64_t Loc;
  llvm::MCContext *v7;
  uint64_t v8;
  llvm::MCAsmLexer *v9;
  llvm::MCContext *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  const char *v20;
  int Key;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const unsigned __int8 *v32;
  const char *v33;
  const unsigned __int8 *v34;
  __int16 v35;
  int8x16_t *v36;
  const unsigned __int8 *v37;

  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v5 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
      Loc = llvm::MCAsmLexer::getLoc(v5);
      v36 = 0;
      v37 = 0;
      if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, int8x16_t **))(*(_QWORD *)this + 192))(this, &v36))
      {
        goto LABEL_29;
      }
      v7 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v35 = 261;
      v33 = (const char *)v36;
      v34 = v37;
      v8 = llvm::MCContext::getOrCreateSymbol(v7, &v33);
      v9 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
      Loc = llvm::MCAsmLexer::getLoc(v9);
      v31 = 0;
      v32 = 0;
      if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v31))
      {
LABEL_29:
        v20 = "expected identifier in directive";
        goto LABEL_33;
      }
      v10 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v35 = 261;
      v33 = v31;
      v34 = v32;
      v11 = llvm::MCContext::getOrCreateSymbol(v10, &v33);
      v12 = v11;
      if (v3 >= v4)
        break;
      *v3 = v8;
      v3[1] = v11;
      v3 += 2;
LABEL_4:
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) != 2)
        goto LABEL_26;
    }
    v13 = ((char *)v3 - (char *)v2) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      abort();
    if (v4 - v2 > v14)
      v14 = v4 - v2;
    if ((unint64_t)((char *)v4 - (char *)v2) >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = (char *)operator new(16 * v15);
      v17 = (uint64_t *)&v16[16 * v13];
      *v17 = v8;
      v17[1] = v12;
      if (v3 != v2)
      {
LABEL_17:
        v18 = v17;
        do
        {
          v19 = v18 - 2;
          *((_OWORD *)v18 - 1) = *((_OWORD *)v3 - 1);
          v3 -= 2;
          v18 -= 2;
        }
        while (v3 != v2);
        v4 = (uint64_t *)&v16[16 * v15];
        v3 = v17 + 2;
        if (!v2)
          goto LABEL_21;
LABEL_20:
        operator delete(v2);
LABEL_21:
        v2 = v19;
        goto LABEL_4;
      }
    }
    else
    {
      v16 = 0;
      v17 = (uint64_t *)(16 * v13);
      *v17 = v8;
      v17[1] = v12;
      if (v3 != v2)
        goto LABEL_17;
    }
    v19 = v17;
    v4 = (uint64_t *)&v16[16 * v15];
    v3 = v17 + 2;
    if (!v2)
      goto LABEL_21;
    goto LABEL_20;
  }
  v3 = 0;
  v2 = 0;
  Loc = 0;
LABEL_26:
  v36 = 0;
  v37 = 0;
  v33 = "expected comma before def_range type in .cv_def_range directive";
  v35 = 259;
  if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v33)
    || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, int8x16_t **))(*(_QWORD *)this + 192))(this, &v36) & 1) != 0)
  {
    v20 = "expected def_range type in directive";
  }
  else
  {
    Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 105, v36, v37);
    if (Key != -1 && Key != (unint64_t)*((unsigned int *)this + 212))
    {
      switch(*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 105) + 8 * Key) + 8))
      {
        case 1:
          v31 = 0;
          v33 = "expected comma before register number in .cv_def_range directive";
          v35 = 259;
          if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v33)
            || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 256))(this, &v31) & 1) != 0)
          {
            goto LABEL_47;
          }
          v24 = (unsigned __int16)v31;
          v25 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
          (*(void (**)(uint64_t, uint64_t *, int64_t, uint64_t))(*(_QWORD *)v25 + 800))(v25, v2, ((char *)v3 - (char *)v2) >> 4, v24);
          v22 = 1;
          if (!v2)
            return v22;
          goto LABEL_34;
        case 2:
          v31 = 0;
          v33 = "expected comma before offset in .cv_def_range directive";
          v35 = 259;
          if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v33)
            || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 256))(this, &v31) & 1) != 0)
          {
            goto LABEL_53;
          }
          v26 = v31;
          v27 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
          (*(void (**)(uint64_t, uint64_t *, int64_t, uint64_t))(*(_QWORD *)v27 + 808))(v27, v2, ((char *)v3 - (char *)v2) >> 4, v26);
          v22 = 1;
          if (!v2)
            return v22;
          goto LABEL_34;
        case 3:
          v30 = 0;
          v31 = 0;
          v33 = "expected comma before register number in .cv_def_range directive";
          v35 = 259;
          if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v33)
            || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 256))(this, &v31) & 1) != 0)
          {
LABEL_47:
            v20 = "expected register number";
            goto LABEL_33;
          }
          v33 = "expected comma before offset in .cv_def_range directive";
          v35 = 259;
          if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v33)
            || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v30) & 1) != 0)
          {
LABEL_53:
            v20 = "expected offset value";
            goto LABEL_33;
          }
          v28 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this)
                                 + 792);
          goto LABEL_62;
        case 4:
          v30 = 0;
          v31 = 0;
          v29 = 0;
          v33 = "expected comma before register number in .cv_def_range directive";
          v35 = 259;
          if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v33)
            || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 256))(this, &v31) & 1) != 0)
          {
            v20 = "expected register value";
            goto LABEL_33;
          }
          v33 = "expected comma before flag value in .cv_def_range directive";
          v35 = 259;
          if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v33)
            || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v30) & 1) != 0)
          {
            v20 = "expected flag value";
            goto LABEL_33;
          }
          v33 = "expected comma before base pointer offset in .cv_def_range directive";
          v35 = 259;
          if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)&v33)
            || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v29) & 1) != 0)
          {
            v20 = "expected base pointer offset value";
            goto LABEL_33;
          }
          v28 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this)
                                 + 784);
LABEL_62:
          v28();
          v22 = 1;
          if (!v2)
            return v22;
          goto LABEL_34;
        default:
          break;
      }
    }
    v20 = "unexpected def_range type in .cv_def_range directive";
  }
LABEL_33:
  v33 = v20;
  v35 = 259;
  v22 = llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)&v33, 0, 0);
  if (v2)
LABEL_34:
    operator delete(v2);
  return v22;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVString(llvm::MCContext **this)
{
  uint64_t v2;
  uint64_t v4;
  int8x16_t *p_p;
  const unsigned __int8 *v6;
  uint64_t v7;
  _DWORD v8[6];
  void *__p;
  const unsigned __int8 *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  if (((*((uint64_t (**)(llvm::MCContext **))*this + 33))(this) & 1) != 0
    || ((*((uint64_t (**)(llvm::MCContext **, void **))*this + 26))(this, &__p) & 1) != 0)
  {
    v2 = 1;
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return v2;
  }
  else
  {
    llvm::MCContext::getCVContext(this[27]);
    if (v11 >= 0)
      p_p = (int8x16_t *)&__p;
    else
      p_p = (int8x16_t *)__p;
    if (v11 >= 0)
      v6 = (const unsigned __int8 *)HIBYTE(v11);
    else
      v6 = v10;
    llvm::CodeViewContext::addToStringTable(v4, p_p, v6, (uint64_t)v8);
    v7 = (*((uint64_t (**)(llvm::MCContext **))*this + 7))(this);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 520))(v7, v8[4], 4);
    v2 = 0;
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return v2;
  }
  operator delete(__p);
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVFileChecksumOffset(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v6 = 0;
  v4 = "expected identifier in directive";
  v5 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v6, (const llvm::Twine *)&v4))
    return 1;
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 832))(v3, v6);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVFPOData(_anonymous_namespace_::AsmParser *this)
{
  llvm::MCAsmLexer *v2;
  uint64_t Loc;
  llvm::MCContext *v5;
  uint64_t Symbol;
  uint64_t v7;
  const char *v8[4];
  __int16 v9;
  const char *v10;
  const char *v11;

  v2 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  Loc = llvm::MCAsmLexer::getLoc(v2);
  v10 = 0;
  v11 = 0;
  if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v10))
  {
    v8[0] = "expected symbol name";
    v9 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)v8, 0, 0);
  }
  else if (llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  else
  {
    v5 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
    v9 = 261;
    v8[0] = v10;
    v8[1] = v11;
    Symbol = llvm::MCContext::getOrCreateSymbol(v5, v8);
    v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 840))(v7, Symbol, Loc);
    return 0;
  }
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFISections(_anonymous_namespace_::AsmParser *this)
{
  char v2;
  char v3;
  uint64_t v4;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;

  v7 = 0;
  v8 = 0;
  v2 = 0;
  v3 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 9))
  {
LABEL_2:
    v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 872))(v4, v3 & 1, v2 & 1);
    return 0;
  }
  else
  {
    while (!(*(unsigned int (**)(_anonymous_namespace_::AsmParser *, _QWORD **))(*(_QWORD *)this + 192))(this, &v7))
    {
      if (v8 == 12)
      {
        v2 |= memcmp(v7, ".debug_frame", 0xCuLL) == 0;
        if (llvm::MCAsmParser::parseOptionalToken(this, 9))
          goto LABEL_2;
      }
      else if (v8 == 9 && (*v7 == 0x6D6172665F68652ELL ? (v6 = *((_BYTE *)v7 + 8) == 101) : (v6 = 0), v6))
      {
        v3 = 1;
        if (llvm::MCAsmParser::parseOptionalToken(this, 9))
          goto LABEL_2;
      }
      else if (llvm::MCAsmParser::parseOptionalToken(this, 9))
      {
        goto LABEL_2;
      }
      v9[0] = "expected comma";
      v10 = 259;
      if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)v9))
        return 1;
    }
    v9[0] = "expected .eh_frame or .debug_frame";
    v10 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)v9, 0, 0);
  }
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIStartProc(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  char v3;
  _BOOL8 v4;
  llvm::MCAsmLexer *v7;
  uint64_t v8;
  char v9;
  uint64_t Loc;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)this + 34);
  if (*((_BYTE *)this + 288))
  {
    *((_QWORD *)this + 35) = v2;
    v13 = 0;
    v14 = 0;
    if (llvm::MCAsmParser::parseOptionalToken(this, 9))
      goto LABEL_16;
  }
  else
  {
    *((_BYTE *)this + 288) = 1;
    *((_QWORD *)this + 35) = v2;
    v13 = 0;
    v14 = 0;
    if (llvm::MCAsmParser::parseOptionalToken(this, 9))
      goto LABEL_16;
  }
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v13);
  v4 = 1;
  if ((v3 & 1) == 0 && v14 == 6)
    v4 = *(_DWORD *)v13 != 1886218611 || *(_WORD *)(v13 + 4) != 25964;
  v11 = "unexpected token";
  v12 = 259;
  if ((llvm::MCAsmParser::check(this, v4, (const llvm::Twine *)&v11) & 1) != 0 || llvm::MCAsmParser::parseEOL(this))
    return 1;
LABEL_16:
  v7 = (_anonymous_namespace_::AsmParser *)((char *)this + 40);
  v8 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  v9 = v14 != 0;
  Loc = llvm::MCAsmLexer::getLoc(v7);
  llvm::MCStreamer::emitCFIStartProc(v8, v9, Loc);
  return 0;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFIEndProc(_anonymous_namespace_::AsmParser *this)
{
  _BOOL8 v2;
  _QWORD *v3;

  if (*((_BYTE *)this + 288))
    *((_BYTE *)this + 288) = 0;
  v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    llvm::MCStreamer::emitCFIEndProc(v3);
  }
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIDefCfa(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t DwarfRegNum;
  unsigned int v9;
  _QWORD v10[4];
  __int16 v11;

  v7 = 0;
  DwarfRegNum = 0;
  v10[0] = a2;
  v9 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, _QWORD *, _QWORD *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v9, v10, v10))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v9, 1);
  }
  v10[0] = "expected comma";
  v11 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)v10))
    return 1;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v7) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 880))(v6, DwarfRegNum, v7, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIDefCfaOffset(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v6) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 888))(v5, v6, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIAdjustCfaOffset(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v6) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 976))(v5, v6, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIDefCfaRegister(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DwarfRegNum;
  unsigned int v8;
  uint64_t v9;

  DwarfRegNum = 0;
  v9 = a2;
  v8 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, uint64_t *, uint64_t *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v8, &v9, &v9))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v8, 1);
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 896))(v6, DwarfRegNum, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFILLVMDefAspaceCfa(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t DwarfRegNum;
  unsigned int v10;
  _QWORD v11[4];
  __int16 v12;

  v8 = 0;
  DwarfRegNum = 0;
  v7 = 0;
  v11[0] = a2;
  v10 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, _QWORD *, _QWORD *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v10, v11, v11))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v10, 1);
  }
  v11[0] = "expected comma";
  v12 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)v11))
    return 1;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v8) & 1) != 0)
    return 1;
  v11[0] = "expected comma";
  v12 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)v11))
    return 1;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v7) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 904))(v6, DwarfRegNum, v8, v7, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIOffset(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t DwarfRegNum;
  unsigned int v9;
  _QWORD v10[4];
  __int16 v11;

  v7 = 0;
  DwarfRegNum = 0;
  v10[0] = a2;
  v9 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, _QWORD *, _QWORD *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v9, v10, v10))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v9, 1);
  }
  v10[0] = "expected comma";
  v11 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)v10))
    return 1;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v7) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 912))(v6, DwarfRegNum, v7, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIRelOffset(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t DwarfRegNum;
  unsigned int v9;
  _QWORD v10[4];
  __int16 v11;

  v7 = 0;
  DwarfRegNum = 0;
  v10[0] = a2;
  v9 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, _QWORD *, _QWORD *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v9, v10, v10))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v9, 1);
  }
  v10[0] = "expected comma";
  v11 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)v10))
    return 1;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v7) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 968))(v6, DwarfRegNum, v7, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIPersonalityOrLsda(_anonymous_namespace_::AsmParser *this, int a2)
{
  _BOOL8 v5;
  uint64_t v6;
  llvm::MCContext *v7;
  uint64_t v8;
  void (*v9)(void);
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  const char *v15;
  unint64_t v16;
  const char *v17[4];
  __int16 v18;

  v16 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v16) & 1) != 0)return 1;
  if (v16 == 255)
    return 0;
  v14 = 0;
  v15 = 0;
  if (v16 > 0xFF)
  {
    v5 = 1;
  }
  else if ((v16 & 0xD) == 0 || (v5 = 1, (v16 & 0xF) <= 0xC) && ((1 << (v16 & 0xF)) & 0x1D18) != 0)
  {
    v5 = (v16 & 0x60) != 0;
  }
  v12 = "unsupported encoding.";
  v13 = 259;
  if ((llvm::MCAsmParser::check(this, v5, (const llvm::Twine *)&v12) & 1) != 0)
    return 1;
  v17[0] = "expected comma";
  v18 = 259;
  if (llvm::MCAsmParser::parseToken(this, 26, (llvm::Twine *)v17))
    return 1;
  v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v14);
  v10 = "expected identifier in directive";
  v11 = 259;
  if ((llvm::MCAsmParser::check(this, v6, (const llvm::Twine *)&v10) & 1) != 0 || llvm::MCAsmParser::parseEOL(this))
    return 1;
  v7 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v18 = 261;
  v17[0] = v14;
  v17[1] = v15;
  llvm::MCContext::getOrCreateSymbol(v7, v17);
  v8 = *(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (a2)
    v9 = *(void (**)(void))(v8 + 920);
  else
    v9 = *(void (**)(void))(v8 + 928);
  v9();
  return 0;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFIRememberState(llvm::MCAsmParser *a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;

  v4 = llvm::MCAsmParser::parseEOL(a1);
  if (!v4)
  {
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 936))(v5, a2);
  }
  return v4;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFIRestoreState(llvm::MCAsmParser *a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;

  v4 = llvm::MCAsmParser::parseEOL(a1);
  if (!v4)
  {
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 944))(v5, a2);
  }
  return v4;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFISameValue(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DwarfRegNum;
  unsigned int v8;
  uint64_t v9;

  DwarfRegNum = 0;
  v9 = a2;
  v8 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, uint64_t *, uint64_t *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v8, &v9, &v9))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v8, 1);
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 952))(v6, DwarfRegNum, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIRestore(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DwarfRegNum;
  unsigned int v8;
  uint64_t v9;

  DwarfRegNum = 0;
  v9 = a2;
  v8 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, uint64_t *, uint64_t *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v8, &v9, &v9))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v8, 1);
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 960))(v6, DwarfRegNum, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIEscape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string::value_type i;
  uint64_t v7;
  std::string *v8;
  std::string::size_type size;
  std::string::value_type __c[8];
  std::string v11;

  memset(&v11, 0, sizeof(v11));
  *(_QWORD *)__c = 0;
  if (((*(uint64_t (**)(uint64_t, std::string::value_type *))(*(_QWORD *)a1 + 256))(a1, __c) & 1) != 0)
  {
LABEL_2:
    v4 = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v4;
  }
  else
  {
    for (i = __c[0]; ; i = __c[0])
    {
      std::string::push_back(&v11, i);
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 26)
        break;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, std::string::value_type *))(*(_QWORD *)a1 + 256))(a1, __c) & 1) != 0)
        goto LABEL_2;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v11;
    else
      v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    else
      size = v11.__r_.__value_.__l.__size_;
    (*(void (**)(uint64_t, std::string *, std::string::size_type, uint64_t))(*(_QWORD *)v7 + 984))(v7, v8, size, a2);
    v4 = 0;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v4;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIReturnColumn(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t DwarfRegNum;
  unsigned int v7;
  uint64_t v8;

  DwarfRegNum = 0;
  v8 = a2;
  v7 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, uint64_t *, uint64_t *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v7, &v8, &v8))
    {
      return 1;
    }
    v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v4 + 152), v7, 1);
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 992))(v5, DwarfRegNum);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIUndefined(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DwarfRegNum;
  unsigned int v8;
  uint64_t v9;

  DwarfRegNum = 0;
  v9 = a2;
  v8 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD, unsigned int *, uint64_t *, uint64_t *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), &v8, &v9, &v9))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v8, 1);
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 1016))(v6, DwarfRegNum, a2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIRegister(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t DwarfRegNum;
  _QWORD v10[4];
  __int16 v11;
  unsigned int v12;

  v8 = 0;
  DwarfRegNum = 0;
  v10[0] = a2;
  v12 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &DwarfRegNum) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD *, unsigned int *, _QWORD *, _QWORD *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD **)a1 + 1), &v12, v10, v10))
    {
      return 1;
    }
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    DwarfRegNum = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v5 + 152), v12, 1);
  }
  v10[0] = "expected comma";
  v11 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)v10))
    return 1;
  v10[0] = a2;
  v12 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v8) & 1) != 0)
      return 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD *, unsigned int *, _QWORD *, _QWORD *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD **)a1 + 1), &v12, v10, v10))
    {
      return 1;
    }
    v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    v8 = (int)llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v6 + 152), v12, 1);
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 1024))(v7, DwarfRegNum, v8, a2);
  return 0;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFIWindowSave(llvm::MCAsmParser *a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;

  v4 = llvm::MCAsmParser::parseEOL(a1);
  if (!v4)
  {
    v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 1032))(v5, a2);
  }
  return v4;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveMacrosOnOff(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  BOOL v8;

  result = llvm::MCAsmParser::parseEOL(a1);
  if (!result)
  {
    v8 = a3 == 10 && *(_QWORD *)a2 == 0x5F736F7263616D2ELL && *(_WORD *)(a2 + 8) == 28271;
    *((_BYTE *)a1 + 432) = *((_BYTE *)a1 + 432) & 0xFE | v8;
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveMacro(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  _WORD *v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t Tok;
  __int128 v23;
  const void **v24;
  uint64_t Loc;
  int v26;
  int v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int *v36;
  llvm::MCAsmLexer *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v78;
  uint64_t v79;
  const void **v80;
  unsigned int v81;
  uint64_t v82;
  int Key;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __int128 v95;
  _OWORD v96[3];
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  void *v102[3];
  __int128 v103;
  _BYTE __p[64];
  char v105;
  _QWORD v106[4];
  __int16 v107;
  _WORD *v108;
  uint64_t v109;
  uint64_t v110[2];
  __int128 v111;
  __int16 v112;
  uint64_t v113[2];
  __int128 v114;
  __int16 v115;
  __int128 v116;
  __int128 v117;
  unsigned int v118;
  __int128 v119;
  __int128 v120;
  unsigned int v121;
  __int128 v122;
  unint64_t v123;
  __int128 v124;

  v124 = 0uLL;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v124))
  {
    *(_QWORD *)&v103 = "expected identifier in '.macro' directive";
    *(_WORD *)&__p[16] = 259;
    v2 = llvm::MCAsmParser::TokError(a1, (uint64_t)&v103, 0, 0);
    return v2 & 1;
  }
  v94 = a2;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 26)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v5 = (unint64_t *)(a1 + 48);
  v122 = 0uLL;
  v123 = 0;
  while (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 9)
  {
    if ((_QWORD)v122 != *((_QWORD *)&v122 + 1) && *(_BYTE *)(*((_QWORD *)&v122 + 1) - 7))
    {
      Loc = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 40));
      LOWORD(v121) = 1283;
      *(_QWORD *)&v119 = "vararg parameter '";
      v120 = *(_OWORD *)(*((_QWORD *)&v122 + 1) - 48);
      *(_QWORD *)&v103 = &v119;
      *(_QWORD *)__p = "' should be the last parameter";
      *(_WORD *)&__p[16] = 770;
      v2 = llvm::MCAsmParser::Error(a1, Loc, (uint64_t)&v103, 0, 0);
      goto LABEL_146;
    }
    v103 = 0u;
    memset(__p, 0, 26);
    if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v103))
    {
      *(_QWORD *)&v119 = "expected identifier in '.macro' directive";
      LOWORD(v121) = 259;
      goto LABEL_25;
    }
    v7 = *((_QWORD *)&v122 + 1);
    v8 = v122;
    if ((_QWORD)v122 != *((_QWORD *)&v122 + 1))
    {
      v9 = v103;
      if (*((_QWORD *)&v103 + 1))
      {
        while (*(_QWORD *)(v8 + 8) != *((_QWORD *)&v9 + 1)
             || memcmp(*(const void **)v8, (const void *)v9, *((size_t *)&v9 + 1)))
        {
          v8 += 48;
          if (v8 == v7)
            goto LABEL_18;
        }
      }
      else
      {
        while (*(_QWORD *)(v8 + 8))
        {
          v8 += 48;
          if (v8 == *((_QWORD *)&v122 + 1))
            goto LABEL_18;
        }
      }
      v110[0] = (uint64_t)"macro '";
      v111 = v124;
      v112 = 1283;
      v113[0] = (uint64_t)v110;
      *(_QWORD *)&v114 = "' has multiple parameters named '";
      v115 = 770;
      *(_QWORD *)&v116 = v113;
      v117 = v9;
      LOWORD(v118) = 1282;
      *(_QWORD *)&v119 = &v116;
      *(_QWORD *)&v120 = "'";
      LOWORD(v121) = 770;
LABEL_25:
      v11 = llvm::MCAsmParser::TokError(a1, (uint64_t)&v119, 0, 0);
LABEL_37:
      v2 = v11;
      v15 = 0;
      goto LABEL_38;
    }
LABEL_18:
    if (*(_DWORD *)*v5 == 10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      v108 = 0;
      v109 = 0;
      v10 = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 40));
      if ((*(unsigned int (**)(uint64_t, _WORD **))(*(_QWORD *)a1 + 192))(a1, &v108))
      {
        v112 = 1283;
        v110[0] = (uint64_t)"missing parameter qualifier for '";
        v111 = v103;
        v113[0] = (uint64_t)v110;
        *(_QWORD *)&v114 = "' in macro '";
        v115 = 770;
        *(_QWORD *)&v116 = v113;
        v117 = v124;
        LOWORD(v118) = 1282;
        *(_QWORD *)&v119 = &v116;
        *(_QWORD *)&v120 = "'";
        LOWORD(v121) = 770;
LABEL_36:
        v11 = llvm::MCAsmParser::Error(a1, v10, (uint64_t)&v119, 0, 0);
        goto LABEL_37;
      }
      v12 = v108;
      v13 = v109;
      if (v109 == 6)
      {
        if (memcmp(v108, "vararg", 6uLL))
          goto LABEL_35;
        __p[25] = 1;
      }
      else
      {
        if (v109 != 3 || (*v108 == 25970 ? (v14 = *((_BYTE *)v108 + 2) == 113) : (v14 = 0), !v14))
        {
LABEL_35:
          v107 = 773;
          v106[0] = v12;
          v106[1] = v13;
          v106[2] = " is not a valid parameter qualifier for '";
          v110[0] = (uint64_t)v106;
          v111 = v103;
          v112 = 1282;
          v113[0] = (uint64_t)v110;
          *(_QWORD *)&v114 = "' in macro '";
          v115 = 770;
          *(_QWORD *)&v116 = v113;
          v117 = v124;
          LOWORD(v118) = 1282;
          *(_QWORD *)&v119 = &v116;
          *(_QWORD *)&v120 = "'";
          LOWORD(v121) = 770;
          goto LABEL_36;
        }
        __p[24] = 1;
      }
    }
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 28)
      goto LABEL_51;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v19 = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 40));
    {
      if (__p[24])
      {
        v112 = 1283;
        v110[0] = (uint64_t)"pointless default value for required parameter '";
        v111 = v103;
        v113[0] = (uint64_t)v110;
        *(_QWORD *)&v114 = "' in macro '";
        v115 = 770;
        *(_QWORD *)&v116 = v113;
        v117 = v124;
        LOWORD(v118) = 1282;
        *(_QWORD *)&v119 = &v116;
        *(_QWORD *)&v120 = "'";
        LOWORD(v121) = 770;
        (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v19, &v119, 0, 0);
      }
LABEL_51:
      v20 = *((_QWORD *)&v122 + 1);
      if (*((_QWORD *)&v122 + 1) >= v123)
      {
        v21 = std::vector<llvm::MCAsmMacroParameter>::__push_back_slow_path<llvm::MCAsmMacroParameter>((void **)&v122, (uint64_t)&v103);
      }
      else
      {
        **((_OWORD **)&v122 + 1) = v103;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_OWORD *)(v20 + 16) = *(_OWORD *)__p;
        *(_QWORD *)(v20 + 32) = *(_QWORD *)&__p[16];
        memset(__p, 0, 24);
        *(_WORD *)(v20 + 40) = *(_WORD *)&__p[24];
        v21 = (char *)(v20 + 48);
      }
      *((_QWORD *)&v122 + 1) = v21;
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 26)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      v15 = 1;
      goto LABEL_38;
    }
    v15 = 0;
    v2 = 1;
LABEL_38:
    v16 = *(_QWORD *)__p;
    if (*(_QWORD *)__p)
    {
      v17 = *(_QWORD *)&__p[8];
      v6 = *(void **)__p;
      if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
      {
        do
        {
          if (*(_DWORD *)(v17 - 8) >= 0x41u)
          {
            v18 = *(void **)(v17 - 16);
            if (v18)
              operator delete[](v18);
          }
          v17 -= 40;
        }
        while (v17 != v16);
        v6 = *(void **)__p;
      }
      *(_QWORD *)&__p[8] = v16;
      operator delete(v6);
    }
    if ((v15 & 1) == 0)
      goto LABEL_146;
  }
  llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
  LODWORD(v119) = 0;
  v120 = 0uLL;
  *((_QWORD *)&v119 + 1) = 0;
  v121 = 1;
  Tok = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  v23 = *(_OWORD *)Tok;
  *(_QWORD *)&v117 = *(_QWORD *)(Tok + 16);
  v116 = v23;
  v24 = (const void **)(Tok + 24);
  v118 = *(_DWORD *)(Tok + 32);
  if (v118 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)((char *)&v117 + 8), v24);
  else
    *((_QWORD *)&v117 + 1) = *v24;
  v26 = 0;
  while (2)
  {
    while (1)
    {
      v28 = (_DWORD *)*v5;
      if (*(_DWORD *)*v5 != 1)
        break;
      *(_BYTE *)(a1 + 147) = 0;
      v29 = *(_DWORD *)(a1 + 56);
      if (v29 == 1)
      {
        v30 = 0;
        *(_DWORD *)(a1 + 56) = 0;
        if (v28[8] < 0x41u)
          goto LABEL_80;
LABEL_78:
        v34 = *(void **)&v28[10 * v30 + 6];
        if (v34)
        {
          operator delete[](v34);
          v30 = *(_DWORD *)(a1 + 56);
        }
        goto LABEL_80;
      }
      v31 = v28 + 10;
      v32 = 40 * v29 - 40;
      do
      {
        *(_OWORD *)(v31 - 10) = *(_OWORD *)v31;
        *((_QWORD *)v31 - 3) = *((_QWORD *)v31 + 2);
        if (*(v31 - 2) >= 0x41u)
        {
          v33 = (void *)*((_QWORD *)v31 - 2);
          if (v33)
            operator delete[](v33);
        }
        *((_QWORD *)v31 - 2) = *((_QWORD *)v31 + 3);
        *(v31 - 2) = v31[8];
        v31[8] = 0;
        v31 += 10;
        v32 -= 40;
      }
      while (v32);
      v28 = *(_DWORD **)(a1 + 48);
      v30 = *(_DWORD *)(a1 + 56) - 1;
      *(_DWORD *)(a1 + 56) = v30;
      if (v28[10 * v30 + 8] >= 0x41u)
        goto LABEL_78;
LABEL_80:
      if (!v30)
      {
        (**(void (***)(__int128 *__return_ptr, uint64_t))(a1 + 40))(&v103, a1 + 40);
        llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>(a1 + 48, *v5, (unint64_t)&v103);
        if (*(_DWORD *)&__p[16] >= 0x41u)
        {
          if (*(_QWORD *)&__p[8])
            operator delete[](*(void **)&__p[8]);
        }
      }
    }
    if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
    {
      *(_QWORD *)&v103 = "no matching '.endmacro' in definition";
      *(_WORD *)&__p[16] = 259;
      goto LABEL_140;
    }
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 2)
    {
      if (*(_DWORD *)*v5 == 8)
      {
        v37 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        v38 = llvm::MCAsmLexer::getLoc(v37);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v39 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
        v42 = *(uint64_t **)(v39 + 24);
        v40 = v39 + 24;
        v41 = v42;
        if (*(_DWORD *)(v40 + 8) < 0x41u)
          v41 = (uint64_t *)v40;
        v43 = *v41;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v44 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
        v45 = *(_QWORD *)(v44 + 8);
        v46 = *(_QWORD *)(v44 + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v47 = v46 - 2;
        if (v46)
          v48 = v45 + 1;
        else
          v48 = v45;
        if (v46 - (unint64_t)(v46 != 0) < v47)
          v47 = v46 - (v46 != 0);
        *(_QWORD *)(a1 + 440) = v48;
        *(_QWORD *)(a1 + 448) = v47;
        *(_QWORD *)(a1 + 456) = v43;
        *(_QWORD *)(a1 + 464) = v38;
        *(_DWORD *)(a1 + 472) = *(_DWORD *)(a1 + 296);
        if (!*(_QWORD *)(a1 + 488))
        {
          *(_QWORD *)(a1 + 480) = v48;
          *(_QWORD *)(a1 + 488) = v47;
        }
      }
      goto LABEL_67;
    }
    v35 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    if (*(_DWORD *)v35 != 2)
    {
      v36 = *(int **)(v35 + 8);
      v49 = *(_QWORD *)(v35 + 16);
      v50 = v49 - 1;
      v51 = v49 != 0;
      if (v49)
        v36 = (int *)((char *)v36 + 1);
      if (v50 < v51)
        v50 = 1;
      if (v50 < v49)
        v49 = v50;
      if (v49 - v51 == 5)
        goto LABEL_106;
      goto LABEL_110;
    }
    v36 = *(int **)(v35 + 8);
    if (*(_QWORD *)(v35 + 16) != 5)
      goto LABEL_110;
LABEL_106:
    v52 = *v36;
    v53 = *((unsigned __int8 *)v36 + 4);
    if (v52 != 1684956462 || v53 != 109)
    {
LABEL_110:
      v55 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
      if (*(_DWORD *)v55 != 2)
      {
        v56 = *(uint64_t **)(v55 + 8);
        v57 = *(_QWORD *)(v55 + 16);
        v58 = v57 - 1;
        v59 = v57 != 0;
        if (v57)
          v56 = (uint64_t *)((char *)v56 + 1);
        if (v58 < v59)
          v58 = 1;
        if (v58 < v57)
          v57 = v58;
        if (v57 - v59 == 9)
          goto LABEL_120;
        goto LABEL_124;
      }
      v56 = *(uint64_t **)(v55 + 8);
      if (*(_QWORD *)(v55 + 16) != 9)
        goto LABEL_124;
LABEL_120:
      v60 = *v56;
      v61 = *((unsigned __int8 *)v56 + 8);
      if (v60 != 0x7263616D646E652ELL || v61 != 111)
      {
LABEL_124:
        v63 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
        if (*(_DWORD *)v63 == 2)
        {
          v64 = *(_QWORD *)(v63 + 8);
          if (*(_QWORD *)(v63 + 16) != 6)
            goto LABEL_67;
        }
        else
        {
          v64 = *(_QWORD *)(v63 + 8);
          v65 = *(_QWORD *)(v63 + 16);
          v66 = v65 - 1;
          v67 = v65 != 0;
          if (v65)
            ++v64;
          if (v66 < v67)
            v66 = 1;
          if (v66 < v65)
            v65 = v66;
          if (v65 - v67 != 6)
            goto LABEL_67;
        }
        v68 = bswap32(*(_DWORD *)v64);
        v69 = 778920291;
        if (v68 == 778920291 && (v68 = bswap32(*(unsigned __int16 *)(v64 + 4)) >> 16, v69 = 29295, v68 == 29295))
        {
          v27 = 0;
        }
        else if (v68 < v69)
        {
          v27 = -1;
        }
        else
        {
          v27 = 1;
        }
        if (!v27)
          ++v26;
        goto LABEL_67;
      }
    }
    if (v26)
    {
      --v26;
LABEL_67:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
      continue;
    }
    break;
  }
  v78 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  v79 = *(_QWORD *)(v78 + 16);
  v119 = *(_OWORD *)v78;
  *(_QWORD *)&v120 = v79;
  v80 = (const void **)(v78 + 24);
  if (v121 > 0x40 || (v81 = *(_DWORD *)(v78 + 32), v81 > 0x40))
  {
    llvm::APInt::assignSlowCase((const void **)&v120 + 1, v80);
  }
  else
  {
    *((_QWORD *)&v120 + 1) = *v80;
    v121 = v81;
  }
  llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 9)
  {
    v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    Key = llvm::StringMapImpl::FindKey((uint64_t *)(v82 + 2064), (int8x16_t *)v124, *((const unsigned __int8 **)&v124 + 1));
    if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v82 + 2072))
    {
      v84 = mlir::Token::getLoc((mlir::Token *)&v116);
      v85 = mlir::Token::getLoc((mlir::Token *)&v119);
      v86 = v85 - v84;
      v87 = v123;
      v95 = v122;
      v123 = 0;
      v122 = 0uLL;
      v103 = v124;
      *(_QWORD *)__p = v84;
      *(_QWORD *)&__p[8] = v86;
      memset(v102, 0, sizeof(v102));
      v105 = 0;
      std::vector<llvm::MCAsmMacroParameter>::~vector[abi:nn180100](v102);
      v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v96[0] = v103;
      v96[1] = *(_OWORD *)__p;
      v96[2] = v95;
      memset(&__p[16], 0, 48);
      v97 = v87;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      llvm::MCContext::defineMacro(v88, (int8x16_t *)v124, *((const unsigned __int8 **)&v124 + 1), (uint64_t)v96);
      llvm::MCAsmMacro::~MCAsmMacro((llvm::MCAsmMacro *)v96);
      llvm::MCAsmMacro::~MCAsmMacro((llvm::MCAsmMacro *)&v103);
      v2 = 0;
      if (v118 < 0x41)
        goto LABEL_143;
      goto LABEL_141;
    }
    v115 = 1283;
    v113[0] = (uint64_t)"macro '";
    v114 = v124;
    v110[0] = (uint64_t)"' is already defined";
    v112 = 259;
    llvm::operator+(v113, v110, (uint64_t)&v103);
LABEL_140:
    v2 = llvm::MCAsmParser::Error(a1, v94, (uint64_t)&v103, 0, 0);
    if (v118 < 0x41)
      goto LABEL_143;
LABEL_141:
    if (*((_QWORD *)&v117 + 1))
      operator delete[](*((void **)&v117 + 1));
    goto LABEL_143;
  }
  if ((_DWORD)v119 == 2)
  {
    v89 = *((_QWORD *)&v119 + 1);
    v90 = v120;
  }
  else
  {
    v89 = *((_QWORD *)&v119 + 1);
    v91 = v120;
    v92 = v120 - 1;
    v93 = v120 != 0;
    if ((_QWORD)v120)
      v89 = *((_QWORD *)&v119 + 1) + 1;
    if (v92 < v93)
      v92 = 1;
    if (v92 < (unint64_t)v120)
      v91 = v92;
    v90 = v91 - v93;
  }
  v115 = 1283;
  v113[0] = (uint64_t)"unexpected token in '";
  *(_QWORD *)&v114 = v89;
  *((_QWORD *)&v114 + 1) = v90;
  *(_QWORD *)&v103 = v113;
  *(_QWORD *)__p = "' directive";
  *(_WORD *)&__p[16] = 770;
  v2 = llvm::MCAsmParser::TokError(a1, (uint64_t)&v103, 0, 0);
  if (v118 >= 0x41)
    goto LABEL_141;
LABEL_143:
  if (v121 >= 0x41 && *((_QWORD *)&v120 + 1))
    operator delete[](*((void **)&v120 + 1));
LABEL_146:
  v70 = v122;
  if ((_QWORD)v122)
  {
    v71 = *((_QWORD *)&v122 + 1);
    v72 = (void *)v122;
    if (*((_QWORD *)&v122 + 1) != (_QWORD)v122)
    {
      do
      {
        v74 = *(_QWORD *)(v71 - 32);
        if (v74)
        {
          v75 = *(_QWORD *)(v71 - 24);
          v73 = *(void **)(v71 - 32);
          if (v75 != v74)
          {
            do
            {
              if (*(_DWORD *)(v75 - 8) >= 0x41u)
              {
                v76 = *(void **)(v75 - 16);
                if (v76)
                  operator delete[](v76);
              }
              v75 -= 40;
            }
            while (v75 != v74);
            v73 = *(void **)(v71 - 32);
          }
          *(_QWORD *)(v71 - 24) = v74;
          operator delete(v73);
        }
        v71 -= 48;
      }
      while (v71 != v70);
      v72 = (void *)v122;
    }
    *((_QWORD *)&v122 + 1) = v70;
    operator delete(v72);
  }
  return v2 & 1;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveAltmacro(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  BOOL v8;

  result = llvm::MCAsmParser::parseEOL(a1);
  if (!result)
  {
    v8 = a3 == 9 && *(_QWORD *)a2 == 0x7263616D746C612ELL && *(_BYTE *)(a2 + 8) == 111;
    *((_BYTE *)a1 + 815) = v8;
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveExitMacro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int BufferContainingLoc;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;

  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  v7 = *(_QWORD *)(a1 + 368);
  if (*(_QWORD *)(a1 + 360) == v7)
  {
    v21 = 1283;
    v20[0] = "unexpected '";
    v20[2] = a2;
    v20[3] = a3;
    v22[0] = v20;
    v22[2] = "' in file, no current macro definition";
    v23 = 770;
    return llvm::MCAsmParser::TokError(a1, (uint64_t)v22, 0, 0);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 312);
    v8 = *(_QWORD *)(a1 + 320);
    v10 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v10 + 24) != (v8 - v9) >> 3)
    {
      v11 = (int *)(v8 - 8);
      v12 = (uint64_t)v11 - v9;
      do
      {
        v13 = *v11;
        *(_WORD *)(a1 + 304) = *((_WORD *)v11 + 2);
        *(_DWORD *)(a1 + 300) = v13;
        *(_QWORD *)(a1 + 320) = v11;
        v10 = *(_QWORD *)(v7 - 8);
        v14 = *(_QWORD *)(v10 + 24) == v12 >> 3;
        v12 -= 8;
        v11 -= 2;
      }
      while (!v14);
    }
    v15 = *(_QWORD *)(v10 + 16);
    BufferContainingLoc = *(_DWORD *)(v10 + 8);
    if (!BufferContainingLoc)
      BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(a1 + 240), *(_QWORD *)(v10 + 16));
    *(_DWORD *)(a1 + 296) = BufferContainingLoc;
    v17 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (BufferContainingLoc - 1));
    llvm::AsmLexer::setBuffer(a1 + 40, *(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8), v15, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v18 = *(_QWORD *)(a1 + 368);
    v19 = *(void **)(v18 - 8);
    if (v19)
    {
      operator delete(v19);
      v18 = *(_QWORD *)(a1 + 368);
    }
    result = 0;
    *(_QWORD *)(a1 + 368) = v18 - 8;
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveEndMacro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int BufferContainingLoc;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 9)
  {
    v18 = 1283;
    v15 = "unexpected token in '";
    v16 = a2;
    v17 = a3;
    v14 = "' directive";
LABEL_10:
    v19[0] = &v15;
    v19[2] = v14;
    v20 = 770;
    return llvm::MCAsmParser::TokError(a1, (uint64_t)v19, 0, 0);
  }
  v6 = *(_QWORD *)(a1 + 368);
  if (*(_QWORD *)(a1 + 360) == v6)
  {
    v18 = 1283;
    v15 = "unexpected '";
    v16 = a2;
    v17 = a3;
    v14 = "' in file, no current macro definition";
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 16);
  BufferContainingLoc = *(_DWORD *)(v7 + 8);
  if (!BufferContainingLoc)
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(a1 + 240), *(_QWORD *)(v7 + 16));
  *(_DWORD *)(a1 + 296) = BufferContainingLoc;
  v10 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (BufferContainingLoc - 1));
  llvm::AsmLexer::setBuffer(a1 + 40, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8), v8, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v11 = *(_QWORD *)(a1 + 368);
  v12 = *(void **)(v11 - 8);
  if (v12)
  {
    operator delete(v12);
    v11 = *(_QWORD *)(a1 + 368);
  }
  result = 0;
  *(_QWORD *)(a1 + 368) = v11 - 8;
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectivePurgeMacro(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int Key;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const unsigned __int8 **v11;
  void *v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;
  int8x16_t *v18;
  const unsigned __int8 *v19;

  v18 = 0;
  v19 = 0;
  v17 = 0;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)a1, &v17) & 1) != 0)
    return 1;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *, int8x16_t **))(*(_QWORD *)a1 + 192))(a1, &v18);
  v15[0] = "expected identifier in '.purgem' directive";
  v16 = 259;
  if ((llvm::MCAsmParser::check((uint64_t)a1, v4, v17, (uint64_t)v15) & 1) != 0 || llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(v6 + 2064), v18, v19);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v6 + 2072))
  {
    v14 = 1283;
    v13[0] = "macro '";
    v13[2] = v18;
    v13[3] = v19;
    v15[0] = v13;
    v15[2] = "' is not defined";
    v16 = 770;
    return llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)v15, 0, 0);
  }
  else
  {
    v8 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    v9 = v8 + 2064;
    v10 = llvm::StringMapImpl::FindKey((uint64_t *)(v8 + 2064), v18, v19);
    if (v10 != -1 && v10 != (unint64_t)*(unsigned int *)(v8 + 2072))
    {
      v11 = *(const unsigned __int8 ***)(*(_QWORD *)(v8 + 2064) + 8 * v10);
      llvm::StringMapImpl::RemoveKey(v9, v11);
      v12 = (void *)(*v11 + 97);
      llvm::MCAsmMacro::~MCAsmMacro((llvm::MCAsmMacro *)(v11 + 1));
      llvm::deallocate_buffer((llvm *)v11, v12);
    }
    return 0;
  }
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveEnd(_DWORD **a1)
{
  _BOOL8 v2;

  v2 = llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1);
  if (!v2 && *a1[6])
  {
    do
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 5));
    while (*a1[6]);
  }
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveError(llvm::MCAsmParser *this, uint64_t a2, char a3)
{
  uint64_t v5;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t Tok;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[4];
  __int16 v15;

  v5 = *((_QWORD *)this + 40);
  if (*((_QWORD *)this + 39) != v5 && *(_BYTE *)(v5 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 224))(this);
    return 0;
  }
  if ((a3 & 1) == 0)
  {
    v14[0] = ".err encountered";
    v15 = 259;
    return llvm::MCAsmParser::Error((uint64_t)this, a2, (uint64_t)v14, 0, 0);
  }
  v7 = **((_DWORD **)this + 6);
  if (v7 == 3)
  {
    Tok = llvm::MCAsmParser::getTok(this);
    v11 = *(_QWORD *)(Tok + 16);
    v12 = v11 != 0;
    if (v11)
      v8 = (const char *)(*(_QWORD *)(Tok + 8) + 1);
    else
      v8 = *(const char **)(Tok + 8);
    if (v11 - 1 < v12)
      v13 = 1;
    else
      v13 = v11 - 1;
    if (v13 < v11)
      v11 = v13;
    v9 = v11 - v12;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
    goto LABEL_18;
  }
  if (v7 == 9)
  {
    v8 = ".error directive invoked in source file";
    v9 = 39;
LABEL_18:
    v15 = 261;
    v14[0] = v8;
    v14[1] = v9;
    return llvm::MCAsmParser::Error((uint64_t)this, a2, (uint64_t)v14, 0, 0);
  }
  v14[0] = ".error argument must be a string";
  v15 = 259;
  return llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)v14, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveWarning(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t Tok;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[4];
  __int16 v14;

  v4 = *((_QWORD *)a1 + 40);
  if (*((_QWORD *)a1 + 39) != v4 && *(_BYTE *)(v4 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  if (llvm::MCAsmParser::parseOptionalToken(a1, 9))
  {
    v6 = ".warning directive invoked in source file";
    v7 = 41;
  }
  else
  {
    if (**((_DWORD **)a1 + 6) != 3)
    {
      v13[0] = ".warning argument must be a string";
      v14 = 259;
      return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)v13, 0, 0);
    }
    Tok = llvm::MCAsmParser::getTok(a1);
    v9 = *(_QWORD *)(Tok + 16);
    v10 = v9 != 0;
    if (v9)
      v6 = (const char *)(*(_QWORD *)(Tok + 8) + 1);
    else
      v6 = *(const char **)(Tok + 8);
    if (v9 - 1 < v10)
      v11 = 1;
    else
      v11 = v9 - 1;
    if (v11 >= v9)
      v12 = *(_QWORD *)(Tok + 16);
    else
      v12 = v11;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    if (llvm::MCAsmParser::parseEOL(a1))
      return 1;
    v7 = v12 - v10;
  }
  v14 = 261;
  v13[0] = v6;
  v13[1] = v7;
  return (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, a2, v13, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveReloc(mlir::Token **a1, uint64_t a2)
{
  uint64_t Loc;
  _BOOL8 v5;
  uint64_t v6;
  mlir::Token *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t STI;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *__p;
  char v28;
  __int16 v29;

  v24 = 0;
  v25 = 0;
  Loc = mlir::Token::getLoc(a1[6]);
  v26 = 0;
  if (((*((uint64_t (**)(mlir::Token **, uint64_t *, const char **))*a1 + 29))(a1, &v25, &v26) & 1) != 0)
    return 1;
  v26 = "expected comma";
  v29 = 259;
  if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 26, (llvm::Twine *)&v26))
    return 1;
  v5 = *(_DWORD *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) != 2;
  v26 = "expected relocation name";
  v29 = 259;
  if ((llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v5, (const llvm::Twine *)&v26) & 1) != 0)
    return 1;
  v6 = mlir::Token::getLoc(a1[6]);
  v7 = a1[6];
  if (*(_DWORD *)v7 == 2)
  {
    v8 = *((_QWORD *)v7 + 1);
    v9 = *((_QWORD *)v7 + 2);
  }
  else
  {
    v12 = (char *)v7 + 8;
    v10 = *((_QWORD *)v7 + 1);
    v11 = *((_QWORD *)v12 + 1);
    v13 = v11 != 0;
    if (v11)
      v8 = v10 + 1;
    else
      v8 = v10;
    if (v11 - 1 < v13)
      v14 = 1;
    else
      v14 = v11 - 1;
    if (v14 >= v11)
      v14 = v11;
    v9 = v14 - v13;
  }
  (*((void (**)(mlir::Token **))*a1 + 23))(a1);
  if (*(_DWORD *)a1[6] == 26)
  {
    (*((void (**)(mlir::Token **))*a1 + 23))(a1);
    v15 = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 5));
    v26 = 0;
    if (((*((uint64_t (**)(mlir::Token **, uint64_t *, const char **))*a1 + 29))(a1, &v24, &v26) & 1) != 0)
      return 1;
    memset(v21, 0, sizeof(v21));
    v22 = 0;
    if (!llvm::MCExpr::evaluateAsRelocatable(v24, (uint64_t)v21, 0, 0))
    {
      v26 = "expression must be relocatable";
      v29 = 259;
      return llvm::MCAsmParser::Error((uint64_t)a1, v15, (uint64_t)&v26, 0, 0);
    }
  }
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  STI = llvm::MCTargetAsmParser::getSTI(a1[1]);
  v19 = (*((uint64_t (**)(mlir::Token **))*a1 + 7))(a1);
  (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 1176))(&v26, v19, v25, v8, v9, v24, a2, STI);
  if (!(_BYTE)v29)
    return 0;
  if ((_BYTE)v26)
    v20 = v6;
  else
    v20 = Loc;
  v23 = 260;
  v21[0] = &__p;
  v16 = llvm::MCAsmParser::Error((uint64_t)a1, v20, (uint64_t)v21, 0, 0);
  if ((_BYTE)v29 && v28 < 0)
    operator delete(__p);
  return v16;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveDCB(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Loc;
  llvm::MCAsmLexer *v9;
  uint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;

  Loc = llvm::MCAsmLexer::getLoc((llvm::MCAsmParser *)((char *)a1 + 40));
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v20 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v20) & 1) != 0)
    return 1;
  if (v20 < 0)
  {
    v18[0] = "'";
    v18[2] = a2;
    v18[3] = a3;
    v19 = 1283;
    v21[0] = v18;
    v21[2] = "' directive with negative repeat count has no effect";
    v22 = 770;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, Loc, v21, 0, 0);
    return 0;
  }
  v21[0] = "expected comma";
  v22 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)v21))
    return 1;
  v18[0] = 0;
  v9 = (llvm::MCAsmLexer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  v10 = llvm::MCAsmLexer::getLoc(v9);
  v21[0] = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 232))(a1, v18, v21) & 1) != 0)
    return 1;
  if (*(_BYTE *)v18[0] != 1)
  {
    for (i = v20; i; --i)
    {
      v17 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      llvm::MCStreamer::emitValue(v17);
    }
    return llvm::MCAsmParser::parseEOL(a1);
  }
  v12 = *(_QWORD *)(v18[0] + 16);
  if (a4 > 7
    || 0xFFFFFFFFFFFFFFFFLL >> (-8 * a4) >= v12
    || (v13 = -1 << (8 * a4 - 1), v13 <= v12) && v12 <= ~v13)
  {
    for (j = v20; j; --j)
    {
      v15 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v15 + 520))(v15, v12, a4);
    }
    return llvm::MCAsmParser::parseEOL(a1);
  }
  v21[0] = "literal value out of range for directive";
  v22 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, v10, (uint64_t)v21, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveRealDCB(char *a1, uint64_t a2, uint64_t a3, llvm::APFloatBase *a4)
{
  uint64_t Loc;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  void *__p;
  unsigned int v18;
  const char *v19;
  __int16 v20;

  Loc = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 40));
  if (((*(uint64_t (**)(char *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v16 = 0;
  if (((*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v16) & 1) != 0)
    return 1;
  if (v16 < 0)
  {
    v14[0] = "'";
    v14[2] = a2;
    v14[3] = a3;
    v15 = 1283;
    __p = v14;
    v19 = "' directive with negative repeat count has no effect";
    v20 = 770;
    (*(void (**)(char *, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, Loc, &__p, 0, 0);
    return 0;
  }
  else
  {
    __p = "expected comma";
    v20 = 259;
    i = 1;
    if (!llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 26, (llvm::Twine *)&__p))
    {
      v18 = 1;
      __p = 0;
        && !llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
      {
        for (i = v16; i; --i)
        {
          v12 = (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 56))(a1);
          v13 = v18;
          if (v18 < 0x41)
          {
            v11 = (uint64_t)__p;
          }
          else if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
          {
            v11 = *(_QWORD *)__p;
          }
          else
          {
            v11 = -1;
          }
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 520))(v12, v11, v13 >> 3);
        }
      }
      if (v18 >= 0x41 && __p)
        operator delete[](__p);
    }
  }
  return i;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveDS(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t Loc;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;

  Loc = llvm::MCAsmLexer::getLoc((llvm::MCAsmParser *)((char *)a1 + 40));
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v16 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v16) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v10 = v16;
  if (v16 < 0)
  {
    v12[0] = "'";
    v12[2] = a2;
    v12[3] = a3;
    v13 = 1283;
    v14[0] = v12;
    v14[2] = "' directive with negative repeat count has no effect";
    v15 = 770;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, Loc, v14, 0, 0);
  }
  else if (v16)
  {
    do
    {
      v11 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      llvm::MCStreamer::emitFill(v11, (llvm::MCConstantExpr *)a4, 0);
      --v10;
    }
    while (v10);
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectivePrint(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t Tok;
  __int128 v5;
  const void **v6;
  _BOOL8 v7;
  uint64_t v8;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  __int128 v21;
  unint64_t v22;
  void *__p;
  unsigned int v24;

  Tok = llvm::MCAsmParser::getTok(a1);
  v5 = *(_OWORD *)Tok;
  v22 = *(_QWORD *)(Tok + 16);
  v21 = v5;
  v6 = (const void **)(Tok + 24);
  v24 = *(_DWORD *)(Tok + 32);
  if (v24 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v6);
  else
    __p = (void *)*v6;
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
  if ((_DWORD)v21 == 3 && **((_BYTE **)&v21 + 1) == 34)
  {
    v7 = llvm::MCAsmParser::parseEOL(a1);
    if (v7)
    {
      v8 = 1;
    }
    else
    {
      v10 = (llvm::raw_ostream *)llvm::outs((llvm *)v7);
      v11 = v10;
      v12 = v22;
      v13 = v22 != 0;
      if (v22)
        v14 = (const void *)(*((_QWORD *)&v21 + 1) + 1);
      else
        v14 = (const void *)*((_QWORD *)&v21 + 1);
      if (v22 - 1 < v13)
        v15 = 1;
      else
        v15 = v22 - 1;
      if (v15 < v22)
        v12 = v15;
      v16 = v12 - v13;
      v18 = *((_QWORD *)v10 + 3);
      v17 = (_BYTE *)*((_QWORD *)v10 + 4);
      if (v12 - v13 <= v18 - (uint64_t)v17)
      {
        if (v12 != v13)
        {
          memcpy(v17, v14, v12 - v13);
          v17 = (_BYTE *)(*((_QWORD *)v11 + 4) + v16);
          *((_QWORD *)v11 + 4) = v17;
        }
      }
      else
      {
        v11 = llvm::raw_ostream::write(v11, (const char *)v14, v12 - v13);
        v17 = (_BYTE *)*((_QWORD *)v11 + 4);
      }
      if ((unint64_t)v17 >= *((_QWORD *)v11 + 3))
      {
        llvm::raw_ostream::write(v11, 10);
        v8 = 0;
      }
      else
      {
        v8 = 0;
        *((_QWORD *)v11 + 4) = v17 + 1;
        *v17 = 10;
      }
    }
  }
  else
  {
    v19 = "expected double quoted string after .print";
    v20 = 259;
    v8 = llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)&v19, 0, 0);
  }
  if (v24 >= 0x41 && __p)
    operator delete[](__p);
  return v8;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveAddrsig(_anonymous_namespace_::AsmParser *this)
{
  _BOOL8 v2;
  uint64_t v3;

  v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1184))(v3);
  }
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveAddrsigSym(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  llvm::MCContext *v4;
  uint64_t Symbol;
  uint64_t v6;
  const char *v7[4];
  __int16 v8;
  const char *v9;
  const char *v10;

  v9 = 0;
  v10 = 0;
  v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v9);
  v7[0] = "expected identifier";
  v8 = 259;
  if ((llvm::MCAsmParser::check(this, v2, (const llvm::Twine *)v7) & 1) != 0 || llvm::MCAsmParser::parseEOL(this))
    return 1;
  v4 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v8 = 261;
  v7[0] = v9;
  v7[1] = v10;
  Symbol = llvm::MCContext::getOrCreateSymbol(v4, v7);
  v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1192))(v6, Symbol);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectivePseudoProbe(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  const char *v4;
  const char *v5;
  uint64_t v6;
  const char **v7;
  int v8;
  uint64_t v9;
  llvm::MCAsmLexer *v10;
  uint64_t Loc;
  llvm::MCContext *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18[4];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[16];
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v25 = "unexpected token in '.pseudoprobe' directive";
  v28 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v24, (const llvm::Twine *)&v25))
    return 1;
  v25 = "unexpected token in '.pseudoprobe' directive";
  v28 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v23, (const llvm::Twine *)&v25))
    return 1;
  v25 = "unexpected token in '.pseudoprobe' directive";
  v28 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v22, (const llvm::Twine *)&v25))
    return 1;
  v25 = "unexpected token in '.pseudoprobe' directive";
  v28 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v21, (const llvm::Twine *)&v25))
    return 1;
  if ((v21 & 4) != 0)
  {
    v25 = "unexpected token in '.pseudoprobe' directive";
    v28 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v20, (const llvm::Twine *)&v25))
      return 1;
  }
  v25 = v27;
  v26 = 0x800000000;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 46)
  {
    while (1)
    {
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      v15 = 0;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) == 4)
      {
        v18[0] = "unexpected token in '.pseudoprobe' directive";
        v19 = 259;
        if (llvm::MCAsmParser::parseIntToken(this, (uint64_t *)&v15, (const llvm::Twine *)v18))
          break;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) == 10)
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      v17 = 0;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) == 4)
      {
        v18[0] = "unexpected token in '.pseudoprobe' directive";
        v19 = 259;
        if (llvm::MCAsmParser::parseIntToken(this, &v17, (const llvm::Twine *)v18))
          break;
      }
      v4 = v15;
      v5 = (const char *)v17;
      v6 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
        v6 = v26;
      }
      v7 = (const char **)((char *)v25 + 16 * v6);
      *v7 = v4;
      v7[1] = v5;
      LODWORD(v26) = v26 + 1;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) != 46)
        goto LABEL_19;
    }
LABEL_22:
    v2 = 1;
    goto LABEL_24;
  }
LABEL_19:
  v15 = 0;
  v16 = 0;
  v8 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v15);
  v9 = *(_QWORD *)this;
  if (v8)
  {
    v10 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(v9 + 40))(this);
    Loc = llvm::MCAsmLexer::getLoc(v10);
    v18[0] = "unexpected token in '.pseudoprobe' directive";
    v19 = 259;
    v2 = llvm::MCAsmParser::Error((uint64_t)this, Loc, (uint64_t)v18, 0, 0);
    goto LABEL_24;
  }
  v12 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(v9 + 48))(this);
  v19 = 261;
  v18[0] = v15;
  v18[1] = v16;
  v13 = llvm::MCContext::lookupSymbol(v12, v18);
  if (llvm::MCAsmParser::parseEOL(this))
    goto LABEL_22;
  v14 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v14
                                                                                                 + 1208))(v14, v24, v23, v22, v21, v20, &v25, v13);
  v2 = 0;
LABEL_24:
  if (v25 != v27)
    free(v25);
  return v2;
}

