uint64_t _GLOBAL__sub_I_DiagnosticHandler_cpp()
{
  llvm::cl *v0;
  uint64_t *GeneralCategory;
  unsigned int v2;
  llvm *v3;
  __int16 v4;
  llvm::raw_ostream *v5;
  llvm::cl *v6;
  uint64_t *v7;
  unsigned int v8;
  llvm *v9;
  __int16 v10;
  llvm::raw_ostream *v11;
  llvm::cl *v12;
  uint64_t *v13;
  unsigned int v14;
  llvm *v15;
  __int16 v16;
  llvm::raw_ostream *v17;
  _QWORD v19[4];
  __int16 v20;

  qword_1ECD343F0 = (uint64_t)&unk_1E0E23930;
  word_1ECD343F8 = 0;
  word_1ECD343FA &= 0x8000u;
  unk_1ECD343FC = 0u;
  unk_1ECD3440C = 0u;
  unk_1ECD3441C = 0u;
  dword_1ECD3442C = 0;
  qword_1ECD34430 = (uint64_t)&unk_1ECD34440;
  qword_1ECD34438 = 0x100000000;
  qword_1ECD34448 = (uint64_t)&algn_1ECD34464[4];
  unk_1ECD34450 = &algn_1ECD34464[4];
  qword_1ECD34458 = 1;
  dword_1ECD34460 = 0;
  GeneralCategory = llvm::cl::getGeneralCategory(v0);
  v2 = qword_1ECD34438;
  if (qword_1ECD34438 >= HIDWORD(qword_1ECD34438))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&qword_1ECD34430, &unk_1ECD34440, qword_1ECD34438 + 1, 8);
    v2 = qword_1ECD34438;
  }
  *(_QWORD *)(qword_1ECD34430 + 8 * v2) = GeneralCategory;
  LODWORD(qword_1ECD34438) = qword_1ECD34438 + 1;
  qword_1ECD34470 = 0;
  unk_1ECD34478 = &off_1E0E22E68;
  qword_1ECD343F0 = (uint64_t)&off_1E0E23178;
  qword_1ECD34480 = (uint64_t)&unk_1E0E23B38;
  qword_1ECD34488 = (uint64_t)off_1E0E4F810;
  qword_1ECD344A0 = (uint64_t)&qword_1ECD34488;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ECD343F0, (int8x16_t *)"pass-remarks", (const unsigned __int8 *)0xC);
  qword_1ECD34420 = (uint64_t)"pattern";
  unk_1ECD34428 = 7;
  qword_1ECD34410 = (uint64_t)"Enable optimization remarks from passes whose name match the given regular expression";
  unk_1ECD34418 = 85;
  v4 = word_1ECD343FA & 0xFF9F | 0x20;
  word_1ECD343FA = v4;
  if (qword_1ECD34470)
  {
    v19[0] = "cl::location(x) specified more than once!";
    v20 = 259;
    v5 = (llvm::raw_ostream *)llvm::errs(v3);
    llvm::cl::Option::error(&qword_1ECD343F0, (llvm::Twine *)v19, 0, 0, v5);
    v4 = word_1ECD343FA;
  }
  else
  {
    qword_1ECD34470 = (uint64_t)&_MergedGlobals_63;
  }
  word_1ECD343FA = v4 & 0xFFE7 | 0x10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ECD343F0);
  qword_1ECD344A8 = (uint64_t)&unk_1E0E23930;
  word_1ECD344B0 = 0;
  word_1ECD344B2 &= 0x8000u;
  unk_1ECD344B4 = 0u;
  unk_1ECD344C4 = 0u;
  unk_1ECD344D4 = 0u;
  dword_1ECD344E4 = 0;
  qword_1ECD344E8 = (uint64_t)algn_1ECD344F8;
  qword_1ECD344F0 = 0x100000000;
  qword_1ECD34500 = (uint64_t)&unk_1ECD34520;
  unk_1ECD34508 = &unk_1ECD34520;
  qword_1ECD34510 = 1;
  dword_1ECD34518 = 0;
  v7 = llvm::cl::getGeneralCategory(v6);
  v8 = qword_1ECD344F0;
  if (qword_1ECD344F0 >= HIDWORD(qword_1ECD344F0))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&qword_1ECD344E8, algn_1ECD344F8, qword_1ECD344F0 + 1, 8);
    v8 = qword_1ECD344F0;
  }
  *(_QWORD *)(qword_1ECD344E8 + 8 * v8) = v7;
  LODWORD(qword_1ECD344F0) = qword_1ECD344F0 + 1;
  qword_1ECD34528 = 0;
  unk_1ECD34530 = &off_1E0E22E68;
  qword_1ECD344A8 = (uint64_t)&off_1E0E23178;
  qword_1ECD34538 = (uint64_t)&unk_1E0E23B38;
  qword_1ECD34540 = (uint64_t)off_1E0E4F810;
  qword_1ECD34558 = (uint64_t)&qword_1ECD34540;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ECD344A8, (int8x16_t *)"pass-remarks-missed", (const unsigned __int8 *)0x13);
  qword_1ECD344D8 = (uint64_t)"pattern";
  unk_1ECD344E0 = 7;
  qword_1ECD344C8 = (uint64_t)"Enable missed optimization remarks from passes whose name match the given regular expression";
  unk_1ECD344D0 = 92;
  v10 = word_1ECD344B2 & 0xFF9F | 0x20;
  word_1ECD344B2 = v10;
  if (qword_1ECD34528)
  {
    v19[0] = "cl::location(x) specified more than once!";
    v20 = 259;
    v11 = (llvm::raw_ostream *)llvm::errs(v9);
    llvm::cl::Option::error(&qword_1ECD344A8, (llvm::Twine *)v19, 0, 0, v11);
    v10 = word_1ECD344B2;
  }
  else
  {
    qword_1ECD34528 = (uint64_t)&qword_1ECD343D0;
  }
  word_1ECD344B2 = v10 & 0xFFE7 | 0x10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ECD344A8);
  qword_1ECD34560 = (uint64_t)&unk_1E0E23930;
  word_1ECD34568 = 0;
  word_1ECD3456A &= 0x8000u;
  *(_OWORD *)algn_1ECD3456C = 0u;
  *(_OWORD *)&algn_1ECD3456C[16] = 0u;
  unk_1ECD3458C = 0u;
  dword_1ECD3459C = 0;
  qword_1ECD345A0 = (uint64_t)&unk_1ECD345B0;
  qword_1ECD345A8 = 0x100000000;
  qword_1ECD345B8 = (uint64_t)&algn_1ECD345D4[4];
  unk_1ECD345C0 = &algn_1ECD345D4[4];
  qword_1ECD345C8 = 1;
  dword_1ECD345D0 = 0;
  v13 = llvm::cl::getGeneralCategory(v12);
  v14 = qword_1ECD345A8;
  if (qword_1ECD345A8 >= HIDWORD(qword_1ECD345A8))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&qword_1ECD345A0, &unk_1ECD345B0, qword_1ECD345A8 + 1, 8);
    v14 = qword_1ECD345A8;
  }
  *(_QWORD *)(qword_1ECD345A0 + 8 * v14) = v13;
  LODWORD(qword_1ECD345A8) = qword_1ECD345A8 + 1;
  qword_1ECD345E0 = 0;
  unk_1ECD345E8 = &off_1E0E22E68;
  qword_1ECD34560 = (uint64_t)&off_1E0E23178;
  qword_1ECD345F0 = (uint64_t)&unk_1E0E23B38;
  qword_1ECD345F8 = (uint64_t)off_1E0E4F810;
  qword_1ECD34610 = (uint64_t)&qword_1ECD345F8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ECD34560, (int8x16_t *)"pass-remarks-analysis", (const unsigned __int8 *)0x15);
  qword_1ECD34590 = (uint64_t)"pattern";
  unk_1ECD34598 = 7;
  qword_1ECD34580 = (uint64_t)"Enable optimization analysis remarks from passes whose name match the given regular expression";
  unk_1ECD34588 = 94;
  v16 = word_1ECD3456A & 0xFF9F | 0x20;
  word_1ECD3456A = v16;
  if (qword_1ECD345E0)
  {
    v19[0] = "cl::location(x) specified more than once!";
    v20 = 259;
    v17 = (llvm::raw_ostream *)llvm::errs(v15);
    llvm::cl::Option::error(&qword_1ECD34560, (llvm::Twine *)v19, 0, 0, v17);
    v16 = word_1ECD3456A;
  }
  else
  {
    qword_1ECD345E0 = (uint64_t)&qword_1ECD343E0;
  }
  word_1ECD3456A = v16 & 0xFFE7 | 0x10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ECD34560);
}

uint64_t _GLOBAL__sub_I_MCSymbol_cpp()
{
  return llvm::MCFragment::MCFragment((uint64_t)&SentinelFragment, 15, 0, 0);
}

uint64_t llvm::MCFragment::MCFragment(uint64_t result, int a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = a2;
  *(_BYTE *)(result + 49) = 0;
  *(_BYTE *)(result + 50) = a3;
  *(_BYTE *)(result + 51) = 0;
  if (a2 != 15)
  {
    if (a4)
    {
      v5 = *(_QWORD *)(a4 + 104);
      v4 = (_QWORD *)(a4 + 104);
      *(_QWORD *)result = v5;
      *(_QWORD *)(result + 8) = v4;
      *(_QWORD *)(v5 + 8) = result;
      *v4 = result;
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_RemarkStreamer_cpp()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Emit a section containing remark diagnostics metadata. By default, this is enabled for the following "
                   "formats: yaml-strtab, bitstream.";
  *((_QWORD *)&v4 + 1) = 133;
  v3 = &v2;
  v1 = 1;
  v2 = 0;
  llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::opt<char [16],llvm::cl::desc,llvm::cl::initializer<llvm::cl::BOOLOrDefault>,llvm::cl::OptionHidden>((uint64_t)&EnableRemarksSection, (int8x16_t *)"remarks-section", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::~opt, &EnableRemarksSection, &dword_18013D000);
}

uint64_t _GLOBAL__sub_I_OptBisect_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  _DWORD *v7;
  int v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 1;
  v7 = &llvm::OptBisect::Disabled;
  v6 = 0;
  v9[0] = off_1E0E4F658;
  v10 = v9;
  v12 = v11;
  v11[0] = off_1E0E4F658;
  *(_QWORD *)&v5 = "Maximum optimization to perform";
  *((_QWORD *)&v5 + 1) = 31;
  llvm::cl::opt<int,false,llvm::cl::parser<int>>::opt<char [17],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::NumOccurrencesFlag,llvm::cl::cb<void,int>,llvm::cl::desc>((uint64_t)&OptBisectLimit, (int8x16_t *)"opt-bisect-limit", &v8, &v7, &v6, v11, &v5);
  v0 = v12;
  if (v12 == v11)
  {
    v1 = 4;
    v0 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  v2 = v10;
  if (v10 == v9)
  {
    v3 = 4;
    v2 = v9;
    goto LABEL_10;
  }
  if (v10)
  {
    v3 = 5;
LABEL_10:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &OptBisectLimit, &dword_18013D000);
}

uint64_t _GLOBAL__sub_I_MetadataLoader_cpp()
{
  __int128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  *(_QWORD *)&v1 = "Import full type definitions for ThinLTO.";
  *((_QWORD *)&v1 + 1) = 41;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&_MergedGlobals_69, (int8x16_t *)"import-full-type-definitions", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_69, &dword_18013D000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  *(_QWORD *)&v1 = "Force disable the lazy-loading on-demand of metadata when loading bitcode for importing.";
  *((_QWORD *)&v1 + 1) = 88;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&unk_1ECD35540, (int8x16_t *)"disable-ondemand-mds-loading", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD35540, &dword_18013D000);
}

uint64_t _GLOBAL__sub_I_MCAsmParser_cpp()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 20;
  *(_QWORD *)&v1 = "The maximum nesting depth allowed for assembly macros.";
  *((_QWORD *)&v1 + 1) = 54;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&llvm::AsmMacroMaxNestingDepth, (int8x16_t *)"asm-macro-max-nesting-depth", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::AsmMacroMaxNestingDepth, &dword_18013D000);
}

uint64_t _GLOBAL__sub_I_LegacyPassManager_cpp()
{
  int v0;
  char *v1;
  llvm::cl *v2;
  uint64_t *GeneralCategory;
  unsigned int v4;
  char *v5;
  char *v6;
  int8x16_t *v7;
  const unsigned __int8 *v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  int v22;
  int v23;
  _OWORD *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  int v28;
  int v30;
  _QWORD v31[2];
  __int128 v32;
  uint64_t (**v33)();
  int v34;
  char v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[22];

  v39[20] = *MEMORY[0x1E0C80C00];
  v37 = v39;
  v38 = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, 5uLL, 40);
  v0 = v38;
  v1 = (char *)v37 + 40 * v38;
  *(_QWORD *)v1 = "Disabled";
  *((_QWORD *)v1 + 1) = 8;
  *((_DWORD *)v1 + 4) = 0;
  *((_QWORD *)v1 + 3) = "disable debug output";
  *((_QWORD *)v1 + 4) = 20;
  *((_QWORD *)v1 + 5) = "Arguments";
  *((_QWORD *)v1 + 6) = 9;
  *((_DWORD *)v1 + 14) = 1;
  *((_QWORD *)v1 + 8) = "print pass arguments to pass to 'opt'";
  *((_QWORD *)v1 + 9) = 37;
  *((_QWORD *)v1 + 10) = "Structure";
  *((_QWORD *)v1 + 11) = 9;
  *((_DWORD *)v1 + 24) = 2;
  *((_QWORD *)v1 + 13) = "print pass structure before run()";
  *((_QWORD *)v1 + 14) = 33;
  *((_QWORD *)v1 + 15) = "Executions";
  *((_QWORD *)v1 + 16) = 10;
  *((_DWORD *)v1 + 34) = 3;
  *((_QWORD *)v1 + 18) = "print pass name before it is executed";
  *((_QWORD *)v1 + 19) = 37;
  *((_QWORD *)v1 + 20) = "Details";
  *((_QWORD *)v1 + 21) = 7;
  *((_DWORD *)v1 + 44) = 4;
  *((_QWORD *)v1 + 23) = "print pass details when it is executed";
  *((_QWORD *)v1 + 24) = 38;
  LODWORD(v38) = v0 + 5;
  PassDebugging = (uint64_t)&unk_1E0E23930;
  word_1ECD32AE8 = 0;
  word_1ECD32AEA &= 0x8000u;
  *(_OWORD *)algn_1ECD32AEC = 0u;
  *(_OWORD *)&algn_1ECD32AEC[16] = 0u;
  unk_1ECD32B0C = 0u;
  dword_1ECD32B1C = 0;
  qword_1ECD32B20 = (uint64_t)&unk_1ECD32B30;
  qword_1ECD32B28 = 0x100000000;
  qword_1ECD32B38 = (uint64_t)&algn_1ECD32B54[4];
  unk_1ECD32B40 = &algn_1ECD32B54[4];
  qword_1ECD32B48 = 1;
  dword_1ECD32B50 = 0;
  GeneralCategory = llvm::cl::getGeneralCategory(v2);
  v4 = qword_1ECD32B28;
  if (qword_1ECD32B28 >= HIDWORD(qword_1ECD32B28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&qword_1ECD32B20, &unk_1ECD32B30, qword_1ECD32B28 + 1, 8);
    v4 = qword_1ECD32B28;
  }
  *(_QWORD *)(qword_1ECD32B20 + 8 * v4) = GeneralCategory;
  LODWORD(qword_1ECD32B28) = qword_1ECD32B28 + 1;
  dword_1ECD32B60 = 0;
  qword_1ECD32B68 = (uint64_t)&off_1E0E22E48;
  unk_1ECD32B70 = 0;
  PassDebugging = (uint64_t)off_1E0E23110;
  qword_1ECD32B78 = (uint64_t)&off_1E0E23998;
  qword_1ECD32B80 = (uint64_t)&PassDebugging;
  qword_1ECD32B88 = (uint64_t)&unk_1ECD32B98;
  qword_1ECD32B90 = 0x800000000;
  qword_1ECD32D18 = (uint64_t)off_1E0E4F7B8;
  qword_1ECD32D30 = (uint64_t)&qword_1ECD32D18;
  llvm::cl::Option::setArgStr((uint64_t)&PassDebugging, (int8x16_t *)"debug-pass", (const unsigned __int8 *)0xA);
  word_1ECD32AEA = word_1ECD32AEA & 0xFF9F | 0x20;
  qword_1ECD32B00 = (uint64_t)"Print legacy PassManager debugging information";
  unk_1ECD32B08 = 46;
  if ((_DWORD)v38)
  {
    v5 = (char *)v37;
    v6 = (char *)v37 + 40 * v38;
    do
    {
      v7 = *(int8x16_t **)v5;
      v8 = (const unsigned __int8 *)*((_QWORD *)v5 + 1);
      v9 = *((_DWORD *)v5 + 4);
      v10 = *(_OWORD *)(v5 + 24);
      v31[0] = *(_QWORD *)v5;
      v31[1] = v8;
      v32 = v10;
      v33 = &off_1E0E22E48;
      v35 = 1;
      v34 = v9;
      v11 = qword_1ECD32B88;
      if (qword_1ECD32B90 >= HIDWORD(qword_1ECD32B90))
      {
        v17 = qword_1ECD32B90 + 1;
        if (qword_1ECD32B88 <= (unint64_t)v31
          && qword_1ECD32B88 + 48 * (unint64_t)qword_1ECD32B90 > (unint64_t)v31)
        {
          v36 = 0;
          v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ECD32B88, &unk_1ECD32B98, v17, 48, &v36);
          v24 = (_OWORD *)qword_1ECD32B88;
          if ((_DWORD)qword_1ECD32B90)
          {
            v25 = qword_1ECD32B88 + 48 * qword_1ECD32B90;
            v26 = v13;
            do
            {
              v27 = v24[1];
              *(_OWORD *)v26 = *v24;
              *((_OWORD *)v26 + 1) = v27;
              *((_QWORD *)v26 + 4) = &off_1E0E23008;
              v28 = *((_DWORD *)v24 + 10);
              v26[44] = *((_BYTE *)v24 + 44);
              *((_DWORD *)v26 + 10) = v28;
              *((_QWORD *)v26 + 4) = &off_1E0E22E48;
              v24 += 3;
              v26 += 48;
            }
            while (v24 != (_OWORD *)v25);
            v24 = (_OWORD *)qword_1ECD32B88;
          }
          v30 = v36;
          if (v24 != (_OWORD *)&unk_1ECD32B98)
            free(v24);
          qword_1ECD32B88 = (uint64_t)v13;
          HIDWORD(qword_1ECD32B90) = v30;
          v12 = &v13[16 * (((uint64_t)v31 - v11) >> 4)];
        }
        else
        {
          v36 = 0;
          v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ECD32B88, &unk_1ECD32B98, v17, 48, &v36);
          v18 = (_OWORD *)qword_1ECD32B88;
          if ((_DWORD)qword_1ECD32B90)
          {
            v19 = qword_1ECD32B88 + 48 * qword_1ECD32B90;
            v20 = v13;
            do
            {
              v21 = v18[1];
              *(_OWORD *)v20 = *v18;
              *((_OWORD *)v20 + 1) = v21;
              *((_QWORD *)v20 + 4) = &off_1E0E23008;
              v22 = *((_DWORD *)v18 + 10);
              v20[44] = *((_BYTE *)v18 + 44);
              *((_DWORD *)v20 + 10) = v22;
              *((_QWORD *)v20 + 4) = &off_1E0E22E48;
              v18 += 3;
              v20 += 48;
            }
            while (v18 != (_OWORD *)v19);
            v18 = (_OWORD *)qword_1ECD32B88;
          }
          v23 = v36;
          if (v18 != (_OWORD *)&unk_1ECD32B98)
            free(v18);
          qword_1ECD32B88 = (uint64_t)v13;
          HIDWORD(qword_1ECD32B90) = v23;
          v12 = (char *)v31;
        }
      }
      else
      {
        v12 = (char *)v31;
        v13 = (char *)qword_1ECD32B88;
      }
      v14 = &v13[48 * qword_1ECD32B90];
      v15 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v12;
      *((_OWORD *)v14 + 1) = v15;
      *((_QWORD *)v14 + 4) = &off_1E0E23008;
      v16 = *((_DWORD *)v12 + 10);
      v14[44] = v12[44];
      *((_DWORD *)v14 + 10) = v16;
      *((_QWORD *)v14 + 4) = &off_1E0E22E48;
      LODWORD(qword_1ECD32B90) = qword_1ECD32B90 + 1;
      llvm::cl::AddLiteralOption(qword_1ECD32B80, v7, v8);
      v5 += 40;
    }
    while (v5 != v6);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PassDebugging);
  if (v37 != v39)
    free(v37);
}

void llvm::cl::AddLiteralOption(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  uint64_t v14;

  if (atomic_load(qword_1ECD32ED8))
  {
    v7 = qword_1ECD32ED8[0];
    LODWORD(v8) = *(_DWORD *)(a1 + 108);
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 112))
    {
LABEL_3:
      if (!atomic_load(llvm::cl::TopLevelSubCommand))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      return;
    }
  }
  else
  {
    v7 = qword_1ECD32ED8[0];
    LODWORD(v8) = *(_DWORD *)(a1 + 108);
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 112))
      goto LABEL_3;
  }
  v10 = *(_QWORD *)(a1 + 96);
  if (v10 == *(_QWORD *)(a1 + 88))
    v8 = v8;
  else
    v8 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v11 = 8 * v8;
    for (i = *(uint64_t **)(a1 + 96); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v11 -= 8;
      if (!v11)
        return;
    }
  }
  else
  {
    i = *(uint64_t **)(a1 + 96);
  }
  v13 = (uint64_t *)(v10 + 8 * v8);
  if (i != v13)
  {
    v14 = *i;
LABEL_18:
    while (++i != v13)
    {
      v14 = *i;
      if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
      {
        if (i != v13)
          goto LABEL_18;
        return;
      }
    }
  }
}

uint64_t _GLOBAL__sub_I_BitcodeReader_cpp()
{
  int v1;
  char v2;
  char *v3;
  __int128 v4;

  v2 = 0;
  v3 = &v2;
  v1 = 1;
  *(_QWORD *)&v4 = "Print the global id for each value when reading the module summary";
  *((_QWORD *)&v4 + 1) = 66;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&_MergedGlobals_68, (int8x16_t *)"print-summary-global-ids", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_68, &dword_18013D000);
  LODWORD(v3) = 1;
  *(_QWORD *)&v4 = "Expand constant expressions to instructions for testing purposes";
  *((_QWORD *)&v4 + 1) = 64;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [38],llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&unk_1ECD353C0, (int8x16_t *)"expand-constant-exprs", &v3, &v4);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD353C0, &dword_18013D000);
}

uint64_t _GLOBAL__sub_I_Value_cpp()
{
  __int128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Deref attributes and metadata infer facts at definition only";
  *((_QWORD *)&v1 + 1) = 60;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [39],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)&UseDerefAtPointSemantics, (int8x16_t *)"use-dereferenceable-at-point-semantics", &v4, (unsigned __int8 **)&v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &UseDerefAtPointSemantics, &dword_18013D000);
}

uint64_t _GLOBAL__sub_I_Dominators_cpp()
{
  __int128 v1;
  int v2;
  _BYTE *v3;

  v3 = &llvm::VerifyDomInfo;
  v2 = 1;
  *(_QWORD *)&v1 = "Verify dominator info (time consuming)";
  *((_QWORD *)&v1 + 1) = 38;
  llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&VerifyDomInfoX, (int8x16_t *)"verify-dom-info", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &VerifyDomInfoX, &dword_18013D000);
}

void std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4FB40;
}

_QWORD *llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &off_1E0E23178;
  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

_QWORD *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_1E0E23658;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

_QWORD *llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_1E0E23110;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E0E23998;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_1E0E23930;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  return a1;
}

void llvm::cl::alias::~alias(llvm::cl::alias *this)
{
  void *v2;
  char *v3;

  *(_QWORD *)this = &unk_1E0E23930;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2 != *((void **)this + 11))
    free(v2);
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 80)
    free(v3);
}

{
  void *v2;
  char *v3;

  *(_QWORD *)this = &unk_1E0E23930;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2 != *((void **)this + 11))
    free(v2);
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 80)
    free(v3);
  operator delete(this);
}

_QWORD *llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &off_1E0E23248;
  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

_QWORD *llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_1E0E23728;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void llvm::cl::Option::setArgStr(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  unint64_t v7;
  const void *v10;
  uint64_t *v11;
  const void **BucketFor;
  uint64_t *v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if ((*(_WORD *)(a1 + 10) & 0x4000) == 0)
    goto LABEL_7;
  if (atomic_load(qword_1ECD32ED8))
  {
    v7 = qword_1ECD32ED8[0];
    if (*(_DWORD *)(a1 + 108) == *(_DWORD *)(a1 + 112))
    {
LABEL_4:
      if (!atomic_load(llvm::cl::TopLevelSubCommand))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      goto LABEL_7;
    }
  }
  else
  {
    v7 = qword_1ECD32ED8[0];
    if (*(_DWORD *)(a1 + 108) == *(_DWORD *)(a1 + 112))
      goto LABEL_4;
  }
  if (atomic_load(llvm::cl::AllSubCommands))
  {
    v10 = (const void *)llvm::cl::AllSubCommands[0];
    v11 = *(uint64_t **)(a1 + 96);
    if (v11 != *(uint64_t **)(a1 + 88))
      goto LABEL_13;
LABEL_18:
    v16 = *(unsigned int *)(a1 + 108);
    v15 = (const void **)&v11[v16];
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 8 * v16;
      while ((const void *)v11[v17 / 8] != v10)
      {
        v17 += 8;
        if (v18 == v17)
          goto LABEL_25;
      }
      v15 = (const void **)&v11[v17 / 8];
    }
LABEL_25:
    v13 = v11;
    goto LABEL_26;
  }
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  v10 = (const void *)llvm::cl::AllSubCommands[0];
  v11 = *(uint64_t **)(a1 + 96);
  if (v11 == *(uint64_t **)(a1 + 88))
    goto LABEL_18;
LABEL_13:
  BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)(a1 + 88), v10);
  v11 = *(uint64_t **)(a1 + 88);
  v13 = *(uint64_t **)(a1 + 96);
  if (*BucketFor == v10)
  {
    v15 = BucketFor;
  }
  else
  {
    v14 = 104;
    if (v13 == v11)
      v14 = 108;
    v15 = (const void **)&v13[*(unsigned int *)(a1 + v14)];
  }
LABEL_26:
  v19 = v13 == v11;
  v20 = 104;
  if (v19)
    v20 = 108;
  v21 = *(unsigned int *)(a1 + v20);
  if (v15 == (const void **)&v13[v21])
  {
    if ((_DWORD)v21)
    {
      while ((unint64_t)*v13 >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++v13 == (uint64_t *)v15)
          goto LABEL_7;
      }
    }
    if (v13 != (uint64_t *)v15)
    {
      v27 = *v13;
LABEL_42:
      while (++v13 != (uint64_t *)v15)
      {
        v27 = *v13;
        if ((unint64_t)*v13 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v13 != (uint64_t *)v15)
            goto LABEL_42;
          break;
        }
      }
    }
  }
  else
  {
    v22 = *(_QWORD *)(v7 + 280);
    v23 = 288;
    if (v22 == *(_QWORD *)(v7 + 272))
      v23 = 292;
    v24 = *(unsigned int *)(v7 + v23);
    if ((_DWORD)v24)
    {
      v25 = 8 * v24;
      v26 = *(uint64_t **)(v7 + 280);
      while ((unint64_t)*v26 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v26;
        v25 -= 8;
        if (!v25)
          goto LABEL_7;
      }
    }
    else
    {
      v26 = *(uint64_t **)(v7 + 280);
    }
    v28 = (uint64_t *)(v22 + 8 * v24);
    if (v26 != v28)
    {
      v29 = *v26;
LABEL_50:
      while (++v26 != v28)
      {
        v29 = *v26;
        if ((unint64_t)*v26 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v26 != v28)
            goto LABEL_50;
          break;
        }
      }
    }
  }
LABEL_7:
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  if (a3 == (const unsigned __int8 *)1)
    *(_WORD *)(a1 + 10) |= 0x1000u;
}

void `anonymous namespace'::CommandLineParser::addLiteralOption(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4, const unsigned __int8 *a5)
{
  uint64_t *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *i;
  _QWORD *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  uint64_t v23;

  if (!*(_QWORD *)(a2 + 24))
  {
    v23 = a2;
    v10 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(a3 + 128, a4, a5, &v23);
    if ((v11 & 1) == 0)
    {
      v19 = (llvm::raw_ostream *)llvm::errs((llvm *)v10);
      v20 = llvm::raw_ostream::operator<<(v19, (const char *)a1);
      v21 = llvm::raw_ostream::operator<<(v20, ": CommandLine Error: Option '");
      v22 = llvm::raw_ostream::operator<<(v21, a4->i8, (size_t)a5);
      llvm::raw_ostream::operator<<(v22, "' registered more than once!\n");
      llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const char *)1);
    }
    if (atomic_load(llvm::cl::AllSubCommands))
    {
      if (llvm::cl::AllSubCommands[0] != a3)
        return;
    }
    else
    {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      if (llvm::cl::AllSubCommands[0] != a3)
        return;
    }
    v13 = *(_QWORD *)(a1 + 280);
    v14 = 288;
    if (v13 == *(_QWORD *)(a1 + 272))
      v14 = 292;
    v15 = *(unsigned int *)(a1 + v14);
    if ((_DWORD)v15)
    {
      v16 = 8 * v15;
      for (i = *(_QWORD **)(a1 + 280); *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v16 -= 8;
        if (!v16)
          return;
      }
    }
    else
    {
      i = *(_QWORD **)(a1 + 280);
    }
    v18 = (_QWORD *)(v13 + 8 * v15);
LABEL_16:
    if (i != v18)
    {
      if (*i != a3)
      while (++i != v18)
      {
        if (*i < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_16;
      }
    }
  }
}

uint64_t llvm::StringMapImpl::LookupBucketFor(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const unsigned __int8 **v15;
  uint64_t i;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  if (!*((_DWORD *)a1 + 2))
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v6 = calloc(0x11uLL, 0xCuLL);
    if (!v6)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v6[16] = 2;
    *a1 = (uint64_t)v6;
    *((_DWORD *)a1 + 2) = 16;
  }
  v7 = llvm::xxh3_64bits(a2, (unint64_t)a3, a3);
  v8 = *((unsigned int *)a1 + 2);
  v9 = v8 - 1;
  result = ((_DWORD)v8 - 1) & v7;
  v11 = *a1;
  v12 = *a1 + 8 * v8 + 8;
  v13 = 0xFFFFFFFFLL;
  if (a3)
  {
    v14 = 1;
    v15 = *(const unsigned __int8 ***)(v11 + 8 * result);
    for (i = result; v15; i = result)
    {
      if (v15 == (const unsigned __int8 **)-8)
      {
        if ((_DWORD)v13 == -1)
          v13 = result;
        else
          v13 = v13;
      }
      else if (*(_DWORD *)(v12 + 4 * i) == (_DWORD)v7 && a3 == *v15)
      {
        v28 = result;
        v26 = v12;
        v27 = v7;
        v22 = v11;
        v23 = v13;
        v24 = v14;
        v25 = v9;
        v20 = memcmp(a2, (char *)v15 + *((unsigned int *)a1 + 5), (size_t)a3);
        v14 = v24;
        v9 = v25;
        v11 = v22;
        v13 = v23;
        v12 = v26;
        v7 = v27;
        v21 = v20;
        result = v28;
        if (!v21)
          return result;
      }
      LODWORD(result) = v9 & (result + v14++);
      v15 = *(const unsigned __int8 ***)(v11 + 8 * result);
    }
  }
  else
  {
    v18 = 1;
    v19 = *(_QWORD **)(v11 + 8 * result);
    for (i = result; v19; i = result)
    {
      if (v19 == (_QWORD *)-8)
      {
        if ((_DWORD)v13 == -1)
          LODWORD(v13) = result;
      }
      else if (*(_DWORD *)(v12 + 4 * i) == (_DWORD)v7 && !*v19)
      {
        return result;
      }
      result = v9 & (result + v18++);
      v19 = *(_QWORD **)(v11 + 8 * result);
    }
  }
  v17 = (int)v13;
  if ((_DWORD)v13 == -1)
  {
    v17 = i;
    result = result;
  }
  else
  {
    result = v13;
  }
  *(_DWORD *)(v12 + 4 * v17) = v7;
  return result;
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _BYTE **a3, _WORD *a4, _OWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  llvm *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  const char *v19;
  __int16 v20;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 145) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)a1 = &off_1E0E23588;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FB40;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  if (*(_QWORD *)(a1 + 128))
  {
    v19 = "cl::location(x) specified more than once!";
    v20 = 259;
    v16 = (llvm::raw_ostream *)llvm::errs(v15);
    llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v19, 0, 0, v16);
  }
  else
  {
    v17 = *a3;
    *(_QWORD *)(a1 + 128) = *a3;
    *(_BYTE *)(a1 + 145) = 1;
    *(_BYTE *)(a1 + 144) = *v17;
  }
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t _GLOBAL__sub_I_ModuleSummaryIndex_cpp()
{
  int v1;
  char v2;
  char *v3;
  void *__p[3];

  v2 = 1;
  v1 = 1;
  v3 = &v2;
  __p[0] = "Propagate attributes in index";
  __p[1] = (void *)29;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&_MergedGlobals_64, (int8x16_t *)"propagate-attrs", &v3, &v1, __p);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_64, &dword_18013D000);
  v2 = 1;
  v1 = 1;
  v3 = &v2;
  __p[0] = "Import constant global variables with references";
  __p[1] = (void *)48;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&unk_1ECD346D8, (int8x16_t *)"import-constants-with-refs", &v3, &v1, __p);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD346D8, &dword_18013D000);
  memset(__p, 0, sizeof(__p));
  llvm::FunctionSummary::makeDummyFunctionSummary((__int128 *)__p, (uint64_t)&llvm::FunctionSummary::ExternalNode);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return __cxa_atexit((void (*)(void *))llvm::FunctionSummary::~FunctionSummary, &llvm::FunctionSummary::ExternalNode, &dword_18013D000);
}

_QWORD *llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  *a1 = &off_1E0E23860;
  v2 = a1 + 27;
  v3 = (_QWORD *)a1[30];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[23];
  if (v5)
  {
    a1[24] = v5;
    operator delete(v5);
  }
  v6 = a1[19];
  if (v6)
  {
    v7 = a1[20];
    v8 = (void *)a1[19];
    if (v7 != v6)
    {
      v9 = a1[20];
      do
      {
        *(_QWORD *)(v9 - 40) = &off_1E0E23088;
        v9 -= 40;
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v6);
      v8 = (void *)a1[19];
    }
    a1[20] = v6;
    operator delete(v8);
  }
  v10 = a1[16];
  if (v10)
  {
    v11 = a1[17];
    v12 = (void *)a1[16];
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0)
          operator delete(*(void **)(v11 - 24));
        v11 -= 24;
      }
      while (v11 != v10);
      v12 = (void *)a1[16];
    }
    a1[17] = v10;
    operator delete(v12);
  }
  *a1 = &unk_1E0E23930;
  v13 = (void *)a1[12];
  if (v13 != (void *)a1[11])
    free(v13);
  v14 = (_QWORD *)a1[8];
  if (v14 != a1 + 10)
    free(v14);
  return a1;
}

uint64_t _GLOBAL__sub_I_PassTimingInfo_cpp()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v3;
  int v4;
  _BYTE *v5;
  __int128 v6;
  __int128 *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = &llvm::TimePassesIsEnabled;
  LODWORD(v5) = 1;
  *(_QWORD *)&v6 = "Time each pass, printing elapsed time for each on exit";
  *((_QWORD *)&v6 + 1) = 54;
  llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&unk_1ECD347D0, (int8x16_t *)"time-passes", (_BYTE **)&v3, &v5, &v6);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD347D0, &dword_18013D000);
  v4 = 1;
  *(_QWORD *)&v3 = "Time each pass run, printing elapsed time for each run on exit";
  *((_QWORD *)&v3 + 1) = 62;
  v7 = &v6;
  v5 = &llvm::TimePassesPerRun;
  *(_QWORD *)&v6 = off_1E0E4FDB0;
  llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::cb<void,BOOL const&>>((uint64_t)&unk_1ECD34890, (int8x16_t *)"time-passes-per-run", &v5, &v4, &v3, &v6);
  v0 = v7;
  if (v7 == &v6)
  {
    v1 = 4;
    v0 = &v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v1 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v0 + 8 * v1))();
  }
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD34890, &dword_18013D000);
}

void llvm::cl::Option::addArgument(llvm::cl::Option *this)
{
  if (!atomic_load(qword_1ECD32ED8))
  *((_WORD *)this + 5) |= 0x4000u;
}

uint64_t _GLOBAL__sub_I_PrintPasses_cpp()
{
  int v0;
  uint64_t v1;
  int v3;
  int *v4;
  int v5;
  int v6;
  __int128 v7;
  __int128 v8;
  _QWORD v9[21];

  v9[20] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v8 = "Print IR before specified passes";
  *((_QWORD *)&v8 + 1) = 32;
  LODWORD(v7) = 1;
  LODWORD(v4) = 1;
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::list<char [13],llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::OptionHidden>((uint64_t)&unk_1ECD34D90, (int8x16_t *)"print-before", &v8, &v7, &v4);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &unk_1ECD34D90, &dword_18013D000);
  *(_QWORD *)&v8 = "Print IR after specified passes";
  *((_QWORD *)&v8 + 1) = 31;
  LODWORD(v7) = 1;
  LODWORD(v4) = 1;
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::list<char [13],llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::OptionHidden>((uint64_t)&unk_1ECD34E88, (int8x16_t *)"print-after", &v8, &v7, &v4);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &unk_1ECD34E88, &dword_18013D000);
  *(_QWORD *)&v8 = "Print IR before each pass";
  *((_QWORD *)&v8 + 1) = 25;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v7 = &v6;
  LODWORD(v4) = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [12],llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((uint64_t)&unk_1ECD34A68, (int8x16_t *)"print-before-all", &v8, (_BYTE **)&v7, &v4);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD34A68, &dword_18013D000);
  *(_QWORD *)&v8 = "Print IR after each pass";
  *((_QWORD *)&v8 + 1) = 24;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v7 = &v6;
  LODWORD(v4) = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [12],llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((uint64_t)&unk_1ECD34B28, (int8x16_t *)"print-after-all", &v8, (_BYTE **)&v7, &v4);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD34B28, &dword_18013D000);
  *(_QWORD *)&v7 = "Print changed IRs";
  *((_QWORD *)&v7 + 1) = 17;
  v5 = 1;
  v6 = 1;
  v3 = 0;
  v4 = &v3;
  *(_QWORD *)&v8 = v9;
  *((_QWORD *)&v8 + 1) = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8, v9, 8uLL, 40);
  v0 = DWORD2(v8);
  v1 = v8 + 40 * DWORD2(v8);
  *(_QWORD *)v1 = "quiet";
  *(_QWORD *)(v1 + 8) = 5;
  *(_DWORD *)(v1 + 16) = 2;
  *(_QWORD *)(v1 + 24) = "Run in quiet mode";
  *(_QWORD *)(v1 + 32) = 17;
  *(_QWORD *)(v1 + 40) = "diff";
  *(_QWORD *)(v1 + 48) = 4;
  *(_DWORD *)(v1 + 56) = 3;
  *(_QWORD *)(v1 + 64) = "Display patch-like changes";
  *(_QWORD *)(v1 + 72) = 26;
  *(_QWORD *)(v1 + 80) = "diff-quiet";
  *(_QWORD *)(v1 + 88) = 10;
  *(_DWORD *)(v1 + 96) = 4;
  *(_QWORD *)(v1 + 104) = "Display patch-like changes in quiet mode";
  *(_QWORD *)(v1 + 112) = 40;
  *(_QWORD *)(v1 + 120) = "cdiff";
  *(_QWORD *)(v1 + 128) = 5;
  *(_DWORD *)(v1 + 136) = 5;
  *(_QWORD *)(v1 + 144) = "Display patch-like changes with color";
  *(_QWORD *)(v1 + 152) = 37;
  *(_QWORD *)(v1 + 160) = "cdiff-quiet";
  *(_QWORD *)(v1 + 168) = 11;
  *(_DWORD *)(v1 + 176) = 6;
  *(_QWORD *)(v1 + 184) = "Display patch-like changes in quiet mode with color";
  *(_QWORD *)(v1 + 192) = 51;
  *(_QWORD *)(v1 + 200) = "dot-cfg";
  *(_QWORD *)(v1 + 208) = 7;
  *(_DWORD *)(v1 + 216) = 7;
  *(_QWORD *)(v1 + 224) = "Create a website with graphical changes";
  *(_QWORD *)(v1 + 232) = 39;
  *(_QWORD *)(v1 + 240) = "dot-cfg-quiet";
  *(_QWORD *)(v1 + 248) = 13;
  *(_DWORD *)(v1 + 256) = 8;
  *(_QWORD *)(v1 + 264) = "Create a website with graphical changes in quiet mode";
  *(_QWORD *)(v1 + 272) = 53;
  *(_QWORD *)(v1 + 280) = "";
  *(_QWORD *)(v1 + 288) = 0;
  *(_DWORD *)(v1 + 296) = 1;
  *(_QWORD *)(v1 + 304) = "";
  *(_QWORD *)(v1 + 312) = 0;
  DWORD2(v8) = v0 + 8;
  llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::opt<char [14],llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::ValueExpected,llvm::cl::initializer<llvm::ChangePrinter>,llvm::cl::ValuesClass>((uint64_t)&llvm::PrintChanged, (int8x16_t *)"print-changed", &v7, &v6, &v5, &v4, (uint64_t *)&v8);
  if ((_QWORD *)v8 != v9)
    free((void *)v8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::~opt, &llvm::PrintChanged, &dword_18013D000);
  LODWORD(v4) = 1;
  *(_QWORD *)&v7 = "diff";
  *(_QWORD *)&v8 = "system diff used by change reporters";
  *((_QWORD *)&v8 + 1) = 36;
  llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<char [24],llvm::cl::OptionHidden,llvm::cl::initializer<char [5]>,llvm::cl::desc>((uint64_t)&unk_1ECD34CA8, (int8x16_t *)"print-changed-diff-path", &v4, (const char **)&v7, &v8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &unk_1ECD34CA8, &dword_18013D000);
  *(_QWORD *)&v8 = "When printing IR for print-[before|after]{-all} always print a module IR";
  *((_QWORD *)&v8 + 1) = 72;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v7 = &v6;
  LODWORD(v4) = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [12],llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((uint64_t)&unk_1ECD34BE8, (int8x16_t *)"print-module-scope", &v8, (_BYTE **)&v7, &v4);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD34BE8, &dword_18013D000);
  *(_QWORD *)&v8 = "pass names";
  *((_QWORD *)&v8 + 1) = 10;
  *(_QWORD *)&v7 = "Only consider IR changes for passes whose names match the specified value. No-op without -print-changed";
  *((_QWORD *)&v7 + 1) = 103;
  LODWORD(v4) = 1;
  v6 = 1;
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::OptionHidden>((uint64_t)&unk_1ECD34F80, (int8x16_t *)"filter-passes", &v8, &v7, &v4, &v6);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &unk_1ECD34F80, &dword_18013D000);
  *(_QWORD *)&v8 = "function names";
  *((_QWORD *)&v8 + 1) = 14;
  *(_QWORD *)&v7 = "Only print IR for functions whose name match this for all print-[before|after][-all] options";
  *((_QWORD *)&v7 + 1) = 92;
  LODWORD(v4) = 1;
  v6 = 1;
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::OptionHidden>((uint64_t)&unk_1ECD35078, (int8x16_t *)"filter-print-funcs", &v8, &v7, &v4, &v6);
  return __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &unk_1ECD35078, &dword_18013D000);
}

void `anonymous namespace'::CommandLineParser::addOption(_anonymous_namespace_::CommandLineParser *this, llvm::cl::Option *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  if ((a3 & 1) == 0 && (*((_WORD *)a2 + 5) & 0x2000) != 0)
  {
    v11 = *((unsigned int *)this + 18);
    if (v11 >= *((_DWORD *)this + 19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)this + 18);
    }
    *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v11) = a2;
    ++*((_DWORD *)this + 18);
  }
  else if (*((_DWORD *)a2 + 27) == *((_DWORD *)a2 + 28))
  {
    if (!atomic_load(llvm::cl::TopLevelSubCommand))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 12);
    v7 = 104;
    if (v6 == *((_QWORD *)a2 + 11))
      v7 = 108;
    v8 = *(unsigned int *)((char *)a2 + v7);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      for (i = (uint64_t *)*((_QWORD *)a2 + 12); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v9 -= 8;
        if (!v9)
          return;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)a2 + 12);
    }
    v12 = (uint64_t *)(v6 + 8 * v8);
    while (i != v12)
    {
      v13 = *i++;
      if (i == v12)
        break;
      while ((unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++i == v12)
          return;
      }
    }
  }
}

void llvm::SmallVectorBase<unsigned int>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  size_t v12;
  void *v13;
  uint64_t v14;

  if (HIDWORD(a3))
  {
    report_size_overflow(a3);
    goto LABEL_30;
  }
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == -1)
  {
LABEL_30:
    report_at_maximum_capacity(0xFFFFFFFFuLL);
    goto LABEL_31;
  }
  v8 = (2 * v5) | 1;
  v9 = 0xFFFFFFFFLL;
  if (v8 < 0xFFFFFFFF)
    v9 = v8;
  if (v8 >= a3)
    v10 = v9;
  else
    v10 = a3;
  v11 = *(void **)a1;
  v12 = v10 * a4;
  if (*(void **)a1 == a2)
  {
    v13 = malloc(v10 * a4);
    if (v13 || !v12 && (v13 = malloc(1uLL)) != 0)
    {
      if (v13 == a2)
      {
        v13 = malloc(v12);
        if (!v13)
        {
          if (v12)
            goto LABEL_31;
          v13 = malloc(1uLL);
          if (!v13)
            goto LABEL_31;
        }
        free(a2);
      }
      memcpy(v13, a2, *(unsigned int *)(a1 + 8) * a4);
      goto LABEL_28;
    }
LABEL_31:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v13 = realloc(v11, v10 * a4);
  if (!v13)
  {
    if (v12)
      goto LABEL_31;
    v13 = malloc(1uLL);
    if (!v13)
      goto LABEL_31;
  }
  if (v13 != a2)
    goto LABEL_28;
  v14 = *(unsigned int *)(a1 + 8);
  v13 = malloc(v12);
  if (!v13)
  {
    if (v12)
      goto LABEL_31;
    v13 = malloc(1uLL);
    if (!v13)
      goto LABEL_31;
  }
  if ((_DWORD)v14)
    memcpy(v13, a2, v14 * a4);
  free(a2);
LABEL_28:
  *(_QWORD *)a1 = v13;
  *(_DWORD *)(a1 + 12) = v10;
}

void std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4FDB0;
}

void `anonymous namespace'::CommandLineParser::addOption(llvm *a1, uint64_t a2, uint64_t a3)
{
  llvm *v5;
  const unsigned __int8 *v6;
  int Key;
  char v8;
  llvm::raw_ostream *v9;
  int v10;
  const char *v11;
  size_t v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  void *v15;
  const char *v16;
  size_t v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *i;
  uint64_t v27;
  _QWORD *v28;
  llvm::raw_ostream *v29;
  const char *v30;
  __int16 v31;
  __int128 v32;
  uint64_t v33;

  v5 = a1;
  v6 = *(const unsigned __int8 **)(a2 + 24);
  if (!v6)
    goto LABEL_19;
  if ((*(_WORD *)(a2 + 10) & 0x2000) != 0)
  {
    Key = llvm::StringMapImpl::FindKey((uint64_t *)(a3 + 128), *(int8x16_t **)(a2 + 16), v6);
    if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a3 + 136))
      return;
  }
  v32 = *(_OWORD *)(a2 + 16);
  v33 = a2;
  a1 = (llvm *)llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(a3 + 128, (int8x16_t *)v32, *((const unsigned __int8 **)&v32 + 1), &v33);
  if ((v8 & 1) != 0)
  {
LABEL_19:
    v18 = 0;
    v19 = *(_WORD *)(a2 + 10);
    if ((v19 & 0x180) == 0x80)
      goto LABEL_20;
    goto LABEL_36;
  }
  v9 = (llvm::raw_ostream *)llvm::errs(a1);
  v10 = *((char *)v5 + 23);
  if (v10 >= 0)
    v11 = (const char *)v5;
  else
    v11 = *(const char **)v5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)v5 + 23);
  else
    v12 = *((_QWORD *)v5 + 1);
  v13 = llvm::raw_ostream::write(v9, v11, v12);
  v14 = v13;
  v15 = (void *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v15 <= 0x1CuLL)
  {
    v14 = llvm::raw_ostream::write(v13, ": CommandLine Error: Option '", 0x1DuLL);
    a1 = (llvm *)*((_QWORD *)v14 + 4);
    v16 = *(const char **)(a2 + 16);
    v17 = *(_QWORD *)(a2 + 24);
    if (v17 <= *((_QWORD *)v14 + 3) - (_QWORD)a1)
      goto LABEL_14;
LABEL_34:
    v14 = llvm::raw_ostream::write(v14, v16, v17);
    a1 = (llvm *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)a1 <= 0x1CuLL)
      goto LABEL_17;
    goto LABEL_35;
  }
  qmemcpy(v15, ": CommandLine Error: Option '", 29);
  a1 = (llvm *)(*((_QWORD *)v13 + 4) + 29);
  *((_QWORD *)v14 + 4) = a1;
  v16 = *(const char **)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  if (v17 > *((_QWORD *)v14 + 3) - (_QWORD)a1)
    goto LABEL_34;
LABEL_14:
  if (v17)
  {
    memcpy(a1, v16, v17);
    a1 = (llvm *)(*((_QWORD *)v14 + 4) + v17);
    *((_QWORD *)v14 + 4) = a1;
  }
  if (*((_QWORD *)v14 + 3) - (_QWORD)a1 > 0x1CuLL)
  {
LABEL_35:
    qmemcpy(a1, "' registered more than once!\n", 29);
    *((_QWORD *)v14 + 4) += 29;
    v18 = 1;
    v19 = *(_WORD *)(a2 + 10);
    if ((v19 & 0x180) == 0x80)
      goto LABEL_20;
LABEL_36:
    if ((v19 & 0x800) != 0)
    {
      v27 = *(unsigned int *)(a3 + 88);
      if (v27 >= *(_DWORD *)(a3 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 80, (void *)(a3 + 96), v27 + 1, 8);
        LODWORD(v27) = *(_DWORD *)(a3 + 88);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8 * v27) = a2;
      ++*(_DWORD *)(a3 + 88);
      if ((v18 & 1) == 0)
        goto LABEL_22;
    }
    else if ((v19 & 7) == 4)
    {
      if (*(_QWORD *)(a3 + 152))
      {
        v30 = "Cannot specify more than one option with cl::ConsumeAfter!";
        v31 = 259;
        v29 = (llvm::raw_ostream *)llvm::errs(a1);
        llvm::cl::Option::error((_QWORD *)a2, (llvm::Twine *)&v30, 0, 0, v29);
        *(_QWORD *)(a3 + 152) = a2;
        llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const char *)1);
      }
      *(_QWORD *)(a3 + 152) = a2;
      if ((v18 & 1) == 0)
        goto LABEL_22;
    }
    else if (!v18)
    {
      goto LABEL_22;
    }
LABEL_44:
    llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const char *)1);
  }
LABEL_17:
  a1 = llvm::raw_ostream::write(v14, "' registered more than once!\n", 0x1DuLL);
  v18 = 1;
  v19 = *(_WORD *)(a2 + 10);
  if ((v19 & 0x180) != 0x80)
    goto LABEL_36;
LABEL_20:
  v20 = *(unsigned int *)(a3 + 40);
  if (v20 >= *(_DWORD *)(a3 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 32, (void *)(a3 + 48), v20 + 1, 8);
    *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8 * (*(_DWORD *)(a3 + 40))++) = a2;
    if ((v18 & 1) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8 * v20) = a2;
  ++*(_DWORD *)(a3 + 40);
  if ((v18 & 1) != 0)
    goto LABEL_44;
LABEL_22:
  if (atomic_load(llvm::cl::AllSubCommands))
  {
    if (llvm::cl::AllSubCommands[0] != a3)
      return;
  }
  else
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    if (llvm::cl::AllSubCommands[0] != a3)
      return;
  }
  v22 = *((_QWORD *)v5 + 35);
  v23 = 288;
  if (v22 == *((_QWORD *)v5 + 34))
    v23 = 292;
  v24 = *(unsigned int *)((char *)v5 + v23);
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    for (i = (_QWORD *)*((_QWORD *)v5 + 35); *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v25 -= 8;
      if (!v25)
        return;
    }
  }
  else
  {
    i = (_QWORD *)*((_QWORD *)v5 + 35);
  }
  v28 = (_QWORD *)(v22 + 8 * v24);
LABEL_47:
  if (i != v28)
  {
    if (*i != a3)
    while (++i != v28)
    {
      if (*i < 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_47;
    }
  }
}

uint64_t *llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *buffer;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v18 = v9[1];
        ++v9;
        v10 = v18;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  v13 = *a4;
  *buffer = a3;
  buffer[1] = v13;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v14 = *v9 == -8;
  else
    v14 = 1;
  if (v14)
  {
    do
    {
      v16 = v9[1];
      ++v9;
      v15 = v16;
      if (v16)
        v17 = v15 == -8;
      else
        v17 = 1;
    }
    while (v17);
  }
  return v9;
}

uint64_t ZinGetString(CFStringRef theString, uint64_t a2)
{
  const __CFString *v3;
  const char *CStringPtr;
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  int CString;
  std::string::size_type size;
  char v20;
  size_t v21;
  std::string *v22;
  std::string v24;
  std::string __dst;

  v3 = theString;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if (!theString)
      return (uint64_t)v3;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
    if (!theString)
      return (uint64_t)v3;
  }
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
  {
    v5 = CStringPtr;
    v6 = strlen(CStringPtr);
    if (v6 <= 0x7FFFFFFFFFFFFFF7)
    {
      v7 = v6;
      if (v6 >= 0x17)
      {
        v13 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v13 = v6 | 7;
        v14 = v13 + 1;
        p_dst = (std::string *)operator new(v13 + 1);
        __dst.__r_.__value_.__l.__size_ = v7;
        __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
        p_dst = &__dst;
        if (!v6)
          goto LABEL_18;
      }
      memmove(p_dst, v5, v7);
LABEL_18:
      p_dst->__r_.__value_.__s.__data_[v7] = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(std::string *)a2 = __dst;
      return 1;
    }
LABEL_44:
    std::string::__throw_length_error[abi:ne180100]();
  }
  Length = CFStringGetLength(v3);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v11 = MaximumSizeForEncoding + 1;
  if ((unint64_t)(MaximumSizeForEncoding + 1) > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_44;
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    v12 = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    goto LABEL_24;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = MaximumSizeForEncoding + 1;
  v12 = &__dst;
  if (MaximumSizeForEncoding != -1)
LABEL_24:
    bzero(v12, v11);
  v12->__r_.__value_.__s.__data_[v11] = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__dst;
  else
    v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  CString = CFStringGetCString(v3, (char *)v17, v11, 0x8000100u);
  v3 = (const __CFString *)(CString != 0);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (CString)
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v21 = strlen(__dst.__r_.__value_.__l.__data_);
      size = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_ >= v21)
      {
        __dst.__r_.__value_.__l.__size_ = v21;
LABEL_36:
        v22->__r_.__value_.__s.__data_[v21] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_37;
        goto LABEL_34;
      }
    }
    else
    {
      v21 = strlen((const char *)&__dst);
      if (v21 <= HIBYTE(__dst.__r_.__value_.__r.__words[2]))
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21 & 0x7F;
        v22 = &__dst;
        goto LABEL_36;
      }
    }
    std::string::append(&__dst, v21 - size, 0);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_37:
      std::string::__init_copy_ctor_external(&v24, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      goto LABEL_38;
    }
LABEL_34:
    v24 = __dst;
LABEL_38:
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v24;
    v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v20 < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return (uint64_t)v3;
}

void sub_180141ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinCFStringEquals(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0) == kCFCompareEqualTo;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E0DF5DC0, MEMORY[0x1E0DE42D0]);
}

void sub_180141B4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int *value;
  std::vector<int>::pointer end;
  int *v6;
  std::vector<int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  int *v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = (__int128 *)(end - 4);
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x38uLL);
  v21 = (std::string *)(v20 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_180141FA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

const __CFString *ZinIrKernelFormatToCFString(unsigned int a1)
{
  if (a1 > 0x1C)
    return CFSTR("Int8");
  else
    return (const __CFString *)qword_1E0E52F98[a1];
}

uint64_t ZinKernelModeIsSparse(unsigned int a1)
{
  return (a1 < 0xD) & (0x1F04u >> a1);
}

BOOL ZinKernelModeIsPalette(int a1)
{
  return (a1 - 3) < 0xA;
}

void ZinAssertImpl(const char *__format, ...)
{
  ZinException *exception;
  char __str[512];
  uint64_t v3;
  va_list va;

  va_start(va, __format);
  v3 = *MEMORY[0x1E0C80C00];
  vsnprintf(__str, 0x200uLL, __format, va);
  __str[511] = 0;
  exception = (ZinException *)__cxa_allocate_exception(0x78uLL);
  ZinException::ZinException(exception, __str);
}

void sub_180142220(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZinException::~ZinException(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_1E0E130C0;
  if (LOBYTE(this[7].__vftable))
  {
    if (SHIBYTE(this[6].__imp_.__imp_) < 0)
    {
      operator delete((void *)this[5].__imp_.__imp_);
      if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
      {
LABEL_4:
        if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_9;
      }
    }
    else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(this[4].__vftable);
    if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
    {
LABEL_5:
      if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(this[1].__vftable);
      goto LABEL_6;
    }
LABEL_9:
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_10;
  }
LABEL_6:
  std::runtime_error::~runtime_error(this);
}

{
  void *v2;

  this->__vftable = (std::runtime_error_vtbl *)off_1E0E130C0;
  if (LOBYTE(this[7].__vftable))
  {
    if (SHIBYTE(this[6].__imp_.__imp_) < 0)
    {
      operator delete((void *)this[5].__imp_.__imp_);
      if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
      {
LABEL_4:
        if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_9;
      }
    }
    else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(this[4].__vftable);
    if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
    {
LABEL_5:
      if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(this[1].__vftable);
      goto LABEL_6;
    }
LABEL_9:
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_10;
  }
LABEL_6:
  std::runtime_error::~runtime_error(this);
  operator delete(v2);
}

void ZinException::ZinException(ZinException *this, const char *a2)
{
  std::runtime_error *v2;

  v2 = std::runtime_error::runtime_error((std::runtime_error *)this, a2);
  v2->__vftable = (std::runtime_error_vtbl *)off_1E0E130C0;
  LOBYTE(v2[1].__vftable) = 0;
  LOBYTE(v2[7].__vftable) = 0;
}

const __CFString *ZinIrPoolingTypeToCFString(unsigned int a1)
{
  if (a1 > 0xE)
    return CFSTR("Avg");
  else
    return (const __CFString *)qword_1E0E53080[a1];
}

const __CFString *ZinIrConvTypeToCFString(unsigned int a1)
{
  if (a1 > 6)
    return CFSTR("Conv");
  else
    return (const __CFString *)qword_1E0E530F8[a1];
}

const __CFString *ZinIrConvKernelModeToCFString(unsigned int a1)
{
  if (a1 > 0xD)
    return CFSTR("Dense");
  else
    return (const __CFString *)qword_1E0E53130[a1];
}

const __CFString *ZinIrEWTypeToCFString(unsigned int a1)
{
  if (a1 > 0x15)
    return CFSTR("Add");
  else
    return (const __CFString *)qword_1E0E531A0[a1];
}

const __CFString *ZinIrFlattenTypeToCFString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("NCHW");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("NHWC");
  else
    return v1;
}

uint64_t ZinIrTEPaddingModeToCFString(int a1)
{
  if ((a1 - 1) > 6)
    return 0;
  else
    return (uint64_t)*(&off_1E0E53250 + a1 - 1);
}

const __CFString *ZinIrSamplingMethodToCFString(int a1)
{
  if (a1)
    return CFSTR("NearestNeighbor");
  else
    return CFSTR("Linear");
}

const __CFString *ZinIrSamplingGridModeToCFStringRef(unsigned int a1)
{
  if (a1 > 5)
    return CFSTR("StrictAlignedCorners");
  else
    return off_1E0E53288[a1];
}

const __CFString *ZinIrNormalizedCoordinateRangeToCFString(int a1)
{
  if (a1)
    return CFSTR("RangeMinusOneToOne");
  else
    return CFSTR("RangeZeroToOne");
}

const __CFString *ZinIrCoordinateModeToCFString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("NonNormalized");
  if (a1 == 1)
    v1 = CFSTR("NormalizedSymmetric");
  if (a1 == 2)
    return CFSTR("NormalizedReflect");
  else
    return v1;
}

__CFString *ZinIrCropResizeBoxModeToCFString(unsigned int a1)
{
  if (a1 > 0xF)
    return 0;
  else
    return off_1E0E532B8[a1];
}

const __CFString *ZinIrCoordinateToCFString(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 - 1;
  if (v1 > 4)
    return CFSTR("Batch");
  else
    return off_1E0E53338[v1];
}

const __CFString *GlobalArgTypeToCFString(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 6)
    return CFSTR("Min");
  else
    return (const __CFString *)qword_1E0E53360[v1];
}

uint64_t ToCharDimension(int a1, _BYTE *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD v14[2];
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15[0] = xmmword_181232CA0;
  v15[1] = unk_181232CB0;
  v16 = 0x5700000004;
  std::map<ZinIrDimension,char>::map[abi:ne180100](&v13, (int *)v15, 5);
  v4 = (_QWORD *)v14[0];
  if (!v14[0])
    goto LABEL_12;
  v5 = v14;
  v6 = (uint64_t *)v14[0];
  do
  {
    v7 = v6;
    v8 = v5;
    v9 = *((_DWORD *)v6 + 7);
    if (v9 >= a1)
      v5 = v6;
    else
      ++v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  if (v5 != v14 && (v9 >= a1 ? (v10 = v7) : (v10 = v8), *((_DWORD *)v10 + 7) <= a1))
  {
    *a2 = *((_BYTE *)v5 + 32);
    v11 = 1;
  }
  else
  {
LABEL_12:
    v11 = 0;
  }
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v13, v4);
  return v11;
}

_QWORD **std::map<ZinIrDimension,char>::map[abi:ne180100](_QWORD **a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  uint64_t *v13;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      v7 = std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::__find_equal<ZinIrDimension>(a1, v4, &v13, &v12, a2);
      if (!*v7)
      {
        v8 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v8 + 28) = *(_QWORD *)a2;
        v9 = v13;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v9;
        *v7 = (uint64_t)v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = (uint64_t *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_180142734(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::__find_equal<ZinIrDimension>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
    }
    else
    {
      v19 = a1 + 1;
    }
LABEL_25:
    *a3 = v19;
    return v5;
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
      }
      else
      {
        v23 = a1 + 1;
      }
LABEL_41:
      *a3 = v23;
      return v5;
    }
  }
}

void std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

BOOL ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarScale(ZinIrKernelQuantizationInfo *this)
{
  return !*(_BYTE *)this && *((float *)this + 11) == 1.0;
}

BOOL ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarZeroPoint(ZinIrKernelQuantizationInfo *this)
{
  return !*((_BYTE *)this + 1) && *((_DWORD *)this + 12) == 0;
}

uint64_t ZinIrTextureUnitInfo::DynamicShapeOutputTensorDimensions()
{
  return 3;
}

void ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(ZinIrTextureUnitInfo *this)
{
  void *v1;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);
  operator delete(v1);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E0E137A8;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = off_1E0E13140;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (void *)*((_QWORD *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void ZinIrUnitInfo::~ZinIrUnitInfo(ZinIrUnitInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E0E13140;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E0E13140;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

__CFDictionary *ZinCreateArgMinMaxUnit(const ZinIrArgMinMaxUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  uint64_t v6;
  const __CFString *v7;
  int v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFArray *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  int v15;
  int valuePtr;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  v6 = *((int *)a1 + 30);
  if (v6 > 4)
    v7 = CFSTR("SpatialArgMin");
  else
    v7 = (const __CFString *)qword_1E0E53398[v6];
  CFDictionaryAddValue(Mutable, CFSTR("Mode"), v7);
  if ((*((_DWORD *)a1 + 30) | 2) == 3)
  {
    v8 = *((_DWORD *)a1 + 21);
    v15 = *((_DWORD *)a1 + 20);
    valuePtr = v8;
    v9 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
    v10 = CFNumberCreate(v3, kCFNumberSInt32Type, &v15);
    CFDictionaryAddValue(v5, CFSTR("KernelWidth"), v9);
    CFDictionaryAddValue(v5, CFSTR("KernelHeight"), v10);
    CFRelease(v9);
    CFRelease(v10);
    v11 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
    v12 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 92);
    v13 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 88);
    CFArrayAppendValue(v11, v12);
    CFArrayAppendValue(v11, v13);
    CFRelease(v12);
    CFRelease(v13);
    CFDictionaryAddValue(v5, CFSTR("Step"), v11);
    CFRelease(v11);
    ZinAddPaddingToParamsDict(v5, (uint64_t)a1 + 96, 0);
  }
  CFDictionaryAddValue(Unit, CFSTR("Params"), v5);
  CFRelease(v5);
  return Unit;
}

__CFDictionary *ZinCreateBatchToSpaceUnit(const ZinIrBatchToSpaceUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = 35;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

CFMutableDictionaryRef ZinCreateBroadcastUnit(const ZinIrBroadcastUnitInfo *a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  uint64_t *v4;
  const CFDictionaryKeyCallBacks *v5;
  const CFDictionaryValueCallBacks *v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  const __CFString *v9;
  __CFDictionary *theDict;
  CFMutableDictionaryRef Unit;
  int valuePtr;

  Unit = ZinCreateUnit(a1);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v4 = (uint64_t *)*((_QWORD *)a1 + 12);
  if (v4)
  {
    v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v7 = CFDictionaryCreateMutable(v2, 0, v5, v6);
      valuePtr = v4[3];
      v8 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      v9 = ZinIrCoordinateToCFString((_DWORD *)v4 + 4);
      CFDictionaryAddValue(v7, CFSTR("Dimension"), v9);
      CFDictionaryAddValue(v7, CFSTR("Size"), v8);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v8);
      CFRelease(v7);
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  CFDictionaryAddValue(theDict, CFSTR("BroadcastInfo"), Mutable);
  CFDictionaryAddValue(Unit, CFSTR("Params"), theDict);
  CFRelease(Mutable);
  CFRelease(theDict);
  return Unit;
}

__CFDictionary *ZinCreateChannelToSpaceUnit(const ZinIrChannelToSpaceUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = 37;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateConcatUnit(const ZinIrConcatUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  const __CFString *v4;
  const void **v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = ZinIrCoordinateToCFString((_DWORD *)a1 + 20);
  CFDictionaryAddValue(Mutable, CFSTR("Dimension"), v4);
  v5 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*((_BYTE *)a1 + 84))
    v5 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(Mutable, CFSTR("Interleaved"), *v5);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateConvUnit(const ZinIrConvUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  const __CFString *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const __CFString *v10;
  const void *v11;
  const __CFString *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  const __CFString *v19;
  const __CFString *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  const __CFString *v23;
  char *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  const __CFString *v27;
  int valuePtr;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = *((_QWORD *)a1 + 31);
  v5 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Unit, CFSTR("NumGroups"), v5);
  CFRelease(v5);
  v6 = ZinIrConvTypeToCFString(*((_DWORD *)a1 + 60));
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v6);
  if ((*((_DWORD *)a1 + 60) - 5) <= 1)
    ZinAddKernelDilationRateToParamsDict(Mutable, (char *)a1 + 280);
  v7 = (const void *)*MEMORY[0x1E0C9AE50];
  v8 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*((_BYTE *)a1 + 244))
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v9 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(Mutable, CFSTR("KernelGroupReuse"), v9);
  v10 = ZinIrConvKernelModeToCFString(*((_DWORD *)a1 + 20));
  if (v10)
    CFDictionaryAddValue(Mutable, CFSTR("KernelMode"), v10);
  if (*((_BYTE *)a1 + 180))
    v11 = v7;
  else
    v11 = v8;
  CFDictionaryAddValue(Mutable, CFSTR("KernelMutable"), v11);
  v12 = ZinIrKernelFormatToCFString(*((_DWORD *)a1 + 21));
  if (v12)
    CFDictionaryAddValue(Mutable, CFSTR("KernelType"), v12);
  ZinAddKernelSizeToParamsDict(Mutable, (_QWORD *)a1 + 32, 1);
  if (ZinKernelModeIsPalette(*((_DWORD *)a1 + 20)))
  {
    ZinDictionaryAddVector<long long>(Mutable, CFSTR("KernelPaletteLUTOffset"), (uint64_t *)a1 + 19);
    ZinDictionaryAddVector<int>(Mutable, CFSTR("KernelPaletteLUTIndex"), (char **)a1 + 16);
    v13 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 176);
    CFDictionaryAddValue(Mutable, CFSTR("KernelPaletteVectorSize"), v13);
    CFRelease(v13);
  }
  if (ZinKernelModeIsSparse(*((_DWORD *)a1 + 20)))
  {
    v14 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 112);
    CFDictionaryAddValue(Mutable, CFSTR("KernelMaskByteOffset"), v14);
    CFRelease(v14);
    v15 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 104);
    CFDictionaryAddValue(Mutable, CFSTR("KernelMaskIndex"), v15);
    CFRelease(v15);
    v16 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 120);
    CFDictionaryAddValue(Mutable, CFSTR("KernelCoeffCount"), v16);
    CFRelease(v16);
  }
  if (*((_DWORD *)a1 + 20) != 13)
  {
    v17 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 96);
    CFDictionaryAddValue(Mutable, CFSTR("KernelOffset"), v17);
    CFRelease(v17);
    v18 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 88);
    CFDictionaryAddValue(Mutable, CFSTR("KernelIndex"), v18);
    CFRelease(v18);
  }
  ZinAddStepsToParamsDict(Mutable, (uint64_t)a1 + 292, 1);
  ZinAddPaddingToParamsDict(Mutable, (uint64_t)a1 + 304, 1);
  v19 = ZinIrPaddingModeToCFString(*((_DWORD *)a1 + 82));
  CFDictionaryAddValue(Mutable, CFSTR("PaddingMode"), v19);
  if (*((_BYTE *)a1 + 184))
  {
    v20 = ZinIrKernelFormatToCFString(*((_DWORD *)a1 + 56));
    if (v20)
      CFDictionaryAddValue(Mutable, CFSTR("KernelPerCoutScaleFormat"), v20);
    v21 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 200);
    CFDictionaryAddValue(Mutable, CFSTR("KernelScaleByteOffset"), v21);
    CFRelease(v21);
    v22 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 192);
    v23 = CFSTR("KernelScaleIndex");
  }
  else
  {
    if (ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarScale((const ZinIrConvUnitInfo *)((char *)a1 + 184)))
      goto LABEL_26;
    v22 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 228);
    v23 = CFSTR("KernelScaleScalar");
  }
  CFDictionaryAddValue(Mutable, v23, v22);
  CFRelease(v22);
LABEL_26:
  if (*((_BYTE *)a1 + 185))
  {
    v24 = (char *)a1 + 208;
    v25 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 216);
    CFDictionaryAddValue(Mutable, CFSTR("KernelZeroPointByteOffset"), v25);
    CFRelease(v25);
    v26 = CFNumberCreate(v3, kCFNumberSInt32Type, v24);
    v27 = CFSTR("KernelZeroPointIndex");
LABEL_30:
    CFDictionaryAddValue(Mutable, v27, v26);
    CFRelease(v26);
    goto LABEL_31;
  }
  if (!ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarZeroPoint((const ZinIrConvUnitInfo *)((char *)a1 + 184)))
  {
    v26 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 232);
    v27 = CFSTR("KernelZeroPointScalar");
    goto LABEL_30;
  }
LABEL_31:
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

void ZinDictionaryAddVector<long long>(__CFDictionary *a1, const void *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v9;
  uint64_t v10;
  CFTypeRef *v11;
  const __CFAllocator *v12;
  uint64_t v13;
  CFArrayRef v14;
  CFTypeRef *v15;

  v6 = *a3;
  v5 = a3[1];
  v7 = v5 - *a3;
  if (v5 == *a3)
  {
    v9 = 0;
    v11 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = a3[1];
  }
  else
  {
    if (v7 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = (CFTypeRef *)operator new(v5 - v6);
    bzero(v9, v5 - v6);
    v10 = 0;
    v11 = (CFTypeRef *)((char *)v9 + v7);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v9[v10] = CFNumberCreate(v12, kCFNumberSInt64Type, (const void *)(v6 + v10 * 8));
      ++v10;
    }
    while (v6 + v10 * 8 != v5);
    v5 = *a3;
    v13 = a3[1];
  }
  v14 = CFArrayCreate(v12, v9, (v13 - v5) >> 3, MEMORY[0x1E0C9B378]);
  CFDictionaryAddValue(a1, a2, v14);
  if (v9 != v11)
  {
    v15 = v9;
    do
      CFRelease(*v15++);
    while (v15 != v11);
  }
  CFRelease(v14);
  if (v9)
    operator delete(v9);
}

void sub_1801436A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinDictionaryAddVector<int>(__CFDictionary *a1, const void *a2, char **a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v9;
  CFTypeRef *v10;
  CFTypeRef *v11;
  const __CFAllocator *v12;
  CFNumberRef *v13;
  char *v14;
  CFArrayRef v15;
  CFTypeRef *v16;

  v5 = *a3;
  v6 = a3[1];
  v7 = v6 - *a3;
  if (v6 == *a3)
  {
    v10 = 0;
    v11 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = a3[1];
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = 2 * v7;
    v10 = (CFTypeRef *)operator new(2 * v7);
    bzero(v10, v9);
    v11 = (CFTypeRef *)((char *)v10 + v9);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = (CFNumberRef *)v10;
    do
    {
      *v13++ = CFNumberCreate(v12, kCFNumberSInt32Type, v5);
      v5 += 4;
    }
    while (v5 != v6);
    v6 = *a3;
    v14 = a3[1];
  }
  v15 = CFArrayCreate(v12, v10, (v14 - v6) >> 2, MEMORY[0x1E0C9B378]);
  CFDictionaryAddValue(a1, a2, v15);
  if (v10 != v11)
  {
    v16 = v10;
    do
      CFRelease(*v16++);
    while (v16 != v11);
  }
  CFRelease(v15);
  if (v10)
    operator delete(v10);
}

void sub_180143848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFDictionary *ZinCreateCropResizeUnit(const ZinIrCropResizeUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *TextureCommonUnit;
  __CFArray *TextureUnitSamplingGridInfo;
  __CFString *v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;

  Unit = ZinCreateUnit(a1);
  TextureCommonUnit = ZinCreateTextureCommonUnit(a1);
  TextureUnitSamplingGridInfo = ZinCreateTextureUnitSamplingGridInfo((uint64_t)a1 + 160);
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("SamplingGridInfo"), TextureUnitSamplingGridInfo);
  CFRelease(TextureUnitSamplingGridInfo);
  v5 = ZinIrCropResizeBoxModeToCFString(*((_DWORD *)a1 + 39));
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("CoordinateMode"), v5);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((*((_DWORD *)a1 + 39) & 0xFFFFFFF4) != 0)
  {
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (char *)a1 + 192);
    CFDictionaryAddValue(TextureCommonUnit, CFSTR("CropWidth"), v7);
    CFRelease(v7);
    v8 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a1 + 196);
    CFDictionaryAddValue(TextureCommonUnit, CFSTR("CropHeight"), v8);
    CFRelease(v8);
  }
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a1 + 184);
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("OutputWidth"), v9);
  CFRelease(v9);
  v10 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a1 + 188);
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("OutputHeight"), v10);
  CFRelease(v10);
  CFDictionaryAddValue(Unit, CFSTR("Params"), TextureCommonUnit);
  CFRelease(TextureCommonUnit);
  return Unit;
}

__CFDictionary *ZinCreateDeQuantUnit(const ZinIrDeQuantUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  int v9;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (*((int *)a1 + 22) < 1)
  {
    v6 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 128);
    CFDictionaryAddValue(v5, CFSTR("DeQuantScale"), v6);
    v9 = 6;
    ZinSetFormat(CFSTR("DeQuantScaleType"), &v9, v5);
    CFRelease(v6);
  }
  else
  {
    ZinAddWeightInfoToParamsDict(Mutable, 0, CFSTR("DeQuantScaleCount"), CFSTR("DeQuantScaleIndex"), CFSTR("DeQuantScaleOffset"), (_BYTE *)a1 + 80);
  }
  if (*((int *)a1 + 28) < 1)
  {
    v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 132);
    CFDictionaryAddValue(v5, CFSTR("DeQuantZeroPoint"), v7);
    CFRelease(v7);
  }
  else
  {
    ZinAddWeightInfoToParamsDict(v5, 0, CFSTR("DeQuantZeroPointCount"), CFSTR("DeQuantZeroPointIndex"), CFSTR("DeQuantZeroPointOffset"), (_BYTE *)a1 + 104);
  }
  ZinSetFormat(CFSTR("DeQuantScaleType"), (_DWORD *)a1 + 34, v5);
  ZinSetFormat(CFSTR("DeQuantZeroPointType"), (_DWORD *)a1 + 35, v5);
  CFDictionaryAddValue(Unit, CFSTR("Params"), v5);
  CFRelease(v5);
  return Unit;
}

__CFDictionary *ZinCreateEWUnit(const ZinIrEWUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  const __CFString *v4;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = ZinIrEWTypeToCFString(*((_DWORD *)a1 + 20));
  if (v4)
    CFDictionaryAddValue(Mutable, CFSTR("Type"), v4);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateFlattenUnit(const ZinIrFlattenUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  const __CFString *v4;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = ZinIrFlattenTypeToCFString(*((_DWORD *)a1 + 20));
  CFDictionaryAddValue(Mutable, CFSTR("Mode"), v4);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateGatherUnit(const ZinIrGatherUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFArray *v5;
  _DWORD *v6;
  _DWORD *i;
  const __CFString *v8;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  v6 = (_DWORD *)*((_QWORD *)a1 + 20);
  for (i = (_DWORD *)*((_QWORD *)a1 + 21); v6 != i; ++v6)
  {
    v8 = ZinIrCoordinateToCFString(v6);
    CFArrayAppendValue(v5, v8);
  }
  CFDictionaryAddValue(Mutable, CFSTR("GatherNDAxes"), v5);
  CFRelease(v5);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateGlobalArgMinMaxUnit(const ZinIrGlobalArgMinMaxUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  const __CFString *v4;
  const __CFString *v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = GlobalArgTypeToCFString((int *)a1 + 20);
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v4);
  v5 = ZinIrCoordinateToCFString((_DWORD *)a1 + 21);
  CFDictionaryAddValue(Mutable, CFSTR("Dimension"), v5);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateInputViewUnit(const ZinIrInputViewUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  const __CFString *v8;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 80);
  CFDictionaryAddValue(Mutable, CFSTR("Offset"), v5);
  CFRelease(v5);
  v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 84);
  CFDictionaryAddValue(Mutable, CFSTR("Size"), v6);
  CFRelease(v6);
  v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 88);
  CFDictionaryAddValue(Mutable, CFSTR("Step"), v7);
  CFRelease(v7);
  v8 = ZinIrCoordinateToCFString((_DWORD *)a1 + 23);
  CFDictionaryAddValue(Mutable, CFSTR("Dimension"), v8);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateInstanceNormUnit(const ZinIrInstanceNormUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v11;
  __CFArray *v12;
  uint64_t *i;
  const __CFString *v14;
  __int16 valuePtr;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  _S0 = *((float *)a1 + 30);
  if (_S0 != 1.0e-12)
  {
    __asm { FCVT            H0, S0 }
    valuePtr = _H0;
    v11 = CFNumberCreate(v3, kCFNumberSInt16Type, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("Epsilon"), v11);
    CFRelease(v11);
  }
  v12 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  for (i = (uint64_t *)*((_QWORD *)a1 + 12); i; i = (uint64_t *)*i)
  {
    v14 = ZinIrCoordinateToCFString((_DWORD *)i + 4);
    CFArrayAppendValue(v12, v14);
  }
  CFDictionaryAddValue(Mutable, CFSTR("Dimension"), v12);
  CFRelease(v12);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateLinearUnit(const ZinIrLinearUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  const __CFString *v5;
  const __CFString *v6;
  const void **v7;
  const __CFString *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  const __CFString *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  const __CFString *v18;
  char *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  const __CFString *v22;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*((_DWORD *)a1 + 60) != 5)
  {
    v5 = ZinIrCoordinateToCFString((_DWORD *)a1 + 60);
    CFDictionaryAddValue(Mutable, CFSTR("GroupDimension"), v5);
  }
  v6 = ZinIrConvKernelModeToCFString(*((_DWORD *)a1 + 20));
  if (v6)
    CFDictionaryAddValue(Mutable, CFSTR("KernelMode"), v6);
  v7 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*((_BYTE *)a1 + 180))
    v7 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(Mutable, CFSTR("KernelMutable"), *v7);
  v8 = ZinIrKernelFormatToCFString(*((_DWORD *)a1 + 21));
  if (v8)
    CFDictionaryAddValue(Mutable, CFSTR("KernelType"), v8);
  if (ZinKernelModeIsPalette(*((_DWORD *)a1 + 20)))
  {
    ZinDictionaryAddVector<long long>(Mutable, CFSTR("KernelPaletteLUTOffset"), (uint64_t *)a1 + 19);
    ZinDictionaryAddVector<int>(Mutable, CFSTR("KernelPaletteLUTIndex"), (char **)a1 + 16);
    v9 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 176);
    CFDictionaryAddValue(Mutable, CFSTR("KernelPaletteVectorSize"), v9);
    CFRelease(v9);
  }
  if (ZinKernelModeIsSparse(*((_DWORD *)a1 + 20)))
  {
    v10 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 112);
    CFDictionaryAddValue(Mutable, CFSTR("KernelMaskByteOffset"), v10);
    CFRelease(v10);
    v11 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 104);
    CFDictionaryAddValue(Mutable, CFSTR("KernelMaskIndex"), v11);
    CFRelease(v11);
    v12 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 120);
    CFDictionaryAddValue(Mutable, CFSTR("KernelCoeffCount"), v12);
    CFRelease(v12);
  }
  if (*((_DWORD *)a1 + 20) != 13)
  {
    v13 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 96);
    CFDictionaryAddValue(Mutable, CFSTR("KernelOffset"), v13);
    CFRelease(v13);
    v14 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 88);
    CFDictionaryAddValue(Mutable, CFSTR("KernelIndex"), v14);
    CFRelease(v14);
  }
  if (*((_BYTE *)a1 + 184))
  {
    v15 = ZinIrKernelFormatToCFString(*((_DWORD *)a1 + 56));
    if (v15)
      CFDictionaryAddValue(Mutable, CFSTR("KernelPerCoutScaleFormat"), v15);
    v16 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 200);
    CFDictionaryAddValue(Mutable, CFSTR("KernelScaleByteOffset"), v16);
    CFRelease(v16);
    v17 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 192);
    v18 = CFSTR("KernelScaleIndex");
  }
  else
  {
    if (ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarScale((const ZinIrLinearUnitInfo *)((char *)a1 + 184)))
      goto LABEL_22;
    v17 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 228);
    v18 = CFSTR("KernelScaleScalar");
  }
  CFDictionaryAddValue(Mutable, v18, v17);
  CFRelease(v17);
LABEL_22:
  if (*((_BYTE *)a1 + 185))
  {
    v19 = (char *)a1 + 208;
    v20 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 216);
    CFDictionaryAddValue(Mutable, CFSTR("KernelZeroPointByteOffset"), v20);
    CFRelease(v20);
    v21 = CFNumberCreate(v3, kCFNumberSInt32Type, v19);
    v22 = CFSTR("KernelZeroPointIndex");
LABEL_26:
    CFDictionaryAddValue(Mutable, v22, v21);
    CFRelease(v21);
    goto LABEL_27;
  }
  if (!ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarZeroPoint((const ZinIrLinearUnitInfo *)((char *)a1 + 184)))
  {
    v21 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 232);
    v22 = CFSTR("KernelZeroPointScalar");
    goto LABEL_26;
  }
LABEL_27:
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateMatrixMultUnit(const ZinIrMatrixMultUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*((_BYTE *)a1 + 80))
  {
    v5 = CFNumberCreate(v3, kCFNumberShortType, (char *)a1 + 82);
    CFDictionaryAddValue(Mutable, CFSTR("Bias"), v5);
    CFRelease(v5);
  }
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreatePadUnit(const ZinIrPadUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFArray *v9;
  _DWORD *v10;
  _DWORD *i;
  __CFDictionary *PaddingInfo;
  CFNumberRef v13;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  ZinAddPaddingToParamsDict(Mutable, (uint64_t)a1 + 156, 1);
  v5 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 180);
  CFDictionaryAddValue(Mutable, CFSTR("PadChannelFront"), v5);
  CFRelease(v5);
  v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 184);
  CFDictionaryAddValue(Mutable, CFSTR("PadChannelBack"), v6);
  CFRelease(v6);
  v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 188);
  CFDictionaryAddValue(Mutable, CFSTR("PadBatchFront"), v7);
  CFRelease(v7);
  v8 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 192);
  CFDictionaryAddValue(Mutable, CFSTR("PadBatchBack"), v8);
  CFRelease(v8);
  v9 = CFArrayCreateMutable(v3, 1, MEMORY[0x1E0C9B378]);
  v10 = (_DWORD *)*((_QWORD *)a1 + 25);
  for (i = (_DWORD *)*((_QWORD *)a1 + 26); v10 != i; v10 += 2)
  {
    PaddingInfo = ZinCreatePaddingInfo(v10);
    CFArrayAppendValue(v9, PaddingInfo);
    CFRelease(PaddingInfo);
  }
  CFDictionaryAddValue(Mutable, CFSTR("PaddingInfo"), v9);
  CFRelease(v9);
  v13 = CFNumberCreate(v3, kCFNumberSInt16Type, (char *)a1 + 224);
  CFDictionaryAddValue(Mutable, CFSTR("BackgroundValue"), v13);
  CFRelease(v13);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreatePixelShuffleUnit(const ZinIrPixelShuffleUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = 31;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreatePixelUnshuffleUnit(const ZinIrPixelUnshuffleUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = 32;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateQuantUnit(const ZinIrQuantUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (*((int *)a1 + 22) < 1)
  {
    v6 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 128);
    CFDictionaryAddValue(v5, CFSTR("QuantScale"), v6);
    CFRelease(v6);
  }
  else
  {
    ZinAddWeightInfoToParamsDict(Mutable, 0, CFSTR("ScaleCount"), CFSTR("ScaleIndex"), CFSTR("ScaleOffset"), (_BYTE *)a1 + 80);
  }
  if (*((int *)a1 + 28) < 1)
  {
    v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 132);
    CFDictionaryAddValue(v5, CFSTR("QuantZeroPoint"), v7);
    CFRelease(v7);
  }
  else
  {
    ZinAddWeightInfoToParamsDict(v5, 0, CFSTR("ZeroPointCount"), CFSTR("ZeroPointIndex"), CFSTR("ZeroPointOffset"), (_BYTE *)a1 + 104);
  }
  ZinSetFormat(CFSTR("QuantScaleType"), (_DWORD *)a1 + 34, v5);
  CFDictionaryAddValue(Unit, CFSTR("Params"), v5);
  CFRelease(v5);
  return Unit;
}

__CFDictionary *ZinCreateReductionUnit(const ZinIrReductionUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  uint64_t v6;
  const __CFString *v7;
  unsigned int v8;
  CFNumberRef v9;
  CFNumberRef v15;
  __CFArray *v16;
  __CFArray *v17;
  uint64_t v18;
  __int16 valuePtr;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  v6 = *((int *)a1 + 20);
  if (v6 > 6)
    v7 = CFSTR("Min");
  else
    v7 = off_1E0E533C0[v6];
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v7);
  v8 = *((_DWORD *)a1 + 21) - 1;
  if (v8 <= 2)
    CFDictionaryAddValue(v5, CFSTR("PostProcessType"), off_1E0E533F8[v8]);
  v9 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 88);
  CFDictionaryAddValue(v5, CFSTR("PostScale"), v9);
  CFRelease(v9);
  _S0 = *((_DWORD *)a1 + 23);
  __asm { FCVT            H0, S0 }
  valuePtr = _S0;
  v15 = CFNumberCreate(v3, kCFNumberSInt16Type, &valuePtr);
  CFDictionaryAddValue(v5, CFSTR("Epsilon"), v15);
  CFRelease(v15);
  v16 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  v17 = v16;
  v18 = *((_QWORD *)a1 + 12);
  if ((v18 & 8) != 0)
  {
    CFArrayAppendValue(v16, CFSTR("Height"));
    v18 = *((_QWORD *)a1 + 12);
    if ((v18 & 0x10) == 0)
    {
LABEL_8:
      if ((v18 & 2) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v18 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  CFArrayAppendValue(v17, CFSTR("Width"));
  v18 = *((_QWORD *)a1 + 12);
  if ((v18 & 2) == 0)
  {
LABEL_9:
    if ((v18 & 4) == 0)
      goto LABEL_10;
LABEL_16:
    CFArrayAppendValue(v17, CFSTR("Channel"));
    if ((*((_QWORD *)a1 + 12) & 1) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_15:
  CFArrayAppendValue(v17, CFSTR("Depth"));
  v18 = *((_QWORD *)a1 + 12);
  if ((v18 & 4) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v18 & 1) != 0)
LABEL_11:
    CFArrayAppendValue(v17, CFSTR("Batch"));
LABEL_12:
  CFDictionaryAddValue(v5, CFSTR("Dimension"), v17);
  CFRelease(v17);
  CFDictionaryAddValue(Unit, CFSTR("Params"), v5);
  CFRelease(v5);
  return Unit;
}

__CFDictionary *ZinCreateReshapeUnit(int **a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  int *v5;
  int *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  int *v12;
  int *v13;
  std::string *p_valuePtr;
  CFStringRef v15;
  unsigned int v17;
  unsigned int v18;
  int v19;
  std::string::value_type __c[4];
  std::string valuePtr;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = a1[10];
  *(_DWORD *)__c = a1[11];
  LODWORD(valuePtr.__r_.__value_.__l.__data_) = (_DWORD)v5;
  v6 = a1[12];
  v18 = a1[13];
  v19 = (int)v6;
  v17 = a1[14];
  v7 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  v8 = CFNumberCreate(v3, kCFNumberSInt32Type, __c);
  v9 = CFNumberCreate(v3, kCFNumberSInt32Type, &v19);
  v10 = CFNumberCreate(v3, kCFNumberSInt32Type, &v18);
  v11 = CFNumberCreate(v3, kCFNumberSInt32Type, &v17);
  CFDictionaryAddValue(Mutable, CFSTR("ReshapedBatch"), v7);
  CFDictionaryAddValue(Mutable, CFSTR("ReshapedChannel"), v8);
  CFDictionaryAddValue(Mutable, CFSTR("ReshapedHeight"), v9);
  CFDictionaryAddValue(Mutable, CFSTR("ReshapedWidth"), v10);
  CFDictionaryAddValue(Mutable, CFSTR("ReshapedDepth"), v11);
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v9);
  CFRelease(v10);
  CFRelease(v11);
  memset(&valuePtr, 0, sizeof(valuePtr));
  v13 = a1[15];
  v12 = a1[16];
  if (v13 == v12)
  {
    p_valuePtr = &valuePtr;
LABEL_8:
    v15 = CFStringCreateWithCString(v3, (const char *)p_valuePtr, 0x8000100u);
    CFDictionaryAddValue(Mutable, CFSTR("ReshapeLinearizationOrder"), v15);
    CFRelease(v15);
  }
  else
  {
    while (1)
    {
      __c[0] = 0;
      if ((ToCharDimension(*v13, __c) & 1) == 0)
        break;
      std::string::push_back(&valuePtr, __c[0]);
      if (++v13 == v12)
      {
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_valuePtr = &valuePtr;
        else
          p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
        goto LABEL_8;
      }
    }
  }
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

void sub_180144E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFDictionary *ZinCreateResizeUnit(const ZinIrResizeUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFArray *TextureUnitSamplingInfo;
  __CFArray *TextureUnitSamplingGridInfo;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*((float *)a1 + 41) == -1.0 || *((float *)a1 + 42) == -1.0)
  {
    v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 156);
    CFDictionaryAddValue(Mutable, CFSTR("OutputHeight"), v7);
    CFRelease(v7);
    v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 160);
    CFDictionaryAddValue(Mutable, CFSTR("OutputWidth"), v6);
  }
  else
  {
    v5 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 164);
    v6 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 168);
    CFDictionaryAddValue(Mutable, CFSTR("ScaleFactorX"), v5);
    CFDictionaryAddValue(Mutable, CFSTR("ScaleFactorY"), v6);
    CFRelease(v5);
  }
  CFRelease(v6);
  TextureUnitSamplingInfo = ZinCreateTextureUnitSamplingInfo(a1);
  CFDictionaryAddValue(Mutable, CFSTR("SamplingMethodInfo"), TextureUnitSamplingInfo);
  CFRelease(TextureUnitSamplingInfo);
  TextureUnitSamplingGridInfo = ZinCreateTextureUnitSamplingGridInfo((uint64_t)a1 + 176);
  CFDictionaryAddValue(Mutable, CFSTR("SamplingGridInfo"), TextureUnitSamplingGridInfo);
  CFRelease(TextureUnitSamplingGridInfo);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateSoftmaxUnit(const ZinIrSoftmaxUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFArray *v5;
  uint64_t *i;
  const __CFString *v7;
  const void **v8;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  for (i = (uint64_t *)*((_QWORD *)a1 + 12); i; i = (uint64_t *)*i)
  {
    v7 = ZinIrCoordinateToCFString((_DWORD *)i + 4);
    CFArrayAppendValue(v5, v7);
  }
  CFDictionaryAddValue(Mutable, CFSTR("Dimension"), v5);
  CFRelease(v5);
  v8 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*((_BYTE *)a1 + 120))
    v8 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(Mutable, CFSTR("SubtractMax"), *v8);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateSpaceToBatchUnit(const ZinIrSpaceToBatchUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = 34;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateSpaceToChannelUnit(const ZinIrSpaceToChannelUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = 36;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateCoordinateInfo(_DWORD *a1)
{
  __CFDictionary *Mutable;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = ZinIrCoordinateToCFString(a1);
  CFDictionaryAddValue(Mutable, CFSTR("Coordinate"), v3);
  v4 = ZinIrCoordinateModeToCFString(a1[2]);
  CFDictionaryAddValue(Mutable, CFSTR("CoordinateMode"), v4);
  if (a1[2])
  {
    v5 = ZinIrNormalizedCoordinateRangeToCFString(a1[1]);
    CFDictionaryAddValue(Mutable, CFSTR("CoordinateRange"), v5);
  }
  return Mutable;
}

__CFDictionary *ZinCreatePaddingInfo(_DWORD *a1)
{
  __CFDictionary *Mutable;
  const __CFString *v3;
  const void *v4;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = ZinIrCoordinateToCFString(a1);
  CFDictionaryAddValue(Mutable, CFSTR("Coordinate"), v3);
  v4 = (const void *)ZinIrTEPaddingModeToCFString(a1[1]);
  CFDictionaryAddValue(Mutable, CFSTR("PaddingMode"), v4);
  return Mutable;
}

__CFArray *ZinCreateTextureUnitSamplingInfo(const ZinIrTextureUnitInfo *a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  uint64_t *v4;
  uint64_t *v5;
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  uint64_t v8;
  __CFDictionary *v9;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t v13;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
  v4 = (uint64_t *)*((_QWORD *)a1 + 16);
  v5 = (uint64_t *)*((_QWORD *)a1 + 17);
  if (v4 != v5)
  {
    v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v8 = *v4++;
      v13 = v8;
      v9 = CFDictionaryCreateMutable(v2, 0, v6, v7);
      v10 = ZinIrCoordinateToCFString(&v13);
      CFDictionaryAddValue(v9, CFSTR("Coordinate"), v10);
      v11 = ZinIrSamplingMethodToCFString(SHIDWORD(v13));
      CFDictionaryAddValue(v9, CFSTR("SamplingMethod"), v11);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
    }
    while (v4 != v5);
  }
  return Mutable;
}

__CFArray *ZinCreateTextureUnitSamplingGridInfo(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  _DWORD *v4;
  _DWORD *v5;
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  __CFDictionary *v8;
  const __CFString *v9;
  const __CFString *v10;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
  v4 = *(_DWORD **)a1;
  v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v5)
  {
    v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v8 = CFDictionaryCreateMutable(v2, 0, v6, v7);
      v9 = ZinIrCoordinateToCFString(v4);
      CFDictionaryAddValue(v8, CFSTR("Coordinate"), v9);
      v10 = ZinIrSamplingGridModeToCFStringRef(v4[1]);
      CFDictionaryAddValue(v8, CFSTR("SamplingGridMode"), v10);
      CFArrayAppendValue(Mutable, v8);
      CFRelease(v8);
      v4 += 2;
    }
    while (v4 != v5);
  }
  return Mutable;
}

__CFDictionary *ZinCreateTextureCommonUnit(const ZinIrTextureUnitInfo *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  __CFArray *v4;
  _DWORD *i;
  _DWORD *v6;
  __CFDictionary *CoordinateInfo;
  __CFArray *TextureUnitSamplingInfo;
  __CFArray *v9;
  _DWORD *v10;
  _DWORD *v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  __CFDictionary *v14;
  const __CFString *v15;
  const void *v16;
  CFNumberRef v17;
  __CFDictionary *theDict;
  __int16 valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = CFArrayCreateMutable(v2, 1, MEMORY[0x1E0C9B378]);
  v6 = (_DWORD *)*((_QWORD *)a1 + 10);
  for (i = (_DWORD *)*((_QWORD *)a1 + 11); v6 != i; v6 += 3)
  {
    CoordinateInfo = ZinCreateCoordinateInfo(v6);
    CFArrayAppendValue(v4, CoordinateInfo);
    CFRelease(CoordinateInfo);
  }
  CFDictionaryAddValue(Mutable, CFSTR("CoordinateInfo"), v4);
  CFRelease(v4);
  TextureUnitSamplingInfo = ZinCreateTextureUnitSamplingInfo(a1);
  theDict = Mutable;
  CFDictionaryAddValue(Mutable, CFSTR("SamplingMethodInfo"), TextureUnitSamplingInfo);
  CFRelease(TextureUnitSamplingInfo);
  v9 = CFArrayCreateMutable(v2, 1, MEMORY[0x1E0C9B378]);
  v11 = (_DWORD *)*((_QWORD *)a1 + 13);
  v10 = (_DWORD *)*((_QWORD *)a1 + 14);
  if (v11 != v10)
  {
    v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v14 = CFDictionaryCreateMutable(v2, 0, v12, v13);
      v15 = ZinIrCoordinateToCFString(v11);
      CFDictionaryAddValue(v14, CFSTR("Coordinate"), v15);
      v16 = (const void *)ZinIrTEPaddingModeToCFString(v11[1]);
      CFDictionaryAddValue(v14, CFSTR("PaddingMode"), v16);
      CFArrayAppendValue(v9, v14);
      CFRelease(v14);
      v11 += 2;
    }
    while (v11 != v10);
  }
  CFDictionaryAddValue(theDict, CFSTR("PaddingInfo"), v9);
  CFRelease(v9);
  valuePtr = *((_WORD *)a1 + 76);
  v17 = CFNumberCreate(v2, kCFNumberSInt16Type, &valuePtr);
  CFDictionaryAddValue(theDict, CFSTR("BackgroundValue"), v17);
  CFRelease(v17);
  return theDict;
}

__CFDictionary *ZinCreateTileUnit(const ZinIrTileUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  uint64_t *i;
  CFNumberRef v6;
  const __CFString *v7;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = (uint64_t *)*((_QWORD *)a1 + 12); i; i = (uint64_t *)*i)
  {
    v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)i + 20);
    v7 = ZinIrCoordinateToCFString((_DWORD *)i + 4);
    CFDictionaryAddValue(Mutable, v7, v6);
    CFRelease(v6);
  }
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

CFMutableDictionaryRef ZinCreateTransposeUnit(int **a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  int *v4;
  int *v5;
  const CFDictionaryValueCallBacks *v6;
  const __CFString *v7;
  const __CFString *v8;
  __CFDictionary *v9;
  __CFDictionary *theDict;
  CFMutableDictionaryRef Unit;
  int v13;
  int v14;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v4 = a1[10];
  v5 = a1[11];
  if (v4 != v5)
  {
    v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v14 = *v4;
      v13 = v4[1];
      v7 = ZinIrCoordinateToCFString(&v14);
      v8 = ZinIrCoordinateToCFString(&v13);
      v9 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], v6);
      CFDictionaryAddValue(v9, CFSTR("TransposeSourceDimension"), v7);
      CFDictionaryAddValue(v9, CFSTR("TransposeDestinationDimension"), v8);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
      v4 += 2;
    }
    while (v4 != v5);
  }
  CFDictionaryAddValue(theDict, CFSTR("TransposeDimensions"), Mutable);
  CFRelease(Mutable);
  CFDictionaryAddValue(Unit, CFSTR("Params"), theDict);
  CFRelease(theDict);
  return Unit;
}

__CFDictionary *ZinCreateUnflattenUnit(const ZinIrUnflattenUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  int v6;
  const __CFString *v7;
  const __CFString *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  v6 = *((_DWORD *)a1 + 20);
  v7 = CFSTR("NCHW");
  if (v6 == 2)
    v7 = CFSTR("NHWC");
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  CFDictionaryAddValue(Mutable, CFSTR("Mode"), v8);
  v9 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 84);
  CFDictionaryAddValue(v5, CFSTR("DestinationWidth"), v9);
  CFRelease(v9);
  v10 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 88);
  CFDictionaryAddValue(v5, CFSTR("DestinationHeight"), v10);
  CFRelease(v10);
  v11 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 92);
  CFDictionaryAddValue(v5, CFSTR("DestinationChannels"), v11);
  CFRelease(v11);
  CFDictionaryAddValue(Unit, CFSTR("Params"), v5);
  CFRelease(v5);
  return Unit;
}

__CFString *ZinUnitTypeToCFString(int a1)
{
  if ((a1 - 1) > 0x43)
    return 0;
  else
    return off_1E0E53410[a1 - 1];
}

__CFDictionary *ZinCreateUnit(const ZinIrUnitInfo *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  const char *v4;
  CFStringRef v5;
  __CFString *v6;
  __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  CFStringRef v11;
  const char *v12;
  int v13;
  const void *v14;
  const void *v15;
  CFNumberRef v16;
  int valuePtr;
  uint8_t buf[16];

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*((char *)a1 + 31) >= 0)
    v4 = (char *)a1 + 8;
  else
    v4 = (const char *)*((_QWORD *)a1 + 1);
  v5 = CFStringCreateWithCString(v2, v4, 0x8000100u);
  CFDictionaryAddValue(Mutable, CFSTR("Name"), v5);
  CFRelease(v5);
  v6 = ZinUnitTypeToCFString(*((_DWORD *)a1 + 8));
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v6);
  v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v8 = *((_QWORD *)a1 + 5);
  if (*((_QWORD *)a1 + 6) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v12 = (const char *)(v8 + v9);
      if (*(char *)(v8 + v9 + 23) < 0)
        v12 = *(const char **)v12;
      v11 = CFStringCreateWithCString(v2, v12, 0x8000100u);
      CFArrayAppendValue(v7, v11);
      CFRelease(v11);
      ++v10;
      v8 = *((_QWORD *)a1 + 5);
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 6) - v8) >> 3) > v10);
  }
  CFDictionaryAddValue(Mutable, CFSTR("Bottom"), v7);
  CFRelease(v7);
  v13 = *((_DWORD *)a1 + 16);
  if (v13)
  {
    v14 = (const void *)ZinTensorFormatToANECFormat(v13);
    CFDictionaryAddValue(Mutable, CFSTR("InputType"), v14);
  }
  v15 = (const void *)ZinTensorFormatToANECFormat(*((_DWORD *)a1 + 17));
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18013D000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Invalid or missing output format.", buf, 2u);
    }
    ZinAssertImpl("Invalid or missing output format.");
  }
  CFDictionaryAddValue(Mutable, CFSTR("OutputType"), v15);
  valuePtr = *((_DWORD *)a1 + 18);
  if (valuePtr >= 1)
  {
    v16 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("OutputChannels"), v16);
    CFRelease(v16);
  }
  return Mutable;
}

void ZinAddKernelSizeToParamsDict(__CFDictionary *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  int v11;
  int valuePtr;
  int v13;

  v6 = a2[1];
  valuePtr = *a2;
  v13 = v6;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(v7, kCFNumberSInt32Type, &v13);
  CFDictionaryAddValue(a1, CFSTR("KernelWidth"), v8);
  CFDictionaryAddValue(a1, CFSTR("KernelHeight"), v9);
  CFRelease(v8);
  CFRelease(v9);
  if (a3)
  {
    v11 = a2[2];
    v10 = CFNumberCreate(v7, kCFNumberSInt32Type, &v11);
    CFDictionaryAddValue(a1, CFSTR("KernelDepth"), v10);
    CFRelease(v10);
  }
}

void ZinAddWeightInfoToParamsDict(__CFDictionary *a1, const void *a2, const void *a3, const void *a4, const void *a5, _BYTE *a6)
{
  const __CFAllocator *v12;
  CFNumberRef v13;
  const void **v14;
  CFNumberRef v15;
  CFNumberRef v16;

  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, a6 + 8);
  CFDictionaryAddValue(a1, a3, v13);
  CFRelease(v13);
  if (a2)
  {
    v14 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*a6)
      v14 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionaryAddValue(a1, a2, *v14);
  }
  v15 = CFNumberCreate(v12, kCFNumberSInt32Type, a6 + 4);
  CFDictionaryAddValue(a1, a4, v15);
  CFRelease(v15);
  v16 = CFNumberCreate(v12, kCFNumberSInt64Type, a6 + 16);
  CFDictionaryAddValue(a1, a5, v16);
  CFRelease(v16);
}

void ZinAddStepsToParamsDict(__CFDictionary *a1, uint64_t a2, int a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)a2);
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 4));
  CFArrayAppendValue(Mutable, v8);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v8);
  CFRelease(v9);
  if (a3)
  {
    v10 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 8));
    CFArrayAppendValue(Mutable, v10);
    CFRelease(v10);
  }
  CFDictionaryAddValue(a1, CFSTR("Step"), Mutable);
  CFRelease(Mutable);
}

void ZinAddKernelDilationRateToParamsDict(__CFDictionary *a1, char *valuePtr)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  v6 = CFNumberCreate(v4, kCFNumberSInt32Type, valuePtr + 4);
  CFDictionaryAddValue(a1, CFSTR("KernelDilationX"), v5);
  CFDictionaryAddValue(a1, CFSTR("KernelDilationY"), v6);
  CFRelease(v5);
  CFRelease(v6);
}

void ZinAddPaddingToParamsDict(__CFDictionary *a1, uint64_t a2, int a3)
{
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(a2 + 8));
  v8 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 12));
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)a2);
  v10 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 4));
  CFDictionaryAddValue(a1, CFSTR("PadTop"), v7);
  CFDictionaryAddValue(a1, CFSTR("PadBot"), v8);
  CFDictionaryAddValue(a1, CFSTR("PadLeft"), v9);
  CFDictionaryAddValue(a1, CFSTR("PadRight"), v10);
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v9);
  CFRelease(v10);
  if (a3)
  {
    v11 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 16));
    v12 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 20));
    CFDictionaryAddValue(a1, CFSTR("PadFront"), v11);
    CFDictionaryAddValue(a1, CFSTR("PadBack"), v12);
    CFRelease(v11);
    CFRelease(v12);
  }
}

const __CFString *ZinIrPaddingModeToCFString(unsigned int a1)
{
  if (a1 > 9)
    return CFSTR("Zero");
  else
    return (const __CFString *)qword_1E0E53630[a1];
}

void ZinSetFormat(void *key, _DWORD *a2, CFMutableDictionaryRef theDict)
{
  const __CFString *v5;
  __CFDictionary *v6;
  const void *v7;

  switch(*a2)
  {
    case 1:
      v5 = CFSTR("Int8");
      goto LABEL_9;
    case 2:
      v5 = CFSTR("UInt8");
      goto LABEL_9;
    case 4:
      v5 = CFSTR("Float16");
      goto LABEL_9;
    case 5:
      v5 = CFSTR("E4M3");
      goto LABEL_9;
    case 6:
      v5 = CFSTR("Float32");
LABEL_9:
      v6 = theDict;
      v7 = key;
      break;
    default:
      v6 = theDict;
      v7 = key;
      v5 = 0;
      break;
  }
  CFDictionaryAddValue(v6, v7, v5);
}

void ZinAddSpaceTransformFactorToParamsDict(__CFDictionary *a1, _DWORD *a2, uint64_t a3)
{
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)a3);
  v8 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a3 + 4));
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a3 + 8));
  if (*a2 <= 0x25u && ((1 << *a2) & 0x3D80000000) != 0)
  {
    CFDictionaryAddValue(a1, CFSTR("FactorX"), v7);
    CFDictionaryAddValue(a1, CFSTR("FactorY"), v8);
    CFDictionaryAddValue(a1, CFSTR("FactorZ"), v9);
  }
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v9);
}

uint64_t ZinTensorFormatToANECFormat(int a1)
{
  if ((a1 - 1) > 0x10)
    return 0;
  else
    return (uint64_t)*(&off_1E0E53680 + a1 - 1);
}

uint64_t mlir::MemoryMapperInterface::canMapOperands(mlir::MemoryMapperInterface *this)
{
  return (**((uint64_t (***)(_QWORD, _QWORD))this + 1))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::MemoryMapperInterface::getOperandRange(mlir::MemoryMapperInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 8))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

void mlir::detail::AllocRange::getRangeForValue(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t InterfaceFor;
  void *v14;
  uint64_t OperandRange;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  mlir::Block *ParentRegion;
  mlir::Block *v20;
  mlir::Block *v21;
  _QWORD *v22;
  mlir::GenericProgramPoint *v23;
  mlir::GenericProgramPoint *v24;
  mlir::GenericProgramPoint *v25;
  mlir::ForwardIterator *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *ArgAttrsAttr;
  uint64_t v45;
  uint64_t NumElements;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  void *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  void *p_p;
  uint64_t v56;
  void *__p;
  uint64_t v58;
  _QWORD v59[5];

  v59[4] = *MEMORY[0x1E0C80C00];
  v50 = a1;
  v5 = (~a1[2] & 7) == 0 && mlir::detail::AllocRange::allocBlockArgs == 0;
  if (v5
    || (__p = a1, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p)) != 0)
    && (v8 = DefiningOp,
        v9 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 48) + 32))(*(_QWORD *)(v8 + 48), v9)))
  {
    *(_QWORD *)a3 = a1;
LABEL_8:
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    *(_OWORD *)(a3 + 8) = v10;
    *(_OWORD *)(a3 + 24) = v10;
    return;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v11 = (uint64_t *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF8);
  else
    v11 = 0;
  if (!v11)
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_8;
  }
  if ((unint64_t)mlir::detail::AllocRange::minimumAlignment <= 1)
    v12 = 1;
  else
    v12 = mlir::detail::AllocRange::minimumAlignment;
  v48 = 0;
  v49 = v12;
  if (mlir::matchThrough<mlir::MinimumAlignmentInterface,mlir::MemoryMapperInterface>((uint64_t)a1, &v48))
  {
    InterfaceFor = mlir::Value::getDefiningOp((mlir::Value *)&v48);
    v14 = (void *)InterfaceFor;
    if (InterfaceFor)
    {
      InterfaceFor = mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
      if (InterfaceFor)
        InterfaceFor = mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v14);
      else
        v14 = 0;
    }
    __p = v14;
    v58 = InterfaceFor;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__p);
    if (v12 >= 0)
      v16 = v12;
    else
      v16 = -v12;
    LODWORD(v56) = 64;
    p_p = (void *)v16;
    if (OperandRange >= 0)
      v17 = OperandRange;
    else
      v17 = -OperandRange;
    v52 = 64;
    v51 = (void *)v17;
    llvm::APIntOps::GreatestCommonDivisor((uint64_t)&p_p, (uint64_t)&v51, (uint64_t)&__p);
    if (v58 > 0x40)
    {
      v18 = *(_QWORD *)__p;
      operator delete[](__p);
    }
    else
    {
      v18 = (unint64_t)__p;
    }
    if (v52 >= 0x41 && v51)
      operator delete[](v51);
    if (v56 >= 0x41 && p_p)
      operator delete[](p_p);
    v12 = v16 * v17 / v18;
    v49 = v12;
  }
  ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v50);
  __p = &v50;
  v58 = (uint64_t)&v49;
  v20 = (mlir::Block *)*((_QWORD *)ParentRegion + 1);
  if (v20 != ParentRegion)
  {
    v21 = ParentRegion;
    do
    {
      v22 = (_QWORD *)((char *)v20 - 8);
      if (!v20)
        v22 = 0;
      v23 = (mlir::GenericProgramPoint *)(v22 + 4);
      v24 = (mlir::GenericProgramPoint *)v22[5];
      if (v24 != (mlir::GenericProgramPoint *)(v22 + 4))
      {
        do
        {
          v25 = (mlir::GenericProgramPoint *)*((_QWORD *)v24 + 1);
          mlir::GenericProgramPoint::~GenericProgramPoint(v24);
          p_p = &__p;
          mlir::detail::walk<mlir::ForwardIterator>(v26, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorERZNS7_10AllocRange16getRangeForValueENS1_5ValueExE3__0NS1_25MinimumAlignmentInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&p_p, 1);
          v24 = v25;
        }
        while (v25 != v23);
      }
      v20 = (mlir::Block *)*((_QWORD *)v20 + 1);
    }
    while (v20 != v21);
    v12 = v49;
  }
  if (a2 == -1)
    v27 = 0;
  else
    v27 = a2;
  v28 = v27;
  if (v12)
    v28 = (v27 + v12 - 1) / v12 * v12;
  v29 = *v11;
  v30 = mlir::TypeID::get<mlir::ShapedType>();
  v31 = *(unsigned int *)(v29 + 16);
  if (!(_DWORD)v31)
    goto LABEL_60;
  v32 = *(_QWORD **)(v29 + 8);
  v33 = &v32[2 * v31];
  do
  {
    v34 = v31 >> 1;
    v35 = &v32[2 * (v31 >> 1)];
    v37 = *v35;
    v36 = v35 + 2;
    v31 += ~(v31 >> 1);
    if (v37 < v30)
      v32 = v36;
    else
      v31 = v34;
  }
  while (v31);
  if (v32 != v33 && *v32 == v30)
    v38 = v32[1];
  else
LABEL_60:
    v38 = 0;
  p_p = v11;
  v56 = v38;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_p);
  if (v39)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)p_p + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v40 = p_p;
    else
      v40 = 0;
    v51 = v40;
    if (v40)
    {
      __p = v59;
      v58 = 0x400000000;
      v54 = 0;
      mlir::getStridesAndOffset((uint64_t)v40, (uint64_t)&__p, &v54);
      v41 = *(_QWORD *)__p;
      v42 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51) * v41;
      v53 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&p_p);
      v43 = v42 * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v53) >> 3);
      if (__p != v59)
        free(__p);
    }
    else
    {
      ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_p);
      NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v45);
      __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&p_p);
      v43 = NumElements * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p) >> 3);
    }
  }
  else
  {
    __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&p_p);
    v43 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p) >> 3;
  }
  v47 = v49;
  *(_QWORD *)a3 = v50;
  *(_QWORD *)(a3 + 8) = v27;
  *(_QWORD *)(a3 + 16) = v28;
  *(_QWORD *)(a3 + 24) = v28 + v43 - 1;
  *(_QWORD *)(a3 + 32) = v47;
}

uint64_t mlir::matchThrough<mlir::MinimumAlignmentInterface,mlir::MemoryMapperInterface>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (result)
  {
    v4 = result;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
    if (DefiningOp
      && (v6 = DefiningOp,
          mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp)))
    {
      mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(v6);
      if (a2)
        *a2 = v12;
      return 1;
    }
    else
    {
      result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (result)
      {
        result = mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(result);
        if (result)
        {
          if ((*(_BYTE *)(v4 + 46) & 0x80) != 0 && (v7 = *(unsigned int *)(v4 + 68), (_DWORD)v7))
          {
            v8 = v7 - 1;
            v9 = (uint64_t *)(*(_QWORD *)(v4 + 72) + 24);
            do
            {
              v10 = v8;
              v11 = *v9;
              v9 += 4;
              result = mlir::matchThrough<mlir::MinimumAlignmentInterface,mlir::MemoryMapperInterface>(v11, a2);
              if ((result & 1) != 0)
                break;
              v8 = v10 - 1;
            }
            while (v10);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void mlir::dataflow::OffsetLatticeValue::join(unint64_t **a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  llvm *v27;
  llvm *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  size_t v45;
  void *v46;
  uint64_t v47;
  llvm *v48;
  uint64_t v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *((unsigned int *)a1 + 2);
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6 == (_DWORD)v7)
  {
    if (!(_DWORD)v6)
    {
      *a3 = (unint64_t *)(a3 + 2);
      a3[1] = (unint64_t *)0xA00000000;
      return;
    }
    v8 = 0;
    v9 = (char *)*a1;
    v10 = *(unint64_t **)a2;
    while (*(_QWORD *)&v9[v8 * 8] == v10[v8])
    {
      v8 += 5;
      if (5 * v6 == v8)
      {
        v11 = (unint64_t *)(a3 + 2);
        *a3 = (unint64_t *)(a3 + 2);
        a3[1] = (unint64_t *)0xA00000000;
        if (a3 == a1)
          return;
        if (v6 < 0xB)
        {
          v12 = v6;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v6, 40);
          v12 = *((unsigned int *)a1 + 2);
          if (!(_DWORD)v12)
            goto LABEL_90;
          v11 = *a3;
          v9 = (char *)*a1;
        }
        v45 = 40 * v12;
        goto LABEL_89;
      }
    }
  }
  else
  {
    v10 = *(unint64_t **)a2;
  }
  if (!(_DWORD)v7)
  {
LABEL_21:
    if (!(_DWORD)v6)
    {
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = &v53;
      v52 = 0;
      goto LABEL_41;
    }
    v17 = *a1;
    v18 = 40 * v6;
    v19 = *a1 + 3;
    while (1)
    {
      v20 = *(v19 - 2) == -1 || *(v19 - 1) == -1;
      if (v20 || *v19 == -1)
        break;
      v19 += 5;
      v18 -= 40;
      if (!v18)
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = &v53;
        v52 = 0;
        v22 = 40 * v6;
        do
        {
          llvm::SetVector<mlir::detail::AllocRange,llvm::SmallVector<mlir::detail::AllocRange,0u>,llvm::DenseSet<mlir::detail::AllocRange,llvm::DenseMapInfo<mlir::detail::AllocRange,void>>,0u>::insert((uint64_t)&v48, v17);
          v17 += 5;
          v22 -= 40;
        }
        while (v22);
        v10 = *(unint64_t **)a2;
        v7 = *(unsigned int *)(a2 + 8);
LABEL_41:
        if ((_DWORD)v7)
        {
          v24 = 40 * v7;
          do
          {
            llvm::SetVector<mlir::detail::AllocRange,llvm::SmallVector<mlir::detail::AllocRange,0u>,llvm::DenseSet<mlir::detail::AllocRange,llvm::DenseMapInfo<mlir::detail::AllocRange,void>>,0u>::insert((uint64_t)&v48, v10);
            v10 += 5;
            v24 -= 40;
          }
          while (v24);
        }
        if (v49)
        {
          if (v50 <= 4 * (int)v49 || v50 < 0x41)
          {
            if (v50)
            {
              v27 = v48;
              v28 = (llvm *)((char *)v48 + 40 * v50);
              *(_QWORD *)&v29 = -1;
              *((_QWORD *)&v29 + 1) = -1;
              do
              {
                *(_QWORD *)v27 = -4096;
                *(_OWORD *)((char *)v27 + 8) = v29;
                *(_OWORD *)((char *)v27 + 24) = v29;
                v27 = (llvm *)((char *)v27 + 40);
              }
              while (v27 != v28);
            }
            v49 = 0;
          }
          else
          {
            llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::shrink_and_clear((uint64_t)&v48);
          }
        }
        v46 = &v48;
        v47 = 0;
        if ((_DWORD)v52)
        {
          llvm::SmallVectorImpl<mlir::detail::AllocRange>::operator=((uint64_t)&v46, (uint64_t)&v51);
          v30 = (char *)v46;
        }
        else
        {
          v30 = (char *)&v48;
        }
        v31 = 0;
        for (i = 1; ; ++i)
        {
          if (*(_QWORD *)&v30[v31 + 8] != -1 && *(_QWORD *)&v30[v31 + 16] != -1)
          {
            v33 = (uint64_t)&v30[v31];
            if (*(_QWORD *)&v30[v31 + 24] != -1)
              break;
          }
          v31 += 40;
        }
        v34 = v47;
        if (v47 != i)
        {
          v36 = 0;
          do
          {
            v37 = &v30[v36 + v31];
            if (*((_QWORD *)v37 + 6) != -1)
            {
              v38 = *((_QWORD *)v37 + 7);
              if (v38 != -1)
              {
                v39 = &v30[v36 + v31];
                v40 = *((_QWORD *)v39 + 8);
                if (v40 != -1)
                {
                  v41 = *(_QWORD *)(v33 + 24);
                  v42 = v41 + 1;
                  *((_QWORD *)v37 + 6) = v41 + 1;
                  v43 = *((_QWORD *)v39 + 9);
                  if (v43)
                    v42 = (v43 + v41) / v43 * v43;
                  v33 = (uint64_t)&v30[v31 + 40 + v36];
                  *((_QWORD *)v37 + 7) = v42;
                  *((_QWORD *)v39 + 8) = v40 - v38 + v42;
                }
              }
            }
            v36 += 40;
          }
          while (40 * v34 - v31 - 40 != v36);
        }
        *a3 = (unint64_t *)(a3 + 2);
        a3[1] = (unint64_t *)0xA00000000;
        if (v34 >= 0xB)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v34, 40);
          v35 = *((_DWORD *)a3 + 2);
          goto LABEL_78;
        }
        if ((_DWORD)v34)
        {
          v35 = 0;
LABEL_78:
          memcpy(&(*a3)[5 * v35], v30, 40 * v34);
          v44 = *((_DWORD *)a3 + 2);
        }
        else
        {
          v44 = 0;
        }
        *((_DWORD *)a3 + 2) = v44 + v34;
        if (v46 != &v48)
          free(v46);
        if (v51 != &v53)
          free(v51);
        llvm::deallocate_buffer(v48, (void *)(40 * v50));
      }
    }
    v25 = (unint64_t *)(a3 + 2);
    *a3 = (unint64_t *)(a3 + 2);
    a3[1] = (unint64_t *)0xA00000000;
    if (a3 == (unint64_t **)a2 || !(_DWORD)v7)
      return;
    if (v7 < 0xB)
    {
      v26 = v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v25, v7, 40);
      v26 = *(unsigned int *)(a2 + 8);
      if (!(_DWORD)v26)
      {
LABEL_93:
        *((_DWORD *)a3 + 2) = v7;
        return;
      }
      v25 = *a3;
      v10 = *(unint64_t **)a2;
    }
    memcpy(v25, v10, 40 * v26);
    goto LABEL_93;
  }
  v13 = 40 * v7;
  v14 = v10 + 3;
  while (1)
  {
    v15 = *(v14 - 2) == -1 || *(v14 - 1) == -1;
    if (v15 || *v14 == -1)
      break;
    v14 += 5;
    v13 -= 40;
    if (!v13)
      goto LABEL_21;
  }
  v11 = (unint64_t *)(a3 + 2);
  *a3 = (unint64_t *)(a3 + 2);
  a3[1] = (unint64_t *)0xA00000000;
  if (a3 != a1 && (_DWORD)v6)
  {
    if (v6 < 0xB)
    {
      v23 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v6, 40);
      v23 = *((_DWORD *)a1 + 2);
      if (!v23)
      {
LABEL_90:
        *((_DWORD *)a3 + 2) = v6;
        return;
      }
      v11 = *a3;
    }
    v9 = (char *)*a1;
    v45 = 40 * v23;
LABEL_89:
    memcpy(v11, v9, v45);
    goto LABEL_90;
  }
}

llvm::raw_ostream *mlir::dataflow::OffsetLatticeValue::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = (uint64_t)this;
  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v4)
  {
    this = llvm::raw_ostream::write(a2, "{", 1uLL);
  }
  else
  {
    *v4 = 123;
    ++*((_QWORD *)a2 + 4);
  }
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == 1)
  {
    this = mlir::detail::operator<<(a2, *(unint64_t **)v3);
  }
  else if ((_DWORD)v5)
  {
    v6 = *(unint64_t **)v3;
    v7 = 40 * v5;
    do
    {
      v9 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 2)
      {
        *(_BYTE *)(v9 + 2) = 32;
        *(_WORD *)v9 = 11552;
        *((_QWORD *)a2 + 4) += 3;
        v8 = a2;
      }
      else
      {
        v8 = llvm::raw_ostream::write(a2, " - ", 3uLL);
      }
      this = mlir::detail::operator<<(v8, v6);
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  v10 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v10)
    return llvm::raw_ostream::write(a2, "}", 1uLL);
  *v10 = 125;
  ++*((_QWORD *)a2 + 4);
  return this;
}

llvm::raw_ostream *mlir::detail::operator<<(llvm::raw_ostream *this, unint64_t *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::raw_ostream *v10;
  void *v11;
  _DWORD *v12;
  llvm::raw_ostream *v13;
  unint64_t v15;

  v2 = this;
  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  if (*a2)
  {
    if (v4 == v3)
    {
      this = llvm::raw_ostream::write(this, "[", 1uLL);
    }
    else
    {
      *(_BYTE *)v3 = 91;
      ++*((_QWORD *)this + 4);
    }
    v6 = llvm::raw_ostream::operator<<(this, a2[1]);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if (*((_BYTE **)v6 + 3) == v7)
    {
      v6 = llvm::raw_ostream::write(v6, "/", 1uLL);
    }
    else
    {
      *v7 = 47;
      ++*((_QWORD *)v6 + 4);
    }
    v8 = llvm::raw_ostream::operator<<(v6, a2[2]);
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 8236;
      *((_QWORD *)v8 + 4) += 2;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
    }
    v10 = llvm::raw_ostream::operator<<(v8, a2[3]);
    v11 = (void *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 0xDuLL)
    {
      qmemcpy(v11, "] provenance: ", 14);
      *((_QWORD *)v10 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v10, "] provenance: ", 0xEuLL);
    }
    if ((~*(_DWORD *)(*a2 + 8) & 7) != 0)
    {
      v15 = *a2;
      mlir::Value::print((mlir::Value *)&v15, v2);
    }
    else
    {
      v12 = (_DWORD *)*((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 3) - (_QWORD)v12 > 3uLL)
      {
        *v12 = 1735549221;
        *((_QWORD *)v2 + 4) += 4;
        v13 = v2;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v2, "%arg", 4uLL);
      }
      llvm::raw_ostream::operator<<(v13, *(unsigned int *)(*a2 + 24));
    }
  }
  else if ((unint64_t)(v4 - v3) > 0xA)
  {
    *(_DWORD *)(v3 + 7) = 1046834799;
    *(_QWORD *)v3 = *(_QWORD *)"<tombstone>";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, "<tombstone>", 0xBuLL);
  }
  return v2;
}

uint64_t mlir::dataflow::TensorAllocAnalysis::TensorAllocAnalysis(uint64_t a1, mlir::DataFlowSolver *a2, mlir::StringAttr *a3, const void *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v35;
  uint64_t v36;
  __int16 v37;

  v18 = mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::AbstractSparseForwardDataFlowAnalysis((mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *)a1, a2);
  v19 = 0;
  *(_QWORD *)v18 = off_1E0E4EE18;
  v20 = (char *)v18 + 80;
  *((_QWORD *)v18 + 8) = (char *)v18 + 80;
  v21 = (uint64_t)v18 + 64;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0x300000000;
  if ((unint64_t)(8 * a5) >= 0x19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v21, v20, (8 * a5) >> 3, 8);
    v19 = *(_DWORD *)(a1 + 72);
  }
  if (a5)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 64) + 8 * v19), a4, 8 * a5);
    v19 = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(a1 + 104) = a1 + 120;
  v22 = (uint64_t **)(a1 + 104);
  *(_DWORD *)(a1 + 72) = v19 + a5;
  *(_QWORD *)(a1 + 112) = 0x300000000;
  v37 = 261;
  v35 = a9;
  v36 = a10;
  *(_QWORD *)(a1 + 144) = mlir::StringAttr::get(a3, (mlir::MLIRContext *)&v35);
  *(_QWORD *)(a1 + 152) = a11;
  *(_BYTE *)(a1 + 160) = a12;
  *(_BYTE *)(a1 + 161) = a13;
  v23 = *(unsigned int *)(a1 + 72);
  v24 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v23 != (_DWORD)v24)
  {
    if (v23 >= v24)
    {
      v25 = *(unsigned int *)(a1 + 112);
      v26 = *(_DWORD *)(a1 + 112);
      if (*(_DWORD *)(a1 + 116) < v23)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, (void *)(a1 + 120), *(unsigned int *)(a1 + 72), 8);
        v25 = *(unsigned int *)(a1 + 112);
        v26 = *(_DWORD *)(a1 + 112);
      }
      bzero(&(*v22)[v25], 8 * (v23 - v24));
      LODWORD(v23) = v26 + v23 - v24;
    }
    *(_DWORD *)(a1 + 112) = v23;
  }
  if (a7)
  {
    v27 = *v22;
    v28 = 24 * a7;
    do
    {
      v29 = *((char *)a6 + 23);
      v30 = v29 < 0;
      v31 = (uint64_t *)*a6;
      if (v29 >= 0)
        v31 = a6;
      v32 = *((unsigned __int8 *)a6 + 23);
      if (v30)
        v32 = a6[1];
      v37 = 261;
      v35 = v31;
      v36 = v32;
      *v27++ = mlir::StringAttr::get(a3, (mlir::MLIRContext *)&v35);
      a6 += 3;
      v28 -= 24;
    }
    while (v28);
  }
  mlir::detail::AllocRange::minimumAlignment = *(_QWORD *)(a1 + 152);
  mlir::detail::AllocRange::allocBlockArgs = a13;
  return a1;
}

{
  return mlir::dataflow::TensorAllocAnalysis::TensorAllocAnalysis(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void mlir::dataflow::TensorAllocAnalysis::visitOperation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t OperandRange;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _BOOL4 isDeadAfter;
  BOOL v32;
  _DWORD **v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *NextResultAtOffset;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t InterfaceFor;
  void *v52[2];
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[52];

  v58[50] = *MEMORY[0x1E0C80C00];
  v12 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v12))
    mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates((uint64_t)a1, a5, a6);
  if (!a4)
    mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates((uint64_t)a1, a5, a6);
  v56 = v58;
  v57 = 0xA00000000;
  v48 = a5;
  v49 = a6;
  if (mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(a2))
  {
    v50 = a2;
    InterfaceFor = mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(a2);
    if (a2)
    {
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50);
      v15 = OperandRange;
      v16 = (_QWORD *)(a3 + 8 * OperandRange);
      if (v14 == OperandRange)
      {
        v17 = 0;
      }
      else
      {
        v18 = a3 + 8 * OperandRange;
        while (2)
        {
          v19 = *(unsigned int *)(*(_QWORD *)v18 + 176);
          v17 = *(_DWORD *)(*(_QWORD *)v18 + 176) == 0;
          if ((_DWORD)v19)
          {
            v20 = 40 * v19;
            v21 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 168) + 24);
            do
            {
              if (*(v21 - 2) == -1 || *(v21 - 1) == -1 || *v21 == -1)
              {
                v17 = 1;
                goto LABEL_25;
              }
              v21 += 5;
              v20 -= 40;
            }
            while (v20);
            v18 += 8;
            if (v18 != a3 + 8 * v14)
              continue;
          }
          break;
        }
      }
LABEL_25:
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
        v24 = *(_QWORD *)(a2 + 72);
      else
        v24 = 0;
      v25 = v14 - OperandRange;
      v46 = v14;
      if (v14 == OperandRange)
      {
        v47 = 0;
        v26 = 0;
      }
      else
      {
        v27 = ~OperandRange + v14;
        v28 = (void **)(v24 + 32 * OperandRange + 24);
        do
        {
          v29 = *v28;
          v28 += 4;
          isDeadAfter = mlir::Liveness::isDeadAfter(a1[2], v29, v50);
          v32 = v27-- != 0;
        }
        while (isDeadAfter && v32);
        v26 = 0;
        v47 = !isDeadAfter;
        v33 = (_DWORD **)(v24 + 32 * v15 + 24);
        do
        {
          v34 = *v33;
          v33 += 4;
          mlir::detail::AllocRange::getRangeForValue(v34, v26 + 1, (uint64_t)v52);
          if (v54 != -1)
            v26 = v54;
          --v25;
        }
        while (v25);
      }
      v35 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v35)
        v36 = a2 - 16;
      else
        v36 = 0;
      if ((_DWORD)v35)
      {
        v37 = 0;
        v38 = 0;
        while (1)
        {
          NextResultAtOffset = (_DWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v36, v38);
          mlir::detail::AllocRange::getRangeForValue(NextResultAtOffset, v37, (uint64_t)v52);
          if (v55)
            v37 = (v37 + v55 - 1) / v55 * v55;
          if ((uint64_t)(v54 - v53 + v37) > v26)
            break;
          v37 = v54 + 1;
          if (v35 == ++v38)
            goto LABEL_48;
        }
      }
      else
      {
LABEL_48:
        if (((v17 | v47) & 1) == 0
          && mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v50)
          && v46 != v15)
        {
          v40 = 8 * v46 - 8 * v15;
          do
          {
            mlir::dataflow::OffsetLatticeValue::join((unint64_t **)&v56, *v16 + 168, (unint64_t **)v52);
            llvm::SmallVectorImpl<mlir::detail::AllocRange>::operator=((uint64_t)&v56, (uint64_t)v52);
            if (v52[0] != &v53)
              free(v52[0]);
            ++v16;
            v40 -= 8;
          }
          while (v40);
        }
      }
    }
  }
  else
  {
    v50 = 0;
    InterfaceFor = 0;
  }
  if (!(_DWORD)v57)
    mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates((uint64_t)a1, v48, v49);
  v41 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v41)
    v42 = a2 - 16;
  else
    v42 = 0;
  if ((_DWORD)v41)
  {
    for (i = 0; i != v41; ++i)
    {
      v44 = mlir::detail::OpResultImpl::getNextResultAtOffset(v42, i);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 48))(a1, v44);
      mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::join(v45, (uint64_t)&v56);
    }
  }
  if (v56 != v58)
    free(v56);
}

uint64_t mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::join(uint64_t a1, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *__src;
  unsigned int v12;
  _QWORD v13[51];

  v13[50] = *MEMORY[0x1E0C80C00];
  v3 = (void **)(a1 + 168);
  mlir::dataflow::OffsetLatticeValue::join((unint64_t **)(a1 + 168), a2, (unint64_t **)&__src);
  v4 = v12;
  v5 = *(unsigned int *)(a1 + 176);
  if (v12 == (_DWORD)v5)
  {
    if (!v12)
    {
LABEL_6:
      v9 = 0;
      goto LABEL_20;
    }
    v6 = __src;
    v7 = *v3;
    v8 = 40 * v12;
    while (*v6 == *v7)
    {
      v6 += 5;
      v7 += 5;
      v8 -= 40;
      if (!v8)
        goto LABEL_6;
    }
  }
  if (v3 != &__src)
  {
    if (v5 >= v12)
    {
      if (v12)
        memmove(*v3, __src, 40 * v12);
      goto LABEL_18;
    }
    if (*(_DWORD *)(a1 + 180) >= v12)
    {
      if ((_DWORD)v5)
      {
        memmove(*v3, __src, 40 * v5);
        goto LABEL_16;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 176) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3, (void *)(a1 + 184), v4, 40);
    }
    v5 = 0;
LABEL_16:
    if (v5 != v12)
      memcpy((char *)*v3 + 40 * v5, (char *)__src + 40 * v5, 40 * v12 - 40 * v5);
LABEL_18:
    *(_DWORD *)(a1 + 176) = v4;
  }
  v9 = 1;
LABEL_20:
  if (__src != v13)
    free(__src);
  return v9;
}

{
  return mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::join(a1, a2 + 168);
}

void mlir::dataflow::TensorAllocAnalysis::buildAllocInfoMap(mlir::dataflow::TensorAllocAnalysis *this, mlir::Operation *a2)
{
  uint64_t v3;
  mlir::GenericProgramPoint **v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t InherentAttr;
  char v19;
  uint64_t v20;
  char *Value;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  char *v32;
  mlir::dataflow::TensorAllocAnalysis *v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  mlir::GenericProgramPoint *v52;
  mlir::Operation *v53;
  __n128 v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t **v60;
  unsigned int v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  unint64_t v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t Loc;
  const char *v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t *v91;
  int64x2_t v92;
  int64x2_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  BOOL v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  BOOL v106;
  int v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  BOOL v112;
  char *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  __int128 v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  char *v131;
  BOOL v132;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  BOOL v149;
  __n128 *v150;
  char *v151;
  __n128 *v152;
  __n128 v153;
  int64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  void *v159;
  BOOL v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t DefiningOp;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _DWORD *NextResultAtOffset;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void **p_b;
  unint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  int v191;
  char *v192;
  uint64_t *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  char *v199;
  uint64_t v200;
  unsigned int v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  BOOL v206;
  mlir::Operation *v208;
  _QWORD *v209;
  __int128 v211;
  __int128 v212;
  mlir::Operation *v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  void *v228;
  mlir::GenericProgramPoint *v229;
  uint64_t **v230;
  mlir::GenericProgramPoint **v231;
  mlir::detail::OpResultImpl *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v238;
  uint64_t v239;
  mlir::Operation *v240;
  char *v241;
  uint64_t v242;
  char *v243;
  mlir::detail::AsmStateImpl *v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  void *v251;
  void *v252;
  void *v253;
  uint64_t v254;
  _QWORD v255[375];
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  _BYTE v259[24];
  void *v260;
  uint64_t v261;
  _BYTE v262[32];
  __int128 v263;
  __int128 v264;
  unint64_t *v265;
  _QWORD *v266;
  unint64_t v267;
  void *__b;
  unint64_t *v269;
  _BYTE v270[32];
  void *v271;
  __int128 v272;
  unint64_t v273;
  unsigned int v274;
  unsigned int v275;
  _QWORD v276[24];

  v276[21] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)((((unint64_t)a2
                   + 16 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)a2 + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)a2 + 10)
                 + 8);
  if (v3)
    v4 = (mlir::GenericProgramPoint **)(v3 - 8);
  else
    v4 = 0;
  v230 = (uint64_t **)((char *)this + 64);
  if (*((_DWORD *)this + 18))
  {
    v5 = 0;
    v6 = (_QWORD *)*((_QWORD *)this + 8);
    v7 = (char *)this + 104;
    v243 = (char *)a2 + 56;
    do
    {
      if (*v6 == -3)
      {
        mlir::Block::getTerminator(v4);
        if ((*(_BYTE *)(v13 + 46) & 0x80) != 0 && *(_DWORD *)(v13 + 68))
        {
          v14 = *((_QWORD *)this + 13);
          v15 = v14 + 8 * v5;
          v16 = *((unsigned int *)this + 28);
          v17 = v14 + 8 * v16;
          if (v17 != v15 + 8)
          {
            memmove((void *)v15, (const void *)(v15 + 8), v17 - (v15 + 8));
            LODWORD(v16) = *((_DWORD *)this + 28);
            v14 = *((_QWORD *)this + 13);
          }
          *((_DWORD *)this + 28) = v16 - 1;
          if (*((_BYTE *)a2 + 47)
            && (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"output_names", 12), v19))
          {
            if (InherentAttr)
            {
LABEL_22:
              if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
                v20 = InherentAttr;
              else
                v20 = 0;
              goto LABEL_27;
            }
          }
          else
          {
            InherentAttr = mlir::DictionaryAttr::get((uint64_t)v243, "output_names", 0xCuLL);
            if (InherentAttr)
              goto LABEL_22;
          }
          v20 = 0;
LABEL_27:
          *(_QWORD *)&v263 = v20;
          Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v263);
          v22 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v263);
          llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)v7, v14 + 8 * v5, Value, (char *)(v22 + 8 * v23));
          v252 = &v254;
          v253 = (void *)0x500000000;
          mlir::Block::getTerminator(v4);
          if ((*(_BYTE *)(v24 + 46) & 0x80) != 0 && (v25 = *(unsigned int *)(v24 + 68), (_DWORD)v25))
          {
            v26 = (_DWORD **)(*(_QWORD *)(v24 + 72) + 24);
            do
            {
              mlir::detail::AllocRange::getRangeForValue(*v26, 0, (uint64_t)&v271);
              v27 = v273;
              v28 = v272;
              v29 = v253;
              if (v253 >= (unint64_t)HIDWORD(v253))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v252, &v254, v253 + 1, 8);
                v29 = v253;
              }
              *((_QWORD *)v252 + v29) = v27 - v28 + 1;
              v30 = (_DWORD)v253 + 1;
              LODWORD(v253) = (_DWORD)v253 + 1;
              v26 += 4;
              --v25;
            }
            while (v25);
          }
          else
          {
            v30 = v253;
          }
          v31 = (char *)v252 + 8 * v30;
          v32 = (char *)v252 + 8;
          *v6 = *(_QWORD *)v252;
          v6 = (_QWORD *)llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)v230, (uint64_t)(v6 + 1), v32, v31);
          if (v252 != &v254)
            free(v252);
        }
      }
      else if (*v6 == -2)
      {
        mlir::Block::getTerminator(v4);
        if ((*(_BYTE *)(v8 + 46) & 0x80) != 0 && (v9 = *(unsigned int *)(v8 + 68), (_DWORD)v9))
        {
          v10 = 0;
          v11 = (_DWORD **)(*(_QWORD *)(v8 + 72) + 24);
          do
          {
            v12 = *v11;
            v11 += 4;
            mlir::detail::AllocRange::getRangeForValue(v12, v10, (uint64_t)&v252);
            v10 = v10 + v255[0] - (_QWORD)v253 + 1;
            --v9;
          }
          while (v9);
          *v6 = v10;
        }
        else
        {
          *v6 = 0;
        }
      }
      ++v5;
      ++v6;
    }
    while (v6 != (_QWORD *)(*((_QWORD *)this + 8) + 8 * *((unsigned int *)this + 18)));
  }
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v252);
  mlir::AsmState::AsmState(&v244, a2, &v252, 0, 0);
  v33 = this;
  v34 = (uint64_t *)*((_QWORD *)this + 8);
  v35 = *((unsigned int *)this + 18);
  LOBYTE(v252) = *((_BYTE *)this + 160);
  v253 = v255;
  v254 = 0x300000000;
  if ((_DWORD)v35)
  {
    if (v35 < 4)
    {
      v42 = 0;
      v36 = v255;
    }
    else
    {
      v271 = 0;
      v36 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v253, v255, v35, 1000, (unint64_t *)&v271);
      v37 = (char *)v253;
      if ((_DWORD)v254)
      {
        v38 = 0;
        v39 = (char *)v253 + 1000 * v254;
        do
        {
          v40 = &v36[v38];
          v41 = &v37[v38 * 8];
          *v40 = *(_QWORD *)&v37[v38 * 8];
          v36[v38 + 1] = &v36[v38 + 3];
          v40[2] = 0xA00000000;
          if (*(_DWORD *)&v37[v38 * 8 + 16])
            llvm::SmallVectorImpl<mlir::detail::AllocRange>::operator=((uint64_t)&v36[v38 + 1], (uint64_t)(v41 + 8));
          v40[53] = v40 + 55;
          v40[54] = 0xA00000000;
          if (*((_DWORD *)v41 + 108))
            llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::operator=((uint64_t)(v40 + 53), (uint64_t *)&v37[v38 * 8 + 424]);
          v38 += 125;
        }
        while (v41 + 1000 != v39);
        v37 = (char *)v253;
        v43 = v254;
      }
      else
      {
        v43 = 0;
      }
      v44 = (int)v271;
      if (v253 != v255)
        free(v253);
      v253 = v36;
      HIDWORD(v254) = v44;
      v42 = v254;
      v33 = this;
      if (v254 == v35)
        goto LABEL_55;
    }
    v45 = 1000 * v42;
    v46 = 1000 * v35;
    do
    {
      v47 = &v36[(unint64_t)v45 / 8];
      bzero(&v36[(unint64_t)v45 / 8 + 3], 0x3D0uLL);
      *v47 = -1;
      v47[1] = &v36[(unint64_t)v45 / 8 + 3];
      v47[2] = 0xA00000000;
      v47[53] = v47 + 55;
      v46 -= 1000;
      v36 += 125;
      *((_DWORD *)v47 + 109) = 10;
    }
    while (v45 != v46);
    v36 = v253;
    v33 = this;
LABEL_55:
    LODWORD(v254) = v35;
    v48 = 1000 * v35;
    do
    {
      v49 = *v34++;
      v50 = v49 - 1;
      if (v49 == -1)
        v51 = -1;
      else
        v51 = v50;
      *v36 = v51;
      v36 += 125;
      v48 -= 1000;
    }
    while (v48);
  }
  v52 = v4[4];
  v229 = (mlir::GenericProgramPoint *)(v4 + 4);
  if (v52 == (mlir::GenericProgramPoint *)(v4 + 4))
    goto LABEL_371;
  v233 = (uint64_t)v33 + 24;
  v228 = (char *)v33 + 80;
  while (2)
  {
    v231 = (mlir::GenericProgramPoint **)v52;
    mlir::GenericProgramPoint::~GenericProgramPoint(v52);
    v240 = v53;
    if ((*((_BYTE *)v53 + 46) & 0x80) == 0)
      goto LABEL_291;
    v238 = *((unsigned int *)v53 + 17);
    if (!(_DWORD)v238)
      goto LABEL_218;
    v55 = 0;
    v235 = *((_QWORD *)v53 + 9);
    do
    {
      v56 = *(void **)(v235 + 32 * v55 + 24);
      v57 = (*(uint64_t (**)(mlir::dataflow::TensorAllocAnalysis *, void *))(*(_QWORD *)v33 + 48))(v33, v56);
      v58 = *(unsigned int *)(v57 + 176);
      if (!(_DWORD)v58)
        goto LABEL_66;
      v59 = v57;
      v251 = v56;
      __b = v270;
      HIDWORD(v269) = 4;
      if (v58 <= 4)
      {
        memset(v270, 255, 8 * v58);
        LODWORD(v269) = v58;
        v60 = (uint64_t **)v270;
        v62 = *(_QWORD **)(v59 + 168);
        v63 = &v62[5 * v58];
      }
      else
      {
        LODWORD(v269) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v270, v58, 8);
        v60 = (uint64_t **)__b;
        memset(__b, 255, 8 * v58);
        v61 = *(_DWORD *)(v59 + 176);
        LODWORD(v269) = v58;
        if (!v61)
        {
          v74 = 1;
          goto LABEL_93;
        }
        v62 = *(_QWORD **)(v59 + 168);
        v63 = &v62[5 * v61];
      }
      v64 = 0;
      do
      {
        if (v62[1] != -1 && v62[2] != -1 && v62[3] != -1 && (_DWORD)v254)
        {
          v65 = 0;
          v66 = v253;
          while (1)
          {
            v67 = v66[1];
            v68 = *((unsigned int *)v66 + 4);
            if ((_DWORD)v68)
            {
              v69 = 40 * v68;
              v70 = (_QWORD *)v66[1];
              while (*v70 != *v62)
              {
                v70 += 5;
                v69 -= 40;
                if (!v69)
                {
                  v70 = (_QWORD *)(v67 + 40 * v68);
                  break;
                }
              }
            }
            else
            {
              v70 = (_QWORD *)v66[1];
            }
            v71 = (char *)v70 - v67;
            v72 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v70 - v67) >> 3);
            v73 = v71 == (char *)-40 || v72 == v68;
            if (!v73)
              break;
            ++v65;
            v66 += 125;
            if (v66 == (_QWORD *)((char *)v253 + 1000 * v254))
              goto LABEL_73;
          }
          v271 = v251;
          llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::insert(v66[53] + 56 * v72, (unint64_t *)&v271);
          v60 = (uint64_t **)__b;
          *((_QWORD *)__b + v64) = v65;
        }
LABEL_73:
        ++v64;
        v62 += 5;
      }
      while (v62 != v63);
      v58 = v269;
      v74 = (int)v269;
      v33 = this;
LABEL_93:
      *(_QWORD *)&v263 = &v264;
      *((_QWORD *)&v263 + 1) = 0x200000000;
      v266 = 0;
      v267 = 0;
      v265 = (unint64_t *)&v266;
      if (!v74)
        goto LABEL_148;
      v75 = 8 * v58;
      do
      {
        llvm::SmallSet<long long,2u,std::less<long long>>::insert((uint64_t)&v263, v60++, (uint64_t)&v271);
        v75 -= 8;
      }
      while (v75);
      if (!v267)
      {
        if (DWORD2(v263) > 2)
        {
LABEL_117:
          Loc = mlir::Value::getLoc((mlir::Value *)&v251);
          v87 = "Cannot pack an OffsetLatticeValue that contains ranges that were already allocated to different buffers."
                " This is an invalid program state.";
          goto LABEL_124;
        }
        if (DWORD2(v263) == 1)
        {
          v88 = (_QWORD *)v263;
          goto LABEL_128;
        }
        if (DWORD2(v263) == 2)
        {
          v79 = (unint64_t *)v263;
          if (*(_QWORD *)v263 != -1 && *(_QWORD *)(v263 + 8) != -1)
            goto LABEL_123;
          v80 = (unint64_t *)(v263 + 16);
          while (1)
          {
LABEL_133:
            v90 = v79 + 4;
            if (!v267)
              v90 = v79;
            v81 = *v90;
            if (v81 != -1)
              break;
            if (v267)
            {
              v91 = (unint64_t *)v79[1];
              if (v91)
              {
                do
                {
                  v89 = v91;
                  v91 = (unint64_t *)*v91;
                }
                while (v91);
              }
              else
              {
                do
                {
                  v89 = (unint64_t *)v79[2];
                  v73 = *v89 == (_QWORD)v79;
                  v79 = v89;
                }
                while (!v73);
              }
            }
            else
            {
              v89 = v79 + 1;
            }
            v79 = v89;
            if (v89 == v80)
              goto LABEL_107;
          }
LABEL_108:
          v82 = v269;
          if ((_DWORD)v269)
          {
            if (v269 < 4)
            {
              v83 = (unint64_t *)__b;
              v84 = v269;
LABEL_146:
              v95 = v84 + 1;
              do
              {
                *v83++ = v81;
                --v95;
              }
              while (v95 > 1);
              goto LABEL_148;
            }
            v83 = (unint64_t *)((char *)__b + 8 * (v269 & 0xFFFFFFFC));
            v84 = v269 & 3;
            v92 = vdupq_n_s64(v81);
            v93 = (int64x2_t *)((char *)__b + 16);
            v94 = v269 & 0xFFFFFFFC;
            do
            {
              v93[-1] = v92;
              *v93 = v92;
              v93 += 2;
              v94 -= 4;
            }
            while (v94);
            if ((v82 & 0xFFFFFFFC) != v82)
              goto LABEL_146;
          }
        }
LABEL_148:
        v96 = *(_QWORD *)__b;
        v97 = *(unsigned int *)(v59 + 176);
        if ((_DWORD)v97)
        {
          v98 = 40 * v97;
          v99 = *(_QWORD **)(v59 + 168);
          while (1)
          {
            v100 = v99[1] == -1 || v99[2] == -1;
            if (!v100 && v99[3] != -1)
              break;
            v99 += 5;
            v98 -= 40;
            if (!v98)
            {
              v101 = 0;
              v271 = (char *)&v272 + 8;
              DWORD1(v272) = 4;
              goto LABEL_183;
            }
          }
        }
        else
        {
          v99 = *(_QWORD **)(v59 + 168);
        }
        v102 = *(_QWORD *)(v59 + 168) + 40 * v97;
        v271 = (char *)&v272 + 8;
        *(_QWORD *)&v272 = 0x400000000;
        if (v99 == (_QWORD *)v102)
        {
          v101 = 0;
        }
        else
        {
          v103 = 0;
          v104 = v99;
LABEL_161:
          v105 = v103++;
          while (1)
          {
            v104 += 5;
            if (v104 == (_QWORD *)v102)
              break;
            v106 = v104[1] == -1 || v104[2] == -1;
            if (!v106 && v104[3] != -1)
            {
              if (v104 != (_QWORD *)v102)
                goto LABEL_161;
              break;
            }
          }
          if (v105 < 4)
          {
            v107 = 0;
            v108 = (char *)&v272 + 8;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (char *)&v272 + 8, v103, 40);
            v107 = v272;
            v108 = (char *)v271;
          }
          v109 = &v108[40 * v107];
LABEL_174:
          v110 = *(_OWORD *)v99;
          v111 = *((_OWORD *)v99 + 1);
          *((_QWORD *)v109 + 4) = v99[4];
          *(_OWORD *)v109 = v110;
          *((_OWORD *)v109 + 1) = v111;
          while (1)
          {
            v99 += 5;
            if (v99 == (_QWORD *)v102)
              break;
            v112 = v99[1] == -1 || v99[2] == -1;
            if (!v112 && v99[3] != -1)
            {
              v109 += 40;
              if (v99 != (_QWORD *)v102)
                goto LABEL_174;
              break;
            }
          }
          v101 = v272 + v103;
        }
LABEL_183:
        LODWORD(v272) = v101;
        v260 = v262;
        v261 = 0x400000000;
        v113 = (char *)v253;
        if (v96 == -1)
        {
          if ((_DWORD)v254)
          {
            v114 = 1000 * v254;
            while (1)
            {
              LODWORD(v261) = 0;
              v113 += 1000;
              v114 -= 1000;
              if (!v114)
                goto LABEL_190;
            }
          }
          else
          {
LABEL_190:
            v113 = 0;
          }
        }
        else
        {
          v113 = (char *)v253 + 1000 * v96;
          {
LABEL_209:
            if (v260 != v262)
              free(v260);
            v33 = this;
            if (v271 != (char *)&v272 + 8)
              free(v271);
            goto LABEL_213;
          }
        }
        if (*(_DWORD *)(v59 + 176))
          v115 = (_DWORD)v261 == 0;
        else
          v115 = 1;
        if (!v115)
        {
          v116 = *(_QWORD *)(v59 + 168);
          v117 = *(_QWORD *)v260;
          v118 = *(_QWORD *)(v116 + 32);
          v119 = *(_OWORD *)(v116 + 16);
          *(_QWORD *)&v248 = *(_QWORD *)v116;
          v249 = v119;
          v250 = v118;
          *((_QWORD *)&v248 + 1) = v117;
          if (v118)
            v117 = (v117 + v118 - 1) / v118 * v118;
          *(_QWORD *)&v249 = v117;
          *((_QWORD *)&v249 + 1) = *((_QWORD *)&v119 + 1) - v119 + v117;
          v256 = 0uLL;
          LODWORD(v257) = 0;
          *((_QWORD *)&v257 + 1) = v259;
          v258 = 0x200000000;
          llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::insert((uint64_t)&v256, (unint64_t *)&v248);
          llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::insert((uint64_t)&v256, (unint64_t *)&v251);
          v247 = v250;
          v245 = v248;
          v246 = v249;
          v120 = *((_QWORD *)v113 + 1);
          v121 = *((unsigned int *)v113 + 4);
          if (!(_DWORD)v121)
          {
            v122 = *((_QWORD *)v113 + 1);
LABEL_206:
            v126 = v122 - v120;
            llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::insert_one_impl<llvm::SmallSetVector<mlir::Value,2u> const&>((uint64_t)(v113 + 424), *((_QWORD *)v113 + 53) - 0x3333333333333328 * ((v122 - v120) >> 3), (unint64_t)&v256);
            llvm::SmallVectorImpl<mlir::detail::AllocRange>::insert_one_impl<mlir::detail::AllocRange const&>((uint64_t)(v113 + 8), *((_QWORD *)v113 + 1) + v126, (unint64_t)&v245);
            if (*((_BYTE **)&v257 + 1) != v259)
              free(*((void **)&v257 + 1));
            llvm::deallocate_buffer((llvm *)v256, (void *)(8 * v257));
          }
          v122 = *((_QWORD *)v113 + 1);
          while (2)
          {
            v123 = v121 >> 1;
            v124 = v122 + 40 * (v121 >> 1);
            v125 = *(_QWORD *)(v124 + 8);
            if (*((_QWORD *)&v245 + 1) == v125)
            {
              if (*((_QWORD *)&v246 + 1) - *((_QWORD *)&v245 + 1) + 1 >= *(_QWORD *)(v122 + 40 * v123 + 24)
                                                                          - *((_QWORD *)&v245 + 1)
                                                                          + 1)
              {
LABEL_204:
                v122 = v124 + 40;
                v123 = v121 + ~v123;
              }
            }
            else if (*((uint64_t *)&v245 + 1) >= v125)
            {
              goto LABEL_204;
            }
            v121 = v123;
            if (!v123)
              goto LABEL_206;
            continue;
          }
        }
        goto LABEL_209;
      }
      if (v267 > 2)
        goto LABEL_117;
      if (v267 == 2)
      {
        v76 = v266;
        if (v266)
        {
          v77 = v266;
          while (1)
          {
            v78 = v77[4];
            if (v78 < 0)
            {
              if (v78 == -1)
              {
                v79 = v265;
                v80 = (unint64_t *)&v266;
                if (v265 != (unint64_t *)&v266)
                  goto LABEL_133;
LABEL_107:
                v81 = -1;
                goto LABEL_108;
              }
              ++v77;
            }
            v77 = (_QWORD *)*v77;
            if (!v77)
            {
              while (1)
              {
                v85 = v76[4];
                if (v85 < 0)
                {
                  if (v85 == -1)
                    goto LABEL_148;
                  ++v76;
                }
                v76 = (_QWORD *)*v76;
                if (!v76)
                  goto LABEL_123;
              }
            }
          }
        }
LABEL_123:
        Loc = mlir::Value::getLoc((mlir::Value *)&v251);
        v87 = "Operands were allocated into multiple buffers. This is an invalid program state.";
LABEL_124:
        *(_QWORD *)&v256 = v87;
        LOWORD(v258) = 259;
        mlir::emitError(Loc, (uint64_t)&v256, (uint64_t)&v271);
        mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v271);
        if (v271)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v271);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v272);
        goto LABEL_213;
      }
      v88 = v265 + 4;
LABEL_128:
      if (*v88 == -1)
        goto LABEL_148;
LABEL_213:
      std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v265, v266);
      if ((__int128 *)v263 != &v264)
        free((void *)v263);
      if (__b != v270)
        free(__b);
LABEL_66:
      ++v55;
    }
    while (v55 != v238);
    v53 = v240;
    if ((*((_BYTE *)v240 + 46) & 0x80) != 0)
    {
LABEL_218:
      v236 = *((unsigned int *)v53 + 17);
      if ((_DWORD)v236)
      {
        v127 = 0;
        v234 = *((_QWORD *)v53 + 9);
        do
        {
          v239 = v127;
          v129 = *(_DWORD **)(v234 + 32 * v127 + 24);
          v260 = v129;
          if ((_DWORD)v254)
          {
            v130 = 0;
            v131 = (char *)v253;
            v241 = (char *)v253 + 1000 * v254;
            while (1)
            {
              v271 = (char *)&v272 + 8;
              *(_QWORD *)&v272 = 0x400000000;
              v134 = *((_DWORD *)v131 + 108);
              if (v134)
              {
                v135 = 0;
                v136 = 0;
                v137 = *((_QWORD *)v131 + 53);
                v138 = v137 + 56 * v134;
                do
                {
                  v142 = *(_QWORD *)(v137 + 24);
                  v143 = *(unsigned int *)(v137 + 32);
                  if ((_DWORD)v143)
                  {
                    v144 = 8 * v143;
                    v145 = *(_QWORD **)(v137 + 24);
                    while ((_DWORD *)*v145 != v129)
                    {
                      ++v145;
                      v144 -= 8;
                      if (!v144)
                      {
                        v145 = (_QWORD *)(v142 + 8 * v143);
                        break;
                      }
                    }
                  }
                  else
                  {
                    v145 = *(_QWORD **)(v137 + 24);
                  }
                  v146 = ((uint64_t)v145 - v142) >> 3;
                  if (v146 != v143)
                  {
                    v147 = *((_QWORD *)v131 + 1) + 40 * v136;
                    v256 = *(_OWORD *)v147;
                    v257 = *(_OWORD *)(v147 + 16);
                    v258 = *(_QWORD *)(v147 + 32);
                    if (v135 < DWORD1(v272))
                    {
                      v139 = (char *)v271 + 48 * v135;
                      v54 = *(__n128 *)v147;
                      v140 = *(_OWORD *)(v147 + 16);
                      v141 = *(_QWORD *)(v147 + 32);
                      *(__n128 *)v139 = v54;
                      *((_OWORD *)v139 + 1) = v140;
                      *((_QWORD *)v139 + 4) = v141;
                      *((_QWORD *)v139 + 5) = v146;
                    }
                    else
                    {
                      v263 = v256;
                      v264 = v257;
                      v265 = (unint64_t *)v258;
                      v266 = (_QWORD *)v146;
                      v148 = v135 + 1;
                      v149 = (char *)v271 + 48 * v135 > (char *)&v263;
                      if (v271 <= &v263 && v149)
                      {
                        v154 = (char *)&v263 - (_BYTE *)v271;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (char *)&v272 + 8, v148, 48);
                        v151 = (char *)v271;
                        v150 = (__n128 *)((char *)v271 + v154);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (char *)&v272 + 8, v148, 48);
                        v150 = (__n128 *)&v263;
                        v151 = (char *)v271;
                      }
                      v152 = (__n128 *)&v151[48 * v272];
                      v54 = *v150;
                      v153 = v150[2];
                      v152[1] = v150[1];
                      v152[2] = v153;
                      *v152 = v54;
                    }
                    v135 = v272 + 1;
                    LODWORD(v272) = v272 + 1;
                  }
                  ++v136;
                  v137 += 56;
                }
                while (v137 != v138);
                v155 = (char *)v271;
                if (v135)
                {
                  v156 = v135;
                  v157 = (char *)v271 + 48 * v135;
                  v158 = v135;
                  if (v135 < 0x81)
                  {
LABEL_255:
                  }
                  else
                  {
                    while (1)
                    {
                      v159 = operator new(48 * v158, MEMORY[0x1E0DE4E10]);
                      if (v159)
                        break;
                      v160 = v158 > 1;
                      v158 >>= 1;
                      if (!v160)
                        goto LABEL_255;
                    }
                    v165 = v159;
                    operator delete(v165);
                  }
                  v155 = (char *)v271;
                  v161 = *(void **)v271;
                  v164 = *((_QWORD *)v271 + 1);
                  v163 = *((_QWORD *)v271 + 2);
                  v162 = *((_QWORD *)v271 + 3);
                }
                else
                {
                  v161 = 0;
                  v162 = -1;
                  v163 = -1;
                  v164 = -1;
                }
                if (v155 != (char *)&v272 + 8)
                  free(v155);
                v132 = v164 == -1 || v163 == -1;
                if (!v132 && v162 != -1)
                  break;
              }
              ++v130;
              v131 += 1000;
              if (v131 == v241)
                goto LABEL_278;
            }
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v260);
            if (!DefiningOp
              || (v167 = DefiningOp,
                  !mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp))
              || (mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(v167),
                  v242 = *(unsigned int *)(v167 + 36),
                  v242 < 2)
              || v161 == v260)
            {
              v33 = this;
LABEL_271:
              v171 = *(_QWORD *)(*((_QWORD *)v33 + 13) + 8 * v130);
              v271 = v129;
              *(_QWORD *)&v272 = v163;
              *((_QWORD *)&v272 + 1) = v171;
              llvm::MapVector<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo,llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,llvm::SmallVector<std::pair<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo>,0u>>::try_emplace<mlir::dataflow::TensorAllocAnalysis::AllocInfo>(v233, (unint64_t *)&v271, &v272);
              v172 = v239;
              goto LABEL_221;
            }
            v168 = 0;
            v232 = (mlir::detail::OpResultImpl *)(v167 - 16);
            v169 = v164;
            while (1)
            {
              NextResultAtOffset = (_DWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v232, v168);
              mlir::detail::AllocRange::getRangeForValue(NextResultAtOffset, v169, (uint64_t)&v263);
              if (*((uint64_t *)&v264 + 1) > v162)
              {
                v173 = mlir::Value::getLoc((mlir::Value *)&v260);
                *(_QWORD *)&v256 = "Attempted to subdivide a range that isn't large enough. This usually happens when the"
                                   " requested alignment is incompatible with your tensor shapes. The required alignment was: ";
                LOWORD(v258) = 259;
                mlir::emitError(v173, (uint64_t)&v256, (uint64_t)&v271);
                if (v271)
                {
                  LODWORD(__b) = 2;
                  v269 = v265;
                  v174 = v273;
                  if (v274 >= v275)
                  {
                    v181 = v274 + 1;
                    if (v273 <= (unint64_t)&__b && v273 + 24 * v274 > (unint64_t)&__b)
                    {
                      v182 = (char *)&__b - v273;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, v276, v181, 24);
                      v174 = v273;
                      p_b = (void **)&v182[v273];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, v276, v181, 24);
                      p_b = &__b;
                      v174 = v273;
                    }
                  }
                  else
                  {
                    p_b = &__b;
                  }
                  v176 = v174 + 24 * v274;
                  v177 = *(_OWORD *)p_b;
                  *(_QWORD *)(v176 + 16) = p_b[2];
                  *(_OWORD *)v176 = v177;
                  ++v274;
                  if (v271)
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v271);
                }
                std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v272);
                goto LABEL_278;
              }
              if (v260 == NextResultAtOffset)
                break;
              v169 = *((_QWORD *)&v264 + 1) + 1;
              if (v242 == ++v168)
                goto LABEL_283;
            }
            v164 = *((_QWORD *)&v263 + 1);
            v162 = *((_QWORD *)&v264 + 1);
            v163 = v264;
LABEL_283:
            v33 = this;
            if (v164 != -1 && v163 != -1 && v162 != -1)
              goto LABEL_271;
          }
          else
          {
LABEL_278:
            v33 = this;
          }
          v172 = v239;
          if ((~v129[2] & 7) != 0)
          {
            v271 = v129;
            v178 = mlir::Value::getDefiningOp((mlir::Value *)&v271);
            if (v178)
            {
              v179 = v178;
              v180 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v179 + 48) + 32))(*(_QWORD *)(v179 + 48), v180);
            }
          }
          v128 = *((_QWORD *)v33 + 18);
          v271 = v129;
          *(_QWORD *)&v272 = -1;
          *((_QWORD *)&v272 + 1) = v128;
          llvm::MapVector<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo,llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,llvm::SmallVector<std::pair<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo>,0u>>::try_emplace<mlir::dataflow::TensorAllocAnalysis::AllocInfo>(v233, (unint64_t *)&v271, &v272);
LABEL_221:
          v127 = v172 + 1;
        }
        while (v127 != v236);
      }
    }
LABEL_291:
    v183 = v254;
    v184 = *((unsigned int *)v33 + 18);
    v185 = v254 - v184;
    if ((_DWORD)v254 == (_DWORD)v184)
    {
      v186 = v254;
      if (!(_DWORD)v254)
        goto LABEL_62;
LABEL_300:
      v192 = (char *)v253;
      v193 = *v230;
      v194 = (char *)v253 + 8;
      v195 = 1000 * v183;
      while (2)
      {
        v196 = *((_QWORD *)v194 - 1);
        if (v196 == -1)
        {
          v198 = *((_DWORD *)v194 + 2);
          if (!v198)
          {
            v197 = 0;
            goto LABEL_305;
          }
          v196 = *(_QWORD *)(*(_QWORD *)v194 + 40 * v198 - 16);
        }
        if (v196)
          v197 = v196 + 1;
        else
          v197 = 0;
LABEL_305:
        if (*v193 > v197)
          v197 = *v193;
        *v193++ = v197;
        v194 += 1000;
        v195 -= 1000;
        if (!v195)
        {
          if (!(_BYTE)v252)
            goto LABEL_62;
          v199 = &v192[1000 * v186];
          while (2)
          {
            v202 = (_QWORD *)*((_QWORD *)v192 + 1);
            v203 = *((unsigned int *)v192 + 4);
            v204 = &v202[5 * v203];
            if ((_DWORD)v203)
            {
              v205 = 40 * v203;
              while (1)
              {
                v206 = v202[1] == -1 || v202[2] == -1;
                if (v206 || v202[3] == -1)
                  break;
                if ((~*(_DWORD *)(*v202 + 8) & 7) != 0)
                {
                  v208 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v202);
                  if (mlir::Operation::isBeforeInBlock((mlir::Block **)v240, v208) || v208 == v240)
                    break;
                }
                v202 += 5;
                v205 -= 40;
                if (!v205)
                {
                  v202 = v204;
                  goto LABEL_349;
                }
              }
            }
            v209 = v202 + 5;
            if (v202 != v204 && v209 != v204)
            {
              do
              {
                if (v209[1] != -1 && v209[2] != -1 && v209[3] != -1)
                {
                  if ((~*(_DWORD *)(*v209 + 8) & 7) == 0
                    || (v215 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v209),
                        !mlir::Operation::isBeforeInBlock((mlir::Block **)v240, v215))
                    && v215 != v240)
                  {
                    v211 = *(_OWORD *)v209;
                    v212 = *((_OWORD *)v209 + 1);
                    v202[4] = v209[4];
                    *(_OWORD *)v202 = v211;
                    *((_OWORD *)v202 + 1) = v212;
                    v202 += 5;
                  }
                }
                v209 += 5;
              }
              while (v209 != v204);
            }
LABEL_349:
            v216 = (_QWORD *)*((_QWORD *)v192 + 1);
            v217 = 0xCCCCCCCCCCCCCCCDLL * (v202 - v216);
            *((_DWORD *)v192 + 4) = v217;
            v200 = *((_QWORD *)v192 + 53);
            v201 = *((_DWORD *)v192 + 108);
            v218 = v200 + 56 * v201;
            v219 = v200;
            if (v201 && (v219 = *((_QWORD *)v192 + 53), (_DWORD)v217))
            {
              v219 = *((_QWORD *)v192 + 53);
              do
              {
                v220 = 0xFFFFFFF800000008 * (v202 - v216);
                v221 = v216;
                while (*v221 != **(_QWORD **)(v219 + 24))
                {
                  v221 += 5;
                  v220 -= 40;
                  if (!v220)
                    goto LABEL_358;
                }
                v219 += 56;
              }
              while (v219 != v218);
LABEL_368:
              v223 = v200 + 56 * v201;
            }
            else
            {
LABEL_358:
              if (v219 == v218)
                goto LABEL_368;
              v222 = v219 + 56;
              if (v219 + 56 == v218)
              {
                v223 = v219;
              }
              else
              {
                v223 = v219;
                do
                {
                  v224 = v219;
                  v219 = v222;
                  v225 = *((unsigned int *)v192 + 4);
                  if ((_DWORD)v225)
                  {
                    v226 = (_QWORD *)*((_QWORD *)v192 + 1);
                    v227 = 40 * v225;
                    do
                    {
                      if (*v226 == **(_QWORD **)(v224 + 80))
                        llvm::deallocate_buffer(*(llvm **)v223, (void *)(8 * *(unsigned int *)(v223 + 16)));
                      v226 += 5;
                      v227 -= 40;
                    }
                    while (v227);
                  }
                  v222 = v219 + 56;
                }
                while (v219 + 56 != v218);
                v200 = *((_QWORD *)v192 + 53);
                v201 = *((_DWORD *)v192 + 108);
              }
            }
            llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::erase((uint64_t *)v192 + 53, v223, v200 + 56 * v201);
            v192 += 1000;
            if (v192 == v199)
              goto LABEL_62;
            continue;
          }
        }
        continue;
      }
    }
    if (v254 >= v184)
    {
      v188 = v254;
      v189 = *((_DWORD *)v33 + 19);
      v186 = v254;
      v190 = v184;
      v191 = v184;
      if (v189 < v254)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v230, v228, v254, 8);
        v190 = *((unsigned int *)this + 18);
        v188 = v254;
        v186 = v254;
        v191 = *((_DWORD *)this + 18);
      }
      bzero(&(*v230)[v190], 8 * (v183 - v184));
      v187 = v185 + v191;
      LODWORD(v183) = v188;
    }
    else
    {
      v186 = v254;
      v187 = v254;
    }
    *((_DWORD *)this + 18) = v187;
    if (v186)
      goto LABEL_300;
LABEL_62:
    v52 = *v231;
    v33 = this;
    if (*v231 != v229)
      continue;
    break;
  }
  LODWORD(v35) = v254;
LABEL_371:
  if (v253 != v255)
    free(v253);
  mlir::AsmState::~AsmState(&v244);
}

uint64_t llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *__srca;

  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v10 = *(unsigned int *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 - __src;
  v13 = (a4 - __src) >> 3;
  v14 = v13 + v10;
  if (*(_QWORD *)a1 + 8 * v10 != a2)
  {
    if (v14 > v9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v14, 8);
      v7 = *(_QWORD *)a1;
      v10 = *(unsigned int *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 8);
    }
    v15 = (char *)(v7 + 8 * v10);
    __srca = (char *)(v7 + 8 * v8);
    v16 = v15 - __srca;
    v17 = (v15 - __srca) >> 3;
    if (v17 < v13)
    {
      v18 = v11 + (v12 >> 3);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 == v10)
      {
        v19 = __src;
        v21 = v7 + 8 * v8;
        v20 = a4;
        goto LABEL_34;
      }
      v21 = v7 + 8 * v8;
      memcpy((void *)(v7 + 8 * v18 - 8 * v17), __srca, v16);
      if (v16 < 0x20 || (unint64_t)(__srca - __src) < 0x20)
      {
        v28 = (char *)(v7 + 8 * v8);
        v29 = (v15 - __srca) >> 3;
        v19 = __src;
        v20 = a4;
      }
      else
      {
        v27 = 8 * (v17 & 0xFFFFFFFFFFFFFFFCLL);
        v28 = &__srca[v27];
        v29 = (v16 >> 3) & 3;
        v19 = &__src[v27];
        v30 = (__int128 *)(__src + 16);
        v31 = (_OWORD *)(v7 + 8 * v8 + 16);
        v32 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 4;
        }
        while (v32);
        v20 = a4;
        if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          if (v19 != v20)
            memcpy(v15, v19, v20 - v19);
          return v21;
        }
      }
      do
      {
        v42 = *(_QWORD *)v19;
        v19 += 8;
        *(_QWORD *)v28 = v42;
        v28 += 8;
        --v29;
      }
      while (v29);
      goto LABEL_34;
    }
    v22 = 8 * v13;
    v23 = v10;
    if (v13 + v10 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v13 + v10, 8);
      v23 = *(unsigned int *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 8);
    }
    v24 = &v15[-v22];
    if (a4 == __src)
      goto LABEL_28;
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    if (v12 - 8 >= 0x78)
    {
      v34 = 8 * v23 + *(_QWORD *)a1;
      v26 = &v15[-v22];
      if ((v12 & 0xFFFFFFFFFFFFFFF8) - v7 - 8 * v10 + v34 >= 0x20)
      {
        v35 = ((v12 - 8) >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v25 = (_QWORD *)((char *)v25 + v36);
        v26 = &v24[v36];
        v37 = (__int128 *)(8 * v10 - 8 * v13 + v7 + 16);
        v38 = (_OWORD *)(v34 + 16);
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    else
    {
      v26 = &v15[-v22];
    }
    do
    {
      v41 = *(_QWORD *)v26;
      v26 += 8;
      *v25++ = v41;
    }
    while (v26 != v15);
LABEL_28:
    *(_DWORD *)(a1 + 8) = v11 + v13;
    v21 = v7 + 8 * v8;
    if (v24 != __srca)
      memmove(&__srca[v22], __srca, &v15[-v22] - __srca);
    if (a4 != __src)
      memmove(__srca, __src, v12);
    return v21;
  }
  if (v14 > v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v14, 8);
    v11 = *(_DWORD *)(a1 + 8);
    v7 = *(_QWORD *)a1;
  }
  if (__src != a4)
  {
    memcpy((void *)(v7 + 8 * v11), __src, v12);
    v11 = *(_DWORD *)(a1 + 8);
    v7 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v11 + (v12 >> 3);
  return v7 + 8 * v8;
}

void mlir::dataflow::TensorAllocAnalysis::getAnalysis(mlir::dataflow::TensorAllocAnalysis *this, mlir::DataFlowSolver *a2, mlir::Operation *a3)
{
  mlir::Liveness *v4;

  mlir::DataFlowSolver::load<mlir::dataflow::DeadCodeAnalysis>((uint64_t)a2);
  v4 = (mlir::Liveness *)operator new(0x20uLL);
  mlir::Liveness::Liveness(v4, a3);
}

void sub_180149250(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  Operation *v14;
  mlir::dataflow::TensorAllocAnalysis *v15;
  mlir::DataFlowSolver *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *((_QWORD *)v15 + 2);
  *((_QWORD *)v15 + 2) = v17;
  if (v18)
    std::default_delete<mlir::Liveness>::operator()[abi:nn180100]((uint64_t)v15 + 16, v18);
  mlir::DataFlowSolver::initializeAndRun(v16, v14);
  mlir::dataflow::TensorAllocAnalysis::buildAllocInfoMap(v15, v14);
}

uint64_t mlir::DataFlowSolver::load<mlir::dataflow::DeadCodeAnalysis>(uint64_t a1)
{
  mlir::dataflow::DeadCodeAnalysis *v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;

  v2 = (mlir::dataflow::DeadCodeAnalysis *)operator new(0x30uLL);
  mlir::dataflow::DeadCodeAnalysis::DeadCodeAnalysis(v2, (mlir::DataFlowSolver *)a1);
  v3 = *(unsigned int *)(a1 + 56);
  if (v3 < *(_DWORD *)(a1 + 60))
  {
    v4 = *(char **)(a1 + 48);
    *(_QWORD *)&v4[8 * v3] = v2;
    v5 = v3 + 1;
    goto LABEL_3;
  }
  v7 = (char **)(a1 + 48);
  v25 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 48, (void *)(a1 + 64), 0, 8, &v25);
  v8 = *(unsigned int *)(a1 + 56);
  v9 = 8 * v8;
  *(_QWORD *)&v4[8 * v8] = v2;
  v10 = *(char **)(a1 + 48);
  if ((_DWORD)v8)
  {
    v11 = (v8 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v11 >= 0xB)
    {
      if (v10 >= &v4[v9] || (v12 = v4, v13 = *(char **)(a1 + 48), v4 >= &v10[v9]))
      {
        v14 = v11 + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v12 = &v4[v15];
        v13 = &v10[v15];
        v16 = (__int128 *)(v10 + 16);
        v17 = v4 + 16;
        v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *(v16 - 1);
          v20 = *v16;
          *(v16 - 1) = 0uLL;
          *v16 = 0uLL;
          *(v17 - 1) = v19;
          *v17 = v20;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_13:
          v22 = (uint64_t)(*v7 - 8);
          do
          {
            v23 = *(_QWORD *)(v22 + v9);
            *(_QWORD *)(v22 + v9) = 0;
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v9 -= 8;
          }
          while (v9);
          v10 = *v7;
          goto LABEL_18;
        }
      }
    }
    else
    {
      v12 = v4;
      v13 = *(char **)(a1 + 48);
    }
    do
    {
      v21 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      v13 += 8;
      *(_QWORD *)v12 = v21;
      v12 += 8;
    }
    while (v13 != &v10[v9]);
    goto LABEL_13;
  }
LABEL_18:
  v24 = v25;
  if (v10 != (char *)(a1 + 64))
    free(v10);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_DWORD *)(a1 + 56) + 1;
  *(_DWORD *)(a1 + 60) = v24;
LABEL_3:
  *(_DWORD *)(a1 + 56) = v5;
  return *(_QWORD *)&v4[8 * v5 - 8];
}

void mlir::dataflow::TensorAllocAnalysis::~TensorAllocAnalysis(mlir::dataflow::TensorAllocAnalysis *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E0E4EE18;
  v2 = (char *)*((_QWORD *)this + 13);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 80)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 6);
  if (v4 != (char *)this + 64)
    free(v4);
  llvm::deallocate_buffer(*((llvm **)this + 3), (void *)(16 * *((unsigned int *)this + 10)));
}

{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E0E4EE18;
  v2 = (char *)*((_QWORD *)this + 13);
  if (v2 != (char *)this + 120)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 80)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 6);
  if (v4 != (char *)this + 64)
    free(v4);
  llvm::deallocate_buffer(*((llvm **)this + 3), (void *)(16 * *((unsigned int *)this + 10)));
}

void sub_180149490(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;

  v13 = *((_QWORD *)v12 + 2);
  *((_QWORD *)v12 + 2) = 0;
  if (v13)
    std::default_delete<mlir::Liveness>::operator()[abi:nn180100]((uint64_t)v12 + 16, v13);
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

void sub_180149520(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  void *v14;

  v13 = *((_QWORD *)v12 + 2);
  *((_QWORD *)v12 + 2) = 0;
  if (v13)
    std::default_delete<mlir::Liveness>::operator()[abi:nn180100]((uint64_t)v12 + 16, v13);
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v14);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::visitOperationImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::visitNonControlFlowArgumentsImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

_QWORD *mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::getLatticeElement(uint64_t a1, uint64_t a2)
{
  return mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>,mlir::Value>(*(_QWORD *)(a1 + 8), a2);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::setToEntryState(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t mlir::dataflow::SparseForwardDataFlowAnalysis<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>::visitNonControlFlowArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, unsigned int a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = a6;
  if (a5 >= a6)
    v11 = a6;
  else
    v11 = a5;
  mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates(a1, a4, v11);
  return mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates(a1, &a4[*(_QWORD *)(a3 + 16) + v10], a5 - (*(_QWORD *)(a3 + 16) + v10));
}

void mlir::dataflow::TensorAllocAnalysis::setToEntryState(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5[2];
  _QWORD v6[51];

  v6[50] = *MEMORY[0x1E0C80C00];
  mlir::detail::AllocRange::getRangeForValue((_DWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v6);
  v5[0] = v6;
  v5[1] = (void *)0xA00000001;
  v4 = mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::join(a2, (uint64_t)v5);
  mlir::DataFlowAnalysis::propagateIfChanged(a1, a2, v4);
  if (v5[0] != v6)
    free(v5[0]);
}

uint64_t mlir::TypeID::get<mlir::ShapedType>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      v12 = 66;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[133];
}

uint64_t mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void **v9;
  void **v10;
  unint64_t v11;
  unint64_t *v12;
  void **v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::MemoryMapperInterface>();
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::MemoryMapperInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(void ***)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = (unint64_t *)&v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = (void **)(v12 + 2);
      v8 += ~(v8 >> 1);
      if (v14 < (unint64_t)v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = (uint64_t)v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::MemoryMapperInterface>();
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

void *mlir::TypeID::get<mlir::MemoryMapperInterface>()
{
  unsigned __int8 v0;
  void **p_vtable;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v0 & 1) == 0)
  {
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryMapperInterface]";
      v12 = 77;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::MemoryMapperInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    }
  }
  return p_vtable[406];
}

uint64_t llvm::SmallVectorImpl<mlir::detail::AllocRange>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 40 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 40 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 40);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 40 * v9), (const void *)(*(_QWORD *)a2 + 40 * v9), *(_QWORD *)a2 + 40 * v10 - (*(_QWORD *)a2 + 40 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<`anonymous namespace'::CurrentlyLive::Buffer,false>::destroy_range(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = v2 - 1000;
      v5 = *(_QWORD *)(v2 - 576);
      v6 = *(unsigned int *)(v2 - 568);
      if ((_DWORD)v6)
      {
        v7 = 56 * v6;
        v8 = *(void **)(v5 + v7 - 32);
        if ((void *)(v5 + v7 - 16) != v8)
          free(v8);
        llvm::deallocate_buffer(*(llvm **)(v5 + v7 - 56), (void *)(8 * *(unsigned int *)(v5 + v7 - 40)));
      }
      if (v5 != v2 - 560)
        free(*(void **)(v2 - 576));
      v9 = *(void **)(v2 - 992);
      if (v9 != (void *)(v2 - 976))
        free(v9);
      v2 -= 1000;
    }
    while (v4 != a1);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  unint64_t v11;
  uint64_t v12;
  llvm **v13;
  uint64_t v14;
  llvm **v15;
  llvm **v16;
  llvm **v17;
  uint64_t v18;
  int v19;
  llvm **v20;
  llvm **v21;
  llvm **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;

  if ((uint64_t *)a1 != a2)
  {
    v4 = a2 + 2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      v9 = a2 + 1;
      v11 = *((unsigned int *)a2 + 2);
      v12 = *(unsigned int *)(a1 + 8);
      if (v12 >= v11)
      {
        v16 = *(llvm ***)a1;
        if ((_DWORD)v11)
          llvm::deallocate_buffer(*v16, (void *)(8 * *((unsigned int *)v16 + 4)));
        if (&v16[7 * v12] != v16)
        {
          v20 = &v16[7 * v12];
          v21 = v20 - 2;
          v22 = (llvm **)*(v20 - 4);
          if (v21 != v22)
            free(v22);
          llvm::deallocate_buffer(*(v21 - 5), (void *)(8 * *((unsigned int *)v21 - 6)));
        }
        *(_DWORD *)(a1 + 8) = 0;
        v23 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v23)
        {
          v24 = *a2;
          v25 = 56 * v23;
          v26 = *(void **)(v24 + v25 - 32);
          if ((void *)(v24 + v25 - 16) != v26)
            free(v26);
          llvm::deallocate_buffer(*(llvm **)(v24 + v25 - 56), (void *)(8 * *(unsigned int *)(v24 + v25 - 40)));
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v11)
        {
          v17 = *(llvm ***)a1;
          if ((_DWORD)v12)
            llvm::deallocate_buffer(*v17, (void *)(8 * *((unsigned int *)v17 + 4)));
        }
        else
        {
          if ((_DWORD)v12)
          {
            v13 = *(llvm ***)a1;
            v14 = 7 * v12;
            v15 = (llvm **)v13[v14 - 4];
            if (&v13[v14 - 2] != v15)
              free(v15);
            llvm::deallocate_buffer(v13[v14 - 7], (void *)(8 * LODWORD(v13[v14 - 5])));
          }
          *(_DWORD *)(a1 + 8) = 0;
          v35 = 0;
          v18 = a1 + 16;
          v17 = (llvm **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v11, 56, &v35);
          llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::moveElementsForGrow(a1, (uint64_t)v17);
          v19 = v35;
          if (*(_QWORD *)a1 != v18)
            free(*(void **)a1);
          *(_QWORD *)a1 = v17;
          *(_DWORD *)(a1 + 12) = v19;
        }
        v27 = *a2;
        if (*((_DWORD *)a2 + 2))
        {
          v28 = v27 + 56 * *((unsigned int *)a2 + 2);
          do
          {
            v29 = v27;
            *v17 = 0;
            v17[1] = 0;
            *((_DWORD *)v17 + 4) = 0;
            *v17 = *(llvm **)v27;
            *(_QWORD *)v27 = 0;
            *((_DWORD *)v17 + 2) = *(_DWORD *)(v27 + 8);
            *(_DWORD *)(v27 + 8) = 0;
            v17[3] = (llvm *)(v17 + 5);
            v30 = *((_DWORD *)v17 + 3);
            *((_DWORD *)v17 + 3) = *(_DWORD *)(v27 + 12);
            *(_DWORD *)(v27 + 12) = v30;
            v31 = *((_DWORD *)v17 + 4);
            *((_DWORD *)v17 + 4) = *(_DWORD *)(v27 + 16);
            *(_DWORD *)(v27 + 16) = v31;
            v17[4] = (llvm *)0x200000000;
            if (*(_DWORD *)(v27 + 32))
              llvm::SmallVectorImpl<mlir::Value>::operator=((uint64_t)(v17 + 3), v27 + 24);
            v17 += 7;
            v27 += 56;
          }
          while (v29 + 56 != v28);
          v27 = *a2;
        }
        *(_DWORD *)(a1 + 8) = v11;
        v32 = *v9;
        if ((_DWORD)v32)
        {
          v33 = 56 * v32;
          v34 = *(void **)(v27 + v33 - 32);
          if ((void *)(v27 + v33 - 16) != v34)
            free(v34);
          llvm::deallocate_buffer(*(llvm **)(v27 + v33 - 56), (void *)(8 * *(unsigned int *)(v27 + v33 - 40)));
        }
      }
    }
    else
    {
      v5 = *(char **)a1;
      v6 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v6)
      {
        v7 = 56 * v6;
        v8 = *(char **)&v5[v7 - 32];
        if (&v5[v7 - 16] != v8)
          free(v8);
        llvm::deallocate_buffer(*(llvm **)&v5[v7 - 56], (void *)(8 * *(unsigned int *)&v5[v7 - 40]));
      }
      if (v5 != (char *)(a1 + 16))
        free(*(void **)a1);
      *(_QWORD *)a1 = *a2;
      v9 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    *v9 = 0;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<mlir::Value>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 8 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 8 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 8);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::moveElementsForGrow(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = *(_QWORD *)result;
    v7 = *(_QWORD *)result + 56 * v2;
    do
    {
      v8 = v6 + v5;
      v9 = a2 + v5;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = *(_QWORD *)(v6 + v5);
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v6 + v5 + 8);
      *(_DWORD *)(v8 + 8) = 0;
      *(_QWORD *)(a2 + v5 + 24) = a2 + v5 + 40;
      result = a2 + v5 + 24;
      v10 = *(_DWORD *)(a2 + v5 + 12);
      *(_DWORD *)(result - 12) = *(_DWORD *)(v6 + v5 + 12);
      *(_DWORD *)(v8 + 12) = v10;
      v11 = *(_DWORD *)(a2 + v5 + 16);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v6 + v5 + 16);
      *(_DWORD *)(v8 + 16) = v11;
      *(_QWORD *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(v6 + v5 + 32))
        result = llvm::SmallVectorImpl<mlir::Value>::operator=(result, v8 + 24);
      v5 += 56;
    }
    while (v8 + 56 != v7);
    v12 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)v4;
      v14 = 56 * v12;
      v15 = *(void **)(v13 + v14 - 32);
      if ((void *)(v13 + v14 - 16) != v15)
        free(v15);
      llvm::deallocate_buffer(*(llvm **)(v13 + v14 - 56), (void *)(8 * *(unsigned int *)(v13 + v14 - 40)));
    }
  }
  return result;
}

uint64_t `anonymous namespace'::CurrentlyLive::Buffer::findSlotsFor(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t FirstSlotFor;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD v34[5];
  _OWORD v35[2];
  uint64_t v36;
  llvm *v37[2];
  void *v38[2];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[2];
  _QWORD v46[72];

  v46[70] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  if (a3 != 1)
  {
    v41 = -1;
    v42 = &v44;
    v43 = 0xA00000000;
    v45[0] = v46;
    v45[1] = (void *)0xA00000000;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = 40 * v11;
      v13 = *(_QWORD **)(a1 + 8);
      do
      {
        if (*v13 == *a2)
          goto LABEL_16;
        v13 += 5;
        v12 -= 40;
      }
      while (v12);
      v13 = (_QWORD *)(v10 + 40 * v11);
    }
    else
    {
      v13 = *(_QWORD **)(a1 + 8);
    }
LABEL_16:
    v14 = (uint64_t)v13 - v10;
    if (v14 != -40 && 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3) != v11)
    {
      v26 = (__int128 *)(v10 + 8 * (v14 >> 3));
      v27 = *v26;
      v28 = v26[1];
      v36 = *((_QWORD *)v26 + 4);
      v35[0] = v27;
      v35[1] = v28;
      v38[0] = 0;
      v39 = 0u;
      v40 = 0;
      *(_OWORD *)v37 = 0u;
      v38[1] = (char *)&v39 + 8;
      DWORD1(v39) = 2;
      v30 = 40 * v43;
      llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::insert_one_impl<llvm::SmallSetVector<mlir::Value,2u> const&>((uint64_t)v45, (uint64_t)v45[0] - 0x3333333333333328 * (v30 >> 3), (unint64_t)v37);
      v31 = (char *)v42 + v30;
      v32 = v35;
      goto LABEL_33;
    }
    v17 = a2[4];
    v18 = FirstSlotFor;
    if (v17)
      v18 = (FirstSlotFor + v17 - 1) / v17 * v17;
    v19 = a2[3] - a2[2] + v18;
    v34[0] = *a2;
    v34[1] = FirstSlotFor;
    v34[2] = v18;
    v34[3] = v19;
    v34[4] = v17;
    v38[0] = 0;
    v39 = 0u;
    v40 = 0;
    *(_OWORD *)v37 = 0u;
    v38[1] = (char *)&v39 + 8;
    DWORD1(v39) = 2;
    v20 = v43;
    if (!(_DWORD)v43)
    {
      v22 = (char *)v42 + 40 * v43;
LABEL_32:
      v29 = v22 - (_BYTE *)v42;
      llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::insert_one_impl<llvm::SmallSetVector<mlir::Value,2u> const&>((uint64_t)v45, (uint64_t)v45[0] - 0x3333333333333328 * ((v22 - (_BYTE *)v42) >> 3), (unint64_t)v37);
      v31 = (char *)v42 + v29;
      v32 = v34;
LABEL_33:
      llvm::SmallVectorImpl<mlir::detail::AllocRange>::insert_one_impl<mlir::detail::AllocRange const&>((uint64_t)&v42, (unint64_t)v31, (unint64_t)v32);
      if (v38[1] != (char *)&v39 + 8)
        free(v38[1]);
      llvm::deallocate_buffer(v37[0], (void *)(8 * LODWORD(v38[0])));
    }
    v21 = v19 - FirstSlotFor + 1;
    v22 = (char *)v42;
    while (1)
    {
      v23 = v20 >> 1;
      v24 = &v22[40 * (v20 >> 1)];
      v25 = *((_QWORD *)v24 + 1);
      if (FirstSlotFor == v25)
      {
        if (v21 >= *(_QWORD *)&v22[40 * v23 + 24] - FirstSlotFor + 1)
          goto LABEL_30;
      }
      else if (FirstSlotFor >= v25)
      {
LABEL_30:
        v22 = v24 + 40;
        v23 = v20 + ~v23;
      }
      v20 = v23;
      if (!v23)
        goto LABEL_32;
    }
  }
  if (v6 == -1)
    return 0;
  v7 = v6;
  v8 = *(unsigned int *)(a4 + 8);
  if (v8 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v8) = v7;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::insert(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD **v16;
  _QWORD *v17;

  if (!*(_DWORD *)(a1 + 8))
  {
    v6 = (_QWORD **)(a1 + 24);
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v7;
    if ((_DWORD)v8)
    {
      v10 = 8 * v8;
      v9 = *(_QWORD **)(a1 + 24);
      while (*v9 != *a2)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
        {
          v9 = &v7[v8];
          break;
        }
      }
    }
    if (v8 == v9 - v7)
    {
      v11 = *a2;
      if (v8 >= *(_DWORD *)(a1 + 36))
      {
        v16 = (_QWORD **)(a1 + 24);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8 + 1, 8);
        v6 = v16;
        v8 = *(unsigned int *)(a1 + 32);
        v7 = *(_QWORD **)(a1 + 24);
      }
      v7[v8] = v11;
      v12 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v12;
      if (v12 >= 3)
      {
        v13 = *v6;
        v14 = 8 * v12;
        do
        {
          v17 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v13, &v17) & 1) == 0)*llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)v13, v13, v17) = *v13;
          ++v13;
          v14 -= 8;
        }
        while (v14);
      }
      return 1;
    }
    return 0;
  }
  v17 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a2, &v17) & 1) != 0)return 0;
  *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)a2, a2, v17) = *a2;
  v4 = *a2;
  v5 = *(unsigned int *)(a1 + 32);
  if (v5 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 32);
  return 1;
}

void llvm::SmallSet<long long,2u,std::less<long long>>::insert(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  if (!*(_QWORD *)(a1 + 48))
  {
    v15 = *(uint64_t ***)a1;
    v16 = *(unsigned int *)(a1 + 8);
    v17 = *a2;
    if (!(_DWORD)v16)
      goto LABEL_21;
    v18 = 8 * v16;
    v9 = *(uint64_t ***)a1;
    while (*v9 != v17)
    {
      ++v9;
      v18 -= 8;
      if (!v18)
        goto LABEL_20;
    }
    if (v18)
    {
      v19 = 0;
      v14 = 1;
      goto LABEL_25;
    }
LABEL_20:
    if (v16 <= 1)
    {
LABEL_21:
      if (v16 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v16 + 1, 8);
        v16 = *(unsigned int *)(a1 + 8);
        v15 = *(uint64_t ***)a1;
      }
      v15[v16] = v17;
      v20 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v20;
      v9 = (uint64_t **)(*(_QWORD *)a1 + 8 * v20 - 8);
      v14 = 1;
      goto LABEL_24;
    }
    v7 = (uint64_t **)(a1 + 40);
    do
    {
      v22 = *(uint64_t **)(a1 + 40);
      v23 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v16 - 8);
      v24 = (uint64_t **)(a1 + 40);
      v25 = (uint64_t **)(a1 + 40);
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v22;
            v26 = v22[4];
            if (v23 >= v26)
              break;
            v22 = *v25;
            v24 = v25;
            if (!*v25)
              goto LABEL_37;
          }
          if (v26 >= v23)
            break;
          v22 = v25[1];
          if (!v22)
          {
            v24 = v25 + 1;
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_37:
        v27 = (uint64_t *)operator new(0x28uLL);
        v27[4] = v23;
        *v27 = 0;
        v27[1] = 0;
        v27[2] = (uint64_t)v25;
        *v24 = v27;
        v28 = **(_QWORD **)(a1 + 32);
        if (v28)
        {
          *(_QWORD *)(a1 + 32) = v28;
          v21 = *v24;
        }
        else
        {
          v21 = v27;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v21);
        ++*(_QWORD *)(a1 + 48);
        LODWORD(v16) = *(_DWORD *)(a1 + 8);
      }
      LODWORD(v16) = v16 - 1;
      *(_DWORD *)(a1 + 8) = v16;
    }
    while ((_DWORD)v16);
    v8 = *a2;
    v29 = *v7;
    v9 = (uint64_t **)(a1 + 40);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v29;
          v30 = v29[4];
          if ((uint64_t)v8 >= v30)
            break;
          v29 = *v9;
          v7 = v9;
          if (!*v9)
            goto LABEL_9;
        }
        if (v30 >= (uint64_t)v8)
          break;
        v29 = v9[1];
        if (!v29)
        {
LABEL_8:
          v7 = v9 + 1;
          goto LABEL_9;
        }
      }
      v14 = 0;
      goto LABEL_24;
    }
LABEL_9:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x28uLL);
    v9[4] = v8;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 32);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 32) = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v13);
    v14 = 0;
    ++*(_QWORD *)(a1 + 48);
LABEL_24:
    v19 = 1;
    goto LABEL_25;
  }
  v7 = (uint64_t **)(a1 + 40);
  v6 = *(uint64_t **)(a1 + 40);
  v8 = *a2;
  if (!v6)
  {
    v9 = (uint64_t **)(a1 + 40);
    goto LABEL_9;
  }
  while (1)
  {
    while (1)
    {
      v9 = (uint64_t **)v6;
      v10 = (uint64_t *)v6[4];
      if ((uint64_t)v8 >= (uint64_t)v10)
        break;
      v6 = *v9;
      v7 = v9;
      if (!*v9)
        goto LABEL_9;
    }
    if ((uint64_t)v10 >= (uint64_t)v8)
      break;
    v6 = v9[1];
    if (!v6)
      goto LABEL_8;
  }
  v14 = 0;
  v19 = 0;
LABEL_25:
  *(_BYTE *)(a3 + 8) = v14;
  *(_QWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = v19;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

uint64_t std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  _QWORD **v2;
  _QWORD **v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 176))
  {
    v2 = *(_QWORD ***)(a1 + 152);
    if (v2)
    {
      v3 = *(_QWORD ***)(a1 + 160);
      v4 = *(void **)(a1 + 152);
      if (v3 != v2)
      {
        do
          v3 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v3 - 1);
        while (v3 != v2);
        v4 = *(void **)(a1 + 152);
      }
      *(_QWORD *)(a1 + 160) = v2;
      operator delete(v4);
    }
    v5 = *(_QWORD **)(a1 + 128);
    if (v5)
    {
      v6 = *(_QWORD **)(a1 + 136);
      v7 = *(void **)(a1 + 128);
      if (v6 != v5)
      {
        do
        {
          v9 = (void *)*--v6;
          v8 = v9;
          *v6 = 0;
          if (v9)
            operator delete[](v8);
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 128);
      }
      *(_QWORD *)(a1 + 136) = v5;
      operator delete(v7);
    }
    v10 = *(void **)(a1 + 16);
    if (v10 != (void *)(a1 + 32))
      free(v10);
  }
  return a1;
}

_QWORD **std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[19];
    if (v3)
    {
      v4 = v2[20];
      v5 = (void *)v2[19];
      if (v4 != v3)
      {
        do
          v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 8);
        while (v4 != v3);
        v5 = (void *)v2[19];
      }
      v2[20] = v3;
      operator delete(v5);
    }
    v6 = (_QWORD *)v2[16];
    if (v6)
    {
      v7 = (_QWORD *)v2[17];
      v8 = (void *)v2[16];
      if (v7 != v6)
      {
        do
        {
          v10 = (void *)*--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            operator delete[](v9);
        }
        while (v7 != v6);
        v8 = (void *)v2[16];
      }
      v2[17] = v6;
      operator delete(v8);
    }
    v11 = (_QWORD *)v2[2];
    if (v11 != v2 + 4)
      free(v11);
    operator delete(v2);
  }
  return a1;
}

uint64_t `anonymous namespace'::CurrentlyLive::Buffer::findFirstSlotFor(uint64_t a1, _QWORD *a2)
{
  int64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 16);
  if (*(_QWORD *)a1 == -1)
  {
    if (v3)
    {
      v4 = a1 + 8;
      if (v3 != 1)
        goto LABEL_26;
      return *(_QWORD *)(*(_QWORD *)v4 + 24) + 1;
    }
    return 0;
  }
  if (!v3)
  {
    v9 = a2[4];
    if (v9)
      v10 = (v9 - 1) / v9 * v9;
    else
      v10 = 0;
    v14 = a2[3] - a2[2];
    if ((uint64_t)(v14 + v10) > v2)
      return -1;
    if (v9)
      v9 *= (v9 - 1) / v9;
    if ((uint64_t)(v14 + v9) > v2)
      return 0;
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v4 = a1 + 8;
  v6 = *(_QWORD *)(v5 + 40 * v3 - 16);
  v7 = a2[4];
  if (v7)
    v8 = (v7 + v6) / v7 * v7;
  else
    v8 = v6 + 1;
  v11 = a2[3] - a2[2];
  if ((uint64_t)(v11 + v8) > v2)
    return -1;
  if (v3 != 1)
    goto LABEL_26;
  v12 = *(_QWORD *)(*(_QWORD *)v4 + 24);
  if (v7)
    v13 = (v7 + v12) / v7 * v7;
  else
    v13 = v12 + 1;
  if ((uint64_t)(v11 + v13) <= v2)
    return *(_QWORD *)(*(_QWORD *)v4 + 24) + 1;
  v3 = 1;
LABEL_26:
  v16 = a2[4];
  v17 = 40 * v3;
  v18 = (uint64_t *)(*(_QWORD *)v4 + 24);
  v19 = -1;
  do
  {
    v20 = *(v18 - 2);
    v21 = *v18;
    v22 = v19 + 1;
    if (v20 > v19 + 1)
    {
      if (v16)
        v22 = (v16 + v19) / v16 * v16;
      if (a2[3] - a2[2] + v22 < v20)
        break;
    }
    v18 += 5;
    v19 = v21;
    v17 -= 40;
  }
  while (v17);
  return v19 + 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 8 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 8 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_6;
      }
      result = 0;
      if (v16)
        v13 = v16;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_6:
  *a3 = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  unint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (unint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

unint64_t llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::insert_one_impl<llvm::SmallSetVector<mlir::Value,2u> const&>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  char *Address;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  llvm **v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL4 v14;

  if (*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8) == a2)
    llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::push_back(a1, a3);
  v4 = a2 - *(_QWORD *)a1;
  Address = llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::reserveForParamAndGetAddress(a1, a3, 1);
  v6 = *(_QWORD *)a1 + v4;
  v7 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(v7 - 56);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v7 - 48);
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v7 - 40);
  *(_DWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  *(_QWORD *)(v7 + 32) = 0x200000000;
  if (*(_DWORD *)(v7 - 24))
    llvm::SmallVectorImpl<mlir::Value>::operator=(v7 + 24, v7 - 32);
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = (llvm **)(*(_QWORD *)a1 + 56 * v9 - 56);
  if (v10 != (llvm **)v6)
    llvm::deallocate_buffer(*v10, (void *)(8 * *(unsigned int *)(*(_QWORD *)a1 + 56 * v9 - 40)));
  v11 = v9 + 1;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = v8 + 56 * v11;
  v14 = (unint64_t)Address >= v6 && (unint64_t)Address < v12;
  llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::operator=(v6, (uint64_t)&Address[56 * v14]);
  return v6;
}

void llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::push_back(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::reserveForParamAndGetAddress(a1, a2, 1);
  v3 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 0;
  llvm::deallocate_buffer(0, 0);
}

void sub_18014B404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *buffer;
  void *v5;
  unsigned int v6;
  unsigned int v8;

  v3 = *(unsigned int *)(v1 + 16);
  *(_DWORD *)(v2 + 16) = v3;
  if ((_DWORD)v3)
  {
    buffer = llvm::allocate_buffer(8 * v3, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = buffer;
    *(_QWORD *)(v2 + 8) = *(_QWORD *)(v1 + 8);
    memcpy(buffer, *(const void **)v1, 8 * *(unsigned int *)(v2 + 16));
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
  }
  v5 = (void *)(v2 + 40);
  *(_QWORD *)(v2 + 24) = v2 + 40;
  *(_QWORD *)(v2 + 32) = 0x200000000;
  v6 = *(_DWORD *)(v1 + 32);
  if (v2 != v1 && v6 != 0)
  {
    if (v6 < 3)
    {
      v8 = *(_DWORD *)(v1 + 32);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 24, (void *)(v2 + 40), *(unsigned int *)(v1 + 32), 8);
      v8 = *(_DWORD *)(v1 + 32);
      if (!v8)
      {
LABEL_13:
        *(_DWORD *)(v2 + 32) = v6;
        goto LABEL_14;
      }
      v5 = *(void **)(v2 + 24);
    }
    memcpy(v5, *(const void **)(v1 + 24), 8 * v8);
    goto LABEL_13;
  }
LABEL_14:
  ++*(_DWORD *)(v0 + 8);
}

char *llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - *(_QWORD *)a1) >> 3);
      v17 = 0;
      v14 = a1 + 16;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 56, &v17);
      llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(_QWORD *)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      *(_DWORD *)(a1 + 12) = v16;
      return &v15[56 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 16;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 56, &v17);
      llvm::SmallVectorTemplateBase<llvm::SmallSetVector<mlir::Value,2u>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(_QWORD *)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
    }
  }
  return (char *)v3;
}

uint64_t llvm::SetVector<mlir::Value,llvm::SmallVector<mlir::Value,2u>,llvm::DenseSet<mlir::Value,llvm::DenseMapInfo<mlir::Value,void>>,2u>::operator=(uint64_t result, uint64_t a2)
{
  if (a2 != result)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * *(unsigned int *)(result + 16)));
  return result;
}

uint64_t llvm::SmallVectorImpl<mlir::detail::AllocRange>::insert_one_impl<mlir::detail::AllocRange const&>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  _BOOL4 v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v26;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a1 + 40 * v6;
  if (v7 == a2)
  {
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      v28 = v6 + 1;
      if (v5 <= a3 && a2 > a3)
      {
        v31 = a3 - v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v28, 40);
        v5 = *(_QWORD *)a1;
        a3 = *(_QWORD *)a1 + v31;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v28, 40);
        v5 = *(_QWORD *)a1;
      }
    }
    v22 = v5 + 40 * *(unsigned int *)(a1 + 8);
    v23 = *(_OWORD *)a3;
    v24 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)v22 = v23;
    *(_OWORD *)(v22 + 16) = v24;
    LODWORD(v22) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v22;
    return *(_QWORD *)a1 + 40 * v22 - 40;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v5) >> 3);
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      v26 = v6 + 1;
      if (v5 <= a3 && v7 > a3)
      {
        v30 = a3 - v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v26, 40);
        v5 = *(_QWORD *)a1;
        a3 = *(_QWORD *)a1 + v30;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v26, 40);
        v5 = *(_QWORD *)a1;
      }
    }
    v9 = (_OWORD *)(v5 + 40 * v8);
    v10 = v5 + 40 * *(unsigned int *)(a1 + 8);
    v11 = *(_OWORD *)(v10 - 24);
    *(_OWORD *)v10 = *(_OWORD *)(v10 - 40);
    *(_OWORD *)(v10 + 16) = v11;
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v10 - 8);
    v12 = *(_QWORD *)a1;
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_QWORD *)a1 + 40 * v13 - 40;
    if ((_OWORD *)v14 != v9)
    {
      memmove((char *)v9 + 40, v9, v14 - (_QWORD)v9);
      v13 = *(_DWORD *)(a1 + 8);
      v12 = *(_QWORD *)a1;
    }
    v15 = v13 + 1;
    *(_DWORD *)(a1 + 8) = v15;
    v16 = v12 + 40 * v15;
    v18 = a3 >= (unint64_t)v9 && a3 < v16;
    v19 = a3 + 40 * v18;
    v20 = *(_OWORD *)v19;
    v21 = *(_OWORD *)(v19 + 16);
    *((_QWORD *)v9 + 4) = *(_QWORD *)(v19 + 32);
    *v9 = v20;
    v9[1] = v21;
  }
  return (uint64_t)v9;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::{lambda(`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&)#1} &,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match*>(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  uint64_t v41;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      if (*((_QWORD *)a2 - 1) < *(_QWORD *)(a1 + 40))
      {
        result = *(__n128 *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)(a1 + 32);
        v11 = *((_OWORD *)a2 - 2);
        v10 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *((_OWORD *)a2 - 3);
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v10;
        *((_OWORD *)a2 - 2) = v8;
        *((_OWORD *)a2 - 1) = v9;
        *((__n128 *)a2 - 3) = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v23 = a4;
      v24 = a3 >> 1;
      v25 = a1 + 48 * (a3 >> 1);
      v26 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v28 = v23 + 48 * v24;
        v29 = v23 + 48 * a3;
        v30 = v28;
        while (v30 != v29)
        {
          if (*(_QWORD *)(v30 + 40) >= *(_QWORD *)(v23 + 40))
          {
            result = *(__n128 *)v23;
            v31 = *(_OWORD *)(v23 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v23 + 16);
            *(_OWORD *)(v7 + 32) = v31;
            *(__n128 *)v7 = result;
            v23 += 48;
          }
          else
          {
            result = *(__n128 *)v30;
            v32 = *(_OWORD *)(v30 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v30 + 16);
            *(_OWORD *)(v7 + 32) = v32;
            *(__n128 *)v7 = result;
            v30 += 48;
          }
          v7 += 48;
          if (v23 == v28)
          {
            if (v30 != v29)
            {
              v36 = 0;
              do
              {
                v37 = v7 + v36;
                result = *(__n128 *)(v30 + v36);
                v38 = *(_OWORD *)(v30 + v36 + 32);
                *(_OWORD *)(v37 + 16) = *(_OWORD *)(v30 + v36 + 16);
                *(_OWORD *)(v37 + 32) = v38;
                *(__n128 *)v37 = result;
                v36 += 48;
              }
              while (v30 + v36 != v29);
            }
            return result;
          }
        }
        if (v23 != v28)
        {
          v33 = 0;
          do
          {
            v34 = v7 + v33;
            result = *(__n128 *)(v23 + v33);
            v35 = *(_OWORD *)(v23 + v33 + 32);
            *(_OWORD *)(v34 + 16) = *(_OWORD *)(v23 + v33 + 16);
            *(_OWORD *)(v34 + 32) = v35;
            *(__n128 *)v34 = result;
            v33 += 48;
          }
          while (v23 + v33 != v28);
        }
      }
      else
      {
      }
    }
    else if ((char *)a1 != a2)
    {
      v13 = a1 + 48;
      if ((char *)(a1 + 48) != a2)
      {
        v14 = 0;
        v15 = a1;
        do
        {
          v17 = *(_QWORD *)(v15 + 88);
          v18 = *(_QWORD *)(v15 + 40);
          v15 = v13;
          if (v17 < v18)
          {
            v39 = *(__n128 *)v13;
            v40 = *(_OWORD *)(v13 + 16);
            v41 = *(_QWORD *)(v13 + 32);
            v19 = v14;
            do
            {
              v20 = (_OWORD *)(a1 + v19);
              v21 = *(_OWORD *)(a1 + v19 + 16);
              v20[3] = *(_OWORD *)(a1 + v19);
              v20[4] = v21;
              v20[5] = *(_OWORD *)(a1 + v19 + 32);
              if (!v19)
              {
                v16 = a1;
                goto LABEL_10;
              }
              v19 -= 48;
            }
            while (v17 < *((_QWORD *)v20 - 1));
            v16 = a1 + v19 + 48;
LABEL_10:
            result = v39;
            *(__n128 *)v16 = v39;
            *(_OWORD *)(v16 + 16) = v40;
            *(_QWORD *)(v16 + 32) = v41;
            *(_QWORD *)(v16 + 40) = v17;
          }
          v13 = v15 + 48;
          v14 += 48;
        }
        while ((char *)(v15 + 48) != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::{lambda(`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&)#1} &,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match*>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  __n128 *v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v10 = (__n128 *)(a2 - 48);
      if (*(_QWORD *)(a2 - 8) >= *(_QWORD *)(a1 + 40))
      {
        v26 = *(__n128 *)a1;
        v27 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(a4 + 32) = v27;
        *(__n128 *)a4 = v26;
        result = *v10;
        v13 = *(_OWORD *)(a2 - 32);
        v14 = *(_OWORD *)(a2 - 16);
      }
      else
      {
        v11 = *v10;
        v12 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a4 + 32) = v12;
        *(__n128 *)a4 = v11;
        result = *(__n128 *)a1;
        v13 = *(_OWORD *)(a1 + 16);
        v14 = *(_OWORD *)(a1 + 32);
      }
      *(_OWORD *)(a4 + 64) = v13;
      *(_OWORD *)(a4 + 80) = v14;
      *(__n128 *)(a4 + 48) = result;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      v9 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a4 + 32) = v9;
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v28 = a3 >> 1;
      v29 = 48 * (a3 >> 1);
      v30 = a1 + v29;
      v31 = v8 + v29;
      while (v31 != a2)
      {
        if (*(_QWORD *)(v31 + 40) >= *(_QWORD *)(v8 + 40))
        {
          result = *(__n128 *)v8;
          v32 = *(_OWORD *)(v8 + 32);
          *(_OWORD *)(v5 + 16) = *(_OWORD *)(v8 + 16);
          *(_OWORD *)(v5 + 32) = v32;
          *(__n128 *)v5 = result;
          v8 += 48;
        }
        else
        {
          result = *(__n128 *)v31;
          v33 = *(_OWORD *)(v31 + 32);
          *(_OWORD *)(v5 + 16) = *(_OWORD *)(v31 + 16);
          *(_OWORD *)(v5 + 32) = v33;
          *(__n128 *)v5 = result;
          v31 += 48;
        }
        v5 += 48;
        if (v8 == v30)
        {
          if (v31 != a2)
          {
            v37 = 0;
            do
            {
              v38 = v5 + v37;
              result = *(__n128 *)(v31 + v37);
              v39 = *(_OWORD *)(v31 + v37 + 32);
              *(_OWORD *)(v38 + 16) = *(_OWORD *)(v31 + v37 + 16);
              *(_OWORD *)(v38 + 32) = v39;
              *(__n128 *)v38 = result;
              v37 += 48;
            }
            while (v31 + v37 != a2);
          }
          return result;
        }
      }
      if (v8 != v30)
      {
        v34 = 0;
        do
        {
          v35 = v5 + v34;
          result = *(__n128 *)(v8 + v34);
          v36 = *(_OWORD *)(v8 + v34 + 32);
          *(_OWORD *)(v35 + 16) = *(_OWORD *)(v8 + v34 + 16);
          *(_OWORD *)(v35 + 32) = v36;
          *(__n128 *)v35 = result;
          v34 += 48;
        }
        while (v8 + v34 != v30);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      v15 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a4 + 32) = v15;
      *(__n128 *)a4 = result;
      v16 = a1 + 48;
      if (a1 + 48 != a2)
      {
        v17 = 0;
        v18 = (_OWORD *)a4;
        do
        {
          v20 = v8;
          v21 = v18;
          v8 = v16;
          v18 += 3;
          v22 = v18;
          if (*(_QWORD *)(v20 + 88) < *((_QWORD *)v21 + 5))
          {
            v23 = v21[1];
            *v18 = *v21;
            v18[1] = v23;
            v18[2] = v21[2];
            v22 = (_OWORD *)a4;
            if (v21 != (_OWORD *)a4)
            {
              v24 = v17;
              while (1)
              {
                v22 = (_OWORD *)(a4 + v24);
                if (*(_QWORD *)(v20 + 88) >= *(_QWORD *)(a4 + v24 - 8))
                  break;
                v25 = *(v22 - 2);
                *v22 = *(v22 - 3);
                v22[1] = v25;
                v22[2] = *(v22 - 1);
                v24 -= 48;
                if (!v24)
                {
                  v22 = (_OWORD *)a4;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v8;
          v19 = *(_OWORD *)(v8 + 32);
          v22[1] = *(_OWORD *)(v8 + 16);
          v22[2] = v19;
          *v22 = result;
          v16 = v8 + 48;
          v17 += 48;
        }
        while (v8 + 48 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::{lambda(`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match const&)#1} &,`anonymous namespace'::CurrentlyLive::Buffer::lookupRangeForValue(mlir::Value)::Match*>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 *v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;

  if (a5)
  {
    v7 = a5;
    while (v7 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = -a4;
      while (1)
      {
        v12 = &result[v10];
        if (*((_QWORD *)a2 + 5) < *(_QWORD *)&result[v10 + 40])
          break;
        v10 += 48;
        v71 = __CFADD__(v11++, 1);
        if (v71)
          return result;
      }
      v13 = -v11;
      if (-v11 >= v7)
      {
        if (v11 == -1)
        {
          v84 = (__int128 *)&result[v10];
          v105 = v84[1];
          v110 = v84[2];
          v101 = *v84;
          v85 = *(_OWORD *)a2;
          v86 = *((_OWORD *)a2 + 2);
          v84[1] = *((_OWORD *)a2 + 1);
          v84[2] = v86;
          *v84 = v85;
          *((_OWORD *)a2 + 1) = v105;
          *((_OWORD *)a2 + 2) = v110;
          *(_OWORD *)a2 = v101;
          return result;
        }
        if (v11 > 0)
          v13 = 1 - v11;
        v23 = v13 >> 1;
        if (a3 == a2)
        {
          v25 = a3;
        }
        else
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
          v25 = a2;
          do
          {
            v26 = v24 >> 1;
            v27 = &v25[48 * (v24 >> 1)];
            v28 = *((_QWORD *)v27 + 5);
            v29 = v27 + 48;
            v24 += ~(v24 >> 1);
            if (v28 < *(_QWORD *)&result[48 * v23 + 40 + v10])
              v25 = v29;
            else
              v24 = v26;
          }
          while (v24);
        }
        v18 = &result[48 * v23 + v10];
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 4);
      }
      else
      {
        if (v7 >= 0)
          v14 = v7;
        else
          v14 = v7 + 1;
        v15 = v14 >> 1;
        if (v12 == a2)
        {
          v16 = &result[v10];
          v18 = a2;
        }
        else
        {
          v16 = &result[v10];
          v17 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 4);
          v18 = &result[v10];
          do
          {
            v19 = v17 >> 1;
            v20 = &v18[48 * (v17 >> 1)];
            v21 = *((_QWORD *)v20 + 5);
            v22 = v20 + 48;
            v17 += ~(v17 >> 1);
            if (*(_QWORD *)&a2[48 * v15 + 40] < v21)
              v17 = v19;
            else
              v18 = v22;
          }
          while (v17);
        }
        v25 = &a2[48 * v15];
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v16) >> 4);
      }
      v30 = v25;
      v96 = a6;
      if (v18 != a2)
      {
        v30 = v18;
        if (a2 != v25)
        {
          if (v18 + 48 == a2)
          {
            v103 = *((_OWORD *)v18 + 1);
            v107 = *((_OWORD *)v18 + 2);
            v98 = *(_OWORD *)v18;
            v37 = (char *)(v25 - a2);
            v38 = a3;
            v91 = a7;
            v93 = v23;
            v39 = v15;
            memmove(v18, a2, v25 - a2);
            a7 = v91;
            v23 = v93;
            v15 = v39;
            a3 = v38;
            v30 = &v37[(_QWORD)v18];
            *(_OWORD *)v30 = v98;
            *((_OWORD *)v30 + 1) = v103;
            *((_OWORD *)v30 + 2) = v107;
          }
          else if (a2 + 48 == v25)
          {
            v30 = v18 + 48;
            v104 = *((_OWORD *)v25 - 2);
            v108 = *((_OWORD *)v25 - 1);
            v99 = *((_OWORD *)v25 - 3);
            if (v25 - 48 != v18)
            {
              v40 = a3;
              v92 = a7;
              v94 = v23;
              v41 = v15;
              memmove(v18 + 48, v18, v25 - 48 - v18);
              a7 = v92;
              v23 = v94;
              v15 = v41;
              a3 = v40;
            }
            *((_OWORD *)v18 + 1) = v104;
            *((_OWORD *)v18 + 2) = v108;
            *(_OWORD *)v18 = v99;
          }
          else
          {
            v31 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 4);
            if (v31 == 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 4))
            {
              v32 = 0;
              do
              {
                v33 = &a2[v32];
                v34 = &v18[v32];
                v102 = *(_OWORD *)&v18[v32 + 16];
                v106 = *(_OWORD *)&v18[v32 + 32];
                v97 = *(_OWORD *)&v18[v32];
                v35 = *(_OWORD *)&a2[v32];
                v36 = *(_OWORD *)&a2[v32 + 32];
                *((_OWORD *)v34 + 1) = *(_OWORD *)&a2[v32 + 16];
                *((_OWORD *)v34 + 2) = v36;
                *(_OWORD *)v34 = v35;
                *((_OWORD *)v33 + 1) = v102;
                *((_OWORD *)v33 + 2) = v106;
                *(_OWORD *)v33 = v97;
                if (&v18[v32 + 48] == a2)
                  break;
                v32 += 48;
              }
              while (v33 + 48 != v25);
              v30 = a2;
            }
            else
            {
              v42 = 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 4);
              v43 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 4);
              do
              {
                v44 = v43;
                v43 = v42;
                v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                v45 = &v18[48 * v43];
                do
                {
                  v46 = *((_OWORD *)v45 - 3);
                  v47 = *((_OWORD *)v45 - 2);
                  v48 = *((_OWORD *)v45 - 1);
                  v45 -= 48;
                  v109 = v48;
                  v100 = v46;
                  v49 = &v45[16 * ((a2 - v18) >> 4)];
                  v50 = v45;
                  do
                  {
                    v51 = v50;
                    v50 = v49;
                    v52 = *(_OWORD *)v49;
                    v53 = *((_OWORD *)v49 + 2);
                    *((_OWORD *)v51 + 1) = *((_OWORD *)v49 + 1);
                    *((_OWORD *)v51 + 2) = v53;
                    *(_OWORD *)v51 = v52;
                    v54 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v49) >> 4);
                    v55 = __OFSUB__(v31, v54);
                    v57 = v31 - v54;
                    v56 = (v57 < 0) ^ v55;
                    v49 = &v18[48 * v57];
                    if (v56)
                      v49 = &v50[16 * ((a2 - v18) >> 4)];
                  }
                  while (v49 != v45);
                  *((_OWORD *)v50 + 1) = v47;
                  *((_OWORD *)v50 + 2) = v109;
                  *(_OWORD *)v50 = v100;
                }
                while (v45 != v18);
              }
              v30 = &v18[16 * ((v25 - a2) >> 4)];
            }
          }
        }
      }
      a4 = -(v23 + v11);
      v58 = v7 - v15;
      if (v23 + v15 >= v7 - (v23 + v15) - v11)
      {
        v95 = v23;
        v61 = -(v23 + v11);
        v62 = v15;
        v59 = a7;
        v25 = v18;
        v58 = v62;
        a4 = v95;
        a3 = v30;
      }
      else
      {
        v59 = a7;
        v60 = a3;
        a3 = v60;
        v12 = v30;
      }
      v7 = v58;
      result = v12;
      a2 = v25;
      a6 = v96;
      a7 = v59;
      if (!v58)
        return result;
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        v75 = 0;
        do
        {
          v76 = &a6[v75];
          v77 = *(_OWORD *)&result[v75];
          v78 = *(_OWORD *)&result[v75 + 32];
          *((_OWORD *)v76 + 1) = *(_OWORD *)&result[v75 + 16];
          *((_OWORD *)v76 + 2) = v78;
          *(_OWORD *)v76 = v77;
          v75 += 48;
        }
        while (&result[v75] != a2);
        if (v75)
        {
          v79 = a6;
          while (a2 != a3)
          {
            if (*((_QWORD *)a2 + 5) >= *((_QWORD *)v79 + 5))
            {
              v80 = *(_OWORD *)v79;
              v81 = *((_OWORD *)v79 + 2);
              *((_OWORD *)result + 1) = *((_OWORD *)v79 + 1);
              *((_OWORD *)result + 2) = v81;
              *(_OWORD *)result = v80;
              v79 += 48;
            }
            else
            {
              v82 = *(_OWORD *)a2;
              v83 = *((_OWORD *)a2 + 2);
              *((_OWORD *)result + 1) = *((_OWORD *)a2 + 1);
              *((_OWORD *)result + 2) = v83;
              *(_OWORD *)result = v82;
              a2 += 48;
            }
            result += 48;
            if (&a6[v75] == v79)
              return result;
          }
          return (char *)memmove(result, v79, a6 - v79 + v75);
        }
      }
    }
    else if (a2 != a3)
    {
      v63 = 0;
      do
      {
        v64 = &a6[v63];
        v65 = *(_OWORD *)&a2[v63];
        v66 = *(_OWORD *)&a2[v63 + 32];
        *((_OWORD *)v64 + 1) = *(_OWORD *)&a2[v63 + 16];
        *((_OWORD *)v64 + 2) = v66;
        *(_OWORD *)v64 = v65;
        v63 += 48;
      }
      while (&a2[v63] != a3);
      if (v63)
      {
        v67 = &a6[v63];
        v68 = a3 - 48;
        while (a2 != result)
        {
          v69 = *((_QWORD *)v67 - 1);
          v70 = *((_QWORD *)a2 - 1);
          v71 = v69 >= v70;
          if (v69 >= v70)
            v72 = v67 - 48;
          else
            v72 = a2 - 48;
          if (v71)
            v67 -= 48;
          else
            a2 -= 48;
          v73 = *(_OWORD *)v72;
          v74 = *((_OWORD *)v72 + 2);
          *((_OWORD *)v68 + 1) = *((_OWORD *)v72 + 1);
          *((_OWORD *)v68 + 2) = v74;
          *(_OWORD *)v68 = v73;
          v68 -= 48;
          if (v67 == a6)
            return result;
        }
        v87 = 0;
        do
        {
          v88 = &v68[v87];
          v89 = *(_OWORD *)&v67[v87 - 48];
          v90 = *(_OWORD *)&v67[v87 - 16];
          *((_OWORD *)v88 + 1) = *(_OWORD *)&v67[v87 - 32];
          *((_OWORD *)v88 + 2) = v90;
          *(_OWORD *)v88 = v89;
          v87 -= 48;
        }
        while (&v67[v87] != a6);
      }
    }
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::SmallSetVector<mlir::Value,2u>>::erase(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  llvm **v6;
  llvm **v7;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  if (*a1 + 56 * v4 != a3)
    llvm::deallocate_buffer(*(llvm **)a2, (void *)(8 * *(unsigned int *)(a2 + 16)));
  if (v3 + 56 * v4 != a2)
  {
    v5 = v3 + 56 * v4;
    v6 = (llvm **)(v5 - 16);
    v7 = *(llvm ***)(v5 - 32);
    if (v6 != v7)
      free(v7);
    llvm::deallocate_buffer(*(v6 - 5), (void *)(8 * *((unsigned int *)v6 - 6)));
  }
  *((_DWORD *)a1 + 2) = -1227133513 * ((unint64_t)(a2 - v3) >> 3);
  return a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ConstantLike<Empty>]";
      v12 = 84;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[189];
}

uint64_t mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::MinimumAlignmentInterface>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MinimumAlignmentInterface]";
      v12 = 81;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::MinimumAlignmentInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[167];
}

mlir::GenericProgramPoint *mlir::detail::walk<mlir::ForwardIterator>(mlir::ForwardIterator *a1, mlir::Operation *a2, uint64_t a3, int a4)
{
  mlir::GenericProgramPoint *result;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *i;
  _QWORD *v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;

  if (!a4)
    ((void (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
  result = (mlir::GenericProgramPoint *)mlir::ForwardIterator::makeIterable(a1, a2);
  if (v8)
  {
    v9 = result;
    v10 = (mlir::GenericProgramPoint *)((char *)result + 24 * v8);
    do
    {
      for (i = (mlir::GenericProgramPoint *)*((_QWORD *)v9 + 1);
            i != v9;
            i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
      {
        v12 = (_QWORD *)((char *)i - 8);
        if (!i)
          v12 = 0;
        v13 = (mlir::GenericProgramPoint *)(v12 + 4);
        result = (mlir::GenericProgramPoint *)v12[5];
        if (result != (mlir::GenericProgramPoint *)(v12 + 4))
        {
          do
          {
            v14 = (mlir::GenericProgramPoint *)*((_QWORD *)result + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(result);
            mlir::detail::walk<mlir::ForwardIterator>();
            result = v14;
          }
          while (v14 != v13);
        }
      }
      v9 = (mlir::GenericProgramPoint *)((char *)v9 + 24);
    }
    while (v9 != v10);
  }
  if (a4 == 1)
    return (mlir::GenericProgramPoint *)((uint64_t (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
  return result;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorERZNS7_10AllocRange16getRangeForValueENS1_5ValueExE3__0NS1_25MinimumAlignmentInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t ***a1, uint64_t a2)
{
  uint64_t InterfaceFor;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t canMapOperands;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  void *__p;
  unsigned int v18;

  if (mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(a2))
  {
    if (a2)
    {
      InterfaceFor = mlir::OpInterface<mlir::MinimumAlignmentInterface,mlir::detail::MinimumAlignmentInterfaceInterfaceTraits>::getInterfaceFor(a2);
      v5 = *a1;
      v12[0] = a2;
      v12[1] = InterfaceFor;
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      {
        v6 = *(unsigned int *)(a2 + 68);
        if ((_DWORD)v6)
        {
          v7 = (uint64_t *)(*(_QWORD *)(a2 + 72) + 24);
          do
          {
            if (mlir::matchValueThrough<mlir::MemoryMapperInterface>(*v7, **v5))
            {
              v8 = *v5[1];
              canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v12);
              if (v8 < 0)
                v8 = -v8;
              v16 = 64;
              v15 = (void *)v8;
              if (canMapOperands >= 0)
                v10 = canMapOperands;
              else
                v10 = -canMapOperands;
              v14 = 64;
              v13 = (void *)v10;
              llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v15, (uint64_t)&v13, (uint64_t)&__p);
              if (v18 > 0x40)
              {
                v11 = *(_QWORD *)__p;
                operator delete[](__p);
              }
              else
              {
                v11 = (unint64_t)__p;
              }
              if (v14 >= 0x41 && v13)
                operator delete[](v13);
              if (v16 >= 0x41)
              {
                if (v15)
                  operator delete[](v15);
              }
              *v5[1] = v10 * v8 / v11;
            }
            v7 += 4;
            --v6;
          }
          while (v6);
        }
      }
    }
  }
}

uint64_t mlir::matchValueThrough<mlir::MemoryMapperInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  if (a1 == a2)
    return 1;
  result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
  if (result)
  {
    v4 = result;
    result = mlir::OpInterface<mlir::MemoryMapperInterface,mlir::detail::MemoryMapperInterfaceInterfaceTraits>::getInterfaceFor(result);
    if (result)
    {
      if ((*(_BYTE *)(v4 + 46) & 0x80) != 0 && (v5 = *(unsigned int *)(v4 + 68), (_DWORD)v5))
      {
        v6 = v5 - 1;
        v7 = (uint64_t *)(*(_QWORD *)(v4 + 72) + 24);
        do
        {
          v8 = v6;
          v9 = *v7;
          v7 += 4;
          result = mlir::matchValueThrough<mlir::MemoryMapperInterface>(v9, a2);
          if ((result & 1) != 0)
            break;
          v6 = v8 - 1;
        }
        while (v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::SetVector<mlir::detail::AllocRange,llvm::SmallVector<mlir::detail::AllocRange,0u>,llvm::DenseSet<mlir::detail::AllocRange,llvm::DenseMapInfo<mlir::detail::AllocRange,void>>,0u>::insert(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v2 = (unint64_t)a2;
  v17 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::LookupBucketFor<mlir::detail::AllocRange>((uint64_t *)a1, a2, &v17);
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::InsertIntoBucketImpl<mlir::detail::AllocRange>(a1, v2, (unint64_t *)v2, v17);
    v6 = *(_OWORD *)v2;
    v7 = *(_OWORD *)(v2 + 16);
    v5[4] = *(_QWORD *)(v2 + 32);
    *(_OWORD *)v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    v8 = a1 + 24;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(unsigned int *)(a1 + 32);
    if (v10 >= *(_DWORD *)(a1 + 36))
    {
      v15 = v10 + 1;
      if (v9 <= v2 && v9 + 40 * v10 > v2)
      {
        v16 = v2 - v9;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 40), v15, 40);
        v9 = *(_QWORD *)(a1 + 24);
        v2 = v9 + v16;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 40), v15, 40);
        v9 = *(_QWORD *)(a1 + 24);
      }
    }
    v11 = v9 + 40 * *(unsigned int *)(a1 + 32);
    v12 = *(_OWORD *)v2;
    v13 = *(_OWORD *)(v2 + 16);
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(v2 + 32);
    *(_OWORD *)v11 = v12;
    *(_OWORD *)(v11 + 16) = v13;
    ++*(_DWORD *)(a1 + 32);
  }
  return v4 ^ 1u;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::LookupBucketFor<mlir::detail::AllocRange>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 40 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 40 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_6;
      }
      result = 0;
      if (v16)
        v13 = v16;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_6:
  *a3 = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::InsertIntoBucketImpl<mlir::detail::AllocRange>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::LookupBucketFor<mlir::detail::AllocRange>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char *llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  llvm *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char *v19;
  __int128 v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)llvm::allocate_buffer(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[40 * v10];
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
      do
      {
        *(_QWORD *)result = -4096;
        *(_OWORD *)(result + 8) = v12;
        *(_OWORD *)(result + 24) = v12;
        result += 40;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 40 * v3;
      v14 = v4;
      do
      {
        if ((*(_QWORD *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v21 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>,mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::LookupBucketFor<mlir::detail::AllocRange>((uint64_t *)a1, (unint64_t *)v14, &v21);
          v15 = (_OWORD *)v21;
          v16 = *(_OWORD *)v14;
          v17 = *((_OWORD *)v14 + 1);
          *(_QWORD *)(v21 + 32) = *((_QWORD *)v14 + 4);
          *v15 = v16;
          v15[1] = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm *)((char *)v14 + 40);
        v13 -= 40;
      }
      while (v13);
    }
    llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    v19 = &result[40 * v18];
    *(_QWORD *)&v20 = -1;
    *((_QWORD *)&v20 + 1) = -1;
    do
    {
      *(_QWORD *)result = -4096;
      *(_OWORD *)(result + 8) = v20;
      *(_OWORD *)(result + 24) = v20;
      result += 40;
    }
    while (result != v19);
  }
  return result;
}

uint64_t llvm::DenseMap<mlir::detail::AllocRange,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::detail::AllocRange,void>,llvm::detail::DenseSetPair<mlir::detail::AllocRange>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  uint64_t v6;
  __int128 v7;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(40 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = *(_QWORD *)result + 40 * v1;
    *(_QWORD *)&v7 = -1;
    *((_QWORD *)&v7 + 1) = -1;
    do
    {
      *(_QWORD *)v5 = -4096;
      *(_OWORD *)((char *)v5 + 8) = v7;
      *(_OWORD *)((char *)v5 + 24) = v7;
      v5 = (llvm *)((char *)v5 + 40);
    }
    while (v5 != (llvm *)v6);
  }
  return result;
}

void std::default_delete<mlir::Liveness>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  llvm *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    v4 = *(llvm **)(a2 + 8);
    if (v3)
    {
      v5 = 336 * v3;
      do
      {
        if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v6 = (void *)*((_QWORD *)v4 + 23);
          if (v6 != *((void **)v4 + 22))
            free(v6);
          v7 = (void *)*((_QWORD *)v4 + 3);
          if (v7 != *((void **)v4 + 2))
            free(v7);
        }
        v4 = (llvm *)((char *)v4 + 336);
        v5 -= 336;
      }
      while (v5);
      v4 = *(llvm **)(a2 + 8);
      v8 = 336 * *(unsigned int *)(a2 + 24);
    }
    else
    {
      v8 = 0;
    }
    llvm::deallocate_buffer(v4, (void *)v8);
  }
}

void sub_18014D120()
{
  void *v0;

  operator delete(v0);
}

_QWORD *mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>,mlir::Value>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  char v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 120);
  v3 = a2 & 0xFFFFFFFFFFFFFFF9 | 4;
  v9 = v3;
  v10 = mlir::TypeID::get<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>();
  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::LookupBucketFor<std::pair<mlir::ProgramPoint,mlir::TypeID>>(v2, (uint64_t *)&v9, &v8);
  v5 = v8;
  if ((v4 & 1) != 0)
  {
    result = (_QWORD *)v8[2];
    if (result)
      return result;
  }
  else
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>((uint64_t)v2, (uint64_t)&v9, (uint64_t *)&v9, v8);
    *v5 = v9;
    v5[1] = v10;
    v5[2] = 0;
  }
  result = operator new(0x248uLL);
  result[7] = result + 11;
  result[5] = result + 7;
  result[6] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  result[8] = result + 11;
  result[9] = 4;
  *((_DWORD *)result + 20) = 0;
  result[15] = result + 17;
  result[16] = 0x400000000;
  *result = off_1E0E4EF80;
  result[1] = v3;
  result[21] = result + 23;
  result[22] = 0xA00000000;
  v7 = v5[2];
  v5[2] = result;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return (_QWORD *)v5[2];
  }
  return result;
}

uint64_t (*mlir::TypeID::get<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>>())()
{
  unsigned __int8 v0;
  uint64_t (**v1)();
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v0 & 1) == 0)
  {
    v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>]";
      v12 = 109;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    }
  }
  return v1[389];
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::LookupBucketFor<std::pair<mlir::ProgramPoint,mlir::TypeID>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((0x2500000000 * *a2) | (v6 >> 4) ^ (v6 >> 9))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 24 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v5 == *v13 && v6 == v14)
    {
      result = 1;
      *a3 = v13;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v15 != -4096 || v14 != -4096)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v14 == -8192;
        if (v20 && v15 == -8192)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v22 & v11));
        v15 = *v13;
        v14 = v13[1];
        if (v5 == *v13 && v6 == v14)
        {
          *a3 = v13;
          return result;
        }
      }
      result = 0;
      if (v17)
        v13 = v17;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::LookupBucketFor<std::pair<mlir::ProgramPoint,mlir::TypeID>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int64x2_t *v13;
  unint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  int64x2_t *v17;
  int64x2_t *v18;
  int64x2_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 3 * v3;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::moveFromOldBuckets(a1, v4, &v4[v10]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(v10 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 24 * v11 - 24;
    if (v12 < 0x18)
    {
      v13 = result;
LABEL_12:
      v18 = (int64x2_t *)((char *)result + 24 * v11);
      v19 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v13 = v19;
        v13 = (int64x2_t *)((char *)v13 + 24);
      }
      while (v13 != v18);
      return result;
    }
    v14 = v12 / 0x18 + 1;
    v13 = (int64x2_t *)((char *)result + 24 * (v14 & 0x1FFFFFFFFFFFFFFELL));
    v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v16 = v14 & 0x1FFFFFFFFFFFFFFELL;
    v17 = result;
    do
    {
      *v17 = v15;
      *(int64x2_t *)((char *)v17 + 24) = v15;
      v17 += 3;
      v16 -= 2;
    }
    while (v16);
    if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6 - 24;
    if (v8 < 0x18)
    {
      v9 = *(int64x2_t **)result;
LABEL_7:
      v14 = (int64x2_t *)((char *)v7 + 24 * v6);
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v9 = v15;
        v9 = (int64x2_t *)((char *)v9 + 24);
      }
      while (v9 != v14);
      goto LABEL_11;
    }
    v10 = v8 / 0x18 + 1;
    v9 = (int64x2_t *)((char *)v7 + 24 * (v10 & 0x1FFFFFFFFFFFFFFELL));
    v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v12 = v10 & 0x1FFFFFFFFFFFFFFELL;
    v13 = *(int64x2_t **)result;
    do
    {
      *v13 = v11;
      *(int64x2_t *)((char *)v13 + 24) = v11;
      v13 += 3;
      v12 -= 2;
    }
    while (v12);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_11:
  while (a2 != a3)
  {
    v16 = a2[1];
    if ((*a2 != -4096 || v16 != -4096) && (*a2 != -8192 || v16 != -8192))
    {
      v19 = 0;
      llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::LookupBucketFor<std::pair<mlir::ProgramPoint,mlir::TypeID>>((uint64_t *)v5, a2, &v19);
      v17 = v19;
      *v19 = *a2;
      v17[1] = a2[1];
      v18 = a2[2];
      a2[2] = 0;
      v17[2] = v18;
      ++*(_DWORD *)(v5 + 8);
      result = a2[2];
      a2[2] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 3;
  }
  return result;
}

void mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::~Lattice(mlir::AnalysisState *this)
{
  char *v2;
  char *v3;
  void *v4;

  *(_QWORD *)this = off_1E0E4EF80;
  v2 = (char *)*((_QWORD *)this + 21);
  if (v2 != (char *)this + 184)
    free(v2);
  *(_QWORD *)this = &unk_1E0E4EE80;
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 != (char *)this + 136)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4 != *((void **)this + 7))
    free(v4);
  mlir::AnalysisState::~AnalysisState(this);
}

{
  char *v2;
  char *v3;
  void *v4;

  *(_QWORD *)this = off_1E0E4EF80;
  v2 = (char *)*((_QWORD *)this + 21);
  if (v2 != (char *)this + 184)
    free(v2);
  *(_QWORD *)this = &unk_1E0E4EE80;
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 != (char *)this + 136)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4 != *((void **)this + 7))
    free(v4);
  mlir::AnalysisState::~AnalysisState(this);
}

void sub_18014D860(void *__p)
{
  operator delete(__p);
}

llvm::raw_ostream *mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::dataflow::OffsetLatticeValue::print((llvm::raw_ostream *)(a1 + 168), a2);
}

uint64_t mlir::dataflow::Lattice<mlir::dataflow::OffsetLatticeValue>::meet()
{
  return 0;
}

uint64_t llvm::MapVector<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo,llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,llvm::SmallVector<std::pair<mlir::Value,mlir::dataflow::TensorAllocAnalysis::AllocInfo>,0u>>::try_emplace<mlir::dataflow::TensorAllocAnalysis::AllocInfo>(uint64_t a1, unint64_t *a2, __int128 *a3)
{
  unint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;

  v6 = *a2;
  v20 = 0;
  v21 = v6;
  LODWORD(v22) = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v21, &v20) & 1) != 0)return *(_QWORD *)(a1 + 24) + 24 * *((unsigned int *)v20 + 2);
  v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v21, &v21, v20);
  *v8 = v21;
  *((_DWORD *)v8 + 2) = v22;
  v9 = (_QWORD *)(a1 + 24);
  v10 = *(unsigned int *)(a1 + 32);
  *((_DWORD *)v8 + 2) = v10;
  if (v10 >= *(_DWORD *)(a1 + 36))
  {
    v21 = *a2;
    v22 = *a3;
    v13 = v10 + 1;
    v14 = *v9 + 24 * (unint64_t)v10 > (unint64_t)&v21;
    if (*v9 <= (unint64_t)&v21 && v14)
    {
      v19 = (char *)&v21 - *v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v13, 24);
      v15 = *(_QWORD *)(a1 + 24);
      v16 = (unint64_t *)&v19[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v13, 24);
      v15 = *(_QWORD *)(a1 + 24);
      v16 = &v21;
    }
    v17 = v15 + 24 * *(unsigned int *)(a1 + 32);
    v18 = *(_OWORD *)v16;
    *(_QWORD *)(v17 + 16) = v16[2];
    *(_OWORD *)v17 = v18;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 24) + 24 * v10;
    *(_QWORD *)v11 = *a2;
    *(_OWORD *)(v11 + 8) = *a3;
  }
  v12 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v12;
  return *v9 + 24 * v12 - 24;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 16 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 16 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_6;
      }
      result = 0;
      if (v16)
        v13 = v16;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_6:
  *a3 = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  llvm *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v17 = 16 * v3;
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          v19 = v25;
          *v25 = *(_QWORD *)v18;
          *((_DWORD *)v19 + 2) = *((_DWORD *)v18 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 16);
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = result + 2;
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v24 = &result[2 * v20];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t mlir::Pass::initialize(mlir::Pass *this, MLIRContext *a2)
{
  return 1;
}

BOOL mlir::OperationPass<mlir::func::FuncOp>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  const void *AttrData;
  size_t v4;
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 8);
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(_BYTE *)(a1 + 32) || v4 != *(_QWORD *)(a1 + 24))
    return 0;
  if (v4)
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  return 1;
}

BOOL llvm::cl::OptionValueCopy<long long>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence();
}

BOOL mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  uint64_t i;
  uint64_t v14;
  _QWORD v15[4];
  _QWORD v16[2];

  if (*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
    v11 = *(_QWORD *)(a1 + 128);
    for (i = *(_QWORD *)(a1 + 136); i != v11; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    *(_QWORD *)(a1 + 136) = v11;
    *(_BYTE *)(a1 + 176) = 0;
  }
  *(_BYTE *)(a1 + 256) = 1;
  v14 = a1;
  v15[0] = a1 + 264;
  v16[0] = a3;
  v16[1] = a4;
  v15[1] = a1;
  v15[2] = v16;
  v15[3] = &v14;
  return mlir::detail::pass_options::parseCommaSeparatedList(a1, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, unint64_t))llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>::callback_fn<mlir::LogicalResult mlir::detail::pass_options::parseCommaSeparatedList<llvm::cl::parser<std::string>,mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(std::string const&)#1}>(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::cl::parser<std::string> &,mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(std::string const&)#1} &&)::{lambda(llvm::StringRef)#1}>, (uint64_t)v15) == 0;
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

void mlir::Pass::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(_QWORD *a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(a1);
  operator delete(v1);
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 208, a1);
}

llvm::raw_ostream *llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 208), (const llvm::cl::Option *)a1, a2);
}

void llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::setDefault(_QWORD *a1)
{
  uint64_t v2;
  std::string *v3;
  std::string *i;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;

  v2 = (uint64_t)(a1 + 16);
  v3 = (std::string *)a1[16];
  a1[24] = a1[23];
  for (i = (std::string *)a1[17]; i != v3; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  a1[17] = v3;
  v5 = a1[19];
  v6 = a1[20];
  while (v5 != v6)
  {
    v7 = (__int128 *)(v5 + 8);
    if ((unint64_t)v3 >= a1[18])
    {
      v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v2, (uint64_t)v7);
    }
    else
    {
      if (*(char *)(v5 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *v7;
        v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
        *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v8;
      }
      ++v3;
    }
    a1[17] = v3;
    v5 += 40;
  }
}

llvm::raw_ostream *mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::print(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  size_t v11;
  uint64_t i;
  int v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;

  if (*((_QWORD *)result + 17) != *((_QWORD *)result + 16))
  {
    v3 = result;
    v4 = (const void *)*((_QWORD *)result + 2);
    v5 = *((_QWORD *)result + 3);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
    if (v5 <= *((_QWORD *)this + 3) - (_QWORD)result)
    {
      if (v5)
      {
        memcpy(result, v4, v5);
        result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + v5);
        *((_QWORD *)this + 4) = result;
      }
      v6 = this;
    }
    else
    {
      v6 = llvm::raw_ostream::write(this, (const char *)v4, v5);
      result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
    }
    if ((unint64_t)result >= *((_QWORD *)v6 + 3))
    {
      result = llvm::raw_ostream::write(v6, 61);
    }
    else
    {
      *((_QWORD *)v6 + 4) = (char *)result + 1;
      *(_BYTE *)result = 61;
    }
    v8 = *((_QWORD *)v3 + 16);
    v7 = *((_QWORD *)v3 + 17);
    if (v8 != v7)
    {
      v9 = *(char *)(v8 + 23);
      v10 = v9 >= 0 ? (const char *)*((_QWORD *)v3 + 16) : *(const char **)v8;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(_QWORD *)(v8 + 8);
      result = llvm::raw_ostream::write(this, v10, v11);
      for (i = v8 + 24; i != v7; i += 24)
      {
        v16 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v16)
        {
          llvm::raw_ostream::write(this, ",", 1uLL);
        }
        else
        {
          *v16 = 44;
          ++*((_QWORD *)this + 4);
        }
        v13 = *(char *)(i + 23);
        if (v13 >= 0)
          v14 = (const char *)i;
        else
          v14 = *(const char **)i;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(i + 23);
        else
          v15 = *(_QWORD *)(i + 8);
        result = llvm::raw_ostream::write(this, v14, v15);
      }
    }
  }
  return result;
}

void mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string const*,std::string const*>(a1 + 128, *(std::string **)(a2 - 120), *(std::string **)(a2 - 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 - 112) - *(_QWORD *)(a2 - 120)) >> 3));
  *(_BYTE *)(a1 + 256) = 1;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 8);
}

_QWORD *`non-virtual thunk to'mlir::Pass::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(uint64_t a1)
{
  return llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)(a1 - 248));
}

void `non-virtual thunk to'mlir::Pass::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(uint64_t a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)(a1 - 248));
  operator delete(v1);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::print((llvm::raw_ostream *)(a1 - 248), a2);
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::getOption(uint64_t a1)
{
  return a1 - 248;
}

void `non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string const*,std::string const*>(a1 - 120, *(std::string **)(a2 - 120), *(std::string **)(a2 - 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 - 112) - *(_QWORD *)(a2 - 120)) >> 3));
  *(_BYTE *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
}

void mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(_QWORD *a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(a1);
  operator delete(v1);
}

_QWORD *`non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(uint64_t a1)
{
  return llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)(a1 - 248));
}

void `non-virtual thunk to'mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::~ListOption(uint64_t a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)(a1 - 248));
  operator delete(v1);
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  uint64_t v10;
  uint64_t i;
  __int128 *p_dst;
  size_t v13;
  size_t v14;
  unint64_t v15;
  __int128 v16;
  std::string *v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  void *__p[2];
  unint64_t v41;
  __int128 __dst;
  unint64_t v43;

  __p[0] = 0;
  __p[1] = 0;
  v41 = 0;
  if (*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
    v10 = *(_QWORD *)(a1 + 128);
    for (i = *(_QWORD *)(a1 + 136); i != v10; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    *(_QWORD *)(a1 + 136) = v10;
    *(_BYTE *)(a1 + 176) = 0;
  }
  if (!__src)
  {
    __dst = 0uLL;
    v43 = 0;
    goto LABEL_20;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_51;
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v43 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_17;
  }
  HIBYTE(v43) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_17:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
LABEL_20:
  *(_OWORD *)__p = __dst;
  v41 = v43;
  v15 = *(_QWORD *)(a1 + 136);
  if (v15 >= *(_QWORD *)(a1 + 144))
  {
    v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 128, (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 136), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v16 = *(_OWORD *)__p;
      *(_QWORD *)(v15 + 16) = v41;
      *(_OWORD *)v15 = v16;
    }
    v17 = (std::string *)(v15 + 24);
  }
  *(_QWORD *)(a1 + 136) = v17;
  *(_WORD *)(a1 + 12) = a2;
  v19 = *(char **)(a1 + 192);
  v18 = *(_QWORD *)(a1 + 200);
  if ((unint64_t)v19 >= v18)
  {
    v21 = *(char **)(a1 + 184);
    v22 = (v19 - v21) >> 2;
    v23 = v22 + 1;
    if (!((unint64_t)(v22 + 1) >> 62))
    {
      v24 = v18 - (_QWORD)v21;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 62)
          goto LABEL_53;
        v26 = operator new(4 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *v27 = a2;
      v20 = v27 + 1;
      if (v19 != v21)
      {
        v29 = v19 - v21 - 4;
        if (v29 < 0x2C)
          goto LABEL_56;
        if ((unint64_t)(v21 - v26) < 0x20)
          goto LABEL_56;
        v30 = (v29 >> 2) + 1;
        v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        v32 = &v19[-v31];
        v27 = (_DWORD *)((char *)v27 - v31);
        v33 = &v26[4 * v22 - 16];
        v34 = v19 - 16;
        v35 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 8;
        }
        while (v35);
        v19 = v32;
        if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_56:
          do
          {
            v37 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *--v27 = v37;
          }
          while (v19 != v21);
        }
      }
      *(_QWORD *)(a1 + 184) = v27;
      *(_QWORD *)(a1 + 192) = v20;
      *(_QWORD *)(a1 + 200) = v28;
      if (v21)
        operator delete(v21);
      goto LABEL_47;
    }
LABEL_51:
    abort();
  }
  *(_DWORD *)v19 = a2;
  v20 = v19 + 4;
LABEL_47:
  *(_QWORD *)(a1 + 192) = v20;
  v38 = *(_QWORD *)(a1 + 240);
  if (!v38)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v38 + 48))(v38, __p);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  return 0;
}

void llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(_QWORD *a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(a1);
  operator delete(v1);
}

_QWORD *std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4FD68;
  return result;
}

void std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4FD68;
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  std::string *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  void **v14;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[24 * v8];
  v12 = v10 + 1;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v3 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v13;
      --v10;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 3;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v14 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    while (v14 != v2)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t llvm::cl::OptionValueCopy<std::string>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  if (!*(_BYTE *)(a2 + 32) || !*(_BYTE *)(a1 + 32))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 8);
  if (v5 >= 0)
    v7 = (unsigned __int8 *)(a2 + 8);
  else
    v7 = *(unsigned __int8 **)(a2 + 8);
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v8 = v2 - 1;
  do
  {
    v10 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v9 = v10;
    v12 = *v7++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t mlir::detail::pass_options::parseCommaSeparatedList<llvm::cl::parser<std::string>,mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(std::string const&)#1}>(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::cl::parser<std::string> &,mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(std::string const&)#1} &&)::{lambda(llvm::StringRef)#1}::operator()(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  std::string *v13;
  char v14;
  void *__p[2];
  unint64_t v17;
  __int128 __dst;
  unint64_t v19;

  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  if (!__src)
  {
    __dst = 0uLL;
    v19 = 0;
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v19 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v19) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_10:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
LABEL_13:
  *(_OWORD *)__p = __dst;
  v17 = v19;
  v9 = **(_QWORD **)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 136);
  if (v10 >= *(_QWORD *)(v9 + 144))
  {
    v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v9 + 128, (uint64_t)__p);
    v14 = HIBYTE(v17);
    *(_QWORD *)(v9 + 136) = v13;
    if (v14 < 0)
LABEL_17:
      operator delete(__p[0]);
  }
  else
  {
    v11 = HIBYTE(v17);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(v9 + 136), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v12 = *(_OWORD *)__p;
      *(_QWORD *)(v10 + 16) = v17;
      *(_OWORD *)v10 = v12;
    }
    *(_QWORD *)(v9 + 136) = v10 + 24;
    if (v11 < 0)
      goto LABEL_17;
  }
  return 1;
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string const*,std::string const*>(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::string *v23;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        v18 = *(std::string **)a1;
      }
      else
      {
        v18 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v18;
        }
        while (v6 != a3);
        v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v18)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        --v12;
      }
      *(_QWORD *)(a1 + 8) = v18;
    }
    else
    {
      v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        v9 = *(std::string **)(a1 + 8);
      }
      v15 = v9;
      if (v13 != a3)
      {
        v15 = v9;
        v16 = v9;
        do
        {
          if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v16, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
          }
          else
          {
            v17 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
            v16->__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
          }
          ++v13;
          ++v16;
          ++v15;
        }
        while (v13 != a3);
      }
      *(_QWORD *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_46;
    v19 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v20 = 2 * v19;
    if (2 * v19 <= __sz)
      v20 = __sz;
    v21 = v19 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v20;
    if (v21 > 0xAAAAAAAAAAAAAAALL)
LABEL_46:
      abort();
    v22 = v21;
    v23 = (std::string *)operator new(24 * v21);
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v23;
    *(_QWORD *)(a1 + 16) = &v23[v22];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v23, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      }
      ++v6;
      ++v23;
    }
    *(_QWORD *)(a1 + 8) = v23;
  }
}

_QWORD *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, int **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[3];
  _QWORD *v37;
  const void *v38[3];
  const void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35[0] = a3;
  v35[1] = a4;
  v38[0] = a2;
  v8 = llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)a1, (uint64_t)v35, v38, a5, a6);
  *(_QWORD *)(v8 + 200) = &unk_1E0E4E2C8;
  v9 = v8 + 200;
  *(_BYTE *)(v8 + 208) = 0;
  *(_QWORD *)v8 = off_1E0E4E248;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    v14 = (uint64_t *)a2[20];
    v15 = v11 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 != v14)
    {
      v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v14 - v19) < 0x20)
        goto LABEL_38;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      v20 = (uint64_t *)((char *)v20 - v24);
      v25 = &v19[8 * v15 - 16];
      v26 = v11 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *--v12;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v11 = v9;
    v13 = v11 + 1;
  }
  a2[21] = v13;
  v36[0] = off_1E0E516C0;
  v36[1] = a1;
  v37 = v36;
  v38[0] = off_1E0E516C0;
  v39 = v38;
  v38[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v38, a1 + 21);
  v30 = v39;
  if (v39 == v38)
  {
    v31 = 4;
    v30 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_28;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_28:
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v33 = 5;
LABEL_32:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = llvm::cl::parser<long long>::parse(a1 + 160, (_QWORD *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  *(_QWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::getValueExpectedFlagDefault()
{
  return 2;
}

_QWORD *mlir::Pass::Option<long long,llvm::cl::parser<long long>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_1E0E236C0;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::Pass::Option<long long,llvm::cl::parser<long long>>::~Option(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = off_1E0E236C0;
  v2 = __p + 168;
  v3 = (char *)*((_QWORD *)__p + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, a2);
}

void llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 152) || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 128))
  {
    v3 = *(_QWORD *)(a1 + 128);
    v4 = *(_QWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 152);
    v5[0] = &off_1E0E22FC8;
    v5[1] = v4;
    llvm::cl::parser<long long>::printOptionDiff((llvm *)(a1 + 160), a1, v3, (uint64_t)v5, a2);
  }
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::setDefault(uint64_t result)
{
  if (*(_BYTE *)(result + 152))
    *(_QWORD *)(result + 128) = *(_QWORD *)(result + 144);
  else
    *(_QWORD *)(result + 128) = 0;
  return result;
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::print(_QWORD *a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v4 = (const void *)a1[2];
  v5 = a1[3];
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  return llvm::raw_ostream::operator<<(this, a1[16]);
}

uint64_t mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 128) = *(_QWORD *)(a2 - 72);
  *(_BYTE *)(result + 208) = *(_BYTE *)(a2 + 8);
  return result;
}

void `non-virtual thunk to'mlir::Pass::Option<long long,llvm::cl::parser<long long>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 200) = off_1E0E236C0;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_1E0E23930;
  v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112))
    free(v5);
  v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120))
    free(v6);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_QWORD *)(a1 - 200) = off_1E0E236C0;
  v2 = (void *)(a1 - 200);
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_1E0E23930;
  v6 = *(void **)(a1 - 104);
  if (v6 != *(void **)(a1 - 112))
    free(v6);
  v7 = *(void **)(a1 - 136);
  if (v7 != (void *)(a1 - 120))
    free(v7);
  operator delete(v2);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v4 = *(const void **)(a1 - 184);
  v5 = *(_QWORD *)(a1 - 176);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  return llvm::raw_ostream::operator<<(this, *(_QWORD *)(a1 - 72));
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::getOption(uint64_t a1)
{
  return a1 - 200;
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result - 72) = *(_QWORD *)(a2 - 72);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FC8;
  *(_QWORD *)a1 = off_1E0E236C0;
  *(_QWORD *)(a1 + 160) = &unk_1E0E23BF8;
  *(_QWORD *)(a1 + 168) = off_1E0E4FC28;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_1E0E236C0;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::~Option(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = off_1E0E236C0;
  v2 = __p + 168;
  v3 = (char *)*((_QWORD *)__p + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

void `non-virtual thunk to'mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 200) = off_1E0E236C0;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_1E0E23930;
  v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112))
    free(v5);
  v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120))
    free(v6);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_QWORD *)(a1 - 200) = off_1E0E236C0;
  v2 = (void *)(a1 - 200);
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_1E0E23930;
  v6 = *(void **)(a1 - 104);
  if (v6 != *(void **)(a1 - 112))
    free(v6);
  v7 = *(void **)(a1 - 136);
  if (v7 != (void *)(a1 - 120))
    free(v7);
  operator delete(v2);
}

__n128 llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5)
{
  const void *v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v9 = *a3;
  v10 = *(_QWORD *)(a1 + 96);
  if (v10 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v9);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v10 + 8 * v13) = v9;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v9)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v9;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = **a5;
  *(_QWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = v12;
  return result;
}

_QWORD *llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_1E0E236C0;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = off_1E0E236C0;
  v2 = __p + 168;
  v3 = (char *)*((_QWORD *)__p + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

_QWORD *std::__function::__func<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1},std::allocator<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1}>,void ()(long long const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4FC28;
  return result;
}

void std::__function::__func<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1},std::allocator<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::{lambda(long long const&)#1}>,void ()(long long const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4FC28;
}

_QWORD *std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E516C0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E516C0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEEclESR_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 208) = 1;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, _BYTE **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[3];
  _QWORD *v37;
  const void *v38[3];
  const void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35[0] = a3;
  v35[1] = a4;
  v38[0] = a2;
  v8 = llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>>((uint64_t)a1, (uint64_t)v35, v38, a5, a6);
  *(_QWORD *)(v8 + 192) = &unk_1E0E4E148;
  v9 = v8 + 192;
  *(_BYTE *)(v8 + 200) = 0;
  *(_QWORD *)v8 = &off_1E0E4E0C8;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    v14 = (uint64_t *)a2[20];
    v15 = v11 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 != v14)
    {
      v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v14 - v19) < 0x20)
        goto LABEL_38;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      v20 = (uint64_t *)((char *)v20 - v24);
      v25 = &v19[8 * v15 - 16];
      v26 = v11 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *--v12;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v11 = v9;
    v13 = v11 + 1;
  }
  a2[21] = v13;
  v36[0] = off_1E0E51510;
  v36[1] = a1;
  v37 = v36;
  v38[0] = off_1E0E51510;
  v39 = v38;
  v38[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v38, a1 + 20);
  v30 = v39;
  if (v39 == v38)
  {
    v31 = 4;
    v30 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_28;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_28:
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v33 = 5;
LABEL_32:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

_QWORD *mlir::Pass::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_1E0E23520;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::Pass::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &unk_1E0E23520;
  v2 = __p + 160;
  v3 = (char *)*((_QWORD *)__p + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  BOOL v8;
  size_t v9;
  const char *v10;
  void *v11;
  llvm::raw_ostream *result;

  v4 = *(const void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  v8 = *(_BYTE *)(a1 + 128) == 0;
  if (*(_BYTE *)(a1 + 128))
    v9 = 4;
  else
    v9 = 5;
  if (v8)
    v10 = "false";
  else
    v10 = "true";
  v11 = (void *)*((_QWORD *)this + 4);
  if (v9 > *((_QWORD *)this + 3) - (_QWORD)v11)
    return llvm::raw_ostream::write(this, v10, v9);
  result = (llvm::raw_ostream *)memcpy(v11, v10, v9);
  *((_QWORD *)this + 4) += v9;
  return result;
}

uint64_t mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 128) = *(_BYTE *)(a2 - 64);
  *(_BYTE *)(result + 200) = *(_BYTE *)(a2 + 8);
  return result;
}

void `non-virtual thunk to'mlir::Pass::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_1E0E23520;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_1E0E23930;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_QWORD *)(a1 - 192) = &unk_1E0E23520;
  v2 = (void *)(a1 - 192);
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_1E0E23930;
  v6 = *(void **)(a1 - 96);
  if (v6 != *(void **)(a1 - 104))
    free(v6);
  v7 = *(void **)(a1 - 128);
  if (v7 != (void *)(a1 - 112))
    free(v7);
  operator delete(v2);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::print(a1 - 192, a2);
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::getOption(uint64_t a1)
{
  return a1 - 192;
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result - 64) = *(_BYTE *)(a2 - 64);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, _BYTE **a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_1E0E23520;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &unk_1E0E23520;
  v2 = __p + 160;
  v3 = (char *)*((_QWORD *)__p + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

void `non-virtual thunk to'mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_1E0E23520;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_1E0E23930;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_QWORD *)(a1 - 192) = &unk_1E0E23520;
  v2 = (void *)(a1 - 192);
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_1E0E23930;
  v6 = *(void **)(a1 - 96);
  if (v6 != *(void **)(a1 - 104))
    free(v6);
  v7 = *(void **)(a1 - 128);
  if (v7 != (void *)(a1 - 112))
    free(v7);
  operator delete(v2);
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, _BYTE **a5)
{
  const void *v9;
  uint64_t v10;
  __n128 result;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v9 = *a3;
  v10 = *(_QWORD *)(a1 + 96);
  if (v10 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v9);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v10 + 8 * v13) = v9;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v9)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v9;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v12;
  return result;
}

BOOL llvm::cl::OptionValueCopy<BOOL>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 9) && *(_BYTE *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

_QWORD *std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4FAF8;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4FAF8;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKbEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51510;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKbEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51510;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKbEEclESR_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 200) = 1;
  return result;
}

void mlir::Pass::~Pass(mlir::Pass *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  char *v7;
  char *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &unk_1E0E4C560;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {
    *((_QWORD *)this + 40) = v2;
    operator delete(v2);
  }
  if (*((_DWORD *)this + 73))
  {
    v3 = *((unsigned int *)this + 72);
    if ((_DWORD)v3)
    {
      v4 = 0;
      do
      {
        v5 = *(llvm **)(*((_QWORD *)this + 35) + v4);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v4 += 8;
      }
      while (8 * v3 != v4);
    }
  }
  free(*((void **)this + 35));
  v7 = (char *)*((_QWORD *)this + 29);
  if (v7 != (char *)this + 248)
    free(v7);
  v8 = (char *)*((_QWORD *)this + 23);
  if (v8 != (char *)this + 200)
    free(v8);
  v9 = (void *)*((_QWORD *)this + 16);
  if (v9)
  {
    *((_QWORD *)this + 17) = v9;
    operator delete(v9);
  }
  if (*((_BYTE *)this + 120))
  {
    v10 = (void *)*((_QWORD *)this + 8);
    if (v10 != *((void **)this + 7))
      free(v10);
  }
}

void mlir::Operation::setAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AttrData;
  uint64_t v6;
  char v7;
  mlir::MLIRContext *Context;
  uint64_t v9;
  void *v10[2];
  _QWORD v11[10];

  v11[9] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  if (*(_BYTE *)(a1 + 47)
    && (AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9),
        mlir::Operation::getInherentAttr(a1, AttrData, v6),
        v7))
  {
    mlir::Operation::setInherentAttr(a1, v9, a3);
  }
  else
  {
    mlir::NamedAttrList::NamedAttrList(v10, *(_QWORD *)(a1 + 56));
    if (mlir::NamedAttrList::set((uint64_t)v10, v9, a3) != a3)
    {
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
      *(_QWORD *)(a1 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v10, Context);
    }
    if (v10[0] != v11)
      free(v10[0]);
  }
}

void mlir::DataFlowSolver::~DataFlowSolver(mlir::DataFlowSolver *this)
{
  unsigned int v2;
  llvm *v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)this + 34);
  v3 = (llvm *)*((_QWORD *)this + 15);
  if (v2)
  {
    v4 = (char *)v3 + 24 * v2;
    v5 = (uint64_t *)((char *)v3 + 16);
    do
    {
      v7 = *(v5 - 2);
      v6 = *(v5 - 1);
      v8 = v5 - 2;
      if ((v7 != -4096 || v6 != -4096) && (v7 != -8192 || v6 != -8192))
      {
        v9 = *v5;
        *v5 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      v5 += 3;
    }
    while (v8 + 3 != (uint64_t *)v4);
    v3 = (llvm *)*((_QWORD *)this + 15);
    v10 = 24 * *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v10);
}

uint64_t std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL mlir::CallGraphNode::isExternal(mlir::CallGraphNode *this)
{
  return *(_QWORD *)this == 0;
}

uint64_t mlir::CallGraphNode::getCallableRegion(mlir::CallGraphNode *this)
{
  return *(_QWORD *)this;
}

BOOL mlir::CallGraphNode::hasChildren(mlir::CallGraphNode *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v1 = *((unsigned int *)this + 14);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 6);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    v5 = v4 & 6;
    result = v5 == 4;
    v7 = v5 == 4 || v3 == 0;
    v3 -= 8;
  }
  while (!v7);
  return result;
}

uint64_t llvm::SetVector<mlir::CallGraphNode::Edge,llvm::SmallVector<mlir::CallGraphNode::Edge,4u>,llvm::SmallDenseSet<mlir::CallGraphNode::Edge,4u,mlir::CallGraphNode::EdgeKeyInfo>,0u>::insert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v11 = 0;
      goto LABEL_8;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = v5 - 1;
  v7 = v6 & (((unint64_t)*a2 >> 9) ^ *a2);
  v8 = (_QWORD *)(v4 + 8 * v7);
  v9 = *v8;
  if (*a2 == *v8)
    return 0;
  v14 = 0;
  v15 = 1;
  while (v9 != -2)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v9 == -16;
    if (v16)
      v14 = v8;
    v17 = v7 + v15++;
    v7 = v17 & v6;
    v8 = (_QWORD *)(v4 + 8 * v7);
    v9 = *v8;
    if (*a2 == *v8)
      return 0;
  }
  if (v14)
    v11 = v14;
  else
    v11 = v8;
LABEL_8:
  llvm::DenseMapBase<llvm::SmallDenseMap<mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,4u,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>,mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>::InsertIntoBucket<mlir::CallGraphNode::Edge const&,llvm::detail::DenseSetEmpty&>(a1, v11, a2);
  v12 = *a2;
  v13 = *(unsigned int *)(a1 + 48);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, (void *)(a1 + 56), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v13) = v12;
  ++*(_DWORD *)(a1 + 48);
  return 1;
}

void mlir::CallGraph::CallGraph(mlir::CallGraph *this, mlir::Operation *a2)
{
  llvm *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  llvm *v9[2];
  unsigned int v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 1;
  memset_pattern16((char *)this + 56, &unk_181232D70, 0x20uLL);
  *((_QWORD *)this + 11) = (char *)this + 104;
  *((_QWORD *)this + 12) = 0x400000000;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 1;
  memset_pattern16((char *)this + 152, &unk_181232D70, 0x20uLL);
  *((_QWORD *)this + 23) = (char *)this + 200;
  *((_QWORD *)this + 24) = 0x400000000;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  computeCallGraph((uint64_t)a2, (uint64_t *)this, (mlir::SymbolTableCollection *)v9, 0, 0);
  computeCallGraph((uint64_t)a2, (uint64_t *)this, (mlir::SymbolTableCollection *)v9, 0, 1);
  v4 = v9[0];
  if (v10)
  {
    v5 = (uint64_t *)((char *)v9[0] + 8);
    v6 = 16 * v10;
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
          llvm::deallocate_buffer(*(llvm **)(v7 + 8), (void *)(16 * *(unsigned int *)(v7 + 24)));
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    v4 = v9[0];
    v8 = (void *)(16 * v10);
  }
  else
  {
    v8 = 0;
  }
  llvm::deallocate_buffer(v4, v8);
}

uint64_t sub_180150CA8()
{
  uint64_t v0;

  return v0;
}

mlir::Region *computeCallGraph(uint64_t a1, uint64_t *a2, mlir::SymbolTableCollection *a3, mlir::CallGraphNode *a4, _BOOL4 a5)
{
  mlir::Region *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  mlir::Region *v14;
  mlir::Region *v15;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v17;
  __int128 v18;
  mlir::GenericProgramPoint *v19;
  __int128 v20;
  mlir::GenericProgramPoint *v21;
  uint64_t v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = (mlir::Region *)mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(a1);
  if (result)
  {
    if (a1)
    {
      result = (mlir::Region *)mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(a1);
      v11 = (uint64_t)result;
    }
    else
    {
      v11 = 0;
    }
    v12 = a1;
    if (!a4)
      goto LABEL_11;
  }
  else
  {
    v12 = 0;
    v11 = 0;
    if (!a4)
      goto LABEL_11;
  }
  if (a5 && v12)
  {
    *(_QWORD *)&v20 = (unint64_t)mlir::CallGraph::resolveCallable(a2, v12, v11, (uint64_t)a3) & 0xFFFFFFFFFFFFFFF9 | 2;
    return (mlir::Region *)llvm::SetVector<mlir::CallGraphNode::Edge,llvm::SmallVector<mlir::CallGraphNode::Edge,4u>,llvm::SmallDenseSet<mlir::CallGraphNode::Edge,4u,mlir::CallGraphNode::EdgeKeyInfo>,0u>::insert((uint64_t)a4 + 8, (uint64_t *)&v20);
  }
LABEL_11:
  if (v12)
    return result;
  result = (mlir::Region *)mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(a1);
  if (result)
  {
    if (a1)
      result = (mlir::Region *)mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(a1);
    else
      result = 0;
    *(_QWORD *)&v20 = a1;
    *((_QWORD *)&v20 + 1) = result;
    if (a1)
    {
      result = (mlir::Region *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v20);
      if (!result)
        return result;
      result = (mlir::Region *)mlir::CallGraph::getOrAddNode((mlir::CallGraph *)a2, result, a4);
      a4 = result;
    }
  }
  else
  {
    v20 = 0uLL;
  }
  v13 = *(unsigned int *)(a1 + 44);
  if ((v13 & 0x7FFFFF) != 0)
  {
    v14 = (mlir::Region *)(((a1 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(a1 + 40));
    v15 = (mlir::Region *)((char *)v14 + 24 * (v13 & 0x7FFFFF));
    do
    {
      mlir::Region::OpIterator::OpIterator(&v18, v14, 0);
      mlir::Region::OpIterator::OpIterator(&v22, v14, 1);
      result = v19;
      v21 = v19;
      v20 = v18;
      for (i = v23; v19 != i; result = v19)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(result);
        computeCallGraph(v17, (mlir::CallGraph *)a2, a3, a4, a5);
        mlir::Region::OpIterator::operator++((uint64_t *)&v18);
      }
      v14 = (mlir::Region *)((char *)v14 + 24);
    }
    while (v14 != v15);
  }
  return result;
}

uint64_t mlir::CallGraph::getOrAddNode(mlir::CallGraph *this, mlir::Region *a2, mlir::CallGraphNode *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  mlir::Region *v10;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v5 = llvm::MapVector<mlir::Region *,std::unique_ptr<mlir::CallGraphNode>,llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>,llvm::SmallVector<std::pair<mlir::Region *,std::unique_ptr<mlir::CallGraphNode>>,0u>>::operator[]((uint64_t)this, (uint64_t *)&v10);
  if (!*(_QWORD *)v5)
  {
    v6 = (unint64_t)operator new(0x60uLL);
    *(_QWORD *)v6 = v10;
    *(_QWORD *)(v6 + 8) = 1;
    memset_pattern16((void *)(v6 + 16), &unk_181232D70, 0x20uLL);
    *(_QWORD *)(v6 + 48) = v6 + 64;
    *(_QWORD *)(v6 + 56) = 0x400000000;
    *(_QWORD *)v5 = v6;
    v7 = v6 & 0xFFFFFFFFFFFFFFF9;
    if (a3)
    {
      v8 = (char *)a3 + 8;
      v7 |= 4uLL;
    }
    else
    {
      v8 = (char *)this + 48;
    }
    v11[0] = v7;
    llvm::SetVector<mlir::CallGraphNode::Edge,llvm::SmallVector<mlir::CallGraphNode::Edge,4u>,llvm::SmallDenseSet<mlir::CallGraphNode::Edge,4u,mlir::CallGraphNode::EdgeKeyInfo>,0u>::insert((uint64_t)v8, v11);
  }
  return *(_QWORD *)v5;
}

uint64_t llvm::MapVector<mlir::Region *,std::unique_ptr<mlir::CallGraphNode>,llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>,llvm::SmallVector<std::pair<mlir::Region *,std::unique_ptr<mlir::CallGraphNode>>,0u>>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  void *__p;

  v4 = *a2;
  v5 = *(_DWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_30;
  v6 = *(_QWORD *)a1;
  v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v5 - 1);
  v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v9 = *v8;
  if (v4 == *v8)
  {
LABEL_3:
    LODWORD(v6) = *(_DWORD *)(v6 + 16 * v7 + 8);
    return *(_QWORD *)(a1 + 24) + 16 * v6 + 8;
  }
  v19 = 0;
  v20 = 1;
  while (v9 != -4096)
  {
    if (v19)
      v21 = 0;
    else
      v21 = v9 == -8192;
    if (v21)
      v19 = v8;
    v22 = v7 + v20++;
    v7 = v22 & (v5 - 1);
    v8 = (_QWORD *)(v6 + 16 * v7);
    v9 = *v8;
    if (v4 == *v8)
      goto LABEL_3;
  }
  v23 = (uint64_t)(v19 ? v19 : v8);
  v24 = *(_DWORD *)(a1 + 8);
  if (4 * v24 + 4 < 3 * v5)
  {
    if (v5 + ~v24 - *(_DWORD *)(a1 + 12) > v5 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_30:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v5);
  v25 = *(_DWORD *)(a1 + 16) - 1;
  v26 = v25 & ((v4 >> 4) ^ (v4 >> 9));
  v23 = *(_QWORD *)a1 + 16 * v26;
  v27 = *(_QWORD *)v23;
  if (v4 == *(_QWORD *)v23)
  {
LABEL_32:
    ++*(_DWORD *)(a1 + 8);
    if (v4 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v30 = 0;
  v31 = 1;
  while (v27 != -4096)
  {
    if (v30)
      v32 = 0;
    else
      v32 = v27 == -8192;
    if (v32)
      v30 = v23;
    v33 = v26 + v31++;
    v26 = v33 & v25;
    v23 = *(_QWORD *)a1 + 16 * v26;
    v27 = *(_QWORD *)v23;
    if (v4 == *(_QWORD *)v23)
      goto LABEL_32;
  }
  if (v30)
    v23 = v30;
LABEL_6:
  v10 = *(_QWORD *)v23;
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)v23 = v4;
  *(_DWORD *)(v23 + 8) = 0;
  v11 = *(_QWORD *)(a1 + 24);
  v35 = *a2;
  __p = 0;
  v12 = *(unsigned int *)(a1 + 32);
  v13 = (char *)&v35;
  if (v12 >= *(_DWORD *)(a1 + 36))
  {
    v28 = v12 + 1;
    v29 = v11 + 16 * v12 > (unint64_t)&v35;
    if (v11 <= (unint64_t)&v35 && v29)
    {
      v34 = (char *)&v35 - v11;
      llvm::SmallVectorTemplateBase<std::pair<mlir::Region *,std::unique_ptr<mlir::CallGraphNode>>,false>::grow(a1 + 24, v28);
      v11 = *(_QWORD *)(a1 + 24);
      v13 = &v34[v11];
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<mlir::Region *,std::unique_ptr<mlir::CallGraphNode>>,false>::grow(a1 + 24, v28);
      v11 = *(_QWORD *)(a1 + 24);
      v13 = (char *)&v35;
    }
  }
  v6 = *(unsigned int *)(a1 + 32);
  v14 = (_QWORD *)(v11 + 16 * v6);
  *v14 = *(_QWORD *)v13;
  v15 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = 0;
  v14[1] = v15;
  *(_DWORD *)(a1 + 32) = v6 + 1;
  v16 = (char *)__p;
  __p = 0;
  if (v16)
  {
    v17 = (char *)*((_QWORD *)v16 + 6);
    if (v17 != v16 + 64)
      free(v17);
    if ((v16[8] & 1) == 0)
      llvm::deallocate_buffer(*((llvm **)v16 + 2), (void *)(8 * *((unsigned int *)v16 + 6)));
    operator delete(v16);
    LODWORD(v6) = *(_DWORD *)(a1 + 32) - 1;
  }
  *(_DWORD *)(v23 + 8) = v6;
  return *(_QWORD *)(a1 + 24) + 16 * v6 + 8;
}

uint64_t mlir::CallGraph::lookupNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int *v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (_QWORD *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (_QWORD *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (_QWORD *)(v2 + 16 * v3);
LABEL_8:
  v9 = v5 == (_QWORD *)(v2 + 16 * v3);
  v10 = (unsigned int *)(a1 + 4);
  if (!v9)
    v10 = (unsigned int *)(v5 + 1);
  v11 = *v10;
  if ((_DWORD)v11 == *((_DWORD *)a1 + 8))
    return 0;
  else
    return *(_QWORD *)(a1[3] + 16 * v11 + 8);
}

uint64_t *mlir::CallGraph::resolveCallable(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t InterfaceFor;
  uint64_t v6;
  uint64_t canMapOperands;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t *result;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[0] = a2;
  v21[1] = a3;
  InterfaceFor = mlir::CallOpInterface::resolveCallable((uint64_t)v21, a4);
  v6 = InterfaceFor;
  if (InterfaceFor)
  {
    if (!mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor))
    {
      v19 = 0;
      v20 = 0;
      return a1 + 17;
    }
    InterfaceFor = mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v6);
  }
  v19 = v6;
  v20 = InterfaceFor;
  if (!v6)
    return a1 + 17;
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v19);
  v8 = *a1;
  v9 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = ((canMapOperands >> 4) ^ (canMapOperands >> 9)) & (v9 - 1);
    v11 = (_QWORD *)(v8 + 16 * v10);
    v12 = *v11;
    if (*v11 == canMapOperands)
      goto LABEL_12;
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(_QWORD *)(v8 + 16 * v10);
      if (v12 == canMapOperands)
      {
        v11 = (_QWORD *)(v8 + 16 * v10);
        goto LABEL_12;
      }
    }
  }
  v11 = (_QWORD *)(v8 + 16 * v9);
LABEL_12:
  v15 = v11 == (_QWORD *)(v8 + 16 * v9);
  v16 = (unsigned int *)(a1 + 4);
  if (!v15)
    v16 = (unsigned int *)(v11 + 1);
  v17 = *v16;
  if ((_DWORD)v17 == *((_DWORD *)a1 + 8))
    return a1 + 17;
  result = *(uint64_t **)(a1[3] + 16 * v17 + 8);
  if (!result)
    return a1 + 17;
  return result;
}

uint64_t mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallOpInterface]";
          v31 = 71;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::CallOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::CallOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::CallOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallOpInterface]";
          v31 = 71;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::CallOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::CallOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::CallOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallOpInterface]";
      v23 = 71;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::CallOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[136];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallableOpInterface]";
          v31 = 75;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::CallableOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::CallableOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::CallableOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallableOpInterface]";
          v31 = 75;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::CallableOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::CallableOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::CallableOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallableOpInterface]";
      v23 = 75;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::CallableOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[145];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,4u,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>,mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>::InsertIntoBucket<mlir::CallGraphNode::Edge const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,4u,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>::grow(a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = (v12 - 1) & ((*a3 >> 9) ^ *a3);
  a2 = (_QWORD *)(v11 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -2)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -16;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (_QWORD *)(v11 + 8 * (v19 & v13));
      v15 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -2)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  return a2;
}

void llvm::SmallDenseMap<mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,4u,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(unint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v15 = (char *)(8 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,4u,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>,mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>::moveFromOldBuckets((_DWORD *)a1, v6, (unint64_t *)&v15[(_QWORD)v6]);
    llvm::deallocate_buffer((llvm *)v6, v15);
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = &v19;
  if (v8 == -16 || v8 == -2)
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (v11 != -16 && v11 != -2)
    {
LABEL_26:
      *v9++ = v11;
      v13 = *(_QWORD *)(a1 + 24);
      if (v13 == -16)
        goto LABEL_29;
      goto LABEL_27;
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 8);
    v9 = v20;
    v11 = *(_QWORD *)(a1 + 16);
    if (v11 != -16 && v11 != -2)
      goto LABEL_26;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v13 == -16)
    goto LABEL_29;
LABEL_27:
  if (v13 != -2)
    *v9++ = v13;
LABEL_29:
  v17 = *(_QWORD *)(a1 + 32);
  if (v17 != -16 && v17 != -2)
    *v9++ = v17;
  if (a2 >= 5)
  {
    *(_DWORD *)a1 &= ~1u;
    v18 = a2;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v18;
  }
  llvm::DenseMapBase<llvm::SmallDenseMap<mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,4u,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>,mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>::moveFromOldBuckets((_DWORD *)a1, &v19, v9);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,4u,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>,mlir::CallGraphNode::Edge,llvm::detail::DenseSetEmpty,mlir::CallGraphNode::EdgeKeyInfo,llvm::detail::DenseSetPair<mlir::CallGraphNode::Edge>>::moveFromOldBuckets(_DWORD *a1, unint64_t *a2, unint64_t *a3)
{
  int v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v8 = 4;
    v9 = a1 + 2;
  }
  else
  {
    v8 = a1[4];
    if (!(_DWORD)v8)
      goto LABEL_6;
    v9 = (void *)*((_QWORD *)a1 + 1);
  }
  memset_pattern16(v9, &unk_181232D70, 8 * v8);
LABEL_6:
  while (a2 != a3)
  {
    v16 = *a2;
    if (*a2 != -16 && v16 != -2)
    {
      if ((*(_BYTE *)a1 & 1) != 0)
      {
        v11 = 4;
        v10 = v7;
      }
      else
      {
        v10 = (_DWORD *)*((_QWORD *)a1 + 1);
        v11 = a1[4];
      }
      v12 = v11 - 1;
      v13 = (v11 - 1) & ((v16 >> 9) ^ v16);
      v14 = (unint64_t *)&v10[2 * v13];
      v15 = *v14;
      if (v16 != *v14)
      {
        v18 = 0;
        v19 = 1;
        while (v15 != -2)
        {
          if (v18)
            v20 = 0;
          else
            v20 = v15 == -16;
          if (v20)
            v18 = v14;
          v21 = v13 + v19++;
          v13 = v21 & v12;
          v14 = (unint64_t *)&v10[2 * (v21 & v12)];
          v15 = *v14;
          if (v16 == *v14)
            goto LABEL_10;
        }
        if (v18)
          v14 = v18;
      }
LABEL_10:
      *v14 = v16;
      *a1 += 2;
    }
    ++a2;
  }
}

_QWORD *llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          v22 = *(_QWORD *)a1 + 16 * v25;
          v26 = *(_QWORD *)v22;
          if (v23 != *(_QWORD *)v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = *(_QWORD *)a1 + 16 * (v30 & v24);
              v26 = *(_QWORD *)v22;
              if (v23 == *(_QWORD *)v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *(_QWORD *)v22 = v23;
          *(_DWORD *)(v22 + 8) = *((_DWORD *)v16 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = result + 2;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      *v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[2 * v17];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<mlir::Region *,std::unique_ptr<mlir::CallGraphNode>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  unint64_t v25;

  v25 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v25);
  v5 = *(char **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v6)
    goto LABEL_24;
  v7 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
  v8 = 16 * v6;
  if (v7 < 7 || (v4 < &v5[v8] ? (v9 = v5 >= &v4[v8]) : (v9 = 1), !v9))
  {
    v12 = v4;
    v13 = *(char **)a1;
LABEL_13:
    v19 = &v5[16 * v6];
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      v20 = *((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v12 + 1) = v20;
      v13 += 16;
      v12 += 16;
    }
    while (v13 != v19);
    goto LABEL_15;
  }
  v10 = v7 + 1;
  v11 = (v7 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v12 = &v4[16 * v11];
  v13 = &v5[16 * v11];
  v14 = v11;
  v15 = v4;
  v16 = *(char **)a1;
  do
  {
    v17 = *(_OWORD *)v16;
    v18 = *((_OWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 3) = 0;
    *(_OWORD *)v15 = v17;
    *((_OWORD *)v15 + 1) = v18;
    v15 += 32;
    v16 += 32;
    v14 -= 2;
  }
  while (v14);
  if (v10 != v11)
    goto LABEL_13;
LABEL_15:
  v21 = *(_QWORD *)a1 - 8;
  do
  {
    v22 = *(_QWORD *)(v21 + v8);
    *(_QWORD *)(v21 + v8) = 0;
    if (v22)
    {
      v23 = *(void **)(v22 + 48);
      if (v23 != (void *)(v22 + 64))
        free(v23);
      if ((*(_BYTE *)(v22 + 8) & 1) == 0)
        llvm::deallocate_buffer(*(llvm **)(v22 + 16), (void *)(8 * *(unsigned int *)(v22 + 24)));
      operator delete((void *)v22);
    }
    v8 -= 16;
  }
  while (v8);
  v5 = *(char **)a1;
LABEL_24:
  v24 = v25;
  if (v5 != v3)
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v24;
}

void llvm::scc_iterator<mlir::CallGraph const*,llvm::GraphTraits<mlir::CallGraph const*>>::DFSVisitOne(int *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  BOOL v59;
  unsigned int v60;

  v4 = *a1 + 1;
  *a1 = v4;
  v7 = *((_QWORD *)a1 + 1);
  v5 = (uint64_t)(a1 + 2);
  v6 = v7;
  v8 = a1[6];
  if (!v8)
    goto LABEL_60;
  v9 = v8 - 1;
  v10 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t *)(v6 + 16 * v10);
  v12 = *v11;
  if (*v11 == a2)
    goto LABEL_17;
  v13 = 0;
  v14 = 1;
  while (v12 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v13 = v11;
    v16 = v10 + v14++;
    v10 = v16 & v9;
    v11 = (uint64_t *)(v6 + 16 * (v16 & v9));
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_17;
  }
  if (v13)
    v11 = v13;
  v52 = a1[4];
  if (4 * v52 + 4 < 3 * v8)
  {
    if (v8 + ~v52 - a1[5] > v8 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_60:
    v8 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v5, v8);
  v53 = *((_QWORD *)a1 + 1);
  v54 = a1[6] - 1;
  v55 = v54 & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t *)(v53 + 16 * v55);
  v56 = *v11;
  if (*v11 == a2)
  {
LABEL_62:
    ++a1[4];
    if (a2 == -4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v57 = 0;
  v58 = 1;
  while (v56 != -4096)
  {
    if (v57)
      v59 = 0;
    else
      v59 = v56 == -8192;
    if (v59)
      v57 = v11;
    v60 = v55 + v58++;
    v55 = v60 & v54;
    v11 = (uint64_t *)(v53 + 16 * (v60 & v54));
    v56 = *v11;
    if (*v11 == a2)
      goto LABEL_62;
  }
  if (v57)
    v11 = v57;
LABEL_14:
  v17 = *v11;
  ++a1[4];
  if (v17 != -4096)
LABEL_15:
    --a1[5];
LABEL_16:
  *v11 = a2;
  *((_DWORD *)v11 + 2) = 0;
LABEL_17:
  *((_DWORD *)v11 + 2) = v4;
  v19 = (char *)*((_QWORD *)a1 + 5);
  v18 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v19 < v18)
  {
    *(_QWORD *)v19 = a2;
    v20 = (uint64_t)(v19 + 8);
    goto LABEL_39;
  }
  v21 = (char *)*((_QWORD *)a1 + 4);
  v22 = (v19 - v21) >> 3;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 61)
    goto LABEL_64;
  v24 = v18 - (_QWORD)v21;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      goto LABEL_65;
    v26 = (char *)operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *(_QWORD *)v27 = a2;
    v20 = (uint64_t)(v27 + 8);
    v29 = (char *)(v19 - v21);
    if (v19 == v21)
      goto LABEL_37;
    goto LABEL_30;
  }
  v26 = 0;
  v27 = (char *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = a2;
  v20 = 8 * v22 + 8;
  v29 = (char *)(v19 - v21);
  if (v19 != v21)
  {
LABEL_30:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_80;
    if ((unint64_t)(v21 - v26) < 0x20)
      goto LABEL_80;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v19[-v32];
    v27 -= v32;
    v34 = &v26[8 * v22 - 16];
    v35 = v19 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *((_OWORD *)v34 - 1) = *((_OWORD *)v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v19 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_80:
      do
      {
        v38 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v27 - 1) = v38;
        v27 -= 8;
      }
      while (v19 != v21);
    }
    v19 = (char *)*((_QWORD *)a1 + 4);
  }
LABEL_37:
  *((_QWORD *)a1 + 4) = v27;
  *((_QWORD *)a1 + 5) = v20;
  *((_QWORD *)a1 + 6) = v28;
  if (v19)
    operator delete(v19);
LABEL_39:
  *((_QWORD *)a1 + 5) = v20;
  v39 = *(_QWORD *)(a2 + 48);
  v40 = *a1;
  v42 = (char *)*((_QWORD *)a1 + 11);
  v41 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v42 < v41)
  {
    *(_QWORD *)v42 = a2;
    *((_QWORD *)v42 + 1) = v39;
    *((_QWORD *)v42 + 2) = llvm::GraphTraits<mlir::CallGraphNode const*>::unwrap;
    *((_DWORD *)v42 + 6) = v40;
    v43 = v42 + 32;
    goto LABEL_56;
  }
  v44 = (_BYTE *)*((_QWORD *)a1 + 10);
  v45 = (v42 - v44) >> 5;
  v46 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 59)
LABEL_64:
    abort();
  v47 = v41 - (_QWORD)v44;
  if (v47 >> 4 > v46)
    v46 = v47 >> 4;
  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
    v48 = 0x7FFFFFFFFFFFFFFLL;
  else
    v48 = v46;
  if (!v48)
  {
    v49 = 0;
    goto LABEL_51;
  }
  if (v48 >> 59)
LABEL_65:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v49 = (char *)operator new(32 * v48);
LABEL_51:
  v50 = &v49[32 * v45];
  *(_QWORD *)v50 = a2;
  *((_QWORD *)v50 + 1) = v39;
  *((_QWORD *)v50 + 2) = llvm::GraphTraits<mlir::CallGraphNode const*>::unwrap;
  *((_DWORD *)v50 + 6) = v40;
  v43 = v50 + 32;
  if (v42 != v44)
  {
    do
    {
      v51 = *((_OWORD *)v42 - 2);
      *(_OWORD *)(v50 - 20) = *(_OWORD *)(v42 - 20);
      *((_OWORD *)v50 - 2) = v51;
      v50 -= 32;
      v42 -= 32;
    }
    while (v42 != v44);
    v42 = (char *)*((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 10) = v50;
  *((_QWORD *)a1 + 11) = v43;
  *((_QWORD *)a1 + 12) = &v49[32 * v48];
  if (v42)
    operator delete(v42);
LABEL_56:
  *((_QWORD *)a1 + 11) = v43;
}

void llvm::scc_iterator<mlir::CallGraph const*,llvm::GraphTraits<mlir::CallGraph const*>>::GetNextSCC(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t *v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  uint64_t v79;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  v79 = a1 + 8;
  while (1)
  {
    v9 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 88);
    if (v9 == v8)
      break;
    v11 = *(_QWORD *)(v8 - 32);
    v10 = *(_QWORD *)(v8 - 24);
    if (v10 != *(_QWORD *)(v11 + 48) + 8 * *(unsigned int *)(v11 + 56))
    {
      while (1)
      {
        v13 = *(uint64_t (**)(void))(v8 - 16);
        *(_QWORD *)(v8 - 24) = v10 + 8;
        v14 = v13();
        v15 = *(_QWORD *)(a1 + 8);
        v16 = *(unsigned int *)(a1 + 24);
        if (!(_DWORD)v16)
          goto LABEL_17;
        LODWORD(v17) = ((v14 >> 4) ^ (v14 >> 9)) & (v16 - 1);
        v18 = (uint64_t *)(v15 + 16 * v17);
        v19 = *v18;
        if (*v18 != v14)
          break;
LABEL_18:
        if (v18 == (uint64_t *)(v15 + 16 * v16))
        {
          llvm::scc_iterator<mlir::CallGraph const*,llvm::GraphTraits<mlir::CallGraph const*>>::DFSVisitOne((int *)a1, v14);
          v8 = *(_QWORD *)(a1 + 88);
        }
        else
        {
          v22 = *((_DWORD *)v18 + 2);
          v8 = *(_QWORD *)(a1 + 88);
          if (*(_DWORD *)(v8 - 8) > v22)
            *(_DWORD *)(v8 - 8) = v22;
        }
        v11 = *(_QWORD *)(v8 - 32);
        v10 = *(_QWORD *)(v8 - 24);
        if (v10 == *(_QWORD *)(v11 + 48) + 8 * *(unsigned int *)(v11 + 56))
        {
          v23 = *(_QWORD *)(a1 + 80);
          v12 = *(_DWORD *)(v8 - 8);
          *(_QWORD *)(a1 + 88) = v8 - 32;
          if (v23 != v8 - 32)
            goto LABEL_22;
          goto LABEL_2;
        }
      }
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(_QWORD *)(v15 + 16 * v17);
        if (v19 == v14)
        {
          v18 = (uint64_t *)(v15 + 16 * v17);
          goto LABEL_18;
        }
      }
LABEL_17:
      v18 = (uint64_t *)(v15 + 16 * v16);
      goto LABEL_18;
    }
    v12 = *(_DWORD *)(v8 - 8);
    *(_QWORD *)(a1 + 88) = v8 - 32;
    if (v9 != v8 - 32)
    {
LABEL_22:
      if (*(_DWORD *)(v8 - 40) > v12)
        *(_DWORD *)(v8 - 40) = v12;
    }
LABEL_2:
    v2 = *(_DWORD *)(a1 + 24);
    if (!v2)
      goto LABEL_41;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (v11 != *v6)
    {
      v25 = 0;
      v26 = 1;
      while (v7 != -4096)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v7 == -8192;
        if (v27)
          v25 = v6;
        v28 = v5 + v26++;
        v5 = v28 & v4;
        v6 = (uint64_t *)(v3 + 16 * (v28 & v4));
        v7 = *v6;
        if (v11 == *v6)
          goto LABEL_4;
      }
      if (v25)
        v6 = v25;
      v29 = *(_DWORD *)(a1 + 16);
      if (4 * v29 + 4 < 3 * v2)
      {
        if (v2 + ~v29 - *(_DWORD *)(a1 + 20) > v2 >> 3)
          goto LABEL_26;
        goto LABEL_42;
      }
LABEL_41:
      v2 *= 2;
LABEL_42:
      llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v79, v2);
      v30 = *(_QWORD *)(a1 + 8);
      v31 = *(_DWORD *)(a1 + 24) - 1;
      v32 = v31 & ((v11 >> 4) ^ (v11 >> 9));
      v6 = (uint64_t *)(v30 + 16 * v32);
      v33 = *v6;
      if (v11 == *v6)
      {
LABEL_43:
        ++*(_DWORD *)(a1 + 16);
        if (v11 == -4096)
          goto LABEL_28;
        goto LABEL_27;
      }
      v34 = 0;
      v35 = 1;
      while (v33 != -4096)
      {
        if (v34)
          v36 = 0;
        else
          v36 = v33 == -8192;
        if (v36)
          v34 = v6;
        v37 = v32 + v35++;
        v32 = v37 & v31;
        v6 = (uint64_t *)(v30 + 16 * (v37 & v31));
        v33 = *v6;
        if (v11 == *v6)
          goto LABEL_43;
      }
      if (v34)
        v6 = v34;
LABEL_26:
      v24 = *v6;
      ++*(_DWORD *)(a1 + 16);
      if (v24 == -4096)
      {
LABEL_28:
        *v6 = v11;
        *((_DWORD *)v6 + 2) = 0;
        goto LABEL_4;
      }
LABEL_27:
      --*(_DWORD *)(a1 + 20);
      goto LABEL_28;
    }
LABEL_4:
    if (v12 == *((_DWORD *)v6 + 2))
    {
      v38 = *(char **)(a1 + 64);
      while (1)
      {
        v45 = *(_QWORD *)(a1 + 40);
        v46 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v38 < v46)
        {
          *(_QWORD *)v38 = *(_QWORD *)(v45 - 8);
          v47 = (uint64_t)(v38 + 8);
          goto LABEL_79;
        }
        v48 = *(char **)(a1 + 56);
        v49 = (v38 - v48) >> 3;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          abort();
        v51 = v46 - (_QWORD)v48;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          if (v52 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v53 = (char *)operator new(8 * v52);
          v54 = &v53[8 * v49];
          *(_QWORD *)v54 = *(_QWORD *)(v45 - 8);
          v47 = (uint64_t)(v54 + 8);
          if (v38 == v48)
            goto LABEL_77;
        }
        else
        {
          v53 = 0;
          v54 = (char *)(8 * v49);
          *(_QWORD *)(8 * v49) = *(_QWORD *)(v45 - 8);
          v47 = 8 * v49 + 8;
          if (v38 == v48)
            goto LABEL_77;
        }
        v55 = v38 - 8 - v48;
        if (v55 >= 0x168)
        {
          if (&v53[v38 - v48 - 8 - (v55 & 0xFFFFFFFFFFFFFFF8)] > &v53[v38 - v48 - 8])
          {
            v56 = v38;
          }
          else if (&v38[-(v55 & 0xFFFFFFFFFFFFFFF8) - 8] > v38 - 8)
          {
            v56 = v38;
          }
          else if ((unint64_t)(v48 - v53) >= 0x20)
          {
            v60 = (v55 >> 3) + 1;
            v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            v56 = &v38[-v61];
            v54 -= v61;
            v62 = &v53[8 * v49 - 16];
            v63 = (__int128 *)(v38 - 16);
            v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v65 = *v63;
              *((_OWORD *)v62 - 1) = *(v63 - 1);
              *(_OWORD *)v62 = v65;
              v62 -= 32;
              v63 -= 2;
              v64 -= 4;
            }
            while (v64);
            if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_76;
          }
          else
          {
            v56 = v38;
          }
        }
        else
        {
          v56 = v38;
        }
        do
        {
          v57 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *((_QWORD *)v54 - 1) = v57;
          v54 -= 8;
        }
        while (v56 != v48);
LABEL_76:
        v38 = *(char **)(a1 + 56);
LABEL_77:
        *(_QWORD *)(a1 + 56) = v54;
        *(_QWORD *)(a1 + 64) = v47;
        *(_QWORD *)(a1 + 72) = &v53[8 * v52];
        if (v38)
          operator delete(v38);
LABEL_79:
        *(_QWORD *)(a1 + 64) = v47;
        *(_QWORD *)(a1 + 40) -= 8;
        v58 = *(_DWORD *)(a1 + 24);
        if (!v58)
          goto LABEL_108;
        v39 = *(_QWORD *)(a1 + 8);
        v40 = *(_QWORD *)(v47 - 8);
        v41 = v58 - 1;
        v42 = ((v40 >> 4) ^ (v40 >> 9)) & (v58 - 1);
        v43 = (uint64_t *)(v39 + 16 * v42);
        v44 = *v43;
        if (v40 != *v43)
        {
          v66 = 0;
          v67 = 1;
          while (v44 != -4096)
          {
            if (v66)
              v68 = 0;
            else
              v68 = v44 == -8192;
            if (v68)
              v66 = v43;
            v69 = v42 + v67++;
            v42 = v69 & v41;
            v43 = (uint64_t *)(v39 + 16 * (v69 & v41));
            v44 = *v43;
            if (v40 == *v43)
              goto LABEL_59;
          }
          if (v66)
            v43 = v66;
          v70 = *(_DWORD *)(a1 + 16);
          if (4 * v70 + 4 < 3 * v58)
          {
            if (v58 + ~v70 - *(_DWORD *)(a1 + 20) <= v58 >> 3)
              goto LABEL_109;
LABEL_82:
            v59 = *v43;
          }
          else
          {
LABEL_108:
            v58 *= 2;
LABEL_109:
            llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v79, v58);
            v71 = *(_QWORD *)(a1 + 8);
            v59 = *(_QWORD *)(v47 - 8);
            v72 = *(_DWORD *)(a1 + 24) - 1;
            v73 = ((v59 >> 4) ^ (v59 >> 9)) & v72;
            v43 = (uint64_t *)(v71 + 16 * v73);
            v74 = *v43;
            if (v59 != *v43)
            {
              v75 = 0;
              v76 = 1;
              while (v74 != -4096)
              {
                if (v75)
                  v77 = 0;
                else
                  v77 = v74 == -8192;
                if (v77)
                  v75 = v43;
                v78 = v73 + v76++;
                v73 = v78 & v72;
                v43 = (uint64_t *)(v71 + 16 * (v78 & v72));
                v74 = *v43;
                if (v59 == *v43)
                  goto LABEL_83;
              }
              if (v75)
                v43 = v75;
              goto LABEL_82;
            }
          }
LABEL_83:
          ++*(_DWORD *)(a1 + 16);
          if (v59 != -4096)
            --*(_DWORD *)(a1 + 20);
          *v43 = *(_QWORD *)(v47 - 8);
          *((_DWORD *)v43 + 2) = 0;
          v47 = *(_QWORD *)(a1 + 64);
          v40 = *(_QWORD *)(v47 - 8);
        }
LABEL_59:
        *((_DWORD *)v43 + 2) = -1;
        v38 = (char *)v47;
        if (v40 == v11)
          return;
      }
    }
  }
}

unint64_t llvm::GraphTraits<mlir::CallGraphNode const*>::unwrap(_QWORD *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

void mlir::AnalysisState::~AnalysisState(mlir::AnalysisState *this)
{
  char *v2;

  *(_QWORD *)this = off_1E0E2B3B8;
  v2 = (char *)*((_QWORD *)this + 5);
  if (v2 != (char *)this + 56)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 2), (void *)(16 * *((unsigned int *)this + 8)));
}

uint64_t sub_180152D1C()
{
  uint64_t v0;

  return v0;
}

uint64_t mlir::ProgramPoint::getLoc(mlir::ProgramPoint *this)
{
  uint64_t v1;
  mlir::Block *v2;
  BOOL v3;
  mlir::Block *v5;
  mlir::Region *Parent;
  mlir::Block *v8;

  v1 = *(_QWORD *)this & 6;
  v2 = (mlir::Block *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
  if (v1)
    v3 = 1;
  else
    v3 = v2 == 0;
  if (!v3)
    return (*(uint64_t (**)(mlir::Block *))(*(_QWORD *)v2 + 16))(v2);
  if (v1 == 2 && v2 != 0)
    return *((_QWORD *)v2 + 3);
  if (v1 == 4)
    v5 = v2;
  else
    v5 = 0;
  v8 = v5;
  if (v5)
    return mlir::Value::getLoc((mlir::Value *)&v8);
  Parent = (mlir::Region *)mlir::Block::getParent(v2);
  return mlir::Region::getLoc(Parent);
}

uint64_t mlir::DataFlowSolver::initializeAndRun(mlir::DataFlowSolver *this, Operation *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((unsigned int *)this + 14);
  if ((_DWORD)v3)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 6);
    v6 = 8 * v3;
    while ((*(unsigned __int8 (**)(_QWORD, Operation *))(*(_QWORD *)*v5 + 16))(*v5, a2))
    {
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_7;
    }
    return 0;
  }
  else
  {
LABEL_7:
    while (1)
    {
      v7 = *((_QWORD *)this + 5);
      if (!v7)
        break;
      v8 = (void **)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 4);
      v10 = (uint64_t *)(*(char **)((char *)v8 + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v9);
      v11 = *v10;
      v12 = v10[1];
      *((_QWORD *)this + 4) = ++v9;
      *((_QWORD *)this + 5) = v7 - 1;
      if (v9 >= 0x200)
      {
        operator delete(*v8);
        *((_QWORD *)this + 1) += 8;
        *((_QWORD *)this + 4) -= 256;
      }
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, v11))
        return 0;
    }
    return 1;
  }
}

_QWORD *mlir::DataFlowAnalysis::DataFlowAnalysis(_QWORD *this, mlir::DataFlowSolver *a2)
{
  *this = off_1E0E2B728;
  this[1] = a2;
  return this;
}

void mlir::DataFlowAnalysis::addDependency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v7[31];
  uint64_t v8[3];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8[0] = a3;
  v8[1] = a1;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>,std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2 + 16, v8, (uint64_t)v7);
  if (v7[16])
  {
    v4 = *(_OWORD *)v8;
    v5 = *(unsigned int *)(a2 + 48);
    if (v5 >= *(_DWORD *)(a2 + 52))
    {
      v6 = *(_OWORD *)v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 40, (void *)(a2 + 56), v5 + 1, 16);
      v4 = v6;
      LODWORD(v5) = *(_DWORD *)(a2 + 48);
    }
    *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * v5) = v4;
    ++*(_DWORD *)(a2 + 48);
  }
}

uint64_t mlir::DataFlowAnalysis::propagateIfChanged(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 1)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(result + 8));
  return result;
}

void mlir::AnalysisState::onUpdate(mlir::AnalysisState *this, mlir::DataFlowSolver *a2)
{
  uint64_t v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;

  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2)
  {
    v4 = (__int128 *)*((_QWORD *)this + 5);
    v5 = *((_QWORD *)a2 + 5);
    v6 = 16 * v2;
    do
    {
      v7 = *((_QWORD *)a2 + 2);
      v8 = *((_QWORD *)a2 + 1);
      v9 = *v4;
      if (v7 == v8)
        v10 = 0;
      else
        v10 = 32 * (v7 - v8) - 1;
      v11 = v5 + *((_QWORD *)a2 + 4);
      if (v10 == v11)
      {
        v12 = *v4;
        std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity((uint64_t)a2);
        v9 = v12;
        v8 = *((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
      }
      *(_OWORD *)(*(_QWORD *)(v8 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11) = v9;
      v5 = *((_QWORD *)a2 + 5) + 1;
      *((_QWORD *)a2 + 5) = v5;
      ++v4;
      v6 -= 16;
    }
    while (v6);
  }
}

void std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *v92;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v76 = &v37[8 * v35];
            v43 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              v77 = (v42 >> 3) + 1;
              v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v78];
              v7 += v78;
              v79 = (__int128 *)(v6 + 3);
              v80 = v76 + 16;
              v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v83 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v83;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_74;
      }
LABEL_84:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v92 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v92);
      return;
    }
    v92 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v92);
    v44 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v44 + 1);
    v8 = *v44;
    *(_QWORD *)(a1 + 8) = v44 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v45 = (v5 - v9) >> 2;
      if (v5 == v9)
        v45 = 1;
      if (!(v45 >> 61))
      {
        v46 = v45 >> 2;
        v47 = 8 * v45;
        v37 = (char *)operator new(8 * v45);
        v38 = &v37[8 * v46];
        v39 = &v37[v47];
        v48 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v48 & 0xFFFFFFFFFFFFFFF8];
          v49 = v48 - 8;
          if ((unint64_t)(v48 - 8) >= 0x38)
          {
            v84 = &v37[8 * v46];
            v50 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v49 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v50 = &v38[v86];
              v7 += v86;
              v87 = (__int128 *)(v44 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v50 = &v37[8 * v46];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v50 = v91;
            v50 += 8;
          }
          while (v50 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v37;
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v39;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_84;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  v28 = operator new(0x1000uLL);
  v29 = v28;
  if (v21 != v24)
    goto LABEL_23;
  if (v20 >= 1)
  {
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v26 -= 8 * (v30 >> 1);
LABEL_23:
    *(_QWORD *)v26 = v28;
    v31 = v26 + 8;
    if (v18 != v19)
      goto LABEL_49;
    goto LABEL_24;
  }
  if (v18 == v19)
    v51 = 1;
  else
    v51 = v20 >> 2;
  if (v51 >> 61)
    goto LABEL_84;
  v52 = 8 * v51;
  v53 = (char *)operator new(8 * v51);
  v26 = &v53[8 * (v51 >> 2)];
  v27 = &v53[v52];
  operator delete(v25);
  v54 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v25 = v53;
  *(_QWORD *)v26 = v29;
  v31 = v26 + 8;
  if (v18 != v54)
  {
    while (1)
    {
LABEL_49:
      if (v26 == v25)
      {
        if (v31 >= v27)
        {
          v61 = (v27 - v26) >> 2;
          if (v27 == v26)
            v61 = 1;
          if (v61 >> 61)
            goto LABEL_84;
          v62 = (v61 + 3) >> 2;
          v63 = 8 * v61;
          v64 = (char *)operator new(8 * v61);
          v25 = v64;
          v55 = &v64[8 * v62];
          v65 = v31 - v26;
          v40 = v31 == v26;
          v31 = v55;
          if (!v40)
          {
            v31 = &v55[v65 & 0xFFFFFFFFFFFFFFF8];
            v66 = v65 - 8;
            v67 = &v64[8 * v62];
            v68 = v26;
            if (v66 < 0x38)
              goto LABEL_87;
            v67 = &v64[8 * v62];
            v68 = v26;
            if ((unint64_t)(v67 - v26) < 0x20)
              goto LABEL_87;
            v69 = (v66 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v67 = &v55[v70];
            v68 = &v26[v70];
            v71 = (__int128 *)(v26 + 16);
            v72 = &v64[8 * v62 + 16];
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *v71;
              *((_OWORD *)v72 - 1) = *(v71 - 1);
              *(_OWORD *)v72 = v74;
              v71 += 2;
              v72 += 32;
              v73 -= 4;
            }
            while (v73);
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_87:
              do
              {
                v75 = *(_QWORD *)v68;
                v68 += 8;
                *(_QWORD *)v67 = v75;
                v67 += 8;
              }
              while (v67 != v31);
            }
          }
          v27 = &v64[v63];
          operator delete(v26);
        }
        else
        {
          v57 = (v27 - v31) >> 3;
          if (v57 >= -1)
            v58 = v57 + 1;
          else
            v58 = v57 + 2;
          v59 = &v31[8 * (v58 >> 1)];
          v55 = &v59[-(v31 - v26)];
          v60 = v31 - v26;
          v40 = v31 == v26;
          v31 = v59;
          if (!v40)
            memmove(v55, v26, v60);
          v25 = v26;
        }
      }
      else
      {
        v55 = v26;
      }
      v56 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v55 - 1) = v56;
      v32 = v55 - 8;
      v26 = v32;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_25;
    }
  }
LABEL_24:
  v32 = v26;
LABEL_25:
  v33 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v27;
  if (v33)
    operator delete(v33);
}

void std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>,std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v24;

  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = *a2;
    v9 = a2[1];
    v10 = ((0x2500000000 * *a2) | (v9 >> 4) ^ (v9 >> 9))
        + ~((unint64_t)((v9 >> 4) ^ (v9 >> 9)) << 32);
    v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
    v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
    v13 = (v6 - 1) & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
    result = (_QWORD *)(*(_QWORD *)a1 + 16 * v13);
    v15 = *result;
    v16 = result[1];
    if (*a2 == *result && v9 == v16)
    {
LABEL_7:
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v7 + 16 * v6;
      *(_BYTE *)(a3 + 16) = 0;
      return result;
    }
    v20 = 0;
    v21 = 1;
    while (v15 != -4096 || v16 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v16 == -8192;
      if (v22 && v15 == -8192)
        v20 = result;
      v24 = v13 + v21++;
      v13 = v24 & (v6 - 1);
      result = (_QWORD *)(v7 + 16 * v13);
      v15 = *result;
      v16 = result[1];
      if (v8 == *result && v9 == v16)
        goto LABEL_7;
    }
    if (v20)
      v18 = v20;
    else
      v18 = result;
  }
  else
  {
    v18 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>,std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::InsertIntoBucket<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> const&,llvm::detail::DenseSetEmpty&>(a1, v18, a2);
  v19 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>,std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::InsertIntoBucket<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v24;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::grow(a1, v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (v9)
  {
    v10 = a3[1];
    v11 = ((0x2500000000 * *a3) | (v10 >> 4) ^ (v10 >> 9))
        + ~((unint64_t)((v10 >> 4) ^ (v10 >> 9)) << 32);
    v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
    v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
    v14 = ((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27));
    v15 = v9 - 1;
    v16 = (v9 - 1) & v14;
    a2 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
    v17 = *a2;
    v18 = a2[1];
    if (*a3 != *a2 || v10 != v18)
    {
      v20 = 0;
      v21 = 1;
      while (v17 != -4096 || v18 != -4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v18 == -8192;
        if (v22 && v17 == -8192)
          v20 = a2;
        v24 = v16 + v21++;
        v16 = v24 & v15;
        a2 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v24 & v15));
        v17 = *a2;
        v18 = a2[1];
        if (*a3 == *a2 && v10 == v18)
          goto LABEL_3;
      }
      if (v20)
        a2 = v20;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -4096 || a2[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = a3[1];
  return a2;
}

void llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *buffer;
  char *v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    v10 = (char *)(16 * v3);
    llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>,std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::moveFromOldBuckets(a1, v4, (uint64_t *)&v10[(_QWORD)v4]);
    llvm::deallocate_buffer((llvm *)v4, v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
    memset_pattern16(buffer, &unk_181232E00, 16 * v11);
}

void llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>,std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v23;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    memset_pattern16(*(void **)a1, &unk_181232E00, 16 * v6);
  for (; a2 != a3; a2 += 2)
  {
    v17 = *a2;
    v18 = a2[1];
    if ((*a2 != -4096 || v18 != -4096) && (v17 != -8192 || v18 != -8192))
    {
      v7 = ((0x2500000000 * v17) | (v18 >> 4) ^ (v18 >> 9))
         + ~((unint64_t)((v18 >> 4) ^ (v18 >> 9)) << 32);
      v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
      v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
      v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
      v11 = *(_DWORD *)(a1 + 16) - 1;
      v12 = v11 & v10;
      v13 = (_QWORD *)(*(_QWORD *)a1 + 16 * v12);
      v14 = *v13;
      v15 = v13[1];
      if (v17 != *v13 || v18 != v15)
      {
        v19 = 0;
        v20 = 1;
        while (v14 != -4096 || v15 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v15 == -8192;
          if (v21 && v14 == -8192)
            v19 = v13;
          v23 = v12 + v20++;
          v12 = v23 & v11;
          v13 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v23 & v11));
          v14 = *v13;
          v15 = v13[1];
          if (v17 == *v13 && v18 == v15)
            goto LABEL_10;
        }
        if (v19)
          v13 = v19;
      }
LABEL_10:
      *v13 = v17;
      v13[1] = a2[1];
      ++*(_DWORD *)(a1 + 8);
    }
  }
}

void mlir::Liveness::build(mlir::ForwardIterator **this)
{
  mlir::ForwardIterator *v1;
  unsigned int v2;
  _QWORD **v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  _QWORD **v7;
  int v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  llvm **v17;
  llvm **v18;
  llvm **v19;
  llvm *v20;
  unsigned int v21;
  _QWORD *v22;
  llvm *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  const void **v30;
  const void **v31;
  _QWORD *v32;
  _QWORD *v33;
  const void *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  _QWORD *v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  char *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  llvm *v70;
  uint64_t v71;
  unsigned int v72;
  llvm *v73;
  int32x2_t v74;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  llvm **v78;
  llvm **v79;
  int v80;
  int v81;
  const void *v82;

  v70 = 0;
  v71 = 0;
  v72 = 0;
  v1 = *this;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = &v78;
  v77 = 0;
  v78 = &v70;
  v79 = &v73;
  v2 = v77;
  if (!(_DWORD)v77)
  {
LABEL_133:
    if (v76 != &v78)
      free(v76);
    llvm::deallocate_buffer(v73, (void *)(8 * v75));
  }
  while (1)
  {
    v3 = (_QWORD **)*((_QWORD *)v76 + v2 - 1);
    v4 = v3 >> 4;
    if (v75)
    {
      LODWORD(v5) = (v4 ^ (v3 >> 9)) & (v75 - 1);
      v6 = (char *)v73 + 8 * v5;
      v7 = *(_QWORD ***)v6;
      if (v3 != *(_QWORD ***)v6)
      {
        v62 = 1;
        do
        {
          if (v7 == (_QWORD **)-4096)
            goto LABEL_7;
          v63 = v5 + v62++;
          v5 = v63 & (v75 - 1);
          v7 = (_QWORD **)*((_QWORD *)v73 + v5);
        }
        while (v3 != v7);
        v6 = (char *)v73 + 8 * v5;
      }
      *(_QWORD *)v6 = -8192;
      v74 = vadd_s32(v74, (int32x2_t)0x1FFFFFFFFLL);
    }
LABEL_7:
    LODWORD(v77) = v2 - 1;
    v8 = v72;
    if (!v72)
      goto LABEL_117;
    v9 = (v72 - 1) & (v4 ^ (v3 >> 9));
    v10 = (char *)v70 + 656 * v9;
    v11 = *(_QWORD *)v10;
    if (*(_QWORD ***)v10 == v3)
      goto LABEL_23;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & (v72 - 1);
      v10 = (char *)v70 + 656 * v9;
      v11 = *(_QWORD *)v10;
      if (*(_QWORD ***)v10 == v3)
        goto LABEL_23;
    }
    if (v12)
      v10 = v12;
    if (4 * (int)v71 + 4 < 3 * v72)
    {
      if (v72 + ~(_DWORD)v71 - HIDWORD(v71) > v72 >> 3)
        goto LABEL_20;
    }
    else
    {
LABEL_117:
      v8 = 2 * v72;
    }
    v64 = (v72 - 1) & (v4 ^ (v3 >> 9));
    v10 = (char *)v70 + 656 * v64;
    v65 = *(_QWORD *)v10;
    if (*(_QWORD ***)v10 == v3)
    {
LABEL_119:
      LODWORD(v71) = v71 + 1;
      if (v3 == (_QWORD **)-4096)
        goto LABEL_22;
LABEL_21:
      --HIDWORD(v71);
      goto LABEL_22;
    }
    v66 = 0;
    v67 = 1;
    while (v65 != -4096)
    {
      if (v66)
        v68 = 0;
      else
        v68 = v65 == -8192;
      if (v68)
        v66 = v10;
      v69 = v64 + v67++;
      v64 = v69 & (v72 - 1);
      v10 = (char *)v70 + 656 * v64;
      v65 = *(_QWORD *)v10;
      if (*(_QWORD ***)v10 == v3)
        goto LABEL_119;
    }
    if (v66)
      v10 = v66;
LABEL_20:
    v16 = *(_QWORD *)v10;
    LODWORD(v71) = v71 + 1;
    if (v16 != -4096)
      goto LABEL_21;
LABEL_22:
    *(_QWORD *)v10 = v3;
    bzero(v10 + 8, 0x288uLL);
    *((_QWORD *)v10 + 2) = v10 + 48;
    *((_QWORD *)v10 + 3) = v10 + 48;
    *((_DWORD *)v10 + 8) = 16;
    *((_QWORD *)v10 + 22) = v10 + 208;
    *((_QWORD *)v10 + 23) = v10 + 208;
    *((_DWORD *)v10 + 48) = 16;
    *((_QWORD *)v10 + 42) = v10 + 368;
    *((_QWORD *)v10 + 43) = v10 + 368;
    *((_DWORD *)v10 + 88) = 16;
    *((_QWORD *)v10 + 62) = v10 + 528;
    *((_QWORD *)v10 + 63) = v10 + 528;
    *((_DWORD *)v10 + 128) = 16;
LABEL_23:
    mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v78, *((mlir::Block **)v10 + 1));
    v17 = v79;
    if (v79)
    {
      v18 = 0;
      v19 = v78;
      do
      {
        if (v72)
        {
          v20 = v19[4 * (_QWORD)v18 + 3];
          v21 = ((v20 >> 4) ^ (v20 >> 9)) & (v72 - 1);
          v22 = (_QWORD *)((char *)v70 + 656 * v21);
          v23 = (llvm *)*v22;
          if ((llvm *)*v22 == v20)
            goto LABEL_33;
          v24 = 1;
          while (v23 != (llvm *)-4096)
          {
            v25 = v21 + v24++;
            v21 = v25 & (v72 - 1);
            v22 = (_QWORD *)((char *)v70 + 656 * v21);
            v23 = (llvm *)*v22;
            if ((llvm *)*v22 == v20)
              goto LABEL_33;
          }
        }
        v22 = (_QWORD *)((char *)v70 + 656 * v72);
LABEL_33:
        v26 = v22[3];
        if (v26 == v22[2])
          v27 = (unsigned int *)v22 + 9;
        else
          v27 = (unsigned int *)(v22 + 4);
        v28 = *v27;
        if ((_DWORD)v28)
        {
          v29 = 8 * v28;
          v30 = (const void **)v22[3];
          while ((unint64_t)*v30 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v30;
            v29 -= 8;
            if (!v29)
              goto LABEL_25;
          }
        }
        else
        {
          v30 = (const void **)v22[3];
        }
        v31 = (const void **)(v26 + 8 * v28);
        if (v30 != v31)
        {
          v32 = (_QWORD *)*((_QWORD *)v10 + 22);
          v33 = (_QWORD *)*((_QWORD *)v10 + 23);
          v34 = *v30;
          while (v33 == v32)
          {
            v35 = *((unsigned int *)v10 + 49);
            if (!(_DWORD)v35)
              goto LABEL_61;
            v36 = 0;
            v37 = 8 * v35;
            v38 = v32;
            do
            {
              if ((const void *)*v38 == v34)
                goto LABEL_46;
              if (*v38 == -2)
                v36 = v38;
              ++v38;
              v37 -= 8;
            }
            while (v37);
            if (v36)
            {
              *v36 = v34;
              --*((_DWORD *)v10 + 50);
            }
            else
            {
LABEL_61:
              if (v35 >= *((_DWORD *)v10 + 48))
                break;
              *((_DWORD *)v10 + 49) = v35 + 1;
              v32[v35] = v34;
            }
LABEL_46:
            if (++v30 != v31)
            {
              v32 = (_QWORD *)*((_QWORD *)v10 + 22);
              v33 = (_QWORD *)*((_QWORD *)v10 + 23);
              while (1)
              {
                v34 = *v30;
                if ((unint64_t)*v30 < 0xFFFFFFFFFFFFFFFELL)
                  break;
                if (++v30 == v31)
                  goto LABEL_25;
              }
              if (v30 != v31)
                continue;
            }
            goto LABEL_25;
          }
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v10 + 176), v34);
          goto LABEL_46;
        }
LABEL_25:
        v18 = (llvm **)((char *)v18 + 1);
      }
      while (v18 != v17);
    }
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v78, &v82, (const llvm::SmallPtrSetImplBase *)(v10 + 496));
    llvm::set_union<llvm::SmallPtrSet<mlir::Value,16u>,llvm::SmallPtrSet<mlir::Value,16u>>((llvm::SmallPtrSetImplBase *)&v78, (_QWORD *)v10 + 22);
    llvm::set_subtract<llvm::SmallPtrSet<mlir::Value,16u>,llvm::SmallPtrSet<mlir::Value,16u>>((const void **)&v78, (_QWORD *)v10 + 42);
    v39 = v80 - v81;
    v40 = *((_DWORD *)v10 + 9) - *((_DWORD *)v10 + 10);
    if (&v78 != (llvm ***)(v10 + 16) && v39 != v40)
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v10 + 16), 16, (double *)&v78);
    if (v79 != v78)
      free(v79);
    if (v39 != v40)
    {
      v41 = *v3;
      if (*v3)
      {
        while (1)
        {
          v45 = mlir::PredecessorIterator::unwrap((uint64_t)v41);
          v46 = v45;
          v47 = v75;
          if (!v75)
            goto LABEL_94;
          v42 = ((v45 >> 4) ^ (v45 >> 9)) & (v75 - 1);
          v43 = (char *)v73 + 8 * v42;
          v44 = *(_QWORD *)v43;
          if (v45 != *(_QWORD *)v43)
            break;
LABEL_72:
          v41 = (_QWORD *)*v41;
          if (!v41)
            goto LABEL_3;
        }
        v50 = 0;
        v51 = 1;
        while (v44 != -4096)
        {
          if (v50)
            v52 = 0;
          else
            v52 = v44 == -8192;
          if (v52)
            v50 = v43;
          v53 = v42 + v51++;
          v42 = v53 & (v75 - 1);
          v43 = (char *)v73 + 8 * v42;
          v44 = *(_QWORD *)v43;
          if (v45 == *(_QWORD *)v43)
            goto LABEL_72;
        }
        if (v50)
          v54 = v50;
        else
          v54 = v43;
        if (4 * v74.i32[0] + 4 < 3 * v75)
        {
          if (v75 + ~v74.i32[0] - v74.i32[1] <= v75 >> 3)
            goto LABEL_95;
        }
        else
        {
LABEL_94:
          v47 = 2 * v75;
LABEL_95:
          llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow((uint64_t)&v73, v47);
          v55 = v75 - 1;
          v56 = (v75 - 1) & ((v46 >> 4) ^ (v46 >> 9));
          v54 = (char *)v73 + 8 * v56;
          v57 = *(_QWORD *)v54;
          if (v46 == *(_QWORD *)v54)
          {
LABEL_96:
            ++v74.i32[0];
            if (v46 == -4096)
              goto LABEL_78;
LABEL_77:
            --v74.i32[1];
LABEL_78:
            *(_QWORD *)v54 = v46;
            v49 = v77;
            if (v77 >= (unint64_t)HIDWORD(v77))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, &v78, v77 + 1, 8);
              v49 = v77;
            }
            *((_QWORD *)v76 + v49) = v46;
            LODWORD(v77) = v77 + 1;
            goto LABEL_72;
          }
          v58 = 0;
          v59 = 1;
          while (v57 != -4096)
          {
            if (v58)
              v60 = 0;
            else
              v60 = v57 == -8192;
            if (v60)
              v58 = v54;
            v61 = v56 + v59++;
            v56 = v61 & v55;
            v54 = (char *)v73 + 8 * (v61 & v55);
            v57 = *(_QWORD *)v54;
            if (v46 == *(_QWORD *)v54)
              goto LABEL_96;
          }
          if (v58)
            v54 = v58;
        }
        v48 = *(_QWORD *)v54;
        ++v74.i32[0];
        if (v48 != -4096)
          goto LABEL_77;
        goto LABEL_78;
      }
    }
LABEL_3:
    v2 = v77;
    if (!(_DWORD)v77)
      goto LABEL_133;
  }
}

void mlir::Liveness::Liveness(mlir::Liveness *this, mlir::Operation *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = a2;
  *((_DWORD *)this + 6) = 0;
  mlir::Liveness::build((mlir::ForwardIterator **)this);
}

uint64_t sub_1801546D8()
{
  uint64_t v0;

  return v0;
}

uint64_t *mlir::Liveness::getLiveness(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v5 = (uint64_t *)(v2 + 336 * v4);
  v6 = *v5;
  if (*v5 != a2)
  {
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v8++;
      v4 = v9 & (v3 - 1);
      v5 = (uint64_t *)(v2 + 336 * v4);
      v6 = *v5;
      if (*v5 == a2)
        goto LABEL_3;
    }
    return 0;
  }
LABEL_3:
  if (v5 == (uint64_t *)(v2 + 336 * v3))
    return 0;
  else
    return v5 + 1;
}

void mlir::LivenessBlockInfo::getEndOperation(uint64_t a1, uint64_t **a2, mlir::Block **a3)
{
  llvm::SmallPtrSetImplBase *v6;
  uint64_t v7;
  uint64_t v8;
  const void **BucketFor;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t **v17;
  Operation *AncestorOpInBlock;
  mlir::Block **v19;

  v8 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 176);
  v6 = (llvm::SmallPtrSetImplBase *)(a1 + 168);
  if (v7 == v8)
  {
    v12 = *(unsigned int *)(a1 + 188);
    BucketFor = (const void **)(v7 + 8 * v12);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 8 * v12;
      while (*(uint64_t ***)(v7 + v13) != a2)
      {
        v13 += 8;
        if (v14 == v13)
          goto LABEL_12;
      }
      BucketFor = (const void **)(v7 + v13);
    }
LABEL_12:
    v10 = v7;
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor(v6, a2);
    v7 = *(_QWORD *)(a1 + 168);
    v10 = *(_QWORD *)(a1 + 176);
    if (*BucketFor != a2)
    {
      v11 = 184;
      if (v10 == v7)
        v11 = 188;
      BucketFor = (const void **)(v10 + 8 * *(unsigned int *)(a1 + v11));
    }
  }
  v15 = v10 == v7;
  v16 = 184;
  if (v15)
    v16 = 188;
  if (BucketFor == (const void **)(v10 + 8 * *(unsigned int *)(a1 + v16)))
  {
    v17 = (uint64_t **)*a2;
    if (*a2)
    {
      do
      {
        AncestorOpInBlock = mlir::Block::findAncestorOpInBlock(*(mlir::Block **)a1, (Operation *)v17[2]);
        if (AncestorOpInBlock)
        {
          v19 = (mlir::Block **)AncestorOpInBlock;
          if (mlir::Operation::isBeforeInBlock(a3, AncestorOpInBlock))
            a3 = v19;
        }
        v17 = (uint64_t **)*v17;
      }
      while (v17);
    }
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(*(_QWORD *)a1 + 32));
  }
}

BOOL mlir::Liveness::isDeadAfter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const void **BucketFor;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  mlir::Block **v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 16);
    v8 = ((v7 >> 4) ^ (v7 >> 9)) & (v6 - 1);
    v9 = (uint64_t *)(v5 + 336 * v8);
    v10 = *v9;
    if (*v9 == v7)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v9 = (uint64_t *)(v5 + 336 * v8);
      v10 = *v9;
      if (*v9 == v7)
        goto LABEL_8;
    }
  }
  v9 = (uint64_t *)(v5 + 336 * v6);
LABEL_8:
  if (v9 == (uint64_t *)(v5 + 336 * v6))
    v13 = 0;
  else
    v13 = (uint64_t)(v9 + 1);
  v14 = *(_QWORD *)(v13 + 176);
  if (v14 == *(_QWORD *)(v13 + 168))
  {
    v18 = *(unsigned int *)(v13 + 188);
    BucketFor = (const void **)(v14 + 8 * v18);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 8 * v18;
      while (*(void **)(v14 + v19) != a2)
      {
        v19 += 8;
        if (v20 == v19)
          goto LABEL_22;
      }
      BucketFor = (const void **)(v14 + v19);
    }
LABEL_22:
    v16 = *(_QWORD *)(v13 + 176);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)(v13 + 168), a2);
    v14 = *(_QWORD *)(v13 + 168);
    v16 = *(_QWORD *)(v13 + 176);
    if (*BucketFor != a2)
    {
      v17 = 184;
      if (v16 == v14)
        v17 = 188;
      BucketFor = (const void **)(v16 + 8 * *(unsigned int *)(v13 + v17));
    }
  }
  v21 = v16 == v14;
  v22 = 184;
  if (v21)
    v22 = 188;
  if (BucketFor != (const void **)(v16 + 8 * *(unsigned int *)(v13 + v22)))
    return 0;
  mlir::LivenessBlockInfo::getEndOperation(v13, (uint64_t **)a2, (mlir::Block **)a3);
  return v24 == (mlir::Block **)a3 || mlir::Operation::isBeforeInBlock(v24, (mlir::Operation *)a3);
}

uint64_t mlir::detail::walk<mlir::ForwardIterator>(mlir::ForwardIterator *a1, mlir::Operation *a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *j;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mlir::GenericProgramPoint *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  mlir::GenericProgramPoint *v23;
  mlir::GenericProgramPoint *v24;

  result = mlir::ForwardIterator::makeIterable(a1, a2);
  if (v8)
  {
    v9 = result;
    v10 = result + 24 * v8;
    if (a4)
    {
      if (a4 == 1)
      {
        do
        {
          v16 = *(_QWORD *)(v9 + 8);
          if (v16 != v9)
          {
            do
            {
              v17 = *(_QWORD *)(v16 + 8);
              if (v16)
                v18 = v16 - 8;
              else
                v18 = 0;
              for (i = *(mlir::GenericProgramPoint **)(v18 + 40);
                    i != (mlir::GenericProgramPoint *)(v18 + 32);
                    i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
              {
                mlir::GenericProgramPoint::~GenericProgramPoint(i);
                mlir::detail::walk<mlir::ForwardIterator>();
              }
              result = ((uint64_t (*)(uint64_t, uint64_t))a2)(a3, v18);
              v16 = v17;
            }
            while (v17 != v9);
          }
          v9 += 24;
        }
        while (v9 != v10);
      }
      else
      {
        do
        {
          v20 = *(_QWORD *)(v9 + 8);
          if (v20 != v9)
          {
            do
            {
              v21 = *(_QWORD *)(v20 + 8);
              if (v20)
                v22 = v20 - 8;
              else
                v22 = 0;
              v23 = (mlir::GenericProgramPoint *)(v22 + 32);
              v24 = *(mlir::GenericProgramPoint **)(v22 + 40);
              if (v24 != (mlir::GenericProgramPoint *)(v22 + 32))
              {
                do
                {
                  mlir::GenericProgramPoint::~GenericProgramPoint(v24);
                  result = mlir::detail::walk<mlir::ForwardIterator>();
                  v24 = (mlir::GenericProgramPoint *)*((_QWORD *)v24 + 1);
                }
                while (v24 != v23);
              }
              v20 = v21;
            }
            while (v21 != v9);
          }
          v9 += 24;
        }
        while (v9 != v10);
      }
    }
    else
    {
      do
      {
        v11 = *(_QWORD *)(v9 + 8);
        if (v11 != v9)
        {
          do
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v11)
              v13 = v11 - 8;
            else
              v13 = 0;
            result = ((uint64_t (*)(uint64_t, uint64_t))a2)(a3, v13);
            v14 = (mlir::GenericProgramPoint *)(v13 + 32);
            for (j = *(mlir::GenericProgramPoint **)(v13 + 40);
                  j != v14;
                  j = (mlir::GenericProgramPoint *)*((_QWORD *)j + 1))
            {
              mlir::GenericProgramPoint::~GenericProgramPoint(j);
              result = mlir::detail::walk<mlir::ForwardIterator>();
            }
            v11 = v12;
          }
          while (v12 != v9);
        }
        v9 += 24;
      }
      while (v9 != v10);
    }
  }
  return result;
}

{
  uint64_t Iterable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *v15;
  int v16;
  uint64_t result;

  if (a4)
    goto LABEL_2;
  result = ((uint64_t (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result != 2)
  {
LABEL_2:
    Iterable = mlir::ForwardIterator::makeIterable(a1, a2);
    if (v8)
    {
      v9 = Iterable;
      v10 = Iterable + 24 * v8;
      do
      {
        for (i = *(_QWORD *)(v9 + 8); i != v9; i = *(_QWORD *)(i + 8))
        {
          v12 = i - 8;
          if (!i)
            v12 = 0;
          v13 = (mlir::GenericProgramPoint *)(v12 + 32);
          v14 = *(mlir::GenericProgramPoint **)(v12 + 40);
          while (v14 != v13)
          {
            v15 = (mlir::GenericProgramPoint *)*((_QWORD *)v14 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v14);
            v16 = mlir::detail::walk<mlir::ForwardIterator>();
            v14 = v15;
            if (!v16)
              return 0;
          }
        }
        v9 += 24;
      }
      while (v9 != v10);
    }
    if (a4 == 1)
      return ((uint64_t (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
  }
  return 1;
}

{
  uint64_t Iterable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::GenericProgramPoint *v26;

  Iterable = mlir::ForwardIterator::makeIterable(a1, a2);
  if (!v8)
    return 1;
  v9 = Iterable;
  v10 = Iterable + 24 * v8;
  if (a4 == 1)
  {
    while (1)
    {
      v23 = *(_QWORD *)(v9 + 8);
      if (v23 != v9)
        break;
LABEL_30:
      v9 += 24;
      result = 1;
      if (v9 == v10)
        return result;
    }
    while (1)
    {
      v24 = *(_QWORD *)(v23 + 8);
      v25 = v23 ? v23 - 8 : 0;
      v26 = *(mlir::GenericProgramPoint **)(v25 + 40);
      if (v26 != (mlir::GenericProgramPoint *)(v25 + 32))
        break;
LABEL_38:
      result = ((uint64_t (*)(uint64_t, uint64_t))a2)(a3, v25);
      if (!(_DWORD)result)
        return result;
      v23 = v24;
      if (v24 == v9)
        goto LABEL_30;
    }
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v26);
      result = mlir::detail::walk<mlir::ForwardIterator>();
      if (!(_DWORD)result)
        break;
      v26 = (mlir::GenericProgramPoint *)*((_QWORD *)v26 + 1);
      if (v26 == (mlir::GenericProgramPoint *)(v25 + 32))
        goto LABEL_38;
    }
  }
  else if (a4)
  {
    while (1)
    {
      v18 = *(_QWORD *)(v9 + 8);
      if (v18 != v9)
        break;
LABEL_26:
      v9 += 24;
      result = 1;
      if (v9 == v10)
        return result;
    }
    while (1)
    {
      v19 = *(_QWORD *)(v18 + 8);
      v20 = v18 ? v18 - 8 : 0;
      v21 = (mlir::GenericProgramPoint *)(v20 + 32);
      v22 = *(mlir::GenericProgramPoint **)(v20 + 40);
      if (v22 != (mlir::GenericProgramPoint *)(v20 + 32))
        break;
LABEL_17:
      v18 = v19;
      if (v19 == v9)
        goto LABEL_26;
    }
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v22);
      result = mlir::detail::walk<mlir::ForwardIterator>();
      if (!(_DWORD)result)
        break;
      v22 = (mlir::GenericProgramPoint *)*((_QWORD *)v22 + 1);
      if (v22 == v21)
        goto LABEL_17;
    }
  }
  else
  {
    while (2)
    {
      v11 = *(_QWORD *)(v9 + 8);
LABEL_5:
      while (v11 != v9)
      {
        v12 = v11 - 8;
        v13 = v11 == 0;
        v11 = *(_QWORD *)(v11 + 8);
        if (v13)
          v14 = 0;
        else
          v14 = v12;
        result = ((uint64_t (*)(uint64_t, uint64_t))a2)(a3, v14);
        if ((_DWORD)result != 2)
        {
          if (!(_DWORD)result)
            return result;
          v16 = (mlir::GenericProgramPoint *)(v14 + 32);
          v17 = *(mlir::GenericProgramPoint **)(v14 + 40);
          if (v17 != v16)
          {
            while (1)
            {
              mlir::GenericProgramPoint::~GenericProgramPoint(v17);
              result = mlir::detail::walk<mlir::ForwardIterator>();
              if (!(_DWORD)result)
                return result;
              v17 = (mlir::GenericProgramPoint *)*((_QWORD *)v17 + 1);
              if (v17 == v16)
                goto LABEL_5;
            }
          }
        }
      }
      v9 += 24;
      result = 1;
      if (v9 != v10)
        continue;
      break;
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Block *)>::callback_fn<buildBlockMapping(mlir::Operation *,llvm::DenseMap<mlir::Block *,`anonymous namespace'::BlockInfoBuilder,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,`anonymous namespace'::BlockInfoBuilder>> &)::$_0>(uint64_t *a1, mlir::Block *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *NextResultAtOffset;
  _QWORD *v22;
  mlir::Block *v23;
  mlir::Region *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  mlir::Block *v33;
  mlir::Region *Parent;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  mlir::GenericProgramPoint *v44;
  mlir::GenericProgramPoint *v45;
  mlir::ForwardIterator *v46;
  int v47;
  int v48;
  _QWORD *v50;
  int64x2_t *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  uint64_t *v62;
  llvm::SmallPtrSetImplBase *v63;
  mlir::GenericProgramPoint *v64;
  void *v65;
  void *v66;
  char v67;
  int v68;
  int v69;
  const void *v70;
  uint64_t v71;

  v3 = a1;
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 16);
  if (!v5)
    goto LABEL_91;
  v6 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = *(_QWORD *)v4 + 656 * v6;
  v8 = *(_QWORD *)v7;
  if (*(mlir::Block **)v7 == a2)
    goto LABEL_72;
  v9 = 0;
  v10 = 1;
  while (v8 != -4096)
  {
    if (v9)
      v11 = 0;
    else
      v11 = v8 == -8192;
    if (v11)
      v9 = v7;
    v12 = v6 + v10++;
    v6 = v12 & (v5 - 1);
    v7 = *(_QWORD *)v4 + 656 * v6;
    v8 = *(_QWORD *)v7;
    if (*(mlir::Block **)v7 == a2)
      goto LABEL_72;
  }
  if (v9)
    v7 = v9;
  v54 = *(_DWORD *)(v4 + 8);
  if (4 * v54 + 4 < 3 * v5)
  {
    if (v5 + ~v54 - *(_DWORD *)(v4 + 12) > v5 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_91:
    v5 *= 2;
  }
  v55 = *(_DWORD *)(v4 + 16) - 1;
  v56 = v55 & ((a2 >> 4) ^ (a2 >> 9));
  v7 = *(_QWORD *)v4 + 656 * v56;
  v57 = *(_QWORD *)v7;
  if (*(mlir::Block **)v7 != a2)
  {
    v58 = 0;
    v59 = 1;
    while (v57 != -4096)
    {
      if (v58)
        v60 = 0;
      else
        v60 = v57 == -8192;
      if (v60)
        v58 = v7;
      v61 = v56 + v59++;
      v56 = v61 & v55;
      v7 = *(_QWORD *)v4 + 656 * v56;
      v57 = *(_QWORD *)v7;
      if (*(mlir::Block **)v7 == a2)
        goto LABEL_93;
    }
    if (v58)
      v7 = v58;
LABEL_14:
    v13 = *(_QWORD *)v7;
    ++*(_DWORD *)(v4 + 8);
    if (v13 == -4096)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_93:
  ++*(_DWORD *)(v4 + 8);
  if (a2 != (mlir::Block *)-4096)
LABEL_15:
    --*(_DWORD *)(v4 + 12);
LABEL_16:
  *(_QWORD *)(v7 + 8) = a2;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 16) = v7 + 48;
  *(_QWORD *)(v7 + 24) = v7 + 48;
  *(_QWORD *)(v7 + 32) = 16;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 176) = v7 + 208;
  *(_QWORD *)(v7 + 184) = v7 + 208;
  *(_QWORD *)(v7 + 192) = 16;
  *(_DWORD *)(v7 + 200) = 0;
  *(_QWORD *)(v7 + 336) = v7 + 368;
  *(_QWORD *)(v7 + 344) = v7 + 368;
  *(_QWORD *)(v7 + 352) = 16;
  *(_DWORD *)(v7 + 360) = 0;
  v63 = (llvm::SmallPtrSetImplBase *)(v7 + 336);
  *(_QWORD *)(v7 + 496) = v7 + 528;
  *(_QWORD *)(v7 + 504) = v7 + 528;
  *(_QWORD *)(v7 + 512) = 16;
  *(_DWORD *)(v7 + 520) = 0;
  v14 = (const void **)*((_QWORD *)a2 + 6);
  v15 = (const void **)*((_QWORD *)a2 + 7);
  if (v15 != v14)
  {
    while (1)
    {
      v30 = *v14;
      v31 = *(_QWORD *)(v7 + 344);
      if (v31 != *(_QWORD *)(v7 + 336))
        goto LABEL_44;
      v40 = *(unsigned int *)(v7 + 356);
      if (!(_DWORD)v40)
        break;
      v41 = 0;
      v42 = 8 * v40;
      v43 = *(_QWORD **)(v7 + 344);
      while ((_QWORD *)*v43 != v30)
      {
        if (*v43 == -2)
          v41 = v43;
        ++v43;
        v42 -= 8;
        if (!v42)
        {
          if (!v41)
            goto LABEL_65;
          *v41 = v30;
          --*(_DWORD *)(v7 + 360);
          break;
        }
      }
LABEL_45:
      v32 = v30;
      do
      {
        v32 = (_QWORD *)*v32;
        if (!v32)
          goto LABEL_42;
        v33 = *(mlir::Block **)(v32[2] + 16);
        Parent = (mlir::Region *)mlir::Block::getParent(a2);
      }
      while (mlir::Region::findAncestorBlockInRegion(Parent, v33) == a2);
      v35 = *(_QWORD *)(v7 + 184);
      if (v35 != *(_QWORD *)(v7 + 176))
      {
LABEL_41:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v7 + 176), v30);
        goto LABEL_42;
      }
      v36 = *(unsigned int *)(v7 + 196);
      if ((_DWORD)v36)
      {
        v37 = 0;
        v38 = 8 * v36;
        v39 = *(_QWORD **)(v7 + 184);
        while ((_QWORD *)*v39 != v30)
        {
          if (*v39 == -2)
            v37 = v39;
          ++v39;
          v38 -= 8;
          if (!v38)
          {
            if (!v37)
              goto LABEL_67;
            *v37 = v30;
            --*(_DWORD *)(v7 + 200);
            break;
          }
        }
      }
      else
      {
LABEL_67:
        if (v36 >= *(_DWORD *)(v7 + 192))
          goto LABEL_41;
        *(_DWORD *)(v7 + 196) = v36 + 1;
        *(_QWORD *)(v35 + 8 * v36) = v30;
      }
LABEL_42:
      if (++v14 == v15)
        goto LABEL_17;
    }
LABEL_65:
    if (v40 < *(_DWORD *)(v7 + 352))
    {
      *(_DWORD *)(v7 + 356) = v40 + 1;
      *(_QWORD *)(v31 + 8 * v40) = v30;
      goto LABEL_45;
    }
LABEL_44:
    llvm::SmallPtrSetImplBase::insert_imp_big(v63, *v14);
    goto LABEL_45;
  }
LABEL_17:
  v16 = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 5);
  if (v16 != (mlir::Block *)((char *)a2 + 32))
  {
    v62 = v3;
    v64 = (mlir::Block *)((char *)a2 + 32);
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v16);
      v18 = *(unsigned int *)(v17 + 36);
      if ((_DWORD)v18)
        v19 = v17 - 16;
      else
        v19 = 0;
      if ((_DWORD)v18)
      {
        v20 = 0;
        while (1)
        {
          NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v19, v20);
          v22 = NextResultAtOffset;
          do
          {
            v22 = (_QWORD *)*v22;
            if (!v22)
              goto LABEL_26;
            v23 = *(mlir::Block **)(v22[2] + 16);
            v24 = (mlir::Region *)mlir::Block::getParent(a2);
          }
          while (mlir::Region::findAncestorBlockInRegion(v24, v23) == a2);
          v25 = *(_QWORD *)(v7 + 184);
          if (v25 != *(_QWORD *)(v7 + 176))
            break;
          v26 = *(unsigned int *)(v7 + 196);
          if ((_DWORD)v26)
          {
            v27 = 0;
            v28 = 8 * v26;
            v29 = *(_QWORD **)(v7 + 184);
            while ((_QWORD *)*v29 != NextResultAtOffset)
            {
              if (*v29 == -2)
                v27 = v29;
              ++v29;
              v28 -= 8;
              if (!v28)
              {
                if (!v27)
                  goto LABEL_39;
                *v27 = NextResultAtOffset;
                --*(_DWORD *)(v7 + 200);
                break;
              }
            }
          }
          else
          {
LABEL_39:
            if (v26 >= *(_DWORD *)(v7 + 192))
              break;
            *(_DWORD *)(v7 + 196) = v26 + 1;
            *(_QWORD *)(v25 + 8 * v26) = NextResultAtOffset;
          }
LABEL_26:
          if (++v20 == v18)
            goto LABEL_19;
        }
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v7 + 176), NextResultAtOffset);
        goto LABEL_26;
      }
LABEL_19:
      v16 = (mlir::GenericProgramPoint *)*((_QWORD *)v16 + 1);
    }
    while (v16 != v64);
    v44 = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 5);
    v3 = v62;
    v65 = (void *)(v7 + 8);
    if (v44 != v64)
    {
      do
      {
        v45 = (mlir::GenericProgramPoint *)*((_QWORD *)v44 + 1);
        mlir::GenericProgramPoint::~GenericProgramPoint(v44);
        v44 = v45;
      }
      while (v45 != v64);
    }
  }
  llvm::set_subtract<llvm::SmallPtrSet<mlir::Value,16u>,llvm::SmallPtrSet<mlir::Value,16u>>((const void **)(v7 + 496), v63);
LABEL_72:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v65, &v70, (const llvm::SmallPtrSetImplBase *)(v7 + 496));
  llvm::set_union<llvm::SmallPtrSet<mlir::Value,16u>,llvm::SmallPtrSet<mlir::Value,16u>>((llvm::SmallPtrSetImplBase *)&v65, (_QWORD *)(v7 + 176));
  llvm::set_subtract<llvm::SmallPtrSet<mlir::Value,16u>,llvm::SmallPtrSet<mlir::Value,16u>>((const void **)&v65, (_QWORD *)(v7 + 336));
  v47 = v68 - v69;
  v48 = *(_DWORD *)(v7 + 36) - *(_DWORD *)(v7 + 40);
  if (&v65 != (void **)(v7 + 16) && v47 != v48)
    llvm::SmallPtrSetImplBase::MoveFrom(v7 + 16, 16, (double *)&v65);
  if (v66 != v65)
    free(v66);
  if (v47 != v48)
  {
    v50 = *(_QWORD **)a2;
    if (v50)
    {
      v51 = (int64x2_t *)v3[1];
      do
      {
        v71 = mlir::PredecessorIterator::unwrap((uint64_t)v50);
        llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v51, &v71, (uint64_t)&v65);
        if (v67)
        {
          v52 = v71;
          v53 = v51[2].u32[0];
          if (v53 >= v51[2].u32[1])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51[1].i64[1], &v51[2].u64[1], v53 + 1, 8);
            v53 = v51[2].u32[0];
          }
          *(_QWORD *)(v51[1].i64[1] + 8 * v53) = v52;
          ++v51[2].i32[0];
        }
        v50 = (_QWORD *)*v50;
      }
      while (v50);
    }
  }
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,`anonymous namespace'::BlockInfoBuilder,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,`anonymous namespace'::BlockInfoBuilder>>,mlir::Block *,`anonymous namespace'::BlockInfoBuilder,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,`anonymous namespace'::BlockInfoBuilder>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  llvm *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(656 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 656 * v10 - 656;
    if (v11 >= 0x290)
    {
      v16 = v11 / 0x290 + 1;
      v12 = &result[82 * (v16 & 0xFFFFFFFFFFFFFELL)];
      v17 = v16 & 0xFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = -4096;
        v18[82] = -4096;
        v18 += 164;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          v20 = v4;
          do
          {
            v21 = *(_QWORD *)v20;
            if ((*(_QWORD *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v22 = *(_DWORD *)(a1 + 16);
              if (v22)
              {
                v23 = v22 - 1;
                v24 = v23 & ((v21 >> 4) ^ (v21 >> 9));
                v25 = (_QWORD *)(*(_QWORD *)a1 + 656 * v24);
                v26 = *v25;
                if (*v25 != v21)
                {
                  v27 = 0;
                  v28 = 1;
                  while (v26 != -4096)
                  {
                    if (v27)
                      v29 = 0;
                    else
                      v29 = v26 == -8192;
                    if (v29)
                      v27 = v25;
                    v30 = v24 + v28++;
                    v24 = v30 & v23;
                    v25 = (_QWORD *)(*(_QWORD *)a1 + 656 * v24);
                    v26 = *v25;
                    if (*v25 == v21)
                      goto LABEL_32;
                  }
                  if (v27)
                    v25 = v27;
                }
              }
              else
              {
                v25 = 0;
              }
LABEL_32:
              *v25 = v21;
              v25[1] = *((_QWORD *)v20 + 1);
              llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v25 + 2), v25 + 6, 16, (uint64_t *)v20 + 2);
              llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v25 + 22), v25 + 26, 16, (uint64_t *)v20 + 22);
              llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v25 + 42), v25 + 46, 16, (uint64_t *)v20 + 42);
              llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v25 + 62), v25 + 66, 16, (uint64_t *)v20 + 62);
              ++*(_DWORD *)(a1 + 8);
              v31 = (void *)*((_QWORD *)v20 + 63);
              if (v31 != *((void **)v20 + 62))
                free(v31);
              v32 = (void *)*((_QWORD *)v20 + 43);
              if (v32 != *((void **)v20 + 42))
                free(v32);
              v33 = (void *)*((_QWORD *)v20 + 23);
              if (v33 != *((void **)v20 + 22))
                free(v33);
              v34 = (void *)*((_QWORD *)v20 + 3);
              if (v34 != *((void **)v20 + 2))
                free(v34);
            }
            v20 = (llvm *)((char *)v20 + 656);
          }
          while (v20 != (llvm *)((char *)v4 + 656 * v3));
        }
        llvm::deallocate_buffer(v4, (void *)(656 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = &result[82 * v10];
    do
    {
      *v12 = -4096;
      v12 += 82;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 656 * v13 - 656;
    if (v14 < 0x290)
    {
      v15 = result;
LABEL_47:
      v38 = &result[82 * v13];
      do
      {
        *v15 = -4096;
        v15 += 82;
      }
      while (v15 != v38);
      return result;
    }
    v35 = v14 / 0x290 + 1;
    v15 = &result[82 * (v35 & 0xFFFFFFFFFFFFFELL)];
    v36 = v35 & 0xFFFFFFFFFFFFFELL;
    v37 = result;
    do
    {
      *v37 = -4096;
      v37[82] = -4096;
      v37 += 164;
      v36 -= 2;
    }
    while (v36);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFELL))
      goto LABEL_47;
  }
  return result;
}

const void **llvm::set_subtract<llvm::SmallPtrSet<mlir::Value,16u>,llvm::SmallPtrSet<mlir::Value,16u>>(const void **this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  const void **i;
  const void **v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (uint64_t)this;
  v3 = a2[1];
  if (v3 == *a2)
    v4 = (unsigned int *)a2 + 5;
  else
    v4 = (unsigned int *)(a2 + 2);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    for (i = (const void **)a2[1]; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6)
        return this;
    }
  }
  else
  {
    i = (const void **)a2[1];
  }
  v8 = (const void **)(v3 + 8 * v5);
  while (i != v8)
  {
    v9 = *i;
    v10 = *(_QWORD *)(v2 + 8);
    if (v10 == *(_QWORD *)v2)
    {
      v15 = *(unsigned int *)(v2 + 20);
      this = (const void **)(v10 + 8 * v15);
      if ((_DWORD)v15)
      {
        v16 = 0;
        while (*(const void **)(v10 + v16) != v9)
        {
          v16 += 8;
          if (8 * v15 == v16)
            goto LABEL_31;
        }
        this = (const void **)(v10 + v16);
      }
LABEL_31:
      if (this == (const void **)(*(_QWORD *)(v2 + 8) + 8 * v15))
        goto LABEL_21;
LABEL_20:
      *this = (const void *)-2;
      ++*(_DWORD *)(v2 + 24);
      goto LABEL_21;
    }
    this = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)v2, *i);
    v11 = *(_QWORD *)v2;
    v12 = *(_QWORD *)(v2 + 8);
    if (*this != v9)
    {
      v13 = *(_DWORD *)(v2 + 16);
      if (v12 == v11)
        v13 = *(_DWORD *)(v2 + 20);
      this = (const void **)(v12 + 8 * v13);
    }
    if (v12 == v11)
      v14 = *(_DWORD *)(v2 + 20);
    else
      v14 = *(_DWORD *)(v2 + 16);
    if (this != (const void **)(v12 + 8 * v14))
      goto LABEL_20;
    do
    {
LABEL_21:
      if (++i == v8)
        return this;
    }
    while ((unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::BlockInfoBuilder::BlockInfoBuilder(mlir::Block *)::{lambda(mlir::Operation *)#1}>(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *result;
  v4 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v4)
    v5 = a2 - 16;
  else
    v5 = 0;
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      result = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v5, i);
      v7 = *(_QWORD *)(v3 + 336);
      if (v7 != *(_QWORD *)(v3 + 328))
        goto LABEL_6;
      v8 = *(unsigned int *)(v3 + 348);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = 8 * v8;
        v11 = *(uint64_t ***)(v3 + 336);
        while (*v11 != result)
        {
          if (*v11 == (uint64_t *)-2)
            v9 = v11;
          ++v11;
          v10 -= 8;
          if (!v10)
          {
            if (!v9)
              goto LABEL_17;
            *v9 = result;
            --*(_DWORD *)(v3 + 352);
            goto LABEL_7;
          }
        }
        continue;
      }
LABEL_17:
      if (v8 < *(_DWORD *)(v3 + 344))
      {
        *(_DWORD *)(v3 + 348) = v8 + 1;
        *(_QWORD *)(v7 + 8 * v8) = result;
      }
      else
      {
LABEL_6:
        result = (uint64_t *)llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v3 + 328), result);
      }
LABEL_7:
      ;
    }
  }
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v12 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a2 + 72);
      do
      {
        v15 = *(_QWORD *)(v3 + 496);
        v16 = *(const void **)(v14 + 32 * v13 + 24);
        if (v15 != *(_QWORD *)(v3 + 488))
          goto LABEL_22;
        v17 = *(unsigned int *)(v3 + 508);
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = 8 * v17;
          v20 = *(_QWORD **)(v3 + 496);
          while ((const void *)*v20 != v16)
          {
            if (*v20 == -2)
              v18 = v20;
            ++v20;
            v19 -= 8;
            if (!v19)
            {
              if (!v18)
                goto LABEL_33;
              *v18 = v16;
              --*(_DWORD *)(v3 + 512);
              goto LABEL_23;
            }
          }
          goto LABEL_23;
        }
LABEL_33:
        if (v17 < *(_DWORD *)(v3 + 504))
        {
          *(_DWORD *)(v3 + 508) = v17 + 1;
          *(_QWORD *)(v15 + 8 * v17) = v16;
        }
        else
        {
LABEL_22:
          result = (uint64_t *)llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v3 + 488), v16);
        }
LABEL_23:
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return result;
}

uint64_t llvm::set_union<llvm::SmallPtrSet<mlir::Value,16u>,llvm::SmallPtrSet<mlir::Value,16u>>(llvm::SmallPtrSetImplBase *this, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  const void **v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = a2[1];
  if (v3 == *a2)
    v4 = (unsigned int *)a2 + 5;
  else
    v4 = (unsigned int *)(a2 + 2);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = (const void **)a2[1];
    while ((unint64_t)*v7 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
        goto LABEL_32;
    }
  }
  else
  {
    v7 = (const void **)a2[1];
  }
  v8 = (const void **)(v3 + 8 * v5);
  if (v7 != v8)
  {
    v9 = 0;
    v10 = *(_QWORD **)this;
    v11 = (_QWORD *)*((_QWORD *)this + 1);
    while (1)
    {
      v12 = *v7;
      if (v11 != v10)
        goto LABEL_13;
      v15 = *((unsigned int *)this + 5);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = 8 * v15;
        v18 = v10;
        do
        {
          if ((const void *)*v18 == v12)
          {
            v14 = 0;
            goto LABEL_14;
          }
          if (*v18 == -2)
            v16 = v18;
          ++v18;
          v17 -= 8;
        }
        while (v17);
        if (!v16)
          goto LABEL_29;
        *v16 = v12;
        --*((_DWORD *)this + 6);
        v14 = 1;
        goto LABEL_14;
      }
LABEL_29:
      if (v15 < *((_DWORD *)this + 4))
      {
        *((_DWORD *)this + 5) = v15 + 1;
        v10[v15] = v12;
        v14 = 1;
      }
      else
      {
LABEL_13:
        llvm::SmallPtrSetImplBase::insert_imp_big(this, v12);
        v14 = v13;
      }
LABEL_14:
      v9 |= v14 != 0;
      if (++v7 != v8)
      {
        v10 = *(_QWORD **)this;
        v11 = (_QWORD *)*((_QWORD *)this + 1);
        while ((unint64_t)*v7 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v7 == v8)
            return v9 & 1;
        }
        if (v7 != v8)
          continue;
      }
      return v9 & 1;
    }
  }
LABEL_32:
  v9 = 0;
  return v9 & 1;
}

int64x2_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(int64x2_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int64x2_t *v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  __int32 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v4 = result;
  v6 = result[1].u32[0];
  if (!v6)
    goto LABEL_23;
  v7 = result->i64[0];
  v8 = v6 - 1;
  v9 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v6 - 1);
  v10 = (uint64_t *)(result->i64[0] + 8 * v9);
  v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    v12 = 0;
    goto LABEL_10;
  }
  v14 = 0;
  v15 = 1;
  while (v11 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v11 == -8192;
    if (v16)
      v14 = v10;
    v17 = v9 + v15++;
    v9 = v17 & v8;
    v10 = (uint64_t *)(v7 + 8 * (v17 & v8));
    v11 = *v10;
    if (*a2 == *v10)
      goto LABEL_3;
  }
  if (v14)
    v10 = v14;
  v18 = result->i32[2];
  if (4 * v18 + 4 < 3 * v6)
  {
    if (v6 + ~v18 - result->i32[3] > v6 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_23:
    v6 *= 2;
  }
  result = llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow((uint64_t)result, v6);
  v6 = v4[1].u32[0];
  v13 = *a2;
  v19 = v6 - 1;
  v20 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v6 - 1);
  v10 = (uint64_t *)(v4->i64[0] + 8 * v20);
  v21 = *v10;
  if (*a2 == *v10)
    goto LABEL_7;
  v22 = 0;
  v23 = 1;
  while (v21 != -4096)
  {
    if (v22)
      v24 = 0;
    else
      v24 = v21 == -8192;
    if (v24)
      v22 = v10;
    v25 = v20 + v23++;
    v20 = v25 & v19;
    v10 = (uint64_t *)(v4->i64[0] + 8 * (v25 & v19));
    v21 = *v10;
    if (v13 == *v10)
      goto LABEL_7;
  }
  if (v22)
    v10 = v22;
LABEL_6:
  v13 = *v10;
LABEL_7:
  ++v4->i32[2];
  if (v13 != -4096)
    --v4->i32[3];
  *v10 = *a2;
  v7 = v4->i64[0];
  v12 = 1;
LABEL_10:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v7 + 8 * v6;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

int64x2_t *llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  int v17;
  int v18;
  llvm *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_39;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != (char *)result + 8 * v11);
      }
    }
    if ((_DWORD)v3)
    {
      v17 = 0;
      v18 = v11 - 1;
      v19 = v4;
      do
      {
        v28 = *(_QWORD *)v19;
        if ((*(_QWORD *)v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v29 = ((v28 >> 4) ^ (v28 >> 9)) & v18;
          v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
          v30 = *v27;
          if (v28 != *v27)
          {
            v31 = 0;
            v32 = 1;
            while (v30 != -4096)
            {
              if (v31)
                v33 = 0;
              else
                v33 = v30 == -8192;
              if (v33)
                v31 = v27;
              v34 = v29 + v32++;
              v29 = v34 & v18;
              v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v34 & v18));
              v30 = *v27;
              if (v28 == *v27)
                goto LABEL_23;
            }
            if (v31)
              v27 = v31;
          }
LABEL_23:
          *v27 = v28;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v19 = (llvm *)((char *)v19 + 8);
      }
      while (v19 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v21 < 3)
      goto LABEL_18;
    v22 = v21 + 1;
    v10 = &result->i8[8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    v23 = result + 1;
    v24 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23[-1] = v24;
      *v23 = v24;
      v23 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      v26 = &result->i8[8 * v20];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v26);
    }
  }
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,mlir::LivenessBlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,mlir::LivenessBlockInfo>>,mlir::Block *,mlir::LivenessBlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,mlir::LivenessBlockInfo>>::InsertIntoBucket<mlir::Block * const&>(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v9 = 2 * v6;
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(336 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,mlir::LivenessBlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,mlir::LivenessBlockInfo>>,mlir::Block *,mlir::LivenessBlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,mlir::LivenessBlockInfo>>::moveFromOldBuckets(a1, v10, &v10[42 * v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(336 * v6));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(_DWORD *)(a1 + 16);
  v17 = 336 * v16 - 336;
  v18 = buffer;
  if (v17 < 0x150)
    goto LABEL_34;
  v19 = v17 / 0x150 + 1;
  v18 = &buffer[42 * (v19 & 0x1FFFFFFFFFFFFFELL)];
  v20 = v19 & 0x1FFFFFFFFFFFFFELL;
  v21 = buffer;
  do
  {
    *v21 = -4096;
    v21[42] = -4096;
    v21 += 84;
    v20 -= 2;
  }
  while (v20);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 42;
    }
    while (v18 != &buffer[42 * v16]);
  }
  v7 = *a3;
  v22 = v16 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = (char *)&buffer[42 * v23];
  v24 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = (char *)&buffer[42 * v23];
      v24 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *((_QWORD *)a2 + 41) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *((_QWORD *)a2 + 2) = a2 + 48;
  *((_QWORD *)a2 + 3) = a2 + 48;
  *((_DWORD *)a2 + 8) = 16;
  *((_DWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 22) = a2 + 208;
  *((_QWORD *)a2 + 23) = a2 + 208;
  *((_DWORD *)a2 + 48) = 16;
  *((_DWORD *)a2 + 50) = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,mlir::LivenessBlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,mlir::LivenessBlockInfo>>,mlir::Block *,mlir::LivenessBlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,mlir::LivenessBlockInfo>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  void *v24;
  void *v25;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 336 * v6 - 336;
    if (v8 < 0x150)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[42 * v6];
      do
      {
        *v9 = -4096;
        v9 += 42;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x150 + 1;
    v9 = &v7[42 * (v10 & 0x1FFFFFFFFFFFFFELL)];
    v11 = v10 & 0x1FFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[42] = -4096;
      v12 += 84;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          v16 = v15 - 1;
          v17 = v16 & ((v14 >> 4) ^ (v14 >> 9));
          v18 = (_QWORD *)(*(_QWORD *)a1 + 336 * v17);
          v19 = *v18;
          if (v14 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -4096)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -8192;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v16;
              v18 = (_QWORD *)(*(_QWORD *)a1 + 336 * v17);
              v19 = *v18;
              if (v14 == *v18)
                goto LABEL_25;
            }
            if (v20)
              v18 = v20;
          }
        }
        else
        {
          v18 = 0;
        }
LABEL_25:
        *v18 = v14;
        v18[1] = v4[1];
        llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v18 + 2), v18 + 6, 16, v4 + 2);
        llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v18 + 22), v18 + 26, 16, v4 + 22);
        ++*(_DWORD *)(a1 + 8);
        v24 = (void *)v4[23];
        if (v24 != (void *)v4[22])
          free(v24);
        v25 = (void *)v4[3];
        if (v25 != (void *)v4[2])
          free(v25);
      }
      v4 += 42;
    }
    while (v4 != a3);
  }
}

_QWORD *mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,mlir::Value>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v19;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = a2 & 0xFFFFFFFFFFFFFFF9 | 4;
  if ((v3 & 1) == 0)
  {
    v32 = a1;
    a1 = v32;
    if (v24)
    {
      v33 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>]";
      v34 = 104;
      v25 = llvm::StringRef::find((uint64_t *)&v33, "DesiredTypeName = ", 0x12uLL, 0);
      if (v34 >= v25)
        v26 = v25;
      else
        v26 = v34;
      v27 = &v33[v26];
      v28 = v34 - v26;
      if (v34 - v26 >= 0x12)
        v29 = 18;
      else
        v29 = v34 - v26;
      v30 = v28 - v29;
      if (v30 >= v30 - 1)
        v31 = v30 - 1;
      else
        v31 = v30;
      mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v27[v29], v31);
      a1 = v32;
    }
  }
  v33 = (const char *)v2;
  v34 = mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,void>::resolveTypeID(void)::id;
  v4 = *(_DWORD *)(a1 + 136);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = ((0x2500000000 * v2) | (mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,void>::resolveTypeID(void)::id >> 9))
       + ~((unint64_t)((mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,void>::resolveTypeID(void)::id >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = v4 - 1;
    v10 = v9 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    v11 = (_QWORD *)(v5 + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (v2 == *v11
      && mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,void>::resolveTypeID(void)::id == v13)
    {
      goto LABEL_25;
    }
    v15 = 0;
    v16 = 1;
    while (v12 != -4096 || v13 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v13 == -8192;
      if (v17 && v12 == -8192)
        v15 = v11;
      v19 = v10 + v16++;
      v10 = v19 & v9;
      v11 = (_QWORD *)(v5 + 24 * v10);
      v12 = *v11;
      v13 = v11[1];
      if (v2 == *v11
        && mlir::detail::TypeIDResolver<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,void>::resolveTypeID(void)::id == v13)
      {
        goto LABEL_25;
      }
    }
    if (v15)
      v21 = v15;
    else
      v21 = v11;
  }
  else
  {
    v21 = 0;
  }
  v11 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(a1 + 120, (uint64_t)&v33, (uint64_t *)&v33, v21);
  *v11 = v33;
  v11[1] = v34;
  v11[2] = 0;
LABEL_25:
  result = (_QWORD *)v11[2];
  if (!result)
  {
    result = operator new(0xC0uLL);
    result[7] = result + 11;
    result[5] = result + 7;
    result[6] = 0;
    result[2] = 0;
    result[3] = 0;
    *((_DWORD *)result + 8) = 0;
    result[8] = result + 11;
    result[9] = 4;
    *((_DWORD *)result + 20) = 0;
    result[15] = result + 17;
    result[16] = 0x400000000;
    *result = &unk_1E0E4EF40;
    result[1] = v2;
    *((_BYTE *)result + 168) = 0;
    *((_BYTE *)result + 176) = 0;
    result[23] = 0;
    v23 = v11[2];
    v11[2] = result;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return (_QWORD *)v11[2];
    }
  }
  return result;
}

void mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>::~Lattice(mlir::AnalysisState *this)
{
  char *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E0E4EE80;
  v2 = (char *)*((_QWORD *)this + 15);
  if (v2 != (char *)this + 136)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3 != *((void **)this + 7))
    free(v3);
  mlir::AnalysisState::~AnalysisState(this);
}

{
  char *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E0E4EE80;
  v2 = (char *)*((_QWORD *)this + 15);
  if (v2 != (char *)this + 136)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3 != *((void **)this + 7))
    free(v3);
  mlir::AnalysisState::~AnalysisState(this);
}

void sub_180156498(void *__p)
{
  operator delete(__p);
}

void mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>::print(uint64_t a1, llvm::raw_ostream *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 176))
  {
    if (*(_QWORD *)(a1 + 168))
    {
      v4 = *(_QWORD *)(a1 + 168);
      mlir::Attribute::print((mlir::Attribute *)&v4, this, 0);
    }
    else
    {
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) > 8)
      {
        *(_BYTE *)(v3 + 8) = 62;
        *(_QWORD *)v3 = *(_QWORD *)"<UNKNOWN>";
        *((_QWORD *)this + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(this, "<UNKNOWN>", 9uLL);
      }
    }
  }
  else
  {
    v2 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v2 > 0xEuLL)
    {
      qmemcpy(v2, "<UNINITIALIZED>", 15);
      *((_QWORD *)this + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(this, "<UNINITIALIZED>", 0xFuLL);
    }
  }
}

uint64_t mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>::join(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE v8[7];

  if (*(_BYTE *)(a1 + 176))
  {
    if (*(_BYTE *)(a2 + 176))
    {
      v2 = *(_QWORD *)(a1 + 168);
      if (v2 != *(_QWORD *)(a2 + 168) && v2 != 0)
      {
        v4 = 0;
        v5 = 0;
        v6 = 1;
LABEL_10:
        *(_QWORD *)(a1 + 168) = v5;
        *(_BYTE *)(a1 + 176) = v6;
        *(_DWORD *)(a1 + 177) = *(_DWORD *)v8;
        *(_DWORD *)(a1 + 180) = *(_DWORD *)&v8[3];
        *(_QWORD *)(a1 + 184) = v4;
        return 1;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 168);
    v6 = *(_BYTE *)(a2 + 176);
    *(_DWORD *)v8 = *(_DWORD *)(a2 + 177);
    *(_DWORD *)&v8[3] = *(_DWORD *)(a2 + 180);
    if (v6)
    {
      v4 = *(_QWORD *)(a2 + 184);
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>::meet()
{
  return 0;
}

llvm::raw_ostream *mlir::dataflow::Executable::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  const char *v2;
  _DWORD *v3;

  if (*((_BYTE *)this + 56))
    v2 = "live";
  else
    v2 = "dead";
  v3 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v3 <= 3uLL)
    return llvm::raw_ostream::write(a2, v2, 4uLL);
  *v3 = *(_DWORD *)v2;
  *((_QWORD *)a2 + 4) += 4;
  return this;
}

void mlir::dataflow::Executable::onUpdate(mlir::dataflow::Executable *this, mlir::DataFlowSolver *a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  mlir::GenericProgramPoint *v41;
  unint64_t *v42;
  unint64_t *v43;
  mlir::GenericProgramPoint *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  const char *v61;
  unint64_t v62;

  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4)
  {
    v5 = (__int128 *)*((_QWORD *)this + 5);
    v6 = *((_QWORD *)a2 + 5);
    v7 = 16 * v4;
    do
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = *((_QWORD *)a2 + 1);
      v10 = *v5;
      if (v8 == v9)
        v11 = 0;
      else
        v11 = 32 * (v8 - v9) - 1;
      v12 = *((_QWORD *)a2 + 4) + v6;
      if (v11 == v12)
      {
        v60 = *v5;
        std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity((uint64_t)a2);
        v10 = v60;
        v9 = *((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
      }
      *(_OWORD *)(*(_QWORD *)(v9 + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v12) = v10;
      v6 = *((_QWORD *)a2 + 5) + 1;
      *((_QWORD *)a2 + 5) = v6;
      ++v5;
      v7 -= 16;
    }
    while (v7);
  }
  v13 = *((_QWORD *)this + 1);
  v14 = v13 & 0xFFFFFFFFFFFFFFF8;
  if ((v13 & 6) != 6 || v14 == 0)
  {
    if ((v13 & 6) == 0 && v14 != 0)
    {
      v17 = *(_QWORD *)(v14 + 8);
      if ((v18 & 1) == 0
      {
        v61 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::CFGEdge]";
        v62 = 73;
        v53 = llvm::StringRef::find((uint64_t *)&v61, "DesiredTypeName = ", 0x12uLL, 0);
        if (v62 >= v53)
          v54 = v53;
        else
          v54 = v62;
        v55 = &v61[v54];
        v56 = v62 - v54;
        if (v62 - v54 >= 0x12)
          v57 = 18;
        else
          v57 = v62 - v54;
        v58 = v56 - v57;
        if (v58 >= v58 - 1)
          v59 = v58 - 1;
        else
          v59 = v58;
        mlir::detail::TypeIDResolver<mlir::dataflow::CFGEdge,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      }
      if (v17 == mlir::detail::TypeIDResolver<mlir::dataflow::CFGEdge,void>::resolveTypeID(void)::id)
      {
        v19 = *((unsigned int *)this + 34);
        if ((_DWORD)v19)
        {
          v20 = (uint64_t *)*((_QWORD *)this + 16);
          v21 = *((_QWORD *)a2 + 5);
          v22 = 8 * v19;
          do
          {
            v24 = *((_QWORD *)a2 + 2);
            v25 = *((_QWORD *)a2 + 1);
            v26 = *v20;
            v27 = *(_QWORD *)(v14 + 24);
            if (v24 == v25)
              v28 = 0;
            else
              v28 = 32 * (v24 - v25) - 1;
            v29 = v21 + *((_QWORD *)a2 + 4);
            if (v28 == v29)
            {
              std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity((uint64_t)a2);
              v25 = *((_QWORD *)a2 + 1);
              v29 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
            }
            v23 = (uint64_t *)(*(_QWORD *)(v25 + ((v29 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v29);
            *v23 = v27 | 6;
            v23[1] = v26;
            v21 = *((_QWORD *)a2 + 5) + 1;
            *((_QWORD *)a2 + 5) = v21;
            ++v20;
            v22 -= 8;
          }
          while (v22);
        }
      }
    }
  }
  else
  {
    v30 = *((unsigned int *)this + 34);
    if ((_DWORD)v30)
    {
      v31 = (unint64_t *)*((_QWORD *)this + 16);
      v32 = *((_QWORD *)a2 + 5);
      v33 = 8 * v30;
      do
      {
        v35 = *((_QWORD *)a2 + 2);
        v36 = *((_QWORD *)a2 + 1);
        v37 = *v31;
        if (v35 == v36)
          v38 = 0;
        else
          v38 = 32 * (v35 - v36) - 1;
        v39 = v32 + *((_QWORD *)a2 + 4);
        if (v38 == v39)
        {
          std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity((uint64_t)a2);
          v36 = *((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
        }
        v34 = (unint64_t *)(*(_QWORD *)(v36 + ((v39 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v39);
        *v34 = v14 | 6;
        v34[1] = v37;
        v32 = *((_QWORD *)a2 + 5) + 1;
        *((_QWORD *)a2 + 5) = v32;
        ++v31;
        v33 -= 8;
      }
      while (v33);
      v40 = *((unsigned int *)this + 34);
      if ((_DWORD)v40)
      {
        v41 = (mlir::GenericProgramPoint *)(v14 + 32);
        if (*(_QWORD *)(v14 + 40) != v14 + 32)
        {
          v42 = (unint64_t *)*((_QWORD *)this + 16);
          v43 = &v42[v40];
          do
          {
            v44 = *(mlir::GenericProgramPoint **)(v14 + 40);
            if (v44 != v41)
            {
              v45 = *v42;
              do
              {
                mlir::GenericProgramPoint::~GenericProgramPoint(v44);
                v48 = v47;
                v49 = *((_QWORD *)a2 + 2);
                v50 = *((_QWORD *)a2 + 1);
                v51 = 32 * (v49 - v50) - 1;
                if (v49 == v50)
                  v51 = 0;
                v52 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
                if (v51 == v52)
                {
                  std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity((uint64_t)a2);
                  v50 = *((_QWORD *)a2 + 1);
                  v52 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
                }
                v46 = (unint64_t *)(*(_QWORD *)(v50 + ((v52 >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * v52);
                *v46 = v48 & 0xFFFFFFFFFFFFFFF9 | 2;
                v46[1] = v45;
                ++*((_QWORD *)a2 + 5);
                v44 = (mlir::GenericProgramPoint *)*((_QWORD *)v44 + 1);
              }
              while (v44 != v41);
            }
            ++v42;
          }
          while (v42 != v43);
        }
      }
    }
  }
}

llvm::raw_ostream *mlir::dataflow::PredecessorState::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  mlir::Operation **v7;
  uint64_t v8;
  mlir::Operation *v9;
  _WORD *v10;
  llvm::raw_ostream *v11;
  const mlir::OpPrintingFlags *v12;
  _BYTE *v13;
  _BYTE v14[40];

  v3 = this;
  if (!*((_BYTE *)this + 56))
  {
LABEL_4:
    v5 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v5 <= 0xDuLL)
      goto LABEL_5;
    goto LABEL_8;
  }
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) <= 5)
  {
    this = llvm::raw_ostream::write(a2, "(all) ", 6uLL);
    goto LABEL_4;
  }
  *(_WORD *)(v4 + 4) = 8233;
  *(_DWORD *)v4 = 1819042088;
  *((_QWORD *)a2 + 4) += 6;
  v5 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v5 <= 0xDuLL)
  {
LABEL_5:
    this = llvm::raw_ostream::write(a2, "predecessors:\n", 0xEuLL);
    v6 = *((unsigned int *)v3 + 34);
    if (!(_DWORD)v6)
      return this;
    goto LABEL_9;
  }
LABEL_8:
  qmemcpy(v5, "predecessors:\n", 14);
  *((_QWORD *)a2 + 4) += 14;
  v6 = *((unsigned int *)v3 + 34);
  if (!(_DWORD)v6)
    return this;
LABEL_9:
  v7 = (mlir::Operation **)*((_QWORD *)v3 + 16);
  v8 = 8 * v6;
  do
  {
    while (1)
    {
      v9 = *v7;
      v10 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 1uLL)
      {
        *v10 = 8224;
        *((_QWORD *)a2 + 4) += 2;
        v11 = a2;
      }
      else
      {
        v11 = llvm::raw_ostream::write(a2, "  ", 2uLL);
      }
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v14);
      v12 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)v14);
      this = mlir::Operation::print(v9, v11, v12);
      v13 = (_BYTE *)*((_QWORD *)v11 + 4);
      if (*((_BYTE **)v11 + 3) == v13)
        break;
      *v13 = 10;
      ++*((_QWORD *)v11 + 4);
      ++v7;
      v8 -= 8;
      if (!v8)
        return this;
    }
    this = llvm::raw_ostream::write(v11, "\n", 1uLL);
    ++v7;
    v8 -= 8;
  }
  while (v8);
  return this;
}

BOOL llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert(llvm::SmallPtrSetImplBase *this, const void **a2)
{
  const void *v4;
  uint64_t v5;
  char v6;
  _BOOL8 v7;
  const void *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *a2;
  v5 = *((_QWORD *)this + 1);
  if (v5 != *(_QWORD *)this)
    goto LABEL_2;
  v11 = *((unsigned int *)this + 5);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 8 * v11;
    v14 = (_QWORD *)*((_QWORD *)this + 1);
    do
    {
      if ((const void *)*v14 == v4)
      {
        v7 = 0;
        goto LABEL_3;
      }
      if (*v14 == -2)
        v12 = v14;
      ++v14;
      v13 -= 8;
    }
    while (v13);
    if (!v12)
      goto LABEL_16;
    *v12 = v4;
    --*((_DWORD *)this + 6);
    v7 = 1;
  }
  else
  {
LABEL_16:
    if (v11 >= *((_DWORD *)this + 4))
    {
LABEL_2:
      llvm::SmallPtrSetImplBase::insert_imp_big(this, v4);
      v7 = v6 != 0;
      goto LABEL_3;
    }
    *((_DWORD *)this + 5) = v11 + 1;
    *(_QWORD *)(v5 + 8 * v11) = v4;
    v7 = 1;
  }
LABEL_3:
  if (v7)
  {
    v8 = *a2;
    v9 = *((unsigned int *)this + 18);
    if (v9 >= *((_DWORD *)this + 19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v9 + 1, 8);
      LODWORD(v9) = *((_DWORD *)this + 18);
    }
    *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v9) = v8;
    ++*((_DWORD *)this + 18);
  }
  return v7;
}

uint64_t mlir::dataflow::PredecessorState::join(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v32 = a2;
  v8 = llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)(a1 + 64), &v32);
  if (!a4)
    return v8;
  v11 = *(_QWORD *)(a1 + 176);
  v10 = a1 + 176;
  v9 = v11;
  v12 = *(_DWORD *)(v10 + 16);
  if (!v12)
  {
    v21 = 0;
LABEL_14:
    v15 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>,mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>::InsertIntoBucket<mlir::Operation * const&>(v10, v21, (uint64_t *)&v29);
    goto LABEL_15;
  }
  v13 = v12 - 1;
  v14 = ((a2 >> 4) ^ (a2 >> 9)) & v13;
  v15 = (uint64_t *)(v9 + 24 * v14);
  v16 = *v15;
  if ((const void *)*v15 != a2)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = (uint64_t *)(v9 + 24 * v14);
      v16 = *v15;
      if ((const void *)*v15 == a2)
        goto LABEL_15;
    }
    if (v17)
      v21 = v17;
    else
      v21 = v15;
    goto LABEL_14;
  }
LABEL_15:
  if (v15[2] == a4)
  {
    v22 = 0;
    v23 = (const void *)v15[1];
    v32 = v23;
    v33 = 0;
    v30 = a3;
    v31 = 0;
    do
    {
      v24 = mlir::ValueRange::dereference_iterator(&v32, v22);
      if (v24 != mlir::ValueRange::dereference_iterator(&v30, v31))
        break;
      v22 = ++v33;
      v25 = ++v31;
      if (v32 == v23 && v22 == a4)
      {
        if (v30 == a3 && v25 == a4)
          return v8;
        break;
      }
    }
    while (v30 != a3 || v25 != a4);
  }
  v15[1] = a3;
  v15[2] = a4;
  return 1;
}

void mlir::dataflow::CFGEdge::getLoc(mlir::Block **this)
{
  mlir::Region *Parent;
  mlir::UnknownLoc *Context;
  mlir::Region *v4;
  mlir::Region *v5;
  uint64_t *v6[3];

  v6[2] = *(uint64_t **)MEMORY[0x1E0C80C00];
  Parent = (mlir::Region *)mlir::Block::getParent(this[2]);
  Context = (mlir::UnknownLoc *)mlir::Region::getContext(Parent);
  v4 = (mlir::Region *)mlir::Block::getParent(this[2]);
  v6[0] = (uint64_t *)mlir::Region::getLoc(v4);
  v5 = (mlir::Region *)mlir::Block::getParent(this[3]);
  v6[1] = (uint64_t *)mlir::Region::getLoc(v5);
  mlir::FusedLoc::get(v6, (mlir::MLIRContext *)2, 0, Context);
}

llvm::raw_ostream *mlir::dataflow::CFGEdge::print(mlir::Block **this, llvm::raw_ostream *a2)
{
  uint64_t v4;

  mlir::Block::print(this[2], a2);
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 2592;
    *(_DWORD *)v4 = 1043144714;
    *((_QWORD *)a2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a2, "\n -> \n", 6uLL);
  }
  return mlir::Block::print(this[3], a2);
}

mlir::dataflow::DeadCodeAnalysis *mlir::dataflow::DeadCodeAnalysis::DeadCodeAnalysis(mlir::dataflow::DeadCodeAnalysis *this, mlir::DataFlowSolver *a2)
{
  _QWORD *v3;

  v3 = mlir::DataFlowAnalysis::DataFlowAnalysis(this, a2);
  *v3 = off_1E0E4EDB8;
  v3[3] = 0;
  v3[4] = 0;
  *((_DWORD *)v3 + 10) = 0;
  mlir::StorageUniquer::registerParametricStorageType<mlir::dataflow::CFGEdge>((uint64_t *)(v3[1] + 112));
  return this;
}

uint64_t mlir::dataflow::DeadCodeAnalysis::initialize(mlir::dataflow::DeadCodeAnalysis *this, mlir::Operation *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[2];
  mlir::Operation *v13;

  v4 = *((unsigned int *)a2 + 11);
  if ((v4 & 0x7FFFFF) != 0)
  {
    v5 = (_QWORD *)((((unint64_t)a2 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)a2 + 10));
    v6 = 24 * (v4 & 0x7FFFFF);
    do
    {
      if (v5 != (_QWORD *)*v5)
      {
        v8 = v5[1];
        if (v8)
          v9 = v8 - 8;
        else
          v9 = 0;
        v10 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(*((_QWORD *)this + 1), v9);
        if (*((_BYTE *)v10 + 56))
        {
          v7 = 0;
        }
        else
        {
          v7 = 1;
          *((_BYTE *)v10 + 56) = 1;
        }
        mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)this, (uint64_t)v10, v7);
      }
      v5 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  *((_QWORD *)this + 2) = a2;
  v12[0] = this;
  v12[1] = &v13;
  v13 = a2;
  mlir::SymbolTable::walkSymbolTables((uint64_t)a2, *((_QWORD *)a2 + 2) == 0, (uint64_t (*)(uint64_t, uint64_t, _BOOL8))llvm::function_ref<void ()(mlir::Operation *,BOOL)>::callback_fn<mlir::dataflow::DeadCodeAnalysis::initializeSymbolCallables(mlir::Operation *)::$_0>, (uint64_t)v12);
  return mlir::dataflow::DeadCodeAnalysis::initializeRecursively(this, (uint64_t)a2);
}

uint64_t mlir::dataflow::DeadCodeAnalysis::initializeRecursively(mlir::dataflow::DeadCodeAnalysis *this, uint64_t a2)
{
  mlir::Block *v4;
  uint64_t ParentOp;
  mlir::Operation *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  mlir::Region *v10;
  mlir::Region *v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *v13;
  mlir::Operation *v14;
  __int128 v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v18;
  mlir::GenericProgramPoint *v19;
  __int128 v20;
  mlir::GenericProgramPoint *v21;

  if ((*(_DWORD *)(a2 + 44) & 0x7FFFFF) != 0 || *(_DWORD *)(a2 + 40))
    goto LABEL_10;
  v4 = *(mlir::Block **)(a2 + 16);
  if (v4)
  {
    ParentOp = mlir::Block::getParentOp(v4);
    if (!mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp))
    {
LABEL_7:
      if (!mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp))
        goto LABEL_9;
    }
  }
  else
  {
    ParentOp = 0;
    if (!mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(0))
      goto LABEL_7;
  }
  mlir::Block::getTerminator(*(mlir::GenericProgramPoint ***)(a2 + 16));
  if (v6 == (mlir::Operation *)a2)
    goto LABEL_10;
LABEL_9:
  if (mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(a2))
  {
LABEL_10:
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      v8 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(*((_QWORD *)this + 1), v7);
      *(_QWORD *)&v16 = this;
      llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)(v8 + 8), (const void **)&v16);
    }
    if (!(*(unsigned __int8 (**)(mlir::dataflow::DeadCodeAnalysis *, unint64_t))(*(_QWORD *)this
                                                                                                  + 24))(this, a2 & 0xFFFFFFFFFFFFFFF9 | 2))return 0;
  }
  v9 = *(unsigned int *)(a2 + 44);
  if ((v9 & 0x7FFFFF) == 0)
    return 1;
  v10 = (mlir::Region *)(((a2 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                       + 32 * *(unsigned int *)(a2 + 40));
  v11 = (mlir::Region *)((char *)v10 + 24 * (v9 & 0x7FFFFF));
  while (1)
  {
    mlir::Region::OpIterator::OpIterator(&v20, v10, 0);
    mlir::Region::OpIterator::OpIterator(&v18, v10, 1);
    v12 = v21;
    v17 = v21;
    v16 = v20;
    v13 = v19;
    if (v21 != v19)
      break;
LABEL_18:
    v10 = (mlir::Region *)((char *)v10 + 24);
    if (v10 == v11)
      return 1;
  }
  while (1)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v12);
    if (!mlir::dataflow::DeadCodeAnalysis::initializeRecursively(this, v14))
      return 0;
    mlir::Region::OpIterator::operator++((uint64_t *)&v20);
    v12 = v21;
    if (v21 == v13)
      goto LABEL_18;
  }
}

uint64_t mlir::dataflow::DeadCodeAnalysis::markEdgeLive(mlir::dataflow::DeadCodeAnalysis *this, mlir::Block *a2, mlir::Block *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  mlir::Block *v9;
  mlir::Block *v10;

  v9 = a3;
  v10 = a2;
  v4 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(*((_QWORD *)this + 1), (uint64_t)a3);
  if (*((_BYTE *)v4 + 56))
  {
    v5 = 0;
  }
  else
  {
    v5 = 1;
    *((_BYTE *)v4 + 56) = 1;
  }
  mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)this, (uint64_t)v4, v5);
  v6 = mlir::StorageUniquer::get<mlir::dataflow::CFGEdge,mlir::Block *&,mlir::Block *&>((unsigned __int8 **)(*((_QWORD *)this + 1) + 112), 0, 0, &v10, &v9);
  v7 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::dataflow::CFGEdge *>(*((_QWORD *)this + 1), v6);
  if (*((_BYTE *)v7 + 56))
    return mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)this, (uint64_t)v7, 0);
  *((_BYTE *)v7 + 56) = 1;
  return mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)this, (uint64_t)v7, 1);
}

uint64_t mlir::dataflow::DeadCodeAnalysis::markEntryBlocksLive(uint64_t this, mlir::Operation *a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *((unsigned int *)a2 + 11);
  if ((v2 & 0x7FFFFF) != 0)
  {
    v3 = this;
    v4 = (_QWORD *)((((unint64_t)a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)a2 + 10));
    v5 = 24 * (v2 & 0x7FFFFF);
    do
    {
      if (v4 != (_QWORD *)*v4)
      {
        v7 = v4[1];
        if (v7)
          v8 = v7 - 8;
        else
          v8 = 0;
        v9 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(*(_QWORD *)(v3 + 8), v8);
        if (*((_BYTE *)v9 + 56))
        {
          v6 = 0;
        }
        else
        {
          v6 = 1;
          *((_BYTE *)v9 + 56) = 1;
        }
        this = mlir::DataFlowAnalysis::propagateIfChanged(v3, (uint64_t)v9, v6);
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  return this;
}

uint64_t mlir::dataflow::DeadCodeAnalysis::visit(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t InterfaceFor;
  const void *v7;
  uint64_t Loc;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  mlir::Operation *v17;
  _BYTE *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  mlir::Block *v26;
  uint64_t ParentOp;
  uint64_t v28;
  mlir::Block *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  mlir::Block *v33;
  uint64_t v34;
  Operation *v35;
  uint64_t v36;
  mlir::Block **v37;
  mlir::Block *v38;
  const char *v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  _QWORD v50[2];

  v50[1] = *MEMORY[0x1E0C80C00];
  v50[0] = a2;
  if ((a2 & 6) == 6)
    return 1;
  if ((a2 & 6) == 2)
  {
    v4 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (!*((_BYTE *)mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(a1[1], *(_QWORD *)(v4 + 16))+ 56))return 1;
      if (mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(v4))
      {
        InterfaceFor = mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(v4);
        if (v4)
          mlir::dataflow::DeadCodeAnalysis::visitCallOperation((uint64_t)a1, v4, InterfaceFor);
      }
      if ((*(_DWORD *)(v4 + 44) & 0x7FFFFF) != 0)
      {
        if (mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(v4)
          && (v7 = (const void *)mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(v4),
              v4))
        {
          mlir::dataflow::DeadCodeAnalysis::visitRegionBranchOperation(a1, (void *)v4, v7);
        }
        else
        {
          if (mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v4))
          {
            mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v4);
            v17 = (mlir::Operation *)v4;
          }
          else
          {
            v17 = 0;
          }
          if (v17)
          {
            v18 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(a1[1], (uint64_t)v17);
            mlir::DataFlowAnalysis::addDependency((uint64_t)a1, (uint64_t)v18, v4 | 2);
            if (!v18[56] || *((_DWORD *)v18 + 34))
              mlir::dataflow::DeadCodeAnalysis::markEntryBlocksLive((uint64_t)a1, v17);
          }
          else
          {
            v19 = *(unsigned int *)(v4 + 44);
            if ((v19 & 0x7FFFFF) != 0)
            {
              v20 = (_QWORD *)(((v4 + 16 * ((v19 >> 23) & 1) + ((v19 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                             + 32 * *(unsigned int *)(v4 + 40));
              v21 = 24 * (v19 & 0x7FFFFF);
              do
              {
                if (v20 != (_QWORD *)*v20)
                {
                  v23 = v20[1];
                  if (v23)
                    v24 = v23 - 8;
                  else
                    v24 = 0;
                  v25 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(a1[1], v24);
                  if (*((_BYTE *)v25 + 56))
                  {
                    v22 = 0;
                  }
                  else
                  {
                    v22 = 1;
                    *((_BYTE *)v25 + 56) = 1;
                  }
                  mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)a1, (uint64_t)v25, v22);
                }
                v20 += 3;
                v21 -= 24;
              }
              while (v21);
            }
          }
        }
      }
      if (*(_DWORD *)(v4 + 40))
        goto LABEL_76;
      v26 = *(mlir::Block **)(v4 + 16);
      if (v26)
      {
        ParentOp = mlir::Block::getParentOp(v26);
        if (mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp))
          goto LABEL_57;
      }
      else
      {
        ParentOp = 0;
        if (mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(0))
          goto LABEL_57;
      }
      if (!mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp))
        goto LABEL_75;
LABEL_57:
      mlir::Block::getTerminator(*(mlir::GenericProgramPoint ***)(v4 + 16));
      if (v28 != v4)
        goto LABEL_75;
      v29 = *(mlir::Block **)(v4 + 16);
      if (v29)
      {
        v30 = mlir::Block::getParentOp(v29);
        if (mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(v30))
        {
          if (v30)
          {
            v31 = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(v30);
            goto LABEL_65;
          }
          goto LABEL_64;
        }
      }
      else
      {
        v32 = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(0);
        v30 = 0;
        v31 = 0;
        if (v32)
          goto LABEL_65;
      }
      v30 = 0;
LABEL_64:
      v31 = 0;
LABEL_65:
      if (v30)
      {
        mlir::dataflow::DeadCodeAnalysis::visitRegionTerminator(a1, (mlir::Operation *)v4, v30, v31);
        goto LABEL_75;
      }
      v33 = *(mlir::Block **)(v4 + 16);
      if (v33)
      {
        v34 = mlir::Block::getParentOp(v33);
        if (mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v34))
        {
          if (v34)
            mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v34);
          goto LABEL_73;
        }
      }
      else
      {
        v34 = 0;
        if (mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(0))
          goto LABEL_73;
      }
      v34 = 0;
LABEL_73:
      if (v34)
        mlir::dataflow::DeadCodeAnalysis::visitCallableTerminator((uint64_t)a1, v4, v34);
LABEL_75:
      if (*(_DWORD *)(v4 + 40))
      {
LABEL_76:
        if (mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v4)
          && (v35 = (Operation *)mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v4),
              v4))
        {
          mlir::dataflow::DeadCodeAnalysis::visitBranchOperation((mlir::dataflow::DeadCodeAnalysis *)a1, (Operation *)v4, v35);
        }
        else
        {
          mlir::SuccessorRange::SuccessorRange(&v41, (Operation *)v4);
          v36 = v42;
          if (v42)
          {
            v37 = (mlir::Block **)(v41 + 24);
            do
            {
              v38 = *v37;
              v37 += 4;
              mlir::dataflow::DeadCodeAnalysis::markEdgeLive((mlir::dataflow::DeadCodeAnalysis *)a1, *(mlir::Block **)(v4 + 16), v38);
              --v36;
            }
            while (v36);
          }
        }
      }
      return 1;
    }
  }
  Loc = mlir::ProgramPoint::getLoc((mlir::ProgramPoint *)v50);
  v39 = "unknown program point kind";
  v40 = 259;
  mlir::emitError(Loc, (uint64_t)&v39, (uint64_t)&v41);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v49)
  {
    v9 = (_QWORD **)__p;
    if (__p)
    {
      v10 = v48;
      v11 = __p;
      if (v48 != __p)
      {
        do
          v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        v11 = __p;
      }
      v48 = v9;
      operator delete(v11);
    }
    v12 = v45;
    if (v45)
    {
      v13 = v46;
      v14 = v45;
      if (v46 != v45)
      {
        do
        {
          v16 = (void *)*--v13;
          v15 = v16;
          *v13 = 0;
          if (v16)
            operator delete[](v15);
        }
        while (v13 != v12);
        v14 = v45;
      }
      v46 = v12;
      operator delete(v14);
    }
    if (v43 != &v44)
      free(v43);
  }
  return v2;
}

uint64_t mlir::dataflow::DeadCodeAnalysis::visitCallOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  Operation *v5;
  uint64_t InherentAttr;
  char v7;
  mlir::Operation *v8;
  uint64_t InterfaceFor;
  _BYTE *v10;
  _BOOL4 v11;
  _BYTE *v13;
  int v14;
  uint64_t v15[2];
  uint64_t v16;
  uint64_t v17;

  v15[0] = a2;
  v15[1] = a3;
  v4 = mlir::CallOpInterface::resolveCallable((uint64_t)v15, a1 + 24);
  if (!v4)
    goto LABEL_15;
  v5 = (Operation *)v4;
  if (!mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor(v4))
    goto LABEL_15;
  if (*((_BYTE *)v5 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr((uint64_t)v5, (uint64_t)"sym_name", 8);
    if (v7)
    {
      if (!InherentAttr)
        goto LABEL_15;
LABEL_8:
      v8 = *(mlir::Operation **)(a1 + 16);
      if (v8 != v5 && !mlir::Operation::isProperAncestor(v8, v5))
        goto LABEL_15;
      if (mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v5))
      {
        InterfaceFor = mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v5);
        v16 = (uint64_t)v5;
        v17 = InterfaceFor;
        if (!mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v16))
          goto LABEL_15;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      v10 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*(_QWORD *)(a1 + 8), (uint64_t)v5);
      v16 = v15[0];
      v11 = llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)(v10 + 64), (const void **)&v16);
      return mlir::DataFlowAnalysis::propagateIfChanged(a1, (uint64_t)v10, v11);
    }
  }
  if (mlir::DictionaryAttr::contains((uint64_t)v5 + 56, "sym_name", 8uLL))
    goto LABEL_8;
LABEL_15:
  v13 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*(_QWORD *)(a1 + 8), v15[0]);
  v14 = v13[56];
  v13[56] = 0;
  return mlir::DataFlowAnalysis::propagateIfChanged(a1, (uint64_t)v13, v14);
}

void mlir::dataflow::DeadCodeAnalysis::visitRegionBranchOperation(uint64_t *a1, void *a2, const void *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  const void *v13[2];
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  void *v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v13[0] = a2;
  v13[1] = a3;
  mlir::dataflow::DeadCodeAnalysis::getOperandValues((mlir::dataflow::DeadCodeAnalysis *)a1, (mlir::Operation *)a2, (uint64_t)&v17);
  if (!v20)
    return;
  v14 = v16;
  v15 = 0x200000000;
  mlir::RegionBranchOpInterface::getEntrySuccessorRegions(v13, (uint64_t)v17, v18, (uint64_t)&v14);
  v4 = (uint64_t *)v14;
  if (!(_DWORD)v15)
    goto LABEL_15;
  v5 = (uint64_t *)((char *)v14 + 24 * v15);
  do
  {
    if (*v4)
    {
      v9 = *(_QWORD *)(*v4 + 8);
      if (v9)
        v10 = v9 - 8;
      else
        v10 = 0;
      v11 = (const char *)(v10 | 6);
      v12 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::ProgramPoint>(a1[1], (const char *)(v10 | 6));
      if (!v12[56])
      {
LABEL_4:
        v6 = 1;
        v12[56] = 1;
        goto LABEL_5;
      }
    }
    else
    {
      v11 = (const char *)((unint64_t)v13[0] & 0xFFFFFFFFFFFFFFF9 | 2);
      v12 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::ProgramPoint>(a1[1], v11);
      if (!v12[56])
        goto LABEL_4;
    }
    v6 = 0;
LABEL_5:
    mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)a1, (uint64_t)v12, v6);
    v7 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::ProgramPoint>(a1[1], v11);
    v8 = mlir::dataflow::PredecessorState::join((uint64_t)v7, v13[0], v4[1], v4[2]);
    mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)a1, (uint64_t)v7, v8);
    v4 += 3;
  }
  while (v4 != v5);
  v4 = (uint64_t *)v14;
LABEL_15:
  if (v4 != (uint64_t *)v16)
    free(v4);
  if (v20)
  {
    if (v17 != &v19)
      free(v17);
  }
}

void mlir::dataflow::DeadCodeAnalysis::visitRegionTerminator(uint64_t *a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t InterfaceFor;
  mlir::Block *v7;
  unint64_t Parent;
  uint64_t *v9;
  unsigned int v10;
  uint64_t *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  mlir::Operation *v22;
  uint64_t v23;
  uint64_t v24[2];
  void *v25;
  uint64_t v26;
  _BYTE v27[48];
  void *v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v24[0] = a3;
  v24[1] = a4;
  mlir::dataflow::DeadCodeAnalysis::getOperandValues((mlir::dataflow::DeadCodeAnalysis *)a1, a2, (uint64_t)&v28);
  if (!v31)
    return;
  v25 = v27;
  v26 = 0x200000000;
  if (!mlir::OpInterface<mlir::RegionBranchTerminatorOpInterface,mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2))
  {
    v22 = 0;
    v23 = 0;
    goto LABEL_6;
  }
  if (a2)
    InterfaceFor = mlir::OpInterface<mlir::RegionBranchTerminatorOpInterface,mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  else
    InterfaceFor = 0;
  v22 = a2;
  v23 = InterfaceFor;
  if (!a2)
  {
LABEL_6:
    v7 = (mlir::Block *)*((_QWORD *)a2 + 2);
    if (v7)
      Parent = mlir::Block::getParent(v7);
    else
      Parent = 0;
    mlir::BranchOpInterface::getSuccessorForOperands(v24, Parent, (uint64_t)&v25);
    v9 = (uint64_t *)v25;
    v10 = v26;
    if (!(_DWORD)v26)
      goto LABEL_29;
LABEL_14:
    v11 = &v9[3 * v10];
    do
    {
      v15 = *v9;
      if (*v9)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
          v17 = v16 - 8;
        else
          v17 = 0;
        v18 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(a1[1], v17);
        if (*((_BYTE *)v18 + 56))
        {
          v19 = 0;
        }
        else
        {
          v19 = 1;
          *((_BYTE *)v18 + 56) = 1;
        }
        mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)a1, (uint64_t)v18, v19);
        v20 = *(_QWORD *)(v15 + 8);
        if (v20)
          v21 = v20 - 8;
        else
          v21 = 0;
        v12 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Block *>(a1[1], v21);
      }
      else
      {
        v12 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(a1[1], v24[0]);
      }
      v13 = (uint64_t)v12;
      v14 = mlir::dataflow::PredecessorState::join((uint64_t)v12, a2, v9[1], v9[2]);
      mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)a1, v13, v14);
      v9 += 3;
    }
    while (v9 != v11);
    v9 = (uint64_t *)v25;
    goto LABEL_29;
  }
  mlir::RegionBranchOpInterface::getEntrySuccessorRegions(&v22, (uint64_t)v28, v29, (uint64_t)&v25);
  v9 = (uint64_t *)v25;
  v10 = v26;
  if ((_DWORD)v26)
    goto LABEL_14;
LABEL_29:
  if (v9 != (uint64_t *)v27)
    free(v9);
  if (v31)
  {
    if (v28 != &v30)
      free(v28);
  }
}

uint64_t mlir::dataflow::DeadCodeAnalysis::visitCallableTerminator(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;

  v5 = a2 & 0xFFFFFFFFFFFFFFF9 | 2;
  v6 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*(_QWORD *)(a1 + 8), a3);
  mlir::DataFlowAnalysis::addDependency(a1, (uint64_t)v6, v5);
  result = mlir::OperationName::hasTrait<mlir::OpTrait::ReturnLike>((_QWORD *)(a2 + 48));
  v8 = *((unsigned int *)v6 + 34);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)v6 + 16);
    if ((result & 1) != 0)
    {
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        v12 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*(_QWORD *)(a1 + 8), v11);
        v18 = a2;
        v13 = llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)(v12 + 64), (const void **)&v18);
        result = mlir::DataFlowAnalysis::propagateIfChanged(a1, (uint64_t)v12, v13);
        v10 -= 8;
      }
      while (v10);
    }
    else
    {
      v14 = 8 * v8;
      do
      {
        v15 = *v9++;
        v16 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*(_QWORD *)(a1 + 8), v15);
        v17 = v16[56];
        v16[56] = 0;
        result = mlir::DataFlowAnalysis::propagateIfChanged(a1, (uint64_t)v16, v17);
        v14 -= 8;
      }
      while (v14);
    }
  }
  return result;
}

void mlir::dataflow::DeadCodeAnalysis::visitBranchOperation(mlir::dataflow::DeadCodeAnalysis *a1, Operation *a2, Operation *a3)
{
  mlir::Block *SuccessorForOperands;
  uint64_t v5;
  mlir::Block **v6;
  mlir::Block *v7;
  Operation *v8[2];
  unint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8[0] = a2;
  v8[1] = a3;
  mlir::dataflow::DeadCodeAnalysis::getOperandValues(a1, a2, (uint64_t)&v11);
  if (v14)
  {
    SuccessorForOperands = (mlir::Block *)mlir::BranchOpInterface::getSuccessorForOperands(v8, (uint64_t)v11, v12);
    if (SuccessorForOperands)
    {
      mlir::dataflow::DeadCodeAnalysis::markEdgeLive(a1, *((mlir::Block **)v8[0] + 2), SuccessorForOperands);
    }
    else
    {
      mlir::SuccessorRange::SuccessorRange(&v9, v8[0]);
      v5 = v10;
      if (v10)
      {
        v6 = (mlir::Block **)(v9 + 24);
        do
        {
          v7 = *v6;
          v6 += 4;
          mlir::dataflow::DeadCodeAnalysis::markEdgeLive(a1, *((mlir::Block **)v8[0] + 2), v7);
          --v5;
        }
        while (v5);
      }
    }
    if (v14)
    {
      if (v11 != &v13)
        free(v11);
    }
  }
}

void mlir::dataflow::DeadCodeAnalysis::getOperandValues(mlir::dataflow::DeadCodeAnalysis *this@<X0>, mlir::Operation *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  char v14;
  int v15;
  void *v16;
  unsigned int v17;
  _QWORD *v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x600000000;
  if ((*((_BYTE *)a2 + 46) & 0x80) == 0)
    goto LABEL_12;
  v6 = *((unsigned int *)a2 + 17);
  if (v6 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v6, 8);
    if ((*((_BYTE *)a2 + 46) & 0x80) == 0)
      goto LABEL_12;
    LODWORD(v6) = *((_DWORD *)a2 + 17);
  }
  if ((_DWORD)v6)
  {
    v7 = v6;
    v8 = (uint64_t *)(*((_QWORD *)a2 + 9) + 24);
    while (1)
    {
      v9 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>,mlir::Value>(*((_QWORD *)this + 1), *v8);
      v19 = this;
      llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)(v9 + 7), &v19);
      if (!*((_BYTE *)v9 + 176))
        break;
      v10 = v9[21];
      v11 = v21;
      if (v21 >= (unint64_t)HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v21 + 1, 8);
        v11 = v21;
      }
      *((_QWORD *)v20 + v11) = v10;
      v12 = v21 + 1;
      LODWORD(v21) = v21 + 1;
      v8 += 4;
      if (!--v7)
        goto LABEL_13;
    }
    v14 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_18;
  }
LABEL_12:
  v12 = v21;
LABEL_13:
  v13 = (void *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x600000000;
  v14 = 1;
  if (!v12 || &v20 == (void **)a3)
  {
LABEL_18:
    *(_BYTE *)(a3 + 64) = v14;
    v16 = v20;
    if (v20 == v22)
      return;
    goto LABEL_19;
  }
  if (v20 != v22)
  {
    *(_QWORD *)a3 = v20;
    v15 = HIDWORD(v21);
    *(_DWORD *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 12) = v15;
    v20 = v22;
    HIDWORD(v21) = 0;
    goto LABEL_27;
  }
  if (v12 < 7)
  {
    v18 = v22;
    v17 = v12;
    goto LABEL_25;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12, 8);
  v17 = v21;
  if ((_DWORD)v21)
  {
    v18 = v20;
    v13 = *(void **)a3;
LABEL_25:
    memcpy(v13, v18, 8 * v17);
  }
  *(_DWORD *)(a3 + 8) = v12;
LABEL_27:
  LODWORD(v21) = 0;
  *(_BYTE *)(a3 + 64) = 1;
  v16 = v20;
  if (v20 == v22)
    return;
LABEL_19:
  free(v16);
}

void mlir::dataflow::Executable::~Executable(mlir::dataflow::Executable *this)
{
  char *v2;
  void *v3;

  *(_QWORD *)this = off_1E0E4ED88;
  v2 = (char *)*((_QWORD *)this + 16);
  if (v2 != (char *)this + 144)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3 != *((void **)this + 8))
    free(v3);
  mlir::AnalysisState::~AnalysisState(this);
}

{
  char *v2;
  void *v3;

  *(_QWORD *)this = off_1E0E4ED88;
  v2 = (char *)*((_QWORD *)this + 16);
  if (v2 != (char *)this + 144)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3 != *((void **)this + 8))
    free(v3);
  mlir::AnalysisState::~AnalysisState(this);
}

void sub_1801581D4(void *__p)
{
  operator delete(__p);
}

void mlir::dataflow::PredecessorState::~PredecessorState(llvm **this)
{
  *this = (llvm *)off_1E0E4EDE8;
  llvm::deallocate_buffer(this[22], (void *)(24 * *((unsigned int *)this + 48)));
}

{
  *this = (llvm *)off_1E0E4EDE8;
  llvm::deallocate_buffer(this[22], (void *)(24 * *((unsigned int *)this + 48)));
}

void sub_180158214(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::AnalysisState *v12;
  _QWORD *v13;
  void *v14;

  v13 = (_QWORD *)*((_QWORD *)v12 + 16);
  if (v13 != (_QWORD *)((char *)v12 + 144))
    free(v13);
  v14 = (void *)*((_QWORD *)v12 + 9);
  if (v14 != *((void **)v12 + 8))
    free(v14);
  mlir::AnalysisState::~AnalysisState(v12);
}

void sub_18015827C()
{
  mlir::AnalysisState *v0;
  _QWORD *v1;
  void *v2;

  v1 = (_QWORD *)*((_QWORD *)v0 + 16);
  if (v1 != (_QWORD *)((char *)v0 + 144))
    free(v1);
  v2 = (void *)*((_QWORD *)v0 + 9);
  if (v2 != *((void **)v0 + 8))
    free(v2);
  mlir::AnalysisState::~AnalysisState(v0);
}

void sub_1801582A8(void *__p)
{
  operator delete(__p);
}

void mlir::dataflow::CFGEdge::~CFGEdge(mlir::dataflow::CFGEdge *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

void mlir::dataflow::DeadCodeAnalysis::~DeadCodeAnalysis(mlir::dataflow::DeadCodeAnalysis *this)
{
  uint64_t v2;
  llvm *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E0E4EDB8;
  v2 = *((unsigned int *)this + 10);
  v3 = (llvm *)*((_QWORD *)this + 3);
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)((char *)v3 + 8);
    v5 = 16 * v2;
    do
    {
      if ((*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
          llvm::deallocate_buffer(*(llvm **)(v6 + 8), (void *)(16 * *(unsigned int *)(v6 + 24)));
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
    v3 = (llvm *)*((_QWORD *)this + 3);
    v7 = (void *)(16 * *((unsigned int *)this + 10));
  }
  else
  {
    v7 = 0;
  }
  llvm::deallocate_buffer(v3, v7);
}

{
  uint64_t v2;
  llvm *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E0E4EDB8;
  v2 = *((unsigned int *)this + 10);
  v3 = (llvm *)*((_QWORD *)this + 3);
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)((char *)v3 + 8);
    v5 = 16 * v2;
    do
    {
      if ((*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
          llvm::deallocate_buffer(*(llvm **)(v6 + 8), (void *)(16 * *(unsigned int *)(v6 + 24)));
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
    v3 = (llvm *)*((_QWORD *)this + 3);
    v7 = (void *)(16 * *((unsigned int *)this + 10));
  }
  else
  {
    v7 = 0;
  }
  llvm::deallocate_buffer(v3, v7);
}

void sub_180158368(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  mlir::GenericProgramPoint *v14;

  mlir::GenericProgramPoint::~GenericProgramPoint(v14);
}

void sub_180158418(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  mlir::GenericProgramPoint *v14;
  void *v15;

  mlir::GenericProgramPoint::~GenericProgramPoint(v14);
  operator delete(v15);
}

uint64_t mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
          v31 = 79;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::RegionBranchOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
          v31 = 79;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::RegionBranchOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v23 = 79;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[160];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BranchOpInterface]";
          v31 = 73;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::BranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::BranchOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::BranchOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BranchOpInterface]";
          v31 = 73;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::BranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::BranchOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::BranchOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BranchOpInterface]";
      v23 = 73;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::BranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[140];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::OpInterface<mlir::RegionBranchTerminatorOpInterface,mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
          v31 = 89;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::RegionBranchTerminatorOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
          v31 = 89;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::RegionBranchTerminatorOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      v23 = 89;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[173];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>,mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>::InsertIntoBucket<mlir::Operation * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 24 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 24 * v11);
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  mlir::ValueRange::ValueRange((unint64_t *)a2 + 1, 0, 0);
  return a2;
}

_QWORD *llvm::DenseMap<mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  llvm *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = -4096;
        v18[3] = -4096;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = v4;
          do
          {
            v22 = *(_QWORD *)v20;
            if ((*(_QWORD *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v23 = *(_DWORD *)(a1 + 16);
              if (v23)
              {
                v24 = v23 - 1;
                v25 = (v23 - 1) & ((v22 >> 4) ^ (v22 >> 9));
                v21 = *(_QWORD *)a1 + 24 * v25;
                v26 = *(_QWORD *)v21;
                if (v22 != *(_QWORD *)v21)
                {
                  v27 = 0;
                  v28 = 1;
                  while (v26 != -4096)
                  {
                    if (v27)
                      v29 = 0;
                    else
                      v29 = v26 == -8192;
                    if (v29)
                      v27 = v21;
                    v30 = v25 + v28++;
                    v25 = v30 & v24;
                    v21 = *(_QWORD *)a1 + 24 * (v30 & v24);
                    v26 = *(_QWORD *)v21;
                    if (v22 == *(_QWORD *)v21)
                      goto LABEL_19;
                  }
                  if (v27)
                    v21 = v27;
                }
              }
              else
              {
                v21 = 0;
              }
LABEL_19:
              *(_QWORD *)v21 = v22;
              *(_OWORD *)(v21 + 8) = *(_OWORD *)((char *)v20 + 8);
              ++*(_DWORD *)(a1 + 8);
            }
            v20 = (llvm *)((char *)v20 + 24);
          }
          while (v20 != (llvm *)((char *)v4 + 24 * v3));
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = &result[3 * v10];
    do
    {
      *v12 = -4096;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_40:
      v34 = &result[3 * v13];
      do
      {
        *v15 = -4096;
        v15 += 3;
      }
      while (v15 != v34);
      return result;
    }
    v31 = v14 / 0x18 + 1;
    v15 = &result[3 * (v31 & 0x1FFFFFFFFFFFFFFELL)];
    v32 = v31 & 0x1FFFFFFFFFFFFFFELL;
    v33 = result;
    do
    {
      *v33 = -4096;
      v33[3] = -4096;
      v33 += 6;
      v32 -= 2;
    }
    while (v32);
    if (v31 != (v31 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_40;
  }
  return result;
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::dataflow::CFGEdge>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t (**v2)();
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::CFGEdge]";
      v15 = 73;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::dataflow::CFGEdge,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, (uint64_t)v2[393], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::dataflow::CFGEdge>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::dataflow::CFGEdge>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

_QWORD *mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v19;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = a2 | 6;
  if ((v3 & 1) == 0)
  {
    v32 = a1;
    a1 = v32;
    if (v24)
    {
      v33 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::Executable]";
      v34 = 76;
      v25 = llvm::StringRef::find((uint64_t *)&v33, "DesiredTypeName = ", 0x12uLL, 0);
      if (v34 >= v25)
        v26 = v25;
      else
        v26 = v34;
      v27 = &v33[v26];
      v28 = v34 - v26;
      if (v34 - v26 >= 0x12)
        v29 = 18;
      else
        v29 = v34 - v26;
      v30 = v28 - v29;
      if (v30 >= v30 - 1)
        v31 = v30 - 1;
      else
        v31 = v30;
      mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v27[v29], v31);
      a1 = v32;
    }
  }
  v33 = (const char *)v2;
  v34 = mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id;
  v4 = *(_DWORD *)(a1 + 136);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = ((0x2500000000 * v2) | (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 9))
       + ~((unint64_t)((mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = v4 - 1;
    v10 = v9 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    v11 = (_QWORD *)(v5 + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (v2 == *v11 && mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id == v13)
      goto LABEL_25;
    v15 = 0;
    v16 = 1;
    while (v12 != -4096 || v13 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v13 == -8192;
      if (v17 && v12 == -8192)
        v15 = v11;
      v19 = v10 + v16++;
      v10 = v19 & v9;
      v11 = (_QWORD *)(v5 + 24 * v10);
      v12 = *v11;
      v13 = v11[1];
      if (v2 == *v11 && mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id == v13)
        goto LABEL_25;
    }
    if (v15)
      v21 = v15;
    else
      v21 = v11;
  }
  else
  {
    v21 = 0;
  }
  v11 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(a1 + 120, (uint64_t)&v33, (uint64_t *)&v33, v21);
  *v11 = v33;
  v11[1] = v34;
  v11[2] = 0;
LABEL_25:
  result = (_QWORD *)v11[2];
  if (!result)
  {
    result = operator new(0xB0uLL);
    result[2] = 0;
    result[3] = 0;
    *((_DWORD *)result + 8) = 0;
    *((_BYTE *)result + 56) = 0;
    result[5] = result + 7;
    result[6] = 0;
    *result = off_1E0E4ED88;
    result[1] = v2;
    result[8] = result + 12;
    result[9] = result + 12;
    result[10] = 4;
    *((_DWORD *)result + 22) = 0;
    result[16] = result + 18;
    result[17] = 0x400000000;
    v23 = v11[2];
    v11[2] = result;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return (_QWORD *)v11[2];
    }
  }
  return result;
}

_BYTE *mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v19;
  _QWORD *v21;
  _BYTE *result;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = a2 & 0xFFFFFFFFFFFFFFF9 | 2;
  if ((v3 & 1) == 0)
  {
    v32 = a1;
    a1 = v32;
    if (v24)
    {
      v33 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::PredecessorState]";
      v34 = 82;
      v25 = llvm::StringRef::find((uint64_t *)&v33, "DesiredTypeName = ", 0x12uLL, 0);
      if (v34 >= v25)
        v26 = v25;
      else
        v26 = v34;
      v27 = &v33[v26];
      v28 = v34 - v26;
      if (v34 - v26 >= 0x12)
        v29 = 18;
      else
        v29 = v34 - v26;
      v30 = v28 - v29;
      if (v30 >= v30 - 1)
        v31 = v30 - 1;
      else
        v31 = v30;
      mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v27[v29], v31);
      a1 = v32;
    }
  }
  v33 = (const char *)v2;
  v34 = mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id;
  v4 = *(_DWORD *)(a1 + 136);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = ((0x2500000000 * v2) | (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 9))
       + ~((unint64_t)((mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = v4 - 1;
    v10 = v9 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    v11 = (_QWORD *)(v5 + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (v2 == *v11
      && mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id == v13)
    {
      goto LABEL_25;
    }
    v15 = 0;
    v16 = 1;
    while (v12 != -4096 || v13 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v13 == -8192;
      if (v17 && v12 == -8192)
        v15 = v11;
      v19 = v10 + v16++;
      v10 = v19 & v9;
      v11 = (_QWORD *)(v5 + 24 * v10);
      v12 = *v11;
      v13 = v11[1];
      if (v2 == *v11
        && mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id == v13)
      {
        goto LABEL_25;
      }
    }
    if (v15)
      v21 = v15;
    else
      v21 = v11;
  }
  else
  {
    v21 = 0;
  }
  v11 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(a1 + 120, (uint64_t)&v33, (uint64_t *)&v33, v21);
  *v11 = v33;
  v11[1] = v34;
  v11[2] = 0;
LABEL_25:
  result = (_BYTE *)v11[2];
  if (!result)
  {
    result = operator new(0xC8uLL);
    result[56] = 1;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_DWORD *)result + 8) = 0;
    *((_QWORD *)result + 5) = result + 56;
    *((_QWORD *)result + 6) = 0;
    *(_QWORD *)result = off_1E0E4EDE8;
    *((_QWORD *)result + 1) = v2;
    *((_QWORD *)result + 8) = result + 96;
    *((_QWORD *)result + 9) = result + 96;
    *((_QWORD *)result + 10) = 4;
    *((_DWORD *)result + 22) = 0;
    *((_QWORD *)result + 16) = result + 144;
    *((_QWORD *)result + 17) = 0x400000000;
    *((_QWORD *)result + 22) = 0;
    *((_QWORD *)result + 23) = 0;
    *((_DWORD *)result + 48) = 0;
    v23 = v11[2];
    v11[2] = result;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return (_BYTE *)v11[2];
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *,BOOL)>::callback_fn<mlir::dataflow::DeadCodeAnalysis::initializeSymbolCallables(mlir::Operation *)::$_0>(uint64_t a1, uint64_t a2, char a3)
{
  mlir::SymbolTable *v3;
  uint64_t v4;
  uint64_t v5;
  mlir::GenericProgramPoint *v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t InterfaceFor;
  uint64_t *v16;
  uint64_t InherentAttr;
  char v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  mlir::ForwardIterator *v28;
  uint64_t v29;
  void *__p;
  uint64_t *v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;

  v3 = (mlir::SymbolTable *)(((a2
                             + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                             + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                             + 71) & 0xFFFFFFFFFFFFFFF8)
                           + 32 * *(unsigned int *)(a2 + 40));
  v4 = *((_QWORD *)v3 + 1);
  if (v4)
    v5 = v4 - 8;
  else
    v5 = 0;
  v6 = (mlir::GenericProgramPoint *)(v5 + 32);
  v7 = *(mlir::GenericProgramPoint **)(v5 + 40);
  if (v7 != (mlir::GenericProgramPoint *)(v5 + 32))
  {
    v10 = *(_QWORD *)a1;
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v7);
      if (mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v11))
        break;
      v7 = (mlir::GenericProgramPoint *)*((_QWORD *)v7 + 1);
      if (v7 == v6)
        return;
    }
    if (v7 != v6)
    {
      v12 = 0;
      do
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v7);
        v14 = (void *)v13;
        InterfaceFor = mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v13);
        __p = v14;
        v31 = (uint64_t *)InterfaceFor;
        if (!mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&__p))
          goto LABEL_26;
        v16 = (uint64_t *)__p;
        InherentAttr = mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)__p);
        if (!InherentAttr)
        {
LABEL_16:
          v33 = 0;
          v34 = InherentAttr;
          goto LABEL_26;
        }
        if (*((_BYTE *)v16 + 47)
          && (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)v16, (uint64_t)"sym_name", 8), v18))
        {
          if (!InherentAttr)
            goto LABEL_16;
        }
        else if (!mlir::DictionaryAttr::contains((uint64_t)(v16 + 7), "sym_name", 8uLL))
        {
          v33 = 0;
          v34 = 0;
          goto LABEL_26;
        }
        v19 = mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v16);
        v33 = v16;
        v34 = v19;
        if (v16)
        {
          if ((mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)&v33) & 1) != 0
            || (a3 & 1) == 0
            && mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33))
          {
            v20 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*(_QWORD *)(v10 + 8), (uint64_t)__p);
            v21 = v20[56];
            v20[56] = 0;
            mlir::DataFlowAnalysis::propagateIfChanged(v10, (uint64_t)v20, v21);
          }
          v12 = 1;
        }
        do
        {
LABEL_26:
          v7 = (mlir::GenericProgramPoint *)*((_QWORD *)v7 + 1);
          if (v7 == v6)
            goto LABEL_29;
          mlir::GenericProgramPoint::~GenericProgramPoint(v7);
        }
        while (!mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v22));
      }
      while (v7 != v6);
LABEL_29:
      if ((v12 & 1) != 0)
      {
        mlir::SymbolTable::getSymbolUses(v3, (uint64_t)&__p);
        if (v32)
        {
          v23 = (uint64_t *)__p;
          v24 = v31;
          if (__p != v31)
          {
            do
            {
              if (!mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(*v23))
              {
                v25 = mlir::SymbolTableCollection::lookupSymbolIn(v10 + 24, **(_QWORD **)(a1 + 8), v23[1]);
                v26 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*(_QWORD *)(v10 + 8), v25);
                v27 = v26[56];
                v26[56] = 0;
                mlir::DataFlowAnalysis::propagateIfChanged(v10, (uint64_t)v26, v27);
              }
              v23 += 2;
            }
            while (v23 != v24);
          }
        }
        else
        {
          v28 = **(mlir::ForwardIterator ***)(a1 + 8);
          v29 = v10;
          v33 = &v29;
          mlir::detail::walk<mlir::ForwardIterator>(v28, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_8dataflow16DeadCodeAnalysis25initializeSymbolCallablesES3_ENK3__0clES3_bEUlNS1_19CallableOpInterfaceEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v33, 1);
        }
        if (v32)
        {
          if (__p)
          {
            v31 = (uint64_t *)__p;
            operator delete(__p);
          }
        }
      }
    }
  }
}

uint64_t mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
          v31 = 73;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::SymbolOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
          v31 = 73;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::SymbolOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      v23 = 73;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[143];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_8dataflow16DeadCodeAnalysis25initializeSymbolCallablesES3_ENK3__0clES3_bEUlNS1_19CallableOpInterfaceEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  int v7;

  result = mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  if (result)
  {
    if (a2)
    {
      mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
      v5 = **a1;
      v6 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*(_QWORD *)(v5 + 8), a2);
      v7 = v6[56];
      v6[56] = 0;
      return mlir::DataFlowAnalysis::propagateIfChanged(v5, (uint64_t)v6, v7);
    }
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::dataflow::CFGEdge,mlir::Block *&,mlir::Block *&>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t (**v5)();
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned __int8 **v26;
  _QWORD v27[2];
  _QWORD *v28;
  _QWORD v29[2];
  const char *v30;
  unint64_t v31;

  v5 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v6 & 1) == 0)
  {
    v25 = a5;
    v26 = a1;
    v23 = a3;
    v24 = a4;
    v22 = a2;
    v5 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    a2 = v22;
    a3 = v23;
    a4 = v24;
    a5 = v25;
    v14 = v13;
    a1 = v26;
    if (v14)
    {
      v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::CFGEdge]";
      v31 = 73;
      v15 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
      if (v31 >= v15)
        v16 = v15;
      else
        v16 = v31;
      v17 = &v30[v16];
      v18 = v31 - v16;
      if (v31 - v16 >= 0x12)
        v19 = 18;
      else
        v19 = v31 - v16;
      v20 = v18 - v19;
      if (v20 >= v20 - 1)
        v21 = v20 - 1;
      else
        v21 = v20;
      mlir::detail::TypeIDResolver<mlir::dataflow::CFGEdge,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      v5 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
      a2 = v22;
      a3 = v23;
      a4 = v24;
      a5 = v25;
      a1 = v26;
    }
  }
  v30 = a2;
  v31 = a3;
  v7 = *a5;
  v8 = (*a5 >> 4) ^ (*a5 >> 9);
  v9 = (v8 | ((unint64_t)((*a4 >> 4) ^ (*a4 >> 9)) << 32)) + ~(v8 << 32);
  v10 = (uint64_t)v5[393];
  v11 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v29[0] = *a4;
  v29[1] = v7;
  v27[0] = v29;
  v27[1] = &v30;
  v28 = v29;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v10, (((v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27)) >> 31) ^ ((v11 ^ (v11 >> 15))+ ~((v11 ^ (v11 >> 15)) << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::dataflow::CFGEdge * mlir::StorageUniquer::get<mlir::dataflow::CFGEdge,mlir::Block *&,mlir::Block *&>(llvm::function_ref<void ()(mlir::dataflow::CFGEdge *)>,mlir::TypeID,mlir::Block *&,mlir::Block *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v28, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::dataflow::CFGEdge * mlir::StorageUniquer::get<mlir::dataflow::CFGEdge,mlir::Block *&,mlir::Block *&>(llvm::function_ref<void ()(mlir::dataflow::CFGEdge *)>,mlir::TypeID,mlir::Block *&,mlir::Block *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v27);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::dataflow::CFGEdge * mlir::StorageUniquer::get<mlir::dataflow::CFGEdge,mlir::Block *&,mlir::Block *&>(llvm::function_ref<void ()(mlir::dataflow::CFGEdge *)>,mlir::TypeID,mlir::Block *&,mlir::Block *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == **(_QWORD **)a1 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::dataflow::CFGEdge * mlir::StorageUniquer::get<mlir::dataflow::CFGEdge,mlir::Block *&,mlir::Block *&>(llvm::function_ref<void ()(mlir::dataflow::CFGEdge *)>,mlir::TypeID,mlir::Block *&,mlir::Block *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::GenericProgramPointBase<mlir::dataflow::CFGEdge,std::pair<mlir::Block *,mlir::Block *>>::construct<std::pair<mlir::Block *,mlir::Block *>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::GenericProgramPointBase<mlir::dataflow::CFGEdge,std::pair<mlir::Block *,mlir::Block *>>::construct<std::pair<mlir::Block *,mlir::Block *>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  __n128 result;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  *(_QWORD *)(a1 + 80) += 32;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 32 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 32;
  if ((v10 & 1) == 0)
  {
    v13 = v9;
    v9 = v13;
    if (v14)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::CFGEdge]";
      v23 = 73;
      v15 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v15)
        v16 = v15;
      else
        v16 = v23;
      v17 = &v22[v16];
      v18 = v23 - v16;
      if (v23 - v16 >= 0x12)
        v19 = 18;
      else
        v19 = v23 - v16;
      v20 = v18 - v19;
      if (v20 >= v20 - 1)
        v21 = v20 - 1;
      else
        v21 = v20;
      mlir::detail::TypeIDResolver<mlir::dataflow::CFGEdge,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      v9 = v13;
    }
  }
  v11 = mlir::detail::TypeIDResolver<mlir::dataflow::CFGEdge,void>::resolveTypeID(void)::id;
  *(_QWORD *)v9 = &unk_1E0E2BE38;
  *(_QWORD *)(v9 + 8) = v11;
  result = *a2;
  *(__n128 *)(v9 + 16) = *a2;
  *(_QWORD *)v9 = off_1E0E4EF10;
  return result;
}

_QWORD *mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::dataflow::CFGEdge *>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v19;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = a2 & 0xFFFFFFFFFFFFFFF9;
  if ((v3 & 1) == 0)
  {
    v32 = a1;
    a1 = v32;
    if (v24)
    {
      v33 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::Executable]";
      v34 = 76;
      v25 = llvm::StringRef::find((uint64_t *)&v33, "DesiredTypeName = ", 0x12uLL, 0);
      if (v34 >= v25)
        v26 = v25;
      else
        v26 = v34;
      v27 = &v33[v26];
      v28 = v34 - v26;
      if (v34 - v26 >= 0x12)
        v29 = 18;
      else
        v29 = v34 - v26;
      v30 = v28 - v29;
      if (v30 >= v30 - 1)
        v31 = v30 - 1;
      else
        v31 = v30;
      mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v27[v29], v31);
      a1 = v32;
    }
  }
  v33 = (const char *)v2;
  v34 = mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id;
  v4 = *(_DWORD *)(a1 + 136);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = ((0x2500000000 * v2) | (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 9))
       + ~((unint64_t)((mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = v4 - 1;
    v10 = v9 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    v11 = (_QWORD *)(v5 + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (v2 == *v11 && mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id == v13)
      goto LABEL_25;
    v15 = 0;
    v16 = 1;
    while (v12 != -4096 || v13 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v13 == -8192;
      if (v17 && v12 == -8192)
        v15 = v11;
      v19 = v10 + v16++;
      v10 = v19 & v9;
      v11 = (_QWORD *)(v5 + 24 * v10);
      v12 = *v11;
      v13 = v11[1];
      if (v2 == *v11 && mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id == v13)
        goto LABEL_25;
    }
    if (v15)
      v21 = v15;
    else
      v21 = v11;
  }
  else
  {
    v21 = 0;
  }
  v11 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(a1 + 120, (uint64_t)&v33, (uint64_t *)&v33, v21);
  *v11 = v33;
  v11[1] = v34;
  v11[2] = 0;
LABEL_25:
  result = (_QWORD *)v11[2];
  if (!result)
  {
    result = operator new(0xB0uLL);
    result[2] = 0;
    result[3] = 0;
    *((_DWORD *)result + 8) = 0;
    *((_BYTE *)result + 56) = 0;
    result[5] = result + 7;
    result[6] = 0;
    *result = off_1E0E4ED88;
    result[1] = v2;
    result[8] = result + 12;
    result[9] = result + 12;
    result[10] = 4;
    *((_DWORD *)result + 22) = 0;
    result[16] = result + 18;
    result[17] = 0x400000000;
    v23 = v11[2];
    v11[2] = result;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return (_QWORD *)v11[2];
    }
  }
  return result;
}

char *mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::ProgramPoint>(uint64_t a1, const char *a2)
{
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  const char **v11;
  const char *v12;
  const char *v13;
  const char **v15;
  int v16;
  BOOL v17;
  unsigned int v19;
  const char **v21;
  char *result;
  const char *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if ((v3 & 1) == 0)
  {
    v32 = a1;
    a1 = v32;
    if (v24)
    {
      v33 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::Executable]";
      v34 = 76;
      v25 = llvm::StringRef::find((uint64_t *)&v33, "DesiredTypeName = ", 0x12uLL, 0);
      if (v34 >= v25)
        v26 = v25;
      else
        v26 = v34;
      v27 = &v33[v26];
      v28 = v34 - v26;
      if (v34 - v26 >= 0x12)
        v29 = 18;
      else
        v29 = v34 - v26;
      v30 = v28 - v29;
      if (v30 >= v30 - 1)
        v31 = v30 - 1;
      else
        v31 = v30;
      mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v27[v29], v31);
      a1 = v32;
    }
  }
  v33 = a2;
  v34 = mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id;
  v4 = *(_DWORD *)(a1 + 136);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = ((0x2500000000 * (_QWORD)a2) | (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 9))
       + ~((unint64_t)((mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = v4 - 1;
    v10 = v9 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    v11 = (const char **)(v5 + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (a2 == *v11
      && mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id == (_QWORD)v13)
    {
      goto LABEL_25;
    }
    v15 = 0;
    v16 = 1;
    while (v12 != (const char *)-4096 || v13 != (const char *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v13 == (const char *)-8192;
      if (v17 && v12 == (const char *)-8192)
        v15 = v11;
      v19 = v10 + v16++;
      v10 = v19 & v9;
      v11 = (const char **)(v5 + 24 * v10);
      v12 = *v11;
      v13 = v11[1];
      if (a2 == *v11
        && mlir::detail::TypeIDResolver<mlir::dataflow::Executable,void>::resolveTypeID(void)::id == (_QWORD)v13)
      {
        goto LABEL_25;
      }
    }
    if (v15)
      v21 = v15;
    else
      v21 = v11;
  }
  else
  {
    v21 = 0;
  }
  v11 = (const char **)llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(a1 + 120, (uint64_t)&v33, (uint64_t *)&v33, v21);
  *v11 = v33;
  v11[1] = (const char *)v34;
  v11[2] = 0;
LABEL_25:
  result = (char *)v11[2];
  if (!result)
  {
    result = (char *)operator new(0xB0uLL);
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_DWORD *)result + 8) = 0;
    result[56] = 0;
    *((_QWORD *)result + 5) = result + 56;
    *((_QWORD *)result + 6) = 0;
    *(_QWORD *)result = off_1E0E4ED88;
    *((_QWORD *)result + 1) = a2;
    *((_QWORD *)result + 8) = result + 96;
    *((_QWORD *)result + 9) = result + 96;
    *((_QWORD *)result + 10) = 4;
    *((_DWORD *)result + 22) = 0;
    *((_QWORD *)result + 16) = result + 144;
    *((_QWORD *)result + 17) = 0x400000000;
    v23 = v11[2];
    v11[2] = result;
    if (v23)
    {
      (*(void (**)(const char *))(*(_QWORD *)v23 + 8))(v23);
      return (char *)v11[2];
    }
  }
  return result;
}

char *mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::ProgramPoint>(uint64_t a1, const char *a2)
{
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  const char **v11;
  const char *v12;
  const char *v13;
  const char **v15;
  int v16;
  BOOL v17;
  unsigned int v19;
  const char **v21;
  char *result;
  const char *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if ((v3 & 1) == 0)
  {
    v32 = a1;
    a1 = v32;
    if (v24)
    {
      v33 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::PredecessorState]";
      v34 = 82;
      v25 = llvm::StringRef::find((uint64_t *)&v33, "DesiredTypeName = ", 0x12uLL, 0);
      if (v34 >= v25)
        v26 = v25;
      else
        v26 = v34;
      v27 = &v33[v26];
      v28 = v34 - v26;
      if (v34 - v26 >= 0x12)
        v29 = 18;
      else
        v29 = v34 - v26;
      v30 = v28 - v29;
      if (v30 >= v30 - 1)
        v31 = v30 - 1;
      else
        v31 = v30;
      mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v27[v29], v31);
      a1 = v32;
    }
  }
  v33 = a2;
  v34 = mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id;
  v4 = *(_DWORD *)(a1 + 136);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = ((0x2500000000 * (_QWORD)a2) | (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 9))
       + ~((unint64_t)((mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = v4 - 1;
    v10 = v9 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    v11 = (const char **)(v5 + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (a2 == *v11
      && mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id == (_QWORD)v13)
    {
      goto LABEL_25;
    }
    v15 = 0;
    v16 = 1;
    while (v12 != (const char *)-4096 || v13 != (const char *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v13 == (const char *)-8192;
      if (v17 && v12 == (const char *)-8192)
        v15 = v11;
      v19 = v10 + v16++;
      v10 = v19 & v9;
      v11 = (const char **)(v5 + 24 * v10);
      v12 = *v11;
      v13 = v11[1];
      if (a2 == *v11
        && mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id == (_QWORD)v13)
      {
        goto LABEL_25;
      }
    }
    if (v15)
      v21 = v15;
    else
      v21 = v11;
  }
  else
  {
    v21 = 0;
  }
  v11 = (const char **)llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(a1 + 120, (uint64_t)&v33, (uint64_t *)&v33, v21);
  *v11 = v33;
  v11[1] = (const char *)v34;
  v11[2] = 0;
LABEL_25:
  result = (char *)v11[2];
  if (!result)
  {
    result = (char *)operator new(0xC8uLL);
    result[56] = 1;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_DWORD *)result + 8) = 0;
    *((_QWORD *)result + 5) = result + 56;
    *((_QWORD *)result + 6) = 0;
    *(_QWORD *)result = off_1E0E4EDE8;
    *((_QWORD *)result + 1) = a2;
    *((_QWORD *)result + 8) = result + 96;
    *((_QWORD *)result + 9) = result + 96;
    *((_QWORD *)result + 10) = 4;
    *((_DWORD *)result + 22) = 0;
    *((_QWORD *)result + 16) = result + 144;
    *((_QWORD *)result + 17) = 0x400000000;
    *((_QWORD *)result + 22) = 0;
    *((_QWORD *)result + 23) = 0;
    *((_DWORD *)result + 48) = 0;
    v23 = v11[2];
    v11[2] = result;
    if (v23)
    {
      (*(void (**)(const char *))(*(_QWORD *)v23 + 8))(v23);
      return (char *)v11[2];
    }
  }
  return result;
}

_BYTE *mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Block *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v19;
  _QWORD *v21;
  _BYTE *result;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = a2 | 6;
  if ((v3 & 1) == 0)
  {
    v32 = a1;
    a1 = v32;
    if (v24)
    {
      v33 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::dataflow::PredecessorState]";
      v34 = 82;
      v25 = llvm::StringRef::find((uint64_t *)&v33, "DesiredTypeName = ", 0x12uLL, 0);
      if (v34 >= v25)
        v26 = v25;
      else
        v26 = v34;
      v27 = &v33[v26];
      v28 = v34 - v26;
      if (v34 - v26 >= 0x12)
        v29 = 18;
      else
        v29 = v34 - v26;
      v30 = v28 - v29;
      if (v30 >= v30 - 1)
        v31 = v30 - 1;
      else
        v31 = v30;
      mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v27[v29], v31);
      a1 = v32;
    }
  }
  v33 = (const char *)v2;
  v34 = mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id;
  v4 = *(_DWORD *)(a1 + 136);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = ((0x2500000000 * v2) | (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 9))
       + ~((unint64_t)((mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = v4 - 1;
    v10 = v9 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    v11 = (_QWORD *)(v5 + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (v2 == *v11
      && mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id == v13)
    {
      goto LABEL_25;
    }
    v15 = 0;
    v16 = 1;
    while (v12 != -4096 || v13 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v13 == -8192;
      if (v17 && v12 == -8192)
        v15 = v11;
      v19 = v10 + v16++;
      v10 = v19 & v9;
      v11 = (_QWORD *)(v5 + 24 * v10);
      v12 = *v11;
      v13 = v11[1];
      if (v2 == *v11
        && mlir::detail::TypeIDResolver<mlir::dataflow::PredecessorState,void>::resolveTypeID(void)::id == v13)
      {
        goto LABEL_25;
      }
    }
    if (v15)
      v21 = v15;
    else
      v21 = v11;
  }
  else
  {
    v21 = 0;
  }
  v11 = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>,std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>,llvm::DenseMapInfo<std::pair<mlir::ProgramPoint,mlir::TypeID>,void>,llvm::detail::DenseMapPair<std::pair<mlir::ProgramPoint,mlir::TypeID>,std::unique_ptr<mlir::AnalysisState>>>::InsertIntoBucketImpl<std::pair<mlir::ProgramPoint,mlir::TypeID>>(a1 + 120, (uint64_t)&v33, (uint64_t *)&v33, v21);
  *v11 = v33;
  v11[1] = v34;
  v11[2] = 0;
LABEL_25:
  result = (_BYTE *)v11[2];
  if (!result)
  {
    result = operator new(0xC8uLL);
    result[56] = 1;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_DWORD *)result + 8) = 0;
    *((_QWORD *)result + 5) = result + 56;
    *((_QWORD *)result + 6) = 0;
    *(_QWORD *)result = off_1E0E4EDE8;
    *((_QWORD *)result + 1) = v2;
    *((_QWORD *)result + 8) = result + 96;
    *((_QWORD *)result + 9) = result + 96;
    *((_QWORD *)result + 10) = 4;
    *((_DWORD *)result + 22) = 0;
    *((_QWORD *)result + 16) = result + 144;
    *((_QWORD *)result + 17) = 0x400000000;
    *((_QWORD *)result + 22) = 0;
    *((_QWORD *)result + 23) = 0;
    *((_DWORD *)result + 48) = 0;
    v23 = v11[2];
    v11[2] = result;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return (_BYTE *)v11[2];
    }
  }
  return result;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::ReturnLike>(_QWORD *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      v15 = 82;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v2[182]);
}

void mlir::dataflow::AbstractSparseLattice::onUpdate(mlir::dataflow::AbstractSparseLattice *this, mlir::DataFlowSolver *a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *i;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;

  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4)
  {
    v5 = (__int128 *)*((_QWORD *)this + 5);
    v6 = *((_QWORD *)a2 + 5);
    v7 = 16 * v4;
    do
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = *((_QWORD *)a2 + 1);
      v10 = *v5;
      if (v8 == v9)
        v11 = 0;
      else
        v11 = 32 * (v8 - v9) - 1;
      v12 = *((_QWORD *)a2 + 4) + v6;
      if (v11 == v12)
      {
        v25 = *v5;
        std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity((uint64_t)a2);
        v10 = v25;
        v9 = *((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
      }
      *(_OWORD *)(*(_QWORD *)(v9 + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v12) = v10;
      v6 = *((_QWORD *)a2 + 5) + 1;
      *((_QWORD *)a2 + 5) = v6;
      ++v5;
      v7 -= 16;
    }
    while (v7);
  }
  for (i = *(_QWORD **)(*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8); i; i = (_QWORD *)*i)
  {
    v14 = *((unsigned int *)this + 32);
    if ((_DWORD)v14)
    {
      v15 = (unint64_t *)*((_QWORD *)this + 15);
      v16 = i[2] & 0xFFFFFFFFFFFFFFF9 | 2;
      v17 = *((_QWORD *)a2 + 5);
      v18 = 8 * v14;
      do
      {
        v20 = *((_QWORD *)a2 + 2);
        v21 = *((_QWORD *)a2 + 1);
        v22 = *v15;
        if (v20 == v21)
          v23 = 0;
        else
          v23 = 32 * (v20 - v21) - 1;
        v24 = v17 + *((_QWORD *)a2 + 4);
        if (v23 == v24)
        {
          std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity((uint64_t)a2);
          v21 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4);
        }
        v19 = (unint64_t *)(*(_QWORD *)(v21 + ((v24 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v24);
        *v19 = v16;
        v19[1] = v22;
        v17 = *((_QWORD *)a2 + 5) + 1;
        *((_QWORD *)a2 + 5) = v17;
        ++v15;
        v18 -= 8;
      }
      while (v18);
    }
  }
}

mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::AbstractSparseForwardDataFlowAnalysis(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *this, mlir::DataFlowSolver *a2)
{
  _QWORD *v3;

  v3 = mlir::DataFlowAnalysis::DataFlowAnalysis(this, a2);
  *v3 = off_1E0E4EEC0;
  mlir::StorageUniquer::registerParametricStorageType<mlir::dataflow::CFGEdge>((uint64_t *)(v3[1] + 112));
  return this;
}

uint64_t mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::initialize(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *this, mlir::Operation *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *((unsigned int *)a2 + 11);
  if ((v4 & 0x7FFFFF) != 0)
  {
    v5 = (_QWORD *)((((unint64_t)a2 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)a2 + 10));
    v6 = &v5[3 * (v4 & 0x7FFFFF)];
    do
    {
      if ((_QWORD *)*v5 != v5)
      {
        v7 = v5[1];
        if (v7)
          v8 = v7 - 8;
        else
          v8 = 0;
        v9 = *(uint64_t **)(v8 + 48);
        v10 = *(_QWORD *)(v8 + 56) - (_QWORD)v9;
        if (v10)
        {
          v11 = 8 * (v10 >> 3);
          do
          {
            v12 = *v9++;
            v13 = (*(uint64_t (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t))(*(_QWORD *)this + 48))(this, v12);
            (*(void (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t))(*(_QWORD *)this + 56))(this, v13);
            v11 -= 8;
          }
          while (v11);
        }
      }
      v5 += 3;
    }
    while (v5 != v6);
  }
  return mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::initializeRecursively(this, a2);
}

uint64_t mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::initializeRecursively(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *this, mlir::Operation *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *j;
  mlir::Operation *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitOperation(this, (uint64_t)a2);
  v4 = *((unsigned int *)a2 + 11);
  if ((v4 & 0x7FFFFF) != 0)
  {
    v5 = (((unint64_t)a2 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)a2 + 10);
    v6 = v5 + 24 * (v4 & 0x7FFFFF);
LABEL_3:
    for (i = *(_QWORD *)(v5 + 8); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v5)
      {
        v5 += 24;
        if (v5 != v6)
          goto LABEL_3;
        return 1;
      }
      if (i)
        v8 = i - 8;
      else
        v8 = 0;
      v9 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(*((_QWORD *)this + 1), v8);
      v10 = v9[9];
      if (v10 != v9[8])
        goto LABEL_10;
      v16 = *((unsigned int *)v9 + 21);
      if (!(_DWORD)v16)
        break;
      v17 = 0;
      v18 = 8 * v16;
      v19 = (_QWORD *)v9[9];
      while ((mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *)*v19 != this)
      {
        if (*v19 == -2)
          v17 = v19;
        ++v19;
        v18 -= 8;
        if (!v18)
        {
          if (!v17)
            goto LABEL_26;
          *v17 = this;
          --*((_DWORD *)v9 + 22);
          goto LABEL_11;
        }
      }
LABEL_14:
      mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitBlock(this, v8);
      v13 = (mlir::GenericProgramPoint *)(v8 + 32);
      for (j = *(mlir::GenericProgramPoint **)(v8 + 40); j != v13; j = (mlir::GenericProgramPoint *)*((_QWORD *)j + 1))
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(j);
        if (!mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::initializeRecursively(this, v15))
          return 0;
      }
    }
LABEL_26:
    if (v16 >= *((_DWORD *)v9 + 20))
    {
LABEL_10:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v9 + 8), this);
      if (!v11)
        goto LABEL_14;
    }
    else
    {
      *((_DWORD *)v9 + 21) = v16 + 1;
      *(_QWORD *)(v10 + 8 * v16) = this;
    }
LABEL_11:
    v12 = *((unsigned int *)v9 + 34);
    if (v12 >= *((unsigned int *)v9 + 35))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 16), v9 + 18, v12 + 1, 8);
      v12 = *((unsigned int *)v9 + 34);
    }
    *(_QWORD *)(v9[16] + 8 * v12) = this;
    ++*((_DWORD *)v9 + 34);
    goto LABEL_14;
  }
  return 1;
}

void mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitOperation(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *this, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t NextResultAtOffset;
  uint64_t v9;
  uint64_t v10;
  uint64_t InterfaceFor;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  mlir::Operation *v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[48];
  void *v45;
  uint64_t v46;
  _QWORD v47[8];

  v47[6] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 36)
    && *((_BYTE *)mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(*((_QWORD *)this + 1), *(_QWORD *)(a2 + 16))+ 56))
  {
    v45 = v47;
    v46 = 0x600000000;
    v4 = *(unsigned int *)(a2 + 36);
    if (v4 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, v4, 8);
      LODWORD(v4) = *(_DWORD *)(a2 + 36);
    }
    if ((_DWORD)v4)
      v5 = (char *)(a2 - 16);
    else
      v5 = 0;
    if ((_DWORD)v4)
    {
      v6 = 0;
      v7 = v4;
      do
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, v6);
        v9 = (*(uint64_t (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t))(*(_QWORD *)this + 48))(this, NextResultAtOffset);
        v10 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, v46 + 1, 8);
          v10 = v46;
        }
        *((_QWORD *)v45 + v10) = v9;
        LODWORD(v46) = v46 + 1;
        ++v6;
      }
      while (v7 != v6);
    }
    if (mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(a2)
      && (!a2
        ? (InterfaceFor = 0)
        : (InterfaceFor = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(a2)),
          a2))
    {
      mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitRegionSuccessors((uint64_t *)this, a2 & 0xFFFFFFFFFFFFFFF9 | 2, a2, InterfaceFor, 0, (uint64_t *)v45, v46);
    }
    else
    {
      if (!mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(a2))
        goto LABEL_25;
      if (a2)
        mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
      v18 = (mlir::Operation *)a2;
      if (a2)
      {
        v19 = a2 & 0xFFFFFFFFFFFFFFF9 | 2;
        v20 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*((_QWORD *)this + 1), (uint64_t)v18);
        mlir::DataFlowAnalysis::addDependency((uint64_t)this, (uint64_t)v20, v19);
        if (v20[56])
        {
          v21 = *((unsigned int *)v20 + 34);
          if ((_DWORD)v21)
          {
            v22 = (uint64_t *)*((_QWORD *)v20 + 16);
            v23 = &v22[v21];
            do
            {
              v24 = *v22;
              if ((*(_BYTE *)(*v22 + 46) & 0x80) != 0)
              {
                v25 = *(unsigned int *)(v24 + 68);
                if ((_DWORD)v25 && (_DWORD)v46 != 0)
                {
                  v27 = (uint64_t *)v45;
                  v28 = 8 * v46 - 8;
                  v29 = (uint64_t *)(*(_QWORD *)(v24 + 72) + 24);
                  v30 = v25 - 1;
                  do
                  {
                    v32 = *v29;
                    v29 += 4;
                    v31 = v32;
                    v33 = *v27++;
                    v34 = (*(uint64_t (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t))(*(_QWORD *)this + 48))(this, v31);
                    mlir::DataFlowAnalysis::addDependency((uint64_t)this, v34, v19);
                    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, v34);
                    mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)this, v33, v35);
                    if (v30-- == 0)
                      break;
                    v37 = v28;
                    v28 -= 8;
                  }
                  while (v37);
                }
              }
              ++v22;
            }
            while (v22 != v23);
          }
        }
        else if ((_DWORD)v46)
        {
          v38 = (uint64_t *)v45;
          v39 = 8 * v46;
          do
          {
            v40 = *v38++;
            (*(void (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t))(*(_QWORD *)this + 56))(this, v40);
            v39 -= 8;
          }
          while (v39);
        }
      }
      else
      {
LABEL_25:
        v42 = v44;
        v43 = 0x600000000;
        if ((*(_BYTE *)(a2 + 46) & 0x80) != 0
          && ((v12 = *(unsigned int *)(a2 + 68), v12 < 7)
           || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, v12, 8),
               (*(_BYTE *)(a2 + 46) & 0x80) != 0))
          && (v13 = *(unsigned int *)(a2 + 68), (_DWORD)v13))
        {
          v14 = (_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
          do
          {
            v15 = (*(uint64_t (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, _QWORD))(*(_QWORD *)this + 48))(this, *v14);
            v41 = this;
            llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)(v15 + 56), &v41);
            v16 = v43;
            if (v43 >= (unint64_t)HIDWORD(v43))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, v43 + 1, 8);
              v16 = v43;
            }
            *((_QWORD *)v42 + v16) = v15;
            v17 = v43 + 1;
            LODWORD(v43) = v43 + 1;
            v14 += 4;
            --v13;
          }
          while (v13);
        }
        else
        {
          v17 = v43;
        }
        (*(void (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t, void *, _QWORD, void *, _QWORD))(*(_QWORD *)this + 32))(this, a2, v42, v17, v45, v46);
        if (v42 != v44)
          free(v42);
      }
    }
    if (v45 != v47)
      free(v45);
  }
}

void mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitBlock(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *this, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::BlockOperand *ParentOp;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t SuccessorIndex;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t canMapOperands;
  uint64_t v29;
  uint64_t v30;
  unint64_t Parent;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t ArgOperands;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  mlir::Block *v58;
  mlir::BlockOperand **v59;
  uint64_t (*InterfaceFor)(void);
  uint64_t v61;
  unint64_t v62;
  unint64_t v63[2];
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD v68[8];

  v68[6] = *MEMORY[0x1E0C80C00];
  v61 = a2;
  if (((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) & 0x7FFFFFFF8) == 0
    || !*((_BYTE *)mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::Block *>(*((_QWORD *)this + 1), a2)+ 56))
  {
    return;
  }
  v66 = v68;
  v67 = 0x600000000;
  v5 = *(char **)(a2 + 48);
  v4 = *(char **)(a2 + 56);
  v6 = v4 - v5;
  v7 = ((unint64_t)(v4 - v5) >> 3);
  if (v7 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v7, 8);
    v5 = *(char **)(a2 + 48);
    v4 = *(char **)(a2 + 56);
    v6 = v4 - v5;
  }
  if (v4 != v5)
  {
    v8 = 8 * (v6 >> 3);
    do
    {
      v9 = (*(uint64_t (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, _QWORD))(*(_QWORD *)this + 48))(this, *(_QWORD *)v5);
      v10 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
        v10 = v67;
      }
      *((_QWORD *)v66 + v10) = v9;
      LODWORD(v67) = v67 + 1;
      v5 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  if (mlir::Block::isEntryBlock((mlir::Block *)a2))
  {
    ParentOp = (mlir::BlockOperand *)mlir::Block::getParentOp((mlir::Block *)a2);
    if (!mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)ParentOp))
    {
      v59 = 0;
      InterfaceFor = 0;
      goto LABEL_38;
    }
    if (!ParentOp)
    {
      v59 = 0;
      InterfaceFor = 0;
      goto LABEL_38;
    }
    v59 = (mlir::BlockOperand **)ParentOp;
    InterfaceFor = (uint64_t (*)(void))mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)ParentOp);
    canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v59);
    if (canMapOperands != mlir::Block::getParent((mlir::Block *)a2))
    {
LABEL_38:
      v29 = mlir::Block::getParentOp((mlir::Block *)a2);
      if (mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(v29)
        && v29)
      {
        v30 = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(v29);
        Parent = mlir::Block::getParent((mlir::Block *)a2);
        mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitRegionSuccessors((uint64_t *)this, a2 | 6, v29, v30, Parent, (uint64_t *)v66, v67);
      }
      else
      {
        v52 = mlir::Block::getParentOp((mlir::Block *)a2);
        v62 = mlir::Block::getParent((mlir::Block *)a2);
        mlir::ValueRange::ValueRange(v63, 0, 0);
        (*(void (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t, unint64_t *, void *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, v52, &v62, v66, v67, 0);
      }
      goto LABEL_57;
    }
    v32 = a2 | 6;
    v33 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::Operation *>(*((_QWORD *)this + 1), (uint64_t)v59);
    mlir::DataFlowAnalysis::addDependency((uint64_t)this, (uint64_t)v33, v32);
    if (!v33[56])
    {
      if ((_DWORD)v67)
      {
        v53 = (uint64_t *)v66;
        v54 = 8 * v67;
        do
        {
          v55 = *v53++;
          (*(void (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t))(*(_QWORD *)this + 56))(this, v55);
          v54 -= 8;
        }
        while (v54);
      }
      goto LABEL_57;
    }
    v34 = *((unsigned int *)v33 + 34);
    if (!(_DWORD)v34)
      goto LABEL_57;
    v35 = (uint64_t *)*((_QWORD *)v33 + 16);
    v36 = &v35[v34];
    while (1)
    {
      v37 = *v35;
      if (*v35)
      {
        v38 = mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(*v35);
        v62 = v37;
        v63[0] = v38;
        ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v62);
        if (v40)
          goto LABEL_50;
      }
      else
      {
        v62 = 0;
        v63[0] = 0;
        ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v62);
        if (v40)
        {
LABEL_50:
          if ((_DWORD)v67)
          {
            v41 = (uint64_t *)v66;
            v42 = 8 * v67 - 8;
            v43 = (uint64_t *)(ArgOperands + 24);
            v44 = v40 - 1;
            do
            {
              v46 = *v43;
              v43 += 4;
              v45 = v46;
              v47 = *v41++;
              v48 = (*(uint64_t (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t))(*(_QWORD *)this + 48))(this, v45);
              mlir::DataFlowAnalysis::addDependency((uint64_t)this, v48, v32);
              v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 32))(v47, v48);
              mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)this, v47, v49);
              if (v44-- == 0)
                break;
              v51 = v42;
              v42 -= 8;
            }
            while (v51);
          }
        }
      }
      if (++v35 == v36)
        goto LABEL_57;
    }
  }
  v59 = *(mlir::BlockOperand ***)a2;
  InterfaceFor = (uint64_t (*)(void))mlir::PredecessorIterator::unwrap;
  if (!v59)
    goto LABEL_57;
  while (1)
  {
    v58 = 0;
    v58 = (mlir::Block *)InterfaceFor();
    v12 = mlir::StorageUniquer::get<mlir::dataflow::CFGEdge,mlir::Block *&,mlir::Block *&>((unsigned __int8 **)(*((_QWORD *)this + 1) + 112), 0, 0, &v58, &v61);
    v13 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::Executable,mlir::dataflow::CFGEdge *>(*((_QWORD *)this + 1), v12);
    v62 = (unint64_t)this;
    llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)(v13 + 8), (const void **)&v62);
    if (*((_BYTE *)v13 + 56))
      break;
LABEL_16:
    v59 = (mlir::BlockOperand **)*v59;
    if (!v59)
      goto LABEL_57;
  }
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v58);
  v15 = v14;
  if (!mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v14))
  {
    v56 = 0;
    v57 = 0;
    goto LABEL_32;
  }
  if (v15)
  {
    v16 = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v15);
    v56 = v15;
    v57 = v16;
    SuccessorIndex = mlir::PredecessorIterator::getSuccessorIndex((mlir::BlockOperand **)&v59);
    mlir::BranchOpInterface::getSuccessorOperands((mlir::BranchOpInterface *)&v56, SuccessorIndex);
    if ((_DWORD)v67)
    {
      v18 = 0;
      v19 = v66;
      v20 = 8 * v67;
      do
      {
        while (v62 > v18
             || !*(_QWORD *)(mlir::MutableOperandRange::operator[](v63, (int)v18 - (int)v62) + 24))
        {
          (*(void (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, _QWORD))(*(_QWORD *)this
                                                                                                  + 56))(this, v19[v18++]);
          v20 -= 8;
          if (!v20)
            goto LABEL_29;
        }
        v21 = v19[v18];
        v22 = v61 | 6;
        v23 = (*(uint64_t (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *))(*(_QWORD *)this + 48))(this);
        mlir::DataFlowAnalysis::addDependency((uint64_t)this, v23, v22);
        v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, v23);
        mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)this, v21, v24);
        ++v18;
        v20 -= 8;
      }
      while (v20);
    }
LABEL_29:
    if (v64 != &v65)
      free(v64);
    goto LABEL_16;
  }
  v56 = 0;
  v57 = 0;
LABEL_32:
  if ((_DWORD)v67)
  {
    v25 = (uint64_t *)v66;
    v26 = 8 * v67;
    do
    {
      v27 = *v25++;
      (*(void (**)(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *, uint64_t))(*(_QWORD *)this + 56))(this, v27);
      v26 -= 8;
    }
    while (v26);
  }
LABEL_57:
  if (v66 != v68)
    free(v66);
}

uint64_t mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visit(mlir::dataflow::AbstractSparseForwardDataFlowAnalysis *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v2 = a2 & 6;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v2 == 2 && v3 != 0)
  {
    mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitOperation(a1, v3);
    return 1;
  }
  v5 = 0;
  if (v2 == 6 && v3)
  {
    mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitBlock(a1, v3);
    return 1;
  }
  return v5;
}

void mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitRegionSuccessors(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t InterfaceFor;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *Parent;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t NextResultAtOffset;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  mlir::Block *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  _QWORD v59[2];
  __int128 v60;
  __int128 v61;
  void *v62;
  _QWORD v63[6];

  v63[4] = *MEMORY[0x1E0C80C00];
  v59[0] = a3;
  v59[1] = a4;
  v10 = mlir::DataFlowSolver::getOrCreateState<mlir::dataflow::PredecessorState,mlir::ProgramPoint>(a1[1], (const char *)a2);
  mlir::DataFlowAnalysis::addDependency((uint64_t)a1, (uint64_t)v10, a2);
  v11 = *((unsigned int *)v10 + 34);
  if (!(_DWORD)v11)
    return;
  v12 = (uint64_t *)*((_QWORD *)v10 + 16);
  v13 = (a2 & 6) != 2;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0)
    v13 = 1;
  v53 = v13;
  v54 = 8 * a7;
  v55 = &v12[v11];
  v52 = (mlir::Block *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v56 = v10;
  while (1)
  {
    v14 = *v12;
    if (*v12 == v59[0])
    {
      v16 = mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v59, a5);
      v18 = v17;
      goto LABEL_16;
    }
    if (!mlir::OpInterface<mlir::RegionBranchTerminatorOpInterface,mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits>::getInterfaceFor(*v12))
      break;
    if (v14)
      InterfaceFor = mlir::OpInterface<mlir::RegionBranchTerminatorOpInterface,mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits>::getInterfaceFor(v14);
    else
      InterfaceFor = 0;
    *(_QWORD *)&v60 = v14;
    *((_QWORD *)&v60 + 1) = InterfaceFor;
    if (!v14)
      goto LABEL_58;
    mlir::BranchOpInterface::getSuccessorOperands((mlir::BranchOpInterface *)&v60, a5);
    v16 = mlir::MutableOperandRange::operator mlir::OperandRange((unsigned int *)&v61);
    v18 = v19;
    if (v62 != v63)
      free(v62);
LABEL_16:
    v20 = *((_DWORD *)v10 + 48);
    if (v20)
    {
      v21 = *((_QWORD *)v10 + 22);
      v22 = v20 - 1;
      v23 = (v20 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v24 = *(_QWORD *)(v21 + 24 * v23);
      if (v24 == v14)
      {
LABEL_18:
        v61 = *(_OWORD *)(v21 + 24 * v23 + 8);
        v25 = *((_QWORD *)&v61 + 1);
        v60 = v61;
        if (*((_QWORD *)&v61 + 1) == a7)
          goto LABEL_19;
        goto LABEL_26;
      }
      v27 = 1;
      while (v24 != -4096)
      {
        v28 = v23 + v27++;
        v23 = v28 & v22;
        v24 = *(_QWORD *)(v21 + 24 * v23);
        if (v24 == v14)
          goto LABEL_18;
      }
    }
    mlir::ValueRange::ValueRange((unint64_t *)&v61, 0, 0);
    v25 = *((_QWORD *)&v61 + 1);
    v60 = v61;
    if (*((_QWORD *)&v61 + 1) == a7)
    {
LABEL_19:
      LODWORD(v26) = 0;
      if (v18)
        goto LABEL_52;
      goto LABEL_5;
    }
LABEL_26:
    if (v53)
    {
      v29 = v16;
      if (v25)
      {
        v26 = *(unsigned int *)(mlir::ValueRange::dereference_iterator(&v60, 0) + 24);
        Parent = (_QWORD *)mlir::Block::getParent(v52);
        v31 = v59[0];
        if ((_QWORD *)*Parent != Parent)
          goto LABEL_29;
LABEL_38:
        v34 = 0;
      }
      else
      {
        v26 = 0;
        Parent = (_QWORD *)mlir::Block::getParent(v52);
        v31 = v59[0];
        if ((_QWORD *)*Parent == Parent)
          goto LABEL_38;
LABEL_29:
        v32 = Parent[1];
        if (v32)
          v33 = v32 - 8;
        else
          v33 = 0;
        v34 = *(_QWORD *)(v33 + 48);
      }
      *(_QWORD *)&v61 = Parent;
      mlir::ValueRange::ValueRange((unint64_t *)&v61 + 1, v34 + 8 * v26, *((unint64_t *)&v60 + 1));
      (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t))(*a1 + 40))(a1, v31, &v61, a6, a7, v26);
      goto LABEL_51;
    }
    if (v25)
    {
      v35 = mlir::ValueRange::dereference_iterator(&v60, 0);
      if (v35 && (*(_QWORD *)(v35 + 8) & 7) == 6)
      {
        v29 = v16;
        v26 = (*(_DWORD *)(v35 + 16) + 6);
      }
      else
      {
        v29 = v16;
        v26 = *(_QWORD *)(v35 + 8) & 7;
      }
      v36 = v59[0];
      if (*(_DWORD *)(v59[0] + 36))
        NextResultAtOffset = v59[0] - 16;
      else
        NextResultAtOffset = 0;
      v38 = *((_QWORD *)&v60 + 1);
      if ((_DWORD)v26)
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v26);
    }
    else
    {
      v29 = v16;
      v26 = 0;
      v36 = v59[0];
      if (*(_DWORD *)(v59[0] + 36))
        NextResultAtOffset = v59[0] - 16;
      else
        NextResultAtOffset = 0;
      v38 = *((_QWORD *)&v60 + 1);
    }
    *(_QWORD *)&v61 = 0;
    mlir::ValueRange::ValueRange((unint64_t *)&v61 + 1, NextResultAtOffset, v38);
    (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t))(*a1 + 40))(a1, v36, &v61, a6, a7, v26);
LABEL_51:
    v16 = v29;
    if (v18)
    {
LABEL_52:
      if (a7 != v26)
      {
        v39 = v26;
        v40 = &a6[v39];
        v41 = 8 * a7 - 8 - v39 * 8;
        v42 = (uint64_t *)(v16 + 24);
        v43 = v18 - 1;
        do
        {
          v45 = *v42;
          v42 += 4;
          v44 = v45;
          v46 = *v40++;
          v47 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 48))(a1, v44);
          mlir::DataFlowAnalysis::addDependency((uint64_t)a1, v47, a2);
          v48 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 32))(v46, v47);
          mlir::DataFlowAnalysis::propagateIfChanged((uint64_t)a1, v46, v48);
          if (v43-- == 0)
            break;
          v50 = v41;
          v41 -= 8;
        }
        while (v50);
      }
    }
LABEL_5:
    ++v12;
    v10 = v56;
    if (v12 == v55)
      return;
  }
  v60 = 0uLL;
LABEL_58:
  if (a7)
  {
    do
    {
      v51 = *a6++;
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 56))(a1, v51);
      v54 -= 8;
    }
    while (v54);
  }
}

uint64_t mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::setAllToEntryStates(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v4 = result;
    v5 = 8 * a3;
    do
    {
      v6 = *a2++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t mlir::dataflow::AbstractSparseLattice::join()
{
  return 0;
}

uint64_t mlir::dataflow::AbstractSparseLattice::meet()
{
  return 0;
}

mlir::anec::ANECDialect *mlir::anec::ANECDialect::ANECDialect(mlir::anec::ANECDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"anec", 4, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id);
  *v3 = off_1E0E4C5F8;
  mlir::Dialect::addOperations<mlir::anec::A11Legacy,mlir::anec::A12,mlir::anec::A13,mlir::anec::A14,mlir::anec::A15,mlir::anec::A16,mlir::anec::A17,mlir::anec::ArgMinMax,mlir::anec::AveragePool,mlir::anec::BatchToSpace,mlir::anec::Broadcast,mlir::anec::Cast,mlir::anec::Ceil,mlir::anec::ChannelToSpace,mlir::anec::ClampedRelu,mlir::anec::Concat,mlir::anec::Convolution,mlir::anec::Cos,mlir::anec::CropResize,mlir::anec::DeQuant,mlir::anec::Deconvolution,mlir::anec::Degamma,mlir::anec::Dirac,mlir::anec::ElementwiseAbs,mlir::anec::ElementwiseAdd,mlir::anec::ElementwiseDiv,mlir::anec::ElementwiseEqual,mlir::anec::ElementwiseEqualZero,mlir::anec::ElementwiseGreaterThan,mlir::anec::ElementwiseGreaterThanEqual,mlir::anec::ElementwiseGreaterThanEqualZero,mlir::anec::ElementwiseGreaterThanZero,mlir::anec::ElementwiseLessThan,mlir::anec::ElementwiseLessThanEqual,mlir::anec::ElementwiseLessThanEqualZero,mlir::anec::ElementwiseLessThanZero,mlir::anec::ElementwiseMax,mlir::anec::ElementwiseMin,mlir::anec::ElementwiseMult,mlir::anec::ElementwiseNotEqual,mlir::anec::ElementwiseNotEqualZero,mlir::anec::ElementwisePower,mlir::anec::ElementwiseSquare,mlir::anec::ElementwiseSub,mlir::anec::Elu,mlir::anec::Erf,mlir::anec::Exp2,mlir::anec::Flatten,mlir::anec::Floor,mlir::anec::GOC,mlir::anec::GatherND,mlir::anec::Gelu,mlir::anec::GlobalArgMinMax,mlir::anec::HighPrecisionSigmoid,mlir::anec::InputView,mlir::anec::InstanceNorm,mlir::anec::Invert,mlir::anec::L2NormPool,mlir::anec::LeakyRelu,mlir::anec::Linear,mlir::anec::Log2,mlir::anec::MatMul,mlir::anec::MaxPool,mlir::anec::NRelu,mlir::anec::Padding,mlir::anec::PixelShuffle,mlir::anec::PixelUnshuffle,mlir::anec::Quant,mlir::anec::ReduceAvg,mlir::anec::ReduceMax,mlir::anec::ReduceMin,mlir::anec::ReduceSum,mlir::anec::RegionReturn,mlir::anec::Relu,mlir::anec::Reshape,mlir::anec::Resize,mlir::anec::RoundNearest,mlir::anec::Rsqrt,mlir::anec::Sigmoid,mlir::anec::Sign,mlir::anec::Sin,mlir::anec::Softmax,mlir::anec::SpaceToBatch,mlir::anec::SpaceToChannel,mlir::anec::Sqr,mlir::anec::Sqrt,mlir::anec::Swish,mlir::anec::T0,mlir::anec::Tanh,mlir::anec::Tile,mlir::anec::Transpose,mlir::anec::Trunc,mlir::anec::Unflatten,mlir::anec::UnrealizedConversionCast>((uint64_t)v3);
  return this;
}

void mlir::anec::ANECDialect::~ANECDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_18015C09C(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::anec::BoxCoordinateModeAttr::classof(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Value;

  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return 0;
  v19 = a1;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
  result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if ((_DWORD)result)
  {
    v18 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v18))
    {
      v17 = a1;
      result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v17);
      if (result == 1)
        return result;
      v16 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v16) != 2)
      {
        v15 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15) != 3)
        {
          v14 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v14) != 4)
          {
            v13 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) != 5)
            {
              v12 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12) != 6)
              {
                v11 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11) != 7)
                {
                  v10 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 8)
                  {
                    v9 = a1;
                    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 9)
                    {
                      v8 = a1;
                      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 10)
                      {
                        v7 = a1;
                        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 11)
                        {
                          v6 = a1;
                          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 12)
                          {
                            v5 = a1;
                            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 13)
                            {
                              v4 = a1;
                              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 14)
                              {
                                v3 = a1;
                                return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 15;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t mlir::anec::BoxCoordinateModeAttr::get(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = mlir::IntegerType::get(a1, 0x40u, 0);
  return mlir::IntegerAttr::get(v3, a2);
}

uint64_t mlir::anec::PaddingModeAttr::classof(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Value;

  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return 0;
  v12 = a1;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
  result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if ((_DWORD)result)
  {
    v11 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11))
    {
      v10 = a1;
      result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10);
      if (result == 1)
        return result;
      v9 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 2)
      {
        v8 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 3)
        {
          v7 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 4)
          {
            v6 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 5)
            {
              v5 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 6)
              {
                v4 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 7)
                {
                  v3 = a1;
                  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 8;
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t mlir::anec::getFamily(uint64_t a1, uint64_t a2)
{
  if (a2 != 3)
    return 6;
  if (*(_WORD *)a1 == 12609 && *(_BYTE *)(a1 + 2) == 50)
    return 0;
  if (*(_WORD *)a1 == 12609 && *(_BYTE *)(a1 + 2) == 51)
    return 1;
  if (*(_WORD *)a1 == 12609 && *(_BYTE *)(a1 + 2) == 52)
    return 2;
  if (*(_WORD *)a1 == 12609 && *(_BYTE *)(a1 + 2) == 53)
    return 3;
  if (*(_WORD *)a1 == 12609 && *(_BYTE *)(a1 + 2) == 54)
    return 4;
  if (*(_WORD *)a1 != 12609 || *(_BYTE *)(a1 + 2) != 55)
    return 6;
  return 5;
}

_QWORD *llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &off_1E0E23588;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

uint64_t mlir::Dialect::addOperations<mlir::anec::A11Legacy,mlir::anec::A12,mlir::anec::A13,mlir::anec::A14,mlir::anec::A15,mlir::anec::A16,mlir::anec::A17,mlir::anec::ArgMinMax,mlir::anec::AveragePool,mlir::anec::BatchToSpace,mlir::anec::Broadcast,mlir::anec::Cast,mlir::anec::Ceil,mlir::anec::ChannelToSpace,mlir::anec::ClampedRelu,mlir::anec::Concat,mlir::anec::Convolution,mlir::anec::Cos,mlir::anec::CropResize,mlir::anec::DeQuant,mlir::anec::Deconvolution,mlir::anec::Degamma,mlir::anec::Dirac,mlir::anec::ElementwiseAbs,mlir::anec::ElementwiseAdd,mlir::anec::ElementwiseDiv,mlir::anec::ElementwiseEqual,mlir::anec::ElementwiseEqualZero,mlir::anec::ElementwiseGreaterThan,mlir::anec::ElementwiseGreaterThanEqual,mlir::anec::ElementwiseGreaterThanEqualZero,mlir::anec::ElementwiseGreaterThanZero,mlir::anec::ElementwiseLessThan,mlir::anec::ElementwiseLessThanEqual,mlir::anec::ElementwiseLessThanEqualZero,mlir::anec::ElementwiseLessThanZero,mlir::anec::ElementwiseMax,mlir::anec::ElementwiseMin,mlir::anec::ElementwiseMult,mlir::anec::ElementwiseNotEqual,mlir::anec::ElementwiseNotEqualZero,mlir::anec::ElementwisePower,mlir::anec::ElementwiseSquare,mlir::anec::ElementwiseSub,mlir::anec::Elu,mlir::anec::Erf,mlir::anec::Exp2,mlir::anec::Flatten,mlir::anec::Floor,mlir::anec::GOC,mlir::anec::GatherND,mlir::anec::Gelu,mlir::anec::GlobalArgMinMax,mlir::anec::HighPrecisionSigmoid,mlir::anec::InputView,mlir::anec::InstanceNorm,mlir::anec::Invert,mlir::anec::L2NormPool,mlir::anec::LeakyRelu,mlir::anec::Linear,mlir::anec::Log2,mlir::anec::MatMul,mlir::anec::MaxPool,mlir::anec::NRelu,mlir::anec::Padding,mlir::anec::PixelShuffle,mlir::anec::PixelUnshuffle,mlir::anec::Quant,mlir::anec::ReduceAvg,mlir::anec::ReduceMax,mlir::anec::ReduceMin,mlir::anec::ReduceSum,mlir::anec::RegionReturn,mlir::anec::Relu,mlir::anec::Reshape,mlir::anec::Resize,mlir::anec::RoundNearest,mlir::anec::Rsqrt,mlir::anec::Sigmoid,mlir::anec::Sign,mlir::anec::Sin,mlir::anec::Softmax,mlir::anec::SpaceToBatch,mlir::anec::SpaceToChannel,mlir::anec::Sqr,mlir::anec::Sqrt,mlir::anec::Swish,mlir::anec::T0,mlir::anec::Tanh,mlir::anec::Tile,mlir::anec::Transpose,mlir::anec::Trunc,mlir::anec::Unflatten,mlir::anec::UnrealizedConversionCast>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  mlir::RegisteredOperationName::insert<mlir::anec::A11Legacy>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::A12>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::A13>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::A14>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::A15>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::A16>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::A17>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ArgMinMax>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::AveragePool>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::BatchToSpace>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Broadcast>(a1);
  v2 = operator new(0x70uLL);
  v8 = mlir::RegisteredOperationName::Model<mlir::anec::Cast>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  v3 = (uint64_t)v8;
  v8 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::anec::Ceil>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ChannelToSpace>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ClampedRelu>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Concat>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Convolution>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Cos>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::CropResize>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::DeQuant>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Deconvolution>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Degamma>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Dirac>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseAbs>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseAdd>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseDiv>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseEqual>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseEqualZero>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseGreaterThan>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseGreaterThanEqual>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseGreaterThanEqualZero>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseGreaterThanZero>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseLessThan>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseLessThanEqual>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseLessThanEqualZero>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseLessThanZero>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseMax>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseMin>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseMult>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseNotEqual>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseNotEqualZero>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwisePower>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseSquare>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ElementwiseSub>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Elu>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Erf>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Exp2>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Flatten>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Floor>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::GOC>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::GatherND>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Gelu>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::GlobalArgMinMax>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::HighPrecisionSigmoid>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::InputView>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::InstanceNorm>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Invert>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::L2NormPool>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::LeakyRelu>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Linear>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Log2>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::MatMul>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::MaxPool>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::NRelu>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Padding>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::PixelShuffle>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::PixelUnshuffle>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Quant>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ReduceAvg>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ReduceMax>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ReduceMin>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::ReduceSum>(a1);
  v4 = operator new(0x70uLL);
  v8 = mlir::RegisteredOperationName::Model<mlir::anec::RegionReturn>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  v5 = (uint64_t)v8;
  v8 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  mlir::RegisteredOperationName::insert<mlir::anec::Relu>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Reshape>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Resize>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::RoundNearest>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Rsqrt>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Sigmoid>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Sign>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Sin>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Softmax>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::SpaceToBatch>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::SpaceToChannel>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Sqr>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Sqrt>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Swish>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::T0>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Tanh>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Tile>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Transpose>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Trunc>(a1);
  mlir::RegisteredOperationName::insert<mlir::anec::Unflatten>(a1);
  v6 = operator new(0x70uLL);
  v8 = mlir::RegisteredOperationName::Model<mlir::anec::UnrealizedConversionCast>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *mlir::anec::ANECDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  _QWORD *v8;
  _QWORD *v9[2];
  uint64_t v10;

  v10 = a4;
  result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3);
  v9[0] = result;
  v9[1] = v8;
  if (result)
    return (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(a2, a5, &v10, v9);
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD **a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.constant", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.constant";
    v17[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ConstantOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::InFlightDiagnostic::~InFlightDiagnostic(mlir::InFlightDiagnostic *this)
{
  if (*(_QWORD *)this)
    mlir::InFlightDiagnostic::report(this);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this + 8);
}

BOOL mlir::anec::isCompatibleWithFamily(uint64_t a1, int a2)
{
  uint64_t (*v4)();
  uint64_t v5;

  v4 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)6>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)6>::Impl>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v4) & 1) != 0)v5 = 0x100000006;
  else
    v5 = mlir::anec::getOpMinimumFamilyImpl<(mlir::anec::Family)5>(a1);
  return (v5 & 0xFF00000000) == 0 || (int)v5 <= a2;
}

void mlir::anec::`anonymous namespace'::getZinIrEWUnitInfo(mlir::anec::_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  char *v5;
  void *v6;
  int v7;

  v5 = (char *)operator new(0x58uLL);
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  *((_DWORD *)v5 + 8) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 9) = -1;
  *(_QWORD *)v5 = off_1E0E13238;
  *((_QWORD *)v5 + 1) = 0;
  *((_DWORD *)v5 + 20) = 0;
  v6 = *(void **)(*((_QWORD *)this + 6) + 16);
  if (this && v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAbs,void>::id)
  {
    v7 = 9;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseEqualZero,void>::id)
  {
    v7 = 10;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseGreaterThanEqualZero,void>::id)
  {
    v7 = 14;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseGreaterThanZero,void>::id)
  {
    v7 = 15;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseLessThanEqualZero,void>::id)
  {
    v7 = 13;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseLessThanZero,void>::id)
  {
    v7 = 12;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseNotEqualZero,void>::id)
  {
    v7 = 11;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseSquare,void>::id)
  {
    v7 = 3;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id)
  {
    v7 = 1;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id)
  {
    v7 = 2;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMin,void>::id)
  {
    v7 = 8;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMax,void>::id)
  {
    v7 = 7;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseSub,void>::id)
  {
    v7 = 4;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseDiv,void>::id)
  {
    v7 = 6;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwisePower,void>::id)
  {
    v7 = 5;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseEqual,void>::id)
  {
    v7 = 16;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseNotEqual,void>::id)
  {
    v7 = 17;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseLessThan,void>::id)
  {
    v7 = 18;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseLessThanEqual,void>::id)
  {
    v7 = 19;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseGreaterThanEqual,void>::id)
  {
    v7 = 20;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseGreaterThan,void>::id)
  {
    v7 = 21;
  }
  else
  {
    v7 = 0;
  }
  *((_DWORD *)v5 + 20) = v7;
  *a2 = v5;
}

uint64_t mlir::anec::Broadcast::getResult(mlir::anec::Broadcast *this)
{
  uint64_t v1;

  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v1 = *(_QWORD *)this - 16;
  else
    v1 = 0;
  return mlir::detail::OpResultImpl::getNextResultAtOffset(v1, 0);
}

uint64_t mlir::anec::verifyANECBroadcastOp(mlir::anec *this, mlir::Operation *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t ArgAttrsAttr;
  uint64_t v26;
  uint64_t v27;
  mlir::anec *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t DimFromIndex;
  int v32;
  unint64_t v33;
  unsigned int IndexFromDim;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  const void **v40;
  __int16 v41;
  _QWORD v42[2];
  _QWORD v43[2];
  uint64_t v44;
  _QWORD v45[24];

  v45[23] = *MEMORY[0x1E0C80C00];
    return 0;
  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3)
    goto LABEL_11;
  v4 = *v3;
  v5 = mlir::TypeID::get<mlir::ShapedType>();
  v6 = *(unsigned int *)(v4 + 16);
  if (!(_DWORD)v6)
    goto LABEL_11;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = &v7[2 * v6];
  do
  {
    v9 = v6 >> 1;
    v10 = &v7[2 * (v6 >> 1)];
    v12 = *v10;
    v11 = v10 + 2;
    v6 += ~(v6 >> 1);
    if (v12 < v5)
      v7 = v11;
    else
      v6 = v9;
  }
  while (v6);
  if (v7 != v8 && *v7 == v5)
    v13 = v7[1];
  else
LABEL_11:
    v13 = 0;
  v43[0] = v3;
  v43[1] = v13;
  v14 = (uint64_t *)(*((_QWORD *)this - 1) & 0xFFFFFFFFFFFFFFF8);
  if (!v14)
    goto LABEL_21;
  v15 = *v14;
  v16 = mlir::TypeID::get<mlir::ShapedType>();
  v17 = *(unsigned int *)(v15 + 16);
  if (!(_DWORD)v17)
    goto LABEL_21;
  v18 = *(_QWORD **)(v15 + 8);
  v19 = &v18[2 * v17];
  do
  {
    v20 = v17 >> 1;
    v21 = &v18[2 * (v17 >> 1)];
    v23 = *v21;
    v22 = v21 + 2;
    v17 += ~(v17 >> 1);
    if (v23 < v16)
      v18 = v22;
    else
      v17 = v20;
  }
  while (v17);
  if (v18 != v19 && *v18 == v16)
    v24 = v18[1];
  else
LABEL_21:
    v24 = 0;
  v42[0] = v14;
  v42[1] = v24;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
  if (!v26)
    return 1;
  v27 = ArgAttrsAttr;
  v28 = 0;
  v29 = 8 * v26;
  while (1)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
    DimFromIndex = mlir::anec::getDimFromIndex(v28, v30);
    if ((DimFromIndex & 0xFF00000000) == 0)
      std::__throw_bad_optional_access[abi:nn180100]();
    v32 = DimFromIndex;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
    IndexFromDim = mlir::anec::getIndexFromDim(v32, v33);
    if (v35)
    {
      v36 = IndexFromDim;
      v37 = *(_QWORD *)(v27 + 8 * (_QWORD)v28);
      if (v37 != *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43)
                            + 8 * IndexFromDim)
        && *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43) + 8 * v36) != 1)
      {
        break;
      }
    }
    v28 = (mlir::anec *)((char *)v28 + 1);
    v29 -= 8;
    if (!v29)
      return 1;
  }
  v40 = (const void **)"failed: input cannot be broadcasted to the target shape";
  v41 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v40, (uint64_t)&v44);
  v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v45);
  return v38;
}

uint64_t mlir::anec::`anonymous namespace'::defaultVerifyANECOp(mlir::anec::_anonymous_namespace_ *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  const void ***v41;
  mlir::InFlightDiagnostic *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *i;
  uint64_t DefiningOp;
  uint64_t v47;
  uint64_t v48;
  const void **v50[4];
  __int16 v51;
  uint64_t *v52;
  uint64_t v53;
  const void **v54[4];
  __int16 v55;
  uint64_t v56;
  _QWORD v57[24];

  v57[23] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v3 = *((unsigned int *)this + 17);
    if ((_DWORD)v3)
    {
      v4 = *((_QWORD *)this + 9) + 24;
      while (1)
      {
        v52 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF8));
        v53 = v5;
        if (!v52)
          break;
        v50[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
        if (!mlir::Type::isF16((mlir::Type *)v50)
          && !mlir::Type::isF32((mlir::Type *)v50)
          && !mlir::Type::isInteger((mlir::Type *)v50, 8))
        {
          goto LABEL_65;
        }
        v4 += 32;
        if (!--v3)
          goto LABEL_10;
      }
      v50[0] = (const void **)"Expecting input tensor to be ShapedType";
      v51 = 259;
      v41 = (const void ***)&v56;
      mlir::Operation::emitOpError((uint64_t *)this, v50, (uint64_t)&v56);
      if (!v56)
        goto LABEL_64;
      v42 = (mlir::InFlightDiagnostic *)&v56;
      goto LABEL_63;
    }
  }
LABEL_10:
  v6 = *((unsigned int *)this + 9);
  if ((_DWORD)v6)
    v7 = (char *)this - 16;
  else
    v7 = 0;
  if (!(_DWORD)v6)
  {
LABEL_21:
    if ((*((_BYTE *)this + 46) & 0x80) != 0)
    {
      v11 = *((unsigned int *)this + 17);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = *((_QWORD *)this + 9);
        do
        {
          v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v13 + 32 * v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v14)
            goto LABEL_33;
          v15 = *v14;
          v16 = mlir::TypeID::get<mlir::ShapedType>();
          v17 = *(unsigned int *)(v15 + 16);
          if (!(_DWORD)v17)
            goto LABEL_33;
          v18 = *(_QWORD **)(v15 + 8);
          v19 = &v18[2 * v17];
          do
          {
            v20 = v17 >> 1;
            v21 = &v18[2 * (v17 >> 1)];
            v23 = *v21;
            v22 = v21 + 2;
            v17 += ~(v17 >> 1);
            if (v23 < v16)
              v18 = v22;
            else
              v17 = v20;
          }
          while (v17);
          if (v18 != v19 && *v18 == v16)
            v24 = v18[1];
          else
LABEL_33:
            v24 = 0;
            return 0;
        }
        while (++v12 != v11);
      }
    }
    v25 = mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands>(void)::Empty>>();
    if (((*(uint64_t (**)(_QWORD, uint64_t (*)()))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v25) & 1) == 0)
    {
      v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v26) & 1) == 0)
      {
        if ((*((_BYTE *)this + 46) & 0x80) == 0)
          return 0;
        v44 = *((unsigned int *)this + 17);
        if (!(_DWORD)v44)
          return 0;
        for (i = (uint64_t *)(*((_QWORD *)this + 9) + 24); ; i += 4)
        {
          v56 = *i;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v56);
          if (!DefiningOp)
            break;
          v47 = DefiningOp;
          v48 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v47 + 48) + 32))(*(_QWORD *)(v47 + 48), v48) & 1) == 0)break;
          v43 = 0;
          if (!--v44)
            return v43;
        }
      }
    }
    v27 = *((unsigned int *)this + 9);
    if ((_DWORD)v27)
      v28 = (char *)this - 16;
    else
      v28 = 0;
    if (!(_DWORD)v27)
      return 1;
    v29 = 0;
    while (1)
    {
      v30 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v28, v29) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v30)
        goto LABEL_54;
      v31 = *v30;
      v32 = mlir::TypeID::get<mlir::ShapedType>();
      v33 = *(unsigned int *)(v31 + 16);
      if (!(_DWORD)v33)
        goto LABEL_54;
      v34 = *(_QWORD **)(v31 + 8);
      v35 = &v34[2 * v33];
      do
      {
        v36 = v33 >> 1;
        v37 = &v34[2 * (v33 >> 1)];
        v39 = *v37;
        v38 = v37 + 2;
        v33 += ~(v33 >> 1);
        if (v39 < v32)
          v34 = v38;
        else
          v33 = v36;
      }
      while (v33);
      if (v34 != v35 && *v34 == v32)
        v40 = v34[1];
      else
LABEL_54:
        v40 = 0;
        return 0;
      if (++v29 == v27)
        return 1;
    }
  }
  v8 = 0;
  while (1)
  {
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v7, v8);
    v52 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
    v53 = v10;
    if (!v52)
      break;
    v50[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
    if (!mlir::Type::isF16((mlir::Type *)v50)
      && !mlir::Type::isF32((mlir::Type *)v50)
      && !mlir::Type::isInteger((mlir::Type *)v50, 8))
    {
      goto LABEL_65;
    }
    if (v6 == ++v8)
      goto LABEL_21;
  }
  v50[0] = (const void **)"Expecting output tensor to be ShapedType";
  v51 = 259;
  v41 = v54;
  mlir::Operation::emitOpError((uint64_t *)this, v50, (uint64_t)v54);
  if (v54[0])
  {
    v42 = (mlir::InFlightDiagnostic *)v54;
LABEL_63:
    mlir::InFlightDiagnostic::report(v42);
  }
LABEL_64:
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v41 + 1));
LABEL_65:
  v55 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v54, (uint64_t)&v56);
  if (v56)
    mlir::Diagnostic::operator<<((uint64_t)v57, "does not have ANE-compatible types");
  v43 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v56);
  if (v56)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v56);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v57);
  return v43;
}

uint64_t *mlir::Type::cast<mlir::ShapedType>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;

  v1 = *a1;
  if (*a1)
  {
    v2 = *v1;
    v3 = mlir::TypeID::get<mlir::ShapedType>();
    v4 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)(v2 + 8);
      do
      {
        v6 = v4 >> 1;
        v7 = &v5[2 * (v4 >> 1)];
        v9 = *v7;
        v8 = v7 + 2;
        v4 += ~(v4 >> 1);
        if (v9 < v3)
          v5 = v8;
        else
          v4 = v6;
      }
      while (v4);
    }
  }
  return v1;
}

void mlir::anec::Broadcast::getZinIrUnitInfo(mlir::anec::Broadcast *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t ArgAttrsAttr;
  uint64_t v29;
  uint64_t v30;
  mlir::anec *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t DimFromIndex;
  int v39;
  unint64_t v40;
  unsigned int IndexFromDim;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  int v50;
  _QWORD v51[2];
  _QWORD v52[2];
  int *v53;

  v4 = (char *)operator new(0x78uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13828;
  *((_QWORD *)v4 + 1) = 0;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v52[0] = v5;
  v52[1] = v15;
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v16 = *(_QWORD *)this - 16;
  else
    v16 = 0;
  v17 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v49 = a2;
  if (!v17)
    goto LABEL_23;
  v18 = *v17;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *(unsigned int *)(v18 + 16);
  if (!(_DWORD)v20)
    goto LABEL_23;
  v21 = *(_QWORD **)(v18 + 8);
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_23:
    v27 = 0;
  v51[0] = v17;
  v51[1] = v27;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
  if (v29)
  {
    v30 = ArgAttrsAttr;
    v31 = 0;
    v32 = 8 * v29;
    while (1)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
      DimFromIndex = mlir::anec::getDimFromIndex(v31, v37);
      if ((DimFromIndex & 0xFF00000000) == 0)
        break;
      v39 = DimFromIndex;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
      IndexFromDim = mlir::anec::getIndexFromDim(v39, v40);
      if (!v42
        || (v43 = *(_QWORD *)(v30 + 8 * (_QWORD)v31),
            v43 != *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52)
                             + 8 * IndexFromDim)))
      {
        v33 = *(_QWORD *)(v30 + 8 * (_QWORD)v31);
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
        v35 = mlir::anec::getDimFromIndex(v31, v34);
        if ((v35 & 0xFF00000000) != 0)
          v36 = dword_1812330C0[(int)v35];
        else
          v36 = 5;
        v50 = v36;
        v53 = &v50;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)(v4 + 80), &v50, (uint64_t)&std::piecewise_construct, &v53)[3] = v33;
      }
      v31 = (mlir::anec *)((char *)v31 + 1);
      v32 -= 8;
      if (!v32)
        goto LABEL_35;
    }
    v44 = std::__throw_bad_optional_access[abi:nn180100]();
  }
  else
  {
LABEL_35:
    *v49 = v4;
  }
}

void mlir::anec::`anonymous namespace'::fillZinIrCommonInfo(uint64_t a1, uint64_t a2, int a3, unint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  std::string::size_type v20;
  uint64_t OperandRange;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  std::string *v39;
  void *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  std::string::size_type v54;
  uint64_t v55;
  void *v56;
  int v57;
  int v58;
  int v59;
  int Width;
  unint64_t v61;
  unsigned int IndexFromDim;
  char v63;
  uint64_t v64;
  mlir::anec::Broadcast *v65;
  mlir::anec::ANECIRNetwork *v66;
  mlir::anec::ANECIRWeights *v67;
  uint64_t v68;
  int v69;
  _QWORD v70[2];
  std::string __p;
  std::string __str;

  mlir::anec::computeOpKeyString((mlir::anec *)a1, &__str);
  std::string::operator=((std::string *)(a2 + 8), &__str);
  v69 = a3;
  *(_DWORD *)(a2 + 32) = a3;
  v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_10;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_10;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_10:
    v20 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  __p.__r_.__value_.__l.__size_ = v20;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__p);
  v68 = a1;
  if ((*(_BYTE *)(a1 + 46) & 0x80) != 0)
  {
    v22 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = *(_QWORD *)(a1 + 72);
      do
      {
        if (a5 && v23 >= a4)
          break;
        v25 = *(_QWORD *)(v24 + 32 * v23 + 24);
        v26 = (uint64_t *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v26)
          goto LABEL_26;
        v27 = *v26;
        v28 = mlir::TypeID::get<mlir::ShapedType>();
        v29 = *(unsigned int *)(v27 + 16);
        if (!(_DWORD)v29)
          goto LABEL_26;
        v30 = *(_QWORD **)(v27 + 8);
        v31 = &v30[2 * v29];
        do
        {
          v32 = v29 >> 1;
          v33 = &v30[2 * (v29 >> 1)];
          v35 = *v33;
          v34 = v33 + 2;
          v29 += ~(v29 >> 1);
          if (v35 < v28)
            v30 = v34;
          else
            v29 = v32;
        }
        while (v29);
        if (v30 != v31 && *v30 == v28)
          v36 = v30[1];
        else
LABEL_26:
          v36 = 0;
        v70[0] = v26;
        v70[1] = v36;
        if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v70))
          OperandRange = 0;
        v37 = *(_QWORD *)(a2 + 48);
        if (v37 >= *(_QWORD *)(a2 + 56))
        {
          v39 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2 + 40, (uint64_t)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a2 + 48), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v38 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v37 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v37 = v38;
          }
          v39 = (std::string *)(v37 + 24);
        }
        *(_QWORD *)(a2 + 48) = v39;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v23;
      }
      while (v23 != v22);
    }
  }
  if (OperandRange)
  {
    v40 = *(void **)(*(_QWORD *)OperandRange + 136);
    v41 = v68;
    if (v40 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      __p.__r_.__value_.__r.__words[0] = OperandRange;
      Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&__p);
      if (Width == 16)
      {
        if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&__p) == 2)
          v43 = 10;
        else
          v43 = 9;
      }
      else if (Width == 8)
      {
        if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&__p) == 2)
          v43 = 2;
        else
          v43 = 1;
      }
      else
      {
        v43 = 0;
      }
    }
    else
    {
      if (v40 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
        v42 = 11;
      else
        v42 = 0;
      if (v40 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
        v43 = 3;
      else
        v43 = v42;
    }
  }
  else
  {
    v43 = 0;
    v41 = v68;
  }
  *(_DWORD *)(a2 + 64) = v43;
  v44 = (uint64_t *)(*(_QWORD *)(v41 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v44)
    goto LABEL_56;
  v45 = *v44;
  v46 = mlir::TypeID::get<mlir::ShapedType>();
  v47 = *(unsigned int *)(v45 + 16);
  if (!(_DWORD)v47)
    goto LABEL_56;
  v48 = *(_QWORD **)(v45 + 8);
  v49 = &v48[2 * v47];
  do
  {
    v50 = v47 >> 1;
    v51 = &v48[2 * (v47 >> 1)];
    v53 = *v51;
    v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46)
      v48 = v52;
    else
      v47 = v50;
  }
  while (v47);
  if (v48 != v49 && *v48 == v46)
    v54 = v48[1];
  else
LABEL_56:
    v54 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __p.__r_.__value_.__l.__size_ = v54;
  v55 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__p);
  v56 = *(void **)(*(_QWORD *)v55 + 136);
  if (v56 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v56 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
    {
      v57 = 3;
    }
    else if (v56 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    {
      v57 = 11;
    }
    else
    {
      v57 = 0;
    }
LABEL_76:
    v59 = v69;
    goto LABEL_77;
  }
  v70[0] = v55;
  v58 = mlir::IntegerType::getWidth((mlir::IntegerType *)v70);
  if (v58 == 16)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)v70) == 2)
      v57 = 10;
    else
      v57 = 9;
    goto LABEL_76;
  }
  v59 = v69;
  if (v58 == 8)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)v70) == 2)
      v57 = 2;
    else
      v57 = 1;
  }
  else
  {
    v57 = 0;
  }
LABEL_77:
  *(_DWORD *)(a2 + 68) = v57;
  if ((v59 - 23) > 0xFFFFFFFD)
  {
    v64 = 0;
  }
  else
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p);
    IndexFromDim = mlir::anec::getIndexFromDim(1, v61);
    if (!v63)
    {
      v65 = (mlir::anec::Broadcast *)std::__throw_bad_optional_access[abi:nn180100]();
      mlir::anec::Broadcast::addOpToNetwork(v65, v66, v67);
      return;
    }
    v64 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p) + 8 * IndexFromDim);
  }
  *(_QWORD *)(a2 + 72) = v64;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

uint64_t mlir::anec::Broadcast::addOpToNetwork(mlir::anec::Broadcast *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Broadcast::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::Convolution::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  const char **ArgAttrsAttr;
  mlir::CallGraphNode *v36;
  mlir::CallGraphNode *v37;
  mlir::CallGraphNode *v38;
  char v39;
  uint64_t v40;
  mlir::CallGraphNode *Value;
  uint64_t v42;
  mlir::CallGraphNode *v43;
  char v44;
  uint64_t v45;
  mlir::CallGraphNode *v46;
  uint64_t v47;
  mlir::CallGraphNode *v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t IndexFromDim;
  char v69;
  mlir::CallGraphNode *v70;
  uint64_t v71;
  mlir::CallGraphNode *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  const char *v91;
  void *v92;
  mlir::AffineMap *v93;
  uint64_t OperandRange;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t Groups;
  _QWORD v101[2];
  _QWORD *v102;
  uint64_t v103;
  const void **v104[4];
  __int16 v105;
  const char *v106;
  uint64_t v107;
  uint64_t (****v108)(llvm::detail::format_adapter *__hidden);
  uint64_t v109;
  uint64_t (**v110)(llvm::detail::format_adapter *__hidden);
  uint64_t *v111;
  uint64_t (**v112)(llvm::detail::format_adapter *__hidden);
  void **p_Groups;
  uint64_t (***v114)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v115)(llvm::detail::format_adapter *__hidden);
  _QWORD v116[3];
  void *v117[2];
  _BYTE v118[48];
  void *v119[2];
  _BYTE v120[24];
  void *v121[2];
  _BYTE v122[24];
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  _QWORD v132[2];
  _QWORD v133[2];
  _QWORD v134[2];
  _QWORD v135[18];

  v135[16] = *MEMORY[0x1E0C80C00];
  v123 = a6;
  LOBYTE(v124) = 0;
  v125 = 0;
  v126 = a7;
  v127 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v123);
    if (v125)
      v125 = 0;
    mlir::OperationName::OperationName(&v124, "anec.convolution", 16, Context);
    v125 = 1;
  }
  v128 = a4;
  v129 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::ConvolutionAdaptor::verify(&v123, v18))
    return 0;
  v19 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v20 = v19;
  if (!v19)
  {
    v102 = 0;
    v103 = 0;
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v130);
      if (v130)
      {
        v32 = "input must be a ShapedType";
        goto LABEL_26;
      }
LABEL_27:
      v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v130);
      if (v130)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v130);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v131);
      return v33;
    }
    return 0;
  }
  v21 = *v19;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_18;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_18:
    v30 = 0;
  v102 = v20;
  v103 = v30;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
  if (v31 >= 6)
  {
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v130);
      if (v130)
      {
        v32 = "input must be a tensor of rank 4 or 5";
LABEL_26:
        mlir::Diagnostic::operator<<((uint64_t)&v131, v32);
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    return 0;
  }
  ArgAttrsAttr = (const char **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
  v121[0] = v122;
  v121[1] = (void *)0x300000000;
  v36 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v123) + 32);
  v37 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v123);
  v38 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v36, v37, *(_QWORD *)(*(_QWORD *)(v124 + 96) + 56));
  if ((v39 & 1) != 0)
    v40 = *((_QWORD *)v38 + 1);
  else
    v40 = 0;
  mlir::getValues<unsigned long long>(v40, (uint64_t)v121);
  v119[0] = v120;
  v119[1] = (void *)0x300000000;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v123);
  v42 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v123);
  v43 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v42 - 32), *(_QWORD *)(*(_QWORD *)(v124 + 96) + 8));
  if ((v44 & 1) != 0)
    v45 = *((_QWORD *)v43 + 1);
  else
    v45 = 0;
  mlir::getValues<unsigned long long>(v45, (uint64_t)v119);
  v117[0] = v118;
  v117[1] = (void *)0x600000000;
  v46 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v123) + 16);
  v47 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v123);
  v48 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v46, (mlir::CallGraphNode *)(v47 - 16), *(_QWORD *)(*(_QWORD *)(v124 + 96) + 40));
  if ((v49 & 1) != 0)
    v50 = *((_QWORD *)v48 + 1);
  else
    v50 = 0;
  mlir::getValues<unsigned long long>(v50, (uint64_t)v117);
  v51 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 1);
  v52 = v51;
  if (!v51)
    goto LABEL_50;
  v53 = *v51;
  v54 = mlir::TypeID::get<mlir::ShapedType>();
  v55 = *(unsigned int *)(v53 + 16);
  if (!(_DWORD)v55)
    goto LABEL_50;
  v56 = *(_QWORD **)(v53 + 8);
  v57 = &v56[2 * v55];
  do
  {
    v58 = v55 >> 1;
    v59 = &v56[2 * (v55 >> 1)];
    v61 = *v59;
    v60 = v59 + 2;
    v55 += ~(v55 >> 1);
    if (v61 < v54)
      v56 = v60;
    else
      v55 = v58;
  }
  while (v55);
  if (v56 != v57 && *v56 == v54)
    v62 = v56[1];
  else
LABEL_50:
    v62 = 0;
  v101[0] = v52;
  v101[1] = v62;
  v63 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v101);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v101);
  if (v64 >= 6)
  {
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v130);
      if (v130)
        mlir::Diagnostic::operator<<((uint64_t)&v131, "filter must be a tensor of rank 4 or 5");
LABEL_63:
      v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v130);
      if (v130)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v130);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v131);
      goto LABEL_90;
    }
LABEL_66:
    v33 = 0;
LABEL_90:
    if (v117[0] != v118)
      free(v117[0]);
    if (v119[0] != v120)
      free(v119[0]);
    if (v121[0] != v122)
      free(v121[0]);
    return v33;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v101);
  if (v65 == 4)
    v66 = -1;
  else
    v66 = 4;
  Groups = (uint64_t)mlir::anec::detail::ConvolutionGenericAdaptorBase::getGroups((mlir::anec::detail::ConvolutionGenericAdaptorBase *)&v123);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v67);
  if (v69)
  {
    v99 = 0;
    v99 = (uint64_t)ArgAttrsAttr[IndexFromDim];
    if (v99 % Groups)
    {
      v106 = "input channels {0} should be divisible by groups {1}";
      v107 = 52;
      v108 = &v114;
      v109 = 2;
      v110 = &off_1E0E23E00;
      v111 = &v99;
      v112 = &off_1E0E23E00;
      p_Groups = (void **)&Groups;
      v114 = &v110;
      v115 = &v112;
      if (a3)
      {
        mlir::emitError((uint64_t)a2, (uint64_t)&v130);
        if (v130)
        {
          v105 = 263;
          v104[0] = (const void **)&v106;
          mlir::Diagnostic::operator<<((uint64_t)&v131, v104);
        }
        goto LABEL_63;
      }
      goto LABEL_66;
    }
    v70 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v123);
    v71 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v123);
    v72 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v70, (mlir::CallGraphNode *)(v71 - 48), **(_QWORD **)(v124 + 96));
    if ((v73 & 1) != 0
      && (v74 = *((_QWORD *)v72 + 1)) != 0
      && *(_UNKNOWN **)(*(_QWORD *)v74 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      v75 = v63[1] * *v63;
    }
    else
    {
      v75 = *v63;
    }
    v98 = v75;
    if (v75 % Groups)
    {
      v130 = "output channels {0} should be divisible by groups {1}";
      v131 = 53;
      v132[0] = v135;
      v132[1] = 2;
      v133[0] = &off_1E0E23E00;
      v133[1] = &v98;
      v134[0] = &off_1E0E23E00;
      v134[1] = &Groups;
      v135[0] = v133;
      v135[1] = v134;
      v33 = mlir::emitOptionalError<llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<long long &>,llvm::detail::provider_format_adapter<long long &>>>>((uint64_t)a2, a3, (const void **)&v130);
      goto LABEL_90;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
    mlir::anec::getIndexFromDim(1, v76);
    if (v77)
    {
      if (v63[1] * Groups == v99)
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
        v79 = mlir::anec::getIndexFromDim(3, v78);
        if (v80)
        {
          v81 = v79;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
          v83 = mlir::anec::getIndexFromDim(4, v82);
          if (v84)
          {
            v85 = (unint64_t)&ArgAttrsAttr[v81][*((_QWORD *)v117[0] + 2)
                                                     + *((_QWORD *)v117[0] + 3)
                                                     - v63[2]
                                                     + *((_QWORD *)v119[0] + 1)
                                                     - 1
                                                     - (*((_QWORD *)v119[0] + 1) - 1) * v63[2]]
                / *((_QWORD *)v121[0] + 1)
                + 1;
            v86 = (unint64_t)&ArgAttrsAttr[v83][*((_QWORD *)v117[0] + 4)
                                                     + *((_QWORD *)v117[0] + 5)
                                                     - v63[3]
                                                     + *((_QWORD *)v119[0] + 2)
                                                     - 1
                                                     - (*((_QWORD *)v119[0] + 2) - 1) * v63[3]]
                / *((_QWORD *)v121[0] + 2)
                + 1;
            v87 = *ArgAttrsAttr;
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
            v89 = mlir::anec::getIndexFromDim(2, v88);
            if (v90)
              v91 = (const char *)((unint64_t)&ArgAttrsAttr[v89][*(_QWORD *)v117[0]
                                                                      + *((_QWORD *)v117[0] + 1)
                                                                      - v63[v66]
                                                                      + *(_QWORD *)v119[0]
                                                                      - 1
                                                                      - (*(_QWORD *)v119[0] - 1) * v63[v66]]
                                 / *(_QWORD *)v121[0]
                                 + 1);
            else
              v91 = 0;
            v106 = v87;
            v107 = v75;
            v108 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))v85;
            v109 = v86;
            llvm::SmallVector<long long,6u>::SmallVector(&v130, &v106, 4);
            if (v91)
            {
              v106 = v91;
              llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v130, (uint64_t)v130 + 8, (uint64_t *)&v106);
            }
            v92 = v130;
            v93 = (mlir::AffineMap *)v131;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v102);
            v95 = mlir::MemRefType::get(v92, v93, OperandRange, 0, 0, 0);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v95);
            if (v130 != v132)
              free(v130);
            v33 = 1;
            goto LABEL_90;
          }
        }
      }
      else if (a3)
      {
        v106 = "Filter shape Cin {0} * groups {1} must match input Cin {2}";
        v107 = 58;
        v108 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))v116;
        v109 = 3;
        v110 = &off_1E0E23D70;
        v111 = v63 + 1;
        v112 = &off_1E0E23E00;
        p_Groups = (void **)&Groups;
        v114 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E23E00;
        v115 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&v99;
        v116[0] = &v110;
        v116[1] = &v112;
        v116[2] = &v114;
        v105 = 263;
        v104[0] = (const void **)&v106;
        mlir::emitError((uint64_t)a2, (uint64_t)v104, (uint64_t)&v130);
        v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v130);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v130);
        goto LABEL_90;
      }
    }
  }
  v96 = (uint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::anec::ConvolutionAdaptor::verify(v96, v97);
}

uint64_t mlir::anec::ConvolutionAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *Value;
  uint64_t v5;
  const char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *Type;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t **ArgAttrsAttr;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  __int16 v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t OperandRange;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  _QWORD v89[24];

  v89[23] = *MEMORY[0x1E0C80C00];
  v83 = *a1;
  Value = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83);
  v82 = 0;
  if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
  {
LABEL_7:
    v6 = "'anec.convolution' op requires attribute 'dilation'";
LABEL_70:
    v79 = (uint64_t *)v6;
    v81 = 259;
    mlir::emitError(a2, (uint64_t)&v79, (uint64_t)&v88);
    v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v88);
    if (v88)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v88);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v89);
    return v48;
  }
  v5 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      v5 = Value[1];
    Value += 2;
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
      goto LABEL_7;
  }
  v82 = (uint64_t *)Value[1];
  v77 = 0;
  v78 = 0;
  v76 = 0;
  if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
  {
LABEL_18:
    v6 = "'anec.convolution' op requires attribute 'padding'";
    goto LABEL_70;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 40) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      v9 = (uint64_t *)Value[1];
    }
    else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      v8 = (uint64_t *)Value[1];
      v77 = v8;
    }
    else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 32) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      v7 = (uint64_t *)Value[1];
      v76 = v7;
    }
    Value += 2;
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
      goto LABEL_18;
  }
  v78 = (uint64_t *)Value[1];
  if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
  {
LABEL_25:
    v6 = "'anec.convolution' op requires attribute 'stride'";
    goto LABEL_70;
  }
  v10 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 56) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 48) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      v10 = Value[1];
    Value += 2;
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
      goto LABEL_25;
  }
  v11 = (uint64_t *)Value[1];
  if (v11)
  {
    if (!mlir::DenseIntElementsAttr::classof(Value[1]))
      goto LABEL_68;
    v12 = *v11;
    v13 = mlir::TypeID::get<mlir::ElementsAttr>();
    v14 = *(unsigned int *)(v12 + 16);
    if (!(_DWORD)v14)
      goto LABEL_36;
    v15 = *(_QWORD **)(v12 + 8);
    v16 = &v15[2 * v14];
    do
    {
      v17 = v14 >> 1;
      v18 = &v15[2 * (v14 >> 1)];
      v20 = *v18;
      v19 = v18 + 2;
      v14 += ~(v14 >> 1);
      if (v20 < v13)
        v15 = v19;
      else
        v14 = v17;
    }
    while (v14);
    if (v15 != v16 && *v15 == v13)
      v21 = v15[1];
    else
LABEL_36:
      v21 = 0;
    v79 = v11;
    v80 = v21;
    Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
    v23 = Type;
    if (!Type)
      goto LABEL_46;
    v24 = *Type;
    v25 = mlir::TypeID::get<mlir::ShapedType>();
    v26 = *(unsigned int *)(v24 + 16);
    if (!(_DWORD)v26)
      goto LABEL_46;
    v27 = *(_QWORD **)(v24 + 8);
    v28 = &v27[2 * v26];
    do
    {
      v29 = v26 >> 1;
      v30 = &v27[2 * (v26 >> 1)];
      v32 = *v30;
      v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25)
        v27 = v31;
      else
        v26 = v29;
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
      v33 = v27[1];
    else
LABEL_46:
      v33 = 0;
    v88 = v23;
    v89[0] = v33;
    ArgAttrsAttr = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
    v86 = 3;
    if (v35 != 1
      || *ArgAttrsAttr != (uint64_t *)v86
      || (v67 = (uint64_t)v11,
          v74 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v67),
          v75 = v36,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v74),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
LABEL_68:
      v6 = "'anec.convolution' op attribute 'stride' failed to satisfy constraint: ui64 elements attribute of shape {3}";
      goto LABEL_70;
    }
  }
  if (v82)
  {
    if (!mlir::DenseIntElementsAttr::classof((uint64_t)v82))
      goto LABEL_69;
    v79 = mlir::Attribute::cast<mlir::ElementsAttr>(&v82);
    v80 = v37;
    v86 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
    v88 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v86);
    v89[0] = v38;
    v39 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
    OperandRange = 3;
    if (v40 != 1
      || *v39 != OperandRange
      || (v73 = v82,
          v74 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73),
          v75 = v41,
          v67 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v74),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&v67, 64)))
    {
LABEL_69:
      v6 = "'anec.convolution' op attribute 'dilation' failed to satisfy constraint: ui64 elements attribute of shape {3}";
      goto LABEL_70;
    }
  }
  if (!v78)
    goto LABEL_61;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)v78))
    goto LABEL_74;
  v79 = mlir::Attribute::cast<mlir::ElementsAttr>(&v78);
  v80 = v42;
  v86 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
  v88 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v86);
  v89[0] = v43;
  v44 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
  OperandRange = 6;
  if (v45 != 1)
    goto LABEL_74;
  if (*v44 == OperandRange
    && (v73 = v78,
        v74 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73),
        v75 = v46,
        v67 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v74),
        mlir::Type::isUnsignedInteger((mlir::Type *)&v67, 64)))
  {
LABEL_61:
    if (v10 && (mlir::anec::PaddingModeAttr::classof(v10) & 1) == 0)
    {
      v47 = "'anec.convolution' op attribute 'padding_mode' failed to satisfy constraint: valid PaddingMode";
    }
    else if (!v9
           || *(_UNKNOWN **)(*v9 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
           && (v79 = v9,
               v88 = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79),
               mlir::Type::isUnsignedInteger((mlir::Type *)&v88, 64)))
    {
      if (!v5 || *(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      {
        if (!v8)
          goto LABEL_97;
        if (!mlir::DenseFPElementsAttr::classof((uint64_t)v8))
          goto LABEL_93;
        v79 = mlir::Attribute::cast<mlir::ElementsAttr>(&v77);
        v80 = v50;
        v73 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
        v88 = mlir::Type::cast<mlir::ShapedType>(&v73);
        v89[0] = v51;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
        if (v52)
        {
          v86 = (uint64_t)mlir::Attribute::cast<mlir::ElementsAttr>(&v77);
          v87 = v53;
          v72 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v86);
          v74 = mlir::Type::cast<mlir::ShapedType>(&v72);
          v75 = v54;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
          if (v55 != 1)
            goto LABEL_93;
        }
        v70 = v77;
        OperandRange = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
        v85 = v56;
        v71 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange);
        if (mlir::Type::isF16((mlir::Type *)&v71)
          || (v66 = v77,
              v67 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66),
              v68 = v57,
              v69 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v67),
              mlir::Type::isF32((mlir::Type *)&v69)))
        {
LABEL_97:
          if (!v7)
            return 1;
          if (mlir::DenseIntElementsAttr::classof((uint64_t)v7))
          {
            v79 = mlir::Attribute::cast<mlir::ElementsAttr>(&v76);
            v80 = v58;
            v73 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
            v88 = mlir::Type::cast<mlir::ShapedType>(&v73);
            v89[0] = v59;
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
            if (!v60
              || (v86 = (uint64_t)mlir::Attribute::cast<mlir::ElementsAttr>(&v76),
                  v87 = v61,
                  v72 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v86),
                  v74 = mlir::Type::cast<mlir::ShapedType>(&v72),
                  v75 = v62,
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74),
                  v63 == 1))
            {
              v70 = v76;
              OperandRange = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
              v85 = v64;
              v71 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange);
              if (mlir::Type::isSignedInteger((mlir::Type *)&v71, 8))
                return 1;
              v66 = v76;
              v67 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66);
              v68 = v65;
              v69 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v67);
              if (mlir::Type::isUnsignedInteger((mlir::Type *)&v69, 8))
                return 1;
            }
          }
          v47 = "'anec.convolution' op attribute 'kernel_zero_point' failed to satisfy constraint: si8 or ui8 elements at"
                "tribute of rank 0/1";
        }
        else
        {
LABEL_93:
          v47 = "'anec.convolution' op attribute 'kernel_scale' failed to satisfy constraint: f16 or f32 elements attribute of rank 0/1";
        }
      }
      else
      {
        v47 = "'anec.convolution' op attribute 'channel_wise' failed to satisfy constraint: unit attribute";
      }
    }
    else
    {
      v47 = "'anec.convolution' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned integer attribute";
    }
  }
  else
  {
LABEL_74:
    v47 = "'anec.convolution' op attribute 'padding' failed to satisfy constraint: ui64 elements attribute of shape {6}";
  }
  v79 = (uint64_t *)v47;
  v81 = 259;
  mlir::emitError(a2, (uint64_t)&v79, (uint64_t)&v88);
  v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v88);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v88);
  return v48;
}

void mlir::getValues<unsigned long long>(uint64_t a1, uint64_t a2)
{
  uint64_t NumElements;
  BOOL v5;
  unsigned int v6;
  uint64_t *p_p;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v15, a1, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v18);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v12, a1, NumElements);
  while (1)
  {
    v5 = v15 == v12 && v16 == v13;
    if (v5 && v17 == v14)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v15, (llvm::APInt *)&__p);
    v6 = v11;
    p_p = (uint64_t *)__p;
    if (v11 < 0x41)
      p_p = (uint64_t *)&__p;
    v8 = *p_p;
    v9 = *(unsigned int *)(a2 + 8);
    if (v9 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9 + 1, 8);
      *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8)) = v8;
      LODWORD(v9) = *(_DWORD *)(a2 + 8);
      v6 = v11;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v8;
    }
    *(_DWORD *)(a2 + 8) = v9 + 1;
    if (v6 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v17;
  }
}

void *mlir::anec::detail::ConvolutionGenericAdaptorBase::getGroups(mlir::anec::detail::ConvolutionGenericAdaptorBase *this)
{
  mlir::CallGraphNode *v2;
  uint64_t v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  v2 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue(this) + 16);
  v3 = mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v2, (mlir::CallGraphNode *)(v3 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 16));
  if ((v5 & 1) != 0)
  {
    v6 = *((_QWORD *)v4 + 1);
    if (v6 && *(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

uint64_t mlir::emitOptionalError<llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<long long &>,llvm::detail::provider_format_adapter<long long &>>>>(uint64_t a1, char a2, const void **a3)
{
  uint64_t v4;
  const void **v6;
  __int16 v7;
  uint64_t v8;
  _QWORD v9[24];

  v9[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v8);
  if (v8)
  {
    v7 = 263;
    v6 = a3;
    mlir::Diagnostic::operator<<((uint64_t)v9, &v6);
  }
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v8);
  if (v8)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v8);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v9);
  return v4;
}

_QWORD *llvm::SmallVector<long long,6u>::SmallVector(_QWORD *a1, const void *a2, uint64_t a3)
{
  size_t v6;
  unsigned int v7;

  *a1 = a1 + 2;
  a1[1] = 0x600000000;
  v6 = 8 * a3;
  if ((unint64_t)(8 * a3) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, (8 * a3) >> 3, 8);
    v7 = *((_DWORD *)a1 + 2);
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if (a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + (v6 >> 3);
  return a1;
}

void llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 8);
}

BOOL mlir::anec::`anonymous namespace'::defaultMixedDataTypesIsCompatibleReturnType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *ArgAttrsAttr;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  int v37;
  _QWORD v38[2];
  _QWORD *v39;
  uint64_t v40;

  result = 1;
  if (a2 && a4)
  {
    v9 = 0;
    while (1)
    {
      v10 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, v9);
      v11 = (uint64_t *)mlir::TypeRange::dereference_iterator(a3, v9);
      if (!v10)
        goto LABEL_13;
      v12 = *v10;
      v13 = mlir::TypeID::get<mlir::ShapedType>();
      v14 = *(unsigned int *)(v12 + 16);
      if (!(_DWORD)v14)
        goto LABEL_13;
      v15 = *(_QWORD **)(v12 + 8);
      v16 = &v15[2 * v14];
      do
      {
        v17 = v14 >> 1;
        v18 = &v15[2 * (v14 >> 1)];
        v20 = *v18;
        v19 = v18 + 2;
        v14 += ~(v14 >> 1);
        if (v20 < v13)
          v15 = v19;
        else
          v14 = v17;
      }
      while (v14);
      if (v15 != v16 && *v15 == v13)
      {
        v31 = v15[1];
        v39 = v10;
        v40 = v31;
        if (!v11)
          goto LABEL_24;
      }
      else
      {
LABEL_13:
        v39 = v10;
        v40 = 0;
        if (!v11)
          goto LABEL_24;
      }
      v21 = *v11;
      v22 = mlir::TypeID::get<mlir::ShapedType>();
      v23 = *(unsigned int *)(v21 + 16);
      if (!(_DWORD)v23)
        goto LABEL_24;
      v24 = *(_QWORD **)(v21 + 8);
      v25 = &v24[2 * v23];
      do
      {
        v26 = v23 >> 1;
        v27 = &v24[2 * (v23 >> 1)];
        v29 = *v27;
        v28 = v27 + 2;
        v23 += ~(v23 >> 1);
        if (v29 < v22)
          v24 = v28;
        else
          v23 = v26;
      }
      while (v23);
      if (v24 == v25 || *v24 != v22)
      {
LABEL_24:
        v30 = 0;
        goto LABEL_25;
      }
      v30 = v24[1];
LABEL_25:
      v38[0] = v11;
      v38[1] = v30;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v39))
        return 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v38))
        return 0;
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v39);
      v34 = v33;
      v35 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v38);
      if (v34 != v36)
        return 0;
      v37 = memcmp(ArgAttrsAttr, v35, 8 * v34);
      result = v37 == 0;
      if (!v37 && ++v9 != a2 && v9 != a4)
        continue;
      return result;
    }
  }
  return result;
}

uint64_t mlir::anec::`anonymous namespace'::doAttributesVerificationWithANEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t RankPromotionTypeForANE;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t (**InterfaceFor)(_QWORD, uint64_t, void *, _QWORD, uint64_t);
  uint64_t v24;
  void *v26;
  uint64_t v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  v26 = v28;
  v27 = 0x300000000;
  if ((*(_BYTE *)(a1 + 46) & 0x80) != 0)
  {
    v4 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 72);
      do
      {
        v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 32 * v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v7)
          goto LABEL_13;
        v8 = *v7;
        v9 = mlir::TypeID::get<mlir::ShapedType>();
        v10 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v10)
          goto LABEL_13;
        v11 = *(_QWORD **)(v8 + 8);
        v12 = &v11[2 * v10];
        do
        {
          v13 = v10 >> 1;
          v14 = &v11[2 * (v10 >> 1)];
          v16 = *v14;
          v15 = v14 + 2;
          v10 += ~(v10 >> 1);
          if (v16 < v9)
            v11 = v15;
          else
            v10 = v13;
        }
        while (v10);
        if (v11 != v12 && *v11 == v9)
          v17 = v11[1];
        else
LABEL_13:
          v17 = 0;
        RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v7, v17);
        v20 = v19;
        v21 = v27;
        if (v27 >= (unint64_t)HIDWORD(v27))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v27 + 1, 16);
          v21 = v27;
        }
        v22 = (uint64_t *)((char *)v26 + 16 * v21);
        *v22 = RankPromotionTypeForANE;
        v22[1] = v20;
        LODWORD(v27) = v27 + 1;
        ++v5;
      }
      while (v5 != v4);
    }
  }
  InterfaceFor = (uint64_t (**)(_QWORD, uint64_t, void *, _QWORD, uint64_t))mlir::OpInterface<mlir::anec::ANECompilerVerifierInterface,mlir::anec::detail::ANECompilerVerifierInterfaceInterfaceTraits>::getInterfaceFor(a1);
  v24 = (*InterfaceFor)(InterfaceFor, a1, v26, v27, a2);
  if (v26 != v28)
    free(v26);
  return v24;
}

uint64_t mlir::anec::`anonymous namespace'::doCustomVerificationWithANEC(mlir::anec::_anonymous_namespace_ *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t (**InterfaceFor)(_QWORD, mlir::anec::_anonymous_namespace_ *, void *, uint64_t, uint64_t);
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  _QWORD v29[7];

  v29[6] = *MEMORY[0x1E0C80C00];
  v27 = v29;
  v28 = 0x300000000;
  if ((*((_BYTE *)this + 46) & 0x80) == 0)
    goto LABEL_20;
  v3 = *((unsigned int *)this + 17);
  if (!(_DWORD)v3)
    goto LABEL_20;
  v4 = 0;
  v5 = *((_QWORD *)this + 9);
  do
  {
    v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 32 * v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v6)
      goto LABEL_13;
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ShapedType>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_13;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = (uint64_t *)v10[1];
    else
LABEL_13:
      v16 = 0;
    v17 = v28;
    if (v28 >= (unint64_t)HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      v17 = v28;
    }
    v18 = (uint64_t **)((char *)v27 + 16 * v17);
    *v18 = v6;
    v18[1] = v16;
    v19 = v28 + 1;
    LODWORD(v28) = v28 + 1;
    ++v4;
  }
  while (v4 != v3);
  if (!this)
  {
    InterfaceFor = 0;
  }
  else
  {
LABEL_20:
    InterfaceFor = (uint64_t (**)(_QWORD, mlir::anec::_anonymous_namespace_ *, void *, uint64_t, uint64_t))mlir::OpInterface<mlir::anec::ANECompilerVerifierInterface,mlir::anec::detail::ANECompilerVerifierInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
    v19 = v28;
  }
  v21 = v27;
  v22 = v19;
  v23 = *(void **)(*(_QWORD *)(mlir::Block::getParentOp(*((mlir::Block **)this + 2)) + 48) + 16);
  if (v23 == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id)
  {
    v24 = 0;
  }
  else if (v23 == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id)
  {
    v24 = 1;
  }
  else if (v23 == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id)
  {
    v24 = 2;
  }
  else if (v23 == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id)
  {
    v24 = 3;
  }
  else if (v23 == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id)
  {
    v24 = 4;
  }
  else if (v23 == &mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id)
  {
    v24 = 5;
  }
  else
  {
    v24 = 6;
  }
  v25 = (*InterfaceFor)(InterfaceFor, this, v21, v22, v24);
  if (v27 != v29)
    free(v27);
  return v25;
}

uint64_t mlir::anec::Convolution::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t IndexFromDim;
  char v32;
  unint64_t v33;
  uint64_t StrideAttr;
  uint64_t KsizeAttr;
  uint64_t PaddingAttr;
  uint64_t ArgAttrsAttr;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  int *v41;
  int v42;
  _BOOL4 v43;
  BOOL v44;
  char v45;
  void *v46;
  const char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int32x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t IncPadAttr;
  const __CFString *v58;
  BOOL v59;
  int v60;
  const __CFString *v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  uint64_t *KernelScaleAttr;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t SplatFloat;
  _QWORD *v78;
  uint64_t ElementTypeOrSelf;
  uint64_t *KernelZeroPointAttr;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t SplatInt;
  uint64_t v94;
  int8x16_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD v99[6];
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  int8x16_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  int v112;
  const __CFString *ANECNetFormat;
  char v114;
  int v115;
  const void **v116[4];
  __int16 v117;
  _QWORD v118[2];
  _QWORD v119[2];
  void *v120;
  uint64_t v121;
  _BYTE v122[16];
  void *v123;
  uint64_t v124;
  _BYTE v125[16];
  void *v126;
  uint64_t v127;
  _WORD v128[12];
  void *__p;
  _DWORD v130[46];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  ANECConvLayerDescInitialize();
  v6 = *(uint64_t **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v119[0] = v6;
  v119[1] = v16;
  v17 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (!v17)
    goto LABEL_20;
  v18 = *v17;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *(unsigned int *)(v18 + 16);
  if (!(_DWORD)v20)
    goto LABEL_20;
  v21 = *(_QWORD **)(v18 + 8);
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_20:
    v27 = 0;
  v118[0] = v17;
  v118[1] = v27;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
  v29 = v28;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v30);
  if (v32)
  {
    v33 = IndexFromDim;
    v123 = v125;
    v124 = 0x300000000;
    v120 = v122;
    v121 = 0x300000000;
    v126 = v128;
    v127 = 0x600000000;
    StrideAttr = mlir::anec::Convolution::getStrideAttr(a1);
    mlir::getValues<int>(StrideAttr, (uint64_t)&v123);
    KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(a1);
    mlir::getValues<int>(KsizeAttr, (uint64_t)&v120);
    PaddingAttr = mlir::anec::Convolution::getPaddingAttr(a1);
    mlir::getValues<int>(PaddingAttr, (uint64_t)&v126);
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
    v38 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v118);
    v39 = (void **)v38;
    if ((_DWORD)v121)
    {
      v40 = 4 * v121 - 4;
      v41 = (int *)v120;
      do
      {
        v42 = *v41++;
        v43 = v42 != 1;
        v44 = v42 != 1 || v40 == 0;
        v40 -= 4;
      }
      while (!v44);
    }
    else
    {
      v43 = 0;
    }
    v46 = *(void **)(ArgAttrsAttr + 8 * v33);
    if (v29 == 5)
    {
      if (v124 <= 2)
      {
        v47 = "failed: found 2 strides, but the convolution op is 3d";
LABEL_64:
        v116[0] = (const void **)v47;
        v117 = 259;
        mlir::OpState::emitOpError((uint64_t **)a1, v116, (uint64_t)&__p);
        v45 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v130);
LABEL_103:
        if (v126 != v128)
          free(v126);
        if (v120 != v122)
          free(v120);
        if (v123 != v125)
          free(v123);
        goto LABEL_109;
      }
      if (v121 <= 2)
      {
        v47 = "failed: found 2 dilations, but the convolution op is 3d";
        goto LABEL_64;
      }
      if (v127 <= 5)
      {
        v47 = "failed: found 4 paddings, but the convolution op is 3d";
        goto LABEL_64;
      }
      v98 = a3;
      v48 = (uint64_t *)(v38 + 32);
      v49 = (uint64_t *)(v38 + 24);
      v50 = *(_QWORD *)(v38 + 16);
    }
    else
    {
      v98 = a3;
      v48 = (uint64_t *)(v38 + 24);
      v49 = (uint64_t *)(v38 + 16);
      v50 = 1;
    }
    v51 = *v48;
    v52 = *v49;
    v53 = *((_DWORD *)v123 + 2);
    v54 = *(int32x2_t *)v123;
    v55 = *((int *)v120 + 1);
    v96 = *((int *)v120 + 2);
    v97 = v50;
    v56 = *(int *)v120;
    v94 = *((_QWORD *)v126 + 2);
    v95 = *(int8x16_t *)v126;
    IncPadAttr = mlir::anec::AveragePool::getIncPadAttr(a1);
    if (!IncPadAttr || !v43)
    {
      if (IncPadAttr)
        v59 = 0;
      else
        v59 = v43;
      if (v59)
      {
        v58 = CFSTR("DilatedConv");
      }
      else
      {
        if (IncPadAttr)
          v60 = v43;
        else
          v60 = 1;
        if (v60)
          v58 = CFSTR("Conv");
        else
          v58 = CFSTR("ChannelWiseConv");
      }
    }
    else
    {
      v58 = CFSTR("ChannelWiseDilatedConv");
    }
    v99[0] = v58;
    v99[1] = CFSTR("Dense");
    __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
    if (mlir::Type::isF16((mlir::Type *)&__p))
    {
      v61 = CFSTR("Float16");
    }
    else if (mlir::Type::isF32((mlir::Type *)&__p))
    {
      v61 = CFSTR("Float32");
    }
    else if (mlir::Type::isUnsignedInteger((mlir::Type *)&__p, 8))
    {
      v61 = CFSTR("UInt8");
    }
    else
    {
      mlir::Type::isInteger((mlir::Type *)&__p, 8);
      v61 = CFSTR("Int8");
    }
    v99[2] = v61;
    __p = (void *)mlir::anec::Convolution::getPaddingModeAttr(a1);
    v99[3] = *(&off_1E0E53988 + mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&__p));
    v62 = mlir::anec::AveragePool::getIncPadAttr(a1);
    v63 = v46;
    if (!v62)
      v63 = *v39;
    v99[4] = v63;
    if (!mlir::anec::AveragePool::getIncPadAttr(a1))
    {
      v116[0] = (const void **)mlir::anec::Convolution::getGroupsAttr(a1);
      mlir::IntegerAttr::getValue(v116, (llvm::APInt *)&__p);
      if (v130[0] > 0x40u)
      {
        v46 = *(void **)__p;
        operator delete[](__p);
      }
      else
      {
        v46 = __p;
      }
    }
    v99[5] = v46;
    v100 = 0;
    v101 = v51;
    v102 = v52;
    v103 = v97;
    v104 = v53;
    *(int32x2_t *)&v64 = vrev64_s32(v54);
    *((_QWORD *)&v64 + 1) = v94;
    v105 = v64;
    v106 = vextq_s8(v95, v95, 8uLL);
    v107 = 0;
    v108 = v96;
    v109 = v55;
    v110 = v56;
    a3 = v98;
    if (mlir::anec::Convolution::getKernelScaleAttr(a1))
    {
      KernelScaleAttr = (uint64_t *)mlir::anec::Convolution::getKernelScaleAttr(a1);
      v66 = (uint64_t)KernelScaleAttr;
      if (!KernelScaleAttr)
        goto LABEL_84;
      v67 = *KernelScaleAttr;
      v68 = mlir::TypeID::get<mlir::ElementsAttr>();
      v69 = *(unsigned int *)(v67 + 16);
      if (!(_DWORD)v69)
        goto LABEL_84;
      v70 = *(_QWORD **)(v67 + 8);
      v71 = &v70[2 * v69];
      do
      {
        v72 = v69 >> 1;
        v73 = &v70[2 * (v69 >> 1)];
        v75 = *v73;
        v74 = v73 + 2;
        v69 += ~(v69 >> 1);
        if (v75 < v68)
          v70 = v74;
        else
          v69 = v72;
      }
      while (v69);
      if (v70 != v71 && *v70 == v68)
        v76 = v70[1];
      else
LABEL_84:
        v76 = 0;
      SplatFloat = mlir::getSplatFloatValue<float>(v66, v76);
      if ((SplatFloat & 0xFF00000000) != 0)
      {
        v112 = SplatFloat;
      }
      else
      {
        v111 = 1;
        v78 = (_QWORD *)mlir::anec::Convolution::getKernelScaleAttr(a1);
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v78);
      }
    }
    if (mlir::anec::Convolution::getKernelZeroPointAttr(a1))
    {
      KernelZeroPointAttr = (uint64_t *)mlir::anec::Convolution::getKernelZeroPointAttr(a1);
      v81 = (uint64_t)KernelZeroPointAttr;
      if (!KernelZeroPointAttr)
        goto LABEL_98;
      v82 = *KernelZeroPointAttr;
      v83 = mlir::TypeID::get<mlir::ElementsAttr>();
      v84 = *(unsigned int *)(v82 + 16);
      if (!(_DWORD)v84)
        goto LABEL_98;
      v85 = *(_QWORD **)(v82 + 8);
      v86 = &v85[2 * v84];
      do
      {
        v87 = v84 >> 1;
        v88 = &v85[2 * (v84 >> 1)];
        v90 = *v88;
        v89 = v88 + 2;
        v84 += ~(v84 >> 1);
        if (v90 < v83)
          v85 = v89;
        else
          v84 = v87;
      }
      while (v84);
      if (v85 != v86 && *v85 == v83)
        v91 = v85[1];
      else
LABEL_98:
        v91 = 0;
      SplatInt = mlir::getSplatIntValue<int>(v81, v91);
      if ((SplatInt & 0xFF00000000) != 0)
      {
        v115 = SplatInt;
        v45 = 1;
      }
      else
      {
        v45 = 1;
        v114 = 1;
      }
    }
    else
    {
      v45 = 1;
    }
    goto LABEL_103;
  }
  v126 = "Failed to get channel index for Conv";
  v128[8] = 259;
  mlir::OpState::emitOpError((uint64_t **)a1, (const void ***)&v126, (uint64_t)&__p);
  v45 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v130);
LABEL_109:
  if (v45)
    return mlir::anec::verifyConvolutionWithANEC((uint64_t)v99, (uint64_t *)*a1, a2, a3);
  else
    return 0;
}

uint64_t mlir::anec::verifyConvolutionWithANEC(uint64_t a1, uint64_t *a2, mlir::MemoryMapperInterface *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  const void **v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21[2];
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int128 __p;
  __int128 v26;
  int v27;
  uint64_t v28[19];
  void *v29[2];
  _BYTE v30[64];
  char buffer[8];
  _QWORD v32[65];

  v32[63] = *MEMORY[0x1E0C80C00];
  v29[0] = v30;
  v29[1] = (void *)0x100000000;
  v19 = 0;
  v20 = 0;
  v5 = 1;
  *(_QWORD *)buffer = 1;
  v21[0] = 0;
  ANECUnitValidatorCreate();
  if (ANECValidateConvLayer())
  {
    v6 = MEMORY[0x1E0DE4FD0];
    v7 = MEMORY[0x1E0DE4FD0] + 104;
    v28[0] = MEMORY[0x1E0DE4FD0] + 104;
    v8 = MEMORY[0x1E0DE4FD0] + 64;
    v9 = MEMORY[0x1E0DE4F50];
    v10 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v11 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v22 = MEMORY[0x1E0DE4FD0] + 64;
    v21[0] = v10;
    *(const void ***)((char *)v21 + (_QWORD)*(v10 - 3)) = v11;
    v21[1] = 0;
    v12 = (std::ios_base *)((char *)v21 + (unint64_t)*(v21[0] - 3));
    std::ios_base::init(v12, &v23);
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    v13 = *(_QWORD *)(v9 + 40);
    v22 = *(_QWORD *)(v9 + 32);
    *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v13;
    v21[0] = *(const void ***)(v9 + 8);
    *(const void ***)((char *)v21 + (unint64_t)*(v21[0] - 3)) = *(const void ***)(v9 + 48);
    v28[0] = v7;
    v21[0] = (const void **)(v6 + 24);
    v22 = v8;
    std::streambuf::basic_streambuf();
    v14 = MEMORY[0x1E0DE4FB8] + 16;
    v23 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v26 = 0u;
    v27 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v21[0] = *(const void ***)v9;
    v15 = *(_QWORD *)(v9 + 72);
    *(const void ***)((char *)v21 + (unint64_t)*(v21[0] - 3)) = *(const void ***)(v9 + 64);
    v22 = v15;
    v23 = v14;
    if (SBYTE7(v26) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v28);
    v24 = 260;
    v21[0] = (const void **)&v17;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v32);
    if (v18 < 0)
      operator delete(v17);
  }
  ANECUnitValidatorDelete();
  if (v29[0] != v30)
    free(v29[0]);
  return v5;
}

uint64_t mlir::anec::Convolution::addOpToNetwork(mlir::Operation **a1, uint64_t a2, mlir::anec::ANECIRWeights *a3)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t IncPadAttr;
  uint64_t StrideAttr;
  uint64_t KsizeAttr;
  uint64_t PaddingAttr;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t ArgAttrsAttr;
  uint64_t v48;
  uint64_t v49;
  uint64_t DefiningOp;
  uint64_t v51;
  uint64_t v52;
  mlir::Operation *v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  int64x2_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  int v64;
  uint64_t OperandRange;
  void *v66;
  int v67;
  int Width;
  uint64_t v69;
  int32x4_t *v70;
  int32x4_t v71;
  _QWORD *v72;
  int64x2_t *v73;
  uint64_t *KernelScaleAttr;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t SplatFloat;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  int v103;
  int v104;
  uint64_t *KernelZeroPointAttr;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t SplatInt;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  unint64_t *v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *p_shared_owners;
  std::string *v133;
  _QWORD *v134;
  unint64_t v135;
  _OWORD *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v140;
  uint64_t v141;
  __int128 v142;
  _QWORD v143[2];
  _QWORD v144[2];
  uint64_t v145;
  mlir::Operation *v146;
  uint64_t v147;
  void *v148[2];
  uint64_t v149;
  _BYTE v150[16];
  BOOL v151;
  void *__p;
  uint64_t v153;
  _BYTE v154[32];
  int32x4_t *v155;
  uint64_t v156;
  _BYTE v157[16];
  void *v158[2];
  _QWORD v159[4];

  v159[2] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *((_QWORD *)*a1 + 9);
  v7 = *(_QWORD *)(v6 + 24);
  v145 = *(_QWORD *)(v6 + 56);
  v146 = v5;
  if (*((_DWORD *)v5 + 9))
    v8 = (uint64_t)v5 - 16;
  else
    v8 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
  v148[0] = (void *)mlir::anec::Convolution::getGroupsAttr(&v146);
  mlir::IntegerAttr::getValue(v148, (llvm::APInt *)&__p);
  if (v153 > 0x40)
  {
    v140 = *(void **)__p;
    operator delete[](__p);
  }
  else
  {
    v140 = __p;
  }
  IncPadAttr = mlir::anec::AveragePool::getIncPadAttr(&v146);
  v158[0] = v159;
  v158[1] = (void *)0x200000000;
  StrideAttr = mlir::anec::Convolution::getStrideAttr(&v146);
  mlir::getValues<unsigned long long>(StrideAttr, (uint64_t)v158);
  v155 = (int32x4_t *)v157;
  v156 = 0x200000000;
  KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(&v146);
  mlir::getValues<unsigned long long>(KsizeAttr, (uint64_t)&v155);
  __p = v154;
  v153 = 0x400000000;
  PaddingAttr = mlir::anec::Convolution::getPaddingAttr(&v146);
  mlir::getValues<unsigned long long>(PaddingAttr, (uint64_t)&__p);
  v14 = (uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v14)
    goto LABEL_16;
  v15 = *v14;
  v16 = mlir::TypeID::get<mlir::ShapedType>();
  v17 = *(unsigned int *)(v15 + 16);
  if (!(_DWORD)v17)
    goto LABEL_16;
  v18 = *(_QWORD **)(v15 + 8);
  v19 = &v18[2 * v17];
  do
  {
    v20 = v17 >> 1;
    v21 = &v18[2 * (v17 >> 1)];
    v23 = *v21;
    v22 = v21 + 2;
    v17 += ~(v17 >> 1);
    if (v23 < v16)
      v18 = v22;
    else
      v17 = v20;
  }
  while (v17);
  if (v18 != v19 && *v18 == v16)
    v24 = v18[1];
  else
LABEL_16:
    v24 = 0;
  v144[0] = v14;
  v144[1] = v24;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v144);
  v25 = (uint64_t *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25)
    goto LABEL_26;
  v26 = *v25;
  v27 = mlir::TypeID::get<mlir::ShapedType>();
  v28 = *(unsigned int *)(v26 + 16);
  if (!(_DWORD)v28)
    goto LABEL_26;
  v29 = *(_QWORD **)(v26 + 8);
  v30 = &v29[2 * v28];
  do
  {
    v31 = v28 >> 1;
    v32 = &v29[2 * (v28 >> 1)];
    v34 = *v32;
    v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27)
      v29 = v33;
    else
      v28 = v31;
  }
  while (v28);
  if (v29 != v30 && *v29 == v27)
    v35 = v29[1];
  else
LABEL_26:
    v35 = 0;
  v143[0] = v25;
  v143[1] = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v143);
  v36 = (uint64_t *)(*(_QWORD *)(v145 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v36)
    goto LABEL_36;
  v37 = *v36;
  v38 = mlir::TypeID::get<mlir::ShapedType>();
  v39 = *(unsigned int *)(v37 + 16);
  if (!(_DWORD)v39)
    goto LABEL_36;
  v40 = *(_QWORD **)(v37 + 8);
  v41 = &v40[2 * v39];
  do
  {
    v42 = v39 >> 1;
    v43 = &v40[2 * (v39 >> 1)];
    v45 = *v43;
    v44 = v43 + 2;
    v39 += ~(v39 >> 1);
    if (v45 < v38)
      v40 = v44;
    else
      v39 = v42;
  }
  while (v39);
  if (v40 != v41 && *v40 == v38)
    v46 = v40[1];
  else
LABEL_36:
    v46 = 0;
  *(_QWORD *)&v142 = v36;
  *((_QWORD *)&v142 + 1) = v46;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v142);
  v49 = v48;
  v147 = v145;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v147);
  if (DefiningOp)
  {
    v51 = DefiningOp;
    v52 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v51 + 48) + 32))(*(_QWORD *)(v51 + 48), v52))
    {
      v148[0] = &v149;
      v148[1] = (void *)0x100000000;
      mlir::Operation::fold(v51, 0, 0, (uint64_t)v148);
      llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v148[0] & 0xFFFFFFFFFFFFFFF8));
      if (v148[0] != &v149)
        free(v148[0]);
    }
  }
  v53 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v145);
  v54 = (uint64_t *)a3;
  v55 = mlir::anec::ANECIRWeights::lookupConstant(a3, v53);
  v56 = (char *)operator new(0x150uLL);
  *(_OWORD *)v56 = 0u;
  *((_OWORD *)v56 + 1) = 0u;
  *((_OWORD *)v56 + 2) = 0u;
  *((_OWORD *)v56 + 3) = 0u;
  *((_OWORD *)v56 + 4) = 0u;
  *((_OWORD *)v56 + 5) = 0u;
  *((_OWORD *)v56 + 6) = 0u;
  *((_OWORD *)v56 + 7) = 0u;
  *((_OWORD *)v56 + 8) = 0u;
  *((_OWORD *)v56 + 9) = 0u;
  *((_OWORD *)v56 + 10) = 0u;
  *((_OWORD *)v56 + 11) = 0u;
  *((_OWORD *)v56 + 12) = 0u;
  *((_OWORD *)v56 + 13) = 0u;
  *((_OWORD *)v56 + 14) = 0u;
  *((_OWORD *)v56 + 15) = 0u;
  *((_OWORD *)v56 + 16) = 0u;
  *((_OWORD *)v56 + 17) = 0u;
  *((_OWORD *)v56 + 18) = 0u;
  *((_OWORD *)v56 + 19) = 0u;
  *((_OWORD *)v56 + 20) = 0u;
  *((_QWORD *)v56 + 9) = -1;
  *((_DWORD *)v56 + 22) = -1;
  *((_QWORD *)v56 + 12) = -1;
  *((_DWORD *)v56 + 26) = -1;
  *((_QWORD *)v56 + 14) = -1;
  *(_OWORD *)(v56 + 120) = 0u;
  *(_OWORD *)(v56 + 136) = 0u;
  *(_OWORD *)(v56 + 152) = 0u;
  *((_QWORD *)v56 + 21) = 0;
  *((_DWORD *)v56 + 44) = 1;
  *((_DWORD *)v56 + 48) = -1;
  *((_QWORD *)v56 + 25) = -1;
  *((_DWORD *)v56 + 52) = -1;
  *((_QWORD *)v56 + 27) = -1;
  *((_QWORD *)v56 + 28) = 0x3F80000000000006;
  *(_QWORD *)v56 = off_1E0E134A0;
  v57 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v56 + 248) = v57;
  *(_QWORD *)&v58 = 0x100000001;
  *((_QWORD *)&v58 + 1) = 0x100000001;
  *(int64x2_t *)(v56 + 264) = v57;
  *(_OWORD *)(v56 + 280) = v58;
  *((_QWORD *)v56 + 37) = 0x100000001;
  *((_QWORD *)v56 + 38) = 0;
  *((_QWORD *)v56 + 39) = 0;
  *((_QWORD *)v56 + 40) = 0;
  *((_DWORD *)v56 + 82) = 1;
  v148[0] = v5;
  v148[1] = v150;
  v149 = 0x200000000;
  v59 = v156;
  if (!(_DWORD)v156)
  {
    v151 = IncPadAttr != 0;
    v62 = v150;
LABEL_51:
    if (IncPadAttr)
      v64 = 2;
    else
      v64 = 1;
    if (v62 != v150)
      goto LABEL_55;
    goto LABEL_56;
  }
  if (v156 < 3)
  {
    v60 = v156;
    v61 = v150;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v148[1], v150, v156, 8);
    v60 = v156;
    if (!(_DWORD)v156)
      goto LABEL_48;
    v61 = v148[1];
  }
  memcpy(v61, v155, 8 * v60);
LABEL_48:
  v63 = 0;
  LODWORD(v149) = v59;
  v62 = v148[1];
  v151 = IncPadAttr != 0;
  while (*(_QWORD *)((char *)v148[1] + v63) == 1)
  {
    v63 += 8;
    if (8 * v59 == v63)
      goto LABEL_51;
  }
  if (IncPadAttr)
  {
    v64 = 6;
    if (v148[1] == v150)
      goto LABEL_56;
LABEL_55:
    free(v62);
    goto LABEL_56;
  }
  v64 = 5;
  if (v148[1] != v150)
    goto LABEL_55;
LABEL_56:
  *((_DWORD *)v56 + 60) = v64;
  v56[244] = 0;
  *((_DWORD *)v56 + 20) = 1;
  *(_OWORD *)v148 = v142;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v148);
  v66 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (v66 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v66 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
    {
      v67 = 4;
    }
    else if (v66 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    {
      v67 = 6;
    }
    else
    {
      v67 = 0;
    }
    goto LABEL_73;
  }
  v147 = OperandRange;
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v147);
  if (Width == 16)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v147) == 1)
    {
      v67 = 3;
      goto LABEL_73;
    }
  }
  else if (Width == 8)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v147) == 2)
      v67 = 2;
    else
      v67 = 1;
    goto LABEL_73;
  }
  v67 = 0;
LABEL_73:
  *((_QWORD *)v56 + 31) = v140;
  *((_DWORD *)v56 + 21) = v67;
  *((_DWORD *)v56 + 22) = 0;
  *((_QWORD *)v56 + 12) = v55;
  *((int8x16_t *)v56 + 16) = vextq_s8(*(int8x16_t *)(ArgAttrsAttr + 8 * v49 - 16), *(int8x16_t *)(ArgAttrsAttr + 8 * v49 - 16), 8uLL);
  if (v49 == 5)
    v69 = *(_QWORD *)(ArgAttrsAttr + 16);
  else
    v69 = 1;
  *((_QWORD *)v56 + 34) = v69;
  v70 = v155;
  *((_DWORD *)v56 + 70) = v155[1].i64[0];
  v71 = *v70;
  v72 = v158[0];
  *(int32x4_t *)(v56 + 284) = vrev64q_s32(vuzp1q_s32(v71, *(int32x4_t *)((char *)v158[0] + 8)));
  *((_DWORD *)v56 + 75) = *v72;
  v73 = (int64x2_t *)__p;
  *((int32x4_t *)v56 + 19) = vuzp1q_s32(*((int32x4_t *)__p + 2), *((int32x4_t *)__p + 1));
  *((int32x2_t *)v56 + 40) = vmovn_s64(*v73);
  v148[0] = (void *)mlir::anec::Convolution::getPaddingModeAttr(&v146);
  *((_DWORD *)v56 + 82) = dword_181233000[mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v148)];
  v56[180] = 0;
  if (mlir::anec::Convolution::getKernelScaleAttr(&v146))
  {
    KernelScaleAttr = (uint64_t *)mlir::anec::Convolution::getKernelScaleAttr(&v146);
    v75 = (uint64_t)KernelScaleAttr;
    if (!KernelScaleAttr)
      goto LABEL_86;
    v76 = *KernelScaleAttr;
    v77 = mlir::TypeID::get<mlir::ElementsAttr>();
    v78 = *(unsigned int *)(v76 + 16);
    if (!(_DWORD)v78)
      goto LABEL_86;
    v79 = *(_QWORD **)(v76 + 8);
    v80 = &v79[2 * v78];
    do
    {
      v81 = v78 >> 1;
      v82 = &v79[2 * (v78 >> 1)];
      v84 = *v82;
      v83 = v82 + 2;
      v78 += ~(v78 >> 1);
      if (v84 < v77)
        v79 = v83;
      else
        v78 = v81;
    }
    while (v78);
    if (v79 != v80 && *v79 == v77)
      v85 = v79[1];
    else
LABEL_86:
      v85 = 0;
    SplatFloat = mlir::getSplatFloatValue<float>(v75, v85);
    if ((SplatFloat & 0xFF00000000) != 0)
    {
      *((_DWORD *)v56 + 57) = SplatFloat;
      goto LABEL_120;
    }
    v87 = (uint64_t *)mlir::anec::Convolution::getKernelScaleAttr(&v146);
    v88 = (uint64_t)v87;
    if (!v87)
      goto LABEL_98;
    v89 = *v87;
    v90 = mlir::TypeID::get<mlir::ElementsAttr>();
    v91 = *(unsigned int *)(v89 + 16);
    if (!(_DWORD)v91)
      goto LABEL_98;
    v92 = *(_QWORD **)(v89 + 8);
    v93 = &v92[2 * v91];
    do
    {
      v94 = v91 >> 1;
      v95 = &v92[2 * (v91 >> 1)];
      v97 = *v95;
      v96 = v95 + 2;
      v91 += ~(v91 >> 1);
      if (v97 < v90)
        v92 = v96;
      else
        v91 = v94;
    }
    while (v91);
    if (v92 != v93 && *v92 == v90)
      v98 = v92[1];
    else
LABEL_98:
      v98 = 0;
    v99 = mlir::anec::ANECIRWeights::addConstant(v54, v88, v98);
    v141 = mlir::anec::Convolution::getKernelScaleAttr(&v146);
    v148[0] = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v141);
    v148[1] = v100;
    v101 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v148);
    v102 = *(void **)(*(_QWORD *)v101 + 136);
    if (v102 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      if (v102 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
      {
        v103 = 4;
      }
      else if (v102 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
      {
        v103 = 6;
      }
      else
      {
        v103 = 0;
      }
      goto LABEL_119;
    }
    v147 = v101;
    v104 = mlir::IntegerType::getWidth((mlir::IntegerType *)&v147);
    if (v104 == 16)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v147) == 1)
      {
        v103 = 3;
LABEL_119:
        *((_DWORD *)v56 + 56) = v103;
        v56[184] = 1;
        *((_DWORD *)v56 + 48) = 0;
        *((_QWORD *)v56 + 25) = v99;
        goto LABEL_120;
      }
    }
    else if (v104 == 8)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v147) == 2)
        v103 = 2;
      else
        v103 = 1;
      goto LABEL_119;
    }
    v103 = 0;
    goto LABEL_119;
  }
LABEL_120:
  if (mlir::anec::Convolution::getKernelZeroPointAttr(&v146))
  {
    KernelZeroPointAttr = (uint64_t *)mlir::anec::Convolution::getKernelZeroPointAttr(&v146);
    v106 = (uint64_t)KernelZeroPointAttr;
    if (!KernelZeroPointAttr)
      goto LABEL_130;
    v107 = *KernelZeroPointAttr;
    v108 = mlir::TypeID::get<mlir::ElementsAttr>();
    v109 = *(unsigned int *)(v107 + 16);
    if (!(_DWORD)v109)
      goto LABEL_130;
    v110 = *(_QWORD **)(v107 + 8);
    v111 = &v110[2 * v109];
    do
    {
      v112 = v109 >> 1;
      v113 = &v110[2 * (v109 >> 1)];
      v115 = *v113;
      v114 = v113 + 2;
      v109 += ~(v109 >> 1);
      if (v115 < v108)
        v110 = v114;
      else
        v109 = v112;
    }
    while (v109);
    if (v110 != v111 && *v110 == v108)
      v116 = v110[1];
    else
LABEL_130:
      v116 = 0;
    SplatInt = mlir::getSplatIntValue<int>(v106, v116);
    if ((SplatInt & 0xFF00000000) != 0)
    {
      *((_DWORD *)v56 + 58) = SplatInt;
    }
    else
    {
      v118 = (uint64_t *)mlir::anec::Convolution::getKernelZeroPointAttr(&v146);
      v119 = (uint64_t)v118;
      if (!v118)
        goto LABEL_142;
      v120 = *v118;
      v121 = mlir::TypeID::get<mlir::ElementsAttr>();
      v122 = *(unsigned int *)(v120 + 16);
      if (!(_DWORD)v122)
        goto LABEL_142;
      v123 = *(_QWORD **)(v120 + 8);
      v124 = &v123[2 * v122];
      do
      {
        v125 = v122 >> 1;
        v126 = &v123[2 * (v122 >> 1)];
        v128 = *v126;
        v127 = v126 + 2;
        v122 += ~(v122 >> 1);
        if (v128 < v121)
          v123 = v127;
        else
          v122 = v125;
      }
      while (v122);
      if (v123 != v124 && *v123 == v121)
        v129 = v123[1];
      else
LABEL_142:
        v129 = 0;
      v130 = mlir::anec::ANECIRWeights::addConstant(v54, v119, v129);
      v56[185] = 1;
      *((_DWORD *)v56 + 52) = 0;
      *((_QWORD *)v56 + 27) = v130;
    }
  }
  v131 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v131->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v131->__shared_owners_;
  v131->__shared_weak_owners_ = 0;
  v131->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v131[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v133 = (std::string *)&v131[1].__shared_owners_;
  if (v56[31] < 0)
  {
    std::string::__init_copy_ctor_external(v133, *((const std::string::value_type **)v56 + 1), *((_QWORD *)v56 + 2));
  }
  else
  {
    *(_OWORD *)&v133->__r_.__value_.__l.__data_ = *(_OWORD *)(v56 + 8);
    v131[2].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v56 + 3);
  }
  LODWORD(v131[2].__shared_owners_) = 17;
  v131[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v131[2].__shared_weak_owners_ = (uint64_t)v56;
  LOBYTE(v131[3].__vftable) = 0;
  v131[3].__shared_owners_ = 0;
  v131[3].__shared_weak_owners_ = (uint64_t)&v131[4].__shared_owners_;
  v131[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v131[5].__shared_weak_owners_ = (uint64_t)&v131[6].__shared_owners_;
  v131[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  v148[0] = &v131[1];
  v148[1] = v131;
  v134 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v134 >= *(_QWORD *)(a2 + 240))
  {
    v136 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, (__int128 *)v148);
    v131 = (std::__shared_weak_count *)v148[1];
    *(_QWORD *)(a2 + 232) = v136;
    if (!v131)
      goto LABEL_156;
  }
  else
  {
    *v134 = v131 + 1;
    v134[1] = v131;
    do
      v135 = __ldxr(p_shared_owners);
    while (__stxr(v135 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v134 + 2;
  }
  v137 = (unint64_t *)&v131->__shared_owners_;
  do
    v138 = __ldaxr(v137);
  while (__stlxr(v138 - 1, v137));
  if (!v138)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
LABEL_156:
  if (__p != v154)
    free(__p);
  if (v155 != (int32x4_t *)v157)
    free(v155);
  if (v158[0] != v159)
    free(v158[0]);
  return 1;
}

uint64_t mlir::anec::findDilatedConvTiles(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v12 = 1;
  v13 = a3;
  if ((a3 & 1) == 0)
  {
    do
    {
      if (v13 >= 0)
        v14 = v13;
      else
        v14 = v13 + 1;
      v13 = v14 >> 1;
      ++v12;
    }
    while (((v14 >> 1) & 1) == 0);
  }
  if (0xAAAAAAAAAAAAAAABLL * v13 + 0x2AAAAAAAAAAAAAAALL <= 0x5555555555555554)
  {
    v15 = 1;
    do
    {
      v13 /= 3;
      ++v15;
    }
    while ((unint64_t)(0x2AAAAAAAAAAAAAAALL - 0x5555555555555555 * v13) < 0x5555555555555555);
  }
  else
  {
    v15 = 1;
  }
  v16 = 1;
  v17 = a4;
  if ((a4 & 1) == 0)
  {
    do
    {
      if (v17 >= 0)
        v18 = v17;
      else
        v18 = v17 + 1;
      v17 = v18 >> 1;
      ++v16;
    }
    while (((v18 >> 1) & 1) == 0);
  }
  if (0xAAAAAAAAAAAAAAABLL * v17 + 0x2AAAAAAAAAAAAAAALL <= 0x5555555555555554)
  {
    v19 = 1;
    do
    {
      v17 /= 3;
      ++v19;
    }
    while ((unint64_t)(0x2AAAAAAAAAAAAAAALL - 0x5555555555555555 * v17) < 0x5555555555555555);
  }
  else
  {
    v19 = 1;
  }
  v20 = 0;
  v21 = a5 - 1;
  v22 = a6 - 1;
  v23 = this - 1;
  v24 = a2 - 1;
  v25 = -1;
  do
  {
    v26 = (uint64_t *)((char *)&unk_181232F90 + 16 * v20);
    v27 = *v26;
    v28 = v26[1];
    v29 = 1;
    v30 = 1;
    do
    {
      if (v15)
      {
        v31 = 0;
        v32 = -1;
        v33 = 1;
        v34 = v29;
        do
        {
          v35 = v12;
          for (i = v33; v35; --v35)
          {
            if (i > v29 && (v32 == -1 || ((v23 + i) / i + v28 - 1) / v28 * v28 * i - this <= v32))
            {
              v32 = ((v23 + i) / i + v28 - 1) / v28 * v28 * i - this;
              v34 = i;
            }
            i *= 2;
          }
          ++v31;
          v33 *= 3;
        }
        while (v31 != v15);
      }
      else
      {
        v34 = v29;
      }
      v37 = a7 + a7 * a3 / v34 * v21;
      v38 = v37 + v37 * a4 / v30 * v22;
      if (v38 >= 0)
        v39 = v37 + v37 * a4 / v30 * v22;
      else
        v39 = v38 + 1;
      v40 = v39 >> 1;
      if (v34 * v30 > 8)
        v38 = v40;
      if (v38 <= 0x10000)
      {
        v44 = v30;
        goto LABEL_56;
      }
      v41 = 0;
      v42 = -1;
      v43 = 1;
      v44 = v30;
      do
      {
        v45 = v16;
        v46 = v43;
        do
        {
          if (v46 > v30 && (v42 == -1 || ((v24 + v46) / v46 + v27 - 1) / v27 * v27 * v46 - a2 <= v42))
          {
            v42 = ((v24 + v46) / v46 + v27 - 1) / v27 * v27 * v46 - a2;
            v44 = v46;
          }
          v46 *= 2;
          --v45;
        }
        while (v45);
        ++v41;
        v43 *= 3;
      }
      while (v41 != v19);
      v47 = v37 + v37 * a4 / v44 * v22;
      if (v47 >= 0)
        v48 = v37 + v37 * a4 / v44 * v22;
      else
        v48 = v47 + 1;
      v49 = v48 >> 1;
      if (v44 * v34 > 8)
        v47 = v49;
      if (v42 == -1)
        break;
      v29 = v34;
      v30 = v44;
    }
    while (v47 > 0x10000);
    if (v47 > 0x10000)
      goto LABEL_21;
LABEL_56:
    if (v25 == -1
      || v34 * v27 * v44 * ((v27 + (v24 + v44) / v44 - 1) / v27) * ((v23 + v34) / v34 + v28 - 1) / v28 * v28 - a2 * this < v25)
    {
      *a8 = v28;
      *a9 = v27;
      *a10 = v34;
      v25 = v34 * v27 * v44 * ((v27 + (v24 + v44) / v44 - 1) / v27) * ((v23 + v34) / v34 + v28 - 1) / v28 * v28
          - a2 * this;
      *a11 = v44;
    }
LABEL_21:
    ++v20;
  }
  while (v20 != 4);
  return this;
}

float mlir::anec::Convolution::getExecutionCost(mlir::anec::AveragePool *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t ArgAttrsAttr;
  int64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unsigned int IntOrFloatBitWidth;
  unint64_t v44;
  unint64_t IndexFromDim;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  int v63;
  uint64_t v64;
  mlir::Operation **v65;
  uint64_t v66;
  uint64_t KsizeAttr;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t NumElements;
  uint64_t v100;
  float v101;
  uint64_t v102;
  _QWORD *v103;
  float v104;
  float v105;
  unsigned int v106;
  BOOL v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  float v123;
  void *v124;
  float v125;
  _BOOL4 v126;
  float v127;
  float v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  float v137;
  void *v138;
  float v139;
  _BOOL4 isF16;
  float v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int64_t v150;
  uint64_t v151;
  unint64_t v152;
  float v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  float v157;
  void *v158;
  float v159;
  _BOOL4 v160;
  float v161;
  float v162;
  uint64_t *v164;
  uint64_t *v165;
  int v166;
  int64_t v167;
  uint64_t v168;
  int v169;
  mlir::anec::AveragePool *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[2];
  _QWORD v183[2];
  _QWORD v184[2];
  void *__p;
  unsigned int v186;
  uint64_t GroupsAttr;
  int *OperandRange;
  uint64_t v189;
  _QWORD v190[8];

  v190[6] = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3)
    goto LABEL_10;
  v4 = *v3;
  v5 = mlir::TypeID::get<mlir::ShapedType>();
  v6 = *(unsigned int *)(v4 + 16);
  if (!(_DWORD)v6)
    goto LABEL_10;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = &v7[2 * v6];
  do
  {
    v9 = v6 >> 1;
    v10 = &v7[2 * (v6 >> 1)];
    v12 = *v10;
    v11 = v10 + 2;
    v6 += ~(v6 >> 1);
    if (v12 < v5)
      v7 = v11;
    else
      v6 = v9;
  }
  while (v6);
  if (v7 != v8 && *v7 == v5)
    v13 = v7[1];
  else
LABEL_10:
    v13 = 0;
  v184[0] = v3;
  v184[1] = v13;
  v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v14)
    goto LABEL_20;
  v15 = *v14;
  v16 = mlir::TypeID::get<mlir::ShapedType>();
  v17 = *(unsigned int *)(v15 + 16);
  if (!(_DWORD)v17)
    goto LABEL_20;
  v18 = *(_QWORD **)(v15 + 8);
  v19 = &v18[2 * v17];
  do
  {
    v20 = v17 >> 1;
    v21 = &v18[2 * (v17 >> 1)];
    v23 = *v21;
    v22 = v21 + 2;
    v17 += ~(v17 >> 1);
    if (v23 < v16)
      v18 = v22;
    else
      v17 = v20;
  }
  while (v17);
  if (v18 != v19 && *v18 == v16)
    v24 = v18[1];
  else
LABEL_20:
    v24 = 0;
  v183[0] = v14;
  v183[1] = v24;
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v25 = *(_QWORD *)a1 - 16;
  else
    v25 = 0;
  v26 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v170 = a1;
  if (!v26)
    goto LABEL_33;
  v27 = *v26;
  v28 = mlir::TypeID::get<mlir::ShapedType>();
  v29 = *(unsigned int *)(v27 + 16);
  if (!(_DWORD)v29)
    goto LABEL_33;
  v30 = *(_QWORD **)(v27 + 8);
  v31 = &v30[2 * v29];
  do
  {
    v32 = v29 >> 1;
    v33 = &v30[2 * (v29 >> 1)];
    v35 = *v33;
    v34 = v33 + 2;
    v29 += ~(v29 >> 1);
    if (v35 < v28)
      v30 = v34;
    else
      v29 = v32;
  }
  while (v29);
  if (v30 != v31 && *v30 == v28)
    v36 = v30[1];
  else
LABEL_33:
    v36 = 0;
  v182[0] = v26;
  v182[1] = v36;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184);
  v38 = (int64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v183);
  v40 = v39;
  v41 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v182);
  v42 = *v38;
  v176 = v38[v40 - 2];
  v172 = v38[v40 - 1];
  OperandRange = (int *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v183);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184);
  IndexFromDim = mlir::anec::getIndexFromDim(0, v44);
  if (!v46)
    goto LABEL_136;
  v47 = IndexFromDim;
  v167 = v42;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184);
  v49 = mlir::anec::getIndexFromDim(1, v48);
  if (!v50
    || (v51 = v49,
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184),
        v53 = mlir::anec::getIndexFromDim(3, v52),
        !v54)
    || (v55 = v53,
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184),
        v57 = mlir::anec::getIndexFromDim(4, v56),
        !v58))
  {
LABEL_136:
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  v164 = *(uint64_t **)(ArgAttrsAttr + 8 * v47);
  v59 = *(_QWORD *)(ArgAttrsAttr + 8 * v51);
  v174 = *(_QWORD *)(v41 + 8 * v57);
  v175 = *(_QWORD *)(v41 + 8 * v55);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184);
  v61 = mlir::anec::getIndexFromDim(2, v60);
  if (v62)
  {
    v168 = *(_QWORD *)(v41 + 8 * v61);
    v63 = v38[v40 - 1];
    v176 = v38[v40 - 3];
    v64 = v38[v40 - 2];
    v65 = (mlir::Operation **)v170;
  }
  else
  {
    v168 = 1;
    v63 = 1;
    v65 = (mlir::Operation **)v170;
    v64 = v172;
  }
  v66 = IntOrFloatBitWidth >> 3;
  OperandRange = (int *)v190;
  v189 = 0xC00000000;
  KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(v65);
  mlir::getValues<int>(KsizeAttr, (uint64_t)&OperandRange);
  if ((_DWORD)v189)
  {
    v68 = *OperandRange;
    if ((_DWORD)v189 == 1)
    {
      v69 = 1;
      v70 = 1;
    }
    else
    {
      v69 = OperandRange[1];
      if (v189 < 3)
        v70 = 1;
      else
        v70 = OperandRange[2];
    }
  }
  else
  {
    v69 = 1;
    v68 = 1;
    v70 = 1;
  }
  v71 = v70;
  v72 = v68 * (v63 - 1) + 1;
  GroupsAttr = mlir::anec::Convolution::getGroupsAttr(v65);
  mlir::IntegerAttr::getValue(&GroupsAttr, (llvm::APInt *)&__p);
  v166 = v63;
  if (v186 > 0x40)
  {
    v73 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v73 = (unint64_t)__p;
  }
  v74 = v64 - 1;
  v75 = v176 - 1;
  v76 = v69;
  v77 = v72;
  if (v175 <= 0)
    v78 = -(-v175 & 7);
  else
    v78 = v175 & 7;
  v79 = v78 == 0;
  v80 = v175 - v78 + 8;
  v82 = v168 < 9 && v175 < 9;
  if (v82 && v174 < 9 || v79)
    v83 = v175;
  else
    v83 = v80;
  if (v69 > 5 || (int)v71 > 5)
  {
    v169 = v77;
    v171 = v66;
    GroupsAttr = 8;
    v181 = 16;
    v179 = 1;
    v180 = 1;
    v173 = v64;
    mlir::anec::findDilatedConvTiles(v174, v175, v71, v69, v64, v176, v59, &GroupsAttr, &v181, &v180, &v179, v164);
    v86 = v179;
    v87 = v180;
    v88 = (v174 + v180 - 1) / v180;
    v89 = (v175 + v179 - 1) / v179;
    v90 = (int)(v71 / v180) * v74 + 1;
    v91 = (int)(v76 / v179) * (v176 - 1) + 1;
    v92 = v59 / v73;
    if (v180 != 1 || (v93 = 0.0, v179 != 1))
    {
      v94 = (v175 + v179 - 1) / v179;
      if (v180 == 1)
      {
        v100 = 0;
      }
      else
      {
        v95 = v179;
        __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v184);
        v96 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p);
        v97 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184);
        NumElements = mlir::ShapedType::getNumElements(v97, v98);
        v86 = v95;
        v100 = NumElements * ((v96 >> 2) & 0x3FFFFFFE);
      }
      v129 = v86;
      if (v86 != 1)
      {
        __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v184);
        v130 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p);
        v131 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184);
        v100 += mlir::ShapedType::getNumElements(v131, v132) * ((v130 >> 2) & 0x3FFFFFFE);
      }
      __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v182);
      v133 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p);
      v134 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v182);
      v136 = v100 + mlir::ShapedType::getNumElements(v134, v135) * ((v133 >> 2) & 0x3FFFFFFE);
      v137 = (float)v136;
      v138 = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v184);
      if (v136 <= 0x200000)
        v137 = 0.0;
      __p = v138;
      v139 = *(float *)(a2 + 40) * 1.0e12;
      isF16 = mlir::Type::isF16((mlir::Type *)&__p);
      v141 = v139 + v139;
      if (isF16)
        v141 = v139;
      v142 = (float)(0.0 / v141) / 0.65;
      if (v142 < (float)(v137 / (float)(*(float *)(a2 + 44) * 1000000000.0)))
        v142 = v137 / (float)(*(float *)(a2 + 44) * 1000000000.0);
      v93 = v142 + 0.0;
      v86 = v129;
      v89 = v94;
    }
    v143 = 0x10000 / (uint64_t)(v169 * (uint64_t)v171 * v90 * v92 * v91);
    if ((unint64_t)v143 <= 1)
      v143 = 1;
    if (v143 >= 8)
      v143 = 8;
    v144 = 16 * v143;
    v145 = v167 / (16 * v143);
    v146 = v87 * (_QWORD)v165 * v86 * ((v88 + GroupsAttr - 1) / GroupsAttr) * ((v89 + v181 - 1) / v181);
    v147 = v176 * v173 * v166 * v92;
    v148 = (v147 * 16 * v143 * v146 * v145) << 9;
    v149 = (v146 * v145) << 8;
    if (v167 != v145 * v144)
    {
      v150 = v167 - v144 * v145;
      v151 = v150 + 15;
      v152 = v150 + 30;
      if (v151 >= 0)
        v152 = v151;
      v148 += 32 * v147 * (v152 >> 4) * (v146 << 8);
      v149 += v146 << 8;
    }
    v153 = (float)(uint64_t)(v149 * v92);
    __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v182);
    v154 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p) >> 3;
    v155 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v182);
    v157 = v153 + (float)(mlir::ShapedType::getNumElements(v155, v156) * v154);
    v158 = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v184);
    if (v157 <= 2097200.0)
      v157 = 0.0;
    __p = v158;
    v159 = *(float *)(a2 + 40) * 1.0e12;
    v160 = mlir::Type::isF16((mlir::Type *)&__p);
    v161 = v159 + v159;
    if (v160)
      v161 = v159;
    v162 = (float)((float)v148 / v161) / 0.65;
    if (v162 < (float)(v157 / (float)(*(float *)(a2 + 44) * 1000000000.0)))
      v162 = v157 / (float)(*(float *)(a2 + 44) * 1000000000.0);
    v105 = v93 + v162;
  }
  else
  {
    v84 = v75 * v69 + 1;
    if ((_DWORD)v71 == 1)
    {
      v85 = v74 * v71 + 1;
    }
    else
    {
      v59 *= v71;
      v73 *= v71;
      v85 = v64;
    }
    if ((uint64_t)(v176 * v64 * v66 * v166 * (v59 / v73)) <= 0x8000)
    {
      v109 = v84 == v176 && v85 == v64;
      v101 = 0.0;
      if (!v109 && (uint64_t)(v84 * v77 * v85 * (v59 / v73) * v66) > 0x8000)
      {
        v177 = v64 * v77;
        do
        {
          if (v101 == 0.0)
          {
            v113 = v75;
            __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v184);
            v114 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p) >> 3;
            v115 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v184);
            v117 = mlir::ShapedType::getNumElements(v115, v116) * v114;
            __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v182);
            v118 = v66;
            v119 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p) >> 3;
            v120 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v182);
            v122 = 2 * (v117 + mlir::ShapedType::getNumElements(v120, v121) * v119);
            v123 = (float)v122;
            v124 = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v184);
            if (v122 <= 0x200000)
              v123 = 0.0;
            __p = v124;
            v125 = *(float *)(a2 + 40) * 1.0e12;
            v126 = mlir::Type::isF16((mlir::Type *)&__p);
            v75 = v113;
            v127 = v125 + v125;
            if (v126)
              v127 = v125;
            v128 = (float)(0.0 / v127) / 0.65;
            v66 = v118;
            if (v128 >= (float)(v123 / (float)(*(float *)(a2 + 44) * 1000000000.0)))
              v101 = v128;
            else
              v101 = v123 / (float)(*(float *)(a2 + 44) * 1000000000.0);
          }
          if ((v69 & 1) != 0)
          {
            if (v69 != 3 * (v69 / 3))
              break;
            v111 = 2;
            v112 = 3;
            v69 /= 3;
            v59 *= 3;
            v73 *= 3;
          }
          else
          {
            if (v69 >= 0)
              v110 = v69;
            else
              v110 = v69 + 1;
            v69 = v110 >> 1;
            v59 *= 2;
            v73 *= 2;
            v111 = 1;
            v112 = 2;
          }
          v83 = (v83 + v111) / v112;
        }
        while ((uint64_t)((v177 * (v59 / v73) + v177 * (v59 / v73) * v75 * v69) * v66) > 0x8000);
      }
    }
    else
    {
      v101 = 0.0;
    }
    v102 = *(_QWORD *)v170;
    v103 = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v184);
    v105 = v101 + v104;
    __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v184);
    v106 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p);
    if ((uint64_t)v59 >= v167
      && (uint64_t)v59 >= 64
      && (((_DWORD)v174 * (_DWORD)v175 * (_DWORD)v168 * (v106 >> 3)) & 0x7FFFF) == 0)
    {
      v105 = v105 + v105;
    }
  }
  if (OperandRange != (int *)v190)
    free(OperandRange);
  return v105;
}

uint64_t mlir::anec::Convolution::getInput(mlir::anec::Convolution *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24);
}

uint64_t mlir::anec::Convolution::getFilter(mlir::anec::Convolution *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56);
}

void mlir::getValues<int>(uint64_t a1, uint64_t a2)
{
  uint64_t NumElements;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a1;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v13, a1, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v16);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v10, a1, NumElements);
  while (1)
  {
    v5 = v13 == v10 && v14 == v11;
    if (v5 && v15 == v12)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v13, (llvm::APInt *)&__p);
    if (v9 > 0x40)
      v6 = *(_QWORD *)__p;
    else
      v6 = (uint64_t)((_QWORD)__p << -(uint64_t)v9) >> -(uint64_t)v9;
    v7 = *(unsigned int *)(a2 + 8);
    if (v7 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v7 + 1, 4);
      v7 = *(unsigned int *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = v6;
    ++*(_DWORD *)(a2 + 8);
    if (v9 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v15;
  }
}

void *mlir::anec::Convolution::getGroups(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t GroupsAttr;

  GroupsAttr = mlir::anec::Convolution::getGroupsAttr(this);
  mlir::IntegerAttr::getValue(&GroupsAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

BOOL mlir::anec::`anonymous namespace'::executionCost(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *ArgAttrsAttr;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t OperandRange;

  v5 = 0.0;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a2 + 72);
      do
      {
        v13 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32 * v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v13)
          goto LABEL_4;
        v14 = *v13;
        v15 = mlir::TypeID::get<mlir::ShapedType>();
        v16 = *(unsigned int *)(v14 + 16);
        if (!(_DWORD)v16)
          goto LABEL_4;
        v17 = *(_QWORD **)(v14 + 8);
        v18 = &v17[2 * v16];
        do
        {
          v19 = v16 >> 1;
          v20 = &v17[2 * (v16 >> 1)];
          v22 = *v20;
          v21 = v20 + 2;
          v16 += ~(v16 >> 1);
          if (v22 < v15)
            v17 = v21;
          else
            v16 = v19;
        }
        while (v16);
        if (v17 != v18 && *v17 == v15)
          v9 = v17[1];
        else
LABEL_4:
          v9 = 0;
        v41 = v13;
        v42 = v9;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v41);
        v10 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange) >> 3;
        ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
        v5 = v5 + (float)(mlir::ShapedType::getNumElements(ArgAttrsAttr, v12) * v10);
        ++v7;
      }
      while (v7 != v6);
    }
  }
  v23 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v23)
    v24 = a2 - 16;
  else
    v24 = 0;
  if ((_DWORD)v23)
  {
    for (i = 0; i != v23; ++i)
    {
      v26 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v24, i) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v26)
        goto LABEL_30;
      v27 = *v26;
      v28 = mlir::TypeID::get<mlir::ShapedType>();
      v29 = *(unsigned int *)(v27 + 16);
      if (!(_DWORD)v29)
        goto LABEL_30;
      v30 = *(_QWORD **)(v27 + 8);
      v31 = &v30[2 * v29];
      do
      {
        v32 = v29 >> 1;
        v33 = &v30[2 * (v29 >> 1)];
        v35 = *v33;
        v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28)
          v30 = v34;
        else
          v29 = v32;
      }
      while (v29);
      if (v30 != v31 && *v30 == v28)
        v36 = v30[1];
      else
LABEL_30:
        v36 = 0;
      v41 = v26;
      v42 = v36;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v41);
      v37 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange) >> 3;
      v38 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
      v5 = v5 + (float)(mlir::ShapedType::getNumElements(v38, v39) * v37);
    }
  }
  v41 = a3;
  return mlir::Type::isF16((mlir::Type *)&v41);
}

uint64_t mlir::anec::Linear::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  const void *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t IndexFromDim;
  char v49;
  unint64_t v50;
  int v51;
  _BYTE *v52;
  mlir::AffineMap *v54;
  uint64_t OperandRange;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD v60[2];
  _QWORD v61[2];
  void *v62;
  uint64_t v63;
  _BYTE v64[48];
  uint64_t v65;
  char v66[8];
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v65 = a6;
  v66[0] = 0;
  v67 = 0;
  v68 = a7;
  v69 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v65);
    if (v67)
      v67 = 0;
    mlir::OperationName::OperationName(v66, "anec.linear", 11, Context);
    v67 = 1;
  }
  v70 = a4;
  v71 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::LinearAdaptor::verify(&v65, v18))
    return 0;
  v19 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v20 = v19;
  if (!v19)
    goto LABEL_18;
  v21 = *v19;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_18;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_18:
    v30 = 0;
  v61[0] = v20;
  v61[1] = v30;
  ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v61);
  v33 = v32;
  v34 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 1);
  v35 = v34;
  if (!v34)
    goto LABEL_28;
  v36 = *v34;
  v37 = mlir::TypeID::get<mlir::ShapedType>();
  v38 = *(unsigned int *)(v36 + 16);
  if (!(_DWORD)v38)
    goto LABEL_28;
  v39 = *(_QWORD **)(v36 + 8);
  v40 = &v39[2 * v38];
  do
  {
    v41 = v38 >> 1;
    v42 = &v39[2 * (v38 >> 1)];
    v44 = *v42;
    v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37)
      v39 = v43;
    else
      v38 = v41;
  }
  while (v38);
  if (v39 != v40 && *v39 == v37)
    v45 = v39[1];
  else
LABEL_28:
    v45 = 0;
  v60[0] = v35;
  v60[1] = v45;
  v46 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60) + 8);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v61);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v47);
  if (!v49)
  {
    v58 = (uint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
    return mlir::anec::LinearAdaptor::verify(v58, v59);
  }
  v50 = IndexFromDim;
  v62 = v64;
  v63 = 0x600000000;
  if ((unint64_t)(8 * v33) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v64, (8 * v33) >> 3, 8);
    v51 = v63;
    v52 = v62;
    if (!v33)
      goto LABEL_36;
    goto LABEL_35;
  }
  v51 = 0;
  v52 = v64;
  if (v33)
  {
LABEL_35:
    memcpy(&v52[8 * v51], ArgAttrsAttr, 8 * v33);
    v51 = v63;
    v52 = v62;
  }
LABEL_36:
  v54 = (mlir::AffineMap *)(v51 + v33);
  LODWORD(v63) = v51 + v33;
  *(_QWORD *)&v52[8 * v50] = v46;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
  v56 = mlir::MemRefType::get(v52, v54, OperandRange, 0, 0, 0);
  v57 = *(unsigned int *)(a11 + 8);
  if (v57 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v57 + 1, 8);
    LODWORD(v57) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v57) = v56;
  ++*(_DWORD *)(a11 + 8);
  if (v62 != v64)
    free(v62);
  return 1;
}

uint64_t mlir::anec::LinearAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *Value;
  const char *v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v106;
  uint64_t v107;
  __int16 v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t OperandRange;
  const char *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD v123[24];

  v123[23] = *MEMORY[0x1E0C80C00];
  v121 = *a1;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v121))
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v5 = (const char *)*((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v6 = (const char *)*((_QWORD *)Value + 1);
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    while (Value != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v121));
    if (v5)
    {
      if (!mlir::DenseFPElementsAttr::classof((uint64_t)v5))
        goto LABEL_52;
      v7 = *(_QWORD *)v5;
      v8 = mlir::TypeID::get<mlir::ElementsAttr>();
      v9 = *(unsigned int *)(v7 + 16);
      if (!(_DWORD)v9)
        goto LABEL_18;
      v10 = *(_QWORD **)(v7 + 8);
      v11 = &v10[2 * v9];
      do
      {
        v12 = v9 >> 1;
        v13 = &v10[2 * (v9 >> 1)];
        v15 = *v13;
        v14 = v13 + 2;
        v9 += ~(v9 >> 1);
        if (v15 < v8)
          v10 = v14;
        else
          v9 = v12;
      }
      while (v9);
      if (v10 != v11 && *v10 == v8)
        v16 = v10[1];
      else
LABEL_18:
        v16 = 0;
      v106 = v5;
      v107 = v16;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v106);
      v18 = Type;
      if (!Type)
        goto LABEL_28;
      v19 = *Type;
      v20 = mlir::TypeID::get<mlir::ShapedType>();
      v21 = *(unsigned int *)(v19 + 16);
      if (!(_DWORD)v21)
        goto LABEL_28;
      v22 = *(_QWORD **)(v19 + 8);
      v23 = &v22[2 * v21];
      do
      {
        v24 = v21 >> 1;
        v25 = &v22[2 * (v21 >> 1)];
        v27 = *v25;
        v26 = v25 + 2;
        v21 += ~(v21 >> 1);
        if (v27 < v20)
          v22 = v26;
        else
          v21 = v24;
      }
      while (v21);
      if (v22 != v23 && *v22 == v20)
        v28 = v22[1];
      else
LABEL_28:
        v28 = 0;
      v122 = v18;
      v123[0] = v28;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v122);
      if (v29)
      {
        v30 = *(_QWORD *)v5;
        v31 = mlir::TypeID::get<mlir::ElementsAttr>();
        v32 = *(unsigned int *)(v30 + 16);
        if (!(_DWORD)v32)
          goto LABEL_38;
        v33 = *(_QWORD **)(v30 + 8);
        v34 = &v33[2 * v32];
        do
        {
          v35 = v32 >> 1;
          v36 = &v33[2 * (v32 >> 1)];
          v38 = *v36;
          v37 = v36 + 2;
          v32 += ~(v32 >> 1);
          if (v38 < v31)
            v33 = v37;
          else
            v32 = v35;
        }
        while (v32);
        if (v33 != v34 && *v33 == v31)
          v39 = v33[1];
        else
LABEL_38:
          v39 = 0;
        v117 = v5;
        v118 = v39;
        v40 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v117);
        v41 = v40;
        if (!v40)
          goto LABEL_48;
        v42 = *v40;
        v43 = mlir::TypeID::get<mlir::ShapedType>();
        v44 = *(unsigned int *)(v42 + 16);
        if (!(_DWORD)v44)
          goto LABEL_48;
        v45 = *(_QWORD **)(v42 + 8);
        v46 = &v45[2 * v44];
        do
        {
          v47 = v44 >> 1;
          v48 = &v45[2 * (v44 >> 1)];
          v50 = *v48;
          v49 = v48 + 2;
          v44 += ~(v44 >> 1);
          if (v50 < v43)
            v45 = v49;
          else
            v44 = v47;
        }
        while (v44);
        if (v45 != v46 && *v45 == v43)
          v51 = v45[1];
        else
LABEL_48:
          v51 = 0;
        v119 = v41;
        v120 = v51;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v119);
        if (v52 != 1)
          goto LABEL_52;
      }
      v113 = v5;
      v114 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v113);
      v115 = v53;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v114);
      if (!mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        v109 = v5;
        v110 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v109);
        v111 = v54;
        v112 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v110);
        if (!mlir::Type::isF32((mlir::Type *)&v112))
        {
LABEL_52:
          v55 = "'anec.linear' op attribute 'kernel_scale' failed to satisfy constraint: f16 or f32 elements attribute of rank 0/1";
          goto LABEL_100;
        }
      }
    }
  }
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof((uint64_t)v6))
  {
    v56 = *(_QWORD *)v6;
    v57 = mlir::TypeID::get<mlir::ElementsAttr>();
    v58 = *(unsigned int *)(v56 + 16);
    if (!(_DWORD)v58)
      goto LABEL_64;
    v59 = *(_QWORD **)(v56 + 8);
    v60 = &v59[2 * v58];
    do
    {
      v61 = v58 >> 1;
      v62 = &v59[2 * (v58 >> 1)];
      v64 = *v62;
      v63 = v62 + 2;
      v58 += ~(v58 >> 1);
      if (v64 < v57)
        v59 = v63;
      else
        v58 = v61;
    }
    while (v58);
    if (v59 != v60 && *v59 == v57)
      v65 = v59[1];
    else
LABEL_64:
      v65 = 0;
    v106 = v6;
    v107 = v65;
    v66 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v106);
    v67 = v66;
    if (!v66)
      goto LABEL_74;
    v68 = *v66;
    v69 = mlir::TypeID::get<mlir::ShapedType>();
    v70 = *(unsigned int *)(v68 + 16);
    if (!(_DWORD)v70)
      goto LABEL_74;
    v71 = *(_QWORD **)(v68 + 8);
    v72 = &v71[2 * v70];
    do
    {
      v73 = v70 >> 1;
      v74 = &v71[2 * (v70 >> 1)];
      v76 = *v74;
      v75 = v74 + 2;
      v70 += ~(v70 >> 1);
      if (v76 < v69)
        v71 = v75;
      else
        v70 = v73;
    }
    while (v70);
    if (v71 != v72 && *v71 == v69)
      v77 = v71[1];
    else
LABEL_74:
      v77 = 0;
    v122 = v67;
    v123[0] = v77;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v122);
    if (!v78)
      goto LABEL_96;
    v79 = *(_QWORD *)v6;
    v80 = mlir::TypeID::get<mlir::ElementsAttr>();
    v81 = *(unsigned int *)(v79 + 16);
    if (!(_DWORD)v81)
      goto LABEL_84;
    v82 = *(_QWORD **)(v79 + 8);
    v83 = &v82[2 * v81];
    do
    {
      v84 = v81 >> 1;
      v85 = &v82[2 * (v81 >> 1)];
      v87 = *v85;
      v86 = v85 + 2;
      v81 += ~(v81 >> 1);
      if (v87 < v80)
        v82 = v86;
      else
        v81 = v84;
    }
    while (v81);
    if (v82 != v83 && *v82 == v80)
      v88 = v82[1];
    else
LABEL_84:
      v88 = 0;
    v117 = v6;
    v118 = v88;
    v89 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v117);
    v90 = v89;
    if (!v89)
      goto LABEL_94;
    v91 = *v89;
    v92 = mlir::TypeID::get<mlir::ShapedType>();
    v93 = *(unsigned int *)(v91 + 16);
    if (!(_DWORD)v93)
      goto LABEL_94;
    v94 = *(_QWORD **)(v91 + 8);
    v95 = &v94[2 * v93];
    do
    {
      v96 = v93 >> 1;
      v97 = &v94[2 * (v93 >> 1)];
      v99 = *v97;
      v98 = v97 + 2;
      v93 += ~(v93 >> 1);
      if (v99 < v92)
        v94 = v98;
      else
        v93 = v96;
    }
    while (v93);
    if (v94 != v95 && *v94 == v92)
      v100 = v94[1];
    else
LABEL_94:
      v100 = 0;
    v119 = v90;
    v120 = v100;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v119);
    if (v101 == 1)
    {
LABEL_96:
      v113 = v6;
      v114 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v113);
      v115 = v102;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v114);
      if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8))
        return 1;
      v109 = v6;
      v110 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v109);
      v111 = v103;
      v112 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v110);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v112, 8))
        return 1;
    }
  }
  v55 = "'anec.linear' op attribute 'kernel_zero_point' failed to satisfy constraint: si8 or ui8 elements attribute of rank 0/1";
LABEL_100:
  v106 = v55;
  v108 = 259;
  mlir::emitError(a2, (uint64_t)&v106, (uint64_t)&v122);
  v104 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v122);
  if (v122)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v122);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v123);
  return v104;
}

uint64_t mlir::anec::Linear::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  const void **v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t ArgAttrsAttr;
  const __CFString *v29;
  uint64_t *KernelScaleAttr;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t SplatFloat;
  _QWORD *v43;
  uint64_t ElementTypeOrSelf;
  uint64_t *KernelZeroPointAttr;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t SplatInt;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void **v63;
  const void **v64;
  std::ios_base *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  mlir::Operation *v70;
  void *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  const __CFString *v75;
  const __CFString *v76;
  uint64_t v77;
  const __CFString *v78;
  char v79;
  char v80;
  int v81;
  const __CFString *ANECNetFormat;
  char v83;
  int v84;
  int v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  __int128 __p;
  __int128 v92;
  int v93;
  uint64_t v94[19];
  void *v95[2];
  _BYTE v96[64];
  char buffer[8];
  _QWORD v98[65];

  v98[63] = *MEMORY[0x1E0C80C00];
  ANECLinearLayerDescInitialize();
  v6 = *(uint64_t **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  *(_QWORD *)buffer = v6;
  v98[0] = v16;
  v17 = (const void **)*((_QWORD *)a2 + 2);
  if (!v17)
    goto LABEL_20;
  v18 = *v17;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *((unsigned int *)v18 + 4);
  if (!(_DWORD)v20)
    goto LABEL_20;
  v21 = (_QWORD *)v18[1];
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_20:
    v27 = 0;
  v86 = (void **)v17;
  v87 = v27;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)buffer);
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v86);
  v75 = CFSTR("Dense");
  v95[0] = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v86);
  if (mlir::Type::isF16((mlir::Type *)v95))
  {
    v29 = CFSTR("Float16");
  }
  else if (mlir::Type::isF32((mlir::Type *)v95))
  {
    v29 = CFSTR("Float32");
  }
  else if (mlir::Type::isUnsignedInteger((mlir::Type *)v95, 8))
  {
    v29 = CFSTR("UInt8");
  }
  else
  {
    mlir::Type::isInteger((mlir::Type *)v95, 8);
    v29 = CFSTR("Int8");
  }
  v76 = v29;
  v77 = *(_QWORD *)(ArgAttrsAttr + 8);
  v78 = CFSTR("Batch");
  v79 = 0;
  v85 = 1;
  if (mlir::anec::Linear::getKernelScaleAttr(a1))
  {
    KernelScaleAttr = (uint64_t *)mlir::anec::Linear::getKernelScaleAttr(a1);
    v31 = (uint64_t)KernelScaleAttr;
    if (!KernelScaleAttr)
      goto LABEL_38;
    v32 = *KernelScaleAttr;
    v33 = mlir::TypeID::get<mlir::ElementsAttr>();
    v34 = *(unsigned int *)(v32 + 16);
    if (!(_DWORD)v34)
      goto LABEL_38;
    v35 = *(_QWORD **)(v32 + 8);
    v36 = &v35[2 * v34];
    do
    {
      v37 = v34 >> 1;
      v38 = &v35[2 * (v34 >> 1)];
      v40 = *v38;
      v39 = v38 + 2;
      v34 += ~(v34 >> 1);
      if (v40 < v33)
        v35 = v39;
      else
        v34 = v37;
    }
    while (v34);
    if (v35 != v36 && *v35 == v33)
      v41 = v35[1];
    else
LABEL_38:
      v41 = 0;
    SplatFloat = mlir::getSplatFloatValue<float>(v31, v41);
    if ((SplatFloat & 0xFF00000000) != 0)
    {
      v81 = SplatFloat;
    }
    else
    {
      v80 = 1;
      v43 = (_QWORD *)mlir::anec::Linear::getKernelScaleAttr(a1);
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v43);
    }
  }
  if (mlir::anec::Linear::getKernelZeroPointAttr(a1))
  {
    KernelZeroPointAttr = (uint64_t *)mlir::anec::Linear::getKernelZeroPointAttr(a1);
    v46 = (uint64_t)KernelZeroPointAttr;
    if (!KernelZeroPointAttr)
      goto LABEL_52;
    v47 = *KernelZeroPointAttr;
    v48 = mlir::TypeID::get<mlir::ElementsAttr>();
    v49 = *(unsigned int *)(v47 + 16);
    if (!(_DWORD)v49)
      goto LABEL_52;
    v50 = *(_QWORD **)(v47 + 8);
    v51 = &v50[2 * v49];
    do
    {
      v52 = v49 >> 1;
      v53 = &v50[2 * (v49 >> 1)];
      v55 = *v53;
      v54 = v53 + 2;
      v49 += ~(v49 >> 1);
      if (v55 < v48)
        v50 = v54;
      else
        v49 = v52;
    }
    while (v49);
    if (v50 != v51 && *v50 == v48)
      v56 = v50[1];
    else
LABEL_52:
      v56 = 0;
    SplatInt = mlir::getSplatIntValue<int>(v46, v56);
    if ((SplatInt & 0xFF00000000) != 0)
      v84 = SplatInt;
    else
      v83 = 1;
  }
  v95[0] = v96;
  v95[1] = (void *)0x100000000;
  v73 = 0;
  v74 = 0;
  v58 = 1;
  *(_QWORD *)buffer = 1;
  v86 = 0;
  ANECUnitValidatorCreate();
  if (ANECValidateLinearLayer())
  {
    v70 = *a1;
    v59 = MEMORY[0x1E0DE4FD0];
    v60 = MEMORY[0x1E0DE4FD0] + 104;
    v94[0] = MEMORY[0x1E0DE4FD0] + 104;
    v61 = MEMORY[0x1E0DE4FD0] + 64;
    v62 = MEMORY[0x1E0DE4F50];
    v63 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v64 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v88 = MEMORY[0x1E0DE4FD0] + 64;
    v86 = (void **)v63;
    *(void ***)((char *)&v86 + (_QWORD)*(v63 - 3)) = (void **)v64;
    v87 = 0;
    v65 = (std::ios_base *)((char *)&v86 + (_QWORD)*(v86 - 3));
    std::ios_base::init(v65, &v89);
    v65[1].__vftable = 0;
    v65[1].__fmtflags_ = -1;
    v66 = *(_QWORD *)(v62 + 40);
    v88 = *(_QWORD *)(v62 + 32);
    *(uint64_t *)((char *)&v88 + *(_QWORD *)(v88 - 24)) = v66;
    v86 = *(void ***)(v62 + 8);
    *(void ***)((char *)&v86 + (_QWORD)*(v86 - 3)) = *(void ***)(v62 + 48);
    v94[0] = v60;
    v86 = (void **)(v59 + 24);
    v88 = v61;
    std::streambuf::basic_streambuf();
    v67 = MEMORY[0x1E0DE4FB8] + 16;
    v89 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v92 = 0u;
    v93 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v86 = *(void ***)v62;
    v68 = *(_QWORD *)(v62 + 72);
    *(void ***)((char *)&v86 + (_QWORD)*(v86 - 3)) = *(void ***)(v62 + 64);
    v88 = v68;
    v89 = v67;
    if (SBYTE7(v92) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v94);
    v90 = 260;
    v86 = &v71;
    v58 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    if (v72 < 0)
      operator delete(v71);
  }
  ANECUnitValidatorDelete();
  if (v95[0] != v96)
    free(v95[0]);
  return v58;
}

void mlir::anec::`anonymous namespace'::getANECTensorDescs(mlir::MemoryMapperInterface *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t i;
  uint64_t OperandRange;
  void *v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int IndexFromDim;
  char v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t DefiningOp;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __CFString *v47;
  unint64_t v48;
  BOOL v49;
  char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  int64x2_t v54;
  int64x2_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;

  *(_DWORD *)(a4 + 8) = 0;
  if (a2 > *(unsigned int *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), a2, 64);
LABEL_4:
    v52 = (void *)(a4 + 16);
    v8 = 16 * a2;
    for (i = 24; ; i += 32)
    {
      OperandRange = mlir::MemoryMapperInterface::getOperandRange(a1);
      v11 = *(void **)(*(_QWORD *)OperandRange + 136);
      if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        v53 = OperandRange;
        v47 = CFSTR("Int8");
        if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v53) != 1)
        {
          if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v53))
            v47 = CFSTR("UInt8");
          else
            v47 = CFSTR("Int8");
        }
      }
      else
      {
        v12 = v11 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
           || v11 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
        v13 = v12 || v11 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
        v14 = v13 || v11 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
        v15 = v14 || v11 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
        v16 = v15 || v11 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
        v17 = v16 || v11 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
        v18 = v17 || v11 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
        v19 = v18 || v11 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
        v20 = v19 || v11 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
        v21 = v20 || v11 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
        if (v21 || v11 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          v53 = OperandRange;
          v47 = mlir::Type::isF16((mlir::Type *)&v53) ? CFSTR("Float16") : CFSTR("Float32");
        }
        else
        {
          v47 = CFSTR("Float32");
        }
      }
      mlir::CallableOpInterface::getArgAttrsAttr(a1);
      v24 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + i);
      v53 = (uint64_t)v47;
      if (v23 < 1)
        break;
      v25 = v23;
      IndexFromDim = mlir::anec::getIndexFromDim(0, v23);
      if (!v27
        || (v54.i64[0] = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(a1) + 8 * IndexFromDim),
            v28 = mlir::anec::getIndexFromDim(1, v25),
            !v29)
        || (v54.i64[1] = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(a1) + 8 * v28),
            v30 = mlir::anec::getIndexFromDim(3, v25),
            !v31)
        || (v55.i64[0] = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(a1) + 8 * v30),
            v32 = mlir::anec::getIndexFromDim(4, v25),
            !v33))
      {
LABEL_69:
        v51 = std::__throw_bad_optional_access[abi:nn180100]();
        return;
      }
      v55.i64[1] = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(a1) + 8 * v32);
      if (v25 != 5)
        goto LABEL_57;
      v34 = mlir::anec::getIndexFromDim(2, 5uLL);
      if (!v35)
        goto LABEL_69;
      v36 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(a1) + 8 * v34);
LABEL_58:
      v56 = v36;
      v57 = 1;
      v58 = 0;
      v60 = v24;
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v60);
      if (DefiningOp)
      {
        v38 = DefiningOp;
        v39 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
        LOBYTE(DefiningOp) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v38 + 48) + 32))(*(_QWORD *)(v38 + 48), v39);
      }
      v59 = DefiningOp;
      v40 = *(unsigned int *)(a4 + 8);
      v41 = *(_QWORD *)a4;
      if (v40 >= *(_DWORD *)(a4 + 12))
      {
        v48 = v40 + 1;
        v49 = v41 + (v40 << 6) > (unint64_t)&v53;
        if (v41 <= (unint64_t)&v53 && v49)
        {
          v50 = (char *)&v53 - v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v52, v48, 64);
          v41 = *(_QWORD *)a4;
          v42 = &v50[*(_QWORD *)a4];
          goto LABEL_62;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v52, v48, 64);
        v41 = *(_QWORD *)a4;
      }
      v42 = (char *)&v53;
LABEL_62:
      v43 = (_OWORD *)(v41 + ((unint64_t)*(unsigned int *)(a4 + 8) << 6));
      v44 = *(_OWORD *)v42;
      v45 = *((_OWORD *)v42 + 1);
      v46 = *((_OWORD *)v42 + 3);
      v43[2] = *((_OWORD *)v42 + 2);
      v43[3] = v46;
      *v43 = v44;
      v43[1] = v45;
      ++*(_DWORD *)(a4 + 8);
      a1 = (mlir::MemoryMapperInterface *)((char *)a1 + 16);
      v8 -= 16;
      if (!v8)
        return;
    }
    v54 = vdupq_n_s64(1uLL);
    v55 = v54;
LABEL_57:
    v36 = 1;
    goto LABEL_58;
  }
  if (a2)
    goto LABEL_4;
}

mlir::Diagnostic *mlir::anec::`anonymous namespace'::emitOpWarning@<X0>(uint64_t *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  mlir::Attribute *v6;
  mlir::MLIRContext *Context;
  mlir::Diagnostic *result;
  mlir::Diagnostic *v9;
  const mlir::OpPrintingFlags *v10;
  uint64_t v11;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  v6 = (mlir::Attribute *)(a1 + 3);
  mlir::emitWarning(a1[3], (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "'");
    if (v11)
    {
      mlir::Diagnostic::operator<<((uint64_t)v12, a1[6]);
      if (v11)
      {
        mlir::Diagnostic::operator<<((uint64_t)v12, "' op ");
        if (v11)
          mlir::Diagnostic::operator<<((uint64_t)v12, a2);
      }
    }
  }
  mlir::InFlightDiagnostic::InFlightDiagnostic(a3, (uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext(v6);
  result = (mlir::Diagnostic *)mlir::MLIRContext::shouldPrintOpOnDiagnostic(Context);
  if ((_DWORD)result)
  {
    v9 = (mlir::Diagnostic *)mlir::Diagnostic::attachNote((uint64_t *)(a3 + 8), a1[3], 1);
    mlir::Diagnostic::operator<<((uint64_t)v9, "see current operation: ");
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v11);
    v10 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::printGenericOpForm((uint64_t)&v11, 1);
    return mlir::Diagnostic::appendOp(v9, (mlir::Operation *)a1, v10);
  }
  return result;
}

uint64_t mlir::anec::Linear::addOpToNetwork(uint64_t *a1, uint64_t a2, mlir::anec::ANECIRWeights *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  mlir::Operation *DefiningOp;
  uint64_t v45;
  char *v46;
  uint64_t OperandRange;
  void *v48;
  int v49;
  int Width;
  uint64_t *KernelScaleAttr;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t SplatFloat;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  int v80;
  int v81;
  uint64_t *KernelZeroPointAttr;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t SplatInt;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  std::string *v110;
  _QWORD *v111;
  unint64_t v112;
  _OWORD *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v117;
  __int128 v118;
  _QWORD v119[2];
  _QWORD v120[2];
  uint64_t v121;
  __int128 v122;
  uint64_t v123;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 72);
  v8 = *(_QWORD *)(v7 + 24);
  v121 = *(_QWORD *)(v7 + 56);
  LODWORD(v7) = *(_DWORD *)(v6 + 36);
  v9 = v6 - 16;
  if ((_DWORD)v7)
    v10 = v9;
  else
    v10 = 0;
  v11 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11)
    goto LABEL_13;
  v12 = *v11;
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v12 + 16);
  if (!(_DWORD)v14)
    goto LABEL_13;
  v15 = *(_QWORD **)(v12 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_13:
    v21 = 0;
  v120[0] = v11;
  v120[1] = v21;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v120);
  v22 = (uint64_t *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v22)
    goto LABEL_23;
  v23 = *v22;
  v24 = mlir::TypeID::get<mlir::ShapedType>();
  v25 = *(unsigned int *)(v23 + 16);
  if (!(_DWORD)v25)
    goto LABEL_23;
  v26 = *(_QWORD **)(v23 + 8);
  v27 = &v26[2 * v25];
  do
  {
    v28 = v25 >> 1;
    v29 = &v26[2 * (v25 >> 1)];
    v31 = *v29;
    v30 = v29 + 2;
    v25 += ~(v25 >> 1);
    if (v31 < v24)
      v26 = v30;
    else
      v25 = v28;
  }
  while (v25);
  if (v26 != v27 && *v26 == v24)
    v32 = v26[1];
  else
LABEL_23:
    v32 = 0;
  v119[0] = v22;
  v119[1] = v32;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
  v33 = (uint64_t *)(*(_QWORD *)(v121 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v33)
    goto LABEL_33;
  v34 = *v33;
  v35 = mlir::TypeID::get<mlir::ShapedType>();
  v36 = *(unsigned int *)(v34 + 16);
  if (!(_DWORD)v36)
    goto LABEL_33;
  v37 = *(_QWORD **)(v34 + 8);
  v38 = &v37[2 * v36];
  do
  {
    v39 = v36 >> 1;
    v40 = &v37[2 * (v36 >> 1)];
    v42 = *v40;
    v41 = v40 + 2;
    v36 += ~(v36 >> 1);
    if (v42 < v35)
      v37 = v41;
    else
      v36 = v39;
  }
  while (v36);
  if (v37 != v38 && *v37 == v35)
    v43 = v37[1];
  else
LABEL_33:
    v43 = 0;
  *(_QWORD *)&v118 = v33;
  *((_QWORD *)&v118 + 1) = v43;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v121);
  v45 = mlir::anec::ANECIRWeights::lookupConstant(a3, DefiningOp);
  v46 = (char *)operator new(0xF8uLL);
  *((_OWORD *)v46 + 4) = 0u;
  *((_OWORD *)v46 + 5) = 0u;
  *((_OWORD *)v46 + 6) = 0u;
  *((_OWORD *)v46 + 7) = 0u;
  *(_OWORD *)v46 = 0u;
  *((_OWORD *)v46 + 1) = 0u;
  *((_OWORD *)v46 + 2) = 0u;
  *((_OWORD *)v46 + 3) = 0u;
  *((_OWORD *)v46 + 8) = 0u;
  *((_OWORD *)v46 + 9) = 0u;
  *((_OWORD *)v46 + 10) = 0u;
  *((_OWORD *)v46 + 11) = 0u;
  *((_OWORD *)v46 + 12) = 0u;
  *((_OWORD *)v46 + 13) = 0u;
  *((_OWORD *)v46 + 14) = 0u;
  *((_QWORD *)v46 + 30) = 0;
  *((_QWORD *)v46 + 9) = -1;
  *((_DWORD *)v46 + 22) = -1;
  *((_QWORD *)v46 + 12) = -1;
  *((_DWORD *)v46 + 26) = -1;
  *((_QWORD *)v46 + 14) = -1;
  *((_QWORD *)v46 + 21) = 0;
  *(_OWORD *)(v46 + 152) = 0u;
  *(_OWORD *)(v46 + 136) = 0u;
  *(_OWORD *)(v46 + 120) = 0u;
  *((_DWORD *)v46 + 44) = 1;
  *((_DWORD *)v46 + 48) = -1;
  *((_QWORD *)v46 + 25) = -1;
  *((_DWORD *)v46 + 52) = -1;
  *((_QWORD *)v46 + 27) = -1;
  *((_QWORD *)v46 + 28) = 0x3F80000000000006;
  *(_QWORD *)v46 = off_1E0E02A78;
  *((_DWORD *)v46 + 60) = 5;
  *((_DWORD *)v46 + 60) = 5;
  *((_DWORD *)v46 + 22) = 0;
  *((_QWORD *)v46 + 12) = v45;
  v122 = v118;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v122);
  v48 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (v48 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v48 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
    {
      v49 = 4;
    }
    else if (v48 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    {
      v49 = 6;
    }
    else
    {
      v49 = 0;
    }
    goto LABEL_48;
  }
  v123 = OperandRange;
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v123);
  if (Width == 16)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v123) == 1)
    {
      v49 = 3;
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (Width != 8)
  {
LABEL_47:
    v49 = 0;
    goto LABEL_48;
  }
  if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v123) == 2)
    v49 = 2;
  else
    v49 = 1;
LABEL_48:
  *((_DWORD *)v46 + 20) = 1;
  *((_DWORD *)v46 + 21) = v49;
  if (!mlir::anec::Linear::getKernelScaleAttr((mlir::Operation **)a1))
    goto LABEL_90;
  KernelScaleAttr = (uint64_t *)mlir::anec::Linear::getKernelScaleAttr((mlir::Operation **)a1);
  v52 = (uint64_t)KernelScaleAttr;
  if (!KernelScaleAttr)
    goto LABEL_58;
  v53 = *KernelScaleAttr;
  v54 = mlir::TypeID::get<mlir::ElementsAttr>();
  v55 = *(unsigned int *)(v53 + 16);
  if (!(_DWORD)v55)
    goto LABEL_58;
  v56 = *(_QWORD **)(v53 + 8);
  v57 = &v56[2 * v55];
  do
  {
    v58 = v55 >> 1;
    v59 = &v56[2 * (v55 >> 1)];
    v61 = *v59;
    v60 = v59 + 2;
    v55 += ~(v55 >> 1);
    if (v61 < v54)
      v56 = v60;
    else
      v55 = v58;
  }
  while (v55);
  if (v56 != v57 && *v56 == v54)
    v62 = v56[1];
  else
LABEL_58:
    v62 = 0;
  SplatFloat = mlir::getSplatFloatValue<float>(v52, v62);
  if ((SplatFloat & 0xFF00000000) != 0)
  {
    *((_DWORD *)v46 + 57) = SplatFloat;
    goto LABEL_90;
  }
  v64 = (uint64_t *)mlir::anec::Linear::getKernelScaleAttr((mlir::Operation **)a1);
  v65 = (uint64_t)v64;
  if (!v64)
    goto LABEL_70;
  v66 = *v64;
  v67 = mlir::TypeID::get<mlir::ElementsAttr>();
  v68 = *(unsigned int *)(v66 + 16);
  if (!(_DWORD)v68)
    goto LABEL_70;
  v69 = *(_QWORD **)(v66 + 8);
  v70 = &v69[2 * v68];
  do
  {
    v71 = v68 >> 1;
    v72 = &v69[2 * (v68 >> 1)];
    v74 = *v72;
    v73 = v72 + 2;
    v68 += ~(v68 >> 1);
    if (v74 < v67)
      v69 = v73;
    else
      v68 = v71;
  }
  while (v68);
  if (v69 != v70 && *v69 == v67)
    v75 = v69[1];
  else
LABEL_70:
    v75 = 0;
  v76 = mlir::anec::ANECIRWeights::addConstant((uint64_t *)a3, v65, v75);
  v117 = mlir::anec::Linear::getKernelScaleAttr((mlir::Operation **)a1);
  *(_QWORD *)&v122 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v117);
  *((_QWORD *)&v122 + 1) = v77;
  v78 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v122);
  v79 = *(void **)(*(_QWORD *)v78 + 136);
  if (v79 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v79 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
    {
      v80 = 4;
    }
    else if (v79 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    {
      v80 = 6;
    }
    else
    {
      v80 = 0;
    }
    goto LABEL_89;
  }
  v123 = v78;
  v81 = mlir::IntegerType::getWidth((mlir::IntegerType *)&v123);
  if (v81 != 16)
  {
    if (v81 == 8)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v123) == 2)
        v80 = 2;
      else
        v80 = 1;
      goto LABEL_89;
    }
    goto LABEL_88;
  }
  if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v123) != 1)
  {
LABEL_88:
    v80 = 0;
    goto LABEL_89;
  }
  v80 = 3;
LABEL_89:
  *((_DWORD *)v46 + 56) = v80;
  v46[184] = 1;
  *((_DWORD *)v46 + 48) = 0;
  *((_QWORD *)v46 + 25) = v76;
LABEL_90:
  if (mlir::anec::Linear::getKernelZeroPointAttr((mlir::Operation **)a1))
  {
    KernelZeroPointAttr = (uint64_t *)mlir::anec::Linear::getKernelZeroPointAttr((mlir::Operation **)a1);
    v83 = (uint64_t)KernelZeroPointAttr;
    if (!KernelZeroPointAttr)
      goto LABEL_100;
    v84 = *KernelZeroPointAttr;
    v85 = mlir::TypeID::get<mlir::ElementsAttr>();
    v86 = *(unsigned int *)(v84 + 16);
    if (!(_DWORD)v86)
      goto LABEL_100;
    v87 = *(_QWORD **)(v84 + 8);
    v88 = &v87[2 * v86];
    do
    {
      v89 = v86 >> 1;
      v90 = &v87[2 * (v86 >> 1)];
      v92 = *v90;
      v91 = v90 + 2;
      v86 += ~(v86 >> 1);
      if (v92 < v85)
        v87 = v91;
      else
        v86 = v89;
    }
    while (v86);
    if (v87 != v88 && *v87 == v85)
      v93 = v87[1];
    else
LABEL_100:
      v93 = 0;
    SplatInt = mlir::getSplatIntValue<int>(v83, v93);
    if ((SplatInt & 0xFF00000000) != 0)
    {
      *((_DWORD *)v46 + 58) = SplatInt;
    }
    else
    {
      v95 = (uint64_t *)mlir::anec::Linear::getKernelZeroPointAttr((mlir::Operation **)a1);
      v96 = (uint64_t)v95;
      if (!v95)
        goto LABEL_112;
      v97 = *v95;
      v98 = mlir::TypeID::get<mlir::ElementsAttr>();
      v99 = *(unsigned int *)(v97 + 16);
      if (!(_DWORD)v99)
        goto LABEL_112;
      v100 = *(_QWORD **)(v97 + 8);
      v101 = &v100[2 * v99];
      do
      {
        v102 = v99 >> 1;
        v103 = &v100[2 * (v99 >> 1)];
        v105 = *v103;
        v104 = v103 + 2;
        v99 += ~(v99 >> 1);
        if (v105 < v98)
          v100 = v104;
        else
          v99 = v102;
      }
      while (v99);
      if (v100 != v101 && *v100 == v98)
        v106 = v100[1];
      else
LABEL_112:
        v106 = 0;
      v107 = mlir::anec::ANECIRWeights::addConstant((uint64_t *)a3, v96, v106);
      v46[185] = 1;
      *((_DWORD *)v46 + 52) = 0;
      *((_QWORD *)v46 + 27) = v107;
    }
  }
  v108 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v108->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v108->__shared_owners_;
  v108->__shared_weak_owners_ = 0;
  v108->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v108[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v110 = (std::string *)&v108[1].__shared_owners_;
  if (v46[31] < 0)
  {
    std::string::__init_copy_ctor_external(v110, *((const std::string::value_type **)v46 + 1), *((_QWORD *)v46 + 2));
  }
  else
  {
    *(_OWORD *)&v110->__r_.__value_.__l.__data_ = *(_OWORD *)(v46 + 8);
    v108[2].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v46 + 3);
  }
  LODWORD(v108[2].__shared_owners_) = 17;
  v108[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v108[2].__shared_weak_owners_ = (uint64_t)v46;
  LOBYTE(v108[3].__vftable) = 0;
  v108[3].__shared_owners_ = 0;
  v108[3].__shared_weak_owners_ = (uint64_t)&v108[4].__shared_owners_;
  v108[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v108[5].__shared_weak_owners_ = (uint64_t)&v108[6].__shared_owners_;
  v108[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v122 = v108 + 1;
  *((_QWORD *)&v122 + 1) = v108;
  v111 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v111 >= *(_QWORD *)(a2 + 240))
  {
    v113 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v122);
    v108 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
    *(_QWORD *)(a2 + 232) = v113;
    if (!v108)
      return 1;
  }
  else
  {
    *v111 = v108 + 1;
    v111[1] = v108;
    do
      v112 = __ldxr(p_shared_owners);
    while (__stxr(v112 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v111 + 2;
  }
  v114 = (unint64_t *)&v108->__shared_owners_;
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
  return 1;
}

uint64_t mlir::anec::Deconvolution::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t ArgAttrsAttr;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v27;
  mlir::CallGraphNode *v28;
  mlir::CallGraphNode *v29;
  mlir::CallGraphNode *v30;
  char v31;
  uint64_t v32;
  mlir::CallGraphNode *Value;
  uint64_t v34;
  mlir::CallGraphNode *v35;
  char v36;
  uint64_t v37;
  mlir::CallGraphNode *v38;
  uint64_t v39;
  mlir::CallGraphNode *v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t Groups;
  unint64_t v58;
  unint64_t IndexFromDim;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t OperandRange;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[4];
  _QWORD v89[2];
  _QWORD v90[2];
  _QWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  _QWORD v95[2];
  const void **v96;
  __int16 v97;
  void *v98[2];
  _BYTE v99[48];
  void *v100[2];
  _BYTE v101[24];
  void *v102[2];
  _BYTE v103[24];
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[23];

  v114[21] = *MEMORY[0x1E0C80C00];
  v104 = a6;
  LOBYTE(v105) = 0;
  v106 = 0;
  v107 = a7;
  v108 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v104);
    if (v106)
      v106 = 0;
    mlir::OperationName::OperationName(&v105, "anec.deconvolution", 18, Context);
    v106 = 1;
  }
  v109 = a4;
  v110 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  v18 = a3;
  if (a3)
    v19 = (uint64_t)a2;
  else
    v19 = v17;
  if (!mlir::anec::DeconvolutionAdaptor::verify(&v104, v19))
    return 0;
  v20 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v95[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v20);
  v95[1] = v21;
  if (!v95[0])
  {
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v111);
      if (v111)
      {
        v24 = "input must be a ShapedType";
        goto LABEL_17;
      }
LABEL_18:
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v111);
      if (v111)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v111);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v112);
      return v25;
    }
    return 0;
  }
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
  if (v23 >= 6)
  {
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v111);
      if (v111)
      {
        v24 = "input tensor rank of 4 or 5 are supported";
LABEL_17:
        mlir::Diagnostic::operator<<((uint64_t)&v112, v24);
        goto LABEL_18;
      }
      goto LABEL_18;
    }
    return 0;
  }
  v27 = (uint64_t *)ArgAttrsAttr;
  v102[0] = v103;
  v102[1] = (void *)0x300000000;
  v28 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v104) + 32);
  v29 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v104);
  v30 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v28, v29, *(_QWORD *)(*(_QWORD *)(v105 + 96) + 56));
  if ((v31 & 1) != 0)
    v32 = *((_QWORD *)v30 + 1);
  else
    v32 = 0;
  mlir::getValues<unsigned long long>(v32, (uint64_t)v102);
  v100[0] = v101;
  v100[1] = (void *)0x300000000;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v104);
  v34 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v104);
  v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v34 - 32), *(_QWORD *)(*(_QWORD *)(v105 + 96) + 8));
  if ((v36 & 1) != 0)
    v37 = *((_QWORD *)v35 + 1);
  else
    v37 = 0;
  mlir::getValues<unsigned long long>(v37, (uint64_t)v100);
  v98[0] = v99;
  v98[1] = (void *)0x600000000;
  v38 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v104) + 16);
  v39 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v104);
  v40 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v38, (mlir::CallGraphNode *)(v39 - 16), *(_QWORD *)(*(_QWORD *)(v105 + 96) + 40));
  if ((v41 & 1) != 0)
    v42 = *((_QWORD *)v40 + 1);
  else
    v42 = 0;
  mlir::getValues<unsigned long long>(v42, (uint64_t)v98);
  v43 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 1);
  v44 = v43;
  if (!v43)
    goto LABEL_41;
  v45 = *v43;
  v46 = mlir::TypeID::get<mlir::ShapedType>();
  v47 = *(unsigned int *)(v45 + 16);
  if (!(_DWORD)v47)
    goto LABEL_41;
  v48 = *(_QWORD **)(v45 + 8);
  v49 = &v48[2 * v47];
  do
  {
    v50 = v47 >> 1;
    v51 = &v48[2 * (v47 >> 1)];
    v53 = *v51;
    v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46)
      v48 = v52;
    else
      v47 = v50;
  }
  while (v47);
  if (v48 != v49 && *v48 == v46)
    v54 = v48[1];
  else
LABEL_41:
    v54 = 0;
  v94[0] = v44;
  v94[1] = v54;
  v55 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v94);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v94);
  if (v56 >= 6)
  {
    if (v18)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v111);
      if (v111)
        mlir::Diagnostic::operator<<((uint64_t)&v112, "filter must be a tensor of rank 4 or 5");
LABEL_51:
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v111);
      if (v111)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v111);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v112);
      goto LABEL_71;
    }
    goto LABEL_54;
  }
  Groups = (uint64_t)mlir::anec::detail::ConvolutionGenericAdaptorBase::getGroups((mlir::anec::detail::ConvolutionGenericAdaptorBase *)&v104);
  v93 = Groups;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v58);
  if (v60)
  {
    v92 = v27[IndexFromDim];
    if (v92 % Groups)
    {
      v88[0] = (uint64_t)"input channels {0} should be divisible by groups {1}";
      v88[1] = 52;
      v88[2] = (uint64_t)v91;
      v88[3] = 2;
      v89[0] = &off_1E0E23E00;
      v89[1] = &v92;
      v90[0] = &off_1E0E23E00;
      v90[1] = &v93;
      v91[0] = v89;
      v91[1] = v90;
      if (v18)
      {
        mlir::emitError((uint64_t)a2, (uint64_t)&v111);
        if (v111)
        {
          v97 = 263;
          v96 = (const void **)v88;
          mlir::Diagnostic::operator<<((uint64_t)&v112, &v96);
        }
        goto LABEL_51;
      }
LABEL_54:
      v25 = 0;
LABEL_71:
      if (v98[0] != v99)
        free(v98[0]);
      if (v100[0] != v101)
        free(v100[0]);
      if (v102[0] != v103)
        free(v102[0]);
      return v25;
    }
    v61 = v55[1];
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
    v63 = mlir::anec::getIndexFromDim(3, v62);
    if (v64)
    {
      v65 = v63;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
      v67 = mlir::anec::getIndexFromDim(4, v66);
      if (v68)
      {
        v69 = v67;
        v87 = v61 * Groups;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v94);
        v71 = v70;
        v72 = *((_QWORD *)v98[0] + 2) + *((_QWORD *)v102[0] + 1) * v27[v65] + *((_QWORD *)v98[0] + 3) - v55[2] + 1;
        v73 = *((_QWORD *)v98[0] + 4) + *((_QWORD *)v102[0] + 2) * v27[v69] + *((_QWORD *)v98[0] + 5) - v55[3] + 1;
        v74 = *v27;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
        v76 = mlir::anec::getIndexFromDim(2, v75);
        if (v77)
        {
          v78 = 4;
          if (v71 == 4)
            v78 = 0x1FFFFFFFFFFFFFFFLL;
          v79 = *(_QWORD *)v98[0] + *(_QWORD *)v102[0] * v27[v76] + *((_QWORD *)v98[0] + 1) - v55[v78] + 1;
        }
        else
        {
          v79 = 0;
        }
        v111 = &v113;
        v113 = v74;
        v114[0] = v87;
        v114[1] = v72;
        v114[2] = v73;
        v112 = 0x600000004;
        if (v79)
        {
          v88[0] = v79;
          llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v111, (uint64_t)v114, v88);
          v80 = (uint64_t *)v111;
          v81 = v112;
        }
        else
        {
          v81 = 4;
          v80 = &v113;
        }
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v95);
        v83 = mlir::MemRefType::get(v80, (mlir::AffineMap *)v81, OperandRange, 0, 0, 0);
        v84 = *(unsigned int *)(a11 + 8);
        if (v84 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v84 + 1, 8);
          LODWORD(v84) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v84) = v83;
        ++*(_DWORD *)(a11 + 8);
        if (v111 != &v113)
          free(v111);
        v25 = 1;
        goto LABEL_71;
      }
    }
  }
  v85 = (uint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::anec::DeconvolutionAdaptor::verify(v85, v86);
}

uint64_t mlir::anec::DeconvolutionAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *Value;
  uint64_t v5;
  const char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *Type;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t **ArgAttrsAttr;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  __int16 v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t OperandRange;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  _QWORD v89[24];

  v89[23] = *MEMORY[0x1E0C80C00];
  v83 = *a1;
  Value = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83);
  v82 = 0;
  if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
  {
LABEL_7:
    v6 = "'anec.deconvolution' op requires attribute 'dilation'";
LABEL_70:
    v79 = (uint64_t *)v6;
    v81 = 259;
    mlir::emitError(a2, (uint64_t)&v79, (uint64_t)&v88);
    v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v88);
    if (v88)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v88);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v89);
    return v48;
  }
  v5 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      v5 = Value[1];
    Value += 2;
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
      goto LABEL_7;
  }
  v82 = (uint64_t *)Value[1];
  v77 = 0;
  v78 = 0;
  v76 = 0;
  if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
  {
LABEL_18:
    v6 = "'anec.deconvolution' op requires attribute 'padding'";
    goto LABEL_70;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 40) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      v9 = (uint64_t *)Value[1];
    }
    else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      v8 = (uint64_t *)Value[1];
      v77 = v8;
    }
    else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 32) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      v7 = (uint64_t *)Value[1];
      v76 = v7;
    }
    Value += 2;
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
      goto LABEL_18;
  }
  v78 = (uint64_t *)Value[1];
  if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
  {
LABEL_25:
    v6 = "'anec.deconvolution' op requires attribute 'stride'";
    goto LABEL_70;
  }
  v10 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 56) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 48) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      v10 = Value[1];
    Value += 2;
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v83))
      goto LABEL_25;
  }
  v11 = (uint64_t *)Value[1];
  if (v11)
  {
    if (!mlir::DenseIntElementsAttr::classof(Value[1]))
      goto LABEL_68;
    v12 = *v11;
    v13 = mlir::TypeID::get<mlir::ElementsAttr>();
    v14 = *(unsigned int *)(v12 + 16);
    if (!(_DWORD)v14)
      goto LABEL_36;
    v15 = *(_QWORD **)(v12 + 8);
    v16 = &v15[2 * v14];
    do
    {
      v17 = v14 >> 1;
      v18 = &v15[2 * (v14 >> 1)];
      v20 = *v18;
      v19 = v18 + 2;
      v14 += ~(v14 >> 1);
      if (v20 < v13)
        v15 = v19;
      else
        v14 = v17;
    }
    while (v14);
    if (v15 != v16 && *v15 == v13)
      v21 = v15[1];
    else
LABEL_36:
      v21 = 0;
    v79 = v11;
    v80 = v21;
    Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
    v23 = Type;
    if (!Type)
      goto LABEL_46;
    v24 = *Type;
    v25 = mlir::TypeID::get<mlir::ShapedType>();
    v26 = *(unsigned int *)(v24 + 16);
    if (!(_DWORD)v26)
      goto LABEL_46;
    v27 = *(_QWORD **)(v24 + 8);
    v28 = &v27[2 * v26];
    do
    {
      v29 = v26 >> 1;
      v30 = &v27[2 * (v26 >> 1)];
      v32 = *v30;
      v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25)
        v27 = v31;
      else
        v26 = v29;
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
      v33 = v27[1];
    else
LABEL_46:
      v33 = 0;
    v88 = v23;
    v89[0] = v33;
    ArgAttrsAttr = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
    v86 = 3;
    if (v35 != 1
      || *ArgAttrsAttr != (uint64_t *)v86
      || (v67 = (uint64_t)v11,
          v74 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v67),
          v75 = v36,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v74),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
LABEL_68:
      v6 = "'anec.deconvolution' op attribute 'stride' failed to satisfy constraint: ui64 elements attribute of shape {3}";
      goto LABEL_70;
    }
  }
  if (v82)
  {
    if (!mlir::DenseIntElementsAttr::classof((uint64_t)v82))
      goto LABEL_69;
    v79 = mlir::Attribute::cast<mlir::ElementsAttr>(&v82);
    v80 = v37;
    v86 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
    v88 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v86);
    v89[0] = v38;
    v39 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
    OperandRange = 3;
    if (v40 != 1
      || *v39 != OperandRange
      || (v73 = v82,
          v74 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73),
          v75 = v41,
          v67 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v74),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&v67, 64)))
    {
LABEL_69:
      v6 = "'anec.deconvolution' op attribute 'dilation' failed to satisfy constraint: ui64 elements attribute of shape {3}";
      goto LABEL_70;
    }
  }
  if (!v78)
    goto LABEL_61;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)v78))
    goto LABEL_74;
  v79 = mlir::Attribute::cast<mlir::ElementsAttr>(&v78);
  v80 = v42;
  v86 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
  v88 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v86);
  v89[0] = v43;
  v44 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
  OperandRange = 6;
  if (v45 != 1)
    goto LABEL_74;
  if (*v44 == OperandRange
    && (v73 = v78,
        v74 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73),
        v75 = v46,
        v67 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v74),
        mlir::Type::isUnsignedInteger((mlir::Type *)&v67, 64)))
  {
LABEL_61:
    if (v10 && (mlir::anec::PaddingModeAttr::classof(v10) & 1) == 0)
    {
      v47 = "'anec.deconvolution' op attribute 'padding_mode' failed to satisfy constraint: valid PaddingMode";
    }
    else if (!v9
           || *(_UNKNOWN **)(*v9 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
           && (v79 = v9,
               v88 = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79),
               mlir::Type::isUnsignedInteger((mlir::Type *)&v88, 64)))
    {
      if (!v5 || *(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      {
        if (!v8)
          goto LABEL_97;
        if (!mlir::DenseFPElementsAttr::classof((uint64_t)v8))
          goto LABEL_93;
        v79 = mlir::Attribute::cast<mlir::ElementsAttr>(&v77);
        v80 = v50;
        v73 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
        v88 = mlir::Type::cast<mlir::ShapedType>(&v73);
        v89[0] = v51;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
        if (v52)
        {
          v86 = (uint64_t)mlir::Attribute::cast<mlir::ElementsAttr>(&v77);
          v87 = v53;
          v72 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v86);
          v74 = mlir::Type::cast<mlir::ShapedType>(&v72);
          v75 = v54;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
          if (v55 != 1)
            goto LABEL_93;
        }
        v70 = v77;
        OperandRange = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
        v85 = v56;
        v71 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange);
        if (mlir::Type::isF16((mlir::Type *)&v71)
          || (v66 = v77,
              v67 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66),
              v68 = v57,
              v69 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v67),
              mlir::Type::isF32((mlir::Type *)&v69)))
        {
LABEL_97:
          if (!v7)
            return 1;
          if (mlir::DenseIntElementsAttr::classof((uint64_t)v7))
          {
            v79 = mlir::Attribute::cast<mlir::ElementsAttr>(&v76);
            v80 = v58;
            v73 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
            v88 = mlir::Type::cast<mlir::ShapedType>(&v73);
            v89[0] = v59;
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
            if (!v60
              || (v86 = (uint64_t)mlir::Attribute::cast<mlir::ElementsAttr>(&v76),
                  v87 = v61,
                  v72 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v86),
                  v74 = mlir::Type::cast<mlir::ShapedType>(&v72),
                  v75 = v62,
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74),
                  v63 == 1))
            {
              v70 = v76;
              OperandRange = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
              v85 = v64;
              v71 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange);
              if (mlir::Type::isSignedInteger((mlir::Type *)&v71, 8))
                return 1;
              v66 = v76;
              v67 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66);
              v68 = v65;
              v69 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v67);
              if (mlir::Type::isUnsignedInteger((mlir::Type *)&v69, 8))
                return 1;
            }
          }
          v47 = "'anec.deconvolution' op attribute 'kernel_zero_point' failed to satisfy constraint: si8 or ui8 elements "
                "attribute of rank 0/1";
        }
        else
        {
LABEL_93:
          v47 = "'anec.deconvolution' op attribute 'kernel_scale' failed to satisfy constraint: f16 or f32 elements attri"
                "bute of rank 0/1";
        }
      }
      else
      {
        v47 = "'anec.deconvolution' op attribute 'channel_wise' failed to satisfy constraint: unit attribute";
      }
    }
    else
    {
      v47 = "'anec.deconvolution' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned integer attribute";
    }
  }
  else
  {
LABEL_74:
    v47 = "'anec.deconvolution' op attribute 'padding' failed to satisfy constraint: ui64 elements attribute of shape {6}";
  }
  v79 = (uint64_t *)v47;
  v81 = 259;
  mlir::emitError(a2, (uint64_t)&v79, (uint64_t)&v88);
  v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v88);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v88);
  return v48;
}

uint64_t mlir::anec::Deconvolution::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t IndexFromDim;
  char v32;
  unint64_t v33;
  uint64_t StrideAttr;
  uint64_t KsizeAttr;
  uint64_t PaddingAttr;
  uint64_t ArgAttrsAttr;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t IncPadAttr;
  const __CFString *v53;
  const __CFString *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  uint64_t *KernelScaleAttr;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t SplatFloat;
  _QWORD *v73;
  uint64_t ElementTypeOrSelf;
  uint64_t *KernelZeroPointAttr;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t SplatInt;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD v93[6];
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  const __CFString *ANECNetFormat;
  char v109;
  int v110;
  const void **v111[4];
  __int16 v112;
  _QWORD v113[2];
  _QWORD v114[2];
  void *v115;
  uint64_t v116;
  _BYTE v117[16];
  void *v118;
  uint64_t v119;
  _BYTE v120[16];
  void *v121;
  uint64_t v122;
  _WORD v123[12];
  void *__p;
  _DWORD v125[46];
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  ANECConvLayerDescInitialize();
  v6 = *(uint64_t **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v114[0] = v6;
  v114[1] = v16;
  v17 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (!v17)
    goto LABEL_20;
  v18 = *v17;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *(unsigned int *)(v18 + 16);
  if (!(_DWORD)v20)
    goto LABEL_20;
  v21 = *(_QWORD **)(v18 + 8);
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_20:
    v27 = 0;
  v113[0] = v17;
  v113[1] = v27;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v114);
  v29 = v28;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v114);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v30);
  if (v32)
  {
    v33 = IndexFromDim;
    v118 = v120;
    v119 = 0x300000000;
    v115 = v117;
    v116 = 0x300000000;
    v121 = v123;
    v122 = 0x600000000;
    StrideAttr = mlir::anec::Convolution::getStrideAttr(a1);
    mlir::getValues<int>(StrideAttr, (uint64_t)&v118);
    KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(a1);
    mlir::getValues<int>(KsizeAttr, (uint64_t)&v115);
    PaddingAttr = mlir::anec::Convolution::getPaddingAttr(a1);
    mlir::getValues<int>(PaddingAttr, (uint64_t)&v121);
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v114);
    v38 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v113);
    v39 = v38;
    v40 = *(void **)(ArgAttrsAttr + 8 * v33);
    if (v29 == 5)
    {
      if (v119 <= 2)
      {
        v41 = "failed: found 2 strides, but the convolution op is 3d";
LABEL_43:
        v111[0] = (const void **)v41;
        v112 = 259;
        mlir::OpState::emitOpError((uint64_t **)a1, v111, (uint64_t)&__p);
        mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v125);
LABEL_84:
        if (v121 != v123)
          free(v121);
        if (v115 != v117)
          free(v115);
        if (v118 != v120)
          free(v118);
        return mlir::anec::verifyConvolutionWithANEC((uint64_t)v93, (uint64_t *)*a1, a2, a3);
      }
      if (v116 <= 2)
      {
        v41 = "failed: found 2 dilations, but the convolution op is 3d";
        goto LABEL_43;
      }
      if (v122 <= 5)
      {
        v41 = "failed: found 4 paddings, but the convolution op is 3d";
        goto LABEL_43;
      }
      v92 = a3;
      v42 = (uint64_t *)(v38 + 32);
      v43 = (uint64_t *)(v38 + 24);
      v44 = *(_QWORD *)(v38 + 16);
    }
    else
    {
      v92 = a3;
      v42 = (uint64_t *)(v38 + 24);
      v43 = (uint64_t *)(v38 + 16);
      v44 = 1;
    }
    v45 = *v42;
    v91 = *v43;
    v90 = *((_DWORD *)v118 + 2);
    v46 = *(int32x2_t *)v118;
    v47 = *((int *)v115 + 1);
    v48 = *((int *)v115 + 2);
    v49 = *(int *)v115;
    v50 = *((_QWORD *)v121 + 1);
    v89 = *((_QWORD *)v121 + 2);
    v51 = *(_QWORD *)v121;
    IncPadAttr = mlir::anec::AveragePool::getIncPadAttr(a1);
    v53 = CFSTR("ChannelWiseDeConv");
    if (!IncPadAttr)
      v53 = CFSTR("DeConv");
    v93[0] = v53;
    v93[1] = CFSTR("Dense");
    __p = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v113);
    if (mlir::Type::isF16((mlir::Type *)&__p))
    {
      v54 = CFSTR("Float16");
    }
    else if (mlir::Type::isF32((mlir::Type *)&__p))
    {
      v54 = CFSTR("Float32");
    }
    else if (mlir::Type::isUnsignedInteger((mlir::Type *)&__p, 8))
    {
      v54 = CFSTR("UInt8");
    }
    else
    {
      mlir::Type::isInteger((mlir::Type *)&__p, 8);
      v54 = CFSTR("Int8");
    }
    v93[2] = v54;
    __p = (void *)mlir::anec::Convolution::getPaddingModeAttr(a1);
    v93[3] = *(&off_1E0E53988 + mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&__p));
    v55 = mlir::anec::AveragePool::getIncPadAttr(a1);
    v56 = (uint64_t)v40;
    if (!v55)
    {
      v57 = *(_QWORD *)(v39 + 8);
      v111[0] = (const void **)mlir::anec::Convolution::getGroupsAttr(a1);
      mlir::IntegerAttr::getValue(v111, (llvm::APInt *)&__p);
      if (v125[0] > 0x40u)
      {
        v58 = *(void **)__p;
        operator delete[](__p);
      }
      else
      {
        v58 = __p;
      }
      v56 = (_QWORD)v58 * v57;
    }
    v93[4] = v56;
    if (!mlir::anec::AveragePool::getIncPadAttr(a1))
    {
      v111[0] = (const void **)mlir::anec::Convolution::getGroupsAttr(a1);
      mlir::IntegerAttr::getValue(v111, (llvm::APInt *)&__p);
      if (v125[0] > 0x40u)
      {
        v40 = *(void **)__p;
        operator delete[](__p);
      }
      else
      {
        v40 = __p;
      }
    }
    v93[5] = v40;
    v94 = 0;
    v95 = v45;
    v96 = v91;
    v97 = v44;
    v98 = v90;
    *(int32x2_t *)&v59 = vrev64_s32(v46);
    *((_QWORD *)&v59 + 1) = v89;
    v99 = v59;
    v100 = v50;
    v101 = v51;
    v102 = 0;
    v103 = v48;
    v104 = v47;
    v105 = v49;
    a3 = v92;
    if (mlir::anec::Convolution::getKernelScaleAttr(a1))
    {
      KernelScaleAttr = (uint64_t *)mlir::anec::Convolution::getKernelScaleAttr(a1);
      v61 = (uint64_t)KernelScaleAttr;
      if (!KernelScaleAttr)
        goto LABEL_66;
      v62 = *KernelScaleAttr;
      v63 = mlir::TypeID::get<mlir::ElementsAttr>();
      v64 = *(unsigned int *)(v62 + 16);
      if (!(_DWORD)v64)
        goto LABEL_66;
      v65 = *(_QWORD **)(v62 + 8);
      v66 = &v65[2 * v64];
      do
      {
        v67 = v64 >> 1;
        v68 = &v65[2 * (v64 >> 1)];
        v70 = *v68;
        v69 = v68 + 2;
        v64 += ~(v64 >> 1);
        if (v70 < v63)
          v65 = v69;
        else
          v64 = v67;
      }
      while (v64);
      if (v65 != v66 && *v65 == v63)
        v71 = v65[1];
      else
LABEL_66:
        v71 = 0;
      SplatFloat = mlir::getSplatFloatValue<float>(v61, v71);
      if ((SplatFloat & 0xFF00000000) != 0)
      {
        v107 = SplatFloat;
      }
      else
      {
        v106 = 1;
        v73 = (_QWORD *)mlir::anec::Convolution::getKernelScaleAttr(a1);
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v73);
      }
    }
    if (mlir::anec::Convolution::getKernelZeroPointAttr(a1))
    {
      KernelZeroPointAttr = (uint64_t *)mlir::anec::Convolution::getKernelZeroPointAttr(a1);
      v76 = (uint64_t)KernelZeroPointAttr;
      if (!KernelZeroPointAttr)
        goto LABEL_80;
      v77 = *KernelZeroPointAttr;
      v78 = mlir::TypeID::get<mlir::ElementsAttr>();
      v79 = *(unsigned int *)(v77 + 16);
      if (!(_DWORD)v79)
        goto LABEL_80;
      v80 = *(_QWORD **)(v77 + 8);
      v81 = &v80[2 * v79];
      do
      {
        v82 = v79 >> 1;
        v83 = &v80[2 * (v79 >> 1)];
        v85 = *v83;
        v84 = v83 + 2;
        v79 += ~(v79 >> 1);
        if (v85 < v78)
          v80 = v84;
        else
          v79 = v82;
      }
      while (v79);
      if (v80 != v81 && *v80 == v78)
        v86 = v80[1];
      else
LABEL_80:
        v86 = 0;
      SplatInt = mlir::getSplatIntValue<int>(v76, v86);
      if ((SplatInt & 0xFF00000000) != 0)
        v110 = SplatInt;
      else
        v109 = 1;
    }
    goto LABEL_84;
  }
  v121 = "Failed to get channel index for Conv";
  v123[8] = 259;
  mlir::OpState::emitOpError((uint64_t **)a1, (const void ***)&v121, (uint64_t)&__p);
  mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v125);
  return mlir::anec::verifyConvolutionWithANEC((uint64_t)v93, (uint64_t *)*a1, a2, a3);
}

uint64_t mlir::anec::Deconvolution::addOpToNetwork(mlir::Operation **a1, uint64_t a2, mlir::anec::ANECIRWeights *a3)
{
  mlir::Operation *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t NextResultAtOffset;
  uint64_t IncPadAttr;
  uint64_t StrideAttr;
  uint64_t KsizeAttr;
  uint64_t PaddingAttr;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t ArgAttrsAttr;
  uint64_t v47;
  uint64_t v48;
  uint64_t DefiningOp;
  uint64_t v50;
  uint64_t v51;
  mlir::Operation *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  int64x2_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BOOL4 v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  uint64_t OperandRange;
  void *v68;
  int v69;
  BOOL v70;
  int Width;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  int32x4_t *v75;
  int32x4_t v76;
  _QWORD *v77;
  int64x2_t *v78;
  uint64_t *KernelScaleAttr;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t *v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t SplatFloat;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  int v108;
  int v109;
  uint64_t *KernelZeroPointAttr;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t *v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t SplatInt;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t *v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *p_shared_owners;
  std::string *v138;
  _QWORD *v139;
  unint64_t v140;
  _OWORD *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v145;
  uint64_t v147;
  __int128 v148;
  _QWORD v149[2];
  _QWORD v150[2];
  uint64_t v151;
  mlir::Operation *v152;
  uint64_t v153;
  void *v154[2];
  uint64_t v155;
  _BYTE v156[16];
  BOOL v157;
  void *__p;
  uint64_t v159;
  _BYTE v160[32];
  int32x4_t *v161;
  uint64_t v162;
  _BYTE v163[16];
  void *v164[2];
  _QWORD v165[4];

  v165[2] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 9);
  v6 = *(_QWORD *)(v5 + 24);
  v151 = *(_QWORD *)(v5 + 56);
  v152 = v4;
  if (*((_DWORD *)v4 + 9))
    v7 = (uint64_t)v4 - 16;
  else
    v7 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  v154[0] = (void *)mlir::anec::Convolution::getGroupsAttr(&v152);
  mlir::IntegerAttr::getValue(v154, (llvm::APInt *)&__p);
  if (v159 > 0x40)
  {
    v145 = *(void **)__p;
    operator delete[](__p);
  }
  else
  {
    v145 = __p;
  }
  IncPadAttr = mlir::anec::AveragePool::getIncPadAttr(&v152);
  v164[0] = v165;
  v164[1] = (void *)0x200000000;
  StrideAttr = mlir::anec::Convolution::getStrideAttr(&v152);
  mlir::getValues<unsigned long long>(StrideAttr, (uint64_t)v164);
  v161 = (int32x4_t *)v163;
  v162 = 0x200000000;
  KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(&v152);
  mlir::getValues<unsigned long long>(KsizeAttr, (uint64_t)&v161);
  __p = v160;
  v159 = 0x400000000;
  PaddingAttr = mlir::anec::Convolution::getPaddingAttr(&v152);
  mlir::getValues<unsigned long long>(PaddingAttr, (uint64_t)&__p);
  v13 = (uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13)
    goto LABEL_16;
  v14 = *v13;
  v15 = mlir::TypeID::get<mlir::ShapedType>();
  v16 = *(unsigned int *)(v14 + 16);
  if (!(_DWORD)v16)
    goto LABEL_16;
  v17 = *(_QWORD **)(v14 + 8);
  v18 = &v17[2 * v16];
  do
  {
    v19 = v16 >> 1;
    v20 = &v17[2 * (v16 >> 1)];
    v22 = *v20;
    v21 = v20 + 2;
    v16 += ~(v16 >> 1);
    if (v22 < v15)
      v17 = v21;
    else
      v16 = v19;
  }
  while (v16);
  if (v17 != v18 && *v17 == v15)
    v23 = v17[1];
  else
LABEL_16:
    v23 = 0;
  v150[0] = v13;
  v150[1] = v23;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v150);
  v24 = (uint64_t *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v24)
    goto LABEL_26;
  v25 = *v24;
  v26 = mlir::TypeID::get<mlir::ShapedType>();
  v27 = *(unsigned int *)(v25 + 16);
  if (!(_DWORD)v27)
    goto LABEL_26;
  v28 = *(_QWORD **)(v25 + 8);
  v29 = &v28[2 * v27];
  do
  {
    v30 = v27 >> 1;
    v31 = &v28[2 * (v27 >> 1)];
    v33 = *v31;
    v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26)
      v28 = v32;
    else
      v27 = v30;
  }
  while (v27);
  if (v28 != v29 && *v28 == v26)
    v34 = v28[1];
  else
LABEL_26:
    v34 = 0;
  v149[0] = v24;
  v149[1] = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v149);
  v35 = (uint64_t *)(*(_QWORD *)(v151 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v35)
    goto LABEL_36;
  v36 = *v35;
  v37 = mlir::TypeID::get<mlir::ShapedType>();
  v38 = *(unsigned int *)(v36 + 16);
  if (!(_DWORD)v38)
    goto LABEL_36;
  v39 = *(_QWORD **)(v36 + 8);
  v40 = &v39[2 * v38];
  do
  {
    v41 = v38 >> 1;
    v42 = &v39[2 * (v38 >> 1)];
    v44 = *v42;
    v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37)
      v39 = v43;
    else
      v38 = v41;
  }
  while (v38);
  if (v39 != v40 && *v39 == v37)
    v45 = v39[1];
  else
LABEL_36:
    v45 = 0;
  *(_QWORD *)&v148 = v35;
  *((_QWORD *)&v148 + 1) = v45;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v148);
  v48 = v47;
  v153 = v151;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v153);
  if (DefiningOp)
  {
    v50 = DefiningOp;
    v51 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v50 + 48) + 32))(*(_QWORD *)(v50 + 48), v51))
    {
      v154[0] = &v155;
      v154[1] = (void *)0x100000000;
      mlir::Operation::fold(v50, 0, 0, (uint64_t)v154);
      llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v154[0] & 0xFFFFFFFFFFFFFFF8));
      if (v154[0] != &v155)
        free(v154[0]);
    }
  }
  v52 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v151);
  v53 = (uint64_t *)a3;
  v54 = mlir::anec::ANECIRWeights::lookupConstant(a3, v52);
  v55 = (char *)operator new(0x150uLL);
  *(_OWORD *)v55 = 0u;
  *((_OWORD *)v55 + 1) = 0u;
  *((_OWORD *)v55 + 2) = 0u;
  *((_OWORD *)v55 + 3) = 0u;
  *((_OWORD *)v55 + 4) = 0u;
  *((_OWORD *)v55 + 5) = 0u;
  *((_OWORD *)v55 + 6) = 0u;
  *((_OWORD *)v55 + 7) = 0u;
  *((_OWORD *)v55 + 8) = 0u;
  *((_OWORD *)v55 + 9) = 0u;
  *((_OWORD *)v55 + 10) = 0u;
  *((_OWORD *)v55 + 11) = 0u;
  *((_OWORD *)v55 + 12) = 0u;
  *((_OWORD *)v55 + 13) = 0u;
  *((_OWORD *)v55 + 14) = 0u;
  *((_OWORD *)v55 + 15) = 0u;
  *((_OWORD *)v55 + 16) = 0u;
  *((_OWORD *)v55 + 17) = 0u;
  *((_OWORD *)v55 + 18) = 0u;
  *((_OWORD *)v55 + 19) = 0u;
  *((_OWORD *)v55 + 20) = 0u;
  *((_QWORD *)v55 + 9) = -1;
  *((_DWORD *)v55 + 22) = -1;
  *((_QWORD *)v55 + 12) = -1;
  *((_DWORD *)v55 + 26) = -1;
  *((_QWORD *)v55 + 14) = -1;
  *(_OWORD *)(v55 + 120) = 0u;
  *(_OWORD *)(v55 + 136) = 0u;
  *(_OWORD *)(v55 + 152) = 0u;
  *((_QWORD *)v55 + 21) = 0;
  *((_DWORD *)v55 + 44) = 1;
  *((_DWORD *)v55 + 48) = -1;
  *((_QWORD *)v55 + 25) = -1;
  *((_DWORD *)v55 + 52) = -1;
  *((_QWORD *)v55 + 27) = -1;
  *((_QWORD *)v55 + 28) = 0x3F80000000000006;
  *(_QWORD *)v55 = off_1E0E134A0;
  v56 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v55 + 248) = v56;
  *(_QWORD *)&v57 = 0x100000001;
  *((_QWORD *)&v57 + 1) = 0x100000001;
  *(int64x2_t *)(v55 + 264) = v56;
  *(_OWORD *)(v55 + 280) = v57;
  *((_QWORD *)v55 + 37) = 0x100000001;
  *((_QWORD *)v55 + 38) = 0;
  *((_QWORD *)v55 + 39) = 0;
  *((_QWORD *)v55 + 40) = 0;
  *((_DWORD *)v55 + 82) = 1;
  v154[0] = v4;
  v154[1] = v156;
  v155 = 0x200000000;
  v58 = v162;
  if (!(_DWORD)v162)
  {
    v61 = 0;
    v157 = IncPadAttr != 0;
    v62 = v156;
    goto LABEL_55;
  }
  if (v162 < 3)
  {
    v59 = v162;
    v60 = v156;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154[1], v156, v162, 8);
    v59 = v162;
    if (!(_DWORD)v162)
      goto LABEL_48;
    v60 = v154[1];
  }
  memcpy(v60, v161, 8 * v59);
LABEL_48:
  v63 = 0;
  LODWORD(v155) = v58;
  v62 = v154[1];
  v157 = IncPadAttr != 0;
  do
  {
    v64 = *(_QWORD *)((char *)v154[1] + v63);
    v65 = v64 == 1;
    v61 = v64 != 1;
    v65 = !v65 || 8 * v58 - 8 == v63;
    v63 += 8;
  }
  while (!v65);
  v4 = (mlir::Operation *)v154[0];
LABEL_55:
  if (*(_UNKNOWN **)(*((_QWORD *)v4 + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id)
  {
    v66 = 3;
    if (v62 == v156)
      goto LABEL_58;
    goto LABEL_57;
  }
  if (IncPadAttr)
    v70 = v61;
  else
    v70 = 0;
  if (v70)
  {
    v66 = 6;
    if (v62 == v156)
      goto LABEL_58;
LABEL_57:
    free(v62);
    goto LABEL_58;
  }
  if (v61)
    v72 = 5;
  else
    v72 = 1;
  if (IncPadAttr)
    v66 = 2;
  else
    v66 = v72;
  if (v62 != v156)
    goto LABEL_57;
LABEL_58:
  *((_DWORD *)v55 + 60) = v66;
  v55[244] = 0;
  *((_DWORD *)v55 + 20) = 1;
  *(_OWORD *)v154 = v148;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v154);
  v68 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (v68 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v68 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
    {
      v69 = 4;
    }
    else if (v68 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
    {
      v69 = 6;
    }
    else
    {
      v69 = 0;
    }
    goto LABEL_86;
  }
  v153 = OperandRange;
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v153);
  if (Width == 16)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v153) == 1)
    {
      v69 = 3;
      goto LABEL_86;
    }
  }
  else if (Width == 8)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v153) == 2)
      v69 = 2;
    else
      v69 = 1;
    goto LABEL_86;
  }
  v69 = 0;
LABEL_86:
  *((_QWORD *)v55 + 31) = v145;
  *((_DWORD *)v55 + 21) = v69;
  *((_DWORD *)v55 + 22) = 0;
  *((_QWORD *)v55 + 12) = v54;
  *((int8x16_t *)v55 + 16) = vextq_s8(*(int8x16_t *)(ArgAttrsAttr + 8 * v48 - 16), *(int8x16_t *)(ArgAttrsAttr + 8 * v48 - 16), 8uLL);
  if (v48 == 5)
    v73 = *(_QWORD *)(ArgAttrsAttr + 16);
  else
    v73 = 1;
  v74 = v53;
  *((_QWORD *)v55 + 34) = v73;
  v75 = v161;
  *((_DWORD *)v55 + 70) = v161[1].i64[0];
  v76 = *v75;
  v77 = v164[0];
  *(int32x4_t *)(v55 + 284) = vrev64q_s32(vuzp1q_s32(v76, *(int32x4_t *)((char *)v164[0] + 8)));
  *((_DWORD *)v55 + 75) = *v77;
  v78 = (int64x2_t *)__p;
  *((int32x4_t *)v55 + 19) = vuzp1q_s32(*((int32x4_t *)__p + 2), *((int32x4_t *)__p + 1));
  *((int32x2_t *)v55 + 40) = vmovn_s64(*v78);
  v154[0] = (void *)mlir::anec::Convolution::getPaddingModeAttr(&v152);
  *((_DWORD *)v55 + 82) = dword_181233000[mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v154)];
  v55[180] = 0;
  if (mlir::anec::Convolution::getKernelScaleAttr(&v152))
  {
    KernelScaleAttr = (uint64_t *)mlir::anec::Convolution::getKernelScaleAttr(&v152);
    v80 = (uint64_t)KernelScaleAttr;
    if (!KernelScaleAttr)
      goto LABEL_99;
    v81 = *KernelScaleAttr;
    v82 = mlir::TypeID::get<mlir::ElementsAttr>();
    v83 = *(unsigned int *)(v81 + 16);
    if (!(_DWORD)v83)
      goto LABEL_99;
    v84 = *(_QWORD **)(v81 + 8);
    v85 = &v84[2 * v83];
    do
    {
      v86 = v83 >> 1;
      v87 = &v84[2 * (v83 >> 1)];
      v89 = *v87;
      v88 = v87 + 2;
      v83 += ~(v83 >> 1);
      if (v89 < v82)
        v84 = v88;
      else
        v83 = v86;
    }
    while (v83);
    if (v84 != v85 && *v84 == v82)
      v90 = v84[1];
    else
LABEL_99:
      v90 = 0;
    SplatFloat = mlir::getSplatFloatValue<float>(v80, v90);
    if ((SplatFloat & 0xFF00000000) != 0)
    {
      *((_DWORD *)v55 + 57) = SplatFloat;
      goto LABEL_131;
    }
    v92 = (uint64_t *)mlir::anec::Convolution::getKernelScaleAttr(&v152);
    v93 = (uint64_t)v92;
    if (!v92)
      goto LABEL_111;
    v94 = *v92;
    v95 = mlir::TypeID::get<mlir::ElementsAttr>();
    v96 = *(unsigned int *)(v94 + 16);
    if (!(_DWORD)v96)
      goto LABEL_111;
    v97 = *(_QWORD **)(v94 + 8);
    v98 = &v97[2 * v96];
    do
    {
      v99 = v96 >> 1;
      v100 = &v97[2 * (v96 >> 1)];
      v102 = *v100;
      v101 = v100 + 2;
      v96 += ~(v96 >> 1);
      if (v102 < v95)
        v97 = v101;
      else
        v96 = v99;
    }
    while (v96);
    if (v97 != v98 && *v97 == v95)
      v103 = v97[1];
    else
LABEL_111:
      v103 = 0;
    v104 = mlir::anec::ANECIRWeights::addConstant(v74, v93, v103);
    v147 = mlir::anec::Convolution::getKernelScaleAttr(&v152);
    v154[0] = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v147);
    v154[1] = v105;
    v106 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v154);
    v107 = *(void **)(*(_QWORD *)v106 + 136);
    if (v107 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      if (v107 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
      {
        v108 = 4;
      }
      else if (v107 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
      {
        v108 = 6;
      }
      else
      {
        v108 = 0;
      }
      goto LABEL_130;
    }
    v153 = v106;
    v109 = mlir::IntegerType::getWidth((mlir::IntegerType *)&v153);
    if (v109 == 16)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v153) == 1)
      {
        v108 = 3;
LABEL_130:
        *((_DWORD *)v55 + 56) = v108;
        v55[184] = 1;
        *((_DWORD *)v55 + 48) = 0;
        *((_QWORD *)v55 + 25) = v104;
        goto LABEL_131;
      }
    }
    else if (v109 == 8)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v153) == 2)
        v108 = 2;
      else
        v108 = 1;
      goto LABEL_130;
    }
    v108 = 0;
    goto LABEL_130;
  }
LABEL_131:
  if (mlir::anec::Convolution::getKernelZeroPointAttr(&v152))
  {
    KernelZeroPointAttr = (uint64_t *)mlir::anec::Convolution::getKernelZeroPointAttr(&v152);
    v111 = (uint64_t)KernelZeroPointAttr;
    if (!KernelZeroPointAttr)
      goto LABEL_141;
    v112 = *KernelZeroPointAttr;
    v113 = mlir::TypeID::get<mlir::ElementsAttr>();
    v114 = *(unsigned int *)(v112 + 16);
    if (!(_DWORD)v114)
      goto LABEL_141;
    v115 = *(_QWORD **)(v112 + 8);
    v116 = &v115[2 * v114];
    do
    {
      v117 = v114 >> 1;
      v118 = &v115[2 * (v114 >> 1)];
      v120 = *v118;
      v119 = v118 + 2;
      v114 += ~(v114 >> 1);
      if (v120 < v113)
        v115 = v119;
      else
        v114 = v117;
    }
    while (v114);
    if (v115 != v116 && *v115 == v113)
      v121 = v115[1];
    else
LABEL_141:
      v121 = 0;
    SplatInt = mlir::getSplatIntValue<int>(v111, v121);
    if ((SplatInt & 0xFF00000000) != 0)
    {
      *((_DWORD *)v55 + 58) = SplatInt;
    }
    else
    {
      v123 = (uint64_t *)mlir::anec::Convolution::getKernelZeroPointAttr(&v152);
      v124 = (uint64_t)v123;
      if (!v123)
        goto LABEL_153;
      v125 = *v123;
      v126 = mlir::TypeID::get<mlir::ElementsAttr>();
      v127 = *(unsigned int *)(v125 + 16);
      if (!(_DWORD)v127)
        goto LABEL_153;
      v128 = *(_QWORD **)(v125 + 8);
      v129 = &v128[2 * v127];
      do
      {
        v130 = v127 >> 1;
        v131 = &v128[2 * (v127 >> 1)];
        v133 = *v131;
        v132 = v131 + 2;
        v127 += ~(v127 >> 1);
        if (v133 < v126)
          v128 = v132;
        else
          v127 = v130;
      }
      while (v127);
      if (v128 != v129 && *v128 == v126)
        v134 = v128[1];
      else
LABEL_153:
        v134 = 0;
      v135 = mlir::anec::ANECIRWeights::addConstant(v74, v124, v134);
      v55[185] = 1;
      *((_DWORD *)v55 + 52) = 0;
      *((_QWORD *)v55 + 27) = v135;
    }
  }
  v136 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v136->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v136->__shared_owners_;
  v136->__shared_weak_owners_ = 0;
  v136->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v136[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v138 = (std::string *)&v136[1].__shared_owners_;
  if (v55[31] < 0)
  {
    std::string::__init_copy_ctor_external(v138, *((const std::string::value_type **)v55 + 1), *((_QWORD *)v55 + 2));
  }
  else
  {
    *(_OWORD *)&v138->__r_.__value_.__l.__data_ = *(_OWORD *)(v55 + 8);
    v136[2].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v55 + 3);
  }
  LODWORD(v136[2].__shared_owners_) = 17;
  v136[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v136[2].__shared_weak_owners_ = (uint64_t)v55;
  LOBYTE(v136[3].__vftable) = 0;
  v136[3].__shared_owners_ = 0;
  v136[3].__shared_weak_owners_ = (uint64_t)&v136[4].__shared_owners_;
  v136[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v136[5].__shared_weak_owners_ = (uint64_t)&v136[6].__shared_owners_;
  v136[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  v154[0] = &v136[1];
  v154[1] = v136;
  v139 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v139 >= *(_QWORD *)(a2 + 240))
  {
    v141 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, (__int128 *)v154);
    v136 = (std::__shared_weak_count *)v154[1];
    *(_QWORD *)(a2 + 232) = v141;
    if (!v136)
      goto LABEL_167;
  }
  else
  {
    *v139 = v136 + 1;
    v139[1] = v136;
    do
      v140 = __ldxr(p_shared_owners);
    while (__stxr(v140 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v139 + 2;
  }
  v142 = (unint64_t *)&v136->__shared_owners_;
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (!v143)
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
LABEL_167:
  if (__p != v160)
    free(__p);
  if (v161 != (int32x4_t *)v163)
    free(v161);
  if (v164[0] != v165)
    free(v164[0]);
  return 1;
}

uint64_t mlir::anec::Deconvolution::getExecutionCost(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *OperandRange;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];

  v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13)
    goto LABEL_10;
  v14 = *v13;
  v15 = mlir::TypeID::get<mlir::ShapedType>();
  v16 = *(unsigned int *)(v14 + 16);
  if (!(_DWORD)v16)
    goto LABEL_10;
  v17 = *(_QWORD **)(v14 + 8);
  v18 = &v17[2 * v16];
  do
  {
    v19 = v16 >> 1;
    v20 = &v17[2 * (v16 >> 1)];
    v22 = *v20;
    v21 = v20 + 2;
    v16 += ~(v16 >> 1);
    if (v22 < v15)
      v17 = v21;
    else
      v16 = v19;
  }
  while (v16);
  if (v17 != v18 && *v17 == v15)
    v23 = v17[1];
  else
LABEL_10:
    v23 = 0;
  v69[0] = v13;
  v69[1] = v23;
  v24 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v24)
    goto LABEL_20;
  v25 = *v24;
  v26 = mlir::TypeID::get<mlir::ShapedType>();
  v27 = *(unsigned int *)(v25 + 16);
  if (!(_DWORD)v27)
    goto LABEL_20;
  v28 = *(_QWORD **)(v25 + 8);
  v29 = &v28[2 * v27];
  do
  {
    v30 = v27 >> 1;
    v31 = &v28[2 * (v27 >> 1)];
    v33 = *v31;
    v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26)
      v28 = v32;
    else
      v27 = v30;
  }
  while (v27);
  if (v28 != v29 && *v28 == v26)
    v34 = v28[1];
  else
LABEL_20:
    v34 = 0;
  v68[0] = v24;
  v68[1] = v34;
  if (*(_DWORD *)(*a1 + 36))
    v35 = *a1 - 16;
  else
    v35 = 0;
  v36 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v35, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v36)
    goto LABEL_33;
  v37 = *v36;
  v38 = mlir::TypeID::get<mlir::ShapedType>();
  v39 = *(unsigned int *)(v37 + 16);
  if (!(_DWORD)v39)
    goto LABEL_33;
  v40 = *(_QWORD **)(v37 + 8);
  v41 = &v40[2 * v39];
  do
  {
    v42 = v39 >> 1;
    v43 = &v40[2 * (v39 >> 1)];
    v45 = *v43;
    v44 = v43 + 2;
    v39 += ~(v39 >> 1);
    if (v45 < v38)
      v40 = v44;
    else
      v39 = v42;
  }
  while (v39);
  if (v40 != v41 && *v40 == v38)
    v46 = v40[1];
  else
LABEL_33:
    v46 = 0;
  v67[0] = v36;
  v67[1] = v46;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v69);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v67);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v69);
  mlir::anec::getIndexFromDim(0, v47);
  if (v48
    && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v69),
        mlir::anec::getIndexFromDim(1, v49),
        v50)
    && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v69),
        mlir::anec::getIndexFromDim(3, v51),
        v52)
    && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v69),
        mlir::anec::getIndexFromDim(4, v53),
        v54))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v69);
    mlir::anec::getIndexFromDim(2, v55);
    v56 = *a1;
    OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v69);
  }
  else
  {
    v59 = std::__throw_bad_optional_access[abi:nn180100]();
    return mlir::anec::inferElementwiseReturnTypes(v59, v60, v61, v62, v63, v64, v65, v66, a9, a10, a11);
  }
}

uint64_t mlir::anec::inferElementwiseReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *ArgAttrsAttr;
  uint64_t v27;
  size_t v28;
  unsigned int v29;
  size_t v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t MostDefinedTypeForANE;
  void *v54;
  _QWORD *v55;
  uint64_t ElementTypeOrSelf;
  uint64_t v57;
  unsigned int v58;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  void *v63;
  uint64_t v64;
  _BYTE v65[32];
  void *__src;
  uint64_t v67;
  _QWORD v68[6];

  v68[4] = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v14 = v13;
  if (!v13)
    goto LABEL_10;
  v15 = *v13;
  v16 = mlir::TypeID::get<mlir::ShapedType>();
  v17 = *(unsigned int *)(v15 + 16);
  if (!(_DWORD)v17)
    goto LABEL_10;
  v18 = *(_QWORD **)(v15 + 8);
  v19 = &v18[2 * v17];
  do
  {
    v20 = v17 >> 1;
    v21 = &v18[2 * (v17 >> 1)];
    v23 = *v21;
    v22 = v21 + 2;
    v17 += ~(v17 >> 1);
    if (v23 < v16)
      v18 = v22;
    else
      v17 = v20;
  }
  while (v17);
  if (v18 != v19 && *v18 == v16)
    v24 = v18[1];
  else
LABEL_10:
    v24 = 0;
  __src = v14;
  v67 = v24;
  ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  v27 = v25;
  v28 = 8 * v25;
  __src = v68;
  v67 = 0x400000000;
  if ((unint64_t)(8 * v25) < 0x21)
  {
    v29 = 0;
    if (!v25)
      goto LABEL_16;
    goto LABEL_15;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v68, (8 * v25) >> 3, 8);
  v29 = v67;
  if (v27)
  {
LABEL_15:
    memcpy((char *)__src + 8 * v29, ArgAttrsAttr, v28);
    v29 = v67;
  }
LABEL_16:
  v30 = v28 >> 3;
  v63 = v65;
  v64 = 0x400000000;
  v31 = v29 + (v28 >> 3);
  LODWORD(v67) = v31;
  if (!v31)
    goto LABEL_23;
  if (v31 < 5)
  {
    v33 = v65;
    v32 = v29 + v30;
    goto LABEL_21;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v65, v29 + v30, 8);
  v32 = v67;
  if ((_DWORD)v67)
  {
    v33 = v63;
LABEL_21:
    memcpy(v33, __src, 8 * v32);
  }
  LODWORD(v64) = v31;
LABEL_23:
  if (a10 != 1)
  {
    v60 = a4;
    v61 = a5;
    v34 = 1;
    while (1)
    {
      v35 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, v34);
      v36 = v35;
      v37 = (uint64_t *)__src;
      v38 = v67;
      if (!v35)
        goto LABEL_35;
      v39 = *v35;
      v40 = mlir::TypeID::get<mlir::ShapedType>();
      v41 = *(unsigned int *)(v39 + 16);
      if (!(_DWORD)v41)
        goto LABEL_35;
      v42 = *(_QWORD **)(v39 + 8);
      v43 = &v42[2 * v41];
      do
      {
        v44 = v41 >> 1;
        v45 = &v42[2 * (v41 >> 1)];
        v47 = *v45;
        v46 = v45 + 2;
        v41 += ~(v41 >> 1);
        if (v47 < v40)
          v42 = v46;
        else
          v41 = v44;
      }
      while (v41);
      if (v42 != v43 && *v42 == v40)
        v48 = v42[1];
      else
LABEL_35:
        v48 = 0;
      v62[0] = v36;
      v62[1] = v48;
      v49 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v62);
      if ((mlir::OpTrait::util::getBroadcastedShape(v37, v38, v49, v50, (uint64_t)&v63) & 1) == 0)
      {
        MostDefinedTypeForANE = mlir::getMostDefinedTypeForANE(v60, v61);
        goto LABEL_51;
      }
      v51 = v64;
      v52 = v67;
      if (v67 >= v64)
      {
        if ((_DWORD)v64)
          memmove(__src, v63, 8 * v64);
        goto LABEL_25;
      }
      if (HIDWORD(v67) >= v64)
      {
        if ((_DWORD)v67)
        {
          memmove(__src, v63, 8 * v67);
          goto LABEL_45;
        }
      }
      else
      {
        LODWORD(v67) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v68, v64, 8);
      }
      v52 = 0;
LABEL_45:
      if (v52 != v64)
        memcpy((char *)__src + 8 * v52, (char *)v63 + 8 * v52, 8 * v64 - 8 * v52);
LABEL_25:
      LODWORD(v67) = v51;
      if (++v34 == a10)
      {
        v31 = v64;
        break;
      }
    }
  }
  v54 = v63;
  v55 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v55);
  MostDefinedTypeForANE = mlir::MemRefType::get(v54, (mlir::AffineMap *)v31, ElementTypeOrSelf, 0, 0, 0);
LABEL_51:
  v57 = MostDefinedTypeForANE;
  v58 = *(_DWORD *)(a11 + 8);
  if (v58 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v58 + 1, 8);
    v58 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v58) = v57;
  ++*(_DWORD *)(a11 + 8);
  if (v63 != v65)
    free(v63);
  if (__src != v68)
    free(__src);
  return 1;
}

uint64_t mlir::anec::inferElementwiseCompareReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *ArgAttrsAttr;
  uint64_t v27;
  size_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t MostDefinedTypeForANE;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v58;
  uint64_t v59;
  _QWORD v61[2];
  void *v62;
  uint64_t v63;
  _BYTE v64[32];
  void *__src;
  uint64_t v66;
  _QWORD v67[6];

  v67[4] = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v14 = v13;
  if (!v13)
    goto LABEL_10;
  v15 = *v13;
  v16 = mlir::TypeID::get<mlir::ShapedType>();
  v17 = *(unsigned int *)(v15 + 16);
  if (!(_DWORD)v17)
    goto LABEL_10;
  v18 = *(_QWORD **)(v15 + 8);
  v19 = &v18[2 * v17];
  do
  {
    v20 = v17 >> 1;
    v21 = &v18[2 * (v17 >> 1)];
    v23 = *v21;
    v22 = v21 + 2;
    v17 += ~(v17 >> 1);
    if (v23 < v16)
      v18 = v22;
    else
      v17 = v20;
  }
  while (v17);
  if (v18 != v19 && *v18 == v16)
    v24 = v18[1];
  else
LABEL_10:
    v24 = 0;
  __src = v14;
  v66 = v24;
  ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  v27 = v25;
  v28 = 8 * v25;
  __src = v67;
  v66 = 0x400000000;
  if ((unint64_t)(8 * v25) < 0x21)
  {
    v29 = 0;
    if (!v25)
      goto LABEL_16;
    goto LABEL_15;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v67, (8 * v25) >> 3, 8);
  v29 = v66;
  if (v27)
  {
LABEL_15:
    memcpy((char *)__src + 8 * v29, ArgAttrsAttr, v28);
    v29 = v66;
  }
LABEL_16:
  v62 = v64;
  v63 = 0x400000000;
  v30 = v29 + (v28 >> 3);
  LODWORD(v66) = v30;
  if (!(_DWORD)v30)
    goto LABEL_23;
  if (v30 < 5)
  {
    v32 = v64;
    v31 = v30;
    goto LABEL_21;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v64, v30, 8);
  v31 = v66;
  if ((_DWORD)v66)
  {
    v32 = v62;
LABEL_21:
    memcpy(v32, __src, 8 * v31);
  }
  LODWORD(v63) = v30;
LABEL_23:
  if (a10 != 1)
  {
    v58 = a1;
    v59 = a5;
    v33 = 1;
    while (1)
    {
      v34 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, v33);
      v35 = v34;
      v36 = (uint64_t *)__src;
      v37 = v66;
      if (!v34)
        goto LABEL_35;
      v38 = *v34;
      v39 = mlir::TypeID::get<mlir::ShapedType>();
      v40 = *(unsigned int *)(v38 + 16);
      if (!(_DWORD)v40)
        goto LABEL_35;
      v41 = *(_QWORD **)(v38 + 8);
      v42 = &v41[2 * v40];
      do
      {
        v43 = v40 >> 1;
        v44 = &v41[2 * (v40 >> 1)];
        v46 = *v44;
        v45 = v44 + 2;
        v40 += ~(v40 >> 1);
        if (v46 < v39)
          v41 = v45;
        else
          v40 = v43;
      }
      while (v40);
      if (v41 != v42 && *v41 == v39)
        v47 = v41[1];
      else
LABEL_35:
        v47 = 0;
      v61[0] = v35;
      v61[1] = v47;
      v48 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v61);
      if ((mlir::OpTrait::util::getBroadcastedShape(v36, v37, v48, v49, (uint64_t)&v62) & 1) == 0)
      {
        MostDefinedTypeForANE = mlir::getMostDefinedTypeForANE(a4, v59);
        goto LABEL_51;
      }
      v50 = v63;
      v51 = v66;
      if (v66 >= v63)
      {
        if ((_DWORD)v63)
          memmove(__src, v62, 8 * v63);
        goto LABEL_25;
      }
      if (HIDWORD(v66) >= v63)
      {
        if ((_DWORD)v66)
        {
          memmove(__src, v62, 8 * v66);
          goto LABEL_45;
        }
      }
      else
      {
        LODWORD(v66) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v67, v63, 8);
      }
      v51 = 0;
LABEL_45:
      if (v51 != v63)
        memcpy((char *)__src + 8 * v51, (char *)v62 + 8 * v51, 8 * v63 - 8 * v51);
LABEL_25:
      LODWORD(v66) = v50;
      if (++v33 == a10)
      {
        LODWORD(v30) = v63;
        a1 = v58;
        break;
      }
    }
  }
  v53 = v62;
  v54 = mlir::IntegerType::get(a1, 8u, 1u);
  MostDefinedTypeForANE = mlir::MemRefType::get(v53, (mlir::AffineMap *)v30, v54, 0, 0, 0);
LABEL_51:
  v55 = MostDefinedTypeForANE;
  v56 = *(_DWORD *)(a11 + 8);
  if (v56 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v56 + 1, 8);
    v56 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v56) = v55;
  ++*(_DWORD *)(a11 + 8);
  if (v62 != v64)
    free(v62);
  if (__src != v67)
    free(__src);
  return 1;
}

uint64_t mlir::anec::ElementwiseAdd::canonicalize(uint64_t a1, uint64_t a2, mlir::PatternRewriter *a3)
{
  char v5;
  uint64_t DefiningOp;
  char v7;
  mlir::Operation *v8;
  llvm::APFloatBase *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  _QWORD *NextResultAtOffset;
  uint64_t v17;
  uint64_t v18;
  _QWORD *Type;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ElementTypeOrSelf;
  _QWORD *ArgAttrsAttr;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t IndexFromDim;
  char v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  const void *ElementsAttrRawData;
  size_t v74;
  size_t v75;
  const void *v76;
  size_t v77;
  size_t v78;
  char *MutableRawData;
  char *v80;
  mlir::AffineMap *v81;
  uint64_t v82;
  mlir::MLIRContext *v83;
  uint64_t F16Type;
  uint64_t v85;
  mlir::GenericProgramPoint *v86;
  mlir::anec::_anonymous_namespace_ *v87;
  mlir::Float16Type **v88;
  mlir::PatternRewriter *v89;
  uint64_t v90;
  llvm::APFloatBase *FloatAttr;
  mlir::GenericProgramPoint *v92;
  uint64_t v93;
  uint64_t *BufferTensorAttr;
  _QWORD *v95[2];
  _QWORD *v96[2];
  uint64_t v97[2];
  uint64_t v98[2];
  uint64_t v99;
  uint64_t v100;
  mlir::Operation *v101;
  uint64_t *v102[2];
  mlir::Operation *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[4];
  const char *v107;
  uint64_t v108;
  _BYTE v109[16];
  __int16 v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v104 = 0;
  v105 = 0;
  v102[0] = &v105;
  v102[1] = &v104;
  v103 = 0;
  if (*(_UNKNOWN **)(*(_QWORD *)(a1 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id
    || (*(_BYTE *)(a1 + 46) & 0x80) == 0
    || *(_DWORD *)(a1 + 68) != 2
    || (v5 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternMatcherBinder<mlir::anec::MatMul,mlir::detail::any_value_binder,mlir::detail::op_matcher_with_bind<mlir::mps::ConstantOp>>>(a1, 0, v102), v107 = *(const char **)(*(_QWORD *)(a1 + 72) + 56), (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v107)) == 0)|| (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id? (v7 = v5): (v7 = 0), (v7 & 1) == 0))
  {
    v11 = "does not match pattern";
    goto LABEL_13;
  }
  v8 = v103;
  v100 = v104;
  v101 = v103;
  v99 = DefiningOp;
  mlir::anec::MatMul::getBias(&v101, (uint64_t)&v107);
  if ((_BYTE)v110)
  {
    v10 = (void *)v108;
    if (llvm::APFloatBase::PPCDoubleDouble(v9) == v10)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v108);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v108);
    v11 = "MatMul already has bias";
LABEL_13:
    v107 = v11;
    v110 = 259;
    v106[0] = (uint64_t)&v107;
    v12 = *(_QWORD *)(a2 + 16);
    if (v12 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a2 + 16)))
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v12 + 64))(v12, *(_QWORD *)(a1 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::ElementwiseAdd &>(mlir::anec::ElementwiseAdd &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v106);
    else
      v13 = 0;
    if (v13)
      return 1;
    else
  }
  if (*((_DWORD *)v8 + 9))
    v15 = (uint64_t)v8 - 16;
  else
    v15 = 0;
  NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  if (!*NextResultAtOffset || *(_QWORD *)*NextResultAtOffset)
  {
    v11 = "MatMul has multiple users";
    goto LABEL_13;
  }
  v98[0] = (uint64_t)mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)&v100);
  v98[1] = v17;
  v97[0] = (uint64_t)mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)&v99);
  v97[1] = v18;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v98);
  v20 = Type;
  if (!Type)
    goto LABEL_38;
  v21 = *Type;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_38;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = (_QWORD *)v24[1];
  else
LABEL_38:
    v30 = 0;
  v96[0] = v20;
  v96[1] = v30;
  v31 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v97);
  v32 = v31;
  if (!v31)
    goto LABEL_48;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_48;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = (_QWORD *)v36[1];
  else
LABEL_48:
    v42 = 0;
  v95[0] = v32;
  v95[1] = v42;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v96);
  v44 = v43;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
  if (v44 != v45
    || (ElementTypeOrSelf = mlir::getElementTypeOrSelf(v96[0]), ElementTypeOrSelf != mlir::getElementTypeOrSelf(v95[0])))
  {
    v11 = "unsupported kernel and bias fusion";
    goto LABEL_13;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v96);
  v90 = v48;
  v49 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v96);
  IndexFromDim = mlir::anec::getIndexFromDim(4, v50);
  v53 = v52;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
  v55 = mlir::anec::getIndexFromDim(4, v54);
  v57 = v56;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v96);
  v59 = mlir::anec::getIndexFromDim(1, v58);
  if (!v53 || !v57 || !v60 || IndexFromDim != v55)
  {
    v11 = "cannot get axes";
    goto LABEL_13;
  }
  v61 = v59;
  v62 = v60;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v96);
  if (v63)
  {
    v64 = 0;
    while (1)
    {
      v66 = IndexFromDim == v64 ? ArgAttrsAttr[IndexFromDim] : 1;
      if (*(_QWORD *)(v49 + 8 * v64) != v66)
        break;
      if (!v62)
        goto LABEL_83;
      if (v61 != v64 && IndexFromDim != v64 && ArgAttrsAttr[v64] != 1)
      {
        v11 = "unsupported kernel shape";
        goto LABEL_13;
      }
      ++v64;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v96);
      if (v64 == v65)
        goto LABEL_71;
    }
    v11 = "unsupported bias shape";
    goto LABEL_13;
  }
LABEL_71:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v96);
  if (IndexFromDim != v67 - 1
    || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v98) & 1) != 0
    || mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97))
  {
    v11 = "unsupported concatenation dimension";
    goto LABEL_13;
  }
  v107 = v109;
  v108 = 0x400000000;
  if ((unint64_t)(8 * v90) < 0x21)
  {
    v68 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, (8 * v90) >> 3, 8);
    v68 = v108;
  }
  if (v90)
  {
    memcpy((void *)&v107[8 * v68], ArgAttrsAttr, 8 * v90);
    v68 = v108;
  }
  v69 = (v68 + v90);
  LODWORD(v108) = v68 + v90;
  if (v62)
  {
    v70 = (uint64_t)v107;
    ++*(_QWORD *)&v107[8 * v61];
    v71 = mlir::getElementTypeOrSelf(v96[0]);
    v72 = (_QWORD *)mlir::RankedTensorType::get(v70, v69, v71, 0);
    BufferTensorAttr = (uint64_t *)mlir::mps::getBufferTensorAttr(v72);
    ElementsAttrRawData = (const void *)mlir::getElementsAttrRawData(v98[0]);
    v75 = v74;
    v76 = (const void *)mlir::getElementsAttrRawData(v97[0]);
    v78 = v77;
    MutableRawData = (char *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&BufferTensorAttr);
    memcpy(MutableRawData, ElementsAttrRawData, v75);
    memcpy(&MutableRawData[v75], v76, v78);
    v80 = (char *)v107;
    v81 = (mlir::AffineMap *)v108;
    v82 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v100 - 8) & 0xFFFFFFFFFFFFFFF8));
    v93 = mlir::MemRefType::get(v80, v81, v82, 0, 0, 0);
    v92 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>((mlir::OpBuilder *)(a2 + 8), *(_QWORD *)(v100 + 24), &v93, &BufferTensorAttr);
    F16Type = mlir::Builder::getF16Type((mlir::Float16Type **)(a2 + 8), v83);
    FloatAttr = mlir::Builder::getFloatAttr(1.0, a2 + 8, F16Type);
    v85 = *(_QWORD *)(a1 + 24);
    v106[0] = *(_QWORD *)(*((_QWORD *)v8 + 9) + 24);
    v86 = mlir::OpBuilder::create<mlir::anec::MatMul,mlir::detail::TypedValue<mlir::MemRefType>,mlir::mps::ConstantOp &,mlir::FloatAttr &>((mlir::UnknownLoc **)(a2 + 8), v85, v106, &v92, (uint64_t *)&FloatAttr);
    mlir::verify(v86, (mlir::Operation *)1);
  }
LABEL_83:
  v87 = (mlir::anec::_anonymous_namespace_ *)std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t mlir::anec::`anonymous namespace'::canonicalizeElementwiseToGOC(mlir::anec::_anonymous_namespace_ *this, mlir::Float16Type **a2, mlir::PatternRewriter *a3)
{
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  const void *ArgAttrsAttr;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  size_t v67;
  int v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t NumElements;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  mlir::AffineMap *v79;
  uint64_t F16Type;
  _QWORD *Type;
  uint64_t v82;
  uint64_t v83;
  uint64_t ElementTypeOrSelf;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t *v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  mlir::MLIRContext *v111;
  uint64_t F32Type;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  mlir::MLIRContext *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  mlir::GenericProgramPoint *v127;
  char *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  mlir::GenericProgramPoint *v135;
  uint64_t v136;
  uint64_t v137[2];
  _QWORD v138[2];
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *RawElementsAttr;
  uint64_t v143;
  char *v144;
  unint64_t v145[2];
  void *v146;
  uint64_t v147;
  _DWORD v148[12];
  void *v149;
  uint64_t v150;
  _DWORD v151[12];
  uint64_t *v152;
  uint64_t v153;
  _DWORD v154[12];
  char *v155;
  uint64_t v156;
  _QWORD v157[7];

  v157[5] = *MEMORY[0x1E0C80C00];
  RawElementsAttr = 0;
  v143 = 0;
  v141 = 0;
  v149 = *(void **)(*((_QWORD *)this + 9) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v149);
  if (!DefiningOp)
    goto LABEL_9;
  v6 = DefiningOp;
  v7 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 48) + 32))(*(_QWORD *)(v6 + 48), v7))
    goto LABEL_9;
  v152 = (uint64_t *)v154;
  v153 = 0x100000000;
  mlir::Operation::fold(v6, 0, 0, (uint64_t)&v152);
  v8 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*v152 & 0xFFFFFFFFFFFFFFF8));
  v10 = v8;
  if (v8)
  {
    RawElementsAttr = v8;
    v143 = v9;
  }
  if (v152 != (uint64_t *)v154)
    free(v152);
  if (v10)
  {
    v11 = *((_QWORD *)this + 9);
    v12 = *(_QWORD *)(v11 + 24);
    v141 = v12;
    v13 = v11 + 56;
    v14 = 1;
  }
  else
  {
LABEL_9:
    v149 = *(void **)(*((_QWORD *)this + 9) + 24);
    v15 = mlir::Value::getDefiningOp((mlir::Value *)&v149);
    if (!v15)
      return 0;
    v16 = v15;
    v17 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 48) + 32))(*(_QWORD *)(v16 + 48), v17))
      return 0;
    v152 = (uint64_t *)v154;
    v153 = 0x100000000;
    mlir::Operation::fold(v16, 0, 0, (uint64_t)&v152);
    v18 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*v152 & 0xFFFFFFFFFFFFFFF8));
    v20 = v18;
    if (v18)
    {
      RawElementsAttr = v18;
      v143 = v19;
    }
    if (v152 != (uint64_t *)v154)
      free(v152);
    if (!v20)
      return 0;
    v14 = 0;
    v21 = *((_QWORD *)this + 9);
    v12 = *(_QWORD *)(v21 + 56);
    v141 = v12;
    v13 = v21 + 24;
  }
  v22 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v22)
    goto LABEL_26;
  v23 = *v22;
  v24 = mlir::TypeID::get<mlir::ShapedType>();
  v25 = *(unsigned int *)(v23 + 16);
  if (!(_DWORD)v25)
    goto LABEL_26;
  v26 = *(_QWORD **)(v23 + 8);
  v27 = &v26[2 * v25];
  do
  {
    v28 = v25 >> 1;
    v29 = &v26[2 * (v25 >> 1)];
    v31 = *v29;
    v30 = v29 + 2;
    v25 += ~(v25 >> 1);
    if (v31 < v24)
      v26 = v30;
    else
      v25 = v28;
  }
  while (v25);
  if (v26 != v27 && *v26 == v24)
    v32 = v26[1];
  else
LABEL_26:
    v32 = 0;
  v139 = v22;
  v140 = v32;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v139);
  mlir::anec::getIndexFromDim(1, v33);
  if (v34)
  {
    if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawElementsAttr) & 1) == 0
      && !mlir::anec::allElementsOnAxis((uint64_t)v139, v140, 1))
    {
      return 0;
    }
    v35 = (uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v35)
      goto LABEL_39;
    v36 = *v35;
    v37 = mlir::TypeID::get<mlir::ShapedType>();
    v38 = *(unsigned int *)(v36 + 16);
    if (!(_DWORD)v38)
      goto LABEL_39;
    v39 = *(_QWORD **)(v36 + 8);
    v40 = &v39[2 * v38];
    do
    {
      v41 = v38 >> 1;
      v42 = &v39[2 * (v38 >> 1)];
      v44 = *v42;
      v43 = v42 + 2;
      v38 += ~(v38 >> 1);
      if (v44 < v37)
        v39 = v43;
      else
        v38 = v41;
    }
    while (v38);
    if (v39 != v40 && *v39 == v37)
      v45 = v39[1];
    else
LABEL_39:
      v45 = 0;
    v138[0] = v35;
    v138[1] = v45;
    v46 = (uint64_t *)(*((_QWORD *)this - 1) & 0xFFFFFFFFFFFFFFF8);
    if (!v46)
      goto LABEL_49;
    v47 = *v46;
    v48 = mlir::TypeID::get<mlir::ShapedType>();
    v49 = *(unsigned int *)(v47 + 16);
    if (!(_DWORD)v49)
      goto LABEL_49;
    v50 = *(_QWORD **)(v47 + 8);
    v51 = &v50[2 * v49];
    do
    {
      v52 = v49 >> 1;
      v53 = &v50[2 * (v49 >> 1)];
      v55 = *v53;
      v54 = v53 + 2;
      v49 += ~(v49 >> 1);
      if (v55 < v48)
        v50 = v54;
      else
        v49 = v52;
    }
    while (v49);
    if (v50 != v51 && *v50 == v48)
      v56 = v50[1];
    else
LABEL_49:
      v56 = 0;
    v137[0] = (uint64_t)v46;
    v137[1] = v56;
    ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
    v59 = v58;
    v60 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v137);
    if (v59 != v61 || memcmp(ArgAttrsAttr, v60, 8 * v59))
      return 0;
    v65 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v139);
    v66 = v64;
    v155 = (char *)v157;
    v156 = 0x500000000;
    v67 = 8 * v64;
    if ((unint64_t)(8 * v64) < 0x29)
    {
      v68 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v155, v157, (8 * v64) >> 3, 8);
      v68 = v156;
    }
    if (v66)
    {
      memcpy(&v155[8 * v68], v65, v67);
      v68 = v156;
    }
    LODWORD(v156) = v68 + (v67 >> 3);
    if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawElementsAttr))
    {
LABEL_83:
      v78 = v155;
      v79 = (mlir::AffineMap *)v156;
      F16Type = mlir::Builder::getF16Type(a2 + 1, (mlir::MLIRContext *)v69);
      v136 = mlir::MemRefType::get(v78, v79, F16Type, 0, 0, 0);
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&RawElementsAttr);
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(Type) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        v152 = (uint64_t *)v154;
        v153 = 0xC00000000;
        mlir::getIntValues<float>((uint64_t)RawElementsAttr, v143, (uint64_t)&v152, 0);
        v109 = (uint64_t)v155;
        v110 = v156;
        F32Type = mlir::Builder::getF32Type(a2 + 1, v111);
        v113 = (_QWORD *)mlir::RankedTensorType::get(v109, v110, F32Type, 0);
        RawElementsAttr = mlir::createRawElementsAttr(v113, v152, (const void *)(4 * v153));
        v143 = v114;
        if (v152 != (uint64_t *)v154)
          free(v152);
      }
      else if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawElementsAttr))
      {
        v152 = RawElementsAttr;
        v82 = (uint64_t)v155;
        v83 = v156;
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(RawElementsAttr);
        v85 = (uint64_t *)mlir::RankedTensorType::get(v82, v83, ElementTypeOrSelf, 0);
        v86 = (uint64_t)v85;
        if (!v85)
          goto LABEL_94;
        v87 = *v85;
        v88 = mlir::TypeID::get<mlir::ShapedType>();
        v89 = *(unsigned int *)(v87 + 16);
        if (!(_DWORD)v89)
          goto LABEL_94;
        v90 = *(_QWORD **)(v87 + 8);
        v91 = &v90[2 * v89];
        do
        {
          v92 = v89 >> 1;
          v93 = &v90[2 * (v89 >> 1)];
          v95 = *v93;
          v94 = v93 + 2;
          v89 += ~(v89 >> 1);
          if (v95 < v88)
            v90 = v94;
          else
            v89 = v92;
        }
        while (v89);
        if (v90 != v91 && *v90 == v88)
          v96 = v90[1];
        else
LABEL_94:
          v96 = 0;
        v97 = (uint64_t *)mlir::DenseElementsAttr::reshape((uint64_t *)&v152, v86, v96);
        v98 = v97;
        if (!v97)
          goto LABEL_104;
        v99 = *v97;
        v100 = mlir::TypeID::get<mlir::ElementsAttr>();
        v101 = *(unsigned int *)(v99 + 16);
        if (!(_DWORD)v101)
          goto LABEL_104;
        v102 = *(_QWORD **)(v99 + 8);
        v103 = &v102[2 * v101];
        do
        {
          v104 = v101 >> 1;
          v105 = &v102[2 * (v101 >> 1)];
          v107 = *v105;
          v106 = v105 + 2;
          v101 += ~(v101 >> 1);
          if (v107 < v100)
            v102 = v106;
          else
            v101 = v104;
        }
        while (v101);
        if (v102 != v103 && *v102 == v100)
          v108 = v102[1];
        else
LABEL_104:
          v108 = 0;
        RawElementsAttr = v98;
        v143 = v108;
      }
      v135 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a2 + 1), *((_QWORD *)this + 3), &v136, &RawElementsAttr);
      v115 = (uint64_t)v155;
      v116 = v156;
      v118 = mlir::Builder::getF32Type(a2 + 1, v117);
      v119 = (_QWORD *)mlir::RankedTensorType::get(v115, v116, v118, 0);
      v152 = (uint64_t *)v154;
      v154[0] = 0;
      v153 = 0xC00000001;
      v149 = v151;
      v151[0] = 1065353216;
      v150 = 0xC00000001;
      v146 = v148;
      v148[0] = -1082130432;
      v147 = 0xC00000001;
      v120 = *((_QWORD *)this + 3);
      v130 = mlir::createRawElementsAttr(v119, v148, (const void *)4);
      v131 = v121;
      v132 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a2 + 1), v120, &v136, &v130)- 16;
      v122 = *((_QWORD *)this + 3);
      v130 = mlir::createRawElementsAttr(v119, v152, (const void *)(4 * v153));
      v131 = v123;
      v134 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a2 + 1), v122, &v136, &v130)- 16;
      v124 = *((_QWORD *)this + 3);
      v130 = mlir::createRawElementsAttr(v119, v149, (const void *)(4 * v150));
      v131 = v125;
      v133 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a2 + 1), v124, &v136, &v130)- 16;
      v126 = *(void **)(*((_QWORD *)this + 6) + 16);
      if (v126 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id)
      {
        v127 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a2 + 1), *((_QWORD *)this + 3), v137, &v141, &v133, &v135);
      }
      else
      {
        if (v126 != &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id)
        {
          if (v126 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseSub,void>::id)
          {
            v130 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a2 + 1), *((_QWORD *)this + 3), v137, &v141, &v132, &v134)- 16);
            v128 = (char *)mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a2 + 1), *((_QWORD *)this + 3), v137, (uint64_t *)&v130, &v133, &v135)- 16;
            v130 = v128;
            if (v14)
            {
              v128 = (char *)mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a2 + 1), *((_QWORD *)this + 3), v137, (uint64_t *)&v130, &v132, &v134)- 16;
              v130 = v128;
            }
            v144 = v128;
            v62 = 1;
            mlir::ValueRange::ValueRange(v145, (uint64_t)&v144, 1uLL);
            (*((void (**)(mlir::Float16Type **, mlir::anec::_anonymous_namespace_ *, unint64_t, unint64_t))*a2
             + 3))(a2, this, v145[0], v145[1]);
          }
          else
          {
            v62 = 0;
          }
          goto LABEL_115;
        }
        v127 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::mps::ConstantOp &,mlir::Value &>((mlir::OpBuilder *)(a2 + 1), *((_QWORD *)this + 3), v137, &v141, &v135, &v134);
      }
      (*((void (**)(mlir::Float16Type **, mlir::anec::_anonymous_namespace_ *, mlir::GenericProgramPoint *))*a2
       + 4))(a2, this, v127);
      v62 = 1;
LABEL_115:
      if (v146 != v148)
        free(v146);
      if (v149 != v151)
        free(v149);
      if (v152 != (uint64_t *)v154)
        free(v152);
      goto LABEL_121;
    }
    v70 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
    if (mlir::ShapedType::getNumElements(v70, v71) != 1)
    {
      v72 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
      NumElements = mlir::ShapedType::getNumElements(v72, v73);
      if (NumElements < mlir::ElementsAttr::getNumElements((uint64_t)RawElementsAttr, v143))
      {
        v62 = 0;
LABEL_121:
        if (v155 != (char *)v157)
          free(v155);
        return v62;
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
    v75 = v69;
    v152 = (uint64_t *)v154;
    HIDWORD(v153) = 5;
    if (v69 < 6)
    {
      if (v69)
        memset_pattern16(v154, &unk_181233190, 8 * v69);
      v76 = (uint64_t *)v154;
    }
    else
    {
      LODWORD(v153) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, v154, v69, 8);
      v76 = v152;
      memset_pattern16(v152, &unk_181233190, 8 * v75);
    }
    LODWORD(v153) = v75;
    v77 = v156;
    if (v156 >= v75)
    {
      if ((_DWORD)v75)
        memmove(v155, v76, 8 * v75);
      goto LABEL_81;
    }
    if (HIDWORD(v156) >= v75)
    {
      if ((_DWORD)v156)
      {
        memmove(v155, v76, 8 * v156);
        goto LABEL_79;
      }
    }
    else
    {
      LODWORD(v156) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v155, v157, v75, 8);
    }
    v77 = 0;
LABEL_79:
    if (v77 != v153)
      memcpy(&v155[8 * v77], &v152[v77], 8 * v153 - 8 * v77);
LABEL_81:
    LODWORD(v156) = v75;
    if (v152 != (uint64_t *)v154)
      free(v152);
    goto LABEL_83;
  }
  v129 = std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::anec::ElementwiseSub::canonicalize(v129);
}

uint64_t mlir::anec::ElementwiseMax::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  llvm::APFloatBase *v14;
  void *v15;
  llvm::APFloatBase *v16;
  uint64_t v17;
  void *v18;
  mlir::GenericProgramPoint *v19;
  unint64_t v20;
  uint64_t v21;
  void **v22;
  _QWORD v23[3];
  void *v24;
  uint64_t v25;
  _WORD v26[12];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = 0;
  v22 = *(void ***)(*(_QWORD *)(a1 + 72) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v22);
  if (!DefiningOp)
    goto LABEL_16;
  v5 = DefiningOp;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v6))
    goto LABEL_16;
  v24 = v26;
  v25 = 0x100000000;
  mlir::Operation::fold(v5, 0, 0, (uint64_t)&v24);
  v7 = *(_QWORD *)v24;
  v8 = mlir::DenseFPElementsAttr::classof(*(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8);
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
    v10 = v8;
  else
    v10 = 0;
  if (v10 == 1)
    v20 = v9;
  if (v24 != v26)
    free(v24);
  if (v10
    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v20)
    && (*(_DWORD *)(a1 + 36) ? (v11 = a1 - 16) : (v11 = 0),
        (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v20, (uint64_t)&v24);
    v15 = llvm::APFloatBase::IEEEhalf(v14);
    LOBYTE(v22) = 0;
    v16 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v24, v15, 1, &v22);
    v17 = v25;
    v18 = llvm::APFloatBase::PPCDoubleDouble(v16);
    if (v18 == (void *)v17)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v23, v17);
    else
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v23, v17);
    if (v18 == (void *)v23[0])
      llvm::detail::DoubleAPFloat::makeLargest((llvm::detail::DoubleAPFloat *)v23, 0);
    else
      llvm::detail::IEEEFloat::makeLargest((llvm::detail::IEEEFloat *)v23, 0);
    v19 = mlir::OpBuilder::create<mlir::anec::ClampedRelu,mlir::Value &,llvm::APFloat &,llvm::APFloat>((mlir::Float16Type **)(a2 + 8), *(_QWORD *)(a1 + 24), &v21, (uint64_t)&v24, (uint64_t)&v22);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a2 + 32))(a2, a1, v19);
    if (v18 == (void *)v23[0])
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v23);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v23);
    if (v18 == (void *)v25)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v25);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v25);
    return 1;
  }
  else
  {
LABEL_16:
    v24 = "rhs is not a non-broadcasting scalar constant";
    v26[8] = 259;
    v22 = &v24;
    v12 = *(_QWORD *)(a2 + 16);
    if (v12)
    {
      result = mlir::RewriterBase::Listener::classof(v12);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v12 + 64))(v12, *(_QWORD *)(a1 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::ElementwiseMax &>(mlir::anec::ElementwiseMax &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v22);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  llvm::detail::IEEEFloat *v4;
  llvm::APFloatBase *v5;
  void *__p[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)v12);
  *(_OWORD *)__p = v12[0];
  v7 = v12[1];
  v8 = v13;
  v9 = v14;
  v10 = v15;
  v11 = v16;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v12, (llvm::APInt *)__p);
  v3 = (void *)v13;
  v4 = (llvm::detail::IEEEFloat *)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(v5) == v3)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v4, (uint64_t)v3, (uint64_t)__p);
  else
    llvm::detail::IEEEFloat::IEEEFloat(v4, v3, (const llvm::APInt **)__p);
  if (LODWORD(__p[1]) >= 0x41)
  {
    if (__p[0])
      operator delete[](__p[0]);
  }
}

uint64_t mlir::anec::ElementwiseMin::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  llvm::APFloatBase *v14;
  void *v15;
  llvm::APFloatBase *v16;
  uint64_t v17;
  void *v18;
  mlir::GenericProgramPoint *v19;
  unint64_t v20;
  uint64_t v21;
  void **v22;
  _QWORD v23[3];
  void *v24;
  uint64_t v25;
  _WORD v26[12];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = 0;
  v22 = *(void ***)(*(_QWORD *)(a1 + 72) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v22);
  if (!DefiningOp)
    goto LABEL_16;
  v5 = DefiningOp;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v6))
    goto LABEL_16;
  v24 = v26;
  v25 = 0x100000000;
  mlir::Operation::fold(v5, 0, 0, (uint64_t)&v24);
  v7 = *(_QWORD *)v24;
  v8 = mlir::DenseFPElementsAttr::classof(*(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8);
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
    v10 = v8;
  else
    v10 = 0;
  if (v10 == 1)
    v20 = v9;
  if (v24 != v26)
    free(v24);
  if (v10
    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v20)
    && (*(_DWORD *)(a1 + 36) ? (v11 = a1 - 16) : (v11 = 0),
        (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v20, (uint64_t)&v24);
    v15 = llvm::APFloatBase::IEEEhalf(v14);
    LOBYTE(v22) = 0;
    v16 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v24, v15, 1, &v22);
    v17 = v25;
    v18 = llvm::APFloatBase::PPCDoubleDouble(v16);
    if (v18 == (void *)v17)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v23, v17);
    else
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v23, v17);
    if (v18 == (void *)v23[0])
      llvm::detail::DoubleAPFloat::makeLargest((llvm::detail::DoubleAPFloat *)v23, 1);
    else
      llvm::detail::IEEEFloat::makeLargest((llvm::detail::IEEEFloat *)v23, 1);
    v19 = mlir::OpBuilder::create<mlir::anec::ClampedRelu,mlir::Value &,llvm::APFloat,llvm::APFloat&>((mlir::Float16Type **)(a2 + 8), *(_QWORD *)(a1 + 24), &v21, (uint64_t)&v22, (uint64_t)&v24);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a2 + 32))(a2, a1, v19);
    if (v18 == (void *)v23[0])
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v23);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v23);
    if (v18 == (void *)v25)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v25);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v25);
    return 1;
  }
  else
  {
LABEL_16:
    v24 = "rhs is not a non-broadcasting scalar constant";
    v26[8] = 259;
    v22 = &v24;
    v12 = *(_QWORD *)(a2 + 16);
    if (v12)
    {
      result = mlir::RewriterBase::Listener::classof(v12);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v12 + 64))(v12, *(_QWORD *)(a1 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::ElementwiseMin &>(mlir::anec::ElementwiseMin &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v22);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::anec::Ceil::addOpToNetwork(mlir::anec **a1, uint64_t a2)
{
  mlir::anec *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  void *v7;
  BOOL v8;
  int v9;
  char *v10;
  std::string *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  uint64_t ANECIRDataType;
  void *v15;
  llvm::APFloatBase *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  llvm::APFloatBase *Value;
  void *v21;
  int v22;
  void **v23;
  llvm::detail::DoubleAPFloat *v24;
  unsigned int v25;
  __int16 v26;
  llvm::APFloatBase *v27;
  void *v28;
  uint64_t v29;
  int v30;
  void **v31;
  llvm::detail::DoubleAPFloat *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int IndexFromDim;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  _OWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  int v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  llvm::APFloatBase *v58;
  void *v59;
  void *v60;
  llvm::APFloatBase *v61;
  void *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  llvm::APFloatBase *v66;
  void *v67;
  void *v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  std::string v83;
  std::string v84;
  void *__p;
  unsigned int v86;
  mlir::Operation *v87;
  void *v88[4];
  uint64_t *v89;
  _QWORD v90[5];

  v90[3] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(*((_QWORD *)*a1 + 9) + 24);
  if (*((_DWORD *)*a1 + 9))
    v5 = (uint64_t)*a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  mlir::anec::computeOpKeyString(v3, &v84);
  v7 = *(void **)(*((_QWORD *)v3 + 6) + 16);
  if (v3)
    v8 = v7 == &mlir::detail::TypeIDResolver<mlir::anec::Ceil,void>::id;
  else
    v8 = 0;
  v82 = a2;
  if (v8)
  {
    v9 = 0;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::ClampedRelu,void>::id)
  {
    v9 = 1;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Cos,void>::id)
  {
    v9 = 2;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Degamma,void>::id)
  {
    v9 = 3;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Dirac,void>::id)
  {
    v9 = 4;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Elu,void>::id)
  {
    v9 = 5;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Erf,void>::id)
  {
    v9 = 6;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Exp2,void>::id)
  {
    v9 = 7;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Floor,void>::id)
  {
    v9 = 8;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Gelu,void>::id)
  {
    v9 = 9;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::HighPrecisionSigmoid,void>::id)
  {
    v9 = 10;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id)
  {
    v9 = 11;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::LeakyRelu,void>::id)
  {
    v9 = 12;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Log2,void>::id)
  {
    v9 = 13;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::NRelu,void>::id)
  {
    v9 = 14;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id)
  {
    v9 = 15;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::RoundNearest,void>::id)
  {
    v9 = 16;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Rsqrt,void>::id)
  {
    v9 = 17;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Sigmoid,void>::id)
  {
    v9 = 18;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Sign,void>::id)
  {
    v9 = 19;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Sin,void>::id)
  {
    v9 = 20;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Sqr,void>::id)
  {
    v9 = 21;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Sqrt,void>::id)
  {
    v9 = 22;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Swish,void>::id)
  {
    v9 = 23;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Tanh,void>::id)
  {
    v9 = 24;
  }
  else if (v7 == &mlir::detail::TypeIDResolver<mlir::anec::Trunc,void>::id)
  {
    v9 = 25;
  }
  else
  {
    v9 = 0;
  }
  v10 = (char *)operator new(0xC0uLL);
  *(_QWORD *)v10 = off_1E0E4C6B8;
  v11 = (std::string *)(v10 + 8);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
    *((_QWORD *)v10 + 3) = *((_QWORD *)&v84.__r_.__value_.__l + 2);
  }
  *((_DWORD *)v10 + 8) = 4;
  *((_QWORD *)v10 + 5) = 0;
  v10[48] = 0;
  *((_QWORD *)v10 + 7) = CFSTR("Neuron");
  *((_QWORD *)v10 + 8) = v10 + 80;
  *((_QWORD *)v10 + 9) = 0x100000000;
  *((_QWORD *)v10 + 14) = v10 + 128;
  *((_QWORD *)v10 + 15) = 0x300000000;
  *(_QWORD *)v10 = &unk_1E0E4C6D8;
  *((_DWORD *)v10 + 44) = v9;
  v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52200;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  if (!llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8)))
  {
    v19 = 0;
    goto LABEL_165;
  }
  ANECIRDataType = mlir::anec::getANECIRDataType(v4);
  if ((ANECIRDataType & 0xFF00000000) == 0)
  {
    v19 = 0;
    goto LABEL_165;
  }
  mlir::anec::ANECIRUnit::AddInput((uint64_t)v10, (uint64_t)&v83, ANECIRDataType);
  v15 = *(void **)(*((_QWORD *)v3 + 6) + 16);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::anec::Ceil,void>::id)
    goto LABEL_146;
  if (v15 == &mlir::detail::TypeIDResolver<mlir::anec::ClampedRelu,void>::id)
  {
    v87 = v3;
    __p = (void *)mlir::anec::ClampedRelu::getMaxValueAttr(&v87);
    Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&__p, (uint64_t)v88);
    v21 = v88[1];
    v18 = llvm::APFloatBase::PPCDoubleDouble(Value);
    if (v18 == v21)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v90, (uint64_t)v18);
    else
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v90, (uint64_t)v21);
    if (v18 == (void *)v90[0])
      llvm::detail::DoubleAPFloat::makeLargest((llvm::detail::DoubleAPFloat *)v90, 0);
    else
      llvm::detail::IEEEFloat::makeLargest((llvm::detail::IEEEFloat *)v90, 0);
    if (v18 == v88[1])
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v88[1]);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v88[1]);
    __p = (void *)mlir::anec::ClampedRelu::getMinValueAttr(&v87);
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&__p, (uint64_t)v88);
    if (v18 == (void *)v90[0])
      llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v90, (const llvm::detail::DoubleAPFloat *)&v88[1]);
    else
      llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v90, (const llvm::detail::IEEEFloat *)&v88[1]);
    v23 = v88;
    if (v22)
    {
      v24 = (llvm::detail::DoubleAPFloat *)&v88[1];
    }
    else
    {
      v23 = (void **)&v89;
      v24 = (llvm::detail::DoubleAPFloat *)v90;
    }
    if (v18 == v23[1])
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v24, (llvm::APInt *)&__p);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt(v24, (uint64_t)&__p);
    v25 = v86;
    if (v86 < 0x41)
    {
      v26 = (__int16)__p;
      if ((unint64_t)__p >= 0xFFFF)
        v26 = -1;
      v81 = v26;
LABEL_116:
      if (v18 == v88[1])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v88[1]);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v88[1]);
      __p = (void *)mlir::anec::ClampedRelu::getMaxValueAttr(&v87);
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&__p, (uint64_t)v88);
      if (v18 == (void *)v90[0])
        llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v90, (const llvm::detail::DoubleAPFloat *)&v88[1]);
      else
        llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v90, (const llvm::detail::IEEEFloat *)&v88[1]);
      v31 = v88;
      if (v30)
      {
        v32 = (llvm::detail::DoubleAPFloat *)&v88[1];
      }
      else
      {
        v31 = (void **)&v89;
        v32 = (llvm::detail::DoubleAPFloat *)v90;
      }
      if (v18 == v31[1])
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v32, (llvm::APInt *)&__p);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt(v32, (uint64_t)&__p);
      v33 = v86;
      if (v86 >= 0x41)
      {
        if (v33 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        {
          if (*(_QWORD *)__p >= 0xFFFFuLL)
            LOWORD(v34) = -1;
          else
            v34 = *(_QWORD *)__p;
        }
        else
        {
          LOWORD(v34) = -1;
          if (!__p)
            goto LABEL_139;
        }
        operator delete[](__p);
      }
      else if ((unint64_t)__p >= 0xFFFF)
      {
        LOWORD(v34) = -1;
      }
      else
      {
        LOWORD(v34) = (_WORD)__p;
      }
LABEL_139:
      if (v18 == v88[1])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v88[1]);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v88[1]);
      *((_WORD *)v10 + 93) = v81;
      *((_WORD *)v10 + 92) = v34;
      goto LABEL_143;
    }
    if (v25 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
    {
      v29 = *(_QWORD *)__p;
      if (*(_QWORD *)__p >= 0xFFFFuLL)
        LOWORD(v29) = -1;
      v81 = v29;
    }
    else
    {
      v81 = -1;
      if (!__p)
        goto LABEL_116;
    }
    operator delete[](__p);
    goto LABEL_116;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::anec::Dirac,void>::id
    && v15 != &mlir::detail::TypeIDResolver<mlir::anec::Cos,void>::id
    && v15 != &mlir::detail::TypeIDResolver<mlir::anec::Degamma,void>::id)
  {
    if (v15 == &mlir::detail::TypeIDResolver<mlir::anec::Elu,void>::id)
    {
      v87 = v3;
      __p = (void *)mlir::anec::Tile::getMultipliersAttr(&v87);
      v27 = mlir::FloatAttr::getValue((mlir::FloatAttr *)&__p, (uint64_t)&v89);
      v28 = (void *)v90[0];
      v18 = llvm::APFloatBase::PPCDoubleDouble(v27);
      if (v18 == v28)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v90, (llvm::APInt *)v88);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v90, (uint64_t)v88);
      v54 = (int)v88[1];
      if (LODWORD(v88[1]) < 0x41)
      {
        if (v88[0] < (void *)0x10000)
          *((_WORD *)v10 + 94) = v88[0];
        else
          *((_WORD *)v10 + 94) = -1;
        goto LABEL_143;
      }
      v55 = v54 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v88);
      v56 = v88[0];
      if (v55 <= 0x40)
      {
        v57 = *(_QWORD *)v88[0];
        if (*(_QWORD *)v88[0] >= 0xFFFFuLL)
          LOWORD(v57) = -1;
        *((_WORD *)v10 + 94) = v57;
        operator delete[](v56);
        goto LABEL_143;
      }
      *((_WORD *)v10 + 94) = -1;
      if (!v56)
      {
LABEL_143:
        if (v18 == (void *)v90[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v90);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v90);
        goto LABEL_146;
      }
LABEL_195:
      operator delete[](v56);
      goto LABEL_143;
    }
    if (v15 != &mlir::detail::TypeIDResolver<mlir::anec::HighPrecisionSigmoid,void>::id
      && v15 != &mlir::detail::TypeIDResolver<mlir::anec::Gelu,void>::id
      && v15 != &mlir::detail::TypeIDResolver<mlir::anec::Floor,void>::id
      && v15 != &mlir::detail::TypeIDResolver<mlir::anec::Erf,void>::id
      && v15 != &mlir::detail::TypeIDResolver<mlir::anec::Exp2,void>::id)
    {
      if (v15 == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id)
        goto LABEL_187;
      if (v15 != &mlir::detail::TypeIDResolver<mlir::anec::LeakyRelu,void>::id)
      {
        if (v15 != &mlir::detail::TypeIDResolver<mlir::anec::Log2,void>::id)
        {
          if (v15 != &mlir::detail::TypeIDResolver<mlir::anec::NRelu,void>::id)
          {
            if (v15 != &mlir::detail::TypeIDResolver<mlir::anec::Rsqrt,void>::id)
              goto LABEL_146;
            __p = v3;
            v88[0] = (void *)mlir::anec::Tile::getMultipliersAttr((mlir::Operation **)&__p);
            v16 = mlir::FloatAttr::getValue((mlir::FloatAttr *)v88, (uint64_t)&v89);
            v17 = (void *)v90[0];
            v18 = llvm::APFloatBase::PPCDoubleDouble(v16);
            if (v18 == v17)
              llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v90, (llvm::APInt *)v88);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v90, (uint64_t)v88);
            v77 = (int)v88[1];
            if (LODWORD(v88[1]) >= 0x41)
            {
              v78 = v77 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v88);
              v56 = v88[0];
              if (v78 <= 0x40)
              {
                v79 = *(_QWORD *)v88[0];
                if (*(_QWORD *)v88[0] >= 0xFFFFuLL)
                  LOWORD(v79) = -1;
                *((_WORD *)v10 + 95) = v79;
                goto LABEL_195;
              }
LABEL_194:
              *((_WORD *)v10 + 95) = -1;
              if (!v56)
                goto LABEL_143;
              goto LABEL_195;
            }
            goto LABEL_191;
          }
          __p = v3;
          v88[0] = (void *)mlir::anec::ClampedRelu::getMaxValueAttr((mlir::Operation **)&__p);
          v66 = mlir::FloatAttr::getValue((mlir::FloatAttr *)v88, (uint64_t)&v89);
          v67 = (void *)v90[0];
          v68 = llvm::APFloatBase::PPCDoubleDouble(v66);
          if (v68 == v67)
            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v90, (llvm::APInt *)v88);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v90, (uint64_t)v88);
          v73 = (int)v88[1];
          if (LODWORD(v88[1]) < 0x41)
          {
            if (v88[0] >= (void *)0xFFFF)
              LOWORD(v74) = -1;
            else
              LOWORD(v74) = v88[0];
            goto LABEL_247;
          }
          if (v73 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v88) <= 0x40)
          {
            if (*(_QWORD *)v88[0] >= 0xFFFFuLL)
              LOWORD(v74) = -1;
            else
              v74 = *(_QWORD *)v88[0];
          }
          else
          {
            LOWORD(v74) = -1;
            if (!v88[0])
            {
LABEL_247:
              if (v68 == (void *)v90[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v90);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v90);
              v88[0] = (void *)mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)&__p);
              mlir::FloatAttr::getValue((mlir::FloatAttr *)v88, (uint64_t)&v89);
              if (v68 == (void *)v90[0])
                llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v90, (llvm::APInt *)v88);
              else
                llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v90, (uint64_t)v88);
              v75 = (int)v88[1];
              if (LODWORD(v88[1]) >= 0x41)
              {
                if (v75 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v88) <= 0x40)
                {
                  if (*(_QWORD *)v88[0] >= 0xFFFFuLL)
                    LOWORD(v76) = -1;
                  else
                    v76 = *(_QWORD *)v88[0];
                }
                else
                {
                  LOWORD(v76) = -1;
                  if (!v88[0])
                    goto LABEL_264;
                }
                operator delete[](v88[0]);
              }
              else if (v88[0] >= (void *)0xFFFF)
              {
                LOWORD(v76) = -1;
              }
              else
              {
                LOWORD(v76) = v88[0];
              }
LABEL_264:
              if (v68 == (void *)v90[0])
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v90);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v90);
              *((_WORD *)v10 + 91) = v76;
              *((_WORD *)v10 + 92) = v74;
              goto LABEL_146;
            }
          }
          operator delete[](v88[0]);
          goto LABEL_247;
        }
LABEL_187:
        v87 = v3;
        __p = (void *)mlir::anec::Tile::getMultipliersAttr(&v87);
        v61 = mlir::FloatAttr::getValue((mlir::FloatAttr *)&__p, (uint64_t)&v89);
        v62 = (void *)v90[0];
        v18 = llvm::APFloatBase::PPCDoubleDouble(v61);
        if (v18 == v62)
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v90, (llvm::APInt *)v88);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v90, (uint64_t)v88);
        v63 = (int)v88[1];
        if (LODWORD(v88[1]) >= 0x41)
        {
          v64 = v63 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v88);
          v56 = v88[0];
          if (v64 <= 0x40)
          {
            v65 = *(_QWORD *)v88[0];
            if (*(_QWORD *)v88[0] >= 0xFFFFuLL)
              LOWORD(v65) = -1;
            *((_WORD *)v10 + 95) = v65;
            operator delete[](v56);
            goto LABEL_143;
          }
          goto LABEL_194;
        }
LABEL_191:
        if (v88[0] < (void *)0x10000)
          *((_WORD *)v10 + 95) = v88[0];
        else
          *((_WORD *)v10 + 95) = -1;
        goto LABEL_143;
      }
      __p = v3;
      v88[0] = (void *)mlir::anec::ClampedRelu::getMaxValueAttr((mlir::Operation **)&__p);
      v58 = mlir::FloatAttr::getValue((mlir::FloatAttr *)v88, (uint64_t)&v89);
      v59 = (void *)v90[0];
      v60 = llvm::APFloatBase::PPCDoubleDouble(v58);
      if (v60 == v59)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v90, (llvm::APInt *)v88);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v90, (uint64_t)v88);
      v69 = (int)v88[1];
      if (LODWORD(v88[1]) < 0x41)
      {
        if (v88[0] >= (void *)0xFFFF)
          LOWORD(v70) = -1;
        else
          LOWORD(v70) = v88[0];
        goto LABEL_214;
      }
      if (v69 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v88) <= 0x40)
      {
        if (*(_QWORD *)v88[0] >= 0xFFFFuLL)
          LOWORD(v70) = -1;
        else
          v70 = *(_QWORD *)v88[0];
      }
      else
      {
        LOWORD(v70) = -1;
        if (!v88[0])
        {
LABEL_214:
          if (v60 == (void *)v90[0])
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v90);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v90);
          v88[0] = (void *)mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)&__p);
          mlir::FloatAttr::getValue((mlir::FloatAttr *)v88, (uint64_t)&v89);
          if (v60 == (void *)v90[0])
            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v90, (llvm::APInt *)v88);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v90, (uint64_t)v88);
          v71 = (int)v88[1];
          if (LODWORD(v88[1]) >= 0x41)
          {
            if (v71 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v88) <= 0x40)
            {
              if (*(_QWORD *)v88[0] >= 0xFFFFuLL)
                LOWORD(v72) = -1;
              else
                v72 = *(_QWORD *)v88[0];
            }
            else
            {
              LOWORD(v72) = -1;
              if (!v88[0])
                goto LABEL_231;
            }
            operator delete[](v88[0]);
          }
          else if (v88[0] >= (void *)0xFFFF)
          {
            LOWORD(v72) = -1;
          }
          else
          {
            LOWORD(v72) = v88[0];
          }
LABEL_231:
          if (v60 == (void *)v90[0])
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v90);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v90);
          *((_WORD *)v10 + 90) = v70;
          *((_WORD *)v10 + 91) = v72;
          goto LABEL_146;
        }
      }
      operator delete[](v88[0]);
      goto LABEL_214;
    }
  }
LABEL_146:
  v89 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  v90[0] = v35;
  if (!v89)
  {
    v19 = 0;
    goto LABEL_165;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v36);
  if (v38)
  {
    v39 = IndexFromDim;
    v40 = mlir::anec::getANECIRDataType(NextResultAtOffset);
    if ((v40 & 0xFF00000000) == 0)
    {
      v19 = 0;
      goto LABEL_165;
    }
    v41 = v40;
    v42 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89) + 8 * v39);
    v43 = *((unsigned int *)v10 + 30);
    if (v43 >= *((_DWORD *)v10 + 31))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 112), v10 + 128, v43 + 1, 16);
      LODWORD(v43) = *((_DWORD *)v10 + 30);
    }
    v44 = (_QWORD *)(*((_QWORD *)v10 + 14) + 16 * v43);
    *v44 = v41;
    v44[1] = v42;
    ++*((_DWORD *)v10 + 30);
    v88[0] = v10;
    v88[1] = v12;
    do
      v45 = __ldxr(p_shared_owners);
    while (__stxr(v45 + 1, p_shared_owners));
    v46 = *(_QWORD **)(v82 + 232);
    if ((unint64_t)v46 >= *(_QWORD *)(v82 + 240))
    {
      v49 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(v82 + 224, (__int128 *)v88);
      v48 = (std::__shared_weak_count *)v88[1];
      *(_QWORD *)(v82 + 232) = v49;
      if (!v48)
      {
LABEL_164:
        v19 = 1;
        do
LABEL_165:
          v52 = __ldaxr(p_shared_owners);
        while (__stlxr(v52 - 1, p_shared_owners));
        if (v52)
        {
          if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_168;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
          if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_168:
            if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return v19;
LABEL_172:
            operator delete(v84.__r_.__value_.__l.__data_);
            return v19;
          }
        }
        operator delete(v83.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v19;
        goto LABEL_172;
      }
    }
    else
    {
      *v46 = v10;
      v46[1] = v12;
      do
        v47 = __ldxr(p_shared_owners);
      while (__stxr(v47 + 1, p_shared_owners));
      *(_QWORD *)(v82 + 232) = v46 + 2;
      v48 = v12;
    }
    v50 = (unint64_t *)&v48->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    goto LABEL_164;
  }
  v80 = std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t mlir::anec::`anonymous namespace'::verifyNeuronWithANEC(mlir::MemoryMapperInterface *a1, unint64_t a2, uint64_t *a3)
{
  void *v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  std::ios_base *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  __int128 v23;
  __int128 v24;
  const void **v25[2];
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  __int128 __p;
  __int128 v30;
  int v31;
  uint64_t v32[19];
  void *v33[2];
  _BYTE v34[64];
  char buffer[8];
  _QWORD v36[65];

  v36[63] = *MEMORY[0x1E0C80C00];
  v4 = *(void **)(a3[6] + 16);
  if (a3 && v4 == &mlir::detail::TypeIDResolver<mlir::anec::Ceil,void>::id)
  {
    v5 = CFSTR("Ceil");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::ClampedRelu,void>::id)
  {
    v5 = CFSTR("ClampedReLU");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Cos,void>::id)
  {
    v5 = CFSTR("Cos");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Degamma,void>::id)
  {
    v5 = CFSTR("Degamma");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Dirac,void>::id)
  {
    v5 = CFSTR("Dirac");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Elu,void>::id)
  {
    v5 = CFSTR("ELU");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Erf,void>::id)
  {
    v5 = CFSTR("Erf");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Exp2,void>::id)
  {
    v5 = CFSTR("Exp2");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Floor,void>::id)
  {
    v5 = CFSTR("Floor");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Gelu,void>::id)
  {
    v5 = CFSTR("GELU");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::HighPrecisionSigmoid,void>::id)
  {
    v5 = CFSTR("SigmoidHighPrecision");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id)
  {
    v5 = CFSTR("Inv");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::LeakyRelu,void>::id)
  {
    v5 = CFSTR("LeakyReLU");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Log2,void>::id)
  {
    v5 = CFSTR("Log2");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::NRelu,void>::id)
  {
    v5 = CFSTR("ReLUN");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id)
  {
    v5 = CFSTR("ReLU");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::RoundNearest,void>::id)
  {
    v5 = CFSTR("RoundNearest");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Rsqrt,void>::id)
  {
    v5 = CFSTR("Rsqrt");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Sigmoid,void>::id)
  {
    v5 = CFSTR("Sigmoid");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Sign,void>::id)
  {
    v5 = CFSTR("Sign");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Sin,void>::id)
  {
    v5 = CFSTR("Sin");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Sqr,void>::id)
  {
    v5 = CFSTR("Sqr");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Sqrt,void>::id)
  {
    v5 = CFSTR("Sqrt");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Swish,void>::id)
  {
    v5 = CFSTR("Swish");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Tanh,void>::id)
  {
    v5 = CFSTR("Tanh");
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::anec::Trunc,void>::id)
  {
    v5 = CFSTR("Trunc");
  }
  else
  {
    v5 = 0;
  }
  v24 = 0u;
  v23 = 0u;
  v22 = v5;
  v33[0] = v34;
  v33[1] = (void *)0x100000000;
  v20 = 0;
  v21 = 0;
  v6 = 1;
  *(_QWORD *)buffer = 1;
  v25[0] = 0;
  ANECUnitValidatorCreate();
  if (ANECValidateNeuronLayer())
  {
    v7 = MEMORY[0x1E0DE4FD0];
    v8 = MEMORY[0x1E0DE4FD0] + 104;
    v32[0] = MEMORY[0x1E0DE4FD0] + 104;
    v9 = MEMORY[0x1E0DE4FD0] + 64;
    v10 = MEMORY[0x1E0DE4F50];
    v11 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v12 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v26 = MEMORY[0x1E0DE4FD0] + 64;
    v25[0] = v11;
    *(const void ***)((char *)v25 + (_QWORD)*(v11 - 3)) = v12;
    v25[1] = 0;
    v13 = (std::ios_base *)((char *)v25 + (unint64_t)*(v25[0] - 3));
    std::ios_base::init(v13, &v27);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    v14 = *(_QWORD *)(v10 + 40);
    v26 = *(_QWORD *)(v10 + 32);
    *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v14;
    v25[0] = *(const void ***)(v10 + 8);
    *(const void ***)((char *)v25 + (unint64_t)*(v25[0] - 3)) = *(const void ***)(v10 + 48);
    v32[0] = v8;
    v25[0] = (const void **)(v7 + 24);
    v26 = v9;
    std::streambuf::basic_streambuf();
    v15 = MEMORY[0x1E0DE4FB8] + 16;
    v27 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v30 = 0u;
    v31 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v25[0] = *(const void ***)v10;
    v16 = *(_QWORD *)(v10 + 72);
    *(const void ***)((char *)v25 + (unint64_t)*(v25[0] - 3)) = *(const void ***)(v10 + 64);
    v26 = v16;
    v27 = v15;
    if (SBYTE7(v30) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v32);
    v28 = 260;
    v25[0] = (const void **)&v18;
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v36);
    if (v19 < 0)
      operator delete(v18);
  }
  ANECUnitValidatorDelete();
  if (v33[0] != v34)
    free(v33[0]);
  return v6;
}

BOOL mlir::anec::ElementwiseAdd::mutateOpForReshapeSwap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *ArgAttrsAttr;
  uint64_t v19;
  _QWORD v20[2];

  if (!a5)
    return 0;
  if (a5 == 1)
  {
    LODWORD(v5) = *(_DWORD *)a4;
  }
  else
  {
    v5 = *a4;
    if (*a4 == a4[1])
      return 1;
  }
  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * (v5 ^ 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
    goto LABEL_16;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_16;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_16:
    v17 = 0;
  v20[0] = v7;
  v20[1] = v17;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v20);
  return mlir::ShapedType::getNumElements(ArgAttrsAttr, v19) == 1;
}

uint64_t mlir::anec::Invert::verifyAttributesWithFamily(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t ElementTypeOrSelf;

  v3 = *a1;
  if ((int)a2 > 1)
  ElementTypeOrSelf = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
    return 0;
  v5 = DefiningOp;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v6))
    return 0;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24));
  return mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf);
}

uint64_t mlir::anec::detail::VerifyAttributesWithFamilyInterfaceTrait<mlir::anec::Invert>::getParentFamily(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  mlir::Block *v4;
  uint64_t ParentOp;
  uint64_t (*v6)();
  uint64_t result;
  uint64_t v8;
  void *v9;
  mlir::Block *v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  void *v14;
  mlir::Block *v15;
  uint64_t v16;
  uint64_t (*v17)();
  char v18;
  uint64_t v19;
  void *v20;
  mlir::Block *v21;
  uint64_t v22;
  uint64_t (*v23)();
  char v24;
  uint64_t v25;
  void *v26;
  mlir::Block *v27;
  uint64_t v28;
  uint64_t (*v29)();
  char v30;
  uint64_t v31;
  void *v32;
  mlir::Block *v33;
  uint64_t v34;
  uint64_t (*v35)();
  char v36;

  v2 = *a1;
  v3 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48), v3) & 1) != 0)
    return 6;
  while (1)
  {
    v4 = *(mlir::Block **)(v2 + 16);
    if (!v4)
      break;
    ParentOp = mlir::Block::getParentOp(v4);
    if (!ParentOp)
      break;
    v2 = ParentOp;
    v6 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)6>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)6>::Impl>(void)::Empty>>();
    if (((*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48), v6) & 1) != 0)return 6;
  }
  v8 = *a1;
  v9 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(v8 + 48) + 32))(*(_QWORD *)(v8 + 48), v9) & 1) != 0)
    return 5;
  while (1)
  {
    v10 = *(mlir::Block **)(v8 + 16);
    if (!v10)
      break;
    v11 = mlir::Block::getParentOp(v10);
    if (!v11)
      break;
    v8 = v11;
    v12 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)5>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)5>::Impl>(void)::Empty>>();
    if (((*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(v8 + 48) + 32))(*(_QWORD *)(v8 + 48), v12) & 1) != 0)return 5;
  }
  v13 = *a1;
  v14 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(v13 + 48) + 32))(*(_QWORD *)(v13 + 48), v14) & 1) != 0)
    return 4;
  while (1)
  {
    v15 = *(mlir::Block **)(v13 + 16);
    if (!v15)
      break;
    v16 = mlir::Block::getParentOp(v15);
    if (!v16)
      break;
    v13 = v16;
    v17 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)4>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)4>::Impl>(void)::Empty>>();
    v18 = (*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(v13 + 48) + 32))(*(_QWORD *)(v13 + 48), v17);
    result = 4;
    if ((v18 & 1) != 0)
      return result;
  }
  v19 = *a1;
  v20 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(v19 + 48) + 32))(*(_QWORD *)(v19 + 48), v20) & 1) != 0)
    return 3;
  while (1)
  {
    v21 = *(mlir::Block **)(v19 + 16);
    if (!v21)
      break;
    v22 = mlir::Block::getParentOp(v21);
    if (!v22)
      break;
    v19 = v22;
    v23 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)3>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)3>::Impl>(void)::Empty>>();
    v24 = (*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(v19 + 48) + 32))(*(_QWORD *)(v19 + 48), v23);
    result = 3;
    if ((v24 & 1) != 0)
      return result;
  }
  v25 = *a1;
  v26 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26) & 1) != 0)
    return 2;
  while (1)
  {
    v27 = *(mlir::Block **)(v25 + 16);
    if (!v27)
      break;
    v28 = mlir::Block::getParentOp(v27);
    if (!v28)
      break;
    v25 = v28;
    v29 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl>(void)::Empty>>();
    v30 = (*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v29);
    result = 2;
    if ((v30 & 1) != 0)
      return result;
  }
  v31 = *a1;
  v32 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(v31 + 48) + 32))(*(_QWORD *)(v31 + 48), v32) & 1) != 0)
    return 1;
  while (1)
  {
    v33 = *(mlir::Block **)(v31 + 16);
    if (!v33)
      break;
    v34 = mlir::Block::getParentOp(v33);
    if (!v34)
      break;
    v31 = v34;
    v35 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)1>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)1>::Impl>(void)::Empty>>();
    v36 = (*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(v31 + 48) + 32))(*(_QWORD *)(v31 + 48), v35);
    result = 1;
    if ((v36 & 1) != 0)
      return result;
  }
  mlir::op_definition_impl::verifyTrait<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl<mlir::anec::A11Legacy>>(*a1);
  return 0;
}

BOOL mlir::anec::getExecutionCostFromInputSize(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *ArgAttrsAttr;
  uint64_t v16;
  _QWORD *OperandRange;
  _QWORD v19[2];

  v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v19[0] = v4;
  v19[1] = v14;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
  mlir::ShapedType::getNumElements(ArgAttrsAttr, v16);
  OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19);
}

float mlir::anec::getPoolExecutionCost<mlir::anec::MaxPool>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t KsizeAttr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  mlir::Operation *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  KsizeAttr = mlir::anec::L2NormPool::getKsizeAttr(&v18);
  mlir::anec::L2NormPool::getStrideAttr(&v18);
  v19 = v21;
  v20 = 0x600000000;
  mlir::getValues<unsigned long long>(KsizeAttr, (uint64_t)&v19);
  if ((_DWORD)v20)
  {
    v5 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v5)
    {
      v6 = v5 + 1;
      v7 = (v5 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v8 = (uint64_t *)((char *)v19 + 8 * v7);
      v9 = (char *)v19 + 8;
      v10 = 1;
      v11 = v7;
      v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      v13 = v12 * v10;
      if (v6 == v7)
        goto LABEL_10;
    }
    else
    {
      v13 = 1;
      v8 = (uint64_t *)v19;
    }
    do
    {
      v14 = *v8++;
      v13 *= v14;
    }
    while (v8 != (uint64_t *)((char *)v19 + 8 * v20));
  }
LABEL_10:
  v16 = v15;
  if (v19 != v21)
    free(v19);
  return v16;
}

float mlir::anec::getPoolExecutionCost<mlir::anec::AveragePool>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t KsizeAttr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  mlir::Operation *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(&v18);
  mlir::anec::AveragePool::getStrideAttr(&v18);
  v19 = v21;
  v20 = 0x600000000;
  mlir::getValues<unsigned long long>(KsizeAttr, (uint64_t)&v19);
  if ((_DWORD)v20)
  {
    v5 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v5)
    {
      v6 = v5 + 1;
      v7 = (v5 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v8 = (uint64_t *)((char *)v19 + 8 * v7);
      v9 = (char *)v19 + 8;
      v10 = 1;
      v11 = v7;
      v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      v13 = v12 * v10;
      if (v6 == v7)
        goto LABEL_10;
    }
    else
    {
      v13 = 1;
      v8 = (uint64_t *)v19;
    }
    do
    {
      v14 = *v8++;
      v13 *= v14;
    }
    while (v8 != (uint64_t *)((char *)v19 + 8 * v20));
  }
LABEL_10:
  v16 = v15;
  if (v19 != v21)
    free(v19);
  return v16;
}

BOOL mlir::anec::`anonymous namespace'::getElementWiseOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *ArgAttrsAttr;
  uint64_t v16;
  _QWORD *OperandRange;
  _QWORD v19[2];

  v4 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v19[0] = v4;
  v19[1] = v14;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
  mlir::ShapedType::getNumElements(ArgAttrsAttr, v16);
  OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19);
}

float mlir::anec::InstanceNorm::getExecutionCost(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int IntOrFloatBitWidth;
  uint64_t *ArgAttrsAttr;
  uint64_t v17;
  uint64_t NumElements;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  float v36;
  float v37;
  _BOOL4 isF16;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  _BOOL4 v44;
  float v45;
  float v46;
  float v47;
  float v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t OperandRange;

  v4 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v50 = v4;
  v51 = v14;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
  NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v17);
  if (*(_DWORD *)(*a1 + 36))
    v19 = *a1 - 16;
  else
    v19 = 0;
  v20 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v20)
    goto LABEL_23;
  v21 = *v20;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_23;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_23:
    v30 = 0;
  v31 = NumElements * (IntOrFloatBitWidth >> 3);
  v32 = (float)v31;
  v50 = v20;
  v51 = v30;
  v33 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50);
  v34 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
  v36 = (float)mlir::ShapedType::getNumElements(v34, v35);
  if (v31 <= 0x200000)
    v32 = 0.0;
  OperandRange = v33;
  v37 = *(float *)(a2 + 40) * 1.0e12;
  isF16 = mlir::Type::isF16((mlir::Type *)&OperandRange);
  v39 = v37 + v37;
  if (isF16)
    v39 = v37;
  v40 = v36 / v39;
  v41 = *(float *)(a2 + 40);
  if (v40 >= (float)(v32 / (float)(*(float *)(a2 + 44) * 1000000000.0)))
    v42 = v40;
  else
    v42 = v32 / (float)(*(float *)(a2 + 44) * 1000000000.0);
  OperandRange = v33;
  v43 = v41 * 1.0e12;
  v44 = mlir::Type::isF16((mlir::Type *)&OperandRange);
  v45 = v43 + v43;
  if (v44)
    v45 = v43;
  v46 = v36 / v45;
  if (v46 < (float)(v32 / (float)(*(float *)(a2 + 44) * 1000000000.0)))
    v46 = v32 / (float)(*(float *)(a2 + 44) * 1000000000.0);
  v47 = v42 + v46;
  return v48 + v47;
}

uint64_t mlir::anec::ElementwiseAdd::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53708;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::`anonymous namespace'::generateANECValidateError<ANECElementWiseLayerDescAlternate>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23[8];
  void *__p[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];
  char buffer[512];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0DE4FD0];
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v27[0] = MEMORY[0x1E0DE4FD0] + 104;
  v6 = MEMORY[0x1E0DE4FD0] + 64;
  v7 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v22 = MEMORY[0x1E0DE4FD0] + 64;
  v21[0] = v8;
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v8 - 24)) = v9;
  v21[1] = 0;
  v10 = (std::ios_base *)((char *)v21 + *(_QWORD *)(v21[0] - 24));
  std::ios_base::init(v10, v23);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v7[5];
  v22 = v7[4];
  *(uint64_t *)((char *)&v23[-1] + *(_QWORD *)(v22 - 24)) = v11;
  v21[0] = v7[1];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = v7[6];
  v27[0] = v5;
  v21[0] = v4 + 24;
  v22 = v6;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8] + 16;
  v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  v26 = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Invalid configuration", 21);
  if (a1)
  {
    if (a2)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)" for the following reasons: ", 28);
      v13 = *a2;
      if (*a2)
      {
        v14 = 1;
        do
        {
          CFStringGetCString((CFStringRef)a2[v14], buffer, 512, 0x8000100u);
          v15 = strlen(buffer);
          v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)buffer, v15);
          if (v14 == v13)
            v17 = "";
          else
            v17 = ", ";
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, 2 * (v14 != v13));
          v13 = *a2;
        }
        while (*a2 > v14++);
      }
    }
  }
  std::stringbuf::str();
  v21[0] = *v7;
  v19 = v7[9];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = v7[8];
  v22 = v19;
  v23[0] = v12;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186DA15C0](v27);
}

uint64_t mlir::anec::ElementwiseMult::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53718;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseMin::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53728;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseMax::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53738;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseSub::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53748;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseDiv::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53758;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwisePower::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53768;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseEqual::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53778;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseNotEqual::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53788;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseLessThan::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53798;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseLessThanEqual::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E537A8;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseGreaterThanEqual::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E537B8;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseGreaterThan::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E537C8;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseAbs::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E537D8;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseEqualZero::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E537E8;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseGreaterThanEqualZero::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E537F8;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseGreaterThanZero::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53808;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseLessThanEqualZero::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53818;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseLessThanZero::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53828;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseNotEqualZero::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53838;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseSquare::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p;
  char v8;
  void **p_p;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v13 = xmmword_1E0E53848;
  v16[0] = v17;
  v16[1] = (void *)0x100000000;
  v14 = 1;
  p_p = 0;
  ANECUnitValidatorCreate();
  v11 = 0;
  v12 = 0;
  if (ANECValidateElementWiseLayer())
  {
    v4 = (uint64_t *)*a1;
    v10 = 260;
    p_p = &__p;
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
    if (v14)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v15);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = 1;
  }
  ANECUnitValidatorDelete();
  if (v16[0] != v17)
    free(v16[0]);
  return v5;
}

uint64_t mlir::anec::ElementwiseAbs::addOpToNetwork(mlir::anec::_anonymous_namespace_ **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

unint64_t mlir::anec::Rsqrt::fold(mlir::Operation **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *Type;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  llvm::APFloatBase *v19;
  void *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *__p;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  _QWORD v36[4];
  void *v37[10];
  void *v38[10];
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  _QWORD v42[4];

  v42[3] = *MEMORY[0x1E0C80C00];
  v3 = **(uint64_t ***)(a2 + 40);
  if (!v3)
  {
    v39 = 0;
    v40 = 0;
    return 0;
  }
  v4 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v3);
  v39 = v4;
  v40 = v5;
  if (!v4)
    return 0;
  mlir::mps::CPUNDArray::CPUNDArray(v38, v4);
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v39);
  v7 = Type;
  if (!Type)
    goto LABEL_12;
  v8 = *Type;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_12;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_12:
    v17 = 0;
  mlir::mps::CPUNDArray::CPUNDArray(v37, v7, v17, 0);
  v36[0] = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)v36, (uint64_t)&v41);
  v18 = llvm::APFloat::convertToDouble(&v41);
  v19 = (llvm::APFloatBase *)mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v36, 6, v18);
  v20 = (void *)v42[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v19) == v20)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v42);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v42);
  v22 = operator new(8uLL);
  v41 = v22;
  *v22 = v38;
  v42[0] = v22 + 1;
  v42[1] = v22 + 1;
  v23 = operator new(8uLL);
  v33 = v23;
  *v23 = v37;
  v34 = v23 + 1;
  v35 = v23 + 1;
  v24 = operator new(8uLL);
  v30 = v24;
  *v24 = 0;
  v31 = v24 + 1;
  v32 = v24 + 1;
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = 0;
  v28 = v25 + 1;
  v29 = v25 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v36, (uint64_t *)&v41, (uint64_t **)&v33, (uint64_t)&v30, (uint64_t)&__p, 0, (uint64_t)v38[2], (uint64_t)v36);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v41)
  {
    v42[0] = v41;
    operator delete(v41);
  }
  v21 = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v37, 0, 0) & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray(v37);
  mlir::mps::CPUNDArray::~CPUNDArray(v38);
  return v21;
}

llvm::detail::DoubleAPFloat *mlir::anec::Rsqrt::getEpsilon@<X0>(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t MultipliersAttr;

  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(this);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&MultipliersAttr, a2);
}

uint64_t mlir::anec::inferPoolOpReturnTypes(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *ArgAttrsAttr;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t OperandRange;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[2];
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53[2];
  _BYTE v54[48];
  void *v55[2];
  _BYTE v56[48];
  void *v57;
  uint64_t v58;
  _QWORD v59[23];

  v59[22] = *MEMORY[0x1E0C80C00];
  v14 = (_QWORD *)mlir::TypeRange::dereference_iterator(a7, 0);
  v15 = v14;
  if (!v14)
    goto LABEL_10;
  v16 = *v14;
  v17 = mlir::TypeID::get<mlir::ShapedType>();
  v18 = *(unsigned int *)(v16 + 16);
  if (!(_DWORD)v18)
    goto LABEL_10;
  v19 = *(_QWORD **)(v16 + 8);
  v20 = &v19[2 * v18];
  do
  {
    v21 = v18 >> 1;
    v22 = &v19[2 * (v18 >> 1)];
    v24 = *v22;
    v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17)
      v19 = v23;
    else
      v18 = v21;
  }
  while (v18);
  if (v19 != v20 && *v19 == v17)
    v25 = v19[1];
  else
LABEL_10:
    v25 = 0;
  v47[0] = v15;
  v47[1] = v25;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
  if (v26)
  {
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v57 = v59;
    v58 = 0x600000000;
    mlir::getValues<unsigned long long>(a4, (uint64_t)&v57);
    v55[0] = v56;
    v55[1] = (void *)0x600000000;
    mlir::getValues<unsigned long long>(a5, (uint64_t)v55);
    v53[0] = v54;
    v53[1] = (void *)0x600000000;
    mlir::getValues<unsigned long long>(a6, (uint64_t)v53);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v29 = v28;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v31 = v30;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v33 = v32;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v35 = v34;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v36 = (unint64_t)(*(_QWORD *)v57
                           + ArgAttrsAttr[v35 - 2]
                           + *((_QWORD *)v57 + 1)
                           - *(_QWORD *)v55[0]
                           + *(_QWORD *)v53[0])
        / *(_QWORD *)v53[0];
    v38 = ArgAttrsAttr[v33 - 3];
    v39 = (unint64_t)(*((_QWORD *)v57 + 2)
                           + ArgAttrsAttr[v37 - 1]
                           + *((_QWORD *)v57 + 3)
                           - *((_QWORD *)v55[0] + 1)
                           + *((_QWORD *)v53[0] + 1))
        / *((_QWORD *)v53[0] + 1);
    if (v29 == 5)
    {
      v40 = (unint64_t)(*((_QWORD *)v57 + 4)
                             + ArgAttrsAttr[v31 - 4]
                             + *((_QWORD *)v57 + 5)
                             - *((_QWORD *)v55[0] + 2)
                             + *((_QWORD *)v53[0] + 2))
          / *((_QWORD *)v53[0] + 2);
      v48 = *ArgAttrsAttr;
      v49 = v40;
      v50 = v38;
      v51 = v36;
      v52 = v39;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47);
      v42 = 5;
    }
    else
    {
      v48 = *ArgAttrsAttr;
      v49 = v38;
      v50 = v36;
      v51 = v39;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47);
      v42 = 4;
    }
    v44 = mlir::MemRefType::get(&v48, (mlir::AffineMap *)v42, OperandRange, 0, 0, 0);
    v45 = *(unsigned int *)(a9 + 8);
    if (v45 >= *(_DWORD *)(a9 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v45 + 1, 8);
      LODWORD(v45) = *(_DWORD *)(a9 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a9 + 8 * v45) = v44;
    ++*(_DWORD *)(a9 + 8);
    if (v53[0] != v54)
      free(v53[0]);
    if (v55[0] != v56)
      free(v55[0]);
    if (v57 != v59)
      free(v57);
    return 1;
  }
  else if (a2)
  {
    mlir::emitError(a1, (uint64_t)&v57);
    if (v57)
      mlir::Diagnostic::operator<<((uint64_t)&v58, "input must be a rank 4 tensor of shape [N, Cin, H, W]or rank 5 tensor of shape [N, D, Cin, H, W]");
    v43 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v57);
    if (v57)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v57);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v58);
  }
  else
  {
    return 0;
  }
  return v43;
}

uint64_t mlir::anec::MaxPool::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  mlir::CallGraphNode *v19;
  uint64_t v20;
  mlir::CallGraphNode *v21;
  uint64_t v22;
  char v23;
  mlir::CallGraphNode *Value;
  uint64_t v25;
  mlir::CallGraphNode *v26;
  char v27;
  uint64_t v28;
  mlir::CallGraphNode *v30;
  mlir::CallGraphNode *v31;
  mlir::CallGraphNode *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v36 = a6;
  LOBYTE(v37) = 0;
  v38 = 0;
  v39 = a7;
  v40 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v36);
    if (v38)
      v38 = 0;
    mlir::OperationName::OperationName(&v37, "anec.max_pool", 13, Context);
    v38 = 1;
  }
  v41 = a4;
  v42 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::MaxPoolAdaptor::verify(&v36, v18))
    return 0;
  v43[0] = v41;
  v43[1] = 0;
  mlir::ValueRange::dereference_iterator(v43, 0);
  v19 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36) + 16);
  v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v21 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v19, (mlir::CallGraphNode *)(v20 - 16), *(_QWORD *)(*(_QWORD *)(v37 + 96) + 8));
  v22 = 0;
  if ((v23 & 1) != 0)
    v22 = *((_QWORD *)v21 + 1);
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  v25 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v26 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v25 - 32), **(_QWORD **)(v37 + 96));
  if ((v27 & 1) != 0)
    v28 = *((_QWORD *)v26 + 1);
  else
    v28 = 0;
  v30 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36) + 32);
  v31 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v32 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 + 96) + 16));
  if ((v34 & 1) != 0)
    v35 = *((_QWORD *)v32 + 1);
  else
    v35 = 0;
  return mlir::anec::inferPoolOpReturnTypes((uint64_t)a2, a3, v33, v22, v28, v35, a9, a10, a11);
}

uint64_t mlir::anec::MaxPoolAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *Type;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t **ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v46;
  uint64_t OperandRange;
  uint64_t Value;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD v59[24];

  v59[23] = *MEMORY[0x1E0C80C00];
  v55 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v55); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v55))
    {
      v5 = "'anec.max_pool' op requires attribute 'ksize'";
      goto LABEL_53;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (uint64_t *)i[1];
  v54 = v6;
  while (1)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v55))
    {
      v5 = "'anec.max_pool' op requires attribute 'padding'";
      goto LABEL_53;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
    i += 2;
  }
  v7 = (uint64_t *)i[1];
  v50 = v7;
  while (1)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v55))
    {
      v5 = "'anec.max_pool' op requires attribute 'stride'";
      goto LABEL_53;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
    i += 2;
  }
  v8 = (uint64_t *)i[1];
  if (!v8)
    goto LABEL_62;
  if (!mlir::DenseIntElementsAttr::classof(i[1]))
    goto LABEL_51;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ElementsAttr>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_26;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_26:
    v18 = 0;
  v51 = v8;
  v52 = v18;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v51);
  v20 = Type;
  if (!Type)
    goto LABEL_36;
  v21 = *Type;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_36;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_36:
    v30 = 0;
  v58 = v20;
  v59[0] = v30;
  ArgAttrsAttr = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
  v57 = 3;
  if (v32 != 1)
    goto LABEL_51;
  if (*ArgAttrsAttr == (uint64_t *)v57
    && (OperandRange = (uint64_t)v8,
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&OperandRange),
        v49 = v33,
        v56 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
        mlir::Type::isUnsignedInteger((mlir::Type *)&v56, 64)))
  {
LABEL_62:
    if (!v7)
      goto LABEL_63;
    if (mlir::DenseIntElementsAttr::classof((uint64_t)v7))
    {
      v51 = mlir::Attribute::cast<mlir::ElementsAttr>(&v50);
      v52 = v34;
      v57 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v51);
      v58 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v57);
      v59[0] = v35;
      v36 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
      v56 = 6;
      if (v37 == 1 && *v36 == v56)
      {
        v46 = v50;
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
        v49 = v38;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        {
LABEL_63:
          if (!v6)
            return 1;
          if (!mlir::DenseIntElementsAttr::classof((uint64_t)v6))
            goto LABEL_57;
          v51 = mlir::Attribute::cast<mlir::ElementsAttr>(&v54);
          v52 = v39;
          v57 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v51);
          v58 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v57);
          v59[0] = v40;
          v41 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
          v56 = 3;
          if (v42 != 1)
            goto LABEL_57;
          if (*v41 == v56)
          {
            v46 = v54;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
            v49 = v43;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
              return 1;
          }
LABEL_57:
          v51 = (uint64_t *)"'anec.max_pool' op attribute 'ksize' failed to satisfy constraint: ui64 elements attribute of shape {3}";
          v53 = 259;
          mlir::emitError(a2, (uint64_t)&v51, (uint64_t)&v58);
          v44 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v58);
          return v44;
        }
      }
    }
    v5 = "'anec.max_pool' op attribute 'padding' failed to satisfy constraint: ui64 elements attribute of shape {6}";
  }
  else
  {
LABEL_51:
    v5 = "'anec.max_pool' op attribute 'stride' failed to satisfy constraint: ui64 elements attribute of shape {3}";
  }
LABEL_53:
  v51 = (uint64_t *)v5;
  v53 = 259;
  mlir::emitError(a2, (uint64_t)&v51, (uint64_t)&v58);
  v44 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
  if (v58)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v59);
  return v44;
}

uint64_t mlir::anec::AveragePool::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  mlir::CallGraphNode *v19;
  uint64_t v20;
  mlir::CallGraphNode *v21;
  uint64_t v22;
  char v23;
  mlir::CallGraphNode *Value;
  uint64_t v25;
  mlir::CallGraphNode *v26;
  char v27;
  uint64_t v28;
  mlir::CallGraphNode *v30;
  mlir::CallGraphNode *v31;
  mlir::CallGraphNode *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v36 = a6;
  LOBYTE(v37) = 0;
  v38 = 0;
  v39 = a7;
  v40 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v36);
    if (v38)
      v38 = 0;
    mlir::OperationName::OperationName(&v37, "anec.average_pool", 17, Context);
    v38 = 1;
  }
  v41 = a4;
  v42 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::AveragePoolAdaptor::verify(&v36, v18))
    return 0;
  v43[0] = v41;
  v43[1] = 0;
  mlir::ValueRange::dereference_iterator(v43, 0);
  v19 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36) + 16);
  v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v21 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v19, (mlir::CallGraphNode *)(v20 - 16), *(_QWORD *)(*(_QWORD *)(v37 + 96) + 16));
  v22 = 0;
  if ((v23 & 1) != 0)
    v22 = *((_QWORD *)v21 + 1);
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  v25 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v26 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v25 - 32), *(_QWORD *)(*(_QWORD *)(v37 + 96) + 8));
  if ((v27 & 1) != 0)
    v28 = *((_QWORD *)v26 + 1);
  else
    v28 = 0;
  v30 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36) + 32);
  v31 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v32 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 + 96) + 24));
  if ((v34 & 1) != 0)
    v35 = *((_QWORD *)v32 + 1);
  else
    v35 = 0;
  return mlir::anec::inferPoolOpReturnTypes((uint64_t)a2, a3, v33, v22, v28, v35, a9, a10, a11);
}

uint64_t mlir::anec::AveragePoolAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *Value;
  uint64_t v5;
  const char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *Type;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t **ArgAttrsAttr;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  __int16 v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t OperandRange;
  uint64_t v59;
  uint64_t *v60;
  _QWORD v61[24];

  v61[23] = *MEMORY[0x1E0C80C00];
  v57 = *a1;
  Value = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v57);
  if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v57))
  {
LABEL_7:
    v6 = "'anec.average_pool' op requires attribute 'ksize'";
LABEL_57:
    v53 = (uint64_t *)v6;
    v55 = 259;
    mlir::emitError(a2, (uint64_t)&v53, (uint64_t)&v60);
    v46 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v60);
    if (v60)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v61);
    return v46;
  }
  v5 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      v5 = Value[1];
    Value += 2;
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v57))
      goto LABEL_7;
  }
  v7 = (uint64_t *)Value[1];
  v56 = v7;
  while (1)
  {
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v57))
    {
      v6 = "'anec.average_pool' op requires attribute 'padding'";
      goto LABEL_57;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      break;
    Value += 2;
  }
  v8 = (uint64_t *)Value[1];
  v52 = v8;
  while (1)
  {
    if (Value == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v57))
    {
      v6 = "'anec.average_pool' op requires attribute 'stride'";
      goto LABEL_57;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      break;
    Value += 2;
  }
  v9 = (uint64_t *)Value[1];
  if (v9)
  {
    if (!mlir::DenseIntElementsAttr::classof(Value[1]))
      goto LABEL_55;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ElementsAttr>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_28;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_28:
      v19 = 0;
    v53 = v9;
    v54 = v19;
    Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v53);
    v21 = Type;
    if (!Type)
      goto LABEL_38;
    v22 = *Type;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_38;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
      v31 = v25[1];
    else
LABEL_38:
      v31 = 0;
    v60 = v21;
    v61[0] = v31;
    ArgAttrsAttr = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
    v59 = 3;
    if (v33 != 1
      || *ArgAttrsAttr != (uint64_t *)v59
      || (v49 = (uint64_t)v9,
          v50 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v49),
          v51 = v34,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
LABEL_55:
      v6 = "'anec.average_pool' op attribute 'stride' failed to satisfy constraint: ui64 elements attribute of shape {3}";
      goto LABEL_57;
    }
  }
  if (v8)
  {
    if (!mlir::DenseIntElementsAttr::classof((uint64_t)v8))
      goto LABEL_56;
    v53 = mlir::Attribute::cast<mlir::ElementsAttr>(&v52);
    v54 = v35;
    v59 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v53);
    v60 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v59);
    v61[0] = v36;
    v37 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
    OperandRange = 6;
    if (v38 != 1
      || *v37 != OperandRange
      || (v48 = v52,
          v50 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v48),
          v51 = v39,
          v49 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&v49, 64)))
    {
LABEL_56:
      v6 = "'anec.average_pool' op attribute 'padding' failed to satisfy constraint: ui64 elements attribute of shape {6}";
      goto LABEL_57;
    }
  }
  if (!v7)
    goto LABEL_53;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7))
    goto LABEL_61;
  v53 = mlir::Attribute::cast<mlir::ElementsAttr>(&v56);
  v54 = v40;
  v59 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v53);
  v60 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v59);
  v61[0] = v41;
  v42 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
  OperandRange = 3;
  if (v43 != 1)
    goto LABEL_61;
  if (*v42 == OperandRange
    && (v48 = v56,
        v50 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v48),
        v51 = v44,
        v49 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50),
        mlir::Type::isUnsignedInteger((mlir::Type *)&v49, 64)))
  {
LABEL_53:
    if (!v5 || *(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 1;
    v45 = "'anec.average_pool' op attribute 'inc_pad' failed to satisfy constraint: unit attribute";
  }
  else
  {
LABEL_61:
    v45 = "'anec.average_pool' op attribute 'ksize' failed to satisfy constraint: ui64 elements attribute of shape {3}";
  }
  v53 = (uint64_t *)v45;
  v55 = 259;
  mlir::emitError(a2, (uint64_t)&v53, (uint64_t)&v60);
  v46 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v60);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v60);
  return v46;
}

uint64_t mlir::anec::L2NormPool::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  mlir::CallGraphNode *v19;
  uint64_t v20;
  mlir::CallGraphNode *v21;
  uint64_t v22;
  char v23;
  mlir::CallGraphNode *Value;
  uint64_t v25;
  mlir::CallGraphNode *v26;
  char v27;
  uint64_t v28;
  mlir::CallGraphNode *v30;
  mlir::CallGraphNode *v31;
  mlir::CallGraphNode *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v36 = a6;
  LOBYTE(v37) = 0;
  v38 = 0;
  v39 = a7;
  v40 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v36);
    if (v38)
      v38 = 0;
    mlir::OperationName::OperationName(&v37, "anec.l2norm_pool", 16, Context);
    v38 = 1;
  }
  v41 = a4;
  v42 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::L2NormPoolAdaptor::verify(&v36, v18))
    return 0;
  v43[0] = v41;
  v43[1] = 0;
  mlir::ValueRange::dereference_iterator(v43, 0);
  v19 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36) + 16);
  v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v21 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v19, (mlir::CallGraphNode *)(v20 - 16), *(_QWORD *)(*(_QWORD *)(v37 + 96) + 8));
  v22 = 0;
  if ((v23 & 1) != 0)
    v22 = *((_QWORD *)v21 + 1);
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  v25 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v26 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v25 - 32), **(_QWORD **)(v37 + 96));
  if ((v27 & 1) != 0)
    v28 = *((_QWORD *)v26 + 1);
  else
    v28 = 0;
  v30 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36) + 32);
  v31 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v36);
  v32 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 + 96) + 16));
  if ((v34 & 1) != 0)
    v35 = *((_QWORD *)v32 + 1);
  else
    v35 = 0;
  return mlir::anec::inferPoolOpReturnTypes((uint64_t)a2, a3, v33, v22, v28, v35, a9, a10, a11);
}

uint64_t mlir::anec::L2NormPoolAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *Type;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t **ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v46;
  uint64_t OperandRange;
  uint64_t Value;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD v59[24];

  v59[23] = *MEMORY[0x1E0C80C00];
  v55 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v55); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v55))
    {
      v5 = "'anec.l2norm_pool' op requires attribute 'ksize'";
      goto LABEL_53;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (uint64_t *)i[1];
  v54 = v6;
  while (1)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v55))
    {
      v5 = "'anec.l2norm_pool' op requires attribute 'padding'";
      goto LABEL_53;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
    i += 2;
  }
  v7 = (uint64_t *)i[1];
  v50 = v7;
  while (1)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v55))
    {
      v5 = "'anec.l2norm_pool' op requires attribute 'stride'";
      goto LABEL_53;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
    i += 2;
  }
  v8 = (uint64_t *)i[1];
  if (!v8)
    goto LABEL_62;
  if (!mlir::DenseIntElementsAttr::classof(i[1]))
    goto LABEL_51;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ElementsAttr>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_26;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_26:
    v18 = 0;
  v51 = v8;
  v52 = v18;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v51);
  v20 = Type;
  if (!Type)
    goto LABEL_36;
  v21 = *Type;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_36;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_36:
    v30 = 0;
  v58 = v20;
  v59[0] = v30;
  ArgAttrsAttr = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
  v57 = 3;
  if (v32 != 1)
    goto LABEL_51;
  if (*ArgAttrsAttr == (uint64_t *)v57
    && (OperandRange = (uint64_t)v8,
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&OperandRange),
        v49 = v33,
        v56 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
        mlir::Type::isUnsignedInteger((mlir::Type *)&v56, 64)))
  {
LABEL_62:
    if (!v7)
      goto LABEL_63;
    if (mlir::DenseIntElementsAttr::classof((uint64_t)v7))
    {
      v51 = mlir::Attribute::cast<mlir::ElementsAttr>(&v50);
      v52 = v34;
      v57 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v51);
      v58 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v57);
      v59[0] = v35;
      v36 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
      v56 = 6;
      if (v37 == 1 && *v36 == v56)
      {
        v46 = v50;
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
        v49 = v38;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        {
LABEL_63:
          if (!v6)
            return 1;
          if (!mlir::DenseIntElementsAttr::classof((uint64_t)v6))
            goto LABEL_57;
          v51 = mlir::Attribute::cast<mlir::ElementsAttr>(&v54);
          v52 = v39;
          v57 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v51);
          v58 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v57);
          v59[0] = v40;
          v41 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
          v56 = 3;
          if (v42 != 1)
            goto LABEL_57;
          if (*v41 == v56)
          {
            v46 = v54;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
            v49 = v43;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
              return 1;
          }
LABEL_57:
          v51 = (uint64_t *)"'anec.l2norm_pool' op attribute 'ksize' failed to satisfy constraint: ui64 elements attribute of shape {3}";
          v53 = 259;
          mlir::emitError(a2, (uint64_t)&v51, (uint64_t)&v58);
          v44 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v58);
          return v44;
        }
      }
    }
    v5 = "'anec.l2norm_pool' op attribute 'padding' failed to satisfy constraint: ui64 elements attribute of shape {6}";
  }
  else
  {
LABEL_51:
    v5 = "'anec.l2norm_pool' op attribute 'stride' failed to satisfy constraint: ui64 elements attribute of shape {3}";
  }
LABEL_53:
  v51 = (uint64_t *)v5;
  v53 = 259;
  mlir::emitError(a2, (uint64_t)&v51, (uint64_t)&v58);
  v44 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
  if (v58)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v59);
  return v44;
}

uint64_t mlir::anec::AveragePool::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  mlir::Operation *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t KsizeAttr;
  uint64_t StrideAttr;
  uint64_t PaddingAttr;
  char v12;
  void *v14[2];
  _BYTE v15[48];
  void *v16[2];
  _BYTE v17[48];
  void *v18[2];
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  ANECPoolLayerDescInitialize();
  ZinIrPoolingTypeToCFString(1u);
  v18[0] = v19;
  v18[1] = (void *)0x600000000;
  v16[0] = v17;
  v16[1] = (void *)0x600000000;
  v14[0] = v15;
  v14[1] = (void *)0x600000000;
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v8 = v7;
  KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(a1);
  mlir::getValues<unsigned long long>(KsizeAttr, (uint64_t)v18);
  StrideAttr = mlir::anec::AveragePool::getStrideAttr(a1);
  mlir::getValues<unsigned long long>(StrideAttr, (uint64_t)v16);
  PaddingAttr = mlir::anec::AveragePool::getPaddingAttr(a1);
  mlir::getValues<unsigned long long>(PaddingAttr, (uint64_t)v14);
  mlir::anec::getIndexFromDim(1, v8);
  if (!v12)
    std::__throw_bad_optional_access[abi:nn180100]();
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  if (v14[0] != v15)
    free(v14[0]);
  if (v16[0] != v17)
    free(v16[0]);
  if (v18[0] != v19)
    free(v18[0]);
  return mlir::anec::verifyPoolWithANEC((uint64_t)v6, a2, a3);
}

uint64_t mlir::anec::verifyPoolWithANEC(uint64_t a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  void *v17;
  char v18;
  void **v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25[8];
  __int128 __p;
  __int128 v27;
  int v28;
  uint64_t v29[19];
  void *v30[2];
  _BYTE v31[64];
  char buffer[8];
  _QWORD v33[65];

  v33[63] = *MEMORY[0x1E0C80C00];
  v30[0] = v31;
  v30[1] = (void *)0x100000000;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)buffer = 1;
  v23[0] = 0;
  ANECUnitValidatorCreate();
  if (ANECValidatePoolLayer())
  {
    v16 = (uint64_t *)a1;
    v4 = MEMORY[0x1E0DE4FD0];
    v5 = MEMORY[0x1E0DE4FD0] + 104;
    v29[0] = MEMORY[0x1E0DE4FD0] + 104;
    v6 = MEMORY[0x1E0DE4FD0] + 64;
    v7 = (_QWORD *)MEMORY[0x1E0DE4F50];
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
    v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
    v24 = MEMORY[0x1E0DE4FD0] + 64;
    v23[0] = v8;
    *(_QWORD *)((char *)v23 + *(_QWORD *)(v8 - 24)) = v9;
    v23[1] = 0;
    v10 = (std::ios_base *)((char *)v23 + *(_QWORD *)(v23[0] - 24));
    std::ios_base::init(v10, v25);
    v10[1].__vftable = 0;
    v10[1].__fmtflags_ = -1;
    v11 = v7[5];
    v24 = v7[4];
    *(uint64_t *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = v11;
    v23[0] = v7[1];
    *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = v7[6];
    v29[0] = v5;
    v23[0] = v4 + 24;
    v24 = v6;
    std::streambuf::basic_streambuf();
    v12 = MEMORY[0x1E0DE4FB8] + 16;
    v25[0] = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v27 = 0u;
    v28 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v23[0] = *v7;
    v13 = v7[9];
    *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = v7[8];
    v24 = v13;
    v25[0] = v12;
    if (SBYTE7(v27) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v29);
    v20 = 260;
    v19 = &v17;
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v33);
    if (v18 < 0)
      operator delete(v17);
  }
  else
  {
    v14 = 1;
  }
  ANECUnitValidatorDelete();
  if (v30[0] != v31)
    free(v30[0]);
  return v14;
}

uint64_t mlir::anec::MaxPool::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  mlir::Operation *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t KsizeAttr;
  uint64_t StrideAttr;
  uint64_t PaddingAttr;
  char v12;
  void *v14[2];
  _BYTE v15[48];
  void *v16[2];
  _BYTE v17[48];
  void *v18[2];
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  ANECPoolLayerDescInitialize();
  ZinIrPoolingTypeToCFString(2u);
  v18[0] = v19;
  v18[1] = (void *)0x600000000;
  v16[0] = v17;
  v16[1] = (void *)0x600000000;
  v14[0] = v15;
  v14[1] = (void *)0x600000000;
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v8 = v7;
  KsizeAttr = mlir::anec::L2NormPool::getKsizeAttr(a1);
  mlir::getValues<unsigned long long>(KsizeAttr, (uint64_t)v18);
  StrideAttr = mlir::anec::L2NormPool::getStrideAttr(a1);
  mlir::getValues<unsigned long long>(StrideAttr, (uint64_t)v16);
  PaddingAttr = mlir::anec::L2NormPool::getPaddingAttr(a1);
  mlir::getValues<unsigned long long>(PaddingAttr, (uint64_t)v14);
  mlir::anec::getIndexFromDim(1, v8);
  if (!v12)
    std::__throw_bad_optional_access[abi:nn180100]();
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  if (v14[0] != v15)
    free(v14[0]);
  if (v16[0] != v17)
    free(v16[0]);
  if (v18[0] != v19)
    free(v18[0]);
  return mlir::anec::verifyPoolWithANEC((uint64_t)v6, a2, a3);
}

uint64_t mlir::anec::L2NormPool::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  mlir::Operation *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t KsizeAttr;
  uint64_t StrideAttr;
  uint64_t PaddingAttr;
  char v12;
  void *v14[2];
  _BYTE v15[48];
  void *v16[2];
  _BYTE v17[48];
  void *v18[2];
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  ANECPoolLayerDescInitialize();
  ZinIrPoolingTypeToCFString(1u);
  v18[0] = v19;
  v18[1] = (void *)0x600000000;
  v16[0] = v17;
  v16[1] = (void *)0x600000000;
  v14[0] = v15;
  v14[1] = (void *)0x600000000;
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v8 = v7;
  KsizeAttr = mlir::anec::L2NormPool::getKsizeAttr(a1);
  mlir::getValues<unsigned long long>(KsizeAttr, (uint64_t)v18);
  StrideAttr = mlir::anec::L2NormPool::getStrideAttr(a1);
  mlir::getValues<unsigned long long>(StrideAttr, (uint64_t)v16);
  PaddingAttr = mlir::anec::L2NormPool::getPaddingAttr(a1);
  mlir::getValues<unsigned long long>(PaddingAttr, (uint64_t)v14);
  mlir::anec::getIndexFromDim(1, v8);
  if (!v12)
    std::__throw_bad_optional_access[abi:nn180100]();
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  if (v14[0] != v15)
    free(v14[0]);
  if (v16[0] != v17)
    free(v16[0]);
  if (v18[0] != v19)
    free(v18[0]);
  return mlir::anec::verifyPoolWithANEC((uint64_t)v6, a2, a3);
}

uint64_t mlir::anec::`anonymous namespace'::defaultIsCompatibleReturnType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *ArgAttrsAttr;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t OperandRange;
  BOOL v38;
  _QWORD v39[2];
  _QWORD *v40;
  uint64_t v41;

  result = 1;
  if (a2 && a4)
  {
    v9 = 0;
    while (1)
    {
      v10 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, v9);
      v11 = (uint64_t *)mlir::TypeRange::dereference_iterator(a3, v9);
      if (!v10)
        goto LABEL_13;
      v12 = *v10;
      v13 = mlir::TypeID::get<mlir::ShapedType>();
      v14 = *(unsigned int *)(v12 + 16);
      if (!(_DWORD)v14)
        goto LABEL_13;
      v15 = *(_QWORD **)(v12 + 8);
      v16 = &v15[2 * v14];
      do
      {
        v17 = v14 >> 1;
        v18 = &v15[2 * (v14 >> 1)];
        v20 = *v18;
        v19 = v18 + 2;
        v14 += ~(v14 >> 1);
        if (v20 < v13)
          v15 = v19;
        else
          v14 = v17;
      }
      while (v14);
      if (v15 != v16 && *v15 == v13)
      {
        v31 = v15[1];
        v40 = v10;
        v41 = v31;
        if (!v11)
          goto LABEL_24;
      }
      else
      {
LABEL_13:
        v40 = v10;
        v41 = 0;
        if (!v11)
          goto LABEL_24;
      }
      v21 = *v11;
      v22 = mlir::TypeID::get<mlir::ShapedType>();
      v23 = *(unsigned int *)(v21 + 16);
      if (!(_DWORD)v23)
        goto LABEL_24;
      v24 = *(_QWORD **)(v21 + 8);
      v25 = &v24[2 * v23];
      do
      {
        v26 = v23 >> 1;
        v27 = &v24[2 * (v23 >> 1)];
        v29 = *v27;
        v28 = v27 + 2;
        v23 += ~(v23 >> 1);
        if (v29 < v22)
          v24 = v28;
        else
          v23 = v26;
      }
      while (v23);
      if (v24 == v25 || *v24 != v22)
      {
LABEL_24:
        v30 = 0;
        goto LABEL_25;
      }
      v30 = v24[1];
LABEL_25:
      v39[0] = v11;
      v39[1] = v30;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v40))
        return 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39))
        return 0;
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v40);
      v34 = v33;
      v35 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
      if (v34 != v36 || memcmp(ArgAttrsAttr, v35, 8 * v34))
        return 0;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v40);
      v38 = OperandRange == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39);
      result = v38;
      if (v38 && ++v9 != a2 && v9 != a4)
        continue;
      return result;
    }
  }
  return result;
}

uint64_t mlir::anec::verifyANECAveragePoolOp(uint64_t a1)
{
  uint64_t v2;
  mlir::Operation *v3;
  mlir::Operation *v5;

  v5 = (mlir::Operation *)a1;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  if (*(_DWORD *)(a1 + 36))
    v2 = a1 - 16;
  else
    v2 = 0;
  if (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  mlir::anec::AveragePool::getStrideAttr(&v5);
  mlir::anec::AveragePool::getPaddingAttr(&v5);
  mlir::anec::AveragePool::getKsizeAttr(&v5);
}

uint64_t mlir::anec::verifyANECMaxPoolOp(uint64_t a1)
{
  uint64_t v2;
  mlir::Operation *v3;
  mlir::Operation *v5;

  v5 = (mlir::Operation *)a1;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  if (*(_DWORD *)(a1 + 36))
    v2 = a1 - 16;
  else
    v2 = 0;
  if (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  mlir::anec::L2NormPool::getStrideAttr(&v5);
  mlir::anec::L2NormPool::getPaddingAttr(&v5);
  mlir::anec::L2NormPool::getKsizeAttr(&v5);
}

uint64_t mlir::anec::AveragePool::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  mlir::Operation *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  uint64_t PaddingAttr;
  uint64_t StrideAttr;
  uint64_t KsizeAttr;
  char v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v28;
  std::string __p;
  __int128 v30;
  mlir::Operation *v31;

  v31 = *a1;
  v3 = v31;
  v30 = 0uLL;
  mlir::anec::computeOpKeyString(v31, &__p);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 9) + 24);
  if (*((_DWORD *)v3 + 9))
    v5 = (uint64_t)v3 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  PaddingAttr = mlir::anec::AveragePool::getPaddingAttr(&v31);
  StrideAttr = mlir::anec::AveragePool::getStrideAttr(&v31);
  KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(&v31);
  v10 = mlir::anec::addPoolOpCommon(v3, 1, (uint64_t)&__p, v4, NextResultAtOffset, PaddingAttr, StrideAttr, KsizeAttr, (uint64_t *)&v30);
  v11 = v10;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v10)
      goto LABEL_6;
LABEL_14:
    v20 = 0;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (!*((_QWORD *)&v30 + 1))
      return v20;
    goto LABEL_25;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11)
    goto LABEL_14;
LABEL_6:
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  v12 = v30;
  v28 = v30;
  if (!*((_QWORD *)&v30 + 1))
  {
    v22 = *(_QWORD **)(a2 + 232);
    v17 = (_QWORD *)(a2 + 232);
    if ((unint64_t)v22 < *(_QWORD *)(a2 + 240))
    {
      *v22 = v30;
      v22[1] = 0;
      v19 = v22 + 2;
      goto LABEL_19;
    }
LABEL_18:
    v19 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v28);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    goto LABEL_19;
  }
  v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = *(_QWORD **)(a2 + 232);
  v17 = (_QWORD *)(a2 + 232);
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 240))
    goto LABEL_18;
  *v16 = v12;
  v16[1] = v13;
  do
    v18 = __ldxr(v14);
  while (__stxr(v18 + 1, v14));
  v19 = v16 + 2;
LABEL_19:
  *v17 = v19;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v20 = 1;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
LABEL_25:
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v20;
}

uint64_t mlir::anec::addPoolOpCommon(mlir::Operation *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  char *v17;
  std::string *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t OperandRange;
  uint64_t ANECIRDataType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  mlir::Operation *v38;
  int8x16_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  mlir::Operation *v44;
  _QWORD v45[2];
  _QWORD v46[2];
  std::string __p;
  void *v48;
  uint64_t v49;
  _BYTE v50[48];
  void *v51;
  uint64_t v52;
  _BYTE v53[48];
  _OWORD *v54;
  uint64_t v55;
  _QWORD v56[8];

  v56[6] = *MEMORY[0x1E0C80C00];
  v17 = (char *)operator new(0x120uLL);
  *(_QWORD *)v17 = off_1E0E4C6B8;
  v18 = (std::string *)(v17 + 8);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v17 + 3) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v17 + 8) = 5;
  *((_QWORD *)v17 + 5) = 0;
  v17[48] = 1;
  *((_QWORD *)v17 + 7) = CFSTR("Pooling");
  *((_QWORD *)v17 + 8) = v17 + 80;
  *((_QWORD *)v17 + 9) = 0x100000000;
  *((_QWORD *)v17 + 14) = v17 + 128;
  *((_QWORD *)v17 + 15) = 0x300000000;
  *((int64x2_t *)v17 + 11) = vdupq_n_s64(1uLL);
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_QWORD *)v17 + 30) = 0;
  *(_QWORD *)v17 = &unk_1E0E4D520;
  *((_DWORD *)v17 + 62) = a2;
  *((int64x2_t *)v17 + 16) = vdupq_n_s64(2uLL);
  *((_QWORD *)v17 + 34) = 0;
  v17[280] = 1;
  v19 = operator new(0x20uLL);
  *v19 = off_1E0E52350;
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = v17;
  v20 = (std::__shared_weak_count *)a9[1];
  *a9 = (uint64_t)v17;
  a9[1] = (uint64_t)v19;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v46[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v46[1] = v23;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v46);
  ANECIRDataType = mlir::anec::getANECIRDataType(OperandRange);
  if ((ANECIRDataType & 0xFF00000000) != 0
    && (mlir::anec::ANECIRUnit::AddInput(*a9, (uint64_t)&__p, ANECIRDataType),
        v45[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v45[1] = v26,
        v45[0])
    && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v46),
        v28 = v27,
        v29 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v45),
        v30 = mlir::anec::getANECIRDataType(v29),
        (v30 & 0xFF00000000) != 0))
  {
    v31 = v30;
    v32 = *a9;
    v33 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v45) + 8 * v28 - 24);
    v34 = *(unsigned int *)(v32 + 120);
    if (v34 >= *(_DWORD *)(v32 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v32 + 112, (void *)(v32 + 128), v34 + 1, 16);
      LODWORD(v34) = *(_DWORD *)(v32 + 120);
    }
    v35 = (_QWORD *)(*(_QWORD *)(v32 + 112) + 16 * v34);
    *v35 = v31;
    v35[1] = v33;
    ++*(_DWORD *)(v32 + 120);
    v54 = v56;
    v55 = 0x600000000;
    mlir::getValues<unsigned long long>(a6, (uint64_t)&v54);
    v51 = v53;
    v52 = 0x600000000;
    mlir::getValues<unsigned long long>(a8, (uint64_t)&v51);
    v48 = v50;
    v49 = 0x600000000;
    mlir::getValues<unsigned long long>(a7, (uint64_t)&v48);
    v36 = *a9;
    v37 = v54;
    if ((_DWORD)v55 == 6)
      *(_OWORD *)(v36 + 232) = v54[2];
    *(_OWORD *)(v36 + 200) = *v37;
    *(_OWORD *)(v36 + 216) = v37[1];
    if (*(_UNKNOWN **)(*((_QWORD *)a1 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::AveragePool,void>::id)
      v38 = a1;
    else
      v38 = 0;
    v44 = v38;
    if (v38)
    {
      *(_BYTE *)(v36 + 280) = mlir::anec::AveragePool::getIncPadAttr(&v44) != 0;
      v36 = *a9;
    }
    v39 = (int8x16_t *)v48;
    if ((_DWORD)v49 == 3)
      *(_QWORD *)(v36 + 192) = *((_QWORD *)v48 + 2);
    *(int8x16_t *)(v36 + 176) = vextq_s8(*v39, *v39, 8uLL);
    v40 = (uint64_t *)v51;
    if ((_DWORD)v52 == 3)
      *(_QWORD *)(v36 + 272) = *((_QWORD *)v51 + 2);
    v41 = *v40;
    *(_QWORD *)(v36 + 256) = v40[1];
    *(_QWORD *)(v36 + 264) = v41;
    if (v39 != (int8x16_t *)v50)
    {
      free(v39);
      v40 = (uint64_t *)v51;
    }
    if (v40 != (uint64_t *)v53)
      free(v40);
    if (v54 != (_OWORD *)v56)
      free(v54);
    v42 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_34;
  }
  else
  {
    v42 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v42;
}

uint64_t mlir::anec::MaxPool::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  mlir::Operation *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  uint64_t PaddingAttr;
  uint64_t StrideAttr;
  uint64_t KsizeAttr;
  char v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v28;
  std::string __p;
  __int128 v30;
  mlir::Operation *v31;

  v31 = *a1;
  v3 = v31;
  v30 = 0uLL;
  mlir::anec::computeOpKeyString(v31, &__p);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 9) + 24);
  if (*((_DWORD *)v3 + 9))
    v5 = (uint64_t)v3 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  PaddingAttr = mlir::anec::L2NormPool::getPaddingAttr(&v31);
  StrideAttr = mlir::anec::L2NormPool::getStrideAttr(&v31);
  KsizeAttr = mlir::anec::L2NormPool::getKsizeAttr(&v31);
  v10 = mlir::anec::addPoolOpCommon(v3, 0, (uint64_t)&__p, v4, NextResultAtOffset, PaddingAttr, StrideAttr, KsizeAttr, (uint64_t *)&v30);
  v11 = v10;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v10)
      goto LABEL_6;
LABEL_14:
    v20 = 0;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (!*((_QWORD *)&v30 + 1))
      return v20;
    goto LABEL_25;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11)
    goto LABEL_14;
LABEL_6:
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  v12 = v30;
  v28 = v30;
  if (!*((_QWORD *)&v30 + 1))
  {
    v22 = *(_QWORD **)(a2 + 232);
    v17 = (_QWORD *)(a2 + 232);
    if ((unint64_t)v22 < *(_QWORD *)(a2 + 240))
    {
      *v22 = v30;
      v22[1] = 0;
      v19 = v22 + 2;
      goto LABEL_19;
    }
LABEL_18:
    v19 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v28);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    goto LABEL_19;
  }
  v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = *(_QWORD **)(a2 + 232);
  v17 = (_QWORD *)(a2 + 232);
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 240))
    goto LABEL_18;
  *v16 = v12;
  v16[1] = v13;
  do
    v18 = __ldxr(v14);
  while (__stxr(v18 + 1, v14));
  v19 = v16 + 2;
LABEL_19:
  *v17 = v19;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v20 = 1;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
LABEL_25:
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v20;
}

uint64_t mlir::anec::L2NormPool::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  mlir::Operation *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  uint64_t PaddingAttr;
  uint64_t StrideAttr;
  uint64_t KsizeAttr;
  char v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v28;
  std::string __p;
  __int128 v30;
  mlir::Operation *v31;

  v31 = *a1;
  v3 = v31;
  v30 = 0uLL;
  mlir::anec::computeOpKeyString(v31, &__p);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 9) + 24);
  if (*((_DWORD *)v3 + 9))
    v5 = (uint64_t)v3 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  PaddingAttr = mlir::anec::L2NormPool::getPaddingAttr(&v31);
  StrideAttr = mlir::anec::L2NormPool::getStrideAttr(&v31);
  KsizeAttr = mlir::anec::L2NormPool::getKsizeAttr(&v31);
  v10 = mlir::anec::addPoolOpCommon(v3, 2, (uint64_t)&__p, v4, NextResultAtOffset, PaddingAttr, StrideAttr, KsizeAttr, (uint64_t *)&v30);
  v11 = v10;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v10)
      goto LABEL_6;
LABEL_14:
    v20 = 0;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (!*((_QWORD *)&v30 + 1))
      return v20;
    goto LABEL_25;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11)
    goto LABEL_14;
LABEL_6:
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  v12 = v30;
  v28 = v30;
  if (!*((_QWORD *)&v30 + 1))
  {
    v22 = *(_QWORD **)(a2 + 232);
    v17 = (_QWORD *)(a2 + 232);
    if ((unint64_t)v22 < *(_QWORD *)(a2 + 240))
    {
      *v22 = v30;
      v22[1] = 0;
      v19 = v22 + 2;
      goto LABEL_19;
    }
LABEL_18:
    v19 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v28);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    goto LABEL_19;
  }
  v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = *(_QWORD **)(a2 + 232);
  v17 = (_QWORD *)(a2 + 232);
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 240))
    goto LABEL_18;
  *v16 = v12;
  v16[1] = v13;
  do
    v18 = __ldxr(v14);
  while (__stxr(v18 + 1, v14));
  v19 = v16 + 2;
LABEL_19:
  *v17 = v19;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v20 = 1;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
LABEL_25:
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v20;
}

uint64_t mlir::anec::inferReductionOpReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t NumElements;
  BOOL v17;
  uint64_t *p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ArgAttrsAttr;
  uint64_t v23;
  void *v24;
  mlir::AffineMap *v25;
  uint64_t OperandRange;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  void *v33;
  unsigned __int8 v34;
  uint64_t v35;
  void *__p;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[6];
  void *v41;
  uint64_t v42;
  _QWORD v43[23];

  v43[22] = *MEMORY[0x1E0C80C00];
  v32 = a6;
  v13 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v31[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v13);
  v31[1] = v14;
  if (v31[0] && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v31) & 1) != 0)
  {
    v41 = v43;
    v42 = 0x600000000;
    v15 = mlir::DictionaryAttr::get((uint64_t)&v32, "axes", 4uLL);
    v30 = v15;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v38, v15, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v30);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v33, v15, NumElements);
    while (1)
    {
      v17 = v38 == v33 && v39 == v34;
      if (v17 && v40[0] == v35)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v38, (llvm::APInt *)&__p);
      if (v37 >= 0x41)
        p_p = (uint64_t *)__p;
      else
        p_p = (uint64_t *)&__p;
      v19 = *p_p;
      v20 = v42;
      if (v42 >= (unint64_t)HIDWORD(v42))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v42 + 1, 8);
        v20 = v42;
      }
      *((_QWORD *)v41 + v20) = v19;
      LODWORD(v42) = v42 + 1;
      if (v37 >= 0x41)
      {
        if (__p)
          operator delete[](__p);
      }
      ++v40[0];
    }
    v38 = v40;
    v39 = 0x600000000;
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v31);
    if (mlir::inferReductionOpReturnShape(a2, a3, ArgAttrsAttr, v23, (uint64_t *)v41, v42, 1, (uint64_t)&v38))
    {
      v24 = v38;
      v25 = (mlir::AffineMap *)v39;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v31);
      v27 = mlir::MemRefType::get(v24, v25, OperandRange, 0, 0, 0);
      v28 = *(unsigned int *)(a11 + 8);
      if (v28 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
        LODWORD(v28) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v28) = v27;
      ++*(_DWORD *)(a11 + 8);
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
    if (v38 != v40)
      free(v38);
    if (v41 != v43)
      free(v41);
  }
  else if (a3)
  {
    mlir::emitError(a2, (uint64_t)&v41);
    if (v41)
      mlir::Diagnostic::operator<<((uint64_t)&v42, "input type must be ranked shaped type");
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
    if (v41)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v42);
  }
  else
  {
    return 0;
  }
  return v21;
}

uint64_t mlir::anec::`anonymous namespace'::TranslateToANECDesc(uint64_t a1, unint64_t a2, const __CFString **a3)
{
  void *v6;
  const __CFString *v7;
  uint64_t InherentAttr;
  char v9;
  uint64_t v10;
  mlir::anec::_anonymous_namespace_ **v11;
  uint64_t *v12;
  uint64_t v13;
  mlir::anec::_anonymous_namespace_ *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  ANECReductionLayerDescInitialize();
  v6 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
  if (a1 && v6 == &mlir::detail::TypeIDResolver<mlir::anec::ReduceAvg,void>::id)
  {
    v7 = CFSTR("Avg");
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ReduceMax,void>::id)
  {
    v7 = CFSTR("Max");
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ReduceMin,void>::id)
  {
    v7 = CFSTR("Min");
  }
  else
  {
    if (v6 != &mlir::detail::TypeIDResolver<mlir::anec::ReduceSum,void>::id)
    {
      if (*(_BYTE *)(a1 + 47))
        goto LABEL_13;
      goto LABEL_14;
    }
    v7 = CFSTR("Sum");
  }
  *a3 = v7;
  if (*(_BYTE *)(a1 + 47))
  {
LABEL_13:
    InherentAttr = mlir::Operation::getInherentAttr(a1, (uint64_t)"axes", 4);
    if (v9)
      goto LABEL_15;
  }
LABEL_14:
  InherentAttr = mlir::DictionaryAttr::get(a1 + 56, "axes", 4uLL);
LABEL_15:
  v16 = v18;
  v17 = 0x600000000;
  mlir::getValues<unsigned long long>(InherentAttr, (uint64_t)&v16);
  v10 = v17;
  a3[3] = (const __CFString *)v17;
  v11 = (mlir::anec::_anonymous_namespace_ **)v16;
  if ((_DWORD)v10)
  {
    v12 = (uint64_t *)(a3 + 4);
    v13 = 8 * v10;
    do
    {
      v14 = *v11++;
      v13 -= 8;
    }
    while (v13);
    v11 = (mlir::anec::_anonymous_namespace_ **)v16;
  }
  a3[1] = CFSTR("Bypass");
  if (v11 != v18)
    free(v11);
  return 1;
}

uint64_t mlir::anec::verifyReductionWithANEC(uint64_t a1, uint64_t a2, mlir::MemoryMapperInterface *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  const void **v13;
  std::ios_base *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24[2];
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int128 __p;
  __int128 v29;
  int v30;
  uint64_t v31[19];
  void *v32[2];
  _BYTE v33[64];
  char buffer[8];
  _QWORD v35[65];

  v35[63] = *MEMORY[0x1E0C80C00];
  v7 = 1;
  *(_QWORD *)buffer = 1;
  v24[0] = 0;
  ANECUnitValidatorCreate();
  v32[0] = v33;
  v32[1] = (void *)0x100000000;
  v22 = 0;
  v23 = 0;
  if (ANECValidateReductionLayer())
  {
    v19 = (uint64_t *)a2;
    v8 = MEMORY[0x1E0DE4FD0];
    v9 = MEMORY[0x1E0DE4FD0] + 104;
    v31[0] = MEMORY[0x1E0DE4FD0] + 104;
    v10 = MEMORY[0x1E0DE4FD0] + 64;
    v11 = MEMORY[0x1E0DE4F50];
    v12 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v13 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v25 = MEMORY[0x1E0DE4FD0] + 64;
    v24[0] = v12;
    *(const void ***)((char *)v24 + (_QWORD)*(v12 - 3)) = v13;
    v24[1] = 0;
    v14 = (std::ios_base *)((char *)v24 + (unint64_t)*(v24[0] - 3));
    std::ios_base::init(v14, &v26);
    v14[1].__vftable = 0;
    v14[1].__fmtflags_ = -1;
    v15 = *(_QWORD *)(v11 + 40);
    v25 = *(_QWORD *)(v11 + 32);
    *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v15;
    v24[0] = *(const void ***)(v11 + 8);
    *(const void ***)((char *)v24 + (unint64_t)*(v24[0] - 3)) = *(const void ***)(v11 + 48);
    v31[0] = v9;
    v24[0] = (const void **)(v8 + 24);
    v25 = v10;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8] + 16;
    v26 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v29 = 0u;
    v30 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v24[0] = *(const void ***)v11;
    v17 = *(_QWORD *)(v11 + 72);
    *(const void ***)((char *)v24 + (unint64_t)*(v24[0] - 3)) = *(const void ***)(v11 + 64);
    v25 = v17;
    v26 = v16;
    if (SBYTE7(v29) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v31);
    v27 = 260;
    v24[0] = (const void **)&v20;
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v35);
    if (v21 < 0)
      operator delete(v20);
  }
  if (v32[0] != v33)
    free(v32[0]);
  ANECUnitValidatorDelete();
  return v7;
}

uint64_t mlir::anec::ReduceAvg::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BYTE v27[8];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = a6;
  v27[0] = 0;
  v28 = 0;
  v29 = a7;
  v30 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v28)
      v28 = 0;
    mlir::OperationName::OperationName(v27, "anec.reduce_avg", 15, Context);
    v28 = 1;
  }
  v31 = a4;
  v32 = a5;
  v18 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v19 = (uint64_t)a2;
  else
    v19 = v18;
  v20 = mlir::anec::ReduceAvgAdaptor::verify(&v26, v19);
  if ((_BYTE)v20)
    return mlir::anec::inferReductionOpReturnTypes(v20, (uint64_t)a2, a3, v21, v22, a6, v23, v24, a9, a10, a11);
  else
    return 0;
}

uint64_t mlir::anec::ReduceAvgAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  _QWORD v57[2];
  uint64_t OperandRange;
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[4];
  __int16 v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD v65[24];

  v65[23] = *MEMORY[0x1E0C80C00];
  v63 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v63); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v63))
    {
      v5 = "'anec.reduce_avg' op requires attribute 'axes'";
      goto LABEL_52;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v61[0] = v6;
    v61[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v61);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v64 = v18;
    v65[0] = v28;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v64);
    if (!v29)
      goto LABEL_62;
    v30 = *v6;
    v31 = mlir::TypeID::get<mlir::ElementsAttr>();
    v32 = *(unsigned int *)(v30 + 16);
    if (!(_DWORD)v32)
      goto LABEL_36;
    v33 = *(_QWORD **)(v30 + 8);
    v34 = &v33[2 * v32];
    do
    {
      v35 = v32 >> 1;
      v36 = &v33[2 * (v32 >> 1)];
      v38 = *v36;
      v37 = v36 + 2;
      v32 += ~(v32 >> 1);
      if (v38 < v31)
        v33 = v37;
      else
        v32 = v35;
    }
    while (v32);
    if (v33 != v34 && *v33 == v31)
      v39 = v33[1];
    else
LABEL_36:
      v39 = 0;
    v59[0] = v6;
    v59[1] = v39;
    v40 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v59);
    v41 = v40;
    if (!v40)
      goto LABEL_46;
    v42 = *v40;
    v43 = mlir::TypeID::get<mlir::ShapedType>();
    v44 = *(unsigned int *)(v42 + 16);
    if (!(_DWORD)v44)
      goto LABEL_46;
    v45 = *(_QWORD **)(v42 + 8);
    v46 = &v45[2 * v44];
    do
    {
      v47 = v44 >> 1;
      v48 = &v45[2 * (v44 >> 1)];
      v50 = *v48;
      v49 = v48 + 2;
      v44 += ~(v44 >> 1);
      if (v50 < v43)
        v45 = v49;
      else
        v44 = v47;
    }
    while (v44);
    if (v45 != v46 && *v45 == v43)
      v51 = v45[1];
    else
LABEL_46:
      v51 = 0;
    v60[0] = v41;
    v60[1] = v51;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    if (v52 == 1)
    {
LABEL_62:
      if (mlir::hasUniqueValues((uint64_t)v6))
      {
        v56 = v6;
        v57[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        v57[1] = v53;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
          return 1;
      }
    }
  }
  v5 = "'anec.reduce_avg' op attribute 'axes' failed to satisfy constraint: ui64 unique elements attribute of ranks 0/1";
LABEL_52:
  v61[0] = v5;
  v62 = 259;
  mlir::emitError(a2, (uint64_t)v61, (uint64_t)&v64);
  v54 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v64);
  if (v64)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v65);
  return v54;
}

uint64_t mlir::anec::ReduceAvg::addOpToNetwork(mlir::anec **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::getReductionZinIrUnitInfo(*a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void mlir::anec::getReductionZinIrUnitInfo(mlir::anec *this@<X0>, _QWORD *a2@<X8>)
{
  char *v5;
  void *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t NumElements;
  BOOL v21;
  mlir::anec **p_p;
  mlir::anec *v23;
  unint64_t v24;
  uint64_t DimFromIndex;
  int v26;
  void *__p;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t AttrDictionary;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v5 = (char *)operator new(0x68uLL);
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  *((_DWORD *)v5 + 8) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 9) = -1;
  *(_QWORD *)v5 = off_1E0E13868;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 10) = 6;
  *((_QWORD *)v5 + 11) = 1065353216;
  *((_QWORD *)v5 + 12) = 0;
  v6 = *(void **)(*((_QWORD *)this + 6) + 16);
  if (this && v6 == &mlir::detail::TypeIDResolver<mlir::anec::ReduceAvg,void>::id)
  {
    v7 = 3;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ReduceMax,void>::id)
  {
    v7 = 2;
  }
  else if (v6 == &mlir::detail::TypeIDResolver<mlir::anec::ReduceMin,void>::id)
  {
    v7 = 1;
  }
  else
  {
    if (v6 != &mlir::detail::TypeIDResolver<mlir::anec::ReduceSum,void>::id)
      goto LABEL_11;
    v7 = 0;
  }
  *((_DWORD *)v5 + 20) = v7;
LABEL_11:
  v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_20;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_20;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_20:
    v18 = 0;
  v36[0] = v8;
  v36[1] = v18;
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v19 = mlir::DictionaryAttr::get((uint64_t)&AttrDictionary, "axes", 4uLL);
  v35 = v19;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&AttrDictionary, v19, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v35);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v29, v19, NumElements);
  while (1)
  {
    v21 = AttrDictionary == v29 && v33 == v30;
    if (v21 && v34 == v31)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&AttrDictionary, (llvm::APInt *)&__p);
    if (v28 >= 0x41)
      p_p = (mlir::anec **)__p;
    else
      p_p = (mlir::anec **)&__p;
    v23 = *p_p;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
    DimFromIndex = mlir::anec::getDimFromIndex(v23, v24);
    if ((DimFromIndex & 0xFF00000000) != 0)
      v26 = dword_1812330C0[(int)DimFromIndex];
    else
      LOBYTE(v26) = 5;
    *((_QWORD *)v5 + 12) |= (1 << v26) & 0x1F;
    if (v28 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v34;
  }
  *a2 = v5;
}

uint64_t mlir::anec::ReduceMax::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BYTE v27[8];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = a6;
  v27[0] = 0;
  v28 = 0;
  v29 = a7;
  v30 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v28)
      v28 = 0;
    mlir::OperationName::OperationName(v27, "anec.reduce_max", 15, Context);
    v28 = 1;
  }
  v31 = a4;
  v32 = a5;
  v18 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v19 = (uint64_t)a2;
  else
    v19 = v18;
  v20 = mlir::anec::ReduceMaxAdaptor::verify(&v26, v19);
  if ((_BYTE)v20)
    return mlir::anec::inferReductionOpReturnTypes(v20, (uint64_t)a2, a3, v21, v22, a6, v23, v24, a9, a10, a11);
  else
    return 0;
}

uint64_t mlir::anec::ReduceMaxAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  _QWORD v57[2];
  uint64_t OperandRange;
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[4];
  __int16 v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD v65[24];

  v65[23] = *MEMORY[0x1E0C80C00];
  v63 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v63); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v63))
    {
      v5 = "'anec.reduce_max' op requires attribute 'axes'";
      goto LABEL_52;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v61[0] = v6;
    v61[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v61);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v64 = v18;
    v65[0] = v28;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v64);
    if (!v29)
      goto LABEL_62;
    v30 = *v6;
    v31 = mlir::TypeID::get<mlir::ElementsAttr>();
    v32 = *(unsigned int *)(v30 + 16);
    if (!(_DWORD)v32)
      goto LABEL_36;
    v33 = *(_QWORD **)(v30 + 8);
    v34 = &v33[2 * v32];
    do
    {
      v35 = v32 >> 1;
      v36 = &v33[2 * (v32 >> 1)];
      v38 = *v36;
      v37 = v36 + 2;
      v32 += ~(v32 >> 1);
      if (v38 < v31)
        v33 = v37;
      else
        v32 = v35;
    }
    while (v32);
    if (v33 != v34 && *v33 == v31)
      v39 = v33[1];
    else
LABEL_36:
      v39 = 0;
    v59[0] = v6;
    v59[1] = v39;
    v40 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v59);
    v41 = v40;
    if (!v40)
      goto LABEL_46;
    v42 = *v40;
    v43 = mlir::TypeID::get<mlir::ShapedType>();
    v44 = *(unsigned int *)(v42 + 16);
    if (!(_DWORD)v44)
      goto LABEL_46;
    v45 = *(_QWORD **)(v42 + 8);
    v46 = &v45[2 * v44];
    do
    {
      v47 = v44 >> 1;
      v48 = &v45[2 * (v44 >> 1)];
      v50 = *v48;
      v49 = v48 + 2;
      v44 += ~(v44 >> 1);
      if (v50 < v43)
        v45 = v49;
      else
        v44 = v47;
    }
    while (v44);
    if (v45 != v46 && *v45 == v43)
      v51 = v45[1];
    else
LABEL_46:
      v51 = 0;
    v60[0] = v41;
    v60[1] = v51;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    if (v52 == 1)
    {
LABEL_62:
      if (mlir::hasUniqueValues((uint64_t)v6))
      {
        v56 = v6;
        v57[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        v57[1] = v53;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
          return 1;
      }
    }
  }
  v5 = "'anec.reduce_max' op attribute 'axes' failed to satisfy constraint: ui64 unique elements attribute of ranks 0/1";
LABEL_52:
  v61[0] = v5;
  v62 = 259;
  mlir::emitError(a2, (uint64_t)v61, (uint64_t)&v64);
  v54 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v64);
  if (v64)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v65);
  return v54;
}

uint64_t mlir::anec::ReduceMin::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BYTE v27[8];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = a6;
  v27[0] = 0;
  v28 = 0;
  v29 = a7;
  v30 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v28)
      v28 = 0;
    mlir::OperationName::OperationName(v27, "anec.reduce_min", 15, Context);
    v28 = 1;
  }
  v31 = a4;
  v32 = a5;
  v18 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v19 = (uint64_t)a2;
  else
    v19 = v18;
  v20 = mlir::anec::ReduceMinAdaptor::verify(&v26, v19);
  if ((_BYTE)v20)
    return mlir::anec::inferReductionOpReturnTypes(v20, (uint64_t)a2, a3, v21, v22, a6, v23, v24, a9, a10, a11);
  else
    return 0;
}

uint64_t mlir::anec::ReduceMinAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  _QWORD v57[2];
  uint64_t OperandRange;
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[4];
  __int16 v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD v65[24];

  v65[23] = *MEMORY[0x1E0C80C00];
  v63 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v63); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v63))
    {
      v5 = "'anec.reduce_min' op requires attribute 'axes'";
      goto LABEL_52;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v61[0] = v6;
    v61[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v61);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v64 = v18;
    v65[0] = v28;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v64);
    if (!v29)
      goto LABEL_62;
    v30 = *v6;
    v31 = mlir::TypeID::get<mlir::ElementsAttr>();
    v32 = *(unsigned int *)(v30 + 16);
    if (!(_DWORD)v32)
      goto LABEL_36;
    v33 = *(_QWORD **)(v30 + 8);
    v34 = &v33[2 * v32];
    do
    {
      v35 = v32 >> 1;
      v36 = &v33[2 * (v32 >> 1)];
      v38 = *v36;
      v37 = v36 + 2;
      v32 += ~(v32 >> 1);
      if (v38 < v31)
        v33 = v37;
      else
        v32 = v35;
    }
    while (v32);
    if (v33 != v34 && *v33 == v31)
      v39 = v33[1];
    else
LABEL_36:
      v39 = 0;
    v59[0] = v6;
    v59[1] = v39;
    v40 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v59);
    v41 = v40;
    if (!v40)
      goto LABEL_46;
    v42 = *v40;
    v43 = mlir::TypeID::get<mlir::ShapedType>();
    v44 = *(unsigned int *)(v42 + 16);
    if (!(_DWORD)v44)
      goto LABEL_46;
    v45 = *(_QWORD **)(v42 + 8);
    v46 = &v45[2 * v44];
    do
    {
      v47 = v44 >> 1;
      v48 = &v45[2 * (v44 >> 1)];
      v50 = *v48;
      v49 = v48 + 2;
      v44 += ~(v44 >> 1);
      if (v50 < v43)
        v45 = v49;
      else
        v44 = v47;
    }
    while (v44);
    if (v45 != v46 && *v45 == v43)
      v51 = v45[1];
    else
LABEL_46:
      v51 = 0;
    v60[0] = v41;
    v60[1] = v51;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    if (v52 == 1)
    {
LABEL_62:
      if (mlir::hasUniqueValues((uint64_t)v6))
      {
        v56 = v6;
        v57[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        v57[1] = v53;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
          return 1;
      }
    }
  }
  v5 = "'anec.reduce_min' op attribute 'axes' failed to satisfy constraint: ui64 unique elements attribute of ranks 0/1";
LABEL_52:
  v61[0] = v5;
  v62 = 259;
  mlir::emitError(a2, (uint64_t)v61, (uint64_t)&v64);
  v54 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v64);
  if (v64)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v65);
  return v54;
}

uint64_t mlir::anec::ReduceSum::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BYTE v27[8];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = a6;
  v27[0] = 0;
  v28 = 0;
  v29 = a7;
  v30 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v28)
      v28 = 0;
    mlir::OperationName::OperationName(v27, "anec.reduce_sum", 15, Context);
    v28 = 1;
  }
  v31 = a4;
  v32 = a5;
  v18 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v19 = (uint64_t)a2;
  else
    v19 = v18;
  v20 = mlir::anec::ReduceSumAdaptor::verify(&v26, v19);
  if ((_BYTE)v20)
    return mlir::anec::inferReductionOpReturnTypes(v20, (uint64_t)a2, a3, v21, v22, a6, v23, v24, a9, a10, a11);
  else
    return 0;
}

uint64_t mlir::anec::ReduceSumAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  _QWORD v57[2];
  uint64_t OperandRange;
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[4];
  __int16 v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD v65[24];

  v65[23] = *MEMORY[0x1E0C80C00];
  v63 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v63); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v63))
    {
      v5 = "'anec.reduce_sum' op requires attribute 'axes'";
      goto LABEL_52;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v61[0] = v6;
    v61[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v61);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v64 = v18;
    v65[0] = v28;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v64);
    if (!v29)
      goto LABEL_62;
    v30 = *v6;
    v31 = mlir::TypeID::get<mlir::ElementsAttr>();
    v32 = *(unsigned int *)(v30 + 16);
    if (!(_DWORD)v32)
      goto LABEL_36;
    v33 = *(_QWORD **)(v30 + 8);
    v34 = &v33[2 * v32];
    do
    {
      v35 = v32 >> 1;
      v36 = &v33[2 * (v32 >> 1)];
      v38 = *v36;
      v37 = v36 + 2;
      v32 += ~(v32 >> 1);
      if (v38 < v31)
        v33 = v37;
      else
        v32 = v35;
    }
    while (v32);
    if (v33 != v34 && *v33 == v31)
      v39 = v33[1];
    else
LABEL_36:
      v39 = 0;
    v59[0] = v6;
    v59[1] = v39;
    v40 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v59);
    v41 = v40;
    if (!v40)
      goto LABEL_46;
    v42 = *v40;
    v43 = mlir::TypeID::get<mlir::ShapedType>();
    v44 = *(unsigned int *)(v42 + 16);
    if (!(_DWORD)v44)
      goto LABEL_46;
    v45 = *(_QWORD **)(v42 + 8);
    v46 = &v45[2 * v44];
    do
    {
      v47 = v44 >> 1;
      v48 = &v45[2 * (v44 >> 1)];
      v50 = *v48;
      v49 = v48 + 2;
      v44 += ~(v44 >> 1);
      if (v50 < v43)
        v45 = v49;
      else
        v44 = v47;
    }
    while (v44);
    if (v45 != v46 && *v45 == v43)
      v51 = v45[1];
    else
LABEL_46:
      v51 = 0;
    v60[0] = v41;
    v60[1] = v51;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    if (v52 == 1)
    {
LABEL_62:
      if (mlir::hasUniqueValues((uint64_t)v6))
      {
        v56 = v6;
        v57[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        v57[1] = v53;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
          return 1;
      }
    }
  }
  v5 = "'anec.reduce_sum' op attribute 'axes' failed to satisfy constraint: ui64 unique elements attribute of ranks 0/1";
LABEL_52:
  v61[0] = v5;
  v62 = 259;
  mlir::emitError(a2, (uint64_t)v61, (uint64_t)&v64);
  v54 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v64);
  if (v64)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v65);
  return v54;
}

uint64_t mlir::anec::GOC::mutateOpForReshapeSwap(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *ArgAttrsAttr;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  size_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t IndexFromDim;
  char v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  mlir::anec::GOC *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  _BYTE v76[40];
  void *v77;
  uint64_t v78;
  _QWORD v79[6];

  v79[5] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v8 = 8 * a5;
    while (!*a4)
    {
      ++a4;
      v8 -= 8;
      if (!v8)
        goto LABEL_5;
    }
    return 0;
  }
LABEL_5:
  v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    goto LABEL_14;
  v10 = *v9;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_14;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_14:
    v19 = 0;
  v77 = v9;
  v78 = v19;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v77);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v21) == 1)
  {
    v22 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v22)
      goto LABEL_25;
    v23 = *v22;
    v24 = mlir::TypeID::get<mlir::ShapedType>();
    v25 = *(unsigned int *)(v23 + 16);
    if (!(_DWORD)v25)
      goto LABEL_25;
    v26 = *(_QWORD **)(v23 + 8);
    v27 = &v26[2 * v25];
    do
    {
      v28 = v25 >> 1;
      v29 = &v26[2 * (v25 >> 1)];
      v31 = *v29;
      v30 = v29 + 2;
      v25 += ~(v25 >> 1);
      if (v31 < v24)
        v26 = v30;
      else
        v25 = v28;
    }
    while (v25);
    if (v26 != v27 && *v26 == v24)
      v32 = v26[1];
    else
LABEL_25:
      v32 = 0;
    v74 = v22;
    v75 = v32;
    v33 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
    if (mlir::ShapedType::getNumElements(v33, v34) == 1)
      return 1;
  }
  v36 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v36)
    goto LABEL_37;
  v37 = *v36;
  v38 = mlir::TypeID::get<mlir::ShapedType>();
  v39 = *(unsigned int *)(v37 + 16);
  if (!(_DWORD)v39)
    goto LABEL_37;
  v40 = *(_QWORD **)(v37 + 8);
  v41 = &v40[2 * v39];
  do
  {
    v42 = v39 >> 1;
    v43 = &v40[2 * (v39 >> 1)];
    v45 = *v43;
    v44 = v43 + 2;
    v39 += ~(v39 >> 1);
    if (v45 < v38)
      v40 = v44;
    else
      v39 = v42;
  }
  while (v39);
  if (v40 != v41 && *v40 == v38)
    v46 = v40[1];
  else
LABEL_37:
    v46 = 0;
  v74 = v36;
  v75 = v46;
  v48 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
  v49 = v47;
  v77 = v79;
  v78 = 0x500000000;
  v50 = 8 * v47;
  if ((unint64_t)(8 * v47) < 0x29)
  {
    v51 = 0;
    if (!v47)
      goto LABEL_44;
    goto LABEL_43;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, (8 * v47) >> 3, 8);
  v51 = v78;
  if (v49)
  {
LABEL_43:
    memcpy((char *)v77 + 8 * v51, v48, v50);
    v51 = v78;
  }
LABEL_44:
  v52 = v51 + (v50 >> 3);
  LODWORD(v78) = v52;
  if (v52 <= 4)
    llvm::SmallVectorImpl<long long>::insert((uint64_t)&v77, (uint64_t)v77, 5 - v52, 1uLL);
  v74 = v76;
  v75 = 0x500000000;
  if ((unint64_t)(8 * a3) < 0x29)
  {
    v53 = 0;
    if (!a3)
      goto LABEL_51;
    goto LABEL_50;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, (8 * a3) >> 3, 8);
  v53 = v75;
  if (a3)
  {
LABEL_50:
    memcpy((char *)v74 + 8 * v53, a2, 8 * a3);
    v53 = v75;
  }
LABEL_51:
  v54 = v53 + a3;
  LODWORD(v75) = v54;
  if (v54 <= 4)
    llvm::SmallVectorImpl<long long>::insert((uint64_t)&v74, (uint64_t)v74, 5 - v54, 1uLL);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v78);
  if (v56)
  {
    v57 = IndexFromDim;
    memset_pattern16(&v70, &unk_181233190, 0x20uLL);
    v58 = v77;
    v59 = v70;
    if ((_DWORD)v78 && (_DWORD)v75)
    {
      v60 = 0;
      v61 = v72;
      v62 = v73;
      v63 = v71;
      v64 = 8 * v75 - 8;
      v65 = 8 * v78 - 8;
      do
      {
        if (v60 >= v57)
        {
          if (v60 > v57)
          {
            v61 *= *((_QWORD *)v77 + v60);
            v72 = v61;
            v62 *= *((_QWORD *)v74 + v60);
            v73 = v62;
          }
        }
        else
        {
          v59 *= *((_QWORD *)v77 + v60);
          v70 = v59;
          v63 *= *((_QWORD *)v74 + v60);
          v71 = v63;
        }
        if (!v65)
          break;
        ++v60;
        v66 = v64;
        v64 -= 8;
        v65 -= 8;
      }
      while (v66);
    }
    else
    {
      v63 = v71;
      v61 = v72;
      v62 = v73;
    }
    v35 = v59 == v63 && v61 == v62;
    if (v74 != v76)
    {
      free(v74);
      v58 = v77;
    }
    if (v58 != v79)
      free(v58);
    return v35;
  }
  v69 = (mlir::anec::GOC *)std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::anec::GOC::getBias(v69);
}

uint64_t mlir::anec::GOC::getBias(mlir::anec::GOC *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 88);
}

char *llvm::SmallVectorImpl<long long>::insert(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t *v25;
  unint64_t *v26;
  unint64_t v27;
  int64x2_t v28;
  int64x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  int64x2_t v38;
  int64x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int64x2_t v51;
  int64x2_t *v52;
  unint64_t v53;

  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v10 = *(unsigned int *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = v10 + a3;
  if (*(_QWORD *)a1 + 8 * v10 == a2)
  {
    if (v12 > v9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v12, 8);
      v10 = *(unsigned int *)(a1 + 8);
      v7 = *(_QWORD *)a1;
      v11 = *(_DWORD *)(a1 + 8);
      if (a3)
        goto LABEL_16;
    }
    else if (a3)
    {
LABEL_16:
      v25 = (int64x2_t *)(v7 + 8 * v10);
      v26 = (unint64_t *)v25;
      v27 = a3;
      if (a3 < 4)
        goto LABEL_51;
      v26 = (unint64_t *)v25 + (a3 & 0xFFFFFFFFFFFFFFFCLL);
      v27 = a3 & 3;
      v28 = vdupq_n_s64(a4);
      v29 = v25 + 1;
      v30 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v29[-1] = v28;
        *v29 = v28;
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      if ((a3 & 0xFFFFFFFFFFFFFFFCLL) != a3)
      {
LABEL_51:
        do
        {
          *v26++ = a4;
          --v27;
        }
        while (v27);
      }
    }
    *(_DWORD *)(a1 + 8) = v11 + a3;
    return (char *)(v7 + 8 * v8);
  }
  if (v12 > v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v12, 8);
    v7 = *(_QWORD *)a1;
    v10 = *(unsigned int *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = (char *)(v7 + 8 * v8);
  v14 = (unint64_t *)(v7 + 8 * v10);
  v15 = (char *)v14 - v13;
  v16 = ((char *)v14 - v13) >> 3;
  if (a3 > v16)
  {
    v17 = v11 + a3;
    *(_DWORD *)(a1 + 8) = v17;
    if (v8 != v10)
    {
      memcpy((void *)(v7 + 8 * v17 - 8 * v16), (const void *)(v7 + 8 * v8), (char *)v14 - v13);
      v18 = (unint64_t *)(v7 + 8 * v8);
      v19 = ((char *)v14 - v13) >> 3;
      if (v15 < 0x20)
        goto LABEL_52;
      v18 = (unint64_t *)&v13[8 * (v16 & 0xFFFFFFFFFFFFFFFCLL)];
      v19 = (v15 >> 3) & 3;
      v20 = vdupq_n_s64(a4);
      v21 = (int64x2_t *)(v7 + 8 * v8 + 16);
      v22 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v21[-1] = v20;
        *v21 = v20;
        v21 += 2;
        v22 -= 4;
      }
      while (v22);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_52:
        do
        {
          *v18++ = a4;
          --v19;
        }
        while (v19);
      }
    }
    v23 = a3 - v16;
    if (a3 != v16)
    {
      if (v23 < 4)
      {
        v24 = a3 - v16;
        do
        {
LABEL_30:
          *v14++ = a4;
          --v24;
        }
        while (v24);
        return v13;
      }
      v14 += v23 & 0xFFFFFFFFFFFFFFFCLL;
      v24 = v23 & 3;
      v38 = vdupq_n_s64(a4);
      v39 = (int64x2_t *)(v7 + 8 * v10 + 16);
      v40 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v39[-1] = v38;
        *v39 = v38;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v23 != (v23 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_30;
    }
    return v13;
  }
  v31 = 8 * a3;
  v32 = v10 + ((uint64_t)(8 * a3) >> 3);
  v33 = v10;
  if (v32 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v32, 8);
    v33 = *(unsigned int *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v34 = &v14[v31 / 0xFFFFFFFFFFFFFFF8];
  if (a3)
  {
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    v36 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v36 < 0xF)
    {
      v37 = &v14[v31 / 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_36:
        v48 = *v37++;
        *v35++ = v48;
      }
      while (v37 != v14);
      goto LABEL_37;
    }
    v41 = 8 * v33 + *(_QWORD *)a1;
    v37 = &v14[v31 / 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v31 - (8 * v10 + v7) + v41) < 0x20)
      goto LABEL_36;
    v42 = v36 + 1;
    v43 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    v35 = (_QWORD *)((char *)v35 + v43 * 8);
    v37 = &v34[v43];
    v44 = (__int128 *)(8 * v10 - v31 + v7 + 16);
    v45 = (_OWORD *)(v41 + 16);
    v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v47 = *v44;
      *(v45 - 1) = *(v44 - 1);
      *v45 = v47;
      v44 += 2;
      v45 += 2;
      v46 -= 4;
    }
    while (v46);
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_36;
  }
LABEL_37:
  *(_DWORD *)(a1 + 8) = v11 + a3;
  if (v34 != (unint64_t *)v13)
    memmove(&v13[v31], (const void *)(v7 + 8 * v8), (char *)&v14[v31 / 0xFFFFFFFFFFFFFFF8] - v13);
  if (a3)
  {
    if (a3 >= 4)
    {
      v49 = (unint64_t *)&v13[8 * (a3 & 0xFFFFFFFFFFFFFFFCLL)];
      v50 = a3 & 3;
      v51 = vdupq_n_s64(a4);
      v52 = (int64x2_t *)(v7 + 8 * v8 + 16);
      v53 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v52[-1] = v51;
        *v52 = v51;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if ((a3 & 0xFFFFFFFFFFFFFFFCLL) == a3)
        return v13;
    }
    else
    {
      v49 = (unint64_t *)(v7 + 8 * v8);
      v50 = a3;
    }
    do
    {
      *v49++ = a4;
      --v50;
    }
    while (v50);
  }
  return v13;
}

uint64_t mlir::anec::GOC::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  const void **v18;
  std::ios_base *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t *v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  const void **v30[2];
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int128 __p;
  __int128 v35;
  int v36;
  uint64_t v37[19];
  void *v38[2];
  _BYTE v39[64];
  char buffer[8];
  _QWORD v41[65];

  v41[63] = *MEMORY[0x1E0C80C00];
  ANECGOCLayerDescInitialize();
  *(_QWORD *)buffer = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)buffer);
  if (DefiningOp
    && (v7 = DefiningOp,
        v8 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 48) + 32))(*(_QWORD *)(v7 + 48), v8) & 1) != 0))
  {
    *(_QWORD *)buffer = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 88);
    v9 = mlir::Value::getDefiningOp((mlir::Value *)buffer);
    if (v9)
    {
      v10 = v9;
      v11 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 48) + 32))(*(_QWORD *)(v10 + 48), v11) & 1) != 0)
      {
        v38[0] = v39;
        v38[1] = (void *)0x100000000;
        v12 = 1;
        *(_QWORD *)buffer = 1;
        v30[0] = 0;
        ANECUnitValidatorCreate();
        v28 = 0;
        v29 = 0;
        if (ANECValidateGOCLayer())
        {
          v25 = (uint64_t *)*a1;
          v13 = MEMORY[0x1E0DE4FD0];
          v14 = MEMORY[0x1E0DE4FD0] + 104;
          v37[0] = MEMORY[0x1E0DE4FD0] + 104;
          v15 = MEMORY[0x1E0DE4FD0] + 64;
          v16 = MEMORY[0x1E0DE4F50];
          v17 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
          v18 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
          v31 = MEMORY[0x1E0DE4FD0] + 64;
          v30[0] = v17;
          *(const void ***)((char *)v30 + (_QWORD)*(v17 - 3)) = v18;
          v30[1] = 0;
          v19 = (std::ios_base *)((char *)v30 + (unint64_t)*(v30[0] - 3));
          std::ios_base::init(v19, &v32);
          v19[1].__vftable = 0;
          v19[1].__fmtflags_ = -1;
          v20 = *(_QWORD *)(v16 + 40);
          v31 = *(_QWORD *)(v16 + 32);
          *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = v20;
          v30[0] = *(const void ***)(v16 + 8);
          *(const void ***)((char *)v30 + (unint64_t)*(v30[0] - 3)) = *(const void ***)(v16 + 48);
          v37[0] = v14;
          v30[0] = (const void **)(v13 + 24);
          v31 = v15;
          std::streambuf::basic_streambuf();
          v21 = MEMORY[0x1E0DE4FB8] + 16;
          v32 = MEMORY[0x1E0DE4FB8] + 16;
          __p = 0u;
          v35 = 0u;
          v36 = 24;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Invalid configuration", 21);
          std::stringbuf::str();
          v30[0] = *(const void ***)v16;
          v22 = *(_QWORD *)(v16 + 72);
          *(const void ***)((char *)v30 + (unint64_t)*(v30[0] - 3)) = *(const void ***)(v16 + 64);
          v31 = v22;
          v32 = v21;
          if (SBYTE7(v35) < 0)
            operator delete((void *)__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x186DA15C0](v37);
          v33 = 260;
          v30[0] = (const void **)&v26;
          v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
          if (*(_QWORD *)buffer)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v41);
          if (v27 < 0)
            operator delete(v26);
        }
        ANECUnitValidatorDelete();
        if (v38[0] != v39)
          free(v38[0]);
        return v12;
      }
    }
    v23 = "failed: bias operand must be a constant";
  }
  else
  {
    v23 = "failed: scale operand must be a constant";
  }
  v30[0] = (const void **)v23;
  v33 = 259;
  mlir::OpState::emitOpError((uint64_t **)a1, v30, (uint64_t)buffer);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
  if (*(_QWORD *)buffer)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v41);
  return v12;
}

uint64_t mlir::anec::GOC::addOpToNetwork(mlir::anec **a1, uint64_t a2, mlir::anec::ANECIRWeights *a3)
{
  mlir::Operation *DefiningOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  mlir::Operation *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string *v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  llvm::APFloatBase *v25;
  std::string::size_type size;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  llvm::APFloatBase *v36;
  std::string::size_type v37;
  void *v38;
  uint64_t v39;
  uint64_t ANECIRDataType;
  uint64_t v41;
  uint64_t NextResultAtOffset;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  void *v61;
  void *v62;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  std::string __p;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(*((_QWORD *)*a1 + 9) + 56);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&__p);
  v6 = mlir::anec::ANECIRWeights::lookupConstant(a3, DefiningOp);
  v8 = v7;
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(*((_QWORD *)*a1 + 9) + 88);
  v9 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&__p);
  v10 = mlir::anec::ANECIRWeights::lookupConstant(a3, v9);
  v64 = v11;
  mlir::anec::computeOpKeyString(*a1, &__p);
  v12 = (char *)operator new(0xE0uLL);
  *(_QWORD *)v12 = off_1E0E4C6B8;
  v13 = (std::string *)(v12 + 8);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v12 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_DWORD *)v12 + 8) = 2;
  *((_QWORD *)v12 + 5) = 0;
  v12[48] = 0;
  *((_QWORD *)v12 + 7) = CFSTR("GOC");
  *((_QWORD *)v12 + 8) = v12 + 80;
  *((_QWORD *)v12 + 9) = 0x100000000;
  *((_QWORD *)v12 + 14) = v12 + 128;
  *((_QWORD *)v12 + 15) = 0x300000000;
  *(_QWORD *)v12 = &unk_1E0E4D4B8;
  *((_QWORD *)v12 + 22) = 0x8000000080000000;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *((_WORD *)v12 + 108) = 0;
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52270;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
  if (v14 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v69 = 0;
  v67 = *(void **)(*((_QWORD *)*a1 + 9) + 56);
  v17 = mlir::Value::getDefiningOp((mlir::Value *)&v67);
  if (!v17)
    goto LABEL_20;
  v18 = v17;
  v19 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 48) + 32))(*(_QWORD *)(v18 + 48), v19))
    goto LABEL_20;
  v20 = v10;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x100000000;
  mlir::Operation::fold(v18, 0, 0, (uint64_t)&__p);
  v21 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  v22 = mlir::DenseFPElementsAttr::classof(*(_QWORD *)__p.__r_.__value_.__l.__data_ & 0xFFFFFFFFFFFFFFF8);
  v23 = v21 & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
    v24 = v22;
  else
    v24 = 0;
  if (v24 == 1)
    v69 = v23;
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
    free(__p.__r_.__value_.__l.__data_);
  if (v24 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v69))
  {
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v69, (uint64_t)&__p);
    if (llvm::APFloat::convertToDouble((void **)&__p.__r_.__value_.__l.__data_) == 1.0)
    {
      v27 = llvm::APFloatBase::PPCDoubleDouble(v25);
    }
    else
    {
      size = __p.__r_.__value_.__l.__size_;
      v27 = llvm::APFloatBase::PPCDoubleDouble(v25);
      if (v27 == (void *)size)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&__p.__r_.__value_.__r.__words[1], (llvm::APInt *)&v67);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&__p.__r_.__value_.__r.__words[1], (uint64_t)&v67);
      v10 = v20;
      if (v68 > 0x40)
      {
        v61 = v67;
        *((_DWORD *)v12 + 45) = *(unsigned __int16 *)v67;
        *((_QWORD *)v12 + 26) = 2;
        operator delete[](v61);
      }
      else
      {
        *((_DWORD *)v12 + 45) = (unsigned __int16)((uint64_t)((_QWORD)v67 << -(uint64_t)v68) >> -(uint64_t)v68);
        *((_QWORD *)v12 + 26) = 2;
      }
    }
    if (v27 == (void *)__p.__r_.__value_.__l.__size_)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__p.__r_.__value_.__r.__words[1]);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p.__r_.__value_.__r.__words[1]);
  }
  else
  {
LABEL_20:
    *((_QWORD *)v12 + 24) = v6;
    *((_QWORD *)v12 + 26) = v8;
  }
  v28 = *(void **)(*((_QWORD *)*a1 + 9) + 88);
  v66 = 0;
  v67 = v28;
  v29 = mlir::Value::getDefiningOp((mlir::Value *)&v67);
  if (!v29)
    goto LABEL_35;
  v30 = v29;
  v31 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v30 + 48) + 32))(*(_QWORD *)(v30 + 48), v31))
    goto LABEL_35;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x100000000;
  mlir::Operation::fold(v30, 0, 0, (uint64_t)&__p);
  v32 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  v33 = mlir::DenseFPElementsAttr::classof(*(_QWORD *)__p.__r_.__value_.__l.__data_ & 0xFFFFFFFFFFFFFFF8);
  v34 = v32 & 0xFFFFFFFFFFFFFFF8;
  if ((v32 & 0xFFFFFFFFFFFFFFF8) != 0)
    v35 = v33;
  else
    v35 = 0;
  if (v35 == 1)
    v66 = v34;
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
    free(__p.__r_.__value_.__l.__data_);
  if (v35 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v66))
  {
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v66, (uint64_t)&__p);
    if (llvm::APFloat::convertToDouble((void **)&__p.__r_.__value_.__l.__data_) == 0.0)
    {
      v38 = llvm::APFloatBase::PPCDoubleDouble(v36);
    }
    else
    {
      v37 = __p.__r_.__value_.__l.__size_;
      v38 = llvm::APFloatBase::PPCDoubleDouble(v36);
      if (v38 == (void *)v37)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&__p.__r_.__value_.__r.__words[1], (llvm::APInt *)&v67);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&__p.__r_.__value_.__r.__words[1], (uint64_t)&v67);
      if (v68 > 0x40)
      {
        v62 = v67;
        *((_DWORD *)v12 + 44) = *(unsigned __int16 *)v67;
        *((_QWORD *)v12 + 25) = 2;
        operator delete[](v62);
      }
      else
      {
        *((_DWORD *)v12 + 44) = (unsigned __int16)((uint64_t)((_QWORD)v67 << -(uint64_t)v68) >> -(uint64_t)v68);
        *((_QWORD *)v12 + 25) = 2;
      }
    }
    if (v38 == (void *)__p.__r_.__value_.__l.__size_)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__p.__r_.__value_.__r.__words[1]);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p.__r_.__value_.__r.__words[1]);
  }
  else
  {
LABEL_35:
    *((_QWORD *)v12 + 23) = v10;
    *((_QWORD *)v12 + 25) = v64;
  }
  v39 = *(_QWORD *)(*((_QWORD *)*a1 + 9) + 24);
  ANECIRDataType = mlir::anec::getANECIRDataType(v39);
  if ((ANECIRDataType & 0xFF00000000) != 0)
  {
    mlir::anec::ANECIRUnit::AddInput((uint64_t)v12, (uint64_t)&__p, ANECIRDataType);
    v41 = *((_DWORD *)*a1 + 9) ? (uint64_t)*a1 - 16 : 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v41, 0);
    v67 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
    v68 = v43;
    if (v67)
    {
      v44 = *((_DWORD *)*a1 + 9) ? (uint64_t)*a1 - 16 : 0;
      v45 = mlir::detail::OpResultImpl::getNextResultAtOffset(v44, 0);
      v46 = mlir::anec::getANECIRDataType(v45);
      if ((v46 & 0xFF00000000) != 0)
      {
        v47 = v46;
        v48 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67) + 8);
        v49 = *((unsigned int *)v12 + 30);
        if (v49 >= *((_DWORD *)v12 + 31))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v12 + 112), v12 + 128, v49 + 1, 16);
          LODWORD(v49) = *((_DWORD *)v12 + 30);
        }
        v50 = (_QWORD *)(*((_QWORD *)v12 + 14) + 16 * v49);
        *v50 = v47;
        v50[1] = v48;
        ++*((_DWORD *)v12 + 30);
        *(_QWORD *)&v65 = v12;
        *((_QWORD *)&v65 + 1) = v15;
        do
          v51 = __ldxr(p_shared_owners);
        while (__stxr(v51 + 1, p_shared_owners));
        v52 = *(_QWORD **)(a2 + 232);
        if ((unint64_t)v52 >= *(_QWORD *)(a2 + 240))
        {
          v56 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v65);
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
          *(_QWORD *)(a2 + 232) = v56;
          if (!v54)
            goto LABEL_60;
        }
        else
        {
          *v52 = v12;
          v52[1] = v15;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
          *(_QWORD *)(a2 + 232) = v52 + 2;
          v54 = v15;
        }
        v57 = (unint64_t *)&v54->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
LABEL_60:
        v55 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_61;
      }
    }
  }
  v55 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_62;
LABEL_61:
  operator delete(__p.__r_.__value_.__l.__data_);
  do
LABEL_62:
    v59 = __ldaxr(p_shared_owners);
  while (__stlxr(v59 - 1, p_shared_owners));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return v55;
}

void mlir::anec::`anonymous namespace'::computeValueName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  mlir::anec *DefiningOp;
  uint64_t v4;
  std::string *v5;
  std::string::size_type v6;
  std::string __p;
  uint64_t v8;

  v8 = a1;
  if (mlir::Value::getDefiningOp((mlir::Value *)&v8))
  {
    DefiningOp = (mlir::anec *)mlir::Value::getDefiningOp((mlir::Value *)&v8);
    mlir::anec::computeOpKeyString(DefiningOp, a2);
  }
  else
  {
    v4 = v8;
    if ((~*(_DWORD *)(v8 + 8) & 7) != 0)
      v4 = 0;
    std::to_string(&__p, *(_DWORD *)(v4 + 24));
    v5 = std::string::insert(&__p, 0, "__arg");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void mlir::anec::ANECIRUnit::AddInput(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  std::string *p_p;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  std::string __p;
  int v15;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v15 = a3;
  v5 = *(unsigned int *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 64);
  p_p = &__p;
  if (v5 >= *(_DWORD *)(a1 + 76))
  {
    v10 = (unint64_t *)(a1 + 64);
    v11 = v5 + 1;
    v12 = v6 + 32 * v5 > (unint64_t)&__p;
    if (v6 <= (unint64_t)&__p && v12)
    {
      v13 = (char *)&__p - v6;
      llvm::SmallVectorTemplateBase<std::pair<std::string,mlir::anec::ANECIRDataType>,false>::grow(a1 + 64, v11);
      v6 = *v10;
      p_p = (std::string *)&v13[*v10];
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<std::string,mlir::anec::ANECIRDataType>,false>::grow(a1 + 64, v11);
      v6 = *v10;
      p_p = &__p;
    }
  }
  v8 = v6 + 32 * *(unsigned int *)(a1 + 72);
  v9 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)&p_p->__r_.__value_.__l + 2);
  *(_OWORD *)v8 = v9;
  p_p->__r_.__value_.__l.__size_ = 0;
  p_p->__r_.__value_.__r.__words[2] = 0;
  p_p->__r_.__value_.__r.__words[0] = 0;
  *(_DWORD *)(v8 + 24) = p_p[1].__r_.__value_.__l.__data_;
  ++*(_DWORD *)(a1 + 72);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t mlir::anec::GOC::getExecutionCost(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  _QWORD *OperandRange;
  _QWORD v11[2];
  uint64_t v12;

  v12 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!result)
    goto LABEL_6;
  while (1)
  {
    v5 = *(void **)(*(_QWORD *)(result + 48) + 16);
    if (v5 != &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id)
      break;
    v11[0] = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
    result = mlir::Value::getDefiningOp((mlir::Value *)v11);
    if (!result)
      goto LABEL_6;
  }
  if (v5 != &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id)
  {
LABEL_6:
    v11[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v11[1] = v6;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v11);
    mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
    v9 = *a1;
    OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v11);
  }
  return result;
}

uint64_t mlir::anec::GOC::fold(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  void *v12;
  llvm::APFloatBase *v13;
  void *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  result = 0;
  if (v4 == (*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
    if (!mlir::DenseFPElementsAttr::classof(v8))
      v8 = 0;
    v17 = v8;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16);
    if (mlir::DenseFPElementsAttr::classof(v9))
      v10 = v9;
    else
      v10 = 0;
    v16 = v10;
    if (!v8 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v17))
      return 0;
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v17, (uint64_t)&v18);
    v11 = llvm::APFloat::convertToFloat(&v18);
    v12 = (void *)v19[0];
    v14 = llvm::APFloatBase::PPCDoubleDouble(v13);
    if (v14 == v12)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
    result = 0;
    if (v11 == 1.0 && v10)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v16))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v16, (uint64_t)&v18);
        v15 = llvm::APFloat::convertToFloat(&v18);
        if (v14 == (void *)v19[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
        if (v15 == 0.0)
          return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
      }
      return 0;
    }
  }
  return result;
}

BOOL mlir::anec::Softmax::mutateOpForReshapeSwap(mlir::Operation **a1, const void *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t MultipliersAttr;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *ArgAttrsAttr;
  uint64_t v44;
  size_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t *v53;
  unint64_t v54;
  uint64_t v55;
  int64x2_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint64_t v64;
  int8x16_t v65;
  uint64_t v66;
  int8x8_t v67;
  int8x8_t v68;
  _BYTE *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _BYTE v86[40];
  void *v87;
  uint64_t v88;
  _BYTE v89[40];
  void *v90;
  uint64_t v91;
  _QWORD v92[6];

  v92[5] = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v90 = v6;
  v91 = v16;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
  v18 = v17;
  v90 = v92;
  v91 = 0x500000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::getValues<long long>(MultipliersAttr, (uint64_t)&v90);
  v20 = v91;
  if ((_DWORD)v91)
  {
    v21 = (char *)v90;
    v22 = (v91 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v23 = (char *)v90;
    if (v22 < 3)
      goto LABEL_16;
    v24 = v22 + 1;
    v25 = vdupq_n_s64(v18);
    v23 = (char *)v90 + 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v26 = (int64x2_t *)((char *)v90 + 16);
    v27 = vdupq_n_s64(5uLL);
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = vaddq_s64(vsubq_s64(*v26, v25), v27);
      v26[-1] = vaddq_s64(vsubq_s64(v26[-1], v25), v27);
      *v26 = v29;
      v26 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_16:
      v30 = &v21[8 * v20];
      do
      {
        *(_QWORD *)v23 = *(_QWORD *)v23 - v18 + 5;
        v23 += 8;
      }
      while (v23 != v30);
    }
  }
  v31 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v31)
    goto LABEL_27;
  v32 = *v31;
  v33 = mlir::TypeID::get<mlir::ShapedType>();
  v34 = *(unsigned int *)(v32 + 16);
  if (!(_DWORD)v34)
    goto LABEL_27;
  v35 = *(_QWORD **)(v32 + 8);
  v36 = &v35[2 * v34];
  do
  {
    v37 = v34 >> 1;
    v38 = &v35[2 * (v34 >> 1)];
    v40 = *v38;
    v39 = v38 + 2;
    v34 += ~(v34 >> 1);
    if (v40 < v33)
      v35 = v39;
    else
      v34 = v37;
  }
  while (v34);
  if (v35 != v36 && *v35 == v33)
    v41 = v35[1];
  else
LABEL_27:
    v41 = 0;
  v84 = v31;
  v85 = v41;
  ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v84);
  v44 = v42;
  v87 = v89;
  v88 = 0x500000000;
  v45 = 8 * v42;
  if ((unint64_t)(8 * v42) < 0x29)
  {
    v46 = 0;
    if (!v42)
      goto LABEL_33;
    goto LABEL_32;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, (8 * v42) >> 3, 8);
  v46 = v88;
  if (v44)
  {
LABEL_32:
    memcpy((char *)v87 + 8 * v46, ArgAttrsAttr, v45);
    v46 = v88;
  }
LABEL_33:
  v47 = v46 + (v45 >> 3);
  LODWORD(v88) = v47;
  if (v47 < 5)
    llvm::SmallVectorImpl<long long>::insert((uint64_t)&v87, (uint64_t)v87, 5 - v47, 1uLL);
  v84 = v86;
  v85 = 0x500000000;
  if ((unint64_t)(8 * a3) < 0x29)
  {
    v48 = 0;
    if (!a3)
      goto LABEL_40;
    goto LABEL_39;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, (8 * a3) >> 3, 8);
  v48 = v85;
  if (a3)
  {
LABEL_39:
    memcpy((char *)v84 + 8 * v48, a2, 8 * a3);
    v48 = v85;
  }
LABEL_40:
  v49 = v48 + a3;
  LODWORD(v85) = v49;
  if (v49 <= 4)
    llvm::SmallVectorImpl<long long>::insert((uint64_t)&v84, (uint64_t)v84, 5 - v49, 1uLL);
  if (!(_DWORD)v91)
  {
    v51 = 0;
    v52 = (int8x8_t)4;
    goto LABEL_54;
  }
  v50 = (v91 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v50 >= 3)
  {
    v54 = v50 + 1;
    v55 = (v50 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v53 = (int8x8_t *)((char *)v90 + 8 * v55);
    v56 = (int64x2_t *)((char *)v90 + 16);
    v57 = (int8x16_t)vdupq_n_s64(4uLL);
    v58 = 0uLL;
    v59 = v55;
    v60 = v57;
    v61 = 0uLL;
    do
    {
      v62 = (int8x16_t)v56[-1];
      v57 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v57, (int64x2_t)v62), v62, v57);
      v60 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v60, *v56), *(int8x16_t *)v56, v60);
      v58 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v58, (int64x2_t)v62), v58, v62);
      v61 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v61, *v56), v61, *(int8x16_t *)v56);
      v56 += 2;
      v59 -= 4;
    }
    while (v59);
    v63 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v58, (int64x2_t)v61), v58, v61);
    v64 = vextq_s8(v63, v63, 8uLL).u64[0];
    v51 = vbsl_s8((int8x8_t)vcgtd_s64(v63.i64[0], v64), *(int8x8_t *)v63.i8, (int8x8_t)v64);
    v65 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v60, (int64x2_t)v57), v57, v60);
    v66 = vextq_s8(v65, v65, 8uLL).u64[0];
    v52 = vbsl_s8((int8x8_t)vcgtd_s64(v66, v65.i64[0]), *(int8x8_t *)v65.i8, (int8x8_t)v66);
    if (v54 == v55)
      goto LABEL_54;
  }
  else
  {
    v51 = 0;
    v52 = (int8x8_t)4;
    v53 = (int8x8_t *)v90;
  }
  do
  {
    v68 = *v53++;
    v67 = v68;
    if (*(_QWORD *)&v68 < *(_QWORD *)&v52)
      v52 = v67;
    if (*(_QWORD *)&v51 <= *(_QWORD *)&v67)
      v51 = v67;
  }
  while (v53 != (int8x8_t *)((char *)v90 + 8 * v91));
LABEL_54:
  memset_pattern16(&v80, &unk_181233190, 0x20uLL);
  v69 = v87;
  v70 = v80;
  if ((_DWORD)v88 && (_DWORD)v85)
  {
    v71 = 0;
    v72 = v82;
    v73 = v83;
    v74 = v81;
    v75 = 8 * v85 - 8;
    v76 = 8 * v88 - 8;
    do
    {
      if (v71 >= *(_QWORD *)&v52)
      {
        if (v71 > *(_QWORD *)&v51)
        {
          v72 *= *((_QWORD *)v87 + v71);
          v82 = v72;
          v73 *= *((_QWORD *)v84 + v71);
          v83 = v73;
        }
      }
      else
      {
        v70 *= *((_QWORD *)v87 + v71);
        v80 = v70;
        v74 *= *((_QWORD *)v84 + v71);
        v81 = v74;
      }
      if (!v76)
        break;
      ++v71;
      v77 = v75;
      v75 -= 8;
      v76 -= 8;
    }
    while (v77);
  }
  else
  {
    v74 = v81;
    v72 = v82;
    v73 = v83;
  }
  if (v84 != v86)
  {
    free(v84);
    v69 = v87;
  }
  if (v69 != v89)
    free(v69);
  if (v90 != v92)
    free(v90);
  return v70 == v74 && v72 == v73;
}

void mlir::getValues<long long>(uint64_t a1, uint64_t a2)
{
  uint64_t NumElements;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v14, a1, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v17);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v11, a1, NumElements);
  while (1)
  {
    v5 = v14 == v11 && v15 == v12;
    if (v5 && v16 == v13)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v14, (llvm::APInt *)&__p);
    v6 = v10;
    if (v10 > 0x40)
      v7 = *(_QWORD *)__p;
    else
      v7 = (uint64_t)((_QWORD)__p << -(char)v10) >> -(char)v10;
    v8 = *(unsigned int *)(a2 + 8);
    if (v8 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8 + 1, 8);
      *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8)) = v7;
      LODWORD(v8) = *(_DWORD *)(a2 + 8);
      v6 = v10;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = v7;
    }
    *(_DWORD *)(a2 + 8) = v8 + 1;
    if (v6 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v16;
  }
}

uint64_t mlir::anec::Softmax::getZinIrUnitInfo@<X0>(mlir::anec::Softmax *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t MultipliersAttr;
  uint64_t NumElements;
  BOOL v19;
  mlir::anec **p_p;
  mlir::anec *v21;
  unint64_t v22;
  uint64_t DimFromIndex;
  int v24;
  uint64_t result;
  int v26;
  void *__p;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v4 = (char *)operator new(0x80uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *((_OWORD *)v4 + 5) = 0u;
  *(_QWORD *)v4 = off_1E0E13788;
  *((_QWORD *)v4 + 1) = 0;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  v4[120] = 0;
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v5 = *(_QWORD *)this - 16;
  else
    v5 = 0;
  v6 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_13;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_13;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_13:
    v16 = 0;
  v36[0] = v6;
  v36[1] = v16;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr((mlir::Operation **)this);
  v35 = MultipliersAttr;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v32, MultipliersAttr, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v35);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v29, MultipliersAttr, NumElements);
  while (1)
  {
    v19 = v32 == v29 && v33 == v30;
    if (v19 && v34 == v31)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v32, (llvm::APInt *)&__p);
    if (v28 >= 0x41)
      p_p = (mlir::anec **)__p;
    else
      p_p = (mlir::anec **)&__p;
    v21 = *p_p;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
    DimFromIndex = mlir::anec::getDimFromIndex(v21, v22);
    if ((DimFromIndex & 0xFF00000000) != 0)
      v24 = dword_1812330C0[(int)DimFromIndex];
    else
      v24 = 5;
    v26 = v24;
    std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>((uint64_t)(v4 + 80), &v26, &v26);
    if (v28 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v34;
  }
  result = mlir::anec::Concat::getInterleaveAttr((mlir::Operation **)this);
  v4[120] = result != 0;
  *a2 = v4;
  return result;
}

BOOL mlir::anec::Softmax::getSubtractMax(mlir::Operation **this)
{
  return mlir::anec::Concat::getInterleaveAttr(this) != 0;
}

uint64_t mlir::anec::Softmax::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t NumElements;
  uint64_t i;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::ios_base *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  mlir::Operation *v26;
  void *v27;
  char v28;
  void **v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t MultipliersAttr;
  _QWORD v34[6];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[8];
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42[19];
  void *__p;
  uint64_t v44;
  _BYTE v45[64];
  char buffer[8];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  ANECSoftmaxLayerDescInitialize();
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  v34[0] = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&MultipliersAttr);
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v7 = v6;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(buffer, MultipliersAttr, 0);
  v8 = MultipliersAttr;
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&MultipliersAttr);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v35, v8, NumElements);
  for (i = 1; ; ++i)
  {
    v11 = *(_QWORD *)buffer == v35 && v47[0] == v36;
    if (v11 && v48 == v37)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&__p);
    v12 = v44;
    if (v44 >= 0x41)
    {
      if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        v13 = *(_QWORD *)__p;
      else
        v13 = -1;
    }
    else
    {
      v13 = (uint64_t)__p;
    }
    if (v44 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v48;
  }
  __p = v45;
  v44 = 0x100000000;
  *(_QWORD *)buffer = 1;
  v35 = 0;
  ANECUnitValidatorCreate();
  v31 = 0;
  v32 = 0;
  if (ANECValidateSoftmaxLayer())
  {
    v26 = *a1;
    v14 = MEMORY[0x1E0DE4FD0];
    v15 = MEMORY[0x1E0DE4FD0] + 104;
    v42[0] = MEMORY[0x1E0DE4FD0] + 104;
    v16 = MEMORY[0x1E0DE4FD0] + 64;
    v17 = (uint64_t *)MEMORY[0x1E0DE4F50];
    v18 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
    v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
    v37 = MEMORY[0x1E0DE4FD0] + 64;
    v35 = v18;
    *(uint64_t *)((char *)&v35 + *(_QWORD *)(v18 - 24)) = v19;
    v36 = 0;
    v20 = (std::ios_base *)((char *)&v35 + *(_QWORD *)(v35 - 24));
    std::ios_base::init(v20, v38);
    v20[1].__vftable = 0;
    v20[1].__fmtflags_ = -1;
    v21 = v17[5];
    v37 = v17[4];
    *(uint64_t *)((char *)&v38[-1] + *(_QWORD *)(v37 - 24)) = v21;
    v35 = v17[1];
    *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v17[6];
    v42[0] = v15;
    v35 = v14 + 24;
    v37 = v16;
    std::streambuf::basic_streambuf();
    v22 = MEMORY[0x1E0DE4FB8] + 16;
    v38[0] = MEMORY[0x1E0DE4FB8] + 16;
    v39 = 0u;
    v40 = 0u;
    v41 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v35 = *v17;
    v23 = v17[9];
    *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v17[8];
    v37 = v23;
    v38[0] = v22;
    if (SBYTE7(v40) < 0)
      operator delete((void *)v39);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v42);
    v30 = 260;
    v29 = &v27;
    v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
    if (v28 < 0)
      operator delete(v27);
  }
  else
  {
    v24 = 1;
  }
  ANECUnitValidatorDelete();
  if (__p != v45)
    free(__p);
  return v24;
}

uint64_t mlir::anec::`anonymous namespace'::getANECDimension(mlir::anec::_anonymous_namespace_ *this, unint64_t a2)
{
  uint64_t DimFromIndex;
  int v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  _OWORD v12[6];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DimFromIndex = mlir::anec::getDimFromIndex(this, a2);
  if ((DimFromIndex & 0xFF00000000) != 0)
    v3 = dword_1812330C0[(int)DimFromIndex];
  else
    v3 = 5;
  if ((v4 & 1) == 0
  {
    v12[2] = xmmword_1E0E53878;
    v12[3] = unk_1E0E53888;
    v12[4] = xmmword_1E0E53898;
    v12[5] = unk_1E0E538A8;
    v12[0] = xmmword_1E0E53858;
    v12[1] = unk_1E0E53868;
  }
  v5 = qword_1EDC0BCC0;
  if (qword_1EDC0BCC0)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v3 >= v8)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_12;
      }
      if (v8 >= v3)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v6 = &qword_1EDC0BCC0;
    v7 = &qword_1EDC0BCC0;
LABEL_12:
    v9 = v7;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = v3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v9;
    *v6 = (uint64_t)v7;
    v10 = v7;
    {
      v10 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EDC0BCC0, v10);
    ++qword_1EDC0BCC8;
  }
  return v7[5];
}

uint64_t mlir::anec::Softmax::addOpToNetwork(mlir::anec::Softmax *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Softmax::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::spaceTransformInferReturnTypesCommon(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, uint64_t a8)
{
  uint64_t ArgAttrsAttr;
  unint64_t v11;
  unint64_t v12;
  unint64_t IndexFromDim;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  mlir::AffineMap *v42;
  void *v43;
  uint64_t OperandRange;
  uint64_t v45;
  uint64_t v46;
  _QWORD v50[2];
  void *v51[2];
  _BYTE v52[24];
  void *v53;
  uint64_t v54;
  _QWORD v55[24];

  v55[22] = *MEMORY[0x1E0C80C00];
  v50[0] = a3;
  v50[1] = a4;
  if (a3)
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
    v12 = v11;
    v53 = v55;
    v54 = 0x500000000;
    IndexFromDim = mlir::anec::getIndexFromDim(0, v11);
    v14 = mlir::anec::getIndexFromDim(1, v12);
    v15 = mlir::anec::getIndexFromDim(3, v12);
    v16 = mlir::anec::getIndexFromDim(4, v12);
    v17 = *(_QWORD *)(ArgAttrsAttr + 8 * IndexFromDim);
    v18 = *(_QWORD *)(ArgAttrsAttr + 8 * v14);
    v19 = *(_QWORD *)(ArgAttrsAttr + 8 * v15);
    v20 = *(_QWORD *)(ArgAttrsAttr + 8 * v16);
    v51[0] = v52;
    v51[1] = (void *)0x300000000;
    mlir::getValues<unsigned long long>(a5, (uint64_t)v51);
    v21 = *(_QWORD *)v51[0];
    v22 = *((_QWORD *)v51[0] + 1);
    if (*(uint64_t *)v51[0] <= 1)
      v21 = 1;
    if (v22 <= 1)
      v22 = 1;
    if (*((uint64_t *)v51[0] + 2) <= 1)
      v23 = 1;
    else
      v23 = *((_QWORD *)v51[0] + 2);
    v24 = v22 * v21 * v23;
    if (a7)
    {
      v25 = v19 / v22;
      v26 = v24 * v18;
      v27 = v24 * v17;
      v28 = (a6 & 1) == 0;
      if ((a6 & 1) != 0)
        v29 = v26;
      else
        v29 = v18;
      if (v28)
        v17 = v27;
      v30 = v20 / v21;
    }
    else
    {
      v25 = v22 * v19;
      v30 = v21 * v20;
      v32 = (a6 & 1) == 0;
      if ((a6 & 1) != 0)
        v29 = v18 / v24;
      else
        v29 = v18;
      if (v32)
        v17 /= v24;
    }
    v33 = v54;
    if (v54 >= HIDWORD(v54))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v54 + 1, 8);
      v33 = v54;
    }
    *((_QWORD *)v53 + v33) = v17;
    v34 = v54 + 1;
    LODWORD(v54) = v54 + 1;
    if (v12 == 5)
    {
      v35 = mlir::anec::getIndexFromDim(2, 5uLL);
      if (!v36)
      {
        v31 = 0;
LABEL_50:
        if (v51[0] != v52)
          free(v51[0]);
        if (v53 != v55)
          free(v53);
        return v31;
      }
      v37 = *(_QWORD *)(ArgAttrsAttr + 8 * v35);
      if (a7)
        v38 = v37 / v23;
      else
        v38 = v37 * v23;
      v39 = v54;
      if (v54 >= HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v54 + 1, 8);
        v39 = v54;
      }
      *((_QWORD *)v53 + v39) = v38;
      v34 = v54 + 1;
      LODWORD(v54) = v54 + 1;
    }
    if (v34 >= HIDWORD(v54))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v34 + 1, 8);
      v34 = v54;
    }
    *((_QWORD *)v53 + v34) = v29;
    v40 = (v54 + 1);
    LODWORD(v54) = v40;
    if (v40 >= HIDWORD(v54))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v40 + 1, 8);
      LODWORD(v40) = v54;
    }
    *((_QWORD *)v53 + v40) = v25;
    v41 = (v54 + 1);
    LODWORD(v54) = v41;
    if (v41 >= HIDWORD(v54))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v41 + 1, 8);
      LODWORD(v41) = v54;
    }
    *((_QWORD *)v53 + v41) = v30;
    LODWORD(v54) = v54 + 1;
    v42 = (mlir::AffineMap *)v54;
    v43 = v53;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
    v45 = mlir::MemRefType::get(v43, v42, OperandRange, 0, 0, 0);
    v46 = *(unsigned int *)(a8 + 8);
    if (v46 >= *(_DWORD *)(a8 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a8, (void *)(a8 + 16), v46 + 1, 8);
      LODWORD(v46) = *(_DWORD *)(a8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a8 + 8 * v46) = v45;
    ++*(_DWORD *)(a8 + 8);
    v31 = 1;
    goto LABEL_50;
  }
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v53);
  if (v53)
    mlir::Diagnostic::operator<<((uint64_t)&v54, "Expected a ShapedType for my input!");
  v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
  if (v53)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v54);
  return v31;
}

uint64_t *llvm::operator+@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = *((unsigned __int8 *)result + 32);
  if (*((_BYTE *)result + 32) && (v4 = *((unsigned __int8 *)a2 + 32), *((_BYTE *)a2 + 32)))
  {
    if (v3 == 1)
    {
      v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 32) = a2[4];
    }
    else if (v4 == 1)
    {
      v6 = *((_OWORD *)result + 1);
      *(_OWORD *)a3 = *(_OWORD *)result;
      *(_OWORD *)(a3 + 16) = v6;
      *(_QWORD *)(a3 + 32) = result[4];
    }
    else
    {
      v7 = (uint64_t *)*result;
      v8 = result[1];
      if (*((_BYTE *)result + 33) != 1)
      {
        LOBYTE(v3) = 2;
        v7 = result;
      }
      v9 = a2[1];
      if (*((_BYTE *)a2 + 33) == 1)
      {
        v10 = (uint64_t *)*a2;
      }
      else
      {
        LOBYTE(v4) = 2;
        v10 = a2;
      }
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = v10;
      *(_QWORD *)(a3 + 24) = v9;
      *(_BYTE *)(a3 + 32) = v3;
      *(_BYTE *)(a3 + 33) = v4;
    }
  }
  else
  {
    *(_WORD *)(a3 + 32) = 256;
  }
  return result;
}

void mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrChannelToSpaceUnitInfo,mlir::anec::ChannelToSpace>(mlir::Operation *a1@<X0>, int32x2_t **a2@<X8>)
{
  int32x2_t *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t MultipliersAttr;
  _QWORD *v9;
  uint64_t v10;
  mlir::Operation *v11;
  void *v12[2];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v4 = (int32x2_t *)operator new(0x60uLL);
  *(_OWORD *)v4[8].i8 = 0u;
  *(_OWORD *)v4[10].i8 = 0u;
  *(_OWORD *)v4[4].i8 = 0u;
  *(_OWORD *)v4[6].i8 = 0u;
  *(_OWORD *)v4->i8 = 0u;
  *(_OWORD *)v4[2].i8 = 0u;
  v4[9] = (int32x2_t)-1;
  *v4 = (int32x2_t)off_1E0E13BF8;
  v4[10] = (int32x2_t)0x100000001;
  v4[11].i32[0] = 1;
  v5 = *(void **)(*((_QWORD *)a1 + 6) + 16);
  if (a1 && v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToChannel,void>::id)
  {
    v6 = 36;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::ChannelToSpace,void>::id)
  {
    v6 = 37;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelShuffle,void>::id)
  {
    v6 = 31;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelUnshuffle,void>::id)
  {
    v6 = 32;
  }
  else
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::BatchToSpace,void>::id)
      v7 = 35;
    else
      v7 = 0;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToBatch,void>::id)
      v6 = 34;
    else
      v6 = v7;
  }
  v12[0] = v13;
  v12[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v11);
  mlir::getValues<unsigned long long>(MultipliersAttr, (uint64_t)v12);
  v9 = v12[0];
  v10 = *((_QWORD *)v12[0] + 2);
  v4[10] = vmovn_s64(*(int64x2_t *)v12[0]);
  v4[11].i32[0] = v10;
  v4[9] = 0;
  *a2 = v4;
  if (v9 != v13)
    free(v9);
}

uint64_t mlir::anec::ChannelToSpace::inferPromotedReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;
  mlir::MLIRContext *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t Context;
  uint64_t v33;
  uint64_t v34;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v36;
  mlir::CallGraphNode *v37;
  char v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = (uint64_t)v19;
  if (!v19)
    goto LABEL_10;
  v22 = *v19;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_10;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_10:
    v31 = 0;
  v41 = a6;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = a7;
  v45 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v41);
    if (v43)
      v43 = 0;
    mlir::OperationName::OperationName(&v42, "anec.channel_to_space", 21, Context);
    v43 = 1;
  }
  v46 = a4;
  v47 = a5;
  v33 = mlir::UnknownLoc::get(a1, v20);
  if (a3)
    v34 = a2;
  else
    v34 = v33;
  if (!mlir::anec::ChannelToSpaceAdaptor::verify(&v41, v34))
    return 0;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  v36 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v41);
  v37 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v36, **(_QWORD **)(v42 + 96));
  if ((v38 & 1) != 0)
    v39 = *((_QWORD *)v37 + 1);
  else
    v39 = 0;
  return mlir::anec::spaceTransformInferReturnTypesCommon(a2, a3, v21, v31, v39, 1, 0, a11);
}

uint64_t mlir::anec::ChannelToSpaceAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD v35[2];
  uint64_t OperandRange;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v39))
    {
      v5 = "'anec.channel_to_space' op requires attribute 'factors'";
      goto LABEL_32;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v37[0] = v6;
    v37[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v37);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v41 = v18;
    v42[0] = v28;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
    v40 = 3;
    if (v30 == 1 && *ArgAttrsAttr == v40)
    {
      v34 = v6;
      v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
      v35[1] = v31;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        return 1;
    }
  }
  v5 = "'anec.channel_to_space' op attribute 'factors' failed to satisfy constraint: ui64 elements attribute of shape {3}";
LABEL_32:
  v37[0] = v5;
  v38 = 259;
  mlir::emitError(a2, (uint64_t)v37, (uint64_t)&v41);
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v32;
}

uint64_t mlir::anec::ChannelToSpace::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t MultipliersAttr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mlir::Operation *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  const void **v27[2];
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int128 __p;
  __int128 v32;
  int v33;
  uint64_t v34[19];
  void *v35[2];
  _BYTE v36[64];
  void *v37[2];
  _BYTE v38[24];
  char buffer[8];
  _QWORD v40[66];

  v40[63] = *MEMORY[0x1E0C80C00];
  ANECChannelToSpaceLayerDescInitialize();
  v37[0] = v38;
  v37[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::getValues<long long>(MultipliersAttr, (uint64_t)v37);
  v7 = *((_QWORD *)v37[0] + 2);
  v25 = *(_OWORD *)v37[0];
  v26 = v7;
  v35[0] = v36;
  v35[1] = (void *)0x100000000;
  v8 = 1;
  *(_QWORD *)buffer = 1;
  v27[0] = 0;
  ANECUnitValidatorCreate();
  v23 = 0;
  v24 = 0;
  if (ANECValidateChannelToSpaceLayer())
  {
    v20 = *a1;
    v9 = MEMORY[0x1E0DE4FD0];
    v10 = MEMORY[0x1E0DE4FD0] + 104;
    v34[0] = MEMORY[0x1E0DE4FD0] + 104;
    v11 = MEMORY[0x1E0DE4FD0] + 64;
    v12 = MEMORY[0x1E0DE4F50];
    v13 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v14 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v28 = MEMORY[0x1E0DE4FD0] + 64;
    v27[0] = v13;
    *(const void ***)((char *)v27 + (_QWORD)*(v13 - 3)) = v14;
    v27[1] = 0;
    v15 = (std::ios_base *)((char *)v27 + (unint64_t)*(v27[0] - 3));
    std::ios_base::init(v15, &v29);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v16 = *(_QWORD *)(v12 + 40);
    v28 = *(_QWORD *)(v12 + 32);
    *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v16;
    v27[0] = *(const void ***)(v12 + 8);
    *(const void ***)((char *)v27 + (unint64_t)*(v27[0] - 3)) = *(const void ***)(v12 + 48);
    v34[0] = v10;
    v27[0] = (const void **)(v9 + 24);
    v28 = v11;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8] + 16;
    v29 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v32 = 0u;
    v33 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v27[0] = *(const void ***)v12;
    v18 = *(_QWORD *)(v12 + 72);
    *(const void ***)((char *)v27 + (unint64_t)*(v27[0] - 3)) = *(const void ***)(v12 + 64);
    v28 = v18;
    v29 = v17;
    if (SBYTE7(v32) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v34);
    v30 = 260;
    v27[0] = (const void **)&v21;
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    if (v22 < 0)
      operator delete(v21);
  }
  ANECUnitValidatorDelete();
  if (v35[0] != v36)
    free(v35[0]);
  if (v37[0] != v38)
    free(v37[0]);
  return v8;
}

uint64_t mlir::anec::ChannelToSpace::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  int32x2_t *v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  int32x2_t *v13;
  int32x2_t *v15;
  __int128 v16;

  mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrChannelToSpaceUnitInfo,mlir::anec::ChannelToSpace>(*a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (v5[3].i8[7] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)&v5[1], *(_QWORD *)&v5[2]);
  }
  else
  {
    v7 = *(_OWORD *)v5[1].i8;
    v3[2].__vftable = (std::__shared_weak_count_vtbl *)v5[3];
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = (uint64_t)v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_13;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_13:
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(int32x2_t *))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrPixelShuffleUnitInfo,mlir::anec::PixelShuffle>(mlir::Operation *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t MultipliersAttr;
  _QWORD *v9;
  uint64_t v10;
  mlir::Operation *v11;
  void *v12[2];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13B08;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 10) = 0x100000001;
  *((_DWORD *)v4 + 22) = 1;
  *((_DWORD *)v4 + 8) = 31;
  v5 = *(void **)(*((_QWORD *)a1 + 6) + 16);
  if (a1 && v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToChannel,void>::id)
  {
    v6 = 36;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::ChannelToSpace,void>::id)
  {
    v6 = 37;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelShuffle,void>::id)
  {
    v6 = 31;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelUnshuffle,void>::id)
  {
    v6 = 32;
  }
  else
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::BatchToSpace,void>::id)
      v7 = 35;
    else
      v7 = 0;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToBatch,void>::id)
      v6 = 34;
    else
      v6 = v7;
  }
  v12[0] = v13;
  v12[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v11);
  mlir::getValues<unsigned long long>(MultipliersAttr, (uint64_t)v12);
  v9 = v12[0];
  v10 = *((_QWORD *)v12[0] + 2);
  *((int32x2_t *)v4 + 10) = vmovn_s64(*(int64x2_t *)v12[0]);
  *((_DWORD *)v4 + 22) = v10;
  *((_QWORD *)v4 + 9) = 0;
  *a2 = v4;
  if (v9 != v13)
    free(v9);
}

uint64_t mlir::anec::PixelShuffle::inferPromotedReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;
  mlir::MLIRContext *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t Context;
  uint64_t v33;
  uint64_t v34;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v36;
  mlir::CallGraphNode *v37;
  char v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = (uint64_t)v19;
  if (!v19)
    goto LABEL_10;
  v22 = *v19;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_10;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_10:
    v31 = 0;
  v41 = a6;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = a7;
  v45 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v41);
    if (v43)
      v43 = 0;
    mlir::OperationName::OperationName(&v42, "anec.pixel_shuffle", 18, Context);
    v43 = 1;
  }
  v46 = a4;
  v47 = a5;
  v33 = mlir::UnknownLoc::get(a1, v20);
  if (a3)
    v34 = a2;
  else
    v34 = v33;
  if (!mlir::anec::PixelShuffleAdaptor::verify(&v41, v34))
    return 0;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  v36 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v41);
  v37 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v36, **(_QWORD **)(v42 + 96));
  if ((v38 & 1) != 0)
    v39 = *((_QWORD *)v37 + 1);
  else
    v39 = 0;
  return mlir::anec::spaceTransformInferReturnTypesCommon(a2, a3, v21, v31, v39, 1, 0, a11);
}

uint64_t mlir::anec::PixelShuffleAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD v35[2];
  uint64_t OperandRange;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v39))
    {
      v5 = "'anec.pixel_shuffle' op requires attribute 'factors'";
      goto LABEL_32;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v37[0] = v6;
    v37[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v37);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v41 = v18;
    v42[0] = v28;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
    v40 = 3;
    if (v30 == 1 && *ArgAttrsAttr == v40)
    {
      v34 = v6;
      v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
      v35[1] = v31;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        return 1;
    }
  }
  v5 = "'anec.pixel_shuffle' op attribute 'factors' failed to satisfy constraint: ui64 elements attribute of shape {3}";
LABEL_32:
  v37[0] = v5;
  v38 = 259;
  mlir::emitError(a2, (uint64_t)v37, (uint64_t)&v41);
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v32;
}

uint64_t mlir::anec::PixelShuffle::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t MultipliersAttr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mlir::Operation *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  const void **v27[2];
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int128 __p;
  __int128 v32;
  int v33;
  uint64_t v34[19];
  void *v35[2];
  _BYTE v36[64];
  void *v37[2];
  _BYTE v38[24];
  char buffer[8];
  _QWORD v40[66];

  v40[63] = *MEMORY[0x1E0C80C00];
  ANECPixelShuffleLayerDescInitialize();
  v37[0] = v38;
  v37[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::getValues<long long>(MultipliersAttr, (uint64_t)v37);
  v7 = *((_QWORD *)v37[0] + 2);
  v25 = *(_OWORD *)v37[0];
  v26 = v7;
  v35[0] = v36;
  v35[1] = (void *)0x100000000;
  v8 = 1;
  *(_QWORD *)buffer = 1;
  v27[0] = 0;
  ANECUnitValidatorCreate();
  v23 = 0;
  v24 = 0;
  if (ANECValidatePixelShuffleLayer())
  {
    v20 = *a1;
    v9 = MEMORY[0x1E0DE4FD0];
    v10 = MEMORY[0x1E0DE4FD0] + 104;
    v34[0] = MEMORY[0x1E0DE4FD0] + 104;
    v11 = MEMORY[0x1E0DE4FD0] + 64;
    v12 = MEMORY[0x1E0DE4F50];
    v13 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v14 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v28 = MEMORY[0x1E0DE4FD0] + 64;
    v27[0] = v13;
    *(const void ***)((char *)v27 + (_QWORD)*(v13 - 3)) = v14;
    v27[1] = 0;
    v15 = (std::ios_base *)((char *)v27 + (unint64_t)*(v27[0] - 3));
    std::ios_base::init(v15, &v29);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v16 = *(_QWORD *)(v12 + 40);
    v28 = *(_QWORD *)(v12 + 32);
    *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v16;
    v27[0] = *(const void ***)(v12 + 8);
    *(const void ***)((char *)v27 + (unint64_t)*(v27[0] - 3)) = *(const void ***)(v12 + 48);
    v34[0] = v10;
    v27[0] = (const void **)(v9 + 24);
    v28 = v11;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8] + 16;
    v29 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v32 = 0u;
    v33 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v27[0] = *(const void ***)v12;
    v18 = *(_QWORD *)(v12 + 72);
    *(const void ***)((char *)v27 + (unint64_t)*(v27[0] - 3)) = *(const void ***)(v12 + 64);
    v28 = v18;
    v29 = v17;
    if (SBYTE7(v32) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v34);
    v30 = 260;
    v27[0] = (const void **)&v21;
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    if (v22 < 0)
      operator delete(v21);
  }
  ANECUnitValidatorDelete();
  if (v35[0] != v36)
    free(v35[0]);
  if (v37[0] != v38)
    free(v37[0]);
  return v8;
}

uint64_t mlir::anec::PixelShuffle::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrPixelShuffleUnitInfo,mlir::anec::PixelShuffle>(*a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_13;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_13:
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrPixelUnshuffleUnitInfo,mlir::anec::PixelUnshuffle>(mlir::Operation *a1@<X0>, int32x2_t **a2@<X8>)
{
  int32x2_t *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t MultipliersAttr;
  _QWORD *v9;
  uint64_t v10;
  mlir::Operation *v11;
  void *v12[2];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v4 = (int32x2_t *)operator new(0x60uLL);
  *(_OWORD *)v4[8].i8 = 0u;
  *(_OWORD *)v4[10].i8 = 0u;
  *(_OWORD *)v4[4].i8 = 0u;
  *(_OWORD *)v4[6].i8 = 0u;
  *(_OWORD *)v4->i8 = 0u;
  *(_OWORD *)v4[2].i8 = 0u;
  v4[9] = (int32x2_t)-1;
  *v4 = (int32x2_t)off_1E0E13C18;
  v4[10] = (int32x2_t)0x100000001;
  v4[11].i32[0] = 1;
  v5 = *(void **)(*((_QWORD *)a1 + 6) + 16);
  if (a1 && v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToChannel,void>::id)
  {
    v6 = 36;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::ChannelToSpace,void>::id)
  {
    v6 = 37;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelShuffle,void>::id)
  {
    v6 = 31;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelUnshuffle,void>::id)
  {
    v6 = 32;
  }
  else
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::BatchToSpace,void>::id)
      v7 = 35;
    else
      v7 = 0;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToBatch,void>::id)
      v6 = 34;
    else
      v6 = v7;
  }
  v12[0] = v13;
  v12[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v11);
  mlir::getValues<unsigned long long>(MultipliersAttr, (uint64_t)v12);
  v9 = v12[0];
  v10 = *((_QWORD *)v12[0] + 2);
  v4[10] = vmovn_s64(*(int64x2_t *)v12[0]);
  v4[11].i32[0] = v10;
  v4[9] = 0;
  *a2 = v4;
  if (v9 != v13)
    free(v9);
}

uint64_t mlir::anec::PixelUnshuffle::inferPromotedReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;
  mlir::MLIRContext *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t Context;
  uint64_t v33;
  uint64_t v34;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v36;
  mlir::CallGraphNode *v37;
  char v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = (uint64_t)v19;
  if (!v19)
    goto LABEL_10;
  v22 = *v19;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_10;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_10:
    v31 = 0;
  v41 = a6;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = a7;
  v45 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v41);
    if (v43)
      v43 = 0;
    mlir::OperationName::OperationName(&v42, "anec.pixel_unshuffle", 20, Context);
    v43 = 1;
  }
  v46 = a4;
  v47 = a5;
  v33 = mlir::UnknownLoc::get(a1, v20);
  if (a3)
    v34 = a2;
  else
    v34 = v33;
  if (!mlir::anec::PixelUnshuffleAdaptor::verify(&v41, v34))
    return 0;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  v36 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v41);
  v37 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v36, **(_QWORD **)(v42 + 96));
  if ((v38 & 1) != 0)
    v39 = *((_QWORD *)v37 + 1);
  else
    v39 = 0;
  return mlir::anec::spaceTransformInferReturnTypesCommon(a2, a3, v21, v31, v39, 1, 1, a11);
}

uint64_t mlir::anec::PixelUnshuffleAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD v35[2];
  uint64_t OperandRange;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v39))
    {
      v5 = "'anec.pixel_unshuffle' op requires attribute 'factors'";
      goto LABEL_32;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v37[0] = v6;
    v37[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v37);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v41 = v18;
    v42[0] = v28;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
    v40 = 3;
    if (v30 == 1 && *ArgAttrsAttr == v40)
    {
      v34 = v6;
      v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
      v35[1] = v31;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        return 1;
    }
  }
  v5 = "'anec.pixel_unshuffle' op attribute 'factors' failed to satisfy constraint: ui64 elements attribute of shape {3}";
LABEL_32:
  v37[0] = v5;
  v38 = 259;
  mlir::emitError(a2, (uint64_t)v37, (uint64_t)&v41);
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v32;
}

uint64_t mlir::anec::PixelUnshuffle::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t MultipliersAttr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mlir::Operation *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  const void **v27[2];
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int128 __p;
  __int128 v32;
  int v33;
  uint64_t v34[19];
  void *v35[2];
  _BYTE v36[64];
  void *v37[2];
  _BYTE v38[24];
  char buffer[8];
  _QWORD v40[66];

  v40[63] = *MEMORY[0x1E0C80C00];
  ANECPixelUnshuffleLayerDescInitialize();
  v37[0] = v38;
  v37[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::getValues<long long>(MultipliersAttr, (uint64_t)v37);
  v7 = *((_QWORD *)v37[0] + 2);
  v25 = *(_OWORD *)v37[0];
  v26 = v7;
  v35[0] = v36;
  v35[1] = (void *)0x100000000;
  v8 = 1;
  *(_QWORD *)buffer = 1;
  v27[0] = 0;
  ANECUnitValidatorCreate();
  v23 = 0;
  v24 = 0;
  if (ANECValidatePixelUnshuffleLayer())
  {
    v20 = *a1;
    v9 = MEMORY[0x1E0DE4FD0];
    v10 = MEMORY[0x1E0DE4FD0] + 104;
    v34[0] = MEMORY[0x1E0DE4FD0] + 104;
    v11 = MEMORY[0x1E0DE4FD0] + 64;
    v12 = MEMORY[0x1E0DE4F50];
    v13 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v14 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v28 = MEMORY[0x1E0DE4FD0] + 64;
    v27[0] = v13;
    *(const void ***)((char *)v27 + (_QWORD)*(v13 - 3)) = v14;
    v27[1] = 0;
    v15 = (std::ios_base *)((char *)v27 + (unint64_t)*(v27[0] - 3));
    std::ios_base::init(v15, &v29);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v16 = *(_QWORD *)(v12 + 40);
    v28 = *(_QWORD *)(v12 + 32);
    *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v16;
    v27[0] = *(const void ***)(v12 + 8);
    *(const void ***)((char *)v27 + (unint64_t)*(v27[0] - 3)) = *(const void ***)(v12 + 48);
    v34[0] = v10;
    v27[0] = (const void **)(v9 + 24);
    v28 = v11;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8] + 16;
    v29 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v32 = 0u;
    v33 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v27[0] = *(const void ***)v12;
    v18 = *(_QWORD *)(v12 + 72);
    *(const void ***)((char *)v27 + (unint64_t)*(v27[0] - 3)) = *(const void ***)(v12 + 64);
    v28 = v18;
    v29 = v17;
    if (SBYTE7(v32) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v34);
    v30 = 260;
    v27[0] = (const void **)&v21;
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    if (v22 < 0)
      operator delete(v21);
  }
  ANECUnitValidatorDelete();
  if (v35[0] != v36)
    free(v35[0]);
  if (v37[0] != v38)
    free(v37[0]);
  return v8;
}

uint64_t mlir::anec::PixelUnshuffle::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  int32x2_t *v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  int32x2_t *v13;
  int32x2_t *v15;
  __int128 v16;

  mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrPixelUnshuffleUnitInfo,mlir::anec::PixelUnshuffle>(*a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (v5[3].i8[7] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)&v5[1], *(_QWORD *)&v5[2]);
  }
  else
  {
    v7 = *(_OWORD *)v5[1].i8;
    v3[2].__vftable = (std::__shared_weak_count_vtbl *)v5[3];
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = (uint64_t)v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_13;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_13:
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(int32x2_t *))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrSpaceToChannelUnitInfo,mlir::anec::SpaceToChannel>(mlir::Operation *a1@<X0>, int32x2_t **a2@<X8>)
{
  int32x2_t *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t MultipliersAttr;
  _QWORD *v9;
  uint64_t v10;
  mlir::Operation *v11;
  void *v12[2];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v4 = (int32x2_t *)operator new(0x60uLL);
  *(_OWORD *)v4[8].i8 = 0u;
  *(_OWORD *)v4[10].i8 = 0u;
  *(_OWORD *)v4[4].i8 = 0u;
  *(_OWORD *)v4[6].i8 = 0u;
  *(_OWORD *)v4->i8 = 0u;
  *(_OWORD *)v4[2].i8 = 0u;
  v4[9] = (int32x2_t)-1;
  *v4 = (int32x2_t)off_1E0E13C38;
  v4[10] = (int32x2_t)0x100000001;
  v4[11].i32[0] = 1;
  v5 = *(void **)(*((_QWORD *)a1 + 6) + 16);
  if (a1 && v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToChannel,void>::id)
  {
    v6 = 36;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::ChannelToSpace,void>::id)
  {
    v6 = 37;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelShuffle,void>::id)
  {
    v6 = 31;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelUnshuffle,void>::id)
  {
    v6 = 32;
  }
  else
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::BatchToSpace,void>::id)
      v7 = 35;
    else
      v7 = 0;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToBatch,void>::id)
      v6 = 34;
    else
      v6 = v7;
  }
  v12[0] = v13;
  v12[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v11);
  mlir::getValues<unsigned long long>(MultipliersAttr, (uint64_t)v12);
  v9 = v12[0];
  v10 = *((_QWORD *)v12[0] + 2);
  v4[10] = vmovn_s64(*(int64x2_t *)v12[0]);
  v4[11].i32[0] = v10;
  v4[9] = 0;
  *a2 = v4;
  if (v9 != v13)
    free(v9);
}

uint64_t mlir::anec::SpaceToChannel::inferPromotedReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;
  mlir::MLIRContext *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t Context;
  uint64_t v33;
  uint64_t v34;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v36;
  mlir::CallGraphNode *v37;
  char v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = (uint64_t)v19;
  if (!v19)
    goto LABEL_10;
  v22 = *v19;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_10;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_10:
    v31 = 0;
  v41 = a6;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = a7;
  v45 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v41);
    if (v43)
      v43 = 0;
    mlir::OperationName::OperationName(&v42, "anec.space_to_channel", 21, Context);
    v43 = 1;
  }
  v46 = a4;
  v47 = a5;
  v33 = mlir::UnknownLoc::get(a1, v20);
  if (a3)
    v34 = a2;
  else
    v34 = v33;
  if (!mlir::anec::SpaceToChannelAdaptor::verify(&v41, v34))
    return 0;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  v36 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v41);
  v37 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v36, **(_QWORD **)(v42 + 96));
  if ((v38 & 1) != 0)
    v39 = *((_QWORD *)v37 + 1);
  else
    v39 = 0;
  return mlir::anec::spaceTransformInferReturnTypesCommon(a2, a3, v21, v31, v39, 1, 1, a11);
}

uint64_t mlir::anec::SpaceToChannelAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD v35[2];
  uint64_t OperandRange;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v39))
    {
      v5 = "'anec.space_to_channel' op requires attribute 'factors'";
      goto LABEL_32;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v37[0] = v6;
    v37[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v37);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v41 = v18;
    v42[0] = v28;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
    v40 = 3;
    if (v30 == 1 && *ArgAttrsAttr == v40)
    {
      v34 = v6;
      v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
      v35[1] = v31;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        return 1;
    }
  }
  v5 = "'anec.space_to_channel' op attribute 'factors' failed to satisfy constraint: ui64 elements attribute of shape {3}";
LABEL_32:
  v37[0] = v5;
  v38 = 259;
  mlir::emitError(a2, (uint64_t)v37, (uint64_t)&v41);
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v32;
}

uint64_t mlir::anec::SpaceToChannel::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t MultipliersAttr;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  std::ios_base *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::Operation *v27;
  void *v28;
  char v29;
  void **v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43[19];
  void *v44;
  uint64_t v45;
  _BYTE v46[64];
  char buffer[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  ANECSpaceToChannelLayerDescInitialize();
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(buffer, MultipliersAttr, 0);
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)__p);
  v7 = (int)__p[1];
  if (LODWORD(__p[1]) < 0x41)
  {
    v8 = (uint64_t)__p[0];
    goto LABEL_8;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) <= 0x40)
  {
    v8 = *(_QWORD *)__p[0];
    goto LABEL_7;
  }
  v8 = -1;
  if (__p[0])
LABEL_7:
    operator delete[](__p[0]);
LABEL_8:
  v9 = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(__p, v9, 0);
  *(_OWORD *)buffer = *(_OWORD *)__p;
  v49 = v39;
  v48 = v38 + 1;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&v44);
  v10 = v45;
  if (v45 < 0x41)
  {
    v11 = (uint64_t)v44;
    goto LABEL_15;
  }
  if (v10 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v44) <= 0x40)
  {
    v11 = *(_QWORD *)v44;
    goto LABEL_14;
  }
  v11 = -1;
  if (v44)
LABEL_14:
    operator delete[](v44);
LABEL_15:
  v12 = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(__p, v12, 0);
  *(_OWORD *)buffer = *(_OWORD *)__p;
  v49 = v39;
  v48 = v38 + 2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&v44);
  v13 = v45;
  if (v45 < 0x41)
  {
    v14 = (uint64_t)v44;
    goto LABEL_22;
  }
  if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v44) <= 0x40)
  {
    v14 = *(_QWORD *)v44;
    goto LABEL_21;
  }
  v14 = -1;
  if (v44)
LABEL_21:
    operator delete[](v44);
LABEL_22:
  v34 = v8;
  v35 = v11;
  v36 = v14;
  v44 = v46;
  v45 = 0x100000000;
  *(_QWORD *)buffer = 1;
  __p[0] = 0;
  ANECUnitValidatorCreate();
  v32 = 0;
  v33 = 0;
  if (ANECValidateSpaceToChannelLayer())
  {
    v27 = *a1;
    v15 = MEMORY[0x1E0DE4FD0];
    v16 = MEMORY[0x1E0DE4FD0] + 104;
    v43[0] = MEMORY[0x1E0DE4FD0] + 104;
    v17 = MEMORY[0x1E0DE4FD0] + 64;
    v18 = MEMORY[0x1E0DE4F50];
    v19 = *(void **)(MEMORY[0x1E0DE4F50] + 16);
    v20 = *(void **)(MEMORY[0x1E0DE4F50] + 24);
    v38 = MEMORY[0x1E0DE4FD0] + 64;
    __p[0] = v19;
    *(void **)((char *)__p + *((_QWORD *)v19 - 3)) = v20;
    __p[1] = 0;
    v21 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v21, &v39);
    v21[1].__vftable = 0;
    v21[1].__fmtflags_ = -1;
    v22 = *(_QWORD *)(v18 + 40);
    v38 = *(_QWORD *)(v18 + 32);
    *(uint64_t *)((char *)&v38 + *(_QWORD *)(v38 - 24)) = v22;
    __p[0] = *(void **)(v18 + 8);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v18 + 48);
    v43[0] = v16;
    __p[0] = (void *)(v15 + 24);
    v38 = v17;
    std::streambuf::basic_streambuf();
    v23 = MEMORY[0x1E0DE4FB8] + 16;
    v39 = MEMORY[0x1E0DE4FB8] + 16;
    v40 = 0u;
    v41 = 0u;
    v42 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    __p[0] = *(void **)v18;
    v24 = *(_QWORD *)(v18 + 72);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v18 + 64);
    v38 = v24;
    v39 = v23;
    if (SBYTE7(v41) < 0)
      operator delete((void *)v40);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v43);
    v31 = 260;
    v30 = &v28;
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&buffer[8]);
    if (v29 < 0)
      operator delete(v28);
  }
  else
  {
    v25 = 1;
  }
  ANECUnitValidatorDelete();
  if (v44 != v46)
    free(v44);
  return v25;
}

uint64_t mlir::anec::SpaceToChannel::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  int32x2_t *v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  int32x2_t *v13;
  int32x2_t *v15;
  __int128 v16;

  mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrSpaceToChannelUnitInfo,mlir::anec::SpaceToChannel>(*a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (v5[3].i8[7] < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)&v5[1], *(_QWORD *)&v5[2]);
  }
  else
  {
    v7 = *(_OWORD *)v5[1].i8;
    v3[2].__vftable = (std::__shared_weak_count_vtbl *)v5[3];
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = (uint64_t)v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_13;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_13:
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(int32x2_t *))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrBatchToSpaceUnitInfo,mlir::anec::BatchToSpace>(mlir::Operation *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t MultipliersAttr;
  _QWORD *v9;
  uint64_t v10;
  mlir::Operation *v11;
  void *v12[2];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13AB0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 10) = 0x100000001;
  *((_DWORD *)v4 + 22) = 1;
  v5 = *(void **)(*((_QWORD *)a1 + 6) + 16);
  if (a1 && v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToChannel,void>::id)
  {
    v6 = 36;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::ChannelToSpace,void>::id)
  {
    v6 = 37;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelShuffle,void>::id)
  {
    v6 = 31;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelUnshuffle,void>::id)
  {
    v6 = 32;
  }
  else
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::BatchToSpace,void>::id)
      v7 = 35;
    else
      v7 = 0;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToBatch,void>::id)
      v6 = 34;
    else
      v6 = v7;
  }
  v12[0] = v13;
  v12[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v11);
  mlir::getValues<unsigned long long>(MultipliersAttr, (uint64_t)v12);
  v9 = v12[0];
  v10 = *((_QWORD *)v12[0] + 2);
  *((int32x2_t *)v4 + 10) = vmovn_s64(*(int64x2_t *)v12[0]);
  *((_DWORD *)v4 + 22) = v10;
  *((_QWORD *)v4 + 9) = 0;
  *a2 = v4;
  if (v9 != v13)
    free(v9);
}

uint64_t mlir::anec::BatchToSpace::inferPromotedReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;
  mlir::MLIRContext *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t Context;
  uint64_t v33;
  uint64_t v34;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v36;
  mlir::CallGraphNode *v37;
  char v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = (uint64_t)v19;
  if (!v19)
    goto LABEL_10;
  v22 = *v19;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_10;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_10:
    v31 = 0;
  v41 = a6;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = a7;
  v45 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v41);
    if (v43)
      v43 = 0;
    mlir::OperationName::OperationName(&v42, "anec.batch_to_space", 19, Context);
    v43 = 1;
  }
  v46 = a4;
  v47 = a5;
  v33 = mlir::UnknownLoc::get(a1, v20);
  if (a3)
    v34 = a2;
  else
    v34 = v33;
  if (!mlir::anec::BatchToSpaceAdaptor::verify(&v41, v34))
    return 0;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  v36 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v41);
  v37 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v36, **(_QWORD **)(v42 + 96));
  if ((v38 & 1) != 0)
    v39 = *((_QWORD *)v37 + 1);
  else
    v39 = 0;
  return mlir::anec::spaceTransformInferReturnTypesCommon(a2, a3, v21, v31, v39, 0, 0, a11);
}

uint64_t mlir::anec::BatchToSpaceAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD v35[2];
  uint64_t OperandRange;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v39))
    {
      v5 = "'anec.batch_to_space' op requires attribute 'factors'";
      goto LABEL_32;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v37[0] = v6;
    v37[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v37);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v41 = v18;
    v42[0] = v28;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
    v40 = 3;
    if (v30 == 1 && *ArgAttrsAttr == v40)
    {
      v34 = v6;
      v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
      v35[1] = v31;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        return 1;
    }
  }
  v5 = "'anec.batch_to_space' op attribute 'factors' failed to satisfy constraint: ui64 elements attribute of shape {3}";
LABEL_32:
  v37[0] = v5;
  v38 = 259;
  mlir::emitError(a2, (uint64_t)v37, (uint64_t)&v41);
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v32;
}

uint64_t mlir::anec::BatchToSpace::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t MultipliersAttr;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  std::ios_base *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::Operation *v27;
  void *v28;
  char v29;
  void **v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43[19];
  void *v44;
  uint64_t v45;
  _BYTE v46[64];
  char buffer[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  ANECBatchToSpaceLayerDescInitialize();
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(buffer, MultipliersAttr, 0);
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)__p);
  v7 = (int)__p[1];
  if (LODWORD(__p[1]) < 0x41)
  {
    v8 = (uint64_t)__p[0];
    goto LABEL_8;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) <= 0x40)
  {
    v8 = *(_QWORD *)__p[0];
    goto LABEL_7;
  }
  v8 = -1;
  if (__p[0])
LABEL_7:
    operator delete[](__p[0]);
LABEL_8:
  v9 = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(__p, v9, 0);
  *(_OWORD *)buffer = *(_OWORD *)__p;
  v49 = v39;
  v48 = v38 + 1;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&v44);
  v10 = v45;
  if (v45 < 0x41)
  {
    v11 = (uint64_t)v44;
    goto LABEL_15;
  }
  if (v10 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v44) <= 0x40)
  {
    v11 = *(_QWORD *)v44;
    goto LABEL_14;
  }
  v11 = -1;
  if (v44)
LABEL_14:
    operator delete[](v44);
LABEL_15:
  v12 = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(__p, v12, 0);
  *(_OWORD *)buffer = *(_OWORD *)__p;
  v49 = v39;
  v48 = v38 + 2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&v44);
  v13 = v45;
  if (v45 < 0x41)
  {
    v14 = (uint64_t)v44;
    goto LABEL_22;
  }
  if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v44) <= 0x40)
  {
    v14 = *(_QWORD *)v44;
    goto LABEL_21;
  }
  v14 = -1;
  if (v44)
LABEL_21:
    operator delete[](v44);
LABEL_22:
  v34 = v8;
  v35 = v11;
  v36 = v14;
  v44 = v46;
  v45 = 0x100000000;
  *(_QWORD *)buffer = 1;
  __p[0] = 0;
  ANECUnitValidatorCreate();
  v32 = 0;
  v33 = 0;
  if (ANECValidateBatchToSpaceLayer())
  {
    v27 = *a1;
    v15 = MEMORY[0x1E0DE4FD0];
    v16 = MEMORY[0x1E0DE4FD0] + 104;
    v43[0] = MEMORY[0x1E0DE4FD0] + 104;
    v17 = MEMORY[0x1E0DE4FD0] + 64;
    v18 = MEMORY[0x1E0DE4F50];
    v19 = *(void **)(MEMORY[0x1E0DE4F50] + 16);
    v20 = *(void **)(MEMORY[0x1E0DE4F50] + 24);
    v38 = MEMORY[0x1E0DE4FD0] + 64;
    __p[0] = v19;
    *(void **)((char *)__p + *((_QWORD *)v19 - 3)) = v20;
    __p[1] = 0;
    v21 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v21, &v39);
    v21[1].__vftable = 0;
    v21[1].__fmtflags_ = -1;
    v22 = *(_QWORD *)(v18 + 40);
    v38 = *(_QWORD *)(v18 + 32);
    *(uint64_t *)((char *)&v38 + *(_QWORD *)(v38 - 24)) = v22;
    __p[0] = *(void **)(v18 + 8);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v18 + 48);
    v43[0] = v16;
    __p[0] = (void *)(v15 + 24);
    v38 = v17;
    std::streambuf::basic_streambuf();
    v23 = MEMORY[0x1E0DE4FB8] + 16;
    v39 = MEMORY[0x1E0DE4FB8] + 16;
    v40 = 0u;
    v41 = 0u;
    v42 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    __p[0] = *(void **)v18;
    v24 = *(_QWORD *)(v18 + 72);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v18 + 64);
    v38 = v24;
    v39 = v23;
    if (SBYTE7(v41) < 0)
      operator delete((void *)v40);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v43);
    v31 = 260;
    v30 = &v28;
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&buffer[8]);
    if (v29 < 0)
      operator delete(v28);
  }
  else
  {
    v25 = 1;
  }
  ANECUnitValidatorDelete();
  if (v44 != v46)
    free(v44);
  return v25;
}

uint64_t mlir::anec::BatchToSpace::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrBatchToSpaceUnitInfo,mlir::anec::BatchToSpace>(*a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_13;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_13:
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrSpaceToBatchUnitInfo,mlir::anec::SpaceToBatch>(mlir::Operation *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t MultipliersAttr;
  _QWORD *v9;
  uint64_t v10;
  mlir::Operation *v11;
  void *v12[2];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13B28;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 10) = 0x100000001;
  *((_DWORD *)v4 + 22) = 1;
  v5 = *(void **)(*((_QWORD *)a1 + 6) + 16);
  if (a1 && v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToChannel,void>::id)
  {
    v6 = 36;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::ChannelToSpace,void>::id)
  {
    v6 = 37;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelShuffle,void>::id)
  {
    v6 = 31;
  }
  else if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::PixelUnshuffle,void>::id)
  {
    v6 = 32;
  }
  else
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::BatchToSpace,void>::id)
      v7 = 35;
    else
      v7 = 0;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::anec::SpaceToBatch,void>::id)
      v6 = 34;
    else
      v6 = v7;
  }
  v12[0] = v13;
  v12[1] = (void *)0x300000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v11);
  mlir::getValues<unsigned long long>(MultipliersAttr, (uint64_t)v12);
  v9 = v12[0];
  v10 = *((_QWORD *)v12[0] + 2);
  *((int32x2_t *)v4 + 10) = vmovn_s64(*(int64x2_t *)v12[0]);
  *((_DWORD *)v4 + 22) = v10;
  *((_QWORD *)v4 + 9) = 0;
  *a2 = v4;
  if (v9 != v13)
    free(v9);
}

uint64_t mlir::anec::SpaceToBatch::inferPromotedReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;
  mlir::MLIRContext *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t Context;
  uint64_t v33;
  uint64_t v34;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v36;
  mlir::CallGraphNode *v37;
  char v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = (uint64_t)v19;
  if (!v19)
    goto LABEL_10;
  v22 = *v19;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_10;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_10:
    v31 = 0;
  v41 = a6;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = a7;
  v45 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v41);
    if (v43)
      v43 = 0;
    mlir::OperationName::OperationName(&v42, "anec.space_to_batch", 19, Context);
    v43 = 1;
  }
  v46 = a4;
  v47 = a5;
  v33 = mlir::UnknownLoc::get(a1, v20);
  if (a3)
    v34 = a2;
  else
    v34 = v33;
  if (!mlir::anec::SpaceToBatchAdaptor::verify(&v41, v34))
    return 0;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  v36 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v41);
  v37 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v36, **(_QWORD **)(v42 + 96));
  if ((v38 & 1) != 0)
    v39 = *((_QWORD *)v37 + 1);
  else
    v39 = 0;
  return mlir::anec::spaceTransformInferReturnTypesCommon(a2, a3, v21, v31, v39, 0, 1, a11);
}

uint64_t mlir::anec::SpaceToBatchAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD v35[2];
  uint64_t OperandRange;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v39))
    {
      v5 = "'anec.space_to_batch' op requires attribute 'factors'";
      goto LABEL_32;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v37[0] = v6;
    v37[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v37);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v41 = v18;
    v42[0] = v28;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
    v40 = 3;
    if (v30 == 1 && *ArgAttrsAttr == v40)
    {
      v34 = v6;
      v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
      v35[1] = v31;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        return 1;
    }
  }
  v5 = "'anec.space_to_batch' op attribute 'factors' failed to satisfy constraint: ui64 elements attribute of shape {3}";
LABEL_32:
  v37[0] = v5;
  v38 = 259;
  mlir::emitError(a2, (uint64_t)v37, (uint64_t)&v41);
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v32;
}

uint64_t mlir::anec::SpaceToBatch::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t MultipliersAttr;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  std::ios_base *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::Operation *v27;
  void *v28;
  char v29;
  void **v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43[19];
  void *v44;
  uint64_t v45;
  _BYTE v46[64];
  char buffer[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  ANECSpaceToBatchLayerDescInitialize();
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(buffer, MultipliersAttr, 0);
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)__p);
  v7 = (int)__p[1];
  if (LODWORD(__p[1]) < 0x41)
  {
    v8 = (uint64_t)__p[0];
    goto LABEL_8;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) <= 0x40)
  {
    v8 = *(_QWORD *)__p[0];
    goto LABEL_7;
  }
  v8 = -1;
  if (__p[0])
LABEL_7:
    operator delete[](__p[0]);
LABEL_8:
  v9 = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(__p, v9, 0);
  *(_OWORD *)buffer = *(_OWORD *)__p;
  v49 = v39;
  v48 = v38 + 1;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&v44);
  v10 = v45;
  if (v45 < 0x41)
  {
    v11 = (uint64_t)v44;
    goto LABEL_15;
  }
  if (v10 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v44) <= 0x40)
  {
    v11 = *(_QWORD *)v44;
    goto LABEL_14;
  }
  v11 = -1;
  if (v44)
LABEL_14:
    operator delete[](v44);
LABEL_15:
  v12 = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(__p, v12, 0);
  *(_OWORD *)buffer = *(_OWORD *)__p;
  v49 = v39;
  v48 = v38 + 2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&v44);
  v13 = v45;
  if (v45 < 0x41)
  {
    v14 = (uint64_t)v44;
    goto LABEL_22;
  }
  if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v44) <= 0x40)
  {
    v14 = *(_QWORD *)v44;
    goto LABEL_21;
  }
  v14 = -1;
  if (v44)
LABEL_21:
    operator delete[](v44);
LABEL_22:
  v34 = v8;
  v35 = v11;
  v36 = v14;
  v44 = v46;
  v45 = 0x100000000;
  *(_QWORD *)buffer = 1;
  __p[0] = 0;
  ANECUnitValidatorCreate();
  v32 = 0;
  v33 = 0;
  if (ANECValidateSpaceToBatchLayer())
  {
    v27 = *a1;
    v15 = MEMORY[0x1E0DE4FD0];
    v16 = MEMORY[0x1E0DE4FD0] + 104;
    v43[0] = MEMORY[0x1E0DE4FD0] + 104;
    v17 = MEMORY[0x1E0DE4FD0] + 64;
    v18 = MEMORY[0x1E0DE4F50];
    v19 = *(void **)(MEMORY[0x1E0DE4F50] + 16);
    v20 = *(void **)(MEMORY[0x1E0DE4F50] + 24);
    v38 = MEMORY[0x1E0DE4FD0] + 64;
    __p[0] = v19;
    *(void **)((char *)__p + *((_QWORD *)v19 - 3)) = v20;
    __p[1] = 0;
    v21 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v21, &v39);
    v21[1].__vftable = 0;
    v21[1].__fmtflags_ = -1;
    v22 = *(_QWORD *)(v18 + 40);
    v38 = *(_QWORD *)(v18 + 32);
    *(uint64_t *)((char *)&v38 + *(_QWORD *)(v38 - 24)) = v22;
    __p[0] = *(void **)(v18 + 8);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v18 + 48);
    v43[0] = v16;
    __p[0] = (void *)(v15 + 24);
    v38 = v17;
    std::streambuf::basic_streambuf();
    v23 = MEMORY[0x1E0DE4FB8] + 16;
    v39 = MEMORY[0x1E0DE4FB8] + 16;
    v40 = 0u;
    v41 = 0u;
    v42 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    __p[0] = *(void **)v18;
    v24 = *(_QWORD *)(v18 + 72);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v18 + 64);
    v38 = v24;
    v39 = v23;
    if (SBYTE7(v41) < 0)
      operator delete((void *)v40);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v43);
    v31 = 260;
    v30 = &v28;
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&buffer[8]);
    if (v29 < 0)
      operator delete(v28);
  }
  else
  {
    v25 = 1;
  }
  ANECUnitValidatorDelete();
  if (v44 != v46)
    free(v44);
  return v25;
}

uint64_t mlir::anec::SpaceToBatch::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::spaceTransformGetZinIrUnitInfo<ZinIrSpaceToBatchUnitInfo,mlir::anec::SpaceToBatch>(*a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_13;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_13:
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::Resize::inferPromotedReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v19;
  mlir::MLIRContext *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t Context;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t ArgAttrsAttr;
  unint64_t IndexFromDim;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  mlir::CallGraphNode *v45;
  uint64_t v46;
  mlir::CallGraphNode *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  void *v52;
  llvm::APFloatBase *v53;
  void *v54;
  mlir::CallGraphNode *v55;
  uint64_t v56;
  mlir::CallGraphNode *v57;
  char v58;
  uint64_t v59;
  float v60;
  void *Height;
  void *Width;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  mlir::AffineMap *v71;
  void *v72;
  uint64_t OperandRange;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[40];
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  _QWORD v92[25];

  v92[23] = *MEMORY[0x1E0C80C00];
  v19 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = v19;
  if (!v19)
    goto LABEL_10;
  v22 = *v19;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_10;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_10:
    v31 = 0;
  v79[0] = v21;
  v79[1] = v31;
  v84 = a6;
  LOBYTE(v85) = 0;
  v86 = 0;
  v87 = a7;
  v88 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v84);
    if (v86)
      v86 = 0;
    mlir::OperationName::OperationName(&v85, "anec.resize", 11, Context);
    v86 = 1;
  }
  v89 = a4;
  v90 = a5;
  v33 = mlir::UnknownLoc::get(a1, v20);
  v34 = a3;
  if (a3)
    v35 = a2;
  else
    v35 = v33;
  if (!mlir::anec::ResizeAdaptor::verify(&v84, v35))
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v79);
  v37 = v36;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v79);
  v81 = v83;
  v82 = 0x500000000;
  IndexFromDim = mlir::anec::getIndexFromDim(0, v37);
  v40 = mlir::anec::getIndexFromDim(1, v37);
  v41 = mlir::anec::getIndexFromDim(3, v37);
  v42 = mlir::anec::getIndexFromDim(4, v37);
  v43 = *(_QWORD *)(ArgAttrsAttr + 8 * IndexFromDim);
  v77 = *(_QWORD *)(ArgAttrsAttr + 8 * v41);
  v78 = *(_QWORD *)(ArgAttrsAttr + 8 * v40);
  v44 = *(_QWORD *)(ArgAttrsAttr + 8 * v42);
  v45 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v84) + 48);
  v46 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v84);
  v47 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v45, (mlir::CallGraphNode *)(v46 - 16), *(_QWORD *)(*(_QWORD *)(v85 + 96) + 24));
  if ((v48 & 1) != 0)
  {
    v49 = *((_QWORD *)v47 + 1);
    if (v49 && *(_UNKNOWN **)(*(_QWORD *)v49 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      v49 = 0;
  }
  else
  {
    v49 = 0;
  }
  v80 = v49;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v80, (uint64_t)&v91);
  v51 = llvm::APFloat::convertToFloat(&v91);
  v52 = (void *)v92[0];
  v54 = llvm::APFloatBase::PPCDoubleDouble(v53);
  if (v54 == v52)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v92);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v92);
  v55 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v84) + 48);
  v56 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v84);
  v57 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v55, (mlir::CallGraphNode *)(v56 - 16), *(_QWORD *)(*(_QWORD *)(v85 + 96) + 32));
  if ((v58 & 1) != 0)
  {
    v59 = *((_QWORD *)v57 + 1);
    if (v59 && *(_UNKNOWN **)(*(_QWORD *)v59 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      v59 = 0;
  }
  else
  {
    v59 = 0;
  }
  v80 = v59;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v80, (uint64_t)&v91);
  v60 = llvm::APFloat::convertToFloat(&v91);
  if (v54 == (void *)v92[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v92);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v92);
  if (v51 == -1.0 && v60 == -1.0)
  {
    Height = mlir::anec::detail::ResizeGenericAdaptorBase::getHeight((mlir::anec::detail::ResizeGenericAdaptorBase *)&v84);
    Width = mlir::anec::detail::ResizeGenericAdaptorBase::getWidth((mlir::anec::detail::ResizeGenericAdaptorBase *)&v84);
  }
  else
  {
    if (v51 == -1.0 || v51 <= 0.0 || v60 == -1.0 || v60 <= 0.0)
    {
      if (v34)
      {
        mlir::emitError(a2, (uint64_t)&v91);
        if (v91)
          mlir::Diagnostic::operator<<((uint64_t)v92, "scale_factor_x and scale_factor_y must be >= 0.0f");
        v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
        if (v91)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v92);
      }
      else
      {
        v50 = 0;
      }
      goto LABEL_60;
    }
    Width = (void *)vcvtms_s32_f32(v51 * (float)v44);
    Height = (void *)vcvtms_s32_f32(v60 * (float)v77);
  }
  v63 = v82;
  if (v82 >= HIDWORD(v82))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v82 + 1, 8);
    v63 = v82;
  }
  *((_QWORD *)v81 + v63) = v43;
  LODWORD(v82) = v82 + 1;
  v64 = mlir::anec::getIndexFromDim(2, v37);
  v65 = v82;
  if (v66)
  {
    v67 = *(_QWORD *)(ArgAttrsAttr + 8 * v64);
    v68 = v78;
    if (v82 >= HIDWORD(v82))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v82 + 1, 8);
      v65 = v82;
    }
    *((_QWORD *)v81 + v65) = v67;
    v65 = v82 + 1;
    LODWORD(v82) = v82 + 1;
  }
  else
  {
    v68 = v78;
  }
  if (v65 >= HIDWORD(v82))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v65 + 1, 8);
    v65 = v82;
  }
  *((_QWORD *)v81 + v65) = v68;
  v69 = (v82 + 1);
  LODWORD(v82) = v69;
  if (v69 >= HIDWORD(v82))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v69 + 1, 8);
    LODWORD(v69) = v82;
  }
  *((_QWORD *)v81 + v69) = Height;
  v70 = (v82 + 1);
  LODWORD(v82) = v70;
  if (v70 >= HIDWORD(v82))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v70 + 1, 8);
    LODWORD(v70) = v82;
  }
  *((_QWORD *)v81 + v70) = Width;
  LODWORD(v82) = v82 + 1;
  v71 = (mlir::AffineMap *)v82;
  v72 = v81;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v79);
  v74 = mlir::MemRefType::get(v72, v71, OperandRange, 0, 0, 0);
  v75 = *(unsigned int *)(a11 + 8);
  if (v75 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v75 + 1, 8);
    LODWORD(v75) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v75) = v74;
  ++*(_DWORD *)(a11 + 8);
  v50 = 1;
LABEL_60:
  if (v81 != v83)
    free(v81);
  return v50;
}

uint64_t mlir::anec::ResizeAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *ArgAttrsAttr;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  uint64_t *v23;
  uint64_t *Type;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *Value;
  _QWORD v33[24];

  v33[23] = *MEMORY[0x1E0C80C00];
  v30 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v30);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v30))
    {
      v5 = "'anec.resize' op requires attribute 'height'";
LABEL_25:
      v27 = (uint64_t *)v5;
      v29 = 259;
      mlir::emitError(a2, (uint64_t)&v27, (uint64_t)&Value);
      v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v33);
      return v11;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v6 = (uint64_t *)*((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v30))
    {
      v5 = "'anec.resize' op requires attribute 'sampling_methods'";
      goto LABEL_25;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v7 = (uint64_t *)*((_QWORD *)i + 1);
  v26 = v7;
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v30))
    {
      v5 = "'anec.resize' op requires attribute 'sampling_modes'";
      goto LABEL_25;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v8 = (uint64_t *)*((_QWORD *)i + 1);
  v25 = v8;
  if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v30))
  {
LABEL_24:
    v5 = "'anec.resize' op requires attribute 'width'";
    goto LABEL_25;
  }
  v9 = 0;
  v10 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 40) != mlir::CallGraphNode::getCallableRegion(i))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion(i))
    {
      v9 = (uint64_t *)*((_QWORD *)i + 1);
    }
    else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 32) == mlir::CallGraphNode::getCallableRegion(i))
    {
      v10 = (uint64_t *)*((_QWORD *)i + 1);
    }
    i = (mlir::CallGraphNode *)((char *)i + 16);
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v30))
      goto LABEL_24;
  }
  v13 = (uint64_t *)*((_QWORD *)i + 1);
  if (v6)
  {
    if (*(_UNKNOWN **)(*v6 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v27 = v6,
          Value = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v27),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)))
    {
      v5 = "'anec.resize' op attribute 'height' failed to satisfy constraint: 64-bit unsigned integer attribute";
      goto LABEL_25;
    }
  }
  if (!v13
    || *(_UNKNOWN **)(*v13 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && (v27 = v13,
        Value = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v27),
        mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)))
  {
    if (!v9
      || *(_UNKNOWN **)(*v9 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
      && (v27 = v9,
          Value = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v27),
          mlir::Type::isF32((mlir::Type *)&Value)))
    {
      if (!v10
        || *(_UNKNOWN **)(*v10 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
        && (v27 = v10,
            Value = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v27),
            mlir::Type::isF32((mlir::Type *)&Value)))
      {
        if (!v7)
          goto LABEL_59;
        v27 = mlir::Attribute::cast<mlir::ElementsAttr>(&v26);
        v28 = v14;
        Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v27);
        Value = mlir::Type::cast<mlir::ShapedType>(&Type);
        v33[0] = v15;
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
        v31 = 2;
        if (v17 != 1)
          goto LABEL_54;
        if (*ArgAttrsAttr == v31
          && (v23 = v26,
              (llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_1>((uint64_t *)&v23) & 1) != 0))
        {
LABEL_59:
          if (!v8)
            return 1;
          v27 = mlir::Attribute::cast<mlir::ElementsAttr>(&v25);
          v28 = v18;
          Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v27);
          Value = mlir::Type::cast<mlir::ShapedType>(&Type);
          v33[0] = v19;
          v20 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
          v31 = 2;
          if (v21 == 1 && *v20 == v31)
          {
            v23 = v25;
            if ((llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_2>((uint64_t *)&v23) & 1) != 0)
              return 1;
          }
          v22 = "'anec.resize' op attribute 'sampling_modes' failed to satisfy constraint: SamplingGridMode elements attr"
                "ibute of shape {2}";
        }
        else
        {
LABEL_54:
          v22 = "'anec.resize' op attribute 'sampling_methods' failed to satisfy constraint: SamplingGridMethod elements "
                "attribute of shape {2}";
        }
      }
      else
      {
        v22 = "'anec.resize' op attribute 'scale_factor_y' failed to satisfy constraint: 32-bit float attribute";
      }
    }
    else
    {
      v22 = "'anec.resize' op attribute 'scale_factor_x' failed to satisfy constraint: 32-bit float attribute";
    }
  }
  else
  {
    v22 = "'anec.resize' op attribute 'width' failed to satisfy constraint: 64-bit unsigned integer attribute";
  }
  v27 = (uint64_t *)v22;
  v29 = 259;
  mlir::emitError(a2, (uint64_t)&v27, (uint64_t)&Value);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
  return v11;
}

void *mlir::anec::detail::ResizeGenericAdaptorBase::getHeight(mlir::anec::detail::ResizeGenericAdaptorBase *this)
{
  mlir::CallGraphNode *Value;
  uint64_t v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue(this);
  v3 = mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v3 - 48), **(_QWORD **)(*((_QWORD *)this + 1) + 96));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

void *mlir::anec::detail::ResizeGenericAdaptorBase::getWidth(mlir::anec::detail::ResizeGenericAdaptorBase *this)
{
  mlir::CallGraphNode *v2;
  mlir::CallGraphNode *v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  v2 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue(this) + 48);
  v3 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v2, v3, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 40));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

void mlir::anec::Resize::getZinIrUnitInfo(mlir::anec::Resize *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  llvm::APFloatBase *v12;
  void *v13;
  uint64_t OffsetAttr;
  int v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t SizeAttr;
  char *v41;
  int v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  mlir::anec::InputView *v68;
  char *v69;
  char *v70;
  char **v71;
  void *DimensionAttr;
  uint64_t v73;
  _BYTE v74[16];
  void *__p;
  uint64_t v76;
  _QWORD v77[3];

  v77[2] = *MEMORY[0x1E0C80C00];
  v3 = (char *)operator new(0xD0uLL);
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *((_QWORD *)v3 + 9) = -1;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *(_OWORD *)(v3 + 138) = 0u;
  *(_QWORD *)v3 = off_1E0E13700;
  *((_QWORD *)v3 + 1) = 0;
  *(_QWORD *)(v3 + 156) = 0x100000001;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v3 + 164) = _D0;
  *((_QWORD *)v3 + 22) = 0;
  v71 = (char **)(v3 + 176);
  *((_QWORD *)v3 + 23) = 0;
  *((_QWORD *)v3 + 24) = 0;
  v3[200] = 0;
  *((_DWORD *)v3 + 8) = 41;
  DimensionAttr = (void *)mlir::anec::InputView::getDimensionAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&DimensionAttr, (llvm::APInt *)&__p);
  if (v76 > 0x40)
  {
    v9 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v9) = (_DWORD)__p;
  }
  *((_DWORD *)v3 + 39) = v9;
  DimensionAttr = (void *)mlir::anec::Resize::getWidthAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&DimensionAttr, (llvm::APInt *)&__p);
  if (v76 > 0x40)
  {
    v10 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v10) = (_DWORD)__p;
  }
  *((_DWORD *)v3 + 40) = v10;
  DimensionAttr = (void *)mlir::anec::Resize::getScaleFactorXAttr((mlir::Operation **)this);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&DimensionAttr, (uint64_t)&__p);
  *((float *)v3 + 41) = llvm::APFloat::convertToFloat(&__p);
  v11 = (void *)v76;
  v13 = llvm::APFloatBase::PPCDoubleDouble(v12);
  if (v13 == v11)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v76);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v76);
  DimensionAttr = (void *)mlir::anec::Resize::getScaleFactorYAttr((mlir::Operation **)this);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&DimensionAttr, (uint64_t)&__p);
  *((float *)v3 + 42) = llvm::APFloat::convertToFloat(&__p);
  if (v13 == (void *)v76)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v76);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v76);
  __p = v77;
  v76 = 0x200000000;
  v68 = this;
  OffsetAttr = mlir::anec::InputView::getOffsetAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(OffsetAttr, (uint64_t)&__p);
  if ((_DWORD)v76)
  {
    v15 = 0;
    v16 = (char *)__p;
    v17 = (char *)__p + 8 * v76;
    v18 = (uint64_t *)*((_QWORD *)v3 + 17);
    v69 = v17;
    while (1)
    {
      v20 = (v15 + 3);
      v21 = *(_QWORD *)v16;
      v22 = *((_QWORD *)v3 + 18);
      if ((unint64_t)v18 >= v22)
        break;
      *v18 = v20 | (v21 << 32);
      v19 = v18 + 1;
LABEL_16:
      *((_QWORD *)v3 + 17) = v19;
      ++v15;
      v16 += 8;
      v18 = v19;
      if (v16 == v17)
        goto LABEL_46;
    }
    v23 = (char *)*((_QWORD *)v3 + 16);
    v24 = ((char *)v18 - v23) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
LABEL_85:
      abort();
    v26 = v22 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
LABEL_86:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[8 * v24];
    *(_QWORD *)v29 = v20 | (v21 << 32);
    v19 = (uint64_t *)(v29 + 8);
    if (v18 == (uint64_t *)v23)
    {
LABEL_33:
      *((_QWORD *)v3 + 16) = v29;
      *((_QWORD *)v3 + 17) = v19;
      *((_QWORD *)v3 + 18) = &v28[8 * v27];
      if (v18)
        operator delete(v18);
      v17 = v69;
      goto LABEL_16;
    }
    v30 = (char *)v18 - v23 - 8;
    if (v30 >= 0x168)
    {
      v33 = ((char *)(v18 - 1) - v23) & 0xFFFFFFFFFFFFFFF8;
      if (&v28[(char *)v18 - v23 - 8 - v33] > &v28[(char *)v18 - v23 - 8])
      {
        v31 = (char *)v18;
      }
      else if ((uint64_t *)((char *)v18 - v33 - 8) > v18 - 1)
      {
        v31 = (char *)v18;
      }
      else if ((unint64_t)(v23 - v28) >= 0x20)
      {
        v34 = (v30 >> 3) + 1;
        v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = (char *)&v18[v35 / 0xFFFFFFFFFFFFFFF8];
        v29 -= v35;
        v36 = &v28[8 * v24 - 16];
        v37 = (__int128 *)(v18 - 2);
        v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v39 = *v37;
          *((_OWORD *)v36 - 1) = *(v37 - 1);
          *(_OWORD *)v36 = v39;
          v36 -= 32;
          v37 -= 2;
          v38 -= 4;
        }
        while (v38);
        if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_32;
      }
      else
      {
        v31 = (char *)v18;
      }
    }
    else
    {
      v31 = (char *)v18;
    }
    do
    {
      v32 = *((_QWORD *)v31 - 1);
      v31 -= 8;
      *((_QWORD *)v29 - 1) = v32;
      v29 -= 8;
    }
    while (v31 != v23);
LABEL_32:
    v18 = (uint64_t *)*((_QWORD *)v3 + 16);
    goto LABEL_33;
  }
LABEL_46:
  DimensionAttr = v74;
  v73 = 0x200000000;
  SizeAttr = mlir::anec::InputView::getSizeAttr((mlir::Operation **)v68);
  mlir::getValues<unsigned long long>(SizeAttr, (uint64_t)&DimensionAttr);
  v41 = (char *)DimensionAttr;
  if (!(_DWORD)v73)
    goto LABEL_80;
  v42 = 0;
  v43 = (char *)*((_QWORD *)v3 + 23);
  v44 = (char *)DimensionAttr + 8 * v73;
  v70 = v44;
  do
  {
    v46 = (v42 + 3);
    v47 = *(_QWORD *)v41;
    v48 = *((_QWORD *)v3 + 24);
    if ((unint64_t)v43 < v48)
    {
      *(_QWORD *)v43 = v46 | (v47 << 32);
      v45 = v43 + 8;
      goto LABEL_49;
    }
    v49 = *v71;
    v50 = v43 - *v71;
    v51 = v50 >> 3;
    v52 = (v50 >> 3) + 1;
    if (v52 >> 61)
      goto LABEL_85;
    v53 = v48 - (_QWORD)v49;
    if (v53 >> 2 > v52)
      v52 = v53 >> 2;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
      v54 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      if (v54 >> 61)
        goto LABEL_86;
      v55 = operator new(8 * v54);
    }
    else
    {
      v55 = 0;
    }
    v56 = (uint64_t *)&v55[8 * v51];
    *v56 = v46 | (v47 << 32);
    v45 = (char *)(v56 + 1);
    if (v43 != v49)
    {
      v57 = v43 - v49 - 8;
      if (v57 >= 0x168)
      {
        v60 = (v43 - 8 - v49) & 0xFFFFFFFFFFFFFFF8;
        if (&v55[v50 - 8 - v60] > &v55[v50 - 8])
        {
          v58 = v43;
        }
        else if (&v43[-v60 - 8] > v43 - 8)
        {
          v58 = v43;
        }
        else if ((unint64_t)(v43 - v55 - v50) >= 0x20)
        {
          v61 = (v57 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v43[-v62];
          v56 = (uint64_t *)((char *)v56 - v62);
          v63 = &v55[8 * v51 - 16];
          v64 = v43 - 16;
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *(_OWORD *)v64;
            *(v63 - 1) = *((_OWORD *)v64 - 1);
            *v63 = v66;
            v63 -= 2;
            v64 -= 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_65;
        }
        else
        {
          v58 = v43;
        }
      }
      else
      {
        v58 = v43;
      }
      do
      {
        v59 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *--v56 = v59;
      }
      while (v58 != v49);
LABEL_65:
      v43 = *v71;
    }
    *((_QWORD *)v3 + 22) = v56;
    *((_QWORD *)v3 + 23) = v45;
    *((_QWORD *)v3 + 24) = &v55[8 * v54];
    if (v43)
      operator delete(v43);
    v44 = v70;
LABEL_49:
    *((_QWORD *)v3 + 23) = v45;
    ++v42;
    v41 += 8;
    v43 = v45;
  }
  while (v41 != v44);
  v41 = (char *)DimensionAttr;
LABEL_80:
  *a2 = v3;
  if (v41 != v74)
    free(v41);
  if (__p != v77)
    free(__p);
}

void *mlir::anec::Resize::getHeight(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t DimensionAttr;

  DimensionAttr = mlir::anec::InputView::getDimensionAttr(this);
  mlir::IntegerAttr::getValue(&DimensionAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

void *mlir::anec::Resize::getWidth(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t WidthAttr;

  WidthAttr = mlir::anec::Resize::getWidthAttr(this);
  mlir::IntegerAttr::getValue(&WidthAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

llvm::detail::DoubleAPFloat *mlir::anec::Resize::getScaleFactorX@<X0>(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t ScaleFactorXAttr;

  ScaleFactorXAttr = mlir::anec::Resize::getScaleFactorXAttr(this);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&ScaleFactorXAttr, a2);
}

llvm::detail::DoubleAPFloat *mlir::anec::Resize::getScaleFactorY@<X0>(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t ScaleFactorYAttr;

  ScaleFactorYAttr = mlir::anec::Resize::getScaleFactorYAttr(this);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&ScaleFactorYAttr, a2);
}

uint64_t mlir::anec::Resize::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t IndexFromDim;
  char v9;
  mlir::anec::_anonymous_namespace_ *v10;
  unint64_t v11;
  char v12;
  uint64_t SizeAttr;
  uint64_t OffsetAttr;
  const __CFString *v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  llvm::APFloatBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  const void **v28;
  std::ios_base *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  mlir::Operation *v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  float v41;
  float v42;
  uint64_t v43;
  const __CFString *v44;
  uint64_t v45;
  const __CFString *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void **v51[2];
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58[19];
  void *v59[2];
  _BYTE v60[64];
  void *v61[2];
  _BYTE v62[48];
  void *v63[2];
  _BYTE v64[48];
  void *v65;
  uint64_t v66;
  uint64_t ANECDimension;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD v71[2];
  void *__p;
  _QWORD v73[65];

  v73[63] = *MEMORY[0x1E0C80C00];
  ANECResizeLayerDescInitialize();
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v7 = v6;
  IndexFromDim = mlir::anec::getIndexFromDim(3, v6);
  if (!v9 || (v10 = (mlir::anec::_anonymous_namespace_ *)IndexFromDim, v11 = mlir::anec::getIndexFromDim(4, v7), !v12))
    std::__throw_bad_optional_access[abi:nn180100]();
  v69 = v71;
  v71[0] = v10;
  v71[1] = v11;
  v70 = 0x200000002;
  v65 = &ANECDimension;
  v68 = 0;
  ANECDimension = 0;
  v66 = 0x200000002;
  v63[0] = v64;
  v63[1] = (void *)0x600000000;
  SizeAttr = mlir::anec::InputView::getSizeAttr(a1);
  mlir::getValues<unsigned long long>(SizeAttr, (uint64_t)v63);
  v61[0] = v62;
  v61[1] = (void *)0x600000000;
  OffsetAttr = mlir::anec::InputView::getOffsetAttr(a1);
  mlir::getValues<unsigned long long>(OffsetAttr, (uint64_t)v61);
  v47 = *(_QWORD *)v65;
  v48 = (uint64_t)*(&off_1E0E53958 + *(_QWORD *)v63[0]);
  v43 = *(_QWORD *)v65;
  if (*(_QWORD *)v61[0])
    v15 = CFSTR("NearestNeighbor");
  else
    v15 = CFSTR("Linear");
  v44 = v15;
  v49 = *((_QWORD *)v65 + 1);
  v50 = (uint64_t)*(&off_1E0E53958 + *((_QWORD *)v63[0] + 1));
  v45 = *((_QWORD *)v65 + 1);
  if (*((_QWORD *)v61[0] + 1))
    v16 = CFSTR("NearestNeighbor");
  else
    v16 = CFSTR("Linear");
  v46 = v16;
  v51[0] = (const void **)mlir::anec::Resize::getWidthAttr(a1);
  mlir::IntegerAttr::getValue(v51, (llvm::APInt *)&__p);
  if (LODWORD(v73[0]) > 0x40)
  {
    v17 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v17) = (_DWORD)__p;
  }
  v39 = v17;
  v51[0] = (const void **)mlir::anec::InputView::getDimensionAttr(a1);
  mlir::IntegerAttr::getValue(v51, (llvm::APInt *)&__p);
  if (LODWORD(v73[0]) > 0x40)
  {
    v18 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v18) = (_DWORD)__p;
  }
  v40 = v18;
  v51[0] = (const void **)mlir::anec::Resize::getScaleFactorXAttr(a1);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)v51, (uint64_t)&__p);
  v41 = llvm::APFloat::convertToFloat(&__p);
  v19 = (void *)v73[0];
  v21 = llvm::APFloatBase::PPCDoubleDouble(v20);
  if (v21 == v19)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v73);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v73);
  v51[0] = (const void **)mlir::anec::Resize::getScaleFactorYAttr(a1);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)v51, (uint64_t)&__p);
  v42 = llvm::APFloat::convertToFloat(&__p);
  if (v21 == (void *)v73[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v73);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v73);
  v59[0] = v60;
  v59[1] = (void *)0x100000000;
  v22 = 1;
  __p = (void *)1;
  v51[0] = 0;
  ANECUnitValidatorCreate();
  v37 = 0;
  v38 = 0;
  if (ANECValidateResizeLayer())
  {
    v34 = *a1;
    v23 = MEMORY[0x1E0DE4FD0];
    v24 = MEMORY[0x1E0DE4FD0] + 104;
    v58[0] = MEMORY[0x1E0DE4FD0] + 104;
    v25 = MEMORY[0x1E0DE4FD0] + 64;
    v26 = MEMORY[0x1E0DE4F50];
    v27 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v28 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v52 = MEMORY[0x1E0DE4FD0] + 64;
    v51[0] = v27;
    *(const void ***)((char *)v51 + (_QWORD)*(v27 - 3)) = v28;
    v51[1] = 0;
    v29 = (std::ios_base *)((char *)v51 + (unint64_t)*(v51[0] - 3));
    std::ios_base::init(v29, &v53);
    v29[1].__vftable = 0;
    v29[1].__fmtflags_ = -1;
    v30 = *(_QWORD *)(v26 + 40);
    v52 = *(_QWORD *)(v26 + 32);
    *(uint64_t *)((char *)&v52 + *(_QWORD *)(v52 - 24)) = v30;
    v51[0] = *(const void ***)(v26 + 8);
    *(const void ***)((char *)v51 + (unint64_t)*(v51[0] - 3)) = *(const void ***)(v26 + 48);
    v58[0] = v24;
    v51[0] = (const void **)(v23 + 24);
    v52 = v25;
    std::streambuf::basic_streambuf();
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    v53 = MEMORY[0x1E0DE4FB8] + 16;
    v55 = 0u;
    v56 = 0u;
    v57 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v51[0] = *(const void ***)v26;
    v32 = *(_QWORD *)(v26 + 72);
    *(const void ***)((char *)v51 + (unint64_t)*(v51[0] - 3)) = *(const void ***)(v26 + 64);
    v52 = v32;
    v53 = v31;
    if (SBYTE7(v56) < 0)
      operator delete((void *)v55);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v58);
    v54 = 260;
    v51[0] = (const void **)&v35;
    v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v73);
    if (v36 < 0)
      operator delete(v35);
  }
  ANECUnitValidatorDelete();
  if (v59[0] != v60)
    free(v59[0]);
  if (v61[0] != v62)
    free(v61[0]);
  if (v63[0] != v64)
    free(v63[0]);
  if (v65 != &ANECDimension)
    free(v65);
  if (v69 != v71)
    free(v69);
  return v22;
}

uint64_t mlir::anec::Resize::verifyAttributesWithFamily(uint64_t *a1, uint64_t a2)
{
}

uint64_t mlir::anec::Resize::addOpToNetwork(mlir::anec::Resize *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Resize::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::InputView::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t ArgAttrsAttr;
  void **v33;
  void **v34;
  uint64_t v35;
  mlir::AffineMap *v36;
  char *v37;
  uint64_t v38;
  void **v39;
  void *v40;
  void *v41;
  uint64_t OperandRange;
  uint64_t v43;
  uint64_t v44;
  const char *v46;
  uint64_t v47;
  uint64_t (****v48)(llvm::detail::format_adapter *__hidden);
  uint64_t v49;
  uint64_t (**v50)(llvm::detail::format_adapter *__hidden);
  void **p_Height;
  uint64_t (**v52)(llvm::detail::format_adapter *__hidden);
  void **p_Size;
  uint64_t (***v54)(llvm::detail::format_adapter *__hidden);
  void **p_Step;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[5];
  unint64_t v59;
  void *Step;
  void *Size;
  void *Offset;
  unint64_t Height;
  _QWORD v64[2];
  const char **v65;
  __int16 v66;
  uint64_t v67;
  char v68[8];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  _QWORD v76[23];

  v76[22] = *MEMORY[0x1E0C80C00];
  v67 = a6;
  v68[0] = 0;
  v69 = 0;
  v70 = a7;
  v71 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69)
      v69 = 0;
    mlir::OperationName::OperationName(v68, "anec.input_view", 15, Context);
    v69 = 1;
  }
  v72 = a4;
  v73 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  v18 = a3;
  if (a3)
    v19 = (uint64_t)a2;
  else
    v19 = v17;
  if (!mlir::anec::InputViewAdaptor::verify(&v67, v19))
    return 0;
  v20 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = v20;
  if (!v20)
    goto LABEL_18;
  v22 = *v20;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_18;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_18:
    v31 = 0;
  v64[0] = v21;
  v64[1] = v31;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  v34 = v33;
  Height = (unint64_t)mlir::anec::detail::ResizeGenericAdaptorBase::getHeight((mlir::anec::detail::ResizeGenericAdaptorBase *)&v67);
  if (Height >= (unint64_t)v34)
  {
    v46 = "'anec.input_view' op attribute 'dimension = {0}' is not consistent with input rank size = {1}";
    v47 = 93;
    v48 = &v54;
    v49 = 2;
    v50 = &off_1E0E23E30;
    p_Height = (void **)&Height;
    v52 = &off_1E0E23E90;
    p_Size = v34;
    v54 = &v50;
    p_Step = (void **)&v52;
    if (!v18)
      return 0;
LABEL_24:
    mlir::emitError((uint64_t)a2, (uint64_t)&v74);
    if (v74)
    {
      v66 = 263;
      v65 = &v46;
      mlir::Diagnostic::operator<<((uint64_t)&v75, (const void ***)&v65);
    }
    v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
    if (v74)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v75);
    return v35;
  }
  Offset = mlir::anec::detail::InputViewGenericAdaptorBase::getOffset((mlir::anec::detail::InputViewGenericAdaptorBase *)&v67);
  Size = mlir::anec::detail::InputViewGenericAdaptorBase::getSize((mlir::anec::detail::InputViewGenericAdaptorBase *)&v67);
  Step = mlir::anec::detail::InputViewGenericAdaptorBase::getStep((mlir::anec::detail::InputViewGenericAdaptorBase *)&v67);
  v59 = *(_QWORD *)(ArgAttrsAttr + 8 * Height);
  if ((unint64_t)Offset + ((uint64_t)Size - 1) * (_QWORD)Step + 1 > v59)
  {
    v46 = "'anec.input_view' with offset {0}, size {1} and stride {2} is out of bounds for dimension {3} of size {4}";
    v47 = 105;
    v48 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))v58;
    v49 = 5;
    v50 = &off_1E0E23E30;
    p_Height = &Offset;
    v52 = &off_1E0E23E30;
    p_Size = &Size;
    v54 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E23E30;
    p_Step = &Step;
    v56[0] = &off_1E0E23E30;
    v56[1] = &Height;
    v57[0] = &off_1E0E23E00;
    v57[1] = &v59;
    v58[0] = &v50;
    v58[1] = &v52;
    v58[2] = &v54;
    v58[3] = v56;
    v58[4] = v57;
    if (!v18)
      return 0;
    goto LABEL_24;
  }
  LODWORD(v36) = 0;
  v37 = 0;
  v74 = v76;
  v75 = 0x500000000;
  v38 = 8 * (_QWORD)v34;
  do
  {
    if (v37 == (char *)Height)
      v39 = &Size;
    else
      v39 = (void **)ArgAttrsAttr;
    v40 = *v39;
    if (v36 >= HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v36 + 1, 8);
      LODWORD(v36) = v75;
    }
    *((_QWORD *)v74 + v36) = v40;
    v36 = (mlir::AffineMap *)(v75 + 1);
    LODWORD(v75) = v75 + 1;
    ++v37;
    ArgAttrsAttr += 8;
    v38 -= 8;
  }
  while (v38);
  v41 = v74;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v64);
  v43 = mlir::MemRefType::get(v41, v36, OperandRange, 0, 0, 0);
  v44 = *(unsigned int *)(a11 + 8);
  if (v44 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
    LODWORD(v44) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
  ++*(_DWORD *)(a11 + 8);
  if (v74 != v76)
    free(v74);
  return 1;
}

uint64_t mlir::anec::InputViewAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const char *v12;
  _QWORD v13[4];
  __int16 v14;
  uint64_t v15;
  uint64_t Value;
  _QWORD v17[24];

  v17[23] = *MEMORY[0x1E0C80C00];
  v15 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v15);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v15))
    {
      v5 = "'anec.input_view' op requires attribute 'dimension'";
LABEL_21:
      v13[0] = v5;
      v14 = 259;
      mlir::emitError(a2, (uint64_t)v13, (uint64_t)&Value);
      v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v17);
      return v9;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v6 = *((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v15))
    {
      v5 = "'anec.input_view' op requires attribute 'offset'";
      goto LABEL_21;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v7 = *((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v15))
    {
      v5 = "'anec.input_view' op requires attribute 'size'";
      goto LABEL_21;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v8 = *((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v15))
    {
      v5 = "'anec.input_view' op requires attribute 'step'";
      goto LABEL_21;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v11 = *((_QWORD *)i + 1);
  if (v6)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v13[0] = v6,
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)))
    {
      v5 = "'anec.input_view' op attribute 'dimension' failed to satisfy constraint: 64-bit unsigned integer attribute";
      goto LABEL_21;
    }
  }
  if (!v7
    || *(_UNKNOWN **)(*(_QWORD *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && (v13[0] = v7,
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13),
        mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)))
  {
    if (!v8
      || *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      && (v13[0] = v8,
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13),
          mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)))
    {
      if (!v11)
        return 1;
      if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        v13[0] = v11;
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
          return 1;
      }
      v12 = "'anec.input_view' op attribute 'step' failed to satisfy constraint: 64-bit unsigned integer attribute";
    }
    else
    {
      v12 = "'anec.input_view' op attribute 'size' failed to satisfy constraint: 64-bit unsigned integer attribute";
    }
  }
  else
  {
    v12 = "'anec.input_view' op attribute 'offset' failed to satisfy constraint: 64-bit unsigned integer attribute";
  }
  v13[0] = v12;
  v14 = 259;
  mlir::emitError(a2, (uint64_t)v13, (uint64_t)&Value);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
  return v9;
}

void *mlir::anec::detail::InputViewGenericAdaptorBase::getOffset(mlir::anec::detail::InputViewGenericAdaptorBase *this)
{
  mlir::CallGraphNode *v2;
  uint64_t v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  v2 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue(this) + 16);
  v3 = mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v2, (mlir::CallGraphNode *)(v3 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 8));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

void *mlir::anec::detail::InputViewGenericAdaptorBase::getSize(mlir::anec::detail::InputViewGenericAdaptorBase *this)
{
  mlir::CallGraphNode *v2;
  uint64_t v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  v2 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue(this) + 32);
  v3 = mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v2, (mlir::CallGraphNode *)(v3 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 16));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

void *mlir::anec::detail::InputViewGenericAdaptorBase::getStep(mlir::anec::detail::InputViewGenericAdaptorBase *this)
{
  mlir::CallGraphNode *v2;
  mlir::CallGraphNode *v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  v2 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue(this) + 48);
  v3 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v2, v3, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 24));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

uint64_t mlir::anec::InputView::addOpToNetwork(mlir::anec::InputView *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::InputView::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void mlir::anec::InputView::getZinIrUnitInfo(mlir::anec::InputView *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  mlir::anec *v18;
  mlir::anec *v19;
  mlir::anec *v20;
  uint64_t DimFromIndex;
  int v22;
  mlir::anec *v23;
  _QWORD v24[2];
  void *__p;
  unsigned int v26;
  uint64_t OffsetAttr;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13848;
  *((_QWORD *)v4 + 1) = 0;
  *((_OWORD *)v4 + 5) = xmmword_181233110;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v24[0] = v5;
  v24[1] = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
  v17 = v16;
  OffsetAttr = mlir::anec::InputView::getOffsetAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&OffsetAttr, (llvm::APInt *)&__p);
  if (v26 > 0x40)
  {
    v18 = *(mlir::anec **)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v18) = (_DWORD)__p;
  }
  *((_DWORD *)v4 + 20) = (_DWORD)v18;
  OffsetAttr = mlir::anec::InputView::getSizeAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&OffsetAttr, (llvm::APInt *)&__p);
  if (v26 > 0x40)
  {
    v19 = *(mlir::anec **)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v19) = (_DWORD)__p;
  }
  *((_DWORD *)v4 + 21) = (_DWORD)v19;
  OffsetAttr = mlir::anec::InputView::getDimensionAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&OffsetAttr, (llvm::APInt *)&__p);
  if (v26 > 0x40)
  {
    v20 = *(mlir::anec **)__p;
    operator delete[](__p);
  }
  else
  {
    v20 = (mlir::anec *)__p;
  }
  DimFromIndex = mlir::anec::getDimFromIndex(v20, v17);
  if ((DimFromIndex & 0xFF00000000) != 0)
    v22 = dword_1812330C0[(int)DimFromIndex];
  else
    v22 = 5;
  *((_DWORD *)v4 + 23) = v22;
  OffsetAttr = mlir::anec::InputView::getStepAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&OffsetAttr, (llvm::APInt *)&__p);
  if (v26 > 0x40)
  {
    v23 = *(mlir::anec **)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v23) = (_DWORD)__p;
  }
  *((_DWORD *)v4 + 22) = (_DWORD)v23;
  *a2 = v4;
}

uint64_t mlir::anec::InputView::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  mlir::anec::_anonymous_namespace_ *v6;
  mlir::anec::_anonymous_namespace_ *v7;
  mlir::anec::_anonymous_namespace_ *v8;
  mlir::anec::_anonymous_namespace_ *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mlir::Operation *v23;
  void *v24;
  char v25;
  void **v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t ANECDimension;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40[19];
  void *v41[2];
  _BYTE v42[64];
  void *__p;
  unsigned int v44[126];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  ANECInputViewLayerDescInitialize();
  v34[0] = mlir::anec::InputView::getOffsetAttr(a1);
  mlir::IntegerAttr::getValue(v34, (llvm::APInt *)&__p);
  if (v44[0] > 0x40)
  {
    v6 = *(mlir::anec::_anonymous_namespace_ **)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v6) = (_DWORD)__p;
  }
  v34[0] = mlir::anec::InputView::getSizeAttr(a1);
  mlir::IntegerAttr::getValue(v34, (llvm::APInt *)&__p);
  if (v44[0] > 0x40)
  {
    v7 = *(mlir::anec::_anonymous_namespace_ **)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v7) = (_DWORD)__p;
  }
  v34[0] = mlir::anec::InputView::getStepAttr(a1);
  mlir::IntegerAttr::getValue(v34, (llvm::APInt *)&__p);
  if (v44[0] > 0x40)
  {
    v8 = *(mlir::anec::_anonymous_namespace_ **)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v8) = (_DWORD)__p;
  }
  v34[0] = mlir::anec::InputView::getDimensionAttr(a1);
  mlir::IntegerAttr::getValue(v34, (llvm::APInt *)&__p);
  if (v44[0] > 0x40)
  {
    v9 = *(mlir::anec::_anonymous_namespace_ **)__p;
    operator delete[](__p);
  }
  else
  {
    v9 = (mlir::anec::_anonymous_namespace_ *)__p;
  }
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v30 = (int)v6;
  v31 = (int)v7;
  v32 = (int)v8;
  v41[0] = v42;
  v41[1] = (void *)0x100000000;
  __p = (void *)1;
  v34[0] = 0;
  ANECUnitValidatorCreate();
  v28 = 0;
  v29 = 0;
  if (ANECValidateInputViewLayer())
  {
    v23 = *a1;
    v11 = MEMORY[0x1E0DE4FD0];
    v12 = MEMORY[0x1E0DE4FD0] + 104;
    v40[0] = MEMORY[0x1E0DE4FD0] + 104;
    v13 = MEMORY[0x1E0DE4FD0] + 64;
    v14 = (_QWORD *)MEMORY[0x1E0DE4F50];
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
    v35 = MEMORY[0x1E0DE4FD0] + 64;
    v34[0] = v15;
    *(_QWORD *)((char *)v34 + *(_QWORD *)(v15 - 24)) = v16;
    v34[1] = 0;
    v17 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
    std::ios_base::init(v17, v36);
    v17[1].__vftable = 0;
    v17[1].__fmtflags_ = -1;
    v18 = v14[5];
    v35 = v14[4];
    *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24)) = v18;
    v34[0] = v14[1];
    *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = v14[6];
    v40[0] = v12;
    v34[0] = v11 + 24;
    v35 = v13;
    std::streambuf::basic_streambuf();
    v19 = MEMORY[0x1E0DE4FB8] + 16;
    v36[0] = MEMORY[0x1E0DE4FB8] + 16;
    v37 = 0u;
    v38 = 0u;
    v39 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v34[0] = *v14;
    v20 = v14[9];
    *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = v14[8];
    v35 = v20;
    v36[0] = v19;
    if (SBYTE7(v38) < 0)
      operator delete((void *)v37);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v40);
    v27 = 260;
    v26 = &v24;
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
    if (v25 < 0)
      operator delete(v24);
  }
  else
  {
    v21 = 1;
  }
  ANECUnitValidatorDelete();
  if (v41[0] != v42)
    free(v41[0]);
  return v21;
}

void *mlir::anec::InputView::getOffset(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t OffsetAttr;

  OffsetAttr = mlir::anec::InputView::getOffsetAttr(this);
  mlir::IntegerAttr::getValue(&OffsetAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

void *mlir::anec::InputView::getSize(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t SizeAttr;

  SizeAttr = mlir::anec::InputView::getSizeAttr(this);
  mlir::IntegerAttr::getValue(&SizeAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

void *mlir::anec::InputView::getStep(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t StepAttr;

  StepAttr = mlir::anec::InputView::getStepAttr(this);
  mlir::IntegerAttr::getValue(&StepAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

uint64_t mlir::anec::Transpose::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  const void *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v35;
  mlir::CallGraphNode *v36;
  char v37;
  uint64_t v38;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  mlir::AffineMap *v47;
  uint64_t OperandRange;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  void *v53;
  uint64_t v54;
  _BYTE v55[80];
  void *v56;
  uint64_t v57;
  _BYTE v58[40];
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v59 = a6;
  LOBYTE(v60) = 0;
  v61 = 0;
  v62 = a7;
  v63 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61)
      v61 = 0;
    mlir::OperationName::OperationName(&v60, "anec.transpose", 14, Context);
    v61 = 1;
  }
  v64 = a4;
  v65 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::TransposeAdaptor::verify(&v59, v18))
    return 0;
  v19 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v20 = v19;
  if (!v19)
    goto LABEL_18;
  v21 = *v19;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_18;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_18:
    v30 = 0;
  v52[0] = v20;
  v52[1] = v30;
  ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
  v33 = v32;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59);
  v35 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v59);
  v36 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v35, **(_QWORD **)(v60 + 96));
  if ((v37 & 1) != 0)
    v38 = *((_QWORD *)v36 + 1);
  else
    v38 = 0;
  v51 = v38;
  v56 = v58;
  v57 = 0x500000000;
  if ((unint64_t)(8 * v33) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, (8 * v33) >> 3, 8);
    v40 = v57;
    v41 = a11;
    if (!v33)
      goto LABEL_28;
    goto LABEL_27;
  }
  v40 = 0;
  v41 = a11;
  if (v33)
  {
LABEL_27:
    memcpy((char *)v56 + 8 * v40, ArgAttrsAttr, 8 * v33);
    v40 = v57;
  }
LABEL_28:
  LODWORD(v57) = v40 + v33;
  v53 = v55;
  v54 = 0x500000000;
  mlir::getListOfPairs<long long>(&v51, (uint64_t)&v53);
  v42 = v56;
  if ((_DWORD)v54)
  {
    v43 = (char *)v53;
    v44 = (char *)v53 + 16 * v54;
    do
    {
      v45 = *(_QWORD *)v43;
      v46 = *((_QWORD *)v43 + 1);
      v43 += 16;
      v42[v46] = *((_QWORD *)ArgAttrsAttr + v45);
    }
    while (v43 != v44);
  }
  v47 = (mlir::AffineMap *)v57;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v52);
  v49 = mlir::MemRefType::get(v42, v47, OperandRange, 0, 0, 0);
  v50 = *(unsigned int *)(v41 + 8);
  if (v50 >= *(_DWORD *)(v41 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v41, (void *)(v41 + 16), v50 + 1, 8);
    LODWORD(v50) = *(_DWORD *)(v41 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v41 + 8 * v50) = v49;
  ++*(_DWORD *)(v41 + 8);
  if (v53 != v55)
    free(v53);
  if (v56 != v58)
    free(v56);
  return 1;
}

uint64_t mlir::anec::TransposeAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *Value;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD v46[2];
  uint64_t OperandRange;
  _QWORD *v48;
  _QWORD v49[2];
  _QWORD v50[4];
  __int16 v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD v54[24];

  v54[23] = *MEMORY[0x1E0C80C00];
  v52 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v52); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v52))
    {
      v5 = "'anec.transpose' op requires attribute 'transpose_list'";
      goto LABEL_42;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v50[0] = v6;
    v50[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v50);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v53 = v18;
    v54[0] = v28;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
    if (v29 == 2)
    {
      v48 = v6;
      Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v48);
      v31 = Value;
      if (!Value)
        goto LABEL_37;
      v32 = *Value;
      v33 = mlir::TypeID::get<mlir::ShapedType>();
      v34 = *(unsigned int *)(v32 + 16);
      if (!(_DWORD)v34)
        goto LABEL_37;
      v35 = *(_QWORD **)(v32 + 8);
      v36 = &v35[2 * v34];
      do
      {
        v37 = v34 >> 1;
        v38 = &v35[2 * (v34 >> 1)];
        v40 = *v38;
        v39 = v38 + 2;
        v34 += ~(v34 >> 1);
        if (v40 < v33)
          v35 = v39;
        else
          v34 = v37;
      }
      while (v34);
      if (v35 != v36 && *v35 == v33)
        v41 = v35[1];
      else
LABEL_37:
        v41 = 0;
      v49[0] = v31;
      v49[1] = v41;
      if (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v49) + 8) == 2)
      {
        v45 = v6;
        v46[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
        v46[1] = v42;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v46);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
          return 1;
      }
    }
  }
  v5 = "'anec.transpose' op attribute 'transpose_list' failed to satisfy constraint: list of 64-bits unsigned integer pairs";
LABEL_42:
  v50[0] = v5;
  v51 = 259;
  mlir::emitError(a2, (uint64_t)v50, (uint64_t)&v53);
  v43 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
  if (v53)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
  return v43;
}

_QWORD *mlir::getListOfPairs<long long>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t NumElements;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _OWORD v13[2];
  void *__p;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v20, *a1, 0);
  while (1)
  {
    v4 = *a1;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)a1);
    result = mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v18, v4, NumElements);
    if ((_QWORD)v20 != (_QWORD)v18 || BYTE8(v20) != BYTE8(v18))
    {
      v8 = v21;
      goto LABEL_8;
    }
    v8 = v21;
    if ((_QWORD)v21 == (_QWORD)v19)
      return result;
LABEL_8:
    v18 = v20;
    v19 = v21;
    *(_QWORD *)&v21 = v8 + 1;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v18, (llvm::APInt *)&v16);
    if (v17 > 0x40)
      v9 = *(_QWORD *)v16;
    else
      v9 = (uint64_t)((_QWORD)v16 << -(uint64_t)v17) >> -(uint64_t)v17;
    v13[0] = v20;
    v13[1] = v21;
    *(_QWORD *)&v21 = v21 + 1;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v13, (llvm::APInt *)&__p);
    if (v15 > 0x40)
      v10 = *(_QWORD *)__p;
    else
      v10 = (uint64_t)((_QWORD)__p << -(uint64_t)v15) >> -(uint64_t)v15;
    v11 = *(unsigned int *)(a2 + 8);
    if (v11 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v11 + 1, 16);
      v11 = *(unsigned int *)(a2 + 8);
    }
    v12 = (uint64_t *)(*(_QWORD *)a2 + 16 * v11);
    *v12 = v9;
    v12[1] = v10;
    ++*(_DWORD *)(a2 + 8);
    if (v15 >= 0x41 && __p)
      operator delete[](__p);
    if (v17 >= 0x41)
    {
      if (v16)
        operator delete[](v16);
    }
  }
}

void mlir::anec::Transpose::getZinIrUnitInfo(mlir::anec::Transpose *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  mlir::anec **v18;
  mlir::anec **v19;
  _QWORD *v20;
  uint64_t DimFromIndex;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  mlir::anec **v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t OperandRange;
  void *v47;
  int v48;
  int v49;
  _QWORD *v50;
  int Width;
  _QWORD *v52;
  char **v53;
  unint64_t v54;
  _QWORD v55[2];
  uint64_t MultipliersAttr;
  void *v57;
  uint64_t v58;
  _QWORD v59[12];

  v59[10] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x68uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13888;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 10) = 0;
  v53 = (char **)(v4 + 80);
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 12) = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v52 = a2;
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v55[0] = v5;
  v55[1] = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55);
  v17 = v16;
  v57 = v59;
  v58 = 0x500000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr((mlir::Operation **)this);
  mlir::getListOfPairs<long long>(&MultipliersAttr, (uint64_t)&v57);
  if ((_DWORD)v58)
  {
    v18 = (mlir::anec **)v57;
    v19 = (mlir::anec **)((char *)v57 + 16 * v58);
    while (1)
    {
      DimFromIndex = mlir::anec::getDimFromIndex(*v18, v17);
      v22 = (DimFromIndex & 0xFF00000000) != 0 ? qword_181233098[(int)DimFromIndex] : 5;
      v23 = mlir::anec::getDimFromIndex(v18[1], v17);
      v24 = (v23 & 0xFF00000000) != 0 ? qword_181233020[(int)v23] : 0x500000000;
      v26 = (char *)*((_QWORD *)v4 + 11);
      v25 = *((_QWORD *)v4 + 12);
      if ((unint64_t)v26 >= v25)
        break;
      *(_QWORD *)v26 = v24 | v22;
      v20 = v26 + 8;
LABEL_14:
      *((_QWORD *)v4 + 11) = v20;
      v18 += 2;
      if (v18 == v19)
        goto LABEL_43;
    }
    v27 = v17;
    v28 = v19;
    v29 = *v53;
    v30 = v26 - *v53;
    v31 = v30 >> 3;
    v32 = (v30 >> 3) + 1;
    if (v32 >> 61)
      abort();
    v33 = v25 - (_QWORD)v29;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    v54 = v32;
    if (v32)
    {
      if (v32 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v34 = operator new(8 * v32);
    }
    else
    {
      v34 = 0;
    }
    v35 = (uint64_t *)&v34[8 * v31];
    *v35 = v24 | v22;
    v20 = v35 + 1;
    if (v26 == v29)
    {
      v19 = v28;
      v17 = v27;
      goto LABEL_41;
    }
    v36 = v26 - v29 - 8;
    if (v36 >= 0x58)
    {
      v37 = v26 - &v34[v30];
      v19 = v28;
      v17 = v27;
      if (v37 >= 0x20)
      {
        v38 = (v36 >> 3) + 1;
        v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v26[-v39];
        v35 = (uint64_t *)((char *)v35 - v39);
        v41 = &v34[8 * v31 - 16];
        v42 = v26 - 16;
        v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = *(_OWORD *)v42;
          *(v41 - 1) = *((_OWORD *)v42 - 1);
          *v41 = v44;
          v41 -= 2;
          v42 -= 32;
          v43 -= 4;
        }
        while (v43);
        v26 = v40;
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_40;
      }
    }
    else
    {
      v19 = v28;
      v17 = v27;
    }
    do
    {
      v45 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      *--v35 = v45;
    }
    while (v26 != v29);
LABEL_40:
    v26 = *v53;
LABEL_41:
    *((_QWORD *)v4 + 10) = v35;
    *((_QWORD *)v4 + 11) = v20;
    *((_QWORD *)v4 + 12) = &v34[8 * v54];
    if (v26)
      operator delete(v26);
    goto LABEL_14;
  }
LABEL_43:
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55);
  v47 = *(void **)(*(_QWORD *)OperandRange + 136);
  if (v47 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    MultipliersAttr = OperandRange;
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&MultipliersAttr);
    v50 = v52;
    if (Width == 16)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&MultipliersAttr) == 2)
        v49 = 10;
      else
        v49 = 9;
    }
    else if (Width == 8)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&MultipliersAttr) == 2)
        v49 = 2;
      else
        v49 = 1;
    }
    else
    {
      v49 = 0;
    }
  }
  else
  {
    if (v47 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
      v48 = 11;
    else
      v48 = 0;
    if (v47 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
      v49 = 3;
    else
      v49 = v48;
    v50 = v52;
  }
  *((_DWORD *)v4 + 17) = v49;
  *v50 = v4;
  if (v57 != v59)
    free(v57);
}

uint64_t mlir::anec::Transpose::addOpToNetwork(mlir::anec::Transpose *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Transpose::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::Transpose::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  mlir::anec::_anonymous_namespace_ *v13;
  unint64_t v14;
  uint64_t ANECDimension;
  mlir::anec::_anonymous_namespace_ *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  const void **v25;
  std::ios_base *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  mlir::Operation *v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[11];
  const void **v36[2];
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  __int128 __p;
  __int128 v41;
  int v42;
  uint64_t v43[19];
  void *v44[2];
  _BYTE v45[64];
  void *v46;
  uint64_t v47;
  _BYTE v48[80];
  char buffer[8];
  _QWORD v50[65];

  v50[63] = *MEMORY[0x1E0C80C00];
  v46 = v48;
  v47 = 0x500000000;
  *(_QWORD *)buffer = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::getListOfPairs<long long>((uint64_t *)buffer, (uint64_t)&v46);
  ANECTransposeLayerDescInitialize();
  v6 = v47;
  v7 = v46;
  if (!(_DWORD)v47)
  {
LABEL_5:
    v9 = 1;
    if (v46 == v48)
      return v9;
LABEL_6:
    free(v7);
    return v9;
  }
  v8 = v46;
  while (*v8 == v8[1])
  {
    v8 += 2;
    if (v8 == (_QWORD *)((char *)v46 + 16 * v47))
      goto LABEL_5;
  }
  v11 = 0;
  v12 = 16 * v47;
  do
  {
    v13 = *(mlir::anec::_anonymous_namespace_ **)((char *)v46 + v11);
    mlir::CallableOpInterface::getArgAttrsAttr(a2);
    v16 = *(mlir::anec::_anonymous_namespace_ **)((char *)v46 + v11 + 8);
    mlir::CallableOpInterface::getArgAttrsAttr(a2);
    v19 = &v35[v11 / 8];
    v19[1] = ANECDimension;
    v19[2] = v18;
    v11 += 16;
  }
  while (v12 != v11);
  v35[0] = v6;
  v44[0] = v45;
  v44[1] = (void *)0x100000000;
  v9 = 1;
  *(_QWORD *)buffer = 1;
  v36[0] = 0;
  ANECUnitValidatorCreate();
  v33 = 0;
  v34 = 0;
  if (ANECValidateTransposeLayer())
  {
    v30 = *a1;
    v20 = MEMORY[0x1E0DE4FD0];
    v21 = MEMORY[0x1E0DE4FD0] + 104;
    v43[0] = MEMORY[0x1E0DE4FD0] + 104;
    v22 = MEMORY[0x1E0DE4FD0] + 64;
    v23 = MEMORY[0x1E0DE4F50];
    v24 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v25 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v37 = MEMORY[0x1E0DE4FD0] + 64;
    v36[0] = v24;
    *(const void ***)((char *)v36 + (_QWORD)*(v24 - 3)) = v25;
    v36[1] = 0;
    v26 = (std::ios_base *)((char *)v36 + (unint64_t)*(v36[0] - 3));
    std::ios_base::init(v26, &v38);
    v26[1].__vftable = 0;
    v26[1].__fmtflags_ = -1;
    v27 = *(_QWORD *)(v23 + 40);
    v37 = *(_QWORD *)(v23 + 32);
    *(uint64_t *)((char *)&v37 + *(_QWORD *)(v37 - 24)) = v27;
    v36[0] = *(const void ***)(v23 + 8);
    *(const void ***)((char *)v36 + (unint64_t)*(v36[0] - 3)) = *(const void ***)(v23 + 48);
    v43[0] = v21;
    v36[0] = (const void **)(v20 + 24);
    v37 = v22;
    std::streambuf::basic_streambuf();
    v28 = MEMORY[0x1E0DE4FB8] + 16;
    v38 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v41 = 0u;
    v42 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v36[0] = *(const void ***)v23;
    v29 = *(_QWORD *)(v23 + 72);
    *(const void ***)((char *)v36 + (unint64_t)*(v36[0] - 3)) = *(const void ***)(v23 + 64);
    v37 = v29;
    v38 = v28;
    if (SBYTE7(v41) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v43);
    v39 = 260;
    v36[0] = (const void **)&v31;
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v50);
    if (v32 < 0)
      operator delete(v31);
  }
  ANECUnitValidatorDelete();
  if (v44[0] != v45)
    free(v44[0]);
  v7 = v46;
  if (v46 != v48)
    goto LABEL_6;
  return v9;
}

unint64_t mlir::anec::Transpose::fold(mlir::Operation **a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ArgAttrsAttr;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t OperandRange;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  size_t v50;
  int64x2_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  int64x2_t v56;
  int64x2_t *v57;
  int64x2_t v58;
  int64x2_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t ElementsAttr;
  void *v66[10];
  _QWORD v67[2];
  void *v68[10];
  uint64_t *v69;
  uint64_t v70;
  _QWORD v71[2];
  char *v72;
  uint64_t v73;
  _QWORD v74[11];

  v74[10] = *MEMORY[0x1E0C80C00];
  v72 = (char *)v74;
  v73 = 0x500000000;
  v68[0] = (void *)mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::getListOfPairs<unsigned long long>((uint64_t *)v68, (uint64_t)&v72);
  if (!(_DWORD)v73)
  {
LABEL_5:
    v5 = *(_QWORD *)(*((_QWORD *)*a1 + 9) + 24) | 4;
    goto LABEL_6;
  }
  v4 = v72;
  while (*(_QWORD *)v4 == *((_QWORD *)v4 + 1))
  {
    v4 += 16;
    if (v4 == &v72[16 * v73])
      goto LABEL_5;
  }
  v7 = *(uint64_t ***)(a2 + 40);
  if (*((_DWORD *)*a1 + 9))
    v8 = (uint64_t)*a1 - 16;
  else
    v8 = 0;
  v9 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    goto LABEL_21;
  v10 = *v9;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_21;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_21:
    v19 = 0;
  v71[0] = v9;
  v71[1] = v19;
  if (!*v7)
  {
    v69 = 0;
    v70 = 0;
    goto LABEL_37;
  }
  v69 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*v7);
  v70 = v20;
  if (!v69)
  {
LABEL_37:
    v5 = 0;
    goto LABEL_6;
  }
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v71);
  v23 = v22;
  v68[0] = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v69);
  v68[1] = v24;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68);
  v26 = (uint64_t *)mlir::RankedTensorType::get(ArgAttrsAttr, v23, OperandRange, 0);
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69))
  {
    v27 = (uint64_t)v69;
    v28 = v70;
    if (!v26)
      goto LABEL_34;
    v29 = *v26;
    v30 = mlir::TypeID::get<mlir::ShapedType>();
    v31 = *(unsigned int *)(v29 + 16);
    if (!(_DWORD)v31)
      goto LABEL_34;
    v32 = *(_QWORD **)(v29 + 8);
    v33 = &v32[2 * v31];
    do
    {
      v34 = v31 >> 1;
      v35 = &v32[2 * (v31 >> 1)];
      v37 = *v35;
      v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30)
        v32 = v36;
      else
        v31 = v34;
    }
    while (v31);
    if (v32 != v33 && *v32 == v30)
      v38 = v32[1];
    else
LABEL_34:
      v38 = 0;
    v5 = (unint64_t)mlir::reshapeElementsAttr(v27, v28, (uint64_t)v26, v38) & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_6;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v68, v69);
  v67[0] = 0;
  v67[1] = 0;
  if (!v26)
    goto LABEL_47;
  v39 = *v26;
  v40 = mlir::TypeID::get<mlir::ShapedType>();
  v41 = *(unsigned int *)(v39 + 16);
  if (!(_DWORD)v41)
    goto LABEL_47;
  v42 = *(_QWORD **)(v39 + 8);
  v43 = &v42[2 * v41];
  do
  {
    v44 = v41 >> 1;
    v45 = &v42[2 * (v41 >> 1)];
    v47 = *v45;
    v46 = v45 + 2;
    v41 += ~(v41 >> 1);
    if (v47 < v40)
      v42 = v46;
    else
      v41 = v44;
  }
  while (v41);
  if (v42 != v43 && *v42 == v40)
    v48 = v42[1];
  else
LABEL_47:
    v48 = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray((uint64_t)v26, v48, (uint64_t)v67, (uint64_t)v66);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v71);
  if (v49)
  {
    if (v49 >> 61)
      abort();
    v50 = 8 * v49;
    v51 = (int64x2_t *)operator new(8 * v49);
    bzero(v51, v50);
    v52 = &v51->i64[v50 / 8];
    if (v50 - 8 >= 0x18)
    {
      v55 = ((v50 - 8) >> 3) + 1;
      v53 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      v54 = &v51->i64[v55 & 0x3FFFFFFFFFFFFFFCLL];
      v56 = (int64x2_t)xmmword_181233120;
      v57 = v51 + 1;
      v58 = vdupq_n_s64(2uLL);
      v59 = vdupq_n_s64(4uLL);
      v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v57[-1] = v56;
        *v57 = vaddq_s64(v56, v58);
        v56 = vaddq_s64(v56, v59);
        v57 += 2;
        v60 -= 4;
      }
      while (v60);
      if (v55 == v53)
        goto LABEL_57;
    }
    else
    {
      v53 = 0;
      v54 = (uint64_t *)v51;
    }
    do
      *v54++ = v53++;
    while (v54 != v52);
  }
  else
  {
    v51 = 0;
    v52 = 0;
  }
LABEL_57:
  if ((_DWORD)v73)
  {
    v61 = v72;
    v62 = &v72[16 * v73];
    do
    {
      v63 = *(_QWORD *)v61;
      v64 = *((_QWORD *)v61 + 1);
      v61 += 16;
      v51->i64[v64] = v63;
    }
    while (v61 != v62);
  }
  mlir::mps::transpose((mlir::AffineBinaryOpExpr *)v68, (uint64_t)v66, (uint64_t)v51, ((char *)v52 - (char *)v51) >> 3);
  ElementsAttr = v67[0];
  if (!v67[0])
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v66, 0, 0);
  v5 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  if (v51)
    operator delete(v51);
  mlir::mps::CPUNDArray::~CPUNDArray(v66);
  mlir::mps::CPUNDArray::~CPUNDArray(v68);
LABEL_6:
  if (v72 != (char *)v74)
    free(v72);
  return v5;
}

_QWORD *mlir::getListOfPairs<unsigned long long>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t NumElements;
  _QWORD *result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *p_p;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _OWORD v15[2];
  void *__p;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v22, *a1, 0);
  while (1)
  {
    v4 = *a1;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)a1);
    result = mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v20, v4, NumElements);
    if ((_QWORD)v22 != (_QWORD)v20 || BYTE8(v22) != BYTE8(v20))
    {
      v8 = v23;
      goto LABEL_8;
    }
    v8 = v23;
    if ((_QWORD)v23 == (_QWORD)v21)
      return result;
LABEL_8:
    v20 = v22;
    v21 = v23;
    *(_QWORD *)&v23 = v8 + 1;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v20, (llvm::APInt *)&v18);
    if (v19 >= 0x41)
      v9 = (uint64_t *)v18;
    else
      v9 = (uint64_t *)&v18;
    v10 = *v9;
    v15[0] = v22;
    v15[1] = v23;
    *(_QWORD *)&v23 = v23 + 1;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v15, (llvm::APInt *)&__p);
    if (v17 >= 0x41)
      p_p = (uint64_t *)__p;
    else
      p_p = (uint64_t *)&__p;
    v12 = *p_p;
    v13 = *(unsigned int *)(a2 + 8);
    if (v13 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v13 + 1, 16);
      v13 = *(unsigned int *)(a2 + 8);
    }
    v14 = (_QWORD *)(*(_QWORD *)a2 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    ++*(_DWORD *)(a2 + 8);
    if (v17 >= 0x41 && __p)
      operator delete[](__p);
    if (v19 >= 0x41)
    {
      if (v18)
        operator delete[](v18);
    }
  }
}

uint64_t mlir::anec::Transpose::canonicalize(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t ArgAttrsAttr;
  unint64_t v16;
  unint64_t v17;
  int8x8_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int8x16_t v23;
  const double *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  const double *v28;
  unsigned __int128 v29;
  unsigned __int128 v30;
  int8x16_t v31;
  unint64_t v32;
  int8x16_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64x2_t *v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  int64x2_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t DefiningOp;
  mlir::Operation *v50;
  char *v51;
  char *v52;
  unsigned int v53;
  uint64_t *v54;
  void *v55;
  void *v56;
  void *v57;
  unsigned int v58;
  uint64_t *inserted;
  void *v60;
  uint64_t *v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  mlir::GenericProgramPoint *v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t *v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t *v88;
  void *v89;
  void *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  int v94;
  BOOL v95;
  unsigned int v96;
  uint64_t v97;
  llvm *v98;
  llvm *v99;
  uint64_t v100;
  void *v101;
  mlir::Attribute *v102;
  uint64_t Context;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  mlir::GenericProgramPoint *v118;
  uint64_t ParentFamily;
  uint64_t v121;
  llvm *v122[2];
  unsigned int v123;
  llvm *v124;
  uint64_t v125;
  unsigned int v126;
  mlir::Operation *v127;
  mlir::Operation *v128;
  void *__src;
  uint64_t v130;
  void *v131[2];
  _BYTE v132[48];
  void *MultipliersAttr;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  _QWORD v138[12];

  v138[10] = *MEMORY[0x1E0C80C00];
  v128 = (mlir::Operation *)a1;
  v136 = (char *)v138;
  v137 = 0x500000000;
  MultipliersAttr = (void *)mlir::anec::Tile::getMultipliersAttr(&v128);
  mlir::getListOfPairs<unsigned long long>((uint64_t *)&MultipliersAttr, (uint64_t)&v136);
  v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  MultipliersAttr = v4;
  v134 = v14;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&MultipliersAttr);
  if ((_DWORD)v137)
  {
    v17 = (v137 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v17 >= 4)
    {
      v20 = v17 + 1;
      v21 = v20 & 3;
      if ((v20 & 3) == 0)
        v21 = 4;
      v22 = v20 - v21;
      v19 = &v136[16 * v22];
      v23 = (int8x16_t)vdupq_n_s64(v16);
      v24 = (const double *)(v136 + 32);
      v25 = 0uLL;
      v26 = v23;
      v27 = 0uLL;
      do
      {
        v28 = v24 - 4;
        v29 = (unsigned __int128)vld2q_f64(v28);
        v30 = (unsigned __int128)vld2q_f64(v24);
        v23 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v23, (uint64x2_t)v29), (int8x16_t)v29, v23);
        v26 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v26, (uint64x2_t)v30), (int8x16_t)v30, v26);
        v25 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v25, (uint64x2_t)v29), v25, (int8x16_t)v29);
        v27 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v27, (uint64x2_t)v30), v27, (int8x16_t)v30);
        v24 += 8;
        v22 -= 4;
      }
      while (v22);
      v31 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v25, (uint64x2_t)v27), v25, v27);
      v32 = vextq_s8(v31, v31, 8uLL).u64[0];
      v18 = vbsl_s8((int8x8_t)vcgtd_u64(v31.u64[0], v32), *(int8x8_t *)v31.i8, (int8x8_t)v32);
      v33 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v26, (uint64x2_t)v23), v23, v26);
      v34 = vextq_s8(v33, v33, 8uLL).u64[0];
      v16 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v34, v33.u64[0]), *(int8x8_t *)v33.i8, (int8x8_t)v34);
    }
    else
    {
      v18 = 0;
      v19 = v136;
    }
    do
    {
      v36 = *(_QWORD *)v19;
      v19 += 16;
      v35 = v36;
      if (v36 < v16)
        v16 = v35;
      if (*(_QWORD *)&v18 <= v35)
        v18 = (int8x8_t)v35;
    }
    while (v19 != &v136[16 * v137]);
  }
  else
  {
    v18 = 0;
  }
  v37 = ArgAttrsAttr + 8 * v16;
  v38 = ArgAttrsAttr + 8 * *(_QWORD *)&v18;
  if (v37 == v38 + 8)
    goto LABEL_76;
  v39 = (*(_QWORD *)&v18 - v16) & 0x1FFFFFFFFFFFFFFFLL;
  if (v39 >= 3)
  {
    v41 = v39 + 1;
    v37 += 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = (int64x2_t *)(ArgAttrsAttr + 8 * v16 + 16);
    v43 = 0uLL;
    v44 = vdupq_n_s64(1uLL);
    v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    v46 = 0uLL;
    do
    {
      v43 = vsubq_s64(v43, (int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(v42[-1], v44)));
      v46 = vsubq_s64(v46, (int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(*v42, v44)));
      v42 += 2;
      v45 -= 4;
    }
    while (v45);
    v40 = vaddvq_s64(vaddq_s64(v46, v43));
    if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_35;
  }
  else
  {
    v40 = 0;
  }
  v47 = v37 - 8;
  do
  {
    v48 = *(_QWORD *)(v47 + 8);
    v47 += 8;
    if (v48 != 1)
      ++v40;
  }
  while (v47 != v38);
LABEL_35:
  if (v40 <= 1)
  {
LABEL_76:
    v131[0] = (void *)(*(a1 - 1) & 0xFFFFFFFFFFFFFFF8);
    v124 = *(llvm **)(a1[9] + 24);
    v71 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::ShapedType &,mlir::Value &>((mlir::OpBuilder *)(a2 + 8), a1[3], (uint64_t *)v131, (uint64_t *)&v124);
    (*(void (**)(uint64_t, uint64_t *, mlir::GenericProgramPoint *))(*(_QWORD *)a2 + 32))(a2, a1, v71);
    v72 = 1;
    goto LABEL_155;
  }
  MultipliersAttr = *(void **)(a1[9] + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&MultipliersAttr);
  if (DefiningOp)
  {
    v50 = *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Transpose,void>::id
        ? (mlir::Operation *)DefiningOp
        : 0;
    v127 = v50;
    if (v50)
    {
      MultipliersAttr = &v135;
      v134 = 0x500000000;
      v131[0] = (void *)mlir::anec::Tile::getMultipliersAttr(&v127);
      mlir::getListOfPairs<unsigned long long>((uint64_t *)v131, (uint64_t)&MultipliersAttr);
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v122[0] = 0;
      v122[1] = 0;
      v123 = 0;
      if ((_DWORD)v134)
      {
        v51 = (char *)MultipliersAttr;
        v52 = (char *)MultipliersAttr + 16 * v134;
        do
        {
          *(_OWORD *)v131 = *(_OWORD *)v51;
          v56 = v131[1];
          if (v126)
          {
            v57 = v131[0];
            v58 = (37 * LODWORD(v131[0])) & (v126 - 1);
            inserted = (uint64_t *)((char *)v124 + 16 * v58);
            v60 = (void *)*inserted;
            if (v131[0] == (void *)*inserted)
              goto LABEL_58;
            v61 = 0;
            v62 = 1;
            while (v60 != (void *)-1)
            {
              if (v61)
                v63 = 0;
              else
                v63 = v60 == (void *)-2;
              if (v63)
                v61 = inserted;
              v64 = v58 + v62++;
              v58 = v64 & (v126 - 1);
              inserted = (uint64_t *)((char *)v124 + 16 * v58);
              v60 = (void *)*inserted;
              if (v131[0] == (void *)*inserted)
                goto LABEL_58;
            }
            if (v61)
              v65 = v61;
            else
              v65 = inserted;
          }
          else
          {
            v65 = 0;
          }
          inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>,unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>::InsertIntoBucket<unsigned long long const&>((uint64_t)&v124, v65, (uint64_t *)v131);
          v57 = v131[0];
LABEL_58:
          inserted[1] = (uint64_t)v56;
          if (!v123)
          {
            v66 = 0;
LABEL_60:
            v54 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>,unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>::InsertIntoBucket<unsigned long long const&>((uint64_t)v122, v66, (uint64_t *)&v131[1]);
            goto LABEL_44;
          }
          v53 = (37 * LODWORD(v131[1])) & (v123 - 1);
          v54 = (uint64_t *)((char *)v122[0] + 16 * v53);
          v55 = (void *)*v54;
          if (v131[1] != (void *)*v54)
          {
            v67 = 0;
            v68 = 1;
            while (v55 != (void *)-1)
            {
              if (v67)
                v69 = 0;
              else
                v69 = v55 == (void *)-2;
              if (v69)
                v67 = v54;
              v70 = v53 + v68++;
              v53 = v70 & (v123 - 1);
              v54 = (uint64_t *)((char *)v122[0] + 16 * v53);
              v55 = (void *)*v54;
              if (v131[1] == (void *)*v54)
                goto LABEL_44;
            }
            if (v67)
              v66 = v67;
            else
              v66 = v54;
            goto LABEL_60;
          }
LABEL_44:
          v54[1] = (uint64_t)v57;
          v51 += 16;
        }
        while (v51 != v52);
      }
      if (!(_DWORD)v137)
      {
LABEL_124:
        v131[0] = v132;
        v131[1] = (void *)0x500000000;
        if (!(_DWORD)v125)
          goto LABEL_139;
        if (v126)
        {
          v97 = 16 * v126;
          v98 = v124;
          while (*(_QWORD *)v98 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v98 = (llvm *)((char *)v98 + 16);
            v97 -= 16;
            if (!v97)
              goto LABEL_139;
          }
        }
        else
        {
          v98 = v124;
        }
        v99 = (llvm *)((char *)v124 + 16 * v126);
        if (v98 == v99)
        {
LABEL_139:
          v101 = 0;
        }
        else
        {
          do
          {
            v100 = *((_QWORD *)v98 + 1);
            if (*(_QWORD *)v98 != v100)
            {
              __src = *(void **)v98;
              v130 = v100;
              llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)v131, (uint64_t)v131[0] + 8 * LODWORD(v131[1]), (char *)&__src, (char *)v131);
            }
            do
            {
              v98 = (llvm *)((char *)v98 + 16);
              if (v98 == v99)
                goto LABEL_138;
            }
            while (*(_QWORD *)v98 >= 0xFFFFFFFFFFFFFFFELL);
          }
          while (v98 != v99);
LABEL_138:
          v101 = (void *)((unint64_t)LODWORD(v131[1]) >> 1);
        }
        __src = v101;
        v130 = 2;
        v102 = (mlir::Attribute *)(a1 + 3);
        Context = mlir::Attribute::getContext(v102);
        v104 = mlir::IntegerType::get(Context, 0x40u, 2u);
        v105 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&__src, 2, v104, 0);
        v106 = v105;
        if (!v105)
          goto LABEL_149;
        v107 = *v105;
        v108 = mlir::TypeID::get<mlir::ShapedType>();
        v109 = *(unsigned int *)(v107 + 16);
        if (!(_DWORD)v109)
          goto LABEL_149;
        v110 = *(_QWORD **)(v107 + 8);
        v111 = &v110[2 * v109];
        do
        {
          v112 = v109 >> 1;
          v113 = &v110[2 * (v109 >> 1)];
          v115 = *v113;
          v114 = v113 + 2;
          v109 += ~(v109 >> 1);
          if (v115 < v108)
            v110 = v114;
          else
            v109 = v112;
        }
        while (v109);
        if (v110 != v111 && *v110 == v108)
          v116 = v110[1];
        else
LABEL_149:
          v116 = 0;
        v121 = mlir::DenseElementsAttr::getFromRawBuffer(v106, v116, v131[0], 8 * LODWORD(v131[1]), 8, 1, 0);
        v117 = *(_QWORD *)v102;
        __src = *(void **)(*((_QWORD *)v50 + 9) + 24);
        v118 = mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a2 + 8), v117, (uint64_t *)&__src, &v121);
        ParentFamily = mlir::anec::detail::VerifyAttributesWithFamilyInterfaceTrait<mlir::anec::Invert>::getParentFamily((uint64_t *)&v128);
        if (v131[0] != v132)
          free(v131[0]);
        llvm::deallocate_buffer(v122[0], (void *)(16 * v123));
      }
      v73 = v136;
      v74 = &v136[16 * v137];
      while (1)
      {
        *(_OWORD *)v131 = *v73;
        v78 = v131[0];
        __src = v131[0];
        if (v123)
        {
          LODWORD(v79) = (v123 - 1) & (37 * LODWORD(v131[0]));
          v80 = (void *)*((_QWORD *)v122[0] + 2 * v79);
          if (v131[0] == v80)
          {
            if ((_DWORD)v79 != v123)
              goto LABEL_102;
            goto LABEL_104;
          }
          v85 = 1;
          while (v80 != (void *)-1)
          {
            v86 = v79 + v85++;
            v79 = v86 & (v123 - 1);
            v80 = (void *)*((_QWORD *)v122[0] + 2 * v79);
            if (v131[0] == v80)
              goto LABEL_100;
          }
        }
        v79 = v123;
LABEL_100:
        if (v79 != v123)
        {
          if (v123)
          {
LABEL_102:
            v87 = (v123 - 1) & (37 * LODWORD(v131[0]));
            v88 = (uint64_t *)((char *)v122[0] + 16 * v87);
            v89 = (void *)*v88;
            if (v131[0] == (void *)*v88)
            {
LABEL_103:
              v78 = (void *)v88[1];
              __src = v78;
              goto LABEL_104;
            }
            v93 = 0;
            v94 = 1;
            while (v89 != (void *)-1)
            {
              if (v93)
                v95 = 0;
              else
                v95 = v89 == (void *)-2;
              if (v95)
                v93 = v88;
              v96 = v87 + v94++;
              v87 = v96 & (v123 - 1);
              v88 = (uint64_t *)((char *)v122[0] + 16 * v87);
              v89 = (void *)*v88;
              if (v131[0] == (void *)*v88)
                goto LABEL_103;
            }
            if (v93)
              v92 = v93;
            else
              v92 = v88;
          }
          else
          {
            v92 = 0;
          }
          v88 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>,unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>::InsertIntoBucket<unsigned long long const&>((uint64_t)v122, v92, (uint64_t *)v131);
          goto LABEL_103;
        }
LABEL_104:
        v90 = v131[1];
        if (!v126)
        {
          v91 = 0;
LABEL_106:
          v76 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>,unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>::InsertIntoBucket<unsigned long long const&>((uint64_t)&v124, v91, (uint64_t *)&__src);
          goto LABEL_81;
        }
        v75 = (37 * (_DWORD)v78) & (v126 - 1);
        v76 = (uint64_t *)((char *)v124 + 16 * v75);
        v77 = *v76;
        if (v78 != (void *)*v76)
        {
          v81 = 0;
          v82 = 1;
          while (v77 != -1)
          {
            if (v81)
              v83 = 0;
            else
              v83 = v77 == -2;
            if (v83)
              v81 = v76;
            v84 = v75 + v82++;
            v75 = v84 & (v126 - 1);
            v76 = (uint64_t *)((char *)v124 + 16 * v75);
            v77 = *v76;
            if (v78 == (void *)*v76)
              goto LABEL_81;
          }
          if (v81)
            v91 = v81;
          else
            v91 = v76;
          goto LABEL_106;
        }
LABEL_81:
        v76[1] = (uint64_t)v90;
        if (++v73 == (_OWORD *)v74)
          goto LABEL_124;
      }
    }
  }
  v72 = 0;
LABEL_155:
  if (v136 != (char *)v138)
    free(v136);
  return v72;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.transpose", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.transpose";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Transpose::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Transpose,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

BOOL mlir::anec::Transpose::getExecutionCost(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *OperandRange;
  _QWORD v19[2];

  if (*(_DWORD *)(*a1 + 36))
    v4 = *a1 - 16;
  else
    v4 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_13;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_13;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_13:
    v15 = 0;
  v19[0] = v5;
  v19[1] = v15;
  v16 = *a1;
  OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19);
}

uint64_t mlir::anec::Padding::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *ArgAttrsAttr;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  mlir::CallGraphNode *v39;
  uint64_t v40;
  mlir::CallGraphNode *v41;
  char v42;
  uint64_t v43;
  mlir::CallGraphNode *v44;
  mlir::CallGraphNode *v45;
  mlir::CallGraphNode *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  mlir::anec *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t ReferenceFormatIndex;
  char v56;
  void *v57;
  mlir::AffineMap *v58;
  uint64_t OperandRange;
  uint64_t v60;
  uint64_t v61;
  _QWORD v63[2];
  void *v64[2];
  _BYTE v65[40];
  void *v66;
  uint64_t v67;
  _BYTE v68[40];
  void *v69;
  uint64_t v70;
  _BYTE v71[40];
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[25];

  v80[23] = *MEMORY[0x1E0C80C00];
  v72 = a6;
  LOBYTE(v73) = 0;
  v74 = 0;
  v75 = a7;
  v76 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if (v74)
      v74 = 0;
    mlir::OperationName::OperationName(&v73, "anec.padding", 12, Context);
    v74 = 1;
  }
  v77 = a4;
  v78 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  v18 = a3;
  if (a3)
    v19 = (uint64_t)a2;
  else
    v19 = v17;
  if (!mlir::anec::PaddingAdaptor::verify(&v72, v19))
    return 0;
  v20 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = v20;
  if (!v20)
    goto LABEL_18;
  v22 = *v20;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_18;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_18:
    v31 = 0;
  v63[0] = v21;
  v63[1] = v31;
  ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v63);
  v33 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v63);
  v35 = (_BYTE *)(v33 + 8 * v34);
  v69 = v71;
  v70 = 0x500000000;
  v36 = v35 - ArgAttrsAttr;
  if ((unint64_t)(v35 - ArgAttrsAttr) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v36 >> 3, 8);
    v37 = v70;
    if (v35 == ArgAttrsAttr)
      goto LABEL_25;
    goto LABEL_24;
  }
  v37 = 0;
  if (v35 != ArgAttrsAttr)
  {
LABEL_24:
    memcpy((char *)v69 + 8 * v37, ArgAttrsAttr, v35 - ArgAttrsAttr);
    v37 = v70;
  }
LABEL_25:
  LODWORD(v70) = v37 + ((unint64_t)v36 >> 3);
  v66 = v68;
  v67 = 0x500000000;
  v64[0] = v65;
  v64[1] = (void *)0x500000000;
  v39 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72) + 16);
  v40 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
  v41 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v39, (mlir::CallGraphNode *)(v40 - 16), *(_QWORD *)(*(_QWORD *)(v73 + 96) + 8));
  if ((v42 & 1) != 0)
    v43 = *((_QWORD *)v41 + 1);
  else
    v43 = 0;
  mlir::getValues<long long>(v43, (uint64_t)&v66);
  v44 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72) + 32);
  v45 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
  v46 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v44, v45, *(_QWORD *)(*(_QWORD *)(v73 + 96) + 16));
  if ((v47 & 1) != 0)
    v48 = *((_QWORD *)v46 + 1);
  else
    v48 = 0;
  mlir::getValues<long long>(v48, (uint64_t)v64);
  if ((_DWORD)v67)
  {
    v49 = 0;
    v50 = 0;
    v51 = v66;
    v52 = 16 * v67;
    do
    {
      if (v51[(_QWORD)v50] != 8)
      {
        v53 = v67;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v63);
        ReferenceFormatIndex = mlir::anec::getReferenceFormatIndex(v50, v53, v54);
        if (!v56)
        {
          if (v18)
          {
            mlir::emitError((uint64_t)a2, (uint64_t)&v79);
            if (v79)
              mlir::Diagnostic::operator<<((uint64_t)v80, "'anec.padding' op attributes are inconsistent with input rank");
            v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v79);
            if (v79)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v79);
            std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v80);
          }
          else
          {
            v38 = 0;
          }
          goto LABEL_46;
        }
        *((_QWORD *)v69 + ReferenceFormatIndex) += *(_QWORD *)((char *)v64[0] + v49 + 8)
                                                 + *(_QWORD *)((char *)v64[0] + v49);
      }
      v50 = (mlir::anec *)((char *)v50 + 1);
      v49 += 16;
    }
    while (v52 != v49);
  }
  v57 = v69;
  v58 = (mlir::AffineMap *)v70;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
  v60 = mlir::MemRefType::get(v57, v58, OperandRange, 0, 0, 0);
  v61 = *(unsigned int *)(a11 + 8);
  if (v61 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v61 + 1, 8);
    LODWORD(v61) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v61) = v60;
  ++*(_DWORD *)(a11 + 8);
  v38 = 1;
LABEL_46:
  if (v64[0] != v65)
    free(v64[0]);
  if (v66 != v68)
    free(v66);
  if (v69 != v71)
    free(v69);
  return v38;
}

uint64_t mlir::anec::PaddingAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *Type;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *ArgAttrsAttr;
  uint64_t v32;
  uint64_t NumElements;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v44;
  uint64_t *v45[2];
  uint64_t Value;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t OperandRange;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v53 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v53);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v53))
    {
      v5 = "'anec.padding' op requires attribute 'background_value'";
      goto LABEL_65;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v6 = (uint64_t *)*((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v53))
    {
      v5 = "'anec.padding' op requires attribute 'padding_modes'";
      goto LABEL_65;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v7 = (uint64_t *)*((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v53))
    {
      v5 = "'anec.padding' op requires attribute 'padding_sizes'";
      goto LABEL_65;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v8 = (uint64_t *)*((_QWORD *)i + 1);
  v48 = v8;
  if (v7)
  {
    v9 = *v7;
    v10 = mlir::TypeID::get<mlir::ElementsAttr>();
    v11 = *(unsigned int *)(v9 + 16);
    if (!(_DWORD)v11)
      goto LABEL_25;
    v12 = *(_QWORD **)(v9 + 8);
    v13 = &v12[2 * v11];
    do
    {
      v14 = v11 >> 1;
      v15 = &v12[2 * (v11 >> 1)];
      v17 = *v15;
      v16 = v15 + 2;
      v11 += ~(v11 >> 1);
      if (v17 < v10)
        v12 = v16;
      else
        v11 = v14;
    }
    while (v11);
    if (v12 != v13 && *v12 == v10)
      v18 = (uint64_t *)v12[1];
    else
LABEL_25:
      v18 = 0;
    v45[0] = v7;
    v45[1] = v18;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v45);
    v20 = Type;
    if (!Type)
      goto LABEL_35;
    v21 = *Type;
    v22 = mlir::TypeID::get<mlir::ShapedType>();
    v23 = *(unsigned int *)(v21 + 16);
    if (!(_DWORD)v23)
      goto LABEL_35;
    v24 = *(_QWORD **)(v21 + 8);
    v25 = &v24[2 * v23];
    do
    {
      v26 = v23 >> 1;
      v27 = &v24[2 * (v23 >> 1)];
      v29 = *v27;
      v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22)
        v24 = v28;
      else
        v23 = v26;
    }
    while (v23);
    if (v24 != v25 && *v24 == v22)
      v30 = v24[1];
    else
LABEL_35:
      v30 = 0;
    Value = (uint64_t)v20;
    v47 = v30;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
    OperandRange = 5;
    if (v32 != 1 || *ArgAttrsAttr != OperandRange)
    {
LABEL_38:
      v5 = "'anec.padding' op attribute 'padding_modes' failed to satisfy constraint: PaddingMode elements attribute of shape {5}";
      goto LABEL_65;
    }
    v44 = v7;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v55, (uint64_t)v7, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v44);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v49, (uint64_t)v7, NumElements);
    while (1)
    {
      v35 = v55 == v49 && v56 == v50;
      if (v35 && v57 == v51)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v55, (llvm::APInt *)&v58);
      if (DWORD2(v58) > 0x40)
      {
        v34 = *(_QWORD *)v58;
        operator delete[]((void *)v58);
        if (v34 > 8)
          goto LABEL_38;
      }
      else if ((unint64_t)((uint64_t)((_QWORD)v58 << -BYTE8(v58)) >> -BYTE8(v58)) > 8)
      {
        goto LABEL_38;
      }
      ++v57;
    }
  }
  if (!v8)
    goto LABEL_74;
  if (mlir::DenseIntElementsAttr::classof((uint64_t)v8))
  {
    v49 = mlir::Attribute::cast<mlir::ElementsAttr>(&v48);
    v50 = v36;
    v45[0] = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v49);
    v55 = mlir::Type::cast<mlir::ShapedType>(v45);
    v56 = v37;
    v38 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
    v58 = xmmword_181233130;
    if (v39 == 2 && *v38 == (_QWORD)v58 && v38[1] == *((_QWORD *)&v58 + 1))
    {
      v44 = v48;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
      v47 = v41;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
LABEL_74:
        if (!v6)
          return 1;
        if (*(_UNKNOWN **)(*v6 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
        {
          v49 = v6;
          v55 = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v49);
          if (mlir::Type::isF16((mlir::Type *)&v55))
            return 1;
        }
        v49 = (uint64_t *)"'anec.padding' op attribute 'background_value' failed to satisfy constraint: 16-bit float attribute";
        v52 = 259;
        mlir::emitError(a2, (uint64_t)&v49, (uint64_t)&v55);
        v42 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v55);
        return v42;
      }
    }
  }
  v5 = "'anec.padding' op attribute 'padding_sizes' failed to satisfy constraint: ui64 elements attribute of shape {5, 2}";
LABEL_65:
  v49 = (uint64_t *)v5;
  v52 = 259;
  mlir::emitError(a2, (uint64_t)&v49, (uint64_t)&v55);
  v42 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
  if (v55)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v56);
  return v42;
}

void mlir::anec::Padding::getZinIrUnitInfo(mlir::anec::Padding *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t PaddingAttr;
  int32x4_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  uint64_t v18;
  mlir::anec *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  uint64_t DimFromIndex;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  llvm::APFloatBase *Value;
  void *v48;
  void *v49;
  unsigned int v50;
  _QWORD *v51;
  unsigned int v52;
  void *v53;
  mlir::anec::L2NormPool *v55;
  char **v56;
  unint64_t v57;
  void *__p;
  unsigned int v59;
  _QWORD v60[2];
  uint64_t StrideAttr;
  _QWORD v62[3];
  void *v63;
  uint64_t v64;
  _BYTE v65[48];
  char *v66;
  uint64_t v67;
  _QWORD v68[8];

  v68[6] = *MEMORY[0x1E0C80C00];
  v3 = (char *)operator new(0xE8uLL);
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_QWORD *)v3 + 27) = 0;
  *((_QWORD *)v3 + 28) = 0;
  *((_QWORD *)v3 + 9) = -1;
  *(_OWORD *)(v3 + 138) = 0u;
  *(_QWORD *)v3 = off_1E0E13350;
  *(_OWORD *)(v3 + 156) = 0u;
  *(_OWORD *)(v3 + 172) = 0u;
  *(_QWORD *)(v3 + 188) = 0;
  *((_QWORD *)v3 + 25) = 0;
  v56 = (char **)(v3 + 200);
  *((_WORD *)v3 + 112) = 0;
  *((_QWORD *)v3 + 26) = 0;
  v66 = (char *)v68;
  v67 = 0x600000000;
  PaddingAttr = mlir::anec::L2NormPool::getPaddingAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(PaddingAttr, (uint64_t)&v66);
  v63 = v65;
  v64 = 0x300000000;
  StrideAttr = mlir::anec::L2NormPool::getStrideAttr((mlir::Operation **)this);
  mlir::getListOfPairs<unsigned long long>(&StrideAttr, (uint64_t)&v63);
  v5 = (int32x4_t *)((char *)v63 + 16 * v64);
  *(int32x4_t *)(v3 + 156) = vuzp1q_s32(v5[-1], v5[-2]);
  *(int32x2_t *)(v3 + 180) = vmovn_s64((int64x2_t)v5[-3]);
  v55 = this;
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v60[0] = v6;
  v60[1] = v16;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
  v17 = (int64x2_t *)v63;
  if (v18 == 5)
    *(int32x2_t *)(v3 + 172) = vmovn_s64(*((int64x2_t *)v63 + v64 - 4));
  *(int32x2_t *)(v3 + 188) = vmovn_s64(*v17);
  if ((_DWORD)v67)
  {
    v19 = 0;
    v20 = v66;
    v21 = &v66[8 * v67];
    while (1)
    {
      if (*v20 == 8)
        goto LABEL_17;
      DimFromIndex = mlir::anec::getDimFromIndex(v19, v67);
      v24 = (DimFromIndex & 0xFF00000000) != 0 ? qword_181233098[(int)DimFromIndex] : 5;
      v25 = qword_181233058[*v20];
      v27 = (char *)*((_QWORD *)v3 + 26);
      v26 = *((_QWORD *)v3 + 27);
      if ((unint64_t)v27 >= v26)
        break;
      *(_QWORD *)v27 = v25 | v24;
      v22 = v27 + 8;
LABEL_16:
      *((_QWORD *)v3 + 26) = v22;
LABEL_17:
      v19 = (mlir::anec *)((char *)v19 + 1);
      if (++v20 == (_QWORD *)v21)
        goto LABEL_44;
    }
    v28 = v3;
    v29 = v21;
    v30 = *v56;
    v31 = v27 - *v56;
    v32 = v31 >> 3;
    v33 = (v31 >> 3) + 1;
    if (v33 >> 61)
      abort();
    v34 = v26 - (_QWORD)v30;
    if (v34 >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    v57 = v33;
    if (v33)
    {
      if (v33 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v35 = operator new(8 * v33);
    }
    else
    {
      v35 = 0;
    }
    v36 = (uint64_t *)&v35[8 * v32];
    *v36 = v25 | v24;
    v22 = v36 + 1;
    if (v27 == v30)
    {
      v21 = v29;
      v3 = v28;
      goto LABEL_42;
    }
    v37 = v27 - v30 - 8;
    if (v37 >= 0x58)
    {
      v38 = v27 - v35 - v31;
      v21 = v29;
      v3 = v28;
      if (v38 >= 0x20)
      {
        v39 = (v37 >> 3) + 1;
        v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v27[-v40];
        v36 = (uint64_t *)((char *)v36 - v40);
        v42 = &v35[8 * v32 - 16];
        v43 = v27 - 16;
        v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *(_OWORD *)v43;
          *(v42 - 1) = *((_OWORD *)v43 - 1);
          *v42 = v45;
          v42 -= 2;
          v43 -= 32;
          v44 -= 4;
        }
        while (v44);
        v27 = v41;
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_41;
      }
    }
    else
    {
      v21 = v29;
      v3 = v28;
    }
    do
    {
      v46 = *((_QWORD *)v27 - 1);
      v27 -= 8;
      *--v36 = v46;
    }
    while (v27 != v30);
LABEL_41:
    v27 = *v56;
LABEL_42:
    *((_QWORD *)v3 + 25) = v36;
    *((_QWORD *)v3 + 26) = v22;
    *((_QWORD *)v3 + 27) = &v35[8 * v57];
    if (v27)
      operator delete(v27);
    goto LABEL_16;
  }
LABEL_44:
  __p = (void *)mlir::anec::L2NormPool::getKsizeAttr((mlir::Operation **)v55);
  Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&__p, (uint64_t)&StrideAttr);
  v48 = (void *)v62[0];
  v49 = llvm::APFloatBase::PPCDoubleDouble(Value);
  if (v49 == v48)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v62, (llvm::APInt *)&__p);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v62, (uint64_t)&__p);
  v50 = v59;
  if (v59 < 0x41)
  {
    v51 = a2;
    if ((unint64_t)__p < 0x10000)
      *((_WORD *)v3 + 112) = (_WORD)__p;
    else
      *((_WORD *)v3 + 112) = -1;
    goto LABEL_58;
  }
  v52 = v50 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
  v53 = __p;
  if (v52 <= 0x40)
  {
    v51 = a2;
    if (*(_QWORD *)__p < 0x10000uLL)
      *((_WORD *)v3 + 112) = *(_QWORD *)__p;
    else
      *((_WORD *)v3 + 112) = -1;
    goto LABEL_57;
  }
  *((_WORD *)v3 + 112) = -1;
  v51 = a2;
  if (v53)
LABEL_57:
    operator delete[](v53);
LABEL_58:
  if (v49 == (void *)v62[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
  *v51 = v3;
  if (v63 != v65)
    free(v63);
  if (v66 != (char *)v68)
    free(v66);
}

llvm::detail::DoubleAPFloat *mlir::anec::Padding::getBackgroundValue@<X0>(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t KsizeAttr;

  KsizeAttr = mlir::anec::L2NormPool::getKsizeAttr(this);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&KsizeAttr, a2);
}

uint64_t mlir::anec::Padding::addOpToNetwork(mlir::anec::Padding *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Padding::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::Padding::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t PaddingAttr;
  llvm::APFloatBase *Value;
  void *v8;
  void *v9;
  int v10;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t ANECDimension;
  int32x2_t v24;
  int64x2_t *v25;
  int32x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  std::ios_base *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::Operation *v39;
  void *v40;
  char v41;
  void **v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[16];
  int v47;
  void *__p;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[8];
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55[19];
  void *v56[2];
  _BYTE v57[64];
  void *v58[2];
  _BYTE v59[48];
  void *v60;
  uint64_t v61;
  _BYTE v62[48];
  char buffer[8];
  _QWORD v64[65];

  v64[63] = *MEMORY[0x1E0C80C00];
  v60 = v62;
  v61 = 0x600000000;
  PaddingAttr = mlir::anec::L2NormPool::getPaddingAttr(a1);
  mlir::getValues<unsigned long long>(PaddingAttr, (uint64_t)&v60);
  v58[0] = v59;
  v58[1] = (void *)0x300000000;
  *(_QWORD *)buffer = mlir::anec::L2NormPool::getStrideAttr(a1);
  mlir::getListOfPairs<unsigned long long>((uint64_t *)buffer, (uint64_t)v58);
  ANECPadLayerDescInitialize();
  __p = (void *)mlir::anec::L2NormPool::getKsizeAttr(a1);
  Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&__p, (uint64_t)buffer);
  v8 = (void *)v64[0];
  v9 = llvm::APFloatBase::PPCDoubleDouble(Value);
  if (v9 == v8)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v64, (llvm::APInt *)&__p);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v64, (uint64_t)&__p);
  v10 = v49;
  if (v49 >= 0x41)
  {
    if (v10 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
    {
      _H0 = *(_QWORD *)__p;
      __asm { FCVT            S0, H0 }
      if (*(_QWORD *)__p >> 16)
        _S0 = NAN;
      v47 = LODWORD(_S0);
    }
    else
    {
      v47 = -8192;
      if (!__p)
        goto LABEL_15;
    }
    operator delete[](__p);
    goto LABEL_15;
  }
  if ((unint64_t)__p < 0x10000)
  {
    _H0 = (__int16)__p;
    __asm { FCVT            S0, H0 }
    v47 = _S0;
  }
  else
  {
    v47 = -8192;
  }
LABEL_15:
  if (v9 != (void *)v64[0])
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v64);
    v19 = v61;
    if ((_DWORD)v61)
      goto LABEL_17;
LABEL_22:
    v21 = 0;
    goto LABEL_23;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v64);
  v19 = v61;
  if (!(_DWORD)v61)
    goto LABEL_22;
LABEL_17:
  v20 = 0;
  v21 = 0;
  v22 = v60;
  do
  {
    if (v22[v20] != 8)
    {
      v22 = v60;
      v24 = (int32x2_t)*(&off_1E0E53988 + *((_QWORD *)v60 + v20));
      v25 = (int64x2_t *)v58[0];
      v26 = (int32x2_t *)&v46[3 * v21];
      v26[1] = (int32x2_t)ANECDimension;
      v26[2] = v24;
      v26[3] = vmovn_s64(v25[v20]);
      v19 = v61;
      ++v21;
    }
    ++v20;
  }
  while (v20 < v19);
LABEL_23:
  v46[0] = v21;
  v56[0] = v57;
  v56[1] = (void *)0x100000000;
  *(_QWORD *)buffer = 1;
  __p = 0;
  ANECUnitValidatorCreate();
  v44 = 0;
  v45 = 0;
  if (ANECValidatePadLayer())
  {
    v39 = *a1;
    v27 = MEMORY[0x1E0DE4FD0];
    v28 = MEMORY[0x1E0DE4FD0] + 104;
    v55[0] = MEMORY[0x1E0DE4FD0] + 104;
    v29 = MEMORY[0x1E0DE4FD0] + 64;
    v30 = MEMORY[0x1E0DE4F50];
    v31 = *(void **)(MEMORY[0x1E0DE4F50] + 16);
    v32 = *(void **)(MEMORY[0x1E0DE4F50] + 24);
    v50 = MEMORY[0x1E0DE4FD0] + 64;
    __p = v31;
    *(void **)((char *)&__p + *((_QWORD *)v31 - 3)) = v32;
    v49 = 0;
    v33 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
    std::ios_base::init(v33, v51);
    v33[1].__vftable = 0;
    v33[1].__fmtflags_ = -1;
    v34 = *(_QWORD *)(v30 + 40);
    v50 = *(_QWORD *)(v30 + 32);
    *(uint64_t *)((char *)&v51[-1] + *(_QWORD *)(v50 - 24)) = v34;
    __p = *(void **)(v30 + 8);
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v30 + 48);
    v55[0] = v28;
    __p = (void *)(v27 + 24);
    v50 = v29;
    std::streambuf::basic_streambuf();
    v35 = MEMORY[0x1E0DE4FB8] + 16;
    v51[0] = MEMORY[0x1E0DE4FB8] + 16;
    v52 = 0u;
    v53 = 0u;
    v54 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    __p = *(void **)v30;
    v36 = *(_QWORD *)(v30 + 72);
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v30 + 64);
    v50 = v36;
    v51[0] = v35;
    if (SBYTE7(v53) < 0)
      operator delete((void *)v52);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v55);
    v43 = 260;
    v42 = &v40;
    v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v64);
    if (v41 < 0)
      operator delete(v40);
  }
  else
  {
    v37 = 1;
  }
  ANECUnitValidatorDelete();
  if (v56[0] != v57)
    free(v56[0]);
  if (v58[0] != v59)
    free(v58[0]);
  if (v60 != v62)
    free(v60);
  return v37;
}

uint64_t mlir::anec::MatMul::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t ArgAttrsAttr;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t IndexFromDim;
  unint64_t v48;
  char v49;
  char v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  mlir::AffineMap *v60;
  void *v61;
  uint64_t OperandRange;
  uint64_t v63;
  uint64_t v64;
  _QWORD v66[2];
  _QWORD v67[2];
  void *v68;
  int v69;
  unsigned int v70;
  _QWORD v71[5];
  uint64_t v72;
  char v73[8];
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v72 = a6;
  v73[0] = 0;
  v74 = 0;
  v75 = a7;
  v76 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if (v74)
      v74 = 0;
    mlir::OperationName::OperationName(v73, "anec.matmul", 11, Context);
    v74 = 1;
  }
  v77 = a4;
  v78 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::MatMulAdaptor::verify(&v72, v18))
    return 0;
  v19 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v20 = v19;
  if (!v19)
    goto LABEL_18;
  v21 = *v19;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_18;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_18:
    v30 = 0;
  v67[0] = v20;
  v67[1] = v30;
  v31 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 1);
  v32 = v31;
  if (!v31)
    goto LABEL_28;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_28;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_28:
    v42 = 0;
  v66[0] = v32;
  v66[1] = v42;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v67);
  v44 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v66);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v67);
  v46 = v45;
  IndexFromDim = mlir::anec::getIndexFromDim(0, v45);
  v48 = mlir::anec::getIndexFromDim(2, v46);
  v50 = v49;
  v51 = 1;
  v52 = mlir::anec::getIndexFromDim(1, v46);
  v53 = mlir::anec::getIndexFromDim(3, v46);
  v54 = mlir::anec::getIndexFromDim(4, v46);
  v68 = v71;
  v70 = 5;
  if (*(_QWORD *)(ArgAttrsAttr + 8 * IndexFromDim) == 1)
    v55 = v44;
  else
    v55 = ArgAttrsAttr;
  v71[0] = *(_QWORD *)(v55 + 8 * IndexFromDim);
  if (v50)
  {
    v71[1] = *(_QWORD *)(ArgAttrsAttr + 8 * v48);
    v51 = 2;
  }
  v56 = *(_QWORD *)(ArgAttrsAttr + 8 * v53);
  v71[v51] = *(_QWORD *)(ArgAttrsAttr + 8 * v52);
  if (v56 == 1)
    v57 = v44;
  else
    v57 = ArgAttrsAttr;
  v71[v51 + 1] = *(_QWORD *)(v57 + 8 * v53);
  v58 = (v51 + 2);
  v69 = v58;
  v59 = *(_QWORD *)(v44 + 8 * v54);
  if (v58 >= v70)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v58 + 1, 8);
    LODWORD(v58) = v69;
  }
  *((_QWORD *)v68 + v58) = v59;
  v60 = (mlir::AffineMap *)++v69;
  v61 = v68;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v67);
  v63 = mlir::MemRefType::get(v61, v60, OperandRange, 0, 0, 0);
  v64 = *(unsigned int *)(a11 + 8);
  if (v64 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v64 + 1, 8);
    LODWORD(v64) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v64) = v63;
  ++*(_DWORD *)(a11 + 8);
  if (v68 != v71)
    free(v68);
  return 1;
}

uint64_t mlir::anec::MatMulAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *Value;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v10);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v10))
    return 1;
  v5 = 0;
  do
  {
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      v5 = *((_QWORD *)Value + 1);
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  while (Value != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v10));
  if (!v5)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v8[0] = v5;
    v11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v8);
    if (mlir::Type::isF16((mlir::Type *)&v11))
      return 1;
  }
  v8[0] = "'anec.matmul' op attribute 'bias' failed to satisfy constraint: 16-bit float attribute";
  v9 = 259;
  mlir::emitError(a2, (uint64_t)v8, (uint64_t)&v11);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v6;
}

void mlir::anec::MatMul::getZinIrUnitInfo(mlir::anec::MatMul *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  llvm::APFloatBase *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t ElementTypeOrSelf;
  void *v16;
  _QWORD v17[3];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13918;
  *((_QWORD *)v4 + 1) = 0;
  v4[80] = 0;
  v4[80] = 0;
  mlir::anec::MatMul::getBias((mlir::Operation **)this, (uint64_t)&v16);
  if (v18)
  {
    v6 = (void *)v17[0];
    v7 = llvm::APFloatBase::PPCDoubleDouble(v5);
    if (v7 == v6)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
    v4[80] = 1;
    if (*(_DWORD *)(*(_QWORD *)this + 36))
      v8 = *(_QWORD *)this - 16;
    else
      v8 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(NextResultAtOffset);
    if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
    {
      mlir::anec::MatMul::getBias((mlir::Operation **)this, (uint64_t)&v16);
      _S0 = llvm::APFloat::convertToFloat(&v16);
      __asm { FCVT            H0, S0 }
      *((_WORD *)v4 + 41) = LOWORD(_S0);
      if (!v18)
        goto LABEL_17;
      goto LABEL_14;
    }
    if (!mlir::Type::isSignedInteger((mlir::Type *)&ElementTypeOrSelf, 8))
      mlir::Type::isUnsignedInteger((mlir::Type *)&ElementTypeOrSelf, 8);
    mlir::anec::MatMul::getBias((mlir::Operation **)this, (uint64_t)&v16);
    v4[82] = (int)llvm::APFloat::convertToFloat(&v16);
    if (v18)
    {
LABEL_14:
      if (v7 == (void *)v17[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
    }
  }
LABEL_17:
  *a2 = v4;
}

void mlir::anec::MatMul::getBias(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  llvm::APFloatBase *Value;
  void *v4;
  void *v5;
  uint64_t BiasAttr;
  _BYTE v7[8];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  BiasAttr = mlir::anec::MatMul::getBiasAttr(this);
  if (BiasAttr)
  {
    Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&BiasAttr, (uint64_t)v7);
    v4 = (void *)v8[0];
    v5 = llvm::APFloatBase::PPCDoubleDouble(Value);
    if (v5 == v4)
      llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)(a2 + 8), v8);
    else
      llvm::detail::IEEEFloat::IEEEFloat(a2 + 8, (uint64_t)v8);
    *(_BYTE *)(a2 + 32) = 1;
    if (v5 == (void *)v8[0])
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v8);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v8);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
}

uint64_t mlir::anec::MatMul::addOpToNetwork(mlir::anec::MatMul *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::MatMul::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

BOOL mlir::anec::MatMul::getExecutionCost(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *OperandRange;
  _QWORD v33[2];
  _QWORD v34[2];

  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_QWORD *)(v4 + 56);
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v34[0] = v6;
  v34[1] = v16;
  v17 = (uint64_t *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v17)
    goto LABEL_20;
  v18 = *v17;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *(unsigned int *)(v18 + 16);
  if (!(_DWORD)v20)
    goto LABEL_20;
  v21 = *(_QWORD **)(v18 + 8);
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_20:
    v27 = 0;
  v33[0] = v17;
  v33[1] = v27;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v34);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v33);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v34);
  v29 = v28;
  mlir::anec::getIndexFromDim(0, v28);
  mlir::anec::getIndexFromDim(1, v29);
  mlir::anec::getIndexFromDim(3, v29);
  mlir::anec::getIndexFromDim(4, v29);
  v30 = *a1;
  OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v34);
}

uint64_t mlir::anec::MatMul::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  llvm::APFloatBase *v18;
  void *v19;
  unint64_t v20;
  unsigned int IndexFromDim;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  std::ios_base *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  mlir::Operation *v35;
  void *v36;
  char v37;
  void **v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47[8];
  __int128 __p;
  __int128 v49;
  int v50;
  uint64_t v51[19];
  void *v52[2];
  _BYTE v53[64];
  char buffer[8];
  _QWORD v55[3];
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  ANECMatrixMultLayerDescInitialize();
  if (*((_DWORD *)*a1 + 9))
    v6 = (uint64_t)*a1 - 16;
  else
    v6 = 0;
  v7 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
    goto LABEL_13;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_13;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_13:
    v17 = 0;
  v42[0] = v7;
  v42[1] = v17;
  mlir::anec::MatMul::getBias(a1, (uint64_t)buffer);
  v43 = v56;
  if (v56)
  {
    v19 = (void *)v55[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v18) == v19)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v55);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v55);
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v20);
  if (!v22)
    std::__throw_bad_optional_access[abi:nn180100]();
  v44 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42) + 8 * IndexFromDim);
  v52[0] = v53;
  v52[1] = (void *)0x100000000;
  *(_QWORD *)buffer = 1;
  v45[0] = 0;
  ANECUnitValidatorCreate();
  v40 = 0;
  v41 = 0;
  if (ANECValidateMatrixMultLayer())
  {
    v35 = *a1;
    v23 = MEMORY[0x1E0DE4FD0];
    v24 = MEMORY[0x1E0DE4FD0] + 104;
    v51[0] = MEMORY[0x1E0DE4FD0] + 104;
    v25 = MEMORY[0x1E0DE4FD0] + 64;
    v26 = (_QWORD *)MEMORY[0x1E0DE4F50];
    v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
    v28 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
    v46 = MEMORY[0x1E0DE4FD0] + 64;
    v45[0] = v27;
    *(_QWORD *)((char *)v45 + *(_QWORD *)(v27 - 24)) = v28;
    v45[1] = 0;
    v29 = (std::ios_base *)((char *)v45 + *(_QWORD *)(v45[0] - 24));
    std::ios_base::init(v29, v47);
    v29[1].__vftable = 0;
    v29[1].__fmtflags_ = -1;
    v30 = v26[5];
    v46 = v26[4];
    *(uint64_t *)((char *)&v47[-1] + *(_QWORD *)(v46 - 24)) = v30;
    v45[0] = v26[1];
    *(_QWORD *)((char *)v45 + *(_QWORD *)(v45[0] - 24)) = v26[6];
    v51[0] = v24;
    v45[0] = v23 + 24;
    v46 = v25;
    std::streambuf::basic_streambuf();
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    v47[0] = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v49 = 0u;
    v50 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v45[0] = *v26;
    v32 = v26[9];
    *(_QWORD *)((char *)v45 + *(_QWORD *)(v45[0] - 24)) = v26[8];
    v46 = v32;
    v47[0] = v31;
    if (SBYTE7(v49) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v51);
    v39 = 260;
    v38 = &v36;
    v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v55);
    if (v37 < 0)
      operator delete(v36);
  }
  else
  {
    v33 = 1;
  }
  ANECUnitValidatorDelete();
  if (v52[0] != v53)
    free(v52[0]);
  return v33;
}

uint64_t mlir::anec::Flatten::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v38;
  unint64_t IndexFromDim;
  char v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  void *v50;
  mlir::AffineMap *v51;
  uint64_t OperandRange;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD v57[2];
  void *v58;
  unsigned int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[40];
  uint64_t v64;
  char v65[8];
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v64 = a6;
  v65[0] = 0;
  v66 = 0;
  v67 = a7;
  v68 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v64);
    if (v66)
      v66 = 0;
    mlir::OperationName::OperationName(v65, "anec.flatten", 12, Context);
    v66 = 1;
  }
  v69 = a4;
  v70 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::FlattenAdaptor::verify(&v64, v18))
    return 0;
  v19 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v20 = v19;
  if (!v19)
    goto LABEL_18;
  v21 = *v19;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_18;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_18:
    v30 = 0;
  v57[0] = v20;
  v57[1] = v30;
  ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
  v32 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
  v34 = (_BYTE *)(v32 + 8 * v33);
  v61 = v63;
  v62 = 0x500000000;
  v35 = v34 - ArgAttrsAttr;
  if ((unint64_t)(v34 - ArgAttrsAttr) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v35 >> 3, 8);
    v36 = v62;
    if (v34 == ArgAttrsAttr)
      goto LABEL_25;
    goto LABEL_24;
  }
  v36 = 0;
  if (v34 != ArgAttrsAttr)
  {
LABEL_24:
    memcpy((char *)v61 + 8 * v36, ArgAttrsAttr, v34 - ArgAttrsAttr);
    v36 = v62;
  }
LABEL_25:
  LODWORD(v62) = v36 + ((unint64_t)v35 >> 3);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v38);
  if (!v40)
  {
    v55 = (uint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
    return mlir::anec::FlattenAdaptor::verify(v55, v56);
  }
  v41 = IndexFromDim;
  mlir::anec::getAllDims((uint64_t)&v58);
  v42 = (unsigned int *)v58;
  if (!v59)
    goto LABEL_35;
  v43 = 4 * v59;
  v44 = 8 * v41;
  do
  {
    v46 = *v42;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
    v48 = mlir::anec::getIndexFromDim(v46, v47);
    if (v46 == 2)
    {
      if (!v49)
        goto LABEL_30;
LABEL_29:
      v45 = v61;
      *(_QWORD *)((char *)v61 + v44) *= *((_QWORD *)v61 + v48);
      v45[v48] = 1;
      goto LABEL_30;
    }
    if (v46 >= 2)
      goto LABEL_29;
LABEL_30:
    ++v42;
    v43 -= 4;
  }
  while (v43);
  v42 = (unsigned int *)v58;
LABEL_35:
  if (v42 != (unsigned int *)&v60)
    free(v42);
  v50 = v61;
  v51 = (mlir::AffineMap *)v62;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
  v53 = mlir::MemRefType::get(v50, v51, OperandRange, 0, 0, 0);
  v54 = *(unsigned int *)(a11 + 8);
  if (v54 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v54 + 1, 8);
    LODWORD(v54) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v54) = v53;
  ++*(_DWORD *)(a11 + 8);
  if (v61 != v63)
    free(v61);
  return 1;
}

uint64_t mlir::anec::FlattenAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Value;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11))
    {
      v5 = "'anec.flatten' op requires attribute 'flatten_mode'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (!v8)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = *((_QWORD *)i + 1);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64))
    {
      v13 = v8;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) == 1)
        return 1;
      v12 = v8;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12) == 2)
        return 1;
    }
  }
  v5 = "'anec.flatten' op attribute 'flatten_mode' failed to satisfy constraint: valid FlattenMode";
LABEL_6:
  v9[0] = v5;
  v10 = 259;
  mlir::emitError(a2, (uint64_t)v9, (uint64_t)&Value);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v6;
}

uint64_t mlir::anec::Flatten::getFlattenMode(mlir::Operation **this)
{
  uint64_t MultipliersAttr;

  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(this);
  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&MultipliersAttr);
}

uint64_t mlir::anec::Flatten::addOpToNetwork(uint64_t *a1, uint64_t a2)
{
  char *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::string *v8;
  _QWORD *v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  uint64_t MultipliersAttr;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13748;
  *((_DWORD *)v4 + 20) = 0;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr((mlir::Operation **)a1);
  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&MultipliersAttr) == 1)
    v5 = 1;
  else
    v5 = 2;
  *((_DWORD *)v4 + 20) = v5;
  v6 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v8 = (std::string *)&v6[1].__shared_owners_;
  if (v4[31] < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)v4 + 1), *((_QWORD *)v4 + 2));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)(v4 + 8);
    v6[2].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v4 + 3);
  }
  LODWORD(v6[2].__shared_owners_) = 17;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v6[2].__shared_weak_owners_ = (uint64_t)v4;
  LOBYTE(v6[3].__vftable) = 0;
  v6[3].__shared_owners_ = 0;
  v6[3].__shared_weak_owners_ = (uint64_t)&v6[4].__shared_owners_;
  v6[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v6[5].__shared_weak_owners_ = (uint64_t)&v6[6].__shared_owners_;
  v6[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v15 = v6 + 1;
  *((_QWORD *)&v15 + 1) = v6;
  v9 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v9 >= *(_QWORD *)(a2 + 240))
  {
    v11 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v15);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    *(_QWORD *)(a2 + 232) = v11;
    if (!v6)
      return 1;
  }
  else
  {
    *v9 = v6 + 1;
    v9[1] = v6;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v9 + 2;
  }
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return 1;
}

uint64_t mlir::anec::Flatten::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t Int;
  uint64_t *v7;
  uint64_t *v8;
  _OWORD *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  _OWORD *v14;
  void *v15;
  uint64_t *v16;
  int v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t **v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  mlir::Operation *v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  const void **v33;
  std::ios_base *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  _QWORD *v41;
  const char *v42;
  uint64_t v43;
  uint64_t *v45;
  void *v46[2];
  char v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  void **v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  __int128 __p;
  __int128 v57;
  int v58;
  uint64_t v59[19];
  void *v60[2];
  _BYTE v61[64];
  char buffer[16];
  __int128 v63[31];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  ANECFlattenLayerDescInitialize();
  *(_QWORD *)buffer = mlir::anec::Tile::getMultipliersAttr(a1);
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)buffer);
  *(_OWORD *)buffer = xmmword_1E0E538B8;
  v63[0] = unk_1E0E538C8;
  v52 = 0;
  v53 = 0;
  v51 = (void **)&v52;
  v7 = std::__tree<std::__value_type<ZinIrDimension,__CFString const*>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,__CFString const*>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,__CFString const*>>>::__find_equal<ZinIrDimension>(&v51, (uint64_t *)&v52, (uint64_t **)v60, (uint64_t **)v46, (int *)buffer);
  if (!*v7)
  {
    v8 = v7;
    v9 = operator new(0x30uLL);
    v9[2] = *(_OWORD *)buffer;
    v10 = v60[0];
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v10;
    *v8 = (uint64_t)v9;
    if (*v51)
    {
      v51 = (void **)*v51;
      v11 = (uint64_t *)*v8;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v52, v11);
    ++v53;
  }
  v12 = std::__tree<std::__value_type<ZinIrDimension,__CFString const*>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,__CFString const*>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,__CFString const*>>>::__find_equal<ZinIrDimension>(&v51, (uint64_t *)&v52, (uint64_t **)v60, (uint64_t **)v46, (int *)v63);
  if (!*v12)
  {
    v13 = v12;
    v14 = operator new(0x30uLL);
    v14[2] = v63[0];
    v15 = v60[0];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v15;
    *v13 = (uint64_t)v14;
    if (*v51)
    {
      v51 = (void **)*v51;
      v16 = (uint64_t *)*v13;
    }
    else
    {
      v16 = (uint64_t *)v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v52, v16);
    ++v53;
  }
  if (Int == 1)
    v17 = 1;
  else
    v17 = 2;
  if (!v52)
    goto LABEL_24;
  v18 = &v52;
  v19 = v52;
  do
  {
    v20 = v19;
    v21 = v18;
    v22 = *((_DWORD *)v19 + 8);
    if (v22 >= v17)
      v18 = (uint64_t **)v19;
    else
      ++v19;
    v19 = (uint64_t *)*v19;
  }
  while (v19);
  if (v18 == &v52)
    goto LABEL_24;
  if (v22 < v17)
    v20 = (uint64_t *)v21;
  if (v17 < *((_DWORD *)v20 + 8))
LABEL_24:
    v18 = &v52;
  v23 = v18[5];
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v51, v52);
  v50 = v23;
  v60[0] = v61;
  v60[1] = (void *)0x100000000;
  v24 = 1;
  *(_QWORD *)buffer = 1;
  v51 = 0;
  ANECUnitValidatorCreate();
  v48 = 0;
  v49 = 0;
  if (ANECValidateFlattenLayer())
  {
    v25 = *a1;
    v26 = v48;
    v27 = v49;
    v45 = (uint64_t *)v25;
    v28 = MEMORY[0x1E0DE4FD0];
    v29 = MEMORY[0x1E0DE4FD0] + 104;
    v59[0] = MEMORY[0x1E0DE4FD0] + 104;
    v30 = MEMORY[0x1E0DE4FD0] + 64;
    v31 = MEMORY[0x1E0DE4F50];
    v32 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v33 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v53 = MEMORY[0x1E0DE4FD0] + 64;
    v51 = (void **)v32;
    *(void ***)((char *)&v51 + (_QWORD)*(v32 - 3)) = (void **)v33;
    v52 = 0;
    v34 = (std::ios_base *)((char *)&v51 + (_QWORD)*(v51 - 3));
    std::ios_base::init(v34, &v54);
    v34[1].__vftable = 0;
    v34[1].__fmtflags_ = -1;
    v35 = *(_QWORD *)(v31 + 40);
    v53 = *(_QWORD *)(v31 + 32);
    *(uint64_t *)((char *)&v53 + *(_QWORD *)(v53 - 24)) = v35;
    v51 = *(void ***)(v31 + 8);
    *(void ***)((char *)&v51 + (_QWORD)*(v51 - 3)) = *(void ***)(v31 + 48);
    v59[0] = v29;
    v51 = (void **)(v28 + 24);
    v53 = v30;
    std::streambuf::basic_streambuf();
    v36 = MEMORY[0x1E0DE4FB8] + 16;
    v54 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v57 = 0u;
    v58 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Invalid configuration", 21);
    if (v26)
    {
      if (v27)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)" for the following reasons: ", 28);
        v37 = *v27;
        if (*v27)
        {
          v38 = 0;
          do
          {
            v39 = v37 - 1;
            CFStringGetCString((CFStringRef)v27[v38 + 1], buffer, 512, 0x8000100u);
            v40 = strlen(buffer);
            v41 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)buffer, v40);
            if (v38 == v39)
              v42 = "";
            else
              v42 = ", ";
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, 2 * (v38++ != v39));
            v37 = *v27;
          }
          while (*v27 > v38);
        }
      }
    }
    std::stringbuf::str();
    v51 = *(void ***)v31;
    v43 = *(_QWORD *)(v31 + 72);
    *(void ***)((char *)&v51 + (_QWORD)*(v51 - 3)) = *(void ***)(v31 + 64);
    v53 = v43;
    v54 = v36;
    if (SBYTE7(v57) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v59);
    v55 = 260;
    v51 = v46;
    v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&buffer[8]);
    if (v47 < 0)
      operator delete(v46[0]);
  }
  ANECUnitValidatorDelete();
  if (v60[0] != v61)
    free(v60[0]);
  return v24;
}

uint64_t mlir::anec::Unflatten::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  mlir::CallGraphNode *Value;
  uint64_t v32;
  mlir::CallGraphNode *v33;
  char v34;
  uint64_t v35;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *ArgAttrsAttr;
  uint64_t v49;
  void *v50;
  mlir::AffineMap *v51;
  uint64_t OperandRange;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  unint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[40];
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v60 = a6;
  LOBYTE(v61) = 0;
  v62 = 0;
  v63 = a7;
  v64 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62)
      v62 = 0;
    mlir::OperationName::OperationName(&v61, "anec.unflatten", 14, Context);
    v62 = 1;
  }
  v65 = a4;
  v66 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::UnflattenAdaptor::verify(&v60, v18))
    return 0;
  v19 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v20 = v19;
  if (!v19)
    goto LABEL_18;
  v21 = *v19;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_18;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_18:
    v30 = 0;
  v55[0] = v20;
  v55[1] = v30;
  v57 = v59;
  v58 = 0x500000000;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v60);
  v32 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v60);
  v33 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v32 - 16), **(_QWORD **)(v61 + 96));
  if ((v34 & 1) != 0)
    v35 = *((_QWORD *)v33 + 1);
  else
    v35 = 0;
  mlir::getValues<long long>(v35, (uint64_t)&v57);
  v37 = v57;
  if ((_DWORD)v58)
  {
    v38 = (v58 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v38)
    {
      v39 = v38 + 1;
      v40 = (v38 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v41 = (uint64_t *)((char *)v57 + 8 * v40);
      v42 = (char *)v57 + 8;
      v43 = 1;
      v44 = v40;
      v45 = 1;
      do
      {
        v43 *= *(v42 - 1);
        v45 *= *v42;
        v42 += 2;
        v44 -= 2;
      }
      while (v44);
      v46 = v45 * v43;
      if (v39 == v40)
        goto LABEL_32;
    }
    else
    {
      v46 = 1;
      v41 = (uint64_t *)v57;
    }
    do
    {
      v47 = *v41++;
      v46 *= v47;
    }
    while (v41 != (uint64_t *)((char *)v57 + 8 * v58));
  }
  else
  {
    v46 = 1;
  }
LABEL_32:
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55);
  v56 = mlir::ShapedType::getNumElements(ArgAttrsAttr, v49) / v46;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v57, (uint64_t)v37, (uint64_t *)&v56);
  v50 = v57;
  v51 = (mlir::AffineMap *)v58;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55);
  v53 = mlir::MemRefType::get(v50, v51, OperandRange, 0, 0, 0);
  v54 = *(unsigned int *)(a11 + 8);
  if (v54 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v54 + 1, 8);
    LODWORD(v54) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v54) = v53;
  ++*(_DWORD *)(a11 + 8);
  if (v57 != v59)
    free(v57);
  return 1;
}

uint64_t mlir::anec::UnflattenAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *Type;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *ArgAttrsAttr;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[2];
  uint64_t OperandRange;
  _QWORD v38[4];
  __int16 v39;
  uint64_t v40;
  uint64_t Value;
  uint64_t v42[23];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v40 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
    {
      v5 = "'anec.unflatten' op requires attribute 'destination_size'";
      goto LABEL_11;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v6 = (_QWORD *)*((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
    {
      v5 = "'anec.unflatten' op requires attribute 'flatten_mode'";
      goto LABEL_11;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v9 = *((_QWORD *)i + 1);
  if (!v9
    || *(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && (v38[0] = *((_QWORD *)i + 1),
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v38),
        mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64))
    && ((v36[0] = v9, mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v36) == 1)
     || (v43[0] = v9, mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v43) == 2)))
  {
    if (!v6)
      return 1;
    if (mlir::DenseIntElementsAttr::classof((uint64_t)v6))
    {
      v10 = *v6;
      v11 = mlir::TypeID::get<mlir::ElementsAttr>();
      v12 = *(unsigned int *)(v10 + 16);
      if (!(_DWORD)v12)
        goto LABEL_30;
      v13 = *(_QWORD **)(v10 + 8);
      v14 = &v13[2 * v12];
      do
      {
        v15 = v12 >> 1;
        v16 = &v13[2 * (v12 >> 1)];
        v18 = *v16;
        v17 = v16 + 2;
        v12 += ~(v12 >> 1);
        if (v18 < v11)
          v13 = v17;
        else
          v12 = v15;
      }
      while (v12);
      if (v13 != v14 && *v13 == v11)
        v19 = v13[1];
      else
LABEL_30:
        v19 = 0;
      v38[0] = v6;
      v38[1] = v19;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
      v21 = Type;
      if (!Type)
        goto LABEL_40;
      v22 = *Type;
      v23 = mlir::TypeID::get<mlir::ShapedType>();
      v24 = *(unsigned int *)(v22 + 16);
      if (!(_DWORD)v24)
        goto LABEL_40;
      v25 = *(_QWORD **)(v22 + 8);
      v26 = &v25[2 * v24];
      do
      {
        v27 = v24 >> 1;
        v28 = &v25[2 * (v24 >> 1)];
        v30 = *v28;
        v29 = v28 + 2;
        v24 += ~(v24 >> 1);
        if (v30 < v23)
          v25 = v29;
        else
          v24 = v27;
      }
      while (v24);
      if (v25 != v26 && *v25 == v23)
        v31 = v25[1];
      else
LABEL_40:
        v31 = 0;
      Value = (uint64_t)v21;
      v42[0] = v31;
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
      v43[0] = 3;
      if (v33 == 1 && *ArgAttrsAttr == v43[0])
      {
        v35 = v6;
        v36[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
        v36[1] = v34;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
          return 1;
      }
    }
    v5 = "'anec.unflatten' op attribute 'destination_size' failed to satisfy constraint: ui64 elements attribute of shape {3}";
  }
  else
  {
    v5 = "'anec.unflatten' op attribute 'flatten_mode' failed to satisfy constraint: valid FlattenMode";
  }
LABEL_11:
  v38[0] = v5;
  v39 = 259;
  mlir::emitError(a2, (uint64_t)v38, (uint64_t)&Value);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v7;
}

uint64_t mlir::anec::Unflatten::verifyAttributesWithFamily(uint64_t **a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const void ***v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int IndexFromDim;
  char v44;
  uint64_t DefiningOp;
  uint64_t v47;
  mlir::anec::Unflatten *v48;
  _QWORD v49[4];
  _QWORD v50[2];
  _QWORD *v51;
  _QWORD v52[4];
  __int16 v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  _QWORD v57[24];

  v57[23] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((*a1)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  if (*((_DWORD *)*a1 + 9))
    v15 = (uint64_t)(*a1 - 2);
  else
    v15 = 0;
  v16 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_23;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_23;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_23:
    v26 = 0;
  if (!mlir::anec::verifyCompatibilityWithUnflatten((uint64_t)v4, v14, (uint64_t)v16, v26))
  {
    v28 = "failed: input/output shapes are incompatible with unflatten op, (NxCx1x1) -> (NxCxHxW)";
    goto LABEL_28;
  }
  if (a2 > 1)
    return 1;
  if (*((_DWORD *)*a1 + 9))
    v30 = (uint64_t)(*a1 - 2);
  else
    v30 = 0;
  v31 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v30, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v31)
    goto LABEL_41;
  v32 = *v31;
  v33 = mlir::TypeID::get<mlir::ShapedType>();
  v34 = *(unsigned int *)(v32 + 16);
  if (!(_DWORD)v34)
    goto LABEL_41;
  v35 = *(_QWORD **)(v32 + 8);
  v36 = &v35[2 * v34];
  do
  {
    v37 = v34 >> 1;
    v38 = &v35[2 * (v34 >> 1)];
    v40 = *v38;
    v39 = v38 + 2;
    v34 += ~(v34 >> 1);
    if (v40 < v33)
      v35 = v39;
    else
      v34 = v37;
  }
  while (v34);
  if (v35 != v36 && *v35 == v33)
    v41 = v35[1];
  else
LABEL_41:
    v41 = 0;
  v55[0] = v31;
  v55[1] = v41;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55);
  IndexFromDim = mlir::anec::getIndexFromDim(4, v42);
  if (v44)
  {
    v54 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55) + 8 * IndexFromDim);
    if ((unint64_t)(v54 - 65) <= 0xFFFFFFFFFFFFFFC0)
    {
      v49[0] = "output width dimension size = {0} failed to satisfy constraint: 2 <= size <= 64";
      v49[1] = 79;
      v49[2] = &v51;
      v49[3] = 1;
      v50[0] = &off_1E0E23E00;
      v50[1] = &v54;
      v51 = v50;
      v52[0] = v49;
      v53 = 263;
      v29 = (const void ***)v52;
      goto LABEL_45;
    }
    v56 = *(_QWORD *)((*a1)[9] + 24);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v56);
    if (DefiningOp
      && *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id)
    {
      return 1;
    }
    v56 = *(_QWORD *)((*a1)[9] + 24);
    v47 = mlir::Value::getDefiningOp((mlir::Value *)&v56);
    if (v47)
    {
      if ((mlir::detail::RecursivePatternTraitMatcher<mlir::OpTrait::anec::NeuronOpTrait,mlir::detail::RecursivePatternMatcher<mlir::anec::GOC,mlir::detail::op_matcher<mlir::anec::Convolution>,mlir::detail::AnyValueMatcher,mlir::detail::AnyValueMatcher>>::match((uint64_t)v52, v47) & 1) != 0)return 1;
    }
    v28 = "must be preceded by a convolution or a sequence of convolution, goc, and neuron activation for A12/A13 class ANEs";
LABEL_28:
    v49[0] = v28;
    LOWORD(v50[0]) = 259;
    v29 = (const void ***)v49;
LABEL_45:
    mlir::OpState::emitOpError(a1, v29, (uint64_t)&v56);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v56);
    if (v56)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v56);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v57);
    return v27;
  }
  v48 = (mlir::anec::Unflatten *)std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::anec::Unflatten::getZinIrUnitInfo(v48);
}

void mlir::anec::Unflatten::getZinIrUnitInfo(mlir::Operation **this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t MaxValueAttr;
  _QWORD *v7;
  mlir::Operation *v8;
  void *v9[2];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)v4 = off_1E0E138A8;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 9) = -1;
  v8 = *this;
  v9[0] = (void *)mlir::anec::ClampedRelu::getMinValueAttr(&v8);
  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v9) == 1)
    v5 = 1;
  else
    v5 = 2;
  *((_DWORD *)v4 + 20) = v5;
  v9[0] = v10;
  v9[1] = (void *)0x300000000;
  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr(this);
  mlir::getValues<long long>(MaxValueAttr, (uint64_t)v9);
  v7 = v9[0];
  *((_DWORD *)v4 + 23) = *(_QWORD *)v9[0];
  *((_DWORD *)v4 + 22) = v7[1];
  *((_DWORD *)v4 + 21) = v7[2];
  *a2 = v4;
  if (v7 != v10)
    free(v7);
}

uint64_t mlir::anec::Unflatten::getFlattenMode(mlir::Operation **this)
{
  uint64_t MinValueAttr;

  MinValueAttr = mlir::anec::ClampedRelu::getMinValueAttr(this);
  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&MinValueAttr);
}

uint64_t mlir::anec::Unflatten::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Unflatten::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::Reshape::getZinIrUnitInfo@<X0>(mlir::anec::Reshape *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int64x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int IndexFromDim;
  unint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t result;
  _QWORD v32[2];

  v4 = (char *)operator new(0x90uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)v4 = off_1E0E13768;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 72) = xmmword_181233140;
  v5 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v4 + 88) = v5;
  *(int64x2_t *)(v4 + 104) = v5;
  v6 = operator new(0x14uLL);
  *((_QWORD *)v4 + 16) = v6 + 5;
  *((_QWORD *)v4 + 17) = v6 + 5;
  v6[4] = 4;
  *(_OWORD *)v6 = xmmword_181232FEC;
  *((_QWORD *)v4 + 15) = v6;
  *((_DWORD *)v4 + 8) = 22;
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v7 = *(_QWORD *)this - 16;
  else
    v7 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_13;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_13;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_13:
    v18 = 0;
  v32[0] = v8;
  v32[1] = v18;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
  IndexFromDim = mlir::anec::getIndexFromDim(0, v19);
  *((_QWORD *)v4 + 10) = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32)
                                   + 8 * IndexFromDim);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
  v22 = mlir::anec::getIndexFromDim(2, v21);
  if (v23)
    v24 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32) + 8 * v22);
  else
    v24 = 1;
  *((_QWORD *)v4 + 14) = v24;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
  v26 = mlir::anec::getIndexFromDim(1, v25);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32)
                                   + 8 * v26);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
  v28 = mlir::anec::getIndexFromDim(3, v27);
  *((_QWORD *)v4 + 12) = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32)
                                   + 8 * v28);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
  v30 = mlir::anec::getIndexFromDim(4, v29);
  result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
  *((_QWORD *)v4 + 13) = *(_QWORD *)(result + 8 * v30);
  *a2 = v4;
  return result;
}

uint64_t mlir::anec::Reshape::addOpToNetwork(mlir::anec::Reshape *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Reshape::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::Reshape::verifyWithANEC(uint64_t *a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t v6;
  mlir::anec *v7;
  unint64_t v8;
  uint64_t DimFromIndex;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int IndexFromDim;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void **v48;
  const void **v49;
  std::ios_base *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v55;
  void *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void **v67[2];
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  __int128 __p;
  __int128 v72;
  int v73;
  uint64_t v74[19];
  void *v75[2];
  _BYTE v76[64];
  char buffer[8];
  _QWORD v78[66];

  v78[63] = *MEMORY[0x1E0C80C00];
  ANECReshapeLayerDescInitialize();
  v61 = *(_OWORD *)a2;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
  if (v6 < 1)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 36))
      v13 = *a1 - 16;
    else
      v13 = 0;
    v14 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v14)
      goto LABEL_18;
    v15 = *v14;
    v16 = mlir::TypeID::get<mlir::ShapedType>();
    v17 = *(unsigned int *)(v15 + 16);
    if (!(_DWORD)v17)
      goto LABEL_18;
    v18 = *(_QWORD **)(v15 + 8);
    v19 = &v18[2 * v17];
    do
    {
      v20 = v17 >> 1;
      v21 = &v18[2 * (v17 >> 1)];
      v23 = *v21;
      v22 = v21 + 2;
      v17 += ~(v17 >> 1);
      if (v23 < v16)
        v18 = v22;
      else
        v17 = v20;
    }
    while (v17);
    if (v18 != v19 && *v18 == v16)
      v24 = v18[1];
    else
LABEL_18:
      v24 = 0;
    v60[0] = v14;
    v60[1] = v24;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    v26 = v25;
    IndexFromDim = mlir::anec::getIndexFromDim(2, v25);
    if (v28)
      v29 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60) + 8 * IndexFromDim);
    else
      v29 = 1;
    v32 = mlir::anec::getIndexFromDim(0, v26);
    if (!v33
      || (v34 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60) + 8 * v32),
          v35 = mlir::anec::getIndexFromDim(1, v26),
          !v36)
      || (v37 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60) + 8 * v35),
          v38 = mlir::anec::getIndexFromDim(3, v26),
          !v39)
      || (v40 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60) + 8 * v38),
          v41 = mlir::anec::getIndexFromDim(4, v26),
          !v42))
    {
LABEL_40:
      std::__throw_bad_optional_access[abi:nn180100]();
    }
    v43 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60) + 8 * v41);
    v62 = v34;
    v63 = v37;
    v64 = v40;
    v65 = v43;
    v66 = v29;
    v75[0] = v76;
    v75[1] = (void *)0x100000000;
    v31 = 1;
    *(_QWORD *)buffer = 1;
    v67[0] = 0;
    ANECUnitValidatorCreate();
    v58 = 0;
    v59 = 0;
    if (ANECValidateReshapeLayer())
    {
      v55 = (uint64_t *)*a1;
      v44 = MEMORY[0x1E0DE4FD0];
      v45 = MEMORY[0x1E0DE4FD0] + 104;
      v74[0] = MEMORY[0x1E0DE4FD0] + 104;
      v46 = MEMORY[0x1E0DE4FD0] + 64;
      v47 = MEMORY[0x1E0DE4F50];
      v48 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
      v49 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
      v68 = MEMORY[0x1E0DE4FD0] + 64;
      v67[0] = v48;
      *(const void ***)((char *)v67 + (_QWORD)*(v48 - 3)) = v49;
      v67[1] = 0;
      v50 = (std::ios_base *)((char *)v67 + (unint64_t)*(v67[0] - 3));
      std::ios_base::init(v50, &v69);
      v50[1].__vftable = 0;
      v50[1].__fmtflags_ = -1;
      v51 = *(_QWORD *)(v47 + 40);
      v68 = *(_QWORD *)(v47 + 32);
      *(uint64_t *)((char *)&v68 + *(_QWORD *)(v68 - 24)) = v51;
      v67[0] = *(const void ***)(v47 + 8);
      *(const void ***)((char *)v67 + (unint64_t)*(v67[0] - 3)) = *(const void ***)(v47 + 48);
      v74[0] = v45;
      v67[0] = (const void **)(v44 + 24);
      v68 = v46;
      std::streambuf::basic_streambuf();
      v52 = MEMORY[0x1E0DE4FB8] + 16;
      v69 = MEMORY[0x1E0DE4FB8] + 16;
      __p = 0u;
      v72 = 0u;
      v73 = 24;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Invalid configuration", 21);
      std::stringbuf::str();
      v67[0] = *(const void ***)v47;
      v53 = *(_QWORD *)(v47 + 72);
      *(const void ***)((char *)v67 + (unint64_t)*(v67[0] - 3)) = *(const void ***)(v47 + 64);
      v68 = v53;
      v69 = v52;
      if (SBYTE7(v72) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x186DA15C0](v74);
      v70 = 260;
      v67[0] = (const void **)&v56;
      v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
      if (*(_QWORD *)buffer)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v78);
      if (v57 < 0)
        operator delete(v56);
    }
    ANECUnitValidatorDelete();
    if (v75[0] != v76)
      free(v75[0]);
  }
  else
  {
    v7 = 0;
    while (1)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
      DimFromIndex = mlir::anec::getDimFromIndex(v7, v8);
      if ((DimFromIndex & 0xFF00000000) == 0)
        goto LABEL_40;
      v10 = DimFromIndex;
      v11 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61)
                      + 8 * v7);
      if (v11 > mlir::anec::getMaximumDimSize(v10))
        break;
      v7 = (mlir::anec *)((char *)v7 + 1);
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
      if ((uint64_t)v7 >= v12)
        goto LABEL_6;
    }
    v30 = (uint64_t *)*a1;
    v67[0] = (const void **)"failed: input tensor dimensions are not supported on ANEs.";
    v70 = 259;
    v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v78);
  }
  return v31;
}

uint64_t *mlir::anec::Reshape::fold(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *ArgAttrsAttr;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;
  uint64_t v22;
  uint64_t *Type;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];
  uint64_t *v40;
  uint64_t v41;
  _QWORD v42[2];
  __int128 v43;
  char v44;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  if (v4 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4);
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v6 = *(_QWORD *)a1 - 16;
  else
    v6 = 0;
  v7 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
    goto LABEL_17;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_17;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_17:
    v17 = 0;
  v42[0] = v7;
  v42[1] = v17;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v42))
    return 0;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
  if (v19)
  {
    v20 = 8 * v19;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v20 -= 8;
      if (!v20)
        goto LABEL_23;
    }
    return 0;
  }
LABEL_23:
  result = **(uint64_t ***)(a2 + 40);
  if (result)
  {
    result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(result);
    v40 = result;
    v41 = v22;
    if (result)
    {
      Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v40);
      v24 = (uint64_t)Type;
      if (!Type)
        goto LABEL_38;
      v25 = *Type;
      v26 = mlir::TypeID::get<mlir::ShapedType>();
      v27 = *(unsigned int *)(v25 + 16);
      if (!(_DWORD)v27)
        goto LABEL_38;
      v28 = *(_QWORD **)(v25 + 8);
      v29 = &v28[2 * v27];
      do
      {
        v30 = v27 >> 1;
        v31 = &v28[2 * (v27 >> 1)];
        v33 = *v31;
        v32 = v31 + 2;
        v27 += ~(v27 >> 1);
        if (v33 < v26)
          v28 = v32;
        else
          v27 = v30;
      }
      while (v27);
      if (v28 != v29 && *v28 == v26)
        v34 = v28[1];
      else
LABEL_38:
        v34 = 0;
      v39[0] = v24;
      v39[1] = v34;
      *(_QWORD *)&v43 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
      *((_QWORD *)&v43 + 1) = v35;
      v44 = 1;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39);
      v37 = mlir::ShapedType::cloneWith(v39, &v43, OperandRange);
      return (uint64_t *)((unint64_t)mlir::reshapeElementsAttr((uint64_t)v40, v41, v37, v38) & 0xFFFFFFFFFFFFFFFBLL);
    }
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  return result;
}

uint64_t mlir::anec::Reshape::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t DefiningOp;
  uint64_t v17;
  uint64_t v19[2];
  uint64_t v20;
  unint64_t v21[2];
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  if (*(_DWORD *)(a1 + 36))
    v4 = a1 - 16;
  else
    v4 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_15;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_15;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_15:
    v15 = 0;
  v19[0] = (uint64_t)v5;
  v19[1] = v15;
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::anec::Reshape,void>::id)
  {
    return 0;
  }
  v22[0] = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  v20 = *(_QWORD *)(*(_QWORD *)(mlir::Value::getDefiningOp((mlir::Value *)v22) + 72) + 24);
  v22[0] = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::ShapedType &,mlir::Value &>((mlir::OpBuilder *)(a2 + 8), *(_QWORD *)(a1 + 24), v19, &v20)- 16;
  v17 = 1;
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, 1uLL);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 24))(a2, a1, v21[0], v21[1]);
  return v17;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Reshape,mlir::ShapedType &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.reshape", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.reshape";
    v19[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Reshape,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

uint64_t mlir::anec::Concat::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t Axis;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *ArgAttrsAttr;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  mlir::AffineMap *v68;
  uint64_t OperandRange;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t i;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  _QWORD **v89;
  uint64_t v90;
  _QWORD v91[2];
  _QWORD *v92;
  unint64_t v93;
  _QWORD v94[2];
  const char **v95;
  __int16 v96;
  uint64_t v97;
  char v98[8];
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  _QWORD v106[23];

  v106[22] = *MEMORY[0x1E0C80C00];
  v97 = a6;
  v98[0] = 0;
  v99 = 0;
  v100 = a7;
  v101 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v97);
    if (v99)
      v99 = 0;
    mlir::OperationName::OperationName(v98, "anec.concat", 11, Context);
    v99 = 1;
  }
  v102 = a4;
  v103 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  v18 = a3;
  if (a3)
    v19 = (uint64_t)a2;
  else
    v19 = v17;
  if (!mlir::anec::ConcatAdaptor::verify(&v97, v19))
  {
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v104);
      if (v104)
        mlir::Diagnostic::operator<<((uint64_t)&v105, "Failed to verify adaptor");
      goto LABEL_42;
    }
    return 0;
  }
  v20 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v21 = v20;
  if (!v20)
    goto LABEL_18;
  v22 = *v20;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_18;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_18:
    v31 = 0;
  v94[0] = v21;
  v94[1] = v31;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v94);
  Axis = (unint64_t)mlir::anec::detail::ConcatGenericAdaptorBase::getAxis((mlir::anec::detail::ConcatGenericAdaptorBase *)&v97);
  v93 = Axis;
  if ((Axis & 0x8000000000000000) == 0)
  {
    v33 = Axis;
    if (a10)
    {
      v34 = 0;
      while (1)
      {
        v35 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, v34);
        v36 = v35;
        if (!v35)
          goto LABEL_31;
        v37 = *v35;
        v38 = mlir::TypeID::get<mlir::ShapedType>();
        v39 = *(unsigned int *)(v37 + 16);
        if (!(_DWORD)v39)
          goto LABEL_31;
        v40 = *(_QWORD **)(v37 + 8);
        v41 = &v40[2 * v39];
        do
        {
          v42 = v39 >> 1;
          v43 = &v40[2 * (v39 >> 1)];
          v45 = *v43;
          v44 = v43 + 2;
          v39 += ~(v39 >> 1);
          if (v45 < v38)
            v40 = v44;
          else
            v39 = v42;
        }
        while (v39);
        if (v40 != v41 && *v40 == v38)
          v46 = v40[1];
        else
LABEL_31:
          v46 = 0;
        v104 = v36;
        v105 = v46;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v104);
        if (v33 >= v47)
          goto LABEL_39;
        if (++v34 == a10)
        {
          v73 = 0;
          for (i = 0; i != a10; ++i)
          {
            v75 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, i);
            v76 = v75;
            if (!v75)
              goto LABEL_77;
            v77 = *v75;
            v78 = mlir::TypeID::get<mlir::ShapedType>();
            v79 = *(unsigned int *)(v77 + 16);
            if (!(_DWORD)v79)
              goto LABEL_77;
            v80 = *(_QWORD **)(v77 + 8);
            v81 = &v80[2 * v79];
            do
            {
              v82 = v79 >> 1;
              v83 = &v80[2 * (v79 >> 1)];
              v85 = *v83;
              v84 = v83 + 2;
              v79 += ~(v79 >> 1);
              if (v85 < v78)
                v80 = v84;
              else
                v79 = v82;
            }
            while (v79);
            if (v80 != v81 && *v80 == v78)
              v86 = v80[1];
            else
LABEL_77:
              v86 = 0;
            v104 = v76;
            v105 = v86;
            v73 += *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v104)
                             + 8 * v33);
          }
          goto LABEL_47;
        }
      }
    }
    v73 = 0;
LABEL_47:
    v49 = (const char *)mlir::TypeRange::dereference_iterator(a9, 0);
    v50 = v49;
    if (!v49)
      goto LABEL_56;
    v51 = *(_QWORD *)v49;
    v52 = mlir::TypeID::get<mlir::ShapedType>();
    v53 = *(unsigned int *)(v51 + 16);
    if (!(_DWORD)v53)
      goto LABEL_56;
    v54 = *(_QWORD **)(v51 + 8);
    v55 = &v54[2 * v53];
    do
    {
      v56 = v53 >> 1;
      v57 = &v54[2 * (v53 >> 1)];
      v59 = *v57;
      v58 = v57 + 2;
      v53 += ~(v53 >> 1);
      if (v59 < v52)
        v54 = v58;
      else
        v53 = v56;
    }
    while (v53);
    if (v54 != v55 && *v54 == v52)
      v60 = v54[1];
    else
LABEL_56:
      v60 = 0;
    v87 = v50;
    v88 = v60;
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v87);
    v62 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v87);
    v64 = (_BYTE *)(v62 + 8 * v63);
    v104 = v106;
    v105 = 0x500000000;
    v65 = v64 - ArgAttrsAttr;
    if ((unint64_t)(v64 - ArgAttrsAttr) < 0x29)
    {
      v66 = 0;
      v67 = v106;
      if (v64 == ArgAttrsAttr)
      {
LABEL_62:
        v68 = (mlir::AffineMap *)(v66 + ((unint64_t)v65 >> 3));
        LODWORD(v105) = (_DWORD)v68;
        v67[v33] = v73;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
        v70 = mlir::MemRefType::get(v67, v68, OperandRange, 0, 0, 0);
        v71 = *(unsigned int *)(a11 + 8);
        if (v71 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v71 + 1, 8);
          LODWORD(v71) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v71) = v70;
        ++*(_DWORD *)(a11 + 8);
        if (v104 != v106)
          free(v104);
        return 1;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v106, v65 >> 3, 8);
      v66 = v105;
      v67 = v104;
      if (v64 == ArgAttrsAttr)
        goto LABEL_62;
    }
    memcpy(&v67[v66], ArgAttrsAttr, v64 - ArgAttrsAttr);
    v66 = v105;
    v67 = v104;
    goto LABEL_62;
  }
LABEL_39:
  v87 = "failed: Axis value {0} is out of bounds for input operands";
  v88 = 58;
  v89 = &v92;
  v90 = 1;
  v91[0] = &off_1E0E23E00;
  v91[1] = &v93;
  v92 = v91;
  if (!v18)
    return 0;
  mlir::emitError((uint64_t)a2, (uint64_t)&v104);
  if (v104)
  {
    v96 = 263;
    v95 = &v87;
    mlir::Diagnostic::operator<<((uint64_t)&v105, (const void ***)&v95);
  }
LABEL_42:
  v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v104);
  if (v104)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v104);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v105);
  return v48;
}

uint64_t mlir::anec::ConcatAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t Value;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v12))
    {
      v5 = "'anec.concat' op requires attribute 'axis'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v12))
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
        v9 = *((_QWORD *)i + 1);
      i = (mlir::CallGraphNode *)((char *)i + 16);
    }
    while (i != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v12));
  }
  if (!v8
    || *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && (v10[0] = v8,
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10),
        mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)))
  {
    if (!v9 || *(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 1;
    v5 = "'anec.concat' op attribute 'interleave' failed to satisfy constraint: unit attribute";
  }
  else
  {
    v5 = "'anec.concat' op attribute 'axis' failed to satisfy constraint: 64-bit unsigned integer attribute";
  }
LABEL_6:
  v10[0] = v5;
  v11 = 259;
  mlir::emitError(a2, (uint64_t)v10, (uint64_t)&Value);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  return v6;
}

void *mlir::anec::detail::ConcatGenericAdaptorBase::getAxis(mlir::anec::detail::ConcatGenericAdaptorBase *this)
{
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue(this);
  v3 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v3, **(_QWORD **)(*((_QWORD *)this + 1) + 96));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

uint64_t mlir::anec::Concat::getZinIrUnitInfo@<X0>(mlir::Operation **this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  mlir::anec *v16;
  unint64_t v17;
  uint64_t DimFromIndex;
  int v19;
  uint64_t result;
  _QWORD v21[2];
  mlir::Operation *v22;
  void *__p;
  unsigned int v24;
  uint64_t MultipliersAttr;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E136B8;
  *((_QWORD *)v4 + 1) = 0;
  *((_DWORD *)v4 + 20) = 2;
  v4[84] = 0;
  *((_DWORD *)v4 + 8) = 3;
  v22 = *this;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v21[0] = v5;
  v21[1] = v15;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v22);
  mlir::IntegerAttr::getValue(&MultipliersAttr, (llvm::APInt *)&__p);
  if (v24 > 0x40)
  {
    v16 = *(mlir::anec **)__p;
    operator delete[](__p);
  }
  else
  {
    v16 = (mlir::anec *)__p;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v21);
  DimFromIndex = mlir::anec::getDimFromIndex(v16, v17);
  if ((DimFromIndex & 0xFF00000000) != 0)
    v19 = dword_1812330C0[(int)DimFromIndex];
  else
    v19 = 5;
  *((_DWORD *)v4 + 20) = v19;
  result = mlir::anec::Concat::getInterleaveAttr(&v22);
  v4[84] = result != 0;
  *a2 = v4;
  return result;
}

void *mlir::anec::Concat::getAxis(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t MultipliersAttr;

  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(this);
  mlir::IntegerAttr::getValue(&MultipliersAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

uint64_t mlir::anec::Concat::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  mlir::anec::_anonymous_namespace_ *v6;
  unint64_t v7;
  uint64_t InterleaveAttr;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  const void **v16;
  std::ios_base *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::Operation *v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ANECDimension;
  uint64_t v28;
  const void **v29[2];
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36[19];
  void *v37[2];
  _BYTE v38[64];
  void *__p;
  unsigned int v40[126];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  ANECConcatLayerDescInitialize();
  v29[0] = (const void **)mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::IntegerAttr::getValue(v29, (llvm::APInt *)&__p);
  if (v40[0] > 0x40)
  {
    v6 = *(mlir::anec::_anonymous_namespace_ **)__p;
    operator delete[](__p);
  }
  else
  {
    v6 = (mlir::anec::_anonymous_namespace_ *)__p;
  }
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  InterleaveAttr = mlir::anec::Concat::getInterleaveAttr(a1);
  v9 = (uint64_t *)MEMORY[0x1E0C9AE50];
  if (!InterleaveAttr)
    v9 = (uint64_t *)MEMORY[0x1E0C9AE40];
  v28 = *v9;
  v37[0] = v38;
  v37[1] = (void *)0x100000000;
  v10 = 1;
  __p = (void *)1;
  v29[0] = 0;
  ANECUnitValidatorCreate();
  v25 = 0;
  v26 = 0;
  if (ANECValidateConcatLayer())
  {
    v22 = *a1;
    v11 = MEMORY[0x1E0DE4FD0];
    v12 = MEMORY[0x1E0DE4FD0] + 104;
    v36[0] = MEMORY[0x1E0DE4FD0] + 104;
    v13 = MEMORY[0x1E0DE4FD0] + 64;
    v14 = MEMORY[0x1E0DE4F50];
    v15 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v16 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v30 = MEMORY[0x1E0DE4FD0] + 64;
    v29[0] = v15;
    *(const void ***)((char *)v29 + (_QWORD)*(v15 - 3)) = v16;
    v29[1] = 0;
    v17 = (std::ios_base *)((char *)v29 + (unint64_t)*(v29[0] - 3));
    std::ios_base::init(v17, &v31);
    v17[1].__vftable = 0;
    v17[1].__fmtflags_ = -1;
    v18 = *(_QWORD *)(v14 + 40);
    v30 = *(_QWORD *)(v14 + 32);
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = v18;
    v29[0] = *(const void ***)(v14 + 8);
    *(const void ***)((char *)v29 + (unint64_t)*(v29[0] - 3)) = *(const void ***)(v14 + 48);
    v36[0] = v12;
    v29[0] = (const void **)(v11 + 24);
    v30 = v13;
    std::streambuf::basic_streambuf();
    v19 = MEMORY[0x1E0DE4FB8] + 16;
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    v33 = 0u;
    v34 = 0u;
    v35 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v29[0] = *(const void ***)v14;
    v20 = *(_QWORD *)(v14 + 72);
    *(const void ***)((char *)v29 + (unint64_t)*(v29[0] - 3)) = *(const void ***)(v14 + 64);
    v30 = v20;
    v31 = v19;
    if (SBYTE7(v34) < 0)
      operator delete((void *)v33);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v36);
    v32 = 260;
    v29[0] = (const void **)&v23;
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    if (v24 < 0)
      operator delete(v23);
  }
  ANECUnitValidatorDelete();
  if (v37[0] != v38)
    free(v37[0]);
  return v10;
}

uint64_t mlir::anec::Concat::addOpToNetwork(mlir::Operation **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Concat::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::InstanceNorm::inferPromotedReturnTypes(mlir::Float16Type *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  mlir::MLIRContext *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v28[2];
  __int128 v29;
  char v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v31[0] = a4;
  v31[1] = a5;
  v12 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v31, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v12)
    goto LABEL_10;
  v13 = *v12;
  v14 = mlir::TypeID::get<mlir::ShapedType>();
  v15 = *(unsigned int *)(v13 + 16);
  if (!(_DWORD)v15)
    goto LABEL_10;
  v16 = *(_QWORD **)(v13 + 8);
  v17 = &v16[2 * v15];
  do
  {
    v18 = v15 >> 1;
    v19 = &v16[2 * (v15 >> 1)];
    v21 = *v19;
    v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14)
      v16 = v20;
    else
      v15 = v18;
  }
  while (v15);
  if (v16 != v17 && *v16 == v14)
    v22 = v16[1];
  else
LABEL_10:
    v22 = 0;
  v28[0] = (uint64_t)v12;
  v28[1] = v22;
  *(_QWORD *)&v29 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v28);
  if (mlir::Type::isF16((mlir::Type *)&v29))
  {
    v24 = v28[0];
  }
  else
  {
    v25 = mlir::Float16Type::get(a1, v23);
    LOBYTE(v29) = 0;
    v30 = 0;
    v24 = mlir::ShapedType::cloneWith(v28, &v29, v25);
  }
  v26 = *(_DWORD *)(a11 + 8);
  if (v26 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
    v26 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::anec::InstanceNorm::getZinIrUnitInfo(mlir::anec::InstanceNorm *this@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t MaxValueAttr;
  mlir::anec **v17;
  uint64_t v18;
  int v19;
  mlir::anec *v20;
  unint64_t v21;
  uint64_t DimFromIndex;
  llvm::APFloatBase *v23;
  float v24;
  void *v25;
  _QWORD v26[2];
  uint64_t MinValueAttr;
  void *v28;
  _QWORD v29[3];
  void *v30;
  uint64_t v31;
  _QWORD v32[7];

  v32[6] = *MEMORY[0x1E0C80C00];
  v4 = operator new(0x80uLL);
  v4[3] = 0u;
  v4[4] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[5] = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *((_DWORD *)v4 + 28) = 1065353216;
  *((_DWORD *)v4 + 30) = 730643660;
  *(_QWORD *)v4 = off_1E0E13AD0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v26[0] = v5;
  v26[1] = v15;
  v30 = v32;
  v31 = 0x600000000;
  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(MaxValueAttr, (uint64_t)&v30);
  if ((_DWORD)v31)
  {
    v17 = (mlir::anec **)v30;
    v18 = 8 * v31;
    do
    {
      v20 = *v17;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
      DimFromIndex = mlir::anec::getDimFromIndex(v20, v21);
      if ((DimFromIndex & 0xFF00000000) != 0)
        v19 = dword_1812330C0[(int)DimFromIndex];
      else
        v19 = 5;
      LODWORD(v28) = v19;
      std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>((uint64_t)(v4 + 5), (int *)&v28, &v28);
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  MinValueAttr = mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&MinValueAttr, (uint64_t)&v28);
  v24 = llvm::APFloat::convertToFloat(&v28);
  if (v24 < 0.00000011921)
    v24 = 0.00000011921;
  *((float *)v4 + 30) = v24;
  v25 = (void *)v29[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v23) == v25)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v29);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v29);
  *a2 = v4;
  if (v30 != v32)
    free(v30);
}

llvm::detail::DoubleAPFloat *mlir::anec::InstanceNorm::getEpsilon@<X0>(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t MinValueAttr;

  MinValueAttr = mlir::anec::ClampedRelu::getMinValueAttr(this);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&MinValueAttr, a2);
}

uint64_t mlir::anec::InstanceNorm::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  llvm::APFloatBase *v6;
  float v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t NumElements;
  uint64_t i;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  const void **v23;
  std::ios_base *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  mlir::Operation *v29;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t MaxValueAttr;
  _QWORD v35[6];
  float v36;
  const void **MinValueAttr;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45[19];
  void *__p;
  uint64_t v47;
  _BYTE v48[64];
  char buffer[8];
  void *v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  ANECInstanceNormLayerDescInitialize();
  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr(a1);
  v35[0] = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&MaxValueAttr);
  MinValueAttr = (const void **)mlir::anec::ClampedRelu::getMinValueAttr(a1);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&MinValueAttr, (uint64_t)buffer);
  v7 = llvm::APFloat::convertToFloat((void **)buffer);
  if (v7 < 0.00000011921)
    v7 = 0.00000011921;
  v36 = v7;
  v8 = v50;
  if (llvm::APFloatBase::PPCDoubleDouble(v6) == v8)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v50);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v50);
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v10 = v9;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(buffer, MaxValueAttr, 0);
  v11 = MaxValueAttr;
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&MaxValueAttr);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&MinValueAttr, v11, NumElements);
  for (i = 1; ; ++i)
  {
    v14 = *(const void ***)buffer == MinValueAttr && v50 == v38;
    if (v14 && v51 == v39)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&__p);
    v15 = v47;
    if (v47 >= 0x41)
    {
      if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        v16 = *(_QWORD *)__p;
      else
        v16 = -1;
    }
    else
    {
      v16 = (uint64_t)__p;
    }
    if (v47 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v51;
  }
  v17 = 1;
  *(_QWORD *)buffer = 1;
  MinValueAttr = 0;
  ANECUnitValidatorCreate();
  __p = v48;
  v47 = 0x100000000;
  v32 = 0;
  v33 = 0;
  if (ANECValidateInstanceNormLayer())
  {
    v29 = *a1;
    v18 = MEMORY[0x1E0DE4FD0];
    v19 = MEMORY[0x1E0DE4FD0] + 104;
    v45[0] = MEMORY[0x1E0DE4FD0] + 104;
    v20 = MEMORY[0x1E0DE4FD0] + 64;
    v21 = MEMORY[0x1E0DE4F50];
    v22 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v23 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v39 = MEMORY[0x1E0DE4FD0] + 64;
    MinValueAttr = v22;
    *(const void ***)((char *)&MinValueAttr + (_QWORD)*(v22 - 3)) = v23;
    v38 = 0;
    v24 = (std::ios_base *)((char *)&MinValueAttr + (_QWORD)*(MinValueAttr - 3));
    std::ios_base::init(v24, &v40);
    v24[1].__vftable = 0;
    v24[1].__fmtflags_ = -1;
    v25 = *(_QWORD *)(v21 + 40);
    v39 = *(_QWORD *)(v21 + 32);
    *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v25;
    MinValueAttr = *(const void ***)(v21 + 8);
    *(const void ***)((char *)&MinValueAttr + (_QWORD)*(MinValueAttr - 3)) = *(const void ***)(v21 + 48);
    v45[0] = v19;
    MinValueAttr = (const void **)(v18 + 24);
    v39 = v20;
    std::streambuf::basic_streambuf();
    v26 = MEMORY[0x1E0DE4FB8] + 16;
    v40 = MEMORY[0x1E0DE4FB8] + 16;
    v42 = 0u;
    v43 = 0u;
    v44 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    MinValueAttr = *(const void ***)v21;
    v27 = *(_QWORD *)(v21 + 72);
    *(const void ***)((char *)&MinValueAttr + (_QWORD)*(MinValueAttr - 3)) = *(const void ***)(v21 + 64);
    v39 = v27;
    v40 = v26;
    if (SBYTE7(v43) < 0)
      operator delete((void *)v42);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v45);
    v41 = 260;
    MinValueAttr = (const void **)&v30;
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v50);
    if (v31 < 0)
      operator delete(v30);
  }
  if (__p != v48)
    free(__p);
  ANECUnitValidatorDelete();
  return v17;
}

uint64_t mlir::anec::InstanceNorm::addOpToNetwork(mlir::anec::InstanceNorm *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::InstanceNorm::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::CropResize::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int v36;
  mlir::CallGraphNode *v38;
  uint64_t v39;
  mlir::CallGraphNode *v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t IndexFromDim;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  mlir::AffineMap *v70;
  uint64_t OperandRange;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  _QWORD v75[2];
  void *v76[2];
  _BYTE v77[16];
  void *v78;
  uint64_t v79;
  _BYTE v80[40];
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v81 = a6;
  LOBYTE(v82) = 0;
  v83 = 0;
  v84 = a7;
  v85 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v81);
    if (v83)
      v83 = 0;
    mlir::OperationName::OperationName(&v82, "anec.crop_resize", 16, Context);
    v83 = 1;
  }
  v86 = a4;
  v87 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::CropResizeAdaptor::verify(&v81, v18))
    return 0;
  v19 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 0);
  v20 = v19;
  if (!v19)
    goto LABEL_18;
  v21 = *v19;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_18;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_18:
    v30 = 0;
  v75[0] = v20;
  v75[1] = v30;
  ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v75);
  v32 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v75);
  v34 = (_BYTE *)(v32 + 8 * v33);
  v78 = v80;
  v79 = 0x500000000;
  v35 = v34 - ArgAttrsAttr;
  if ((unint64_t)(v34 - ArgAttrsAttr) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v35 >> 3, 8);
    v36 = v79;
    if (v34 == ArgAttrsAttr)
      goto LABEL_25;
    goto LABEL_24;
  }
  v36 = 0;
  if (v34 != ArgAttrsAttr)
  {
LABEL_24:
    memcpy((char *)v78 + 8 * v36, ArgAttrsAttr, v34 - ArgAttrsAttr);
    v36 = v79;
  }
LABEL_25:
  LODWORD(v79) = v36 + ((unint64_t)v35 >> 3);
  v76[0] = v77;
  v76[1] = (void *)0x200000000;
  v38 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v81) + 64);
  v39 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v81);
  v40 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v38, (mlir::CallGraphNode *)(v39 - 48), *(_QWORD *)(*(_QWORD *)(v82 + 96) + 40));
  if ((v41 & 1) != 0)
    v42 = *((_QWORD *)v40 + 1);
  else
    v42 = 0;
  mlir::getValues<long long>(v42, (uint64_t)v76);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v75);
  IndexFromDim = mlir::anec::getIndexFromDim(3, v43);
  if (!v45)
    goto LABEL_50;
  v46 = IndexFromDim;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v75);
  v48 = mlir::anec::getIndexFromDim(4, v47);
  if (!v49
    || (v50 = v76[0],
        v51 = v78,
        *((_QWORD *)v78 + v46) = *(_QWORD *)v76[0],
        v51[v48] = v50[1],
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v75),
        v53 = mlir::anec::getIndexFromDim(0, v52),
        !v54))
  {
LABEL_50:
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  v55 = v53;
  v56 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 1);
  v57 = v56;
  if (!v56)
    goto LABEL_40;
  v58 = *v56;
  v59 = mlir::TypeID::get<mlir::ShapedType>();
  v60 = *(unsigned int *)(v58 + 16);
  if (!(_DWORD)v60)
    goto LABEL_40;
  v61 = *(_QWORD **)(v58 + 8);
  v62 = &v61[2 * v60];
  do
  {
    v63 = v60 >> 1;
    v64 = &v61[2 * (v60 >> 1)];
    v66 = *v64;
    v65 = v64 + 2;
    v60 += ~(v60 >> 1);
    if (v66 < v59)
      v61 = v65;
    else
      v60 = v63;
  }
  while (v60);
  if (v61 != v62 && *v61 == v59)
    v67 = v61[1];
  else
LABEL_40:
    v67 = 0;
  v74[0] = v57;
  v74[1] = v67;
  v68 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v74);
  v69 = v78;
  *((_QWORD *)v78 + v55) = *(_QWORD *)(v68 + 8 * v55);
  v70 = (mlir::AffineMap *)v79;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v75);
  v72 = mlir::MemRefType::get(v69, v70, OperandRange, 0, 0, 0);
  v73 = *(unsigned int *)(a11 + 8);
  if (v73 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v73 + 1, 8);
    LODWORD(v73) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v73) = v72;
  ++*(_DWORD *)(a11 + 8);
  if (v76[0] != v77)
    free(v76[0]);
  if (v78 != v80)
    free(v78);
  return 1;
}

uint64_t mlir::anec::CropResizeAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **ArgAttrsAttr;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t OperandRange;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t Type;
  uint64_t *Value;
  _QWORD v62[24];

  v62[23] = *MEMORY[0x1E0C80C00];
  v58 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v58);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58))
    {
      v5 = "'anec.crop_resize' op requires attribute 'background_value'";
LABEL_28:
      v55 = (uint64_t *)v5;
      v57 = 259;
      mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&Value);
      v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v62);
      return v9;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v6 = (uint64_t *)*((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58))
    {
      v5 = "'anec.crop_resize' op requires attribute 'box_coordinate_mode'";
      goto LABEL_28;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v7 = *((_QWORD *)i + 1);
  v54 = 0;
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58))
    {
      v5 = "'anec.crop_resize' op requires attribute 'coordinate_mode'";
      goto LABEL_28;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v8 = (uint64_t *)*((_QWORD *)i + 1);
  v53 = 0;
  v54 = v8;
  v52 = 0;
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58))
    {
      v5 = "'anec.crop_resize' op requires attribute 'normalized_range'";
      goto LABEL_28;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 32) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion(i))
      v52 = (uint64_t *)*((_QWORD *)i + 1);
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v53 = (uint64_t *)*((_QWORD *)i + 1);
  v51 = 0;
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58))
    {
      v5 = "'anec.crop_resize' op requires attribute 'output_dims'";
      goto LABEL_28;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 40) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v51 = (uint64_t *)*((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58))
    {
      v11 = "'anec.crop_resize' op requires attribute 'padding_modes'";
      goto LABEL_92;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 48) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v12 = (uint64_t *)*((_QWORD *)i + 1);
  v50 = v12;
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58))
    {
      v11 = "'anec.crop_resize' op requires attribute 'sampling_method'";
      goto LABEL_92;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 56) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v13 = (uint64_t *)*((_QWORD *)i + 1);
  v48 = 0;
  v49 = v13;
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58))
    {
      v11 = "'anec.crop_resize' op requires attribute 'sampling_mode'";
      goto LABEL_92;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 64) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v48 = (uint64_t *)*((_QWORD *)i + 1);
  if (!v51)
    goto LABEL_95;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)v51))
    goto LABEL_83;
  v55 = mlir::Attribute::cast<mlir::ElementsAttr>(&v51);
  v56 = v14;
  Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
  Value = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&Type);
  v62[0] = v15;
  ArgAttrsAttr = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
  v59 = 2;
  if (v17 != 1)
    goto LABEL_83;
  if (*ArgAttrsAttr == (uint64_t *)v59
    && (v44 = v51,
        v45 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44),
        v46 = v18,
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v45),
        mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
  {
LABEL_95:
    if (!v52)
      goto LABEL_58;
    if (!mlir::DenseIntElementsAttr::classof((uint64_t)v52))
      goto LABEL_84;
    v55 = mlir::Attribute::cast<mlir::ElementsAttr>(&v52);
    v56 = v19;
    Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
    Value = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&Type);
    v62[0] = v20;
    v21 = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
    v59 = 2;
    if (v22 != 1)
      goto LABEL_84;
    if (*v21 == (uint64_t *)v59
      && (v44 = v52,
          v45 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44),
          v46 = v23,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v45),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
LABEL_58:
      if (v7 && (mlir::anec::BoxCoordinateModeAttr::classof(v7) & 1) == 0)
      {
        v11 = "'anec.crop_resize' op attribute 'box_coordinate_mode' failed to satisfy constraint: valid BoxCoordinateMode";
      }
      else
      {
        if (!v54)
          goto LABEL_96;
        v55 = mlir::Attribute::cast<mlir::ElementsAttr>(&v54);
        v56 = v24;
        v45 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
        Value = mlir::Type::cast<mlir::ShapedType>(&v45);
        v62[0] = v25;
        v26 = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
        Type = 5;
        if (v27 != 1)
          goto LABEL_85;
        if (*v26 == (uint64_t *)Type
          && (v59 = (uint64_t)v54,
              (llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_0>(&v59) & 1) != 0))
        {
LABEL_96:
          if (!v53)
            goto LABEL_97;
          v55 = mlir::Attribute::cast<mlir::ElementsAttr>(&v53);
          v56 = v28;
          v45 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
          Value = mlir::Type::cast<mlir::ShapedType>(&v45);
          v62[0] = v29;
          v30 = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
          Type = 5;
          if (v31 != 1)
            goto LABEL_87;
          if (*v30 == (uint64_t *)Type
            && (v59 = (uint64_t)v53,
                (llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_1>(&v59) & 1) != 0))
          {
LABEL_97:
            if (!v48)
              goto LABEL_98;
            v55 = mlir::Attribute::cast<mlir::ElementsAttr>(&v48);
            v56 = v32;
            v45 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
            Value = mlir::Type::cast<mlir::ShapedType>(&v45);
            v62[0] = v33;
            v34 = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
            Type = 5;
            if (v35 != 1)
              goto LABEL_88;
            if (*v34 == (uint64_t *)Type
              && (v59 = (uint64_t)v48,
                  (llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_2>(&v59) & 1) != 0))
            {
LABEL_98:
              if (!v13)
                goto LABEL_99;
              v55 = mlir::Attribute::cast<mlir::ElementsAttr>(&v49);
              v56 = v36;
              v45 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
              Value = mlir::Type::cast<mlir::ShapedType>(&v45);
              v62[0] = v37;
              v38 = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
              Type = 5;
              if (v39 != 1)
                goto LABEL_89;
              if (*v38 == (uint64_t *)Type
                && (v59 = (uint64_t)v49,
                    (llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_1>(&v59) & 1) != 0))
              {
LABEL_99:
                if (!v12)
                  goto LABEL_100;
                v55 = mlir::Attribute::cast<mlir::ElementsAttr>(&v50);
                v56 = v40;
                v45 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
                Value = mlir::Type::cast<mlir::ShapedType>(&v45);
                v62[0] = v41;
                v42 = (uint64_t **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                Type = 5;
                if (v43 != 1)
                  goto LABEL_90;
                if (*v42 == (uint64_t *)Type
                  && (v59 = (uint64_t)v50,
                      (llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_4>(&v59) & 1) != 0))
                {
LABEL_100:
                  if (!v6)
                    return 1;
                  if (*(_UNKNOWN **)(*v6 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
                  {
                    v55 = v6;
                    Value = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v55);
                    if (mlir::Type::isF16((mlir::Type *)&Value))
                      return 1;
                  }
                  v11 = "'anec.crop_resize' op attribute 'background_value' failed to satisfy constraint: 16-bit float attribute";
                }
                else
                {
LABEL_90:
                  v11 = "'anec.crop_resize' op attribute 'padding_modes' failed to satisfy constraint: PaddingMode elemen"
                        "ts attribute of shape {5}";
                }
              }
              else
              {
LABEL_89:
                v11 = "'anec.crop_resize' op attribute 'sampling_method' failed to satisfy constraint: SamplingGridMethod"
                      " elements attribute of shape {5}";
              }
            }
            else
            {
LABEL_88:
              v11 = "'anec.crop_resize' op attribute 'sampling_mode' failed to satisfy constraint: SamplingGridMode eleme"
                    "nts attribute of shape {5}";
            }
          }
          else
          {
LABEL_87:
            v11 = "'anec.crop_resize' op attribute 'normalized_range' failed to satisfy constraint: NormalizedCoordinateR"
                  "ange elements attribute of shape {5}";
          }
        }
        else
        {
LABEL_85:
          v11 = "'anec.crop_resize' op attribute 'coordinate_mode' failed to satisfy constraint: CoordinateMode elements "
                "attribute of shape {5}";
        }
      }
    }
    else
    {
LABEL_84:
      v11 = "'anec.crop_resize' op attribute 'crop_dims' failed to satisfy constraint: ui64 elements attribute of shape {2}";
    }
  }
  else
  {
LABEL_83:
    v11 = "'anec.crop_resize' op attribute 'output_dims' failed to satisfy constraint: ui64 elements attribute of shape {2}";
  }
LABEL_92:
  v55 = (uint64_t *)v11;
  v57 = 259;
  mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&Value);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
  return v9;
}

void mlir::anec::CropResize::getZinIrUnitInfo(mlir::anec::CropResize *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  __int128 v4;
  uint64_t CoordinateModeAttr;
  uint64_t NormalizedRangeAttr;
  uint64_t PaddingModesAttr;
  uint64_t SamplingMethodAttr;
  llvm::APFloatBase *Value;
  void *v10;
  void *v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  mlir::anec *i;
  _QWORD *v29;
  uint64_t DimFromIndex;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  char *v81;
  unint64_t *v82;
  uint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t SamplingModeAttr;
  mlir::anec *j;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  _OWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  void *v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  void *v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  void *v134;
  uint64_t v135;
  int v136;
  _QWORD *v137;
  unsigned int v138;
  void *v139;
  uint64_t v140;
  __int16 v142;
  mlir::anec::CropResize *v143;
  _QWORD *v144;
  uint64_t **v145;
  uint64_t OutputDimsAttr;
  __int128 v147;
  __int128 v148;
  void *__p;
  uint64_t v150;
  _BYTE v151[40];
  void *v152[2];
  _BYTE v153[40];
  void *v154[2];
  _BYTE v155[40];
  void *v156[2];
  _BYTE v157[40];
  void *v158[2];
  _BYTE v159[40];
  __int128 v160;
  __int128 v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v3 = (char *)operator new(0xC8uLL);
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v144 = v3 + 80;
  *((_QWORD *)v3 + 9) = -1;
  *(_OWORD *)(v3 + 138) = 0u;
  *(_QWORD *)v3 = off_1E0E138F0;
  *((_QWORD *)v3 + 20) = 0;
  v145 = (uint64_t **)(v3 + 160);
  *((_DWORD *)v3 + 39) = 5;
  *((_QWORD *)v3 + 21) = 0;
  *((_QWORD *)v3 + 22) = 0;
  *(_QWORD *)&v4 = 0x100000001;
  *((_QWORD *)&v4 + 1) = 0x100000001;
  *(_OWORD *)(v3 + 184) = v4;
  v158[0] = v159;
  v158[1] = (void *)0x500000000;
  CoordinateModeAttr = mlir::anec::CropResize::getCoordinateModeAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(CoordinateModeAttr, (uint64_t)v158);
  v156[0] = v157;
  v156[1] = (void *)0x500000000;
  NormalizedRangeAttr = mlir::anec::CropResize::getNormalizedRangeAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(NormalizedRangeAttr, (uint64_t)v156);
  v154[0] = v155;
  v154[1] = (void *)0x500000000;
  PaddingModesAttr = mlir::anec::CropResize::getPaddingModesAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(PaddingModesAttr, (uint64_t)v154);
  v152[0] = v153;
  v152[1] = (void *)0x500000000;
  SamplingMethodAttr = mlir::anec::CropResize::getSamplingMethodAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(SamplingMethodAttr, (uint64_t)v152);
  v143 = this;
  __p = (void *)mlir::anec::CropResize::getBackgroundValueAttr((mlir::Operation **)this);
  Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&__p, (uint64_t)&v160);
  v10 = (void *)*((_QWORD *)&v160 + 1);
  v11 = llvm::APFloatBase::PPCDoubleDouble(Value);
  if (v11 == v10)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v160 + 8), (llvm::APInt *)&__p);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)((char *)&v160 + 8), (uint64_t)&__p);
  v12 = v150;
  if (v150 >= 0x41)
  {
    if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
    {
      v14 = *(_QWORD *)__p;
      if (*(_QWORD *)__p >= 0xFFFFuLL)
        LOWORD(v14) = -1;
      v142 = v14;
    }
    else
    {
      v142 = -1;
      if (!__p)
        goto LABEL_15;
    }
    operator delete[](__p);
  }
  else
  {
    v13 = (__int16)__p;
    if ((unint64_t)__p >= 0xFFFF)
      v13 = -1;
    v142 = v13;
  }
LABEL_15:
  if (v11 == *((void **)&v160 + 1))
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v160 + 8));
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v160 + 8));
  v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15)
    goto LABEL_27;
  v16 = *v15;
  v17 = mlir::TypeID::get<mlir::ShapedType>();
  v18 = *(unsigned int *)(v16 + 16);
  if (!(_DWORD)v18)
    goto LABEL_27;
  v19 = *(_QWORD **)(v16 + 8);
  v20 = &v19[2 * v18];
  do
  {
    v21 = v18 >> 1;
    v22 = &v19[2 * (v18 >> 1)];
    v24 = *v22;
    v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17)
      v19 = v23;
    else
      v18 = v21;
  }
  while (v18);
  if (v19 != v20 && *v19 == v17)
    v25 = v19[1];
  else
LABEL_27:
    v25 = 0;
  *(_QWORD *)&v160 = v15;
  *((_QWORD *)&v160 + 1) = v25;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v160);
  if (v26)
  {
    v27 = v26;
    for (i = 0; i != (mlir::anec *)v27; i = (mlir::anec *)((char *)i + 1))
    {
      DimFromIndex = mlir::anec::getDimFromIndex(i, v27);
      if ((DimFromIndex & 0xFF00000000) != 0)
        v31 = dword_1812330C0[(int)DimFromIndex];
      else
        v31 = 5;
      v32 = *((_QWORD *)v156[0] + (_QWORD)i) != 0;
      v33 = dword_181233048[*((_QWORD *)v158[0] + (_QWORD)i)];
      v35 = (_DWORD *)*((_QWORD *)v3 + 11);
      v34 = *((_QWORD *)v3 + 12);
      if ((unint64_t)v35 >= v34)
      {
        v37 = (_DWORD *)*v144;
        v38 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - *v144) >> 2);
        v39 = v38 + 1;
        if (v38 + 1 > 0x1555555555555555)
          goto LABEL_190;
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v37) >> 2);
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0xAAAAAAAAAAAAAAALL)
          v41 = 0x1555555555555555;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 > 0x1555555555555555)
            goto LABEL_191;
          v42 = (char *)operator new(12 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[12 * v38];
        *(_DWORD *)v43 = v31;
        *((_DWORD *)v43 + 1) = v32;
        *((_DWORD *)v43 + 2) = v33;
        v44 = v43;
        if (v35 != v37)
        {
          do
          {
            v45 = *(_QWORD *)(v35 - 3);
            v35 -= 3;
            v46 = v35[2];
            *(_QWORD *)(v44 - 12) = v45;
            v44 -= 12;
            *((_DWORD *)v44 + 2) = v46;
          }
          while (v35 != v37);
          v35 = (_DWORD *)*v144;
        }
        v36 = v43 + 12;
        *((_QWORD *)v3 + 10) = v44;
        *((_QWORD *)v3 + 11) = v43 + 12;
        *((_QWORD *)v3 + 12) = &v42[12 * v41];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v35 = v31;
        v35[1] = v32;
        v36 = v35 + 3;
        v35[2] = v33;
      }
      *((_QWORD *)v3 + 11) = v36;
      v47 = qword_181233058[*((_QWORD *)v154[0] + (_QWORD)i)];
      v49 = (uint64_t *)*((_QWORD *)v3 + 14);
      v48 = *((_QWORD *)v3 + 15);
      if ((unint64_t)v49 >= v48)
      {
        v51 = (char *)*((_QWORD *)v3 + 13);
        v52 = ((char *)v49 - v51) >> 3;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61)
          goto LABEL_190;
        v54 = v48 - (_QWORD)v51;
        if (v54 >> 2 > v53)
          v53 = v54 >> 2;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          if (v55 >> 61)
            goto LABEL_191;
          v56 = (char *)operator new(8 * v55);
        }
        else
        {
          v56 = 0;
        }
        v57 = (uint64_t *)&v56[8 * v52];
        *v57 = v47 | v31;
        v50 = v57 + 1;
        if (v49 != (uint64_t *)v51)
        {
          v58 = (char *)v49 - v51 - 8;
          if (v58 < 0x58)
            goto LABEL_194;
          if ((unint64_t)(v51 - v56) < 0x20)
            goto LABEL_194;
          v59 = (v58 >> 3) + 1;
          v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
          v61 = &v49[v60 / 0xFFFFFFFFFFFFFFF8];
          v57 = (uint64_t *)((char *)v57 - v60);
          v62 = &v56[8 * v52 - 16];
          v63 = v49 - 2;
          v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v65 = *(_OWORD *)v63;
            *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
            *(_OWORD *)v62 = v65;
            v62 -= 32;
            v63 -= 4;
            v64 -= 4;
          }
          while (v64);
          v49 = v61;
          if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_194:
            do
            {
              v66 = *--v49;
              *--v57 = v66;
            }
            while (v49 != (uint64_t *)v51);
          }
          v49 = (uint64_t *)*((_QWORD *)v3 + 13);
        }
        *((_QWORD *)v3 + 13) = v57;
        *((_QWORD *)v3 + 14) = v50;
        *((_QWORD *)v3 + 15) = &v56[8 * v55];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *v49 = v47 | v31;
        v50 = v49 + 1;
      }
      *((_QWORD *)v3 + 14) = v50;
      v67 = *((_QWORD *)v152[0] + (_QWORD)i);
      v69 = (unint64_t *)*((_QWORD *)v3 + 17);
      v68 = *((_QWORD *)v3 + 18);
      if ((unint64_t)v69 < v68)
      {
        *v69 = v31 | ((unint64_t)(v67 != 0) << 32);
        v29 = v69 + 1;
      }
      else
      {
        v70 = (char *)*((_QWORD *)v3 + 16);
        v71 = ((char *)v69 - v70) >> 3;
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61)
LABEL_190:
          abort();
        v73 = v68 - (_QWORD)v70;
        if (v73 >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
        {
          if (v74 >> 61)
LABEL_191:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v75 = (char *)operator new(8 * v74);
        }
        else
        {
          v75 = 0;
        }
        v76 = (unint64_t *)&v75[8 * v71];
        *v76 = v31 | ((unint64_t)(v67 != 0) << 32);
        v29 = v76 + 1;
        if (v69 != (unint64_t *)v70)
        {
          v77 = (char *)v69 - v70 - 8;
          if (v77 < 0x58)
            goto LABEL_195;
          if ((unint64_t)(v70 - v75) < 0x20)
            goto LABEL_195;
          v78 = (v77 >> 3) + 1;
          v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          v80 = &v69[v79 / 0xFFFFFFFFFFFFFFF8];
          v76 = (unint64_t *)((char *)v76 - v79);
          v81 = &v75[8 * v71 - 16];
          v82 = v69 - 2;
          v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v84 = *(_OWORD *)v82;
            *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
            *(_OWORD *)v81 = v84;
            v81 -= 32;
            v82 -= 4;
            v83 -= 4;
          }
          while (v83);
          v69 = v80;
          if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_195:
            do
            {
              v85 = *--v69;
              *--v76 = v85;
            }
            while (v69 != (unint64_t *)v70);
          }
          v69 = (unint64_t *)*((_QWORD *)v3 + 16);
        }
        *((_QWORD *)v3 + 16) = v76;
        *((_QWORD *)v3 + 17) = v29;
        *((_QWORD *)v3 + 18) = &v75[8 * v74];
        if (v69)
          operator delete(v69);
      }
      *((_QWORD *)v3 + 17) = v29;
    }
  }
  *((_WORD *)v3 + 76) = v142;
  *(_QWORD *)&v160 = mlir::anec::CropResize::getBoxCoordinateModeAttr((mlir::Operation **)v143);
  *((_DWORD *)v3 + 39) = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v160);
  v86 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v143 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v86)
    goto LABEL_104;
  v87 = *v86;
  v88 = mlir::TypeID::get<mlir::ShapedType>();
  v89 = *(unsigned int *)(v87 + 16);
  if (!(_DWORD)v89)
    goto LABEL_104;
  v90 = *(_QWORD **)(v87 + 8);
  v91 = &v90[2 * v89];
  do
  {
    v92 = v89 >> 1;
    v93 = &v90[2 * (v89 >> 1)];
    v95 = *v93;
    v94 = v93 + 2;
    v89 += ~(v89 >> 1);
    if (v95 < v88)
      v90 = v94;
    else
      v89 = v92;
  }
  while (v89);
  if (v90 != v91 && *v90 == v88)
    v96 = v90[1];
  else
LABEL_104:
    v96 = 0;
  *(_QWORD *)&v160 = v86;
  *((_QWORD *)&v160 + 1) = v96;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v160);
  v98 = v97;
  __p = v151;
  v150 = 0x500000000;
  SamplingModeAttr = mlir::anec::CropResize::getSamplingModeAttr((mlir::Operation **)v143);
  mlir::getValues<unsigned long long>(SamplingModeAttr, (uint64_t)&__p);
  if (v98)
  {
    for (j = 0; j != (mlir::anec *)v98; j = (mlir::anec *)((char *)j + 1))
    {
      v102 = mlir::anec::getDimFromIndex(j, v98);
      if ((v102 & 0xFF00000000) != 0)
        v103 = qword_181233098[(int)v102];
      else
        v103 = 5;
      v104 = *((_QWORD *)__p + (_QWORD)j);
      v106 = (uint64_t *)*((_QWORD *)v3 + 21);
      v105 = *((_QWORD *)v3 + 22);
      if ((unint64_t)v106 < v105)
      {
        *v106 = v103 | (v104 << 32);
        v101 = v106 + 1;
      }
      else
      {
        v107 = *v145;
        v108 = (char *)v106 - (char *)*v145;
        v109 = v108 >> 3;
        v110 = (v108 >> 3) + 1;
        if (v110 >> 61)
          goto LABEL_190;
        v111 = v105 - (_QWORD)v107;
        if (v111 >> 2 > v110)
          v110 = v111 >> 2;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        if (v112)
        {
          if (v112 >> 61)
            goto LABEL_191;
          v113 = operator new(8 * v112);
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        *v114 = v103 | (v104 << 32);
        v101 = v114 + 1;
        if (v106 != v107)
        {
          v115 = (char *)v106 - (char *)v107 - 8;
          if (v115 < 0x58)
            goto LABEL_196;
          if ((unint64_t)((char *)v106 - v113 - v108) < 0x20)
            goto LABEL_196;
          v116 = (v115 >> 3) + 1;
          v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
          v118 = &v106[v117 / 0xFFFFFFFFFFFFFFF8];
          v114 = (uint64_t *)((char *)v114 - v117);
          v119 = &v113[8 * v109 - 16];
          v120 = v106 - 2;
          v121 = v116 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v122 = *(_OWORD *)v120;
            *(v119 - 1) = *((_OWORD *)v120 - 1);
            *v119 = v122;
            v119 -= 2;
            v120 -= 4;
            v121 -= 4;
          }
          while (v121);
          v106 = v118;
          if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_196:
            do
            {
              v123 = *--v106;
              *--v114 = v123;
            }
            while (v106 != v107);
          }
          v106 = *v145;
        }
        *((_QWORD *)v3 + 20) = v114;
        *((_QWORD *)v3 + 21) = v101;
        *((_QWORD *)v3 + 22) = &v113[8 * v112];
        if (v106)
          operator delete(v106);
      }
      *((_QWORD *)v3 + 21) = v101;
    }
  }
  OutputDimsAttr = mlir::anec::CropResize::getOutputDimsAttr((mlir::Operation **)v143);
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)&OutputDimsAttr, (uint64_t)&v160);
  v147 = v160;
  *(_QWORD *)&v148 = v161 + 1;
  *((_QWORD *)&v148 + 1) = *((_QWORD *)&v161 + 1);
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v147, (llvm::APInt *)&v160);
  v124 = DWORD2(v160);
  if (DWORD2(v160) >= 0x41)
  {
    v125 = v124 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v160);
    v126 = (void *)v160;
    if (v125 <= 0x40)
    {
      v127 = *(_QWORD *)v160;
      if (*(_QWORD *)v160 >= 0x7FFFFFFFuLL)
        LODWORD(v127) = 0x7FFFFFFF;
      *((_DWORD *)v3 + 46) = v127;
    }
    else
    {
      *((_DWORD *)v3 + 46) = 0x7FFFFFFF;
      if (!v126)
        goto LABEL_144;
    }
    operator delete[](v126);
    goto LABEL_144;
  }
  if ((unint64_t)v160 >> 31)
    *((_DWORD *)v3 + 46) = 0x7FFFFFFF;
  else
    *((_DWORD *)v3 + 46) = v160;
LABEL_144:
  OutputDimsAttr = mlir::anec::CropResize::getOutputDimsAttr((mlir::Operation **)v143);
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)&OutputDimsAttr, (uint64_t)&v160);
  v147 = v160;
  v148 = v161;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v147, (llvm::APInt *)&v160);
  v128 = DWORD2(v160);
  if (DWORD2(v160) >= 0x41)
  {
    v129 = v128 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v160);
    v130 = (void *)v160;
    if (v129 <= 0x40)
    {
      v131 = *(_QWORD *)v160;
      if (*(_QWORD *)v160 >= 0x7FFFFFFFuLL)
        LODWORD(v131) = 0x7FFFFFFF;
      *((_DWORD *)v3 + 47) = v131;
    }
    else
    {
      *((_DWORD *)v3 + 47) = 0x7FFFFFFF;
      if (!v130)
        goto LABEL_155;
    }
    operator delete[](v130);
    goto LABEL_155;
  }
  if ((unint64_t)v160 >> 31)
    *((_DWORD *)v3 + 47) = 0x7FFFFFFF;
  else
    *((_DWORD *)v3 + 47) = v160;
LABEL_155:
  OutputDimsAttr = mlir::anec::CropResize::getCropDimsAttr((mlir::Operation **)v143);
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)&OutputDimsAttr, (uint64_t)&v160);
  v147 = v160;
  *(_QWORD *)&v148 = v161 + 1;
  *((_QWORD *)&v148 + 1) = *((_QWORD *)&v161 + 1);
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v147, (llvm::APInt *)&v160);
  v132 = DWORD2(v160);
  if (DWORD2(v160) >= 0x41)
  {
    v133 = v132 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v160);
    v134 = (void *)v160;
    if (v133 <= 0x40)
    {
      v135 = *(_QWORD *)v160;
      if (*(_QWORD *)v160 >= 0x7FFFFFFFuLL)
        LODWORD(v135) = 0x7FFFFFFF;
      *((_DWORD *)v3 + 48) = v135;
    }
    else
    {
      *((_DWORD *)v3 + 48) = 0x7FFFFFFF;
      if (!v134)
        goto LABEL_166;
    }
    operator delete[](v134);
    goto LABEL_166;
  }
  if ((unint64_t)v160 >> 31)
    *((_DWORD *)v3 + 48) = 0x7FFFFFFF;
  else
    *((_DWORD *)v3 + 48) = v160;
LABEL_166:
  OutputDimsAttr = mlir::anec::CropResize::getCropDimsAttr((mlir::Operation **)v143);
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)&OutputDimsAttr, (uint64_t)&v160);
  v147 = v160;
  v148 = v161;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v147, (llvm::APInt *)&v160);
  v136 = DWORD2(v160);
  if (DWORD2(v160) >= 0x41)
  {
    v138 = v136 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v160);
    v139 = (void *)v160;
    if (v138 <= 0x40)
    {
      v140 = *(_QWORD *)v160;
      if (*(_QWORD *)v160 >= 0x7FFFFFFFuLL)
        LODWORD(v140) = 0x7FFFFFFF;
      *((_DWORD *)v3 + 49) = v140;
      v137 = a2;
    }
    else
    {
      *((_DWORD *)v3 + 49) = 0x7FFFFFFF;
      v137 = a2;
      if (!v139)
        goto LABEL_177;
    }
    operator delete[](v139);
    goto LABEL_177;
  }
  v137 = a2;
  if ((unint64_t)v160 >> 31)
    *((_DWORD *)v3 + 49) = 0x7FFFFFFF;
  else
    *((_DWORD *)v3 + 49) = v160;
LABEL_177:
  *v137 = v3;
  if (__p != v151)
    free(__p);
  if (v152[0] != v153)
    free(v152[0]);
  if (v154[0] != v155)
    free(v154[0]);
  if (v156[0] != v157)
    free(v156[0]);
  if (v158[0] != v159)
    free(v158[0]);
}

llvm::detail::DoubleAPFloat *mlir::anec::CropResize::getBackgroundValue@<X0>(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t BackgroundValueAttr;

  BackgroundValueAttr = mlir::anec::CropResize::getBackgroundValueAttr(this);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&BackgroundValueAttr, a2);
}

uint64_t mlir::anec::CropResize::getBoxCoordinateMode(mlir::Operation **this)
{
  uint64_t BoxCoordinateModeAttr;

  BoxCoordinateModeAttr = mlir::anec::CropResize::getBoxCoordinateModeAttr(this);
  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&BoxCoordinateModeAttr);
}

uint64_t mlir::anec::CropResize::addOpToNetwork(mlir::anec::CropResize *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::CropResize::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::CropResize::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t IndexFromDim;
  char v9;
  mlir::anec::_anonymous_namespace_ *v10;
  unint64_t v11;
  char v12;
  uint64_t SamplingModeAttr;
  uint64_t SamplingMethodAttr;
  uint64_t PaddingModesAttr;
  uint64_t CoordinateModeAttr;
  uint64_t NormalizedRangeAttr;
  uint64_t v18;
  const __CFString *v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  const __CFString *v23;
  void *v24;
  llvm::APFloatBase *v25;
  uint64_t OutputDimsAttr;
  uint64_t CropDimsAttr;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void **v33;
  const void **v34;
  std::ios_base *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  mlir::Operation *v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const __CFString *v51;
  uint64_t v52;
  const __CFString *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const __CFString *v59;
  uint64_t v60;
  uint64_t v61;
  const __CFString *v62;
  uint64_t v63;
  float v64;
  int v65;
  int v66;
  int v67;
  int v68;
  const void **v69[2];
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int128 __p;
  __int128 v74;
  int v75;
  uint64_t v76[19];
  void *v77[2];
  _BYTE v78[64];
  void *v79[2];
  _BYTE v80[48];
  void *v81[2];
  _BYTE v82[48];
  void *v83[2];
  _BYTE v84[48];
  void *v85[2];
  _BYTE v86[48];
  void *v87[2];
  _BYTE v88[48];
  void *v89[2];
  _BYTE v90[48];
  void *v91[2];
  _BYTE v92[48];
  void *v93;
  uint64_t v94;
  uint64_t ANECDimension;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[2];
  char buffer[8];
  _QWORD v101[65];

  v101[63] = *MEMORY[0x1E0C80C00];
  ANECCropResizeLayerDescInitialize();
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v7 = v6;
  IndexFromDim = mlir::anec::getIndexFromDim(3, v6);
  if (!v9 || (v10 = (mlir::anec::_anonymous_namespace_ *)IndexFromDim, v11 = mlir::anec::getIndexFromDim(4, v7), !v12))
    std::__throw_bad_optional_access[abi:nn180100]();
  v97 = v99;
  v99[0] = v10;
  v99[1] = v11;
  v98 = 0x200000002;
  v93 = &ANECDimension;
  v96 = 0;
  ANECDimension = 0;
  v94 = 0x200000002;
  v91[0] = v92;
  v91[1] = (void *)0x600000000;
  SamplingModeAttr = mlir::anec::CropResize::getSamplingModeAttr(a1);
  mlir::getValues<unsigned long long>(SamplingModeAttr, (uint64_t)v91);
  v89[0] = v90;
  v89[1] = (void *)0x600000000;
  SamplingMethodAttr = mlir::anec::CropResize::getSamplingMethodAttr(a1);
  mlir::getValues<unsigned long long>(SamplingMethodAttr, (uint64_t)v89);
  v87[0] = v88;
  v87[1] = (void *)0x600000000;
  PaddingModesAttr = mlir::anec::CropResize::getPaddingModesAttr(a1);
  mlir::getValues<unsigned long long>(PaddingModesAttr, (uint64_t)v87);
  v85[0] = v86;
  v85[1] = (void *)0x600000000;
  CoordinateModeAttr = mlir::anec::CropResize::getCoordinateModeAttr(a1);
  mlir::getValues<unsigned long long>(CoordinateModeAttr, (uint64_t)v85);
  v83[0] = v84;
  v83[1] = (void *)0x600000000;
  NormalizedRangeAttr = mlir::anec::CropResize::getNormalizedRangeAttr(a1);
  mlir::getValues<unsigned long long>(NormalizedRangeAttr, (uint64_t)v83);
  *(_QWORD *)buffer = mlir::anec::CropResize::getBoxCoordinateModeAttr(a1);
  v45 = (uint64_t)*(&off_1E0E538D8 + mlir::IntegerAttr::getInt((mlir::IntegerAttr *)buffer));
  v46 = *(_QWORD *)v93;
  v18 = 8 * *(_QWORD *)v97;
  v47 = (uint64_t)*(&off_1E0E53958 + *(_QWORD *)((char *)v91[0] + v18));
  v50 = *(_QWORD *)v93;
  if (*(_QWORD *)((char *)v89[0] + v18))
    v19 = CFSTR("NearestNeighbor");
  else
    v19 = CFSTR("Linear");
  v51 = v19;
  v54 = *(_QWORD *)v93;
  v55 = (uint64_t)*(&off_1E0E53988 + *(_QWORD *)((char *)v87[0] + v18));
  v58 = *(_QWORD *)v93;
  v60 = (uint64_t)*(&off_1E0E539C8 + *(_QWORD *)((char *)v85[0] + v18));
  if (*(_QWORD *)((char *)v83[0] + v18))
    v20 = CFSTR("RangeMinusOneToOne");
  else
    v20 = CFSTR("RangeZeroToOne");
  v59 = v20;
  v48 = *((_QWORD *)v93 + 1);
  v21 = 8 * *((_QWORD *)v97 + 1);
  v49 = (uint64_t)*(&off_1E0E53958 + *(_QWORD *)((char *)v91[0] + v21));
  v52 = *((_QWORD *)v93 + 1);
  if (*(_QWORD *)((char *)v89[0] + v21))
    v22 = CFSTR("NearestNeighbor");
  else
    v22 = CFSTR("Linear");
  v53 = v22;
  v56 = *((_QWORD *)v93 + 1);
  v57 = (uint64_t)*(&off_1E0E53988 + *(_QWORD *)((char *)v87[0] + v21));
  v61 = *((_QWORD *)v93 + 1);
  v63 = (uint64_t)*(&off_1E0E539C8 + *(_QWORD *)((char *)v85[0] + v21));
  if (*(_QWORD *)((char *)v83[0] + v21))
    v23 = CFSTR("RangeMinusOneToOne");
  else
    v23 = CFSTR("RangeZeroToOne");
  v62 = v23;
  v69[0] = (const void **)mlir::anec::CropResize::getBackgroundValueAttr(a1);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)v69, (uint64_t)buffer);
  v64 = llvm::APFloat::convertToFloat((void **)buffer);
  v24 = (void *)v101[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v25) == v24)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v101);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v101);
  v81[0] = v82;
  v81[1] = (void *)0xC00000000;
  OutputDimsAttr = mlir::anec::CropResize::getOutputDimsAttr(a1);
  mlir::getValues<unsigned int>(OutputDimsAttr, (uint64_t)v81);
  v66 = *(_DWORD *)v81[0];
  v65 = *((_DWORD *)v81[0] + 1);
  v79[0] = v80;
  v79[1] = (void *)0xC00000000;
  CropDimsAttr = mlir::anec::CropResize::getCropDimsAttr(a1);
  mlir::getValues<unsigned int>(CropDimsAttr, (uint64_t)v79);
  v68 = *(_DWORD *)v79[0];
  v67 = *((_DWORD *)v79[0] + 1);
  v77[0] = v78;
  v77[1] = (void *)0x100000000;
  v28 = 1;
  *(_QWORD *)buffer = 1;
  v69[0] = 0;
  ANECUnitValidatorCreate();
  v43 = 0;
  v44 = 0;
  if (ANECValidateCropResizeLayer())
  {
    v40 = *a1;
    v29 = MEMORY[0x1E0DE4FD0];
    v30 = MEMORY[0x1E0DE4FD0] + 104;
    v76[0] = MEMORY[0x1E0DE4FD0] + 104;
    v31 = MEMORY[0x1E0DE4FD0] + 64;
    v32 = MEMORY[0x1E0DE4F50];
    v33 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v34 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v70 = MEMORY[0x1E0DE4FD0] + 64;
    v69[0] = v33;
    *(const void ***)((char *)v69 + (_QWORD)*(v33 - 3)) = v34;
    v69[1] = 0;
    v35 = (std::ios_base *)((char *)v69 + (unint64_t)*(v69[0] - 3));
    std::ios_base::init(v35, &v71);
    v35[1].__vftable = 0;
    v35[1].__fmtflags_ = -1;
    v36 = *(_QWORD *)(v32 + 40);
    v70 = *(_QWORD *)(v32 + 32);
    *(uint64_t *)((char *)&v70 + *(_QWORD *)(v70 - 24)) = v36;
    v69[0] = *(const void ***)(v32 + 8);
    *(const void ***)((char *)v69 + (unint64_t)*(v69[0] - 3)) = *(const void ***)(v32 + 48);
    v76[0] = v30;
    v69[0] = (const void **)(v29 + 24);
    v70 = v31;
    std::streambuf::basic_streambuf();
    v37 = MEMORY[0x1E0DE4FB8] + 16;
    v71 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v74 = 0u;
    v75 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v69[0] = *(const void ***)v32;
    v38 = *(_QWORD *)(v32 + 72);
    *(const void ***)((char *)v69 + (unint64_t)*(v69[0] - 3)) = *(const void ***)(v32 + 64);
    v70 = v38;
    v71 = v37;
    if (SBYTE7(v74) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v76);
    v72 = 260;
    v69[0] = (const void **)&v41;
    v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v101);
    if (v42 < 0)
      operator delete(v41);
  }
  ANECUnitValidatorDelete();
  if (v77[0] != v78)
    free(v77[0]);
  if (v79[0] != v80)
    free(v79[0]);
  if (v81[0] != v82)
    free(v81[0]);
  if (v83[0] != v84)
    free(v83[0]);
  if (v85[0] != v86)
    free(v85[0]);
  if (v87[0] != v88)
    free(v87[0]);
  if (v89[0] != v90)
    free(v89[0]);
  if (v91[0] != v92)
    free(v91[0]);
  if (v93 != &ANECDimension)
    free(v93);
  if (v97 != v99)
    free(v97);
  return v28;
}

void mlir::getValues<unsigned int>(uint64_t a1, uint64_t a2)
{
  uint64_t NumElements;
  BOOL v5;
  int *p_p;
  int v7;
  uint64_t v8;
  void *__p;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v14, a1, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v17);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v11, a1, NumElements);
  while (1)
  {
    v5 = v14 == v11 && v15 == v12;
    if (v5 && v16 == v13)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v14, (llvm::APInt *)&__p);
    if (v10 >= 0x41)
      p_p = (int *)__p;
    else
      p_p = (int *)&__p;
    v7 = *p_p;
    v8 = *(unsigned int *)(a2 + 8);
    if (v8 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8 + 1, 4);
      v8 = *(unsigned int *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = v7;
    ++*(_DWORD *)(a2 + 8);
    if (v10 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v16;
  }
}

uint64_t mlir::anec::GatherND::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t IndexFromDim;
  char v46;
  unint64_t v47;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v49;
  mlir::CallGraphNode *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t OperandRange;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v71;
  uint64_t v72;
  _QWORD v73[2];
  uint64_t v74[2];
  __int128 v75;
  char v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[40];
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  _QWORD v89[23];

  v89[22] = *MEMORY[0x1E0C80C00];
  v80 = a6;
  LOBYTE(v81) = 0;
  v82 = 0;
  v83 = a7;
  v84 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v80);
    if (v82)
      v82 = 0;
    mlir::OperationName::OperationName(&v81, "anec.gather_nd", 14, Context);
    v82 = 1;
  }
  v85 = a4;
  v86 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (!mlir::anec::GatherNDAdaptor::verify(&v80, v18))
  {
    if (!a3)
      return 0;
    mlir::emitError((uint64_t)a2, (uint64_t)&v87);
    if (v87)
      mlir::Diagnostic::operator<<((uint64_t)&v88, "Failed to verify adaptor");
    v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v87);
    if (v87)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v87);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v88);
    return v53;
  }
  v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
  v20 = (uint64_t)v19;
  if (!v19)
    goto LABEL_18;
  v21 = *v19;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_18;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_18:
    v30 = 0;
  v74[0] = v20;
  v74[1] = v30;
  v31 = (_QWORD *)mlir::TypeRange::dereference_iterator(a9, 1);
  v32 = v31;
  if (!v31)
    goto LABEL_28;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_28;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_28:
    v42 = 0;
  v73[0] = v32;
  v73[1] = v42;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v74);
  v44 = v43;
  IndexFromDim = mlir::anec::getIndexFromDim(1, v43);
  if (v46)
  {
    v47 = IndexFromDim;
    v87 = v89;
    v88 = 0x500000000;
    Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
    v49 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v80);
    v50 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v49, **(_QWORD **)(v81 + 96));
    if ((v51 & 1) != 0)
      v52 = *((_QWORD *)v50 + 1);
    else
      v52 = 0;
    mlir::getValues<unsigned long long>(v52, (uint64_t)&v87);
    v54 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73)
                    + 8 * v47);
    v55 = v88;
    v77 = v79;
    v78 = 0x500000000;
    if (!v44)
      goto LABEL_61;
    if ((unint64_t)v44 < 6)
    {
      v56 = 0;
      v57 = v44;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v44, 8);
      v56 = v78;
      v57 = v44 - v78;
      if (v44 == v78)
      {
LABEL_45:
        LODWORD(v78) = v44;
        if (v44 >= 1)
        {
          v58 = 0;
          v59 = v54 / v55;
          do
          {
            v65 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v74) + 8 * v58);
            v64 = v59;
            if (v47 != v58)
              v64 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73) + 8 * v58);
            if ((_DWORD)v88)
            {
              v66 = 8 * v88;
              v60 = (char *)v87;
              while (*(_QWORD *)v60 != v58)
              {
                v60 += 8;
                v66 -= 8;
                if (!v66)
                {
                  v60 = (char *)v87 + 8 * v88;
                  break;
                }
              }
            }
            else
            {
              v60 = (char *)v87;
            }
            v61 = v60 - (_BYTE *)v87;
            if (v65 <= v64)
              v62 = v64;
            else
              v62 = v65;
            v63 = v77;
            if (v88 == v61 >> 3)
              v64 = v62;
            *((_QWORD *)v77 + v58++) = v64;
          }
          while (v58 != v44);
          LODWORD(v44) = v78;
          goto LABEL_63;
        }
LABEL_61:
        v63 = v77;
LABEL_63:
        *(_QWORD *)&v75 = v63;
        *((_QWORD *)&v75 + 1) = v44;
        v76 = 1;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v74);
        v68 = mlir::ShapedType::cloneWith(v74, &v75, OperandRange);
        v69 = *(unsigned int *)(a11 + 8);
        if (v69 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v69 + 1, 8);
          LODWORD(v69) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v69) = v68;
        ++*(_DWORD *)(a11 + 8);
        if (v77 != v79)
          free(v77);
        if (v87 != v89)
          free(v87);
        return 1;
      }
    }
    bzero((char *)v77 + 8 * v56, 8 * v57);
    goto LABEL_45;
  }
  v71 = (uint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::anec::GatherNDAdaptor::verify(v71, v72);
}

uint64_t mlir::anec::GatherNDAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  _QWORD v34[2];
  uint64_t OperandRange;
  _QWORD *v36;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD v41[24];

  v41[23] = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v39))
    {
      v5 = "'anec.gather_nd' op requires attribute 'axes'";
      goto LABEL_33;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v37[0] = v6;
    v37[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v37);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v40 = v18;
    v41[0] = v28;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v40);
    if (v29 == 1 && mlir::hasUniqueValues((uint64_t)v6))
    {
      v36 = v6;
      if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v36))
      {
        v33 = v6;
        v34[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v33);
        v34[1] = v30;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v34);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
          return 1;
      }
    }
  }
  v5 = "'anec.gather_nd' op attribute 'axes' failed to satisfy constraint: ui64 unique not empty elements attribute of ranks 1";
LABEL_33:
  v37[0] = v5;
  v38 = 259;
  mlir::emitError(a2, (uint64_t)v37, (uint64_t)&v40);
  v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v41);
  return v31;
}

void mlir::anec::GatherND::getZinIrUnitInfo(mlir::anec::GatherND *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t MultipliersAttr;
  mlir::anec **v6;
  mlir::anec **v7;
  _DWORD *v8;
  int v9;
  uint64_t DimFromIndex;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  _OWORD *v25;
  int *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[7];

  v34[6] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *(_OWORD *)(v4 + 138) = 0u;
  *(_QWORD *)v4 = off_1E0E136D8;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 20) = 0;
  v31 = (void **)(v4 + 160);
  *((_QWORD *)v4 + 21) = 0;
  *((_QWORD *)v4 + 22) = 0;
  v32 = v34;
  v33 = 0x600000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(MultipliersAttr, (uint64_t)&v32);
  v6 = (mlir::anec **)v32;
  if ((_DWORD)v33)
  {
    v30 = a2;
    v7 = (mlir::anec **)((char *)v32 + 8 * v33);
    do
    {
      v9 = 5;
      DimFromIndex = mlir::anec::getDimFromIndex(*v6, 5uLL);
      if ((DimFromIndex & 0xFF00000000) != 0)
        v9 = dword_1812330C0[(int)DimFromIndex];
      v12 = (int *)*((_QWORD *)v4 + 21);
      v11 = *((_QWORD *)v4 + 22);
      if ((unint64_t)v12 < v11)
      {
        *v12 = v9;
        v8 = v12 + 1;
      }
      else
      {
        v13 = (int *)*v31;
        v14 = (char *)v12 - (_BYTE *)*v31;
        v15 = v14 >> 2;
        v16 = (v14 >> 2) + 1;
        if (v16 >> 62)
          abort();
        v17 = v11 - (_QWORD)v13;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = operator new(4 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = (int *)&v19[4 * v15];
        *v20 = v9;
        v8 = v20 + 1;
        if (v12 != v13)
        {
          v21 = (char *)v12 - (char *)v13 - 4;
          if (v21 < 0x2C)
            goto LABEL_35;
          if ((unint64_t)((char *)v12 - v19 - v14) < 0x20)
            goto LABEL_35;
          v22 = (v21 >> 2) + 1;
          v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
          v24 = &v12[v23 / 0xFFFFFFFFFFFFFFFCLL];
          v20 = (int *)((char *)v20 - v23);
          v25 = &v19[4 * v15 - 16];
          v26 = v12 - 4;
          v27 = v22 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v28 = *(_OWORD *)v26;
            *(v25 - 1) = *((_OWORD *)v26 - 1);
            *v25 = v28;
            v25 -= 2;
            v26 -= 8;
            v27 -= 8;
          }
          while (v27);
          v12 = v24;
          if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_35:
            do
            {
              v29 = *--v12;
              *--v20 = v29;
            }
            while (v12 != v13);
          }
        }
        *((_QWORD *)v4 + 20) = v20;
        *((_QWORD *)v4 + 21) = v8;
        *((_QWORD *)v4 + 22) = &v19[4 * v18];
        if (v13)
          operator delete(v13);
      }
      *((_QWORD *)v4 + 21) = v8;
      ++v6;
    }
    while (v6 != v7);
    v6 = (mlir::anec **)v32;
    a2 = v30;
  }
  *a2 = v4;
  if (v6 != v34)
    free(v6);
}

uint64_t mlir::anec::GatherND::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t NumElements;
  uint64_t i;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  const void **v20;
  std::ios_base *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  mlir::Operation *v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t MultipliersAttr;
  _QWORD v32[6];
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41[19];
  void *__p;
  uint64_t v43;
  _BYTE v44[64];
  char buffer[8];
  _BYTE v46[8];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  ANECGatherLayerDescInitialize();
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  v32[0] = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&MultipliersAttr);
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  v7 = v6;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(buffer, MultipliersAttr, 0);
  v8 = MultipliersAttr;
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&MultipliersAttr);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v33, v8, NumElements);
  for (i = 1; ; ++i)
  {
    v11 = *(void ***)buffer == v33 && v46[0] == v34;
    if (v11 && v47 == v35)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)buffer, (llvm::APInt *)&__p);
    v12 = v43;
    if (v43 >= 0x41)
    {
      if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        v13 = *(_QWORD *)__p;
      else
        v13 = -1;
    }
    else
    {
      v13 = (uint64_t)__p;
    }
    if (v43 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v47;
  }
  v14 = 1;
  *(_QWORD *)buffer = 1;
  v33 = 0;
  ANECUnitValidatorCreate();
  __p = v44;
  v43 = 0x100000000;
  v29 = 0;
  v30 = 0;
  if (ANECValidateGatherLayer())
  {
    v26 = *a1;
    v15 = MEMORY[0x1E0DE4FD0];
    v16 = MEMORY[0x1E0DE4FD0] + 104;
    v41[0] = MEMORY[0x1E0DE4FD0] + 104;
    v17 = MEMORY[0x1E0DE4FD0] + 64;
    v18 = MEMORY[0x1E0DE4F50];
    v19 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v20 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v35 = MEMORY[0x1E0DE4FD0] + 64;
    v33 = (void **)v19;
    *(void ***)((char *)&v33 + (_QWORD)*(v19 - 3)) = (void **)v20;
    v34 = 0;
    v21 = (std::ios_base *)((char *)&v33 + (_QWORD)*(v33 - 3));
    std::ios_base::init(v21, &v36);
    v21[1].__vftable = 0;
    v21[1].__fmtflags_ = -1;
    v22 = *(_QWORD *)(v18 + 40);
    v35 = *(_QWORD *)(v18 + 32);
    *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v22;
    v33 = *(void ***)(v18 + 8);
    *(void ***)((char *)&v33 + (_QWORD)*(v33 - 3)) = *(void ***)(v18 + 48);
    v41[0] = v16;
    v33 = (void **)(v15 + 24);
    v35 = v17;
    std::streambuf::basic_streambuf();
    v23 = MEMORY[0x1E0DE4FB8] + 16;
    v36 = MEMORY[0x1E0DE4FB8] + 16;
    v38 = 0u;
    v39 = 0u;
    v40 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v33 = *(void ***)v18;
    v24 = *(_QWORD *)(v18 + 72);
    *(void ***)((char *)&v33 + (_QWORD)*(v33 - 3)) = *(void ***)(v18 + 64);
    v35 = v24;
    v36 = v23;
    if (SBYTE7(v39) < 0)
      operator delete((void *)v38);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v41);
    v37 = 260;
    v33 = &v27;
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v46);
    if (v28 < 0)
      operator delete(v27);
  }
  if (__p != v44)
    free(__p);
  ANECUnitValidatorDelete();
  return v14;
}

uint64_t mlir::anec::GatherND::addOpToNetwork(mlir::anec::GatherND *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::GatherND::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::ArgMinMax::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  mlir::CallGraphNode *Value;
  uint64_t v32;
  mlir::CallGraphNode *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *ArgAttrsAttr;
  uint64_t v42;
  mlir::MLIRContext *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58[2];
  __int128 v59;
  char v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[48];
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[23];

  v73[22] = *MEMORY[0x1E0C80C00];
  v64 = a6;
  LOBYTE(v65) = 0;
  v66 = 0;
  v67 = a7;
  v68 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v64);
    if (v66)
      v66 = 0;
    mlir::OperationName::OperationName(&v65, "anec.arg_min_max", 16, Context);
    v66 = 1;
  }
  v69 = a4;
  v70 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (mlir::anec::ArgMinMaxAdaptor::verify(&v64, v18))
  {
    v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
    v20 = (uint64_t)v19;
    if (!v19)
      goto LABEL_18;
    v21 = *v19;
    v22 = mlir::TypeID::get<mlir::ShapedType>();
    v23 = *(unsigned int *)(v21 + 16);
    if (!(_DWORD)v23)
      goto LABEL_18;
    v24 = *(_QWORD **)(v21 + 8);
    v25 = &v24[2 * v23];
    do
    {
      v26 = v23 >> 1;
      v27 = &v24[2 * (v23 >> 1)];
      v29 = *v27;
      v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22)
        v24 = v28;
      else
        v23 = v26;
    }
    while (v23);
    if (v24 != v25 && *v24 == v22)
      v30 = v24[1];
    else
LABEL_18:
      v30 = 0;
    v58[0] = v20;
    v58[1] = v30;
    v71 = v73;
    v72 = 0x600000000;
    Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v64);
    v32 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v64);
    v33 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v32 - 64), **(_QWORD **)(v65 + 96));
    if ((v34 & 1) != 0)
      v35 = *((_QWORD *)v33 + 1);
    else
      v35 = 0;
    mlir::getValues<long long>(v35, (uint64_t)&v71);
    if ((_DWORD)v72)
    {
      v37 = (uint64_t *)v71;
      v38 = 8 * v72;
      while (1)
      {
        v39 = *v37;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v58);
        if (v40 <= v39)
          break;
        ++v37;
        v38 -= 8;
        if (!v38)
          goto LABEL_32;
      }
      v55 = v58[0];
      v56 = *(unsigned int *)(a11 + 8);
      if (v56 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v56 + 1, 8);
        LODWORD(v56) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v56) = v55;
      ++*(_DWORD *)(a11 + 8);
      goto LABEL_47;
    }
LABEL_32:
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v58);
    v42 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v58);
    v44 = (_BYTE *)(v42 + 8 * (_QWORD)v43);
    v61 = v63;
    v62 = 0x600000000;
    v45 = v44 - ArgAttrsAttr;
    if ((unint64_t)(v44 - ArgAttrsAttr) < 0x31)
    {
      v46 = 0;
      v47 = v63;
      if (v44 == ArgAttrsAttr)
      {
LABEL_37:
        v48 = v46 + ((unint64_t)v45 >> 3);
        LODWORD(v62) = v48;
        if ((_DWORD)v72)
        {
          v49 = (uint64_t *)v71;
          v50 = 8 * v72;
          do
          {
            v51 = *v49++;
            *(_QWORD *)&v47[8 * v51] = 1;
            v50 -= 8;
          }
          while (v50);
        }
        v52 = mlir::Float16Type::get(this, v43);
        *(_QWORD *)&v59 = v47;
        *((_QWORD *)&v59 + 1) = v48;
        v60 = 1;
        v53 = mlir::ShapedType::cloneWith(v58, &v59, v52);
        v54 = *(unsigned int *)(a11 + 8);
        if (v54 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v54 + 1, 8);
          LODWORD(v54) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v54) = v53;
        ++*(_DWORD *)(a11 + 8);
        if (v61 != v63)
          free(v61);
LABEL_47:
        if (v71 != v73)
          free(v71);
        return 1;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v45 >> 3, 8);
      v46 = v62;
      v47 = v61;
      if (v44 == ArgAttrsAttr)
        goto LABEL_37;
    }
    memcpy(&v47[8 * v46], ArgAttrsAttr, v44 - ArgAttrsAttr);
    v46 = v62;
    v47 = v61;
    goto LABEL_37;
  }
  if (!a3)
    return 0;
  mlir::emitError((uint64_t)a2, (uint64_t)&v71);
  if (v71)
    mlir::Diagnostic::operator<<((uint64_t)&v72, "Failed to verify adaptor");
  v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
  if (v71)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v72);
  return v36;
}

uint64_t mlir::anec::ArgMinMaxAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *Value;
  const char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *ArgAttrsAttr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t *v35;
  uint64_t OperandRange;
  uint64_t *v37;
  uint64_t *v38[2];
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *Type;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  __int16 v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t *v53;
  _QWORD v54[24];

  v54[23] = *MEMORY[0x1E0C80C00];
  v51 = *a1;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v51);
  v50 = 0;
  while (1)
  {
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v51))
    {
      v5 = "'anec.arg_min_max' op requires attribute 'axes'";
LABEL_26:
      v47 = (uint64_t *)v5;
      v49 = 259;
      mlir::emitError(a2, (uint64_t)&v47, (uint64_t)&v53);
      v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
      if (v53)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
      return v9;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  v50 = (uint64_t *)*((_QWORD *)Value + 1);
  while (1)
  {
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v51))
    {
      v5 = "'anec.arg_min_max' op requires attribute 'kernel_size'";
      goto LABEL_26;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(Value))
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  v6 = (uint64_t *)*((_QWORD *)Value + 1);
  v46 = v6;
  while (1)
  {
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v51))
    {
      v5 = "'anec.arg_min_max' op requires attribute 'mode'";
      goto LABEL_26;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(Value))
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  v7 = *((_QWORD *)Value + 1);
  v45 = v7;
  while (1)
  {
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v51))
    {
      v5 = "'anec.arg_min_max' op requires attribute 'pad_values'";
      goto LABEL_26;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion(Value))
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  v8 = (uint64_t *)*((_QWORD *)Value + 1);
  v44 = v8;
  while (1)
  {
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v51))
    {
      v5 = "'anec.arg_min_max' op requires attribute 'stride_values'";
      goto LABEL_26;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 32) == mlir::CallGraphNode::getCallableRegion(Value))
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  v11 = (uint64_t *)*((_QWORD *)Value + 1);
  v43 = v11;
  if (!v50)
    goto LABEL_38;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)v50))
    goto LABEL_55;
  v47 = mlir::Attribute::cast<mlir::ElementsAttr>(&v50);
  v48 = v12;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v47);
  v53 = mlir::Type::cast<mlir::ShapedType>(&Type);
  v54[0] = v13;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
  if (v14)
  {
    v38[0] = mlir::Attribute::cast<mlir::ElementsAttr>(&v50);
    v38[1] = v15;
    v39 = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
    v40 = mlir::Type::cast<mlir::ShapedType>(&v39);
    v41 = v16;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v40);
    if (v17 != 1)
      goto LABEL_55;
  }
  if (mlir::hasUniqueValues((uint64_t)v50)
    && (v37 = v50, mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v37))
    && (v35 = v50,
        v52[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35),
        v52[1] = v18,
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v52),
        mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
  {
LABEL_38:
    if (v7 && (llvm::isa<mlir::anec::ArgMinMaxModeAttr,mlir::Attribute>(&v45) & 1) == 0)
    {
      v34 = "'anec.arg_min_max' op attribute 'mode' failed to satisfy constraint: valid ArgMinMaxMode";
    }
    else
    {
      if (!v6)
        goto LABEL_63;
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v6))
        goto LABEL_56;
      v47 = mlir::Attribute::cast<mlir::ElementsAttr>(&v46);
      v48 = v19;
      v38[0] = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v47);
      v53 = mlir::Type::cast<mlir::ShapedType>(v38);
      v54[0] = v20;
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
      v52[0] = 2;
      if (v22 != 1)
        goto LABEL_56;
      if (*ArgAttrsAttr == v52[0]
        && (v39 = v46,
            v40 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39),
            v41 = v23,
            Type = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v40),
            mlir::Type::isUnsignedInteger((mlir::Type *)&Type, 64)))
      {
LABEL_63:
        if (!v11)
          goto LABEL_64;
        if (!mlir::DenseIntElementsAttr::classof((uint64_t)v11))
          goto LABEL_58;
        v47 = mlir::Attribute::cast<mlir::ElementsAttr>(&v43);
        v48 = v24;
        v38[0] = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v47);
        v53 = mlir::Type::cast<mlir::ShapedType>(v38);
        v54[0] = v25;
        v26 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
        v52[0] = 2;
        if (v27 != 1)
          goto LABEL_58;
        if (*v26 == v52[0]
          && (v39 = v43,
              v40 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39),
              v41 = v28,
              Type = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v40),
              mlir::Type::isUnsignedInteger((mlir::Type *)&Type, 64)))
        {
LABEL_64:
          if (!v8)
            return 1;
          if (mlir::DenseIntElementsAttr::classof((uint64_t)v8))
          {
            v47 = mlir::Attribute::cast<mlir::ElementsAttr>(&v44);
            v48 = v29;
            v38[0] = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v47);
            v53 = mlir::Type::cast<mlir::ShapedType>(v38);
            v54[0] = v30;
            v31 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
            v52[0] = 4;
            if (v32 == 1 && *v31 == v52[0])
            {
              v39 = v44;
              v40 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
              v41 = v33;
              Type = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v40);
              if (mlir::Type::isUnsignedInteger((mlir::Type *)&Type, 64))
                return 1;
            }
          }
          v34 = "'anec.arg_min_max' op attribute 'pad_values' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        }
        else
        {
LABEL_58:
          v34 = "'anec.arg_min_max' op attribute 'stride_values' failed to satisfy constraint: ui64 elements attribute of shape {2}";
        }
      }
      else
      {
LABEL_56:
        v34 = "'anec.arg_min_max' op attribute 'kernel_size' failed to satisfy constraint: ui64 elements attribute of shape {2}";
      }
    }
  }
  else
  {
LABEL_55:
    v34 = "'anec.arg_min_max' op attribute 'axes' failed to satisfy constraint: ui64 unique not empty elements attribute of ranks 0/1";
  }
  v47 = (uint64_t *)v34;
  v49 = 259;
  mlir::emitError(a2, (uint64_t)&v47, (uint64_t)&v53);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v53);
  return v9;
}

void mlir::anec::ArgMinMax::getZinIrUnitInfo(mlir::anec::ArgMinMax *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t AxesAttr;
  mlir::anec *v18;
  unint64_t v19;
  uint64_t DimFromIndex;
  int v21;
  uint64_t Int;
  int v23;
  int v24;
  uint64_t KernelSizeAttr;
  uint64_t StrideValuesAttr;
  uint64_t PadValuesAttr;
  _BYTE *v28;
  _QWORD v29[2];
  void *v30[2];
  _BYTE v31[48];
  void *v32[2];
  _BYTE v33[48];
  void *v34[2];
  _BYTE v35[48];
  void *v36[2];
  _QWORD v37[7];

  v37[6] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x80uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13808;
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  *((_OWORD *)v4 + 5) = v5;
  *((_QWORD *)v4 + 13) = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 12) = 0;
  *((_DWORD *)v4 + 30) = 0;
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v29[0] = v6;
  v29[1] = v16;
  v36[0] = v37;
  v36[1] = (void *)0x600000000;
  AxesAttr = mlir::anec::ArgMinMax::getAxesAttr((mlir::Operation **)this);
  mlir::getValues<long long>(AxesAttr, (uint64_t)v36);
  v18 = *(mlir::anec **)v36[0];
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
  DimFromIndex = mlir::anec::getDimFromIndex(v18, v19);
  if ((DimFromIndex & 0xFF00000000) == 0)
    std::__throw_bad_optional_access[abi:nn180100]();
  v21 = DimFromIndex;
  v34[0] = (void *)mlir::anec::ArgMinMax::getModeAttr((mlir::Operation **)this);
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v34);
  if (Int)
    v23 = 4;
  else
    v23 = 2;
  if (Int)
    v24 = 3;
  else
    v24 = 1;
  if (v21 != 1)
    v23 = v24;
  *((_DWORD *)v4 + 30) = v23;
  v34[0] = v35;
  v34[1] = (void *)0x600000000;
  KernelSizeAttr = mlir::anec::ArgMinMax::getKernelSizeAttr((mlir::Operation **)this);
  mlir::getValues<long long>(KernelSizeAttr, (uint64_t)v34);
  *((int32x2_t *)v4 + 10) = vmovn_s64(*(int64x2_t *)v34[0]);
  if (v21 == 3 || (*((_DWORD *)v4 + 20) = 1, v21 != 4))
    *((_DWORD *)v4 + 21) = 1;
  v32[0] = v33;
  v32[1] = (void *)0x600000000;
  StrideValuesAttr = mlir::anec::ArgMinMax::getStrideValuesAttr((mlir::Operation **)this);
  mlir::getValues<long long>(StrideValuesAttr, (uint64_t)v32);
  *((int32x2_t *)v4 + 11) = vmovn_s64(*(int64x2_t *)v32[0]);
  v30[0] = v31;
  v30[1] = (void *)0x600000000;
  PadValuesAttr = mlir::anec::ArgMinMax::getPadValuesAttr((mlir::Operation **)this);
  mlir::getValues<long long>(PadValuesAttr, (uint64_t)v30);
  v28 = v30[0];
  *((int32x4_t *)v4 + 6) = vuzp1q_s32(*((int32x4_t *)v30[0] + 1), *(int32x4_t *)v30[0]);
  *a2 = v4;
  if (v28 != v31)
    free(v28);
  if (v32[0] != v33)
    free(v32[0]);
  if (v34[0] != v35)
    free(v34[0]);
  if (v36[0] != v37)
    free(v36[0]);
}

uint64_t mlir::anec::ArgMinMax::getMode(mlir::Operation **this)
{
  uint64_t ModeAttr;

  ModeAttr = mlir::anec::ArgMinMax::getModeAttr(this);
  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&ModeAttr);
}

uint64_t mlir::anec::ArgMinMax::verifyWithANEC(mlir::Operation **a1, mlir::MemoryMapperInterface *a2, unint64_t a3)
{
  uint64_t AxesAttr;
  mlir::Operation *v7;
  uint64_t v8;
  mlir::anec *v9;
  unint64_t v10;
  uint64_t DimFromIndex;
  int v12;
  uint64_t Int;
  const __CFString *v14;
  const __CFString *v15;
  uint64_t KernelSizeAttr;
  uint64_t StrideValuesAttr;
  uint64_t PadValuesAttr;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  const void **v24;
  std::ios_base *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  mlir::Operation *v29;
  void *v30;
  uint64_t v31;
  mlir::Operation *v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  const __CFString *v39;
  int8x16_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  const void **v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t (**v55)(llvm::detail::format_adapter *__hidden);
  unint64_t v56;
  _QWORD v57[2];
  _QWORD v58[3];
  __int128 __p;
  __int128 v60;
  int v61;
  uint64_t v62[19];
  void *v63[2];
  _BYTE v64[16];
  __int16 v65;
  void *v66[2];
  _BYTE v67[48];
  void *v68[2];
  _BYTE v69[48];
  void *v70[2];
  _BYTE v71[48];
  void *v72;
  uint64_t v73;
  _BYTE v74[48];
  char buffer[8];
  _QWORD v76[66];

  v76[63] = *MEMORY[0x1E0C80C00];
  v38 = *(_OWORD *)a2;
  v72 = v74;
  v73 = 0x600000000;
  AxesAttr = mlir::anec::ArgMinMax::getAxesAttr(a1);
  mlir::getValues<long long>(AxesAttr, (uint64_t)&v72);
  if (v73 >= 3)
  {
    v7 = *a1;
    v51 = (const void **)"failed: a maximum of two axes can be handled by the operation, but found {0}";
    v52 = 76;
    v53 = v57;
    v54 = 1;
    v55 = &off_1E0E23E90;
    v56 = v73;
    v57[0] = &v55;
    v65 = 263;
    v63[0] = &v51;
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
LABEL_30:
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v76);
    goto LABEL_31;
  }
  v9 = *(mlir::anec **)v72;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v38);
  DimFromIndex = mlir::anec::getDimFromIndex(v9, v10);
  if ((DimFromIndex & 0xFF00000000) == 0)
  {
    v29 = *a1;
    v30 = v72;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v38);
    v51 = (const void **)"failed: found axis ({0}) incompatible with rank of tensor input ({1}). ArgMin/Max is supported "
                         "only on Channel or Spatial dimensions.";
    v52 = 133;
    v53 = v58;
    v54 = 2;
    v55 = &off_1E0E23E00;
    v56 = (unint64_t)v30;
    v57[0] = &off_1E0E23EC0;
    v57[1] = v31;
    v58[0] = &v55;
    v58[1] = v57;
    v65 = 263;
    v63[0] = &v51;
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    goto LABEL_30;
  }
  v12 = DimFromIndex;
  *(_QWORD *)buffer = mlir::anec::ArgMinMax::getModeAttr(a1);
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)buffer);
  if (v12 == 1)
    v14 = CFSTR("ChannelArgMin");
  else
    v14 = CFSTR("SpatialArgMin");
  v15 = CFSTR("SpatialArgMax");
  if (v12 == 1)
    v15 = CFSTR("ChannelArgMax");
  if (Int == 1)
    v14 = v15;
  v39 = v14;
  v70[0] = v71;
  v70[1] = (void *)0x600000000;
  KernelSizeAttr = mlir::anec::ArgMinMax::getKernelSizeAttr(a1);
  mlir::getValues<unsigned long long>(KernelSizeAttr, (uint64_t)v70);
  v8 = 1;
  v41 = 1;
  v40 = vextq_s8(*(int8x16_t *)v70[0], *(int8x16_t *)v70[0], 8uLL);
  v68[0] = v69;
  v68[1] = (void *)0x600000000;
  StrideValuesAttr = mlir::anec::ArgMinMax::getStrideValuesAttr(a1);
  mlir::getValues<unsigned long long>(StrideValuesAttr, (uint64_t)v68);
  v44 = 1;
  v43 = *(_QWORD *)v68[0];
  v42 = *((_QWORD *)v68[0] + 1);
  v66[0] = v67;
  v66[1] = (void *)0xC00000000;
  PadValuesAttr = mlir::anec::ArgMinMax::getPadValuesAttr(a1);
  mlir::getValues<int>(PadValuesAttr, (uint64_t)v66);
  v49 = 0;
  v50 = 0;
  v47 = *(_DWORD *)v66[0];
  v48 = *((_DWORD *)v66[0] + 1);
  v45 = *((_DWORD *)v66[0] + 2);
  v46 = *((_DWORD *)v66[0] + 3);
  *(_QWORD *)buffer = 1;
  v51 = 0;
  ANECUnitValidatorCreate();
  v63[0] = v64;
  v63[1] = (void *)0x100000000;
  v36 = 0;
  v37 = 0;
  if (ANECValidateArgMinMaxLayer())
  {
    v33 = *a1;
    v19 = MEMORY[0x1E0DE4FD0];
    v20 = MEMORY[0x1E0DE4FD0] + 104;
    v62[0] = MEMORY[0x1E0DE4FD0] + 104;
    v21 = MEMORY[0x1E0DE4FD0] + 64;
    v22 = MEMORY[0x1E0DE4F50];
    v23 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v24 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v53 = (_QWORD *)(MEMORY[0x1E0DE4FD0] + 64);
    v51 = v23;
    *(const void ***)((char *)&v51 + (_QWORD)*(v23 - 3)) = v24;
    v52 = 0;
    v25 = (std::ios_base *)((char *)&v51 + (_QWORD)*(v51 - 3));
    std::ios_base::init(v25, &v54);
    v25[1].__vftable = 0;
    v25[1].__fmtflags_ = -1;
    v26 = *(_QWORD **)(v22 + 40);
    v53 = *(_QWORD **)(v22 + 32);
    *(_QWORD **)((char *)&v53 + *(v53 - 3)) = v26;
    v51 = *(const void ***)(v22 + 8);
    *(const void ***)((char *)&v51 + (_QWORD)*(v51 - 3)) = *(const void ***)(v22 + 48);
    v62[0] = v20;
    v51 = (const void **)(v19 + 24);
    v53 = (_QWORD *)v21;
    std::streambuf::basic_streambuf();
    v27 = MEMORY[0x1E0DE4FB8] + 16;
    v54 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v60 = 0u;
    v61 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v51 = *(const void ***)v22;
    v28 = *(_QWORD **)(v22 + 72);
    *(const void ***)((char *)&v51 + (_QWORD)*(v51 - 3)) = *(const void ***)(v22 + 64);
    v53 = v28;
    v54 = v27;
    if (SBYTE7(v60) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v62);
    LOWORD(v55) = 260;
    v51 = (const void **)&v34;
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v76);
    if (v35 < 0)
      operator delete(v34);
  }
  if (v63[0] != v64)
    free(v63[0]);
  ANECUnitValidatorDelete();
  if (v66[0] != v67)
    free(v66[0]);
  if (v68[0] != v69)
    free(v68[0]);
  if (v70[0] != v71)
    free(v70[0]);
LABEL_31:
  if (v72 != v74)
    free(v72);
  return v8;
}

uint64_t mlir::anec::ArgMinMax::addOpToNetwork(mlir::anec::ArgMinMax *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::ArgMinMax::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::GlobalArgMinMax::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int Axis;
  uint64_t v32;
  _BYTE *ArgAttrsAttr;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  mlir::MLIRContext *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50[2];
  __int128 v51;
  char v52;
  uint64_t v53;
  char v54[8];
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[23];

  v62[22] = *MEMORY[0x1E0C80C00];
  v53 = a6;
  v54[0] = 0;
  v55 = 0;
  v56 = a7;
  v57 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v53);
    if (v55)
      v55 = 0;
    mlir::OperationName::OperationName(v54, "anec.global_arg_min_max", 23, Context);
    v55 = 1;
  }
  v58 = a4;
  v59 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (mlir::anec::GlobalArgMinMaxAdaptor::verify(&v53, v18))
  {
    v19 = (uint64_t *)mlir::TypeRange::dereference_iterator(a9, 0);
    v20 = (uint64_t)v19;
    if (!v19)
      goto LABEL_18;
    v21 = *v19;
    v22 = mlir::TypeID::get<mlir::ShapedType>();
    v23 = *(unsigned int *)(v21 + 16);
    if (!(_DWORD)v23)
      goto LABEL_18;
    v24 = *(_QWORD **)(v21 + 8);
    v25 = &v24[2 * v23];
    do
    {
      v26 = v23 >> 1;
      v27 = &v24[2 * (v23 >> 1)];
      v29 = *v27;
      v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22)
        v24 = v28;
      else
        v23 = v26;
    }
    while (v23);
    if (v24 != v25 && *v24 == v22)
      v30 = v24[1];
    else
LABEL_18:
      v30 = 0;
    v50[0] = v20;
    v50[1] = v30;
    Axis = mlir::anec::detail::GlobalArgMinMaxGenericAdaptorBase::getAxis((mlir::anec::detail::GlobalArgMinMaxGenericAdaptorBase *)&v53);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
    if (v32 <= Axis)
    {
      v40 = v50[0];
      v41 = *(unsigned int *)(a11 + 8);
      if (v41 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
        LODWORD(v41) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v41) = v40;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
    v34 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
    v36 = (_BYTE *)(v34 + 8 * v35);
    v60 = v62;
    v61 = 0x600000000;
    v37 = v36 - ArgAttrsAttr;
    if ((unint64_t)(v36 - ArgAttrsAttr) < 0x31)
    {
      v38 = 0;
      if (v36 == ArgAttrsAttr)
      {
LABEL_34:
        LODWORD(v61) = v38 + ((unint64_t)v37 >> 3);
        v42 = mlir::anec::detail::GlobalArgMinMaxGenericAdaptorBase::getAxis((mlir::anec::detail::GlobalArgMinMaxGenericAdaptorBase *)&v53);
        v43 = v60;
        *((_QWORD *)v60 + v42) = 1;
        v44 = v61;
        v46 = mlir::Float16Type::get(this, v45);
        *(_QWORD *)&v51 = v43;
        *((_QWORD *)&v51 + 1) = v44;
        v52 = 1;
        v47 = mlir::ShapedType::cloneWith(v50, &v51, v46);
        v48 = *(unsigned int *)(a11 + 8);
        if (v48 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
          LODWORD(v48) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
        ++*(_DWORD *)(a11 + 8);
        if (v60 != v62)
          free(v60);
        return 1;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v62, v37 >> 3, 8);
      v38 = v61;
      if (v36 == ArgAttrsAttr)
        goto LABEL_34;
    }
    memcpy((char *)v60 + 8 * v38, ArgAttrsAttr, v36 - ArgAttrsAttr);
    v38 = v61;
    goto LABEL_34;
  }
  if (!a3)
    return 0;
  mlir::emitError((uint64_t)a2, (uint64_t)&v60);
  if (v60)
    mlir::Diagnostic::operator<<((uint64_t)&v61, "Failed to verify adaptor");
  v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v60);
  if (v60)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v61);
  return v39;
}

uint64_t mlir::anec::GlobalArgMinMaxAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Value;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v12))
    {
      v5 = "'anec.global_arg_min_max' op requires attribute 'axis'";
      goto LABEL_11;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v6 = *((_QWORD *)i + 1);
  while (1)
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v12))
    {
      v5 = "'anec.global_arg_min_max' op requires attribute 'mode'";
      goto LABEL_11;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
      break;
    i = (mlir::CallGraphNode *)((char *)i + 16);
  }
  v9 = *((_QWORD *)i + 1);
  if (!v6
    || *(_UNKNOWN **)(*(_QWORD *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && (v10[0] = v6,
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10),
        mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)))
  {
    if (!v9)
      return 1;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v10[0] = v9;
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
      if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64))
      {
        v14 = v9;
        if (!mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v14))
          return 1;
        v13 = v9;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) == 1)
          return 1;
      }
    }
    v5 = "'anec.global_arg_min_max' op attribute 'mode' failed to satisfy constraint: valid ArgMinMaxMode";
  }
  else
  {
    v5 = "'anec.global_arg_min_max' op attribute 'axis' failed to satisfy constraint: 32-bit unsigned integer attribute";
  }
LABEL_11:
  v10[0] = v5;
  v11 = 259;
  mlir::emitError(a2, (uint64_t)v10, (uint64_t)&Value);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
  return v7;
}

void *mlir::anec::detail::GlobalArgMinMaxGenericAdaptorBase::getAxis(mlir::anec::detail::GlobalArgMinMaxGenericAdaptorBase *this)
{
  mlir::CallGraphNode *Value;
  uint64_t v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue(this);
  v3 = mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v3 - 16), **(_QWORD **)(*((_QWORD *)this + 1) + 96));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

uint64_t mlir::anec::GlobalArgMinMax::getZinIrUnitInfo@<X0>(mlir::anec::GlobalArgMinMax *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t DimFromIndex;
  int v19;
  uint64_t result;
  int v21;
  _QWORD v22[2];
  void *__p;
  unsigned int v24;
  uint64_t MaxValueAttr;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13C80;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 10) = 0x400000006;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v22[0] = v5;
  v22[1] = v15;
  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&MaxValueAttr, (llvm::APInt *)&__p);
  if (v24 > 0x40)
  {
    v16 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    v16 = __p;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  DimFromIndex = mlir::anec::getDimFromIndex((mlir::anec *)v16, v17);
  if ((DimFromIndex & 0xFF00000000) != 0)
    v19 = dword_1812330C0[(int)DimFromIndex];
  else
    v19 = 5;
  *((_DWORD *)v4 + 21) = v19;
  __p = (void *)mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this);
  result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&__p);
  if (result)
    v21 = 2;
  else
    v21 = 1;
  *((_DWORD *)v4 + 20) = v21;
  *a2 = v4;
  return result;
}

void *mlir::anec::GlobalArgMinMax::getAxis(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t MaxValueAttr;

  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr(this);
  mlir::IntegerAttr::getValue(&MaxValueAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

uint64_t mlir::anec::GlobalArgMinMax::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *this, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mlir::Operation *v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  const __CFString *v26;
  uint64_t ANECDimension;
  const void **v28[2];
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35[19];
  void *v36[2];
  _BYTE v37[64];
  void *__p;
  unsigned int v39[126];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  mlir::CallableOpInterface::getArgAttrsAttr(this);
  v7 = v6;
  v28[0] = (const void **)mlir::anec::ClampedRelu::getMaxValueAttr(a1);
  mlir::IntegerAttr::getValue(v28, (llvm::APInt *)&__p);
  if (v39[0] > 0x40)
  {
    v8 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    v8 = __p;
  }
  __p = (void *)mlir::anec::ClampedRelu::getMinValueAttr(a1);
  mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&__p);
  v26 = CFSTR("Min");
  v9 = 1;
  __p = (void *)1;
  v28[0] = 0;
  ANECUnitValidatorCreate();
  v36[0] = v37;
  v36[1] = (void *)0x100000000;
  v24 = 0;
  v25 = 0;
  if (ANECValidateGlobalArgMinMaxLayer())
  {
    v21 = *a1;
    v10 = MEMORY[0x1E0DE4FD0];
    v11 = MEMORY[0x1E0DE4FD0] + 104;
    v35[0] = MEMORY[0x1E0DE4FD0] + 104;
    v12 = MEMORY[0x1E0DE4FD0] + 64;
    v13 = MEMORY[0x1E0DE4F50];
    v14 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
    v15 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
    v29 = MEMORY[0x1E0DE4FD0] + 64;
    v28[0] = v14;
    *(const void ***)((char *)v28 + (_QWORD)*(v14 - 3)) = v15;
    v28[1] = 0;
    v16 = (std::ios_base *)((char *)v28 + (unint64_t)*(v28[0] - 3));
    std::ios_base::init(v16, &v30);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v17 = *(_QWORD *)(v13 + 40);
    v29 = *(_QWORD *)(v13 + 32);
    *(uint64_t *)((char *)&v29 + *(_QWORD *)(v29 - 24)) = v17;
    v28[0] = *(const void ***)(v13 + 8);
    *(const void ***)((char *)v28 + (unint64_t)*(v28[0] - 3)) = *(const void ***)(v13 + 48);
    v35[0] = v11;
    v28[0] = (const void **)(v10 + 24);
    v29 = v12;
    std::streambuf::basic_streambuf();
    v18 = MEMORY[0x1E0DE4FB8] + 16;
    v30 = MEMORY[0x1E0DE4FB8] + 16;
    v32 = 0u;
    v33 = 0u;
    v34 = 24;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Invalid configuration", 21);
    std::stringbuf::str();
    v28[0] = *(const void ***)v13;
    v19 = *(_QWORD *)(v13 + 72);
    *(const void ***)((char *)v28 + (unint64_t)*(v28[0] - 3)) = *(const void ***)(v13 + 64);
    v29 = v19;
    v30 = v18;
    if (SBYTE7(v33) < 0)
      operator delete((void *)v32);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x186DA15C0](v35);
    v31 = 260;
    v28[0] = (const void **)&v22;
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v39);
    if (v23 < 0)
      operator delete(v22);
  }
  if (v36[0] != v37)
    free(v36[0]);
  ANECUnitValidatorDelete();
  return v9;
}

uint64_t mlir::anec::GlobalArgMinMax::addOpToNetwork(mlir::anec::GlobalArgMinMax *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::GlobalArgMinMax::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::Tile::inferPromotedReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v31;
  mlir::CallGraphNode *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *ArgAttrsAttr;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t OperandRange;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52[2];
  __int128 v53;
  char v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[40];
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _QWORD v67[23];

  v67[22] = *MEMORY[0x1E0C80C00];
  v58 = a6;
  LOBYTE(v59) = 0;
  v60 = 0;
  v61 = a7;
  v62 = a8;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(&v59, "anec.tile", 9, Context);
    v60 = 1;
  }
  v63 = a4;
  v64 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (a3)
    v18 = (uint64_t)a2;
  else
    v18 = v17;
  if (mlir::anec::TileAdaptor::verify(&v58, v18))
  {
    v65 = v63;
    v66 = 0;
    v19 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v65, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v19)
      goto LABEL_18;
    v20 = *v19;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *(unsigned int *)(v20 + 16);
    if (!(_DWORD)v22)
      goto LABEL_18;
    v23 = *(_QWORD **)(v20 + 8);
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
    if (v23 != v24 && *v23 == v21)
      v29 = v23[1];
    else
LABEL_18:
      v29 = 0;
    v52[0] = (uint64_t)v19;
    v52[1] = v29;
    v65 = v67;
    v66 = 0x500000000;
    Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v58);
    v31 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v58);
    v32 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v31, **(_QWORD **)(v59 + 96));
    if ((v33 & 1) != 0)
      v34 = *((_QWORD *)v32 + 1);
    else
      v34 = 0;
    mlir::getValues<unsigned long long>(v34, (uint64_t)&v65);
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
    v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
    v39 = (_BYTE *)(v37 + 8 * v38);
    v55 = v57;
    v56 = 0x500000000;
    v40 = v39 - ArgAttrsAttr;
    if ((unint64_t)(v39 - ArgAttrsAttr) < 0x29)
    {
      v41 = 0;
      v42 = v57;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v40 >> 3, 8);
      v41 = v56;
      v42 = v55;
    }
    if (v39 != ArgAttrsAttr)
    {
      memcpy(&v42[8 * v41], ArgAttrsAttr, v39 - ArgAttrsAttr);
      v41 = v56;
      v42 = v55;
    }
    v43 = v41 + ((unint64_t)v40 >> 3);
    LODWORD(v56) = v43;
    v44 = v66;
    if ((_DWORD)v66 == (_DWORD)v43 && (_DWORD)v66)
    {
      v45 = (uint64_t *)v65;
      v46 = v42;
      do
      {
        v47 = *v45++;
        *v46++ *= v47;
        --v44;
      }
      while (v44);
    }
    *(_QWORD *)&v53 = v42;
    *((_QWORD *)&v53 + 1) = v43;
    v54 = 1;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v52);
    v49 = mlir::ShapedType::cloneWith(v52, &v53, OperandRange);
    v50 = *(unsigned int *)(a11 + 8);
    if (v50 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
      LODWORD(v50) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v50) = v49;
    ++*(_DWORD *)(a11 + 8);
    if (v55 != v57)
      free(v55);
    if (v65 != v67)
      free(v65);
    return 1;
  }
  else if (a3)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v65);
    if (v65)
      mlir::Diagnostic::operator<<((uint64_t)&v66, "Failed to verify adaptor");
    v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
    if (v65)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v66);
  }
  else
  {
    return 0;
  }
  return v35;
}

uint64_t mlir::anec::TileAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Type;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  _QWORD v34[2];
  uint64_t OperandRange;
  _QWORD v36[4];
  __int16 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD v40[24];

  v40[23] = *MEMORY[0x1E0C80C00];
  v38 = *a1;
  for (i = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v38); ; i += 2)
  {
    if (i == (uint64_t *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v38))
    {
      v5 = "'anec.tile' op requires attribute 'multipliers'";
      goto LABEL_31;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i))
      break;
  }
  v6 = (_QWORD *)i[1];
  if (!v6)
    return 1;
  if (mlir::DenseIntElementsAttr::classof(i[1]))
  {
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ElementsAttr>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_16;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_16:
      v16 = 0;
    v36[0] = v6;
    v36[1] = v16;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v36);
    v18 = Type;
    if (!Type)
      goto LABEL_26;
    v19 = *Type;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_26;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_26:
      v28 = 0;
    v39 = v18;
    v40[0] = v28;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v39);
    if (v29 == 1)
    {
      v33 = v6;
      v34[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v33);
      v34[1] = v30;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v34);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        return 1;
    }
  }
  v5 = "'anec.tile' op attribute 'multipliers' failed to satisfy constraint: ui64 elements attribute of rank 1";
LABEL_31:
  v36[0] = v5;
  v37 = 259;
  mlir::emitError(a2, (uint64_t)v36, (uint64_t)&v39);
  v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
  return v31;
}

void mlir::anec::Tile::getZinIrUnitInfo(mlir::anec::Tile *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t MultipliersAttr;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  mlir::anec *i;
  int v20;
  uint64_t v21;
  uint64_t DimFromIndex;
  int v23;
  _DWORD *v24[2];
  void *v25[2];
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x78uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E134C0;
  *((_QWORD *)v4 + 1) = 0;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 28) = 1065353216;
  v25[0] = v26;
  v25[1] = (void *)0x600000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr((mlir::Operation **)this);
  mlir::getValues<unsigned long long>(MultipliersAttr, (uint64_t)v25);
  v6 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *(_QWORD *)v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = (_DWORD *)v10[1];
  else
LABEL_10:
    v16 = 0;
  v24[0] = v6;
  v24[1] = v16;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
  if (v17)
  {
    v18 = v17;
    for (i = 0; i != (mlir::anec *)v18; i = (mlir::anec *)((char *)i + 1))
    {
      v21 = *((_QWORD *)v25[0] + (_QWORD)i);
      DimFromIndex = mlir::anec::getDimFromIndex(i, v18);
      if ((DimFromIndex & 0xFF00000000) != 0)
        v20 = dword_1812330C0[(int)DimFromIndex];
      else
        v20 = 5;
      v23 = v20;
      v24[0] = &v23;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)(v4 + 80), &v23, (uint64_t)&std::piecewise_construct, v24)+ 5) = v21;
    }
  }
  *a2 = v4;
  if (v25[0] != v26)
    free(v25[0]);
}

uint64_t mlir::anec::Tile::verifyWithANEC(mlir::Operation **a1, mlir::CallableOpInterface *a2, unint64_t a3)
{
  uint64_t MultipliersAttr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  const void **v16;
  std::ios_base *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  mlir::Operation *v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Operation *v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[3];
  __int128 __p;
  __int128 v42;
  int v43;
  uint64_t v44[19];
  void *v45[2];
  _WORD v46[32];
  void *v47;
  uint64_t v48;
  _BYTE v49[48];
  char buffer[8];
  _QWORD v51[65];

  v51[63] = *MEMORY[0x1E0C80C00];
  ANECTileLayerDescInitialize();
  v47 = v49;
  v48 = 0x600000000;
  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(a1);
  mlir::getValues<long long>(MultipliersAttr, (uint64_t)&v47);
  v7 = v48;
  mlir::CallableOpInterface::getArgAttrsAttr(a2);
  if (v8 == v7)
  {
    if ((_DWORD)v48 == 4)
    {
      *(_QWORD *)buffer = 1;
      llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v47, (uint64_t)v47 + 16, (uint64_t *)buffer);
    }
    v9 = *((_QWORD *)v47 + 1);
    v30 = *(_QWORD *)v47;
    v33 = v9;
    v34 = 0;
    v31 = *((_OWORD *)v47 + 1);
    v32 = *((_QWORD *)v47 + 4);
    v10 = 1;
    *(_QWORD *)buffer = 1;
    ANECUnitValidatorCreate();
    v45[0] = v46;
    v45[1] = (void *)0x100000000;
    v28 = 0;
    v29 = 0;
    if (ANECValidateTileLayer())
    {
      v25 = *a1;
      v11 = MEMORY[0x1E0DE4FD0];
      v12 = MEMORY[0x1E0DE4FD0] + 104;
      v44[0] = MEMORY[0x1E0DE4FD0] + 104;
      v13 = MEMORY[0x1E0DE4FD0] + 64;
      v14 = MEMORY[0x1E0DE4F50];
      v15 = *(const void ***)(MEMORY[0x1E0DE4F50] + 16);
      v16 = *(const void ***)(MEMORY[0x1E0DE4F50] + 24);
      v36 = (_QWORD *)(MEMORY[0x1E0DE4FD0] + 64);
      v34 = (void **)v15;
      *(void ***)((char *)&v34 + (_QWORD)*(v15 - 3)) = (void **)v16;
      v35 = 0;
      v17 = (std::ios_base *)((char *)&v34 + (_QWORD)*(v34 - 3));
      std::ios_base::init(v17, &v37);
      v17[1].__vftable = 0;
      v17[1].__fmtflags_ = -1;
      v18 = *(_QWORD **)(v14 + 40);
      v36 = *(_QWORD **)(v14 + 32);
      *(_QWORD **)((char *)&v36 + *(v36 - 3)) = v18;
      v34 = *(void ***)(v14 + 8);
      *(void ***)((char *)&v34 + (_QWORD)*(v34 - 3)) = *(void ***)(v14 + 48);
      v44[0] = v12;
      v34 = (void **)(v11 + 24);
      v36 = (_QWORD *)v13;
      std::streambuf::basic_streambuf();
      v19 = MEMORY[0x1E0DE4FB8] + 16;
      v37 = MEMORY[0x1E0DE4FB8] + 16;
      __p = 0u;
      v42 = 0u;
      v43 = 24;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Invalid configuration", 21);
      std::stringbuf::str();
      v34 = *(void ***)v14;
      v20 = *(_QWORD **)(v14 + 72);
      *(void ***)((char *)&v34 + (_QWORD)*(v34 - 3)) = *(void ***)(v14 + 64);
      v36 = v20;
      v37 = v19;
      if (SBYTE7(v42) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x186DA15C0](v44);
      LOWORD(v38[0]) = 260;
      v34 = &v26;
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
      if (*(_QWORD *)buffer)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v51);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v45[0] != v46)
      free(v45[0]);
    ANECUnitValidatorDelete();
  }
  else
  {
    v21 = *a1;
    v22 = v48;
    mlir::CallableOpInterface::getArgAttrsAttr(a2);
    v34 = (void **)"failed: the number of multipliers ({0}) must be equal to rank ({1})";
    v35 = 67;
    v36 = v40;
    v37 = 2;
    v38[0] = &off_1E0E23E90;
    v38[1] = v22;
    v39[0] = &off_1E0E23EC0;
    v39[1] = v23;
    v40[0] = v38;
    v40[1] = v39;
    v46[8] = 263;
    v45[0] = &v34;
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)buffer);
    if (*(_QWORD *)buffer)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)buffer);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v51);
  }
  if (v47 != v49)
    free(v47);
  return v10;
}

uint64_t mlir::anec::Tile::getMultipliersAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::Tile::addOpToNetwork(mlir::anec::Tile *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Tile::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

BOOL mlir::anec::DeQuant::getZinIrUnitInfo@<W0>(mlir::anec::DeQuant *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void *v5;
  llvm::APFloatBase *v6;
  uint64_t v7;
  _BOOL8 result;
  int v9;
  uint64_t MaxValueAttr;
  void *__p;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x90uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13728;
  *((_QWORD *)v4 + 1) = 0;
  v4[80] = 0;
  *(_QWORD *)(v4 + 84) = -1;
  *((_QWORD *)v4 + 12) = -1;
  v4[104] = 0;
  *(_QWORD *)(v4 + 108) = -1;
  *((_QWORD *)v4 + 15) = -1;
  *((_DWORD *)v4 + 32) = 1065353216;
  *(_QWORD *)(v4 + 132) = 0x600000000;
  *((_DWORD *)v4 + 35) = 0;
  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr((mlir::Operation **)this);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&MaxValueAttr, (uint64_t)&__p);
  *((float *)v4 + 32) = llvm::APFloat::convertToFloat(&__p);
  v5 = (void *)v12[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v6) == v5)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  MaxValueAttr = mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&MaxValueAttr, (llvm::APInt *)&__p);
  if (LODWORD(v12[0]) > 0x40)
  {
    v7 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v7 = (uint64_t)((_QWORD)__p << -(uint64_t)LODWORD(v12[0])) >> -(uint64_t)LODWORD(v12[0]);
  }
  *((_DWORD *)v4 + 33) = v7;
  __p = (void *)mlir::getElementTypeOrSelf(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  result = mlir::Type::isSignedInteger((mlir::Type *)&__p);
  if (result)
    v9 = 1;
  else
    v9 = 2;
  *((_DWORD *)v4 + 35) = v9;
  *a2 = v4;
  return result;
}

llvm::detail::DoubleAPFloat *mlir::anec::DeQuant::getScale@<X0>(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t MaxValueAttr;

  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr(this);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&MaxValueAttr, a2);
}

uint64_t mlir::anec::DeQuant::getZeroPoint(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t MinValueAttr;

  MinValueAttr = mlir::anec::ClampedRelu::getMinValueAttr(this);
  mlir::IntegerAttr::getValue(&MinValueAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return (uint64_t)((_QWORD)__p << -(uint64_t)v4) >> -(uint64_t)v4;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return v1;
}

uint64_t mlir::anec::DeQuant::addOpToNetwork(mlir::anec::DeQuant *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::DeQuant::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void mlir::anec::Quant::getZinIrUnitInfo(mlir::anec::Quant *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void *v5;
  llvm::APFloatBase *v6;
  uint64_t v7;
  uint64_t MaxValueAttr;
  void *__p;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x90uLL);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = -1;
  *(_QWORD *)v4 = off_1E0E13590;
  *((_QWORD *)v4 + 1) = 0;
  v4[80] = 0;
  *(_QWORD *)(v4 + 84) = -1;
  *((_QWORD *)v4 + 12) = -1;
  v4[104] = 0;
  *(_QWORD *)(v4 + 108) = -1;
  *((_QWORD *)v4 + 15) = -1;
  *((_DWORD *)v4 + 32) = 1065353216;
  *(_QWORD *)(v4 + 132) = 0x600000000;
  *((_DWORD *)v4 + 35) = 0;
  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr((mlir::Operation **)this);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&MaxValueAttr, (uint64_t)&__p);
  *((float *)v4 + 32) = llvm::APFloat::convertToFloat(&__p);
  v5 = (void *)v10[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v6) == v5)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
  MaxValueAttr = mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this);
  mlir::IntegerAttr::getValue(&MaxValueAttr, (llvm::APInt *)&__p);
  if (LODWORD(v10[0]) > 0x40)
  {
    v7 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v7 = (uint64_t)((_QWORD)__p << -(uint64_t)LODWORD(v10[0])) >> -(uint64_t)LODWORD(v10[0]);
  }
  *((_DWORD *)v4 + 33) = v7;
  *a2 = v4;
}

uint64_t mlir::anec::Quant::addOpToNetwork(mlir::anec::Quant *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  mlir::anec::Quant::getZinIrUnitInfo(a1, &v15);
  v3 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E0E4C6B8;
  v5 = v15;
  v15 = 0;
  v6 = (std::string *)&v3[1].__shared_owners_;
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(v5 + 8);
    v3[2].__vftable = *(std::__shared_weak_count_vtbl **)(v5 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v3[2].__shared_owners_) = 17;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E4C5D0;
  v3[2].__shared_weak_owners_ = v5;
  LOBYTE(v3[3].__vftable) = 0;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = (uint64_t)&v3[4].__shared_owners_;
  v3[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000000;
  v3[5].__shared_weak_owners_ = (uint64_t)&v3[6].__shared_owners_;
  v3[6].__vftable = (std::__shared_weak_count_vtbl *)0x300000000;
  *(_QWORD *)&v16 = v3 + 1;
  *((_QWORD *)&v16 + 1) = v3;
  v8 = *(_QWORD **)(a2 + 232);
  if ((unint64_t)v8 >= *(_QWORD *)(a2 + 240))
  {
    v10 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a2 + 224, &v16);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    *(_QWORD *)(a2 + 232) = v10;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    *v8 = v3 + 1;
    v8[1] = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a2 + 232) = v8 + 2;
  }
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v13 = v15;
    if (!v15)
      return 1;
    goto LABEL_13;
  }
LABEL_12:
  v13 = v15;
  if (v15)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t mlir::anec::T0::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::T0::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::anec::A11Legacy::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A11Legacy::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::anec::A17::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A17::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::anec::A16::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A16::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::anec::A12::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A12::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::anec::A13::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A13::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::anec::A14::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A14::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::anec::A15::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A15::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

unint64_t mlir::anec::A11Legacy::getBody(mlir::anec::A11Legacy *this)
{
  unint64_t v1;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v1 & 0x7FFFFF) != 0)
    return ((*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(*(_QWORD *)this + 40);
  else
    return 0;
}

uint64_t mlir::anec::A11Legacy::getSymNameAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::A11Legacy::getSymName(mlir::Operation **this)
{
  uint64_t SymNameAttr;

  SymNameAttr = mlir::anec::A11Legacy::getSymNameAttr(this);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&SymNameAttr);
}

uint64_t mlir::anec::A11Legacy::getFunctionTypeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::A11Legacy::getFunctionType(mlir::Operation **this)
{
  uint64_t FunctionTypeAttr;

  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(this);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

uint64_t mlir::anec::A11Legacy::getArgAttrsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 32), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::anec::A11Legacy::getResAttrsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::Operation::removeAttr(uint64_t a1, uint64_t a2)
{
  uint64_t AttrData;
  uint64_t v4;
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[10];

  v12[9] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  if (*(_BYTE *)(a1 + 47)
    && (AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10),
        InherentAttr = mlir::Operation::getInherentAttr(a1, AttrData, v4),
        v6))
  {
    v7 = InherentAttr;
    mlir::Operation::setInherentAttr(a1, v10, 0);
  }
  else
  {
    mlir::NamedAttrList::NamedAttrList(v11, *(_QWORD *)(a1 + 56));
    v7 = mlir::NamedAttrList::erase((uint64_t)v11, v10);
    if (v7)
    {
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
      *(_QWORD *)(a1 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v11, Context);
    }
    if (v11[0] != v12)
      free(v11[0]);
  }
  return v7;
}

void mlir::anec::A11Legacy::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t StringAttr;
  mlir::StringAttr *Context;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t Loc;
  uint64_t v37;
  uint64_t v38;
  _WORD *v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v55;
  mlir::Operation *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v61;
  uint64_t *v62;
  BOOL v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[2];
  __int16 v70;
  void *v71;
  uint64_t v72;
  _WORD v73[16];
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v25 = a2 + 112;
  *(_QWORD *)(a2 + 192) = 0;
  v26 = *(unsigned int *)(a2 + 120);
  if (a18 + v26 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v25, (void *)(a2 + 128), a18 + v26, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 120);
  }
  if (a18)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v26), __src, 16 * a18);
    LODWORD(v26) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v26 + a18;
  v73[8] = 261;
  v71 = a3;
  v72 = a4;
  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)a1, (mlir::MLIRContext *)&v71);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v70 = 261;
  v67 = "sym_name";
  v68 = 8;
  v29 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v67);
  mlir::NamedAttribute::NamedAttribute(&v74, v29, StringAttr);
  mlir::NamedAttrList::push_back(v25, (uint64_t)v74, v75);
  v30 = mlir::FunctionType::get(*(mlir::MLIRContext **)a1, a9, a10, a13, a14);
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  v32 = mlir::TypeAttr::get(v30);
  mlir::NamedAttribute::NamedAttribute(&v67, v31, v32);
  mlir::NamedAttrList::push_back(v25, (uint64_t)v67, v68);
  v33 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v34 = operator new(0x48uLL);
  *v34 = 0u;
  v34[1] = 0u;
  *((_QWORD *)v34 + 4) = v34 + 2;
  *((_QWORD *)v34 + 5) = v34 + 2;
  *((_QWORD *)v34 + 7) = 0;
  *((_QWORD *)v34 + 8) = 0;
  *((_QWORD *)v34 + 6) = 0;
  v71 = v73;
  v72 = 0x400000000;
  v67 = a6;
  v68 = 0;
  if (a7)
  {
    v35 = 0;
    do
    {
      v74 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v67, v35);
      Loc = mlir::Value::getLoc((mlir::Value *)&v74);
      v37 = v72;
      if (v72 >= (unint64_t)HIDWORD(v72))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v72 + 1, 8);
        v37 = v72;
      }
      *((_QWORD *)v71 + v37) = Loc;
      v38 = (v72 + 1);
      LODWORD(v72) = v72 + 1;
      v35 = ++v68;
    }
    while (v67 != a6 || v35 != a7);
    v40 = v71;
  }
  else
  {
    v38 = 0;
    v40 = v73;
  }
  mlir::Block::addArguments(v34, a9, a10, (uint64_t)v40, v38);
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v33, (uint64_t)v34);
  v41 = *v33;
  *((_QWORD *)v34 + 2) = v33;
  *((_QWORD *)v34 + 1) = v41;
  *(_QWORD *)(v41 + 8) = (char *)v34 + 8;
  *v33 = (uint64_t)v34 + 8;
  v42 = (_OWORD *)(a1 + 16);
  v64 = *(_OWORD *)(a1 + 16);
  v44 = *((_QWORD *)v34 + 5);
  v43 = *((_QWORD *)v34 + 6);
  *(_QWORD *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 24) = v44;
  v45 = *((_QWORD *)v34 + 7);
  v67 = a6;
  v68 = 0;
  v69[0] = v43;
  if (a7 && v45 != v43)
  {
    v46 = 0;
    do
    {
      v50 = mlir::ValueRange::dereference_iterator(&v67, v46);
      v51 = *(_QWORD *)v69[0];
      v66 = v50;
      v74 = 0;
      v52 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a5, (unint64_t *)&v66, &v74);
      v53 = v74;
      if ((v52 & 1) == 0)
      {
        v53 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a5, (uint64_t)&v66, (unint64_t *)&v66, v74);
        *v53 = v66;
        v53[1] = 0;
      }
      v53[1] = v51;
      v46 = v68 + 1;
      v47 = v69[0] + 8;
      v68 = v46;
      v69[0] += 8;
    }
    while ((v46 != a7 || v67 != a6) && v47 != v45);
  }
  if (a16)
  {
    v55 = 8 * a16;
    do
    {
      v56 = *a15++;
      mlir::OpBuilder::clone((uint64_t **)a1, v56, (mlir::IRMapping *)a5);
      v55 -= 8;
    }
    while (v55);
  }
  v67 = v69;
  v68 = 0x600000000;
  if (a12 < 7)
  {
    v57 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, a12, 8);
    v57 = v68;
  }
  v74 = a11;
  v75 = 0;
  v76 = a5;
  v77 = 1;
  if (a12)
  {
    v58 = 0;
    v59 = (uint64_t *)((char *)v67 + 8 * v57);
    do
    {
      v61 = mlir::ValueRange::dereference_iterator(&v74, v58);
      v62 = v76;
      v65 = v61;
      v66 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v76, (unint64_t *)&v65, &v66))v63 = v66 == *v62 + 16 * *((unsigned int *)v62 + 4);
      else
        v63 = 1;
      if (!v63)
        v61 = *(_QWORD *)(v66 + 8);
      *v59++ = v61;
      v58 = ++v75;
    }
    while (v74 != a11 || v58 != a12);
    v57 = v68;
  }
  LODWORD(v68) = v57 + a12;
  mlir::OpBuilder::create<mlir::anec::RegionReturn,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)a1, *(_QWORD *)a2, (uint64_t)&v67);
  if (v67 != v69)
    free(v67);
  if ((_QWORD)v64)
  {
    *v42 = v64;
  }
  else
  {
    *(_QWORD *)v42 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (v71 != v73)
    free(v71);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::RegionReturn,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.region_return", (const unsigned __int8 *)0x12, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.region_return";
    v15[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::RegionReturn,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

BOOL mlir::anec::A11Legacy::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  const void **v13;
  __int16 v14;
  unint64_t AttrDictionary;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'function_type'";
LABEL_18:
    v13 = (const void **)v8;
    v14 = 259;
    mlir::OpState::emitOpError(this, &v13, (uint64_t)&AttrDictionary);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
    return v11;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      v6 = Value[1];
    Value += 2;
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_17:
    v8 = "requires attribute 'sym_name'";
    goto LABEL_18;
  }
  v9 = 0;
  v10 = (const void **)Value[1];
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
      v9 = Value[1];
    Value += 2;
    v7 -= 16;
    if (!v7)
      goto LABEL_17;
  }
  return mlir::anec::__mlir_ods_local_attr_constraint_ANECOps0(*this, Value[1], (const void **)"sym_name", (const void **)8)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps1(*this, v10, (const void **)"function_type", (const void **)0xD)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v6, (const void **)"arg_attrs", (const void **)9)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v9, (const void **)"res_attrs", (const void **)9)
      && mlir::anec::__mlir_ods_local_region_constraint_ANECOps0(*this, (((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), (uint64_t)"body", 4, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6;
  const void **v8[4];
  __int16 v9;
  uint64_t v10;
  _QWORD v11[24];

  v11[23] = *MEMORY[0x1E0C80C00];
  if (!a2 || *(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    return 1;
  v9 = 257;
  mlir::Operation::emitOpError(a1, v8, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "attribute '");
    if (v10)
    {
      v9 = 261;
      v8[0] = a3;
      v8[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v11, v8);
      if (v10)
        mlir::Diagnostic::operator<<((uint64_t)v11, "' failed to satisfy constraint: string attribute");
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v6;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps1(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v8;
  const void **v10[4];
  __int16 v11;
  const void **v12;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    v12 = a2;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12) + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
    {
      v10[0] = a2;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10) + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
        return 1;
    }
  }
  v11 = 257;
  mlir::Operation::emitOpError(a1, v10, (uint64_t)&v12);
  if (v12)
  {
    mlir::Diagnostic::operator<<((uint64_t)v13, "attribute '");
    if (v12)
    {
      v11 = 261;
      v10[0] = a3;
      v10[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v13, v10);
      if (v12)
        mlir::Diagnostic::operator<<((uint64_t)v13, "' failed to satisfy constraint: type attribute of function type");
    }
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v12);
  if (v12)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v12);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v8;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v13[4];
  __int16 v14;
  uint64_t v15;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    v15 = a2;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
    v9 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
    v11 = v9 + 8 * v10;
    if (v11 != Value)
    {
      while (*(_QWORD *)Value
           && *(_UNKNOWN **)(**(_QWORD **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
      {
        Value += 8;
        if (Value == v11)
          return 1;
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  v14 = 257;
  mlir::Operation::emitOpError(a1, v13, (uint64_t)&v15);
  if (v15)
  {
    mlir::Diagnostic::operator<<((uint64_t)v16, "attribute '");
    if (v15)
    {
      v14 = 261;
      v13[0] = a3;
      v13[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v16, v13);
      if (v15)
        mlir::Diagnostic::operator<<((uint64_t)v16, "' failed to satisfy constraint: Array of dictionary attributes");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v15);
  if (v15)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
  return v7;
}

uint64_t mlir::anec::__mlir_ods_local_region_constraint_ANECOps0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  const void ***v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int16 v13;
  uint64_t v14;
  unint64_t v16;
  char *v17;
  _QWORD v18[4];
  __int16 v19;
  const void **v20[4];
  __int16 v21;
  const void **v22;
  __int16 v23;
  uint64_t v24;
  _BYTE v25[16];
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[20];

  v29[19] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 != a2 && *(_QWORD *)(v8 + 8) == a2)
    return 1;
  v22 = (const void **)"region #";
  v23 = 259;
  mlir::Operation::emitOpError(a1, &v22, (uint64_t)&v24);
  if (v24)
  {
    LODWORD(v20[0]) = 5;
    v20[1] = (const void **)a5;
    v9 = v20;
    v10 = v26;
    if (v27 >= v28)
    {
      v16 = v27 + 1;
      if (v26 <= (unint64_t)v20 && v26 + 24 * v27 > (unint64_t)v20)
      {
        v17 = (char *)v20 - v26;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v16, 24);
        v10 = v26;
        v9 = (const void ***)&v17[v26];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v16, 24);
        v9 = v20;
        v10 = v26;
      }
    }
    v11 = v10 + 24 * v27;
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(v11 + 16) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v27;
  }
  if (a4)
  {
    v19 = 1283;
    v18[0] = " ('";
    v18[2] = a3;
    v18[3] = a4;
    v20[0] = (const void **)v18;
    v20[2] = (const void **)"') ";
    v13 = 770;
  }
  else
  {
    v20[0] = (const void **)" ";
    v13 = 259;
  }
  v21 = v13;
  if (v24)
  {
    mlir::Diagnostic::operator<<((uint64_t)v25, v20);
    if (v24)
      mlir::Diagnostic::operator<<((uint64_t)v25, "failed to verify constraint: region with 1 blocks");
  }
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v24);
  if (v24)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v25);
  return v14;
}

uint64_t *mlir::Attribute::cast<mlir::ElementsAttr>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;

  v1 = *a1;
  if (*a1)
  {
    v2 = *v1;
    v3 = mlir::TypeID::get<mlir::ElementsAttr>();
    v4 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)(v2 + 8);
      do
      {
        v6 = v4 >> 1;
        v7 = &v5[2 * (v4 >> 1)];
        v9 = *v7;
        v8 = v7 + 2;
        v4 += ~(v4 >> 1);
        if (v9 < v3)
          v5 = v8;
        else
          v4 = v6;
      }
      while (v4);
    }
  }
  return v1;
}

uint64_t llvm::isa<mlir::anec::ArgMinMaxModeAttr,mlir::Attribute>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;

  v1 = *a1;
  if (*(_UNKNOWN **)(*(_QWORD *)*a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return 0;
  v5 = *a1;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v5);
  result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if ((_DWORD)result)
  {
    v4 = v1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4))
    {
      v3 = v1;
      return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::anec::ArgMinMax::getAxesAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 64), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::ArgMinMax::getModeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::ArgMinMax::getKernelSizeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 48), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::ArgMinMax::getStrideValuesAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 64);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 32));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::ArgMinMax::getPadValuesAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 48);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ArgMinMax>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::ArgMinMax::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::ArgMinMax::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::UnknownLoc *v18;
  mlir::MLIRContext *v19;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29[2];
  unint64_t v30[2];
  void *__src;
  uint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v28 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v32);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  v16 = mlir::IntegerType::get(*a1, 0x40u, 0);
  v17 = mlir::IntegerAttr::get(v16, a5);
  mlir::NamedAttribute::NamedAttribute(&__src, v15, v17);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v32);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v32);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 32), a7);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v32);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24), a8);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v32);
  __src = v33;
  v32 = 0x200000000;
  v18 = (mlir::UnknownLoc *)*a1;
  v19 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v30, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v22 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v29, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ArgMinMax>::inferReturnTypes(v18, v19, 1, v30[0], v30[1], Dictionary, v22, v23, v29[0], v29[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v24 = __src;
  v25 = v32;
  v26 = *(unsigned int *)(a2 + 72);
  v27 = v26 + v32;
  if (v27 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v27, 8);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v25)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v26), v24, 8 * v25);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v26 + v25;
  if (__src != v33)
    free(__src);
}

BOOL mlir::anec::ArgMinMax::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  const char *v7;
  unint64_t v8;
  const void **v9;
  const void ***v10;
  unint64_t v11;
  const void **v12;
  unint64_t v13;
  const void **v14;
  const void ***v15;
  unint64_t v16;
  const void **v17;
  mlir::CallGraphNode *v18;
  const void **v19;
  uint64_t CallableRegion;
  uint64_t *v21;
  uint64_t v22;
  const void **v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Type;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t NextResultAtOffset;
  const void **v75;
  _QWORD v76[2];
  uint64_t OperandRange;
  const void **v78;
  _QWORD v79[2];
  _QWORD v80[2];
  const void **v81;
  uint64_t v82;
  __int16 v83;
  unint64_t AttrDictionary;
  _QWORD v85[24];

  v85[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
    if (!v4)
    {
LABEL_8:
      v7 = "requires attribute 'axes'";
LABEL_29:
      v81 = (const void **)v7;
      v83 = 259;
      mlir::OpState::emitOpError(this, &v81, (uint64_t)&AttrDictionary);
      v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v85);
      return v22;
    }
  }
  else
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)(v2 + 7));
    if (!v4)
      goto LABEL_8;
  }
  v5 = 16 * v4;
  v6 = (const void ***)(Value + 8);
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v6 - 1)))
  {
    v6 += 2;
    v5 -= 16;
    if (!v5)
      goto LABEL_8;
  }
  if (!v5)
  {
LABEL_13:
    v7 = "requires attribute 'kernel_size'";
    goto LABEL_29;
  }
  v8 = 0;
  v9 = *v6;
  while (1)
  {
    v10 = &v6[v8 / 8];
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v6[v8 / 8 - 1]))
      break;
    v8 += 16;
    if (v5 == v8)
      goto LABEL_13;
  }
  v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_18:
    v7 = "requires attribute 'mode'";
    goto LABEL_29;
  }
  v12 = *v10;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v10 - 1)))
  {
    v10 += 2;
    v11 -= 16;
    if (!v11)
      goto LABEL_18;
  }
  if (!v11)
  {
LABEL_23:
    v7 = "requires attribute 'pad_values'";
    goto LABEL_29;
  }
  v13 = 0;
  v14 = *v10;
  while (1)
  {
    v15 = &v10[v13 / 8];
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v10[v13 / 8 - 1]))
      break;
    v13 += 16;
    if (v11 == v13)
      goto LABEL_23;
  }
  v16 = v11 - v13;
  if (!v16)
  {
LABEL_28:
    v7 = "requires attribute 'stride_values'";
    goto LABEL_29;
  }
  v19 = *v15;
  v18 = (mlir::CallGraphNode *)(v15 - 1);
  v17 = v19;
  while (1)
  {
    CallableRegion = mlir::CallGraphNode::getCallableRegion(v18);
    v21 = *this;
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 32) == CallableRegion)
      break;
    v18 = (mlir::CallGraphNode *)((char *)v18 + 16);
    v16 -= 16;
    if (!v16)
      goto LABEL_28;
  }
  v24 = (const void **)*((_QWORD *)v18 + 1);
  if (v9)
  {
    if (!mlir::DenseIntElementsAttr::classof((uint64_t)v9))
      goto LABEL_78;
    v25 = *v9;
    v26 = mlir::TypeID::get<mlir::ElementsAttr>();
    v27 = *((unsigned int *)v25 + 4);
    if (!(_DWORD)v27)
      goto LABEL_43;
    v28 = (_QWORD *)v25[1];
    v29 = &v28[2 * v27];
    do
    {
      v30 = v27 >> 1;
      v31 = &v28[2 * (v27 >> 1)];
      v33 = *v31;
      v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26)
        v28 = v32;
      else
        v27 = v30;
    }
    while (v27);
    if (v28 != v29 && *v28 == v26)
      v34 = v28[1];
    else
LABEL_43:
      v34 = 0;
    v81 = v9;
    v82 = v34;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v81);
    v36 = Type;
    if (!Type)
      goto LABEL_53;
    v37 = *Type;
    v38 = mlir::TypeID::get<mlir::ShapedType>();
    v39 = *(unsigned int *)(v37 + 16);
    if (!(_DWORD)v39)
      goto LABEL_53;
    v40 = *(_QWORD **)(v37 + 8);
    v41 = &v40[2 * v39];
    do
    {
      v42 = v39 >> 1;
      v43 = &v40[2 * (v39 >> 1)];
      v45 = *v43;
      v44 = v43 + 2;
      v39 += ~(v39 >> 1);
      if (v45 < v38)
        v40 = v44;
      else
        v39 = v42;
    }
    while (v39);
    if (v40 != v41 && *v40 == v38)
      v46 = v40[1];
    else
LABEL_53:
      v46 = 0;
    AttrDictionary = (unint64_t)v36;
    v85[0] = v46;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
    if (v47)
    {
      v48 = *v9;
      v49 = mlir::TypeID::get<mlir::ElementsAttr>();
      v50 = *((unsigned int *)v48 + 4);
      if (!(_DWORD)v50)
        goto LABEL_63;
      v51 = (_QWORD *)v48[1];
      v52 = &v51[2 * v50];
      do
      {
        v53 = v50 >> 1;
        v54 = &v51[2 * (v50 >> 1)];
        v56 = *v54;
        v55 = v54 + 2;
        v50 += ~(v50 >> 1);
        if (v56 < v49)
          v51 = v55;
        else
          v50 = v53;
      }
      while (v50);
      if (v51 != v52 && *v51 == v49)
        v57 = v51[1];
      else
LABEL_63:
        v57 = 0;
      v79[0] = v9;
      v79[1] = v57;
      v58 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v79);
      v59 = v58;
      if (!v58)
        goto LABEL_73;
      v60 = *v58;
      v61 = mlir::TypeID::get<mlir::ShapedType>();
      v62 = *(unsigned int *)(v60 + 16);
      if (!(_DWORD)v62)
        goto LABEL_73;
      v63 = *(_QWORD **)(v60 + 8);
      v64 = &v63[2 * v62];
      do
      {
        v65 = v62 >> 1;
        v66 = &v63[2 * (v62 >> 1)];
        v68 = *v66;
        v67 = v66 + 2;
        v62 += ~(v62 >> 1);
        if (v68 < v61)
          v63 = v67;
        else
          v62 = v65;
      }
      while (v62);
      if (v63 != v64 && *v63 == v61)
        v69 = v63[1];
      else
LABEL_73:
        v69 = 0;
      v80[0] = v59;
      v80[1] = v69;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80);
      if (v70 != 1)
        goto LABEL_78;
    }
    if (!mlir::hasUniqueValues((uint64_t)v9)
      || (v78 = v9, !mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v78))
      || (v75 = v9,
          v76[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v75),
          v76[1] = v71,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v76),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
LABEL_78:
      v83 = 257;
      mlir::Operation::emitOpError(v21, &v81, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v85, "attribute '");
        if (AttrDictionary)
        {
          v83 = 261;
          v81 = (const void **)"axes";
          v82 = 4;
          mlir::Diagnostic::operator<<((uint64_t)v85, &v81);
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v85, "' failed to satisfy constraint: ui64 unique not empty elements attribute of ranks 0/1");
        }
      }
      v72 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v85);
      if (!v72)
        return 0;
    }
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps4(*this, v14, (const void **)"mode", (const void **)4)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps5(*this, v12, (const void **)"kernel_size", 11)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps5(*this, v24, (const void **)"stride_values", 13)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps6(*this, v17, (const void **)"pad_values", 10)
    || !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v73 = (uint64_t)(*this - 2);
  else
    v73 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v73, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps4(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v8;
  const void **v10;
  const void **v11;
  const void **v12[4];
  __int16 v13;
  uint64_t Value;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v12[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v12);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64))
    {
      v11 = a2;
      if (!mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11))
        return 1;
      v10 = a2;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) == 1)
        return 1;
    }
  }
  v13 = 257;
  mlir::Operation::emitOpError(a1, v12, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v15, "attribute '");
    if (Value)
    {
      v13 = 261;
      v12[0] = a3;
      v12[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v15, v12);
      if (Value)
        mlir::Diagnostic::operator<<((uint64_t)v15, "' failed to satisfy constraint: valid ArgMinMaxMode");
    }
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v8;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps5(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void **v35;
  _QWORD v36[2];
  uint64_t OperandRange;
  const void **v38;
  uint64_t v39;
  __int16 v40;
  _QWORD *v41;
  _QWORD v42[23];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2))
    goto LABEL_26;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v38 = a2;
  v39 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v38);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v41 = v19;
  v42[0] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
  v43 = 2;
  if (v31 == 1 && *ArgAttrsAttr == v43)
  {
    v35 = a2;
    v36[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    v36[1] = v32;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      return 1;
  }
LABEL_26:
  v40 = 257;
  mlir::Operation::emitOpError(a1, &v38, (uint64_t)&v41);
  if (v41)
  {
    mlir::Diagnostic::operator<<((uint64_t)v42, "attribute '");
    if (v41)
    {
      v40 = 261;
      v38 = a3;
      v39 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v42, &v38);
      if (v41)
        mlir::Diagnostic::operator<<((uint64_t)v42, "' failed to satisfy constraint: ui64 elements attribute of shape {2}");
    }
  }
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps6(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void **v35;
  _QWORD v36[2];
  uint64_t OperandRange;
  const void **v38;
  uint64_t v39;
  __int16 v40;
  _QWORD *v41;
  _QWORD v42[23];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2))
    goto LABEL_26;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v38 = a2;
  v39 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v38);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v41 = v19;
  v42[0] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
  v43 = 4;
  if (v31 == 1 && *ArgAttrsAttr == v43)
  {
    v35 = a2;
    v36[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    v36[1] = v32;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      return 1;
  }
LABEL_26:
  v40 = 257;
  mlir::Operation::emitOpError(a1, &v38, (uint64_t)&v41);
  if (v41)
  {
    mlir::Diagnostic::operator<<((uint64_t)v42, "attribute '");
    if (v41)
    {
      v40 = 261;
      v38 = a3;
      v39 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v42, &v38);
      if (v41)
        mlir::Diagnostic::operator<<((uint64_t)v42, "' failed to satisfy constraint: ui64 elements attribute of shape {4}");
    }
  }
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v59;
  char *v60;
  const void **v61;
  uint64_t v62;
  __int16 v63;
  _QWORD v64[2];
  const void **v65;
  uint64_t OperandRange;
  const void **v67;
  uint64_t v68;
  const void **v69;
  _QWORD v70[2];
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD v74[20];

  v74[19] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_45;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v69 = a2;
  v70[0] = v19;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    v20 = *a2;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *((unsigned int *)v20 + 4);
    if (!(_DWORD)v22)
      goto LABEL_22;
    v23 = (_QWORD *)v20[1];
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
    if (v23 != v24 && *v23 == v21)
      v29 = v23[1];
    else
LABEL_22:
      v29 = 0;
    v61 = a2;
    v62 = v29;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v61))
    {
      v30 = *a2;
      v31 = mlir::TypeID::get<mlir::ShapedType>();
      v32 = *((unsigned int *)v30 + 4);
      if (!(_DWORD)v32)
        goto LABEL_32;
      v33 = (_QWORD *)v30[1];
      v34 = &v33[2 * v32];
      do
      {
        v35 = v32 >> 1;
        v36 = &v33[2 * (v32 >> 1)];
        v38 = *v36;
        v37 = v36 + 2;
        v32 += ~(v32 >> 1);
        if (v38 < v31)
          v33 = v37;
        else
          v32 = v35;
      }
      while (v32);
      if (v33 != v34 && *v33 == v31)
        v39 = v33[1];
      else
LABEL_32:
        v39 = 0;
      v67 = a2;
      v68 = v39;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
      if (v40 == 4)
        return 1;
      v41 = *a2;
      v42 = mlir::TypeID::get<mlir::ShapedType>();
      v43 = *((unsigned int *)v41 + 4);
      if (!(_DWORD)v43)
        goto LABEL_42;
      v44 = (_QWORD *)v41[1];
      v45 = &v44[2 * v43];
      do
      {
        v46 = v43 >> 1;
        v47 = &v44[2 * (v43 >> 1)];
        v49 = *v47;
        v48 = v47 + 2;
        v43 += ~(v43 >> 1);
        if (v49 < v42)
          v44 = v48;
        else
          v43 = v46;
      }
      while (v43);
      if (v44 != v45 && *v44 == v42)
        v50 = v44[1];
      else
LABEL_42:
        v50 = 0;
      v64[0] = a2;
      v64[1] = v50;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
      if (v51 == 5)
        return 1;
    }
  }
LABEL_45:
  v63 = 261;
  v61 = a3;
  v62 = a4;
  mlir::Operation::emitOpError(a1, &v61, (uint64_t)&v69);
  if (v69)
  {
    mlir::Diagnostic::operator<<((uint64_t)v70, " #");
    if (v69)
    {
      LODWORD(v67) = 5;
      v68 = a5;
      v53 = (char *)&v67;
      v54 = v71;
      if (v72 >= v73)
      {
        v59 = v72 + 1;
        if (v71 <= (unint64_t)&v67 && v71 + 24 * v72 > (unint64_t)&v67)
        {
          v60 = (char *)&v67 - v71;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
          v54 = v71;
          v53 = &v60[v71];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
          v53 = (char *)&v67;
          v54 = v71;
        }
      }
      v55 = v54 + 24 * v72;
      v56 = *(_OWORD *)v53;
      *(_QWORD *)(v55 + 16) = *((_QWORD *)v53 + 2);
      *(_OWORD *)v55 = v56;
      ++v72;
      if (v69)
        mlir::Diagnostic::operator<<((uint64_t)v70, " must be 4D/5D memref of 16-bit float or 8-bit signed integer or 8-bit unsigned integer values, but got ");
    }
  }
  v57 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v69, (uint64_t *)&v65);
  v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v57);
  if (v69)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v70);
  return v52;
}

uint64_t mlir::anec::AveragePool::getStrideAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::AveragePool::getPaddingAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::AveragePool::getKsizeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::AveragePool::getIncPadAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 48), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

BOOL mlir::anec::AveragePool::getIncPad(mlir::Operation **this)
{
  return mlir::anec::AveragePool::getIncPadAttr(this) != 0;
}

void mlir::anec::AveragePool::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *v14;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24[2];
  unint64_t v25[2];
  void *__src;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v23 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v27);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16), a5);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v27);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v27);
  if (a7)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a7);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v27);
  }
  __src = v28;
  v27 = 0x200000000;
  v13 = *a1;
  v14 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v25, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v17 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::AveragePool>::inferReturnTypes(v13, v14, 1, v25[0], v25[1], Dictionary, v17, v18, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v19 = __src;
  v20 = v27;
  v21 = *(unsigned int *)(a2 + 72);
  v22 = v21 + v27;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v20)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v28)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::AveragePool>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::AveragePool::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::AveragePool::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *v14;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v26;
  v25 = 0x200000000;
  v13 = *a1;
  v14 = *(mlir::MLIRContext **)a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v17 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::AveragePool>::inferReturnTypes(v13, v14, 1, a3, a4, Dictionary, v17, v18, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v19 = __src;
  v20 = v25;
  v21 = *(unsigned int *)(a2 + 72);
  v22 = v21 + v25;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v20)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v26)
    free(__src);
}

BOOL mlir::anec::AveragePool::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void **v10;
  const void ***v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t NextResultAtOffset;
  const void **v18;
  __int16 v19;
  unint64_t AttrDictionary;
  _QWORD v21[24];

  v21[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'ksize'";
LABEL_21:
    v18 = (const void **)v8;
    v19 = 259;
    mlir::OpState::emitOpError(this, &v18, (uint64_t)&AttrDictionary);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
    return v14;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      v6 = *((_QWORD *)Value + 1);
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_15:
    v8 = "requires attribute 'padding'";
    goto LABEL_21;
  }
  v9 = 0;
  v10 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (const void ***)((char *)Value + v9);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
      break;
    v9 += 16;
    if (v7 == v9)
      goto LABEL_15;
  }
  v12 = v7 - v9;
  if (!v12)
  {
LABEL_20:
    v8 = "requires attribute 'stride'";
    goto LABEL_21;
  }
  v13 = v11[1];
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v11))
  {
    v11 += 2;
    v12 -= 16;
    if (!v12)
      goto LABEL_20;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(*this, v11[1], (const void **)"stride", 6)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps8(*this, v13, (const void **)"padding", 7)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(*this, v10, (const void **)"ksize", 5)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps9(*this, v6, (const void **)"inc_pad", (const void **)7)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand",
                           7,
                           0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v16 = (uint64_t)(*this - 2);
  else
    v16 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void **v35;
  _QWORD v36[2];
  uint64_t OperandRange;
  const void **v38;
  uint64_t v39;
  __int16 v40;
  _QWORD *v41;
  _QWORD v42[23];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2))
    goto LABEL_26;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v38 = a2;
  v39 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v38);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v41 = v19;
  v42[0] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
  v43 = 3;
  if (v31 == 1 && *ArgAttrsAttr == v43)
  {
    v35 = a2;
    v36[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    v36[1] = v32;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      return 1;
  }
LABEL_26:
  v40 = 257;
  mlir::Operation::emitOpError(a1, &v38, (uint64_t)&v41);
  if (v41)
  {
    mlir::Diagnostic::operator<<((uint64_t)v42, "attribute '");
    if (v41)
    {
      v40 = 261;
      v38 = a3;
      v39 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v42, &v38);
      if (v41)
        mlir::Diagnostic::operator<<((uint64_t)v42, "' failed to satisfy constraint: ui64 elements attribute of shape {3}");
    }
  }
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps8(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void **v35;
  _QWORD v36[2];
  uint64_t OperandRange;
  const void **v38;
  uint64_t v39;
  __int16 v40;
  _QWORD *v41;
  _QWORD v42[23];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2))
    goto LABEL_26;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v38 = a2;
  v39 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v38);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v41 = v19;
  v42[0] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
  v43 = 6;
  if (v31 == 1 && *ArgAttrsAttr == v43)
  {
    v35 = a2;
    v36[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    v36[1] = v32;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      return 1;
  }
LABEL_26:
  v40 = 257;
  mlir::Operation::emitOpError(a1, &v38, (uint64_t)&v41);
  if (v41)
  {
    mlir::Diagnostic::operator<<((uint64_t)v42, "attribute '");
    if (v41)
    {
      v40 = 261;
      v38 = a3;
      v39 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v42, &v38);
      if (v41)
        mlir::Diagnostic::operator<<((uint64_t)v42, "' failed to satisfy constraint: ui64 elements attribute of shape {6}");
    }
  }
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps9(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6;
  const void **v8[4];
  __int16 v9;
  uint64_t v10;
  _QWORD v11[24];

  v11[23] = *MEMORY[0x1E0C80C00];
  if (!a2 || *(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    return 1;
  v9 = 257;
  mlir::Operation::emitOpError(a1, v8, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "attribute '");
    if (v10)
    {
      v9 = 261;
      v8[0] = a3;
      v8[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v11, v8);
      if (v10)
        mlir::Diagnostic::operator<<((uint64_t)v11, "' failed to satisfy constraint: unit attribute");
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v6;
}

void mlir::anec::BatchToSpace::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::BatchToSpace>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::BatchToSpace>::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::BatchToSpace::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::BatchToSpace::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(*this, Value[1], (const void **)"factors", 7)&& mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'factors'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::anec::detail::BroadcastGenericAdaptorBase::BroadcastGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "anec.broadcast", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::anec::Broadcast::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v7 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v7, 1);
  v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::anec::detail::CastGenericAdaptorBase::CastGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "anec.cast", 9, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::anec::Cast::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t NextResultAtOffset;
  unint64_t v68;
  char *v69;
  const void **v70;
  uint64_t v71;
  __int16 v72;
  _QWORD v73[2];
  const void **v74;
  const void **v75;
  uint64_t v76;
  const void **v77;
  _QWORD v78[2];
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _QWORD v82[20];

  v82[19] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v74 = v3;
  v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_103;
  v5 = mlir::TypeID::get<mlir::ShapedType>();
  v6 = *((unsigned int *)v4 + 4);
  if (!(_DWORD)v6)
    goto LABEL_10;
  v7 = (_QWORD *)v4[1];
  v8 = &v7[2 * v6];
  do
  {
    v9 = v6 >> 1;
    v10 = &v7[2 * (v6 >> 1)];
    v12 = *v10;
    v11 = v10 + 2;
    v6 += ~(v6 >> 1);
    if (v12 < v5)
      v7 = v11;
    else
      v6 = v9;
  }
  while (v6);
  if (v7 != v8 && *v7 == v5)
    v13 = v7[1];
  else
LABEL_10:
    v13 = 0;
  v77 = v3;
  v78[0] = v13;
  v14 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v77) + 136);
  v15 = v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v16 = v15 || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v17 = v16 || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v18 = v17 || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v19 = v18 || v14 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v20 = v19 || v14 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v21 = v20 || v14 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v22 = v21 || v14 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v23 = v22 || v14 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  v24 = v23 || v14 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  v25 = v24 || v14 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (!v25 && v14 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    goto LABEL_103;
  v27 = *v3;
  v28 = mlir::TypeID::get<mlir::ShapedType>();
  v29 = *((unsigned int *)v27 + 4);
  if (!(_DWORD)v29)
    goto LABEL_57;
  v30 = (_QWORD *)v27[1];
  v31 = &v30[2 * v29];
  do
  {
    v32 = v29 >> 1;
    v33 = &v30[2 * (v29 >> 1)];
    v35 = *v33;
    v34 = v33 + 2;
    v29 += ~(v29 >> 1);
    if (v35 < v28)
      v30 = v34;
    else
      v29 = v32;
  }
  while (v29);
  if (v30 != v31 && *v30 == v28)
    v36 = v30[1];
  else
LABEL_57:
    v36 = 0;
  v70 = v3;
  v71 = v36;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v70))
    goto LABEL_103;
  v37 = *v3;
  v38 = mlir::TypeID::get<mlir::ShapedType>();
  v39 = *((unsigned int *)v37 + 4);
  if (!(_DWORD)v39)
    goto LABEL_67;
  v40 = (_QWORD *)v37[1];
  v41 = &v40[2 * v39];
  do
  {
    v42 = v39 >> 1;
    v43 = &v40[2 * (v39 >> 1)];
    v45 = *v43;
    v44 = v43 + 2;
    v39 += ~(v39 >> 1);
    if (v45 < v38)
      v40 = v44;
    else
      v39 = v42;
  }
  while (v39);
  if (v40 != v41 && *v40 == v38)
    v46 = v40[1];
  else
LABEL_67:
    v46 = 0;
  v75 = v3;
  v76 = v46;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  if (v47 != 4)
  {
    v48 = *v3;
    v49 = mlir::TypeID::get<mlir::ShapedType>();
    v50 = *((unsigned int *)v48 + 4);
    if (!(_DWORD)v50)
      goto LABEL_77;
    v51 = (_QWORD *)v48[1];
    v52 = &v51[2 * v50];
    do
    {
      v53 = v50 >> 1;
      v54 = &v51[2 * (v50 >> 1)];
      v56 = *v54;
      v55 = v54 + 2;
      v50 += ~(v50 >> 1);
      if (v56 < v49)
        v51 = v55;
      else
        v50 = v53;
    }
    while (v50);
    if (v51 != v52 && *v51 == v49)
      v57 = v51[1];
    else
LABEL_77:
      v57 = 0;
    v73[0] = v3;
    v73[1] = v57;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
    if (v58 != 5)
    {
LABEL_103:
      v72 = 261;
      v70 = (const void **)"operand";
      v71 = 7;
      mlir::Operation::emitOpError(v2, &v70, (uint64_t)&v77);
      if (v77)
      {
        mlir::Diagnostic::operator<<((uint64_t)v78, " #");
        if (v77)
        {
          LODWORD(v75) = 5;
          v76 = 0;
          v59 = (char *)&v75;
          v60 = v79;
          if (v80 >= v81)
          {
            v68 = v80 + 1;
            if (v79 <= (unint64_t)&v75 && v79 + 24 * v80 > (unint64_t)&v75)
            {
              v69 = (char *)&v75 - v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v68, 24);
              v60 = v79;
              v59 = &v69[v79];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v68, 24);
              v59 = (char *)&v75;
              v60 = v79;
            }
          }
          v61 = v60 + 24 * v80;
          v62 = *(_OWORD *)v59;
          *(_QWORD *)(v61 + 16) = *((_QWORD *)v59 + 2);
          *(_OWORD *)v61 = v62;
          ++v80;
          if (v77)
            mlir::Diagnostic::operator<<((uint64_t)v78, " must be 4D/5D memref of floating-point or integer values, but got ");
        }
      }
      v63 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v77, (uint64_t *)&v74);
      v64 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v63);
      if (v77)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v78);
      if (!v64)
        return 0;
    }
  }
  if (*((_DWORD *)*this + 9))
    v65 = (uint64_t)(*this - 2);
  else
    v65 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v65, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Ceil>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t RankPromotionTypeForANE;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31[2];
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[48];
  uint64_t v37;
  _QWORD v38[24];

  v38[23] = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v34 = v36;
  v35 = 0x600000000;
  v32 = a4;
  if (a5)
  {
    v15 = 0;
    while (1)
    {
      v16 = mlir::ValueRange::dereference_iterator(&v32, v15);
      v17 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v17)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v17, v18);
      v20 = v35;
      if (v35 >= (unint64_t)HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 8);
        v20 = v35;
      }
      *((_QWORD *)v34 + v20) = RankPromotionTypeForANE;
      v21 = (v35 + 1);
      LODWORD(v35) = v35 + 1;
      v15 = ++v33;
      if (v32 == a4 && v15 == a5)
      {
        v23 = v34;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v37);
      if (v37)
        mlir::Diagnostic::operator<<((uint64_t)v38, "expected a ShapedType for inferReturnTypes");
      v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v37);
      if (v37)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v38);
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v21 = 0;
    v23 = v36;
LABEL_16:
    v24 = mlir::ValueRange::ValueRange(v31, (uint64_t)v23, v21);
    v22 = mlir::anec::inferElementwiseReturnTypes((uint64_t)v24, v25, v26, a4, a5, v27, v28, v29, v31[0], v31[1], a11);
  }
  if (v34 != v36)
    free(v34);
  return v22;
}

void mlir::anec::Ceil::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v26;
  v25 = 0x200000000;
  v13 = *a1;
  v14 = *(_QWORD *)a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v17 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Ceil>::inferReturnTypes(v13, v14, 1, a3, a4, Dictionary, v17, v18, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v19 = __src;
  v20 = v25;
  v21 = *(unsigned int *)(a2 + 72);
  v22 = v21 + v25;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v20)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v26)
    free(__src);
}

void mlir::anec::ChannelToSpace::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ChannelToSpace>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ChannelToSpace>::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::ChannelToSpace::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t mlir::anec::ClampedRelu::getMinValueAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::ClampedRelu::getMaxValueAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 16), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

void mlir::anec::ClampedRelu::build(mlir::Float16Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t F16Type;
  uint64_t FloatAttr;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Float16Type *v17;
  uint64_t v18;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28[2];
  unint64_t v29[2];
  void *__src;
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v27 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  F16Type = mlir::Builder::getF16Type(a1, v10);
  FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F16Type, a4);
  mlir::NamedAttribute::NamedAttribute(&__src, v9, FloatAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v31);
  v13 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  v15 = mlir::Builder::getF16Type(a1, v14);
  v16 = mlir::Builder::getFloatAttr((uint64_t)a1, v15, a5);
  mlir::NamedAttribute::NamedAttribute(&__src, v13, v16);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v31);
  __src = v32;
  v31 = 0x200000000;
  v17 = *a1;
  v18 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v29, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v21 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v28, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Ceil>::inferReturnTypes((uint64_t)v17, v18, 1, v29[0], v29[1], Dictionary, v21, v22, v28[0], v28[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v23 = __src;
  v24 = v31;
  v25 = *(unsigned int *)(a2 + 72);
  v26 = v25 + v31;
  if (v26 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26, 8);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v24)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v25), v23, 8 * v24);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v25 + v24;
  if (__src != v32)
    free(__src);
}

BOOL mlir::anec::ClampedRelu::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t NextResultAtOffset;
  const void **v13;
  __int16 v14;
  unint64_t AttrDictionary;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'max_value'";
LABEL_14:
    v13 = (const void **)v7;
    v14 = 259;
    mlir::OpState::emitOpError(this, &v13, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
    return v9;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    Value += 2;
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'min_value'";
    goto LABEL_14;
  }
  v8 = Value[1];
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    Value += 2;
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, Value[1], (const void **)"min_value", (const void **)9)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, v8, (const void **)"max_value", (const void **)9)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v11 = (uint64_t)(*this - 2);
  else
    v11 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t Value;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v9[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isF16((mlir::Type *)&Value))
      return 1;
  }
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (Value)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (Value)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: 16-bit float attribute");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::anec::Concat::getInputs(mlir::anec::Concat *this)
{
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72);
  else
    return 0;
}

uint64_t mlir::anec::Concat::getInterleaveAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Concat>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Concat::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::Concat::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  mlir::MLIRContext *v13;
  uint64_t v14;
  uint64_t UnitAttr;
  mlir::UnknownLoc *v16;
  mlir::MLIRContext *v17;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26[2];
  unint64_t v27[2];
  void *__src;
  uint64_t v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, a3, a4);
  v10 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a5);
  mlir::NamedAttribute::NamedAttribute(&__src, v10, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v29);
  if (a6)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
    UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v13);
    mlir::NamedAttribute::NamedAttribute(&__src, v14, UnitAttr);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v29);
  }
  __src = v30;
  v29 = 0x200000000;
  v16 = *(mlir::UnknownLoc **)a1;
  v17 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v27, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v20 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Concat>::inferReturnTypes(v16, v17, 1u, v27[0], v27[1], Dictionary, v20, v21, v26[0], v26[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v22 = __src;
  v23 = v29;
  v24 = *(unsigned int *)(a2 + 72);
  v25 = v24 + v29;
  if (v25 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v25, 8);
    LODWORD(v24) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v23)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v24), v22, 8 * v23);
    LODWORD(v24) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v24 + v23;
  if (__src != v30)
    free(__src);
}

BOOL mlir::anec::Concat::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t CallableRegion;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t NextResultAtOffset;
  uint64_t v20;
  const void **v22;
  __int16 v23;
  unint64_t AttrDictionary;
  _QWORD v25[24];

  v25[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
        break;
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v10 = (const void **)*((_QWORD *)Value + 1);
    for (i = 0; v6; v6 -= 16)
    {
      v20 = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v20)
        i = *((_QWORD *)Value + 1);
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(v8, v10, (const void **)"axis", (const void **)4)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps9(*this, i, (const void **)"interleave", (const void **)0xA))
    {
      return 0;
    }
    v12 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v13 = *((unsigned int *)v12 + 17);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = v12[9] + 24;
        while (mlir::anec::__mlir_ods_local_type_constraint_ANECOps2(*this, (const void **)(*(_QWORD *)(*(_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v14))
        {
          ++v14;
          v15 += 32;
          if (v13 == v14)
          {
            v12 = *this;
            goto LABEL_20;
          }
        }
        return 0;
      }
    }
LABEL_20:
    v16 = *((_DWORD *)v12 + 9);
    v17 = v12 - 2;
    if (v16)
      v18 = (uint64_t)v17;
    else
      v18 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
    return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
  }
  else
  {
LABEL_8:
    v22 = (const void **)"requires attribute 'axis'";
    v23 = 259;
    mlir::OpState::emitOpError(this, &v22, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v25);
  }
  return v9;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t Value;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
      return 1;
  }
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (Value)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (Value)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: 64-bit unsigned integer attribute");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::anec::__mlir_ods_local_type_constraint_ANECOps2(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v59;
  char *v60;
  const void **v61;
  uint64_t v62;
  __int16 v63;
  _QWORD v64[2];
  const void **v65;
  uint64_t OperandRange;
  const void **v67;
  uint64_t v68;
  const void **v69;
  _QWORD v70[2];
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD v74[20];

  v74[19] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_45;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v69 = a2;
  v70[0] = v19;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    v20 = *a2;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *((unsigned int *)v20 + 4);
    if (!(_DWORD)v22)
      goto LABEL_22;
    v23 = (_QWORD *)v20[1];
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
    if (v23 != v24 && *v23 == v21)
      v29 = v23[1];
    else
LABEL_22:
      v29 = 0;
    v61 = a2;
    v62 = v29;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v61))
    {
      v30 = *a2;
      v31 = mlir::TypeID::get<mlir::ShapedType>();
      v32 = *((unsigned int *)v30 + 4);
      if (!(_DWORD)v32)
        goto LABEL_32;
      v33 = (_QWORD *)v30[1];
      v34 = &v33[2 * v32];
      do
      {
        v35 = v32 >> 1;
        v36 = &v33[2 * (v32 >> 1)];
        v38 = *v36;
        v37 = v36 + 2;
        v32 += ~(v32 >> 1);
        if (v38 < v31)
          v33 = v37;
        else
          v32 = v35;
      }
      while (v32);
      if (v33 != v34 && *v33 == v31)
        v39 = v33[1];
      else
LABEL_32:
        v39 = 0;
      v67 = a2;
      v68 = v39;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
      if (v40 == 4)
        return 1;
      v41 = *a2;
      v42 = mlir::TypeID::get<mlir::ShapedType>();
      v43 = *((unsigned int *)v41 + 4);
      if (!(_DWORD)v43)
        goto LABEL_42;
      v44 = (_QWORD *)v41[1];
      v45 = &v44[2 * v43];
      do
      {
        v46 = v43 >> 1;
        v47 = &v44[2 * (v43 >> 1)];
        v49 = *v47;
        v48 = v47 + 2;
        v43 += ~(v43 >> 1);
        if (v49 < v42)
          v44 = v48;
        else
          v43 = v46;
      }
      while (v43);
      if (v44 != v45 && *v44 == v42)
        v50 = v44[1];
      else
LABEL_42:
        v50 = 0;
      v64[0] = a2;
      v64[1] = v50;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
      if (v51 == 5)
        return 1;
    }
  }
LABEL_45:
  v63 = 261;
  v61 = a3;
  v62 = a4;
  mlir::Operation::emitOpError(a1, &v61, (uint64_t)&v69);
  if (v69)
  {
    mlir::Diagnostic::operator<<((uint64_t)v70, " #");
    if (v69)
    {
      LODWORD(v67) = 5;
      v68 = a5;
      v53 = (char *)&v67;
      v54 = v71;
      if (v72 >= v73)
      {
        v59 = v72 + 1;
        if (v71 <= (unint64_t)&v67 && v71 + 24 * v72 > (unint64_t)&v67)
        {
          v60 = (char *)&v67 - v71;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
          v54 = v71;
          v53 = &v60[v71];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
          v53 = (char *)&v67;
          v54 = v71;
        }
      }
      v55 = v54 + 24 * v72;
      v56 = *(_OWORD *)v53;
      *(_QWORD *)(v55 + 16) = *((_QWORD *)v53 + 2);
      *(_OWORD *)v55 = v56;
      ++v72;
      if (v69)
        mlir::Diagnostic::operator<<((uint64_t)v70, " must be variadic of 4D/5D memref of 16-bit float or 8-bit signed integer or 8-bit unsigned integer values, but got ");
    }
  }
  v57 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v69, (uint64_t *)&v65);
  v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v57);
  if (v69)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v70);
  return v52;
}

uint64_t mlir::anec::Convolution::getODSOperands(mlir::anec::Convolution *this, unsigned int a2)
{
  uint64_t v2;

  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v2 = 0;
  return v2 + 32 * a2;
}

uint64_t mlir::anec::Convolution::getODSResults(mlir::anec::Convolution *this, unsigned int a2)
{
  uint64_t result;

  if (*(_DWORD *)(*(_QWORD *)this + 36))
    result = *(_QWORD *)this - 16;
  else
    result = 0;
  if (a2)
    return mlir::detail::OpResultImpl::getNextResultAtOffset(result, a2);
  return result;
}

uint64_t mlir::anec::Convolution::getStrideAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 56));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::Convolution::getPaddingAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 40));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::Convolution::getPaddingModeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 48));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::anec::PaddingModeAttr::classof(*((_QWORD *)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::anec::Convolution::getPaddingMode(mlir::Operation **this)
{
  uint64_t PaddingModeAttr;

  PaddingModeAttr = mlir::anec::Convolution::getPaddingModeAttr(this);
  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&PaddingModeAttr);
}

uint64_t mlir::anec::Convolution::getGroupsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::anec::Convolution::getKernelScaleAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::DenseFPElementsAttr::classof(*((_QWORD *)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::anec::Convolution::getKernelScale(mlir::Operation **this)
{
  return mlir::anec::Convolution::getKernelScaleAttr(this);
}

uint64_t mlir::anec::Convolution::getKernelZeroPointAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 32));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::DenseIntElementsAttr::classof(*((_QWORD *)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::anec::Convolution::getKernelZeroPoint(mlir::Operation **this)
{
  return mlir::anec::Convolution::getKernelZeroPointAttr(this);
}

void mlir::anec::Convolution::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  _OWORD *v9;
  uint64_t IntegerType;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  mlir::StringAttr *Context;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  mlir::StringAttr *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  mlir::StringAttr *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t IntegerAttr;
  mlir::StringAttr *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _BYTE v73[24];
  void *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v63 = a5;
  v64 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v64, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v63, 1);
  v74 = &v76;
  v77 = 1;
  v76 = xmmword_181232FD0;
  v75 = 0x300000003;
  v71 = v73;
  v72 = 0x300000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, 6uLL, 8);
  v8 = v72;
  v9 = (char *)v71 + 8 * v72;
  *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  LODWORD(v72) = v8 + 6;
  v70 = 3;
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v11 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v70, 1, IntegerType, 0);
  v12 = v11;
  if (!v11)
    goto LABEL_10;
  v13 = *v11;
  v14 = mlir::TypeID::get<mlir::ShapedType>();
  v15 = *(unsigned int *)(v13 + 16);
  if (!(_DWORD)v15)
    goto LABEL_10;
  v16 = *(_QWORD **)(v13 + 8);
  v17 = &v16[2 * v15];
  do
  {
    v18 = v15 >> 1;
    v19 = &v16[2 * (v15 >> 1)];
    v21 = *v19;
    v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14)
      v16 = v20;
    else
      v15 = v18;
  }
  while (v15);
  if (v16 != v17 && *v16 == v14)
    v22 = v16[1];
  else
LABEL_10:
    v22 = 0;
  v23 = mlir::DenseElementsAttr::getFromRawBuffer(v12, v22, v74, 8 * v75, 8, 1, 0);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v67 = 261;
  v65 = "stride";
  v66 = 6;
  v25 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v65);
  mlir::NamedAttribute::NamedAttribute(&v68, v25, v23);
  mlir::NamedAttrList::push_back(a2 + 112, v68, v69);
  v70 = 3;
  v26 = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v27 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v70, 1, v26, 0);
  v28 = v27;
  if (!v27)
    goto LABEL_20;
  v29 = *v27;
  v30 = mlir::TypeID::get<mlir::ShapedType>();
  v31 = *(unsigned int *)(v29 + 16);
  if (!(_DWORD)v31)
    goto LABEL_20;
  v32 = *(_QWORD **)(v29 + 8);
  v33 = &v32[2 * v31];
  do
  {
    v34 = v31 >> 1;
    v35 = &v32[2 * (v31 >> 1)];
    v37 = *v35;
    v36 = v35 + 2;
    v31 += ~(v31 >> 1);
    if (v37 < v30)
      v32 = v36;
    else
      v31 = v34;
  }
  while (v31);
  if (v32 != v33 && *v32 == v30)
    v38 = v32[1];
  else
LABEL_20:
    v38 = 0;
  v39 = mlir::DenseElementsAttr::getFromRawBuffer(v28, v38, v74, 8 * v75, 8, 1, 0);
  v40 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v67 = 261;
  v65 = "dilation";
  v66 = 8;
  v41 = mlir::StringAttr::get(v40, (mlir::MLIRContext *)&v65);
  mlir::NamedAttribute::NamedAttribute(&v68, v41, v39);
  mlir::NamedAttrList::push_back(a2 + 112, v68, v69);
  v70 = 6;
  v42 = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v43 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v70, 1, v42, 0);
  v44 = v43;
  if (!v43)
    goto LABEL_30;
  v45 = *v43;
  v46 = mlir::TypeID::get<mlir::ShapedType>();
  v47 = *(unsigned int *)(v45 + 16);
  if (!(_DWORD)v47)
    goto LABEL_30;
  v48 = *(_QWORD **)(v45 + 8);
  v49 = &v48[2 * v47];
  do
  {
    v50 = v47 >> 1;
    v51 = &v48[2 * (v47 >> 1)];
    v53 = *v51;
    v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46)
      v48 = v52;
    else
      v47 = v50;
  }
  while (v47);
  if (v48 != v49 && *v48 == v46)
    v54 = v48[1];
  else
LABEL_30:
    v54 = 0;
  v55 = mlir::DenseElementsAttr::getFromRawBuffer(v44, v54, v71, 8 * v72, 8, 1, 0);
  v56 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v67 = 261;
  v65 = "padding";
  v66 = 7;
  v57 = mlir::StringAttr::get(v56, (mlir::MLIRContext *)&v65);
  mlir::NamedAttribute::NamedAttribute(&v68, v57, v55);
  mlir::NamedAttrList::push_back(a2 + 112, v68, v69);
  v58 = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, v58, 1);
  v60 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v67 = 261;
  v65 = "groups";
  v66 = 6;
  v61 = mlir::StringAttr::get(v60, (mlir::MLIRContext *)&v65);
  mlir::NamedAttribute::NamedAttribute(&v68, v61, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v68, v69);
  v62 = *(unsigned int *)(a2 + 72);
  if (v62 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v62 + 1, 8);
    LODWORD(v62) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v62) = a3;
  ++*(_DWORD *)(a2 + 72);
  if (v71 != v73)
    free(v71);
  if (v74 != &v76)
    free(v74);
}

void mlir::anec::Convolution::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::UnknownLoc *v18;
  mlir::MLIRContext *v19;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30[2];
  unint64_t v31[2];
  void *__src;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v28 = a4;
  v29 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 56), a5);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 40), a7);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  if (a8)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 48), a8);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  if (a9)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16), a9);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  if (a10)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a10);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  if (a11)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24), a11);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  if (a12)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 32), a12);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  __src = v34;
  v33 = 0x200000000;
  v18 = *a1;
  v19 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v31, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v22 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v30, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Convolution>::inferReturnTypes(v18, v19, 1, v31[0], v31[1], Dictionary, v22, v23, v30[0], v30[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v24 = __src;
  v25 = v33;
  v26 = *(unsigned int *)(a2 + 72);
  v27 = v26 + v33;
  if (v27 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v27, 8);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v25)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v26), v24, 8 * v25);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v26 + v25;
  if (__src != v34)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Convolution>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Convolution::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::Convolution::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  mlir::MLIRContext *v24;
  uint64_t v25;
  uint64_t UnitAttr;
  mlir::UnknownLoc *v27;
  mlir::MLIRContext *v28;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39[2];
  unint64_t v40[2];
  void *__src;
  uint64_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v37 = a4;
  v38 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v38, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v37, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 56), a5);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 40), a7);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 48);
  v19 = mlir::IntegerType::get(*a1, 0x40u, 0);
  v20 = mlir::IntegerAttr::get(v19, a8);
  mlir::NamedAttribute::NamedAttribute(&__src, v18, v20);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x40u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a9);
  mlir::NamedAttribute::NamedAttribute(&__src, v21, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  if (a10)
  {
    v25 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
    UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v24);
    mlir::NamedAttribute::NamedAttribute(&__src, v25, UnitAttr);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  }
  if (a11)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24), a11);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  }
  if (a12)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 32), a12);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  }
  __src = v43;
  v42 = 0x200000000;
  v27 = (mlir::UnknownLoc *)*a1;
  v28 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v40, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v31 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v39, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Convolution>::inferReturnTypes(v27, v28, 1, v40[0], v40[1], Dictionary, v31, v32, v39[0], v39[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v33 = __src;
  v34 = v42;
  v35 = *(unsigned int *)(a2 + 72);
  v36 = v35 + v42;
  if (v36 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v36, 8);
    LODWORD(v35) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v34)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v35), v33, 8 * v34);
    LODWORD(v35) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v35 + v34;
  if (__src != v43)
    free(__src);
}

void mlir::anec::Convolution::populateDefaultAttrs(mlir::anec::Convolution *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t *v4;
  uint64_t Context;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(uint64_t **)(*(_QWORD *)this + 96);
  Context = mlir::Attribute::getContext((mlir::Attribute *)v4);
  v12 = Context;
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[6]))
  {
    v6 = v4[6];
    v7 = mlir::IntegerType::get(Context, 0x40u, 0);
    v8 = mlir::IntegerAttr::get(v7, 0);
    mlir::NamedAttribute::NamedAttribute(&v13, v6, v8);
    mlir::NamedAttrList::push_back((uint64_t)a2, v13, v14);
  }
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[2]))
  {
    v9 = v4[2];
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)&v12, 0x40u, 0);
    IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)&v12, IntegerType, 1);
    mlir::NamedAttribute::NamedAttribute(&v13, v9, IntegerAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2, v13, v14);
  }
}

BOOL mlir::anec::Convolution::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void **v10;
  const void **v11;
  const void **v12;
  const void **v13;
  const void ***v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t NextResultAtOffset;
  const void **v22;
  __int16 v23;
  unint64_t AttrDictionary;
  _QWORD v25[25];

  v25[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'dilation'";
LABEL_29:
    v22 = (const void **)v8;
    v23 = 259;
    mlir::OpState::emitOpError(this, &v22, (uint64_t)&AttrDictionary);
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v25);
    return v18;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      v6 = *((_QWORD *)Value + 1);
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_21:
    v8 = "requires attribute 'padding'";
    goto LABEL_29;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v14 = (const void ***)((char *)Value + v9);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 40) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
      break;
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
    {
      v10 = *(const void ***)((char *)Value + v9 + 8);
    }
    else if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
    {
      v11 = *(const void ***)((char *)Value + v9 + 8);
    }
    else if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 32) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
    {
      v12 = *(const void ***)((char *)Value + v9 + 8);
    }
    v9 += 16;
    if (v7 == v9)
      goto LABEL_21;
  }
  v15 = v7 - v9;
  if (!v15)
  {
LABEL_28:
    v8 = "requires attribute 'stride'";
    goto LABEL_29;
  }
  v16 = 0;
  v17 = v14[1];
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 56) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v14))
  {
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 48) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v14))
      v16 = (uint64_t)v14[1];
    v14 += 2;
    v15 -= 16;
    if (!v15)
      goto LABEL_28;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(*this, v14[1], (const void **)"stride", 6)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(*this, v13, (const void **)"dilation", 8)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps8(*this, v17, (const void **)"padding", 7)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps12(*this, v16, (const void **)"padding_mode", (const void **)0xC)
    || !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(*this, v10, (const void **)"groups", (const void **)6)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps9(*this, v6, (const void **)"channel_wise", (const void **)0xC)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps13(*this, v11, (const void **)"kernel_scale", 12)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps14(*this, v12, (const void **)"kernel_zero_point", 17)
    || !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v20 = (uint64_t)(*this - 2);
  else
    v20 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps12(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t v11;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2 || (mlir::anec::PaddingModeAttr::classof(a2) & 1) != 0)
    return 1;
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (v11)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (v11)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: valid PaddingMode");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps13(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void **v58;
  _QWORD v59[2];
  uint64_t v60;
  const void **v61;
  _QWORD v62[2];
  uint64_t OperandRange;
  _QWORD v64[2];
  _QWORD v65[2];
  const void **v66;
  uint64_t v67;
  __int16 v68;
  _QWORD *v69;
  _QWORD v70[24];

  v70[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (!mlir::DenseFPElementsAttr::classof((uint64_t)a2))
    goto LABEL_46;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v66 = a2;
  v67 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v69 = v19;
  v70[0] = v29;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ElementsAttr>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_31;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_31:
      v40 = 0;
    v64[0] = a2;
    v64[1] = v40;
    v41 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v64);
    v42 = v41;
    if (!v41)
      goto LABEL_41;
    v43 = *v41;
    v44 = mlir::TypeID::get<mlir::ShapedType>();
    v45 = *(unsigned int *)(v43 + 16);
    if (!(_DWORD)v45)
      goto LABEL_41;
    v46 = *(_QWORD **)(v43 + 8);
    v47 = &v46[2 * v45];
    do
    {
      v48 = v45 >> 1;
      v49 = &v46[2 * (v45 >> 1)];
      v51 = *v49;
      v50 = v49 + 2;
      v45 += ~(v45 >> 1);
      if (v51 < v44)
        v46 = v50;
      else
        v45 = v48;
    }
    while (v45);
    if (v46 != v47 && *v46 == v44)
      v52 = v46[1];
    else
LABEL_41:
      v52 = 0;
    v65[0] = v42;
    v65[1] = v52;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
    if (v53 != 1)
      goto LABEL_46;
  }
  v61 = a2;
  v62[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61);
  v62[1] = v54;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v62);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    return 1;
  v58 = a2;
  v59[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
  v59[1] = v55;
  v60 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59);
  if (mlir::Type::isF32((mlir::Type *)&v60))
    return 1;
LABEL_46:
  v68 = 257;
  mlir::Operation::emitOpError(a1, &v66, (uint64_t)&v69);
  if (v69)
  {
    mlir::Diagnostic::operator<<((uint64_t)v70, "attribute '");
    if (v69)
    {
      v68 = 261;
      v66 = a3;
      v67 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v70, &v66);
      if (v69)
        mlir::Diagnostic::operator<<((uint64_t)v70, "' failed to satisfy constraint: f16 or f32 elements attribute of rank 0/1");
    }
  }
  v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
  if (v69)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v70);
  return v56;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps14(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void **v58;
  _QWORD v59[2];
  uint64_t v60;
  const void **v61;
  _QWORD v62[2];
  uint64_t OperandRange;
  _QWORD v64[2];
  _QWORD v65[2];
  const void **v66;
  uint64_t v67;
  __int16 v68;
  _QWORD *v69;
  _QWORD v70[24];

  v70[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2))
    goto LABEL_46;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v66 = a2;
  v67 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v69 = v19;
  v70[0] = v29;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ElementsAttr>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_31;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_31:
      v40 = 0;
    v64[0] = a2;
    v64[1] = v40;
    v41 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v64);
    v42 = v41;
    if (!v41)
      goto LABEL_41;
    v43 = *v41;
    v44 = mlir::TypeID::get<mlir::ShapedType>();
    v45 = *(unsigned int *)(v43 + 16);
    if (!(_DWORD)v45)
      goto LABEL_41;
    v46 = *(_QWORD **)(v43 + 8);
    v47 = &v46[2 * v45];
    do
    {
      v48 = v45 >> 1;
      v49 = &v46[2 * (v45 >> 1)];
      v51 = *v49;
      v50 = v49 + 2;
      v45 += ~(v45 >> 1);
      if (v51 < v44)
        v46 = v50;
      else
        v45 = v48;
    }
    while (v45);
    if (v46 != v47 && *v46 == v44)
      v52 = v46[1];
    else
LABEL_41:
      v52 = 0;
    v65[0] = v42;
    v65[1] = v52;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
    if (v53 != 1)
      goto LABEL_46;
  }
  v61 = a2;
  v62[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61);
  v62[1] = v54;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v62);
  if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8))
    return 1;
  v58 = a2;
  v59[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
  v59[1] = v55;
  v60 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&v60, 8))
    return 1;
LABEL_46:
  v68 = 257;
  mlir::Operation::emitOpError(a1, &v66, (uint64_t)&v69);
  if (v69)
  {
    mlir::Diagnostic::operator<<((uint64_t)v70, "attribute '");
    if (v69)
    {
      v68 = 261;
      v66 = a3;
      v67 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v70, &v66);
      if (v69)
        mlir::Diagnostic::operator<<((uint64_t)v70, "' failed to satisfy constraint: si8 or ui8 elements attribute of rank 0/1");
    }
  }
  v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
  if (v69)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v70);
  return v56;
}

uint64_t llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t NumElements;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;

  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v10, *a1, 0);
  v2 = *a1;
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v7, v2, NumElements);
  while (1)
  {
    v4 = v10 == v7 && v11 == v8;
    if (v4 && v12 == v9)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v10, (llvm::APInt *)&v13);
    if (v14 <= 0x40)
    {
      if ((unint64_t)((uint64_t)((_QWORD)v13 << -(char)v14) >> -(char)v14) > 2)
        return 0;
    }
    else
    {
      v5 = *(_QWORD *)v13;
      operator delete[](v13);
      if (v5 > 2)
        return 0;
    }
    ++v12;
  }
  return 1;
}

uint64_t llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_1>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t NumElements;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;

  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v10, *a1, 0);
  v2 = *a1;
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v7, v2, NumElements);
  while (1)
  {
    v4 = v10 == v7 && v11 == v8;
    if (v4 && v12 == v9)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v10, (llvm::APInt *)&v13);
    if (v14 <= 0x40)
    {
      if ((unint64_t)((uint64_t)((_QWORD)v13 << -(char)v14) >> -(char)v14) > 1)
        return 0;
    }
    else
    {
      v5 = *(_QWORD *)v13;
      operator delete[](v13);
      if (v5 > 1)
        return 0;
    }
    ++v12;
  }
  return 1;
}

uint64_t llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_2>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t NumElements;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;

  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v10, *a1, 0);
  v2 = *a1;
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v7, v2, NumElements);
  while (1)
  {
    v4 = v10 == v7 && v11 == v8;
    if (v4 && v12 == v9)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v10, (llvm::APInt *)&v13);
    if (v14 <= 0x40)
    {
      if ((unint64_t)((uint64_t)((_QWORD)v13 << -(char)v14) >> -(char)v14) > 5)
        return 0;
    }
    else
    {
      v5 = *(_QWORD *)v13;
      operator delete[](v13);
      if (v5 > 5)
        return 0;
    }
    ++v12;
  }
  return 1;
}

uint64_t llvm::all_of<mlir::DenseIntElementsAttr,mlir::anec::CropResizeAdaptor::verify(mlir::Location)::$_4>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t NumElements;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;

  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v10, *a1, 0);
  v2 = *a1;
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)a1);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v7, v2, NumElements);
  while (1)
  {
    v4 = v10 == v7 && v11 == v8;
    if (v4 && v12 == v9)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v10, (llvm::APInt *)&v13);
    if (v14 <= 0x40)
    {
      if ((unint64_t)((uint64_t)((_QWORD)v13 << -(char)v14) >> -(char)v14) > 8)
        return 0;
    }
    else
    {
      v5 = *(_QWORD *)v13;
      operator delete[](v13);
      if (v5 > 8)
        return 0;
    }
    ++v12;
  }
  return 1;
}

uint64_t mlir::anec::CropResize::getOutputDimsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 64);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 48), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 40));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::CropResize::getCropDimsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 48);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 80), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::DenseIntElementsAttr::classof(*((_QWORD *)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::anec::CropResize::getBoxCoordinateModeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 96), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::CropResize::getCoordinateModeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 80), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::CropResize::getNormalizedRangeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 48);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 64), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 32));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::CropResize::getSamplingModeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 112);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 64));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::CropResize::getSamplingMethodAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 96);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 56));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::CropResize::getPaddingModesAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 80);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 48));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::CropResize::getBackgroundValueAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 112), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::CropResize>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::CropResize::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::CropResize::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *v14;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v26;
  v25 = 0x200000000;
  v13 = *a1;
  v14 = *(mlir::MLIRContext **)a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v17 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::CropResize>::inferReturnTypes(v13, v14, 1, a3, a4, Dictionary, v17, v18, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v19 = __src;
  v20 = v25;
  v21 = *(unsigned int *)(a2 + 72);
  v22 = v21 + v25;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v20)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v26)
    free(__src);
}

void mlir::anec::CropResize::populateDefaultAttrs(mlir::anec::CropResize *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t IntegerType;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Context;
  uint64_t v21[2];
  _QWORD v22[2];
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(*(_QWORD *)this + 96);
  Context = mlir::Attribute::getContext((mlir::Attribute *)v4);
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[3]))
  {
    v5 = v4[3];
    v23[0] = 2;
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)&Context, 0x40u, 0);
    v7 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v23, 1, IntegerType, 0);
    v8 = v7;
    if (!v7)
      goto LABEL_11;
    v9 = *v7;
    v10 = mlir::TypeID::get<mlir::ShapedType>();
    v11 = *(unsigned int *)(v9 + 16);
    if (!(_DWORD)v11)
      goto LABEL_11;
    v12 = *(_QWORD **)(v9 + 8);
    v13 = &v12[2 * v11];
    do
    {
      v14 = v11 >> 1;
      v15 = &v12[2 * (v11 >> 1)];
      v17 = *v15;
      v16 = v15 + 2;
      v11 += ~(v11 >> 1);
      if (v17 < v10)
        v12 = v16;
      else
        v11 = v14;
    }
    while (v11);
    if (v12 != v13 && *v12 == v10)
      v18 = v12[1];
    else
LABEL_11:
      v18 = 0;
    v22[0] = 0;
    v22[1] = 0;
    v19 = mlir::DenseElementsAttr::getFromRawBuffer(v8, v18, v22, 16, 8, 1, 0);
    mlir::NamedAttribute::NamedAttribute(v21, v5, v19);
    mlir::NamedAttrList::push_back((uint64_t)a2, v21[0], v21[1]);
  }
}

BOOL mlir::anec::CropResize::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  _QWORD *v15;
  const void ***v16;
  unint64_t v17;
  const void **v18;
  const void ***v19;
  uint64_t v20;
  uint64_t v22;
  const void **v23;
  const char *v24;
  unint64_t v25;
  const void ***v26;
  uint64_t v27;
  const void **v28;
  mlir::CallGraphNode *v29;
  const void **v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t NextResultAtOffset;
  const void **v34;
  const void **v35;
  const void **v36[4];
  __int16 v37;
  unint64_t AttrDictionary;
  _QWORD v39[25];

  v39[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v8 = "requires attribute 'background_value'";
LABEL_31:
    v36[0] = (const void **)v8;
    v37 = 259;
    mlir::OpState::emitOpError(this, v36, (uint64_t)&AttrDictionary);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v39);
    return v20;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(Value + v6)))
  {
    v6 += 16;
    if (v7 == v6)
      goto LABEL_8;
  }
  v9 = v7 - v6;
  if (v7 == v6)
  {
LABEL_13:
    v8 = "requires attribute 'box_coordinate_mode'";
    goto LABEL_31;
  }
  v10 = *(const void ***)(Value + v6 + 8);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(Value + v6)))
  {
    v9 -= 16;
    v6 += 16;
    if (v7 == v6)
      goto LABEL_13;
  }
  if (v7 == v6)
  {
LABEL_18:
    v8 = "requires attribute 'coordinate_mode'";
    goto LABEL_31;
  }
  v11 = 0;
  v12 = *(_QWORD *)(Value + v6 + 8);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(Value + v6 + v11)))
  {
    v11 += 16;
    if (v9 == v11)
      goto LABEL_18;
  }
  v13 = v9 - v11;
  if (v9 == v11)
  {
LABEL_25:
    v8 = "requires attribute 'normalized_range'";
    goto LABEL_31;
  }
  v14 = 0;
  v15 = *(_QWORD **)(Value + v11 + v6 + 8);
  v16 = (const void ***)(Value + v6 + v11 + 8);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 32) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v16 - 1)))
  {
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v16 - 1)))
      v14 = *v16;
    v16 += 2;
    v13 -= 16;
    if (!v13)
      goto LABEL_25;
  }
  if (!v13)
  {
LABEL_30:
    v8 = "requires attribute 'output_dims'";
    goto LABEL_31;
  }
  v17 = 0;
  v18 = *v16;
  while (1)
  {
    v19 = &v16[v17 / 8];
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 40) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v16[v17 / 8 - 1]))
      break;
    v17 += 16;
    if (v13 == v17)
      goto LABEL_30;
  }
  v22 = v13 - v17;
  if (v13 == v17)
  {
LABEL_39:
    v24 = "requires attribute 'padding_modes'";
LABEL_50:
    v36[0] = (const void **)v24;
    v37 = 259;
    mlir::OpState::emitOpError(this, v36, (uint64_t)&AttrDictionary);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&AttrDictionary);
    return v20;
  }
  v23 = *v19;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 48) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v19 - 1)))
  {
    v19 += 2;
    v22 -= 16;
    if (!v22)
      goto LABEL_39;
  }
  v35 = v23;
  if (!v22)
  {
LABEL_44:
    v24 = "requires attribute 'sampling_method'";
    goto LABEL_50;
  }
  v25 = 0;
  v34 = *v19;
  while (1)
  {
    v26 = &v19[v25 / 8];
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 56) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v19[v25 / 8 - 1]))
      break;
    v25 += 16;
    if (v22 == v25)
      goto LABEL_44;
  }
  v27 = v22 - v25;
  if (!v27)
  {
LABEL_49:
    v24 = "requires attribute 'sampling_mode'";
    goto LABEL_50;
  }
  v30 = *v26;
  v29 = (mlir::CallGraphNode *)(v26 - 1);
  v28 = v30;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 64) != mlir::CallGraphNode::getCallableRegion(v29))
  {
    v29 = (mlir::CallGraphNode *)((char *)v29 + 16);
    v27 -= 16;
    if (!v27)
      goto LABEL_49;
  }
  v31 = (_QWORD *)*((_QWORD *)v29 + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps5(*this, v35, (const void **)"output_dims", 11)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps5(*this, v14, (const void **)"crop_dims", 9)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps15(*this, v12, (const void **)"box_coordinate_mode", (const void **)0x13)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps16(*this, v15, (const void **)"coordinate_mode", 15)
    || !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps17(*this, v18, (const void **)"normalized_range", 16)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps18(*this, v31, (const void **)"sampling_mode", 13)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps19(*this, v28, (const void **)"sampling_method", 15)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps20(*this, v34, (const void **)"padding_modes", 13)
    || !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, v10, (const void **)"background_value", (const void **)0x10)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps3(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps4(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v32 = (uint64_t)(*this - 2);
  else
    v32 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps15(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t v11;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2 || (mlir::anec::BoxCoordinateModeAttr::classof(a2) & 1) != 0)
    return 1;
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (v11)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (v11)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: valid BoxCoordinateMode");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps16(uint64_t *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t NumElements;
  unint64_t v34;
  BOOL v35;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  void *__p;
  unsigned int v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  const void **v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v38[0] = a2;
  v38[1] = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
  v19 = Type;
  if (!Type)
    goto LABEL_20;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v39[0] = v19;
  v39[1] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v49 = 5;
  if (v31 == 1 && *ArgAttrsAttr == v49)
  {
    v37 = a2;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v46, (uint64_t)a2, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v37);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v42, (uint64_t)a2, NumElements);
    while (1)
    {
      v35 = v46 == v42 && v47[0] == v43;
      if (v35 && v48 == v44)
        return 1;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v46, (llvm::APInt *)&__p);
      if (v41 > 0x40)
      {
        v34 = *(_QWORD *)__p;
        operator delete[](__p);
        if (v34 > 2)
          break;
      }
      else if ((unint64_t)((uint64_t)((_QWORD)__p << -(uint64_t)v41) >> -(uint64_t)v41) > 2)
      {
        break;
      }
      ++v48;
    }
  }
  v45 = 257;
  mlir::Operation::emitOpError(a1, &v42, (uint64_t)&v46);
  if (v46)
  {
    mlir::Diagnostic::operator<<((uint64_t)v47, "attribute '");
    if (v46)
    {
      v45 = 261;
      v42 = a3;
      v43 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v47, &v42);
      if (v46)
        mlir::Diagnostic::operator<<((uint64_t)v47, "' failed to satisfy constraint: CoordinateMode elements attribute of shape {5}");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
  if (v46)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return v32;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps17(uint64_t *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t NumElements;
  unint64_t v34;
  BOOL v35;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  void *__p;
  unsigned int v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  const void **v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v38[0] = a2;
  v38[1] = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
  v19 = Type;
  if (!Type)
    goto LABEL_20;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v39[0] = v19;
  v39[1] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v49 = 5;
  if (v31 == 1 && *ArgAttrsAttr == v49)
  {
    v37 = a2;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v46, (uint64_t)a2, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v37);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v42, (uint64_t)a2, NumElements);
    while (1)
    {
      v35 = v46 == v42 && v47[0] == v43;
      if (v35 && v48 == v44)
        return 1;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v46, (llvm::APInt *)&__p);
      if (v41 > 0x40)
      {
        v34 = *(_QWORD *)__p;
        operator delete[](__p);
        if (v34 > 1)
          break;
      }
      else if ((unint64_t)((uint64_t)((_QWORD)__p << -(uint64_t)v41) >> -(uint64_t)v41) > 1)
      {
        break;
      }
      ++v48;
    }
  }
  v45 = 257;
  mlir::Operation::emitOpError(a1, &v42, (uint64_t)&v46);
  if (v46)
  {
    mlir::Diagnostic::operator<<((uint64_t)v47, "attribute '");
    if (v46)
    {
      v45 = 261;
      v42 = a3;
      v43 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v47, &v42);
      if (v46)
        mlir::Diagnostic::operator<<((uint64_t)v47, "' failed to satisfy constraint: NormalizedCoordinateRange elements attribute of shape {5}");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
  if (v46)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return v32;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps18(uint64_t *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t NumElements;
  unint64_t v34;
  BOOL v35;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  void *__p;
  unsigned int v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  const void **v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v38[0] = a2;
  v38[1] = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
  v19 = Type;
  if (!Type)
    goto LABEL_20;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v39[0] = v19;
  v39[1] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v49 = 5;
  if (v31 == 1 && *ArgAttrsAttr == v49)
  {
    v37 = a2;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v46, (uint64_t)a2, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v37);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v42, (uint64_t)a2, NumElements);
    while (1)
    {
      v35 = v46 == v42 && v47[0] == v43;
      if (v35 && v48 == v44)
        return 1;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v46, (llvm::APInt *)&__p);
      if (v41 > 0x40)
      {
        v34 = *(_QWORD *)__p;
        operator delete[](__p);
        if (v34 > 5)
          break;
      }
      else if ((unint64_t)((uint64_t)((_QWORD)__p << -(uint64_t)v41) >> -(uint64_t)v41) > 5)
      {
        break;
      }
      ++v48;
    }
  }
  v45 = 257;
  mlir::Operation::emitOpError(a1, &v42, (uint64_t)&v46);
  if (v46)
  {
    mlir::Diagnostic::operator<<((uint64_t)v47, "attribute '");
    if (v46)
    {
      v45 = 261;
      v42 = a3;
      v43 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v47, &v42);
      if (v46)
        mlir::Diagnostic::operator<<((uint64_t)v47, "' failed to satisfy constraint: SamplingGridMode elements attribute of shape {5}");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
  if (v46)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return v32;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps19(uint64_t *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t NumElements;
  unint64_t v34;
  BOOL v35;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  void *__p;
  unsigned int v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  const void **v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v38[0] = a2;
  v38[1] = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
  v19 = Type;
  if (!Type)
    goto LABEL_20;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v39[0] = v19;
  v39[1] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v49 = 5;
  if (v31 == 1 && *ArgAttrsAttr == v49)
  {
    v37 = a2;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v46, (uint64_t)a2, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v37);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v42, (uint64_t)a2, NumElements);
    while (1)
    {
      v35 = v46 == v42 && v47[0] == v43;
      if (v35 && v48 == v44)
        return 1;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v46, (llvm::APInt *)&__p);
      if (v41 > 0x40)
      {
        v34 = *(_QWORD *)__p;
        operator delete[](__p);
        if (v34 > 1)
          break;
      }
      else if ((unint64_t)((uint64_t)((_QWORD)__p << -(uint64_t)v41) >> -(uint64_t)v41) > 1)
      {
        break;
      }
      ++v48;
    }
  }
  v45 = 257;
  mlir::Operation::emitOpError(a1, &v42, (uint64_t)&v46);
  if (v46)
  {
    mlir::Diagnostic::operator<<((uint64_t)v47, "attribute '");
    if (v46)
    {
      v45 = 261;
      v42 = a3;
      v43 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v47, &v42);
      if (v46)
        mlir::Diagnostic::operator<<((uint64_t)v47, "' failed to satisfy constraint: SamplingGridMethod elements attribute of shape {5}");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
  if (v46)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return v32;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps20(uint64_t *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t NumElements;
  unint64_t v34;
  BOOL v35;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  void *__p;
  unsigned int v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  const void **v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v38[0] = a2;
  v38[1] = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
  v19 = Type;
  if (!Type)
    goto LABEL_20;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v39[0] = v19;
  v39[1] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v49 = 5;
  if (v31 == 1 && *ArgAttrsAttr == v49)
  {
    v37 = a2;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v46, (uint64_t)a2, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v37);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v42, (uint64_t)a2, NumElements);
    while (1)
    {
      v35 = v46 == v42 && v47[0] == v43;
      if (v35 && v48 == v44)
        return 1;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v46, (llvm::APInt *)&__p);
      if (v41 > 0x40)
      {
        v34 = *(_QWORD *)__p;
        operator delete[](__p);
        if (v34 > 8)
          break;
      }
      else if ((unint64_t)((uint64_t)((_QWORD)__p << -(uint64_t)v41) >> -(uint64_t)v41) > 8)
      {
        break;
      }
      ++v48;
    }
  }
  v45 = 257;
  mlir::Operation::emitOpError(a1, &v42, (uint64_t)&v46);
  if (v46)
  {
    mlir::Diagnostic::operator<<((uint64_t)v47, "attribute '");
    if (v46)
    {
      v45 = 261;
      v42 = a3;
      v43 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v47, &v42);
      if (v46)
        mlir::Diagnostic::operator<<((uint64_t)v47, "' failed to satisfy constraint: PaddingMode elements attribute of shape {5}");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
  if (v46)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return v32;
}

uint64_t mlir::anec::__mlir_ods_local_type_constraint_ANECOps3(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v48;
  char *v49;
  const void **v50;
  uint64_t v51;
  __int16 v52;
  const void **v53;
  uint64_t OperandRange;
  const void **v55;
  uint64_t v56;
  const void **v57;
  _QWORD v58[2];
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD v62[20];

  v62[19] = *MEMORY[0x1E0C80C00];
  v53 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_35;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v57 = a2;
  v58[0] = v19;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v57);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    v20 = *a2;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *((unsigned int *)v20 + 4);
    if (!(_DWORD)v22)
      goto LABEL_22;
    v23 = (_QWORD *)v20[1];
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
    if (v23 != v24 && *v23 == v21)
      v29 = v23[1];
    else
LABEL_22:
      v29 = 0;
    v50 = a2;
    v51 = v29;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
    {
      v30 = *a2;
      v31 = mlir::TypeID::get<mlir::ShapedType>();
      v32 = *((unsigned int *)v30 + 4);
      if (!(_DWORD)v32)
        goto LABEL_32;
      v33 = (_QWORD *)v30[1];
      v34 = &v33[2 * v32];
      do
      {
        v35 = v32 >> 1;
        v36 = &v33[2 * (v32 >> 1)];
        v38 = *v36;
        v37 = v36 + 2;
        v32 += ~(v32 >> 1);
        if (v38 < v31)
          v33 = v37;
        else
          v32 = v35;
      }
      while (v32);
      if (v33 != v34 && *v33 == v31)
        v39 = v33[1];
      else
LABEL_32:
        v39 = 0;
      v55 = a2;
      v56 = v39;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
      if (v40 == 5)
        return 1;
    }
  }
LABEL_35:
  v52 = 261;
  v50 = a3;
  v51 = a4;
  mlir::Operation::emitOpError(a1, &v50, (uint64_t)&v57);
  if (v57)
  {
    mlir::Diagnostic::operator<<((uint64_t)v58, " #");
    if (v57)
    {
      LODWORD(v55) = 5;
      v56 = a5;
      v42 = (char *)&v55;
      v43 = v59;
      if (v60 >= v61)
      {
        v48 = v60 + 1;
        if (v59 <= (unint64_t)&v55 && v59 + 24 * v60 > (unint64_t)&v55)
        {
          v49 = (char *)&v55 - v59;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v48, 24);
          v43 = v59;
          v42 = &v49[v59];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v48, 24);
          v42 = (char *)&v55;
          v43 = v59;
        }
      }
      v44 = v43 + 24 * v60;
      v45 = *(_OWORD *)v42;
      *(_QWORD *)(v44 + 16) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      ++v60;
      if (v57)
        mlir::Diagnostic::operator<<((uint64_t)v58, " must be 5D memref of 16-bit float or 8-bit signed integer or 8-bit unsigned integer values, but got ");
    }
  }
  v46 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v57, (uint64_t *)&v53);
  v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v46);
  if (v57)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v57);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v58);
  return v41;
}

uint64_t mlir::anec::__mlir_ods_local_type_constraint_ANECOps4(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v48;
  char *v49;
  const void **v50;
  uint64_t v51;
  __int16 v52;
  const void **v53;
  uint64_t OperandRange;
  const void **v55;
  uint64_t v56;
  const void **v57;
  _QWORD v58[2];
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD v62[20];

  v62[19] = *MEMORY[0x1E0C80C00];
  v53 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_33;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v57 = a2;
  v58[0] = v19;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v57);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    v20 = *a2;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *((unsigned int *)v20 + 4);
    if (!(_DWORD)v22)
      goto LABEL_20;
    v23 = (_QWORD *)v20[1];
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
    if (v23 != v24 && *v23 == v21)
      v29 = v23[1];
    else
LABEL_20:
      v29 = 0;
    v50 = a2;
    v51 = v29;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
    {
      v30 = *a2;
      v31 = mlir::TypeID::get<mlir::ShapedType>();
      v32 = *((unsigned int *)v30 + 4);
      if (!(_DWORD)v32)
        goto LABEL_30;
      v33 = (_QWORD *)v30[1];
      v34 = &v33[2 * v32];
      do
      {
        v35 = v32 >> 1;
        v36 = &v33[2 * (v32 >> 1)];
        v38 = *v36;
        v37 = v36 + 2;
        v32 += ~(v32 >> 1);
        if (v38 < v31)
          v33 = v37;
        else
          v32 = v35;
      }
      while (v32);
      if (v33 != v34 && *v33 == v31)
        v39 = v33[1];
      else
LABEL_30:
        v39 = 0;
      v55 = a2;
      v56 = v39;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
      if (v40 == 5)
        return 1;
    }
  }
LABEL_33:
  v52 = 261;
  v50 = a3;
  v51 = a4;
  mlir::Operation::emitOpError(a1, &v50, (uint64_t)&v57);
  if (v57)
  {
    mlir::Diagnostic::operator<<((uint64_t)v58, " #");
    if (v57)
    {
      LODWORD(v55) = 5;
      v56 = a5;
      v42 = (char *)&v55;
      v43 = v59;
      if (v60 >= v61)
      {
        v48 = v60 + 1;
        if (v59 <= (unint64_t)&v55 && v59 + 24 * v60 > (unint64_t)&v55)
        {
          v49 = (char *)&v55 - v59;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v48, 24);
          v43 = v59;
          v42 = &v49[v59];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v48, 24);
          v42 = (char *)&v55;
          v43 = v59;
        }
      }
      v44 = v43 + 24 * v60;
      v45 = *(_OWORD *)v42;
      *(_QWORD *)(v44 + 16) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      ++v60;
      if (v57)
        mlir::Diagnostic::operator<<((uint64_t)v58, " must be 5D memref of 16-bit float values, but got ");
    }
  }
  v46 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v57, (uint64_t *)&v53);
  v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v46);
  if (v57)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v57);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v58);
  return v41;
}

void mlir::anec::DeQuant::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  mlir::MLIRContext *v12;
  uint64_t F32Type;
  uint64_t FloatAttr;
  uint64_t v15;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  v11 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  F32Type = mlir::Builder::getF32Type(a1, v12);
  FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a5);
  mlir::NamedAttribute::NamedAttribute(&v20, v11, FloatAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v20, v21);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x20u, 1);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a6);
  mlir::NamedAttribute::NamedAttribute(&v20, v15, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v20, v21);
  v18 = *(unsigned int *)(a2 + 72);
  if (v18 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v18) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::anec::DeQuant::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t v9;
  const void **v11;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  const void **v14;
  __int16 v15;
  unint64_t AttrDictionary;
  _QWORD v17[24];

  v17[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'scale'";
LABEL_14:
    v14 = (const void **)v7;
    v15 = 259;
    mlir::OpState::emitOpError(this, &v14, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v17);
    return v9;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'zero_point'";
    goto LABEL_14;
  }
  v8 = (const void **)*((_QWORD *)Value + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  v11 = (const void **)*((_QWORD *)Value + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps21(*this, v8, (const void **)"scale", (const void **)5)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps22(*this, v11, (const void **)"zero_point", (const void **)0xA)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v12 = (uint64_t)(*this - 2);
  else
    v12 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps21(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t Value;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v9[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isF32((mlir::Type *)&Value))
      return 1;
  }
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (Value)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (Value)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: 32-bit float attribute");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps22(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t Value;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isSignedInteger((mlir::Type *)&Value, 32))
      return 1;
  }
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (Value)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (Value)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: 32-bit signed integer attribute");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

void mlir::anec::Deconvolution::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::UnknownLoc *v18;
  mlir::MLIRContext *v19;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30[2];
  unint64_t v31[2];
  void *__src;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v28 = a4;
  v29 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 56), a5);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 40), a7);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  if (a8)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 48), a8);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  if (a9)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16), a9);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  if (a10)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a10);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  if (a11)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24), a11);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  if (a12)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 32), a12);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v33);
  }
  __src = v34;
  v33 = 0x200000000;
  v18 = *a1;
  v19 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v31, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v22 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v30, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Deconvolution>::inferReturnTypes(v18, v19, 1u, v31[0], v31[1], Dictionary, v22, v23, v30[0], v30[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v24 = __src;
  v25 = v33;
  v26 = *(unsigned int *)(a2 + 72);
  v27 = v26 + v33;
  if (v27 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v27, 8);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v25)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v26), v24, 8 * v25);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v26 + v25;
  if (__src != v34)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Deconvolution>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Deconvolution::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::Deconvolution::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  mlir::MLIRContext *v24;
  uint64_t v25;
  uint64_t UnitAttr;
  mlir::UnknownLoc *v27;
  mlir::MLIRContext *v28;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39[2];
  unint64_t v40[2];
  void *__src;
  uint64_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v37 = a4;
  v38 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v38, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v37, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 56), a5);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 40), a7);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 48);
  v19 = mlir::IntegerType::get(*a1, 0x40u, 0);
  v20 = mlir::IntegerAttr::get(v19, a8);
  mlir::NamedAttribute::NamedAttribute(&__src, v18, v20);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x40u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a9);
  mlir::NamedAttribute::NamedAttribute(&__src, v21, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  if (a10)
  {
    v25 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
    UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v24);
    mlir::NamedAttribute::NamedAttribute(&__src, v25, UnitAttr);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  }
  if (a11)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24), a11);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  }
  if (a12)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 32), a12);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v42);
  }
  __src = v43;
  v42 = 0x200000000;
  v27 = (mlir::UnknownLoc *)*a1;
  v28 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v40, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v31 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v39, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Deconvolution>::inferReturnTypes(v27, v28, 1u, v40[0], v40[1], Dictionary, v31, v32, v39[0], v39[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v33 = __src;
  v34 = v42;
  v35 = *(unsigned int *)(a2 + 72);
  v36 = v35 + v42;
  if (v36 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v36, 8);
    LODWORD(v35) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v34)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v35), v33, 8 * v34);
    LODWORD(v35) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v35 + v34;
  if (__src != v43)
    free(__src);
}

void mlir::anec::ElementwiseAdd::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a5;
  v9 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v9, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v8, 1);
  v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v7) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::anec::ElementwiseAdd::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v16 = a4;
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  __src = v22;
  v21 = 0x200000000;
  v6 = *a1;
  v7 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v10 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Ceil>::inferReturnTypes(v6, v7, 1, v19[0], v19[1], Dictionary, v10, v11, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v12 = __src;
  v13 = v21;
  v14 = *(unsigned int *)(a2 + 72);
  v15 = v14 + v21;
  if (v15 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v13)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v14), v12, 8 * v13);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + v13;
  if (__src != v22)
    free(__src);
}

BOOL mlir::anec::ElementwiseAdd::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::ElementwiseAdd::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"anec.add", 8, v2, v3, 0, 0);
  *v4 = &off_1E0E529A0;
  v4[12] = mlir::anec::ElementwiseAdd::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ElementwiseEqual>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t RankPromotionTypeForANE;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31[2];
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[48];
  uint64_t v37;
  _QWORD v38[24];

  v38[23] = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v34 = v36;
  v35 = 0x600000000;
  v32 = a4;
  if (a5)
  {
    v16 = 0;
    while (1)
    {
      v17 = mlir::ValueRange::dereference_iterator(&v32, v16);
      v18 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v18)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v18, v19);
      v21 = v35;
      if (v35 >= (unint64_t)HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 8);
        v21 = v35;
      }
      *((_QWORD *)v34 + v21) = RankPromotionTypeForANE;
      v22 = (v35 + 1);
      LODWORD(v35) = v35 + 1;
      v16 = ++v33;
      if (v32 == a4 && v16 == a5)
      {
        v24 = v34;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v37);
      if (v37)
        mlir::Diagnostic::operator<<((uint64_t)v38, "expected a ShapedType for inferReturnTypes");
      v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v37);
      if (v37)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v38);
    }
    else
    {
      v23 = 0;
    }
  }
  else
  {
    v22 = 0;
    v24 = v36;
LABEL_16:
    mlir::ValueRange::ValueRange(v31, (uint64_t)v24, v22);
    v23 = mlir::anec::inferElementwiseCompareReturnTypes(a1, v25, v26, a4, a5, v27, v28, v29, v31[0], v31[1], a11);
  }
  if (v34 != v36)
    free(v34);
  return v23;
}

void mlir::anec::ElementwiseEqual::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v26;
  v25 = 0x200000000;
  v13 = *a1;
  v14 = *(_QWORD *)a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v17 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ElementwiseEqual>::inferReturnTypes(v13, v14, 1, a3, a4, Dictionary, v17, v18, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v19 = __src;
  v20 = v25;
  v21 = *(unsigned int *)(a2 + 72);
  v22 = v21 + v25;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v20)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v26)
    free(__src);
}

void mlir::anec::ElementwiseEqualZero::build(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16[2];
  unint64_t v17[2];
  void *__src;
  uint64_t v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  __src = v20;
  v19 = 0x200000000;
  v5 = *a1;
  v6 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v9 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v16, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Ceil>::inferReturnTypes(v5, v6, 1, v17[0], v17[1], Dictionary, v9, v10, v16[0], v16[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v11 = __src;
  v12 = v19;
  v13 = *(unsigned int *)(a2 + 72);
  v14 = v13 + v19;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  if (__src != v20)
    free(__src);
}

void mlir::anec::ElementwiseGreaterThanEqualZero::build(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16[2];
  unint64_t v17[2];
  void *__src;
  uint64_t v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  __src = v20;
  v19 = 0x200000000;
  v5 = *a1;
  v6 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v9 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v16, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ElementwiseEqual>::inferReturnTypes(v5, v6, 1, v17[0], v17[1], Dictionary, v9, v10, v16[0], v16[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v11 = __src;
  v12 = v19;
  v13 = *(unsigned int *)(a2 + 72);
  v14 = v13 + v19;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  if (__src != v20)
    free(__src);
}

uint64_t mlir::anec::ElementwiseMax::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"anec.max", 8, v2, v3, 0, 0);
  *v4 = &off_1E0E529F8;
  v4[12] = mlir::anec::ElementwiseMax::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::anec::ElementwiseMin::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"anec.min", 8, v2, v3, 0, 0);
  *v4 = &off_1E0E52A50;
  v4[12] = mlir::anec::ElementwiseMin::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::anec::ElementwiseMult::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"anec.mult", 9, v2, v3, 0, 0);
  *v4 = &off_1E0E52B00;
  v4[12] = mlir::anec::ElementwiseMult::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::anec::ElementwiseSub::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"anec.sub", 8, v2, v3, 0, 0);
  *v4 = &off_1E0E52AA8;
  v4[12] = mlir::anec::ElementwiseSub::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

BOOL mlir::anec::Elu::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, Value[1], (const void **)"alpha", (const void **)5)&& mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'alpha'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

void mlir::anec::Flatten::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Flatten>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Flatten>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Flatten::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::Flatten::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::anec::__mlir_ods_local_attr_constraint_ANECOps23(*this, Value[1], (const void **)"flatten_mode", (const void **)0xC)&& mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'flatten_mode'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps23(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v8;
  const void **v10;
  const void **v11;
  const void **v12[4];
  __int16 v13;
  uint64_t Value;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v12[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v12);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64))
    {
      v11 = a2;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11) == 1)
        return 1;
      v10 = a2;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) == 2)
        return 1;
    }
  }
  v13 = 257;
  mlir::Operation::emitOpError(a1, v12, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v15, "attribute '");
    if (Value)
    {
      v13 = 261;
      v12[0] = a3;
      v12[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v15, v12);
      if (Value)
        mlir::Diagnostic::operator<<((uint64_t)v15, "' failed to satisfy constraint: valid FlattenMode");
    }
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v8;
}

uint64_t mlir::anec::detail::GOCGenericAdaptorBase::GOCGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "anec.gain_offset_control", 24, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::anec::GOC::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a5;
  v11 = a4;
  v9 = a6;
  mlir::OperationState::addOperands(a2, (uint64_t)&v11, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v10, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v9, 1);
  v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v8) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::anec::GOC::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[2];
  unint64_t v21[2];
  void *__src;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v18 = a4;
  v19 = a3;
  v17 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  __src = v24;
  v23 = 0x200000000;
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Ceil>::inferReturnTypes(v7, v8, 1, v21[0], v21[1], Dictionary, v11, v12, v20[0], v20[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v23;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v23;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v24)
    free(__src);
}

void mlir::anec::GOC::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  mlir::OperationState::addOperands(a2, a5, a6);
  *(_QWORD *)(a2 + 192) = 0;
  v13 = *(unsigned int *)(a2 + 120);
  if (a8 + v13 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a8 + v13, 16);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  if (a8)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v13), a7, 16 * a8);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v13 + a8;
  v14 = *(unsigned int *)(a2 + 72);
  if (a4 + v14 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v14, 8);
    v14 = *(unsigned int *)(a2 + 72);
  }
  if (a4)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a2 + 64) + 8 * v14;
    do
    {
      *(_QWORD *)(v16 + 8 * v15) = mlir::TypeRange::dereference_iterator(a3, v15);
      ++v15;
    }
    while (a4 != v15);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + a4;
}

BOOL mlir::anec::GOC::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps5(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps5(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_type_constraint_ANECOps5(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v59;
  char *v60;
  const void **v61;
  uint64_t v62;
  __int16 v63;
  _QWORD v64[2];
  const void **v65;
  uint64_t OperandRange;
  const void **v67;
  uint64_t v68;
  const void **v69;
  _QWORD v70[2];
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD v74[20];

  v74[19] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_43;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v69 = a2;
  v70[0] = v19;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    v20 = *a2;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *((unsigned int *)v20 + 4);
    if (!(_DWORD)v22)
      goto LABEL_20;
    v23 = (_QWORD *)v20[1];
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
    if (v23 != v24 && *v23 == v21)
      v29 = v23[1];
    else
LABEL_20:
      v29 = 0;
    v61 = a2;
    v62 = v29;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v61))
    {
      v30 = *a2;
      v31 = mlir::TypeID::get<mlir::ShapedType>();
      v32 = *((unsigned int *)v30 + 4);
      if (!(_DWORD)v32)
        goto LABEL_30;
      v33 = (_QWORD *)v30[1];
      v34 = &v33[2 * v32];
      do
      {
        v35 = v32 >> 1;
        v36 = &v33[2 * (v32 >> 1)];
        v38 = *v36;
        v37 = v36 + 2;
        v32 += ~(v32 >> 1);
        if (v38 < v31)
          v33 = v37;
        else
          v32 = v35;
      }
      while (v32);
      if (v33 != v34 && *v33 == v31)
        v39 = v33[1];
      else
LABEL_30:
        v39 = 0;
      v67 = a2;
      v68 = v39;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
      if (v40 == 4)
        return 1;
      v41 = *a2;
      v42 = mlir::TypeID::get<mlir::ShapedType>();
      v43 = *((unsigned int *)v41 + 4);
      if (!(_DWORD)v43)
        goto LABEL_40;
      v44 = (_QWORD *)v41[1];
      v45 = &v44[2 * v43];
      do
      {
        v46 = v43 >> 1;
        v47 = &v44[2 * (v43 >> 1)];
        v49 = *v47;
        v48 = v47 + 2;
        v43 += ~(v43 >> 1);
        if (v49 < v42)
          v44 = v48;
        else
          v43 = v46;
      }
      while (v43);
      if (v44 != v45 && *v44 == v42)
        v50 = v44[1];
      else
LABEL_40:
        v50 = 0;
      v64[0] = a2;
      v64[1] = v50;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
      if (v51 == 5)
        return 1;
    }
  }
LABEL_43:
  v63 = 261;
  v61 = a3;
  v62 = a4;
  mlir::Operation::emitOpError(a1, &v61, (uint64_t)&v69);
  if (v69)
  {
    mlir::Diagnostic::operator<<((uint64_t)v70, " #");
    if (v69)
    {
      LODWORD(v67) = 5;
      v68 = a5;
      v53 = (char *)&v67;
      v54 = v71;
      if (v72 >= v73)
      {
        v59 = v72 + 1;
        if (v71 <= (unint64_t)&v67 && v71 + 24 * v72 > (unint64_t)&v67)
        {
          v60 = (char *)&v67 - v71;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
          v54 = v71;
          v53 = &v60[v71];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
          v53 = (char *)&v67;
          v54 = v71;
        }
      }
      v55 = v54 + 24 * v72;
      v56 = *(_OWORD *)v53;
      *(_QWORD *)(v55 + 16) = *((_QWORD *)v53 + 2);
      *(_OWORD *)v55 = v56;
      ++v72;
      if (v69)
        mlir::Diagnostic::operator<<((uint64_t)v70, " must be 4D/5D memref of 16-bit float values, but got ");
    }
  }
  v57 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v69, (uint64_t *)&v65);
  v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v57);
  if (v69)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v70);
  return v52;
}

void mlir::anec::GatherND::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::UnknownLoc *v8;
  mlir::MLIRContext *v9;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[2];
  unint64_t v21[2];
  void *__src;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v18 = a4;
  v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a5);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v23);
  __src = v24;
  v23 = 0x200000000;
  v8 = *a1;
  v9 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v12 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::GatherND>::inferReturnTypes(v8, v9, 1, v21[0], v21[1], Dictionary, v12, v13, v20[0], v20[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v14 = __src;
  v15 = v23;
  v16 = *(unsigned int *)(a2 + 72);
  v17 = v16 + v23;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v15)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v24)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::GatherND>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::GatherND::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::GatherND::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t CallableRegion;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *Type;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t NextResultAtOffset;
  const void **v39;
  _QWORD v40[2];
  uint64_t OperandRange;
  const void **v42;
  const void **v43;
  uint64_t v44;
  __int16 v45;
  unint64_t AttrDictionary;
  _QWORD v47[24];

  v47[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
        break;
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v10 = (const void **)*((_QWORD *)Value + 1);
    if (v10)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v10))
        goto LABEL_36;
      v11 = *v10;
      v12 = mlir::TypeID::get<mlir::ElementsAttr>();
      v13 = *((unsigned int *)v11 + 4);
      if (!(_DWORD)v13)
        goto LABEL_21;
      v14 = (_QWORD *)v11[1];
      v15 = &v14[2 * v13];
      do
      {
        v16 = v13 >> 1;
        v17 = &v14[2 * (v13 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v13 += ~(v13 >> 1);
        if (v19 < v12)
          v14 = v18;
        else
          v13 = v16;
      }
      while (v13);
      if (v14 != v15 && *v14 == v12)
        v20 = v14[1];
      else
LABEL_21:
        v20 = 0;
      v43 = v10;
      v44 = v20;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v43);
      v22 = Type;
      if (!Type)
        goto LABEL_31;
      v23 = *Type;
      v24 = mlir::TypeID::get<mlir::ShapedType>();
      v25 = *(unsigned int *)(v23 + 16);
      if (!(_DWORD)v25)
        goto LABEL_31;
      v26 = *(_QWORD **)(v23 + 8);
      v27 = &v26[2 * v25];
      do
      {
        v28 = v25 >> 1;
        v29 = &v26[2 * (v25 >> 1)];
        v31 = *v29;
        v30 = v29 + 2;
        v25 += ~(v25 >> 1);
        if (v31 < v24)
          v26 = v30;
        else
          v25 = v28;
      }
      while (v25);
      if (v26 != v27 && *v26 == v24)
        v32 = v26[1];
      else
LABEL_31:
        v32 = 0;
      AttrDictionary = (unint64_t)v22;
      v47[0] = v32;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
      if (v33 != 1
        || !mlir::hasUniqueValues((uint64_t)v10)
        || (v42 = v10, !mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v42))
        || (v39 = v10,
            v40[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39),
            v40[1] = v34,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_36:
        v45 = 257;
        mlir::Operation::emitOpError(v8, &v43, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v47, "attribute '");
          if (AttrDictionary)
          {
            v45 = 261;
            v43 = (const void **)"axes";
            v44 = 4;
            mlir::Diagnostic::operator<<((uint64_t)v47, &v43);
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v47, "' failed to satisfy constraint: ui64 unique not empty elements attribute of ranks 1");
          }
        }
        v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
        if (!v35)
          return 0;
      }
    }
    if (mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)&& mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
    {
      if (*((_DWORD *)*this + 9))
        v36 = (uint64_t)(*this - 2);
      else
        v36 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v43 = (const void **)"requires attribute 'axes'";
    v45 = 259;
    mlir::OpState::emitOpError(this, &v43, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  }
  return v9;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::GlobalArgMinMax>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::GlobalArgMinMax::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::GlobalArgMinMax::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mlir::UnknownLoc *v15;
  mlir::MLIRContext *v16;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26[2];
  unint64_t v27[2];
  void *__src;
  uint64_t v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  v25 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  v9 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a4);
  mlir::NamedAttribute::NamedAttribute(&__src, v9, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v29);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  v13 = mlir::IntegerType::get(*(_QWORD *)a1, 0x40u, 0);
  v14 = mlir::IntegerAttr::get(v13, a5);
  mlir::NamedAttribute::NamedAttribute(&__src, v12, v14);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v29);
  __src = v30;
  v29 = 0x200000000;
  v15 = *(mlir::UnknownLoc **)a1;
  v16 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v27, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v19 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::GlobalArgMinMax>::inferReturnTypes(v15, v16, 1, v27[0], v27[1], Dictionary, v19, v20, v26[0], v26[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v21 = __src;
  v22 = v29;
  v23 = *(unsigned int *)(a2 + 72);
  v24 = v23 + v29;
  if (v24 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v24, 8);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v22)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v23), v21, 8 * v22);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v23 + v22;
  if (__src != v30)
    free(__src);
}

BOOL mlir::anec::GlobalArgMinMax::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t CallableRegion;
  uint64_t *v10;
  uint64_t v11;
  const void **v13;
  char v14;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  const void **v17[4];
  __int16 v18;
  unint64_t AttrDictionary;
  _QWORD v20[24];

  v20[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'axis'";
LABEL_14:
    v17[0] = (const void **)v7;
    v18 = 259;
    mlir::OpState::emitOpError(this, v17, (uint64_t)&AttrDictionary);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v20);
    return v11;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'mode'";
    goto LABEL_14;
  }
  v8 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
    v10 = *this;
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == CallableRegion)
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  v13 = (const void **)*((_QWORD *)Value + 1);
  if (v8)
  {
    if (*((_UNKNOWN **)*v8 + 17) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v17[0] = v8,
          AttrDictionary = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v17),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&AttrDictionary, 32)))
    {
      v18 = 257;
      mlir::Operation::emitOpError(v10, v17, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v20, "attribute '");
        if (AttrDictionary)
        {
          v18 = 261;
          v17[0] = (const void **)"axis";
          v17[1] = (const void **)4;
          mlir::Diagnostic::operator<<((uint64_t)v20, v17);
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v20, "' failed to satisfy constraint: 32-bit unsigned integer attribute");
        }
      }
      v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v20);
      if (!v14)
        return 0;
    }
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps4(*this, v13, (const void **)"mode", (const void **)4)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v15 = (uint64_t)(*this - 2);
  else
    v15 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::InputView::getDimensionAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 48), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::InputView::getOffsetAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::InputView::getSizeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::InputView::getStepAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 48);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

void mlir::anec::InputView::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::anec::InputView::build(a1, a2, a3, a4, a5, a6, 1);
}

void mlir::anec::InputView::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  mlir::UnknownLoc *v25;
  mlir::MLIRContext *v26;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36[2];
  unint64_t v37[2];
  void *__src;
  uint64_t v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v35 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v35, 1);
  v13 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a4);
  mlir::NamedAttribute::NamedAttribute(&__src, v13, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v39);
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  v17 = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v18 = mlir::Builder::getIntegerAttr((uint64_t)a1, v17, a5);
  mlir::NamedAttribute::NamedAttribute(&__src, v16, v18);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v39);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  v20 = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v21 = mlir::Builder::getIntegerAttr((uint64_t)a1, v20, a6);
  mlir::NamedAttribute::NamedAttribute(&__src, v19, v21);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v39);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24);
  v23 = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v24 = mlir::Builder::getIntegerAttr((uint64_t)a1, v23, a7);
  mlir::NamedAttribute::NamedAttribute(&__src, v22, v24);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v39);
  __src = v40;
  v39 = 0x200000000;
  v25 = *(mlir::UnknownLoc **)a1;
  v26 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v37, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v29 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v36, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::InputView>::inferReturnTypes(v25, v26, 1u, v37[0], v37[1], Dictionary, v29, v30, v36[0], v36[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v31 = __src;
  v32 = v39;
  v33 = *(unsigned int *)(a2 + 72);
  v34 = v33 + v39;
  if (v34 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v34, 8);
    LODWORD(v33) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v32)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v33), v31, 8 * v32);
    LODWORD(v33) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v33 + v32;
  if (__src != v40)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::InputView>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::InputView::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::InputView::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t v9;
  const void **v10;
  mlir::CallGraphNode *v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  const void **v16;
  uint64_t v17;
  uint64_t NextResultAtOffset;
  const void **v19;
  __int16 v20;
  unint64_t AttrDictionary;
  _QWORD v22[24];

  v22[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'dimension'";
LABEL_23:
    v19 = (const void **)v7;
    v20 = 259;
    mlir::OpState::emitOpError(this, &v19, (uint64_t)&AttrDictionary);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v22);
    return v14;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'offset'";
    goto LABEL_23;
  }
  v8 = (const void **)*((_QWORD *)Value + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  v9 = 0;
  v10 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (mlir::CallGraphNode *)((char *)Value + v9);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
      break;
    v9 += 16;
    if (v6 == v9)
    {
      v7 = "requires attribute 'size'";
      goto LABEL_23;
    }
  }
  v12 = v6 - v9;
  if (!v12)
  {
LABEL_22:
    v7 = "requires attribute 'step'";
    goto LABEL_23;
  }
  v13 = (const void **)*((_QWORD *)v11 + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) != mlir::CallGraphNode::getCallableRegion(v11))
  {
    v11 = (mlir::CallGraphNode *)((char *)v11 + 16);
    v12 -= 16;
    if (!v12)
      goto LABEL_22;
  }
  v16 = (const void **)*((_QWORD *)v11 + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(*this, v8, (const void **)"dimension", (const void **)9)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(*this, v10, (const void **)"offset", (const void **)6)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(*this, v13, (const void **)"size", (const void **)4)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(*this, v16, (const void **)"step", (const void **)4)
    || !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v17 = (uint64_t)(*this - 2);
  else
    v17 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::InstanceNorm>::inferReturnTypes(mlir::Float16Type *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t RankPromotionTypeForANE;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[48];
  uint64_t v39;
  _QWORD v40[24];

  v40[23] = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = v38;
  v37 = 0x600000000;
  v34 = a4;
  if (a5)
  {
    v16 = 0;
    while (1)
    {
      v17 = mlir::ValueRange::dereference_iterator(&v34, v16);
      v18 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v18)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v18, v19);
      v21 = v37;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v37 + 1, 8);
        v21 = v37;
      }
      *((_QWORD *)v36 + v21) = RankPromotionTypeForANE;
      v22 = (v37 + 1);
      LODWORD(v37) = v37 + 1;
      v16 = ++v35;
      if (v34 == a4 && v16 == a5)
      {
        v24 = v36;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v39);
      if (v39)
        mlir::Diagnostic::operator<<((uint64_t)v40, "expected a ShapedType for inferReturnTypes");
      v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if (v39)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    }
    else
    {
      v23 = 0;
    }
  }
  else
  {
    v22 = 0;
    v24 = v38;
LABEL_16:
    mlir::ValueRange::ValueRange(&v33, (uint64_t)v24, v22);
    v23 = mlir::anec::InstanceNorm::inferPromotedReturnTypes(a1, v25, v26, a4, a5, v27, v28, v29, v31, v32, a11);
  }
  if (v36 != v38)
    free(v36);
  return v23;
}

void mlir::anec::InstanceNorm::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t F32Type;
  uint64_t FloatAttr;
  mlir::Float16Type *v13;
  uint64_t v14;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24[2];
  unint64_t v25[2];
  void *__src;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v23 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v27);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  F32Type = mlir::Builder::getF32Type(a1, v10);
  FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a5);
  mlir::NamedAttribute::NamedAttribute(&__src, v9, FloatAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v27);
  __src = v28;
  v27 = 0x200000000;
  v13 = *a1;
  v14 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v25, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v17 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::InstanceNorm>::inferReturnTypes(v13, v14, 1, v25[0], v25[1], Dictionary, v17, v18, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v19 = __src;
  v20 = v27;
  v21 = *(unsigned int *)(a2 + 72);
  v22 = v21 + v27;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v20)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v28)
    free(__src);
}

BOOL mlir::anec::InstanceNorm::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t CallableRegion;
  uint64_t *v10;
  uint64_t v11;
  const void **v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *Type;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t NextResultAtOffset;
  const void **v41;
  _QWORD v42[2];
  uint64_t OperandRange;
  const void **v44;
  uint64_t v45;
  __int16 v46;
  unint64_t AttrDictionary;
  _QWORD v48[24];

  v48[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'axes'";
LABEL_14:
    v44 = (const void **)v7;
    v46 = 259;
    mlir::OpState::emitOpError(this, &v44, (uint64_t)&AttrDictionary);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v48);
    return v11;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'epsilon'";
    goto LABEL_14;
  }
  v8 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
    v10 = *this;
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == CallableRegion)
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  v13 = (const void **)*((_QWORD *)Value + 1);
  if (v8)
  {
    if (!mlir::DenseIntElementsAttr::classof((uint64_t)v8))
      goto LABEL_42;
    v14 = *v8;
    v15 = mlir::TypeID::get<mlir::ElementsAttr>();
    v16 = *((unsigned int *)v14 + 4);
    if (!(_DWORD)v16)
      goto LABEL_28;
    v17 = (_QWORD *)v14[1];
    v18 = &v17[2 * v16];
    do
    {
      v19 = v16 >> 1;
      v20 = &v17[2 * (v16 >> 1)];
      v22 = *v20;
      v21 = v20 + 2;
      v16 += ~(v16 >> 1);
      if (v22 < v15)
        v17 = v21;
      else
        v16 = v19;
    }
    while (v16);
    if (v17 != v18 && *v17 == v15)
      v23 = v17[1];
    else
LABEL_28:
      v23 = 0;
    v44 = v8;
    v45 = v23;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v44);
    v25 = Type;
    if (!Type)
      goto LABEL_38;
    v26 = *Type;
    v27 = mlir::TypeID::get<mlir::ShapedType>();
    v28 = *(unsigned int *)(v26 + 16);
    if (!(_DWORD)v28)
      goto LABEL_38;
    v29 = *(_QWORD **)(v26 + 8);
    v30 = &v29[2 * v28];
    do
    {
      v31 = v28 >> 1;
      v32 = &v29[2 * (v28 >> 1)];
      v34 = *v32;
      v33 = v32 + 2;
      v28 += ~(v28 >> 1);
      if (v34 < v27)
        v29 = v33;
      else
        v28 = v31;
    }
    while (v28);
    if (v29 != v30 && *v29 == v27)
      v35 = v29[1];
    else
LABEL_38:
      v35 = 0;
    AttrDictionary = (unint64_t)v25;
    v48[0] = v35;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
    if (v36 != 1
      || !mlir::hasUniqueValues((uint64_t)v8)
      || (v41 = v8,
          v42[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41),
          v42[1] = v37,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v42),
          !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
LABEL_42:
      v46 = 257;
      mlir::Operation::emitOpError(v10, &v44, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v48, "attribute '");
        if (AttrDictionary)
        {
          v46 = 261;
          v44 = (const void **)"axes";
          v45 = 4;
          mlir::Diagnostic::operator<<((uint64_t)v48, &v44);
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v48, "' failed to satisfy constraint: ui64 unique elements attribute of ranks 1");
        }
      }
      v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v48);
      if (!v38)
        return 0;
    }
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps21(*this, v13, (const void **)"epsilon", (const void **)7)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v39 = (uint64_t)(*this - 2);
  else
    v39 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v39, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps5(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

void mlir::anec::Invert::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Ceil>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

BOOL mlir::anec::Invert::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, Value[1], (const void **)"epsilon", (const void **)7)&& mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'epsilon'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::anec::L2NormPool::getStrideAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::L2NormPool::getPaddingAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::L2NormPool::getKsizeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 32), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::L2NormPool>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::L2NormPool::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::L2NormPool::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *v14;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v26;
  v25 = 0x200000000;
  v13 = *a1;
  v14 = *(mlir::MLIRContext **)a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v17 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::L2NormPool>::inferReturnTypes(v13, v14, 1, a3, a4, Dictionary, v17, v18, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v19 = __src;
  v20 = v25;
  v21 = *(unsigned int *)(a2 + 72);
  v22 = v21 + v25;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v20)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v26)
    free(__src);
}

BOOL mlir::anec::L2NormPool::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void **v9;
  const void ***v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  const void **v17;
  __int16 v18;
  unint64_t AttrDictionary;
  _QWORD v20[24];

  v20[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'ksize'";
LABEL_19:
    v17 = (const void **)v7;
    v18 = 259;
    mlir::OpState::emitOpError(this, &v17, (uint64_t)&AttrDictionary);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v20);
    return v13;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'padding'";
    goto LABEL_19;
  }
  v8 = 0;
  v9 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v10 = (const void ***)((char *)Value + v8);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v8)))
      break;
    v8 += 16;
    if (v6 == v8)
      goto LABEL_13;
  }
  v11 = v6 - v8;
  if (!v11)
  {
LABEL_18:
    v7 = "requires attribute 'stride'";
    goto LABEL_19;
  }
  v12 = v10[1];
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v10))
  {
    v10 += 2;
    v11 -= 16;
    if (!v11)
      goto LABEL_18;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(*this, v10[1], (const void **)"stride", 6)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps8(*this, v12, (const void **)"padding", 7)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(*this, v9, (const void **)"ksize", 5)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v15 = (uint64_t)(*this - 2);
  else
    v15 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

BOOL mlir::anec::LeakyRelu::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t v9;
  const void **v11;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  const void **v14;
  __int16 v15;
  unint64_t AttrDictionary;
  _QWORD v17[24];

  v17[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'offset'";
LABEL_14:
    v14 = (const void **)v7;
    v15 = 259;
    mlir::OpState::emitOpError(this, &v14, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v17);
    return v9;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'slope'";
    goto LABEL_14;
  }
  v8 = (const void **)*((_QWORD *)Value + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  v11 = (const void **)*((_QWORD *)Value + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, v8, (const void **)"offset", (const void **)6)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, v11, (const void **)"slope", (const void **)5)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v12 = (uint64_t)(*this - 2);
  else
    v12 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::Linear::getKernelScaleAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::DenseFPElementsAttr::classof(*((_QWORD *)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::anec::Linear::getKernelScale(mlir::Operation **this)
{
  return mlir::anec::Linear::getKernelScaleAttr(this);
}

uint64_t mlir::anec::Linear::getKernelZeroPointAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::DenseIntElementsAttr::classof(*((_QWORD *)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::anec::Linear::getKernelZeroPoint(mlir::Operation **this)
{
  return mlir::anec::Linear::getKernelZeroPointAttr(this);
}

void mlir::anec::Linear::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::UnknownLoc *v10;
  mlir::MLIRContext *v11;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22[2];
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v20 = a4;
  v21 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  if (a5)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a5);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v25);
  }
  if (a6)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v25);
  }
  __src = v26;
  v25 = 0x200000000;
  v10 = *a1;
  v11 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v14 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Linear>::inferReturnTypes(v10, v11, 1, v23[0], v23[1], Dictionary, v14, v15, v22[0], v22[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v16 = __src;
  v17 = v25;
  v18 = *(unsigned int *)(a2 + 72);
  v19 = v18 + v25;
  if (v19 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v17)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v18), v16, 8 * v17);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v17;
  if (__src != v26)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Linear>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Linear::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::Linear::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  const void **v6;
  const void **v7;
  uint64_t v8;
  uint64_t CallableRegion;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 16 * v4;
    do
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v10 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
      {
        v6 = (const void **)*((_QWORD *)Value + 1);
      }
      else
      {
        v11 = mlir::CallGraphNode::getCallableRegion(Value);
        v10 = *this;
        if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v11)
          v7 = (const void **)*((_QWORD *)Value + 1);
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v8 -= 16;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v10 = *this;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps13(v10, v6, (const void **)"kernel_scale", 12)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps14(*this, v7, (const void **)"kernel_zero_point", 17)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand",
                           7,
                           1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v12 = (uint64_t)(*this - 2);
  else
    v12 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::MatMul::getBiasAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

void mlir::anec::MatMul::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::UnknownLoc *v8;
  mlir::MLIRContext *v9;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[2];
  unint64_t v21[2];
  void *__src;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v18 = a4;
  v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  if (a5)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a5);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v23);
  }
  __src = v24;
  v23 = 0x200000000;
  v8 = *a1;
  v9 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v12 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::MatMul>::inferReturnTypes(v8, v9, 1, v21[0], v21[1], Dictionary, v12, v13, v20[0], v20[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v14 = __src;
  v15 = v23;
  v16 = *(unsigned int *)(a2 + 72);
  v17 = v16 + v23;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v15)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v24)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::MatMul>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::MatMul::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::MatMul::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  const void **v6;
  uint64_t v7;
  uint64_t CallableRegion;
  uint64_t *v9;
  uint64_t v10;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v6 = 0;
  if (v4)
  {
    v7 = 16 * v4;
    do
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v9 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
        v6 = (const void **)*((_QWORD *)Value + 1);
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v7 -= 16;
    }
    while (v7);
  }
  else
  {
    v9 = *this;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(v9, v6, (const void **)"bias", (const void **)4)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v10 = (uint64_t)(*this - 2);
  else
    v10 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::MaxPool>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::MaxPool::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::MaxPool::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *v14;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v26;
  v25 = 0x200000000;
  v13 = *a1;
  v14 = *(mlir::MLIRContext **)a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v17 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::MaxPool>::inferReturnTypes(v13, v14, 1, a3, a4, Dictionary, v17, v18, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v19 = __src;
  v20 = v25;
  v21 = *(unsigned int *)(a2 + 72);
  v22 = v21 + v25;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v20)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v26)
    free(__src);
}

BOOL mlir::anec::NRelu::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t v9;
  const void **v11;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  const void **v14;
  __int16 v15;
  unint64_t AttrDictionary;
  _QWORD v17[24];

  v17[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'max_value'";
LABEL_14:
    v14 = (const void **)v7;
    v15 = 259;
    mlir::OpState::emitOpError(this, &v14, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v17);
    return v9;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'slope'";
    goto LABEL_14;
  }
  v8 = (const void **)*((_QWORD *)Value + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  v11 = (const void **)*((_QWORD *)Value + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, v8, (const void **)"max_value", (const void **)9)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, v11, (const void **)"slope", (const void **)5)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v12 = (uint64_t)(*this - 2);
  else
    v12 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

void mlir::anec::Padding::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::UnknownLoc *v11;
  mlir::MLIRContext *v12;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22[2];
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v21 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v25);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16), a5);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v25);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a6);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v25);
  __src = v26;
  v25 = 0x200000000;
  v11 = *a1;
  v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v15 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Padding>::inferReturnTypes(v11, v12, 1u, v23[0], v23[1], Dictionary, v15, v16, v22[0], v22[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v17 = __src;
  v18 = v25;
  v19 = *(unsigned int *)(a2 + 72);
  v20 = v19 + v25;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v18)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v26)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Padding>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Padding::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::Padding::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void **v9;
  mlir::CallGraphNode *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const void **v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Type;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *ArgAttrsAttr;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t NextResultAtOffset;
  const void **v46;
  _QWORD v47[2];
  uint64_t OperandRange;
  const void **v49;
  uint64_t v50;
  __int16 v51;
  unint64_t AttrDictionary;
  _QWORD v53[23];
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'background_value'";
LABEL_19:
    v49 = (const void **)v7;
    v51 = 259;
    mlir::OpState::emitOpError(this, &v49, (uint64_t)&AttrDictionary);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v53);
    return v13;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'padding_modes'";
    goto LABEL_19;
  }
  v8 = 0;
  v9 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v10 = (mlir::CallGraphNode *)((char *)Value + v8);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v8)))
      break;
    v8 += 16;
    if (v6 == v8)
      goto LABEL_13;
  }
  v11 = v6 - v8;
  if (!v11)
  {
LABEL_18:
    v7 = "requires attribute 'padding_sizes'";
    goto LABEL_19;
  }
  v12 = (_QWORD *)*((_QWORD *)v10 + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) != mlir::CallGraphNode::getCallableRegion(v10))
  {
    v10 = (mlir::CallGraphNode *)((char *)v10 + 16);
    v11 -= 16;
    if (!v11)
      goto LABEL_18;
  }
  v15 = (const void **)*((_QWORD *)v10 + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps20(*this, v12, (const void **)"padding_modes", 13))return 0;
  if (v15)
  {
    v16 = *this;
    if (!mlir::DenseIntElementsAttr::classof((uint64_t)v15))
      goto LABEL_52;
    v17 = *v15;
    v18 = mlir::TypeID::get<mlir::ElementsAttr>();
    v19 = *((unsigned int *)v17 + 4);
    if (!(_DWORD)v19)
      goto LABEL_34;
    v20 = (_QWORD *)v17[1];
    v21 = &v20[2 * v19];
    do
    {
      v22 = v19 >> 1;
      v23 = &v20[2 * (v19 >> 1)];
      v25 = *v23;
      v24 = v23 + 2;
      v19 += ~(v19 >> 1);
      if (v25 < v18)
        v20 = v24;
      else
        v19 = v22;
    }
    while (v19);
    if (v20 != v21 && *v20 == v18)
      v26 = v20[1];
    else
LABEL_34:
      v26 = 0;
    v49 = v15;
    v50 = v26;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v49);
    v28 = Type;
    if (!Type)
      goto LABEL_44;
    v29 = *Type;
    v30 = mlir::TypeID::get<mlir::ShapedType>();
    v31 = *(unsigned int *)(v29 + 16);
    if (!(_DWORD)v31)
      goto LABEL_44;
    v32 = *(_QWORD **)(v29 + 8);
    v33 = &v32[2 * v31];
    do
    {
      v34 = v31 >> 1;
      v35 = &v32[2 * (v31 >> 1)];
      v37 = *v35;
      v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30)
        v32 = v36;
      else
        v31 = v34;
    }
    while (v31);
    if (v32 != v33 && *v32 == v30)
      v38 = v32[1];
    else
LABEL_44:
      v38 = 0;
    AttrDictionary = (unint64_t)v28;
    v53[0] = v38;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
    v54 = xmmword_181233130;
    if (v40 != 2
      || (*ArgAttrsAttr == (_QWORD)v54 ? (v41 = ArgAttrsAttr[1] == *((_QWORD *)&v54 + 1)) : (v41 = 0),
          !v41
       || (v46 = v15,
           v47[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46),
           v47[1] = v42,
           OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47),
           !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))))
    {
LABEL_52:
      v51 = 257;
      mlir::Operation::emitOpError(v16, &v49, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v53, "attribute '");
        if (AttrDictionary)
        {
          v51 = 261;
          v49 = (const void **)"padding_sizes";
          v50 = 13;
          mlir::Diagnostic::operator<<((uint64_t)v53, &v49);
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v53, "' failed to satisfy constraint: ui64 elements attribute of shape {5, 2}");
        }
      }
      v43 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v53);
      if (!v43)
        return 0;
    }
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps10(*this, v9, (const void **)"background_value", (const void **)0x10)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v44 = (uint64_t)(*this - 2);
  else
    v44 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v44, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

void mlir::anec::PixelShuffle::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::PixelShuffle>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::PixelShuffle>::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::PixelShuffle::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::PixelUnshuffle::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::PixelUnshuffle>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::PixelUnshuffle>::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::PixelUnshuffle::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::ReduceAvg::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ReduceAvg>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ReduceAvg>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::ReduceAvg::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::ReduceAvg::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::anec::__mlir_ods_local_attr_constraint_ANECOps28(*this, Value[1], (const void **)"axes", 4)&& mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'axes'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps28(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void **v57;
  _QWORD v58[2];
  uint64_t OperandRange;
  _QWORD v60[2];
  _QWORD v61[2];
  const void **v62;
  uint64_t v63;
  __int16 v64;
  _QWORD *v65;
  _QWORD v66[24];

  v66[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2))
    goto LABEL_46;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v62 = a2;
  v63 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v65 = v19;
  v66[0] = v29;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v65);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ElementsAttr>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_31;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_31:
      v40 = 0;
    v60[0] = a2;
    v60[1] = v40;
    v41 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v60);
    v42 = v41;
    if (!v41)
      goto LABEL_41;
    v43 = *v41;
    v44 = mlir::TypeID::get<mlir::ShapedType>();
    v45 = *(unsigned int *)(v43 + 16);
    if (!(_DWORD)v45)
      goto LABEL_41;
    v46 = *(_QWORD **)(v43 + 8);
    v47 = &v46[2 * v45];
    do
    {
      v48 = v45 >> 1;
      v49 = &v46[2 * (v45 >> 1)];
      v51 = *v49;
      v50 = v49 + 2;
      v45 += ~(v45 >> 1);
      if (v51 < v44)
        v46 = v50;
      else
        v45 = v48;
    }
    while (v45);
    if (v46 != v47 && *v46 == v44)
      v52 = v46[1];
    else
LABEL_41:
      v52 = 0;
    v61[0] = v42;
    v61[1] = v52;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v61);
    if (v53 != 1)
      goto LABEL_46;
  }
  if (mlir::hasUniqueValues((uint64_t)a2))
  {
    v57 = a2;
    v58[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
    v58[1] = v54;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v58);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      return 1;
  }
LABEL_46:
  v64 = 257;
  mlir::Operation::emitOpError(a1, &v62, (uint64_t)&v65);
  if (v65)
  {
    mlir::Diagnostic::operator<<((uint64_t)v66, "attribute '");
    if (v65)
    {
      v64 = 261;
      v62 = a3;
      v63 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v66, &v62);
      if (v65)
        mlir::Diagnostic::operator<<((uint64_t)v66, "' failed to satisfy constraint: ui64 unique elements attribute of ranks 0/1");
    }
  }
  v55 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
  if (v65)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v66);
  return v55;
}

void mlir::anec::ReduceMax::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ReduceMax>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ReduceMax>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::ReduceMax::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::ReduceMin::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ReduceMin>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ReduceMin>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::ReduceMin::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::ReduceSum::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ReduceSum>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::ReduceSum>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::ReduceSum::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t mlir::anec::detail::RegionReturnGenericAdaptorBase::RegionReturnGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "anec.region_return", 18, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::anec::RegionReturn::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::OperationState::addOperands(a2, a3, a4);
}

uint64_t mlir::anec::detail::ReshapeGenericAdaptorBase::ReshapeGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "anec.reshape", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::anec::Reshape::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"anec.reshape", 12, v2, v3, 0, 0);
  *v4 = &off_1E0E52B58;
  v4[12] = mlir::anec::Reshape::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::anec::Resize::getWidthAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 48);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 40));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::anec::Resize::getScaleFactorXAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 48);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::anec::Resize::getScaleFactorYAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 48);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 32));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Resize>::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Resize::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::Resize::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  mlir::MLIRContext *v23;
  uint64_t F32Type;
  uint64_t FloatAttr;
  uint64_t v26;
  mlir::MLIRContext *v27;
  uint64_t v28;
  uint64_t v29;
  mlir::UnknownLoc *v30;
  uint64_t v31;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41[2];
  unint64_t v42[2];
  void *__src;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  v40 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v40, 1);
  v16 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a4);
  mlir::NamedAttribute::NamedAttribute(&__src, v16, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v44);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 40);
  v20 = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v21 = mlir::Builder::getIntegerAttr((uint64_t)a1, v20, a5);
  mlir::NamedAttribute::NamedAttribute(&__src, v19, v21);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v44);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24);
  F32Type = mlir::Builder::getF32Type((mlir::Float32Type **)a1, v23);
  FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a6);
  mlir::NamedAttribute::NamedAttribute(&__src, v22, FloatAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v44);
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 32);
  v28 = mlir::Builder::getF32Type((mlir::Float32Type **)a1, v27);
  v29 = mlir::Builder::getFloatAttr((uint64_t)a1, v28, a7);
  mlir::NamedAttribute::NamedAttribute(&__src, v26, v29);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v44);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a8);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v44);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16), a9);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v44);
  __src = v45;
  v44 = 0x200000000;
  v30 = *(mlir::UnknownLoc **)a1;
  v31 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v42, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v34 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v41, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Resize>::inferReturnTypes(v30, v31, 1u, v42[0], v42[1], Dictionary, v34, v35, v41[0], v41[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v36 = __src;
  v37 = v44;
  v38 = *(unsigned int *)(a2 + 72);
  v39 = v38 + v44;
  if (v39 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v39, 8);
    LODWORD(v38) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v37)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v38), v36, 8 * v37);
    LODWORD(v38) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v38 + v37;
  if (__src != v45)
    free(__src);
}

void mlir::anec::Resize::populateDefaultAttrs(mlir::anec::Resize *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t *v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  uint64_t F32Type;
  llvm::APFloatBase *FloatAttr;
  mlir::MLIRContext *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::APFloatBase *v12;
  mlir::Float32Type *Context;
  uint64_t v14;
  uint64_t v15;

  v4 = *(uint64_t **)(*(_QWORD *)this + 96);
  Context = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)v4);
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[3]))
  {
    v6 = v4[3];
    F32Type = mlir::Builder::getF32Type(&Context, v5);
    FloatAttr = mlir::Builder::getFloatAttr(-1.0, (uint64_t)&Context, F32Type);
    mlir::NamedAttribute::NamedAttribute(&v14, v6, (uint64_t)FloatAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2, v14, v15);
  }
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[4]))
  {
    v10 = v4[4];
    v11 = mlir::Builder::getF32Type(&Context, v9);
    v12 = mlir::Builder::getFloatAttr(-1.0, (uint64_t)&Context, v11);
    mlir::NamedAttribute::NamedAttribute(&v14, v10, (uint64_t)v12);
    mlir::NamedAttrList::push_back((uint64_t)a2, v14, v15);
  }
}

BOOL mlir::anec::Resize::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t v9;
  _QWORD *v10;
  mlir::CallGraphNode *v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  _QWORD *v15;
  uint64_t v16;
  const void **v18;
  uint64_t v19;
  uint64_t NextResultAtOffset;
  const void **v21;
  __int16 v22;
  unint64_t AttrDictionary;
  _QWORD v24[24];

  v24[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'height'";
LABEL_27:
    v21 = (const void **)v7;
    v22 = 259;
    mlir::OpState::emitOpError(this, &v21, (uint64_t)&AttrDictionary);
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
    return v16;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'sampling_methods'";
    goto LABEL_27;
  }
  v8 = (const void **)*((_QWORD *)Value + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  v9 = 0;
  v10 = (_QWORD *)*((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (mlir::CallGraphNode *)((char *)Value + v9);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
      break;
    v9 += 16;
    if (v6 == v9)
    {
      v7 = "requires attribute 'sampling_modes'";
      goto LABEL_27;
    }
  }
  v12 = v6 - v9;
  if (v6 == v9)
  {
LABEL_26:
    v7 = "requires attribute 'width'";
    goto LABEL_27;
  }
  v13 = 0;
  v14 = 0;
  v15 = (_QWORD *)*((_QWORD *)v11 + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 40) != mlir::CallGraphNode::getCallableRegion(v11))
  {
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) == mlir::CallGraphNode::getCallableRegion(v11))
    {
      v13 = (const void **)*((_QWORD *)v11 + 1);
    }
    else if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 32) == mlir::CallGraphNode::getCallableRegion(v11))
    {
      v14 = (const void **)*((_QWORD *)v11 + 1);
    }
    v11 = (mlir::CallGraphNode *)((char *)v11 + 16);
    v12 -= 16;
    if (!v12)
      goto LABEL_26;
  }
  v18 = (const void **)*((_QWORD *)v11 + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(*this, v8, (const void **)"height", (const void **)6)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps11(*this, v18, (const void **)"width", (const void **)5)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps21(*this, v13, (const void **)"scale_factor_x", (const void **)0xE)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps21(*this, v14, (const void **)"scale_factor_y", (const void **)0xE)
    || !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps29(*this, v10, (const void **)"sampling_methods", 16)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps30(*this, v15, (const void **)"sampling_modes", 14)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v19 = (uint64_t)(*this - 2);
  else
    v19 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps29(uint64_t *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t NumElements;
  unint64_t v34;
  BOOL v35;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  void *__p;
  unsigned int v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  const void **v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v38[0] = a2;
  v38[1] = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
  v19 = Type;
  if (!Type)
    goto LABEL_20;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v39[0] = v19;
  v39[1] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v49 = 2;
  if (v31 == 1 && *ArgAttrsAttr == v49)
  {
    v37 = a2;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v46, (uint64_t)a2, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v37);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v42, (uint64_t)a2, NumElements);
    while (1)
    {
      v35 = v46 == v42 && v47[0] == v43;
      if (v35 && v48 == v44)
        return 1;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v46, (llvm::APInt *)&__p);
      if (v41 > 0x40)
      {
        v34 = *(_QWORD *)__p;
        operator delete[](__p);
        if (v34 > 1)
          break;
      }
      else if ((unint64_t)((uint64_t)((_QWORD)__p << -(uint64_t)v41) >> -(uint64_t)v41) > 1)
      {
        break;
      }
      ++v48;
    }
  }
  v45 = 257;
  mlir::Operation::emitOpError(a1, &v42, (uint64_t)&v46);
  if (v46)
  {
    mlir::Diagnostic::operator<<((uint64_t)v47, "attribute '");
    if (v46)
    {
      v45 = 261;
      v42 = a3;
      v43 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v47, &v42);
      if (v46)
        mlir::Diagnostic::operator<<((uint64_t)v47, "' failed to satisfy constraint: SamplingGridMethod elements attribute of shape {2}");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
  if (v46)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return v32;
}

uint64_t mlir::anec::__mlir_ods_local_attr_constraint_ANECOps30(uint64_t *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t NumElements;
  unint64_t v34;
  BOOL v35;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  void *__p;
  unsigned int v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  const void **v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v38[0] = a2;
  v38[1] = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v38);
  v19 = Type;
  if (!Type)
    goto LABEL_20;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v39[0] = v19;
  v39[1] = v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v49 = 2;
  if (v31 == 1 && *ArgAttrsAttr == v49)
  {
    v37 = a2;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v46, (uint64_t)a2, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v37);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v42, (uint64_t)a2, NumElements);
    while (1)
    {
      v35 = v46 == v42 && v47[0] == v43;
      if (v35 && v48 == v44)
        return 1;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v46, (llvm::APInt *)&__p);
      if (v41 > 0x40)
      {
        v34 = *(_QWORD *)__p;
        operator delete[](__p);
        if (v34 > 5)
          break;
      }
      else if ((unint64_t)((uint64_t)((_QWORD)__p << -(uint64_t)v41) >> -(uint64_t)v41) > 5)
      {
        break;
      }
      ++v48;
    }
  }
  v45 = 257;
  mlir::Operation::emitOpError(a1, &v42, (uint64_t)&v46);
  if (v46)
  {
    mlir::Diagnostic::operator<<((uint64_t)v47, "attribute '");
    if (v46)
    {
      v45 = 261;
      v42 = a3;
      v43 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v47, &v42);
      if (v46)
        mlir::Diagnostic::operator<<((uint64_t)v47, "' failed to satisfy constraint: SamplingGridMode elements attribute of shape {2}");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
  if (v46)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return v32;
}

uint64_t mlir::anec::detail::RsqrtGenericAdaptorBase::RsqrtGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "anec.r_sqrt", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::anec::Rsqrt::build(mlir::Float16Type **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  mlir::MLIRContext *v8;
  uint64_t F16Type;
  uint64_t FloatAttr;
  mlir::Float16Type *v11;
  uint64_t v12;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22[2];
  unint64_t v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v21 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  v7 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  F16Type = mlir::Builder::getF16Type(a1, v8);
  FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F16Type, a4);
  mlir::NamedAttribute::NamedAttribute(&__src, v7, FloatAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v25);
  __src = v26;
  v25 = 0x200000000;
  v11 = *a1;
  v12 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v15 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Ceil>::inferReturnTypes((uint64_t)v11, v12, 1, v23[0], v23[1], Dictionary, v15, v16, v22[0], v22[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v17 = __src;
  v18 = v25;
  v19 = *(unsigned int *)(a2 + 72);
  v20 = v19 + v25;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v18)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v26)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Softmax>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t RankPromotionTypeForANE;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[48];
  uint64_t v34;
  _QWORD v35[24];

  v35[23] = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v31 = v33;
  v32 = 0x600000000;
  v29 = a4;
  if (a5)
  {
    v15 = 0;
    while (1)
    {
      v16 = mlir::ValueRange::dereference_iterator(&v29, v15);
      v17 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v17)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v17, v18);
      v20 = v32;
      if (v32 >= (unint64_t)HIDWORD(v32))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 8);
        v20 = v32;
      }
      *((_QWORD *)v31 + v20) = RankPromotionTypeForANE;
      v21 = (v32 + 1);
      LODWORD(v32) = v32 + 1;
      v15 = ++v30;
      if (v29 == a4 && v15 == a5)
      {
        v23 = v31;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v34);
      if (v34)
        mlir::Diagnostic::operator<<((uint64_t)v35, "expected a ShapedType for inferReturnTypes");
      v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v34);
      if (v34)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v35);
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v21 = 0;
    v23 = v33;
LABEL_16:
    mlir::ValueRange::ValueRange(&v28, (uint64_t)v23, v21);
    v34 = a4;
    v35[0] = a5;
    v24 = mlir::ValueRange::dereference_iterator(&v34, 0);
    v25 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8));
    v26 = *(unsigned int *)(a11 + 8);
    if (v26 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
      LODWORD(v26) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v25;
    ++*(_DWORD *)(a11 + 8);
    v22 = 1;
  }
  if (v31 != v33)
    free(v31);
  return v22;
}

void mlir::anec::Softmax::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  mlir::MLIRContext *v9;
  uint64_t v10;
  uint64_t UnitAttr;
  mlir::UnitAttr *v12;
  uint64_t v13;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23[2];
  unint64_t v24[2];
  void *__src;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v26);
  if (a5)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
    UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    mlir::NamedAttribute::NamedAttribute(&__src, v10, UnitAttr);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v26);
  }
  __src = v27;
  v26 = 0x200000000;
  v12 = *a1;
  v13 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v16 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Softmax>::inferReturnTypes((uint64_t)v12, v13, 1, v24[0], v24[1], Dictionary, v16, v17, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v18 = __src;
  v19 = v26;
  v20 = *(unsigned int *)(a2 + 72);
  v21 = v20 + v26;
  if (v21 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v19)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v20), v18, 8 * v19);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v19;
  if (__src != v27)
    free(__src);
}

BOOL mlir::anec::Softmax::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t CallableRegion;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  uint64_t i;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  uint64_t v14;
  const void **v16;
  __int16 v17;
  unint64_t AttrDictionary;
  _QWORD v19[24];

  v19[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
        break;
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v10 = (const void **)*((_QWORD *)Value + 1);
    for (i = 0; v6; v6 -= 16)
    {
      v14 = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v14)
        i = *((_QWORD *)Value + 1);
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    if (mlir::anec::__mlir_ods_local_attr_constraint_ANECOps28(v8, v10, (const void **)"axes", 4)
      && mlir::anec::__mlir_ods_local_attr_constraint_ANECOps9(*this, i, (const void **)"subtractMax", (const void **)0xB)&& mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v12 = (uint64_t)(*this - 2);
      else
        v12 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps5(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v16 = (const void **)"requires attribute 'axes'";
    v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v19);
  }
  return v9;
}

void mlir::anec::SpaceToBatch::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::SpaceToBatch>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::SpaceToBatch>::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::SpaceToBatch::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::SpaceToChannel::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::SpaceToChannel>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::SpaceToChannel>::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::SpaceToChannel::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

void mlir::anec::Tile::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  void *v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange((unint64_t *)v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Tile>::inferReturnTypes(v7, v8, 1, v19[0], (uint64_t)v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Tile>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[48];
  uint64_t v35;
  _QWORD v36[25];

  v36[23] = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v32 = v34;
  v33 = 0x600000000;
  v30 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v30, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
        v22 = v33;
      }
      *((_QWORD *)v32 + v22) = RankPromotionTypeForANE;
      v23 = (v33 + 1);
      LODWORD(v33) = v33 + 1;
      v17 = ++v31;
      if (v30 == a4 && v17 == a5)
      {
        v25 = v32;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v35);
      if (v35)
        mlir::Diagnostic::operator<<((uint64_t)v36, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
      if (v35)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v36);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v34;
LABEL_16:
    mlir::ValueRange::ValueRange(&v29, (uint64_t)v25, v23);
    v24 = mlir::anec::Tile::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27, v28, a11);
  }
  if (v32 != v34)
    free(v32);
  return v24;
}

BOOL mlir::anec::Tile::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t CallableRegion;
  uint64_t *v8;
  uint64_t v9;
  const void **v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *Type;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t NextResultAtOffset;
  const void **v39;
  _QWORD v40[2];
  uint64_t OperandRange;
  const void **v42;
  uint64_t v43;
  __int16 v44;
  unint64_t AttrDictionary;
  _QWORD v46[24];

  v46[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
        break;
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v11 = (const void **)*((_QWORD *)Value + 1);
    if (v11)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v11))
        goto LABEL_35;
      v12 = *v11;
      v13 = mlir::TypeID::get<mlir::ElementsAttr>();
      v14 = *((unsigned int *)v12 + 4);
      if (!(_DWORD)v14)
        goto LABEL_22;
      v15 = (_QWORD *)v12[1];
      v16 = &v15[2 * v14];
      do
      {
        v17 = v14 >> 1;
        v18 = &v15[2 * (v14 >> 1)];
        v20 = *v18;
        v19 = v18 + 2;
        v14 += ~(v14 >> 1);
        if (v20 < v13)
          v15 = v19;
        else
          v14 = v17;
      }
      while (v14);
      if (v15 != v16 && *v15 == v13)
        v21 = v15[1];
      else
LABEL_22:
        v21 = 0;
      v42 = v11;
      v43 = v21;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v42);
      v23 = Type;
      if (!Type)
        goto LABEL_32;
      v24 = *Type;
      v25 = mlir::TypeID::get<mlir::ShapedType>();
      v26 = *(unsigned int *)(v24 + 16);
      if (!(_DWORD)v26)
        goto LABEL_32;
      v27 = *(_QWORD **)(v24 + 8);
      v28 = &v27[2 * v26];
      do
      {
        v29 = v26 >> 1;
        v30 = &v27[2 * (v26 >> 1)];
        v32 = *v30;
        v31 = v30 + 2;
        v26 += ~(v26 >> 1);
        if (v32 < v25)
          v27 = v31;
        else
          v26 = v29;
      }
      while (v26);
      if (v27 != v28 && *v27 == v25)
        v33 = v27[1];
      else
LABEL_32:
        v33 = 0;
      AttrDictionary = (unint64_t)v23;
      v46[0] = v33;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
      if (v34 != 1
        || (v39 = v11,
            v40[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39),
            v40[1] = v35,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_35:
        v44 = 257;
        mlir::Operation::emitOpError(v8, &v42, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v46, "attribute '");
          if (AttrDictionary)
          {
            v44 = 261;
            v42 = (const void **)"multipliers";
            v43 = 11;
            mlir::Diagnostic::operator<<((uint64_t)v46, &v42);
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v46, "' failed to satisfy constraint: ui64 elements attribute of rank 1");
          }
        }
        v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v46);
        if (!v36)
          return 0;
      }
    }
    if (mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v37 = (uint64_t)(*this - 2);
      else
        v37 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v42 = (const void **)"requires attribute 'multipliers'";
    v44 = 259;
    mlir::OpState::emitOpError(this, &v42, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v46);
  }
  return v9;
}

uint64_t mlir::anec::detail::TransposeGenericAdaptorBase::TransposeGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "anec.transpose", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::anec::Transpose::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t IntegerType;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  void *v30;
  uint64_t v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x1E0C80C00];
  v30 = v32;
  v31 = 0x500000000;
  if ((unint64_t)(2 * a5) >= 6)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, 2 * a5, 8);
  if (a5)
  {
    v10 = &a4[2 * a5];
    v11 = v31;
    do
    {
      v12 = *a4;
      if (v11 >= HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v11 + 1, 8);
        v11 = v31;
      }
      *((_QWORD *)v30 + v11) = v12;
      v13 = (v31 + 1);
      LODWORD(v31) = v13;
      v14 = a4[1];
      if (v13 >= HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v13 + 1, 8);
        LODWORD(v13) = v31;
      }
      *((_QWORD *)v30 + v13) = v14;
      v11 = v31 + 1;
      LODWORD(v31) = v31 + 1;
      a4 += 2;
    }
    while (a4 != v10);
  }
  v29[0] = a5;
  v29[1] = 2;
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v16 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v29, 2, IntegerType, 0);
  v17 = v16;
  if (!v16)
    goto LABEL_19;
  v18 = *v16;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *(unsigned int *)(v18 + 16);
  if (!(_DWORD)v20)
    goto LABEL_19;
  v21 = *(_QWORD **)(v18 + 8);
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_19:
    v27 = 0;
  v28 = mlir::DenseElementsAttr::getFromRawBuffer(v17, v27, v30, 8 * v31, 8, 1, 0);
  mlir::anec::Transpose::build((mlir::UnknownLoc **)a1, a2, a3, v28);
  if (v30 != v32)
    free(v30);
}

void mlir::anec::Transpose::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  v8 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v11 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Transpose>::inferReturnTypes(v7, v8, 1, v19[0], v19[1], Dictionary, v11, v12, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v13 = __src;
  v14 = v21;
  v15 = *(unsigned int *)(a2 + 72);
  v16 = v15 + v21;
  if (v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v14)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v13, 8 * v14);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v14;
  if (__src != v22)
    free(__src);
}

void mlir::anec::Transpose::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = a4;
  v5[1] = a5;
  v5[2] = a5;
  v5[3] = a4;
  mlir::anec::Transpose::build(a1, a2, a3, v5, 2);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Transpose>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Transpose::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::Transpose::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t CallableRegion;
  uint64_t *v8;
  uint64_t v9;
  const void **v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *Type;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t NextResultAtOffset;
  const void **v51;
  _QWORD v52[2];
  uint64_t OperandRange;
  const void **v54;
  _QWORD v55[2];
  const void **v56;
  uint64_t v57;
  __int16 v58;
  unint64_t AttrDictionary;
  _QWORD v60[24];

  v60[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
        break;
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v11 = (const void **)*((_QWORD *)Value + 1);
    if (v11)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v11))
        goto LABEL_46;
      v12 = *v11;
      v13 = mlir::TypeID::get<mlir::ElementsAttr>();
      v14 = *((unsigned int *)v12 + 4);
      if (!(_DWORD)v14)
        goto LABEL_22;
      v15 = (_QWORD *)v12[1];
      v16 = &v15[2 * v14];
      do
      {
        v17 = v14 >> 1;
        v18 = &v15[2 * (v14 >> 1)];
        v20 = *v18;
        v19 = v18 + 2;
        v14 += ~(v14 >> 1);
        if (v20 < v13)
          v15 = v19;
        else
          v14 = v17;
      }
      while (v14);
      if (v15 != v16 && *v15 == v13)
        v21 = v15[1];
      else
LABEL_22:
        v21 = 0;
      v56 = v11;
      v57 = v21;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v56);
      v23 = Type;
      if (!Type)
        goto LABEL_32;
      v24 = *Type;
      v25 = mlir::TypeID::get<mlir::ShapedType>();
      v26 = *(unsigned int *)(v24 + 16);
      if (!(_DWORD)v26)
        goto LABEL_32;
      v27 = *(_QWORD **)(v24 + 8);
      v28 = &v27[2 * v26];
      do
      {
        v29 = v26 >> 1;
        v30 = &v27[2 * (v26 >> 1)];
        v32 = *v30;
        v31 = v30 + 2;
        v26 += ~(v26 >> 1);
        if (v32 < v25)
          v27 = v31;
        else
          v26 = v29;
      }
      while (v26);
      if (v27 != v28 && *v27 == v25)
        v33 = v27[1];
      else
LABEL_32:
        v33 = 0;
      AttrDictionary = (unint64_t)v23;
      v60[0] = v33;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
      if (v34 != 2)
        goto LABEL_46;
      v54 = v11;
      v35 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
      v36 = v35;
      if (!v35)
        goto LABEL_43;
      v37 = *v35;
      v38 = mlir::TypeID::get<mlir::ShapedType>();
      v39 = *(unsigned int *)(v37 + 16);
      if (!(_DWORD)v39)
        goto LABEL_43;
      v40 = *(_QWORD **)(v37 + 8);
      v41 = &v40[2 * v39];
      do
      {
        v42 = v39 >> 1;
        v43 = &v40[2 * (v39 >> 1)];
        v45 = *v43;
        v44 = v43 + 2;
        v39 += ~(v39 >> 1);
        if (v45 < v38)
          v40 = v44;
        else
          v39 = v42;
      }
      while (v39);
      if (v40 != v41 && *v40 == v38)
        v46 = v40[1];
      else
LABEL_43:
        v46 = 0;
      v55[0] = v36;
      v55[1] = v46;
      if (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55) + 8) != 2
        || (v51 = v11,
            v52[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51),
            v52[1] = v47,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v52),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_46:
        v58 = 257;
        mlir::Operation::emitOpError(v8, &v56, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v60, "attribute '");
          if (AttrDictionary)
          {
            v58 = 261;
            v56 = (const void **)"transpose_list";
            v57 = 14;
            mlir::Diagnostic::operator<<((uint64_t)v60, &v56);
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v60, "' failed to satisfy constraint: list of 64-bits unsigned integer pairs");
          }
        }
        v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v60);
        if (!v48)
          return 0;
      }
    }
    if (mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v49 = (uint64_t)(*this - 2);
      else
        v49 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v49, 0);
      return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v56 = (const void **)"requires attribute 'transpose_list'";
    v58 = 259;
    mlir::OpState::emitOpError(this, &v56, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v60);
  }
  return v9;
}

uint64_t mlir::anec::Transpose::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"anec.transpose", 14, v2, v3, 0, 0);
  *v4 = &off_1E0E52BB0;
  v4[12] = mlir::anec::Transpose::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

void mlir::anec::Unflatten::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::UnknownLoc *v9;
  mlir::MLIRContext *v10;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20[2];
  unint64_t v21[2];
  void *__src;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v23);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a5);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v23);
  __src = v24;
  v23 = 0x200000000;
  v9 = *a1;
  v10 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v13 = *(_QWORD *)(a2 + 256);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Unflatten>::inferReturnTypes(v9, v10, 1, v21[0], v21[1], Dictionary, v13, v14, v20[0], v20[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v15 = __src;
  v16 = v23;
  v17 = *(unsigned int *)(a2 + 72);
  v18 = v17 + v23;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v16)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v24)
    free(__src);
}

uint64_t mlir::anec::detail::InferReturnTypesInterfaceTrait<mlir::anec::Unflatten>::inferReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t RankPromotionTypeForANE;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  _QWORD v34[25];

  v34[23] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x600000000;
  v28 = a4;
  if (a5)
  {
    v17 = 0;
    while (1)
    {
      v18 = mlir::ValueRange::dereference_iterator(&v28, v17);
      v19 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!v19)
        break;
      RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v19, v20);
      v22 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v22 = v31;
      }
      *((_QWORD *)v30 + v22) = RankPromotionTypeForANE;
      v23 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      v17 = ++v29;
      if (v28 == a4 && v17 == a5)
      {
        v25 = v30;
        goto LABEL_16;
      }
    }
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v33);
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, "expected a ShapedType for inferReturnTypes");
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v23 = 0;
    v25 = v32;
LABEL_16:
    mlir::ValueRange::ValueRange(v27, (uint64_t)v25, v23);
    v24 = mlir::anec::Unflatten::inferPromotedReturnTypes(a1, a2, a3, a4, a5, a6, a9, a10, v27[0], v27[1], a11);
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

BOOL mlir::anec::Unflatten::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  const char *v7;
  const void **v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t NextResultAtOffset;
  const void **v13;
  __int16 v14;
  unint64_t AttrDictionary;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'destination_size'";
LABEL_14:
    v13 = (const void **)v7;
    v14 = 259;
    mlir::OpState::emitOpError(this, &v13, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
    return v9;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    Value += 2;
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'flatten_mode'";
    goto LABEL_14;
  }
  v8 = Value[1];
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
  {
    Value += 2;
    v6 -= 16;
    if (!v6)
      goto LABEL_13;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps23(*this, Value[1], (const void **)"flatten_mode", (const void **)0xC)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps7(*this, v8, (const void **)"destination_size", 16)|| !mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v11 = (uint64_t)(*this - 2);
  else
    v11 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0);
  return mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::anec::UnrealizedConversionCast::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  const void **v34[4];
  __int16 v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD v40[2];
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[20];

  v44[19] = *MEMORY[0x1E0C80C00];
  if (mlir::anec::__mlir_ods_local_type_constraint_ANECOps0(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    if (*((_DWORD *)*this + 9))
      v2 = (uint64_t)(*this - 2);
    else
      v2 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
    v4 = *this;
    v5 = (_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    v36 = v5;
    v6 = *v5;
    v7 = mlir::TypeID::get<mlir::ShapedType>();
    v8 = *(unsigned int *)(v6 + 16);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)(v6 + 8);
      v10 = &v9[2 * v8];
      do
      {
        v11 = v8 >> 1;
        v12 = &v9[2 * (v8 >> 1)];
        v14 = *v12;
        v13 = v12 + 2;
        v8 += ~(v8 >> 1);
        if (v14 < v7)
          v9 = v13;
        else
          v8 = v11;
      }
      while (v8);
      if (v9 != v10 && *v9 == v7 && v9[1])
      {
        v22 = *v5;
        v23 = mlir::TypeID::get<mlir::ShapedType>();
        v24 = *(unsigned int *)(v22 + 16);
        if (!(_DWORD)v24)
          goto LABEL_33;
        v25 = *(_QWORD **)(v22 + 8);
        v26 = &v25[2 * v24];
        do
        {
          v27 = v24 >> 1;
          v28 = &v25[2 * (v24 >> 1)];
          v30 = *v28;
          v29 = v28 + 2;
          v24 += ~(v24 >> 1);
          if (v30 < v23)
            v25 = v29;
          else
            v24 = v27;
        }
        while (v24);
        if (v25 != v26 && *v25 == v23)
          v31 = v25[1];
        else
LABEL_33:
          v31 = 0;
        v39 = v5;
        v40[0] = v31;
        mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v39);
        return 1;
      }
    }
    v35 = 261;
    v34[0] = (const void **)"result";
    v34[1] = (const void **)6;
    mlir::Operation::emitOpError(v4, v34, (uint64_t)&v39);
    if (v39)
    {
      mlir::Diagnostic::operator<<((uint64_t)v40, " #");
      if (v39)
      {
        v37 = 5;
        v38 = 0;
        v15 = &v37;
        v16 = v41;
        if (v42 >= v43)
        {
          v32 = v42 + 1;
          if (v41 <= (unint64_t)&v37 && v41 + 24 * v42 > (unint64_t)&v37)
          {
            v33 = (char *)&v37 - v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v16 = v41;
            v15 = (int *)&v33[v41];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v15 = &v37;
            v16 = v41;
          }
        }
        v17 = v16 + 24 * v42;
        v18 = *(_OWORD *)v15;
        *(_QWORD *)(v17 + 16) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        ++v42;
        if (v39)
          mlir::Diagnostic::operator<<((uint64_t)v40, " must be shaped of any type values, but got ");
      }
    }
    v19 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v39, (uint64_t *)&v36);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v19);
    if (v39)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    if (v20)
      return 1;
  }
  return 0;
}

uint64_t mlir::anec::PlistGeneratorInterface::addOpToNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, a2, a3);
}

uint64_t mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily(uint64_t a1, uint64_t a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, a2);
}

uint64_t mlir::anec::calcStrides(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t Value;
  uint64_t v14;
  uint64_t v15;
  unsigned int IntOrFloatBitWidth;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t i;
  uint64_t v22;
  uint64_t RHS;
  _QWORD v24[24];

  v24[23] = *MEMORY[0x1E0C80C00];
  v22 = a1;
  v7 = a4;
  if (!mlir::getStrideInBytes(a1, a2, 1))
  {
    v8 = 0;
    if (!v7 || !a4)
      return v8;
    mlir::emitError(a3, (uint64_t)&RHS);
    if (!RHS)
      goto LABEL_21;
    v9 = "Unable to get the stride in bytes!";
    goto LABEL_20;
  }
  if (*(_DWORD *)(a2 + 8))
    return 1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v22);
  v11 = *(unsigned int *)(a2 + 8);
  if (v10 != v11)
  {
    v12 = v10;
    if (v10 >= v11)
    {
      if (v10 > *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10, 8);
        v11 = *(unsigned int *)(a2 + 8);
      }
      if (v12 != v11)
        bzero((void *)(*(_QWORD *)a2 + 8 * v11), 8 * (v12 - v11));
    }
    *(_DWORD *)(a2 + 8) = v12;
  }
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v22);
  v15 = v14;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v22);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  if ((IntOrFloatBitWidth & 7) != 0)
  {
    v8 = 0;
    if (!v7 || !a4)
      return v8;
    mlir::emitError(a3, (uint64_t)&RHS);
    if (!RHS)
      goto LABEL_21;
    v9 = "Type's bitwidth not byte aligned";
LABEL_20:
    mlir::Diagnostic::operator<<((uint64_t)v24, v9);
LABEL_21:
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RHS);
    if (RHS)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RHS);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
    return v8;
  }
  v18 = IntOrFloatBitWidth >> 3;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v22);
  if (v19 == 1)
  {
    **(_QWORD **)a2 = v18;
    return 1;
  }
  v20 = *(unint64_t **)a2;
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v15 - 8) = v18;
  for (i = v15 - 2; v15 != 2; --v15)
  {
    v18 = (*(_QWORD *)(Value - 8 + 8 * v15) * v18 + 63) & 0xFFFFFFFFFFFFFFC0;
    v20[v15 - 2] = v18;
  }
  *v20 = (*(_QWORD *)(Value + 8) * v20[1] + 63) & 0xFFFFFFFFFFFFFFC0;
  if ((v20[i] & 0x3F) == 0)
    return 1;
  if (v7)
    return mlir::emitOptionalError<char const(&)[43]>(a3, a4, "Row stride should follow 64 byte alignment");
  else
    return 0;
}

uint64_t mlir::emitOptionalError<char const(&)[43]>(uint64_t a1, char a2, char *a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[24];

  v7[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v6);
  if (v6)
    mlir::Diagnostic::operator<<((uint64_t)v7, a3);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v6);
  if (v6)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v6);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v7);
  return v4;
}

void mlir::anec::calcANEIOInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  const void *Value;
  uint64_t v9;
  size_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  void *__dst;
  unint64_t v29;
  _BYTE v30[32];
  void *__src;
  uint64_t v32;
  _BYTE v33[32];
  uint64_t v34;
  void *RHS;
  uint64_t v36;
  _QWORD v37[23];

  v37[22] = *MEMORY[0x1E0C80C00];
  v27 = a1;
  __dst = v30;
  v29 = 0x400000000;
  __src = v33;
  v32 = 0x400000000;
  v34 = 1;
  if (mlir::anec::calcStrides(a1, (uint64_t)&__src, 0, 0))
  {
    Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v27);
    v9 = v7;
    RHS = v37;
    v36 = 0x400000000;
    v10 = 8 * v7;
    if ((unint64_t)(8 * v7) < 0x21)
    {
      v11 = 0;
      v12 = v37;
      if (!v7)
        goto LABEL_7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&RHS, v37, (8 * v7) >> 3, 8);
      v11 = v36;
      v12 = RHS;
      if (!v9)
      {
LABEL_7:
        v13 = v11 + (v10 >> 3);
        LODWORD(v36) = v13;
        if (v12 != v37)
        {
          if (__dst != v30)
          {
            free(__dst);
            v12 = RHS;
            LODWORD(v13) = v36;
          }
          __dst = v12;
          v29 = __PAIR64__(HIDWORD(v36), v13);
          RHS = v37;
          HIDWORD(v36) = 0;
LABEL_22:
          LODWORD(v36) = 0;
          if (RHS != v37)
            free(RHS);
          if ((_DWORD)v32)
          {
            v15 = 0;
            do
            {
              if (8 * v32 - 8 == v15)
                goto LABEL_32;
              v16 = *(_QWORD *)((char *)__src + v15);
              v17 = *(_QWORD *)((char *)__src + v15 + 8);
              v15 += 8;
            }
            while (v16 >= v17);
            if (8 * v32 + 8 == v15)
              goto LABEL_32;
            if ((_DWORD)v32 != 4)
            {
              if (!a3)
                goto LABEL_63;
              mlir::emitError(a2, (uint64_t)&RHS);
              if (!RHS)
                goto LABEL_60;
              v25 = "incorrect number of strides";
              goto LABEL_59;
            }
            if (v15 == 16)
            {
              v18 = *((_QWORD *)__src + v32 - 1);
              RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v27);
              v34 = v18 / (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS) >> 3);
              *(int8x16_t *)__src = vextq_s8(*(int8x16_t *)__src, *(int8x16_t *)__src, 8uLL);
              goto LABEL_32;
            }
            if (a3)
            {
              mlir::emitError(a2, (uint64_t)&RHS);
              if (!RHS)
              {
LABEL_60:
                mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RHS);
                if (RHS)
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RHS);
                std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v36);
                goto LABEL_63;
              }
              v25 = "incorrect strides";
LABEL_59:
              mlir::Diagnostic::operator<<((uint64_t)&v36, v25);
              goto LABEL_60;
            }
            goto LABEL_63;
          }
LABEL_32:
          *(_QWORD *)a4 = a4 + 16;
          *(_QWORD *)(a4 + 8) = 0x400000000;
          v19 = v29;
          if ((_DWORD)v29 && &__dst != (void **)a4)
          {
            if (__dst == v30)
            {
              v21 = v29;
              if (v29 < 5
                || (llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v29, 8),
                    (v21 = v29) != 0))
              {
                memcpy(*(void **)a4, __dst, 8 * v21);
              }
              *(_DWORD *)(a4 + 8) = v19;
            }
            else
            {
              *(_QWORD *)a4 = __dst;
              v20 = HIDWORD(v29);
              *(_DWORD *)(a4 + 8) = v19;
              *(_DWORD *)(a4 + 12) = v20;
              __dst = v30;
              HIDWORD(v29) = 0;
            }
            LODWORD(v29) = 0;
          }
          *(_QWORD *)(a4 + 48) = a4 + 64;
          *(_QWORD *)(a4 + 56) = 0x400000000;
          if (&__dst == (void **)a4 || (v22 = v32) == 0)
          {
LABEL_55:
            *(_QWORD *)(a4 + 96) = v34;
            v26 = 1;
            goto LABEL_64;
          }
          if (__src != v33)
          {
            *(_QWORD *)(a4 + 48) = __src;
            v23 = HIDWORD(v32);
            *(_DWORD *)(a4 + 56) = v22;
            *(_DWORD *)(a4 + 60) = v23;
            __src = v33;
            HIDWORD(v32) = 0;
LABEL_54:
            LODWORD(v32) = 0;
            goto LABEL_55;
          }
          if (v32 < 5)
          {
            v24 = v32;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 48, (void *)(a4 + 64), v32, 8);
            v24 = v32;
            if (!(_DWORD)v32)
              goto LABEL_53;
          }
          memcpy(*(void **)(a4 + 48), __src, 8 * v24);
LABEL_53:
          *(_DWORD *)(a4 + 56) = v22;
          goto LABEL_54;
        }
        v14 = v29;
        if (v29 >= v13)
        {
          if ((_DWORD)v13)
            memmove(__dst, v37, 8 * v13);
          goto LABEL_21;
        }
        if (HIDWORD(v29) >= v13)
        {
          if ((_DWORD)v29)
          {
            memmove(__dst, v37, 8 * v29);
            goto LABEL_19;
          }
        }
        else
        {
          LODWORD(v29) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v30, v13, 8);
        }
        v14 = 0;
LABEL_19:
        if (v14 != v36)
          memcpy((char *)__dst + 8 * v14, (char *)RHS + 8 * v14, 8 * v36 - 8 * v14);
LABEL_21:
        LODWORD(v29) = v13;
        goto LABEL_22;
      }
    }
    memcpy(&v12[v11], Value, v10);
    v11 = v36;
    v12 = RHS;
    goto LABEL_7;
  }
LABEL_63:
  v26 = 0;
  *(_BYTE *)a4 = 0;
LABEL_64:
  *(_BYTE *)(a4 + 104) = v26;
  if (__src != v33)
    free(__src);
  if (__dst != v30)
    free(__dst);
}

uint64_t mlir::anec::getRegionOpFamily(mlir::anec *this, Operation *a2)
{
  void *v2;

  v2 = *(void **)(*((_QWORD *)this + 6) + 16);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id)
    return 0;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id)
    return 1;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id)
    return 2;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id)
    return 3;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id)
    return 4;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id)
    return 5;
  return 6;
}

uint64_t mlir::anec::RegionReturn::addOpToNetwork(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t ANECIRDataType;
  int v10;
  char *v11;
  std::__shared_weak_count *v12;
  char v13;
  void *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  char *v43;
  unint64_t *v45;
  char *v46;
  std::__shared_weak_count *v47;
  std::string v48;
  std::string v49;
  unint64_t v50;
  uint64_t v51;
  void *v52[2];
  char v53;
  __int16 v54;
  std::string __p;
  __int16 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if ((*((_BYTE *)*a1 + 46) & 0x80) != 0)
  {
    v3 = *((unsigned int *)v2 + 17);
    if ((_DWORD)v3)
    {
      v5 = 0;
      v51 = 0;
      v6 = v2[9];
      v45 = (unint64_t *)(a2 + 104);
      while (1)
      {
        v7 = *(_QWORD *)(v6 + 32 * v5 + 24);
        v8 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
          v8 = 0;
        v50 = v8;
        if (!v8)
          return 0;
        ANECIRDataType = mlir::anec::getANECIRDataType(v7);
        if ((ANECIRDataType & 0xFF00000000) == 0)
          return 0;
        v10 = ANECIRDataType;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"__out:";
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v51;
        v56 = 2819;
        llvm::Twine::str((llvm::Twine *)&__p, &v48);
        if (mlir::anec::ANECDialect::enableProcedureList)
          break;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        v53 = 0;
        LOBYTE(v52[0]) = 0;
        v11 = (char *)operator new(0xA8uLL);
        mlir::anec::ANECIROutput::ANECIROutput((uint64_t)v11, (__int128 *)&v48, (__int128 *)&v49, v10, (__int128 *)&__p, (__int128 *)v52);
        v12 = (std::__shared_weak_count *)operator new(0x20uLL);
        v12->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52238;
        v12->__shared_owners_ = 0;
        v12->__shared_weak_owners_ = 0;
        v12[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
        if (v53 < 0)
        {
          operator delete(v52[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_10;
        }
        else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_10;
        }
LABEL_13:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
        __p.__r_.__value_.__l.__size_ = 0x500000000;
        v13 = mlir::anec::calcStrides(v50, (uint64_t)&__p, 0, 0);
        v14 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!v13)
        {
          v20 = 0;
LABEL_24:
          if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
            goto LABEL_25;
          goto LABEL_26;
        }
        v15 = __p.__r_.__value_.__r.__words[0];
        if (LODWORD(__p.__r_.__value_.__r.__words[1]))
        {
          v15 = __p.__r_.__value_.__r.__words[0] - 8;
          v16 = 8 * LODWORD(__p.__r_.__value_.__r.__words[1]) - 8;
          while (v16)
          {
            v17 = *(_QWORD *)(v15 + 8);
            v18 = *(_QWORD *)(v15 + 16);
            v15 += 8;
            v16 -= 8;
            if (v17 < v18)
              goto LABEL_18;
          }
LABEL_38:
          if (LODWORD(__p.__r_.__value_.__r.__words[1]) == 5)
          {
            v22 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16);
            v23 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 24);
            v24 = *(int8x16_t *)__p.__r_.__value_.__l.__data_;
            goto LABEL_40;
          }
          v23 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * (LODWORD(__p.__r_.__value_.__r.__words[1]) - 2));
          if (LODWORD(__p.__r_.__value_.__r.__words[1]) <= 2)
            v27 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 2;
          else
            v27 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 3;
          v22 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v27);
          goto LABEL_51;
        }
LABEL_18:
        v19 = __p.__r_.__value_.__r.__words[0] + 8 * LODWORD(__p.__r_.__value_.__r.__words[1]);
        if (v15 == v19)
          goto LABEL_38;
        v20 = 0;
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) != 4 || v15 - __p.__r_.__value_.__r.__words[0] != 8)
          goto LABEL_24;
        v21 = *(_QWORD *)(v19 - 8);
        v52[0] = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v50);
        *((_QWORD *)v11 + 12) = v21 / (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v52) >> 3);
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) == 5)
        {
          v22 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16);
          v23 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 24);
          v24 = *(int8x16_t *)__p.__r_.__value_.__l.__data_;
LABEL_40:
          *(int8x16_t *)(v11 + 152) = vextq_s8(v24, v24, 8uLL);
          goto LABEL_51;
        }
        v23 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * (LODWORD(__p.__r_.__value_.__r.__words[1]) - 2));
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) <= 2)
          v28 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 2;
        else
          v28 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 3;
        v22 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v28);
LABEL_51:
        *((_QWORD *)v11 + 17) = v23;
        *((_QWORD *)v11 + 18) = v22;
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        v46 = v11;
        v47 = v12;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
        v31 = *(unsigned int *)(a2 + 112);
        v32 = *(_QWORD *)(a2 + 104);
        if (v31 < *(_DWORD *)(a2 + 116))
          goto LABEL_54;
        v41 = v31 + 1;
        v42 = v32 + 16 * v31 > (unint64_t)&v46;
        if (v32 > (unint64_t)&v46 || !v42)
        {
          llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow((uint64_t)v45, v41);
          v32 = *v45;
LABEL_54:
          v33 = (char *)&v46;
          goto LABEL_55;
        }
        v43 = (char *)&v46 - v32;
        llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow((uint64_t)v45, v41);
        v32 = *v45;
        v33 = &v43[*v45];
LABEL_55:
        v34 = *(unsigned int *)(a2 + 112);
        v35 = *(_OWORD *)v33;
        *(_OWORD *)(v32 + 16 * v34) = *(_OWORD *)v33;
        if (*((_QWORD *)&v35 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
          LODWORD(v34) = *(_DWORD *)(a2 + 112);
        }
        *(_DWORD *)(a2 + 112) = v34 + 1;
        v38 = v47;
        if (v47)
        {
          v39 = (unint64_t *)&v47->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        ++v51;
        v20 = 1;
        v14 = (void *)__p.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
LABEL_25:
          free(v14);
LABEL_26:
        v25 = (unint64_t *)&v12->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (v26)
        {
          if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_30;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
          if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_30:
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_35;
            goto LABEL_31;
          }
        }
        operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_35:
          operator delete(v49.__r_.__value_.__l.__data_);
          if ((v20 & 1) == 0)
            return 0;
          goto LABEL_36;
        }
LABEL_31:
        if ((v20 & 1) == 0)
          return 0;
LABEL_36:
        if (++v5 == v3)
          return 1;
      }
      mlir::anec::ANECIRProcedure::OperationName((mlir::anec::ANECIRProcedure *)a2, &__p);
      v11 = (char *)operator new(0xA8uLL);
      mlir::anec::ANECIROutput::ANECIROutput((uint64_t)v11, (__int128 *)&v48, (__int128 *)&v49, v10, (__int128 *)&__p, (__int128 *)&v49);
      v12 = (std::__shared_weak_count *)operator new(0x20uLL);
      v12->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52238;
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_10:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_13;
    }
  }
  v54 = 257;
  mlir::OpState::emitOpError(a1, (const void ***)v52, (uint64_t)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    mlir::Diagnostic::operator<<((uint64_t)&__p.__r_.__value_.__l.__size_, "RegionReturn has no operand, this is a no-op!\n");
    if (__p.__r_.__value_.__r.__words[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&__p.__r_.__value_.__l.__size_);
  return 0;
}

void mlir::anec::getANEExecutionCost(uint64_t a1, uint64_t a2)
{
  mlir::dataflow::TensorAllocAnalysis *v3;
  uint64_t v4;
  llvm *v5;
  uint64_t v6;
  void *Context;
  _OWORD v8[3];
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14[2];
  char v15;
  char v16[24];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v17[0] = a2;
  v17[1] = -1;
  v15 = 2;
  strcpy((char *)v14, "L2");
  v16[23] = 4;
  strcpy(v16, "DRAM");
  memset(v8, 0, sizeof(v8));
  v9 = &v11;
  v10 = 0x600000000;
  mlir::StorageUniquer::StorageUniquer((mlir::StorageUniquer *)v12);
  v12[1] = 0;
  v12[2] = 0;
  v13 = 0;
  Context = (void *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  LODWORD(v5) = 64;
  LOBYTE(v6) = 1;
  LOBYTE(v4) = 0;
  v3 = (mlir::dataflow::TensorAllocAnalysis *)mlir::DataFlowSolver::load<mlir::dataflow::TensorAllocAnalysis,mlir::MLIRContext *,long long (&)[2],std::string (&)[2],char const(&)[5],int,BOOL,BOOL>((uint64_t)v8, (mlir::StringAttr **)&Context, v17, v14, "None", (int *)&v5, (char *)&v6, (char *)&v4);
  mlir::dataflow::TensorAllocAnalysis::getAnalysis(v3, (mlir::DataFlowSolver *)v8, (mlir::Operation *)a1);
}

void sub_1801A17D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  mlir::DataFlowSolver::~DataFlowSolver((mlir::DataFlowSolver *)va);
}

float sub_1801A17DC()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
  {
    operator delete(*(void **)(v0 - 128));
    if ((*(char *)(v0 - 129) & 0x80000000) == 0)
      return 0.0;
LABEL_5:
    operator delete(*(void **)(v0 - 152));
    return 0.0;
  }
  if (*(char *)(v0 - 129) < 0)
    goto LABEL_5;
  return 0.0;
}

uint64_t mlir::DataFlowSolver::load<mlir::dataflow::TensorAllocAnalysis,mlir::MLIRContext *,long long (&)[2],std::string (&)[2],char const(&)[5],int,BOOL,BOOL>(uint64_t a1, mlir::StringAttr **a2, const void *a3, uint64_t *a4, char *a5, int *a6, char *a7, char *a8)
{
  void *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 *v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;

  v16 = operator new(0xA8uLL);
  v17 = strlen(a5);
  mlir::dataflow::TensorAllocAnalysis::TensorAllocAnalysis((uint64_t)v16, (mlir::DataFlowSolver *)a1, *a2, a3, 2, a4, 2, v18, (uint64_t *)a5, v17, *a6, *a7, *a8);
  v19 = *(unsigned int *)(a1 + 56);
  if (v19 < *(_DWORD *)(a1 + 60))
  {
    v20 = *(char **)(a1 + 48);
    *(_QWORD *)&v20[8 * v19] = v16;
    v21 = v19 + 1;
    goto LABEL_3;
  }
  v23 = (char **)(a1 + 48);
  v41 = 0;
  v20 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 48, (void *)(a1 + 64), 0, 8, &v41);
  v24 = *(unsigned int *)(a1 + 56);
  v25 = 8 * v24;
  *(_QWORD *)&v20[8 * v24] = v16;
  v26 = *(char **)(a1 + 48);
  if ((_DWORD)v24)
  {
    v27 = (v24 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v27 >= 0xB)
    {
      if (v26 >= &v20[v25] || (v28 = v20, v29 = *(char **)(a1 + 48), v20 >= &v26[v25]))
      {
        v30 = v27 + 1;
        v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = &v20[v31];
        v29 = &v26[v31];
        v32 = (__int128 *)(v26 + 16);
        v33 = v20 + 16;
        v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *(v32 - 1);
          v36 = *v32;
          *(v32 - 1) = 0uLL;
          *v32 = 0uLL;
          *(v33 - 1) = v35;
          *v33 = v36;
          v32 += 2;
          v33 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_13:
          v38 = (uint64_t)(*v23 - 8);
          do
          {
            v39 = *(_QWORD *)(v38 + v25);
            *(_QWORD *)(v38 + v25) = 0;
            if (v39)
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
            v25 -= 8;
          }
          while (v25);
          v26 = *v23;
          goto LABEL_18;
        }
      }
    }
    else
    {
      v28 = v20;
      v29 = *(char **)(a1 + 48);
    }
    do
    {
      v37 = *(_QWORD *)v29;
      *(_QWORD *)v29 = 0;
      v29 += 8;
      *(_QWORD *)v28 = v37;
      v28 += 8;
    }
    while (v29 != &v26[v25]);
    goto LABEL_13;
  }
LABEL_18:
  v40 = v41;
  if (v26 != (char *)(a1 + 64))
    free(v26);
  *(_QWORD *)(a1 + 48) = v20;
  v21 = *(_DWORD *)(a1 + 56) + 1;
  *(_DWORD *)(a1 + 60) = v40;
LABEL_3:
  *(_DWORD *)(a1 + 56) = v21;
  return *(_QWORD *)&v20[8 * v21 - 8];
}

uint64_t mlir::Dialect::verifyOperationAttribute()
{
  return 1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp()
{
  return 0;
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char v11;

  v11 = 0;
  v8 = llvm::cl::parser<BOOL>::parse((int)a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  **(_BYTE **)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

void llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &off_1E0E23588;
  v2 = __p + 160;
  v3 = (char *)*((_QWORD *)__p + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

void llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  unsigned int v3;
  uint64_t (**v4)();
  __int16 v5;

  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 145) || *(unsigned __int8 *)(a1 + 144) != **(unsigned __int8 **)(a1 + 128))
  {
    v3 = **(unsigned __int8 **)(a1 + 128);
    v5 = *(_WORD *)(a1 + 144);
    v4 = &off_1E0E22F68;
    llvm::cl::parser<BOOL>::printOptionDiff((llvm *)(a1 + 152), a1, v3, (uint64_t)&v4, a2);
  }
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::setDefault(uint64_t result)
{
  char v1;

  v1 = *(_BYTE *)(result + 145);
  if (v1)
    v1 = *(_BYTE *)(result + 144);
  **(_BYTE **)(result + 128) = v1;
  return result;
}

void ZinIrEWUnitInfo::~ZinIrEWUnitInfo(ZinIrEWUnitInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E0E13140;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E0E13140;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

uint64_t mlir::anec::`anonymous namespace'::checkIO(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *ArgAttrsAttr;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  mlir::Block *v22;
  uint64_t ParentOp;
  uint64_t (*v24)();
  uint64_t v25;
  const void **v27;
  __int16 v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD v31[24];

  v31[23] = *MEMORY[0x1E0C80C00];
  v29[0] = a2;
  v29[1] = a3;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
  if (!v4)
  {
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v6) == 1)
      return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
  v8 = v7;
  v9 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
  if (v8 == 4)
  {
    v11 = *v9;
    v12 = 3;
    v13 = 2;
    v14 = 1;
  }
  else
  {
    if (v10 != 5)
    {
LABEL_15:
      v18 = "Found unkown rank";
      goto LABEL_16;
    }
    v11 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
    v12 = 4;
    v13 = 3;
    v14 = 2;
  }
  v15 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29) + 8 * v14);
  v16 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29) + 8 * v13);
  v17 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29) + 8 * v12);
  if (!v11 || !v15 || !v16 || !v17)
    goto LABEL_15;
  if (v15 <= 0x10000)
  {
    if (v16 > 0x4000 || v17 > 0x4000)
    {
      v18 = "Height/Width dimensions must be less than 16384";
      goto LABEL_16;
    }
    v20 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
    if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v20) & 1) == 0)
    {
      v21 = a1;
      v19 = 1;
      while (1)
      {
        v22 = *(mlir::Block **)(v21 + 16);
        if (!v22)
          break;
        ParentOp = mlir::Block::getParentOp(v22);
        if (!ParentOp)
          break;
        v21 = ParentOp;
        v24 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl>(void)::Empty>>();
        if (((*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(v21 + 48) + 32))(*(_QWORD *)(v21 + 48), v24) & 1) != 0)return v19;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v25 == 5)
      {
        v18 = "5D-shaped tensors disallowed on A12 and A13-class ANE";
        goto LABEL_16;
      }
    }
    return 1;
  }
  v18 = "Channel dimension must be less than 65536";
LABEL_16:
  v27 = (const void **)v18;
  v28 = 259;
  mlir::Operation::emitOpError((uint64_t *)a1, &v27, (uint64_t)&v30);
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
  if (v30)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v31);
  return v19;
}

uint64_t mlir::Diagnostic::operator<<(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  char *v16;
  size_t v17;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  v15 = 3;
  v16 = __s;
  v17 = v4;
  v5 = *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = &v15;
  if (v5 >= *(_DWORD *)(a1 + 28))
  {
    v11 = a1 + 16;
    v12 = v5 + 1;
    v13 = v6 + 24 * v5 > (unint64_t)&v15;
    if (v6 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v12, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v7 = (int *)&v14[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v12, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v7 = &v15;
    }
  }
  v8 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v9 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v8 = v9;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void *mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>()
{
  unsigned __int8 v0;
  void **p_vtable;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v0 & 1) == 0)
  {
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::RegionOp<Empty>]";
      v12 = 80;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    }
  }
  return p_vtable[505];
}

uint64_t (*mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl>(void)::Empty>>())()
{
  unsigned __int8 v0;
  uint64_t (**v1)();
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v0 & 1) == 0)
  {
    v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::anec::MinimumFamily<mlir::anec::Family::A14>::Impl<Empty>]";
      v12 = 122;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    }
  }
  return v1[399];
}

uint64_t (*mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands>(void)::Empty>>())()
{
  unsigned __int8 v0;
  uint64_t (**v1)();
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v0 & 1) == 0)
  {
    v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::anec::SupportConstantOperands<Empty>]";
      v12 = 101;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::anec::SupportConstantOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    }
  }
  return v1[401];
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>();
}

_OWORD *std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = 16 * v5;
  v10 = (char *)operator new(16 * v5);
  v11 = &v10[16 * v4];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
  }
  else
  {
    do
    {
      v17 = *((_OWORD *)v3 - 1);
      v3 -= 2;
      *((_OWORD *)v11 - 1) = v17;
      v11 -= 16;
      *v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v2);
    v2 = *(_QWORD **)a1;
    v18 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    while (v18 != v2)
    {
      v19 = (std::__shared_weak_count *)*(v18 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v18 -= 2;
    }
  }
  if (v2)
    operator delete(v2);
  return v16;
}

uint64_t mlir::OpInterface<mlir::anec::ANECompilerVerifierInterface,mlir::anec::detail::ANECompilerVerifierInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::anec::ANECompilerVerifierInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::anec::ANECompilerVerifierInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::anec::ANECompilerVerifierInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::anec::ANECompilerVerifierInterface>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::ANECompilerVerifierInterface]";
      v12 = 90;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::anec::ANECompilerVerifierInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[179];
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x186DA1398](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x186DA13A4](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t mlir::getSplatFloatValue<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v18))
    goto LABEL_36;
  v17[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v18);
  v17[1] = v2;
  v3 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v17) + 136);
  v4 = v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v5 = v4 || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v6 = v5 || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v7 = v6 || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v8 = v7 || v3 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v9 = v8 || v3 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v10 = v9 || v3 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v11 = v10 || v3 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v12 = v11 || v3 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v12
    || (v3 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (v15 = v3 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (v15 = 1),
        v15))
  {
    LODWORD(v17[0]) = 0;
    mlir::copyElementsAttrData<float>(v18, v19, (uint64_t)v17, 0);
    v13 = LODWORD(v17[0]);
    v14 = 0x100000000;
  }
  else
  {
LABEL_36:
    v14 = 0;
    v13 = 0;
  }
  return v13 | v14;
}

const __CFString *mlir::anec::`anonymous namespace'::getANECNetFormat(uint64_t a1)
{
  void *v1;
  const __CFString *v14;
  uint64_t v15;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v15 = a1;
    v14 = CFSTR("Int8");
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15) != 1
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15))
    {
      return CFSTR("UInt8");
    }
  }
  else if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
         || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v15 = a1;
    if (mlir::Type::isF16((mlir::Type *)&v15))
      return CFSTR("Float16");
    else
      return CFSTR("Float32");
  }
  else
  {
    return 0;
  }
  return v14;
}

uint64_t mlir::getSplatIntValue<int>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _QWORD *Type;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *ElementsAttrRawData;
  uint64_t v21;
  uint64_t v22;
  int64_t NumElements;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int IntOrFloatBitWidth;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  BOOL *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64x2_t v57;
  int32x2_t v58;
  uint64_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int64_t v63;
  __int128 v64;
  uint64_t OperandRange;
  _QWORD v66[2];
  __int128 v67;
  _QWORD *ArgOperands;
  __int128 v69;
  _QWORD v70[6];

  v70[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v64 = a1;
  *((_QWORD *)&v64 + 1) = a2;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v64))
  {
    ArgOperands = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v64);
    *(_QWORD *)&v69 = v2;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      v67 = v64;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v67);
      v8 = Type;
      if (!Type)
        goto LABEL_14;
      v9 = *Type;
      v10 = mlir::TypeID::get<mlir::ShapedType>();
      v11 = *(unsigned int *)(v9 + 16);
      if (!(_DWORD)v11)
        goto LABEL_14;
      v12 = *(_QWORD **)(v9 + 8);
      v13 = &v12[2 * v11];
      do
      {
        v14 = v11 >> 1;
        v15 = &v12[2 * (v11 >> 1)];
        v17 = *v15;
        v16 = v15 + 2;
        v11 += ~(v11 >> 1);
        if (v17 < v10)
          v12 = v16;
        else
          v11 = v14;
      }
      while (v11);
      if (v12 != v13 && *v12 == v10)
        v18 = v12[1];
      else
LABEL_14:
        v18 = 0;
      v66[0] = v8;
      v66[1] = v18;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v66);
      v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v67);
      ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v67);
      v22 = v21;
      if ((v19 & 1) != 0)
      {
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
        {
          NumElements = 1;
LABEL_20:
          v24 = NumElements - 1;
          if (v19)
            v24 = 0;
          LODWORD(v25) = ElementsAttrRawData[v24];
          goto LABEL_99;
        }
        if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
        {
          NumElements = 1;
LABEL_27:
          v26 = NumElements - 1;
          if (v19)
            v26 = 0;
          LODWORD(v25) = (char)ElementsAttrRawData[v26];
          goto LABEL_99;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
        {
          NumElements = 1;
LABEL_34:
          v27 = NumElements - 1;
          if (v19)
            v27 = 0;
          LODWORD(v25) = *(unsigned __int16 *)&ElementsAttrRawData[2 * v27];
          goto LABEL_99;
        }
        if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
        {
          NumElements = 1;
LABEL_42:
          v28 = NumElements - 1;
          if (v19)
            v28 = 0;
          LODWORD(v25) = *(__int16 *)&ElementsAttrRawData[2 * v28];
          goto LABEL_99;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
        {
          NumElements = 1;
LABEL_53:
          v29 = NumElements - 1;
          if (v19)
            v29 = 0;
          LODWORD(v25) = *(_DWORD *)&ElementsAttrRawData[4 * v29];
          goto LABEL_99;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        {
          NumElements = 1;
LABEL_60:
          v30 = NumElements - 1;
          if (v19)
            v30 = 0;
          v25 = *(_QWORD *)&ElementsAttrRawData[8 * v30];
          goto LABEL_99;
        }
        if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
        {
          NumElements = 1;
LABEL_67:
          v31 = NumElements - 1;
          if (v19)
            v31 = 0;
          v25 = *(_QWORD *)&ElementsAttrRawData[8 * v31];
          goto LABEL_99;
        }
        if (mlir::Type::isF16((mlir::Type *)&OperandRange))
        {
          NumElements = 1;
LABEL_74:
          v32 = NumElements - 1;
          if (v19)
            v32 = 0;
          _H0 = *(_WORD *)&ElementsAttrRawData[2 * v32];
          __asm { FCVT            S0, H0 }
          LODWORD(v25) = (int)_S0;
          goto LABEL_99;
        }
        if (mlir::Type::isF32((mlir::Type *)&OperandRange))
        {
          NumElements = 1;
LABEL_81:
          v39 = NumElements - 1;
          if (v19)
            v39 = 0;
          LODWORD(v25) = (int)*(float *)&ElementsAttrRawData[4 * v39];
          goto LABEL_99;
        }
        if (mlir::Type::isF64((mlir::Type *)&OperandRange))
        {
          NumElements = 1;
LABEL_88:
          v40 = NumElements - 1;
          if (v19)
            v40 = 0;
          LODWORD(v25) = (int)*(double *)&ElementsAttrRawData[8 * v40];
          goto LABEL_99;
        }
        NumElements = 1;
        if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
          goto LABEL_100;
        goto LABEL_95;
      }
      NumElements = mlir::ElementsAttr::getNumElements(v67, *((uint64_t *)&v67 + 1));
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements >= 1)
          goto LABEL_20;
      }
      else if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements >= 1)
          goto LABEL_27;
      }
      else if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements >= 1)
          goto LABEL_34;
      }
      else if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements >= 1)
          goto LABEL_42;
      }
      else if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements >= 1)
          goto LABEL_53;
      }
      else if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements >= 1)
          goto LABEL_53;
      }
      else if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements >= 1)
          goto LABEL_60;
      }
      else if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements >= 1)
          goto LABEL_67;
      }
      else if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements >= 1)
          goto LABEL_74;
      }
      else if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements >= 1)
          goto LABEL_81;
      }
      else if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements >= 1)
          goto LABEL_88;
      }
      else
      {
        if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
        {
LABEL_100:
          if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
          {
            mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
            IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
            LODWORD(v25) = 0;
            if (v22)
            {
              v45 = 0;
              v46 = NumElements;
              v47 = 8 / IntOrFloatBitWidth;
              do
              {
                v48 = NumElements - v45 * v47;
                if (v48 >= v47)
                  v48 = 8 / IntOrFloatBitWidth;
                if (v48)
                {
                  if (v46 >= v47)
                    v49 = 8 / IntOrFloatBitWidth;
                  else
                    v49 = v46;
                  v50 = v49 - 1;
                  if (v50 >= 7)
                    LOBYTE(v50) = 7;
                  LODWORD(v25) = (*ElementsAttrRawData >> (IntOrFloatBitWidth * v50)) & ~(-1 << IntOrFloatBitWidth);
                }
                ++v45;
                v46 -= v47;
                ++ElementsAttrRawData;
                --v22;
              }
              while (v22);
            }
            goto LABEL_99;
          }
          ArgOperands = v70;
          v69 = xmmword_181233150;
          if (NumElements)
          {
            if ((unint64_t)NumElements < 0x29)
            {
              v42 = 0;
              v43 = v70;
            }
            else
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&ArgOperands, v70, NumElements, 1);
              v43 = ArgOperands;
              v42 = v69;
            }
            if (NumElements != v42)
              bzero((char *)v43 + v42, NumElements - v42);
            *(_QWORD *)&v69 = NumElements;
          }
          else
          {
            v43 = v70;
          }
          if (!v22)
          {
LABEL_152:
            v63 = NumElements - 1;
            if (NumElements < 1)
            {
              LODWORD(v25) = 0;
            }
            else
            {
              if (v19)
                v63 = 0;
              LODWORD(v25) = *((unsigned __int8 *)v43 + v63);
            }
            if (v43 != v70)
              free(v43);
            goto LABEL_99;
          }
          v51 = (BOOL *)v43 + 3;
          v52 = NumElements;
          while (1)
          {
            v53 = v52 - 8;
            if (v52 >= 8)
              v54 = 8;
            else
              v54 = v52;
            if (!v54)
              goto LABEL_123;
            if (v52 >= 8)
              v55 = 8;
            else
              v55 = v52;
            v56 = *ElementsAttrRawData;
            v57 = (uint64x2_t)vdupq_n_s64(v55 - 1);
            v58 = vmovn_s64((int64x2_t)vcgeq_u64(v57, (uint64x2_t)xmmword_181233120));
            if ((v58.i8[0] & 1) != 0)
              *(v51 - 3) = v56 & 1;
            if ((v58.i8[4] & 1) != 0)
              *(v51 - 2) = (v56 & 2) != 0;
            v59 = ((_BYTE)v55 + 1) & 0x1E;
            if (v59 == 2)
              goto LABEL_123;
            v60 = vmovn_s64((int64x2_t)vcgtq_u64(v57, (uint64x2_t)xmmword_181233160));
            if ((v60.i8[0] & 1) != 0)
            {
              *(v51 - 1) = (v56 & 4) != 0;
              if ((v60.i8[4] & 1) != 0)
                goto LABEL_141;
            }
            else if ((v60.i8[4] & 1) != 0)
            {
LABEL_141:
              *v51 = (v56 & 8) != 0;
              if (v59 == 4)
                goto LABEL_123;
              goto LABEL_142;
            }
            if (v59 == 4)
              goto LABEL_123;
LABEL_142:
            v61 = vmovn_s64((int64x2_t)vcgtq_u64(v57, (uint64x2_t)xmmword_181233170));
            if ((v61.i8[0] & 1) != 0)
            {
              v51[1] = (v56 & 0x10) != 0;
              if ((v61.i8[4] & 1) == 0)
                goto LABEL_144;
            }
            else if ((v61.i8[4] & 1) == 0)
            {
LABEL_144:
              if (v59 != 6)
                goto LABEL_148;
              goto LABEL_123;
            }
            v51[2] = (v56 & 0x20) != 0;
            if (v59 != 6)
            {
LABEL_148:
              v62 = vmovn_s64((int64x2_t)vcgtq_u64(v57, (uint64x2_t)xmmword_181233180));
              if ((v62.i8[0] & 1) != 0)
                v51[3] = (v56 & 0x40) != 0;
              if ((v62.i8[4] & 1) != 0)
                v51[4] = v56 >> 7;
            }
LABEL_123:
            ++ElementsAttrRawData;
            v51 += 8;
            v52 = v53;
            if (!--v22)
              goto LABEL_152;
          }
        }
        if (NumElements >= 1)
        {
LABEL_95:
          v41 = NumElements - 1;
          if (v19)
            v41 = 0;
          LODWORD(v25) = (int)COERCE_FLOAT(*(unsigned __int16 *)&ElementsAttrRawData[2 * v41] << 16);
          goto LABEL_99;
        }
      }
      LODWORD(v25) = 0;
LABEL_99:
      v5 = v25 & 0xFFFFFF00;
      v3 = v25;
      v4 = 0x100000000;
      return v4 | v5 | v3;
    }
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  return v4 | v5 | v3;
}

void mlir::copyElementsAttrData<float>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *Type;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *ElementsAttrRawData;
  uint64_t v20;
  uint64_t v21;
  float v22;
  int64_t NumElements;
  uint64_t i;
  uint64_t v25;
  int8x8_t v26;
  uint64_t j;
  uint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  int16x4_t v36;
  int16x4_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  float *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  float *v71;
  uint64_t k;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  float v94;
  float *v95;
  unsigned int IntOrFloatBitWidth;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _DWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  float v108;
  float v109;
  float *v110;
  unint64_t v111;
  float v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v122;
  float v123;
  unint64_t v124;
  uint64_t OperandRange;
  _QWORD v126[2];
  uint64_t v127;
  uint64_t v128;
  void *v129[3];
  _QWORD v130[6];

  v130[5] = *MEMORY[0x1E0C80C00];
  v127 = a1;
  v128 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v127);
  v7 = Type;
  if (!Type)
    goto LABEL_10;
  v8 = *Type;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v126[0] = v7;
  v126[1] = v17;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v126);
  v18 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v127);
  ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v127);
  v21 = v20;
  if (!v18 || a4)
  {
    NumElements = mlir::ElementsAttr::getNumElements(v127, v128);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return;
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return;
      goto LABEL_28;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return;
      if ((unint64_t)NumElements >= 2)
      {
        v32 = 0;
        v31 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18)
            v33 = 0;
          else
            v33 = v32;
          if (v18)
            v34 = 0;
          else
            v34 = v32 + 1;
          LOWORD(v29) = *(_WORD *)&ElementsAttrRawData[2 * v33];
          v29 = (float)LODWORD(v29);
          LOWORD(v30) = *(_WORD *)&ElementsAttrRawData[2 * v34];
          v30 = (float)LODWORD(v30);
          v35 = (float *)(a3 + 4 * v32);
          *v35 = v29;
          v35[1] = v30;
          v32 += 2;
        }
        while (v32 != v31);
        goto LABEL_224;
      }
      goto LABEL_37;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return;
      goto LABEL_55;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return;
      goto LABEL_62;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return;
      goto LABEL_78;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return;
      goto LABEL_94;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return;
      goto LABEL_110;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_126;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_142;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_162;
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_168;
    }
LABEL_170:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<float>(ElementsAttrRawData, v21, a3, NumElements, IntOrFloatBitWidth);
      return;
    }
    if (v18)
      v88 = 1;
    else
      v88 = NumElements;
    llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v129, v88);
    mlir::detail::unpackBooleanData(ElementsAttrRawData, v21, (uint64_t)v129[0], (unint64_t)v129[1]);
    v89 = (unsigned __int8 *)v129[0];
    if (NumElements < 1)
      goto LABEL_218;
    if (NumElements == 1)
    {
      v103 = 0;
    }
    else
    {
      v102 = 0;
      v103 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v104 = 0;
        else
          v104 = v102;
        v105 = v89[v104];
        if (v18)
          v106 = 0;
        else
          v106 = v102 + 1;
        v107 = v89[v106];
        if (v105)
          v108 = 1.0;
        else
          v108 = 0.0;
        if (v107)
          v109 = 1.0;
        else
          v109 = 0.0;
        v110 = (float *)(a3 + 4 * v102);
        *v110 = v108;
        v110[1] = v109;
        v102 += 2;
      }
      while (v102 != v103);
      if (NumElements == v103)
      {
LABEL_218:
        if (v89 != (unsigned __int8 *)v130)
          free(v89);
        return;
      }
    }
    do
    {
      if (v18)
        v111 = 0;
      else
        v111 = v103;
      if (v89[v111])
        v112 = 1.0;
      else
        v112 = 0.0;
      *(float *)(a3 + 4 * v103++) = v112;
    }
    while (NumElements != v103);
    goto LABEL_218;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_17:
    for (i = 0; i != NumElements; ++i)
    {
      if (v18)
        v25 = 0;
      else
        v25 = i;
      LOBYTE(v22) = ElementsAttrRawData[v25];
      v22 = (float)LODWORD(v22);
      *(float *)(a3 + 4 * i) = v22;
    }
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_28:
    for (j = 0; j != NumElements; ++j)
    {
      if (v18)
        v28 = 0;
      else
        v28 = j;
      v26.i8[0] = ElementsAttrRawData[v28];
      v26 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v26)).u64[0];
      *(float *)v26.i32 = (float)v26.i32[0];
      *(_DWORD *)(a3 + 4 * j) = v26.i32[0];
    }
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_37:
    v31 = 0;
    do
    {
      if (v18)
        v113 = 0;
      else
        v113 = v31;
      LOWORD(v29) = *(_WORD *)&ElementsAttrRawData[2 * v113];
      v29 = (float)LODWORD(v29);
      *(float *)(a3 + 4 * v31++) = v29;
LABEL_224:
      ;
    }
    while (NumElements != v31);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_55:
    if ((unint64_t)NumElements >= 2)
    {
      v40 = 0;
      v38 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v41 = 0;
        else
          v41 = v40;
        v36.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v41];
        if (v18)
          v42 = 0;
        else
          v42 = v40 + 1;
        v36 = (int16x4_t)vmovl_s16(v36).u64[0];
        *(float *)v36.i32 = (float)v36.i32[0];
        v37.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v42];
        v37 = (int16x4_t)vmovl_s16(v37).u64[0];
        *(float *)v37.i32 = (float)v37.i32[0];
        v43 = (_DWORD *)(a3 + 4 * v40);
        *v43 = v36.i32[0];
        v43[1] = v37.i32[0];
        v40 += 2;
      }
      while (v40 != v38);
      goto LABEL_230;
    }
    v38 = 0;
    do
    {
      if (v18)
        v114 = 0;
      else
        v114 = v38;
      v36.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v114];
      v36 = (int16x4_t)vmovl_s16(v36).u64[0];
      *(float *)v36.i32 = (float)v36.i32[0];
      *(_DWORD *)(a3 + 4 * v38++) = v36.i32[0];
LABEL_230:
      ;
    }
    while (NumElements != v38);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_62:
    if ((unint64_t)NumElements >= 2)
    {
      v45 = 0;
      v39 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v46 = 0;
        else
          v46 = v45;
        if (v18)
          v47 = 0;
        else
          v47 = v45 + 1;
        v48 = (float)*(unsigned int *)&ElementsAttrRawData[4 * v46];
        v49 = (float)*(unsigned int *)&ElementsAttrRawData[4 * v47];
        v50 = (float *)(a3 + 4 * v45);
        *v50 = v48;
        v50[1] = v49;
        v45 += 2;
      }
      while (v45 != v39);
      goto LABEL_236;
    }
    v39 = 0;
    do
    {
      if (v18)
        v115 = 0;
      else
        v115 = v39;
      *(float *)(a3 + 4 * v39++) = (float)*(unsigned int *)&ElementsAttrRawData[4 * v115];
LABEL_236:
      ;
    }
    while (NumElements != v39);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_78:
    if ((unint64_t)NumElements >= 2)
    {
      v52 = 0;
      v44 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v53 = 0;
        else
          v53 = v52;
        if (v18)
          v54 = 0;
        else
          v54 = v52 + 1;
        v55 = (float)*(int *)&ElementsAttrRawData[4 * v53];
        v56 = (float)*(int *)&ElementsAttrRawData[4 * v54];
        v57 = (float *)(a3 + 4 * v52);
        *v57 = v55;
        v57[1] = v56;
        v52 += 2;
      }
      while (v52 != v44);
      goto LABEL_242;
    }
    v44 = 0;
    do
    {
      if (v18)
        v116 = 0;
      else
        v116 = v44;
      *(float *)(a3 + 4 * v44++) = (float)*(int *)&ElementsAttrRawData[4 * v116];
LABEL_242:
      ;
    }
    while (NumElements != v44);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_94:
    if ((unint64_t)NumElements >= 2)
    {
      v59 = 0;
      v51 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v60 = 0;
        else
          v60 = v59;
        if (v18)
          v61 = 0;
        else
          v61 = v59 + 1;
        v62 = (float)*(unint64_t *)&ElementsAttrRawData[8 * v60];
        v63 = (float)*(unint64_t *)&ElementsAttrRawData[8 * v61];
        v64 = (float *)(a3 + 4 * v59);
        *v64 = v62;
        v64[1] = v63;
        v59 += 2;
      }
      while (v59 != v51);
      goto LABEL_248;
    }
    v51 = 0;
    do
    {
      if (v18)
        v117 = 0;
      else
        v117 = v51;
      *(float *)(a3 + 4 * v51++) = (float)*(unint64_t *)&ElementsAttrRawData[8 * v117];
LABEL_248:
      ;
    }
    while (NumElements != v51);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_110:
    if ((unint64_t)NumElements >= 2)
    {
      v66 = 0;
      v58 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v67 = 0;
        else
          v67 = v66;
        if (v18)
          v68 = 0;
        else
          v68 = v66 + 1;
        v69 = (float)*(uint64_t *)&ElementsAttrRawData[8 * v67];
        v70 = (float)*(uint64_t *)&ElementsAttrRawData[8 * v68];
        v71 = (float *)(a3 + 4 * v66);
        *v71 = v69;
        v71[1] = v70;
        v66 += 2;
      }
      while (v66 != v58);
      goto LABEL_254;
    }
    v58 = 0;
    do
    {
      if (v18)
        v118 = 0;
      else
        v118 = v58;
      *(float *)(a3 + 4 * v58++) = (float)*(uint64_t *)&ElementsAttrRawData[8 * v118];
LABEL_254:
      ;
    }
    while (NumElements != v58);
    return;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_126:
    if ((unint64_t)NumElements >= 2)
    {
      v74 = 0;
      v65 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v75 = 0;
        else
          v75 = v74;
        if (v18)
          v76 = 0;
        else
          v76 = v74 + 1;
        _H0 = *(_WORD *)&ElementsAttrRawData[2 * v75];
        _H1 = *(_WORD *)&ElementsAttrRawData[2 * v76];
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        v85 = (_DWORD *)(a3 + 4 * v74);
        *v85 = _S0;
        v85[1] = _S1;
        v74 += 2;
      }
      while (v74 != v65);
      goto LABEL_260;
    }
    v65 = 0;
    do
    {
      if (v18)
        v119 = 0;
      else
        v119 = v65;
      _H0 = *(_WORD *)&ElementsAttrRawData[2 * v119];
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(a3 + 4 * v65++) = _S0;
LABEL_260:
      ;
    }
    while (NumElements != v65);
    return;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_142:
    for (k = 0; k != NumElements; ++k)
    {
      if (v18)
        v73 = 0;
      else
        v73 = k;
      *(_DWORD *)(a3 + 4 * k) = *(_DWORD *)&ElementsAttrRawData[4 * v73];
    }
    return;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_162:
    if ((unint64_t)NumElements >= 2)
    {
      v90 = 0;
      v86 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v91 = 0;
        else
          v91 = v90;
        if (v18)
          v92 = 0;
        else
          v92 = v90 + 1;
        v93 = *(double *)&ElementsAttrRawData[8 * v91];
        v94 = *(double *)&ElementsAttrRawData[8 * v92];
        v95 = (float *)(a3 + 4 * v90);
        *v95 = v93;
        v95[1] = v94;
        v90 += 2;
      }
      while (v90 != v86);
      goto LABEL_266;
    }
    v86 = 0;
    do
    {
      if (v18)
        v122 = 0;
      else
        v122 = v86;
      v123 = *(double *)&ElementsAttrRawData[8 * v122];
      *(float *)(a3 + 4 * v86++) = v123;
LABEL_266:
      ;
    }
    while (NumElements != v86);
    return;
  }
  NumElements = 1;
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_170;
LABEL_168:
  if ((unint64_t)NumElements >= 2)
  {
    v97 = 0;
    v87 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v18)
        v98 = 0;
      else
        v98 = v97;
      if (v18)
        v99 = 0;
      else
        v99 = v97 + 1;
      v100 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v99] << 16;
      v101 = (_DWORD *)(a3 + 4 * v97);
      *v101 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v98] << 16;
      v101[1] = v100;
      v97 += 2;
    }
    while (v97 != v87);
    goto LABEL_272;
  }
  v87 = 0;
  do
  {
    if (v18)
      v124 = 0;
    else
      v124 = v87;
    *(_DWORD *)(a3 + 4 * v87++) = *(unsigned __int16 *)&ElementsAttrRawData[2 * v124] << 16;
LABEL_272:
    ;
  }
  while (NumElements != v87);
}

uint64_t llvm::SmallVector<BOOL,40u>::SmallVector(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = a2;
  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_181233150;
  if (a2)
  {
    if (a2 < 0x29)
    {
      v4 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), a2, 1);
      v4 = *(_QWORD *)(a1 + 8);
      a2 = v2 - v4;
      if (v2 == v4)
        goto LABEL_7;
    }
    bzero((void *)(*(_QWORD *)a1 + v4), a2);
LABEL_7:
    *(_QWORD *)(a1 + 8) = v2;
  }
  return a1;
}

unsigned __int8 *mlir::detail::unpackBooleanData(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64x2_t v8;
  int32x2_t v9;
  uint64_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;

  if (a2)
  {
    v4 = (BOOL *)(a3 + 3);
    do
    {
      if (a4 >= 8)
        v5 = 8;
      else
        v5 = a4;
      if (!v5)
        goto LABEL_3;
      if (a4 >= 8)
        v6 = 8;
      else
        v6 = a4;
      v7 = *result;
      v8 = (uint64x2_t)vdupq_n_s64(v6 - 1);
      v9 = vmovn_s64((int64x2_t)vcgeq_u64(v8, (uint64x2_t)xmmword_181233120));
      if ((v9.i8[0] & 1) != 0)
        *(v4 - 3) = v7 & 1;
      if ((v9.i8[4] & 1) != 0)
        *(v4 - 2) = (v7 & 2) != 0;
      v10 = ((_BYTE)v6 + 1) & 0x1E;
      if (v10 == 2)
        goto LABEL_3;
      v11 = vmovn_s64((int64x2_t)vcgtq_u64(v8, (uint64x2_t)xmmword_181233160));
      if ((v11.i8[0] & 1) != 0)
      {
        *(v4 - 1) = (v7 & 4) != 0;
        if ((v11.i8[4] & 1) != 0)
        {
LABEL_21:
          *v4 = (v7 & 8) != 0;
          if (v10 == 4)
            goto LABEL_3;
          goto LABEL_22;
        }
      }
      else if ((v11.i8[4] & 1) != 0)
      {
        goto LABEL_21;
      }
      if (v10 == 4)
        goto LABEL_3;
LABEL_22:
      v12 = vmovn_s64((int64x2_t)vcgtq_u64(v8, (uint64x2_t)xmmword_181233170));
      if ((v12.i8[0] & 1) != 0)
      {
        v4[1] = (v7 & 0x10) != 0;
        if ((v12.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v10 != 6)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      else if ((v12.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      v4[2] = (v7 & 0x20) != 0;
      if (v10 != 6)
      {
LABEL_28:
        v13 = vmovn_s64((int64x2_t)vcgtq_u64(v8, (uint64x2_t)xmmword_181233180));
        if ((v13.i8[0] & 1) != 0)
          v4[3] = (v7 & 0x40) != 0;
        if ((v13.i8[4] & 1) != 0)
          v4[4] = v7 >> 7;
      }
LABEL_3:
      ++result;
      v4 += 8;
      a4 -= 8;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<float>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_181233120));
      if ((v14.i8[0] & 1) != 0)
        *(float *)(a3 + 4 * v9) = (float)(int)(v6 & v11);
      if ((v14.i8[4] & 1) != 0)
        *(float *)(a3 + 4 * v9 + 4) = (float)(int)((v11 >> a5) & v6);
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
      v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233160));
      if ((v16.i8[0] & 1) != 0)
      {
        *(float *)(a3 + 4 * v9 + 8) = (float)(int)((v11 >> (2 * a5)) & v6);
        if ((v16.i8[4] & 1) != 0)
        {
LABEL_20:
          *(float *)(a3 + 4 * v9 + 12) = (float)(int)((v11 >> (3 * a5)) & v6);
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_21;
        }
      }
      else if ((v16.i8[4] & 1) != 0)
      {
        goto LABEL_20;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_21:
      v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233170));
      if ((v17.i8[0] & 1) != 0)
      {
        *(float *)(a3 + 4 * v9 + 16) = (float)(int)((v11 >> (4 * a5)) & v6);
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_23:
          if (v15 != 6)
            goto LABEL_27;
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_23;
      }
      *(float *)(a3 + 4 * v9 + 20) = (float)(int)((v11 >> (5 * a5)) & v6);
      if (v15 != 6)
      {
LABEL_27:
        v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233180));
        if ((v18.i8[0] & 1) != 0)
          *(float *)(a3 + 4 * v9 + 24) = (float)(int)((v11 >> (6 * a5)) & v6);
        if ((v18.i8[4] & 1) != 0)
          *(float *)(a3 + 4 * v9 + 28) = (float)(int)((v11 >> (7 * a5)) & v6);
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::ElementsAttr>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      v12 = 68;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[134];
}

uint64_t mlir::InFlightDiagnostic::InFlightDiagnostic(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a2 + 8);
  *(_BYTE *)(a1 + 184) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    v5 = *v4;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    v6 = a1 + 24;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (*(_DWORD *)(a2 + 32))
      llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v6, a2 + 24);
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_BYTE *)(a1 + 184) = 1;
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::reset[abi:nn180100]((uint64_t)v4);
  mlir::InFlightDiagnostic::abandon((_QWORD *)a2);
  return a1;
}

void std::__optional_destruct_base<mlir::Diagnostic,false>::reset[abi:nn180100](uint64_t a1)
{
  _QWORD **v2;
  _QWORD **v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 176))
  {
    v2 = *(_QWORD ***)(a1 + 152);
    if (v2)
    {
      v3 = *(_QWORD ***)(a1 + 160);
      v4 = v2;
      if (v3 != v2)
      {
        do
          v3 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v3 - 1);
        while (v3 != v2);
        v4 = *(void **)(a1 + 152);
      }
      *(_QWORD *)(a1 + 160) = v2;
      operator delete(v4);
    }
    v5 = *(_QWORD **)(a1 + 128);
    if (v5)
    {
      v6 = *(_QWORD **)(a1 + 136);
      v7 = *(void **)(a1 + 128);
      if (v6 != v5)
      {
        do
        {
          v9 = (void *)*--v6;
          v8 = v9;
          *v6 = 0;
          if (v9)
            operator delete[](v8);
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 128);
      }
      *(_QWORD *)(a1 + 136) = v5;
      operator delete(v7);
    }
    v10 = *(void **)(a1 + 16);
    if (v10 != (void *)(a1 + 32))
      free(v10);
    *(_BYTE *)(a1 + 176) = 0;
  }
}

uint64_t llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 24 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 24 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*(_QWORD *)a2 + 24 * v9), *(_QWORD *)a2 + 24 * v10 - (*(_QWORD *)a2 + 24 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

void ZinIrLinearUnitInfo::~ZinIrLinearUnitInfo(ZinIrLinearUnitInfo *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = off_1E0E02A58;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E0E13140;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *((_QWORD *)this + 6);
    v6 = (void *)*((_QWORD *)this + 5);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v4;
    operator delete(v6);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = off_1E0E02A58;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E0E13140;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *((_QWORD *)this + 6);
    v6 = (void *)*((_QWORD *)this + 5);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v4;
    operator delete(v6);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

void ZinIrKernelUnitInfo::~ZinIrKernelUnitInfo(ZinIrKernelUnitInfo *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = off_1E0E02A58;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E0E13140;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *((_QWORD *)this + 6);
    v6 = (void *)*((_QWORD *)this + 5);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v4;
    operator delete(v6);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = off_1E0E02A58;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E0E13140;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *((_QWORD *)this + 6);
    v6 = (void *)*((_QWORD *)this + 5);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v4;
    operator delete(v6);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

void std::__shared_ptr_emplace<mlir::anec::ANECIRUnit>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::anec::ANECIRUnit>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E52008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<mlir::anec::ANECIRUnit>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void mlir::anec::ANECIRLayer::~ANECIRLayer(void **this)
{
  *this = off_1E0E4C6B8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E0E4C6B8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  operator delete(this);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  _QWORD v29[39];

  v29[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.constant", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"mps.constant";
    v27[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v9);
  v11 = *a3;
  v12 = *a4;
  if (v12)
  {
    v13 = *v12;
    v14 = mlir::TypeID::get<mlir::ElementsAttr>();
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD **)(v13 + 8);
      do
      {
        v17 = v15 >> 1;
        v18 = &v16[2 * (v15 >> 1)];
        v20 = *v18;
        v19 = v18 + 2;
        v15 += ~(v15 >> 1);
        if (v20 < v14)
          v16 = v19;
        else
          v15 = v17;
      }
      while (v15);
    }
  }
  mlir::mps::ConstantOp::build((uint64_t)a1, (uint64_t)v29, v11, v12);
  v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::MatMul,mlir::detail::TypedValue<mlir::MemRefType>,mlir::mps::ConstantOp &,mlir::FloatAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.matmul", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.matmul";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::MatMul::build(a1, (uint64_t)v21, *a3, *a4 - 16, *a5);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::MatMul,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternMatcherBinder<mlir::anec::MatMul,mlir::detail::any_value_binder,mlir::detail::op_matcher_with_bind<mlir::mps::ConstantOp>>>(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t DefiningOp;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * a2 + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v14);
  v6 = DefiningOp;
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::anec::MatMul,void>::id
      || (*(_BYTE *)(DefiningOp + 46) & 0x80) == 0
      || *(_DWORD *)(DefiningOp + 68) != 2)
    {
      goto LABEL_15;
    }
    v7 = *(_QWORD *)(DefiningOp + 72);
    v8 = *(_QWORD *)(v7 + 24);
    v9 = **a3;
    if (v9)
    {
      v10 = v9 == v8;
    }
    else
    {
      **a3 = v8;
      v7 = *(_QWORD *)(DefiningOp + 72);
      v10 = 1;
    }
    if ((v11 = a3[1], v14 = *(_QWORD *)(v7 + 56), (v12 = mlir::Value::getDefiningOp((mlir::Value *)&v14)) != 0)
      && *(_UNKNOWN **)(*(_QWORD *)(v12 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id
      && (!*v11 || *v11 == v12)
      && (*v11 = v12, v10))
    {
      a3[2] = (uint64_t *)v6;
      v5 = 1;
    }
    else
    {
LABEL_15:
      v5 = 0;
    }
  }
  return (v6 != 0) & v5;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::ElementwiseAdd &>(mlir::anec::ElementwiseAdd &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void mlir::getIntValues<float>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t NumElements;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a1;
  v9 = a2;
  if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v8) || a4)
    NumElements = mlir::ElementsAttr::getNumElements(v8, v9);
  else
    NumElements = 1;
  v7 = *(unsigned int *)(a3 + 8);
  if (NumElements != v7)
  {
    if (NumElements >= v7)
    {
      if (NumElements > *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), NumElements, 4);
        v7 = *(unsigned int *)(a3 + 8);
      }
      if (NumElements != v7)
        bzero((void *)(*(_QWORD *)a3 + 4 * v7), 4 * (NumElements - v7));
    }
    *(_DWORD *)(a3 + 8) = NumElements;
  }
  mlir::copyElementsAttrData<float>(v8, v9, *(_QWORD *)a3, a4);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  _QWORD v24[39];

  v24[38] = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"anec.gain_offset_control";
    v22[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v13);
  mlir::anec::GOC::build(v15, (uint64_t)v24, *a3, *a4, *a5, *a6);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::Value &,mlir::mps::ConstantOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  _QWORD v24[39];

  v24[38] = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"anec.gain_offset_control";
    v22[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v13);
  mlir::anec::GOC::build(v15, (uint64_t)v24, *a3, *a4, *a5, *a6 - 16);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

uint64_t *llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;

  v1 = a1;
  v2 = *a1;
  v3 = mlir::TypeID::get<mlir::ElementsAttr>();
  v4 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(_QWORD **)(v2 + 8);
  v6 = &v5[2 * v4];
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 == v6 || *v5 != v3 || !v5[1])
    return 0;
  if (v1)
  {
    v12 = *v1;
    v13 = mlir::TypeID::get<mlir::ElementsAttr>();
    v14 = *(unsigned int *)(v12 + 16);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD **)(v12 + 8);
      do
      {
        v16 = v14 >> 1;
        v17 = &v15[2 * (v14 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v14 += ~(v14 >> 1);
        if (v19 < v13)
          v15 = v18;
        else
          v14 = v16;
      }
      while (v14);
    }
  }
  return v1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::mps::ConstantOp &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  _QWORD v24[39];

  v24[38] = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"anec.gain_offset_control";
    v22[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v13);
  mlir::anec::GOC::build(v15, (uint64_t)v24, *a3, *a4, *a5 - 16, *a6);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

void llvm::detail::DoubleAPFloat::~DoubleAPFloat(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::detail::DoubleAPFloat *v7;

  v1 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v1)
  {
    v2 = (void *)(v1 - 16);
    v3 = *(_QWORD *)(v1 - 8);
    if (v3)
    {
      v4 = llvm::APFloatBase::PPCDoubleDouble(this);
      v5 = v1 - 24;
      v6 = 32 * v3;
      do
      {
        while (1)
        {
          v7 = (llvm::detail::DoubleAPFloat *)(v5 + v6);
          if (v4 != *(void **)(v5 + v6))
            break;
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v7);
          v6 -= 32;
          if (!v6)
            goto LABEL_7;
        }
        llvm::detail::IEEEFloat::~IEEEFloat(v7);
        v6 -= 32;
      }
      while (v6);
    }
LABEL_7:
    operator delete[](v2);
  }
}

void mlir::anec::ANECIRUnit::~ANECIRUnit(mlir::anec::ANECIRUnit *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &unk_1E0E4C5D0;
  v2 = (char *)*((_QWORD *)this + 14);
  if (v2 != (char *)this + 128)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 8);
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4)
  {
    v5 = 32 * v4;
    do
    {
      if (v3[v5 - 9] < 0)
        operator delete(*(void **)&v3[v5 - 32]);
      v5 -= 32;
    }
    while (v5);
    v3 = (char *)*((_QWORD *)this + 8);
  }
  if (v3 != (char *)this + 80)
    free(v3);
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = off_1E0E4C6B8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v1;

  mlir::anec::ANECIRUnit::~ANECIRUnit(this);
  operator delete(v1);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRPoolUnit *,std::shared_ptr<mlir::anec::ANECIRPoolUnit>::__shared_ptr_default_delete<mlir::anec::ANECIRPoolUnit,mlir::anec::ANECIRPoolUnit>,std::allocator<mlir::anec::ANECIRPoolUnit>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRPoolUnit *,std::shared_ptr<mlir::anec::ANECIRPoolUnit>::__shared_ptr_default_delete<mlir::anec::ANECIRPoolUnit,mlir::anec::ANECIRPoolUnit>,std::allocator<mlir::anec::ANECIRPoolUnit>>::__on_zero_shared(uint64_t a1)
{
  mlir::anec::ANECIRUnit *v1;
  void *v2;

  v1 = *(mlir::anec::ANECIRUnit **)(a1 + 24);
  if (v1)
  {
    mlir::anec::ANECIRUnit::~ANECIRUnit(v1);
    operator delete(v2);
  }
}

void ZinIrReductionUnitInfo::~ZinIrReductionUnitInfo(ZinIrReductionUnitInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E0E13140;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E0E13140;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRGOCUnit *,std::shared_ptr<mlir::anec::ANECIRGOCUnit>::__shared_ptr_default_delete<mlir::anec::ANECIRGOCUnit,mlir::anec::ANECIRGOCUnit>,std::allocator<mlir::anec::ANECIRGOCUnit>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRGOCUnit *,std::shared_ptr<mlir::anec::ANECIRGOCUnit>::__shared_ptr_default_delete<mlir::anec::ANECIRGOCUnit,mlir::anec::ANECIRGOCUnit>,std::allocator<mlir::anec::ANECIRGOCUnit>>::__on_zero_shared(uint64_t a1)
{
  mlir::anec::ANECIRUnit *v1;
  void *v2;

  v1 = *(mlir::anec::ANECIRUnit **)(a1 + 24);
  if (v1)
  {
    mlir::anec::ANECIRUnit::~ANECIRUnit(v1);
    operator delete(v2);
  }
}

void llvm::SmallVectorTemplateBase<std::pair<std::string,mlir::anec::ANECIRDataType>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v14);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = &v6[32 * v7];
    v9 = v4;
    do
    {
      v10 = *(_OWORD *)v6;
      v9[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)v9 = v10;
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v9 + 6) = *((_DWORD *)v6 + 6);
      v6 += 32;
      v9 += 4;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 32 * v11;
      do
      {
        if (v6[v12 - 9] < 0)
          operator delete(*(void **)&v6[v12 - 32]);
        v12 -= 32;
      }
      while (v12);
      v6 = *(char **)a1;
    }
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

_QWORD **std::map<ZinIrDimension,__CFString const*>::map[abi:nn180100](_QWORD **a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v14;
  uint64_t *v15;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      v8 = std::__tree<std::__value_type<ZinIrDimension,__CFString const*>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,__CFString const*>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,__CFString const*>>>::__find_equal<ZinIrDimension>(a1, v4, &v15, &v14, a2);
      if (!*v8)
      {
        v9 = v8;
        v10 = operator new(0x30uLL);
        v10[2] = *(_OWORD *)a2;
        v11 = v15;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = v11;
        *v9 = (uint64_t)v10;
        v12 = (_QWORD *)**a1;
        if (v12)
        {
          *a1 = v12;
          v7 = (uint64_t *)*v9;
        }
        else
        {
          v7 = (uint64_t *)v10;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v7);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

uint64_t std::map<ZinIrDimension,__CFString const*>::~map[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<std::__value_type<ZinIrDimension,__CFString const*>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,__CFString const*>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,__CFString const*>>>::__find_equal<ZinIrDimension>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
    }
    else
    {
      v19 = a1 + 1;
    }
LABEL_25:
    *a3 = v19;
    return v5;
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
      }
      else
      {
        v23 = a1 + 1;
      }
LABEL_41:
      *a3 = v23;
      return v5;
    }
  }
}

_QWORD *mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>@<X0>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NumElements;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  _OWORD v14[2];
  _OWORD v15[2];
  uint64_t v16[9];

  v16[0] = mlir::DenseElementsAttr::getElementType(a1);
  result = (_QWORD *)mlir::Type::isIntOrIndex((mlir::Type *)v16);
  if ((result & 1) != 0)
  {
    Value = mlir::ArrayAttr::getValue(a1);
    v7 = v6;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(v15, *(_QWORD *)a1, 0);
    v8 = *(_QWORD *)a1;
    NumElements = mlir::DenseElementsAttr::getNumElements(a1);
    result = mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(v14, v8, NumElements);
    v10 = v15[1];
    v11 = v14[1];
    v12 = v14[0];
    *(_OWORD *)a2 = v15[0];
    *(_OWORD *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 32) = v12;
    *(_OWORD *)(a2 + 48) = v11;
    *(_QWORD *)(a2 + 64) = Value;
    *(_QWORD *)(a2 + 72) = v7;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 80) = v13;
  return result;
}

