void getPackOpResultTypeShape(uint64_t a1, const void *a2, unint64_t a3, uint64_t *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  void *v17;
  size_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;

  v17 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v18 = 8 * a3;
  if (8 * a3 < 0x31)
  {
    v19 = 0;
    v20 = a10;
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a3, 8);
  v19 = *(_DWORD *)(a1 + 8);
  v20 = a10;
  if (a3)
  {
LABEL_5:
    memcpy((void *)(*(_QWORD *)a1 + 8 * v19), a2, v18);
    v19 = *(_DWORD *)(a1 + 8);
  }
LABEL_6:
  v21 = v19 + a3;
  *(_DWORD *)(a1 + 8) = v21;
  if (a7)
  {
    v22 = *(_QWORD *)a1;
    v23 = 8 * a7;
    v24 = a4;
    do
    {
      v26 = *(_QWORD *)(v22 + 8 * *a6);
      if (v26 != 0x8000000000000000)
      {
        v27 = *v24;
        v25 = 0x8000000000000000;
        if (*v24 != 0x8000000000000000)
        {
          if (v26)
            v28 = v26 < 1 == v27 > 0;
          else
            v28 = 1;
          if (v28)
          {
            v25 = v26 / v27;
          }
          else
          {
            if (v27 <= 0)
              v29 = v26 + 1;
            else
              v29 = v26 - 1;
            v25 = v29 / v27 + 1;
          }
        }
        *(_QWORD *)(v22 + 8 * *a6) = v25;
      }
      ++a6;
      ++v24;
      v23 -= 8;
    }
    while (v23);
  }
  if (v20)
  {
    mlir::applyPermutationToVector<long long,6u>(a1, a9);
    v21 = *(_DWORD *)(a1 + 8);
  }
  v30 = ((8 * a5) >> 3) + v21;
  if (v30 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v17, v30, 8);
    v21 = *(_DWORD *)(a1 + 8);
  }
  if (a5)
  {
    memcpy((void *)(*(_QWORD *)a1 + 8 * v21), a4, 8 * a5);
    v21 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v21 + a5;
}

uint64_t mlir::tensor::PackOp::inferPackedType(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  const void *Value;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t RHS;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  _QWORD v24[7];

  v24[6] = *MEMORY[0x1E0C80C00];
  v21 = a1;
  Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  getPackOpResultTypeShape((uint64_t)&v22, Value, v14, a2, a3, a4, a5, v15, a6, a7);
  v16 = v22;
  v17 = v23;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v21);
  v19 = mlir::RankedTensorType::get((uint64_t)v16, v17, RHS, 0);
  if (v22 != v24)
    free(v22);
  return v19;
}

uint64_t mlir::tensor::PackOp::getSpeculatability(mlir::tensor::PackOp *this)
{
  uint64_t v1;
  unint64_t v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;

  v1 = *(_QWORD *)this;
  v2 = *(unsigned int *)(v1 + 44);
  v3 = (_DWORD *)(v1 + 16 * ((v2 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(v1 + 44)))
    v3 = 0;
  v4 = v3[8];
  if ((v2 & 0x800000) != 0)
  {
    v5 = *(_QWORD *)(v1 + 72);
    if (!v4)
      return areTilesAndTiledDimsAllConstant<mlir::tensor::PackOp>(v1);
  }
  else
  {
    v5 = 0;
    if (!v4)
      return areTilesAndTiledDimsAllConstant<mlir::tensor::PackOp>(v1);
  }
  if (*(_QWORD *)(v5 + 32 * (v3[7] + v3[6]) + 24))
    return 1;
  return areTilesAndTiledDimsAllConstant<mlir::tensor::PackOp>(v1);
}

uint64_t areTilesAndTiledDimsAllConstant<mlir::tensor::PackOp>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t ArgAttrsAttr;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  void *v18;
  unsigned int v19;
  _QWORD v20[7];

  v20[6] = *MEMORY[0x1E0C80C00];
  v17 = a1;
  if (*(_BYTE *)(a1 + 47))
    v1 = a1 + 80;
  else
    v1 = 0;
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * *(unsigned int *)(v1 + 24) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  else
    v3 = 0;
  v16[0] = v2;
  v16[1] = v3;
  mlir::tensor::PackOp::getMixedTiles((mlir::tensor::PackOp *)&v17, (uint64_t)&v18);
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v16);
  if (v5 <= v19)
    v6 = (_QWORD *)ArgAttrsAttr;
  else
    v6 = (_QWORD *)(ArgAttrsAttr + 8 * (v5 - v19));
  if (v5 >= v19)
    v7 = v19;
  else
    v7 = v5;
  v8 = v18;
  if (v7)
    v9 = v19 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v12 = 1;
    if (v18 != v20)
LABEL_27:
      free(v8);
  }
  else
  {
    v10 = 8 * v19 - 8;
    v11 = 8 * v7 - 8;
    v12 = 1;
    while (1)
    {
      mlir::getConstantIntValue(*v8);
      if (!v13)
      {
        v12 = 0;
LABEL_26:
        v8 = v18;
        if (v18 == v20)
          return v12;
        goto LABEL_27;
      }
      if (*v6 == 0x8000000000000000)
        break;
      if (v11)
      {
        ++v6;
        ++v8;
        v14 = v10;
        v10 -= 8;
        v11 -= 8;
        if (v14)
          continue;
      }
      goto LABEL_26;
    }
    v12 = 0;
    v8 = v18;
    if (v18 != v20)
      goto LABEL_27;
  }
  return v12;
}

uint64_t mlir::tensor::PackOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  uint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v10);
  v5 = DefiningOp;
  if (!DefiningOp)
    return v5;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::UnPackOp,void>::id)
    return 0;
  if (*(_BYTE *)(a1 + 47))
    v7 = (unsigned int *)(a1 + 80);
  else
    v7 = 0;
  v8 = v7[6];
  v9 = *(_QWORD *)(a1 + 72);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)(v9 + 32 * v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
    || v7[8] && *(_QWORD *)(v9 + 32 * (v8 + v7[7]) + 24)
    || !hasSameInnerOuterAttribute(a1, DefiningOp)
    || !haveSameTiles(a1, v5))
  {
    return 0;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1, &v10, 1);
  return 1;
}

BOOL hasSameInnerOuterAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *p_DenseI64ArrayAttr;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  mlir::MLIRContext *Context;
  uint64_t DenseI64ArrayAttr;
  uint64_t v22;

  v4 = a1 + 64;
  v22 = *(_QWORD *)(a1 + 64 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1));
  v5 = (const void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v22);
  v7 = v6;
  v22 = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  v8 = (const void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v22);
  if (v7 != v9 || memcmp(v5, v8, 8 * v7))
    return 0;
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v11 = v4 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  else
    v11 = 0;
  v22 = *(_QWORD *)(v11 + 8);
  if (v22)
  {
    p_DenseI64ArrayAttr = &v22;
  }
  else
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
    DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(&Context, 0, 0);
    p_DenseI64ArrayAttr = &DenseI64ArrayAttr;
  }
  v13 = (const void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)p_DenseI64ArrayAttr);
  v15 = v14;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v16 = a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v16 = 0;
  v22 = *(_QWORD *)(v16 + 8);
  if (v22)
  {
    v17 = (const void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v22);
    if (v15 == v18)
      return memcmp(v13, v17, 8 * v15) == 0;
    return 0;
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(&Context, 0, 0);
  v17 = (const void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&DenseI64ArrayAttr);
  if (v15 != v19)
    return 0;
  return memcmp(v13, v17, 8 * v15) == 0;
}

BOOL haveSameTiles(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char isEqualConstantIntOrValue;
  _BOOL8 v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  _BYTE v13[48];
  void *v14;
  unsigned int v15;
  _QWORD v16[7];

  v16[6] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a1;
  mlir::tensor::PackOp::getMixedTiles((mlir::tensor::PackOp *)&v10, (uint64_t)&v14);
  mlir::tensor::UnPackOp::getMixedTiles((mlir::tensor::UnPackOp *)&v9, (uint64_t)&v11);
  v2 = v15;
  if (v15 != v12)
    goto LABEL_9;
  if (v15)
  {
    if (mlir::isEqualConstantIntOrValue(*(_QWORD *)v14, *(_QWORD *)v11))
    {
      v3 = 1;
      do
      {
        v4 = v3;
        if (v2 == v3)
          break;
        isEqualConstantIntOrValue = mlir::isEqualConstantIntOrValue(*((_QWORD *)v14 + v3), *((_QWORD *)v11 + v3));
        v3 = v4 + 1;
      }
      while ((isEqualConstantIntOrValue & 1) != 0);
      v6 = v4 >= v2;
      v7 = v11;
      if (v11 == v13)
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_9:
    v6 = 0;
    v7 = v11;
    if (v11 == v13)
      goto LABEL_11;
    goto LABEL_10;
  }
  v6 = 1;
  v7 = v11;
  if (v11 != v13)
LABEL_10:
    free(v7);
LABEL_11:
  if (v14 != v16)
    free(v14);
  return v6;
}

unint64_t mlir::tensor::PackOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  unint64_t result;

  v3 = *(uint64_t **)(a2 + 80);
  v4 = *v3;
  if (*v3 && !mlir::DenseElementsAttr::classof(*v3))
    v4 = 0;
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  result = reshapeConstantSource(v4, (_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (result <= 7)
    return 0;
  return result;
}

uint64_t mlir::tensor::UnPackOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "unpack", 6);
}

uint64_t mlir::tensor::UnPackOp::reifyResultShapes(uint64_t *a1, mlir::IndexType **a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::MLIRContext *i;
  unint64_t MixedSize;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[7];

  v31[6] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v29 = (void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
  v29 = v31;
  v30 = 0x600000000;
  if (v6)
  {
    v7 = v6;
    if (v6 < 7)
    {
      v8 = 0;
      v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v6, 8);
      v8 = v30;
      v9 = v7 - v30;
      if (v7 == v30)
        goto LABEL_7;
    }
    bzero((char *)v29 + 8 * v8, 8 * v9);
LABEL_7:
    LODWORD(v30) = v7;
  }
  v10 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v10)
  {
    llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpFoldResult,6u>>::append(a3, 1 - v10, (unint64_t)&v29);
LABEL_15:
    v14 = v29;
    if (v29 == v31)
      goto LABEL_17;
    goto LABEL_16;
  }
  if ((_DWORD)v10 == 1)
    goto LABEL_15;
  v11 = *(_QWORD *)a3;
  v12 = v10 << 6;
  do
  {
    v13 = *(void **)(v11 + v12 - 64);
    if ((void *)(v11 + v12 - 48) != v13)
      free(v13);
    v12 -= 64;
  }
  while (v12 != 64);
  *(_DWORD *)(a3 + 8) = 1;
  v14 = v29;
  if (v29 != v31)
LABEL_16:
    free(v14);
LABEL_17:
  v15 = *(_QWORD *)(v5 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 56);
  v28 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
  v29 = v31;
  v30 = 0x600000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  if (v17 >= 1)
  {
    for (i = 0; (uint64_t)i < v21; i = (mlir::MLIRContext *)((char *)i + 1))
    {
      MixedSize = mlir::tensor::getMixedSize(a2, v15, v16, i);
      v20 = v30;
      if (v30 >= (unint64_t)HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v30 + 1, 8);
        v20 = v30;
      }
      *((_QWORD *)v29 + v20) = MixedSize;
      LODWORD(v30) = v30 + 1;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
    }
  }
  v22 = *(_QWORD *)a3;
  v23 = v29;
  if ((void **)v22 != &v29)
  {
    if (v29 != v31)
    {
      if (*(_QWORD *)v22 != v22 + 16)
      {
        free(*(void **)v22);
        v23 = v29;
      }
      *(_QWORD *)v22 = v23;
      *(_QWORD *)(v22 + 8) = v30;
      v29 = v31;
      HIDWORD(v30) = 0;
      goto LABEL_39;
    }
    v24 = v30;
    v25 = *(unsigned int *)(v22 + 8);
    if (v25 >= v30)
    {
      if ((_DWORD)v30)
        memmove(*(void **)v22, v31, 8 * v30);
      goto LABEL_38;
    }
    if (*(_DWORD *)(v22 + 12) >= v30)
    {
      if ((_DWORD)v25)
      {
        memmove(*(void **)v22, v31, 8 * v25);
        v26 = v30;
        if (v25 == v30)
        {
LABEL_38:
          *(_DWORD *)(v22 + 8) = v24;
LABEL_39:
          LODWORD(v30) = 0;
          v23 = v29;
          goto LABEL_40;
        }
      }
      else
      {
        v25 = 0;
        v26 = v30;
        if (!(_DWORD)v30)
          goto LABEL_38;
      }
    }
    else
    {
      *(_DWORD *)(v22 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v22, (void *)(v22 + 16), v24, 8);
      v25 = 0;
      v26 = v30;
      if (!(_DWORD)v30)
        goto LABEL_38;
    }
    memcpy((void *)(*(_QWORD *)v22 + 8 * v25), (char *)v29 + 8 * v25, 8 * v26 - 8 * v25);
    goto LABEL_38;
  }
LABEL_40:
  if (v23 != v31)
    free(v23);
  return 1;
}

void mlir::tensor::UnPackOp::getMixedTiles(mlir::tensor::UnPackOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t Context;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)this;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  if (HIBYTE(*(_DWORD *)(v3 + 44)))
    v5 = v3 + 16 * (((unint64_t)*(unsigned int *)(v3 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 16);
  v15 = Context;
  v16 = v6;
  v7 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v16);
  if (v8)
  {
    v9 = (void **)v7;
    v10 = 0;
    v11 = 8 * v8;
    do
    {
      if (*v9 == (void *)0x8000000000000000)
      {
        v12 = *(_QWORD *)(v3 + 72) + 32 * v10++;
        v13 = *(_QWORD *)(v12 + 88) | 4;
      }
      else
      {
        v13 = mlir::Builder::getI64IntegerAttr((mlir::Builder *)&v15, *v9) & 0xFFFFFFFFFFFFFFFBLL;
      }
      v14 = *(unsigned int *)(a2 + 8);
      if (v14 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v14 + 1, 8);
        v14 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v13;
      ++*(_DWORD *)(a2 + 8);
      ++v9;
      v11 -= 8;
    }
    while (v11);
  }
}

uint64_t mlir::tensor::UnPackOp::verify(mlir::tensor::UnPackOp *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void *v22;
  _QWORD *i;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  unint64_t v31;
  uint64_t v32;
  void *Context;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  void *__p;
  _QWORD **v40;
  char v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t v44;
  llvm *DenseI64ArrayAttr;
  uint64_t v46;
  unsigned int v47;
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  v32 = *(_QWORD *)this;
  mlir::tensor::UnPackOp::getMixedTiles((mlir::tensor::UnPackOp *)&v32, (uint64_t)&v42);
  if (v43)
  {
    v2 = v42;
    v3 = 8 * v43;
    while (!mlir::isConstantIntValue(*v2, 0))
    {
      ++v2;
      v3 -= 8;
      if (!v3)
        goto LABEL_5;
    }
    DenseI64ArrayAttr = (llvm *)"invalid zero tile factor";
    v48 = 259;
    mlir::Operation::emitError((uint64_t *)v1, (uint64_t)&DenseI64ArrayAttr, (uint64_t)&v34);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v34);
    if (v34)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
    if (v41)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v40;
        v13 = __p;
        if (v40 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v40 = v11;
        operator delete(v13);
      }
      v14 = v37;
      if (!v37)
        goto LABEL_53;
      v15 = v38;
      v16 = v37;
      if (v38 == v37)
        goto LABEL_52;
      do
      {
        v18 = (void *)*--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v15 != v14);
      goto LABEL_51;
    }
    goto LABEL_55;
  }
LABEL_5:
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31);
  v5 = v4;
  v34 = *(void **)(v1 + 64 + 16 * (((unint64_t)*(unsigned int *)(v1 + 44) >> 23) & 1));
  v6 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v34);
  v8 = v7;
  if (HIBYTE(*(_DWORD *)(v1 + 44)))
    v9 = v1 + 64 + 16 * (((unint64_t)*(unsigned int *)(v1 + 44) >> 23) & 1);
  else
    v9 = 0;
  v34 = *(void **)(v9 + 8);
  if (!v34)
  {
    Context = (void *)mlir::Attribute::getContext((mlir::Attribute *)(v1 + 24));
    DenseI64ArrayAttr = (llvm *)mlir::Builder::getDenseI64ArrayAttr((mlir::MLIRContext **)&Context, 0, 0);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&DenseI64ArrayAttr);
    if (v8 > v5)
      goto LABEL_36;
LABEL_26:
    DenseI64ArrayAttr = 0;
    v46 = 0;
    v47 = 0;
    if (v8)
    {
      v19 = 8 * v8;
      v20 = 8 * v8;
      v21 = (void **)v6;
      do
      {
        v22 = *v21++;
        Context = v22;
        llvm::DenseMapBase<llvm::DenseMap<long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>,long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&DenseI64ArrayAttr, (uint64_t *)&Context, (uint64_t)&v34);
        v20 -= 8;
      }
      while (v20);
      if (v8 == v46)
      {
        for (i = (_QWORD *)v6; (*i & 0x8000000000000000) == 0 && *i < (int64_t)v5; ++i)
        {
          v19 -= 8;
          if (!v19)
            llvm::deallocate_buffer(DenseI64ArrayAttr, (void *)(8 * v47));
        }
      }
      llvm::deallocate_buffer(DenseI64ArrayAttr, (void *)(8 * v47));
    }
    llvm::deallocate_buffer(0, 0);
  }
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v34);
  if (v8 <= v5)
    goto LABEL_26;
LABEL_36:
  DenseI64ArrayAttr = (llvm *)"invalid inner_dims_pos vector";
  v48 = 259;
  mlir::Operation::emitError((uint64_t *)v1, (uint64_t)&DenseI64ArrayAttr, (uint64_t)&v34);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v34);
  if (v34)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
  if (v41)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v40;
      v26 = __p;
      if (v40 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v40 = v24;
      operator delete(v26);
    }
    v14 = v37;
    if (!v37)
      goto LABEL_53;
    v27 = v38;
    v16 = v37;
    if (v38 == v37)
    {
LABEL_52:
      v38 = v14;
      operator delete(v16);
LABEL_53:
      if (v35 != &v36)
        free(v35);
      goto LABEL_55;
    }
    do
    {
      v29 = (void *)*--v27;
      v28 = v29;
      *v27 = 0;
      if (v29)
        operator delete[](v28);
    }
    while (v27 != v14);
LABEL_51:
    v16 = v37;
    goto LABEL_52;
  }
LABEL_55:
  if (v42 != &v44)
    free(v42);
  return v10;
}

uint64_t mlir::tensor::UnPackOp::getSpeculatability(mlir::tensor::UnPackOp *this)
{
  return areTilesAndTiledDimsAllConstant<mlir::tensor::UnPackOp>(*(_QWORD *)this);
}

uint64_t areTilesAndTiledDimsAllConstant<mlir::tensor::UnPackOp>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t ArgAttrsAttr;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  void *v17;
  unsigned int v18;
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  v16 = a1;
  v1 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v1)
    v2 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
  else
    v2 = 0;
  v15[0] = v1;
  v15[1] = v2;
  mlir::tensor::UnPackOp::getMixedTiles((mlir::tensor::UnPackOp *)&v16, (uint64_t)&v17);
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  if (v4 <= v18)
    v5 = (_QWORD *)ArgAttrsAttr;
  else
    v5 = (_QWORD *)(ArgAttrsAttr + 8 * (v4 - v18));
  if (v4 >= v18)
    v6 = v18;
  else
    v6 = v4;
  v7 = v17;
  if (v6)
    v8 = v18 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v11 = 1;
    if (v17 != v19)
LABEL_24:
      free(v7);
  }
  else
  {
    v9 = 8 * v18 - 8;
    v10 = 8 * v6 - 8;
    v11 = 1;
    while (1)
    {
      mlir::getConstantIntValue(*v7);
      if (!v12)
      {
        v11 = 0;
LABEL_23:
        v7 = v17;
        if (v17 == v19)
          return v11;
        goto LABEL_24;
      }
      if (*v5 == 0x8000000000000000)
        break;
      if (v10)
      {
        ++v5;
        ++v7;
        v13 = v9;
        v9 -= 8;
        v10 -= 8;
        if (v13)
          continue;
      }
      goto LABEL_23;
    }
    v11 = 0;
    v7 = v17;
    if (v17 != v19)
      goto LABEL_24;
  }
  return v11;
}

uint64_t mlir::tensor::UnPackOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  uint64_t v5;
  void *InterfaceFor;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24[2];
  void *v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x1E0C80C00];
  v24[0] = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (DefiningOp
    && (v5 = DefiningOp,
        *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::PackOp,void>::id))
  {
    if (*(_BYTE *)(DefiningOp + 47))
      v18 = (unsigned int *)(DefiningOp + 80);
    else
      v18 = 0;
    v19 = v18[6];
    v20 = *(_QWORD *)(DefiningOp + 72);
    if ((*(_QWORD *)(*(_QWORD *)(v20 + 32 * v19 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
      && (!v18[8] || !*(_QWORD *)(v20 + 32 * (v19 + v18[7]) + 24))
      && hasSameInnerOuterAttribute(DefiningOp, a1)
      && haveSameTiles(v5, a1))
    {
      v24[0] = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 24);
      v7 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1, v24, 1);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v24[0] = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 56);
    InterfaceFor = (void *)mlir::Value::getDefiningOp((mlir::Value *)v24);
    v7 = (uint64_t)InterfaceFor;
    if (InterfaceFor)
    {
      if (!mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)InterfaceFor))
      {
        v7 = 0;
        v22 = 0;
        v23 = 0;
        return v7;
      }
      InterfaceFor = mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor(v7);
    }
    v22 = v7;
    v23 = InterfaceFor;
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 56);
      mlir::MapDynamicShapeOpInterface::mapDynamicShape(v24, (mlir::MapDynamicShapeOpInterface *)&v22);
      v9 = mlir::MutableOperandRange::operator mlir::OperandRange((unsigned int *)v24);
      if (v25 != v26)
        free(v25);
      v10 = *(_QWORD *)(v8 + 8) & 7;
      if (v8 && v10 == 6)
        v10 = (*(_DWORD *)(v8 + 16) + 6);
      v11 = *(uint64_t **)(v9 + 32 * v10 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
      mlir::MutableOperandRange::MutableOperandRange((mlir::MutableOperandRange *)v24, (mlir::OpOperand *)(*(_QWORD *)(a1 + 72) + 32));
      v12 = mlir::MutableOperandRange::operator mlir::OperandRange((unsigned int *)v24);
      v14 = v13;
      if (v25 != v26)
        free(v25);
      v24[0] = v12;
      v24[1] = v14;
      v15 = (uint64_t *)(*(_QWORD *)(a1 + 72)
                      + 32 * mlir::OperandRange::getBeginOperandIndex((mlir::OperandRange *)v24));
      v16 = (uint64_t *)v15[1];
      if (v16)
      {
        *v16 = *v15;
        if (*v15)
          *(_QWORD *)(*v15 + 8) = v15[1];
      }
      v15[3] = (uint64_t)v11;
      v15[1] = (uint64_t)v11;
      v17 = *v11;
      *v15 = *v11;
      if (v17)
        *(_QWORD *)(v17 + 8) = v15;
      *v11 = (uint64_t)v15;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
      return 1;
    }
  }
  return v7;
}

unint64_t mlir::tensor::UnPackOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  unint64_t result;

  v3 = *(uint64_t **)(a2 + 64);
  v4 = *v3;
  if (*v3 && !mlir::DenseElementsAttr::classof(*v3))
    v4 = 0;
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  result = reshapeConstantSource(v4, (_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (result <= 7)
    return 0;
  return result;
}

void mlir::tensor::TensorDialect::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  mlir::RewritePatternSet::addImpl<FoldTensorCastProducerOp,mlir::MLIRContext *>(a2, 0, 0, &v2);
}

BOOL mlir::tensor::BitcastOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::tensor::__mlir_ods_local_type_constraint_TensorOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::tensor::__mlir_ods_local_type_constraint_TensorOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v6;
  void *v7;
  uint64_t v9;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  const void **v48[4];
  __int16 v49;
  int v50;
  const char *v51;
  uint64_t v52;
  _QWORD v53[3];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[96];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = *(void **)(*(_QWORD *)a2 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v53[0] = a2;
    v53[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v6 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v53);
    return 1;
  }
  else
  {
    v49 = 261;
    v48[0] = a3;
    v48[1] = a4;
    mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
    if (v53[0])
    {
      v50 = 3;
      v51 = " #";
      v52 = 2;
      v11 = &v50;
      v12 = (char *)v54;
      if (v55 >= v56)
      {
        v38 = v55 + 1;
        if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
        {
          v44 = (char *)&v50 - (_BYTE *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          v12 = (char *)v54;
          v11 = (int *)((char *)v54 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          v11 = &v50;
          v12 = (char *)v54;
        }
      }
      v13 = &v12[24 * v55];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      v15 = ++v55;
      if (v53[0])
      {
        v50 = 5;
        v51 = (const char *)a5;
        v16 = &v50;
        v17 = (char *)v54;
        if (v15 >= v56)
        {
          v39 = v15 + 1;
          v40 = (char *)v54 + 24 * v15 > (char *)&v50;
          if (v54 <= &v50 && v40)
          {
            v45 = (char *)&v50 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
            v17 = (char *)v54;
            v16 = (int *)((char *)v54 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
            v16 = &v50;
            v17 = (char *)v54;
          }
        }
        v18 = &v17[24 * v55];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
        *(_OWORD *)v18 = v19;
        v20 = ++v55;
        if (v53[0])
        {
          v50 = 3;
          v51 = " must be tensor of any type values, but got ";
          v52 = 44;
          v21 = &v50;
          v22 = (char *)v54;
          if (v20 >= v56)
          {
            v41 = v20 + 1;
            v42 = (char *)v54 + 24 * v20 > (char *)&v50;
            if (v54 <= &v50 && v42)
            {
              v46 = (char *)&v50 - (_BYTE *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
              v22 = (char *)v54;
              v21 = (int *)((char *)v54 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
              v21 = &v50;
              v22 = (char *)v54;
            }
          }
          v23 = &v22[24 * v55];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          ++v55;
          if (v53[0])
          {
            v25 = &v50;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
            v26 = (char *)v54;
            if (v55 >= v56)
            {
              v43 = v55 + 1;
              if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
              {
                v47 = (char *)&v50 - (_BYTE *)v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
                v26 = (char *)v54;
                v25 = (int *)((char *)v54 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
                v25 = &v50;
                v26 = (char *)v54;
              }
            }
            v27 = &v26[24 * v55];
            v28 = *(_OWORD *)v25;
            *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
            *(_OWORD *)v27 = v28;
            ++v55;
          }
        }
      }
    }
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (v62)
    {
      v29 = (_QWORD **)__p;
      if (__p)
      {
        v30 = v61;
        v31 = __p;
        if (v61 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v61 = v29;
        operator delete(v31);
      }
      v32 = v58;
      if (v58)
      {
        v33 = v59;
        v34 = v58;
        if (v59 != v58)
        {
          do
          {
            v36 = (void *)*--v33;
            v35 = v36;
            *v33 = 0;
            if (v36)
              operator delete[](v35);
          }
          while (v33 != v32);
          v34 = v58;
        }
        v59 = v32;
        operator delete(v34);
      }
      if (v54 != v57)
        free(v54);
    }
  }
  return v9;
}

BOOL mlir::tensor::BitcastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::TensorType>(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!mlir::AsmParser::parseType<mlir::TensorType>(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

BOOL mlir::tensor::CastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::TensorType>(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!mlir::AsmParser::parseType<mlir::TensorType>(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.collapse_shape", 21, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::tensor::CollapseShapeOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties]";
        v15 = 117;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[33];
    return a1[32];
  }
  return result;
}

BOOL mlir::tensor::CollapseShapeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  const void **v16;
  __int16 v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v3, (const void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v4 = (uint64_t)(*this - 2);
      else
        v4 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v16 = (const void **)"requires attribute 'reassociation'";
    v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    if (v25)
    {
      v7 = (_QWORD **)__p;
      if (__p)
      {
        v8 = v24;
        v9 = __p;
        if (v24 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v24 = v7;
        operator delete(v9);
      }
      v10 = v21;
      if (v21)
      {
        v11 = v22;
        v12 = v21;
        if (v22 != v21)
        {
          do
          {
            v14 = (void *)*--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              operator delete[](v13);
          }
          while (v11 != v10);
          v12 = v21;
        }
        v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20)
        free(v19);
    }
  }
  return v6;
}

uint64_t mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v6;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  const void **v46[4];
  __int16 v47;
  int v48;
  const char *v49;
  uint64_t v50;
  _QWORD v51[3];
  void *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[96];
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD **v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v51[0] = a2;
    v51[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v6 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v51);
    return 1;
  }
  else
  {
    v47 = 261;
    v46[0] = a3;
    v46[1] = a4;
    mlir::Operation::emitOpError(a1, v46, (uint64_t)v51);
    if (v51[0])
    {
      v48 = 3;
      v49 = " #";
      v50 = 2;
      v8 = &v48;
      v9 = (char *)v52;
      if (v53 >= v54)
      {
        v36 = v53 + 1;
        if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
        {
          v42 = (char *)&v48 - (_BYTE *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          v9 = (char *)v52;
          v8 = (int *)((char *)v52 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          v8 = &v48;
          v9 = (char *)v52;
        }
      }
      v10 = &v9[24 * v53];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      v12 = ++v53;
      if (v51[0])
      {
        v48 = 5;
        v49 = (const char *)a5;
        v13 = &v48;
        v14 = (char *)v52;
        if (v12 >= v54)
        {
          v37 = v12 + 1;
          v38 = (char *)v52 + 24 * v12 > (char *)&v48;
          if (v52 <= &v48 && v38)
          {
            v43 = (char *)&v48 - (_BYTE *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            v14 = (char *)v52;
            v13 = (int *)((char *)v52 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            v13 = &v48;
            v14 = (char *)v52;
          }
        }
        v15 = &v14[24 * v53];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v15 = v16;
        v17 = ++v53;
        if (v51[0])
        {
          v48 = 3;
          v49 = " must be ranked tensor of any type values, but got ";
          v50 = 51;
          v18 = &v48;
          v19 = (char *)v52;
          if (v17 >= v54)
          {
            v39 = v17 + 1;
            v40 = (char *)v52 + 24 * v17 > (char *)&v48;
            if (v52 <= &v48 && v40)
            {
              v44 = (char *)&v48 - (_BYTE *)v52;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              v19 = (char *)v52;
              v18 = (int *)((char *)v52 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              v18 = &v48;
              v19 = (char *)v52;
            }
          }
          v20 = &v19[24 * v53];
          v21 = *(_OWORD *)v18;
          *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v20 = v21;
          ++v53;
          if (v51[0])
          {
            v22 = &v48;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, a2);
            v23 = (char *)v52;
            if (v53 >= v54)
            {
              v41 = v53 + 1;
              if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
              {
                v45 = (char *)&v48 - (_BYTE *)v52;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                v23 = (char *)v52;
                v22 = (int *)((char *)v52 + v45);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                v22 = &v48;
                v23 = (char *)v52;
              }
            }
            v24 = &v23[24 * v53];
            v25 = *(_OWORD *)v22;
            *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
            *(_OWORD *)v24 = v25;
            ++v53;
          }
        }
      }
    }
    v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (v60)
    {
      v27 = (_QWORD **)__p;
      if (__p)
      {
        v28 = v59;
        v29 = __p;
        if (v59 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v59 = v27;
        operator delete(v29);
      }
      v30 = v56;
      if (v56)
      {
        v31 = v57;
        v32 = v56;
        if (v57 != v56)
        {
          do
          {
            v34 = (void *)*--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              operator delete[](v33);
          }
          while (v31 != v30);
          v32 = v56;
        }
        v57 = v30;
        operator delete(v32);
      }
      if (v52 != v55)
        free(v52);
    }
  }
  return v26;
}

BOOL mlir::tensor::CollapseShapeOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  mlir::NoneType **v5;
  mlir::MLIRContext *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[4];
  _QWORD __src[4];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  v5 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v7 = mlir::NoneType::get(*v5, v6);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v14, v7))
    return 0;
  if (v14)
  {
    v8 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties>(a2);
    *v8 = v14;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v9 = a2[1];
  __src[0] = a1;
  __src[1] = &v12;
  __src[2] = a2;
  v10 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v9 + 96));
  if (v10)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v10, (const void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::CollapseShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, __src))
    return 0;
  v16 = __src[0];
  v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "into", 4, __src))return 0;
  v12 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v12))
    return 0;
  __src[0] = v12;
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, (uint64_t)(a2 + 2)) != 0;
}

uint64_t mlir::tensor::detail::DimOpGenericAdaptorBase::DimOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.dim", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::DimOp::getSourceMutable(mlir::tensor::DimOp *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 72);
}

BOOL mlir::tensor::DimOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  mlir::MemoryMapperInterface *v9;
  unint64_t *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  char *v21;
  char *v22;
  __int128 v23;
  unint64_t *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t NextResultAtOffset;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  const void **v50;
  uint64_t v51;
  __int16 v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  _QWORD v57[3];
  void *v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE v61[96];
  void *v62;
  _QWORD *v63;
  void *__p;
  _QWORD **v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)v3;
  v5 = *(void **)(*(_QWORD *)v3 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v4 + 8);
    v57[0] = v3;
    v9 = (mlir::MemoryMapperInterface *)v57;
    goto LABEL_30;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v50 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v4 + 8);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
    {
      v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8);
      v54 = v3;
      v55 = (const char *)v6;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
      if (v7 >= 1)
      {
        v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8);
        v53 = v3;
        v9 = (mlir::MemoryMapperInterface *)&v53;
LABEL_30:
        *((_QWORD *)v9 + 1) = v8;
        mlir::MemoryMapperInterface::getOperandRange(v9);
        goto LABEL_36;
      }
    }
  }
  v52 = 261;
  v50 = (const void **)"operand";
  v51 = 7;
  mlir::Operation::emitOpError(v2, &v50, (uint64_t)v57);
  if (v57[0])
  {
    LODWORD(v54) = 3;
    v55 = " #";
    v56 = 2;
    v10 = &v54;
    v11 = (char *)v58;
    if (v59 >= v60)
    {
      v40 = v59 + 1;
      if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
      {
        v46 = (char *)&v54 - (_BYTE *)v58;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v40, 24);
        v11 = (char *)v58;
        v10 = (unint64_t *)((char *)v58 + v46);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v40, 24);
        v10 = &v54;
        v11 = (char *)v58;
      }
    }
    v12 = &v11[24 * v59];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = v10[2];
    *(_OWORD *)v12 = v13;
    v14 = ++v59;
    if (v57[0])
    {
      LODWORD(v54) = 5;
      v55 = 0;
      v15 = &v54;
      v16 = (char *)v58;
      if (v14 >= v60)
      {
        v41 = v14 + 1;
        v42 = (char *)v58 + 24 * v14 > (char *)&v54;
        if (v58 <= &v54 && v42)
        {
          v47 = (char *)&v54 - (_BYTE *)v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
          v16 = (char *)v58;
          v15 = (unint64_t *)((char *)v58 + v47);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
          v15 = &v54;
          v16 = (char *)v58;
        }
      }
      v17 = &v16[24 * v59];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = v15[2];
      *(_OWORD *)v17 = v18;
      v19 = ++v59;
      if (v57[0])
      {
        LODWORD(v54) = 3;
        v55 = " must be non-0-ranked or unranked tensor, but got ";
        v56 = 50;
        v20 = &v54;
        v21 = (char *)v58;
        if (v19 >= v60)
        {
          v43 = v19 + 1;
          v44 = (char *)v58 + 24 * v19 > (char *)&v54;
          if (v58 <= &v54 && v44)
          {
            v48 = (char *)&v54 - (_BYTE *)v58;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v43, 24);
            v21 = (char *)v58;
            v20 = (unint64_t *)((char *)v58 + v48);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v43, 24);
            v20 = &v54;
            v21 = (char *)v58;
          }
        }
        v22 = &v21[24 * v59];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v59;
        if (v57[0])
        {
          v24 = &v54;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v54, v3);
          v25 = (char *)v58;
          if (v59 >= v60)
          {
            v45 = v59 + 1;
            if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
            {
              v49 = (char *)&v54 - (_BYTE *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v45, 24);
              v25 = (char *)v58;
              v24 = (unint64_t *)((char *)v58 + v49);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v45, 24);
              v24 = &v54;
              v25 = (char *)v58;
            }
          }
          v26 = &v25[24 * v59];
          v27 = *(_OWORD *)v24;
          *((_QWORD *)v26 + 2) = v24[2];
          *(_OWORD *)v26 = v27;
          ++v59;
        }
      }
    }
  }
  v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
  if (v57[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
  if (v66)
  {
    v29 = (_QWORD **)__p;
    if (__p)
    {
      v30 = v65;
      v31 = __p;
      if (v65 != __p)
      {
        do
          v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        v31 = __p;
      }
      v65 = v29;
      operator delete(v31);
    }
    v32 = v62;
    if (v62)
    {
      v33 = v63;
      v34 = v62;
      if (v63 != v62)
      {
        do
        {
          v36 = (void *)*--v33;
          v35 = v36;
          *v33 = 0;
          if (v36)
            operator delete[](v35);
        }
        while (v33 != v32);
        v34 = v62;
      }
      v63 = v32;
      operator delete(v34);
    }
    if (v58 != v61)
      free(v58);
  }
  if (!v28)
    return 0;
LABEL_36:
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))return 0;
  if (*((_DWORD *)*this + 9))
    v37 = (uint64_t)(*this - 2);
  else
    v37 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::tensor::DimOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::IndexType **v5;
  mlir::MLIRContext *v6;
  uint64_t v7;
  uint64_t __src;
  _QWORD v10[2];
  uint64_t v11[2];
  uint64_t v12;
  _QWORD v13[4];
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  memset(v14, 0, 24);
  v11[0] = (uint64_t)v14;
  v11[1] = 1;
  memset(v13, 0, 24);
  v12 = 0;
  v10[0] = &v12;
  v10[1] = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v14, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (__src = 0, mlir::AsmParser::parseType<mlir::TensorType>(a1, &__src))
    && (v12 = __src,
        v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1),
        __src = mlir::Builder::getIndexType(v5, v6),
        mlir::OperationState::addTypes(a2, &__src, 1),
        v7 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v11, v10, v4, v7)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v13, __src, v7) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::tensor::EmptyOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;

  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && (v3 = *((unsigned int *)v2 + 17), (_DWORD)v3))
  {
    v4 = 0;
    v5 = v2[9] + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v4))
    {
      ++v4;
      v5 += 32;
      if (v3 == v4)
      {
        v2 = *this;
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    v6 = *((_DWORD *)v2 + 9);
    v7 = v2 - 2;
    if (v6)
      v8 = (uint64_t)v7;
    else
      v8 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    return mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
}

uint64_t mlir::tensor::EmptyOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t __src;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v14, 0, 1, 0xFFFFFFFFLL))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
        {
          if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
          {
            v12 = 0;
            if (mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v12))
            {
              __src = v12;
              v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
              IndexType = mlir::Builder::getIndexType(v4, v5);
              v7 = 1;
              mlir::OperationState::addTypes(a2, &__src, 1);
              if (!(_DWORD)v15)
                goto LABEL_13;
              v8 = a2 + 16;
              v9 = (char *)v14;
              v10 = 32 * v15;
              while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, v8))
              {
                v9 += 32;
                v7 = 1;
                v10 -= 32;
                if (!v10)
                  goto LABEL_13;
              }
            }
          }
        }
      }
    }
  }
  v7 = 0;
LABEL_13:
  if (v14 != v16)
    free(v14);
  return v7;
}

void mlir::tensor::EmptyOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  mlir::Operation *v12;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
    v6 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_3;
  }
  else
  {
    *v5 = 40;
    ++*((_QWORD *)v4 + 4);
    v6 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_3:
      v7 = *((unsigned int *)v6 + 17);
      v8 = *((_QWORD *)v6 + 9);
      goto LABEL_4;
    }
  }
  v8 = 0;
  v7 = 0;
LABEL_4:
  v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = ", ";
  v26 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, (uint64_t)a2, v9, (uint64_t)&v25);
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, ")", 1uLL);
  }
  else
  {
    *v11 = 41;
    ++*((_QWORD *)v10 + 4);
  }
  v25 = v27;
  v26 = 0x200000000;
  v12 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v12);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v15, v25, v26);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, ":", 1uLL);
  }
  else
  {
    *v19 = 58;
    ++*((_QWORD *)v18 + 4);
  }
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v22 = (uint64_t)*this - 16;
  else
    v22 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v25 != v27)
    free(v25);
}

uint64_t mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::ExpandShapeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.expand_shape", 19, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::tensor::ExpandShapeOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties]";
        v15 = 115;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[35];
    return a1[32];
  }
  return result;
}

BOOL mlir::tensor::ExpandShapeOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  mlir::NoneType **v5;
  mlir::MLIRContext *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[4];
  _QWORD __src[4];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  v5 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v7 = mlir::NoneType::get(*v5, v6);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v14, v7))
    return 0;
  if (v14)
  {
    v8 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties>(a2);
    *v8 = v14;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v9 = a2[1];
  __src[0] = a1;
  __src[1] = &v12;
  __src[2] = a2;
  v10 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v9 + 96));
  if (v10)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v10, (const void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::ExpandShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, __src))
    return 0;
  v16 = __src[0];
  v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "into", 4, __src))return 0;
  v12 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v12))
    return 0;
  __src[0] = v12;
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, (uint64_t)(a2 + 2)) != 0;
}

uint64_t mlir::tensor::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.extract", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::tensor::ExtractOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;

  v11 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v11, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v10) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::tensor::ExtractOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::MLIRContext *Context;
  unsigned int v9;
  uint64_t ElementType;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  void *__src;
  uint64_t v20;
  _BYTE v21[16];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, a4, a5);
  __src = v21;
  v20 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v18, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v17, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v22 = v18;
  if ((_DWORD)v20 != 1)
  {
    if (!(_DWORD)v20)
    {
      if (HIDWORD(v20))
      {
        v9 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v9, 8 - 8 * v9);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v21, 1uLL, 8);
      v9 = v20;
      if ((_DWORD)v20 != 1)
        goto LABEL_6;
    }
LABEL_7:
    LODWORD(v20) = 1;
  }
  v16 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v22, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v16);
  *(_QWORD *)__src = ElementType;
  v11 = __src;
  v12 = v20;
  v13 = *(unsigned int *)(a2 + 72);
  v14 = v13 + v20;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  if (__src != v21)
    free(__src);
}

uint64_t mlir::tensor::ExtractOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  unint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v15[0] = a4;
  v15[1] = a5;
  v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v12 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  v14 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(_QWORD **)a11 = mlir::TensorType::getElementType((mlir::TensorType *)&v14);
  return 1;
}

void mlir::tensor::ExtractOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v11;
  mlir::MLIRContext *Context;
  unsigned int v13;
  uint64_t ElementType;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *__src;
  uint64_t v22;
  _BYTE v23[16];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v11 = *(unsigned int *)(a2 + 120);
  if (a6 + v11 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v11, 16);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v11), a5, 16 * a6);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v11 + a6;
  __src = v23;
  v22 = 0x200000000;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v20, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v24[0] = a3;
  v24[1] = a4;
  if ((_DWORD)v22 != 1)
  {
    if (!(_DWORD)v22)
    {
      if (HIDWORD(v22))
      {
        v13 = 0;
LABEL_10:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_11;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v23, 1uLL, 8);
      v13 = v22;
      if ((_DWORD)v22 != 1)
        goto LABEL_10;
    }
LABEL_11:
    LODWORD(v22) = 1;
  }
  v19 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v19);
  *(_QWORD *)__src = ElementType;
  v15 = __src;
  v16 = v22;
  v17 = *(unsigned int *)(a2 + 72);
  v18 = v17 + v22;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v16)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v23)
    free(__src);
}

uint64_t mlir::tensor::ExtractOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ElementType;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  const void **v23;
  __int16 v24;
  _QWORD v25[3];
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v4 = -1;
    v5 = 32;
LABEL_5:
    v6 = 0;
    v7 = v5 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v6 + 1))
    {
      ++v6;
      v7 += 32;
      if (v4 == v6)
      {
        v2 = *this;
        goto LABEL_9;
      }
    }
    return 0;
  }
  v3 = *((unsigned int *)v2 + 17);
  v4 = v3 - 1;
  if (v3 != 1)
  {
    v5 = v2[9] + 32;
    goto LABEL_5;
  }
LABEL_9:
  v8 = *((_DWORD *)v2 + 9);
  v9 = v2 - 2;
  if (v8)
    v10 = (uint64_t)v9;
  else
    v10 = 0;
  mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  v25[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)v25);
  if (*((_DWORD *)*this + 9))
    v12 = (uint64_t)(*this - 2);
  else
    v12 = 0;
  if (ElementType == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v23 = (const void **)"failed to verify that result type matches element type of tensor";
  v24 = 259;
  mlir::OpState::emitOpError(this, &v23, (uint64_t)v25);
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
  if (v25[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
  if (v32)
  {
    v14 = (_QWORD **)__p;
    if (__p)
    {
      v15 = v31;
      v16 = __p;
      if (v31 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v31 = v14;
      operator delete(v16);
    }
    v17 = v28;
    if (v28)
    {
      v18 = v29;
      v19 = v28;
      if (v29 != v28)
      {
        do
        {
          v21 = (void *)*--v18;
          v20 = v21;
          *v18 = 0;
          if (v21)
            operator delete[](v20);
        }
        while (v18 != v17);
        v19 = v28;
      }
      v29 = v17;
      operator delete(v19);
    }
    if (v26 != &v27)
      free(v26);
  }
  return v13;
}

uint64_t mlir::tensor::ExtractOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  mlir::IndexType **v12;
  mlir::MLIRContext *v13;
  uint64_t IndexType;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23[2];
  _QWORD __src[24];
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE v28[128];
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  memset(v29, 0, 24);
  v23[0] = (uint64_t)v29;
  v23[1] = 1;
  v25 = 0;
  v26 = v28;
  v27 = 0x400000000;
  v22[0] = &v25;
  v22[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v29, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, _BYTE **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v26, 0, 1, 0xFFFFFFFFLL))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
            {
              __src[0] = 0;
              if (mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, __src))
              {
                v5 = __src[0];
                v25 = __src[0];
                v21 = __src[0];
                if (*(_UNKNOWN **)(*(_QWORD *)__src[0] + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
                {
                  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
                  v20 = 257;
                  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(__src, a1, v6, v19);
                  v7 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'tensor' must be ranked tensor of any type values, but got ");
                  v8 = mlir::InFlightDiagnostic::append<mlir::Type &>(v7, &v21);
                  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v8);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
                  v10 = v26;
                  if (v26 == v28)
                    return v9;
                  goto LABEL_19;
                }
                v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)__src[0] + 8);
                __src[0] = v5;
                __src[1] = v11;
                mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__src);
                v12 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                IndexType = mlir::Builder::getIndexType(v12, v13);
                v19[0] = v25;
                __src[0] = mlir::TensorType::getElementType((mlir::TensorType *)v19);
                mlir::OperationState::addTypes(a2, __src, 1);
                v15 = a2 + 16;
                if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v23, v22, v4, v15))
                {
                  if (!(_DWORD)v27)
                  {
                    v9 = 1;
                    v10 = v26;
                    if (v26 == v28)
                      return v9;
                    goto LABEL_19;
                  }
                  v16 = v26;
                  v17 = 32 * v27;
                  v9 = 1;
                  while ((*(unsigned __int8 (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v16, IndexType, v15))
                  {
                    v16 += 32;
                    v17 -= 32;
                    if (!v17)
                      goto LABEL_18;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
LABEL_18:
  v10 = v26;
  if (v26 != v28)
LABEL_19:
    free(v10);
  return v9;
}

void mlir::tensor::ExtractOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  mlir::Operation *v16;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  unint64_t AttrDictionary;
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
    v8 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_6;
  }
  else
  {
    *v7 = 91;
    ++*((_QWORD *)v6 + 4);
    v8 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_6:
      v9 = *((unsigned int *)v8 + 17);
      v10 = *((_QWORD *)v8 + 9);
      v11 = v9 - 1;
      goto LABEL_7;
    }
  }
  v10 = 0;
  v11 = -1;
LABEL_7:
  v12 = v10 + 32;
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = ", ";
  v28 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)&v27);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "]", 1uLL);
  }
  else
  {
    *v15 = 93;
    ++*((_QWORD *)v14 + 4);
  }
  v27 = v29;
  v28 = 0x200000000;
  v16 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v16);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v19, v27, v28);
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if (*((_BYTE **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ":", 1uLL);
  }
  else
  {
    *v23 = 58;
    ++*((_QWORD *)v22 + 4);
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v27 != v29)
    free(v27);
}

uint64_t mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::ExtractSliceOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t Context;
  unint64_t v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v5;
  v9 = *(_OWORD *)(v5 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v5 + 32);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.extract_slice", 20, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::ExtractSliceOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 0xCuLL:
      if (memcmp(__s1, "static_sizes", __n))
        goto LABEL_11;
      return a2[1];
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        result = *a2;
      }
      else if (!memcmp(__s1, "static_strides", __n))
      {
        result = a2[2];
      }
      else
      {
LABEL_11:
        result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_11;
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n))
        goto LABEL_11;
LABEL_13:
      result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::tensor::ExtractSliceOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 0xCuLL:
      result = memcmp(__s1, "static_sizes", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v10 = a4;
          else
            v10 = 0;
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v11 = a4;
          else
            v11 = 0;
          *v5 = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      else
      {
        result = memcmp(__s1, "static_strides", a3);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if ((_DWORD)result)
              v7 = a4;
            else
              v7 = 0;
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!(_DWORD)result)
        goto LABEL_17;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!(_DWORD)result)
      {
LABEL_17:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v8 = (_DWORD)result ? a4 : 0;
          v12 = v8;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 4)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9)
                result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::tensor::ExtractSliceOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 3, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_QWORD *)v3 + 4) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_1EDC07000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties]";
        v15 = 116;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v4[37];
    return a1[32];
  }
  return result;
}

void mlir::tensor::ExtractSliceOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _DWORD *v22;
  uint64_t DenseI64ArrayAttr;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v28 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9, a10);
  v22 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  v22[6] = 1;
  v22[7] = a6;
  v22[8] = a8;
  v22[9] = a10;
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, a11, a12);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2) = DenseI64ArrayAttr;
  v24 = mlir::Builder::getDenseI64ArrayAttr(a1, a13, a14);
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 8) = v24;
  v25 = mlir::Builder::getDenseI64ArrayAttr(a1, a15, a16);
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 16) = v25;
  v26 = *(unsigned int *)(a2 + 72);
  if (v26 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v26) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::tensor::ExtractSliceOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ODSOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t NextResultAtOffset;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  const void **v49[4];
  __int16 v50;
  _QWORD v51[3];
  void *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD **v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v49[0] = (const void **)"requires attribute 'static_offsets'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v57;
      v30 = __p;
      if (v57 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v57 = v28;
      operator delete(v30);
    }
    v31 = v54;
    if (v54)
    {
      v32 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v35 = (void *)*--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v32 != v31);
LABEL_76:
      v33 = v54;
LABEL_77:
      v55 = v31;
      operator delete(v33);
    }
LABEL_78:
    if (v52 != &v53)
      free(v52);
    return v27;
  }
  v5 = *(_QWORD **)(v3 + 8);
  if (!v5)
  {
    v49[0] = (const void **)"requires attribute 'static_sizes'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v36 = (_QWORD **)__p;
    if (__p)
    {
      v37 = v57;
      v38 = __p;
      if (v57 != __p)
      {
        do
          v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        v38 = __p;
      }
      v57 = v36;
      operator delete(v38);
    }
    v31 = v54;
    if (v54)
    {
      v39 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v41 = (void *)*--v39;
        v40 = v41;
        *v39 = 0;
        if (v41)
          operator delete[](v40);
      }
      while (v39 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  v6 = *(_QWORD **)(v3 + 16);
  if (!v6)
  {
    v49[0] = (const void **)"requires attribute 'static_strides'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v42 = (_QWORD **)__p;
    if (__p)
    {
      v43 = v57;
      v44 = __p;
      if (v57 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v57 = v42;
      operator delete(v44);
    }
    v31 = v54;
    if (v54)
    {
      v45 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v47 = (void *)*--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          operator delete[](v46);
      }
      while (v45 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  v51[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"static_offsets", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v51[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"static_sizes", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v51[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"static_strides", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v7 = *((unsigned int *)*this + 11);
  v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v8 = 0;
  v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    v10 = (*this)[9];
    if ((_DWORD)v9)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    if ((_DWORD)v9)
    {
LABEL_14:
      v11 = 0;
      v12 = v10 + 24;
      while (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11)
          goto LABEL_17;
      }
      return 0;
    }
  }
LABEL_17:
  ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
  if (v14)
  {
    v15 = v14;
    v16 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  v17 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
  if (v18)
  {
    v19 = v18;
    v20 = v17 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v20 += 32;
      if (!--v19)
        goto LABEL_25;
    }
    return 0;
  }
LABEL_25:
  v21 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 3u);
  if (v22)
  {
    v23 = v22;
    v24 = v21 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v24 += 32;
      if (!--v23)
        goto LABEL_29;
    }
    return 0;
  }
LABEL_29:
  if (*((_DWORD *)*this + 9))
    v25 = (uint64_t)(*this - 2);
  else
    v25 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0);
  return mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::tensor::ExtractSliceOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  mlir::IndexType **v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  void *v36;
  uint64_t v37;
  _BYTE v38[128];
  void *v39;
  uint64_t v40;
  _BYTE v41[128];
  _QWORD v42[4];
  uint64_t __src[4];
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  memset(v42, 0, 24);
  v31[0] = (uint64_t)v42;
  v31[1] = 1;
  v39 = v41;
  v40 = 0x400000000;
  v29 = 0;
  v30 = 0;
  v36 = v38;
  v37 = 0x400000000;
  v32 = 0;
  v33 = v35;
  v34 = 0x400000000;
  v27[1] = 1;
  v28 = 0;
  v27[0] = &v32;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v42, 1))
    goto LABEL_25;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v39, &v30, __src, 0, 2))
    goto LABEL_25;
  v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(a2);
  *v5 = v30;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v36, &v29, __src, 0, 2))
    goto LABEL_25;
  v6 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v6 + 8) = v29;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v33, &v28, __src, 0, 2))
    goto LABEL_25;
  v7 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v7 + 16) = v28;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_25;
  v8 = a2[1];
  __src[0] = a1;
  __src[1] = (uint64_t)&v26;
  __src[2] = (uint64_t)a2;
  if (!mlir::memref::ReinterpretCastOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::ExtractSliceOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_25;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_25;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, __src))
    goto LABEL_25;
  v32 = __src[0];
  v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))goto LABEL_25;
  v26 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v26))
    goto LABEL_25;
  __src[0] = v26;
  v9 = v40;
  v10 = v37;
  v11 = v34;
  v12 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(a2);
  v12[6] = 1;
  v12[7] = v9;
  v12[8] = v10;
  v12[9] = v11;
  v13 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v13, v14);
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  v16 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v31, v27, v4, v16))goto LABEL_25;
  if ((_DWORD)v40)
  {
    v17 = (char *)v39;
    v18 = 32 * v40;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, IndexType, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18)
        goto LABEL_16;
    }
LABEL_25:
    v23 = 0;
LABEL_26:
    v24 = v33;
    if (v33 != v35)
      goto LABEL_27;
    goto LABEL_28;
  }
LABEL_16:
  if ((_DWORD)v37)
  {
    v19 = (char *)v36;
    v20 = 32 * v37;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v19, IndexType, v16))
    {
      v19 += 32;
      v20 -= 32;
      if (!v20)
        goto LABEL_20;
    }
    goto LABEL_25;
  }
LABEL_20:
  if ((_DWORD)v34)
  {
    v21 = (char *)v33;
    v22 = 32 * v34;
    v23 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v21, IndexType, v16))
    {
      v21 += 32;
      v22 -= 32;
      if (!v22)
        goto LABEL_26;
    }
    goto LABEL_25;
  }
  v23 = 1;
  v24 = v33;
  if (v33 != v35)
LABEL_27:
    free(v24);
LABEL_28:
  if (v36 != v38)
    free(v36);
  if (v39 != v41)
    free(v39);
  return v23;
}

uint64_t mlir::tensor::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.from_elements", 20, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::FromElementsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  unint64_t NumElements;
  uint64_t v8;
  void *RHS;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  const void **v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41[2];
  unint64_t v42;
  unint64_t v43;
  void *v44;
  unsigned int v45;
  int v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps7(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  v43 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
  NumElements = mlir::ShapedType::getNumElements(Value, v6);
  if (*((_DWORD *)*this + 9))
    v8 = (uint64_t)(*this - 2);
  else
    v8 = 0;
  v42 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v42);
  v10 = (unint64_t)RHS;
  v44 = &v47;
  v46 = 2;
  if (NumElements < 3)
  {
    if (NumElements)
    {
      v47 = RHS;
      if (NumElements != 1)
        v48 = RHS;
    }
  }
  else
  {
    v45 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, &v47, NumElements, 8);
    if (NumElements == 3)
    {
      v11 = 3;
      v12 = (unint64_t *)v44;
    }
    else
    {
      v12 = (unint64_t *)((char *)v44 + 8 * (NumElements & 0xFFFFFFFFFFFFFFFCLL));
      v11 = NumElements & 3;
      v14 = vdupq_n_s64(v10);
      v15 = (int64x2_t *)((char *)v44 + 16);
      v16 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15[-1] = v14;
        *v15 = v14;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (NumElements == (NumElements & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_22;
    }
    do
    {
      *v12++ = v10;
      --v11;
    }
    while (v11);
  }
LABEL_22:
  v45 = NumElements;
  v17 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v18 = *((unsigned int *)v17 + 17);
    v19 = v17[9];
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v41[0] = v19;
  v41[1] = v18;
  mlir::OperandRange::getTypes(v41, (uint64_t *)&v37);
  if (v39 - v38 != v45)
  {
    v26 = 0;
    goto LABEL_34;
  }
  if (v45)
  {
    v20 = 8 * v45 - 8;
    v21 = &v37[4 * v38 + 3];
    v22 = (uint64_t *)v44;
    do
    {
      v23 = *v21;
      v21 += 4;
      v24 = v23[1];
      v25 = *v22++;
      v26 = v25 == (v24 & 0xFFFFFFFFFFFFFFF8);
      v27 = v25 != (v24 & 0xFFFFFFFFFFFFFFF8) || v20 == 0;
      v20 -= 8;
    }
    while (!v27);
LABEL_34:
    if (v44 == &v47)
      goto LABEL_36;
    goto LABEL_35;
  }
  v26 = 1;
  if (v44 != &v47)
LABEL_35:
    free(v44);
LABEL_36:
  if (v26)
    return 1;
  v37 = (const void **)"failed to verify that operand types match result element type";
  v40 = 259;
  mlir::OpState::emitOpError(this, &v37, (uint64_t)&v44);
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v53;
      v30 = __p;
      if (v53 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v53 = v28;
      operator delete(v30);
    }
    v31 = v50;
    if (v50)
    {
      v32 = v51;
      v33 = v50;
      if (v51 != v50)
      {
        do
        {
          v35 = (void *)*--v32;
          v34 = v35;
          *v32 = 0;
          if (v35)
            operator delete[](v34);
        }
        while (v32 != v31);
        v33 = v50;
      }
      v51 = v31;
      operator delete(v33);
    }
    if (v48 != &v49)
      free(v48);
  }
  return v13;
}

uint64_t mlir::tensor::__mlir_ods_local_type_constraint_TensorOps7(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  const void *v10;
  _QWORD *ArgAttrsAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  const void **v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v59[0] = a2;
    v59[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v10 + 8);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v59))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
      if (!v12)
      {
LABEL_7:
        v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
        v53 = a2;
        v54 = v14;
        mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53);
        return 1;
      }
      v13 = 8 * v12;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v13 -= 8;
        if (!v13)
          goto LABEL_7;
      }
    }
  }
  v55 = 261;
  v53 = a3;
  v54 = a4;
  mlir::Operation::emitOpError(a1, &v53, (uint64_t)v59);
  if (v59[0])
  {
    v56 = 3;
    v57 = " #";
    v58 = 2;
    v16 = &v56;
    v17 = (char *)v60;
    if (v61 >= v62)
    {
      v43 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v49 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
        v17 = (char *)v60;
        v16 = (int *)((char *)v60 + v49);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
        v16 = &v56;
        v17 = (char *)v60;
      }
    }
    v18 = &v17[24 * v61];
    v19 = *(_OWORD *)v16;
    *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v18 = v19;
    v20 = ++v61;
    if (v59[0])
    {
      v56 = 5;
      v57 = (const char *)a5;
      v21 = &v56;
      v22 = (char *)v60;
      if (v20 >= v62)
      {
        v44 = v20 + 1;
        v45 = (char *)v60 + 24 * v20 > (char *)&v56;
        if (v60 <= &v56 && v45)
        {
          v50 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v44, 24);
          v22 = (char *)v60;
          v21 = (int *)((char *)v60 + v50);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v44, 24);
          v21 = &v56;
          v22 = (char *)v60;
        }
      }
      v23 = &v22[24 * v61];
      v24 = *(_OWORD *)v21;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v23 = v24;
      v25 = ++v61;
      if (v59[0])
      {
        v56 = 3;
        v57 = " must be statically shaped tensor of any type values, but got ";
        v58 = 62;
        v26 = &v56;
        v27 = (char *)v60;
        if (v25 >= v62)
        {
          v46 = v25 + 1;
          v47 = (char *)v60 + 24 * v25 > (char *)&v56;
          if (v60 <= &v56 && v47)
          {
            v51 = (char *)&v56 - (_BYTE *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v46, 24);
            v27 = (char *)v60;
            v26 = (int *)((char *)v60 + v51);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v46, 24);
            v26 = &v56;
            v27 = (char *)v60;
          }
        }
        v28 = &v27[24 * v61];
        v29 = *(_OWORD *)v26;
        *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
        *(_OWORD *)v28 = v29;
        ++v61;
        if (v59[0])
        {
          v30 = &v56;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, (uint64_t)a2);
          v31 = (char *)v60;
          if (v61 >= v62)
          {
            v48 = v61 + 1;
            if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
            {
              v52 = (char *)&v56 - (_BYTE *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
              v31 = (char *)v60;
              v30 = (int *)((char *)v60 + v52);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
              v30 = &v56;
              v31 = (char *)v60;
            }
          }
          v32 = &v31[24 * v61];
          v33 = *(_OWORD *)v30;
          *((_QWORD *)v32 + 2) = *((_QWORD *)v30 + 2);
          *(_OWORD *)v32 = v33;
          ++v61;
        }
      }
    }
  }
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  if (v68)
  {
    v34 = (_QWORD **)__p;
    if (__p)
    {
      v35 = v67;
      v36 = __p;
      if (v67 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v67 = v34;
      operator delete(v36);
    }
    v37 = v64;
    if (v64)
    {
      v38 = v65;
      v39 = v64;
      if (v65 != v64)
      {
        do
        {
          v41 = (void *)*--v38;
          v40 = v41;
          *v38 = 0;
          if (v41)
            operator delete[](v40);
        }
        while (v38 != v37);
        v39 = v64;
      }
      v65 = v37;
      operator delete(v39);
    }
    if (v60 != v63)
      free(v60);
  }
  return v15;
}

uint64_t mlir::tensor::FromElementsOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *Value;
  uint64_t v13;
  unint64_t NumElements;
  void *RHS;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  int64x2_t v39;
  int64x2_t *v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  _QWORD v47[4];
  __int16 v48;
  _QWORD v49[3];
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  _BYTE v56[96];
  void *v57;
  _QWORD *v58;
  void *__p;
  _QWORD **v60;
  char v61;
  uint64_t v62[2];
  _QWORD v63[17];

  v63[16] = *MEMORY[0x1E0C80C00];
  v62[0] = (uint64_t)v63;
  v62[1] = 0x400000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, v62, 0, 1, 0xFFFFFFFFLL)|| ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1), !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| (v50 = 0, !mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v50)))
  {
    v19 = 0;
    v20 = (void *)v62[0];
    if ((_QWORD *)v62[0] == v63)
      return v19;
    goto LABEL_42;
  }
  v5 = v50;
  if (*(_UNKNOWN **)(*(_QWORD *)v50 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || (v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v50 + 8),
        v50 = v5,
        v51 = v6,
        !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50)))
  {
LABEL_18:
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v48 = 257;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(&v50, a1, v21, v47);
    if (v50)
    {
      LODWORD(v49[0]) = 3;
      v49[1] = "'result' must be statically shaped tensor of any type values, but got ";
      v49[2] = 70;
      v22 = (char *)v49;
      v23 = (char *)v53;
      if (v54 >= v55)
      {
        v43 = v54 + 1;
        if (v53 <= v49 && (char *)v53 + 24 * v54 > (char *)v49)
        {
          v45 = (char *)v49 - (_BYTE *)v53;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v43, 24);
          v23 = (char *)v53;
          v22 = (char *)v53 + v45;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v43, 24);
          v22 = (char *)v49;
          v23 = (char *)v53;
        }
      }
      v24 = &v23[24 * v54];
      v25 = *(_OWORD *)v22;
      *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
      *(_OWORD *)v24 = v25;
      ++v54;
      if (v50)
      {
        v26 = (char *)v49;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v49, (uint64_t)v5);
        v27 = (char *)v53;
        if (v54 >= v55)
        {
          v44 = v54 + 1;
          if (v53 <= v49 && (char *)v53 + 24 * v54 > (char *)v49)
          {
            v46 = (char *)v49 - (_BYTE *)v53;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v44, 24);
            v27 = (char *)v53;
            v26 = (char *)v53 + v46;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v44, 24);
            v26 = (char *)v49;
            v27 = (char *)v53;
          }
        }
        v28 = &v27[24 * v54];
        v29 = *(_OWORD *)v26;
        *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
        *(_OWORD *)v28 = v29;
        ++v54;
      }
    }
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v50);
    if (v50)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v50);
    if (v61)
    {
      v30 = (_QWORD **)__p;
      if (__p)
      {
        v31 = v60;
        v32 = __p;
        if (v60 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v60 = v30;
        operator delete(v32);
      }
      v33 = v57;
      if (v57)
      {
        v34 = v58;
        v35 = v57;
        if (v58 != v57)
        {
          do
          {
            v37 = (void *)*--v34;
            v36 = v37;
            *v34 = 0;
            if (v37)
              operator delete[](v36);
          }
          while (v34 != v33);
          v35 = v57;
        }
        v58 = v33;
        operator delete(v35);
      }
      if (v53 != v56)
        free(v53);
    }
    v20 = (void *)v62[0];
    if ((_QWORD *)v62[0] != v63)
      goto LABEL_42;
    return v19;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
  if (v8)
  {
    v9 = 8 * v8;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v9 -= 8;
      if (!v9)
        goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_11:
  v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  v47[0] = v5;
  v47[1] = v10;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47);
  v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v11) = v5;
  ++*(_DWORD *)(a2 + 72);
  v47[0] = v5;
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v47);
  NumElements = mlir::ShapedType::getNumElements(Value, v13);
  v49[0] = v5;
  RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v49);
  v16 = (unint64_t)RHS;
  v50 = &v52;
  HIDWORD(v51) = 2;
  if (NumElements < 3)
  {
    if (NumElements)
    {
      v52 = RHS;
      if (NumElements != 1)
        v53 = RHS;
    }
  }
  else
  {
    LODWORD(v51) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, &v52, NumElements, 8);
    if (NumElements == 3)
    {
      v17 = 3;
      v18 = (unint64_t *)v50;
      do
      {
LABEL_50:
        *v18++ = v16;
        --v17;
      }
      while (v17);
      goto LABEL_51;
    }
    v18 = (unint64_t *)((char *)v50 + 8 * (NumElements & 0xFFFFFFFFFFFFFFFCLL));
    v17 = NumElements & 3;
    v39 = vdupq_n_s64(v16);
    v40 = (int64x2_t *)((char *)v50 + 16);
    v41 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v40[-1] = v39;
      *v40 = v39;
      v40 += 2;
      v41 -= 4;
    }
    while (v41);
    if (NumElements != (NumElements & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_50;
  }
LABEL_51:
  LODWORD(v51) = NumElements;
  v42 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, v62, (uint64_t)&v50, v4, a2 + 16);
  if (v50 != &v52)
    free(v50);
  v19 = v42 != 0;
  v20 = (void *)v62[0];
  if ((_QWORD *)v62[0] != v63)
LABEL_42:
    free(v20);
  return v19;
}

void mlir::tensor::FromElementsOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v7 = *((unsigned int *)v6 + 17);
    v8 = *((_QWORD *)v6 + 9);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = ", ";
  v24 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, (uint64_t)a2, v9, (uint64_t)&v23);
  v23 = v25;
  v24 = 0x200000000;
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v13, v23, v24);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v20 = (uint64_t)*this - 16;
  else
    v20 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v23 != v25)
    free(v23);
}

uint64_t mlir::tensor::detail::GatherOpGenericAdaptorBase::GatherOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t Context;
  unint64_t v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.gather", 13, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::GatherOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  int v76;
  const char *v77;
  uint64_t v78;
  _QWORD v79[3];
  void *v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE v83[96];
  void *v84;
  _QWORD *v85;
  void *__p;
  _QWORD **v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v77 = "expected DictionaryAttr to set properties";
      v78 = 41;
      v28 = &v76;
      v29 = (char *)v80;
      if (v81 >= v82)
      {
        v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v69 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          v29 = (char *)v80;
          v28 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          v28 = &v76;
          v29 = (char *)v80;
        }
      }
      v30 = &v29[24 * v81];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88)
      return 0;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v87;
      v34 = __p;
      if (v87 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v87 = v32;
      operator delete(v34);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_79;
    v35 = v85;
    v25 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v37 = (void *)*--v35;
      v36 = v37;
      *v35 = 0;
      if (v37)
        operator delete[](v36);
    }
    while (v35 != v23);
    goto LABEL_77;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v75, "gather_dims", 0xBuLL);
  if (!v8)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v77 = "expected key entry for gather_dims in DictionaryAttr to set Properties.";
      v78 = 71;
      v38 = &v76;
      v39 = (char *)v80;
      if (v81 >= v82)
      {
        v64 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v70 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          v39 = (char *)v80;
          v38 = (int *)((char *)v80 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          v38 = &v76;
          v39 = (char *)v80;
        }
      }
      v40 = &v39[24 * v81];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88)
      return 0;
    v42 = (_QWORD **)__p;
    if (__p)
    {
      v43 = v87;
      v44 = __p;
      if (v87 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v87 = v42;
      operator delete(v44);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_79;
    v45 = v85;
    v25 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v47 = (void *)*--v45;
      v46 = v47;
      *v45 = 0;
      if (v47)
        operator delete[](v46);
    }
    while (v45 != v23);
    goto LABEL_77;
  }
  v9 = (uint64_t)v8;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v78 = 56;
      v48 = &v76;
      v49 = (char *)v80;
      if (v81 >= v82)
      {
        v65 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v71 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          v49 = (char *)v80;
          v48 = (int *)((char *)v80 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          v48 = &v76;
          v49 = (char *)v80;
        }
      }
      v50 = &v49[24 * v81];
      v51 = *(_OWORD *)v48;
      *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
      *(_OWORD *)v50 = v51;
      ++v81;
      if (v79[0])
      {
        v52 = &v76;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
        v53 = (char *)v80;
        if (v81 >= v82)
        {
          v66 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            v72 = (char *)&v76 - (_BYTE *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            v53 = (char *)v80;
            v52 = (int *)((char *)v80 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            v52 = &v76;
            v53 = (char *)v80;
          }
        }
        v54 = &v53[24 * v81];
        v55 = *(_OWORD *)v52;
        *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
        *(_OWORD *)v54 = v55;
        ++v81;
        if (v79[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88)
      return 0;
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v87;
      v58 = __p;
      if (v87 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v87 = v56;
      operator delete(v58);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_79;
    v59 = v85;
    v25 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v61 = (void *)*--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        operator delete[](v60);
    }
    while (v59 != v23);
    goto LABEL_77;
  }
  *a1 = v9;
  v10 = mlir::DictionaryAttr::get((uint64_t)&v75, "unique", 6uLL);
  if (!v10)
    return 1;
  v11 = v10;
  if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    a1[1] = v10;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    v76 = 3;
    v78 = 51;
    v12 = &v76;
    v13 = (char *)v80;
    if (v81 >= v82)
    {
      v67 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        v73 = (char *)&v76 - (_BYTE *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        v13 = (char *)v80;
        v12 = (int *)((char *)v80 + v73);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        v12 = &v76;
        v13 = (char *)v80;
      }
    }
    v14 = &v13[24 * v81];
    v15 = *(_OWORD *)v12;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v14 = v15;
    ++v81;
    if (v79[0])
    {
      v16 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v11);
      v17 = (char *)v80;
      if (v81 >= v82)
      {
        v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v74 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          v17 = (char *)v80;
          v16 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          v16 = &v76;
          v17 = (char *)v80;
        }
      }
      v18 = &v17[24 * v81];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
  }
  if (v88)
  {
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v87;
      v22 = __p;
      if (v87 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v87 = v20;
      operator delete(v22);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_79;
    v24 = v85;
    v25 = v84;
    if (v85 == v84)
    {
LABEL_78:
      v85 = v23;
      operator delete(v25);
LABEL_79:
      if (v80 != v83)
        free(v80);
      return 0;
    }
    do
    {
      v27 = (void *)*--v24;
      v26 = v27;
      *v24 = 0;
      if (v27)
        operator delete[](v26);
    }
    while (v24 != v23);
LABEL_77:
    v25 = v84;
    goto LABEL_78;
  }
  return 0;
}

uint64_t mlir::tensor::GatherOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t DictionaryAttr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  mlir::DictionaryAttr *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v19 = v21;
  v20 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"gather_dims", 11, *a2);
    v5 = v4;
    v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      v6 = v20;
    }
    v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *v7 = NamedAttr;
    v7[1] = v5;
    v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      v10 = (mlir::MLIRContext *)v19;
      if (v8)
        goto LABEL_6;
LABEL_13:
      DictionaryAttr = 0;
      if (v10 == (mlir::MLIRContext *)v21)
        return DictionaryAttr;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_5;
  }
  v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"unique", 6, v9);
  v15 = v14;
  v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    v16 = v20;
  }
  v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  v8 = v20 + 1;
  LODWORD(v20) = v8;
  v10 = (mlir::MLIRContext *)v19;
  if (!v8)
    goto LABEL_13;
LABEL_6:
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  v10 = (mlir::MLIRContext *)v19;
  if (v19 != v21)
LABEL_7:
    free(v10);
  return DictionaryAttr;
}

uint64_t mlir::tensor::GatherOp::getInherentAttr(int a1, _QWORD *a2, char *__s1, size_t __n)
{
  if (__n == 6)
  {
    if (memcmp(__s1, "unique", 6uLL))
      return 0;
    return a2[1];
  }
  else
  {
    if (__n != 11)
      return 0;
    if (*(_QWORD *)__s1 != 0x645F726568746167 || *(_QWORD *)(__s1 + 3) != 0x736D69645F726568)
      return 0;
    return *a2;
  }
}

uint64_t mlir::tensor::GatherOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)result;
  if (a3 == 6)
  {
    result = memcmp(__s1, "unique", 6uLL);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
          v7 = a4;
        else
          v7 = 0;
        v5[1] = v7;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (a3 == 11 && *(_QWORD *)__s1 == 0x645F726568746167 && *(_QWORD *)(__s1 + 3) == 0x736D69645F726568)
  {
    if (a4)
    {
      result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
      if ((_DWORD)result)
        v8 = a4;
      else
        v8 = 0;
      *v5 = v8;
    }
    else
    {
      *(_QWORD *)result = 0;
    }
  }
  return result;
}

void mlir::tensor::GatherOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"gather_dims", 11, *a2);
  v5 = a2[1];
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"unique", 6, v5);
}

BOOL mlir::tensor::GatherOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _BOOL8 result;

  v8 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v8, (const void **)"gather_dims", (const char *)0xB, a3, a4))
  {
    v9 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v9, (const void **)"unique", (const char *)6, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

BOOL mlir::tensor::GatherOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[39];
    return a1[32];
  }
  return result;
}

uint64_t mlir::tensor::GatherOp::writeProperties(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64);
  else
    v3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *v3);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v3[1]);
}

BOOL mlir::tensor::GatherOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  const void **v18;
  __int16 v19;
  _QWORD v20[3];
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *__p;
  _QWORD **v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (*(_QWORD *)v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v20[0] = v2;
    if (mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"gather_dims", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20)&& (v20[0] = *this, mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"unique", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20))&& mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::tensor::__mlir_ods_local_type_constraint_TensorOps8(
                            *this,
                            *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8,
                            (const void **)"operand",
                            (const void **)7,
                            1u))
    {
      if (*((_DWORD *)*this + 9))
        v6 = (uint64_t)(*this - 2);
      else
        v6 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
      return mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v18 = (const void **)"requires attribute 'gather_dims'";
    v19 = 259;
    mlir::OpState::emitOpError(this, &v18, (uint64_t)v20);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
    if (v20[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
    if (v27)
    {
      v9 = (_QWORD **)__p;
      if (__p)
      {
        v10 = v26;
        v11 = __p;
        if (v26 != __p)
        {
          do
            v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          v11 = __p;
        }
        v26 = v9;
        operator delete(v11);
      }
      v12 = v23;
      if (v23)
      {
        v13 = v24;
        v14 = v23;
        if (v24 != v23)
        {
          do
          {
            v16 = (void *)*--v13;
            v15 = v16;
            *v13 = 0;
            if (v16)
              operator delete[](v15);
          }
          while (v13 != v12);
          v14 = v23;
        }
        v24 = v12;
        operator delete(v14);
      }
      if (v21 != &v22)
        free(v21);
    }
  }
  return v8;
}

uint64_t mlir::tensor::__mlir_ods_local_type_constraint_TensorOps8(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  const void **v49[4];
  __int16 v50;
  int v51;
  const char *v52;
  uint64_t v53;
  _QWORD v54[3];
  void *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[96];
  void *v59;
  _QWORD *v60;
  void *__p;
  _QWORD **v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v54[0] = a2;
    v54[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v10 + 8);
    v49[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v54);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)v49))
      return 1;
  }
  v50 = 261;
  v49[0] = a3;
  v49[1] = a4;
  mlir::Operation::emitOpError(a1, v49, (uint64_t)v54);
  if (v54[0])
  {
    v51 = 3;
    v52 = " #";
    v53 = 2;
    v12 = &v51;
    v13 = (char *)v55;
    if (v56 >= v57)
    {
      v39 = v56 + 1;
      if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
      {
        v45 = (char *)&v51 - (_BYTE *)v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        v13 = (char *)v55;
        v12 = (int *)((char *)v55 + v45);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        v12 = &v51;
        v13 = (char *)v55;
      }
    }
    v14 = &v13[24 * v56];
    v15 = *(_OWORD *)v12;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v14 = v15;
    v16 = ++v56;
    if (v54[0])
    {
      v51 = 5;
      v52 = (const char *)a5;
      v17 = &v51;
      v18 = (char *)v55;
      if (v16 >= v57)
      {
        v40 = v16 + 1;
        v41 = (char *)v55 + 24 * v16 > (char *)&v51;
        if (v55 <= &v51 && v41)
        {
          v46 = (char *)&v51 - (_BYTE *)v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          v18 = (char *)v55;
          v17 = (int *)((char *)v55 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          v17 = &v51;
          v18 = (char *)v55;
        }
      }
      v19 = &v18[24 * v56];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v19 = v20;
      v21 = ++v56;
      if (v54[0])
      {
        v51 = 3;
        v52 = " must be ranked tensor of signless integer or index values, but got ";
        v53 = 68;
        v22 = &v51;
        v23 = (char *)v55;
        if (v21 >= v57)
        {
          v42 = v21 + 1;
          v43 = (char *)v55 + 24 * v21 > (char *)&v51;
          if (v55 <= &v51 && v43)
          {
            v47 = (char *)&v51 - (_BYTE *)v55;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            v23 = (char *)v55;
            v22 = (int *)((char *)v55 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            v22 = &v51;
            v23 = (char *)v55;
          }
        }
        v24 = &v23[24 * v56];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        ++v56;
        if (v54[0])
        {
          v26 = &v51;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v51, a2);
          v27 = (char *)v55;
          if (v56 >= v57)
          {
            v44 = v56 + 1;
            if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
            {
              v48 = (char *)&v51 - (_BYTE *)v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v27 = (char *)v55;
              v26 = (int *)((char *)v55 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v26 = &v51;
              v27 = (char *)v55;
            }
          }
          v28 = &v27[24 * v56];
          v29 = *(_OWORD *)v26;
          *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
          *(_OWORD *)v28 = v29;
          ++v56;
        }
      }
    }
  }
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
  if (v54[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
  if (v63)
  {
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v62;
      v32 = __p;
      if (v62 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v62 = v30;
      operator delete(v32);
    }
    v33 = v59;
    if (v59)
    {
      v34 = v60;
      v35 = v59;
      if (v60 != v59)
      {
        do
        {
          v37 = (void *)*--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v34 != v33);
        v35 = v59;
      }
      v60 = v33;
      operator delete(v35);
    }
    if (v55 != v58)
      free(v55);
  }
  return v11;
}

BOOL mlir::tensor::GatherOp::parse(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  mlir::UnitAttr **v5;
  mlir::MLIRContext *v6;
  uint64_t UnitAttr;
  uint64_t v8;
  uint64_t v9;
  void *Results;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t Inputs;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  __int16 v23;
  _QWORD v24[4];
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  memset(v25, 0, 24);
  v19[0] = v25;
  v19[1] = 1;
  memset(v24, 0, 24);
  v18[0] = v24;
  v18[1] = 1;
  v16 = 0;
  v17 = 0;
  Inputs = 0;
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 672))(a1, v25, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t *))(*a1 + 296))(a1))
    return 0;
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 672))(a1, v24, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t *))(*a1 + 312))(a1))
    return 0;
  v23 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t *, const char *, uint64_t, uint64_t **))(*a1 + 368))(a1, "gather_dims", 11, &v20)|| !(*(unsigned __int8 (**)(uint64_t *))(*a1 + 264))(a1)|| !mlir::AsmParser::parseCustomAttributeWithFallback<mlir::detail::DenseArrayAttrImpl<long long>>((uint64_t)a1, &v17, 0))
  {
    return 0;
  }
  if (v17)
  {
    v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties>(a2);
    *v4 = v17;
  }
  if (!(*(unsigned __int8 (**)(uint64_t *))(*a1 + 280))(a1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t *, const char *, uint64_t))(*a1 + 376))(a1, "unique", 6))
  {
    v5 = (mlir::UnitAttr **)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
    UnitAttr = mlir::Builder::getUnitAttr(v5, v6);
    *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties>(a2)
              + 8) = UnitAttr;
  }
  v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, _QWORD *))(*a1 + 456))(a1, a2 + 14))
    return 0;
  v8 = a2[1];
  v20 = a1;
  v21 = &v14;
  v22 = a2;
  if (!mlir::tensor::GatherOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::GatherOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v20))return 0;
  if (!(*(unsigned __int8 (**)(uint64_t *))(*a1 + 104))(a1))
    return 0;
  v14 = 0;
  if (!mlir::AsmParser::parseType<mlir::FunctionType>((uint64_t)a1, &v14))
    return 0;
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v14);
  v16 = v9;
  Results = (void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v14);
  mlir::OperationState::addTypes((uint64_t)a2, Results, v11);
  v20 = v19;
  v21 = v18;
  v12 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  return mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>((uint64_t)a1, &v20, &Inputs, v12, (uint64_t)(a2 + 2)) != 0;
}

uint64_t mlir::AsmParser::parseCustomAttributeWithFallback<mlir::detail::DenseArrayAttrImpl<long long>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  __int16 v20;
  _QWORD *v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v21 = 0;
  v22[0] = a1;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **, uint64_t, BOOL (*)(mlir::AsmParser **, uint64_t *), _QWORD *))(*(_QWORD *)a1 + 416))(a1, &v21, a3, _ZN4llvm12function_refIFN4mlir11ParseResultERNS1_9AttributeENS1_4TypeEEE11callback_fnIZNS1_9AsmParser32parseCustomAttributeWithFallbackINS1_6detail18DenseArrayAttrImplIxEEEENSt3__19enable_ifIXsr23detect_has_parse_methodIT_EE5valueES2_E4typeERSG_S5_EUlS4_S5_E_EES2_lS4_S5_, v22))return 0;
  v7 = v21;
  if (mlir::detail::DenseArrayAttrImpl<long long>::classof(v21))
    v8 = v7;
  else
    v8 = 0;
  *a2 = v8;
  if (v8)
    return 1;
  v19 = "invalid kind of attribute specified";
  v20 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v22, a1, v6, &v19);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  if (v29)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v28;
      v13 = __p;
      if (v28 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v28 = v11;
      operator delete(v13);
    }
    v14 = v25;
    if (v25)
    {
      v15 = v26;
      v16 = v25;
      if (v26 != v25)
      {
        do
        {
          v18 = (void *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            operator delete[](v17);
        }
        while (v15 != v14);
        v16 = v25;
      }
      v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24)
      free(v23);
  }
  return v9;
}

void mlir::tensor::GatherOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  unint64_t v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  mlir::Operation *v25;
  mlir::ArrayAttr *v26;
  uint64_t Value;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  mlir::Operation *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[4];
  uint64_t v41[4];
  uint64_t v42[2];
  void *v43;
  uint64_t v44;
  _QWORD v45[5];

  v45[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
  }
  else
  {
    *v7 = 91;
    ++*((_QWORD *)v6 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "]", 1uLL);
  }
  else
  {
    *v9 = 93;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 0xA)
  {
    *(_DWORD *)(v13 + 7) = 1936550244;
    *(_QWORD *)v13 = *(_QWORD *)"gather_dims";
    *((_QWORD *)v12 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v12, "gather_dims", 0xBuLL);
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "(", 1uLL);
  }
  else
  {
    *v15 = 40;
    ++*((_QWORD *)v14 + 4);
  }
  v43 = (void *)*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
  {
    v16 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v17 = (*(uint64_t (**)(_QWORD *))(*v16 + 80))(v16) + v16[4] - v16[2];
    mlir::detail::DenseArrayAttrImpl<long long>::print((llvm::raw_ostream *)&v43, (uint64_t)a2);
    if (v17 == (*(uint64_t (**)(_QWORD *))(*v16 + 80))(v16) + v16[4] - v16[2])
      (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v43);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, ")", 1uLL);
  }
  else
  {
    *v19 = 41;
    ++*((_QWORD *)v18 + 4);
  }
  v20 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v20 = 0;
  if (*(_QWORD *)(v20 + 8))
  {
    v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v22 = (_BYTE *)*((_QWORD *)v21 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
    {
      llvm::raw_ostream::write(v21, 32);
    }
    else
    {
      *((_QWORD *)v21 + 4) = v22 + 1;
      *v22 = 32;
    }
    v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v24 = *((_QWORD *)v23 + 4);
    if ((unint64_t)(*((_QWORD *)v23 + 3) - v24) > 5)
    {
      *(_WORD *)(v24 + 4) = 25973;
      *(_DWORD *)v24 = 1902734965;
      *((_QWORD *)v23 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v23, "unique", 6uLL);
    }
  }
  v43 = v45;
  v45[0] = "gather_dims";
  v45[1] = 11;
  v45[2] = "unique";
  v45[3] = 6;
  v44 = 0x200000002;
  mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v25 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v41[0] = mlir::Operation::getAttrDictionary(v25);
    v26 = (mlir::ArrayAttr *)v41;
  }
  else
  {
    v26 = (mlir::Operation *)((char *)v25 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v26);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v28, v43, v44);
  v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v30 = (_BYTE *)*((_QWORD *)v29 + 4);
  if ((unint64_t)v30 >= *((_QWORD *)v29 + 3))
  {
    llvm::raw_ostream::write(v29, 32);
  }
  else
  {
    *((_QWORD *)v29 + 4) = v30 + 1;
    *v30 = 32;
  }
  v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v32 = (_BYTE *)*((_QWORD *)v31 + 4);
  if (*((_BYTE **)v31 + 3) == v32)
  {
    llvm::raw_ostream::write(v31, ":", 1uLL);
  }
  else
  {
    *v32 = 58;
    ++*((_QWORD *)v31 + 4);
  }
  v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v34 = (_BYTE *)*((_QWORD *)v33 + 4);
  if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
  {
    llvm::raw_ostream::write(v33, 32);
  }
  else
  {
    *((_QWORD *)v33 + 4) = v34 + 1;
    *v34 = 32;
  }
  v35 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v36 = *((_QWORD *)v35 + 9);
    v37 = *((unsigned int *)v35 + 17);
  }
  else
  {
    v36 = 0;
    v37 = 0;
  }
  v40[0] = v36;
  v40[1] = v37;
  mlir::OperandRange::getTypes(v40, v41);
  v38 = *((unsigned int *)*this + 9);
  v39 = (uint64_t)*this - 16;
  if (!(_DWORD)v38)
    v39 = 0;
  v42[0] = v39;
  v42[1] = v38;
  mlir::OperandRange::getTypes(v42, v40);
  mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>((uint64_t)a2, v41, v40);
  if (v43 != v45)
    free(v43);
}

BOOL mlir::tensor::GenerateOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;

  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && (v3 = *((unsigned int *)v2 + 17), (_DWORD)v3))
  {
    v4 = 0;
    v5 = v2[9] + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v4))
    {
      ++v4;
      v5 += 32;
      if (v3 == v4)
      {
        v2 = *this;
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    v6 = *((_DWORD *)v2 + 9);
    v7 = v2 - 2;
    if (v6)
      v8 = (uint64_t)v7;
    else
      v8 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    if (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(*this, (((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), (uint64_t)"body", 4, 0) != 0;
  }
  return 0;
}

uint64_t mlir::tensor::GenerateOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::Region *v4;
  _QWORD *v5;
  uint64_t v6;
  mlir::IndexType **v7;
  mlir::MLIRContext *v8;
  uint64_t IndexType;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  mlir::Region *v15;
  void *v16;
  uint64_t v18;
  mlir::Region *v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  v4 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v4 = v4;
  *((_QWORD *)v4 + 1) = v4;
  *((_QWORD *)v4 + 2) = 0;
  v19 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v20, 0, 1, 0xFFFFFFFFLL))goto LABEL_13;
  if (!(*(unsigned __int8 (**)(uint64_t, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))goto LABEL_13;
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  mlir::impl::ensureRegionTerminator(v4, v5, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::GenerateOp>::buildTerminator);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    goto LABEL_13;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_13;
  v18 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v18))
    goto LABEL_13;
  v6 = v18;
  mlir::OperationState::addRegion(a2, (unint64_t)&v19);
  v7 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v7, v8);
  v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v10) = v6;
  ++*(_DWORD *)(a2 + 72);
  if ((_DWORD)v21)
  {
    v11 = a2 + 16;
    v12 = (char *)v20;
    v13 = 32 * v21;
    v14 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v12, IndexType, v11))
    {
      v12 += 32;
      v13 -= 32;
      if (!v13)
        goto LABEL_14;
    }
LABEL_13:
    v14 = 0;
LABEL_14:
    v15 = v19;
    v19 = 0;
    if (v15)
      goto LABEL_15;
    goto LABEL_16;
  }
  v14 = 1;
  v15 = v19;
  v19 = 0;
  if (v15)
  {
LABEL_15:
    mlir::Region::~Region(v15);
    operator delete(v16);
  }
LABEL_16:
  if (v20 != v22)
    free(v20);
  return v14;
}

void mlir::tensor::GenerateOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  mlir::GenericProgramPoint **v14;
  mlir::Operation *v15;
  mlir::Operation *v16;
  _BOOL8 v17;
  mlir::Operation *v18;
  mlir::ArrayAttr *v19;
  uint64_t Value;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t NextResultAtOffset;
  unint64_t v30;
  void *AttrDictionary;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v7 = *((unsigned int *)v6 + 17);
    v8 = *((_QWORD *)v6 + 9);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  AttrDictionary = ", ";
  v32 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, (uint64_t)a2, v9, (uint64_t)&AttrDictionary);
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (_QWORD *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10));
  v17 = (_QWORD *)*v12 == v12
     || ((v13 = v12[1]) != 0 ? (v14 = (mlir::GenericProgramPoint **)(v13 - 8)) : (v14 = 0),
         (mlir::Block::getTerminator(v14), !v15)
      || (v16 = v15,
          AttrDictionary = (void *)mlir::Operation::getAttrDictionary(v15),
          mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&AttrDictionary))
      || (*((_BYTE *)v16 + 46) & 0x80) != 0 && *((_DWORD *)v16 + 17))
     || *((_DWORD *)v16 + 9) != 0;
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, _BOOL8, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), 1, v17, 0);
  AttrDictionary = v33;
  v32 = 0x200000000;
  v18 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v30 = mlir::Operation::getAttrDictionary(v18);
    v19 = (mlir::ArrayAttr *)&v30;
  }
  else
  {
    v19 = (mlir::Operation *)((char *)v18 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v19);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v21, AttrDictionary, v32);
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((_QWORD *)v22 + 4) = v23 + 1;
    *v23 = 32;
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if (*((_BYTE **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, ":", 1uLL);
  }
  else
  {
    *v25 = 58;
    ++*((_QWORD *)v24 + 4);
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v28 = (uint64_t)*this - 16;
  else
    v28 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v28, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (AttrDictionary != v33)
    free(AttrDictionary);
}

uint64_t mlir::tensor::detail::InsertOpGenericAdaptorBase::InsertOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.insert", 13, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::InsertOp::getDestMutable(mlir::tensor::InsertOp *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 72) + 32;
}

uint64_t mlir::tensor::InsertOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v14[0] = a4;
  v14[1] = a5;
  v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v12 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(_QWORD **)a11 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v14, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::tensor::InsertOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t NextResultAtOffset;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  const void **v30[4];
  __int16 v31;
  _QWORD v32[3];
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *__p;
  _QWORD **v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))return 0;
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v4 = -2;
    v5 = 64;
LABEL_5:
    v6 = 0;
    v7 = v5 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v6 + 2))
    {
      ++v6;
      v7 += 32;
      if (v4 == v6)
      {
        v2 = *this;
        goto LABEL_9;
      }
    }
    return 0;
  }
  v3 = *((unsigned int *)v2 + 17);
  v4 = v3 - 2;
  if (v3 != 2)
  {
    v5 = v2[9] + 64;
    goto LABEL_5;
  }
LABEL_9:
  v8 = *((_DWORD *)v2 + 9);
  v9 = v2 - 2;
  v10 = v8 ? (uint64_t)v9 : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v13 = (uint64_t)(*this - 2);
  else
    v13 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v12 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v32[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::TensorType::getElementType((mlir::TensorType *)v32) == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      return 1;
    v30[0] = (const void **)"failed to verify that scalar type matches element type of dest";
    v31 = 259;
    mlir::OpState::emitOpError(this, v30, (uint64_t)v32);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    if (v39)
    {
      v23 = (_QWORD **)__p;
      if (__p)
      {
        v24 = v38;
        v25 = __p;
        if (v38 != __p)
        {
          do
            v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          v25 = __p;
        }
        v38 = v23;
        operator delete(v25);
      }
      v18 = v35;
      if (!v35)
        goto LABEL_49;
      v26 = v36;
      v20 = v35;
      if (v36 == v35)
        goto LABEL_48;
      do
      {
        v28 = (void *)*--v26;
        v27 = v28;
        *v26 = 0;
        if (v28)
          operator delete[](v27);
      }
      while (v26 != v18);
      goto LABEL_47;
    }
  }
  else
  {
    v30[0] = (const void **)"failed to verify that result type matches type of dest";
    v31 = 259;
    mlir::OpState::emitOpError(this, v30, (uint64_t)v32);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    if (v39)
    {
      v15 = (_QWORD **)__p;
      if (__p)
      {
        v16 = v38;
        v17 = __p;
        if (v38 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v38 = v15;
        operator delete(v17);
      }
      v18 = v35;
      if (!v35)
        goto LABEL_49;
      v19 = v36;
      v20 = v35;
      if (v36 == v35)
      {
LABEL_48:
        v36 = v18;
        operator delete(v20);
LABEL_49:
        if (v33 != &v34)
          free(v33);
        return v14;
      }
      do
      {
        v22 = (void *)*--v19;
        v21 = v22;
        *v19 = 0;
        if (v22)
          operator delete[](v21);
      }
      while (v19 != v18);
LABEL_47:
      v20 = v35;
      goto LABEL_48;
    }
  }
  return v14;
}

uint64_t mlir::tensor::InsertOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  mlir::IndexType **v12;
  mlir::MLIRContext *v13;
  uint64_t IndexType;
  uint64_t ElementType;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _WORD v20[20];
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23[2];
  _QWORD v24[4];
  __int16 v25;
  uint64_t __src;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  _QWORD v30[4];
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  memset(v31, 0, 24);
  memset(v30, 0, 24);
  v23[0] = (uint64_t)v30;
  v23[1] = 1;
  __src = 0;
  v27 = v29;
  v28 = 0x400000000;
  v22[0] = &__src;
  v22[1] = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v31, 1))
  {
    v25 = 257;
    if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "into", 4, v24))
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v30, 1))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v27, 0, 1, 0xFFFFFFFFLL))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
              if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
              {
                if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
                {
                  v24[0] = 0;
                  if (mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, v24))
                  {
                    v5 = v24[0];
                    __src = v24[0];
                    v21 = v24[0];
                    if (*(_UNKNOWN **)(*(_QWORD *)v24[0] + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
                    {
                      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
                      v20[16] = 257;
                      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _WORD *))(*(_QWORD *)a1 + 24))(v24, a1, v6, v20);
                      v7 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v24, "'dest' must be ranked tensor of any type values, but got ");
                      v8 = mlir::InFlightDiagnostic::append<mlir::Type &>(v7, &v21);
                      v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v8);
                      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v24);
                      v10 = v27;
                      if (v27 == v29)
                        return v9;
                      goto LABEL_22;
                    }
                    v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v24[0] + 8);
                    v24[0] = v5;
                    v24[1] = v11;
                    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v24);
                    v12 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                    IndexType = mlir::Builder::getIndexType(v12, v13);
                    mlir::OperationState::addTypes(a2, &__src, 1);
                    v24[0] = __src;
                    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)v24);
                    v16 = a2 + 16;
                    if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v31, ElementType, v16))
                    {
                      if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v23, v22, v4, v16))
                      {
                        if (!(_DWORD)v28)
                        {
                          v9 = 1;
                          v10 = v27;
                          if (v27 == v29)
                            return v9;
                          goto LABEL_22;
                        }
                        v17 = (char *)v27;
                        v18 = 32 * v28;
                        v9 = 1;
                        while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, IndexType, v16))
                        {
                          v17 += 32;
                          v18 -= 32;
                          if (!v18)
                            goto LABEL_21;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
LABEL_21:
  v10 = v27;
  if (v27 != v29)
LABEL_22:
    free(v10);
  return v9;
}

void mlir::tensor::InsertOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  mlir::Operation *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  mlir::Operation *v22;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  unint64_t AttrDictionary;
  void *v33;
  uint64_t v34;
  _QWORD v35[5];

  v35[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 3uLL)
  {
    *v9 = 1869901417;
    *((_QWORD *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "into", 4uLL);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "[", 1uLL);
    v14 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_15;
  }
  else
  {
    *v13 = 91;
    ++*((_QWORD *)v12 + 4);
    v14 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_15:
      v15 = *((unsigned int *)v14 + 17);
      v16 = *((_QWORD *)v14 + 9);
      v17 = v15 - 2;
      goto LABEL_16;
    }
  }
  v16 = 0;
  v17 = -2;
LABEL_16:
  v18 = v16 + 64;
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = ", ";
  v34 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v18, 0, v18, v17, (uint64_t)a2, v19, (uint64_t)&v33);
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if (*((_BYTE **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, "]", 1uLL);
  }
  else
  {
    *v21 = 93;
    ++*((_QWORD *)v20 + 4);
  }
  v33 = v35;
  v34 = 0x200000000;
  v22 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v22);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v22 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v25, v33, v34);
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 32;
  }
  v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if (*((_BYTE **)v28 + 3) == v29)
  {
    llvm::raw_ostream::write(v28, ":", 1uLL);
  }
  else
  {
    *v29 = 58;
    ++*((_QWORD *)v28 + 4);
  }
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((_QWORD *)v30 + 4) = v31 + 1;
    *v31 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v33 != v35)
    free(v33);
}

uint64_t mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::InsertSliceOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t Context;
  unint64_t v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (__int128 *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *v5;
  v9 = v5[1];
  *(_OWORD *)(a1 + 56) = v5[2];
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v12;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.insert_slice", 19, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::InsertSliceOp::getStrides(mlir::tensor::InsertSliceOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  else
    v2 = 0;
  if ((v1 & 0x800000) != 0)
    v3 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v3 = 0;
  return v3 + 32 * (v2[9] + v2[8] + v2[7] + v2[6]);
}

uint64_t mlir::tensor::InsertSliceOp::getDestMutable(mlir::tensor::InsertSliceOp *this)
{
  unint64_t v1;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v1 + 24);
}

BOOL mlir::tensor::InsertSliceOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  int *v62;
  char *v63;
  char *v64;
  __int128 v65;
  int *v66;
  char *v67;
  char *v68;
  __int128 v69;
  _QWORD **v70;
  _QWORD **v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  int *v76;
  char *v77;
  char *v78;
  __int128 v79;
  _QWORD **v80;
  _QWORD **v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  _QWORD *v103;
  uint64_t v104;
  int v105;
  const char *v106;
  uint64_t v107;
  _QWORD v108[3];
  void *v109;
  unsigned int v110;
  unsigned int v111;
  _BYTE v112[96];
  void *v113;
  _QWORD *v114;
  void *__p;
  _QWORD **v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v104 = v6;
  if (!v6)
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v106 = "expected DictionaryAttr to set properties";
      v107 = 41;
      v16 = &v105;
      v17 = (char *)v109;
      if (v110 >= v111)
      {
        v87 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v95 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          v17 = (char *)v109;
          v16 = (int *)((char *)v109 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          v16 = &v105;
          v17 = (char *)v109;
        }
      }
      v18 = &v17[24 * v110];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v116;
      v22 = __p;
      if (v116 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v116 = v20;
      operator delete(v22);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v24 = v114;
    v25 = v113;
    if (v114 == v113)
    {
LABEL_116:
      v114 = v23;
      operator delete(v25);
LABEL_117:
      if (v109 != v112)
        free(v109);
      return 0;
    }
    do
    {
      v27 = (void *)*--v24;
      v26 = v27;
      *v24 = 0;
      if (v27)
        operator delete[](v26);
    }
    while (v24 != v23);
LABEL_115:
    v25 = v113;
    goto LABEL_116;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_offsets", 0xEuLL);
  if (!v8)
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v106 = "expected key entry for static_offsets in DictionaryAttr to set Properties.";
      v107 = 74;
      v28 = &v105;
      v29 = (char *)v109;
      if (v110 >= v111)
      {
        v88 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v96 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          v29 = (char *)v109;
          v28 = (int *)((char *)v109 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          v28 = &v105;
          v29 = (char *)v109;
        }
      }
      v30 = &v29[24 * v110];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v116;
      v34 = __p;
      if (v116 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v116 = v32;
      operator delete(v34);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v35 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v37 = (void *)*--v35;
      v36 = v37;
      *v35 = 0;
      if (v37)
        operator delete[](v36);
    }
    while (v35 != v23);
    goto LABEL_115;
  }
  v9 = (uint64_t)v8;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v107 = 59;
      v38 = &v105;
      v39 = (char *)v109;
      if (v110 >= v111)
      {
        v89 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v97 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          v39 = (char *)v109;
          v38 = (int *)((char *)v109 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          v38 = &v105;
          v39 = (char *)v109;
        }
      }
      v40 = &v39[24 * v110];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      ++v110;
      if (v108[0])
      {
        v42 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v9);
        v43 = (char *)v109;
        if (v110 >= v111)
        {
          v90 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            v98 = (char *)&v105 - (_BYTE *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            v43 = (char *)v109;
            v42 = (int *)((char *)v109 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            v42 = &v105;
            v43 = (char *)v109;
          }
        }
        v44 = &v43[24 * v110];
        v45 = *(_OWORD *)v42;
        *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
        *(_OWORD *)v44 = v45;
        ++v110;
        if (v108[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117)
      return 0;
    v46 = (_QWORD **)__p;
    if (__p)
    {
      v47 = v116;
      v48 = __p;
      if (v116 != __p)
      {
        do
          v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        v48 = __p;
      }
      v116 = v46;
      operator delete(v48);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v49 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v51 = (void *)*--v49;
      v50 = v51;
      *v49 = 0;
      if (v51)
        operator delete[](v50);
    }
    while (v49 != v23);
    goto LABEL_115;
  }
  *a1 = v9;
  v10 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_sizes", 0xCuLL);
  if (!v10)
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v106 = "expected key entry for static_sizes in DictionaryAttr to set Properties.";
      v107 = 72;
      v52 = &v105;
      v53 = (char *)v109;
      if (v110 >= v111)
      {
        v91 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v99 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          v53 = (char *)v109;
          v52 = (int *)((char *)v109 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          v52 = &v105;
          v53 = (char *)v109;
        }
      }
      v54 = &v53[24 * v110];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
      *(_OWORD *)v54 = v55;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v116;
      v58 = __p;
      if (v116 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v116 = v56;
      operator delete(v58);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v59 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v61 = (void *)*--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        operator delete[](v60);
    }
    while (v59 != v23);
    goto LABEL_115;
  }
  v11 = (uint64_t)v10;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v10))
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v107 = 57;
      v62 = &v105;
      v63 = (char *)v109;
      if (v110 >= v111)
      {
        v92 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v100 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          v63 = (char *)v109;
          v62 = (int *)((char *)v109 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          v62 = &v105;
          v63 = (char *)v109;
        }
      }
      v64 = &v63[24 * v110];
      v65 = *(_OWORD *)v62;
      *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
      *(_OWORD *)v64 = v65;
      ++v110;
      if (v108[0])
      {
        v66 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v11);
        v67 = (char *)v109;
        if (v110 >= v111)
        {
          v93 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            v101 = (char *)&v105 - (_BYTE *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            v67 = (char *)v109;
            v66 = (int *)((char *)v109 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            v66 = &v105;
            v67 = (char *)v109;
          }
        }
        v68 = &v67[24 * v110];
        v69 = *(_OWORD *)v66;
        *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
        *(_OWORD *)v68 = v69;
        ++v110;
        if (v108[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117)
      return 0;
    v70 = (_QWORD **)__p;
    if (__p)
    {
      v71 = v116;
      v72 = __p;
      if (v116 != __p)
      {
        do
          v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
        while (v71 != v70);
        v72 = __p;
      }
      v116 = v70;
      operator delete(v72);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v73 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v75 = (void *)*--v73;
      v74 = v75;
      *v73 = 0;
      if (v75)
        operator delete[](v74);
    }
    while (v73 != v23);
    goto LABEL_115;
  }
  a1[1] = v11;
  v12 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_strides", 0xEuLL);
  v103 = v12;
  if (!v12)
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v106 = "expected key entry for static_strides in DictionaryAttr to set Properties.";
      v107 = 74;
      v76 = &v105;
      v77 = (char *)v109;
      if (v110 >= v111)
      {
        v94 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v102 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          v77 = (char *)v109;
          v76 = (int *)((char *)v109 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          v76 = &v105;
          v77 = (char *)v109;
        }
      }
      v78 = &v77[24 * v110];
      v79 = *(_OWORD *)v76;
      *((_QWORD *)v78 + 2) = *((_QWORD *)v76 + 2);
      *(_OWORD *)v78 = v79;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v80 = (_QWORD **)__p;
    if (__p)
    {
      v81 = v116;
      v82 = __p;
      if (v116 != __p)
      {
        do
          v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
        while (v81 != v80);
        v82 = __p;
      }
      v116 = v80;
      operator delete(v82);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v83 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v85 = (void *)*--v83;
      v84 = v85;
      *v83 = 0;
      if (v85)
        operator delete[](v84);
    }
    while (v83 != v23);
    goto LABEL_115;
  }
  v13 = v12;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v12))
  {
    a3(v108, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v86, (uint64_t *)&v103);
LABEL_122:
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v108);
    return 0;
  }
  a1[2] = (uint64_t)v13;
  v14 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "operandSegmentSizes", 0x13uLL);
  if (!v14)
  {
    v14 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "operand_segment_sizes", 0x15uLL);
    if (!v14)
    {
      a3(v108, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v108, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_122;
    }
  }
  return mlir::convertFromAttribute(a1 + 3, (const char *)5, v14, a3, a4) != 0;
}

uint64_t mlir::tensor::InsertSliceOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t DictionaryAttr;
  void *v30;
  mlir::DictionaryAttr *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x1E0C80C00];
  v32 = a1;
  v33 = v35;
  v34 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_offsets", 14, *a2);
    v6 = v5;
    v7 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v7 = v34;
    }
    v8 = (uint64_t *)((char *)v33 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v34) = v34 + 1;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_sizes", 12, v9);
    v12 = v11;
    v13 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v13 = v34;
    }
    v14 = (uint64_t *)((char *)v33 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    LODWORD(v34) = v34 + 1;
  }
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_strides", 14, v15);
    v18 = v17;
    v19 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v19 = v34;
    }
    v20 = (uint64_t *)((char *)v33 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    LODWORD(v34) = v34 + 1;
  }
  v21 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 5);
  v22 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"operandSegmentSizes", 19, v21);
  v24 = v23;
  v25 = v34;
  if (v34 >= HIDWORD(v34))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
    v25 = v34;
  }
  v26 = (uint64_t *)((char *)v33 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  v27 = __CFADD__((_DWORD)v34, 1);
  v28 = (v34 + 1);
  LODWORD(v34) = v34 + 1;
  if (v27)
  {
    DictionaryAttr = 0;
    v30 = v33;
    if (v33 == v35)
      return DictionaryAttr;
    goto LABEL_20;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v32, (mlir::MLIRContext *)v33, v28);
  v30 = v33;
  if (v33 != v35)
LABEL_20:
    free(v30);
  return DictionaryAttr;
}

unint64_t mlir::tensor::InsertSliceOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v1 = *a1;
  v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v2 & 1) == 0)
  {
    v30 = *a1;
    v33 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v19 = v18;
    v1 = v30;
    a1 = v33;
    if (v19)
    {
      v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v20 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      v1 = v30;
      a1 = v33;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v4 = HIDWORD(v1);
  v5 = 0x9DDFEA08EB382D69 * ((v3[19] + 8 * v1) ^ HIDWORD(v1));
  v40 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v6 = a1[1];
  if ((v4 & 1) == 0)
  {
    v31 = a1[1];
    v34 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v22 = v21;
    v6 = v31;
    a1 = v34;
    if (v22)
    {
      v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v23 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      v6 = v31;
      a1 = v34;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v7 = HIDWORD(v6);
  v8 = 0x9DDFEA08EB382D69 * ((v3[19] + 8 * v6) ^ HIDWORD(v6));
  v39 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v9 = a1[2];
  if ((v7 & 1) == 0)
  {
    v32 = a1[2];
    v35 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v25 = v24;
    v9 = v32;
    a1 = v35;
    if (v25)
    {
      v26 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v26 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v26;
      v9 = v32;
      a1 = v35;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v10 = HIDWORD(v9);
  v11 = 0x9DDFEA08EB382D69 * ((v3[19] + 8 * v9) ^ HIDWORD(v9));
  v38 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
  if ((v10 & 1) == 0)
  {
    v36 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v28 = v27;
    a1 = v36;
    if (v28)
    {
      v29 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v29 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v29;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v36;
    }
  }
  v12 = v3[19];
  v13 = a1[4];
  v14 = 0x9AE16A3B2F90404FLL * *(unint64_t *)((char *)a1 + 36);
  v15 = __ROR8__(0xB492B66FBE98F273 * a1[3] - v13, 43)
      - 0x3C5A37A36834CED9 * *(unint64_t *)((char *)a1 + 28)
      + __ROR8__(v14 ^ v12, 30);
  v16 = v12 + __ROR8__(v13 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * a1[3] - v14 + 20;
  v37 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v16 ^ ((0x9DDFEA08EB382D69 * (v15 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v15 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v16 ^ ((0x9DDFEA08EB382D69 * (v15 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v15 ^ v16)))) >> 47));
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v40, (uint64_t *)&v39, (uint64_t *)&v38, (uint64_t *)&v37);
}

uint64_t mlir::tensor::InsertSliceOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 0xCuLL:
      if (memcmp(__s1, "static_sizes", __n))
        goto LABEL_11;
      return a2[1];
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        result = *a2;
      }
      else if (!memcmp(__s1, "static_strides", __n))
      {
        result = a2[2];
      }
      else
      {
LABEL_11:
        result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_11;
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n))
        goto LABEL_11;
LABEL_13:
      result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::tensor::InsertSliceOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 0xCuLL:
      result = memcmp(__s1, "static_sizes", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v10 = a4;
          else
            v10 = 0;
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v11 = a4;
          else
            v11 = 0;
          *v5 = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      else
      {
        result = memcmp(__s1, "static_strides", a3);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if ((_DWORD)result)
              v7 = a4;
            else
              v7 = 0;
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!(_DWORD)result)
        goto LABEL_17;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!(_DWORD)result)
      {
LABEL_17:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v8 = (_DWORD)result ? a4 : 0;
          v12 = v8;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 5)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9)
                result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::tensor::InsertSliceOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_offsets", 14, *a2);
  v6 = a2[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_sizes", 12, v6);
  v7 = a2[2];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_strides", 14, v7);
  v8 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 5);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v8);
}

BOOL mlir::tensor::InsertSliceOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 6)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 3, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)5));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x30uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *(_OWORD *)((char *)v3 + 28) = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_1EDC07000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties]";
        v15 = 115;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v4[41];
    return a1[32];
  }
  return result;
}

uint64_t mlir::tensor::InsertSliceOp::writeProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v4 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
    v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 24, 5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 16));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 24), 5);
  return result;
}

void mlir::tensor::InsertSliceOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v22;
  uint64_t DenseI64ArrayAttr;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v28 = a5;
  v29 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::OperationState::addOperands(a2, a6, a7);
  mlir::OperationState::addOperands(a2, a9, a10);
  mlir::OperationState::addOperands(a2, a11, a12);
  v22 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  *(_QWORD *)(v22 + 24) = 0x100000001;
  *(_DWORD *)(v22 + 32) = a7;
  *(_DWORD *)(v22 + 36) = a10;
  *(_DWORD *)(v22 + 40) = a12;
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, a13, a14);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2) = DenseI64ArrayAttr;
  v24 = mlir::Builder::getDenseI64ArrayAttr(a1, a15, a16);
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 8) = v24;
  v25 = mlir::Builder::getDenseI64ArrayAttr(a1, a17, a18);
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 16) = v25;
  v26 = *(unsigned int *)(a2 + 72);
  if (v26 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v26) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::tensor::InsertSliceOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ODSOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t NextResultAtOffset;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  const void **v55[4];
  __int16 v56;
  _QWORD v57[3];
  void *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v55[0] = (const void **)"requires attribute 'static_offsets'";
    v56 = 259;
    mlir::OpState::emitOpError(this, v55, (uint64_t)v57);
    v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    if (!v64)
      return v31;
    v34 = (_QWORD **)__p;
    if (__p)
    {
      v35 = v63;
      v36 = __p;
      if (v63 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v63 = v34;
      operator delete(v36);
    }
    v37 = v60;
    if (v60)
    {
      v38 = v61;
      v39 = v60;
      if (v61 == v60)
        goto LABEL_86;
      do
      {
        v41 = (void *)*--v38;
        v40 = v41;
        *v38 = 0;
        if (v41)
          operator delete[](v40);
      }
      while (v38 != v37);
LABEL_85:
      v39 = v60;
LABEL_86:
      v61 = v37;
      operator delete(v39);
    }
LABEL_87:
    if (v58 != &v59)
      free(v58);
    return v31;
  }
  v5 = *(_QWORD **)(v3 + 8);
  if (!v5)
  {
    v55[0] = (const void **)"requires attribute 'static_sizes'";
    v56 = 259;
    mlir::OpState::emitOpError(this, v55, (uint64_t)v57);
    v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    if (!v64)
      return v31;
    v42 = (_QWORD **)__p;
    if (__p)
    {
      v43 = v63;
      v44 = __p;
      if (v63 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v63 = v42;
      operator delete(v44);
    }
    v37 = v60;
    if (v60)
    {
      v45 = v61;
      v39 = v60;
      if (v61 == v60)
        goto LABEL_86;
      do
      {
        v47 = (void *)*--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          operator delete[](v46);
      }
      while (v45 != v37);
      goto LABEL_85;
    }
    goto LABEL_87;
  }
  v6 = *(_QWORD **)(v3 + 16);
  if (!v6)
  {
    v55[0] = (const void **)"requires attribute 'static_strides'";
    v56 = 259;
    mlir::OpState::emitOpError(this, v55, (uint64_t)v57);
    v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    if (!v64)
      return v31;
    v48 = (_QWORD **)__p;
    if (__p)
    {
      v49 = v63;
      v50 = __p;
      if (v63 != __p)
      {
        do
          v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        v50 = __p;
      }
      v63 = v48;
      operator delete(v50);
    }
    v37 = v60;
    if (v60)
    {
      v51 = v61;
      v39 = v60;
      if (v61 == v60)
        goto LABEL_86;
      do
      {
        v53 = (void *)*--v51;
        v52 = v53;
        *v51 = 0;
        if (v53)
          operator delete[](v52);
      }
      while (v51 != v37);
      goto LABEL_85;
    }
    goto LABEL_87;
  }
  v57[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"static_offsets", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v57))return 0;
  v57[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"static_sizes", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v57))return 0;
  v57[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"static_strides", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v57))return 0;
  v7 = *((unsigned int *)*this + 11);
  v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v8 = 0;
  v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    v10 = (*this)[9];
    if ((_DWORD)v9)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    if ((_DWORD)v9)
    {
LABEL_14:
      v11 = 0;
      v12 = v10 + 24;
      while (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11)
          goto LABEL_17;
      }
      return 0;
    }
  }
LABEL_17:
  ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
  if (v14)
  {
    v15 = v14;
    v16 = ODSOperands + 24;
    while (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  v17 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
  if (v18)
  {
    v19 = v18;
    v20 = v17 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v20 += 32;
      if (!--v19)
        goto LABEL_25;
    }
    return 0;
  }
LABEL_25:
  v21 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 3u);
  if (v22)
  {
    v23 = v22;
    v24 = v21 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v24 += 32;
      if (!--v23)
        goto LABEL_29;
    }
    return 0;
  }
LABEL_29:
  v25 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 4u);
  if (v26)
  {
    v27 = v26;
    v28 = v25 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v28 += 32;
      if (!--v27)
        goto LABEL_33;
    }
    return 0;
  }
LABEL_33:
  v29 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0);
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  v31 = 1;
  v32 = *(_QWORD *)(*(_QWORD *)(mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)*this + 9))
    v33 = (uint64_t)(*this - 2);
  else
    v33 = 0;
  if (v32 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v33, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v55[0] = (const void **)"failed to verify that expected result type to match dest type";
    v56 = 259;
    mlir::OpState::emitOpError(this, v55, (uint64_t)v57);
    v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v57);
  }
  return v31;
}

uint64_t mlir::tensor::InsertSliceOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  mlir::IndexType **v21;
  mlir::MLIRContext *v22;
  uint64_t IndexType;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v32[4];
  __int16 v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];
  uint64_t v41[2];
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  __int16 v45;
  uint64_t __src;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  _QWORD v57[4];
  _QWORD v58[6];

  v58[4] = *MEMORY[0x1E0C80C00];
  memset(v58, 0, 24);
  v41[0] = (uint64_t)v58;
  v41[1] = 1;
  memset(v57, 0, 24);
  v40[0] = (uint64_t)v57;
  v40[1] = 1;
  v54 = v56;
  v55 = 0x400000000;
  v38 = 0;
  v39 = 0;
  v51 = v53;
  v52 = 0x400000000;
  v47 = 0;
  v48 = v50;
  v49 = 0x400000000;
  v36[1] = 1;
  v37 = 0;
  v35[1] = 1;
  v36[0] = &v47;
  __src = 0;
  v35[0] = &__src;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v58, 1))
    goto LABEL_31;
  v45 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "into", 4, &v42))goto LABEL_31;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v57, 1))
    goto LABEL_31;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v42 = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v54, &v39, &v42, 0, 2))
    goto LABEL_31;
  v6 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(a2);
  *v6 = v39;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v42 = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v51, &v38, &v42, 0, 2))
    goto LABEL_31;
  v7 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v7 + 8) = v38;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v42 = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v48, &v37, &v42, 0, 2))
    goto LABEL_31;
  v8 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v8 + 16) = v37;
  v32[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_31;
  v9 = a2[1];
  v42 = a1;
  v43 = v32;
  v44 = a2;
  if (!mlir::memref::ReinterpretCastOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::InsertSliceOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v42))goto LABEL_31;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_31;
  v42 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v42))
    goto LABEL_31;
  v47 = v42;
  v45 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "into", 4, &v42))goto LABEL_31;
  v42 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v42))
    goto LABEL_31;
  __src = v42;
  v10 = v55;
  v11 = v52;
  v12 = v49;
  v13 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v13 + 24) = 0x100000001;
  *(_DWORD *)(v13 + 32) = v10;
  *(_DWORD *)(v13 + 36) = v11;
  *(_DWORD *)(v13 + 40) = v12;
  v14 = __src;
  v34 = __src;
  if (*(_UNKNOWN **)(*(_QWORD *)__src + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v33 = 257;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(&v42, a1, v15, v32);
    v16 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v42, "'dest' must be ranked tensor of any type values, but got ");
    v17 = mlir::InFlightDiagnostic::append<mlir::Type &>(v16, &v34);
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v17);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v42);
    v19 = v48;
    if (v48 == v50)
      goto LABEL_34;
LABEL_33:
    free(v19);
    goto LABEL_34;
  }
  v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)__src + 8);
  v42 = v14;
  v43 = (_QWORD *)v20;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v42);
  v21 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v21, v22);
  mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
  v24 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v41, v36, v4, v24)|| !mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v40, v35, v5, v24))
  {
    goto LABEL_31;
  }
  if ((_DWORD)v55)
  {
    v25 = (char *)v54;
    v26 = 32 * v55;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v25, IndexType, v24))
    {
      v25 += 32;
      v26 -= 32;
      if (!v26)
        goto LABEL_22;
    }
LABEL_31:
    v18 = 0;
LABEL_32:
    v19 = v48;
    if (v48 != v50)
      goto LABEL_33;
    goto LABEL_34;
  }
LABEL_22:
  if ((_DWORD)v52)
  {
    v27 = (char *)v51;
    v28 = 32 * v52;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v27, IndexType, v24))
    {
      v27 += 32;
      v28 -= 32;
      if (!v28)
        goto LABEL_26;
    }
    goto LABEL_31;
  }
LABEL_26:
  if ((_DWORD)v49)
  {
    v29 = (char *)v48;
    v30 = 32 * v49;
    v18 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v29, IndexType, v24))
    {
      v29 += 32;
      v30 -= 32;
      if (!v30)
        goto LABEL_32;
    }
    goto LABEL_31;
  }
  v18 = 1;
  v19 = v48;
  if (v48 != v50)
    goto LABEL_33;
LABEL_34:
  if (v51 != v53)
    free(v51);
  if (v54 != v56)
    free(v54);
  return v18;
}

void mlir::tensor::InsertSliceOp::print(mlir::tensor::InsertSliceOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  mlir::Operation *v54;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  llvm::raw_ostream *v60;
  _BYTE *v61;
  llvm::raw_ostream *v62;
  _BYTE *v63;
  llvm::raw_ostream *v64;
  _BYTE *v65;
  llvm::raw_ostream *v66;
  _DWORD *v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  uint64_t v70;
  unint64_t AttrDictionary;
  void *v72;
  uint64_t v73;
  _QWORD v74[4];
  unint64_t v75[2];
  unint64_t v76[2];
  unint64_t v77[3];

  v77[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 3uLL)
  {
    *v9 = 1869901417;
    *((_QWORD *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "into", 4uLL);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v12 = *(_QWORD *)this + 80;
  else
    v12 = 0;
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v12 + 24) + 24));
  v13 = *(_QWORD *)this;
  v14 = *(unsigned int *)(*(_QWORD *)this + 44);
  v15 = (void **)(*(_QWORD *)this + 16 * ((v14 >> 23) & 1) + 64);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v16 = (_DWORD *)(*(_QWORD *)this + 16 * ((v14 >> 23) & 1) + 64);
  else
    v16 = 0;
  v17 = v16[6];
  v18 = v16[7];
  v19 = v16[8];
  if ((v14 & 0x800000) != 0)
    v20 = *(_QWORD *)(v13 + 72);
  else
    v20 = 0;
  v21 = (v18 + v17);
  v22 = v20 + 32 * v21;
  v23 = (v19 + v21) - v21;
  v72 = *v15;
  v24 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v72);
  v26 = v25;
  mlir::ValueRange::ValueRange(v77, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v13, v22, v23, v24, v26, v77[0], v77[1], 0, 0, 2);
  v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v28 = (_BYTE *)*((_QWORD *)v27 + 4);
  if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((_QWORD *)v27 + 4) = v28 + 1;
    *v28 = 32;
  }
  v29 = *(_QWORD *)this;
  v30 = *(unsigned int *)(*(_QWORD *)this + 44);
  v31 = *(_QWORD *)this + 16 * ((v30 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v31 = 0;
  if ((v30 & 0x800000) != 0)
    v32 = *(_QWORD *)(v29 + 72);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 + 28) + *(_DWORD *)(v31 + 24) + *(_DWORD *)(v31 + 32));
  v34 = v32 + 32 * v33;
  v35 = (*(_DWORD *)(v31 + 36) + v33) - v33;
  v72 = *(void **)(v31 + 8);
  v36 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v72);
  v38 = v37;
  mlir::ValueRange::ValueRange(v76, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v29, v34, v35, v36, v38, v76[0], v76[1], 0, 0, 2);
  v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v40 = (_BYTE *)*((_QWORD *)v39 + 4);
  if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
  {
    llvm::raw_ostream::write(v39, 32);
  }
  else
  {
    *((_QWORD *)v39 + 4) = v40 + 1;
    *v40 = 32;
  }
  v41 = *(_QWORD *)this;
  v42 = *(unsigned int *)(*(_QWORD *)this + 44);
  v43 = *(_QWORD *)this + 16 * ((v42 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v43 = 0;
  if ((v42 & 0x800000) != 0)
    v44 = *(_QWORD *)(v41 + 72);
  else
    v44 = 0;
  v45 = (*(_DWORD *)(v43 + 28) + *(_DWORD *)(v43 + 24) + *(_DWORD *)(v43 + 32) + *(_DWORD *)(v43 + 36));
  v46 = v44 + 32 * v45;
  v47 = (*(_DWORD *)(v43 + 40) + v45) - v45;
  v72 = *(void **)(v43 + 16);
  v48 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v72);
  v50 = v49;
  mlir::ValueRange::ValueRange(v75, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v41, v46, v47, v48, v50, v75[0], v75[1], 0, 0, 2);
  v72 = v74;
  v74[0] = "operandSegmentSizes";
  v74[1] = 19;
  v74[2] = "static_offsets";
  v74[3] = 14;
  v73 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v74, 3uLL, 16);
  v51 = (char *)v72 + 16 * v73;
  *v51 = "static_sizes";
  v51[1] = 12;
  v52 = (v73 + 1);
  LODWORD(v73) = v52;
  if (v52 >= HIDWORD(v73))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v74, v52 + 1, 16);
    LODWORD(v52) = v73;
  }
  v53 = (char *)v72 + 16 * v52;
  *v53 = "static_strides";
  v53[1] = 14;
  LODWORD(v73) = v73 + 1;
  v54 = *(mlir::Operation **)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v54);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v54 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v57, v72, v73);
  v58 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v59 = (_BYTE *)*((_QWORD *)v58 + 4);
  if ((unint64_t)v59 >= *((_QWORD *)v58 + 3))
  {
    llvm::raw_ostream::write(v58, 32);
  }
  else
  {
    *((_QWORD *)v58 + 4) = v59 + 1;
    *v59 = 32;
  }
  v60 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v61 = (_BYTE *)*((_QWORD *)v60 + 4);
  if (*((_BYTE **)v60 + 3) == v61)
  {
    llvm::raw_ostream::write(v60, ":", 1uLL);
  }
  else
  {
    *v61 = 58;
    ++*((_QWORD *)v60 + 4);
  }
  v62 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v63 = (_BYTE *)*((_QWORD *)v62 + 4);
  if ((unint64_t)v63 >= *((_QWORD *)v62 + 3))
  {
    llvm::raw_ostream::write(v62, 32);
  }
  else
  {
    *((_QWORD *)v62 + 4) = v63 + 1;
    *v63 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v64 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v65 = (_BYTE *)*((_QWORD *)v64 + 4);
  if ((unint64_t)v65 >= *((_QWORD *)v64 + 3))
  {
    llvm::raw_ostream::write(v64, 32);
  }
  else
  {
    *((_QWORD *)v64 + 4) = v65 + 1;
    *v65 = 32;
  }
  v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v67 = (_DWORD *)*((_QWORD *)v66 + 4);
  if (*((_QWORD *)v66 + 3) - (_QWORD)v67 > 3uLL)
  {
    *v67 = 1869901417;
    *((_QWORD *)v66 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v66, "into", 4uLL);
  }
  v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v69 = (_BYTE *)*((_QWORD *)v68 + 4);
  if ((unint64_t)v69 >= *((_QWORD *)v68 + 3))
  {
    llvm::raw_ostream::write(v68, 32);
  }
  else
  {
    *((_QWORD *)v68 + 4) = v69 + 1;
    *v69 = 32;
  }
  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v70 = *(_QWORD *)this + 80;
  else
    v70 = 0;
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v70 + 24) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v72 != v74)
    free(v72);
}

uint64_t mlir::tensor::detail::PackOpGenericAdaptorBase::PackOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t Context;
  unint64_t v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v5;
  v9 = *(_OWORD *)(v5 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v5 + 32);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.pack", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::PackOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  int *v56;
  char *v57;
  char *v58;
  __int128 v59;
  _QWORD **v60;
  _QWORD **v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  int *v66;
  char *v67;
  char *v68;
  __int128 v69;
  _QWORD **v70;
  _QWORD **v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  int *v76;
  char *v77;
  char *v78;
  __int128 v79;
  int *v80;
  char *v81;
  char *v82;
  __int128 v83;
  _QWORD **v84;
  _QWORD **v85;
  void *v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  uint64_t v108;
  int v109;
  const char *v110;
  uint64_t v111;
  _QWORD v112[3];
  void *v113;
  unsigned int v114;
  unsigned int v115;
  _BYTE v116[96];
  void *v117;
  _QWORD *v118;
  void *__p;
  _QWORD **v120;
  char v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v108 = v6;
  if (!v6)
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v110 = "expected DictionaryAttr to set properties";
      v111 = 41;
      v16 = &v109;
      v17 = (char *)v113;
      if (v114 >= v115)
      {
        v90 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v99 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v90, 24);
          v17 = (char *)v113;
          v16 = (int *)((char *)v113 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v90, 24);
          v16 = &v109;
          v17 = (char *)v113;
        }
      }
      v18 = &v17[24 * v114];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      ++v114;
      if (v112[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
    }
    if (!v121)
      return 0;
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v120;
      v22 = __p;
      if (v120 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v120 = v20;
      operator delete(v22);
    }
    v23 = v117;
    if (!v117)
      goto LABEL_120;
    v24 = v118;
    v25 = v117;
    if (v118 == v117)
    {
LABEL_119:
      v118 = v23;
      operator delete(v25);
LABEL_120:
      if (v113 != v116)
        free(v113);
      return 0;
    }
    do
    {
      v27 = (void *)*--v24;
      v26 = v27;
      *v24 = 0;
      if (v27)
        operator delete[](v26);
    }
    while (v24 != v23);
LABEL_118:
    v25 = v117;
    goto LABEL_119;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "inner_dims_pos", 0xEuLL);
  if (!v8)
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v110 = "expected key entry for inner_dims_pos in DictionaryAttr to set Properties.";
      v111 = 74;
      v28 = &v109;
      v29 = (char *)v113;
      if (v114 >= v115)
      {
        v91 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v100 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v91, 24);
          v29 = (char *)v113;
          v28 = (int *)((char *)v113 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v91, 24);
          v28 = &v109;
          v29 = (char *)v113;
        }
      }
      v30 = &v29[24 * v114];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v114;
      if (v112[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
    }
    if (!v121)
      return 0;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v120;
      v34 = __p;
      if (v120 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v120 = v32;
      operator delete(v34);
    }
    v23 = v117;
    if (!v117)
      goto LABEL_120;
    v35 = v118;
    v25 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v37 = (void *)*--v35;
      v36 = v37;
      *v35 = 0;
      if (v37)
        operator delete[](v36);
    }
    while (v35 != v23);
    goto LABEL_118;
  }
  v9 = (uint64_t)v8;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v111 = 59;
      v38 = &v109;
      v39 = (char *)v113;
      if (v114 >= v115)
      {
        v92 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v101 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v92, 24);
          v39 = (char *)v113;
          v38 = (int *)((char *)v113 + v101);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v92, 24);
          v38 = &v109;
          v39 = (char *)v113;
        }
      }
      v40 = &v39[24 * v114];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      ++v114;
      if (v112[0])
      {
        v42 = &v109;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v9);
        v43 = (char *)v113;
        if (v114 >= v115)
        {
          v93 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            v102 = (char *)&v109 - (_BYTE *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v93, 24);
            v43 = (char *)v113;
            v42 = (int *)((char *)v113 + v102);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v93, 24);
            v42 = &v109;
            v43 = (char *)v113;
          }
        }
        v44 = &v43[24 * v114];
        v45 = *(_OWORD *)v42;
        *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
        *(_OWORD *)v44 = v45;
        ++v114;
        if (v112[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
      }
    }
    if (!v121)
      return 0;
    v46 = (_QWORD **)__p;
    if (__p)
    {
      v47 = v120;
      v48 = __p;
      if (v120 != __p)
      {
        do
          v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        v48 = __p;
      }
      v120 = v46;
      operator delete(v48);
    }
    v23 = v117;
    if (!v117)
      goto LABEL_120;
    v49 = v118;
    v25 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v51 = (void *)*--v49;
      v50 = v51;
      *v49 = 0;
      if (v51)
        operator delete[](v50);
    }
    while (v49 != v23);
    goto LABEL_118;
  }
  *a1 = v9;
  v10 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "outer_dims_perm", 0xFuLL);
  if (!v10)
    goto LABEL_10;
  v11 = (uint64_t)v10;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v10))
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v111 = 60;
      v52 = &v109;
      v53 = (char *)v113;
      if (v114 >= v115)
      {
        v94 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v103 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v94, 24);
          v53 = (char *)v113;
          v52 = (int *)((char *)v113 + v103);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v94, 24);
          v52 = &v109;
          v53 = (char *)v113;
        }
      }
      v54 = &v53[24 * v114];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
      *(_OWORD *)v54 = v55;
      ++v114;
      if (v112[0])
      {
        v56 = &v109;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v11);
        v57 = (char *)v113;
        if (v114 >= v115)
        {
          v97 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            v106 = (char *)&v109 - (_BYTE *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v97, 24);
            v57 = (char *)v113;
            v56 = (int *)((char *)v113 + v106);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v97, 24);
            v56 = &v109;
            v57 = (char *)v113;
          }
        }
        v58 = &v57[24 * v114];
        v59 = *(_OWORD *)v56;
        *((_QWORD *)v58 + 2) = *((_QWORD *)v56 + 2);
        *(_OWORD *)v58 = v59;
        ++v114;
        if (v112[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
      }
    }
    if (!v121)
      return 0;
    v60 = (_QWORD **)__p;
    if (__p)
    {
      v61 = v120;
      v62 = __p;
      if (v120 != __p)
      {
        do
          v61 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v61 - 1);
        while (v61 != v60);
        v62 = __p;
      }
      v120 = v60;
      operator delete(v62);
    }
    v23 = v117;
    if (!v117)
      goto LABEL_120;
    v63 = v118;
    v25 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v65 = (void *)*--v63;
      v64 = v65;
      *v63 = 0;
      if (v65)
        operator delete[](v64);
    }
    while (v63 != v23);
    goto LABEL_118;
  }
  a1[1] = v11;
LABEL_10:
  v12 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "static_inner_tiles", 0x12uLL);
  if (!v12)
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v110 = "expected key entry for static_inner_tiles in DictionaryAttr to set Properties.";
      v111 = 78;
      v66 = &v109;
      v67 = (char *)v113;
      if (v114 >= v115)
      {
        v95 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v104 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v95, 24);
          v67 = (char *)v113;
          v66 = (int *)((char *)v113 + v104);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v95, 24);
          v66 = &v109;
          v67 = (char *)v113;
        }
      }
      v68 = &v67[24 * v114];
      v69 = *(_OWORD *)v66;
      *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
      *(_OWORD *)v68 = v69;
      ++v114;
      if (v112[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
    }
    if (!v121)
      return 0;
    v70 = (_QWORD **)__p;
    if (__p)
    {
      v71 = v120;
      v72 = __p;
      if (v120 != __p)
      {
        do
          v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
        while (v71 != v70);
        v72 = __p;
      }
      v120 = v70;
      operator delete(v72);
    }
    v23 = v117;
    if (!v117)
      goto LABEL_120;
    v73 = v118;
    v25 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v75 = (void *)*--v73;
      v74 = v75;
      *v73 = 0;
      if (v75)
        operator delete[](v74);
    }
    while (v73 != v23);
    goto LABEL_118;
  }
  v13 = (uint64_t)v12;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v12))
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v111 = 63;
      v76 = &v109;
      v77 = (char *)v113;
      if (v114 >= v115)
      {
        v96 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v105 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v96, 24);
          v77 = (char *)v113;
          v76 = (int *)((char *)v113 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v96, 24);
          v76 = &v109;
          v77 = (char *)v113;
        }
      }
      v78 = &v77[24 * v114];
      v79 = *(_OWORD *)v76;
      *((_QWORD *)v78 + 2) = *((_QWORD *)v76 + 2);
      *(_OWORD *)v78 = v79;
      ++v114;
      if (v112[0])
      {
        v80 = &v109;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v13);
        v81 = (char *)v113;
        if (v114 >= v115)
        {
          v98 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            v107 = (char *)&v109 - (_BYTE *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v98, 24);
            v81 = (char *)v113;
            v80 = (int *)((char *)v113 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v98, 24);
            v80 = &v109;
            v81 = (char *)v113;
          }
        }
        v82 = &v81[24 * v114];
        v83 = *(_OWORD *)v80;
        *((_QWORD *)v82 + 2) = *((_QWORD *)v80 + 2);
        *(_OWORD *)v82 = v83;
        ++v114;
        if (v112[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
      }
    }
    if (!v121)
      return 0;
    v84 = (_QWORD **)__p;
    if (__p)
    {
      v85 = v120;
      v86 = __p;
      if (v120 != __p)
      {
        do
          v85 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v85 - 1);
        while (v85 != v84);
        v86 = __p;
      }
      v120 = v84;
      operator delete(v86);
    }
    v23 = v117;
    if (!v117)
      goto LABEL_120;
    v87 = v118;
    v25 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v89 = (void *)*--v87;
      v88 = v89;
      *v87 = 0;
      if (v89)
        operator delete[](v88);
    }
    while (v87 != v23);
    goto LABEL_118;
  }
  a1[2] = v13;
  v14 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "operandSegmentSizes", 0x13uLL);
  if (v14 || (v14 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "operand_segment_sizes", 0x15uLL)) != 0)
  {
    if (mlir::convertFromAttribute(a1 + 3, (const char *)4, v14, a3, a4))
      return 1;
  }
  else
  {
    a3(v112, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v112, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v112);
  }
  return 0;
}

uint64_t mlir::tensor::PackOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t DictionaryAttr;
  void *v30;
  mlir::DictionaryAttr *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x1E0C80C00];
  v32 = a1;
  v33 = v35;
  v34 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v32, (uint64_t)"inner_dims_pos", 14, *a2);
    v6 = v5;
    v7 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v7 = v34;
    }
    v8 = (uint64_t *)((char *)v33 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v34) = v34 + 1;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"outer_dims_perm", 15, v9);
    v12 = v11;
    v13 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v13 = v34;
    }
    v14 = (uint64_t *)((char *)v33 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    LODWORD(v34) = v34 + 1;
  }
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_inner_tiles", 18, v15);
    v18 = v17;
    v19 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v19 = v34;
    }
    v20 = (uint64_t *)((char *)v33 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    LODWORD(v34) = v34 + 1;
  }
  v21 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
  v22 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"operandSegmentSizes", 19, v21);
  v24 = v23;
  v25 = v34;
  if (v34 >= HIDWORD(v34))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
    v25 = v34;
  }
  v26 = (uint64_t *)((char *)v33 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  v27 = __CFADD__((_DWORD)v34, 1);
  v28 = (v34 + 1);
  LODWORD(v34) = v34 + 1;
  if (v27)
  {
    DictionaryAttr = 0;
    v30 = v33;
    if (v33 == v35)
      return DictionaryAttr;
    goto LABEL_20;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v32, (mlir::MLIRContext *)v33, v28);
  v30 = v33;
  if (v33 != v35)
LABEL_20:
    free(v30);
  return DictionaryAttr;
}

uint64_t mlir::tensor::PackOp::getInherentAttr(mlir::MLIRContext *a1, _QWORD *a2, _QWORD *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 0xEuLL:
      if (*__s1 != 0x69645F72656E6E69 || *(_QWORD *)((char *)__s1 + 6) != 0x736F705F736D6964)
        goto LABEL_13;
      return *a2;
    case 0xFuLL:
      if (memcmp(__s1, "outer_dims_perm", __n))
        goto LABEL_13;
      return a2[1];
    case 0x10uLL:
    case 0x11uLL:
    case 0x14uLL:
      goto LABEL_13;
    case 0x12uLL:
      if (memcmp(__s1, "static_inner_tiles", __n))
        goto LABEL_13;
      result = a2[2];
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_13;
      goto LABEL_15;
    case 0x15uLL:
      if (!memcmp(__s1, "operand_segment_sizes", __n))
LABEL_15:
        result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
      else
LABEL_13:
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::tensor::PackOp::setInherentAttr(uint64_t result, _QWORD *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 0xEuLL:
      if (*__s1 == 0x69645F72656E6E69 && *(_QWORD *)((char *)__s1 + 6) == 0x736F705F736D6964)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v11 = a4;
          else
            v11 = 0;
          *v5 = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      break;
    case 0xFuLL:
      result = memcmp(__s1, "outer_dims_perm", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v7 = a4;
          else
            v7 = 0;
          v5[1] = v7;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0x12uLL:
      result = memcmp(__s1, "static_inner_tiles", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v8 = a4;
          else
            v8 = 0;
          v5[2] = v8;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!(_DWORD)result)
        goto LABEL_22;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!(_DWORD)result)
      {
LABEL_22:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v9 = (_DWORD)result ? a4 : 0;
          v12 = v9;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 4)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v10)
                result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v10);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::tensor::PackOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"inner_dims_pos", 14, *a2);
  v6 = a2[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"outer_dims_perm", 15, v6);
  v7 = a2[2];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_inner_tiles", 18, v7);
  v8 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v8);
}

BOOL mlir::tensor::PackOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL8 result;

  v8 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v8, (const void **)"inner_dims_pos", (const char *)0xE, a3, a4))
  {
    v9 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v9, (const void **)"outer_dims_perm", (const char *)0xF, a3, a4))
    {
      v10 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v10, (const void **)"static_inner_tiles", (const char *)0x12, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

BOOL mlir::tensor::PackOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 3, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_QWORD *)v3 + 4) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_1EDC07000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::PackOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v4[43];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const void ***v17;
  char *v18;
  char *v19;
  __int128 v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  _WORD v39[20];
  _QWORD *v40;
  const void **v41;
  unint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[96];
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 56))(a1, &v40))
    return 0;
  v4 = v40;
  if (!v40)
    return 1;
  v5 = mlir::detail::DenseArrayAttrImpl<long long>::classof(v40);
  v6 = v5 ? v4 : 0;
  *a2 = v6;
  if (v5)
    return 1;
  v39[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v45, a1, v39);
  if (v45)
  {
    LODWORD(v41) = 3;
    v42 = (unint64_t)"expected ";
    v43 = 9;
    v9 = &v41;
    v10 = (char *)v47;
    if (v48 >= v49)
    {
      v33 = v48 + 1;
      if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
      {
        v36 = (char *)&v41 - (_BYTE *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
        v10 = (char *)v47;
        v9 = (const void ***)((char *)v47 + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
        v9 = &v41;
        v10 = (char *)v47;
      }
    }
    v11 = &v10[24 * v48];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v48;
  }
  v41 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::DenseArrayAttrImpl<int64_t>]";
  v42 = 91;
  v13 = llvm::StringRef::find((uint64_t *)&v41, "DesiredTypeName = ", 0x12uLL, 0);
  if (v45)
  {
    if (v42 >= v13)
      v14 = v13;
    else
      v14 = v42;
    v15 = 18;
    if (v42 - v14 < 0x12)
      v15 = v42 - v14;
    v16 = v42 - v14 - v15;
    if (v16 >= v16 - 1)
      --v16;
    v44 = 261;
    v41 = (const void **)((char *)v41 + v14 + v15);
    v42 = v16;
    mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
    if (v45)
    {
      LODWORD(v41) = 3;
      v42 = (unint64_t)", but got: ";
      v43 = 11;
      v17 = &v41;
      v18 = (char *)v47;
      if (v48 >= v49)
      {
        v34 = v48 + 1;
        if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
        {
          v37 = (char *)&v41 - (_BYTE *)v47;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
          v18 = (char *)v47;
          v17 = (const void ***)((char *)v47 + v37);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
          v17 = &v41;
          v18 = (char *)v47;
        }
      }
      v19 = &v18[24 * v48];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = v17[2];
      *(_OWORD *)v19 = v20;
      ++v48;
      if (v45)
      {
        v21 = &v41;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v41, (uint64_t)v40);
        v22 = (char *)v47;
        if (v48 >= v49)
        {
          v35 = v48 + 1;
          if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
          {
            v38 = (char *)&v41 - (_BYTE *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            v22 = (char *)v47;
            v21 = (const void ***)((char *)v47 + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            v21 = &v41;
            v22 = (char *)v47;
          }
        }
        v23 = &v22[24 * v48];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = v21[2];
        *(_OWORD *)v23 = v24;
        ++v48;
      }
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  if (v55)
  {
    v25 = (_QWORD **)__p;
    if (__p)
    {
      v26 = v54;
      v27 = __p;
      if (v54 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v54 = v25;
      operator delete(v27);
    }
    v28 = v51;
    if (v51)
    {
      v29 = v52;
      v30 = v51;
      if (v52 != v51)
      {
        do
        {
          v32 = (void *)*--v29;
          v31 = v32;
          *v29 = 0;
          if (v32)
            operator delete[](v31);
        }
        while (v29 != v28);
        v30 = v51;
      }
      v52 = v28;
      operator delete(v30);
    }
    if (v47 != v50)
      free(v47);
  }
  return v7;
}

uint64_t mlir::tensor::PackOp::writeProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v4 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
    v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 24, 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v4 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 16));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 24), 4);
  return result;
}

uint64_t mlir::tensor::PackOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t ODSOperands;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t NextResultAtOffset;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unsigned int v54;
  const void **v55[4];
  __int16 v56;
  _QWORD v57[3];
  void *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v55[0] = (const void **)"requires attribute 'inner_dims_pos'";
    v56 = 259;
    mlir::OpState::emitOpError(this, v55, (uint64_t)v57);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    if (!v64)
      return v27;
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v63;
      v30 = __p;
      if (v63 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v63 = v28;
      operator delete(v30);
    }
    v31 = v60;
    if (v60)
    {
      v32 = v61;
      v33 = v60;
      if (v61 == v60)
        goto LABEL_51;
      do
      {
        v35 = (void *)*--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v32 != v31);
LABEL_50:
      v33 = v60;
LABEL_51:
      v61 = v31;
      operator delete(v33);
    }
LABEL_52:
    if (v58 != &v59)
      free(v58);
    return v27;
  }
  v5 = *(_QWORD **)(v3 + 16);
  if (!v5)
  {
    v55[0] = (const void **)"requires attribute 'static_inner_tiles'";
    v56 = 259;
    mlir::OpState::emitOpError(this, v55, (uint64_t)v57);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    if (!v64)
      return v27;
    v36 = (_QWORD **)__p;
    if (__p)
    {
      v37 = v63;
      v38 = __p;
      if (v63 != __p)
      {
        do
          v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        v38 = __p;
      }
      v63 = v36;
      operator delete(v38);
    }
    v31 = v60;
    if (v60)
    {
      v39 = v61;
      v33 = v60;
      if (v61 == v60)
        goto LABEL_51;
      do
      {
        v41 = (void *)*--v39;
        v40 = v41;
        *v39 = 0;
        if (v41)
          operator delete[](v40);
      }
      while (v39 != v31);
      goto LABEL_50;
    }
    goto LABEL_52;
  }
  v6 = *(_QWORD **)(v3 + 8);
  v57[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"outer_dims_perm", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v57))return 0;
  v57[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"inner_dims_pos", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v57))return 0;
  v57[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"static_inner_tiles", (const char *)0x12, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v57))return 0;
  v54 = 0;
  v7 = *((unsigned int *)*this + 11);
  v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v8 = 0;
  v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    v10 = (*this)[9];
    if ((_DWORD)v9)
      goto LABEL_13;
  }
  else
  {
    v10 = 0;
    if ((_DWORD)v9)
    {
LABEL_13:
      v11 = 0;
      v12 = v10 + 24;
      while (1)
      {
        v13 = *this;
        v14 = *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8;
        v54 = v11 + 1;
        if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(v13, v14, (const void **)"operand", (const void **)7, v11))return 0;
        ++v11;
        v12 += 32;
        if (v9 == v11)
        {
          ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
          if (!v16)
            goto LABEL_56;
          goto LABEL_17;
        }
      }
    }
  }
  LODWORD(v11) = 0;
  ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
  if (v16)
  {
LABEL_17:
    v17 = v16;
    v18 = ODSOperands + 24;
    while (1)
    {
      v19 = *this;
      v20 = *(_QWORD *)(*(_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFFFF8;
      v21 = v11 + 1;
      v54 = v11 + 1;
      if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(v19, v20, (const void **)"operand", (const void **)7, v11))return 0;
      v18 += 32;
      LODWORD(v11) = v11 + 1;
      if (!--v17)
      {
        mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
        v23 = v22;
        if (v22 < 2)
          goto LABEL_57;
        goto LABEL_21;
      }
    }
  }
LABEL_56:
  v21 = v11;
  mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
  v23 = v42;
  if (v42 >= 2)
  {
LABEL_21:
    v55[0] = (const void **)"operand group starting at #";
    v56 = 259;
    mlir::OpState::emitOpError(this, v55, (uint64_t)v57);
    v24 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v57, &v54);
    v25 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v24, " requires 0 or 1 element, but found ");
    v53 = v23;
    v26 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<unsigned long>(v25, &v53);
LABEL_70:
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v57);
    return v27;
  }
LABEL_57:
  v43 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 3u);
  if (v44)
  {
    v45 = v44;
    v46 = v21 + v23;
    v47 = v43 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v47 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v46))
    {
      ++v46;
      v47 += 32;
      if (!--v45)
        goto LABEL_61;
    }
    return 0;
  }
LABEL_61:
  v48 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v48, 0);
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  v27 = 1;
  v50 = *(_QWORD *)(*(_QWORD *)(mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)*this + 9))
    v51 = (uint64_t)(*this - 2);
  else
    v51 = 0;
  if (v50 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v51, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v55[0] = (const void **)"failed to verify that result type matches type of dest";
    v56 = 259;
    mlir::OpState::emitOpError(this, v55, (uint64_t)v57);
    v26 = v57;
    goto LABEL_70;
  }
  return v27;
}

uint64_t mlir::tensor::PackOp::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"tensor.pack", 11, v2, v3, 0, 0);
  *v4 = &off_1E0E52C60;
  v4[12] = mlir::tensor::PackOp::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::tensor::PackOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  __int128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  mlir::IndexType **v27;
  mlir::MLIRContext *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v34;
  int64_t v35;
  uint64_t IndexType;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[2];
  uint64_t v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  __int16 v50;
  uint64_t __src;
  uint64_t v52;
  void *v53[4];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  void *v57[2];
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _BYTE v61[128];
  _QWORD v62[6];

  v62[4] = *MEMORY[0x1E0C80C00];
  memset(v62, 0, 24);
  v46[0] = (uint64_t)v62;
  v46[1] = 1;
  v59 = v61;
  v60 = 0x400000000;
  v57[0] = &v58;
  v57[1] = (void *)0x100000000;
  v44 = 0;
  v45 = 0;
  v54 = v56;
  v55 = 0x400000000;
  v42[1] = 1;
  v43 = 0;
  memset(v53, 0, 24);
  v41[1] = 1;
  v42[0] = (uint64_t)v53;
  __src = 0;
  v52 = 0;
  v40[1] = 1;
  v41[0] = &v52;
  v40[0] = &__src;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v62, 1))
    goto LABEL_47;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "padding_value", 13))
  {
    if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
      goto LABEL_47;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 680))(a1, &v47, 1);
    if (v6 >= 0x100u)
    {
      if (!(_BYTE)v6)
        goto LABEL_47;
      v7 = &v47;
      v8 = (char *)v59;
      if (v60 >= HIDWORD(v60))
      {
        v34 = v60 + 1;
        if (v59 <= &v47 && (char *)v59 + 32 * v60 > (char *)&v47)
        {
          v35 = (char *)&v47 - (_BYTE *)v59;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v34, 32);
          v8 = (char *)v59;
          v7 = (uint64_t *)((char *)v59 + v35);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v34, 32);
          v7 = &v47;
          v8 = (char *)v59;
        }
      }
      v9 = &v8[32 * v60];
      v10 = *((_OWORD *)v7 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v7;
      *((_OWORD *)v9 + 1) = v10;
      LODWORD(v60) = v60 + 1;
    }
    if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      goto LABEL_47;
    v47 = 0;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 520))(a1, &v47);
    if (v11 >= 0x100u)
    {
      if (!(_BYTE)v11)
        goto LABEL_47;
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v57, v47);
    }
    if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
      goto LABEL_47;
  }
  else
  {
    v5 = 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "outer_dims_perm", 15))
  {
    if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1)
      || !mlir::AsmParser::parseCustomAttributeWithFallback<mlir::detail::DenseArrayAttrImpl<long long>>(a1, &v45, 0))
    {
      goto LABEL_47;
    }
    if (v45)
    {
      v12 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(a2);
      *(_QWORD *)(v12 + 8) = v45;
    }
  }
  v50 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "inner_dims_pos", 14, &v47)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1)|| !mlir::AsmParser::parseCustomAttributeWithFallback<mlir::detail::DenseArrayAttrImpl<long long>>(a1, &v44, 0))
  {
    goto LABEL_47;
  }
  if (v44)
  {
    v13 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(a2);
    *v13 = v44;
  }
  v50 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "inner_tiles", 11, &v47))goto LABEL_47;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
    goto LABEL_47;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v47 = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v54, &v43, &v47, 0, 2))
    goto LABEL_47;
  v14 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v14 + 16) = v43;
  v50 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "into", 4, &v47))goto LABEL_47;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 672))(a1, v53, 1))
    goto LABEL_47;
  v37[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_47;
  v16 = a2[1];
  v47 = a1;
  v48 = v37;
  v49 = a2;
  if (!mlir::tensor::PackOp::verifyInherentAttrs(v16, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::PackOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v47))goto LABEL_47;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_47;
  v47 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v47))
    goto LABEL_47;
  v52 = v47;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
    goto LABEL_47;
  v47 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v47))
    goto LABEL_47;
  __src = v47;
  v17 = v60;
  v18 = v55;
  v19 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v19 + 24) = 0x100000001;
  *(_DWORD *)(v19 + 32) = v17;
  *(_DWORD *)(v19 + 36) = v18;
  v20 = __src;
  v39 = __src;
  if (*(_UNKNOWN **)(*(_QWORD *)__src + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v38 = 257;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(&v47, a1, v21, v37);
    v22 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v47, "'dest' must be ranked tensor of any type values, but got ");
    v23 = mlir::InFlightDiagnostic::append<mlir::Type &>(v22, &v39);
    v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v23);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v47);
    v25 = v54;
    if (v54 == v56)
      goto LABEL_50;
    goto LABEL_49;
  }
  v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)__src + 8);
  v47 = v20;
  v48 = (_QWORD *)v26;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v47);
  v27 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v27, v28);
  mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v46, v41, v4, (uint64_t)(a2 + 2)))goto LABEL_47;
  v29 = v15;
  v30 = a2 + 2;
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v42, v40, v29, (uint64_t)(a2 + 2))|| !mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v59, (uint64_t)v57, v5, (uint64_t)(a2 + 2)))
  {
    goto LABEL_47;
  }
  if (!(_DWORD)v55)
  {
    v24 = 1;
    v25 = v54;
    if (v54 == v56)
      goto LABEL_50;
LABEL_49:
    free(v25);
    goto LABEL_50;
  }
  v31 = (char *)v54;
  v32 = 32 * v55;
  v24 = 1;
  while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v31, IndexType, v30))
  {
    v31 += 32;
    v32 -= 32;
    if (!v32)
      goto LABEL_48;
  }
LABEL_47:
  v24 = 0;
LABEL_48:
  v25 = v54;
  if (v54 != v56)
    goto LABEL_49;
LABEL_50:
  if (v57[0] != &v58)
    free(v57[0]);
  if (v59 != v61)
    free(v59);
  return v24;
}

void mlir::tensor::PackOp::print(mlir::tensor::PackOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  void *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  unint64_t v34;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  llvm::raw_ostream *v37;
  void *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  llvm::raw_ostream *v48;
  _BYTE *v49;
  llvm::raw_ostream *v50;
  void *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  _QWORD *v58;
  uint64_t v59;
  llvm::raw_ostream *v60;
  _BYTE *v61;
  llvm::raw_ostream *v62;
  uint64_t v63;
  llvm::raw_ostream *v64;
  _BYTE *v65;
  llvm::raw_ostream *v66;
  _BYTE *v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  llvm::raw_ostream *v80;
  _BYTE *v81;
  llvm::raw_ostream *v82;
  _DWORD *v83;
  llvm::raw_ostream *v84;
  _BYTE *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  mlir::Operation *v92;
  mlir::ArrayAttr *p_Context;
  unsigned int v94;
  _QWORD *v95;
  uint64_t Value;
  uint64_t v97;
  llvm::raw_ostream *v98;
  _BYTE *v99;
  llvm::raw_ostream *v100;
  _BYTE *v101;
  llvm::raw_ostream *v102;
  _BYTE *v103;
  llvm::raw_ostream *v104;
  _BYTE *v105;
  llvm::raw_ostream *v106;
  _WORD *v107;
  llvm::raw_ostream *v108;
  _BYTE *v109;
  uint64_t v110;
  mlir::MLIRContext *Context;
  void *v112;
  uint64_t v113;
  _QWORD v114[4];
  unint64_t v115[3];

  v115[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = *(unsigned int *)(*(_QWORD *)this + 44);
  v7 = (_DWORD *)(*(_QWORD *)this + 16 * ((v6 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v7 = 0;
  v8 = v7[8];
  if ((v6 & 0x800000) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (!v8)
      goto LABEL_42;
  }
  else
  {
    v9 = 0;
    if (!v8)
      goto LABEL_42;
  }
  if (!*(_QWORD *)(v9 + 32 * (v7[7] + v7[6]) + 24))
    goto LABEL_42;
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (void *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0xCuLL)
  {
    qmemcpy(v13, "padding_value", 13);
    *((_QWORD *)v12 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v12, "padding_value", 0xDuLL);
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "(", 1uLL);
  }
  else
  {
    *v15 = 40;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = *(unsigned int *)(*(_QWORD *)this + 44);
  v17 = (_DWORD *)(*(_QWORD *)this + 16 * ((v16 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v17 = 0;
  v18 = v17[8];
  if ((v16 & 0x800000) != 0)
  {
    v19 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (!v18)
      goto LABEL_24;
  }
  else
  {
    v19 = 0;
    if (!v18)
      goto LABEL_24;
  }
  if (*(_QWORD *)(v19 + 32 * (v17[7] + v17[6]) + 24))
    (*(void (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 160))(a2);
LABEL_24:
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if (*((_BYTE **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ":", 1uLL);
  }
  else
  {
    *v23 = 58;
    ++*((_QWORD *)v22 + 4);
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  v26 = *(_QWORD *)this;
  v27 = *(unsigned int *)(*(_QWORD *)this + 44);
  v28 = (_DWORD *)(*(_QWORD *)this + 16 * ((v27 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v28 = 0;
  v29 = v28[8];
  if ((v27 & 0x800000) != 0)
  {
    v30 = *(_QWORD *)(v26 + 72);
    if (v29)
      goto LABEL_37;
  }
  else
  {
    v30 = 0;
    if (v29)
    {
LABEL_37:
      v31 = (v28[7] + v28[6]);
      if (*(_QWORD *)(v30 + 32 * v31 + 24))
        (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 72) + 32 * v31 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if (*((_BYTE **)v32 + 3) == v33)
  {
    llvm::raw_ostream::write(v32, ")", 1uLL);
  }
  else
  {
    *v33 = 41;
    ++*((_QWORD *)v32 + 4);
  }
LABEL_42:
  v34 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v34 = 0;
  if (*(_QWORD *)(v34 + 8))
  {
    v35 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v36 = (_BYTE *)*((_QWORD *)v35 + 4);
    if ((unint64_t)v36 >= *((_QWORD *)v35 + 3))
    {
      llvm::raw_ostream::write(v35, 32);
    }
    else
    {
      *((_QWORD *)v35 + 4) = v36 + 1;
      *v36 = 32;
    }
    v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v38 = (void *)*((_QWORD *)v37 + 4);
    if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0xEuLL)
    {
      qmemcpy(v38, "outer_dims_perm", 15);
      *((_QWORD *)v37 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v37, "outer_dims_perm", 0xFuLL);
    }
    v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v40 = (_BYTE *)*((_QWORD *)v39 + 4);
    if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
    {
      llvm::raw_ostream::write(v39, 32);
    }
    else
    {
      *((_QWORD *)v39 + 4) = v40 + 1;
      *v40 = 32;
    }
    v41 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v42 = (_BYTE *)*((_QWORD *)v41 + 4);
    if (*((_BYTE **)v41 + 3) == v42)
    {
      llvm::raw_ostream::write(v41, "=", 1uLL);
    }
    else
    {
      *v42 = 61;
      ++*((_QWORD *)v41 + 4);
    }
    v43 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v44 = (_BYTE *)*((_QWORD *)v43 + 4);
    if ((unint64_t)v44 >= *((_QWORD *)v43 + 3))
    {
      llvm::raw_ostream::write(v43, 32);
    }
    else
    {
      *((_QWORD *)v43 + 4) = v44 + 1;
      *v44 = 32;
    }
    v45 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v45 = 0;
    v112 = *(void **)(v45 + 8);
    if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
    {
      v46 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v47 = (*(uint64_t (**)(_QWORD *))(*v46 + 80))(v46) + v46[4] - v46[2];
      mlir::detail::DenseArrayAttrImpl<long long>::print((llvm::raw_ostream *)&v112, (uint64_t)a2);
      if (v47 == (*(uint64_t (**)(_QWORD *))(*v46 + 80))(v46) + v46[4] - v46[2])
        (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v112);
    }
  }
  v48 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v49 = (_BYTE *)*((_QWORD *)v48 + 4);
  if ((unint64_t)v49 >= *((_QWORD *)v48 + 3))
  {
    llvm::raw_ostream::write(v48, 32);
  }
  else
  {
    *((_QWORD *)v48 + 4) = v49 + 1;
    *v49 = 32;
  }
  v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v51 = (void *)*((_QWORD *)v50 + 4);
  if (*((_QWORD *)v50 + 3) - (_QWORD)v51 > 0xDuLL)
  {
    qmemcpy(v51, "inner_dims_pos", 14);
    *((_QWORD *)v50 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v50, "inner_dims_pos", 0xEuLL);
  }
  v52 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v53 = (_BYTE *)*((_QWORD *)v52 + 4);
  if ((unint64_t)v53 >= *((_QWORD *)v52 + 3))
  {
    llvm::raw_ostream::write(v52, 32);
  }
  else
  {
    *((_QWORD *)v52 + 4) = v53 + 1;
    *v53 = 32;
  }
  v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v55 = (_BYTE *)*((_QWORD *)v54 + 4);
  if (*((_BYTE **)v54 + 3) == v55)
  {
    llvm::raw_ostream::write(v54, "=", 1uLL);
  }
  else
  {
    *v55 = 61;
    ++*((_QWORD *)v54 + 4);
  }
  v56 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v57 = (_BYTE *)*((_QWORD *)v56 + 4);
  if ((unint64_t)v57 >= *((_QWORD *)v56 + 3))
  {
    llvm::raw_ostream::write(v56, 32);
  }
  else
  {
    *((_QWORD *)v56 + 4) = v57 + 1;
    *v57 = 32;
  }
  v112 = *(void **)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
  {
    v58 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v59 = (*(uint64_t (**)(_QWORD *))(*v58 + 80))(v58) + v58[4] - v58[2];
    mlir::detail::DenseArrayAttrImpl<long long>::print((llvm::raw_ostream *)&v112, (uint64_t)a2);
    if (v59 == (*(uint64_t (**)(_QWORD *))(*v58 + 80))(v58) + v58[4] - v58[2])
      (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v112);
  }
  v60 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v61 = (_BYTE *)*((_QWORD *)v60 + 4);
  if ((unint64_t)v61 >= *((_QWORD *)v60 + 3))
  {
    llvm::raw_ostream::write(v60, 32);
  }
  else
  {
    *((_QWORD *)v60 + 4) = v61 + 1;
    *v61 = 32;
  }
  v62 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v63 = *((_QWORD *)v62 + 4);
  if ((unint64_t)(*((_QWORD *)v62 + 3) - v63) > 0xA)
  {
    *(_DWORD *)(v63 + 7) = 1936026729;
    *(_QWORD *)v63 = *(_QWORD *)"inner_tiles";
    *((_QWORD *)v62 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v62, "inner_tiles", 0xBuLL);
  }
  v64 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v65 = (_BYTE *)*((_QWORD *)v64 + 4);
  if ((unint64_t)v65 >= *((_QWORD *)v64 + 3))
  {
    llvm::raw_ostream::write(v64, 32);
  }
  else
  {
    *((_QWORD *)v64 + 4) = v65 + 1;
    *v65 = 32;
  }
  v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v67 = (_BYTE *)*((_QWORD *)v66 + 4);
  if (*((_BYTE **)v66 + 3) == v67)
  {
    llvm::raw_ostream::write(v66, "=", 1uLL);
  }
  else
  {
    *v67 = 61;
    ++*((_QWORD *)v66 + 4);
  }
  v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v69 = (_BYTE *)*((_QWORD *)v68 + 4);
  if ((unint64_t)v69 >= *((_QWORD *)v68 + 3))
  {
    llvm::raw_ostream::write(v68, 32);
  }
  else
  {
    *((_QWORD *)v68 + 4) = v69 + 1;
    *v69 = 32;
  }
  v70 = *(_QWORD *)this;
  v71 = *(unsigned int *)(*(_QWORD *)this + 44);
  v72 = *(_QWORD *)this + 16 * ((v71 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v72 = 0;
  if ((v71 & 0x800000) != 0)
    v73 = *(_QWORD *)(v70 + 72);
  else
    v73 = 0;
  v74 = (*(_DWORD *)(v72 + 28) + *(_DWORD *)(v72 + 24) + *(_DWORD *)(v72 + 32));
  v75 = v73 + 32 * v74;
  v76 = (*(_DWORD *)(v72 + 36) + v74) - v74;
  v112 = *(void **)(v72 + 16);
  v77 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v112);
  v79 = v78;
  mlir::ValueRange::ValueRange(v115, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v70, v75, v76, v77, v79, v115[0], v115[1], 0, 0, 2);
  v80 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v81 = (_BYTE *)*((_QWORD *)v80 + 4);
  if ((unint64_t)v81 >= *((_QWORD *)v80 + 3))
  {
    llvm::raw_ostream::write(v80, 32);
  }
  else
  {
    *((_QWORD *)v80 + 4) = v81 + 1;
    *v81 = 32;
  }
  v82 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v83 = (_DWORD *)*((_QWORD *)v82 + 4);
  if (*((_QWORD *)v82 + 3) - (_QWORD)v83 > 3uLL)
  {
    *v83 = 1869901417;
    *((_QWORD *)v82 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v82, "into", 4uLL);
  }
  v84 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v85 = (_BYTE *)*((_QWORD *)v84 + 4);
  if ((unint64_t)v85 >= *((_QWORD *)v84 + 3))
  {
    llvm::raw_ostream::write(v84, 32);
  }
  else
  {
    *((_QWORD *)v84 + 4) = v85 + 1;
    *v85 = 32;
  }
  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v86 = *(_QWORD *)this + 80;
  else
    v86 = 0;
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v86 + 24) + 24));
  v112 = v114;
  v114[0] = "operandSegmentSizes";
  v114[1] = 19;
  v114[2] = "outer_dims_perm";
  v114[3] = 15;
  v113 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, 3uLL, 16);
  v87 = (char *)v112 + 16 * v113;
  *v87 = "inner_dims_pos";
  v87[1] = 14;
  v88 = (v113 + 1);
  LODWORD(v113) = v88;
  if (v88 >= HIDWORD(v113))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, v88 + 1, 16);
    LODWORD(v88) = v113;
  }
  v89 = (char *)v112 + 16 * v88;
  *v89 = "static_inner_tiles";
  v89[1] = 18;
  LODWORD(v113) = v113 + 1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  v90 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v90 = 0;
  v91 = *(_QWORD *)(v90 + 8);
  if (v91 && v91 == mlir::Builder::getDenseI64ArrayAttr(&Context, 0, 0))
  {
    v94 = v113;
    if (v113 >= HIDWORD(v113))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, v113 + 1, 16);
      v94 = v113;
    }
    v95 = (char *)v112 + 16 * v94;
    *v95 = "outer_dims_perm";
    v95[1] = 15;
    LODWORD(v113) = v113 + 1;
    v92 = *(mlir::Operation **)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_121;
  }
  else
  {
    v92 = *(mlir::Operation **)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_121:
      p_Context = (mlir::Operation *)((char *)v92 + 56);
      goto LABEL_126;
    }
  }
  Context = (mlir::MLIRContext *)mlir::Operation::getAttrDictionary(v92);
  p_Context = (mlir::ArrayAttr *)&Context;
LABEL_126:
  Value = mlir::ArrayAttr::getValue(p_Context);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v97, v112, v113);
  v98 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v99 = (_BYTE *)*((_QWORD *)v98 + 4);
  if ((unint64_t)v99 >= *((_QWORD *)v98 + 3))
  {
    llvm::raw_ostream::write(v98, 32);
  }
  else
  {
    *((_QWORD *)v98 + 4) = v99 + 1;
    *v99 = 32;
  }
  v100 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v101 = (_BYTE *)*((_QWORD *)v100 + 4);
  if (*((_BYTE **)v100 + 3) == v101)
  {
    llvm::raw_ostream::write(v100, ":", 1uLL);
  }
  else
  {
    *v101 = 58;
    ++*((_QWORD *)v100 + 4);
  }
  v102 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v103 = (_BYTE *)*((_QWORD *)v102 + 4);
  if ((unint64_t)v103 >= *((_QWORD *)v102 + 3))
  {
    llvm::raw_ostream::write(v102, 32);
  }
  else
  {
    *((_QWORD *)v102 + 4) = v103 + 1;
    *v103 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v104 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v105 = (_BYTE *)*((_QWORD *)v104 + 4);
  if ((unint64_t)v105 >= *((_QWORD *)v104 + 3))
  {
    llvm::raw_ostream::write(v104, 32);
  }
  else
  {
    *((_QWORD *)v104 + 4) = v105 + 1;
    *v105 = 32;
  }
  v106 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v107 = (_WORD *)*((_QWORD *)v106 + 4);
  if (*((_QWORD *)v106 + 3) - (_QWORD)v107 > 1uLL)
  {
    *v107 = 15917;
    *((_QWORD *)v106 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v106, "->", 2uLL);
  }
  v108 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v109 = (_BYTE *)*((_QWORD *)v108 + 4);
  if ((unint64_t)v109 >= *((_QWORD *)v108 + 3))
  {
    llvm::raw_ostream::write(v108, 32);
  }
  else
  {
    *((_QWORD *)v108 + 4) = v109 + 1;
    *v109 = 32;
  }
  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v110 = *(_QWORD *)this + 80;
  else
    v110 = 0;
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v110 + 24) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v112 != v114)
    free(v112);
}

uint64_t mlir::tensor::detail::PadOpGenericAdaptorBase::PadOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t Context;
  unint64_t v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v5;
  v9 = *(_OWORD *)(v5 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v5 + 32);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.pad", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::PadOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  int *v56;
  char *v57;
  char *v58;
  __int128 v59;
  _QWORD **v60;
  _QWORD **v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  int *v66;
  char *v67;
  char *v68;
  __int128 v69;
  _QWORD **v70;
  _QWORD **v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  int *v76;
  char *v77;
  char *v78;
  __int128 v79;
  int *v80;
  char *v81;
  char *v82;
  __int128 v83;
  _QWORD **v84;
  _QWORD **v85;
  void *v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  uint64_t v108;
  int v109;
  const char *v110;
  uint64_t v111;
  _QWORD v112[3];
  void *v113;
  unsigned int v114;
  unsigned int v115;
  _BYTE v116[96];
  void *v117;
  _QWORD *v118;
  void *__p;
  _QWORD **v120;
  char v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v108 = v6;
  if (!v6)
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v110 = "expected DictionaryAttr to set properties";
      v111 = 41;
      v26 = &v109;
      v27 = (char *)v113;
      if (v114 >= v115)
      {
        v90 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v99 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v90, 24);
          v27 = (char *)v113;
          v26 = (int *)((char *)v113 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v90, 24);
          v26 = &v109;
          v27 = (char *)v113;
        }
      }
      v28 = &v27[24 * v114];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v114;
      if (v112[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
    }
    if (!v121)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v120;
      v32 = __p;
      if (v120 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v120 = v30;
      operator delete(v32);
    }
    v21 = v117;
    if (!v117)
      goto LABEL_120;
    v33 = v118;
    v23 = v117;
    if (v118 == v117)
    {
LABEL_119:
      v118 = v21;
      operator delete(v23);
LABEL_120:
      if (v113 != v116)
        free(v113);
      return 0;
    }
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
LABEL_118:
    v23 = v117;
    goto LABEL_119;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v108, "nofold", 6uLL);
  if (v8)
  {
    v9 = v8;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v112, a4);
      if (v112[0])
      {
        v109 = 3;
        v111 = 51;
        v10 = &v109;
        v11 = (char *)v113;
        if (v114 >= v115)
        {
          v91 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            v100 = (char *)&v109 - (_BYTE *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v91, 24);
            v11 = (char *)v113;
            v10 = (int *)((char *)v113 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v91, 24);
            v10 = &v109;
            v11 = (char *)v113;
          }
        }
        v12 = &v11[24 * v114];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v12 = v13;
        ++v114;
        if (v112[0])
        {
          v14 = &v109;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v9);
          v15 = (char *)v113;
          if (v114 >= v115)
          {
            v92 = v114 + 1;
            if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
            {
              v101 = (char *)&v109 - (_BYTE *)v113;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v92, 24);
              v15 = (char *)v113;
              v14 = (int *)((char *)v113 + v101);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v92, 24);
              v14 = &v109;
              v15 = (char *)v113;
            }
          }
          v16 = &v15[24 * v114];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v16 = v17;
          ++v114;
          if (v112[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
        }
      }
      if (!v121)
        return 0;
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v120;
        v20 = __p;
        if (v120 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v120 = v18;
        operator delete(v20);
      }
      v21 = v117;
      if (!v117)
        goto LABEL_120;
      v22 = v118;
      v23 = v117;
      if (v118 == v117)
        goto LABEL_119;
      do
      {
        v25 = (void *)*--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v22 != v21);
      goto LABEL_118;
    }
    *a1 = v8;
  }
  v36 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "static_high", 0xBuLL);
  if (!v36)
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v110 = "expected key entry for static_high in DictionaryAttr to set Properties.";
      v111 = 71;
      v42 = &v109;
      v43 = (char *)v113;
      if (v114 >= v115)
      {
        v93 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v102 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v93, 24);
          v43 = (char *)v113;
          v42 = (int *)((char *)v113 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v93, 24);
          v42 = &v109;
          v43 = (char *)v113;
        }
      }
      v44 = &v43[24 * v114];
      v45 = *(_OWORD *)v42;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      ++v114;
      if (v112[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
    }
    if (!v121)
      return 0;
    v46 = (_QWORD **)__p;
    if (__p)
    {
      v47 = v120;
      v48 = __p;
      if (v120 != __p)
      {
        do
          v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        v48 = __p;
      }
      v120 = v46;
      operator delete(v48);
    }
    v21 = v117;
    if (!v117)
      goto LABEL_120;
    v49 = v118;
    v23 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v51 = (void *)*--v49;
      v50 = v51;
      *v49 = 0;
      if (v51)
        operator delete[](v50);
    }
    while (v49 != v21);
    goto LABEL_118;
  }
  v37 = (uint64_t)v36;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v36))
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v111 = 56;
      v52 = &v109;
      v53 = (char *)v113;
      if (v114 >= v115)
      {
        v94 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v103 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v94, 24);
          v53 = (char *)v113;
          v52 = (int *)((char *)v113 + v103);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v94, 24);
          v52 = &v109;
          v53 = (char *)v113;
        }
      }
      v54 = &v53[24 * v114];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
      *(_OWORD *)v54 = v55;
      ++v114;
      if (v112[0])
      {
        v56 = &v109;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v37);
        v57 = (char *)v113;
        if (v114 >= v115)
        {
          v95 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            v104 = (char *)&v109 - (_BYTE *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v95, 24);
            v57 = (char *)v113;
            v56 = (int *)((char *)v113 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v95, 24);
            v56 = &v109;
            v57 = (char *)v113;
          }
        }
        v58 = &v57[24 * v114];
        v59 = *(_OWORD *)v56;
        *((_QWORD *)v58 + 2) = *((_QWORD *)v56 + 2);
        *(_OWORD *)v58 = v59;
        ++v114;
        if (v112[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
      }
    }
    if (!v121)
      return 0;
    v60 = (_QWORD **)__p;
    if (__p)
    {
      v61 = v120;
      v62 = __p;
      if (v120 != __p)
      {
        do
          v61 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v61 - 1);
        while (v61 != v60);
        v62 = __p;
      }
      v120 = v60;
      operator delete(v62);
    }
    v21 = v117;
    if (!v117)
      goto LABEL_120;
    v63 = v118;
    v23 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v65 = (void *)*--v63;
      v64 = v65;
      *v63 = 0;
      if (v65)
        operator delete[](v64);
    }
    while (v63 != v21);
    goto LABEL_118;
  }
  a1[1] = v37;
  v38 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "static_low", 0xAuLL);
  if (!v38)
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v110 = "expected key entry for static_low in DictionaryAttr to set Properties.";
      v111 = 70;
      v66 = &v109;
      v67 = (char *)v113;
      if (v114 >= v115)
      {
        v96 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v105 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v96, 24);
          v67 = (char *)v113;
          v66 = (int *)((char *)v113 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v96, 24);
          v66 = &v109;
          v67 = (char *)v113;
        }
      }
      v68 = &v67[24 * v114];
      v69 = *(_OWORD *)v66;
      *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
      *(_OWORD *)v68 = v69;
      ++v114;
      if (v112[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
    }
    if (!v121)
      return 0;
    v70 = (_QWORD **)__p;
    if (__p)
    {
      v71 = v120;
      v72 = __p;
      if (v120 != __p)
      {
        do
          v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
        while (v71 != v70);
        v72 = __p;
      }
      v120 = v70;
      operator delete(v72);
    }
    v21 = v117;
    if (!v117)
      goto LABEL_120;
    v73 = v118;
    v23 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v75 = (void *)*--v73;
      v74 = v75;
      *v73 = 0;
      if (v75)
        operator delete[](v74);
    }
    while (v73 != v21);
    goto LABEL_118;
  }
  v39 = (uint64_t)v38;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v38))
  {
    a3(v112, a4);
    if (v112[0])
    {
      v109 = 3;
      v111 = 55;
      v76 = &v109;
      v77 = (char *)v113;
      if (v114 >= v115)
      {
        v97 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          v106 = (char *)&v109 - (_BYTE *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v97, 24);
          v77 = (char *)v113;
          v76 = (int *)((char *)v113 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v97, 24);
          v76 = &v109;
          v77 = (char *)v113;
        }
      }
      v78 = &v77[24 * v114];
      v79 = *(_OWORD *)v76;
      *((_QWORD *)v78 + 2) = *((_QWORD *)v76 + 2);
      *(_OWORD *)v78 = v79;
      ++v114;
      if (v112[0])
      {
        v80 = &v109;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v39);
        v81 = (char *)v113;
        if (v114 >= v115)
        {
          v98 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            v107 = (char *)&v109 - (_BYTE *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v98, 24);
            v81 = (char *)v113;
            v80 = (int *)((char *)v113 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v98, 24);
            v80 = &v109;
            v81 = (char *)v113;
          }
        }
        v82 = &v81[24 * v114];
        v83 = *(_OWORD *)v80;
        *((_QWORD *)v82 + 2) = *((_QWORD *)v80 + 2);
        *(_OWORD *)v82 = v83;
        ++v114;
        if (v112[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
      }
    }
    if (!v121)
      return 0;
    v84 = (_QWORD **)__p;
    if (__p)
    {
      v85 = v120;
      v86 = __p;
      if (v120 != __p)
      {
        do
          v85 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v85 - 1);
        while (v85 != v84);
        v86 = __p;
      }
      v120 = v84;
      operator delete(v86);
    }
    v21 = v117;
    if (!v117)
      goto LABEL_120;
    v87 = v118;
    v23 = v117;
    if (v118 == v117)
      goto LABEL_119;
    do
    {
      v89 = (void *)*--v87;
      v88 = v89;
      *v87 = 0;
      if (v89)
        operator delete[](v88);
    }
    while (v87 != v21);
    goto LABEL_118;
  }
  a1[2] = v39;
  v40 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "operandSegmentSizes", 0x13uLL);
  if (v40 || (v40 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v108, "operand_segment_sizes", 0x15uLL)) != 0)
  {
    if (mlir::convertFromAttribute(a1 + 3, (const char *)3, v40, a3, a4))
      return 1;
  }
  else
  {
    a3(v112, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v112, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v112);
  }
  return 0;
}

uint64_t mlir::tensor::PadOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t DictionaryAttr;
  void *v30;
  mlir::DictionaryAttr *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x1E0C80C00];
  v32 = a1;
  v33 = v35;
  v34 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v32, (uint64_t)"nofold", 6, *a2);
    v6 = v5;
    v7 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v7 = v34;
    }
    v8 = (uint64_t *)((char *)v33 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v34) = v34 + 1;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_high", 11, v9);
    v12 = v11;
    v13 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v13 = v34;
    }
    v14 = (uint64_t *)((char *)v33 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    LODWORD(v34) = v34 + 1;
  }
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_low", 10, v15);
    v18 = v17;
    v19 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v19 = v34;
    }
    v20 = (uint64_t *)((char *)v33 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    LODWORD(v34) = v34 + 1;
  }
  v21 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
  v22 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"operandSegmentSizes", 19, v21);
  v24 = v23;
  v25 = v34;
  if (v34 >= HIDWORD(v34))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
    v25 = v34;
  }
  v26 = (uint64_t *)((char *)v33 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  v27 = __CFADD__((_DWORD)v34, 1);
  v28 = (v34 + 1);
  LODWORD(v34) = v34 + 1;
  if (v27)
  {
    DictionaryAttr = 0;
    v30 = v33;
    if (v33 == v35)
      return DictionaryAttr;
    goto LABEL_20;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v32, (mlir::MLIRContext *)v33, v28);
  v30 = v33;
  if (v33 != v35)
LABEL_20:
    free(v30);
  return DictionaryAttr;
}

uint64_t mlir::tensor::PadOp::getInherentAttr(mlir::MLIRContext *a1, _QWORD *a2, _WORD *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 6uLL:
      if (*(_DWORD *)__s1 != 1868984174 || __s1[2] != 25708)
        goto LABEL_13;
      return *a2;
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_13;
    case 0xAuLL:
      if (memcmp(__s1, "static_low", __n))
        goto LABEL_13;
      result = a2[2];
      break;
    case 0xBuLL:
      if (memcmp(__s1, "static_high", __n))
        goto LABEL_13;
      result = a2[1];
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_13;
      goto LABEL_15;
    case 0x15uLL:
      if (!memcmp(__s1, "operand_segment_sizes", __n))
LABEL_15:
        result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
      else
LABEL_13:
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::tensor::PadOp::setInherentAttr(uint64_t result, _WORD *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 6uLL:
      if (*(_DWORD *)__s1 == 1868984174 && __s1[2] == 25708)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
            v11 = a4;
          else
            v11 = 0;
          *(_QWORD *)result = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      break;
    case 0xAuLL:
      result = memcmp(__s1, "static_low", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v7 = a4;
          else
            v7 = 0;
          v5[2] = v7;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    case 0xBuLL:
      result = memcmp(__s1, "static_high", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v8 = a4;
          else
            v8 = 0;
          v5[1] = v8;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!(_DWORD)result)
        goto LABEL_22;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!(_DWORD)result)
      {
LABEL_22:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v9 = (_DWORD)result ? a4 : 0;
          v12 = v9;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 3)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v10)
                result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v10);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::tensor::PadOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"nofold", 6, *a2);
  v6 = a2[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_high", 11, v6);
  v7 = a2[2];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_low", 10, v7);
  v8 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v8);
}

BOOL mlir::tensor::PadOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL8 result;

  v8 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (const void **)"nofold", (const char *)6, a3, a4))
  {
    v9 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v9, (const void **)"static_high", (const char *)0xB, a3, a4))
    {
      v10 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v10, (const void **)"static_low", (const char *)0xA, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

BOOL mlir::tensor::PadOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 3, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)3));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_1EDC07000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::PadOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v4[45];
    return a1[32];
  }
  return result;
}

uint64_t mlir::tensor::PadOp::writeProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v4 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
    v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 24, 3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 16));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 24), 3);
  return result;
}

BOOL mlir::tensor::PadOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ODSOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  const void **v39[4];
  __int16 v40;
  _QWORD v41[3];
  void *v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  void *__p;
  _QWORD **v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = (_QWORD *)v3[1];
  if (!v4)
  {
    v39[0] = (const void **)"requires attribute 'static_high'";
    v40 = 259;
    mlir::OpState::emitOpError(this, v39, (uint64_t)v41);
    v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
    if (v41[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
    if (!v48)
      return v23;
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v47;
      v26 = __p;
      if (v47 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v47 = v24;
      operator delete(v26);
    }
    v27 = v44;
    if (v44)
    {
      v28 = v45;
      v29 = v44;
      if (v45 == v44)
        goto LABEL_59;
      do
      {
        v31 = (void *)*--v28;
        v30 = v31;
        *v28 = 0;
        if (v31)
          operator delete[](v30);
      }
      while (v28 != v27);
LABEL_58:
      v29 = v44;
LABEL_59:
      v45 = v27;
      operator delete(v29);
    }
LABEL_60:
    if (v42 != &v43)
      free(v42);
    return v23;
  }
  v5 = (_QWORD *)v3[2];
  if (!v5)
  {
    v39[0] = (const void **)"requires attribute 'static_low'";
    v40 = 259;
    mlir::OpState::emitOpError(this, v39, (uint64_t)v41);
    v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
    if (v41[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
    if (!v48)
      return v23;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v47;
      v34 = __p;
      if (v47 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v47 = v32;
      operator delete(v34);
    }
    v27 = v44;
    if (v44)
    {
      v35 = v45;
      v29 = v44;
      if (v45 == v44)
        goto LABEL_59;
      do
      {
        v37 = (void *)*--v35;
        v36 = v37;
        *v35 = 0;
        if (v37)
          operator delete[](v36);
      }
      while (v35 != v27);
      goto LABEL_58;
    }
    goto LABEL_60;
  }
  v6 = *v3;
  v41[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"static_low", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v41))return 0;
  v41[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"static_high", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v41))return 0;
  v41[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v6, (const void **)"nofold", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v41))return 0;
  v7 = *((unsigned int *)*this + 11);
  v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v8 = 0;
  v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    v10 = (*this)[9];
    if ((_DWORD)v9)
      goto LABEL_13;
  }
  else
  {
    v10 = 0;
    if ((_DWORD)v9)
    {
LABEL_13:
      v11 = 0;
      v12 = v10 + 24;
      while (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11)
          goto LABEL_16;
      }
      return 0;
    }
  }
LABEL_16:
  ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
  if (v14)
  {
    v15 = v14;
    v16 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15)
        goto LABEL_20;
    }
    return 0;
  }
LABEL_20:
  v17 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
  if (v18)
  {
    v19 = v18;
    v20 = v17 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v20 += 32;
      if (!--v19)
        goto LABEL_24;
    }
    return 0;
  }
LABEL_24:
  v21 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0);
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(*this, (((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::tensor::PadOp::parse(uint64_t a1, uint64_t *a2)
{
  mlir::Region *v4;
  uint64_t v5;
  mlir::UnitAttr **v6;
  mlir::MLIRContext *v7;
  uint64_t UnitAttr;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;
  mlir::IndexType **v16;
  mlir::MLIRContext *v17;
  uint64_t IndexType;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  mlir::Region *v25;
  void *v26;
  uint64_t v28;
  _QWORD v29[2];
  mlir::Region *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[128];
  void *v38;
  uint64_t v39;
  _BYTE v40[128];
  _QWORD v41[4];
  uint64_t __src[4];
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  memset(v41, 0, 24);
  v33[0] = (uint64_t)v41;
  v33[1] = 1;
  v38 = v40;
  v39 = 0x400000000;
  v31 = 0;
  v32 = 0;
  v35 = v37;
  v36 = 0x400000000;
  v4 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v4 = v4;
  *((_QWORD *)v4 + 1) = v4;
  *((_QWORD *)v4 + 2) = 0;
  v29[1] = 1;
  v30 = v4;
  v34 = 0;
  v29[0] = &v34;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v41, 1))
    goto LABEL_25;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "nofold", 6))
  {
    v6 = (mlir::UnitAttr **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    UnitAttr = mlir::Builder::getUnitAttr(v6, v7);
    *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
  }
  v43 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "low", 3, __src))goto LABEL_25;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v38, &v32, __src, 0, 2))
    goto LABEL_25;
  v9 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v9 + 16) = v32;
  v43 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "high", 4, __src))goto LABEL_25;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v35, &v31, __src, 0, 2))
    goto LABEL_25;
  v10 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v10 + 8) = v31;
  if (!(*(unsigned __int8 (**)(uint64_t, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))goto LABEL_25;
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  mlir::impl::ensureRegionTerminator(v4, v11, *a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::PadOp>::buildTerminator);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_25;
  v12 = a2[1];
  __src[0] = a1;
  __src[1] = (uint64_t)&v28;
  __src[2] = (uint64_t)a2;
  if (!mlir::tensor::PadOp::verifyInherentAttrs(v12, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::PadOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_25;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_25;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, __src))
    goto LABEL_25;
  v34 = __src[0];
  v43 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))goto LABEL_25;
  v28 = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v28))
    goto LABEL_25;
  __src[0] = v28;
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v30);
  v13 = v39;
  v14 = v36;
  v15 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(a2);
  v15[6] = 1;
  v15[7] = v13;
  v15[8] = v14;
  v16 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v16, v17);
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  v19 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v33, v29, v5, v19))goto LABEL_25;
  if ((_DWORD)v39)
  {
    v20 = (char *)v38;
    v21 = 32 * v39;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v20, IndexType, v19))
    {
      v20 += 32;
      v21 -= 32;
      if (!v21)
        goto LABEL_20;
    }
LABEL_25:
    v24 = 0;
LABEL_26:
    v25 = v30;
    v30 = 0;
    if (v25)
      goto LABEL_27;
    goto LABEL_28;
  }
LABEL_20:
  if ((_DWORD)v36)
  {
    v22 = (char *)v35;
    v23 = 32 * v36;
    v24 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v22, IndexType, v19))
    {
      v22 += 32;
      v23 -= 32;
      if (!v23)
        goto LABEL_26;
    }
    goto LABEL_25;
  }
  v24 = 1;
  v25 = v30;
  v30 = 0;
  if (v25)
  {
LABEL_27:
    mlir::Region::~Region(v25);
    operator delete(v26);
  }
LABEL_28:
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  return v24;
}

void mlir::tensor::PadOp::print(mlir::tensor::PadOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  _QWORD *v40;
  uint64_t v41;
  mlir::GenericProgramPoint **v42;
  mlir::Operation *v43;
  mlir::Operation *v44;
  _BOOL8 v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  mlir::Operation *v49;
  mlir::ArrayAttr *v50;
  uint64_t Value;
  uint64_t v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  llvm::raw_ostream *v61;
  _WORD *v62;
  llvm::raw_ostream *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t NextResultAtOffset;
  unint64_t v67;
  void *AttrDictionary;
  uint64_t v69;
  _QWORD v70[4];
  unint64_t v71[2];
  unint64_t v72[3];

  v72[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  if (*(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64))
  {
    v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 32;
    }
    v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v9 = *((_QWORD *)v8 + 4);
    if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 5)
    {
      *(_WORD *)(v9 + 4) = 25708;
      *(_DWORD *)v9 = 1868984174;
      *((_QWORD *)v8 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v8, "nofold", 6uLL);
    }
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 2)
  {
    *(_BYTE *)(v13 + 2) = 119;
    *(_WORD *)v13 = 28524;
    *((_QWORD *)v12 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v12, "low", 3uLL);
  }
  v14 = *(_QWORD *)this;
  v15 = *(unsigned int *)(*(_QWORD *)this + 44);
  v16 = *(_QWORD *)this + 16 * ((v15 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v16 = 0;
  v17 = *(unsigned int *)(v16 + 24);
  if ((v15 & 0x800000) != 0)
    v18 = *(_QWORD *)(v14 + 72);
  else
    v18 = 0;
  v19 = v18 + 32 * v17;
  v20 = (*(_DWORD *)(v16 + 28) + v17) - v17;
  AttrDictionary = *(void **)(v16 + 16);
  v21 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  v23 = v22;
  mlir::ValueRange::ValueRange(v72, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v14, v19, v20, v21, v23, v72[0], v72[1], 0, 0, 2);
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_DWORD *)*((_QWORD *)v26 + 4);
  if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 3uLL)
  {
    *v27 = 1751607656;
    *((_QWORD *)v26 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v26, "high", 4uLL);
  }
  v28 = *(_QWORD *)this;
  v29 = *(unsigned int *)(*(_QWORD *)this + 44);
  v30 = *(_QWORD *)this + 16 * ((v29 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v30 = 0;
  if ((v29 & 0x800000) != 0)
    v31 = *(_QWORD *)(v28 + 72);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 + 28) + *(_DWORD *)(v30 + 24));
  v33 = v31 + 32 * v32;
  v34 = (*(_DWORD *)(v30 + 32) + v32) - v32;
  AttrDictionary = *(void **)(v30 + 8);
  v35 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  v37 = v36;
  mlir::ValueRange::ValueRange(v71, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v28, v33, v34, v35, v37, v71[0], v71[1], 0, 0, 2);
  v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v39 = (_BYTE *)*((_QWORD *)v38 + 4);
  if ((unint64_t)v39 >= *((_QWORD *)v38 + 3))
  {
    llvm::raw_ostream::write(v38, 32);
  }
  else
  {
    *((_QWORD *)v38 + 4) = v39 + 1;
    *v39 = 32;
  }
  v40 = (_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40));
  v45 = (_QWORD *)*v40 == v40
     || ((v41 = v40[1]) != 0 ? (v42 = (mlir::GenericProgramPoint **)(v41 - 8)) : (v42 = 0),
         (mlir::Block::getTerminator(v42), !v43)
      || (v44 = v43,
          AttrDictionary = (void *)mlir::Operation::getAttrDictionary(v43),
          mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&AttrDictionary))
      || (*((_BYTE *)v44 + 46) & 0x80) != 0 && *((_DWORD *)v44 + 17))
     || *((_DWORD *)v44 + 9) != 0;
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, _BOOL8, _QWORD))(*(_QWORD *)a2 + 224))(a2, ((*(_QWORD *)this+ 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(*(_QWORD *)this + 40), 1, v45, 0);
  AttrDictionary = v70;
  v70[0] = "operandSegmentSizes";
  v70[1] = 19;
  v70[2] = "nofold";
  v70[3] = 6;
  v69 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&AttrDictionary, v70, 3uLL, 16);
  v46 = (char *)AttrDictionary + 16 * v69;
  *v46 = "static_low";
  v46[1] = 10;
  v47 = (v69 + 1);
  LODWORD(v69) = v47;
  if (v47 >= HIDWORD(v69))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&AttrDictionary, v70, v47 + 1, 16);
    LODWORD(v47) = v69;
  }
  v48 = (char *)AttrDictionary + 16 * v47;
  *v48 = "static_high";
  v48[1] = 11;
  LODWORD(v69) = v69 + 1;
  mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  v49 = *(mlir::Operation **)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47))
  {
    v67 = mlir::Operation::getAttrDictionary(v49);
    v50 = (mlir::ArrayAttr *)&v67;
  }
  else
  {
    v50 = (mlir::Operation *)((char *)v49 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v50);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v52, AttrDictionary, v69);
  v53 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v54 = (_BYTE *)*((_QWORD *)v53 + 4);
  if ((unint64_t)v54 >= *((_QWORD *)v53 + 3))
  {
    llvm::raw_ostream::write(v53, 32);
  }
  else
  {
    *((_QWORD *)v53 + 4) = v54 + 1;
    *v54 = 32;
  }
  v55 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v56 = (_BYTE *)*((_QWORD *)v55 + 4);
  if (*((_BYTE **)v55 + 3) == v56)
  {
    llvm::raw_ostream::write(v55, ":", 1uLL);
  }
  else
  {
    *v56 = 58;
    ++*((_QWORD *)v55 + 4);
  }
  v57 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v58 = (_BYTE *)*((_QWORD *)v57 + 4);
  if ((unint64_t)v58 >= *((_QWORD *)v57 + 3))
  {
    llvm::raw_ostream::write(v57, 32);
  }
  else
  {
    *((_QWORD *)v57 + 4) = v58 + 1;
    *v58 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v59 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v60 = (_BYTE *)*((_QWORD *)v59 + 4);
  if ((unint64_t)v60 >= *((_QWORD *)v59 + 3))
  {
    llvm::raw_ostream::write(v59, 32);
  }
  else
  {
    *((_QWORD *)v59 + 4) = v60 + 1;
    *v60 = 32;
  }
  v61 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v62 = (_WORD *)*((_QWORD *)v61 + 4);
  if (*((_QWORD *)v61 + 3) - (_QWORD)v62 > 1uLL)
  {
    *v62 = 28532;
    *((_QWORD *)v61 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v61, "to", 2uLL);
  }
  v63 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v64 = (_BYTE *)*((_QWORD *)v63 + 4);
  if ((unint64_t)v64 >= *((_QWORD *)v63 + 3))
  {
    llvm::raw_ostream::write(v63, 32);
  }
  else
  {
    *((_QWORD *)v63 + 4) = v64 + 1;
    *v64 = 32;
  }
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v65 = *(_QWORD *)this - 16;
  else
    v65 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v65, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (AttrDictionary != v70)
    free(AttrDictionary);
}

uint64_t mlir::tensor::ParallelInsertSliceOp::getDest(mlir::tensor::ParallelInsertSliceOp *this)
{
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v1 = *(_QWORD *)this + 80;
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v1 + 24) + 24);
}

uint64_t mlir::tensor::ParallelInsertSliceOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 0xCuLL:
      if (memcmp(__s1, "static_sizes", __n))
        goto LABEL_11;
      return a2[1];
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        result = *a2;
      }
      else if (!memcmp(__s1, "static_strides", __n))
      {
        result = a2[2];
      }
      else
      {
LABEL_11:
        result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_11;
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n))
        goto LABEL_11;
LABEL_13:
      result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::tensor::ParallelInsertSliceOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 0xCuLL:
      result = memcmp(__s1, "static_sizes", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v10 = a4;
          else
            v10 = 0;
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v11 = a4;
          else
            v11 = 0;
          *v5 = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      else
      {
        result = memcmp(__s1, "static_strides", a3);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if ((_DWORD)result)
              v7 = a4;
            else
              v7 = 0;
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!(_DWORD)result)
        goto LABEL_17;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!(_DWORD)result)
      {
LABEL_17:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v8 = (_DWORD)result ? a4 : 0;
          v12 = v8;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 5)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9)
                result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::tensor::ParallelInsertSliceOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 6)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 3, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)5));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x30uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *(_OWORD *)((char *)v3 + 28) = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_1EDC07000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptor"
              "Base::Properties]";
        v15 = 123;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v4[47];
    return a1[32];
  }
  return result;
}

uint64_t mlir::tensor::ParallelInsertSliceOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ODSOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  _QWORD **v44;
  _QWORD **v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  const void **v51[4];
  __int16 v52;
  _QWORD v53[3];
  void *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD **v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (*(_QWORD *)v3)
  {
    v5 = *(_QWORD **)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD **)(v3 + 16);
      if (v6)
      {
        v53[0] = v2;
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"static_offsets", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
        v53[0] = *this;
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"static_sizes", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
        v53[0] = *this;
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"static_strides", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
        v7 = *((unsigned int *)*this + 11);
        v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11)))
          v8 = 0;
        v9 = *(unsigned int *)(v8 + 24);
        if ((v7 & 0x800000) != 0)
        {
          v10 = (*this)[9];
          if ((_DWORD)v9)
            goto LABEL_14;
        }
        else
        {
          v10 = 0;
          if ((_DWORD)v9)
          {
LABEL_14:
            v11 = 0;
            v12 = v10 + 24;
            while (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v11))
            {
              ++v11;
              v12 += 32;
              if (v9 == v11)
                goto LABEL_17;
            }
            return 0;
          }
        }
LABEL_17:
        ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
        if (v14)
        {
          v15 = v14;
          v16 = ODSOperands + 24;
          while (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
          {
            LODWORD(v9) = v9 + 1;
            v16 += 32;
            if (!--v15)
              goto LABEL_21;
          }
        }
        else
        {
LABEL_21:
          v17 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
          if (v18)
          {
            v19 = v18;
            v20 = v17 + 24;
            while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
            {
              LODWORD(v9) = v9 + 1;
              v20 += 32;
              if (!--v19)
                goto LABEL_25;
            }
          }
          else
          {
LABEL_25:
            v21 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 3u);
            if (v22)
            {
              v23 = v22;
              v24 = v21 + 24;
              while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
              {
                LODWORD(v9) = v9 + 1;
                v24 += 32;
                if (!--v23)
                  goto LABEL_29;
              }
            }
            else
            {
LABEL_29:
              v25 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 4u);
              if (!v26)
                return 1;
              v27 = v26;
              v28 = v25 + 24;
              v29 = 1;
              while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
              {
                LODWORD(v9) = v9 + 1;
                v28 += 32;
                if (!--v27)
                  return v29;
              }
            }
          }
        }
        return 0;
      }
      v51[0] = (const void **)"requires attribute 'static_strides'";
      v52 = 259;
      mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
      if (v53[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
      if (v60)
      {
        v44 = (_QWORD **)__p;
        if (__p)
        {
          v45 = v59;
          v46 = __p;
          if (v59 != __p)
          {
            do
              v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
            while (v45 != v44);
            v46 = __p;
          }
          v59 = v44;
          operator delete(v46);
        }
        v33 = v56;
        if (!v56)
          goto LABEL_79;
        v47 = v57;
        v35 = v56;
        if (v57 == v56)
        {
LABEL_78:
          v57 = v33;
          operator delete(v35);
LABEL_79:
          if (v54 != &v55)
            free(v54);
          return v29;
        }
        do
        {
          v49 = (void *)*--v47;
          v48 = v49;
          *v47 = 0;
          if (v49)
            operator delete[](v48);
        }
        while (v47 != v33);
LABEL_77:
        v35 = v56;
        goto LABEL_78;
      }
    }
    else
    {
      v51[0] = (const void **)"requires attribute 'static_sizes'";
      v52 = 259;
      mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
      if (v53[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
      if (v60)
      {
        v38 = (_QWORD **)__p;
        if (__p)
        {
          v39 = v59;
          v40 = __p;
          if (v59 != __p)
          {
            do
              v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
            while (v39 != v38);
            v40 = __p;
          }
          v59 = v38;
          operator delete(v40);
        }
        v33 = v56;
        if (!v56)
          goto LABEL_79;
        v41 = v57;
        v35 = v56;
        if (v57 == v56)
          goto LABEL_78;
        do
        {
          v43 = (void *)*--v41;
          v42 = v43;
          *v41 = 0;
          if (v43)
            operator delete[](v42);
        }
        while (v41 != v33);
        goto LABEL_77;
      }
    }
  }
  else
  {
    v51[0] = (const void **)"requires attribute 'static_offsets'";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (v60)
    {
      v30 = (_QWORD **)__p;
      if (__p)
      {
        v31 = v59;
        v32 = __p;
        if (v59 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v59 = v30;
        operator delete(v32);
      }
      v33 = v56;
      if (!v56)
        goto LABEL_79;
      v34 = v57;
      v35 = v56;
      if (v57 == v56)
        goto LABEL_78;
      do
      {
        v37 = (void *)*--v34;
        v36 = v37;
        *v34 = 0;
        if (v37)
          operator delete[](v36);
      }
      while (v34 != v33);
      goto LABEL_77;
    }
  }
  return v29;
}

uint64_t mlir::tensor::ParallelInsertSliceOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  mlir::IndexType **v14;
  mlir::MLIRContext *v15;
  uint64_t IndexType;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  uint64_t v34[2];
  uint64_t v35[4];
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[128];
  void *v42;
  uint64_t v43;
  _BYTE v44[128];
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  _QWORD v48[4];
  _QWORD v49[6];

  v49[4] = *MEMORY[0x1E0C80C00];
  memset(v49, 0, 24);
  v34[0] = (uint64_t)v49;
  v34[1] = 1;
  memset(v48, 0, 24);
  v33[0] = (uint64_t)v48;
  v33[1] = 1;
  v45 = v47;
  v46 = 0x400000000;
  v31 = 0;
  v32 = 0;
  v42 = v44;
  v43 = 0x400000000;
  v38 = 0;
  v39 = v41;
  v40 = 0x400000000;
  v29[1] = 1;
  v30 = 0;
  v28[1] = 1;
  v29[0] = &v38;
  v37 = 0;
  v28[0] = &v37;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v49, 1))
    goto LABEL_28;
  v36 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "into", 4, v35))goto LABEL_28;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v48, 1))
    goto LABEL_28;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v35[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v45, &v32, v35, 0, 2))
    goto LABEL_28;
  v6 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(a2);
  *v6 = v32;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v35[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v42, &v31, v35, 0, 2))
    goto LABEL_28;
  v7 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v7 + 8) = v31;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v35[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v39, &v30, v35, 0, 2))
    goto LABEL_28;
  v8 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v8 + 16) = v30;
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_28;
  v9 = a2[1];
  v35[0] = a1;
  v35[1] = (uint64_t)&v27;
  v35[2] = (uint64_t)a2;
  if (!mlir::memref::ReinterpretCastOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::ParallelInsertSliceOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v35))goto LABEL_28;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_28;
  v35[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, v35))
    goto LABEL_28;
  v38 = v35[0];
  v36 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "into", 4, v35))goto LABEL_28;
  v35[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, v35))
    goto LABEL_28;
  v37 = v35[0];
  v10 = v46;
  v11 = v43;
  v12 = v40;
  v13 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v13 + 24) = 0x100000001;
  *(_DWORD *)(v13 + 32) = v10;
  *(_DWORD *)(v13 + 36) = v11;
  *(_DWORD *)(v13 + 40) = v12;
  v14 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v14, v15);
  v17 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v34, v29, v4, v17)|| !mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v33, v28, v5, v17))
  {
    goto LABEL_28;
  }
  if ((_DWORD)v46)
  {
    v18 = (char *)v45;
    v19 = 32 * v46;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, IndexType, v17))
    {
      v18 += 32;
      v19 -= 32;
      if (!v19)
        goto LABEL_19;
    }
LABEL_28:
    v24 = 0;
LABEL_29:
    v25 = v39;
    if (v39 != v41)
      goto LABEL_30;
    goto LABEL_31;
  }
LABEL_19:
  if ((_DWORD)v43)
  {
    v20 = (char *)v42;
    v21 = 32 * v43;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v20, IndexType, v17))
    {
      v20 += 32;
      v21 -= 32;
      if (!v21)
        goto LABEL_23;
    }
    goto LABEL_28;
  }
LABEL_23:
  if ((_DWORD)v40)
  {
    v22 = (char *)v39;
    v23 = 32 * v40;
    v24 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v22, IndexType, v17))
    {
      v22 += 32;
      v23 -= 32;
      if (!v23)
        goto LABEL_29;
    }
    goto LABEL_28;
  }
  v24 = 1;
  v25 = v39;
  if (v39 != v41)
LABEL_30:
    free(v25);
LABEL_31:
  if (v42 != v44)
    free(v42);
  if (v45 != v47)
    free(v45);
  return v24;
}

uint64_t mlir::tensor::detail::RankOpGenericAdaptorBase::RankOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.rank", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::tensor::RankOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::tensor::RankOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::IndexType **v5;
  mlir::MLIRContext *v6;
  uint64_t IndexType;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12[2];
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  memset(v14, 0, 24);
  v12[0] = (uint64_t)v14;
  v12[1] = 1;
  v13 = 0;
  v11[0] = &v13;
  v11[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v14, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v10 = 0;
  if (!mlir::AsmParser::parseType<mlir::TensorType>(a1, &v10))
    return 0;
  v13 = v10;
  v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v5, v6);
  v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v8) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v12, v11, v4, a2 + 16) != 0;
}

uint64_t mlir::tensor::detail::ReshapeOpGenericAdaptorBase::ReshapeOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.reshape", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::tensor::ReshapeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  const void ***v22;
  char *v23;
  char *v24;
  __int128 v25;
  char v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t NextResultAtOffset;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  const void **v48;
  uint64_t v49;
  __int16 v50;
  uint64_t OperandRange;
  const void **v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  v2 = *this;
  v3 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    goto LABEL_34;
  v55[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v55[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v4 + 8);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v55))
    goto LABEL_34;
  v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8);
  v48 = v3;
  v49 = v5;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v48);
  if (v6 != 1
    || (v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8),
        v52 = v3,
        v53 = v7,
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52),
        !mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange))
    && *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
LABEL_34:
    v50 = 261;
    v48 = (const void **)"operand";
    v49 = 7;
    mlir::Operation::emitOpError(v2, &v48, (uint64_t)v55);
    if (v55[0])
    {
      LODWORD(v52) = 3;
      v53 = (uint64_t)" #";
      v54 = 2;
      v8 = &v52;
      v9 = (char *)v56;
      if (v57 >= v58)
      {
        v38 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          v44 = (char *)&v52 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v38, 24);
          v9 = (char *)v56;
          v8 = (const void ***)((char *)v56 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v38, 24);
          v8 = &v52;
          v9 = (char *)v56;
        }
      }
      v10 = &v9[24 * v57];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = v8[2];
      *(_OWORD *)v10 = v11;
      v12 = ++v57;
      if (v55[0])
      {
        LODWORD(v52) = 5;
        v53 = 1;
        v13 = &v52;
        v14 = (char *)v56;
        if (v12 >= v58)
        {
          v39 = v12 + 1;
          v40 = (char *)v56 + 24 * v12 > (char *)&v52;
          if (v56 <= &v52 && v40)
          {
            v45 = (char *)&v52 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
            v14 = (char *)v56;
            v13 = (const void ***)((char *)v56 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
            v13 = &v52;
            v14 = (char *)v56;
          }
        }
        v15 = &v14[24 * v57];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        v17 = ++v57;
        if (v55[0])
        {
          LODWORD(v52) = 3;
          v53 = (uint64_t)" must be 1D tensor of signless integer or index values, but got ";
          v54 = 64;
          v18 = &v52;
          v19 = (char *)v56;
          if (v17 >= v58)
          {
            v41 = v17 + 1;
            v42 = (char *)v56 + 24 * v17 > (char *)&v52;
            if (v56 <= &v52 && v42)
            {
              v46 = (char *)&v52 - (_BYTE *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
              v19 = (char *)v56;
              v18 = (const void ***)((char *)v56 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
              v18 = &v52;
              v19 = (char *)v56;
            }
          }
          v20 = &v19[24 * v57];
          v21 = *(_OWORD *)v18;
          *((_QWORD *)v20 + 2) = v18[2];
          *(_OWORD *)v20 = v21;
          ++v57;
          if (v55[0])
          {
            v22 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)v3);
            v23 = (char *)v56;
            if (v57 >= v58)
            {
              v43 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                v47 = (char *)&v52 - (_BYTE *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
                v23 = (char *)v56;
                v22 = (const void ***)((char *)v56 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
                v22 = &v52;
                v23 = (char *)v56;
              }
            }
            v24 = &v23[24 * v57];
            v25 = *(_OWORD *)v22;
            *((_QWORD *)v24 + 2) = v22[2];
            *(_OWORD *)v24 = v25;
            ++v57;
          }
        }
      }
    }
    v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v27 = (_QWORD **)__p;
      if (__p)
      {
        v28 = v63;
        v29 = __p;
        if (v63 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v63 = v27;
        operator delete(v29);
      }
      v30 = v60;
      if (v60)
      {
        v31 = v61;
        v32 = v60;
        if (v61 != v60)
        {
          do
          {
            v34 = (void *)*--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              operator delete[](v33);
          }
          while (v31 != v30);
          v32 = v60;
        }
        v61 = v30;
        operator delete(v32);
      }
      if (v56 != v59)
        free(v56);
    }
    if (!v26)
      return 0;
  }
  if (*((_DWORD *)*this + 9))
    v35 = (uint64_t)(*this - 2);
  else
    v35 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v35, 0);
  return mlir::tensor::__mlir_ods_local_type_constraint_TensorOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::tensor::ReshapeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *Results;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9[2];
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[4];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  memset(v15, 0, 24);
  v13[0] = v15;
  v13[1] = 1;
  memset(v14, 0, 24);
  v12[0] = v14;
  v12[1] = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v15, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v14, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v10 = 0;
  if (!mlir::AsmParser::parseType<mlir::FunctionType>(a1, &v10))
    return 0;
  v11[0] = mlir::FunctionType::getInputs((mlir::FunctionType *)&v10);
  v11[1] = v4;
  Results = (void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v10);
  mlir::OperationState::addTypes(a2, Results, v6);
  v9[0] = v13;
  v9[1] = v12;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>(a1, v9, v11, v7, a2 + 16) != 0;
}

uint64_t mlir::tensor::ScatterOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  int v76;
  const char *v77;
  uint64_t v78;
  _QWORD v79[3];
  void *v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE v83[96];
  void *v84;
  _QWORD *v85;
  void *__p;
  _QWORD **v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v77 = "expected DictionaryAttr to set properties";
      v78 = 41;
      v28 = &v76;
      v29 = (char *)v80;
      if (v81 >= v82)
      {
        v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v69 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          v29 = (char *)v80;
          v28 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          v28 = &v76;
          v29 = (char *)v80;
        }
      }
      v30 = &v29[24 * v81];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88)
      return 0;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v87;
      v34 = __p;
      if (v87 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v87 = v32;
      operator delete(v34);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_79;
    v35 = v85;
    v25 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v37 = (void *)*--v35;
      v36 = v37;
      *v35 = 0;
      if (v37)
        operator delete[](v36);
    }
    while (v35 != v23);
    goto LABEL_77;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v75, "scatter_dims", 0xCuLL);
  if (!v8)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v77 = "expected key entry for scatter_dims in DictionaryAttr to set Properties.";
      v78 = 72;
      v38 = &v76;
      v39 = (char *)v80;
      if (v81 >= v82)
      {
        v64 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v70 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          v39 = (char *)v80;
          v38 = (int *)((char *)v80 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          v38 = &v76;
          v39 = (char *)v80;
        }
      }
      v40 = &v39[24 * v81];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88)
      return 0;
    v42 = (_QWORD **)__p;
    if (__p)
    {
      v43 = v87;
      v44 = __p;
      if (v87 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v87 = v42;
      operator delete(v44);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_79;
    v45 = v85;
    v25 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v47 = (void *)*--v45;
      v46 = v47;
      *v45 = 0;
      if (v47)
        operator delete[](v46);
    }
    while (v45 != v23);
    goto LABEL_77;
  }
  v9 = (uint64_t)v8;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v78 = 57;
      v48 = &v76;
      v49 = (char *)v80;
      if (v81 >= v82)
      {
        v65 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v71 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          v49 = (char *)v80;
          v48 = (int *)((char *)v80 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          v48 = &v76;
          v49 = (char *)v80;
        }
      }
      v50 = &v49[24 * v81];
      v51 = *(_OWORD *)v48;
      *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
      *(_OWORD *)v50 = v51;
      ++v81;
      if (v79[0])
      {
        v52 = &v76;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
        v53 = (char *)v80;
        if (v81 >= v82)
        {
          v66 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            v72 = (char *)&v76 - (_BYTE *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            v53 = (char *)v80;
            v52 = (int *)((char *)v80 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            v52 = &v76;
            v53 = (char *)v80;
          }
        }
        v54 = &v53[24 * v81];
        v55 = *(_OWORD *)v52;
        *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
        *(_OWORD *)v54 = v55;
        ++v81;
        if (v79[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88)
      return 0;
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v87;
      v58 = __p;
      if (v87 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v87 = v56;
      operator delete(v58);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_79;
    v59 = v85;
    v25 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v61 = (void *)*--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        operator delete[](v60);
    }
    while (v59 != v23);
    goto LABEL_77;
  }
  *a1 = v9;
  v10 = mlir::DictionaryAttr::get((uint64_t)&v75, "unique", 6uLL);
  if (!v10)
    return 1;
  v11 = v10;
  if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    a1[1] = v10;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    v76 = 3;
    v78 = 51;
    v12 = &v76;
    v13 = (char *)v80;
    if (v81 >= v82)
    {
      v67 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        v73 = (char *)&v76 - (_BYTE *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        v13 = (char *)v80;
        v12 = (int *)((char *)v80 + v73);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        v12 = &v76;
        v13 = (char *)v80;
      }
    }
    v14 = &v13[24 * v81];
    v15 = *(_OWORD *)v12;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v14 = v15;
    ++v81;
    if (v79[0])
    {
      v16 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v11);
      v17 = (char *)v80;
      if (v81 >= v82)
      {
        v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v74 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          v17 = (char *)v80;
          v16 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          v16 = &v76;
          v17 = (char *)v80;
        }
      }
      v18 = &v17[24 * v81];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
  }
  if (v88)
  {
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v87;
      v22 = __p;
      if (v87 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v87 = v20;
      operator delete(v22);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_79;
    v24 = v85;
    v25 = v84;
    if (v85 == v84)
    {
LABEL_78:
      v85 = v23;
      operator delete(v25);
LABEL_79:
      if (v80 != v83)
        free(v80);
      return 0;
    }
    do
    {
      v27 = (void *)*--v24;
      v26 = v27;
      *v24 = 0;
      if (v27)
        operator delete[](v26);
    }
    while (v24 != v23);
LABEL_77:
    v25 = v84;
    goto LABEL_78;
  }
  return 0;
}

uint64_t mlir::tensor::ScatterOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t DictionaryAttr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  mlir::DictionaryAttr *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v19 = v21;
  v20 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"scatter_dims", 12, *a2);
    v5 = v4;
    v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      v6 = v20;
    }
    v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *v7 = NamedAttr;
    v7[1] = v5;
    v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      v10 = (mlir::MLIRContext *)v19;
      if (v8)
        goto LABEL_6;
LABEL_13:
      DictionaryAttr = 0;
      if (v10 == (mlir::MLIRContext *)v21)
        return DictionaryAttr;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_5;
  }
  v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"unique", 6, v9);
  v15 = v14;
  v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    v16 = v20;
  }
  v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  v8 = v20 + 1;
  LODWORD(v20) = v8;
  v10 = (mlir::MLIRContext *)v19;
  if (!v8)
    goto LABEL_13;
LABEL_6:
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  v10 = (mlir::MLIRContext *)v19;
  if (v19 != v21)
LABEL_7:
    free(v10);
  return DictionaryAttr;
}

uint64_t mlir::tensor::ScatterOp::getInherentAttr(int a1, _QWORD *a2, _QWORD *__s1, size_t __n)
{
  if (__n == 6)
  {
    if (memcmp(__s1, "unique", 6uLL))
      return 0;
    return a2[1];
  }
  else
  {
    if (__n != 12)
      return 0;
    if (*__s1 != 0x5F72657474616373 || *((_DWORD *)__s1 + 2) != 1936550244)
      return 0;
    return *a2;
  }
}

uint64_t mlir::tensor::ScatterOp::setInherentAttr(uint64_t result, _QWORD *__s1, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)result;
  if (a3 == 6)
  {
    result = memcmp(__s1, "unique", 6uLL);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
          v7 = a4;
        else
          v7 = 0;
        v5[1] = v7;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (a3 == 12 && *__s1 == 0x5F72657474616373 && *((_DWORD *)__s1 + 2) == 1936550244)
  {
    if (a4)
    {
      result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
      if ((_DWORD)result)
        v8 = a4;
      else
        v8 = 0;
      *v5 = v8;
    }
    else
    {
      *(_QWORD *)result = 0;
    }
  }
  return result;
}

void mlir::tensor::ScatterOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"scatter_dims", 12, *a2);
  v5 = a2[1];
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"unique", 6, v5);
}

BOOL mlir::tensor::ScatterOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _BOOL8 result;

  v8 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v8, (const void **)"scatter_dims", (const char *)0xC, a3, a4))
  {
    v9 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v9, (const void **)"unique", (const char *)6, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

BOOL mlir::tensor::ScatterOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties]";
        v15 = 111;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[49];
    return a1[32];
  }
  return result;
}

BOOL mlir::tensor::ScatterOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  const void **v18;
  __int16 v19;
  _QWORD v20[3];
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *__p;
  _QWORD **v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (*(_QWORD *)v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v20[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"scatter_dims", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20))return 0;
    v20[0] = *this;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"unique", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20)|| !mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))return 0;
    if (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps8(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u))
    {
      if (*((_DWORD *)*this + 9))
        v6 = (uint64_t)(*this - 2);
      else
        v6 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
      return mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v18 = (const void **)"requires attribute 'scatter_dims'";
    v19 = 259;
    mlir::OpState::emitOpError(this, &v18, (uint64_t)v20);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
    if (v20[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
    if (v27)
    {
      v9 = (_QWORD **)__p;
      if (__p)
      {
        v10 = v26;
        v11 = __p;
        if (v26 != __p)
        {
          do
            v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          v11 = __p;
        }
        v26 = v9;
        operator delete(v11);
      }
      v12 = v23;
      if (v23)
      {
        v13 = v24;
        v14 = v23;
        if (v24 != v23)
        {
          do
          {
            v16 = (void *)*--v13;
            v15 = v16;
            *v13 = 0;
            if (v16)
              operator delete[](v15);
          }
          while (v13 != v12);
          v14 = v23;
        }
        v24 = v12;
        operator delete(v14);
      }
      if (v21 != &v22)
        free(v21);
    }
  }
  return v8;
}

BOOL mlir::tensor::ScatterOp::parse(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  mlir::UnitAttr **v5;
  mlir::MLIRContext *v6;
  uint64_t UnitAttr;
  uint64_t v8;
  uint64_t v9;
  void *Results;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t Inputs;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  __int16 v24;
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  memset(v27, 0, 24);
  v20[0] = v27;
  v20[1] = 1;
  memset(v26, 0, 24);
  v19[0] = v26;
  v19[1] = 1;
  memset(v25, 0, 24);
  v18[0] = v25;
  v18[1] = 1;
  v16 = 0;
  v17 = 0;
  Inputs = 0;
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 672))(a1, v27, 1))
    return 0;
  v24 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t *, const char *, uint64_t, uint64_t **))(*a1 + 368))(a1, "into", 4, &v21))return 0;
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 672))(a1, v26, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t *))(*a1 + 296))(a1))
    return 0;
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 672))(a1, v25, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t *))(*a1 + 312))(a1))
    return 0;
  v24 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t *, const char *, uint64_t, uint64_t **))(*a1 + 368))(a1, "scatter_dims", 12, &v21)|| !(*(unsigned __int8 (**)(uint64_t *))(*a1 + 264))(a1)|| !mlir::AsmParser::parseCustomAttributeWithFallback<mlir::detail::DenseArrayAttrImpl<long long>>((uint64_t)a1, &v17, 0))
  {
    return 0;
  }
  if (v17)
  {
    v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties>(a2);
    *v4 = v17;
  }
  if (!(*(unsigned __int8 (**)(uint64_t *))(*a1 + 280))(a1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t *, const char *, uint64_t))(*a1 + 376))(a1, "unique", 6))
  {
    v5 = (mlir::UnitAttr **)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
    UnitAttr = mlir::Builder::getUnitAttr(v5, v6);
    *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties>(a2)
              + 8) = UnitAttr;
  }
  v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, _QWORD *))(*a1 + 456))(a1, a2 + 14))
    return 0;
  v8 = a2[1];
  v21 = a1;
  v22 = &v14;
  v23 = a2;
  if (!mlir::tensor::ScatterOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::ScatterOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v21))return 0;
  if (!(*(unsigned __int8 (**)(uint64_t *))(*a1 + 104))(a1))
    return 0;
  v14 = 0;
  if (!mlir::AsmParser::parseType<mlir::FunctionType>((uint64_t)a1, &v14))
    return 0;
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v14);
  v16 = v9;
  Results = (void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v14);
  mlir::OperationState::addTypes((uint64_t)a2, Results, v11);
  v21 = v20;
  v22 = v19;
  v23 = v18;
  v12 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  return mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>((uint64_t)a1, &v21, &Inputs, v12, (uint64_t)(a2 + 2)) != 0;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  BOOL v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  _QWORD v70[4];
  __int16 v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  _QWORD v75[3];
  void *v76;
  unsigned int v77;
  unsigned int v78;
  _BYTE v79[96];
  void *v80;
  _QWORD *v81;
  void *__p;
  _QWORD **v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v6 = a2[1];
  v7 = a2[2];
  v9 = **a2;
  v8 = (*a2)[1];
  v11 = *v6;
  v10 = v6[1];
  v13 = *v7;
  v12 = v7[1];
  v75[0] = v9;
  v70[0] = v11;
  v72 = v13;
  v14 = v8 == 0;
  v15 = v10 == 0;
  v16 = v8 | v10 | v12;
  v17 = v16 == 0;
  if (v16)
  {
    v19 = 0;
    v20 = v9 + 32 * v8;
    v21 = v13;
    v22 = v11;
    v23 = v9;
    v24 = v11 + 32 * v10;
    v25 = v13 + 32 * v12;
    while (v23 == v20)
    {
      if (v22 != v24)
      {
        v26 = v70;
        v23 = v22;
        goto LABEL_11;
      }
      v27 = v13 + 32 * v12;
      v22 = v24;
      v23 = v20;
      if (v21 != v25)
      {
        v26 = &v72;
        v23 = v21;
        goto LABEL_11;
      }
LABEL_12:
      ++v19;
      v29 = v23 == v20 && v22 == v24 && v27 == v25;
      v21 = v27;
      if (v29)
      {
        v18 = (const char *)a3[1];
        if (v18 != v19)
          goto LABEL_45;
        v30 = (_QWORD *)*a3;
        v75[0] = v9;
        v70[0] = v11;
        v72 = v13;
        if (!v17)
        {
          while (2)
          {
            if (!v9 || (v31 = v9, v14))
            {
              if (v13 == v25)
                v32 = 0;
              else
                v32 = v13;
              if (v11 != 0 && !v15)
                v31 = v11;
              else
                v31 = v32;
            }
            if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v31, *v30, a5))return 0;
            if (v14)
              v33 = v11;
            else
              v33 = v9;
            v34 = v75;
            if (v14)
              v34 = v70;
            if (v14 && v15)
            {
              v35 = v25;
              if (v13 != v25)
              {
                v34 = &v72;
                goto LABEL_40;
              }
            }
            else
            {
              v13 = v33;
LABEL_40:
              *v34 = v13 + 32;
              v9 = v75[0];
              v11 = v70[0];
              v35 = v72;
            }
            ++v30;
            v15 = v11 == v24;
            v13 = v35;
            v14 = v9 == v20;
            if (v9 == v20)
            {
              v13 = v35;
              if (v11 == v24)
              {
                v13 = v35;
                if (v35 == v25)
                  return 1;
              }
            }
            continue;
          }
        }
        return 1;
      }
    }
    v26 = v75;
LABEL_11:
    *v26 = v23 + 32;
    v23 = v75[0];
    v22 = v70[0];
    v27 = v72;
    goto LABEL_12;
  }
  v18 = (const char *)a3[1];
  if (!v18)
    return 1;
  v19 = 0;
LABEL_45:
  v37 = v18;
  v71 = 257;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v75, a1, a4, v70);
  if (v75[0])
  {
    LODWORD(v72) = 5;
    v73 = v19;
    v38 = (char *)&v72;
    v39 = (char *)v76;
    if (v77 >= v78)
    {
      v61 = v77 + 1;
      if (v76 <= &v72 && (char *)v76 + 24 * v77 > (char *)&v72)
      {
        v66 = (char *)&v72 - (_BYTE *)v76;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v61, 24);
        v39 = (char *)v76;
        v38 = (char *)v76 + v66;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v61, 24);
        v38 = (char *)&v72;
        v39 = (char *)v76;
      }
    }
    v40 = &v39[24 * v77];
    v41 = *(_OWORD *)v38;
    *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
    *(_OWORD *)v40 = v41;
    v42 = ++v77;
    if (v75[0])
    {
      LODWORD(v72) = 3;
      v73 = " operands present, but expected ";
      v74 = 32;
      v43 = (char *)&v72;
      v44 = (char *)v76;
      if (v42 >= v78)
      {
        v62 = v42 + 1;
        v63 = (char *)v76 + 24 * v42 > (char *)&v72;
        if (v76 <= &v72 && v63)
        {
          v67 = (char *)&v72 - (_BYTE *)v76;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v62, 24);
          v44 = (char *)v76;
          v43 = (char *)v76 + v67;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v62, 24);
          v43 = (char *)&v72;
          v44 = (char *)v76;
        }
      }
      v45 = &v44[24 * v77];
      v46 = *(_OWORD *)v43;
      *((_QWORD *)v45 + 2) = *((_QWORD *)v43 + 2);
      *(_OWORD *)v45 = v46;
      v47 = ++v77;
      if (v75[0])
      {
        LODWORD(v72) = 5;
        v73 = v37;
        v48 = (char *)&v72;
        v49 = (char *)v76;
        if (v47 >= v78)
        {
          v64 = v47 + 1;
          v65 = (char *)v76 + 24 * v47 > (char *)&v72;
          if (v76 <= &v72 && v65)
          {
            v68 = (char *)&v72 - (_BYTE *)v76;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v64, 24);
            v49 = (char *)v76;
            v48 = (char *)v76 + v68;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v64, 24);
            v48 = (char *)&v72;
            v49 = (char *)v76;
          }
        }
        v50 = &v49[24 * v77];
        v51 = *(_OWORD *)v48;
        *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
        *(_OWORD *)v50 = v51;
        ++v77;
      }
    }
  }
  v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
  if (v75[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
  if (v84)
  {
    v52 = (_QWORD **)__p;
    if (__p)
    {
      v53 = v83;
      v54 = __p;
      if (v83 != __p)
      {
        do
          v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
        while (v53 != v52);
        v54 = __p;
      }
      v83 = v52;
      operator delete(v54);
    }
    v55 = v80;
    if (v80)
    {
      v56 = v81;
      v57 = v80;
      if (v81 != v80)
      {
        do
        {
          v59 = (void *)*--v56;
          v58 = v59;
          *v56 = 0;
          if (v59)
            operator delete[](v58);
        }
        while (v56 != v55);
        v57 = v80;
      }
      v81 = v55;
      operator delete(v57);
    }
    if (v76 != v79)
      free(v76);
  }
  return v36;
}

void mlir::tensor::ScatterOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  mlir::Operation *v31;
  mlir::ArrayAttr *v32;
  uint64_t Value;
  uint64_t v34;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  llvm::raw_ostream *v37;
  _BYTE *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  mlir::Operation *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[4];
  uint64_t v47[4];
  uint64_t v48[2];
  void *v49;
  uint64_t v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 3uLL)
  {
    *v9 = 1869901417;
    *((_QWORD *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "into", 4uLL);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "[", 1uLL);
  }
  else
  {
    *v13 = 91;
    ++*((_QWORD *)v12 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 88));
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "]", 1uLL);
  }
  else
  {
    *v15 = 93;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = *((_QWORD *)v18 + 4);
  if ((unint64_t)(*((_QWORD *)v18 + 3) - v19) > 0xB)
  {
    *(_DWORD *)(v19 + 8) = 1936550244;
    *(_QWORD *)v19 = *(_QWORD *)"scatter_dims";
    *((_QWORD *)v18 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v18, "scatter_dims", 0xCuLL);
  }
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if (*((_BYTE **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, "(", 1uLL);
  }
  else
  {
    *v21 = 40;
    ++*((_QWORD *)v20 + 4);
  }
  v49 = (void *)*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
  {
    v22 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v23 = (*(uint64_t (**)(_QWORD *))(*v22 + 80))(v22) + v22[4] - v22[2];
    mlir::detail::DenseArrayAttrImpl<long long>::print((llvm::raw_ostream *)&v49, (uint64_t)a2);
    if (v23 == (*(uint64_t (**)(_QWORD *))(*v22 + 80))(v22) + v22[4] - v22[2])
      (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v49);
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if (*((_BYTE **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, ")", 1uLL);
  }
  else
  {
    *v25 = 41;
    ++*((_QWORD *)v24 + 4);
  }
  v26 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v26 = 0;
  if (*(_QWORD *)(v26 + 8))
  {
    v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
    {
      llvm::raw_ostream::write(v27, 32);
    }
    else
    {
      *((_QWORD *)v27 + 4) = v28 + 1;
      *v28 = 32;
    }
    v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v30 = *((_QWORD *)v29 + 4);
    if ((unint64_t)(*((_QWORD *)v29 + 3) - v30) > 5)
    {
      *(_WORD *)(v30 + 4) = 25973;
      *(_DWORD *)v30 = 1902734965;
      *((_QWORD *)v29 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v29, "unique", 6uLL);
    }
  }
  v49 = v51;
  v51[0] = "scatter_dims";
  v51[1] = 12;
  v51[2] = "unique";
  v51[3] = 6;
  v50 = 0x200000002;
  mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v31 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v47[0] = mlir::Operation::getAttrDictionary(v31);
    v32 = (mlir::ArrayAttr *)v47;
  }
  else
  {
    v32 = (mlir::Operation *)((char *)v31 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v32);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v34, v49, v50);
  v35 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v36 = (_BYTE *)*((_QWORD *)v35 + 4);
  if ((unint64_t)v36 >= *((_QWORD *)v35 + 3))
  {
    llvm::raw_ostream::write(v35, 32);
  }
  else
  {
    *((_QWORD *)v35 + 4) = v36 + 1;
    *v36 = 32;
  }
  v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v38 = (_BYTE *)*((_QWORD *)v37 + 4);
  if (*((_BYTE **)v37 + 3) == v38)
  {
    llvm::raw_ostream::write(v37, ":", 1uLL);
  }
  else
  {
    *v38 = 58;
    ++*((_QWORD *)v37 + 4);
  }
  v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v40 = (_BYTE *)*((_QWORD *)v39 + 4);
  if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
  {
    llvm::raw_ostream::write(v39, 32);
  }
  else
  {
    *((_QWORD *)v39 + 4) = v40 + 1;
    *v40 = 32;
  }
  v41 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v42 = *((_QWORD *)v41 + 9);
    v43 = *((unsigned int *)v41 + 17);
  }
  else
  {
    v42 = 0;
    v43 = 0;
  }
  v46[0] = v42;
  v46[1] = v43;
  mlir::OperandRange::getTypes(v46, v47);
  v44 = *((unsigned int *)*this + 9);
  v45 = (uint64_t)*this - 16;
  if (!(_DWORD)v44)
    v45 = 0;
  v48[0] = v45;
  v48[1] = v44;
  mlir::OperandRange::getTypes(v48, v46);
  mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>((uint64_t)a2, v47, v46);
  if (v49 != v51)
    free(v49);
}

uint64_t mlir::tensor::detail::SplatOpGenericAdaptorBase::SplatOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.splat", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::SplatOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v16;
  uint64_t NextResultAtOffset;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char v46;
  _QWORD **v47;
  _QWORD **v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  void *v54;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  const void **v66[4];
  __int16 v67;
  unint64_t v68;
  int v69;
  const char *v70;
  uint64_t v71;
  _QWORD v72[3];
  void *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE v76[96];
  void *v77;
  _QWORD *v78;
  void *__p;
  _QWORD **v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v68 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&v68))
  {
    v3 = *(void **)(*(_QWORD *)v68 + 136);
    v4 = v3 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
      || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id;
    v5 = v4 || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    v6 = v5 || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    v7 = v6 || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    v8 = v7 || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    v9 = v8 || v3 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    v10 = v9 || v3 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    v11 = v10 || v3 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    v12 = v11 || v3 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    v13 = v12 || v3 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    v14 = v13 || v3 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    if (!v14 && v3 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v67 = 261;
      v66[0] = (const void **)"operand";
      v66[1] = (const void **)7;
      mlir::Operation::emitOpError(v2, v66, (uint64_t)v72);
      if (v72[0])
      {
        v69 = 3;
        v70 = " #";
        v71 = 2;
        v28 = &v69;
        v29 = (char *)v73;
        if (v74 >= v75)
        {
          v56 = v74 + 1;
          if (v73 <= &v69 && (char *)v73 + 24 * v74 > (char *)&v69)
          {
            v62 = (char *)&v69 - (_BYTE *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v56, 24);
            v29 = (char *)v73;
            v28 = (int *)((char *)v73 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v56, 24);
            v28 = &v69;
            v29 = (char *)v73;
          }
        }
        v30 = &v29[24 * v74];
        v31 = *(_OWORD *)v28;
        *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v30 = v31;
        v32 = ++v74;
        if (v72[0])
        {
          v69 = 5;
          v70 = 0;
          v33 = &v69;
          v34 = (char *)v73;
          if (v32 >= v75)
          {
            v57 = v32 + 1;
            v58 = (char *)v73 + 24 * v32 > (char *)&v69;
            if (v73 <= &v69 && v58)
            {
              v63 = (char *)&v69 - (_BYTE *)v73;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
              v34 = (char *)v73;
              v33 = (int *)((char *)v73 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
              v33 = &v69;
              v34 = (char *)v73;
            }
          }
          v35 = &v34[24 * v74];
          v36 = *(_OWORD *)v33;
          *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
          *(_OWORD *)v35 = v36;
          v37 = ++v74;
          if (v72[0])
          {
            v69 = 3;
            v70 = " must be integer/index/float type, but got ";
            v71 = 43;
            v38 = &v69;
            v39 = (char *)v73;
            if (v37 >= v75)
            {
              v59 = v37 + 1;
              v60 = (char *)v73 + 24 * v37 > (char *)&v69;
              if (v73 <= &v69 && v60)
              {
                v64 = (char *)&v69 - (_BYTE *)v73;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v59, 24);
                v39 = (char *)v73;
                v38 = (int *)((char *)v73 + v64);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v59, 24);
                v38 = &v69;
                v39 = (char *)v73;
              }
            }
            v40 = &v39[24 * v74];
            v41 = *(_OWORD *)v38;
            *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
            *(_OWORD *)v40 = v41;
            ++v74;
            if (v72[0])
            {
              v42 = &v69;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v69, v68);
              v43 = (char *)v73;
              if (v74 >= v75)
              {
                v61 = v74 + 1;
                if (v73 <= &v69 && (char *)v73 + 24 * v74 > (char *)&v69)
                {
                  v65 = (char *)&v69 - (_BYTE *)v73;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v61, 24);
                  v43 = (char *)v73;
                  v42 = (int *)((char *)v73 + v65);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v61, 24);
                  v42 = &v69;
                  v43 = (char *)v73;
                }
              }
              v44 = &v43[24 * v74];
              v45 = *(_OWORD *)v42;
              *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
              *(_OWORD *)v44 = v45;
              ++v74;
            }
          }
        }
      }
      v46 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v72);
      if (v72[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v72);
      if (v81)
      {
        v47 = (_QWORD **)__p;
        if (__p)
        {
          v48 = v80;
          v49 = __p;
          if (v80 != __p)
          {
            do
              v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
            while (v48 != v47);
            v49 = __p;
          }
          v80 = v47;
          operator delete(v49);
        }
        v50 = v77;
        if (v77)
        {
          v51 = v78;
          v52 = v77;
          if (v78 != v77)
          {
            do
            {
              v54 = (void *)*--v51;
              v53 = v54;
              *v51 = 0;
              if (v54)
                operator delete[](v53);
            }
            while (v51 != v50);
            v52 = v77;
          }
          v78 = v50;
          operator delete(v52);
        }
        if (v73 != v76)
          free(v73);
      }
      if (!v46)
        return 0;
    }
  }
  v16 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps7(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v18 = (uint64_t)(*this - 2);
  else
    v18 = 0;
  v72[0] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::TensorType::getElementType((mlir::TensorType *)v72) == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v66[0] = (const void **)"failed to verify that operand type matches element type of result";
  v67 = 259;
  mlir::OpState::emitOpError(this, v66, (uint64_t)v72);
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v72);
  if (v72[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v72);
  if (v81)
  {
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v80;
      v22 = __p;
      if (v80 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v80 = v20;
      operator delete(v22);
    }
    v23 = v77;
    if (v77)
    {
      v24 = v78;
      v25 = v77;
      if (v78 != v77)
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v77;
      }
      v78 = v23;
      operator delete(v25);
    }
    if (v73 != v76)
      free(v73);
  }
  return v19;
}

BOOL mlir::tensor::SplatOp::parse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *ArgAttrsAttr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ElementType;
  uint64_t v12;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  _QWORD v35[4];
  __int16 v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x1E0C80C00];
  memset(v50, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v50, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v40[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, v40))
    return 0;
  v4 = (_QWORD *)v40[0];
  if (*(_UNKNOWN **)(*(_QWORD *)v40[0] + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v40[0] + 8);
    v40[0] = v4;
    v40[1] = v5;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v40))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v40);
      if (!v7)
      {
LABEL_11:
        v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
        v35[0] = v4;
        v35[1] = v9;
        mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
        v10 = *(unsigned int *)(a2 + 72);
        if (v10 >= *(_DWORD *)(a2 + 76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
          LODWORD(v10) = *(_DWORD *)(a2 + 72);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v10) = v4;
        ++*(_DWORD *)(a2 + 72);
        v40[0] = v4;
        ElementType = mlir::TensorType::getElementType((mlir::TensorType *)v40);
        return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v50, ElementType, a2 + 16) != 0;
      }
      v8 = 8 * v7;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v8 -= 8;
        if (!v8)
          goto LABEL_11;
      }
    }
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v36 = 257;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v40, a1, v14, v35);
  if (v40[0])
  {
    v37 = 3;
    v38 = "'aggregate' must be statically shaped tensor of any type values, but got ";
    v39 = 73;
    v15 = &v37;
    v16 = (char *)v41;
    if (v42 >= v43)
    {
      v31 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v16 = (char *)v41;
        v15 = (int *)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v15 = &v37;
        v16 = (char *)v41;
      }
    }
    v17 = &v16[24 * v42];
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
    *(_OWORD *)v17 = v18;
    ++v42;
    if (v40[0])
    {
      v19 = &v37;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, (uint64_t)v4);
      v20 = (char *)v41;
      if (v42 >= v43)
      {
        v32 = v42 + 1;
        if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          v20 = (char *)v41;
          v19 = (int *)((char *)v41 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          v19 = &v37;
          v20 = (char *)v41;
        }
      }
      v21 = &v20[24 * v42];
      v22 = *(_OWORD *)v19;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v21 = v22;
      ++v42;
    }
  }
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v48;
      v25 = __p;
      if (v48 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v48 = v23;
      operator delete(v25);
    }
    v26 = v45;
    if (v45)
    {
      v27 = v46;
      v28 = v45;
      if (v46 != v45)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v45;
      }
      v46 = v26;
      operator delete(v28);
    }
    if (v41 != v44)
      free(v41);
  }
  return v12;
}

void mlir::tensor::SplatOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v19 = v21;
  v20 = 0x200000000;
  v6 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v9, v19, v20);
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *v13 = 58;
    ++*((_QWORD *)v12 + 4);
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v16 = (uint64_t)*this - 16;
  else
    v16 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v19 != v21)
    free(v19);
}

uint64_t mlir::tensor::detail::UnPackOpGenericAdaptorBase::UnPackOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t Context;
  unint64_t v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v11;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "tensor.unpack", 13, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::tensor::UnPackOp::getODSOperands(mlir::tensor::UnPackOp *this, unsigned int a2)
{
  int v2;
  unsigned int v3;
  int32x4_t v4;
  int32x4_t v5;
  uint32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  unsigned int v9;
  int32x4_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (a2)
  {
    if (a2 >= 8)
    {
      v4 = (int32x4_t)xmmword_181235170;
      v3 = a2 & 0xFFFFFFF8;
      v5 = 0uLL;
      v6.i64[0] = 0x100000001;
      v6.i64[1] = 0x100000001;
      v7.i64[0] = 0x300000003;
      v7.i64[1] = 0x300000003;
      v8.i64[0] = 0x800000008;
      v8.i64[1] = 0x800000008;
      v9 = a2 & 0xFFFFFFF8;
      v10 = 0uLL;
      do
      {
        v5 = vsubq_s32(v5, (int32x4_t)vcgtq_u32((uint32x4_t)v4, v6));
        v10 = vsubq_s32(v10, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)(*(_OWORD *)&v4 & __PAIR128__(0xFFFFFFFEFFFFFFFELL, 0xFFFFFFFEFFFFFFFELL)), v7)));
        v4 = vaddq_s32(v4, v8);
        v9 -= 8;
      }
      while (v9);
      v2 = vaddvq_s32(vaddq_s32(v10, v5));
      if (v3 == a2)
        goto LABEL_11;
    }
    else
    {
      v2 = 0;
      v3 = 0;
    }
    do
    {
      if (v3 > 1)
        ++v2;
      ++v3;
    }
    while (a2 != v3);
  }
  else
  {
    v2 = 0;
  }
LABEL_11:
  v11 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
  {
    v12 = *(_DWORD *)(v11 + 68);
    v13 = *(_QWORD *)(v11 + 72);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  return v13 + 32 * (a2 + (v12 - 3) * v2);
}

uint64_t mlir::tensor::UnPackOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  int *v41;
  char *v42;
  char *v43;
  __int128 v44;
  _QWORD **v45;
  _QWORD **v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  int *v51;
  char *v52;
  char *v53;
  __int128 v54;
  int *v55;
  char *v56;
  char *v57;
  __int128 v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  int *v65;
  char *v66;
  char *v67;
  __int128 v68;
  _QWORD **v69;
  _QWORD **v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  int *v75;
  char *v76;
  char *v77;
  __int128 v78;
  int *v79;
  char *v80;
  char *v81;
  __int128 v82;
  _QWORD **v83;
  _QWORD **v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  uint64_t v107;
  int v108;
  const char *v109;
  uint64_t v110;
  _QWORD v111[3];
  void *v112;
  unsigned int v113;
  unsigned int v114;
  _BYTE v115[96];
  void *v116;
  _QWORD *v117;
  void *__p;
  _QWORD **v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v107 = v6;
  if (!v6)
  {
    a3(v111, a4);
    if (v111[0])
    {
      v108 = 3;
      v109 = "expected DictionaryAttr to set properties";
      v110 = 41;
      v15 = &v108;
      v16 = (char *)v112;
      if (v113 >= v114)
      {
        v89 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v98 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
          v16 = (char *)v112;
          v15 = (int *)((char *)v112 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
          v15 = &v108;
          v16 = (char *)v112;
        }
      }
      v17 = &v16[24 * v113];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      ++v113;
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    }
    if (!v120)
      return 0;
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v119;
      v21 = __p;
      if (v119 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v119 = v19;
      operator delete(v21);
    }
    v22 = v116;
    if (!v116)
      goto LABEL_117;
    v23 = v117;
    v24 = v116;
    if (v117 == v116)
      goto LABEL_116;
    do
    {
      v26 = (void *)*--v23;
      v25 = v26;
      *v23 = 0;
      if (v26)
        operator delete[](v25);
    }
    while (v23 != v22);
    goto LABEL_115;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v107, "inner_dims_pos", 0xEuLL);
  if (!v8)
  {
    a3(v111, a4);
    if (v111[0])
    {
      v108 = 3;
      v109 = "expected key entry for inner_dims_pos in DictionaryAttr to set Properties.";
      v110 = 74;
      v27 = &v108;
      v28 = (char *)v112;
      if (v113 >= v114)
      {
        v90 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v99 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
          v28 = (char *)v112;
          v27 = (int *)((char *)v112 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
          v27 = &v108;
          v28 = (char *)v112;
        }
      }
      v29 = &v28[24 * v113];
      v30 = *(_OWORD *)v27;
      *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
      *(_OWORD *)v29 = v30;
      ++v113;
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    }
    if (!v120)
      return 0;
    v31 = (_QWORD **)__p;
    if (__p)
    {
      v32 = v119;
      v33 = __p;
      if (v119 != __p)
      {
        do
          v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        v33 = __p;
      }
      v119 = v31;
      operator delete(v33);
    }
    v22 = v116;
    if (!v116)
      goto LABEL_117;
    v34 = v117;
    v24 = v116;
    if (v117 == v116)
      goto LABEL_116;
    do
    {
      v36 = (void *)*--v34;
      v35 = v36;
      *v34 = 0;
      if (v36)
        operator delete[](v35);
    }
    while (v34 != v22);
    goto LABEL_115;
  }
  v9 = (uint64_t)v8;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    a3(v111, a4);
    if (v111[0])
    {
      v108 = 3;
      v110 = 59;
      v37 = &v108;
      v38 = (char *)v112;
      if (v113 >= v114)
      {
        v91 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v100 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
          v38 = (char *)v112;
          v37 = (int *)((char *)v112 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
          v37 = &v108;
          v38 = (char *)v112;
        }
      }
      v39 = &v38[24 * v113];
      v40 = *(_OWORD *)v37;
      *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
      *(_OWORD *)v39 = v40;
      ++v113;
      if (v111[0])
      {
        v41 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v9);
        v42 = (char *)v112;
        if (v113 >= v114)
        {
          v92 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            v101 = (char *)&v108 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v92, 24);
            v42 = (char *)v112;
            v41 = (int *)((char *)v112 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v92, 24);
            v41 = &v108;
            v42 = (char *)v112;
          }
        }
        v43 = &v42[24 * v113];
        v44 = *(_OWORD *)v41;
        *((_QWORD *)v43 + 2) = *((_QWORD *)v41 + 2);
        *(_OWORD *)v43 = v44;
        ++v113;
        if (v111[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120)
      return 0;
    v45 = (_QWORD **)__p;
    if (__p)
    {
      v46 = v119;
      v47 = __p;
      if (v119 != __p)
      {
        do
          v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
        while (v46 != v45);
        v47 = __p;
      }
      v119 = v45;
      operator delete(v47);
    }
    v22 = v116;
    if (!v116)
      goto LABEL_117;
    v48 = v117;
    v24 = v116;
    if (v117 == v116)
      goto LABEL_116;
    do
    {
      v50 = (void *)*--v48;
      v49 = v50;
      *v48 = 0;
      if (v50)
        operator delete[](v49);
    }
    while (v48 != v22);
    goto LABEL_115;
  }
  *a1 = v9;
  v10 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v107, "outer_dims_perm", 0xFuLL);
  if (v10)
  {
    v11 = (uint64_t)v10;
    if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v10))
    {
      a3(v111, a4);
      if (v111[0])
      {
        v108 = 3;
        v110 = 60;
        v51 = &v108;
        v52 = (char *)v112;
        if (v113 >= v114)
        {
          v93 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            v102 = (char *)&v108 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
            v52 = (char *)v112;
            v51 = (int *)((char *)v112 + v102);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
            v51 = &v108;
            v52 = (char *)v112;
          }
        }
        v53 = &v52[24 * v113];
        v54 = *(_OWORD *)v51;
        *((_QWORD *)v53 + 2) = *((_QWORD *)v51 + 2);
        *(_OWORD *)v53 = v54;
        ++v113;
        if (v111[0])
        {
          v55 = &v108;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v11);
          v56 = (char *)v112;
          if (v113 >= v114)
          {
            v96 = v113 + 1;
            if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
            {
              v105 = (char *)&v108 - (_BYTE *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v96, 24);
              v56 = (char *)v112;
              v55 = (int *)((char *)v112 + v105);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v96, 24);
              v55 = &v108;
              v56 = (char *)v112;
            }
          }
          v57 = &v56[24 * v113];
          v58 = *(_OWORD *)v55;
          *((_QWORD *)v57 + 2) = *((_QWORD *)v55 + 2);
          *(_OWORD *)v57 = v58;
          ++v113;
          if (v111[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
        }
      }
      if (!v120)
        return 0;
      v59 = (_QWORD **)__p;
      if (__p)
      {
        v60 = v119;
        v61 = __p;
        if (v119 != __p)
        {
          do
            v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
          while (v60 != v59);
          v61 = __p;
        }
        v119 = v59;
        operator delete(v61);
      }
      v22 = v116;
      if (!v116)
        goto LABEL_117;
      v62 = v117;
      v24 = v116;
      if (v117 == v116)
        goto LABEL_116;
      do
      {
        v64 = (void *)*--v62;
        v63 = v64;
        *v62 = 0;
        if (v64)
          operator delete[](v63);
      }
      while (v62 != v22);
      goto LABEL_115;
    }
    a1[1] = v11;
  }
  v12 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v107, "static_inner_tiles", 0x12uLL);
  if (!v12)
  {
    a3(v111, a4);
    if (v111[0])
    {
      v108 = 3;
      v109 = "expected key entry for static_inner_tiles in DictionaryAttr to set Properties.";
      v110 = 78;
      v65 = &v108;
      v66 = (char *)v112;
      if (v113 >= v114)
      {
        v94 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v103 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          v66 = (char *)v112;
          v65 = (int *)((char *)v112 + v103);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          v65 = &v108;
          v66 = (char *)v112;
        }
      }
      v67 = &v66[24 * v113];
      v68 = *(_OWORD *)v65;
      *((_QWORD *)v67 + 2) = *((_QWORD *)v65 + 2);
      *(_OWORD *)v67 = v68;
      ++v113;
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    }
    if (!v120)
      return 0;
    v69 = (_QWORD **)__p;
    if (__p)
    {
      v70 = v119;
      v71 = __p;
      if (v119 != __p)
      {
        do
          v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
        while (v70 != v69);
        v71 = __p;
      }
      v119 = v69;
      operator delete(v71);
    }
    v22 = v116;
    if (!v116)
      goto LABEL_117;
    v72 = v117;
    v24 = v116;
    if (v117 == v116)
      goto LABEL_116;
    do
    {
      v74 = (void *)*--v72;
      v73 = v74;
      *v72 = 0;
      if (v74)
        operator delete[](v73);
    }
    while (v72 != v22);
    goto LABEL_115;
  }
  v13 = (uint64_t)v12;
  if (mlir::detail::DenseArrayAttrImpl<long long>::classof(v12))
  {
    a1[2] = v13;
    return 1;
  }
  a3(v111, a4);
  if (v111[0])
  {
    v108 = 3;
    v110 = 63;
    v75 = &v108;
    v76 = (char *)v112;
    if (v113 >= v114)
    {
      v95 = v113 + 1;
      if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
      {
        v104 = (char *)&v108 - (_BYTE *)v112;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
        v76 = (char *)v112;
        v75 = (int *)((char *)v112 + v104);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
        v75 = &v108;
        v76 = (char *)v112;
      }
    }
    v77 = &v76[24 * v113];
    v78 = *(_OWORD *)v75;
    *((_QWORD *)v77 + 2) = *((_QWORD *)v75 + 2);
    *(_OWORD *)v77 = v78;
    ++v113;
    if (v111[0])
    {
      v79 = &v108;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v13);
      v80 = (char *)v112;
      if (v113 >= v114)
      {
        v97 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v106 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
          v80 = (char *)v112;
          v79 = (int *)((char *)v112 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
          v79 = &v108;
          v80 = (char *)v112;
        }
      }
      v81 = &v80[24 * v113];
      v82 = *(_OWORD *)v79;
      *((_QWORD *)v81 + 2) = *((_QWORD *)v79 + 2);
      *(_OWORD *)v81 = v82;
      ++v113;
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    }
  }
  if (v120)
  {
    v83 = (_QWORD **)__p;
    if (__p)
    {
      v84 = v119;
      v85 = __p;
      if (v119 != __p)
      {
        do
          v84 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v84 - 1);
        while (v84 != v83);
        v85 = __p;
      }
      v119 = v83;
      operator delete(v85);
    }
    v22 = v116;
    if (!v116)
      goto LABEL_117;
    v86 = v117;
    v24 = v116;
    if (v117 == v116)
    {
LABEL_116:
      v117 = v22;
      operator delete(v24);
LABEL_117:
      if (v112 != v115)
        free(v112);
      return 0;
    }
    do
    {
      v88 = (void *)*--v86;
      v87 = v88;
      *v86 = 0;
      if (v88)
        operator delete[](v87);
    }
    while (v86 != v22);
LABEL_115:
    v24 = v116;
    goto LABEL_116;
  }
  return 0;
}

uint64_t mlir::tensor::UnPackOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  void *v21;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[7];

  v27[6] = *MEMORY[0x1E0C80C00];
  v24 = a1;
  v25 = v27;
  v26 = 0x300000000;
  if (!*a2)
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_10;
    goto LABEL_7;
  }
  NamedAttr = mlir::Builder::getNamedAttr(&v24, (uint64_t)"inner_dims_pos", 14, *a2);
  v5 = v4;
  v6 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
    v6 = v26;
  }
  v7 = (uint64_t *)((char *)v25 + 16 * v6);
  *v7 = NamedAttr;
  v7[1] = v5;
  v8 = v26 + 1;
  LODWORD(v26) = v26 + 1;
  v9 = a2[1];
  if (v9)
  {
LABEL_7:
    v10 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"outer_dims_perm", 15, v9);
    v12 = v11;
    v13 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      v13 = v26;
    }
    v14 = (uint64_t *)((char *)v25 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
LABEL_10:
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"static_inner_tiles", 18, v15);
    v18 = v17;
    v19 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      v19 = v26;
    }
    v20 = (uint64_t *)((char *)v25 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
  v21 = v25;
  if (!v8)
  {
    DictionaryAttr = 0;
    if (v25 == v27)
      return DictionaryAttr;
    goto LABEL_16;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v24, (mlir::MLIRContext *)v25, v8);
  v21 = v25;
  if (v25 != v27)
LABEL_16:
    free(v21);
  return DictionaryAttr;
}

uint64_t mlir::tensor::UnPackOp::getInherentAttr(int a1, _QWORD *a2, char *__s1, size_t __n)
{
  if (__n == 18)
  {
    if (!memcmp(__s1, "static_inner_tiles", 0x12uLL))
      return a2[2];
    return 0;
  }
  if (__n == 15)
  {
    if (!memcmp(__s1, "outer_dims_perm", 0xFuLL))
      return a2[1];
    return 0;
  }
  if (__n != 14)
    return 0;
  if (*(_QWORD *)__s1 != 0x69645F72656E6E69 || *(_QWORD *)(__s1 + 6) != 0x736F705F736D6964)
    return 0;
  return *a2;
}

uint64_t mlir::tensor::UnPackOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v5 = (_QWORD *)result;
  if (a3 == 18)
  {
    result = memcmp(__s1, "static_inner_tiles", 0x12uLL);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
        if ((_DWORD)result)
          v7 = a4;
        else
          v7 = 0;
        v5[2] = v7;
      }
      else
      {
        v5[2] = 0;
      }
    }
  }
  else if (a3 == 15)
  {
    result = memcmp(__s1, "outer_dims_perm", 0xFuLL);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
        if ((_DWORD)result)
          v8 = a4;
        else
          v8 = 0;
        v5[1] = v8;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (a3 == 14 && *(_QWORD *)__s1 == 0x69645F72656E6E69 && *(_QWORD *)(__s1 + 6) == 0x736F705F736D6964)
  {
    if (a4)
    {
      result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
      if ((_DWORD)result)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *(_QWORD *)result = 0;
    }
  }
  return result;
}

void mlir::tensor::UnPackOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"inner_dims_pos", 14, *a2);
  v5 = a2[1];
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"outer_dims_perm", 15, v5);
  v6 = a2[2];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_inner_tiles", 18, v6);
}

BOOL mlir::tensor::UnPackOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_1EDC07000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v4[51];
    return a1[32];
  }
  return result;
}

uint64_t mlir::tensor::UnPackOp::writeProperties(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64);
  else
    v3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *v3);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v3[1]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v3[2]);
}

uint64_t mlir::tensor::UnPackOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t ODSOperands;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t NextResultAtOffset;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  const void **v37[4];
  __int16 v38;
  _QWORD v39[3];
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  void *__p;
  _QWORD **v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v37[0] = (const void **)"requires attribute 'inner_dims_pos'";
    v38 = 259;
    mlir::OpState::emitOpError(this, v37, (uint64_t)v39);
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v39);
    if (v39[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v39);
    if (!v46)
      return v19;
    v22 = (_QWORD **)__p;
    if (__p)
    {
      v23 = v45;
      v24 = __p;
      if (v45 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v45 = v22;
      operator delete(v24);
    }
    v25 = v42;
    if (v42)
    {
      v26 = v43;
      v27 = v42;
      if (v43 == v42)
        goto LABEL_58;
      do
      {
        v29 = (void *)*--v26;
        v28 = v29;
        *v26 = 0;
        if (v29)
          operator delete[](v28);
      }
      while (v26 != v25);
LABEL_57:
      v27 = v42;
LABEL_58:
      v43 = v25;
      operator delete(v27);
    }
LABEL_59:
    if (v40 != &v41)
      free(v40);
    return v19;
  }
  v5 = *(_QWORD **)(v3 + 16);
  if (!v5)
  {
    v37[0] = (const void **)"requires attribute 'static_inner_tiles'";
    v38 = 259;
    mlir::OpState::emitOpError(this, v37, (uint64_t)v39);
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v39);
    if (v39[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v39);
    if (!v46)
      return v19;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v45;
      v32 = __p;
      if (v45 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v45 = v30;
      operator delete(v32);
    }
    v25 = v42;
    if (v42)
    {
      v33 = v43;
      v27 = v42;
      if (v43 == v42)
        goto LABEL_58;
      do
      {
        v35 = (void *)*--v33;
        v34 = v35;
        *v33 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v33 != v25);
      goto LABEL_57;
    }
    goto LABEL_59;
  }
  v6 = *(_QWORD **)(v3 + 8);
  v39[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"outer_dims_perm", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v39))return 0;
  v39[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"inner_dims_pos", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v39))return 0;
  v39[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"static_inner_tiles", (const char *)0x12, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v39)|| !mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  v7 = 1;
  ODSOperands = mlir::tensor::UnPackOp::getODSOperands((mlir::tensor::UnPackOp *)this, 1u);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = ODSOperands + 24;
    while (mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v11 + 1))
    {
      ++v11;
      v12 += 32;
      if (v10 == v11)
      {
        v7 = v11 + 1;
        goto LABEL_15;
      }
    }
    return 0;
  }
LABEL_15:
  v13 = mlir::tensor::UnPackOp::getODSOperands((mlir::tensor::UnPackOp *)this, 2u);
  if (v14)
  {
    v15 = v14;
    v16 = v13 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v7))
    {
      ++v7;
      v16 += 32;
      if (!--v15)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  v17 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0);
  if (!mlir::tensor::__mlir_ods_local_type_constraint_TensorOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  v19 = 1;
  v20 = *(_QWORD *)(*(_QWORD *)(mlir::tensor::UnPackOp::getODSOperands((mlir::tensor::UnPackOp *)this, 1u) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)*this + 9))
    v21 = (uint64_t)(*this - 2);
  else
    v21 = 0;
  if (v20 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v37[0] = (const void **)"failed to verify that result type matches type of dest";
    v38 = 259;
    mlir::OpState::emitOpError(this, v37, (uint64_t)v39);
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v39);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v39);
  }
  return v19;
}

uint64_t mlir::tensor::UnPackOp::getCanonicalizationPatterns(uint64_t *a1)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;

  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  v2 = v8;
  v3 = *a1;
  v4 = operator new(0x68uLL);
  result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"tensor.unpack", 13, v2, v3, 0, 0);
  *v4 = &off_1E0E52CB8;
  v4[12] = mlir::tensor::UnPackOp::canonicalize;
  v9 = v4;
  v6 = (_QWORD *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::tensor::UnPackOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  mlir::IndexType **v17;
  mlir::MLIRContext *v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t IndexType;
  _QWORD v25[4];
  __int16 v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  __int16 v38;
  uint64_t __src;
  uint64_t v40;
  _QWORD v41[4];
  _BYTE *v42;
  uint64_t v43;
  _BYTE v44[128];
  _QWORD v45[5];

  v45[4] = *MEMORY[0x1E0C80C00];
  memset(v45, 0, 24);
  v34[0] = (uint64_t)v45;
  v34[1] = 1;
  v32 = 0;
  v33 = 0;
  v42 = v44;
  v43 = 0x400000000;
  v30[1] = 1;
  v31 = 0;
  memset(v41, 0, 24);
  v29[1] = 1;
  v30[0] = (uint64_t)v41;
  __src = 0;
  v40 = 0;
  v28[1] = 1;
  v29[0] = &v40;
  v28[0] = &__src;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v45, 1))
    goto LABEL_33;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "outer_dims_perm", 15))
  {
    if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1)
      || !mlir::AsmParser::parseCustomAttributeWithFallback<mlir::detail::DenseArrayAttrImpl<long long>>(a1, &v33, 0))
    {
      goto LABEL_33;
    }
    if (v33)
    {
      v5 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(a2);
      *(_QWORD *)(v5 + 8) = v33;
    }
  }
  v38 = 257;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "inner_dims_pos", 14, &v35)&& (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1)&& mlir::AsmParser::parseCustomAttributeWithFallback<mlir::detail::DenseArrayAttrImpl<long long>>(a1, &v32, 0))
  {
    if (v32)
    {
      v6 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(a2);
      *v6 = v32;
    }
    v38 = 257;
    if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "inner_tiles", 11, &v35))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        v35 = 0;
        if (mlir::parseDynamicIndexList(a1, (uint64_t)&v42, &v31, &v35, 0, 2))
        {
          v7 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(a2);
          *(_QWORD *)(v7 + 16) = v31;
          v38 = 257;
          if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "into", 4, &v35))
          {
            v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v41, 1))
            {
              v25[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
              if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
              {
                v9 = a2[1];
                v35 = a1;
                v36 = v25;
                v37 = a2;
                if (mlir::tensor::PackOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::UnPackOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v35))
                {
                  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
                  {
                    v35 = 0;
                    if (mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v35))
                    {
                      v40 = v35;
                      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
                      {
                        v35 = 0;
                        if (mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v35))
                        {
                          v10 = v35;
                          __src = v35;
                          v27 = v35;
                          if (*(_UNKNOWN **)(*(_QWORD *)v35 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
                          {
                            v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
                            v26 = 257;
                            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(&v35, a1, v11, v25);
                            v12 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v35, "'dest' must be ranked tensor of any type values, but got ");
                            v13 = mlir::InFlightDiagnostic::append<mlir::Type &>(v12, &v27);
                            v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v13);
                            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v35);
                            v15 = v42;
                            if (v42 == v44)
                              return v14;
                            goto LABEL_35;
                          }
                          v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v35 + 8);
                          v35 = v10;
                          v36 = (_QWORD *)v16;
                          mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
                          v17 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                          IndexType = mlir::Builder::getIndexType(v17, v18);
                          mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
                          v19 = v4;
                          v20 = a2 + 2;
                          if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v34, v29, v19, (uint64_t)(a2 + 2)))
                          {
                            if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v30, v28, v8, (uint64_t)(a2 + 2)))
                            {
                              if (!(_DWORD)v43)
                              {
                                v14 = 1;
                                v15 = v42;
                                if (v42 == v44)
                                  return v14;
                                goto LABEL_35;
                              }
                              v21 = v42;
                              v22 = 32 * v43;
                              v14 = 1;
                              while ((*(unsigned __int8 (**)(uint64_t, _BYTE *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v21, IndexType, v20))
                              {
                                v21 += 32;
                                v22 -= 32;
                                if (!v22)
                                  goto LABEL_34;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_33:
  v14 = 0;
LABEL_34:
  v15 = v42;
  if (v42 != v44)
LABEL_35:
    free(v15);
  return v14;
}

void mlir::tensor::UnPackOp::print(mlir::tensor::UnPackOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  void *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  void *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  _QWORD *v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  llvm::raw_ostream *v53;
  _DWORD *v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  mlir::Operation *v60;
  mlir::ArrayAttr *p_Context;
  unsigned int v62;
  _QWORD *v63;
  uint64_t Value;
  uint64_t v65;
  llvm::raw_ostream *v66;
  _BYTE *v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  llvm::raw_ostream *v74;
  _WORD *v75;
  llvm::raw_ostream *v76;
  _BYTE *v77;
  mlir::MLIRContext *Context;
  void *v79;
  uint64_t v80;
  _QWORD v81[4];
  unint64_t v82[3];

  v82[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v6 = 0;
  if (*(_QWORD *)(v6 + 8))
  {
    v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 32);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 32;
    }
    v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v10 = (void *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 0xEuLL)
    {
      qmemcpy(v10, "outer_dims_perm", 15);
      *((_QWORD *)v9 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v9, "outer_dims_perm", 0xFuLL);
    }
    v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
    {
      llvm::raw_ostream::write(v11, 32);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 32;
    }
    v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v14 = (_BYTE *)*((_QWORD *)v13 + 4);
    if (*((_BYTE **)v13 + 3) == v14)
    {
      llvm::raw_ostream::write(v13, "=", 1uLL);
    }
    else
    {
      *v14 = 61;
      ++*((_QWORD *)v13 + 4);
    }
    v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v16 = (_BYTE *)*((_QWORD *)v15 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
    {
      llvm::raw_ostream::write(v15, 32);
    }
    else
    {
      *((_QWORD *)v15 + 4) = v16 + 1;
      *v16 = 32;
    }
    v17 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v17 = 0;
    v79 = *(void **)(v17 + 8);
    if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
    {
      v18 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v19 = (*(uint64_t (**)(_QWORD *))(*v18 + 80))(v18) + v18[4] - v18[2];
      mlir::detail::DenseArrayAttrImpl<long long>::print((llvm::raw_ostream *)&v79, (uint64_t)a2);
      if (v19 == (*(uint64_t (**)(_QWORD *))(*v18 + 80))(v18) + v18[4] - v18[2])
        (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v79);
    }
  }
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (void *)*((_QWORD *)v22 + 4);
  if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0xDuLL)
  {
    qmemcpy(v23, "inner_dims_pos", 14);
    *((_QWORD *)v22 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v22, "inner_dims_pos", 0xEuLL);
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if (*((_BYTE **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, "=", 1uLL);
  }
  else
  {
    *v27 = 61;
    ++*((_QWORD *)v26 + 4);
  }
  v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if ((unint64_t)v29 >= *((_QWORD *)v28 + 3))
  {
    llvm::raw_ostream::write(v28, 32);
  }
  else
  {
    *((_QWORD *)v28 + 4) = v29 + 1;
    *v29 = 32;
  }
  v79 = *(void **)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
  {
    v30 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v31 = (*(uint64_t (**)(_QWORD *))(*v30 + 80))(v30) + v30[4] - v30[2];
    mlir::detail::DenseArrayAttrImpl<long long>::print((llvm::raw_ostream *)&v79, (uint64_t)a2);
    if (v31 == (*(uint64_t (**)(_QWORD *))(*v30 + 80))(v30) + v30[4] - v30[2])
      (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v79);
  }
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
  {
    llvm::raw_ostream::write(v32, 32);
  }
  else
  {
    *((_QWORD *)v32 + 4) = v33 + 1;
    *v33 = 32;
  }
  v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v35 = *((_QWORD *)v34 + 4);
  if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 0xA)
  {
    *(_DWORD *)(v35 + 7) = 1936026729;
    *(_QWORD *)v35 = *(_QWORD *)"inner_tiles";
    *((_QWORD *)v34 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v34, "inner_tiles", 0xBuLL);
  }
  v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v37 = (_BYTE *)*((_QWORD *)v36 + 4);
  if ((unint64_t)v37 >= *((_QWORD *)v36 + 3))
  {
    llvm::raw_ostream::write(v36, 32);
  }
  else
  {
    *((_QWORD *)v36 + 4) = v37 + 1;
    *v37 = 32;
  }
  v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v39 = (_BYTE *)*((_QWORD *)v38 + 4);
  if (*((_BYTE **)v38 + 3) == v39)
  {
    llvm::raw_ostream::write(v38, "=", 1uLL);
  }
  else
  {
    *v39 = 61;
    ++*((_QWORD *)v38 + 4);
  }
  v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v41 = (_BYTE *)*((_QWORD *)v40 + 4);
  if ((unint64_t)v41 >= *((_QWORD *)v40 + 3))
  {
    llvm::raw_ostream::write(v40, 32);
  }
  else
  {
    *((_QWORD *)v40 + 4) = v41 + 1;
    *v41 = 32;
  }
  v42 = *(_QWORD *)this;
  v43 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v43 & 0x800000) != 0)
  {
    v44 = *(_QWORD *)(v42 + 72);
    v45 = *(unsigned int *)(v42 + 68) - 2;
  }
  else
  {
    v44 = 0;
    v45 = -2;
  }
  v46 = v44 + 64;
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v47 = v42 + 16 * ((v43 >> 23) & 1) + 64;
  else
    v47 = 0;
  v79 = *(void **)(v47 + 16);
  v48 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v79);
  v50 = v49;
  mlir::ValueRange::ValueRange(v82, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v42, v46, v45, v48, v50, v82[0], v82[1], 0, 0, 2);
  v51 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v52 = (_BYTE *)*((_QWORD *)v51 + 4);
  if ((unint64_t)v52 >= *((_QWORD *)v51 + 3))
  {
    llvm::raw_ostream::write(v51, 32);
  }
  else
  {
    *((_QWORD *)v51 + 4) = v52 + 1;
    *v52 = 32;
  }
  v53 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v54 = (_DWORD *)*((_QWORD *)v53 + 4);
  if (*((_QWORD *)v53 + 3) - (_QWORD)v54 > 3uLL)
  {
    *v54 = 1869901417;
    *((_QWORD *)v53 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v53, "into", 4uLL);
  }
  v55 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v56 = (_BYTE *)*((_QWORD *)v55 + 4);
  if ((unint64_t)v56 >= *((_QWORD *)v55 + 3))
  {
    llvm::raw_ostream::write(v55, 32);
  }
  else
  {
    *((_QWORD *)v55 + 4) = v56 + 1;
    *v56 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56));
  v79 = v81;
  v81[0] = "outer_dims_perm";
  v81[1] = 15;
  v81[2] = "inner_dims_pos";
  v81[3] = 14;
  v80 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v81, 3uLL, 16);
  v57 = (char *)v79 + 16 * v80;
  *v57 = "static_inner_tiles";
  v57[1] = 18;
  LODWORD(v80) = v80 + 1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  v58 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v58 = 0;
  v59 = *(_QWORD *)(v58 + 8);
  if (v59 && v59 == mlir::Builder::getDenseI64ArrayAttr(&Context, 0, 0))
  {
    v62 = v80;
    if (v80 >= HIDWORD(v80))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v81, v80 + 1, 16);
      v62 = v80;
    }
    v63 = (char *)v79 + 16 * v62;
    *v63 = "outer_dims_perm";
    v63[1] = 15;
    LODWORD(v80) = v80 + 1;
    v60 = *(mlir::Operation **)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_79;
  }
  else
  {
    v60 = *(mlir::Operation **)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_79:
      p_Context = (mlir::Operation *)((char *)v60 + 56);
      goto LABEL_84;
    }
  }
  Context = (mlir::MLIRContext *)mlir::Operation::getAttrDictionary(v60);
  p_Context = (mlir::ArrayAttr *)&Context;
LABEL_84:
  Value = mlir::ArrayAttr::getValue(p_Context);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v65, v79, v80);
  v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v67 = (_BYTE *)*((_QWORD *)v66 + 4);
  if ((unint64_t)v67 >= *((_QWORD *)v66 + 3))
  {
    llvm::raw_ostream::write(v66, 32);
  }
  else
  {
    *((_QWORD *)v66 + 4) = v67 + 1;
    *v67 = 32;
  }
  v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v69 = (_BYTE *)*((_QWORD *)v68 + 4);
  if (*((_BYTE **)v68 + 3) == v69)
  {
    llvm::raw_ostream::write(v68, ":", 1uLL);
  }
  else
  {
    *v69 = 58;
    ++*((_QWORD *)v68 + 4);
  }
  v70 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v71 = (_BYTE *)*((_QWORD *)v70 + 4);
  if ((unint64_t)v71 >= *((_QWORD *)v70 + 3))
  {
    llvm::raw_ostream::write(v70, 32);
  }
  else
  {
    *((_QWORD *)v70 + 4) = v71 + 1;
    *v71 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v72 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v73 = (_BYTE *)*((_QWORD *)v72 + 4);
  if ((unint64_t)v73 >= *((_QWORD *)v72 + 3))
  {
    llvm::raw_ostream::write(v72, 32);
  }
  else
  {
    *((_QWORD *)v72 + 4) = v73 + 1;
    *v73 = 32;
  }
  v74 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v75 = (_WORD *)*((_QWORD *)v74 + 4);
  if (*((_QWORD *)v74 + 3) - (_QWORD)v75 > 1uLL)
  {
    *v75 = 15917;
    *((_QWORD *)v74 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v74, "->", 2uLL);
  }
  v76 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v77 = (_BYTE *)*((_QWORD *)v76 + 4);
  if ((unint64_t)v77 >= *((_QWORD *)v76 + 3))
  {
    llvm::raw_ostream::write(v76, 32);
  }
  else
  {
    *((_QWORD *)v76 + 4) = v77 + 1;
    *v77 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v79 != v81)
    free(v79);
}

BOOL mlir::tensor::YieldOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  v9 = v6;
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

BOOL llvm::function_ref<BOOL ()(mlir::OpFoldResult,mlir::OpFoldResult)>::callback_fn<foldExtractAfterInsertSlice(mlir::tensor::ExtractSliceOp)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == a3;
}

BOOL llvm::function_ref<BOOL ()(mlir::OpFoldResult,mlir::OpFoldResult)>::callback_fn<foldInsertAfterInsertSlice(mlir::tensor::InsertSliceOp)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == a3;
}

BOOL llvm::function_ref<BOOL ()(mlir::OpFoldResult,mlir::OpFoldResult)>::callback_fn<foldInsertAfterExtractSlice(mlir::tensor::InsertSliceOp)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == a3;
}

uint64_t mlir::OpInterface<mlir::ParallelCombiningOpInterface,mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ParallelCombiningOpInterface]";
          v31 = 84;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::ParallelCombiningOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ParallelCombiningOpInterface]";
          v31 = 84;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ParallelCombiningOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ParallelCombiningOpInterface]";
      v23 = 84;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[168];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::__mlir_ods_local_attr_constraint_TensorOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void mlir::OpBuilder::createOrFold<mlir::tensor::DimOp,mlir::Value &,long long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, mlir::MLIRContext **a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  const mlir::OperationState *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  mlir::MLIRContext *v25[4];
  __int16 v26;
  uint64_t v27[39];

  v27[38] = *MEMORY[0x1E0C80C00];
  v22 = a3;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.dim", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    v26 = 1283;
    v25[2] = (mlir::MLIRContext *)"tensor.dim";
    v25[3] = (mlir::MLIRContext *)10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+((uint64_t *)v25, (uint64_t *)&v23, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a3, v11);
  v13 = *a4;
  v25[0] = *a5;
  v14 = mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>((mlir::IndexType **)a1, v27[0], v25);
  mlir::tensor::DimOp::build((mlir::IndexType **)a1, (uint64_t)v27, v13, (uint64_t)v14 - 16);
  v16 = (mlir::GenericProgramPoint *)mlir::Operation::create((mlir::Operation *)v27, v15);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v18 = *(uint64_t **)(a1 + 24);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v17 + 32, (uint64_t)v16);
    mlir::GenericProgramPoint::~GenericProgramPoint(v16);
    v19 = *v18;
    *v20 = *v18;
    v20[1] = (uint64_t)v18;
    *(_QWORD *)(v19 + 8) = v20;
    *v18 = (uint64_t)v20;
    mlir::GenericProgramPoint::~GenericProgramPoint(v16);
  }
  if (mlir::OpBuilder::tryFold((_QWORD *)a1, (uint64_t)v16, a2))
  {
    mlir::Operation::erase(v16);
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 8);
    if (v21)
      (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v21 + 16))(v21, v16);
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
}

void *mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  void *result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = (void *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
          v31 = 83;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::DestinationStyleOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
          v31 = 83;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

void *mlir::detail::InterfaceMap::lookup<mlir::DestinationStyleOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  unint64_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  void **v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      v23 = 83;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = p_vtable[488];
  v5 = *(void ***)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = (void **)(v8 + 2);
    v3 += ~(v3 >> 1);
    if (v10 < (unint64_t)v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (void **)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void `anonymous namespace'::ChainedTensorBitcast::~ChainedTensorBitcast(_anonymous_namespace_::ChainedTensorBitcast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::BitcastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::BitcastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::BitcastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::ChainedTensorBitcast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::BitcastOp,void>::id)
    {
      v6 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
      v8 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
      v9 = v6;
      v7 = mlir::OpBuilder::create<mlir::tensor::BitcastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v9, &v8);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::BitcastOp,mlir::TensorType &,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.bitcast", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"tensor.bitcast";
    v19[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::BitcastOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void `anonymous namespace'::ChainedTensorCast::~ChainedTensorCast(_anonymous_namespace_::ChainedTensorCast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::CastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::CastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::CastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::ChainedTensorCast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::GenericProgramPoint *v11;
  uint64_t v12;
  unint64_t v13;

  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v13);
  if (result)
  {
    v6 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v8 = *(_QWORD *)(result - 8) & 0xFFFFFFFFFFFFFFF8;
      v13 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
      v9 = v13;
      v10 = joinShapes(v7, v8);
      result = joinShapes(v10, v9);
      if (result)
      {
        if (result == joinShapes(v7, v9))
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 24);
          v11 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v13, &v12);
          (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v11);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t joinShapes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t ElementType;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v2 = a2;
  v24[4] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  v21 = a1;
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v21))
    return v2;
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v20))
    return v21;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  v4 = v3;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20);
  if (v4 != v5)
    return 0;
  v22 = v24;
  v23 = 0x400000000;
  if ((unint64_t)v4 >= 5)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v4, 8);
  if (v4 < 1)
  {
    v14 = v23;
LABEL_21:
    v15 = v22;
    v16 = v14;
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v21);
    v2 = mlir::RankedTensorType::get((uint64_t)v15, v16, ElementType, 0);
    v18 = v22;
    if (v22 != v24)
      goto LABEL_22;
    return v2;
  }
  v6 = 0;
  while (1)
  {
    v7 = 8 * v6;
    v8 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21) + v7);
    v9 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20) + v7);
    if (v8 == 0x8000000000000000)
      goto LABEL_13;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
    if (v9 != 0x8000000000000000)
      break;
    v12 = v23;
    v13 = HIDWORD(v23);
    v9 = *(_QWORD *)(Value + 8 * v6);
LABEL_14:
    if (v12 >= v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v12 + 1, 8);
      v12 = v23;
    }
    *((_QWORD *)v22 + v12) = v9;
    v14 = v23 + 1;
    LODWORD(v23) = v23 + 1;
    if (v4 == ++v6)
      goto LABEL_21;
  }
  v11 = *(_QWORD *)(Value + 8 * v6);
  if (v11 == *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20) + 8 * v6))
  {
    v9 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21) + 8 * v6);
LABEL_13:
    v12 = v23;
    v13 = HIDWORD(v23);
    goto LABEL_14;
  }
  v2 = 0;
  v18 = v22;
  if (v22 == v24)
    return v2;
LABEL_22:
  free(v18);
  return v2;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.cast", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"tensor.cast";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void `anonymous namespace'::TensorCastExtractSlice::~TensorCastExtractSlice(_anonymous_namespace_::TensorCastExtractSlice *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::TensorCastExtractSlice::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t DefiningOp;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *Value;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  _DWORD *v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  mlir::MLIRContext *v32;
  uint64_t IndexAttr;
  mlir::GenericProgramPoint *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  char v42[8];
  llvm *v43;
  unsigned int v44;
  char v45;
  _QWORD *v46;
  unsigned int v47;
  _QWORD v48[6];

  v48[4] = *MEMORY[0x1E0C80C00];
  v46 = *(_QWORD **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v46);
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id)
      v6 = DefiningOp;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v37 = v6;
  v7 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v8 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  else
    v8 = 0;
  v36 = v8;
  if (!v8
    || !a2
    || !v6
    || !mlir::tensor::preservesStaticInformation(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, v7))
  {
    return 0;
  }
  Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
  v11 = v10;
  v46 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
  if (v11 != v13 || (result = memcmp(Value, v12, 8 * v11), (_DWORD)result))
  {
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v37, (uint64_t)&v46);
    v15 = v37 + 16 * (((unint64_t)*(unsigned int *)(v37 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(v37 + 44)))
      v15 = 0;
    v40[0] = *(void **)(v15 + 8);
    v16 = (char *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v40);
    v18 = v17;
    if (*(_DWORD *)(v37 + 36))
      v19 = v37 - 16;
    else
      v19 = 0;
    v40[0] = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v20 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v40);
    mlir::computeRankReductionMask(v16, v18, v20, v21, (uint64_t)v42);
    v22 = v47;
    if (v47)
    {
      v23 = 0;
      for (i = 0; i != v22; ++i)
      {
        if (!v45)
          goto LABEL_35;
        if ((v42[0] & 1) != 0)
        {
          v25 = &v43;
          v26 = 3;
          v27 = (37 * i) & 3;
          v28 = *((_DWORD *)&v43 + v27);
          if (v28 != (_DWORD)i)
            goto LABEL_31;
        }
        else
        {
          if (!v44)
            goto LABEL_35;
          v25 = v43;
          v26 = v44 - 1;
          v27 = (v44 - 1) & (37 * i);
          v28 = *((_DWORD *)v43 + v27);
          if (v28 != (_DWORD)i)
          {
LABEL_31:
            v30 = 1;
            while (v28 != -1)
            {
              v31 = v27 + v30++;
              v27 = v31 & v26;
              v28 = v25[v27];
              if (v28 == (_DWORD)i)
                goto LABEL_25;
            }
LABEL_35:
            v29 = v23 + 1;
            v32 = *(mlir::MLIRContext **)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36) + 8 * v23);
            if (v32 != (mlir::MLIRContext *)0x8000000000000000)
            {
              IndexAttr = mlir::Builder::getIndexAttr(a3 + 1, v32);
              v46[i] = IndexAttr & 0xFFFFFFFFFFFFFFFBLL;
            }
            goto LABEL_26;
          }
        }
LABEL_25:
        v29 = v23;
LABEL_26:
        v23 = v29;
      }
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v37 + 72) + 24);
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v37, (uint64_t)v40);
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v37, (uint64_t)v38);
    v34 = mlir::OpBuilder::create<mlir::tensor::ExtractSliceOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,4u>,llvm::SmallVector<mlir::OpFoldResult,4u>&,llvm::SmallVector<mlir::OpFoldResult,4u>>(a3 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v36, &v35, (uint64_t)v40, (uint64_t)&v46, (uint64_t)v38);
    (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v34);
    if (v38[0] != &v39)
      free(v38[0]);
    if (v40[0] != &v41)
      free(v40[0]);
    if (v45 && (v42[0] & 1) == 0)
      llvm::deallocate_buffer(v43, (void *)(4 * v44));
    if (v46 != v48)
      free(v46);
    return 1;
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExtractSliceOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,4u>,llvm::SmallVector<mlir::OpFoldResult,4u>&,llvm::SmallVector<mlir::OpFoldResult,4u>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract_slice", (const unsigned __int8 *)0x14, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"tensor.extract_slice";
    v23[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::tensor::ExtractSliceOp::build(a1, (uint64_t)v25, *a3, *a4, *(uint64_t **)a5, *(unsigned int *)(a5 + 8), *(uint64_t **)a6, *(unsigned int *)(a6 + 8), *(uint64_t **)a7, *(unsigned int *)(a7 + 8), 0, 0);
  v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

void `anonymous namespace'::DimOfCastOp::~DimOfCastOp(_anonymous_namespace_::DimOfCastOp *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::DimOfCastOp::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t result;
  uint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
      v9 = v6;
      v7 = mlir::OpBuilder::create<mlir::tensor::DimOp,mlir::Value &,mlir::detail::TypedValue<mlir::IndexType>>(a3 + 1, *(_QWORD *)(a2 + 24), &v9, &v8);
      (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::DimOfDestStyleOp::~DimOfDestStyleOp(_anonymous_namespace_::DimOfDestStyleOp *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::DimOfDestStyleOp::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *DefiningOp;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17[2];
  void *v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = (void *)mlir::Value::getDefiningOp((mlir::Value *)&v16);
  v6 = (uint64_t)DefiningOp;
  if (DefiningOp)
  {
    if (!mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)DefiningOp))
    {
      v14 = 0;
      v15 = 0;
      return 0;
    }
    DefiningOp = mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor(v6);
  }
  v14 = v6;
  v15 = DefiningOp;
  if (!v6)
    return 0;
  if (v16 && (*(_QWORD *)(v16 + 8) & 7) == 6)
    v7 = *(_DWORD *)(v16 + 16) + 6;
  else
    v7 = *(_QWORD *)(v16 + 8) & 7;
  mlir::MapDynamicShapeOpInterface::mapDynamicShape(v17, (mlir::MapDynamicShapeOpInterface *)&v14);
  v8 = mlir::MutableOperandRange::operator[](v17, v7);
  if (v18 != v19)
    free(v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, a2);
  v9 = *(uint64_t **)(a2 + 72);
  v10 = *(uint64_t **)(v8 + 24);
  v11 = (uint64_t *)v9[1];
  if (v11)
  {
    *v11 = *v9;
    if (*v9)
      *(_QWORD *)(*v9 + 8) = v9[1];
  }
  v9[3] = (uint64_t)v10;
  v9[1] = (uint64_t)v10;
  v12 = *v10;
  *v9 = *v10;
  if (v12)
    *(_QWORD *)(v12 + 8) = v9;
  *v10 = (uint64_t)v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a2);
  return 1;
}

void `anonymous namespace'::FoldEmptyTensorWithCastOp::~FoldEmptyTensorWithCastOp(_anonymous_namespace_::FoldEmptyTensorWithCastOp *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldEmptyTensorWithCastOp::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t DefiningOp;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::MLIRContext **Value;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  mlir::MLIRContext *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24[4];
  __int16 v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[48];
  void *v30;
  unsigned int v31;
  _QWORD v32[8];

  v32[6] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  if (!mlir::tensor::preservesStaticInformation(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8))return 0;
  v30 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v30);
  if (!DefiningOp)
    return 0;
  v6 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::tensor::EmptyOp,void>::id ? DefiningOp : 0;
  v23 = v7;
  if (v6 != &mlir::detail::TypeIDResolver<mlir::tensor::EmptyOp,void>::id)
    return 0;
  v22 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  Value = (mlir::MLIRContext **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v22);
  v12 = v11;
  mlir::tensor::EmptyOp::getMixedSizes((mlir::tensor::EmptyOp *)&v23, (uint64_t)&v30);
  v27 = v29;
  v28 = 0x600000000;
  v13 = v31;
  if (v31 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v31, 8);
    v13 = v31;
  }
  if (!v12 || !v13)
  {
LABEL_31:
    v24[0] = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v22);
    v21 = mlir::OpBuilder::create<mlir::tensor::EmptyOp,llvm::SmallVector<mlir::OpFoldResult,6u> &,mlir::Type>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t)&v27, v24);
    (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v21);
    v8 = 1;
    goto LABEL_32;
  }
  v14 = (unint64_t *)v30;
  v15 = 8 * v13 - 8;
  v16 = 8 * v12 - 8;
  while (1)
  {
    v17 = *Value;
    v18 = (*v14 & 4) != 0 ? 0 : *v14 & 0xFFFFFFFFFFFFFFF8;
    if (v18)
      break;
    if (v17 == (mlir::MLIRContext *)0x8000000000000000)
    {
      v19 = v28;
      v18 = *v14;
      if (v28 < (unint64_t)HIDWORD(v28))
        goto LABEL_22;
    }
    else
    {
      v18 = mlir::Builder::getIndexAttr(a3 + 1, *Value) & 0xFFFFFFFFFFFFFFFBLL;
      v19 = v28;
      if (v28 < (unint64_t)HIDWORD(v28))
      {
LABEL_22:
        *((_QWORD *)v27 + v19) = v18;
        LODWORD(v28) = v28 + 1;
        if (!v16)
          goto LABEL_31;
        goto LABEL_23;
      }
    }
LABEL_27:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v19 + 1, 8);
    *((_QWORD *)v27 + v28) = v18;
    LODWORD(v28) = v28 + 1;
    if (!v16)
      goto LABEL_31;
LABEL_23:
    ++Value;
    ++v14;
    v20 = v15;
    v15 -= 8;
    v16 -= 8;
    if (!v20)
      goto LABEL_31;
  }
  if (v17 != (mlir::MLIRContext *)0x8000000000000000)
  {
    v24[0] = v18;
    if (v17 == (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v24))
    {
      v19 = v28;
      if (v28 < (unint64_t)HIDWORD(v28))
        goto LABEL_22;
      goto LABEL_27;
    }
  }
  v24[0] = (uint64_t)"mismatch in static value of shape of empty tensor result and cast result";
  v25 = 259;
  v26 = v24;
  v8 = (uint64_t)a3[2];
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(v8))
      v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v8 + 64))(v8, *(_QWORD *)(v7 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::tensor::EmptyOp &>(mlir::tensor::EmptyOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v26);
    else
      v8 = 0;
  }
LABEL_32:
  if (v27 != v29)
    free(v27);
  if (v30 != v32)
    free(v30);
  return v8;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::tensor::EmptyOp &>(mlir::tensor::EmptyOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void `anonymous namespace'::FoldEmptyTensorWithDimOp::~FoldEmptyTensorWithDimOp(_anonymous_namespace_::FoldEmptyTensorWithDimOp *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldEmptyTensorWithDimOp::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int ConstantIntValue;
  char v6;
  char v7;
  uint64_t DefiningOp;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;

  ConstantIntValue = mlir::getConstantIntValue(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) | 4);
  v7 = v6;
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (!DefiningOp)
    return 0;
  v9 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v10 = v9 == &mlir::detail::TypeIDResolver<mlir::tensor::EmptyOp,void>::id ? DefiningOp : 0;
  if (v9 != &mlir::detail::TypeIDResolver<mlir::tensor::EmptyOp,void>::id || v7 == 0)
    return 0;
  v12 = *(_DWORD *)(v10 + 36) ? v10 - 16 : 0;
  v20 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20) + 8 * ConstantIntValue) != 0x8000000000000000)
    return 0;
  v13 = ConstantIntValue;
  if (ConstantIntValue)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    v16 = 8 * v13;
    do
    {
      if (*(_DWORD *)(v10 + 36))
        v17 = v10 - 16;
      else
        v17 = 0;
      v20 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20) + v14) == 0x8000000000000000)
        v15 = (v15 + 1);
      else
        v15 = v15;
      v14 += 8;
    }
    while (v16 != v14);
  }
  else
  {
    v15 = 0;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 32 * v15 + 24);
  v18 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a3 + 24))(a3, a2, &v20, 1);
  return v18;
}

void `anonymous namespace'::ReplaceEmptyTensorStaticShapeDims::~ReplaceEmptyTensorStaticShapeDims(_anonymous_namespace_::ReplaceEmptyTensorStaticShapeDims *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::EmptyOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::EmptyOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::EmptyOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::ReplaceEmptyTensorStaticShapeDims::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *Value;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t ConstantIntValue;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t RHS;
  uint64_t v31;
  uint64_t Values;
  uint64_t v33;
  mlir::GenericProgramPoint *v34;
  uint64_t v35;
  void *v36;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[48];
  void *v44;
  uint64_t v45;
  _QWORD v46[8];

  v46[6] = *MEMORY[0x1E0C80C00];
  v5 = a2 - 16;
  if (*(_DWORD *)(a2 + 36))
    v6 = a2 - 16;
  else
    v6 = 0;
  v41 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  Value = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
  if (*(_DWORD *)(a2 + 36))
    v8 = v5;
  else
    v8 = 0;
  v40 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v9 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  v11 = (_BYTE *)(v9 + 8 * v10);
  v44 = v46;
  v45 = 0x600000000;
  v12 = v11 - Value;
  if ((unint64_t)(v11 - Value) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v12 >> 3, 8);
    v13 = v45;
    if (v11 == Value)
      goto LABEL_12;
    goto LABEL_11;
  }
  v13 = 0;
  if (v11 != Value)
  {
LABEL_11:
    memcpy((char *)v44 + 8 * v13, Value, v11 - Value);
    v13 = v45;
  }
LABEL_12:
  LODWORD(v45) = v13 + ((unint64_t)v12 >> 3);
  v41 = v43;
  v42 = 0x600000000;
  if (*(_DWORD *)(a2 + 36))
    v14 = v5;
  else
    v14 = 0;
  v40 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  if (v15 < 1)
    goto LABEL_44;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  do
  {
    if (*(_DWORD *)(a2 + 36))
      v22 = v5;
    else
      v22 = 0;
    v40 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40) + 8 * v18) == 0x8000000000000000)
    {
      v19 = (v16 + 1);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v16 + 24);
      ConstantIntValue = mlir::getConstantIntValue(v23 | 4);
      if (v25)
      {
        if ((ConstantIntValue & 0x8000000000000000) != 0)
          goto LABEL_44;
        *((_QWORD *)v44 + v18) = ConstantIntValue;
        v17 = 1;
      }
      else
      {
        v26 = v42;
        if (v42 >= (unint64_t)HIDWORD(v42))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v42 + 1, 8);
          v26 = v42;
        }
        *((_QWORD *)v41 + v26) = v23;
        LODWORD(v42) = v42 + 1;
      }
    }
    else
    {
      v19 = v16;
    }
    ++v18;
    if (*(_DWORD *)(a2 + 36))
      v20 = v5;
    else
      v20 = 0;
    v40 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
    v16 = v19;
  }
  while (v18 < v21);
  if ((v17 & 1) != 0)
  {
    v27 = v44;
    v28 = v45;
    if (*(_DWORD *)(a2 + 36))
      v29 = v5;
    else
      v29 = 0;
    v39 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v39);
    if (*(_DWORD *)(a2 + 36))
      v31 = v5;
    else
      v31 = 0;
    v38 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v38);
    v40 = mlir::RankedTensorType::get((uint64_t)v27, v28, RHS, Values);
    v39 = (unint64_t)mlir::OpBuilder::create<mlir::tensor::EmptyOp,mlir::RankedTensorType &,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v40, (uint64_t)&v41);
    if (*(_DWORD *)(a2 + 36))
      v33 = v5;
    else
      v33 = 0;
    v38 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v33, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    v34 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::RankedTensorType,mlir::tensor::EmptyOp &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v38, &v39);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v34);
    v35 = 1;
    v36 = v41;
    if (v41 == v43)
      goto LABEL_46;
  }
  else
  {
LABEL_44:
    v35 = 0;
    v36 = v41;
    if (v41 == v43)
      goto LABEL_46;
  }
  free(v36);
LABEL_46:
  if (v44 != v46)
    free(v44);
  return v35;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::EmptyOp,mlir::RankedTensorType &,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  unint64_t v21[2];
  _QWORD v22[8];
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD v26[29];

  v26[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.empty", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"tensor.empty";
    v19[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::OperationState::addOperands((uint64_t)v22, v21[0], v21[1]);
  v12 = v24;
  if (v24 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v24 + 1, 8);
    v12 = v24;
  }
  *(_QWORD *)(v23 + 8 * v12) = v11;
  ++v24;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::EmptyOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::RankedTensorType,mlir::tensor::EmptyOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.cast", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"tensor.cast";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4 - 16;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void `anonymous namespace'::ExtractFromTensorCast::~ExtractFromTensorCast(_anonymous_namespace_::ExtractFromTensorCast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExtractOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExtractOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExtractOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::ExtractFromTensorCast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *v8;
  _QWORD v9[2];
  uint64_t v10;

  v9[0] = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v9);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
        if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
        {
          v6 = *(_QWORD *)(a2 + 72);
          v7 = *(unsigned int *)(a2 + 68) - 1;
        }
        else
        {
          v6 = 0;
          v7 = -1;
        }
        v9[0] = v6 + 32;
        v9[1] = v7;
        v8 = mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::detail::TypedValue<mlir::TensorType>,mlir::OperandRange>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v10, (uint64_t)v9);
        (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v8);
        return 1;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::ExtractElementFromIndexCast::~ExtractElementFromIndexCast(_anonymous_namespace_::ExtractElementFromIndexCast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ExtractElementFromIndexCast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t Input;
  uint64_t v11;
  uint64_t v12;
  mlir::GenericProgramPoint *v13;
  uint64_t v14[2];
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  uint64_t ElementTypeOrSelf;
  uint64_t v18;

  v5 = *(_QWORD *)(a2 + 24);
  v14[0] = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (result)
  {
    v7 = *(void **)(*(_QWORD *)(result + 48) + 16);
    v8 = v7 == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id;
    if (v7 == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id)
      v9 = result;
    else
      v9 = 0;
    v18 = v9;
    if (v8)
    {
      Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18);
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(Input);
      v15 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18);
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      {
        v11 = *(_QWORD *)(a2 + 72);
        v12 = *(unsigned int *)(a2 + 68) - 1;
      }
      else
      {
        v11 = 0;
        v12 = -1;
      }
      v14[0] = v11 + 32;
      v14[1] = v12;
      v16 = mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::Type &,mlir::Value,mlir::OperandRange>((mlir::OpBuilder *)(a3 + 8), v5, &ElementTypeOrSelf, &v15, (uint64_t)v14);
      v14[0] = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
      v13 = mlir::OpBuilder::create<mlir::arith::IndexCastOp,mlir::Type,mlir::tensor::ExtractOp &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), v14, &v16);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v13);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::Type &,mlir::Value,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract", (const unsigned __int8 *)0xE, Context);
  if (!v12)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"tensor.extract";
    v24[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v11);
  v13 = *a3;
  v14 = *a4;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  v15 = v26[0];
  v16 = v26[1];
  v24[0] = v14;
  mlir::OperationState::addOperands((uint64_t)v27, (uint64_t)v24, 1);
  mlir::OperationState::addOperands((uint64_t)v27, v15, v16);
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = v13;
  ++v29;
  v18 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::IndexCastOp,mlir::Type,mlir::tensor::ExtractOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.index_cast", (const unsigned __int8 *)0x10, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.index_cast";
    v17[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4 - 16);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void `anonymous namespace'::ExtractFromTensorGenerate::~ExtractFromTensorGenerate(_anonymous_namespace_::ExtractFromTensorGenerate *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ExtractFromTensorGenerate::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t DefiningOp;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  BOOL v22;
  mlir::GenericProgramPoint **v23;
  mlir::GenericProgramPoint *v24;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v26;
  uint64_t v27;
  _QWORD *v28;
  llvm *v30[2];
  unsigned int v31;
  llvm *v32;
  uint64_t v33;
  int v34;
  llvm *v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;

  v30[0] = *(llvm **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v30);
  v7 = DefiningOp;
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::GenerateOp,void>::id
      && mlir::wouldOpBeTriviallyDead((void ***)DefiningOp, v6))
    {
      v31 = 0;
      v30[0] = 0;
      v30[1] = 0;
      v34 = 0;
      v32 = 0;
      v33 = 0;
      v37 = 0;
      v35 = 0;
      v36 = 0;
      v8 = *(_QWORD *)(((v7
                       + 16 * (((unint64_t)*(unsigned int *)(v7 + 44) >> 23) & 1)
                       + (((unint64_t)*(unsigned int *)(v7 + 44) >> 21) & 0x7F8)
                       + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(v7 + 40)
                     + 8);
      if (v8)
        v9 = v8 - 8;
      else
        v9 = 0;
      v11 = *(unint64_t **)(v9 + 48);
      v10 = *(unint64_t **)(v9 + 56);
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      {
        v12 = *(_QWORD *)(a2 + 72);
        v13 = *(unsigned int *)(a2 + 68) - 1;
        if (v10 == v11 || *(_DWORD *)(a2 + 68) == 1)
          goto LABEL_20;
      }
      else
      {
        v12 = 0;
        v13 = -1;
        if (v10 == v11)
          goto LABEL_20;
      }
      v15 = v13 - 1;
      v16 = (uint64_t *)(v12 + 56);
      v17 = 8 * (v10 - v11) - 8;
      do
      {
        v18 = *v16;
        v38 = (_QWORD *)*v11;
        v39 = 0;
        v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v30, (unint64_t *)&v38, &v39);
        v20 = v39;
        if ((v19 & 1) == 0)
        {
          v20 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v30, (uint64_t)&v38, (unint64_t *)&v38, v39);
          *v20 = v38;
          v20[1] = 0;
        }
        v20[1] = v18;
        v22 = v15-- != 0;
        if (!v17)
          break;
        ++v11;
        v16 += 4;
        v17 -= 8;
      }
      while (v22);
LABEL_20:
      v23 = (mlir::GenericProgramPoint **)(v9 + 32);
      v24 = *(mlir::GenericProgramPoint **)(v9 + 40);
      if (v24 != (mlir::GenericProgramPoint *)(v9 + 32))
      {
        for (i = *v23; v24 != i; v24 = (mlir::GenericProgramPoint *)*((_QWORD *)v24 + 1))
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v24);
          mlir::OpBuilder::clone(a3 + 1, v26, (mlir::IRMapping *)v30);
        }
      }
      mlir::Block::getTerminator((mlir::GenericProgramPoint **)v9);
      v28 = *(_QWORD **)(*(_QWORD *)(v27 + 72) + 24);
      v38 = v28;
      v39 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v30, (unint64_t *)&v38, &v39))
      {
        if (v39 != (_QWORD *)v30[0] + 2 * v31)
          v28 = (_QWORD *)v39[1];
      }
      v39 = v28;
      ((void (*)(uint64_t **, uint64_t, _QWORD **, uint64_t))(*a3)[3])(a3, a2, &v39, 1);
      llvm::deallocate_buffer(v35, (void *)(16 * v37));
    }
    return 0;
  }
  return v7;
}

void `anonymous namespace'::StaticTensorGenerate::~StaticTensorGenerate(_anonymous_namespace_::StaticTensorGenerate *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::GenerateOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::GenerateOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::GenerateOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::StaticTensorGenerate::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t RHS;
  unint64_t v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[48];
  void *v26;
  uint64_t v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 36))
    v5 = a2 - 16;
  else
    v5 = 0;
  v22 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v22))
  {
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v22);
    if (!v7)
      return 0;
    v8 = 8 * v7;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v8 -= 8;
      if (!v8)
        return 0;
    }
  }
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v10 = *(unsigned int *)(a2 + 68);
    v11 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v26 = v28;
  v27 = 0x600000000;
  v23 = v25;
  v24 = 0x600000000;
  operandsAndShape(v22, v11, v10, (uint64_t)&v26, (uint64_t)&v23);
  v12 = v23;
  v13 = v24;
  if ((_DWORD)v24)
  {
    v14 = 0;
    while (*(_QWORD *)((char *)v23 + v14) < 0x8000000000000001)
    {
      v14 += 8;
      if (8 * v24 == v14)
        goto LABEL_16;
    }
LABEL_18:
    v9 = 0;
    if (v23 == v25)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_16:
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    if (*(_DWORD *)(a2 + 68) == (unint64_t)v27)
      goto LABEL_18;
  }
  else if (!(_DWORD)v27)
  {
    goto LABEL_18;
  }
  v16 = *(_QWORD *)(a2 + 24);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v22);
  v20 = mlir::RankedTensorType::get((uint64_t)v12, v13, RHS, 0);
  v21 = mlir::OpBuilder::create<mlir::tensor::GenerateOp,mlir::RankedTensorType,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(a3 + 8), v16, &v20, (uint64_t)&v26);
  v18 = (((unint64_t)v21
        + 16 * (((unint64_t)*((unsigned int *)v21 + 11) >> 23) & 1)
        + (((unint64_t)*((unsigned int *)v21 + 11) >> 21) & 0x7F8)
        + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v21 + 10);
  (**(void (***)(uint64_t, unint64_t, unint64_t, _QWORD))a3)(a3, ((a2+ 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40), v18, *(_QWORD *)(v18 + 8));
  v19 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::RankedTensorType,mlir::tensor::EmptyOp &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v22, &v21);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v19);
  v9 = 1;
  v12 = v23;
  if (v23 != v25)
LABEL_19:
    free(v12);
LABEL_20:
  if (v26 != v28)
    free(v26);
  return v9;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::GenerateOp,mlir::RankedTensorType,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  unint64_t v21[2];
  _QWORD v22[8];
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD v26[29];

  v26[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.generate", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"tensor.generate";
    v19[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::OperationState::addOperands((uint64_t)v22, v21[0], v21[1]);
  mlir::OperationState::addRegion((mlir::OperationState *)v22);
  v12 = v24;
  if (v24 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v24 + 1, 8);
    v12 = v24;
  }
  *(_QWORD *)(v23 + 8 * v12) = v11;
  ++v24;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::GenerateOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v14;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(llvm::Twine const&)>::callback_fn<mlir::LogicalResult mlir::verifyReshapeLikeShapes<mlir::tensor::ExpandShapeOp>(mlir::tensor::ExpandShapeOp,mlir::ShapedType,mlir::ShapedType,BOOL)::{lambda(llvm::Twine const&)#1}>(uint64_t ***a1, const void ***a2)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[3];
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *__p;
  _QWORD **v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  mlir::Operation::emitOpError(**a1, a2, (uint64_t)v12);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v12);
  if (v12[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v12);
  if (v19)
  {
    v3 = (_QWORD **)__p;
    if (__p)
    {
      v4 = v18;
      v5 = __p;
      if (v18 != __p)
      {
        do
          v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
        while (v4 != v3);
        v5 = __p;
      }
      v18 = v3;
      operator delete(v5);
    }
    v6 = v15;
    if (v15)
    {
      v7 = v16;
      v8 = v15;
      if (v16 != v15)
      {
        do
        {
          v10 = (void *)*--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            operator delete[](v9);
        }
        while (v7 != v6);
        v8 = v15;
      }
      v16 = v6;
      operator delete(v8);
    }
    if (v13 != &v14)
      free(v13);
  }
  return v2;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(llvm::Twine const&)>::callback_fn<mlir::LogicalResult mlir::verifyReshapeLikeShapes<mlir::tensor::CollapseShapeOp>(mlir::tensor::CollapseShapeOp,mlir::ShapedType,mlir::ShapedType,BOOL)::{lambda(llvm::Twine const&)#1}>(uint64_t ***a1, const void ***a2)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[3];
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *__p;
  _QWORD **v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  mlir::Operation::emitOpError(**a1, a2, (uint64_t)v12);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v12);
  if (v12[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v12);
  if (v19)
  {
    v3 = (_QWORD **)__p;
    if (__p)
    {
      v4 = v18;
      v5 = __p;
      if (v18 != __p)
      {
        do
          v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
        while (v4 != v3);
        v5 = __p;
      }
      v18 = v3;
      operator delete(v5);
    }
    v6 = v15;
    if (v15)
    {
      v7 = v16;
      v8 = v15;
      if (v16 != v15)
      {
        do
        {
          v10 = (void *)*--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            operator delete[](v9);
        }
        while (v7 != v6);
        v8 = v15;
      }
      v16 = v6;
      operator delete(v8);
    }
    if (v13 != &v14)
      free(v13);
  }
  return v2;
}

void mlir::RewritePatternSet::addImpl<mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"tensor.expand_shape", 19, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E47F60;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp>]";
    v25 = 115;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp,mlir::tensor::CollapseShapeOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"tensor.expand_shape", 19, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E47BF8;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp, "
          "mlir::tensor::CollapseShapeOp>]";
    v25 = 141;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp>::~ComposeReassociativeReshapeOps(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp>::~ComposeReassociativeReshapeOps(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExpandShapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExpandShapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExpandShapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t NextResultAtOffset;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  mlir::GenericProgramPoint *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v30 = a2;
  v34 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v34);
  if (result)
  {
    v6 = result;
    v7 = *(void **)(*(_QWORD *)(result + 48) + 16);
    v8 = v7 == &mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id;
    if (v7 == &mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id)
      v9 = result;
    else
      v9 = 0;
    v29 = v9;
    if (!v8)
      return 0;
    v10 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    v11 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8) : 0;
    v28[0] = (uint64_t)v11;
    v28[1] = v12;
    if ((mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
      || (mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    {
      return 0;
    }
    v13 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0);
    if ((mlir::hasNonIdentityLayout(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
      return 0;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v29, (uint64_t)&v34);
    v15 = v34;
    v16 = v35;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v30, (uint64_t)&v31);
    mlir::composeReassociationIndices((uint64_t)v15, v16, (uint64_t)v31, v32, (uint64_t)&v37);
    v17 = (char *)v31;
    if (v32)
    {
      v18 = 32 * v32;
      do
      {
        v19 = *(char **)&v17[v18 - 32];
        if (&v17[v18 - 16] != v19)
          free(v19);
        v18 -= 32;
      }
      while (v18);
      v17 = (char *)v31;
    }
    if (v17 != (char *)&v33)
      free(v17);
    v20 = (char *)v34;
    if (v35)
    {
      v21 = 32 * v35;
      do
      {
        v22 = *(char **)&v20[v21 - 32];
        if (&v20[v21 - 16] != v22)
          free(v22);
        v21 -= 32;
      }
      while (v21);
      v20 = (char *)v34;
    }
    if (v20 != (char *)&v36)
      free(v20);
    if (!v40)
    {
      return 0;
    }
    else
    {
      v23 = v30;
      v34 = *(void **)(*(_QWORD *)(v29 + 72) + 24);
      v24 = mlir::OpBuilder::create<mlir::tensor::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v30 + 24), v28, (uint64_t *)&v34, (uint64_t)&v37);
      (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v23, v24);
      if (v40)
      {
        v25 = v37;
        if (v38)
        {
          v26 = 32 * v38;
          do
          {
            v27 = *(char **)&v25[v26 - 32];
            if (&v25[v26 - 16] != v27)
              free(v27);
            v26 -= 32;
          }
          while (v26);
          v25 = v37;
        }
        if (v25 != (char *)&v39)
          free(v25);
      }
      return 1;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t ReassociationIndicesAttribute;
  mlir::StringAttr *v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[4];
  __int16 v30;
  _QWORD v31[14];
  uint64_t v32;
  unint64_t v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.expand_shape", (const unsigned __int8 *)0x13, Context);
  if (!v12)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"tensor.expand_shape";
    v29[3] = 19;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v26 = 259;
    llvm::operator+(v29, v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v11);
  v13 = *a3;
  v14 = *a4;
  v15 = *(_QWORD *)a5;
  v16 = *(unsigned int *)(a5 + 8);
  v27 = v14;
  v28 = v13;
  v17 = mlir::ValueRange::ValueRange(v33, (uint64_t)&v28, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)v17, (uint64_t)v31, v33[0], v33[1], (uint64_t)&v27, 1, 0, 0);
  ReassociationIndicesAttribute = mlir::getReassociationIndicesAttribute(a1, v15, v16);
  v19 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v31);
  v30 = 261;
  v29[0] = (uint64_t)"reassociation";
  v29[1] = 13;
  v20 = mlir::StringAttr::get(v19, (mlir::MLIRContext *)v29);
  mlir::NamedAttribute::NamedAttribute(v25, v20, ReassociationIndicesAttribute);
  mlir::NamedAttrList::push_back((uint64_t)&v32, v25[0], v25[1]);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

_QWORD *mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp,mlir::tensor::CollapseShapeOp>::~ComposeExpandOfCollapseOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp,mlir::tensor::CollapseShapeOp>::~ComposeExpandOfCollapseOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp,mlir::tensor::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DefiningOp;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  mlir::GenericProgramPoint *v31;
  uint64_t v32;
  void *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t ArgAttrsAttr;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t **v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50[2];
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  char *v54[6];
  char v55;
  void *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t **v59;
  unsigned int v60;
  _QWORD v61[17];

  v61[16] = *MEMORY[0x1E0C80C00];
  v53 = a2;
  v59 = *(uint64_t ***)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!DefiningOp)
    return 0;
  v6 = DefiningOp;
  v7 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v8 = v7 == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id;
  v9 = v7 == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id ? DefiningOp : 0;
  v52 = v9;
  if (!v8)
    return 0;
  v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8) : 0;
  v51[0] = v10;
  v51[1] = v11;
  v12 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
  v13 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8) : 0;
  v50[0] = (uint64_t)v13;
  v50[1] = v14;
  if ((mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
    || (mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
  {
    return 0;
  }
  v15 = *(_DWORD *)(v6 + 36) ? v6 - 16 : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  if ((mlir::hasNonIdentityLayout(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
  v18 = v17;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
  if (v51[0] == v50[0])
    return 0;
  v20 = v19;
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v52, (uint64_t)&v59);
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v53, (uint64_t)&v56);
  if (v18 <= v20)
  {
    v34 = v56;
    v35 = v57;
    v36 = v59;
    v37 = v60;
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
    v40 = v39;
    v41 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::findCollapsingReassociation((unint64_t)v34, v35, v36, v37, ArgAttrsAttr, v40, (uint64_t)v54, v41, v42);
    if (v55)
    {
      v30 = v53;
      v49 = *(_QWORD *)(*(_QWORD *)(v52 + 72) + 24);
      v31 = mlir::OpBuilder::create<mlir::tensor::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v53 + 24), v50, &v49, (uint64_t)v54);
      goto LABEL_30;
    }
LABEL_31:
    v32 = 0;
    goto LABEL_32;
  }
  v21 = (unint64_t)v59;
  v22 = v60;
  v23 = (uint64_t **)v56;
  v24 = v57;
  v25 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
  v27 = v26;
  v28 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
  mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::findCollapsingReassociation(v21, v22, v23, v24, v25, v27, (uint64_t)v54, v28, v29);
  if (!v55)
    goto LABEL_31;
  v30 = v53;
  v49 = *(_QWORD *)(*(_QWORD *)(v52 + 72) + 24);
  v31 = mlir::OpBuilder::create<mlir::tensor::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v53 + 24), v50, &v49, (uint64_t)v54);
LABEL_30:
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v30, v31);
  v32 = 1;
LABEL_32:
  std::optional<llvm::SmallVector<llvm::SmallVector<long long,2u>,1u>>::~optional(v54);
  v43 = (char *)v56;
  if (v57)
  {
    v44 = 32 * v57;
    do
    {
      v45 = *(char **)&v43[v44 - 32];
      if (&v43[v44 - 16] != v45)
        free(v45);
      v44 -= 32;
    }
    while (v44);
    v43 = (char *)v56;
  }
  if (v43 != (char *)&v58)
    free(v43);
  v46 = v59;
  if (v60)
  {
    v47 = 4 * v60;
    do
    {
      v48 = (char *)v46[v47 - 4];
      if (&v46[v47 - 2] != (uint64_t **)v48)
        free(v48);
      v47 -= 4;
    }
    while (v47 * 8);
    v46 = v59;
  }
  if (v46 != v61)
    free(v46);
  return v32;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t ReassociationIndicesAttribute;
  mlir::StringAttr *v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[4];
  __int16 v30;
  _QWORD v31[14];
  uint64_t v32;
  unint64_t v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.collapse_shape", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"tensor.collapse_shape";
    v29[3] = 21;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v26 = 259;
    llvm::operator+(v29, v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v11);
  v13 = *a3;
  v14 = *a4;
  v15 = *(_QWORD *)a5;
  v16 = *(unsigned int *)(a5 + 8);
  v27 = v14;
  v28 = v13;
  v17 = mlir::ValueRange::ValueRange(v33, (uint64_t)&v28, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)v17, (uint64_t)v31, v33[0], v33[1], (uint64_t)&v27, 1, 0, 0);
  ReassociationIndicesAttribute = mlir::getReassociationIndicesAttribute(a1, v15, v16);
  v19 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v31);
  v30 = 261;
  v29[0] = (uint64_t)"reassociation";
  v29[1] = 13;
  v20 = mlir::StringAttr::get(v19, (mlir::MLIRContext *)v29);
  mlir::NamedAttribute::NamedAttribute(v25, v20, ReassociationIndicesAttribute);
  mlir::NamedAttrList::push_back((uint64_t)&v32, v25[0], v25[1]);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

_QWORD *`anonymous namespace'::FoldReshapeWithConstant<mlir::tensor::ExpandShapeOp>::~FoldReshapeWithConstant(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::FoldReshapeWithConstant<mlir::tensor::ExpandShapeOp>::~FoldReshapeWithConstant(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::FoldReshapeWithConstant<mlir::tensor::ExpandShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t RawStringData;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  mlir::GenericProgramPoint *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26[2];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v24 = 0;
  v25 = v5;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v25);
  if (!DefiningOp)
    return 0;
  v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    return 0;
  v26[0] = v27;
  v26[1] = (void *)0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)v26);
  v8 = *(_QWORD *)v26[0];
  v9 = mlir::DenseElementsAttr::classof(*(_QWORD *)v26[0] & 0xFFFFFFFFFFFFFFF8);
  v10 = 0;
  v11 = v8 & 0xFFFFFFFFFFFFFFF8;
  v12 = (v8 & 0xFFFFFFFFFFFFFFF8) == 0 || !v9;
  if ((v12 & 1) == 0)
  {
    v24 = v11;
    v10 = v11;
  }
  if (v26[0] != v27)
    free(v26[0]);
  v13 = v10 ? v12 : 1;
  if ((v13 & 1) != 0)
    return 0;
  result = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v24);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a2 + 36))
      v15 = a2 - 16;
    else
      v15 = 0;
    v16 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v16)
      v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
    else
      v17 = 0;
    RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v24);
    v26[0] = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v16, v17, RawStringData, v19, v20, v21, v22);
    v23 = mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::DenseElementsAttr &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (_QWORD **)v26);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v23);
    return 1;
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::DenseElementsAttr &>(mlir::OpBuilder *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.constant";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  v9 = *a3;
  if (v9)
    v10 = *(_QWORD *)(mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v9 + 8) + 24);
  else
    v10 = 0;
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v19, (uint64_t)v9, v10);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *`anonymous namespace'::FoldReshapeWithSplat<mlir::tensor::ExpandShapeOp>::~FoldReshapeWithSplat(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::FoldReshapeWithSplat<mlir::tensor::ExpandShapeOp>::~FoldReshapeWithSplat(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::FoldReshapeWithSplat<mlir::tensor::ExpandShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  unint64_t v11;

  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (result)
  {
    v6 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::SplatOp,void>::id)
    {
      if (*(_DWORD *)(a2 + 36))
        v7 = a2 - 16;
      else
        v7 = 0;
      v8 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v10 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 24);
      v11 = v8;
      v9 = mlir::OpBuilder::create<mlir::tensor::SplatOp,mlir::RankedTensorType,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v11, &v10);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v9);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::SplatOp,mlir::RankedTensorType,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.splat", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"tensor.splat";
    v19[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::SplatOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *`anonymous namespace'::FoldReshapeWithFromElements<mlir::tensor::ExpandShapeOp>::~FoldReshapeWithFromElements(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::FoldReshapeWithFromElements<mlir::tensor::ExpandShapeOp>::~FoldReshapeWithFromElements(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::FoldReshapeWithFromElements<mlir::tensor::ExpandShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  _QWORD v16[2];
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    v6 = *(void **)(*(_QWORD *)(result + 48) + 16);
    if (v6 == &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id)
      v7 = result;
    else
      v7 = 0;
    if (v6 != &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id)
      return 0;
    v8 = (_QWORD *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8)
    {
      v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
      v18 = v8;
      v19 = v9;
      result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v18);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v18);
      if (!(_DWORD)result)
        return result;
    }
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v18);
    if (v11)
    {
      v12 = 8 * v11;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v12 -= 8;
        if (!v12)
          goto LABEL_16;
      }
      return 0;
    }
    else
    {
LABEL_16:
      v17 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)(v7 + 46) & 0x80) != 0)
      {
        v13 = *(unsigned int *)(v7 + 68);
        v14 = *(_QWORD *)(v7 + 72);
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
      v16[0] = v14;
      v16[1] = v13;
      v15 = mlir::OpBuilder::create<mlir::tensor::FromElementsOp,mlir::RankedTensorType,mlir::OperandRange>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v17, (uint64_t)v16);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v15);
      return 1;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::FromElementsOp,mlir::RankedTensorType,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  unint64_t v21[2];
  _QWORD v22[8];
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD v26[29];

  v26[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.from_elements", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"tensor.from_elements";
    v19[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  mlir::OperationState::addOperands((uint64_t)v22, v21[0], v21[1]);
  v12 = v24;
  if (v24 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v24 + 1, 8);
    v12 = v24;
  }
  *(_QWORD *)(v23 + 8 * v12) = v11;
  ++v24;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v14;
}

void `anonymous namespace'::FoldDimOfExpandShape::~FoldDimOfExpandShape(_anonymous_namespace_::FoldDimOfExpandShape *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldDimOfExpandShape::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t result;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  unint64_t ConstantIntValue;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v28;
  mlir::GenericProgramPoint *v29;
  uint64_t v30;
  mlir::MLIRContext **AffineSymbolExpr;
  uint64_t CorrespondingSourceDim;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v35 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v35);
  if (!result)
    return result;
  v6 = result;
  v7 = *(void **)(*(_QWORD *)(result + 48) + 16);
  v8 = v7 == &mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id;
  if (v7 == &mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id)
    v9 = result;
  else
    v9 = 0;
  v34 = v9;
  if (!v8)
    return 0;
  ConstantIntValue = mlir::getConstantIntValue(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) | 4);
  if (!v11)
    return 0;
  v12 = ConstantIntValue;
  v13 = *(_DWORD *)(v6 + 36) ? v6 - 16 : 0;
  v33 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v33) + 8 * v12) != 0x8000000000000000)
    return 0;
  CorrespondingSourceDim = mlir::tensor::ExpandShapeOp::getCorrespondingSourceDim((mlir::tensor::ExpandShapeOp *)&v34, v12);
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v34, (uint64_t)&v35);
  v14 = (char *)v35;
  v15 = (char *)v35 + 32 * CorrespondingSourceDim;
  v38 = v40;
  v39 = 0x200000000;
  v16 = *((_DWORD *)v15 + 2);
  if (&v38 != (_QWORD **)v15 && v16 != 0)
  {
    if (v16 < 3)
    {
      v19 = v40;
      v18 = *((_DWORD *)v15 + 2);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v40, *((unsigned int *)v15 + 2), 8);
      v18 = *((_DWORD *)v15 + 2);
      if (!v18)
      {
LABEL_22:
        LODWORD(v39) = v16;
        v14 = (char *)v35;
        goto LABEL_23;
      }
      v19 = v38;
    }
    memcpy(v19, *(const void **)v15, 8 * v18);
    goto LABEL_22;
  }
LABEL_23:
  if (v36)
  {
    v20 = 32 * v36;
    do
    {
      v21 = *(char **)&v14[v20 - 32];
      if (&v14[v20 - 16] != v21)
        free(v21);
      v20 -= 32;
    }
    while (v20);
    v14 = (char *)v35;
  }
  if (v14 != (char *)&v37)
    free(v14);
  if ((_DWORD)v39)
  {
    v22 = v38;
    v23 = 8 * v39;
    v24 = 1;
    do
    {
      if (*v22 != v12)
      {
        v25 = *v22;
        v24 *= *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v33) + 8 * v25);
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  else
  {
    v24 = 1;
  }
  v26 = *(_QWORD *)(a2 + 24);
  AffineSymbolExpr = *(mlir::MLIRContext ***)(*(_QWORD *)(v34 + 72) + 24);
  v35 = (char *)mlir::OpBuilder::create<mlir::tensor::DimOp,mlir::detail::TypedValue<mlir::RankedTensorType>,long long &>(a3 + 1, v26, (uint64_t *)&AffineSymbolExpr, (mlir::MLIRContext **)&CorrespondingSourceDim)- 16;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  AffineSymbolExpr = (mlir::MLIRContext **)mlir::getAffineSymbolExpr(0, Context, v28);
  v30 = mlir::AffineExpr::floorDiv(&AffineSymbolExpr, v24);
  v29 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineExpr,mlir::Value &>(a3 + 1, *(_QWORD *)(a2 + 24), (mlir::BytecodeWriterConfig *)&v30, (uint64_t)&v35);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v29);
  if (v38 != v40)
    free(v38);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::DimOp,mlir::detail::TypedValue<mlir::RankedTensorType>,long long &>(mlir::IndexType **a1, uint64_t a2, uint64_t *a3, mlir::MLIRContext **a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  mlir::MLIRContext *v19[4];
  __int16 v20;
  uint64_t v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.dim", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (mlir::MLIRContext *)"tensor.dim";
    v19[3] = (mlir::MLIRContext *)10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+((uint64_t *)v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4;
  v12 = mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(a1, v21[0], v19);
  mlir::tensor::DimOp::build(a1, (uint64_t)v21, v11, (uint64_t)v12 - 16);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::DimOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineExpr,mlir::Value &>(mlir::IndexType **a1, uint64_t a2, mlir::BytecodeWriterConfig *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.apply", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"affine.apply";
    v17[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::affine::AffineApplyOp::build(a1, (uint64_t)v19, a3, (mlir::BytecodeWriterConfig *)1, a4, 1);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void `anonymous namespace'::FoldDimOfCollapseShape::~FoldDimOfCollapseShape(_anonymous_namespace_::FoldDimOfCollapseShape *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldDimOfCollapseShape::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t result;
  void *v6;
  BOOL v7;
  uint64_t v8;
  unint64_t ConstantIntValue;
  char v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  mlir *v21;
  mlir::MLIRContext **v22;
  uint64_t v23;
  uint64_t v24;
  mlir::MLIRContext *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v27;
  uint64_t AffineSymbolExpr;
  uint64_t v29;
  unint64_t v30;
  mlir::GenericProgramPoint *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[48];
  void *v39;
  uint64_t v40;
  _BYTE v41[128];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[4];

  v44[2] = *MEMORY[0x1E0C80C00];
  v39 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v39);
  if (!result)
    return result;
  v6 = *(void **)(*(_QWORD *)(result + 48) + 16);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id;
  if (v6 == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id)
    v8 = result;
  else
    v8 = 0;
  v35 = v8;
  if (!v7)
    return 0;
  ConstantIntValue = mlir::getConstantIntValue(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) | 4);
  if (!v10)
    return 0;
  v11 = ConstantIntValue;
  v12 = *(_DWORD *)(v35 + 36) ? v35 - 16 : 0;
  v34 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34) + 8 * v11) != 0x8000000000000000)
    return 0;
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v35, (uint64_t)&v39);
  v13 = (char *)v39;
  v14 = (char *)v39 + 32 * v11;
  v42 = v44;
  v43 = 0x200000000;
  v15 = *((_DWORD *)v14 + 2);
  if (&v42 != (_QWORD **)v14 && v15 != 0)
  {
    if (v15 < 3)
    {
      v18 = v44;
      v17 = *((_DWORD *)v14 + 2);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, *((unsigned int *)v14 + 2), 8);
      v17 = *((_DWORD *)v14 + 2);
      if (!v17)
      {
LABEL_22:
        LODWORD(v43) = v15;
        v13 = (char *)v39;
        goto LABEL_23;
      }
      v18 = v42;
    }
    memcpy(v18, *(const void **)v14, 8 * v17);
    goto LABEL_22;
  }
LABEL_23:
  if ((_DWORD)v40)
  {
    v19 = 32 * v40;
    do
    {
      v20 = *(char **)&v13[v19 - 32];
      if (&v13[v19 - 16] != v20)
        free(v20);
      v19 -= 32;
    }
    while (v19);
    v13 = (char *)v39;
  }
  if (v13 != v41)
    free(v13);
  v39 = v41;
  v40 = 0x600000000;
  v36 = v38;
  v37 = 0x600000000;
  v33 = 0;
  if ((_DWORD)v43)
  {
    v21 = 0;
    v22 = (mlir::MLIRContext **)v42;
    v23 = 8 * v43;
    do
    {
      v24 = *(_QWORD *)(a2 + 24);
      v32 = *(_QWORD *)(*(_QWORD *)(v35 + 72) + 24);
      v26 = mlir::OpBuilder::create<mlir::tensor::DimOp,mlir::detail::TypedValue<mlir::RankedTensorType>,long long &>(a3 + 1, v24, &v32, v22);
      v27 = v40;
      if (v40 >= (unint64_t)HIDWORD(v40))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 8);
        v27 = v40;
      }
      *((_QWORD *)v39 + v27) = (char *)v26 - 16;
      LODWORD(v40) = v40 + 1;
      AffineSymbolExpr = mlir::Builder::getAffineSymbolExpr(a3 + 1, v21, v25);
      v29 = v37;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v37 + 1, 8);
        v29 = v37;
      }
      *((_QWORD *)v36 + v29) = AffineSymbolExpr;
      LODWORD(v37) = v37 + 1;
      v30 = *((_QWORD *)v36 + v37 - 1);
      if (v33)
        v30 = mlir::AffineExpr::operator*(&v33, v30);
      v33 = v30;
      v21 = (mlir *)((_DWORD)v21 + 1);
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v31 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineExpr &,llvm::SmallVector<mlir::Value,6u> &>(a3 + 1, *(_QWORD *)(a2 + 24), (mlir::BytecodeWriterConfig *)&v33, (uint64_t)&v39);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v31);
  if (v36 != v38)
    free(v36);
  if (v39 != v41)
    free(v39);
  if (v42 != v44)
    free(v42);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineExpr &,llvm::SmallVector<mlir::Value,6u> &>(mlir::IndexType **a1, uint64_t a2, mlir::BytecodeWriterConfig *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  unint64_t v19[2];
  _QWORD v20[39];

  v20[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.apply", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"affine.apply";
    v17[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::affine::AffineApplyOp::build(a1, (uint64_t)v20, a3, (mlir::BytecodeWriterConfig *)1, v19[0], v19[1]);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v12;
}

void mlir::RewritePatternSet::addImpl<mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"tensor.collapse_shape", 21, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E47FB8;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp>]";
    v25 = 117;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp,mlir::tensor::ExpandShapeOp,mlir::tensor::CastOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"tensor.collapse_shape", 21, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E47B48;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp"
          ", mlir::tensor::ExpandShapeOp, mlir::tensor::CastOp>]";
    v25 = 163;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp>::~ComposeReassociativeReshapeOps(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp>::~ComposeReassociativeReshapeOps(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::CollapseShapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::CollapseShapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::CollapseShapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t NextResultAtOffset;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  mlir::GenericProgramPoint *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v30 = a2;
  v34 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v34);
  if (result)
  {
    v6 = result;
    v7 = *(void **)(*(_QWORD *)(result + 48) + 16);
    v8 = v7 == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id;
    if (v7 == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id)
      v9 = result;
    else
      v9 = 0;
    v29 = v9;
    if (!v8)
      return 0;
    v10 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    v11 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8) : 0;
    v28[0] = (uint64_t)v11;
    v28[1] = v12;
    if ((mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
      || (mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    {
      return 0;
    }
    v13 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0);
    if ((mlir::hasNonIdentityLayout(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
      return 0;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v29, (uint64_t)&v34);
    v15 = v34;
    v16 = v35;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v30, (uint64_t)&v31);
    mlir::composeReassociationIndices((uint64_t)v15, v16, (uint64_t)v31, v32, (uint64_t)&v37);
    v17 = (char *)v31;
    if (v32)
    {
      v18 = 32 * v32;
      do
      {
        v19 = *(char **)&v17[v18 - 32];
        if (&v17[v18 - 16] != v19)
          free(v19);
        v18 -= 32;
      }
      while (v18);
      v17 = (char *)v31;
    }
    if (v17 != (char *)&v33)
      free(v17);
    v20 = (char *)v34;
    if (v35)
    {
      v21 = 32 * v35;
      do
      {
        v22 = *(char **)&v20[v21 - 32];
        if (&v20[v21 - 16] != v22)
          free(v22);
        v21 -= 32;
      }
      while (v21);
      v20 = (char *)v34;
    }
    if (v20 != (char *)&v36)
      free(v20);
    if (!v40)
    {
      return 0;
    }
    else
    {
      v23 = v30;
      v34 = *(void **)(*(_QWORD *)(v29 + 72) + 24);
      v24 = mlir::OpBuilder::create<mlir::tensor::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v30 + 24), v28, (uint64_t *)&v34, (uint64_t)&v37);
      (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v23, v24);
      if (v40)
      {
        v25 = v37;
        if (v38)
        {
          v26 = 32 * v38;
          do
          {
            v27 = *(char **)&v25[v26 - 32];
            if (&v25[v26 - 16] != v27)
              free(v27);
            v26 -= 32;
          }
          while (v26);
          v25 = v37;
        }
        if (v25 != (char *)&v39)
          free(v25);
      }
      return 1;
    }
  }
  return result;
}

_QWORD *mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp,mlir::tensor::ExpandShapeOp,mlir::tensor::CastOp>::~ComposeCollapseOfExpandOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp,mlir::tensor::ExpandShapeOp,mlir::tensor::CastOp>::~ComposeCollapseOfExpandOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp,mlir::tensor::ExpandShapeOp,mlir::tensor::CastOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t DefiningOp;
  void *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  char *v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  mlir::GenericProgramPoint *v31;
  uint64_t v32;
  mlir::OpBuilder *v33;
  mlir::GenericProgramPoint *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44[2];
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[16];
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  char *v57;
  uint64_t v58;
  _QWORD v59[18];

  v4 = a2;
  v59[16] = *MEMORY[0x1E0C80C00];
  v47 = a2;
  v57 = *(char **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v57);
  if (!DefiningOp)
    return 0;
  v6 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id;
  v8 = v6 == &mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id ? DefiningOp : 0;
  v46 = v8;
  if (!v7)
    return 0;
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9)
  {
    v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
    v4 = v47;
  }
  else
  {
    v10 = 0;
  }
  v45[0] = v9;
  v45[1] = v10;
  v11 = *(_DWORD *)(v4 + 36) ? v4 - 16 : 0;
  v12 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8) : 0;
  v44[0] = (uint64_t)v12;
  v44[1] = v13;
  if ((mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
    || (mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
  {
    return 0;
  }
  v14 = *(_DWORD *)(v46 + 36) ? v46 - 16 : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  if ((mlir::hasNonIdentityLayout(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v45);
  v17 = v16;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
  if (v45[0] == v44[0])
    return 0;
  v19 = v18;
  v57 = (char *)v59;
  v58 = 0x400000000;
  v54 = v56;
  v55 = 0x400000000;
  if (v17 <= v18)
  {
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v47, (uint64_t)&v51);
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v57, (uint64_t)&v51);
    llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v51);
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v46, (uint64_t)&v51);
  }
  else
  {
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v46, (uint64_t)&v51);
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v57, (uint64_t)&v51);
    llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v51);
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v47, (uint64_t)&v51);
  }
  llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v54, (uint64_t)&v51);
  llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v51);
  v51 = v53;
  v52 = 0x400000000;
  if (!(_DWORD)v55)
    goto LABEL_43;
  v22 = 0;
  v23 = (char *)v54;
  v24 = (char *)v54 + 32 * v55;
  do
  {
    v25 = 0;
    v48 = v50;
    v49 = 0x200000000;
    v26 = 32 * v22;
    while (1)
    {
      if (v22 >= v58)
      {
LABEL_36:
        llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::push_back((uint64_t)&v51, (unint64_t)&v48);
        v28 = 1;
        v29 = v48;
        if (v48 == v50)
          goto LABEL_38;
LABEL_37:
        free(v29);
        goto LABEL_38;
      }
      v27 = *(_QWORD *)(*(_QWORD *)&v57[v26] + 8 * *(unsigned int *)&v57[v26 + 8] - 8);
      if (v27 > *(_QWORD *)(*(_QWORD *)v23 + 8 * *((unsigned int *)v23 + 2) - 8))
        break;
      if (v25 >= HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v25 + 1, 8);
        v25 = v49;
      }
      *((_QWORD *)v48 + v25) = v22;
      v25 = v49 + 1;
      LODWORD(v49) = v49 + 1;
      v26 += 32;
      ++v22;
      if (v27 == *(_QWORD *)(*(_QWORD *)v23 + 8 * *((unsigned int *)v23 + 2) - 8))
        goto LABEL_36;
    }
    v28 = 0;
    v29 = v48;
    if (v48 != v50)
      goto LABEL_37;
LABEL_38:
    if ((v28 & 1) == 0)
    {
      v20 = 0;
      goto LABEL_51;
    }
    v23 += 32;
  }
  while (v23 != v24);
LABEL_43:
  if (v17 <= v19)
  {
    v32 = v47;
    v33 = (mlir::OpBuilder *)(a3 + 1);
    v48 = *(void **)(*(_QWORD *)(v46 + 72) + 24);
    if (v17 >= v19)
      v34 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>(v33, *(_QWORD *)(v47 + 24), v44, (uint64_t *)&v48);
    else
      v34 = mlir::OpBuilder::create<mlir::tensor::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>((uint64_t *)v33, *(_QWORD *)(v47 + 24), v44, (uint64_t *)&v48, (uint64_t)&v51);
    (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v32, v34);
  }
  else
  {
    v30 = v47;
    v48 = *(void **)(*(_QWORD *)(v46 + 72) + 24);
    v31 = mlir::OpBuilder::create<mlir::tensor::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v47 + 24), v44, (uint64_t *)&v48, (uint64_t)&v51);
    (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v30, v31);
  }
  v20 = 1;
LABEL_51:
  v35 = (char *)v51;
  if ((_DWORD)v52)
  {
    v36 = 32 * v52;
    do
    {
      v37 = *(char **)&v35[v36 - 32];
      if (&v35[v36 - 16] != v37)
        free(v37);
      v36 -= 32;
    }
    while (v36);
    v35 = (char *)v51;
  }
  if (v35 != v53)
    free(v35);
  v38 = (char *)v54;
  if ((_DWORD)v55)
  {
    v39 = 32 * v55;
    do
    {
      v40 = *(char **)&v38[v39 - 32];
      if (&v38[v39 - 16] != v40)
        free(v40);
      v39 -= 32;
    }
    while (v39);
    v38 = (char *)v54;
  }
  if (v38 != v56)
    free(v38);
  v41 = v57;
  if ((_DWORD)v58)
  {
    v42 = 32 * v58;
    do
    {
      v43 = *(char **)&v41[v42 - 32];
      if (&v41[v42 - 16] != v43)
        free(v43);
      v42 -= 32;
    }
    while (v42);
    v41 = v57;
  }
  if (v41 != (char *)v59)
    free(v41);
  return v20;
}

_QWORD *`anonymous namespace'::FoldReshapeWithConstant<mlir::tensor::CollapseShapeOp>::~FoldReshapeWithConstant(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::FoldReshapeWithConstant<mlir::tensor::CollapseShapeOp>::~FoldReshapeWithConstant(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::FoldReshapeWithConstant<mlir::tensor::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t RawStringData;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  mlir::GenericProgramPoint *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26[2];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v24 = 0;
  v25 = v5;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v25);
  if (!DefiningOp)
    return 0;
  v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    return 0;
  v26[0] = v27;
  v26[1] = (void *)0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)v26);
  v8 = *(_QWORD *)v26[0];
  v9 = mlir::DenseElementsAttr::classof(*(_QWORD *)v26[0] & 0xFFFFFFFFFFFFFFF8);
  v10 = 0;
  v11 = v8 & 0xFFFFFFFFFFFFFFF8;
  v12 = (v8 & 0xFFFFFFFFFFFFFFF8) == 0 || !v9;
  if ((v12 & 1) == 0)
  {
    v24 = v11;
    v10 = v11;
  }
  if (v26[0] != v27)
    free(v26[0]);
  v13 = v10 ? v12 : 1;
  if ((v13 & 1) != 0)
    return 0;
  result = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v24);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a2 + 36))
      v15 = a2 - 16;
    else
      v15 = 0;
    v16 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v16)
      v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
    else
      v17 = 0;
    RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v24);
    v26[0] = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v16, v17, RawStringData, v19, v20, v21, v22);
    v23 = mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::DenseElementsAttr &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (_QWORD **)v26);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v23);
    return 1;
  }
  return result;
}

_QWORD *`anonymous namespace'::FoldReshapeWithSplat<mlir::tensor::CollapseShapeOp>::~FoldReshapeWithSplat(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::FoldReshapeWithSplat<mlir::tensor::CollapseShapeOp>::~FoldReshapeWithSplat(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::FoldReshapeWithSplat<mlir::tensor::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  unint64_t v11;

  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (result)
  {
    v6 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::SplatOp,void>::id)
    {
      if (*(_DWORD *)(a2 + 36))
        v7 = a2 - 16;
      else
        v7 = 0;
      v8 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v10 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 24);
      v11 = v8;
      v9 = mlir::OpBuilder::create<mlir::tensor::SplatOp,mlir::RankedTensorType,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v11, &v10);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v9);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *`anonymous namespace'::FoldReshapeWithFromElements<mlir::tensor::CollapseShapeOp>::~FoldReshapeWithFromElements(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::FoldReshapeWithFromElements<mlir::tensor::CollapseShapeOp>::~FoldReshapeWithFromElements(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::FoldReshapeWithFromElements<mlir::tensor::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  _QWORD v16[2];
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    v6 = *(void **)(*(_QWORD *)(result + 48) + 16);
    if (v6 == &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id)
      v7 = result;
    else
      v7 = 0;
    if (v6 != &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id)
      return 0;
    v8 = (_QWORD *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8)
    {
      v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
      v18 = v8;
      v19 = v9;
      result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v18);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v18);
      if (!(_DWORD)result)
        return result;
    }
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v18);
    if (v11)
    {
      v12 = 8 * v11;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v12 -= 8;
        if (!v12)
          goto LABEL_16;
      }
      return 0;
    }
    else
    {
LABEL_16:
      v17 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)(v7 + 46) & 0x80) != 0)
      {
        v13 = *(unsigned int *)(v7 + 68);
        v14 = *(_QWORD *)(v7 + 72);
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
      v16[0] = v14;
      v16[1] = v13;
      v15 = mlir::OpBuilder::create<mlir::tensor::FromElementsOp,mlir::RankedTensorType,mlir::OperandRange>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v17, (uint64_t)v16);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v15);
      return 1;
    }
  }
  return result;
}

void `anonymous namespace'::FoldCollapseOfCastOp::~FoldCollapseOfCastOp(_anonymous_namespace_::FoldCollapseOfCastOp *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldCollapseOfCastOp::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  v28 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (!DefiningOp)
    return 0;
  v5 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    return 0;
  result = mlir::tensor::preservesStaticInformation(*(_QWORD *)(DefiningOp - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::tensor::CollapseShapeOp::getReassociationExprs((mlir::tensor::CollapseShapeOp *)&v24, &v28);
    mlir::getSymbolLessAffineMaps((uint64_t)v28, v29, (uint64_t)&v25);
    v8 = (char *)v28;
    if (v29)
    {
      v9 = 32 * v29;
      do
      {
        v10 = *(char **)&v8[v9 - 32];
        if (&v8[v9 - 16] != v10)
          free(v10);
        v9 -= 32;
      }
      while (v9);
      v8 = (char *)v28;
    }
    if (v8 != (char *)v30)
      free(v8);
    v11 = (void *)mlir::tensor::CollapseShapeOp::inferCollapsedType(v7, (uint64_t *)v25, v26);
    v28 = v11;
    if (v25 != &v27)
      free(v25);
    if (*(_DWORD *)(v24 + 36))
      v12 = v24 - 16;
    else
      v12 = 0;
    if (v11 == (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v17 = v24;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v24);
      v18 = *(uint64_t **)(v24 + 72);
      v19 = *(uint64_t **)(*(_QWORD *)(v5 + 72) + 24);
      v20 = (uint64_t *)v18[1];
      if (v20)
      {
        *v20 = *v18;
        if (*v18)
          *(_QWORD *)(*v18 + 8) = v18[1];
      }
      v18[3] = (uint64_t)v19;
      v18[1] = (uint64_t)v19;
      v21 = *v19;
      *v18 = *v19;
      if (v21)
        *(_QWORD *)(v21 + 8) = v18;
      *v19 = (uint64_t)v18;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v17);
    }
    else
    {
      v13 = *(_QWORD *)(v24 + 24);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 24);
      v22 = *(_QWORD *)(v24 + 16 * (((unint64_t)*(unsigned int *)(v24 + 44) >> 23) & 1) + 64);
      v25 = mlir::OpBuilder::create<mlir::tensor::CollapseShapeOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::TensorType>,mlir::ArrayAttr>((mlir::OpBuilder *)(a3 + 8), v13, (uint64_t *)&v28, (uint64_t *)&v23, &v22);
      v14 = v24;
      if (*(_DWORD *)(v24 + 36))
        v15 = v24 - 16;
      else
        v15 = 0;
      v23 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v16 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::RankedTensorType,mlir::tensor::EmptyOp &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(v14 + 24), (uint64_t *)&v23, &v25);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v14, v16);
    }
    return 1;
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::CollapseShapeOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::TensorType>,mlir::ArrayAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  _QWORD v24[8];
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[29];

  v28[28] = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.collapse_shape", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"tensor.collapse_shape";
    v22[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  v13 = *a3;
  v14 = *a5;
  v22[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v24, (uint64_t)v22, 1);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties>(v24) = v14;
  v15 = v26;
  if (v26 >= v27)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v26 + 1, 8);
    v15 = v26;
  }
  *(_QWORD *)(v25 + 8 * v15) = v13;
  ++v26;
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExtractSliceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExtractSliceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ExtractSliceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

void mlir::RewritePatternSet::addImpl<mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp,SliceReturnTypeCanonicalizer,SliceCanonicalizer>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  void *__p;
  const char *v26;
  unint64_t v27;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v26, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"tensor.extract_slice", 20, (__int16)v26, v9, 0, 0);
  *v8 = &unk_1E0E4BF08;
  __p = v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir:"
          ":tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>]";
    v27 = 185;
    v18 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
    if (v27 >= v18)
      v19 = v18;
    else
      v19 = v27;
    v20 = &v26[v19];
    v21 = v27 - v19;
    if (v27 - v19 >= 0x12)
      v22 = 18;
    else
      v22 = v27 - v19;
    v23 = &v20[v22];
    v24 = v21 - v22;
    if (v24 >= v24 - 1)
      --v24;
    v8[8] = v23;
    v8[9] = v24;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&__p);
    v15 = __p;
    a1[2] = v14;
    __p = 0;
    if (v15)
    {
      v16 = (_QWORD *)v15[10];
      if (v16 != v15 + 12)
        free(v16);
      v17 = (_QWORD *)v15[4];
      if (v17 != v15 + 6)
        free(v17);
      operator delete(v15);
    }
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp,SliceReturnTypeCanonicalizer,SliceCanonicalizer>::~OpWithOffsetSizesAndStridesConstantArgumentFolder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp,SliceReturnTypeCanonicalizer,SliceCanonicalizer>::~OpWithOffsetSizesAndStridesConstantArgumentFolder(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp,SliceReturnTypeCanonicalizer,SliceCanonicalizer>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  _BYTE *v5;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  mlir::GenericProgramPoint *v24;
  uint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  void *__dst;
  uint64_t v34;
  _BYTE v35[48];
  void *__src;
  uint64_t v37;
  _BYTE v38[48];
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[8];

  v41[6] = *MEMORY[0x1E0C80C00];
  v29 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v29, (uint64_t)&__src);
  v39 = v41;
  v40 = 0x600000000;
  v4 = v37;
  v5 = __src;
  if ((_DWORD)v37)
  {
    if (__src == v38)
    {
      v6 = v37;
      if (v37 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v37, 8),
            v6 = v37,
            v5 = __src,
            (_DWORD)v37))
      {
        memcpy(v39, v5, 8 * v6);
        v5 = __src;
      }
      LODWORD(v40) = v4;
    }
    else
    {
      v39 = __src;
      v40 = v37;
      __src = v38;
      HIDWORD(v37) = 0;
      v5 = v38;
    }
    LODWORD(v37) = 0;
  }
  if (v5 != v38)
    free(v5);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v29, (uint64_t)&__dst);
  __src = v38;
  v37 = 0x600000000;
  v7 = v34;
  v8 = __dst;
  if ((_DWORD)v34)
  {
    if (__dst == v35)
    {
      v9 = v34;
      if (v34 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v38, v34, 8),
            v9 = v34,
            v8 = __dst,
            (_DWORD)v34))
      {
        memcpy(__src, v8, 8 * v9);
        v8 = __dst;
      }
      LODWORD(v37) = v7;
    }
    else
    {
      __src = __dst;
      v37 = v34;
      __dst = v35;
      HIDWORD(v34) = 0;
      v8 = v35;
    }
    LODWORD(v34) = 0;
  }
  if (v8 != v35)
    free(v8);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v29, (uint64_t)&v30);
  __dst = v35;
  v34 = 0x600000000;
  v10 = v31;
  v11 = v30;
  if ((_DWORD)v31)
  {
    if (v30 == v32)
    {
      v12 = v31;
      if (v31 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v35, v31, 8),
            v12 = v31,
            v11 = v30,
            (_DWORD)v31))
      {
        memcpy(__dst, v11, 8 * v12);
        v11 = v30;
      }
      LODWORD(v34) = v10;
    }
    else
    {
      __dst = v30;
      v34 = v31;
      v30 = v32;
      HIDWORD(v31) = 0;
      v11 = v32;
    }
    LODWORD(v31) = 0;
  }
  if (v11 != v32)
    free(v11);
  if (mlir::foldDynamicIndexList((uint64_t)&v39, 1)
    || mlir::foldDynamicIndexList((uint64_t)&__src, 1)
    || mlir::foldDynamicIndexList((uint64_t)&__dst, 0))
  {
    v13 = a3;
    v14 = v29;
    v15 = v39;
    v16 = v40;
    v17 = (uint64_t *)__src;
    v18 = v37;
    v19 = (uint64_t *)__dst;
    v20 = v34;
    if (*(_DWORD *)(v29 + 36))
      v21 = v29 - 16;
    else
      v21 = 0;
    v30 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
    v30 = (void *)mlir::tensor::ExtractSliceOp::inferCanonicalRankReducedResultType(v22, (void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), v15, v16, v17, v18, v19, v20);
    if (v30)
    {
      v23 = *(_QWORD *)(v29 + 24);
      v28 = *(_QWORD *)(*(_QWORD *)(v29 + 72) + 24);
      v24 = mlir::OpBuilder::create<mlir::tensor::ExtractSliceOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,4u>,llvm::SmallVector<mlir::OpFoldResult,4u>&,llvm::SmallVector<mlir::OpFoldResult,4u>>((mlir::MLIRContext **)(v13 + 8), v23, (uint64_t *)&v30, &v28, (uint64_t)&v39, (uint64_t)&__src, (uint64_t)&__dst);
      SliceCanonicalizer::operator()((uint64_t)&v28, v13, v29, (uint64_t)v24);
      v25 = 1;
    }
    else
    {
      v25 = 0;
    }
    v26 = __dst;
    if (__dst != v35)
      goto LABEL_41;
  }
  else
  {
    v25 = 0;
    v26 = __dst;
    if (__dst != v35)
LABEL_41:
      free(v26);
  }
  if (__src != v38)
    free(__src);
  if (v39 != v41)
    free(v39);
  return v25;
}

uint64_t SliceCanonicalizer::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(a4 + 36))
    v6 = a4 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  if (*(_DWORD *)(a3 + 36))
    v8 = a3 - 16;
  else
    v8 = 0;
  v7 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v7 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v9 = *(_QWORD *)(a3 + 24);
    if (*(_DWORD *)(a3 + 36))
      v10 = a3 - 16;
    else
      v10 = 0;
    v12 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    NextResultAtOffset = (uint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a2 + 8), v9, (uint64_t *)&v12, &NextResultAtOffset)- 16;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, &NextResultAtOffset, 1);
}

void `anonymous namespace'::ExtractSliceOpCastFolder::~ExtractSliceOpCastFolder(_anonymous_namespace_::ExtractSliceOpCastFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ExtractSliceOpCastFolder::matchAndRewrite(uint64_t DefiningOp, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  mlir::GenericProgramPoint *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[2];
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v5)
    {
      v6 = (unint64_t *)(*(_QWORD *)(a2 + 72) + 24);
      do
      {
        v7 = *v6;
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)DefiningOp);
        v42 = v7;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v42);
        if (DefiningOp)
        {
          DefiningOp = mlir::arith::ConstantIndexOp::classof(DefiningOp, v8);
          if ((DefiningOp & 1) != 0)
            return 0;
        }
        v6 += 4;
      }
      while (--v5);
    }
  }
  v42 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v9 = mlir::Value::getDefiningOp((mlir::Value *)&v42);
  if (!v9)
    return 0;
  v10 = v9;
  if (*(_UNKNOWN **)(*(_QWORD *)(v9 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id
    || !mlir::tensor::preservesStaticInformation(*(_QWORD *)(v9 - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    return 0;
  }
  v11 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(a2 + 36))
    v12 = a2 - 16;
  else
    v12 = 0;
  v13 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 24);
  v45 = v13;
  v14 = *(unsigned int *)(a2 + 44);
  v15 = a2 + 64;
  v16 = (uint64_t *)(a2 + 64 + 16 * ((v14 >> 23) & 1));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v17 = (unsigned int *)(a2 + 64 + 16 * ((v14 >> 23) & 1));
  else
    v17 = 0;
  v18 = v17[6];
  v19 = v17[7];
  if ((v14 & 0x800000) != 0)
  {
    v20 = v19 + v18;
    v42 = *(_QWORD *)(a2 + 72) + 32 * v18;
    v43 = v20 - v18;
    v21 = v17[8] + v20;
    v40 = *(_QWORD *)(a2 + 72) + 32 * v20;
    v41 = v21 - v20;
    v22 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v22 = 0;
    v35 = v19 + v18;
    v42 = 32 * v18;
    v43 = v35 - v18;
    v21 = v17[8] + v35;
    v40 = 32 * v35;
    v41 = v21 - v35;
  }
  v23 = v17[9] + v21 - v21;
  v39[0] = v22 + 32 * v21;
  v39[1] = v23;
  v38[0] = *v16;
  v38[0] = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v38);
  v38[1] = v24;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v25 = v15 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v25 = 0;
  v37[0] = *(_QWORD *)(v25 + 8);
  v37[0] = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v37);
  v37[1] = v26;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v27 = v15 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v27 = 0;
  v36[0] = *(_QWORD *)(v27 + 16);
  v36[0] = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v36);
  v36[1] = v28;
  v29 = mlir::OpBuilder::create<mlir::tensor::ExtractSliceOp,mlir::RankedTensorType,mlir::detail::TypedValue<mlir::TensorType>,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(a3 + 1, v11, (uint64_t *)&v45, &v44, (uint64_t)&v42, (uint64_t)&v40, (uint64_t)v39, v38, v37, v36);
  v46 = (uint64_t)v29 - 16;
  v30 = *((_QWORD *)v29 - 1) & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(a2 + 36))
    v31 = a2 - 16;
  else
    v31 = 0;
  if (v30 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a2 + 36))
      v32 = a2 - 16;
    else
      v32 = 0;
    v42 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    v46 = (uint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 1), v11, (uint64_t *)&v42, &v46)- 16;
  }
  v33 = 1;
  (*((void (**)(mlir::MLIRContext **, uint64_t, uint64_t *, uint64_t))*a3 + 3))(a3, a2, &v46, 1);
  return v33;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExtractSliceOp,mlir::RankedTensorType,mlir::detail::TypedValue<mlir::TensorType>,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  mlir::GenericProgramPoint *v23;
  mlir::GenericProgramPoint *v24;
  uint64_t v26;
  const char *v27;
  __int16 v28;
  uint64_t v29[4];
  __int16 v30;
  unint64_t v31[2];
  unint64_t v32[2];
  unint64_t v33[2];
  _QWORD v34[40];

  v34[38] = *MEMORY[0x1E0C80C00];
  v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract_slice", (const unsigned __int8 *)0x14, Context);
  if (!v20)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"tensor.extract_slice";
    v29[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v19);
  v21 = *a3;
  v22 = *a4;
  mlir::ValueRange::ValueRange(v33, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  mlir::ValueRange::ValueRange(v32, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  mlir::ValueRange::ValueRange(v31, *(_QWORD *)a7, *(_QWORD *)(a7 + 8));
  mlir::tensor::ExtractSliceOp::build(a1, (uint64_t)v34, v21, v22, v33[0], v33[1], v32[0], v32[1], v31[0], v31[1], *a8, a8[1], *a9, a9[1], *a10, a10[1]);
  v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((_QWORD *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id)
    v24 = v23;
  else
    v24 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

_QWORD *`anonymous namespace'::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>::~InsertSliceOpConstantArgumentFolder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>::~InsertSliceOpConstantArgumentFolder(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::InsertSliceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::InsertSliceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::InsertSliceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  _BYTE *v5;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  mlir::GenericProgramPoint *v20;
  uint64_t v21;
  void *v22;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  void *__dst;
  uint64_t v32;
  _BYTE v33[48];
  void *__src;
  uint64_t v35;
  _BYTE v36[48];
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x1E0C80C00];
  v27 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v27, (uint64_t)&__src);
  v37 = v39;
  v38 = 0x600000000;
  v4 = v35;
  v5 = __src;
  if ((_DWORD)v35)
  {
    if (__src == v36)
    {
      v6 = v35;
      if (v35 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v35, 8),
            v6 = v35,
            v5 = __src,
            (_DWORD)v35))
      {
        memcpy(v37, v5, 8 * v6);
        v5 = __src;
      }
      LODWORD(v38) = v4;
    }
    else
    {
      v37 = __src;
      v38 = v35;
      __src = v36;
      HIDWORD(v35) = 0;
      v5 = v36;
    }
    LODWORD(v35) = 0;
  }
  if (v5 != v36)
    free(v5);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v27, (uint64_t)&__dst);
  __src = v36;
  v35 = 0x600000000;
  v7 = v32;
  v8 = __dst;
  if ((_DWORD)v32)
  {
    if (__dst == v33)
    {
      v9 = v32;
      if (v32 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v36, v32, 8),
            v9 = v32,
            v8 = __dst,
            (_DWORD)v32))
      {
        memcpy(__src, v8, 8 * v9);
        v8 = __dst;
      }
      LODWORD(v35) = v7;
    }
    else
    {
      __src = __dst;
      v35 = v32;
      __dst = v33;
      HIDWORD(v32) = 0;
      v8 = v33;
    }
    LODWORD(v32) = 0;
  }
  if (v8 != v33)
    free(v8);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v27, (uint64_t)&v28);
  __dst = v33;
  v32 = 0x600000000;
  v10 = v29;
  v11 = v28;
  if ((_DWORD)v29)
  {
    if (v28 == v30)
    {
      v12 = v29;
      if (v29 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v33, v29, 8),
            v12 = v29,
            v11 = v28,
            (_DWORD)v29))
      {
        memcpy(__dst, v11, 8 * v12);
        v11 = v28;
      }
      LODWORD(v32) = v10;
    }
    else
    {
      __dst = v28;
      v32 = v29;
      v28 = v30;
      HIDWORD(v29) = 0;
      v11 = v30;
    }
    LODWORD(v29) = 0;
  }
  if (v11 != v30)
    free(v11);
  if (mlir::foldDynamicIndexList((uint64_t)&v37, 1)
    || mlir::foldDynamicIndexList((uint64_t)&__src, 1)
    || mlir::foldDynamicIndexList((uint64_t)&__dst, 0))
  {
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v26);
    v14 = v13;
    if (*(_DWORD *)(v27 + 36))
      v15 = v27 - 16;
    else
      v15 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
    v28 = (void *)mlir::tensor::ExtractSliceOp::inferCanonicalRankReducedResultType(v14, (void *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), v37, v38, (uint64_t *)__src, v35, (uint64_t *)__dst, v32);
    v26 = *(_QWORD *)(*(_QWORD *)(v27 + 72) + 24);
    if (v28 != (void *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v17 = (_OWORD *)(a3 + 24);
      v24 = *(_OWORD *)(a3 + 24);
      v26 = (unint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(v27 + 24), (uint64_t *)&v28, (uint64_t *)&v26)- 16;
      if ((_QWORD)v24)
      {
        *v17 = v24;
      }
      else
      {
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(a3 + 32) = 0;
      }
    }
    v18 = v27;
    if (*(_BYTE *)(v27 + 47))
      v19 = v27 + 80;
    else
      v19 = 0;
    v25 = *(_QWORD *)(*(_QWORD *)(v27 + 72) + 32 * *(unsigned int *)(v19 + 24) + 24);
    v20 = mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Value &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>((mlir::MLIRContext **)(a3 + 8), *(_QWORD *)(v27 + 24), (uint64_t *)&v26, &v25, (uint64_t)&v37, (uint64_t)&__src, (uint64_t)&__dst);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v18, v20);
    v21 = 1;
    v22 = __dst;
    if (__dst != v33)
      goto LABEL_45;
  }
  else
  {
    v21 = 0;
    v22 = __dst;
    if (__dst != v33)
LABEL_45:
      free(v22);
  }
  if (__src != v36)
    free(__src);
  if (v37 != v39)
    free(v37);
  return v21;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Value &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.insert_slice", (const unsigned __int8 *)0x13, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"tensor.insert_slice";
    v23[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::tensor::InsertSliceOp::build(a1, (uint64_t)v25, *a3, *a4, *(uint64_t **)a5, *(unsigned int *)(a5 + 8), *(uint64_t **)a6, *(unsigned int *)(a6 + 8), *(uint64_t **)a7, *(unsigned int *)(a7 + 8), 0, 0);
  v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

_QWORD *`anonymous namespace'::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>::~InsertSliceOpCastFolder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>::~InsertSliceOpCastFolder(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>::matchAndRewrite(uint64_t DefiningOp, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t v5;
  void **v6;
  void *v7;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t RHS;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  mlir::GenericProgramPoint *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46[2];
  void *v47[2];
  uint64_t v48;
  void *v49[2];
  uint64_t v50;
  void *v51[2];
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v45 = a2;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v5)
    {
      v6 = (void **)(*(_QWORD *)(a2 + 72) + 24);
      do
      {
        v7 = *v6;
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)DefiningOp);
        v51[0] = v7;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v51);
        if (DefiningOp)
        {
          DefiningOp = mlir::arith::ConstantIndexOp::classof(DefiningOp, v8);
          if ((DefiningOp & 1) != 0)
            return 0;
        }
        v6 += 4;
      }
      while (--v5);
    }
  }
  v51[0] = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  v9 = mlir::Value::getDefiningOp((mlir::Value *)v51);
  if (v9
    && (v10 = v9,
        *(_UNKNOWN **)(*(_QWORD *)(v9 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    && mlir::tensor::preservesStaticInformation(*(_QWORD *)(v9 - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v11 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 24) & 0xFFFFFFFFFFFFFF00;
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 24);
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v11 = 1;
  }
  v14 = v12 | v13;
  if (*(_BYTE *)(a2 + 47))
    v15 = a2 + 80;
  else
    v15 = 0;
  v51[0] = *(void **)(*(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(v15 + 24) + 24);
  v16 = mlir::Value::getDefiningOp((mlir::Value *)v51);
  if (v16
    && (v17 = v16,
        *(_UNKNOWN **)(*(_QWORD *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    && (mlir::tensor::preservesStaticInformation(*(_QWORD *)(v16 - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 72) + 24);
    if (v11)
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v44 = v14;
  }
  else
  {
    if ((v11 & 1) != 0)
      return 0;
    v44 = v14;
    if (*(_BYTE *)(a2 + 47))
      v20 = a2 + 80;
    else
      v20 = 0;
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(v20 + 24) + 24);
  }
  result = 0;
  v43 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v21 = (_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8);
  else
    v21 = 0;
  v22 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v23 = (void *)v22;
  else
    v23 = 0;
  if (v21 && v23)
  {
    v24 = a2 + 64;
    v51[0] = *(void **)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v51);
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v25 = v24 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
    else
      v25 = 0;
    v51[0] = *(void **)(v25 + 8);
    v26 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v51);
    v28 = v27;
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v29 = v24 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
    else
      v29 = 0;
    v51[0] = *(void **)(v29 + 16);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v51);
    v51[0] = v23;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v51);
    v31 = (_QWORD *)mlir::RankedTensorType::get(v26, v28, RHS, 0);
    v32 = v31;
    if (v31)
      v33 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
    else
      v33 = 0;
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
    if (mlir::isRankReducedType(v32, v33, v21))
    {
      return 0;
    }
    else
    {
      v34 = *(_QWORD *)(a2 + 24);
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v45, (uint64_t)v51);
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v45, (uint64_t)v49);
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v45, (uint64_t)v47);
      v35 = mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Value &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>(a3 + 1, v34, &v44, &v43, (uint64_t)v51, (uint64_t)v49, (uint64_t)v47);
      if (v47[0] != &v48)
        free(v47[0]);
      if (v49[0] != &v50)
        free(v49[0]);
      if (v51[0] != v52)
        free(v51[0]);
      if (*(_DWORD *)(v45 + 36))
        v37 = v45 - 16;
      else
        v37 = 0;
      v36 = *(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v36 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v38 = *(_QWORD *)(v45 + 24);
        if (*(_DWORD *)(v45 + 36))
          v39 = v45 - 16;
        else
          v39 = 0;
        v51[0] = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        v49[0] = (char *)v35 - 16;
        v35 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 1), v38, (uint64_t *)v51, (uint64_t *)v49);
      }
      v40 = v45;
      v41 = *((unsigned int *)v35 + 9);
      if ((_DWORD)v41)
        v42 = (uint64_t)v35 - 16;
      else
        v42 = 0;
      mlir::ValueRange::ValueRange(v46, v42, v41);
      (*((void (**)(mlir::MLIRContext **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, v40, v46[0], v46[1]);
      return 1;
    }
  }
  return result;
}

_QWORD *`anonymous namespace'::InsertSliceOpSourceCastInserter<mlir::tensor::InsertSliceOp>::~InsertSliceOpSourceCastInserter(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::InsertSliceOpSourceCastInserter<mlir::tensor::InsertSliceOp>::~InsertSliceOpSourceCastInserter(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::InsertSliceOpSourceCastInserter<mlir::tensor::InsertSliceOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *Value;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  unint64_t ConstantIntValue;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t RHS;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  mlir::GenericProgramPoint *v30;
  void *v31;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *v41[2];
  uint64_t v42;
  unint64_t v43[2];
  unint64_t v44[2];
  void *v45[2];
  _BYTE v46[32];
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[7];

  v49[6] = *MEMORY[0x1E0C80C00];
  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v38 = a2;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
  v6 = v5;
  if (*(_DWORD *)(a2 + 36))
    v7 = a2 - 16;
  else
    v7 = 0;
  v47 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v47);
  if (v6 != v8)
    return 0;
  Value = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
  v10 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
  v12 = (_BYTE *)(v10 + 8 * v11);
  v47 = v49;
  v48 = 0x600000000;
  v13 = v12 - Value;
  if ((unint64_t)(v12 - Value) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v13 >> 3, 8);
    v14 = v48;
    if (v12 == Value)
      goto LABEL_11;
    goto LABEL_10;
  }
  v14 = 0;
  if (v12 != Value)
  {
LABEL_10:
    memcpy(&v47[v14], Value, v12 - Value);
    v14 = v48;
  }
LABEL_11:
  LODWORD(v48) = v14 + ((unint64_t)v13 >> 3);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
  if (v16 >= 1)
  {
    for (i = 0; i < v18; ++i)
    {
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v38, (uint64_t)v45);
      ConstantIntValue = mlir::getConstantIntValue(*((_QWORD *)v45[0] + i));
      v21 = v20;
      if (v45[0] != v46)
        free(v45[0]);
      if (v21)
      {
        if ((ConstantIntValue & 0x8000000000000000) != 0)
          goto LABEL_34;
        v47[i] = ConstantIntValue;
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
    }
  }
  v22 = (uint64_t)v47;
  v23 = v48;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v37);
  v25 = mlir::RankedTensorType::get(v22, v23, RHS, 0);
  v36 = v25;
  if (v37 != v25)
  {
    if (mlir::tensor::preservesStaticInformation(v37, v25))
    {
      mlir::ValueRange::ValueRange(v44, (uint64_t)&v37, 1uLL);
      mlir::ValueRange::ValueRange(v43, (uint64_t)&v36, 1uLL);
      if (mlir::tensor::CastOp::areCastCompatible(v44[0], v44[1], v43[0], v43[1]))
      {
        v26 = (_OWORD *)(a3 + 24);
        v33 = *(_OWORD *)(a3 + 24);
        v27 = *(_QWORD *)(v38 + 24);
        v45[0] = *(void **)(*(_QWORD *)(v38 + 72) + 24);
        v35 = (uint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 8), v27, &v36, (uint64_t *)v45)- 16;
        v28 = v38;
        if (*(_BYTE *)(v38 + 47))
          v29 = v38 + 80;
        else
          v29 = 0;
        v34 = *(_QWORD *)(*(_QWORD *)(v38 + 72) + 32 * *(unsigned int *)(v29 + 24) + 24);
        mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v38, (uint64_t)v45);
        mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v38, (uint64_t)v41);
        mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v38, (uint64_t)v39);
        v30 = mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Value &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>((mlir::MLIRContext **)(a3 + 8), *(_QWORD *)(v28 + 24), &v35, &v34, (uint64_t)v45, (uint64_t)v41, (uint64_t)v39);
        (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v28, v30);
        if (v39[0] != &v40)
          free(v39[0]);
        if (v41[0] != &v42)
          free(v41[0]);
        if (v45[0] != v46)
          free(v45[0]);
        if ((_QWORD)v33)
        {
          *v26 = v33;
          v15 = 1;
          v31 = v47;
          if (v47 == v49)
            return v15;
        }
        else
        {
          *(_QWORD *)v26 = 0;
          *(_QWORD *)(a3 + 32) = 0;
          v15 = 1;
          v31 = v47;
          if (v47 == v49)
            return v15;
        }
        goto LABEL_35;
      }
    }
  }
LABEL_34:
  v15 = 0;
  v31 = v47;
  if (v47 != v49)
LABEL_35:
    free(v31);
  return v15;
}

void `anonymous namespace'::FoldStaticZeroPadding::~FoldStaticZeroPadding(_anonymous_namespace_::FoldStaticZeroPadding *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::PadOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::PadOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::PadOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::FoldStaticZeroPadding::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t ConstantIntValue;
  char v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  mlir::tensor::PadOp::getMixedLowPad((mlir::tensor::PadOp *)&v25, (uint64_t)&v26);
  v4 = (uint64_t *)v26;
  if (v27)
  {
    v5 = 8 * v27 - 8;
    do
    {
      v6 = *v4++;
      ConstantIntValue = mlir::getConstantIntValue(v6);
      if (v8)
        v9 = ConstantIntValue == 0;
      else
        v9 = 0;
      v10 = v9;
      v11 = v10 != 1 || v5 == 0;
      v5 -= 8;
    }
    while (!v11);
    v4 = (uint64_t *)v26;
    if (v26 != v28)
      goto LABEL_15;
  }
  else
  {
    v10 = 1;
    if (v26 != v28)
LABEL_15:
      free(v4);
  }
  if (!v10)
    return 0;
  mlir::tensor::PadOp::getMixedHighPad((mlir::tensor::PadOp *)&v25, (uint64_t)&v26);
  v12 = (uint64_t *)v26;
  if (!v27)
  {
    v18 = 1;
    if (v26 == v28)
      goto LABEL_32;
    goto LABEL_31;
  }
  v13 = 8 * v27 - 8;
  do
  {
    v14 = *v12++;
    v15 = mlir::getConstantIntValue(v14);
    if (v16)
      v17 = v15 == 0;
    else
      v17 = 0;
    v18 = v17;
    v19 = v18 != 1 || v13 == 0;
    v13 -= 8;
  }
  while (!v19);
  v12 = (uint64_t *)v26;
  if (v26 != v28)
LABEL_31:
    free(v12);
LABEL_32:
  if (!v18)
    return 0;
  v20 = v25;
  if (*(_QWORD *)(v25 + 16 * (((unint64_t)*(unsigned int *)(v25 + 44) >> 23) & 1) + 64))
    return 0;
  if (*(_DWORD *)(v25 + 36))
    v22 = v25 - 16;
  else
    v22 = 0;
  v26 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v24 = *(_QWORD *)(*(_QWORD *)(v25 + 72) + 24);
  v23 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(v20 + 24), (uint64_t *)&v26, &v24);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v20, v23);
  return 1;
}

uint64_t mlir::tensor::PadOp::hasZeroLowPad(mlir::tensor::PadOp *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t ConstantIntValue;
  char v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  void *v10;
  unsigned int v11;
  _QWORD v12[7];

  v12[6] = *MEMORY[0x1E0C80C00];
  mlir::tensor::PadOp::getMixedLowPad(this, (uint64_t)&v10);
  v1 = (uint64_t *)v10;
  if (!v11)
  {
    v7 = 1;
    if (v10 == v12)
      return v7;
    goto LABEL_15;
  }
  v2 = 8 * v11 - 8;
  do
  {
    v3 = *v1++;
    ConstantIntValue = mlir::getConstantIntValue(v3);
    if (v5)
      v6 = ConstantIntValue == 0;
    else
      v6 = 0;
    v7 = v6;
    v8 = (_DWORD)v7 != 1 || v2 == 0;
    v2 -= 8;
  }
  while (!v8);
  v1 = (uint64_t *)v10;
  if (v10 != v12)
LABEL_15:
    free(v1);
  return v7;
}

void `anonymous namespace'::FoldSourceTensorCast::~FoldSourceTensorCast(_anonymous_namespace_::FoldSourceTensorCast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldSourceTensorCast::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t DefiningOp;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Value;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  mlir::GenericProgramPoint *v37;
  mlir::Region *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  mlir::GenericProgramPoint *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  uint64_t v52[2];
  uint64_t v53;
  mlir::GenericProgramPoint *v54;
  uint64_t v55;
  llvm *v56[2];
  int v57;
  llvm *v58;
  uint64_t v59;
  int v60;
  llvm *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v56[0] = *(llvm **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v56);
  if (!DefiningOp)
    return 0;
  v6 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    return 0;
  result = mlir::tensor::preservesStaticInformation(*(_QWORD *)(DefiningOp - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v9 = a2 + 64;
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v10 = a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
    else
      v10 = 0;
    v56[0] = *(llvm **)(v10 + 16);
    v11 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v56);
    v13 = v12;
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v14 = v9 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
    else
      v14 = 0;
    v56[0] = *(llvm **)(v14 + 8);
    v15 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v56);
    v17 = v16;
    if (*(_DWORD *)(a2 + 36))
      v18 = a2 - 16;
    else
      v18 = 0;
    v56[0] = (llvm *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v56);
    v21 = mlir::tensor::PadOp::inferResultType(v8, v11, v13, v15, v17, Value, v20);
    v55 = v21;
    if (*(_DWORD *)(a2 + 36))
      v22 = a2 - 16;
    else
      v22 = 0;
    if (v21 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v23 = *(_QWORD *)(a2 + 24);
      v24 = *(unsigned __int8 *)(a2 + 47);
      v53 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
      if (v24)
        v25 = a2 + 80;
      else
        v25 = 0;
      v56[0] = *(llvm **)(v25 + 16);
      v52[0] = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v56);
      v52[1] = v26;
      if (HIBYTE(*(_DWORD *)(a2 + 44)))
        v27 = v9 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
      else
        v27 = 0;
      v56[0] = *(llvm **)(v27 + 8);
      v51[0] = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v56);
      v51[1] = v28;
      v29 = *(unsigned int *)(a2 + 44);
      v30 = (_QWORD *)(v9 + 16 * ((v29 >> 23) & 1));
      if (HIBYTE(*(_DWORD *)(a2 + 44)))
        v31 = (unsigned int *)(v9 + 16 * ((v29 >> 23) & 1));
      else
        v31 = 0;
      v33 = v31[6];
      v32 = v31[7];
      if ((v29 & 0x800000) != 0)
      {
        v34 = v32 + v33;
        v49 = *(_QWORD *)(a2 + 72) + 32 * v33;
        v50 = v34 - v33;
        v35 = *(_QWORD *)(a2 + 72);
      }
      else
      {
        v35 = 0;
        v34 = v32 + v33;
        v49 = 32 * v33;
        v50 = v34 - v33;
      }
      v36 = v31[8] + v34 - v34;
      v48[0] = v35 + 32 * v34;
      v48[1] = v36;
      v47 = *v30 != 0;
      mlir::getPrunedAttributeList((_BYTE *)a2, (uint64_t)&mlir::tensor::PadOp::getAttributeNames(void)::attrNames, 4, (uint64_t)v56);
      v37 = mlir::OpBuilder::create<mlir::tensor::PadOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,mlir::OperandRange,mlir::OperandRange,BOOL,llvm::SmallVector<mlir::NamedAttribute,3u>>(a3 + 1, v23, &v55, &v53, v52, v51, (uint64_t)&v49, (uint64_t)v48, (char *)&v47, (uint64_t)v56);
      v54 = v37;
      if ((int *)v56[0] != &v57)
        free(v56[0]);
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v38 = (mlir::Region *)(((v9
                             + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                             + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                             + 7) & 0xFFFFFFFFFFFFFFF8)
                           + 32 * *(unsigned int *)(a2 + 40));
      v40 = *((unsigned int *)v37 + 10);
      v39 = *((unsigned int *)v37 + 11);
      v56[0] = 0;
      v56[1] = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      mlir::Region::cloneInto(v38, (mlir::Region *)((((unint64_t)v37 + 16 * ((v39 >> 23) & 1) + ((v39 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * v40), (mlir::IRMapping *)v56);
      if (*(_DWORD *)(a2 + 36))
        v41 = a2 - 16;
      else
        v41 = 0;
      v52[0] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v41, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v42 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::RankedTensorType,mlir::tensor::EmptyOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), v52, &v54);
      (*((void (**)(mlir::MLIRContext **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v42);
      llvm::deallocate_buffer(v61, (void *)(16 * v63));
    }
    (*((void (**)(mlir::MLIRContext **, uint64_t))*a3 + 9))(a3, a2);
    v43 = *(uint64_t **)(a2 + 72);
    v44 = *(uint64_t **)(*(_QWORD *)(v6 + 72) + 24);
    v45 = (uint64_t *)v43[1];
    if (v45)
    {
      *v45 = *v43;
      if (*v43)
        *(_QWORD *)(*v43 + 8) = v43[1];
    }
    v43[3] = (uint64_t)v44;
    v43[1] = (uint64_t)v44;
    v46 = *v44;
    *v43 = *v44;
    if (v46)
      *(_QWORD *)(v46 + 8) = v43;
    *v44 = (uint64_t)v43;
    (*((void (**)(mlir::MLIRContext **, uint64_t))*a3 + 10))(a3, a2);
    return 1;
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::PadOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,mlir::OperandRange,mlir::OperandRange,BOOL,llvm::SmallVector<mlir::NamedAttribute,3u>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::GenericProgramPoint *v26;
  mlir::GenericProgramPoint *v27;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  __int16 v32;
  uint64_t v33[4];
  __int16 v34;
  unint64_t v35[2];
  unint64_t v36[2];
  _QWORD v37[40];

  v37[38] = *MEMORY[0x1E0C80C00];
  v30 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v30);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.pad", (const unsigned __int8 *)0xA, Context);
  if (!v20)
  {
    v34 = 1283;
    v33[2] = (uint64_t)"tensor.pad";
    v33[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v32 = 259;
    llvm::operator+(v33, (uint64_t *)&v31, (uint64_t)v37);
    llvm::report_fatal_error((llvm::Twine *)v37, 1);
  }
  mlir::OperationState::OperationState(v37, a2, v19);
  v29 = *a3;
  v21 = *a4;
  v23 = *a5;
  v22 = a5[1];
  v25 = *a6;
  v24 = a6[1];
  mlir::ValueRange::ValueRange(v36, *(_QWORD *)a7, *(_QWORD *)(a7 + 8));
  mlir::ValueRange::ValueRange(v35, *(_QWORD *)a8, *(_QWORD *)(a8 + 8));
  mlir::tensor::PadOp::build(a1, (uint64_t)v37, v29, v21, v23, v22, v25, v24, v36[0], v36[1], v35[0], v35[1], *a9, *(void **)a10, *(unsigned int *)(a10 + 8));
  v26 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v37);
  if (*(_UNKNOWN **)(*((_QWORD *)v26 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::PadOp,void>::id)
    v27 = v26;
  else
    v27 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v37);
  return v27;
}

void `anonymous namespace'::FoldTargetTensorCast::~FoldTargetTensorCast(_anonymous_namespace_::FoldTargetTensorCast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldTargetTensorCast::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  void *v5;
  uint64_t v6;
  _QWORD *NextResultAtOffset;
  uint64_t v8;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  mlir::GenericProgramPoint *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49[2];
  __int128 v50;
  uint64_t v51;
  uint64_t v52[7];

  v52[6] = *MEMORY[0x1E0C80C00];
  v5 = (void *)(a2 - 16);
  if (*(_DWORD *)(a2 + 36))
    v6 = a2 - 16;
  else
    v6 = 0;
  NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  if (!*NextResultAtOffset || *(_QWORD *)*NextResultAtOffset)
    return 0;
  v10 = (void *)*(unsigned int *)(a2 + 36);
  if ((_DWORD)v10)
    v11 = v5;
  else
    v11 = 0;
  v49[0] = v11;
  v49[1] = v10;
  mlir::ResultRange::use_begin((uint64_t *)v49, (uint64_t *)v45);
  v12 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v12)
    v13 = (uint64_t)v5;
  else
    v13 = 0;
  v47 = v13;
  v48 = v12;
  mlir::ResultRange::use_end(&v47, v52);
  v8 = 0;
  v51 = v46;
  *(_OWORD *)v49 = v45[0];
  v50 = v45[1];
  v14 = *(_QWORD *)(v46 + 16);
  if (v14
    && *(_UNKNOWN **)(*(_QWORD *)(v14 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
  {
    if (*(_DWORD *)(a2 + 36))
      v15 = (uint64_t)v5;
    else
      v15 = 0;
    v16 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_DWORD *)(v14 + 36))
      v17 = v14 - 16;
    else
      v17 = 0;
    v18 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0);
    if (!mlir::tensor::preservesStaticInformation(v16, *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8))
      return 0;
    v19 = *(_QWORD *)(a2 + 24);
    if (*(_DWORD *)(v14 + 36))
      v20 = v14 - 16;
    else
      v20 = 0;
    v21 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(unsigned __int8 *)(a2 + 47);
    v23 = a2 + 64;
    v43 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v44 = v21;
    if (v22)
      v24 = a2 + 80;
    else
      v24 = 0;
    v49[0] = *(void **)(v24 + 16);
    *(_QWORD *)&v45[0] = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v49);
    *((_QWORD *)&v45[0] + 1) = v25;
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v26 = v23 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
    else
      v26 = 0;
    v49[0] = *(void **)(v26 + 8);
    v47 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v49);
    v48 = v27;
    v28 = *(unsigned int *)(a2 + 44);
    v29 = (_QWORD *)(v23 + 16 * ((v28 >> 23) & 1));
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v30 = (unsigned int *)(v23 + 16 * ((v28 >> 23) & 1));
    else
      v30 = 0;
    v32 = v30[6];
    v31 = v30[7];
    if ((v28 & 0x800000) != 0)
    {
      v33 = v31 + v32;
      v41 = *(_QWORD *)(a2 + 72) + 32 * v32;
      v42 = v33 - v32;
      v34 = *(_QWORD *)(a2 + 72);
    }
    else
    {
      v34 = 0;
      v33 = v31 + v32;
      v41 = 32 * v32;
      v42 = v33 - v32;
    }
    v35 = v30[8] + v33 - v33;
    v40[0] = v34 + 32 * v33;
    v40[1] = v35;
    v39 = *v29 != 0;
    mlir::getPrunedAttributeList((_BYTE *)a2, (uint64_t)&mlir::tensor::PadOp::getAttributeNames(void)::attrNames, 4, (uint64_t)v49);
    v36 = mlir::OpBuilder::create<mlir::tensor::PadOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,mlir::OperandRange,mlir::OperandRange,BOOL,llvm::SmallVector<mlir::NamedAttribute,3u>>(a3 + 1, v19, (uint64_t *)&v44, &v43, (uint64_t *)v45, &v47, (uint64_t)&v41, (uint64_t)v40, (char *)&v39, (uint64_t)v49);
    if (v49[0] != &v50)
      free(v49[0]);
    mlir::Region::takeBody((mlir::Region *)((((unint64_t)v36+ 16 * (((unint64_t)*((unsigned int *)v36 + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)v36 + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v36 + 10)), (mlir::Region *)(((v23+ 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40)));
    if (*((_DWORD *)v36 + 9))
      v37 = (uint64_t)v36 - 16;
    else
      v37 = 0;
    v49[0] = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0);
    v8 = 1;
    (*((void (**)(mlir::MLIRContext **, uint64_t, void **, uint64_t))*a3 + 3))(a3, a2, v49, 1);
    if (*((_DWORD *)v36 + 9))
      v38 = (uint64_t)v36 - 16;
    else
      v38 = 0;
    v49[0] = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v38, 0);
    (*((void (**)(mlir::MLIRContext **, uint64_t, void **, uint64_t))*a3 + 3))(a3, v14, v49, 1);
  }
  return v8;
}

void `anonymous namespace'::FoldOrthogonalPaddings::~FoldOrthogonalPaddings(_anonymous_namespace_::FoldOrthogonalPaddings *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldOrthogonalPaddings::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DefiningOp;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t ConstantIntValue;
  char v25;
  BOOL v26;
  int v27;
  BOOL v28;
  _BYTE *v29;
  uint64_t ConstantPaddingValue;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  BOOL v41;
  unint64_t v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t j;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  mlir::GenericProgramPoint *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  mlir::GenericProgramPoint *v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  mlir::IndexType **v64;
  BOOL v65;
  uint64_t NextResultAtOffset;
  unint64_t v67;
  void **v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  void *v76[2];
  uint64_t v77;
  void *v78[2];
  _BYTE v79[48];
  _BYTE *v80;
  unsigned int v81;
  _BYTE v82[48];
  char **v83;
  uint64_t v84;
  _BYTE v85[48];
  char *v86;
  unsigned int v87;
  _BYTE v88[16];
  __int16 v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v75 = (_BYTE *)a2;
  v86 = *(char **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v86);
  if (!DefiningOp)
    return 0;
  v5 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v6 = v5 == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id;
  v7 = v5 == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id ? DefiningOp : 0;
  v74 = v7;
  if (!v6)
    return 0;
  v86 = *(char **)(*(_QWORD *)(DefiningOp + 72) + 24);
  v10 = mlir::Value::getDefiningOp((mlir::Value *)&v86);
  if (!v10)
    return 0;
  v11 = *(void **)(*(_QWORD *)(v10 + 48) + 16);
  v12 = v11 == &mlir::detail::TypeIDResolver<mlir::tensor::PadOp,void>::id;
  v13 = v11 == &mlir::detail::TypeIDResolver<mlir::tensor::PadOp,void>::id ? v10 : 0;
  v73 = v13;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v10 + 16 * (((unint64_t)*(unsigned int *)(v10 + 44) >> 23) & 1) + 64))
    return 0;
  v86 = *(char **)(*(_QWORD *)(v10 + 72) + 24);
  v14 = mlir::Value::getDefiningOp((mlir::Value *)&v86);
  if (!v14)
    return 0;
  v15 = *(void **)(*(_QWORD *)(v14 + 48) + 16);
  v16 = v15 == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id;
  v17 = v15 == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id ? v14 : 0;
  v72 = v17;
  if (!v16)
    return 0;
  v86 = (char *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v75 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
  v19 = v18;
  v86 = (char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
  if (v20 != v19)
  {
    v86 = "cannot fold rank-reducing chain";
    v89 = 259;
    v29 = v75;
    v83 = &v86;
    v8 = *(_QWORD *)(a3 + 16);
    if (!v8)
      return v8;
LABEL_52:
    if (mlir::RewriterBase::Listener::classof(v8))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), char ***))(*(_QWORD *)v8 + 64))(v8, *((_QWORD *)v29 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(mlir::tensor::PadOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v83);
    return 0;
  }
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v74, (uint64_t)&v86);
  v21 = (uint64_t *)v86;
  if (v87)
  {
    v22 = 8 * v87 - 8;
    do
    {
      v23 = *v21++;
      ConstantIntValue = mlir::getConstantIntValue(v23);
      if (v25)
        v26 = ConstantIntValue == 1;
      else
        v26 = 0;
      v27 = v26;
      v28 = v27 != 1 || v22 == 0;
      v22 -= 8;
    }
    while (!v28);
    v21 = (uint64_t *)v86;
  }
  else
  {
    v27 = 1;
  }
  if (v21 != (uint64_t *)v88)
    free(v21);
  if (!v27
    || (mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::ExtractSliceOp>::hasUnitStride((mlir::memref::ReinterpretCastOp *)&v72) & 1) == 0)
  {
    v86 = "cannot fold non-unit stride ExtractSliceOps";
    v89 = 259;
    v29 = v75;
    v83 = &v86;
    v8 = *(_QWORD *)(a3 + 16);
    if (!v8)
      return v8;
    goto LABEL_52;
  }
  if (!mlir::tensor::PadOp::hasZeroLowPad((mlir::tensor::PadOp *)&v75)
    || (mlir::tensor::PadOp::hasZeroLowPad((mlir::tensor::PadOp *)&v73) & 1) == 0)
  {
    v33 = "cannot fold PadOps with low padding";
    return mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(a3, (uint64_t *)&v75, v33);
  }
  v70 = 0;
  v71 = 0;
  ConstantPaddingValue = mlir::tensor::PadOp::getConstantPaddingValue((mlir::tensor::PadOp *)&v75);
  v31 = mlir::tensor::PadOp::getConstantPaddingValue((mlir::tensor::PadOp *)&v73);
  if (!ConstantPaddingValue
    || (v32 = v31) == 0
    || (v86 = (char *)&v71,
        !mlir::matchPattern<mlir::detail::constant_op_binder<mlir::Attribute>>(ConstantPaddingValue, (unint64_t **)&v86))|| (v83 = (char **)&v70, !mlir::matchPattern<mlir::detail::constant_op_binder<mlir::Attribute>>(v32, (unint64_t **)&v83))|| v71 != v70)
  {
    v33 = "cannot fold PadOps with different padding values";
    return mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(a3, (uint64_t *)&v75, v33);
  }
  mlir::tensor::PadOp::getPaddedDims((mlir::tensor::PadOp *)&v75, (unint64_t *)&v69);
  mlir::tensor::PadOp::getPaddedDims((mlir::tensor::PadOp *)&v73, (unint64_t *)&v68);
  if (llvm::SmallBitVector::anyCommon((llvm::SmallBitVector *)&v69, (const llvm::SmallBitVector *)&v68))
  {
    v8 = mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(a3, (uint64_t *)&v75, "cannot fold PadOps with common padding dimensions");
  }
  else
  {
    v64 = (mlir::IndexType **)(a3 + 8);
    v83 = (char **)(mlir::Builder::getIndexAttr((mlir::IndexType **)(a3 + 8), 0) & 0xFFFFFFFFFFFFFFFBLL);
    llvm::SmallVector<mlir::OpFoldResult,6u>::SmallVector(&v86, v19, (unint64_t *)&v83);
    if (v87)
    {
      v34 = 0;
      v35 = (unint64_t *)v86;
      for (i = 8 * v87; i; i -= 8)
      {
        mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v74, (uint64_t)&v83);
        v37 = (uint64_t)v83[v34];
        if (v83 != (char **)v85)
          free(v83);
        mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v72, (uint64_t)&v83);
        v38 = (uint64_t)v83[v34];
        if (v83 != (char **)v85)
          free(v83);
        if (!llvm::SmallBitVector::test((llvm::SmallBitVector *)&v69, v34)
          && ((v39 = mlir::getConstantIntValue(v37), v40) ? (v41 = v39 == 0) : (v41 = 0), v41))
        {
          v37 = v38;
        }
        else if (llvm::SmallBitVector::test((llvm::SmallBitVector *)&v68, v34)
               || ((v42 = mlir::getConstantIntValue(v38), v43) ? (v44 = v42 == 0) : (v44 = 0), !v44))
        {
          v8 = mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(a3, (uint64_t *)&v75, "cannot find zero-offset and zero-padding pair");
          goto LABEL_123;
        }
        v35[v34++] = v37;
      }
    }
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v74, (uint64_t)&v80);
    v83 = (char **)v85;
    v84 = 0x600000000;
    if (v81)
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v83, (uint64_t)&v80);
    if (v80 != v82)
      free(v80);
    if ((_DWORD)v84)
    {
      v45 = 0;
      v46 = (unint64_t *)v83;
      for (j = 8 * v84; j; j -= 8)
      {
        if (llvm::SmallBitVector::test((llvm::SmallBitVector *)&v68, v45))
        {
          mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v74, (uint64_t)&v80);
          v48 = *(_QWORD *)&v80[8 * v45];
          if (v80 != v82)
            free(v80);
          v80 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v74 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
          v49 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80) + 8 * v45);
          v50 = mlir::getConstantIntValue(v48);
          if (v51)
            v52 = v50 == v49;
          else
            v52 = 0;
          if (!v52)
          {
            v8 = mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(a3, (uint64_t *)&v75, "cannot fold since the inner ExtractSliceOp size does not match the size of the outer padding");
            goto LABEL_121;
          }
          mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v72, (uint64_t)&v80);
          v46[v45] = *(_QWORD *)&v80[8 * v45];
          if (v80 != v82)
            free(v80);
        }
        ++v45;
      }
    }
    v78[0] = (void *)(mlir::Builder::getIndexAttr(v64, 0) & 0xFFFFFFFFFFFFFFFBLL);
    llvm::SmallVector<mlir::OpFoldResult,6u>::SmallVector(&v80, v19, (unint64_t *)v78);
    if (v81)
    {
      v53 = 0;
      v54 = 8 * v81;
      do
      {
        if (llvm::SmallBitVector::test((llvm::SmallBitVector *)&v69, v53))
        {
          mlir::tensor::PadOp::getMixedHighPad((mlir::tensor::PadOp *)&v75, (uint64_t)v78);
          *(_QWORD *)&v80[8 * v53] = *((_QWORD *)v78[0] + v53);
          if (v78[0] != v79)
            free(v78[0]);
        }
        if (llvm::SmallBitVector::test((llvm::SmallBitVector *)&v68, v53))
        {
          mlir::tensor::PadOp::getMixedHighPad((mlir::tensor::PadOp *)&v73, (uint64_t)v78);
          *(_QWORD *)&v80[8 * v53] = *((_QWORD *)v78[0] + v53);
          if (v78[0] != v79)
            free(v78[0]);
        }
        ++v53;
        v54 -= 8;
      }
      while (v54);
    }
    v55 = *((_QWORD *)v75 + 3);
    v76[0] = *(void **)(*(_QWORD *)(v72 + 72) + 24);
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v74, (uint64_t)v78);
    v56 = mlir::OpBuilder::create<mlir::tensor::ExtractSliceOp,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,4u>>(v64, v55, (uint64_t *)v76, (uint64_t)&v86, (uint64_t)&v83, (uint64_t)v78);
    if (v78[0] != v79)
      free(v78[0]);
    v57 = *((_QWORD *)v75 + 3);
    if (*((_DWORD *)v75 + 9))
      v58 = v75 - 16;
    else
      v58 = 0;
    v67 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v58, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*((_DWORD *)v56 + 9))
      v59 = (uint64_t)v56 - 16;
    else
      v59 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v59, 0);
    mlir::tensor::PadOp::getMixedLowPad((mlir::tensor::PadOp *)&v75, (uint64_t)v78);
    v65 = *(_QWORD *)&v75[16 * (((unint64_t)*((unsigned int *)v75 + 11) >> 23) & 1) + 64] != 0;
    mlir::getPrunedAttributeList(v75, (uint64_t)&mlir::tensor::PadOp::getAttributeNames(void)::attrNames, 4, (uint64_t)v76);
    v60 = mlir::OpBuilder::create<mlir::tensor::PadOp,mlir::RankedTensorType,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u>,llvm::SmallVector<mlir::OpFoldResult,6u>&,BOOL,llvm::SmallVector<mlir::NamedAttribute,3u>>(v64, v57, (uint64_t *)&v67, &NextResultAtOffset, (uint64_t)v78, (uint64_t)&v80, (char *)&v65, (uint64_t)v76);
    if (v76[0] != &v77)
      free(v76[0]);
    if (v78[0] != v79)
      free(v78[0]);
    v61 = (((unint64_t)v60
          + 16 * (((unint64_t)*((unsigned int *)v60 + 11) >> 23) & 1)
          + (((unint64_t)*((unsigned int *)v60 + 11) >> 21) & 0x7F8)
          + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v60 + 10);
    (**(void (***)(uint64_t, unint64_t, unint64_t, _QWORD))a3)(a3, ((unint64_t)&v75[16 * (((unint64_t)*((unsigned int *)v75 + 11) >> 23) & 1)+ 71+ (((unint64_t)*((unsigned int *)v75 + 11) >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v75 + 10), v61, *(_QWORD *)(v61 + 8));
    v62 = v75;
    if (*((_DWORD *)v60 + 9))
      v63 = (uint64_t)v60 - 16;
    else
      v63 = 0;
    v78[0] = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v63, 0);
    (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)a3 + 24))(a3, v62, v78, 1);
    if (v80 != v82)
      free(v80);
    v8 = 1;
LABEL_121:
    if (v83 != (char **)v85)
      free(v83);
LABEL_123:
    if (v86 != v88)
      free(v86);
  }
  llvm::SmallBitVector::~SmallBitVector(&v68);
  llvm::SmallBitVector::~SmallBitVector(&v69);
  return v8;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  _QWORD *v10;

  v3 = 1;
  v9 = 1;
  if (*a3)
  {
    v7 = a3;
    v3 = 3;
  }
  v8 = v3;
  v4 = *a2;
  v10 = &v7;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(mlir::tensor::PadOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  return result;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::ExtractSliceOp>::hasUnitStride(mlir::memref::ReinterpretCastOp *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t ConstantIntValue;
  char v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  void *v10;
  unsigned int v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(a1, (uint64_t)&v10);
  v1 = (uint64_t *)v10;
  if (!v11)
  {
    v7 = 1;
    if (v10 == v12)
      return v7;
    goto LABEL_15;
  }
  v2 = 8 * v11 - 8;
  do
  {
    v3 = *v1++;
    ConstantIntValue = mlir::getConstantIntValue(v3);
    if (v5)
      v6 = ConstantIntValue == 1;
    else
      v6 = 0;
    v7 = v6;
    v8 = (_DWORD)v7 != 1 || v2 == 0;
    v2 -= 8;
  }
  while (!v8);
  v1 = (uint64_t *)v10;
  if (v10 != v12)
LABEL_15:
    free(v1);
  return v7;
}

uint64_t mlir::matchPattern<mlir::detail::constant_op_binder<mlir::Attribute>>(uint64_t a1, unint64_t **a2)
{
  BOOL v2;
  uint64_t DefiningOp;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v9;
  void *v10[2];
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  v5 = DefiningOp;
  if (DefiningOp)
  {
    if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    {
      v10[0] = v11;
      v10[1] = (void *)0x100000000;
      mlir::Operation::fold(v5, 0, 0, (uint64_t)v10);
      v6 = v10[0];
      v7 = *(_QWORD *)v10[0] & 0xFFFFFFFFFFFFFFF8;
      v2 = v7 != 0;
      if (v7 && *a2)
      {
        **a2 = v7;
        v6 = v10[0];
      }
      if (v6 != v11)
        free(v6);
    }
    else
    {
      v2 = 0;
    }
  }
  return (v5 != 0) & v2;
}

BOOL llvm::SmallBitVector::anyCommon(llvm::SmallBitVector *this, const llvm::SmallBitVector *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)a2;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v15 = v2 >> 58;
    if ((v3 & 1) != 0)
      return (~((-1 << v15) | (-1 << (v3 >> 58))) & ((v2 & v3) >> 1)) != 0;
  }
  else
  {
    if ((v3 & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 8);
      LODWORD(v5) = *(_DWORD *)(v3 + 8);
      if (v5 >= v4)
        v5 = v4;
      else
        v5 = v5;
      if ((_DWORD)v5)
      {
        v6 = *(uint64_t **)v2;
        v7 = *(uint64_t **)v3;
        v8 = v5 - 1;
        do
        {
          v10 = *v6++;
          v9 = v10;
          v11 = *v7++;
          v12 = v11 & v9;
          result = v12 != 0;
          if (v12)
            v14 = 1;
          else
            v14 = v8 == 0;
          --v8;
        }
        while (!v14);
        return result;
      }
      return 0;
    }
    v15 = *(unsigned int *)(v2 + 64);
  }
  if ((v3 & 1) != 0)
  {
    if (v3 >> 58 < v15)
      v15 = v3 >> 58;
    if (!(_DWORD)v15)
      return 0;
  }
  else
  {
    if (*(unsigned int *)(v3 + 64) < v15)
      v15 = *(unsigned int *)(v3 + 64);
    if (!(_DWORD)v15)
      return 0;
  }
  v16 = (v3 >> 1) & ~(-1 << (v3 >> 58));
  if ((v2 & 1) != 0)
  {
    v20 = (v2 >> 1) & ~(-1 << (v2 >> 58));
    if ((v3 & 1) != 0)
    {
      v23 = 0;
      do
      {
        result = (v16 & (1 << v23)) != 0 && (v20 & (1 << v23)) != 0;
        if (result)
          break;
        v14 = v15 - 1 == v23++;
      }
      while (!v14);
    }
    else
    {
      v21 = 0;
      while (((v20 >> v21) & 1) == 0 || ((*(_QWORD *)(*(_QWORD *)v3 + 8 * (v21 >> 6)) >> v21) & 1) == 0)
      {
        if (v15 == ++v21)
          return 0;
      }
      return 1;
    }
  }
  else
  {
    v17 = *(uint64_t **)v2;
    if ((v3 & 1) != 0)
    {
      v22 = 0;
      while ((((unint64_t)v17[v22 >> 6] >> v22) & 1) == 0 || ((v16 >> v22) & 1) == 0)
      {
        if (v15 == ++v22)
          return 0;
      }
      return 1;
    }
    else
    {
      v18 = 0;
      while (1)
      {
        v19 = v18 >> 6;
        if ((v17[v19] & (1 << v18)) != 0 && (*(_QWORD *)(*(_QWORD *)v3 + 8 * v19) & (1 << v18)) != 0)
          break;
        if ((_DWORD)v15 == ++v18)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExtractSliceOp,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,4u>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract_slice", (const unsigned __int8 *)0x14, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"tensor.extract_slice";
    v21[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::tensor::ExtractSliceOp::build(a1, (uint64_t)v23, 0, *a3, *(uint64_t **)a4, *(unsigned int *)(a4 + 8), *(uint64_t **)a5, *(unsigned int *)(a5 + 8), *(uint64_t **)a6, *(unsigned int *)(a6 + 8), 0, 0);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::PadOp,mlir::RankedTensorType,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u>,llvm::SmallVector<mlir::OpFoldResult,6u>&,BOOL,llvm::SmallVector<mlir::NamedAttribute,3u>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t *Context;
  uint64_t v17;
  char v18;
  mlir::GenericProgramPoint *v19;
  mlir::GenericProgramPoint *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  _QWORD v27[39];

  v27[38] = *MEMORY[0x1E0C80C00];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.pad", (const unsigned __int8 *)0xA, Context);
  if (!v18)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"tensor.pad";
    v25[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v17);
  mlir::tensor::PadOp::build(a1, (uint64_t)v27, *a3, *a4, *(uint64_t **)a5, *(unsigned int *)(a5 + 8), *(uint64_t **)a6, *(unsigned int *)(a6 + 8), *a7, *(void **)a8, *(unsigned int *)(a8 + 8));
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::PadOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v20;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::tensor::PadOp &>(mlir::tensor::PadOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void `anonymous namespace'::FoldStaticPadding::~FoldStaticPadding(_anonymous_namespace_::FoldStaticPadding *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FoldStaticPadding::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  _QWORD *Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t DefiningOp;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  size_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  size_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  void **v65;
  int v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  void **v70;
  _QWORD *v71;
  uint64_t i;
  uint64_t v73;
  void *v74;
  unsigned int v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  size_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  void **v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  BOOL v90;
  void *v91;
  void **v92;
  void **v93;
  uint64_t v94;
  uint64_t RHS;
  mlir::MLIRContext **v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  mlir::GenericProgramPoint *v105;
  mlir::Region *v106;
  unint64_t v107;
  uint64_t v108;
  mlir::GenericProgramPoint *v109;
  mlir::MLIRContext **v110;
  unint64_t *__src;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  _QWORD v116[2];
  _QWORD v117[2];
  mlir::GenericProgramPoint *v118;
  uint64_t v119;
  uint64_t v120[2];
  uint64_t v121[2];
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *__s1;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  void **v134;
  uint64_t v135;
  _BYTE v136[48];
  void **v137;
  uint64_t v138;
  _BYTE v139[48];
  void *v140;
  uint64_t v141;
  _BYTE v142[48];
  void *v143;
  uint64_t v144;
  _BYTE v145[48];
  _QWORD *v146;
  uint64_t v147;
  _QWORD v148[8];

  v148[6] = *MEMORY[0x1E0C80C00];
  v123 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v124 = a2;
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(v123 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    return 0;
  __s1 = (void *)(*(_QWORD *)(v123 + 8) & 0xFFFFFFFFFFFFFFF8);
  Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__s1);
  v114 = v7;
  v8 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
  v122 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v122)
    return 0;
  v110 = a3;
  __src = (unint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v122);
  v112 = v9;
  v146 = v148;
  v147 = 0x600000000;
  v10 = *(unsigned int *)(a2 + 44);
  v11 = a2 + 64;
  v12 = (v10 >> 23) & 1;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v13 = a2 + 64 + 16 * v12;
  else
    v13 = 0;
  v14 = *(_DWORD *)(v13 + 28);
  if ((v10 & 0x800000) != 0)
  {
    v15 = *(_QWORD *)(a2 + 72);
    v16 = "cutableConstantDataRequest initWithCoder:]";
    v113 = a2 + 64;
    if (v14)
    {
LABEL_12:
      v17 = *(unsigned int *)(v13 + 24);
      v18 = (v14 + v17) - v17;
      v19 = (void **)(v15 + 32 * v17 + 24);
      while (1)
      {
        v20 = *v19;
        LODWORD(v144) = 1;
        v143 = 0;
        BYTE4(v144) = 0;
        v137 = &v143;
        v140 = v20;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v140);
        if (!DefiningOp)
          goto LABEL_37;
        v22 = DefiningOp;
        if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
          goto LABEL_37;
        __s1 = &v127;
        v126 = 0x100000000;
        mlir::Operation::fold(v22, 0, 0, (uint64_t)&__s1);
        v23 = *(_QWORD *)__s1;
        if (__s1 != &v127)
          free(__s1);
        if ((v23 & 0xFFFFFFFFFFFFFFF8) != 0
          && ((v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(v22 - 8) & 0xFFFFFFFFFFFFFFF8) + 136),
               v24 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
            ? (v25 = v24 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
            : (v25 = 1),
              !v25 ? (v26 = v24 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v26 = 1),
              !v26 ? (v27 = v24 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (v27 = 1),
              v27
           && (mlir::detail::constant_int_value_binder::match((uint64_t *)&v137, v23 & 0xFFFFFFFFFFFFFFF8) & 1) != 0))
        {
          if (BYTE4(v144))
          {
            if (v144 >= 0x41)
              v28 = (uint64_t *)v143;
            else
              v28 = (uint64_t *)&v143;
            v29 = *v28;
            v30 = v147;
            if (v147 < (unint64_t)HIDWORD(v147))
              goto LABEL_38;
LABEL_36:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, v148, v30 + 1, 8);
            v30 = v147;
            goto LABEL_38;
          }
          if (v144 > 0x40)
          {
            v29 = *(_QWORD *)v143;
            v30 = v147;
            if (v147 >= (unint64_t)HIDWORD(v147))
              goto LABEL_36;
          }
          else
          {
            v29 = (uint64_t)((_QWORD)v143 << -(char)v144) >> -(char)v144;
            v30 = v147;
            if (v147 >= (unint64_t)HIDWORD(v147))
              goto LABEL_36;
          }
        }
        else
        {
LABEL_37:
          v30 = v147;
          v29 = 0x8000000000000000;
          if (v147 >= (unint64_t)HIDWORD(v147))
            goto LABEL_36;
        }
LABEL_38:
        v146[v30] = v29;
        LODWORD(v147) = v147 + 1;
        if (v144 >= 0x41 && v143)
          operator delete[](v143);
        v19 += 4;
        if (!--v18)
        {
          v10 = *(unsigned int *)(a2 + 44);
          v12 = (v10 >> 23) & 1;
          v31 = v10 & 0x800000;
          v11 = v113;
          v16 = "-[MPSGraphExecutableConstantDataRequest initWithCoder:]" + 13;
          goto LABEL_49;
        }
      }
    }
  }
  else
  {
    v15 = 0;
    v16 = "cutableConstantDataRequest initWithCoder:]";
    v113 = a2 + 64;
    if (v14)
      goto LABEL_12;
  }
  v31 = v10 & 0x800000;
LABEL_49:
  v143 = v145;
  v144 = 0x600000000;
  if (BYTE3(v10))
    v32 = (_DWORD *)(v11 + 16 * v12);
  else
    v32 = 0;
  v33 = v32[8];
  if (v31)
  {
    v34 = *(_QWORD *)(a2 + 72);
    if (!v33)
      goto LABEL_89;
    goto LABEL_54;
  }
  v34 = 0;
  if (v33)
  {
LABEL_54:
    v35 = (v32[7] + v32[6]);
    v36 = (v33 + v35) - v35;
    v37 = (void **)(v34 + 32 * v35 + 24);
    v38 = *((_QWORD *)v16 + 427);
    while (1)
    {
      v39 = (void **)*v37;
      LODWORD(v141) = 1;
      v140 = 0;
      BYTE4(v141) = 0;
      v134 = &v140;
      v137 = v39;
      v40 = mlir::Value::getDefiningOp((mlir::Value *)&v137);
      if (!v40)
        goto LABEL_79;
      v41 = v40;
      if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v40 + 48)))
        goto LABEL_79;
      __s1 = &v127;
      v126 = v38;
      mlir::Operation::fold(v41, 0, 0, (uint64_t)&__s1);
      v42 = *(_QWORD *)__s1;
      if (__s1 != &v127)
        free(__s1);
      if ((v42 & 0xFFFFFFFFFFFFFFF8) != 0
        && ((v43 = *(void **)(*(_QWORD *)(*(_QWORD *)(v41 - 8) & 0xFFFFFFFFFFFFFFF8) + 136),
             v43 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
          ? (v44 = v43 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
          : (v44 = 1),
            !v44 ? (v45 = v43 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v45 = 1),
            !v45 ? (v46 = v43 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (v46 = 1),
            v46
         && (mlir::detail::constant_int_value_binder::match((uint64_t *)&v134, v42 & 0xFFFFFFFFFFFFFFF8) & 1) != 0))
      {
        if (BYTE4(v141))
        {
          if (v141 >= 0x41)
            v47 = (uint64_t *)v140;
          else
            v47 = (uint64_t *)&v140;
          v48 = *v47;
          v49 = v144;
          if (v144 < (unint64_t)HIDWORD(v144))
            goto LABEL_80;
LABEL_78:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, v145, v49 + 1, 8);
          v49 = v144;
          goto LABEL_80;
        }
        if (v141 > 0x40)
        {
          v48 = *(_QWORD *)v140;
          v49 = v144;
          if (v144 >= (unint64_t)HIDWORD(v144))
            goto LABEL_78;
        }
        else
        {
          v48 = (uint64_t)((_QWORD)v140 << -(char)v141) >> -(char)v141;
          v49 = v144;
          if (v144 >= (unint64_t)HIDWORD(v144))
            goto LABEL_78;
        }
      }
      else
      {
LABEL_79:
        v49 = v144;
        v48 = 0x8000000000000000;
        if (v144 >= (unint64_t)HIDWORD(v144))
          goto LABEL_78;
      }
LABEL_80:
      *((_QWORD *)v143 + v49) = v48;
      LODWORD(v144) = v144 + 1;
      if (v141 >= 0x41 && v140)
        operator delete[](v140);
      v37 += 4;
      if (!--v36)
      {
        v10 = *(unsigned int *)(a2 + 44);
        v12 = (v10 >> 23) & 1;
        v11 = v113;
        break;
      }
    }
  }
LABEL_89:
  v50 = v11 + 16 * v12;
  if (!BYTE3(v10))
    v50 = 0;
  __s1 = *(void **)(v50 + 16);
  v52 = (const void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&__s1);
  v53 = v51;
  v140 = v142;
  v141 = 0x600000000;
  v54 = 8 * v51;
  if ((unint64_t)(8 * v51) < 0x31)
  {
    v55 = 0;
    if (!v51)
      goto LABEL_96;
    goto LABEL_95;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v142, (8 * v51) >> 3, 8);
  v55 = v141;
  if (v53)
  {
LABEL_95:
    memcpy((char *)v140 + 8 * v55, v52, v54);
    v55 = v141;
  }
LABEL_96:
  LODWORD(v141) = v55 + (v54 >> 3);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v56 = v11 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v56 = 0;
  __s1 = *(void **)(v56 + 8);
  v58 = (const void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&__s1);
  v59 = v57;
  v137 = (void **)v139;
  v138 = 0x600000000;
  v60 = 8 * v57;
  if ((unint64_t)(8 * v57) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, v139, (8 * v57) >> 3, 8);
    v61 = v138;
    if (!v59)
      goto LABEL_104;
    goto LABEL_103;
  }
  v61 = 0;
  if (v57)
  {
LABEL_103:
    memcpy(&v137[v61], v58, v60);
    v61 = v138;
  }
LABEL_104:
  v62 = v61 + (v60 >> 3);
  LODWORD(v138) = v62;
  v63 = v114;
  if (v114 != v112 || v114 != v141 || v114 != v62)
    goto LABEL_145;
  v64 = v140;
  v65 = v137;
  if (v114)
  {
    v66 = 0;
    v67 = 0;
    v68 = v146;
    v69 = v143;
    v70 = v137;
    v71 = v140;
    for (i = v114; i; --i)
    {
      if (*v71 == 0x8000000000000000)
      {
        v73 = v68[v66++];
        *v71 = v73;
        if (*v70 == (void *)0x8000000000000000)
          goto LABEL_114;
      }
      else if (*v70 == (void *)0x8000000000000000)
      {
LABEL_114:
        v74 = (void *)v69[v67++];
        *v70 = v74;
      }
      ++v71;
      ++v70;
    }
  }
  v121[0] = (uint64_t)v64;
  v121[1] = v114;
  v120[0] = (uint64_t)v65;
  v120[1] = v114;
  v134 = (void **)v136;
  v135 = 0x600000000;
  if (v114)
  {
    v75 = 0;
    v76 = __src;
    v77 = v114;
    do
    {
      v79 = *v76++;
      v78 = v79;
      if (v79 == 0x8000000000000000)
      {
        v78 = 0x8000000000000000;
        if (*v64 != 0x8000000000000000 && *v65 != (void *)0x8000000000000000)
        {
          if (*Value == 0x8000000000000000)
            v78 = 0x8000000000000000;
          else
            v78 = (unint64_t)*v65 + *v64 + *Value;
        }
      }
      if (v75 >= HIDWORD(v135))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v136, v75 + 1, 8);
        v63 = v114;
        v75 = v135;
      }
      v134[v75] = (void *)v78;
      v75 = v135 + 1;
      LODWORD(v135) = v135 + 1;
      ++v64;
      ++v65;
      ++Value;
      --v77;
    }
    while (v77);
  }
  __s1 = &v127;
  v126 = 0x600000000;
  v80 = 8 * v63;
  if ((unint64_t)(8 * v63) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, &v127, (8 * v63) >> 3, 8);
    v81 = v113;
    v82 = v126;
    if (!v114)
      goto LABEL_131;
    goto LABEL_130;
  }
  v82 = 0;
  v81 = v113;
  if (v63)
  {
LABEL_130:
    memcpy((char *)__s1 + 8 * v82, __src, v80);
    v82 = v126;
  }
LABEL_131:
  v83 = v82 + (v80 >> 3);
  LODWORD(v126) = v83;
  v84 = v135;
  v85 = v134;
  if (v83 != (_DWORD)v135 || (v86 = (int *)__s1, memcmp(__s1, v134, 8 * v83)))
  {
    if ((_DWORD)v84)
    {
      v87 = 8 * v84 - 8;
      do
      {
        v88 = (uint64_t)*v85++;
        v89 = v88 == 0x8000000000000000;
        v90 = v88 != 0x8000000000000000 || v87 == 0;
        v87 -= 8;
      }
      while (!v90);
      v91 = __s1;
      if (__s1 != &v127)
        goto LABEL_141;
    }
    else
    {
      v89 = 1;
      v91 = __s1;
      if (__s1 != &v127)
LABEL_141:
        free(v91);
    }
    if (!v89)
    {
      v93 = v134;
      v94 = v135;
      __s1 = (void *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&__s1);
      v119 = mlir::RankedTensorType::get((uint64_t)v93, v94, RHS, 0);
      v96 = v110 + 1;
      v97 = *(_QWORD *)(a2 + 24);
      v98 = *(unsigned int *)(a2 + 44);
      v99 = (_QWORD *)(v81 + 16 * ((v98 >> 23) & 1));
      if (HIBYTE(*(_DWORD *)(a2 + 44)))
        v100 = v81 + 16 * ((v98 >> 23) & 1);
      else
        v100 = 0;
      v101 = *(unsigned int *)(v100 + 24);
      v102 = *(_DWORD *)(v100 + 28);
      if ((v98 & 0x800000) != 0)
        v103 = *(_QWORD *)(a2 + 72);
      else
        v103 = 0;
      v117[0] = v103 + 32 * v101;
      v117[1] = (v102 + v101) - v101;
      v116[0] = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v124);
      v116[1] = v104;
      v115 = *v99 != 0;
      mlir::getPrunedAttributeList((_BYTE *)a2, (uint64_t)&mlir::tensor::PadOp::getAttributeNames(void)::attrNames, 4, (uint64_t)&__s1);
      v105 = mlir::OpBuilder::create<mlir::tensor::PadOp,mlir::RankedTensorType &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,mlir::OperandRange,mlir::OperandRange,BOOL,llvm::SmallVector<mlir::NamedAttribute,3u>>(v96, v97, &v119, &v123, v121, v120, (uint64_t)v117, (uint64_t)v116, (char *)&v115, (uint64_t)&__s1);
      v118 = v105;
      if (__s1 != &v127)
        free(__s1);
      v130 = 0;
      v131 = 0;
      v132 = 0;
      v133 = 0;
      v106 = (mlir::Region *)(((v81
                              + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                              + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                              + 7) & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *(unsigned int *)(a2 + 40));
      v108 = *((unsigned int *)v105 + 10);
      v107 = *((unsigned int *)v105 + 11);
      __s1 = 0;
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      mlir::Region::cloneInto(v106, (mlir::Region *)((((unint64_t)v105 + 16 * ((v107 >> 23) & 1) + ((v107 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * v108), (mlir::IRMapping *)&__s1);
      v109 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::RankedTensorType,mlir::tensor::EmptyOp &>((mlir::OpBuilder *)v96, *(_QWORD *)(a2 + 24), (uint64_t *)&v122, &v118);
      (*((void (**)(mlir::MLIRContext **, uint64_t, mlir::GenericProgramPoint *))*v110 + 4))(v110, a2, v109);
      mlir::IRMapping::~IRMapping((llvm **)&__s1);
    }
    goto LABEL_143;
  }
  if (v86 != &v127)
  {
    free(v86);
    v92 = v134;
    if (v134 == (void **)v136)
      goto LABEL_145;
    goto LABEL_144;
  }
LABEL_143:
  v92 = v134;
  if (v134 != (void **)v136)
LABEL_144:
    free(v92);
LABEL_145:
  if (v137 != (void **)v139)
    free(v137);
  if (v140 != v142)
    free(v140);
  if (v143 != v145)
    free(v143);
  if (v146 != v148)
    free(v146);
  return 0;
}

_QWORD *`anonymous namespace'::InsertSliceOpConstantArgumentFolder<mlir::tensor::ParallelInsertSliceOp>::~InsertSliceOpConstantArgumentFolder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::InsertSliceOpConstantArgumentFolder<mlir::tensor::ParallelInsertSliceOp>::~InsertSliceOpConstantArgumentFolder(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ParallelInsertSliceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ParallelInsertSliceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::ParallelInsertSliceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::InsertSliceOpConstantArgumentFolder<mlir::tensor::ParallelInsertSliceOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  _BYTE *v5;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _OWORD *v15;
  mlir::Block *ParentOp;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  uint64_t v22;
  void *v23;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[32];
  void *__dst;
  uint64_t v33;
  _BYTE v34[48];
  void *__src;
  uint64_t v36;
  _BYTE v37[48];
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[7];

  v40[6] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v28, (uint64_t)&__src);
  v38 = v40;
  v39 = 0x600000000;
  v4 = v36;
  v5 = __src;
  if ((_DWORD)v36)
  {
    if (__src == v37)
    {
      v6 = v36;
      if (v36 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v40, v36, 8),
            v6 = v36,
            v5 = __src,
            (_DWORD)v36))
      {
        memcpy(v38, v5, 8 * v6);
        v5 = __src;
      }
      LODWORD(v39) = v4;
    }
    else
    {
      v38 = __src;
      v39 = v36;
      __src = v37;
      HIDWORD(v36) = 0;
      v5 = v37;
    }
    LODWORD(v36) = 0;
  }
  if (v5 != v37)
    free(v5);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v28, (uint64_t)&__dst);
  __src = v37;
  v36 = 0x600000000;
  v7 = v33;
  v8 = __dst;
  if ((_DWORD)v33)
  {
    if (__dst == v34)
    {
      v9 = v33;
      if (v33 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v37, v33, 8),
            v9 = v33,
            v8 = __dst,
            (_DWORD)v33))
      {
        memcpy(__src, v8, 8 * v9);
        v8 = __dst;
      }
      LODWORD(v36) = v7;
    }
    else
    {
      __src = __dst;
      v36 = v33;
      __dst = v34;
      HIDWORD(v33) = 0;
      v8 = v34;
    }
    LODWORD(v33) = 0;
  }
  if (v8 != v34)
    free(v8);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v28, (uint64_t)&v29);
  __dst = v34;
  v33 = 0x600000000;
  v10 = v30;
  v11 = v29;
  if ((_DWORD)v30)
  {
    if (v29 == v31)
    {
      v12 = v30;
      if (v30 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v34, v30, 8),
            v12 = v30,
            v11 = v29,
            (_DWORD)v30))
      {
        memcpy(__dst, v11, 8 * v12);
        v11 = v29;
      }
      LODWORD(v33) = v10;
    }
    else
    {
      __dst = v29;
      v33 = v30;
      v29 = v31;
      HIDWORD(v30) = 0;
      v11 = v31;
    }
    LODWORD(v30) = 0;
  }
  if (v11 != v31)
    free(v11);
  if (mlir::foldDynamicIndexList((uint64_t)&v38, 1)
    || mlir::foldDynamicIndexList((uint64_t)&__src, 1)
    || mlir::foldDynamicIndexList((uint64_t)&__dst, 0))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v27);
    if (*(_BYTE *)(v28 + 47))
      v14 = v28 + 80;
    else
      v14 = 0;
    v29 = (void *)mlir::tensor::ExtractSliceOp::inferCanonicalRankReducedResultType(v13, (void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 72) + 32 * *(unsigned int *)(v14 + 24) + 24)+ 8) & 0xFFFFFFFFFFFFFFF8), v38, v39, (uint64_t *)__src, v36, (uint64_t *)__dst, v33);
    v27 = *(_QWORD *)(*(_QWORD *)(v28 + 72) + 24);
    if (v29 != (void *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v15 = (_OWORD *)(a3 + 24);
      v25 = *(_OWORD *)(a3 + 24);
      ParentOp = *(mlir::Block **)(v28 + 16);
      if (ParentOp)
        ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
      v17 = *((_QWORD *)ParentOp + 2);
      mlir::GenericProgramPoint::~GenericProgramPoint(ParentOp);
      *(_QWORD *)(a3 + 24) = v17;
      *(_QWORD *)(a3 + 32) = v18;
      v27 = (unint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(v28 + 24), (uint64_t *)&v29, (uint64_t *)&v27)- 16;
      if ((_QWORD)v25)
      {
        *v15 = v25;
      }
      else
      {
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(a3 + 32) = 0;
      }
    }
    v19 = v28;
    if (*(_BYTE *)(v28 + 47))
      v20 = v28 + 80;
    else
      v20 = 0;
    v26 = *(_QWORD *)(*(_QWORD *)(v28 + 72) + 32 * *(unsigned int *)(v20 + 24) + 24);
    v21 = mlir::OpBuilder::create<mlir::tensor::ParallelInsertSliceOp,mlir::Value &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>((mlir::MLIRContext **)(a3 + 8), *(_QWORD *)(v28 + 24), (uint64_t *)&v27, &v26, (uint64_t)&v38, (uint64_t)&__src, (uint64_t)&__dst);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v19, v21);
    v22 = 1;
    v23 = __dst;
    if (__dst != v34)
      goto LABEL_47;
  }
  else
  {
    v22 = 0;
    v23 = __dst;
    if (__dst != v34)
LABEL_47:
      free(v23);
  }
  if (__src != v37)
    free(__src);
  if (v38 != v40)
    free(v38);
  return v22;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ParallelInsertSliceOp,mlir::Value &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.parallel_insert_slice", (const unsigned __int8 *)0x1C, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"tensor.parallel_insert_slice";
    v23[3] = 28;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::tensor::ParallelInsertSliceOp::build(a1, (uint64_t)v25, *a3, *a4, *(uint64_t **)a5, *(unsigned int *)(a5 + 8), *(uint64_t **)a6, *(unsigned int *)(a6 + 8), *(uint64_t **)a7, *(unsigned int *)(a7 + 8), 0, 0);
  v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ParallelInsertSliceOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

_QWORD *`anonymous namespace'::InsertSliceOpCastFolder<mlir::tensor::ParallelInsertSliceOp>::~InsertSliceOpCastFolder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::InsertSliceOpCastFolder<mlir::tensor::ParallelInsertSliceOp>::~InsertSliceOpCastFolder(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::InsertSliceOpCastFolder<mlir::tensor::ParallelInsertSliceOp>::matchAndRewrite(uint64_t DefiningOp, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t v5;
  void **v6;
  void *v7;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t RHS;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  mlir::GenericProgramPoint *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42[2];
  void *v43[2];
  uint64_t v44;
  void *v45[2];
  uint64_t v46;
  void *v47[2];
  _QWORD v48[5];

  v48[4] = *MEMORY[0x1E0C80C00];
  v41 = a2;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v5)
    {
      v6 = (void **)(*(_QWORD *)(a2 + 72) + 24);
      do
      {
        v7 = *v6;
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)DefiningOp);
        v47[0] = v7;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v47);
        if (DefiningOp)
        {
          DefiningOp = mlir::arith::ConstantIndexOp::classof(DefiningOp, v8);
          if ((DefiningOp & 1) != 0)
            return 0;
        }
        v6 += 4;
      }
      while (--v5);
    }
  }
  v47[0] = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  v9 = mlir::Value::getDefiningOp((mlir::Value *)v47);
  if (v9
    && (v10 = v9,
        *(_UNKNOWN **)(*(_QWORD *)(v9 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    && mlir::tensor::preservesStaticInformation(*(_QWORD *)(v9 - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v11 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 24) & 0xFFFFFFFFFFFFFF00;
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 24);
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v11 = 1;
  }
  v14 = v12 | v13;
  if (*(_BYTE *)(a2 + 47))
    v15 = a2 + 80;
  else
    v15 = 0;
  v47[0] = *(void **)(*(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(v15 + 24) + 24);
  v16 = mlir::Value::getDefiningOp((mlir::Value *)v47);
  if (v16
    && (v17 = v16,
        *(_UNKNOWN **)(*(_QWORD *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    && (mlir::tensor::preservesStaticInformation(*(_QWORD *)(v16 - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 72) + 24);
    if (v11)
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v40 = v14;
  }
  else
  {
    if ((v11 & 1) != 0)
      return 0;
    v40 = v14;
    if (*(_BYTE *)(a2 + 47))
      v20 = a2 + 80;
    else
      v20 = 0;
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(v20 + 24) + 24);
  }
  result = 0;
  v39 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v21 = (_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8);
  else
    v21 = 0;
  v22 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v23 = (void *)v22;
  else
    v23 = 0;
  if (v21 && v23)
  {
    v24 = a2 + 64;
    v47[0] = *(void **)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v47);
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v25 = v24 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
    else
      v25 = 0;
    v47[0] = *(void **)(v25 + 8);
    v26 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v47);
    v28 = v27;
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v29 = v24 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
    else
      v29 = 0;
    v47[0] = *(void **)(v29 + 16);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v47);
    v47[0] = v23;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v47);
    v31 = (_QWORD *)mlir::RankedTensorType::get(v26, v28, RHS, 0);
    v32 = v31;
    if (v31)
      v33 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
    else
      v33 = 0;
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
    if (mlir::isRankReducedType(v32, v33, v21))
    {
      return 0;
    }
    else
    {
      v34 = *(_QWORD *)(a2 + 24);
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v41, (uint64_t)v47);
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v41, (uint64_t)v45);
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v41, (uint64_t)v43);
      v35 = mlir::OpBuilder::create<mlir::tensor::ParallelInsertSliceOp,mlir::Value &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>(a3 + 1, v34, &v40, &v39, (uint64_t)v47, (uint64_t)v45, (uint64_t)v43);
      if (v43[0] != &v44)
        free(v43[0]);
      if (v45[0] != &v46)
        free(v45[0]);
      if (v47[0] != v48)
        free(v47[0]);
      v36 = v41;
      v37 = *((unsigned int *)v35 + 9);
      if ((_DWORD)v37)
        v38 = (uint64_t)v35 - 16;
      else
        v38 = 0;
      mlir::ValueRange::ValueRange(v42, v38, v37);
      (*((void (**)(mlir::MLIRContext **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, v36, v42[0], v42[1]);
      return 1;
    }
  }
  return result;
}

_QWORD *`anonymous namespace'::InsertSliceOpSourceCastInserter<mlir::tensor::ParallelInsertSliceOp>::~InsertSliceOpSourceCastInserter(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::InsertSliceOpSourceCastInserter<mlir::tensor::ParallelInsertSliceOp>::~InsertSliceOpSourceCastInserter(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::InsertSliceOpSourceCastInserter<mlir::tensor::ParallelInsertSliceOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *Value;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  unint64_t ConstantIntValue;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t RHS;
  uint64_t v25;
  _OWORD *v26;
  mlir::Block *ParentOp;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  mlir::GenericProgramPoint *v33;
  void *v34;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  unint64_t v46[2];
  unint64_t v47[2];
  void *v48[2];
  _BYTE v49[32];
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[7];

  v52[6] = *MEMORY[0x1E0C80C00];
  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v41 = a2;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  v6 = v5;
  if (*(_BYTE *)(a2 + 47))
    v7 = a2 + 80;
  else
    v7 = 0;
  v50 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(v7 + 24) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
  if (v6 != v8)
    return 0;
  Value = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  v10 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  v12 = (_BYTE *)(v10 + 8 * v11);
  v50 = v52;
  v51 = 0x600000000;
  v13 = v12 - Value;
  if ((unint64_t)(v12 - Value) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, v13 >> 3, 8);
    v14 = v51;
    if (v12 == Value)
      goto LABEL_11;
    goto LABEL_10;
  }
  v14 = 0;
  if (v12 != Value)
  {
LABEL_10:
    memcpy(&v50[v14], Value, v12 - Value);
    v14 = v51;
  }
LABEL_11:
  LODWORD(v51) = v14 + ((unint64_t)v13 >> 3);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  if (v16 >= 1)
  {
    for (i = 0; i < v18; ++i)
    {
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v41, (uint64_t)v48);
      ConstantIntValue = mlir::getConstantIntValue(*((_QWORD *)v48[0] + i));
      v21 = v20;
      if (v48[0] != v49)
        free(v48[0]);
      if (v21)
      {
        if ((ConstantIntValue & 0x8000000000000000) != 0)
          goto LABEL_36;
        v50[i] = ConstantIntValue;
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
    }
  }
  v22 = (uint64_t)v50;
  v23 = v51;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v40);
  v25 = mlir::RankedTensorType::get(v22, v23, RHS, 0);
  v39 = v25;
  if (v40 != v25)
  {
    if (mlir::tensor::preservesStaticInformation(v40, v25))
    {
      mlir::ValueRange::ValueRange(v47, (uint64_t)&v40, 1uLL);
      mlir::ValueRange::ValueRange(v46, (uint64_t)&v39, 1uLL);
      if (mlir::tensor::CastOp::areCastCompatible(v47[0], v47[1], v46[0], v46[1]))
      {
        v26 = (_OWORD *)(a3 + 24);
        v36 = *(_OWORD *)(a3 + 24);
        ParentOp = *(mlir::Block **)(v41 + 16);
        if (ParentOp)
          ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
        v28 = *((_QWORD *)ParentOp + 2);
        mlir::GenericProgramPoint::~GenericProgramPoint(ParentOp);
        *(_QWORD *)(a3 + 24) = v28;
        *(_QWORD *)(a3 + 32) = v29;
        v30 = *(_QWORD *)(v41 + 24);
        v48[0] = *(void **)(*(_QWORD *)(v41 + 72) + 24);
        v38 = (uint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::TensorType &,mlir::Value>((mlir::OpBuilder *)(a3 + 8), v30, &v39, (uint64_t *)v48)- 16;
        v31 = v41;
        if (*(_BYTE *)(v41 + 47))
          v32 = v41 + 80;
        else
          v32 = 0;
        v37 = *(_QWORD *)(*(_QWORD *)(v41 + 72) + 32 * *(unsigned int *)(v32 + 24) + 24);
        mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v41, (uint64_t)v48);
        mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v41, (uint64_t)v44);
        mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v41, (uint64_t)v42);
        v33 = mlir::OpBuilder::create<mlir::tensor::ParallelInsertSliceOp,mlir::Value &,mlir::detail::TypedValue<mlir::RankedTensorType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>((mlir::MLIRContext **)(a3 + 8), *(_QWORD *)(v31 + 24), &v38, &v37, (uint64_t)v48, (uint64_t)v44, (uint64_t)v42);
        (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v31, v33);
        if (v42[0] != &v43)
          free(v42[0]);
        if (v44[0] != &v45)
          free(v44[0]);
        if (v48[0] != v49)
          free(v48[0]);
        if ((_QWORD)v36)
        {
          *v26 = v36;
          v15 = 1;
          v34 = v50;
          if (v50 == v52)
            return v15;
        }
        else
        {
          *(_QWORD *)v26 = 0;
          *(_QWORD *)(a3 + 32) = 0;
          v15 = 1;
          v34 = v50;
          if (v50 == v52)
            return v15;
        }
        goto LABEL_37;
      }
    }
  }
LABEL_36:
  v15 = 0;
  v34 = v50;
  if (v50 != v52)
LABEL_37:
    free(v34);
  return v15;
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::PackOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::PackOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::PackOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t llvm::all_of<llvm::detail::zippy<llvm::detail::zip_shortest,llvm::ArrayRef<long long>,llvm::SmallVector<mlir::OpFoldResult,6u> &>,mlir::LogicalResult commonVerifierPackAndUnPackOp<mlir::tensor::PackOp>(mlir::tensor::PackOp)::{lambda(std::tuple<long long,mlir::OpFoldResult>)#1}>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t ConstantIntValue;
  char v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(v2 + 8);
  if (v1)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = *(uint64_t **)a1;
    v7 = *(uint64_t **)v2;
    v8 = 8 * v3 - 8;
    v9 = 8 * v1 - 8;
    while (1)
    {
      v10 = *v6;
      ConstantIntValue = mlir::getConstantIntValue(*v7);
      if (v12)
      {
        if (v10 != 0x8000000000000000 && v10 != ConstantIntValue)
          return 0;
      }
      else if (v10 != 0x8000000000000000)
      {
        return 0;
      }
      result = 1;
      if (v9)
      {
        ++v6;
        ++v7;
        v14 = v8;
        v8 -= 8;
        v9 -= 8;
        if (v14)
          continue;
      }
      return result;
    }
  }
  return 1;
}

void mlir::RewritePatternSet::addImpl<FoldTensorCastProducerOp,mlir::MLIRContext *>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::OpInterfaceRewritePattern<mlir::DestinationStyleOpInterface>::OpInterfaceRewritePattern(v8, v9, (__int16)v24);
  *v8 = &unk_1E0E13938;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = FoldTensorCastProducerOp]";
    v25 = 74;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *mlir::OpInterfaceRewritePattern<mlir::DestinationStyleOpInterface>::OpInterfaceRewritePattern(_QWORD *a1, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  unsigned __int8 v5;
  void **p_vtable;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  const char *v18;
  unint64_t v19;

  v3 = a2;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v16 = a3;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a3 = v16;
    v3 = a2;
    if (v8)
    {
      v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      v19 = 83;
      v9 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v9)
        v10 = v9;
      else
        v10 = v19;
      v11 = &v18[v10];
      v12 = v19 - v10;
      if (v19 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v19 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a3 = v16;
      v3 = a2;
    }
  }
  mlir::Pattern::Pattern((uint64_t)(a1 + 1), (uint64_t)p_vtable[488], a3, v3, 0, 0);
  *a1 = &unk_1E0E47D48;
  return a1;
}

void FoldTensorCastProducerOp::~FoldTensorCastProducerOp(FoldTensorCastProducerOp *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::DestinationStyleOpInterface>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *InterfaceFor;

  if (a2)
    InterfaceFor = mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  else
    InterfaceFor = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, InterfaceFor, a3);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::DestinationStyleOpInterface>::match(uint64_t a1, uint64_t a2)
{
  void *InterfaceFor;

  if (a2)
    InterfaceFor = mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  else
    InterfaceFor = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 56))(a1, a2, InterfaceFor);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::DestinationStyleOpInterface>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *InterfaceFor;

  if (a2)
    InterfaceFor = mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  else
    InterfaceFor = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, InterfaceFor, a3);
}

uint64_t FoldTensorCastProducerOp::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DefiningOp;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int OperandNumber;
  unsigned int BeginOperandIndex;
  unint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  unint64_t v34[2];
  unint64_t v35[2];
  void *v36;
  uint64_t v37;
  _BYTE v38[32];
  void *v39;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  _QWORD *v43;
  _QWORD v44[5];

  v44[3] = *MEMORY[0x1E0C80C00];
  v31[0] = a2;
  v31[1] = a3;
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id
    && !mlir::OpInterface<mlir::LoopLikeOpInterface,mlir::detail::LoopLikeOpInterfaceInterfaceTraits>::getInterfaceFor(a2)
    && (*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v7 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(a2 + 72);
      v9 = 32 * v7;
      v10 = v8 + 24;
      do
      {
        if ((~*(_DWORD *)(*(_QWORD *)v10 + 8) & 7) != 0)
        {
          v42 = *(_QWORD *)v10;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v42);
          if (DefiningOp)
          {
            if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id
              && (mlir::tensor::preservesStaticInformation(*(_QWORD *)(DefiningOp - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
            {
              v39 = v41;
              v40 = 0x400000000;
              v12 = v31[0];
              v13 = *(unsigned int *)(v31[0] + 36);
              if (v13 >= 5)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v13, 8);
                v12 = v31[0];
              }
              v36 = v38;
              v37 = 0x400000000;
              if ((*(_BYTE *)(v12 + 46) & 0x80) != 0)
              {
                v14 = *(unsigned int *)(v12 + 68);
                if (v14 < 5
                  || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v14, 8),
                      v12 = v31[0],
                      (*(_BYTE *)(v31[0] + 46) & 0x80) != 0))
                {
                  v15 = *(unsigned int *)(v12 + 68);
                  if ((_DWORD)v15)
                  {
                    v16 = 32 * v15;
                    v17 = (uint64_t *)(*(_QWORD *)(v12 + 72) + 24);
                    do
                    {
                      v42 = *v17;
                      v18 = mlir::Value::getDefiningOp((mlir::Value *)&v42);
                      if (v18
                        && (v19 = v18,
                            *(_UNKNOWN **)(*(_QWORD *)(v18 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id))
                      {
                        v30 = mlir::tensor::preservesStaticInformation(*(_QWORD *)(v18 - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
                        v20 = v17;
                        if (v30)
                          v20 = (uint64_t *)(*(_QWORD *)(v19 + 72) + 24);
                      }
                      else
                      {
                        v20 = v17;
                      }
                      v21 = *v20;
                      v22 = v37;
                      if (v37 >= (unint64_t)HIDWORD(v37))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v37 + 1, 8);
                        v22 = v37;
                      }
                      *((_QWORD *)v36 + v22) = v21;
                      LODWORD(v37) = v37 + 1;
                      mlir::MapDynamicShapeOpInterface::mapDynamicShape(&v42, (mlir::MapDynamicShapeOpInterface *)v31);
                      v23 = mlir::MutableOperandRange::operator mlir::OperandRange((unsigned int *)&v42);
                      v25 = v24;
                      if (v43 != v44)
                        free(v43);
                      v32 = v23;
                      v33 = v25;
                      if (v25)
                      {
                        OperandNumber = mlir::OpOperand::getOperandNumber((unint64_t)(v17 - 3));
                        if (OperandNumber >= mlir::OperandRange::getBeginOperandIndex((mlir::OperandRange *)&v32))
                        {
                          BeginOperandIndex = mlir::OperandRange::getBeginOperandIndex((mlir::OperandRange *)&v32);
                          if (v33 + (unint64_t)BeginOperandIndex > OperandNumber)
                          {
                            v28 = *(_QWORD *)(*((_QWORD *)v36 + v37 - 1) + 8) & 0xFFFFFFFFFFFFFFF8;
                            if (*(_UNKNOWN **)(*(_QWORD *)v28 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
                            {
                              v29 = v40;
                              if (v40 >= (unint64_t)HIDWORD(v40))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 8);
                                v29 = v40;
                              }
                              *((_QWORD *)v39 + v29) = v28;
                              LODWORD(v40) = v40 + 1;
                            }
                          }
                        }
                      }
                      v17 += 4;
                      v16 -= 32;
                    }
                    while (v16);
                    v12 = v31[0];
                  }
                }
              }
              mlir::ValueRange::ValueRange(v35, (uint64_t)v39, v40);
              mlir::ValueRange::ValueRange(v34, (uint64_t)v36, v37);
              mlir::clone((mlir::OpBuilder *)(a4 + 8), v12, v35[0], v35[1], v34[0], v34[1]);
            }
          }
        }
        v10 += 32;
        v9 -= 32;
      }
      while (v9);
    }
  }
  return 0;
}

_QWORD *mlir::OpInterfaceRewritePattern<mlir::DestinationStyleOpInterface>::~OpInterfaceRewritePattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::OpInterfaceRewritePattern<mlir::DestinationStyleOpInterface>::~OpInterfaceRewritePattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::DestinationStyleOpInterface>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
    return 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a3, a4);
  return 1;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::CollapseShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::ExpandShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::ExtractSliceOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::GatherOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL _ZN4llvm12function_refIFN4mlir11ParseResultERNS1_9AttributeENS1_4TypeEEE11callback_fnIZNS1_9AsmParser32parseCustomAttributeWithFallbackINS1_6detail18DenseArrayAttrImplIxEEEENSt3__19enable_ifIXsr23detect_has_parse_methodIT_EE5valueES2_E4typeERSG_S5_EUlS4_S5_E_EES2_lS4_S5_(mlir::AsmParser **a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = mlir::detail::DenseArrayAttrImpl<long long>::parse(*a1);
  *a2 = v3;
  return v3 != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::GatherOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::GenerateOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"tensor.yield", 12);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a3 + 28);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::InsertSliceOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PackOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::tensor::PackOp>(mlir::LogicalResult (*)(mlir::tensor::PackOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::tensor::PackOp>(mlir::LogicalResult (*)(mlir::tensor::PackOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::tensor::PackOp>(mlir::LogicalResult (*)(mlir::tensor::PackOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::PackOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::PadOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"tensor.yield", 12);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::PadOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a3 + 28);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::ParallelInsertSliceOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::ScatterOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::tensor::detail::UnPackOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::tensor::UnPackOp>(mlir::LogicalResult (*)(mlir::tensor::UnPackOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::tensor::UnPackOp>(mlir::LogicalResult (*)(mlir::tensor::UnPackOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::UnPackOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::UnPackOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::UnPackOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::tensor::UnPackOp>(mlir::LogicalResult (*)(mlir::tensor::UnPackOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::tensor::UnPackOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

double mlir::createCanonicalizerPass@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;

  v3 = operator new(0x7D8uLL);
  bzero(v3, 0x7D8uLL);
  *v3 = off_1E0E15660;
  *((_WORD *)v3 + 972) = 256;
  *(_QWORD *)&result = 10;
  *((_OWORD *)v3 + 122) = xmmword_181233220;
  v3[246] = 0;
  *((_DWORD *)v3 + 494) = 0;
  v3[248] = 0;
  v3[250] = 0;
  v3[249] = 0;
  *a1 = v3;
  return result;
}

uint64_t mlir::impl::CanonicalizerBase<`anonymous namespace'::Canonicalizer>::CanonicalizerBase(uint64_t a1)
{
  _QWORD *v2;
  int v4;
  int *v5;
  __n128 v6;

  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v2 = (_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x400000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E0E4D9D8;
  v6.n128_u64[0] = (unint64_t)"Seed the worklist in general top-down order";
  v6.n128_u64[1] = 43;
  LOBYTE(v4) = 1;
  v5 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 152), (uint64_t)"top-down", 8, &v6, (_BYTE **)&v5);
  *(_QWORD *)(a1 + 344) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 536) = &unk_1E0E4C3A0;
  v6.n128_u64[0] = (unint64_t)"Perform control flow optimizations to the region tree";
  v6.n128_u64[1] = 53;
  LOBYTE(v4) = 1;
  v5 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 552), v2, (uint64_t)"region-simplify", 15, &v6, (_BYTE **)&v5);
  *(_QWORD *)(a1 + 552) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 744) = &unk_1E0E4C3A0;
  v6.n128_u64[0] = (unint64_t)"Max. iterations between applying patterns / simplifying regions";
  v6.n128_u64[1] = 63;
  v4 = 10;
  v5 = &v4;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(a1 + 760), v2, (uint64_t)"max-iterations", 14, &v6, &v5);
  *(_QWORD *)(a1 + 760) = off_1E0E4C4A0;
  *(_QWORD *)(a1 + 960) = &unk_1E0E4C520;
  v6.n128_u64[0] = (unint64_t)"Max. number of pattern rewrites within an iteration";
  v6.n128_u64[1] = 51;
  v4 = -1;
  v5 = &v4;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(a1 + 976), v2, (uint64_t)"max-num-rewrites", 16, &v6, &v5);
  *(_QWORD *)(a1 + 976) = off_1E0E4C4A0;
  *(_QWORD *)(a1 + 1176) = &unk_1E0E4C520;
  v6.n128_u64[0] = (unint64_t)"Test only: Fail pass on non-convergence to detect cyclic pattern";
  v6.n128_u64[1] = 64;
  LOBYTE(v4) = 0;
  v5 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1192), v2, (uint64_t)"test-convergence", 16, &v6, (_BYTE **)&v5);
  *(_QWORD *)(a1 + 1192) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 1384) = &unk_1E0E4C3A0;
  v6.n128_u64[0] = (unint64_t)"Labels of patterns that should be filtered out during application";
  v6.n128_u64[1] = 65;
  mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::ListOption<llvm::cl::desc>(a1 + 1400, v2, (uint64_t)"disable-patterns", 16, &v6);
  *(_QWORD *)(a1 + 1400) = &unk_1E0E4C020;
  *(_QWORD *)(a1 + 1648) = &unk_1E0E4C0A0;
  v6.n128_u64[0] = (unint64_t)"Labels of patterns that should be used during application, all other patterns are filtered out";
  v6.n128_u64[1] = 94;
  mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::ListOption<llvm::cl::desc>(a1 + 1672, v2, (uint64_t)"enable-patterns", 15, &v6);
  *(_QWORD *)(a1 + 1672) = &unk_1E0E4C020;
  *(_QWORD *)(a1 + 1920) = &unk_1E0E4C0A0;
  return a1;
}

void `anonymous namespace'::Canonicalizer::~Canonicalizer(_anonymous_namespace_::Canonicalizer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _anonymous_namespace_::Canonicalizer *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  _anonymous_namespace_::Canonicalizer *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  _anonymous_namespace_::Canonicalizer *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  _anonymous_namespace_::Canonicalizer *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  _anonymous_namespace_::Canonicalizer *v21;
  uint64_t v22;
  void *v23;
  char *v24;

  *(_QWORD *)this = off_1E0E15660;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 250);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E0E4D9D8;
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)this + 209);
  llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list((_QWORD *)this + 175);
  *((_QWORD *)this + 149) = &unk_1E0E23520;
  v5 = (_anonymous_namespace_::Canonicalizer *)*((_QWORD *)this + 172);
  if (v5 == (_anonymous_namespace_::Canonicalizer *)((char *)this + 1352))
  {
    v6 = 4;
    v5 = (_anonymous_namespace_::Canonicalizer *)((char *)this + 1352);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  *((_QWORD *)this + 149) = &unk_1E0E23930;
  v7 = (void *)*((_QWORD *)this + 161);
  if (v7 != *((void **)this + 160))
    free(v7);
  v8 = (char *)*((_QWORD *)this + 157);
  if (v8 != (char *)this + 1272)
    free(v8);
  *((_QWORD *)this + 122) = off_1E0E236C0;
  v9 = (_anonymous_namespace_::Canonicalizer *)*((_QWORD *)this + 146);
  if (v9 == (_anonymous_namespace_::Canonicalizer *)((char *)this + 1144))
  {
    v10 = 4;
    v9 = (_anonymous_namespace_::Canonicalizer *)((char *)this + 1144);
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_20:
  *((_QWORD *)this + 122) = &unk_1E0E23930;
  v11 = (void *)*((_QWORD *)this + 134);
  if (v11 != *((void **)this + 133))
    free(v11);
  v12 = (char *)*((_QWORD *)this + 130);
  if (v12 != (char *)this + 1056)
    free(v12);
  *((_QWORD *)this + 95) = off_1E0E236C0;
  v13 = (_anonymous_namespace_::Canonicalizer *)*((_QWORD *)this + 119);
  if (v13 == (_anonymous_namespace_::Canonicalizer *)((char *)this + 928))
  {
    v14 = 4;
    v13 = (_anonymous_namespace_::Canonicalizer *)((char *)this + 928);
  }
  else
  {
    if (!v13)
      goto LABEL_29;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_29:
  *((_QWORD *)this + 95) = &unk_1E0E23930;
  v15 = (void *)*((_QWORD *)this + 107);
  if (v15 != *((void **)this + 106))
    free(v15);
  v16 = (char *)*((_QWORD *)this + 103);
  if (v16 != (char *)this + 840)
    free(v16);
  *((_QWORD *)this + 69) = &unk_1E0E23520;
  v17 = (_anonymous_namespace_::Canonicalizer *)*((_QWORD *)this + 92);
  if (v17 == (_anonymous_namespace_::Canonicalizer *)((char *)this + 712))
  {
    v18 = 4;
    v17 = (_anonymous_namespace_::Canonicalizer *)((char *)this + 712);
  }
  else
  {
    if (!v17)
      goto LABEL_38;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_38:
  *((_QWORD *)this + 69) = &unk_1E0E23930;
  v19 = (void *)*((_QWORD *)this + 81);
  if (v19 != *((void **)this + 80))
    free(v19);
  v20 = (char *)*((_QWORD *)this + 77);
  if (v20 != (char *)this + 632)
    free(v20);
  *((_QWORD *)this + 43) = &unk_1E0E23520;
  v21 = (_anonymous_namespace_::Canonicalizer *)*((_QWORD *)this + 66);
  if (v21 == (_anonymous_namespace_::Canonicalizer *)((char *)this + 504))
  {
    v22 = 4;
    v21 = (_anonymous_namespace_::Canonicalizer *)((char *)this + 504);
  }
  else
  {
    if (!v21)
      goto LABEL_47;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_47:
  *((_QWORD *)this + 43) = &unk_1E0E23930;
  v23 = (void *)*((_QWORD *)this + 55);
  if (v23 != *((void **)this + 54))
    free(v23);
  v24 = (char *)*((_QWORD *)this + 51);
  if (v24 != (char *)this + 424)
    free(v24);
  mlir::Pass::~Pass(this);
}

{
  void *v1;

  operator delete(v1);
}

const char *mlir::impl::CanonicalizerBase<`anonymous namespace'::Canonicalizer>::getName()
{
  return "Canonicalizer";
}

const char *mlir::impl::CanonicalizerBase<`anonymous namespace'::Canonicalizer>::getArgument()
{
  return "canonicalize";
}

const char *mlir::impl::CanonicalizerBase<`anonymous namespace'::Canonicalizer>::getDescription()
{
  return "Canonicalize operations";
}

__n128 `anonymous namespace'::Canonicalizer::runOnOperation(_anonymous_namespace_::Canonicalizer *this)
{
  unint64_t v1;
  const mlir::FrozenRewritePatternSet *v2;
  __n128 result;
  unint64_t v4;
  mlir::Region **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8[3];
  BOOL v9;

  v1 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  v2 = (const mlir::FrozenRewritePatternSet *)*((_QWORD *)this + 249);
  v6 = *(_OWORD *)((char *)this + 1944);
  v7 = *(_OWORD *)((char *)this + 1960);
  result = *(__n128 *)((char *)this + 1976);
  v4 = *(unsigned int *)(v1 + 44);
  if ((v4 & 0x7FFFFF) != 0)
  {
    v5 = (mlir::Region **)(((v1 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(v1 + 40));
    v9 = 0;
    v8[0] = v6;
    v8[1] = v7;
    v8[2] = (__int128)result;
    mlir::applyPatternsAndFoldGreedily(v5, v2, v8, &v9);
  }
  return result;
}

void `anonymous namespace'::Canonicalizer::initialize(_anonymous_namespace_::Canonicalizer *this, mlir::MLIRContext *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t RegisteredOperations;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  mlir::MLIRContext *v18;
  void *__p[2];
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[8];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 1944) = *((_BYTE *)this + 472);
  *((_BYTE *)this + 1945) = *((_BYTE *)this + 680);
  *((_QWORD *)this + 244) = *((_QWORD *)this + 111);
  *((_QWORD *)this + 245) = *((_QWORD *)this + 138);
  v18 = a2;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  v21 = v23;
  v22 = 0x600000000;
  v23[6] = 0;
  v23[7] = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0x2800000000;
  v28 = 0;
  v29 = 0;
  v30 = 0x2800000000;
  mlir::MLIRContext::getLoadedDialects(a2, (uint64_t)&v16);
  v4 = v16;
  v5 = v17;
  if (v16 != v17)
  {
    do
    {
      v6 = *v4++;
      (*(void (**)(uint64_t, mlir::MLIRContext **))(*(_QWORD *)v6 + 16))(v6, &v18);
    }
    while (v4 != v5);
    v4 = v16;
  }
  if (v4)
  {
    v17 = v4;
    operator delete(v4);
  }
  RegisteredOperations = mlir::MLIRContext::getRegisteredOperations(a2);
  if (v8)
  {
    v9 = (uint64_t *)RegisteredOperations;
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      (*(void (**)(uint64_t, mlir::MLIRContext **, mlir::MLIRContext *))(*(_QWORD *)v11 + 24))(v11, &v18, a2);
      v10 -= 8;
    }
    while (v10);
  }
  v12 = operator new(0x28uLL);
  v12[2] = 0;
  *v12 = &unk_1E0E51F28;
  v12[1] = 0;
  *((_QWORD *)this + 249) = mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(v12 + 3, &v18, *((_QWORD *)this + 191), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 192) - *((_QWORD *)this + 191)) >> 3), *((_QWORD *)this + 225), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 226) - *((_QWORD *)this + 225)) >> 3));
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  mlir::PDLPatternModule::~PDLPatternModule((mlir::PDLPatternModule *)((char *)&v20 + 8));
}

uint64_t mlir::impl::CanonicalizerBase<`anonymous namespace'::Canonicalizer>::clonePass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  int *v12;
  __n128 v13;

  v4 = operator new(0x7D8uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  *((_BYTE *)v4 + 40) = 0;
  *((_BYTE *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = (char *)v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = (char *)v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *(_QWORD *)v4 = off_1E0E4D9D8;
  *((_QWORD *)v4 + 1) = v5;
  v13.n128_u64[0] = (unint64_t)"Seed the worklist in general top-down order";
  v13.n128_u64[1] = 43;
  LOBYTE(v11) = 1;
  v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 43, (_QWORD *)v4 + 19, (uint64_t)"top-down", 8, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 43) = &off_1E0E4C320;
  *((_QWORD *)v4 + 67) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"Perform control flow optimizations to the region tree";
  v13.n128_u64[1] = 53;
  LOBYTE(v11) = 1;
  v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 69, (_QWORD *)v4 + 19, (uint64_t)"region-simplify", 15, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 69) = &off_1E0E4C320;
  *((_QWORD *)v4 + 93) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"Max. iterations between applying patterns / simplifying regions";
  v13.n128_u64[1] = 63;
  v11 = 10;
  v12 = &v11;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)v4 + 95, (_QWORD *)v4 + 19, (uint64_t)"max-iterations", 14, &v13, &v12);
  *((_QWORD *)v4 + 95) = off_1E0E4C4A0;
  *((_QWORD *)v4 + 120) = &unk_1E0E4C520;
  v13.n128_u64[0] = (unint64_t)"Max. number of pattern rewrites within an iteration";
  v13.n128_u64[1] = 51;
  v11 = -1;
  v12 = &v11;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)v4 + 122, (_QWORD *)v4 + 19, (uint64_t)"max-num-rewrites", 16, &v13, &v12);
  *((_QWORD *)v4 + 122) = off_1E0E4C4A0;
  *((_QWORD *)v4 + 147) = &unk_1E0E4C520;
  v13.n128_u64[0] = (unint64_t)"Test only: Fail pass on non-convergence to detect cyclic pattern";
  v13.n128_u64[1] = 64;
  LOBYTE(v11) = 0;
  v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 149, (_QWORD *)v4 + 19, (uint64_t)"test-convergence", 16, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 149) = &off_1E0E4C320;
  *((_QWORD *)v4 + 173) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"Labels of patterns that should be filtered out during application";
  v13.n128_u64[1] = 65;
  mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::ListOption<llvm::cl::desc>((uint64_t)v4 + 1400, (_QWORD *)v4 + 19, (uint64_t)"disable-patterns", 16, &v13);
  *((_QWORD *)v4 + 175) = &unk_1E0E4C020;
  *((_QWORD *)v4 + 206) = &unk_1E0E4C0A0;
  v13.n128_u64[0] = (unint64_t)"Labels of patterns that should be used during application, all other patterns are filtered out";
  v13.n128_u64[1] = 94;
  result = mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::ListOption<llvm::cl::desc>((uint64_t)v4 + 1672, (_QWORD *)v4 + 19, (uint64_t)"enable-patterns", 15, &v13);
  *((_QWORD *)v4 + 209) = &unk_1E0E4C020;
  *((_QWORD *)v4 + 240) = &unk_1E0E4C0A0;
  *(_QWORD *)v4 = off_1E0E15660;
  v7 = *(_OWORD *)(a1 + 1960);
  *(_OWORD *)((char *)v4 + 1944) = *(_OWORD *)(a1 + 1944);
  *(_OWORD *)((char *)v4 + 1960) = v7;
  *(_OWORD *)((char *)v4 + 1976) = *(_OWORD *)(a1 + 1976);
  *((_QWORD *)v4 + 249) = *(_QWORD *)(a1 + 1992);
  v8 = *(_QWORD *)(a1 + 2000);
  *((_QWORD *)v4 + 250) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *a2 = v4;
  return result;
}

uint64_t mlir::detail::PassOptions::ListOption<std::string,llvm::cl::parser<std::string>>::ListOption<llvm::cl::desc>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void *v31;
  _QWORD v32[2];

  v32[0] = a3;
  v32[1] = a4;
  v31 = a2;
  v7 = llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::list<llvm::StringRef,llvm::cl::sub,llvm::cl::desc>(a1, (uint64_t)v32, &v31, a5);
  *(_QWORD *)(v7 + 248) = &unk_1E0E4DDA8;
  v8 = v7 + 248;
  *(_BYTE *)(v7 + 256) = 0;
  *(_QWORD *)v7 = &unk_1E0E4DD28;
  *(_QWORD *)(v7 + 264) = &unk_1E0E23B38;
  v10 = (uint64_t *)a2[21];
  v9 = a2[22];
  v11 = v10;
  if ((unint64_t)v10 < v9)
  {
    *v10 = v8;
    v12 = (uint64_t)(v10 + 1);
    goto LABEL_23;
  }
  v13 = (char *)a2[20];
  v14 = ((char *)v10 - v13) >> 3;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61)
    abort();
  v16 = v9 - (_QWORD)v13;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v18 = (char *)operator new(8 * v17);
    v19 = (uint64_t *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v8;
    v12 = (uint64_t)(v19 + 1);
    v21 = (char *)((char *)v10 - v13);
    if (v10 == (uint64_t *)v13)
      goto LABEL_21;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (uint64_t *)(8 * v14);
  v20 = 0;
  *(_QWORD *)(8 * v14) = v8;
  v12 = 8 * v14 + 8;
  v21 = (char *)((char *)v10 - v13);
  if (v10 != (uint64_t *)v13)
  {
LABEL_14:
    v22 = (unint64_t)(v21 - 8);
    if (v22 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v13 - v18) < 0x20)
      goto LABEL_28;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v11 = &v10[v24 / 0xFFFFFFFFFFFFFFF8];
    v19 = (uint64_t *)((char *)v19 - v24);
    v25 = &v18[8 * v14 - 16];
    v26 = v10 - 2;
    v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
      *(_OWORD *)v25 = v28;
      v25 -= 32;
      v26 -= 4;
      v27 -= 4;
    }
    while (v27);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v29 = *--v11;
        *--v19 = v29;
      }
      while (v11 != (uint64_t *)v13);
    }
    v11 = (uint64_t *)a2[20];
  }
LABEL_21:
  a2[20] = v19;
  a2[21] = v12;
  a2[22] = v20;
  if (v11)
    operator delete(v11);
LABEL_23:
  a2[21] = v12;
  return a1;
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::list<llvm::StringRef,llvm::cl::sub,llvm::cl::desc>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4)
{
  __int16 v8;
  void *v9;
  uint64_t v10;
  llvm::SmallPtrSetImplBase *v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  v8 = *(_WORD *)(a1 + 10);
  v9 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v10 = a1 + 64;
  *(_WORD *)(a1 + 10) = v8 & 0x8000 | 1;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  v11 = (llvm::SmallPtrSetImplBase *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v9, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)a1 = &off_1E0E23860;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = &unk_1E0E23B38;
  *(_QWORD *)(a1 + 216) = off_1E0E4FD68;
  *(_QWORD *)(a1 + 240) = a1 + 216;
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v14 = *a3;
  v15 = *(_QWORD *)(a1 + 96);
  if (v15 != *(_QWORD *)(a1 + 88))
  {
LABEL_4:
    llvm::SmallPtrSetImplBase::insert_imp_big(v11, v14);
    goto LABEL_5;
  }
  v17 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v17)
  {
LABEL_14:
    if (v17 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v17 + 1;
      *(_QWORD *)(v15 + 8 * v17) = v14;
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  v18 = 0;
  v19 = 8 * v17;
  v20 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v20 != v14)
  {
    if (*v20 == -2)
      v18 = v20;
    ++v20;
    v19 -= 8;
    if (!v19)
    {
      if (!v18)
        goto LABEL_14;
      *v18 = v14;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_5:
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet>::__on_zero_shared(uint64_t a1)
{
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)(a1 + 24));
}

void `anonymous namespace'::CSEDriver::simplify(_anonymous_namespace_::CSEDriver *this, mlir::Operation *a2, BOOL *a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[5];
  _QWORD v12[6];
  _QWORD v13[2];
  llvm *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, 24);
  v11[3] = v12;
  v11[4] = 0x400000000;
  v12[4] = v13;
  v12[5] = 0;
  v13[0] = 0;
  v13[1] = 1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v5 = *((unsigned int *)a2 + 11);
  if ((v5 & 0x7FFFFF) != 0)
  {
    v6 = (_QWORD *)((((unint64_t)a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)a2 + 10));
    v7 = 24 * (v5 & 0x7FFFFF);
    do
    {
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 1);
  v9 = (uint64_t *)*((_QWORD *)this + 2);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, v10);
  }
  if (a3)
    *a3 = *((_QWORD *)this + 1) != *((_QWORD *)this + 2);
  llvm::deallocate_buffer(v14, (void *)(16 * v16));
}

void sub_1806F52E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  llvm **v36;
  uint64_t v37;
  llvm **v38;
  int v39;
  uint64_t v40;
  int v41;

  if (v39)
    llvm::deallocate_buffer(*v38, (void *)0x1000);
  if (v41)
    llvm::deallocate_buffer(*(llvm **)v40, *(void **)(v40 + 8));
  if (v40 != v37)
    free((void *)v40);
  if (v38 != v36)
    free(v38);
}

uint64_t mlir::createCSEPass@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  uint64_t result;

  v3 = operator new(0x160uLL);
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  *((_BYTE *)v3 + 120) = 0;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  *((_QWORD *)v3 + 22) = 0;
  *((_QWORD *)v3 + 23) = (char *)v3 + 200;
  *((_DWORD *)v3 + 49) = 4;
  *((_QWORD *)v3 + 29) = (char *)v3 + 248;
  *((_DWORD *)v3 + 61) = 4;
  *((_QWORD *)v3 + 35) = 0;
  *((_QWORD *)v3 + 36) = 0;
  *((_QWORD *)v3 + 37) = 0x1000000000;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  *((_QWORD *)v3 + 42) = 0;
  *(_QWORD *)v3 = off_1E0E4DA48;
  mlir::Pass::Statistic::Statistic((mlir::Pass::Statistic *)((char *)v3 + 344), (mlir::Pass *)v3, "num-cse'd", "Number of operations CSE'd");
  result = mlir::Pass::Statistic::Statistic((mlir::Pass::Statistic *)((char *)v3 + 345), (mlir::Pass *)v3, "num-dce'd", "Number of operations DCE'd");
  *(_QWORD *)v3 = off_1E0E1A4B8;
  *a1 = v3;
  return result;
}

void `anonymous namespace'::CSEDriver::simplifyRegion(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t DominanceInfo;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int32x2_t **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int32x2_t **v23;
  uint64_t v24;
  int32x2_t **v25;
  int32x2_t **v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  int32x2_t **v35;
  void *__p[2];
  __int128 v37;
  __int128 v38;

  if ((_QWORD *)*a3 != a3)
  {
    DominanceInfo = mlir::detail::DominanceInfoBase<false>::getDominanceInfo(*(_QWORD *)(a1 + 32), a3, 0);
    if ((_QWORD *)*a3 != a3 && (v7 = a3[1], *(_QWORD **)(v7 + 8) == a3))
    {
      v34 = (void *)a2[16];
      __p[0] = a2;
      __p[1] = v34;
      a2[16] = __p;
      *(_QWORD *)&v37 = 0;
    }
    else if ((DominanceInfo & 4) != 0)
    {
      v37 = 0u;
      v38 = 0u;
      *(_OWORD *)__p = 0u;
      v8 = *(_QWORD *)((mlir::detail::DominanceInfoBase<false>::getDominanceInfo(*(_QWORD *)(a1 + 32), a3, 1) & 0xFFFFFFFFFFFFFFF8)
                     + 48);
      v9 = operator new(0x30uLL);
      v10 = a2[16];
      *v9 = a2;
      v9[1] = v10;
      a2[16] = v9;
      v9[2] = 0;
      v9[3] = v8;
      v9[4] = *(_QWORD *)(v8 + 24);
      *((_BYTE *)v9 + 40) = 0;
      v35 = (int32x2_t **)v9;
      if (v35)
      {
        operator delete(v11);
      }
      v12 = *((_QWORD *)&v38 + 1);
      while (v12)
      {
        --v12;
        v13 = __p[1];
        v14 = v38 + v12;
        v15 = (unint64_t)(v38 + v12) >> 9;
        v16 = *((_QWORD *)__p[1] + v15);
        v17 = (v38 + v12) & 0x1FF;
        v18 = *(_QWORD *)(v16 + 8 * v17);
        if (*(_BYTE *)(v18 + 40))
        {
          v19 = *(uint64_t **)(v18 + 32);
          if (v19 == (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v18 + 24) + 24)
                                + 8 * *(unsigned int *)(*(_QWORD *)(v18 + 24) + 32)))
            goto LABEL_16;
        }
        else
        {
          *(_BYTE *)(v18 + 40) = 1;
          v18 = *(_QWORD *)(v16 + 8 * v17);
          v19 = *(uint64_t **)(v18 + 32);
          if (v19 == (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v18 + 24) + 24)
                                + 8 * *(unsigned int *)(*(_QWORD *)(v18 + 24) + 32)))
          {
LABEL_16:
            v24 = v13[v15];
            v25 = *(int32x2_t ***)(v24 + 8 * v17);
            *(_QWORD *)(v24 + 8 * v17) = 0;
            if (v25)
            {
              operator delete(v26);
            }
            v27 = v37;
            v28 = (((_QWORD)v37 - (_QWORD)v13) << 6) - 1;
            *((_QWORD *)&v38 + 1) = v12;
            if ((_QWORD *)v37 == v13)
              v28 = 0;
            if ((unint64_t)(v28 - v14) >= 0x400)
            {
              operator delete(*(void **)(v37 - 8));
              *(_QWORD *)&v37 = v27 - 8;
            }
            continue;
          }
        }
        *(_QWORD *)(v18 + 32) = v19 + 1;
        v20 = *v19;
        v21 = operator new(0x30uLL);
        v22 = a2[16];
        *v21 = a2;
        v21[1] = v22;
        a2[16] = v21;
        v21[2] = 0;
        v21[3] = v20;
        v21[4] = *(_QWORD *)(v20 + 24);
        *((_BYTE *)v21 + 40) = 0;
        v35 = (int32x2_t **)v21;
        if (v35)
        {
          operator delete(v23);
        }
        v12 = *((_QWORD *)&v38 + 1);
      }
      v29 = (void **)__p[1];
      v30 = (void **)v37;
      v31 = v37 - (unint64_t)__p[1];
      if ((unint64_t)v37 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          v32 = *v29++;
          operator delete(v32);
          v31 -= 8;
        }
        while (v31 > 0x10);
      }
      while (v29 != v30)
      {
        v33 = *v29++;
        operator delete(v33);
      }
      if (__p[0])
        operator delete(__p[0]);
    }
  }
}

void `anonymous namespace'::CSEDriver::simplifyBlock(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  mlir::GenericProgramPoint *v5;
  mlir::GenericProgramPoint *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  llvm *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  mlir::Operation *v19;
  mlir::Operation *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t InterfaceFor;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _BOOL4 v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  mlir::GenericProgramPoint *v56;
  mlir *v57;
  mlir *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t *v63;
  void *v64;
  BOOL v65;
  uint64_t *v66;
  BOOL v67;
  mlir *v68;
  __guard *v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  mlir::GenericProgramPoint *v82;
  mlir *v83;
  uint64_t *v84;
  uint64_t *v85;
  int v86;
  BOOL v87;
  unsigned int v88;
  uint64_t *v89;
  int v90;
  _QWORD *v91;
  unsigned int v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  mlir::GenericProgramPoint *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  _QWORD v113[3];
  uint64_t v114;
  char v115;
  void *v116;
  uint64_t v117;
  _QWORD v118[2];
  llvm *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v5 = (mlir::GenericProgramPoint *)(a3 + 32);
  v6 = *(mlir::GenericProgramPoint **)(a3 + 40);
  if (v6 != (mlir::GenericProgramPoint *)(a3 + 32))
  {
    v101 = a1 + 40;
    v102 = a2 + 104;
    v104 = (mlir::GenericProgramPoint *)(a3 + 32);
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v6);
      v10 = v9;
      if ((*(_DWORD *)(v9 + 44) & 0x7FFFFF) != 0)
      {
        if (mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsIsolatedFromAbove>((void ***)(v9 + 48)))
        {
          v111 = 0;
          v112 = 0;
          v113[0] = 0;
          v113[1] = &v114;
          v113[2] = 0x400000000;
          v117 = 0;
          v118[0] = 0;
          v116 = v118;
          v118[1] = 1;
          v119 = 0;
          v120 = 0;
          v121 = 0;
          v122 = 0;
          v11 = *(unsigned int *)(v10 + 44);
          if ((v11 & 0x7FFFFF) != 0)
          {
            v12 = ((v10 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(v10 + 40);
            v13 = 24 * (v11 & 0x7FFFFF);
            do
            {
              v12 += 24;
              v13 -= 24;
            }
            while (v13);
            v14 = v119;
            v15 = v121;
          }
          else
          {
            v15 = 0;
            v14 = 0;
          }
          llvm::deallocate_buffer(v14, (void *)(16 * v15));
        }
        v16 = *(unsigned int *)(v10 + 44);
        if ((v16 & 0x7FFFFF) != 0)
        {
          v17 = ((v10 + 16 * ((v16 >> 23) & 1) + ((v16 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(v10 + 40);
          v18 = 24 * (v16 & 0x7FFFFF);
          do
          {
            v17 += 24;
            v18 -= 24;
          }
          while (v18);
        }
      }
      v107 = v10;
      if ((mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((_QWORD *)(v10 + 48)) & 1) != 0)
        goto LABEL_5;
      if (mlir::isOpTriviallyDead((void ***)v10, v19))
      {
        v22 = *(uint64_t **)(a1 + 16);
        v21 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v22 < v21)
        {
          *v22 = v10;
          v23 = (uint64_t)(v22 + 1);
LABEL_53:
          *(_QWORD *)(a1 + 16) = v23;
          ++*(_QWORD *)(a1 + 72);
          goto LABEL_5;
        }
        v30 = *(char **)(a1 + 8);
        v31 = ((char *)v22 - v30) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          abort();
        v33 = v21 - (_QWORD)v30;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v35 = (char *)operator new(8 * v34);
          v36 = (uint64_t *)&v35[8 * v31];
          *v36 = v10;
          v23 = (uint64_t)(v36 + 1);
          if (v22 == (uint64_t *)v30)
            goto LABEL_51;
LABEL_44:
          v37 = (char *)(v22 - 1) - v30;
          if (v37 < 0x58)
            goto LABEL_144;
          if ((unint64_t)(v30 - v35) < 0x20)
            goto LABEL_144;
          v38 = (v37 >> 3) + 1;
          v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          v40 = &v22[v39 / 0xFFFFFFFFFFFFFFF8];
          v36 = (uint64_t *)((char *)v36 - v39);
          v41 = &v35[8 * v31 - 16];
          v42 = v22 - 2;
          v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v44 = *(_OWORD *)v42;
            *((_OWORD *)v41 - 1) = *((_OWORD *)v42 - 1);
            *(_OWORD *)v41 = v44;
            v41 -= 32;
            v42 -= 4;
            v43 -= 4;
          }
          while (v43);
          v22 = v40;
          if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_144:
            do
            {
              v45 = *--v22;
              *--v36 = v45;
            }
            while (v22 != (uint64_t *)v30);
          }
          v22 = *(uint64_t **)(a1 + 8);
        }
        else
        {
          v35 = 0;
          v36 = (uint64_t *)(8 * v31);
          *(_QWORD *)(8 * v31) = v10;
          v23 = 8 * v31 + 8;
          if (v22 != (uint64_t *)v30)
            goto LABEL_44;
        }
LABEL_51:
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v23;
        *(_QWORD *)(a1 + 24) = &v35[8 * v34];
        v5 = v104;
        if (v22)
          operator delete(v22);
        goto LABEL_53;
      }
      v24 = *(unsigned int *)(v10 + 44);
      v25 = v24 & 0x7FFFFF;
      if ((v24 & 0x7FFFFF) != 0)
      {
        v26 = (_QWORD *)(((v10 + 16 * ((v24 >> 23) & 1) + ((v24 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                       + 32 * *(unsigned int *)(v10 + 40));
        v27 = 24 * v25;
        do
        {
          if (v26 != (_QWORD *)*v26)
          {
            v28 = v26[1];
            if (v26 == (_QWORD *)v28 || v26 != *(_QWORD **)(v28 + 8))
              goto LABEL_5;
          }
          v26 += 3;
          v27 -= 24;
        }
        while (v27);
      }
      if ((mlir::isMemoryEffectFree((mlir *)v10, v20) & 1) != 0)
      {
        if (!v8)
          goto LABEL_63;
        ++*(_QWORD *)(a1 + 64);
        goto LABEL_5;
      }
      if (!mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v10))
      {
        v105 = 0;
        v106 = 0;
        goto LABEL_5;
      }
      if (!v10)
      {
        v105 = 0;
        v106 = 0;
        goto LABEL_5;
      }
      InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v10);
      v105 = v10;
      v106 = InterfaceFor;
      v111 = v113;
      v112 = 0x400000000;
      mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v105, (uint64_t)&v111);
      if ((_DWORD)v112)
        break;
      v46 = 0;
      v47 = v111;
      if (v111 != v113)
        goto LABEL_59;
LABEL_60:
      if (!v46)
        goto LABEL_5;
      if (!v48)
        goto LABEL_63;
      v49 = (void *)v48;
      v50 = *(_QWORD *)(v48 + 16);
      if (v50 != *(_QWORD *)(v10 + 16))
        goto LABEL_63;
      v108 = v48;
      v56 = *(mlir::GenericProgramPoint **)(v48 + 8);
      if (v56 == (mlir::GenericProgramPoint *)(v50 + 32))
      {
        v58 = 0;
        v111 = v49;
        v112 = 0;
        v59 = *(_DWORD *)(a1 + 56);
        if (v59)
        {
LABEL_68:
          v60 = *(_QWORD *)(a1 + 40);
          v61 = v59 - 1;
          v62 = v61 & ((v49 >> 4) ^ (v49 >> 9));
          v63 = (uint64_t *)(v60 + 24 * v62);
          v64 = (void *)*v63;
          if ((void *)*v63 == v49)
          {
LABEL_69:
            v100 = v63;
            if (v58)
              v65 = v58 == (mlir *)v10;
            else
              v65 = 1;
            if (!v65)
              goto LABEL_81;
LABEL_74:
            v100[1] = v10;
            v100[2] = 0;
            goto LABEL_5;
          }
          v85 = 0;
          v86 = 1;
          while (v64 != (void *)-4096)
          {
            if (v85)
              v87 = 0;
            else
              v87 = v64 == (void *)-8192;
            if (v87)
              v85 = v63;
            v88 = v62 + v86++;
            v62 = v88 & v61;
            v63 = (uint64_t *)(v60 + 24 * v62);
            v64 = (void *)*v63;
            if ((void *)*v63 == v49)
              goto LABEL_69;
          }
          if (v85)
            v89 = v85;
          else
            v89 = v63;
          v66 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>>>,mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>>>::InsertIntoBucket<mlir::Operation * const&,std::pair<mlir::Operation *,decltype(nullptr)>>(v101, v89, &v108, (uint64_t *)&v111);
          if (v66[2])
            goto LABEL_63;
          goto LABEL_77;
        }
      }
      else
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v56);
        v58 = v57;
        v111 = v49;
        v112 = 0;
        v59 = *(_DWORD *)(a1 + 56);
        if (v59)
          goto LABEL_68;
      }
      v66 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>>>,mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>>>::InsertIntoBucket<mlir::Operation * const&,std::pair<mlir::Operation *,decltype(nullptr)>>(v101, 0, &v108, (uint64_t *)&v111);
      if (v66[2])
        goto LABEL_63;
LABEL_77:
      v100 = v66;
      v58 = (mlir *)v66[1];
      if (v58)
        v67 = v58 == (mlir *)v10;
      else
        v67 = 1;
      if (v67)
        goto LABEL_74;
LABEL_81:
      while (1)
      {
        v68 = v58;
        mlir::getEffectsRecursively(v58, (uint64_t)&v111);
        if (!v115)
          break;
        if ((_DWORD)v112)
        {
          v70 = (uint64_t **)v111;
          v71 = 40 * v112;
          do
          {
            v72 = **v70;
            if ((v73 & 1) == 0)
            {
              if (v74)
              {
                v109 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Write]";
                v110 = 76;
                v75 = llvm::StringRef::find((uint64_t *)&v109, "DesiredTypeName = ", 0x12uLL, 0);
                if (v110 >= v75)
                  v76 = v75;
                else
                  v76 = v110;
                v77 = &v109[v76];
                v78 = v110 - v76;
                v79 = 18;
                if (v78 < 0x12)
                  v79 = v78;
                v80 = v78 - v79;
                if (v80 >= v80 - 1)
                  v81 = v80 - 1;
                else
                  v81 = v80;
                mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
              }
            }
            if (v72 == v69[283])
              goto LABEL_107;
            v70 += 5;
            v71 -= 40;
          }
          while (v71);
        }
        v82 = (mlir::GenericProgramPoint *)*((_QWORD *)v68 + 1);
        if (v82 == (mlir::GenericProgramPoint *)(*((_QWORD *)v68 + 2) + 32))
        {
          v58 = 0;
          if (v115)
          {
LABEL_102:
            if (v111 != v113)
              free(v111);
          }
        }
        else
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v82);
          v58 = v83;
          if (v115)
            goto LABEL_102;
        }
        if (!v58 || v58 == (mlir *)v10)
          goto LABEL_74;
      }
LABEL_107:
      v84 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
      v100[1] = (uint64_t)v68;
      v100[2] = (uint64_t)v84;
      if (v115 && v111 != v113)
        free(v111);
      v10 = v107;
LABEL_63:
      v51 = *(_QWORD *)(a2 + 128);
      v53 = *(_QWORD *)(v51 + 16);
      v54 = *v52;
      v55 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *>,32ul,8ul>::Allocate<llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *>>(a2);
      v55[2] = v10;
      v55[3] = v10;
      *v55 = v53;
      v55[1] = v54;
      *v52 = (uint64_t)v55;
      *(_QWORD *)(v51 + 16) = v55;
LABEL_5:
      v6 = (mlir::GenericProgramPoint *)*((_QWORD *)v6 + 1);
      if (v6 == v5)
        goto LABEL_125;
    }
    v46 = llvm::all_of<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,BOOL mlir::MemoryEffectOpInterface::onlyHasEffect<mlir::MemoryEffects::Read>(void)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & const&)#1}>((uint64_t)&v111);
    v47 = v111;
    if (v111 == v113)
      goto LABEL_60;
LABEL_59:
    free(v47);
    goto LABEL_60;
  }
LABEL_125:
  v90 = *(_DWORD *)(a1 + 48);
  if (v90 || *(_DWORD *)(a1 + 52))
  {
    v91 = (_QWORD *)(a1 + 40);
    v92 = *(_DWORD *)(a1 + 56);
    if (v92 > 4 * v90 && v92 >= 0x41)
    {
      llvm::DenseMap<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>>>::shrink_and_clear((uint64_t)v91);
      return;
    }
    if (!v92)
      goto LABEL_138;
    v93 = (_QWORD *)*v91;
    v94 = 24 * v92 - 24;
    if (v94 >= 0x18)
    {
      v96 = v94 / 0x18 + 1;
      v95 = &v93[3 * (v96 & 0x1FFFFFFFFFFFFFFELL)];
      v97 = v96 & 0x1FFFFFFFFFFFFFFELL;
      v98 = (_QWORD *)*v91;
      do
      {
        *v98 = -4096;
        v98[3] = -4096;
        v98 += 6;
        v97 -= 2;
      }
      while (v97);
      if (v96 == (v96 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_138;
    }
    else
    {
      v95 = (_QWORD *)*v91;
    }
    v99 = &v93[3 * v92];
    do
    {
      *v95 = -4096;
      v95 += 3;
    }
    while (v95 != v99);
LABEL_138:
    *(_QWORD *)(a1 + 48) = 0;
  }
}

int32x2_t **llvm::ScopedHashTableScope<mlir::Operation *,mlir::Operation *,`anonymous namespace'::SimpleOperationInfo,llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *>,32ul,8ul>>::~ScopedHashTableScope(int32x2_t **a1)
{
  int32x2_t *v2;
  int32x2_t *v3;
  int32x2_t *v4;
  uint64_t *v5;
  __int32 v6;
  int32x2_t v7;
  __int32 v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v2 = *a1;
  (*a1)[16] = (int32x2_t)a1[1];
  v3 = a1[2];
  if (v3)
  {
    do
    {
      v5 = (uint64_t *)&v3[2];
      if (v3[1])
      {
      }
      else
      {
        v6 = v2[15].i32[0];
        if (v6)
        {
          v7 = v2[13];
          v8 = v6 - 1;
          v9 = (v6 - 1) & mlir::OperationEquivalence::computeHash(*v5, (uint64_t (*)(uint64_t, _QWORD))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::directHashValue, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::ignoreHashValue, 1);
          v10 = (uint64_t *)(*(_QWORD *)&v7 + 16 * v9);
          v11 = *v5;
          v12 = *v10;
          if (*v5 == *v10)
          {
LABEL_16:
            *v10 = -8192;
            v2[14] = vadd_s32(v2[14], (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v13 = 1;
            while (1)
            {
              if (v12 != -4096 && v12 != -8192 && v11 != -8192 && v11 != -4096)
                mlir::OperationEquivalence::isEquivalentTo(v11, v12, 1);
              if (v12 == -4096)
                break;
              v14 = v9 + v13++;
              v9 = v14 & v8;
              v10 = (uint64_t *)(*(_QWORD *)&v7 + 16 * (v14 & v8));
              v11 = *v5;
              v12 = *v10;
              if (*v5 == *v10)
                goto LABEL_16;
            }
          }
        }
      }
      v4 = (int32x2_t *)*v3;
      a1[2] = (int32x2_t *)*v3;
      v2 = *a1;
      *v3 = **a1;
      *v2 = (int32x2_t)v3;
      v3 = v4;
    }
    while (v4);
  }
  return a1;
}

void std::deque<std::unique_ptr<`anonymous namespace'::CSEDriver::CFGStackNode>>::emplace_back<std::unique_ptr<`anonymous namespace'::CSEDriver::CFGStackNode>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  __int128 *v81;
  _OWORD *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  int64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  _OWORD *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  __int128 *v120;
  _OWORD *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;

  v2 = a2;
  v4 = *(char **)(a1 + 16);
  v5 = *(char **)(a1 + 8);
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v8 = *(_QWORD *)(a1 + 32);
  if (v7 != *(_QWORD *)(a1 + 40) + v8)
    goto LABEL_96;
  v9 = v8 >= 0x200;
  v10 = v8 - 512;
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = v10;
    v11 = v5 + 8;
    v12 = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 8) = v5 + 8;
    if (v4 != *(char **)(a1 + 24))
    {
LABEL_94:
      *(_QWORD *)v4 = v12;
      goto LABEL_95;
    }
    v13 = *(char **)a1;
    if ((unint64_t)v11 > *(_QWORD *)a1)
    {
      v14 = (uint64_t)&v11[-*(_QWORD *)a1] >> 3;
      if (v14 >= -1)
        v15 = v14 + 1;
      else
        v15 = v14 + 2;
      v16 = v15 >> 1;
      v17 = -v16;
      v18 = &v11[-8 * v16];
      v19 = v4 - v11;
      if (v4 != v11)
      {
        memmove(&v11[-8 * v16], v11, v4 - v11);
        v4 = *(char **)(a1 + 8);
      }
      v20 = &v4[8 * v17];
      v4 = &v18[v19];
      *(_QWORD *)(a1 + 8) = v20;
      *(_QWORD *)(a1 + 16) = &v18[v19];
      goto LABEL_94;
    }
    v39 = (v4 - v13) >> 2;
    if (v4 == v13)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_110;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v4 - v11;
    v44 = v4 == v11;
    v4 = v43;
    if (!v44)
    {
      v4 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v103 = *(_QWORD *)v11;
          v11 += 8;
          *(_QWORD *)v47 = v103;
          v47 += 8;
        }
        while (v47 != v4);
        goto LABEL_92;
      }
      v96 = &v42[8 * v40];
      v47 = v96;
      if ((unint64_t)(v96 - v11) < 0x20)
        goto LABEL_91;
      v97 = (v46 >> 3) + 1;
      v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v98];
      v11 += v98;
      v99 = (__int128 *)(v5 + 24);
      v100 = v96 + 16;
      v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v102 = *v99;
        *(v100 - 1) = *(v99 - 1);
        *v100 = v102;
        v99 += 2;
        v100 += 2;
        v101 -= 4;
      }
      while (v101);
      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v13)
    {
      operator delete(v13);
      v4 = *(char **)(a1 + 16);
    }
    goto LABEL_94;
  }
  v21 = v6 >> 3;
  v22 = *(char **)a1;
  v23 = *(char **)(a1 + 24);
  v24 = (uint64_t)&v23[-*(_QWORD *)a1];
  if (v6 >> 3 < (unint64_t)(v24 >> 3))
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v23 != v4)
    {
      *(_QWORD *)v4 = v25;
LABEL_95:
      *(_QWORD *)(a1 + 16) += 8;
      goto LABEL_96;
    }
    if (v5 == v22)
    {
      v71 = (v23 - v5) >> 2;
      if (v4 == v5)
        v71 = 1;
      if (v71 >> 61)
        goto LABEL_110;
      v72 = (v71 + 3) >> 2;
      v73 = 8 * v71;
      v74 = (char *)operator new(8 * v71);
      v48 = &v74[8 * v72];
      v75 = v48;
      if (v4 != v5)
      {
        v75 = &v48[8 * v21];
        v76 = &v74[8 * v72];
        v77 = v5;
        if ((unint64_t)(v6 - 8) < 0x38)
          goto LABEL_113;
        v78 = &v74[8 * v72];
        v76 = v78;
        v77 = v5;
        if ((unint64_t)(v78 - v5) < 0x20)
          goto LABEL_113;
        v79 = ((unint64_t)(v6 - 8) >> 3) + 1;
        v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
        v76 = &v48[v80];
        v77 = &v5[v80];
        v81 = (__int128 *)(v5 + 16);
        v82 = v78 + 16;
        v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *v81;
          *(v82 - 1) = *(v81 - 1);
          *v82 = v84;
          v81 += 2;
          v82 += 2;
          v83 -= 4;
        }
        while (v83);
        if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v85 = *(_QWORD *)v77;
            v77 += 8;
            *(_QWORD *)v76 = v85;
            v76 += 8;
          }
          while (v76 != v75);
        }
      }
      *(_QWORD *)a1 = v74;
      *(_QWORD *)(a1 + 8) = v48;
      *(_QWORD *)(a1 + 16) = v75;
      *(_QWORD *)(a1 + 24) = &v74[v73];
      if (v5)
      {
        operator delete(v5);
        v48 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v48 = v5;
    }
    *((_QWORD *)v48 - 1) = v26;
    v86 = *(char **)(a1 + 8);
    v87 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v86 - 8;
    v88 = *((_QWORD *)v86 - 1);
    *(_QWORD *)(a1 + 8) = v86;
    if (v87 != *(char **)(a1 + 24))
    {
LABEL_79:
      *(_QWORD *)v87 = v88;
      goto LABEL_95;
    }
    v89 = *(char **)a1;
    if ((unint64_t)v86 > *(_QWORD *)a1)
    {
      v90 = (uint64_t)&v86[-*(_QWORD *)a1] >> 3;
      if (v90 >= -1)
        v91 = v90 + 1;
      else
        v91 = v90 + 2;
      v92 = v91 >> 1;
      v93 = -v92;
      v94 = &v86[-8 * v92];
      v95 = v87 - v86;
      if (v87 != v86)
      {
        memmove(&v86[-8 * v92], v86, v87 - v86);
        v86 = *(char **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 8) = &v86[8 * v93];
      *(_QWORD *)(a1 + 16) = &v94[v95];
      *(_QWORD *)&v94[v95] = v88;
      goto LABEL_95;
    }
    v108 = (v87 - v89) >> 2;
    if (v87 == v89)
      v108 = 1;
    if (!(v108 >> 61))
    {
      v109 = v108 >> 2;
      v110 = 8 * v108;
      v111 = (char *)operator new(8 * v108);
      v112 = &v111[8 * v109];
      v113 = v87 - v86;
      v44 = v87 == v86;
      v87 = v112;
      if (v44)
        goto LABEL_108;
      v87 = &v112[v113 & 0xFFFFFFFFFFFFFFF8];
      v114 = v113 - 8;
      if ((unint64_t)(v113 - 8) >= 0x38)
      {
        v116 = &v111[8 * v109];
        v115 = v116;
        if ((unint64_t)(v116 - v86) >= 0x20)
        {
          v117 = (v114 >> 3) + 1;
          v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
          v115 = &v112[v118];
          v119 = &v86[v118];
          v120 = (__int128 *)(v86 + 16);
          v121 = v116 + 16;
          v122 = v117 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v123 = *v120;
            *(v121 - 1) = *(v120 - 1);
            *v121 = v123;
            v120 += 2;
            v121 += 2;
            v122 -= 4;
          }
          while (v122);
          v86 = v119;
          if (v117 == (v117 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_108:
            *(_QWORD *)a1 = v111;
            *(_QWORD *)(a1 + 8) = v112;
            *(_QWORD *)(a1 + 16) = v87;
            *(_QWORD *)(a1 + 24) = &v111[v110];
            if (v89)
            {
              operator delete(v89);
              v87 = *(char **)(a1 + 16);
            }
            goto LABEL_79;
          }
        }
      }
      else
      {
        v115 = &v111[8 * v109];
      }
      do
      {
        v124 = *(_QWORD *)v86;
        v86 += 8;
        *(_QWORD *)v115 = v124;
        v115 += 8;
      }
      while (v115 != v87);
      goto LABEL_108;
    }
LABEL_110:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v27 = v24 >> 2;
  if (v23 == v22)
    v28 = 1;
  else
    v28 = v27;
  if (v28 >> 61)
    goto LABEL_110;
  v29 = (char *)operator new(8 * v28);
  v30 = &v29[8 * v21];
  v31 = &v29[8 * v28];
  v32 = operator new(0x1000uLL);
  v33 = v32;
  if (v21 == v28)
  {
    if (v6 < 1)
    {
      if (v4 == v5)
        v49 = 1;
      else
        v49 = v6 >> 2;
      if (v49 >> 61)
        goto LABEL_110;
      v50 = (char *)operator new(8 * v49);
      v30 = &v50[8 * (v49 >> 2)];
      v31 = &v50[8 * v49];
      operator delete(v29);
      v51 = *(char **)(a1 + 8);
      v4 = *(char **)(a1 + 16);
      v29 = v50;
      *(_QWORD *)v30 = v33;
      v35 = v30 + 8;
      if (v4 != v51)
      {
        while (1)
        {
LABEL_47:
          if (v30 == v29)
          {
            if (v35 >= v31)
            {
              v56 = (v31 - v30) >> 2;
              if (v31 == v30)
                v56 = 1;
              if (v56 >> 61)
                goto LABEL_110;
              v57 = (v56 + 3) >> 2;
              v58 = 8 * v56;
              v59 = (char *)operator new(8 * v56);
              v29 = v59;
              v52 = &v59[8 * v57];
              v37 = v52;
              v60 = v35 - v30;
              if (v35 != v30)
              {
                v37 = &v52[v60 & 0xFFFFFFFFFFFFFFF8];
                v61 = v60 - 8;
                v62 = &v59[8 * v57];
                v63 = v30;
                if (v61 < 0x38)
                  goto LABEL_114;
                v62 = &v59[8 * v57];
                v63 = v30;
                if ((unint64_t)(v62 - v30) < 0x20)
                  goto LABEL_114;
                v64 = (v61 >> 3) + 1;
                v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
                v62 = &v52[v65];
                v63 = &v30[v65];
                v66 = (__int128 *)(v30 + 16);
                v67 = &v59[8 * v57 + 16];
                v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v69 = *v66;
                  *((_OWORD *)v67 - 1) = *(v66 - 1);
                  *(_OWORD *)v67 = v69;
                  v66 += 2;
                  v67 += 32;
                  v68 -= 4;
                }
                while (v68);
                if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_114:
                  do
                  {
                    v70 = *(_QWORD *)v63;
                    v63 += 8;
                    *(_QWORD *)v62 = v70;
                    v62 += 8;
                  }
                  while (v62 != v37);
                }
              }
              v31 = &v59[v58];
              operator delete(v30);
            }
            else
            {
              v54 = (v31 - v35) >> 3;
              if (v54 >= -1)
                v55 = v54 + 1;
              else
                v55 = v54 + 2;
              v37 = &v35[8 * (v55 >> 1)];
              v52 = &v30[8 * (v55 >> 1)];
              if (v35 == v30)
              {
                v29 = v35;
              }
              else
              {
                memmove(&v30[8 * (v55 >> 1)], v30, v35 - v30);
                v29 = v30;
              }
            }
          }
          else
          {
            v52 = v30;
            v37 = v35;
          }
          v53 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *((_QWORD *)v52 - 1) = v53;
          v36 = v52 - 8;
          v35 = v37;
          v30 = v36;
          if (v4 == *(char **)(a1 + 8))
            goto LABEL_29;
        }
      }
      goto LABEL_28;
    }
    v34 = v21 + 2;
    if (v21 >= -1)
      v34 = v21 + 1;
    v30 -= 8 * (v34 >> 1);
  }
  *(_QWORD *)v30 = v32;
  v35 = v30 + 8;
  if (v4 != v5)
    goto LABEL_47;
LABEL_28:
  v36 = v30;
  v37 = v35;
LABEL_29:
  v38 = *(char **)a1;
  *(_QWORD *)a1 = v29;
  *(_QWORD *)(a1 + 8) = v36;
  *(_QWORD *)(a1 + 16) = v37;
  *(_QWORD *)(a1 + 24) = v31;
  v2 = a2;
  if (v38)
    operator delete(v38);
LABEL_96:
  v104 = *(_QWORD *)(a1 + 40);
  v105 = v104 + *(_QWORD *)(a1 + 32);
  v106 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v105 >> 6) & 0x3FFFFFFFFFFFFF8));
  v107 = *v2;
  *v2 = 0;
  *(_QWORD *)(v106 + 8 * (v105 & 0x1FF)) = v107;
  *(_QWORD *)(a1 + 40) = v104 + 1;
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsIsolatedFromAbove>(void ***a1)
{
  unsigned __int8 v1;
  void **v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void ***v12;
  const char *v13;
  unint64_t v14;

  if ((v1 & 1) == 0)
  {
    v12 = a1;
    a1 = v12;
    if (v4)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      v14 = 91;
      v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5)
        v6 = v5;
      else
        v6 = v14;
      v7 = &v13[v6];
      v8 = v14 - v6;
      if (v14 - v6 >= 0x12)
        v9 = 18;
      else
        v9 = v14 - v6;
      v10 = v8 - v9;
      if (v10 >= v10 - 1)
        v11 = v10 - 1;
      else
        v11 = v10;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      a1 = v12;
    }
  }
  v2 = *a1;
  if (v2[2] == &mlir::detail::TypeIDResolver<void,void>::id)
    return 1;
  else
    return (*((uint64_t (**)(void **, uint64_t))*v2 + 4))(v2, mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id);
}

uint64_t llvm::ScopedHashTable<mlir::Operation *,mlir::Operation *,`anonymous namespace'::SimpleOperationInfo,llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *>,32ul,8ul>>::lookup(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v3 = *(_DWORD *)(a1 + 120);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 104);
    v6 = v3 - 1;
    LODWORD(v7) = v6 & mlir::OperationEquivalence::computeHash(a2, (uint64_t (*)(uint64_t, _QWORD))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::directHashValue, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::ignoreHashValue, 1);
    v8 = (uint64_t *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_15;
    if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(v5 + 16 * v7);
        if (v9 == a2)
        {
          v8 = (uint64_t *)(v5 + 16 * v7);
          goto LABEL_15;
        }
      }
    }
    else
    {
      v12 = 1;
      while (1)
      {
        if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
          mlir::OperationEquivalence::isEquivalentTo(a2, v9, 1);
        if (v9 == -4096)
          break;
        v13 = v7 + v12++;
        LODWORD(v7) = v13 & v6;
        v8 = (uint64_t *)(v5 + 16 * (v13 & v6));
        v9 = *v8;
        if (*v8 == a2)
          goto LABEL_15;
      }
    }
  }
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 120));
LABEL_15:
  if (v8 == (uint64_t *)(*(_QWORD *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 120)))
    return 0;
  else
    return *(_QWORD *)(v8[1] + 24);
}

void `anonymous namespace'::CSEDriver::replaceUsesAndDelete(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v26;
  mlir::detail::OpResultImpl *v27;
  uint64_t i;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *NextResultAtOffset;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  mlir::detail::OpResultImpl *v89;
  uint64_t v90;
  uint64_t v93;
  unint64_t v94[2];
  unint64_t v95;
  uint64_t v96;
  unint64_t v97[2];
  unint64_t v98[2];
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v5 = a3;
  v6 = a1;
  v103 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v7 = *(_QWORD *)(*a1 + 16);
    if (v7 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(*a1 + 16)))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v5, a4);
    v8 = *v6;
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9)
      v10 = v5 - 16;
    else
      v10 = 0;
    mlir::ValueRange::ValueRange(v98, v10, v9);
    v11 = *(unsigned int *)(a4 + 36);
    if ((_DWORD)v11)
      v12 = a4 - 16;
    else
      v12 = 0;
    mlir::ValueRange::ValueRange(v97, v12, v11);
    mlir::RewriterBase::replaceAllUsesWith(v8, v98[0], v98[1], v97[0], v97[1]);
    v14 = (char *)v6[2];
    v13 = v6[3];
    if ((unint64_t)v14 >= v13)
    {
      v15 = (char *)v6[1];
      v16 = (v14 - v15) >> 3;
      v17 = v16 + 1;
      if (!((unint64_t)(v16 + 1) >> 61))
      {
        v18 = v13 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (!v19)
        {
          v20 = 0;
          v21 = (char *)(8 * v16);
          v22 = 0;
          *(_QWORD *)(8 * v16) = v5;
          v23 = 8 * v16 + 8;
          v24 = (char *)(v14 - v15);
          if (v14 == v15)
            goto LABEL_104;
LABEL_89:
          v68 = (unint64_t)(v24 - 8);
          if (v68 < 0x58)
            goto LABEL_115;
          if ((unint64_t)(v15 - v20) < 0x20)
            goto LABEL_115;
          v69 = (v68 >> 3) + 1;
          v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          v71 = &v14[-v70];
          v21 -= v70;
          v72 = &v20[8 * v16 - 16];
          v73 = v14 - 16;
          v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *(_OWORD *)v73;
            *((_OWORD *)v72 - 1) = *((_OWORD *)v73 - 1);
            *(_OWORD *)v72 = v75;
            v72 -= 32;
            v73 -= 32;
            v74 -= 4;
          }
          while (v74);
          v14 = v71;
          if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_115:
            do
            {
              v76 = *((_QWORD *)v14 - 1);
              v14 -= 8;
              *((_QWORD *)v21 - 1) = v76;
              v21 -= 8;
            }
            while (v14 != v15);
          }
LABEL_103:
          v14 = (char *)v6[1];
          goto LABEL_104;
        }
        if (!(v19 >> 61))
        {
          v20 = (char *)operator new(8 * v19);
          v21 = &v20[8 * v16];
          v22 = &v20[8 * v19];
          *(_QWORD *)v21 = v5;
          v23 = (uint64_t)(v21 + 8);
          v24 = (char *)(v14 - v15);
          if (v14 == v15)
            goto LABEL_104;
          goto LABEL_89;
        }
LABEL_112:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      goto LABEL_111;
    }
    goto LABEL_77;
  }
  v93 = a2;
  v88 = *(_QWORD *)(*a1 + 16);
  if (v88 && mlir::RewriterBase::Listener::classof(v88))
  {
    v26 = *(_DWORD *)(a3 + 36);
    v27 = (mlir::detail::OpResultImpl *)(a3 - 16);
    if (!v26)
      v27 = 0;
    v89 = v27;
    v90 = *(unsigned int *)(a3 + 36);
    if (v26)
    {
      for (i = 0; i != v90; ++i)
      {
        v29 = *(_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v89, i);
        v30 = *(_DWORD *)(a2 + 120);
        if (v29)
          v31 = v30 == 0;
        else
          v31 = 1;
        if (!v31)
        {
          if (!v30)
            goto LABEL_47;
LABEL_35:
          v32 = v29[2];
          v33 = *(_QWORD *)(a2 + 104);
          v34 = v30 - 1;
          v35 = v34 & mlir::OperationEquivalence::computeHash(v32, (uint64_t (*)(uint64_t, _QWORD))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::directHashValue, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::ignoreHashValue, 1);
          v36 = *(_QWORD *)(v33 + 16 * v35);
          if (v36 == v32)
            continue;
          if ((v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v37 = 1;
            do
            {
              if (v36 == -4096)
                goto LABEL_47;
              v38 = v35 + v37++;
              v35 = v38 & v34;
              v36 = *(_QWORD *)(v33 + 16 * (v38 & v34));
            }
            while (v36 != v32);
            continue;
          }
          v39 = 1;
          while (1)
          {
            if ((v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
              mlir::OperationEquivalence::isEquivalentTo(v32, v36, 1);
            if (v36 == -4096)
              break;
            v40 = v35 + v39++;
            v35 = v40 & v34;
            v36 = *(_QWORD *)(v33 + 16 * (v40 & v34));
            if (v36 == v32)
              goto LABEL_29;
          }
LABEL_47:
          while (1)
          {
            v29 = (_QWORD *)*v29;
            if (!v29)
              break;
            v30 = *(_DWORD *)(a2 + 120);
            if (v30)
              goto LABEL_35;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 40))(v88, a3, a4);
LABEL_29:
        ;
      }
    }
  }
  v41 = *a1;
  v42 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v42)
    v43 = a3 - 16;
  else
    v43 = 0;
  mlir::ValueRange::ValueRange(&v95, v43, v42);
  v44 = *(unsigned int *)(a4 + 36);
  if ((_DWORD)v44)
    v45 = a4 - 16;
  else
    v45 = 0;
  mlir::ValueRange::ValueRange(v94, v45, v44);
  v46 = v95;
  v47 = v96;
  v48 = v94[0];
  v49 = v94[1];
  v99 = v95;
  v100 = 0;
  v101 = v94[0];
  v102 = 0;
  if (v96)
  {
    v50 = 0;
    v51 = 0;
    do
    {
      if (v101 == v48 && v51 == v49)
        break;
      v53 = (uint64_t **)mlir::ValueRange::dereference_iterator(&v99, v50);
      v54 = (uint64_t *)mlir::ValueRange::dereference_iterator(&v101, v102);
      v50 = v100 + 1;
      v51 = v102 + 1;
      ++v100;
      ++v102;
    }
    while (v99 != v46 || v50 != v47);
  }
  v5 = a3;
  v56 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v56)
    v57 = a3 - 16;
  else
    v57 = 0;
  v6 = a1;
  if (!(_DWORD)v56)
  {
LABEL_76:
    v14 = (char *)a1[2];
    v60 = a1[3];
    if ((unint64_t)v14 >= v60)
    {
      v61 = (char *)a1[1];
      v62 = (v14 - v61) >> 3;
      v63 = v62 + 1;
      if (!((unint64_t)(v62 + 1) >> 61))
      {
        v64 = v60 - (_QWORD)v61;
        if (v64 >> 2 > v63)
          v63 = v64 >> 2;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          if (v65 >> 61)
            goto LABEL_112;
          v66 = (char *)operator new(8 * v65);
          v21 = &v66[8 * v62];
          v22 = &v66[8 * v65];
          *(_QWORD *)v21 = a3;
          v23 = (uint64_t)(v21 + 8);
          v67 = (char *)(v14 - v61);
          if (v14 == v61)
          {
LABEL_104:
            v6[1] = (uint64_t)v21;
            v6[2] = v23;
            v6[3] = (uint64_t)v22;
            if (v14)
              operator delete(v14);
            goto LABEL_106;
          }
        }
        else
        {
          v66 = 0;
          v21 = (char *)(8 * v62);
          v22 = 0;
          *(_QWORD *)(8 * v62) = a3;
          v23 = 8 * v62 + 8;
          v67 = (char *)(v14 - v61);
          if (v14 == v61)
            goto LABEL_104;
        }
        v77 = (unint64_t)(v67 - 8);
        if (v77 < 0x58)
          goto LABEL_116;
        if ((unint64_t)(v61 - v66) < 0x20)
          goto LABEL_116;
        v78 = (v77 >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v80 = &v14[-v79];
        v21 -= v79;
        v81 = &v66[8 * v62 - 16];
        v82 = v14 - 16;
        v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
          *(_OWORD *)v81 = v84;
          v81 -= 32;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        v14 = v80;
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_116:
          do
          {
            v85 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v21 - 1) = v85;
            v21 -= 8;
          }
          while (v14 != v61);
        }
        goto LABEL_103;
      }
LABEL_111:
      abort();
    }
LABEL_77:
    *(_QWORD *)v14 = v5;
    v23 = (uint64_t)(v14 + 8);
LABEL_106:
    v6[2] = v23;
    goto LABEL_107;
  }
  if (!*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(a3 - 16, 0))
  {
    v58 = 1;
    while (v56 != v58)
    {
      NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v57, v58++);
      if (*NextResultAtOffset)
        goto LABEL_107;
    }
    goto LABEL_76;
  }
LABEL_107:
  if (*(_UNKNOWN **)(**(_QWORD **)(a4 + 24) + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
  {
    v86 = *(_QWORD *)(v5 + 24);
    if (*(_UNKNOWN **)(*(_QWORD *)v86 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
      *(_QWORD *)(a4 + 24) = v86;
  }
  ++v6[8];
}

BOOL llvm::all_of<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,BOOL mlir::MemoryEffectOpInterface::onlyHasEffect<mlir::MemoryEffects::Read>(void)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & const&)#1}>(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  __guard *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard v8;
  _BOOL8 result;
  BOOL v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  const char *v23;
  unint64_t v24;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    return 1;
  v2 = 40 * v1;
  v3 = *(uint64_t ***)a1;
  v4 = v2 - 40;
  do
  {
    v6 = **v3;
    if ((v7 & 1) == 0)
    {
      v21 = v4;
      v22 = v3;
      v20 = **v3;
      v6 = v20;
      v4 = v21;
      v3 = v22;
      if (v11)
      {
        v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Read]";
        v24 = 75;
        v12 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
        if (v24 >= v12)
          v13 = v12;
        else
          v13 = v24;
        v14 = &v23[v13];
        v15 = v24 - v13;
        v16 = 18;
        if (v15 < 0x12)
          v16 = v15;
        v17 = (uint64_t)&v14[v16];
        v18 = v15 - v16;
        if (v18 >= v18 - 1)
          v19 = v18 - 1;
        else
          v19 = v18;
        mlir::detail::TypeIDResolver<mlir::MemoryEffects::Read,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v17, v19);
        v6 = v20;
        v4 = v21;
        v3 = v22;
      }
    }
    v8 = v5[274];
    result = v6 == v8;
    v10 = v6 != v8 || v4 == 0;
    v4 -= 40;
    v3 += 5;
  }
  while (!v10);
  return result;
}

unint64_t mlir::OperationEquivalence::directHashValue(unint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v9 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v7 = v6;
    a1 = v9;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v8;
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v9;
    }
  }
  v3 = 0x9DDFEA08EB382D69 * ((v2[19] + 8 * a1) ^ HIDWORD(a1));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v3 >> 47) ^ v3);
  return 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
}

uint64_t mlir::OperationEquivalence::ignoreHashValue()
{
  return 0;
}

uint64_t llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>>>,mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>>>::InsertIntoBucket<mlir::Operation * const&,std::pair<mlir::Operation *,decltype(nullptr)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    v10 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>::grow(a1, v9);
  v10 = *a3;
  v12 = *(_DWORD *)(a1 + 16) - 1;
  v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & v12;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 24 * v13);
  v14 = *a2;
  if (*a3 != *a2)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = a2;
      v18 = v13 + v16++;
      v13 = v18 & v12;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 24 * (v18 & v12));
      v14 = *a2;
      if (v10 == *a2)
        goto LABEL_4;
    }
    if (v15)
      a2 = v15;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = *a4;
  a2[2] = 0;
  return a2;
}

BOOL llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<`anonymous namespace'::CSEDriver::replaceUsesAndDelete(llvm::ScopedHashTable<mlir::Operation *,mlir::Operation *,`anonymous namespace'::SimpleOperationInfo,llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *>,32ul,8ul>> &,mlir::Operation *,mlir::Operation *,BOOL)::$_0>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v2 = *(_DWORD *)(*(_QWORD *)a1 + 120);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v5 = v2 - 1;
  v6 = v5 & mlir::OperationEquivalence::computeHash(v3, (uint64_t (*)(uint64_t, _QWORD))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::directHashValue, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::ignoreHashValue, 1);
  v7 = *(_QWORD *)(v4 + 16 * v6);
  if (v7 == v3)
    return 0;
  if ((v3 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v8 = 1;
    do
    {
      result = v7 == -4096;
      if (v7 == -4096)
        break;
      result = 0;
      v10 = v6 + v8++;
      v6 = v10 & v5;
      v7 = *(_QWORD *)(v4 + 16 * (v10 & v5));
    }
    while (v7 != v3);
  }
  else
  {
    v11 = 1;
    while (1)
    {
      if ((v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
        mlir::OperationEquivalence::isEquivalentTo(v3, v7, 1);
      if (v7 == -4096)
        break;
      result = 0;
      v12 = v6 + v11++;
      v6 = v12 & v5;
      v7 = *(_QWORD *)(v4 + 16 * (v12 & v5));
      if (v7 == v3)
        return result;
    }
    return 1;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *> *,`anonymous namespace'::SimpleOperationInfo,llvm::detail::DenseMapPair<mlir::Operation *,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *> *>>,mlir::Operation *,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *> *,`anonymous namespace'::SimpleOperationInfo,llvm::detail::DenseMapPair<mlir::Operation *,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *> *>>::operator[](uint64_t a1, uint64_t *a2)
{
  int v4;
  llvm *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v20;
  llvm *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  _QWORD *buffer;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  BOOL v36;
  uint64_t *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  llvm *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  llvm *v59;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(llvm **)a1;
    v6 = v4 - 1;
    v7 = (v4 - 1) & mlir::OperationEquivalence::computeHash(*a2, (uint64_t (*)(uint64_t, _QWORD))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::directHashValue, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::ignoreHashValue, 1);
    v8 = (uint64_t *)((char *)v5 + 16 * v7);
    v9 = *a2;
    v10 = *v8;
    if (*a2 == *v8)
      return v8 + 1;
    v11 = 0;
    v12 = 1;
    while (1)
    {
      if (v10 != -4096 && v10 != -8192 && v9 != -8192 && v9 != -4096)
        mlir::OperationEquivalence::isEquivalentTo(v9, v10, 1);
      if (v10 == -4096)
        break;
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v8;
      v14 = v7 + v12++;
      v7 = v14 & v6;
      v8 = (uint64_t *)((char *)v5 + 16 * (v14 & v6));
      v9 = *a2;
      v10 = *v8;
      if (*a2 == *v8)
        return v8 + 1;
    }
    if (v11)
      v8 = v11;
    v15 = *(_DWORD *)(a1 + 16);
    v20 = *(_DWORD *)(a1 + 8);
    if (4 * v20 + 4 < 3 * v15)
    {
      v16 = v15 + ~v20 - *(_DWORD *)(a1 + 12) > v15 >> 3;
      v17 = *(_DWORD *)(a1 + 16);
      if (v16)
        goto LABEL_20;
      goto LABEL_29;
    }
  }
  else
  {
    v15 = 0;
  }
  v17 = 2 * v15;
LABEL_29:
  v21 = *(llvm **)a1;
  v22 = (v17 - 1) | ((unint64_t)(v17 - 1) >> 1);
  v23 = v22 | (v22 >> 2) | ((v22 | (v22 >> 2)) >> 4);
  v24 = ((v23 | (v23 >> 8)) >> 16) | v23 | (v23 >> 8);
  if ((v24 + 1) > 0x40)
    v25 = v24 + 1;
  else
    v25 = 64;
  *(_DWORD *)(a1 + 16) = v25;
  buffer = llvm::allocate_buffer(16 * v25, (std::align_val_t)8uLL);
  v27 = buffer;
  *(_QWORD *)a1 = buffer;
  v59 = v21;
  if (v21)
  {
    v58 = v15;
    *(_QWORD *)(a1 + 8) = 0;
    v28 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v28)
    {
      v29 = buffer;
      if (((v28 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_38;
      v30 = ((v28 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v29 = &buffer[2 * (v30 & 0x1FFFFFFFFFFFFFFELL)];
      v31 = buffer + 2;
      v32 = v30 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v31 - 2) = -4096;
        *v31 = -4096;
        v31 += 4;
        v32 -= 2;
      }
      while (v32);
      if (v30 != (v30 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_38:
        v33 = &buffer[2 * v28];
        do
        {
          *v29 = -4096;
          v29 += 2;
        }
        while (v29 != v33);
      }
    }
    if (v15)
    {
      v34 = (uint64_t *)v21;
      v35 = (uint64_t *)((char *)v21 + 16 * v15);
      do
      {
        if ((*v34 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v44 = *(llvm **)a1;
          v45 = *(_DWORD *)(a1 + 16) - 1;
          v40 = v45 & mlir::OperationEquivalence::computeHash(*v34, (uint64_t (*)(uint64_t, _QWORD))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::directHashValue, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::ignoreHashValue, 1);
          v41 = (uint64_t *)((char *)v44 + 16 * v40);
          v42 = *v34;
          v43 = *v41;
          if (*v34 != *v41)
          {
            v37 = 0;
            v39 = 1;
            while (1)
            {
              if (v43 != -4096 && v43 != -8192 && v42 != -8192 && v42 != -4096)
                mlir::OperationEquivalence::isEquivalentTo(v42, v43, 1);
              if (v43 == -4096)
                break;
              if (v37)
                v36 = 0;
              else
                v36 = v43 == -8192;
              if (v36)
                v37 = v41;
              v38 = v40 + v39++;
              v40 = v38 & v45;
              v41 = (uint64_t *)((char *)v44 + 16 * (v38 & v45));
              v42 = *v34;
              v43 = *v41;
              if (*v34 == *v41)
                goto LABEL_61;
            }
            if (v37)
              v41 = v37;
          }
LABEL_61:
          *v41 = *v34;
          v41[1] = v34[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v34 += 2;
      }
      while (v34 != v35);
    }
    llvm::deallocate_buffer(v59, (void *)(16 * v58));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v46 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v46)
  {
    v47 = buffer;
    if (((v46 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_90;
    v48 = ((v46 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v47 = &buffer[2 * (v48 & 0x1FFFFFFFFFFFFFFELL)];
    v49 = buffer + 2;
    v50 = v48 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v49 - 2) = -4096;
      *v49 = -4096;
      v49 += 4;
      v50 -= 2;
    }
    while (v50);
    if (v48 != (v48 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_90:
      do
      {
        *v47 = -4096;
        v47 += 2;
      }
      while (v47 != &buffer[2 * v46]);
    }
  }
  v51 = v46 - 1;
  v52 = (v46 - 1) & mlir::OperationEquivalence::computeHash(*a2, (uint64_t (*)(uint64_t, _QWORD))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::directHashValue, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<llvm::hash_code ()(mlir::Value)>::callback_fn<llvm::hash_code ()(mlir::Value)>, (uint64_t)mlir::OperationEquivalence::ignoreHashValue, 1);
  v8 = &v27[2 * v52];
  v18 = *a2;
  v53 = *v8;
  if (*a2 == *v8)
    goto LABEL_21;
  v54 = 0;
  v55 = 1;
  while (1)
  {
    if (v53 != -4096 && v53 != -8192 && v18 != -8192 && v18 != -4096)
      mlir::OperationEquivalence::isEquivalentTo(v18, v53, 1);
    if (v53 == -4096)
      break;
    if (v54)
      v56 = 0;
    else
      v56 = v53 == -8192;
    if (v56)
      v54 = v8;
    v57 = v52 + v55++;
    v52 = v57 & v51;
    v8 = &v27[2 * (v57 & v51)];
    v18 = *a2;
    v53 = *v8;
    if (*a2 == *v8)
      goto LABEL_21;
  }
  if (v54)
    v8 = v54;
LABEL_20:
  v18 = *v8;
LABEL_21:
  ++*(_DWORD *)(a1 + 8);
  if (v18 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v8 = *a2;
  v8[1] = 0;
  return v8 + 1;
}

_QWORD *llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *>,32ul,8ul>::Allocate<llvm::ScopedHashTableVal<mlir::Operation *,mlir::Operation *>>(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  char *v9;
  char *v10;

  result = *(_QWORD **)a1;
  if (result)
  {
    *(_QWORD *)a1 = *result;
  }
  else
  {
    *(_QWORD *)(a1 + 88) += 32;
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      v4 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) - v3 + 32 > *(_QWORD *)(a1 + 16) - v3;
    else
      v4 = 1;
    if (v4)
    {
      v5 = *(_DWORD *)(a1 + 32) >> 7;
      if (v5 >= 0x1E)
        LOBYTE(v5) = 30;
      v6 = 4096 << v5;
      buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
      v8 = *(unsigned int *)(a1 + 32);
      if (v8 >= *(_DWORD *)(a1 + 36))
      {
        v10 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8 + 1, 8);
        buffer = v10;
        LODWORD(v8) = *(_DWORD *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v8) = buffer;
      ++*(_DWORD *)(a1 + 32);
      v9 = &buffer[v6];
      result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a1 + 8) = result + 4;
      *(_QWORD *)(a1 + 16) = v9;
    }
    else
    {
      result = (_QWORD *)((v3 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a1 + 8) = result + 4;
    }
  }
  return result;
}

uint64_t llvm::DenseMap<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::pair<mlir::Operation *,mlir::MemoryEffects::Effect *>>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  unint64_t v6;
  llvm *v7;
  unint64_t v8;
  uint64_t v9;
  llvm *v10;
  llvm *v11;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(24 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = 24 * v1 - 24;
    if (v6 < 0x18)
    {
      v7 = *(llvm **)result;
LABEL_14:
      v11 = (llvm *)((char *)v5 + 24 * v1);
      do
      {
        *(_QWORD *)v7 = -4096;
        v7 = (llvm *)((char *)v7 + 24);
      }
      while (v7 != v11);
      return result;
    }
    v8 = v6 / 0x18 + 1;
    v7 = (llvm *)((char *)v5 + 24 * (v8 & 0x1FFFFFFFFFFFFFFELL));
    v9 = v8 & 0x1FFFFFFFFFFFFFFELL;
    v10 = *(llvm **)result;
    do
    {
      *(_QWORD *)v10 = -4096;
      *((_QWORD *)v10 + 3) = -4096;
      v10 = (llvm *)((char *)v10 + 48);
      v9 -= 2;
    }
    while (v9);
    if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_14;
  }
  return result;
}

void `anonymous namespace'::CSE::~CSE(_anonymous_namespace_::CSE *this)
{
  void *v1;

  mlir::Pass::~Pass(this);
  operator delete(v1);
}

const char *mlir::impl::CSEBase<`anonymous namespace'::CSE>::getName()
{
  return "CSE";
}

const char *mlir::impl::CSEBase<`anonymous namespace'::CSE>::getArgument()
{
  return "cse";
}

const char *mlir::impl::CSEBase<`anonymous namespace'::CSE>::getDescription()
{
  return "Eliminate common sub-expressions";
}

void `anonymous namespace'::CSE::runOnOperation(_anonymous_namespace_::CSE *this)
{
  uint64_t Context;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  mlir::Operation *v7;
  BOOL v8;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  Context = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  memset(&v13[2], 0, 24);
  v13[0] = off_1E0E25938;
  v13[1] = Context;
  v3 = *((_QWORD *)this + 6);
  v9[0] = v3;
  v4 = *(_QWORD *)(v3 + 72);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0 && v5)
  {
    do
    {
      v6 = *(_QWORD *)(v5 + 72);
      v5 = v6 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v6 & 4) == 0 && v5);
  }
  v9[0] = v13;
  memset(&v9[1], 0, 24);
  v9[5] = 0;
  v9[6] = 0;
  v9[4] = mlir::detail::AnalysisMap::getAnalysisImpl<mlir::DominanceInfo,mlir::Operation *>(v3 + 24, (std::recursive_mutex **)v5);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v7 = (mlir::Operation *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v8 = 0;
}

void sub_1806F7EA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, llvm *a18, uint64_t a19, unsigned int a20,int a21,int a22,int a23,int a24)
{
  const void **v24;
  const void **v25;

  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)(v24 + 43));
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)((char *)v24 + 345));
  v25 = v24 + 7;
  if (a12)
  {
    mlir::detail::PreservedAnalyses::preserve<mlir::DominanceInfo>(v25);
    mlir::detail::PreservedAnalyses::preserve<mlir::PostDominanceInfo>(v25);
  }
  else
  {
    mlir::detail::PreservedAnalyses::preserveAll(v25);
  }
  llvm::deallocate_buffer(a18, (void *)(24 * a20));
}

void sub_1806F7EFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  void *v29;

  if (v29)
    operator delete(v29);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)(v28 - 56));
}

uint64_t mlir::impl::CSEBase<`anonymous namespace'::CSE>::clonePass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new(0x160uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  *((_BYTE *)v4 + 40) = 0;
  *((_BYTE *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = (char *)v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = (char *)v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *(_QWORD *)v4 = off_1E0E4DA48;
  *((_QWORD *)v4 + 1) = v5;
  mlir::Pass::Statistic::Statistic((mlir::Pass::Statistic *)((char *)v4 + 344), (mlir::Pass *)v4, "num-cse'd", "Number of operations CSE'd");
  result = mlir::Pass::Statistic::Statistic((mlir::Pass::Statistic *)((char *)v4 + 345), (mlir::Pass *)v4, "num-dce'd", "Number of operations DCE'd");
  *(_QWORD *)v4 = off_1E0E1A4B8;
  *a2 = v4;
  return result;
}

uint64_t mlir::detail::AnalysisMap::getAnalysisImpl<mlir::DominanceInfo,mlir::Operation *>(uint64_t a1, std::recursive_mutex **a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v24;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  const char *v50;
  unint64_t v51;

  if ((v4 & 1) == 0
  {
    v50 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DominanceInfo]";
    v51 = 69;
    v43 = llvm::StringRef::find((uint64_t *)&v50, "DesiredTypeName = ", 0x12uLL, 0);
    if (v51 >= v43)
      v44 = v43;
    else
      v44 = v51;
    v45 = &v50[v44];
    v46 = v51 - v44;
    if (v51 - v44 >= 0x12)
      v47 = 18;
    else
      v47 = v51 - v44;
    v48 = v46 - v47;
    if (v48 >= v48 - 1)
      v49 = v48 - 1;
    else
      v49 = v48;
    mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id >> 9));
    v9 = (_QWORD *)(v6 + 16 * v8);
    v10 = *v9;
    if (mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id == *v9)
      goto LABEL_9;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v6 + 16 * v8);
      if (mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id == v10)
      {
        v9 = (_QWORD *)(v6 + 16 * v8);
        goto LABEL_9;
      }
    }
  }
  v9 = (_QWORD *)(v6 + 16 * v7);
LABEL_9:
  if (v9 == (_QWORD *)(v6 + 16 * v7))
    v13 = (unsigned int *)(a1 + 40);
  else
    v13 = (unsigned int *)(v9 + 1);
  v14 = *v13;
  if (*(_DWORD *)(a1 + 40) == (_DWORD)v14)
  {
    if (a2)
    {
      v50 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DominanceInfo]";
      v51 = 69;
      v15 = llvm::StringRef::find((uint64_t *)&v50, "DesiredTypeName = ", 0x12uLL, 0);
      if (v51 >= v15)
        v16 = v15;
      else
        v16 = v51;
      v17 = &v50[v16];
      v18 = v51 - v16;
      if (v51 - v16 >= 0x12)
        v19 = 18;
      else
        v19 = v51 - v16;
      v20 = (uint64_t)&v17[v19];
      v21 = v18 - v19;
      if (v21 >= v21 - 1)
        v22 = v21 - 1;
      else
        v22 = v21;
      if (v22 >= 6)
      {
        if (*(_DWORD *)v20 == 1919511661 && *(_WORD *)(v20 + 4) == 14906)
        {
          v20 += 6;
          v22 -= 6;
        }
        else if (v22 >= 0x17)
        {
          v24 = *(_QWORD *)v20 == 0x6F6D796E6F6E6128 && *(_QWORD *)(v20 + 8) == 0x73656D616E207375;
          if (v24 && *(_QWORD *)(v20 + 15) == 0x3A3A296563617073)
          {
            v20 += 23;
            v22 -= 23;
          }
        }
      }
      mlir::PassInstrumentor::runBeforeAnalysis(a2, v20, v22, v5, *(_QWORD *)a1);
    }
    v28 = operator new(0x20uLL);
    v28[1] = 0;
    v28[2] = 0;
    *v28 = &unk_1E0E4E308;
    *((_DWORD *)v28 + 6) = 0;
    v50 = (const char *)v5;
    v51 = (unint64_t)v28;
    v27 = llvm::MapVector<mlir::TypeID,std::unique_ptr<mlir::detail::AnalysisConcept>,llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,llvm::SmallVector<std::pair<mlir::TypeID,std::unique_ptr<mlir::detail::AnalysisConcept>>,0u>>::try_emplace<std::unique_ptr<mlir::detail::AnalysisConcept>>(a1 + 8, (double *)&v50, (uint64_t *)&v51);
    v29 = v51;
    v51 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if (a2)
    {
      v50 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DominanceInfo]";
      v51 = 69;
      v30 = llvm::StringRef::find((uint64_t *)&v50, "DesiredTypeName = ", 0x12uLL, 0);
      if (v51 >= v30)
        v31 = v30;
      else
        v31 = v51;
      v32 = &v50[v31];
      v33 = v51 - v31;
      if (v51 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v51 - v31;
      v35 = (uint64_t)&v32[v34];
      v36 = v33 - v34;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      if (v37 >= 6)
      {
        if (*(_DWORD *)v35 == 1919511661 && *(_WORD *)(v35 + 4) == 14906)
        {
          v35 += 6;
          v37 -= 6;
        }
        else if (v37 >= 0x17
               && *(_QWORD *)v35 == 0x6F6D796E6F6E6128
               && *(_QWORD *)(v35 + 8) == 0x73656D616E207375
               && *(_QWORD *)(v35 + 15) == 0x3A3A296563617073)
        {
          v35 += 23;
          v37 -= 23;
        }
      }
      mlir::PassInstrumentor::runAfterAnalysis(a2, v35, v37, v5, *(_QWORD *)a1);
    }
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 32) + 16 * v14;
  }
  return *(_QWORD *)(v27 + 8) + 8;
}

uint64_t llvm::MapVector<mlir::TypeID,std::unique_ptr<mlir::detail::AnalysisConcept>,llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,llvm::SmallVector<std::pair<mlir::TypeID,std::unique_ptr<mlir::detail::AnalysisConcept>>,0u>>::try_emplace<std::unique_ptr<mlir::detail::AnalysisConcept>>(uint64_t a1, double *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  double *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  double *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  const double *v45;
  const double *v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  char **v51;
  unint64_t v52;
  float64x2x2_t v53;

  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_25;
  v8 = *(_QWORD *)a1;
  v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  v10 = (_QWORD *)(*(_QWORD *)a1 + 16 * v9);
  v11 = *v10;
  if (*v10 == v6)
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  v20 = 0;
  v21 = 1;
  while (v11 != -4096)
  {
    if (v20)
      v22 = 0;
    else
      v22 = v11 == -8192;
    if (v22)
      v20 = v10;
    v23 = v9 + v21++;
    v9 = v23 & (v7 - 1);
    v10 = (_QWORD *)(v8 + 16 * v9);
    v11 = *v10;
    if (*v10 == v6)
      return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  }
  v24 = (uint64_t)(v20 ? v20 : v10);
  v25 = *(_DWORD *)(a1 + 8);
  if (4 * v25 + 4 < 3 * v7)
  {
    if (v7 + ~v25 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_6:
      v13 = *(_QWORD *)v24;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_25:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v7);
  v26 = *(_DWORD *)(a1 + 16) - 1;
  v27 = v26 & ((v6 >> 4) ^ (v6 >> 9));
  v24 = *(_QWORD *)a1 + 16 * v27;
  v28 = *(_QWORD *)v24;
  if (*(_QWORD *)v24 != v6)
  {
    v47 = 0;
    v48 = 1;
    while (v28 != -4096)
    {
      if (v47)
        v49 = 0;
      else
        v49 = v28 == -8192;
      if (v49)
        v47 = v24;
      v50 = v27 + v48++;
      v27 = v50 & v26;
      v24 = *(_QWORD *)a1 + 16 * (v50 & v26);
      v28 = *(_QWORD *)v24;
      v13 = v6;
      if (*(_QWORD *)v24 == v6)
        goto LABEL_7;
    }
    if (v47)
      v24 = v47;
    goto LABEL_6;
  }
  v13 = v6;
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v24 = v6;
  *(_DWORD *)(v24 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 32);
  v15 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v24 + 8) = v14;
  if (v14 >= v15)
  {
    v51 = (char **)(a1 + 24);
    v52 = 0;
    v19 = (double *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 24, (void *)(a1 + 40), 0, 16, &v52);
    v29 = *(unsigned int *)(a1 + 32);
    v30 = 16 * v29;
    v31 = &v19[2 * v29];
    *v31 = *a2;
    v32 = *a3;
    *a3 = 0;
    *((_QWORD *)v31 + 1) = v32;
    v33 = *(char **)(a1 + 24);
    if (!(_DWORD)v29)
    {
LABEL_39:
      v40 = v52;
      if (v33 != (char *)(a1 + 40))
        free(v33);
      *(_QWORD *)(a1 + 24) = v19;
      v18 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v18;
      *(_DWORD *)(a1 + 36) = v40;
      return (uint64_t)&v19[2 * v18 - 2];
    }
    v34 = (v29 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v34 >= 7 && (v19 >= (double *)&v33[v30] || v33 >= (char *)&v19[(unint64_t)v30 / 8]))
    {
      v41 = v34 + 1;
      v42 = (v34 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v35 = &v19[2 * v42];
      v36 = &v33[16 * v42];
      v43 = v42;
      v44 = v19;
      v45 = *(const double **)(a1 + 24);
      v46 = v45;
      do
      {
        v53 = vld2q_f64(v46);
        v46 += 4;
        v45[1] = 0.0;
        v45[3] = 0.0;
        vst2q_f64(v44, v53);
        v44 += 4;
        v45 = v46;
        v43 -= 2;
      }
      while (v43);
      if (v41 == v42)
      {
LABEL_34:
        v38 = (uint64_t)(*v51 - 8);
        do
        {
          v39 = *(_QWORD *)(v38 + v30);
          *(_QWORD *)(v38 + v30) = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v30 -= 16;
        }
        while (v30);
        v33 = *v51;
        goto LABEL_39;
      }
    }
    else
    {
      v35 = v19;
      v36 = *(char **)(a1 + 24);
    }
    do
    {
      *v35 = *(double *)v36;
      v37 = *((_QWORD *)v36 + 1);
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v35 + 1) = v37;
      v36 += 16;
      v35 += 2;
    }
    while (v36 != &v33[v30]);
    goto LABEL_34;
  }
  v16 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v14);
  *v16 = *(_QWORD *)a2;
  v17 = *a3;
  *a3 = 0;
  v16[1] = v17;
  v18 = v14 + 1;
  *(_DWORD *)(a1 + 32) = v14 + 1;
  v19 = *(double **)(a1 + 24);
  return (uint64_t)&v19[2 * v18 - 2];
}

void mlir::detail::AnalysisModel<mlir::DominanceInfo>::~AnalysisModel(_QWORD *a1)
{
  *a1 = &unk_1E0E4E308;
  mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase((uint64_t)(a1 + 1));
}

{
  *a1 = &unk_1E0E4E308;
  mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase((uint64_t)(a1 + 1));
}

uint64_t sub_1806F87A8()
{
  uint64_t v0;

  return v0;
}

void sub_1806F87DC()
{
  void *v0;

  operator delete(v0);
}

BOOL mlir::detail::AnalysisModel<mlir::DominanceInfo>::invalidate(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  _BOOL4 v3;

  v3 = mlir::detail::PreservedAnalyses::isPreserved<mlir::DominanceInfo>(a2);
  if (!v3)
    mlir::detail::PreservedAnalyses::unpreserve<mlir::DominanceInfo>(a2);
  return !v3;
}

const void **mlir::detail::PreservedAnalyses::unpreserve<mlir::DominanceInfo>(llvm::SmallPtrSetImplBase *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  const void **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;

  if ((v2 & 1) == 0
  {
    v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DominanceInfo]";
    v21 = 69;
    v13 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
    if (v21 >= v13)
      v14 = v13;
    else
      v14 = v21;
    v15 = &v20[v14];
    v16 = v21 - v14;
    if (v21 - v14 >= 0x12)
      v17 = 18;
    else
      v17 = v21 - v14;
    v18 = v16 - v17;
    if (v18 >= v18 - 1)
      v19 = v18 - 1;
    else
      v19 = v18;
    mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
  }
  v3 = mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id;
  v4 = *((_QWORD *)this + 1);
  if (v4 == *(_QWORD *)this)
  {
    v8 = *((unsigned int *)this + 5);
    result = (const void **)(v4 + 8 * v8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      while (*(_QWORD *)(v4 + v9) != mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id)
      {
        v9 += 8;
        if (v10 == v9)
          goto LABEL_13;
      }
      result = (const void **)(v4 + v9);
    }
LABEL_13:
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    result = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id);
    v4 = *(_QWORD *)this;
    v6 = *((_QWORD *)this + 1);
    if (*result != (const void *)v3)
    {
      v7 = 16;
      if (v6 == v4)
        v7 = 20;
      result = (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  v11 = v6 == v4;
  v12 = 16;
  if (v11)
    v12 = 20;
  if (result != (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v12)))
  {
    *result = (const void *)-2;
    ++*((_DWORD *)this + 6);
  }
  return result;
}

BOOL mlir::detail::PreservedAnalyses::isPreserved<mlir::DominanceInfo>(llvm::SmallPtrSetImplBase *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  const void **BucketFor;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;

  if ((v2 & 1) == 0
  {
    v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DominanceInfo]";
    v22 = 69;
    v14 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
    if (v22 >= v14)
      v15 = v14;
    else
      v15 = v22;
    v16 = &v21[v15];
    v17 = v22 - v15;
    if (v22 - v15 >= 0x12)
      v18 = 18;
    else
      v18 = v22 - v15;
    v19 = v17 - v18;
    if (v19 >= v19 - 1)
      v20 = v19 - 1;
    else
      v20 = v19;
    mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
  }
  v3 = mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id;
  v4 = *((_QWORD *)this + 1);
  if (v4 == *(_QWORD *)this)
  {
    v8 = *((unsigned int *)this + 5);
    BucketFor = (const void **)(v4 + 8 * v8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      while (*(_QWORD *)(v4 + v9) != mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id)
      {
        v9 += 8;
        if (v10 == v9)
          goto LABEL_13;
      }
      BucketFor = (const void **)(v4 + v9);
    }
LABEL_13:
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id);
    v4 = *(_QWORD *)this;
    v6 = *((_QWORD *)this + 1);
    if (*BucketFor != (const void *)v3)
    {
      v7 = 16;
      if (v6 == v4)
        v7 = 20;
      BucketFor = (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  v11 = v6 == v4;
  v12 = 16;
  if (v11)
    v12 = 20;
  return BucketFor != (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v12));
}

const void **mlir::detail::PreservedAnalyses::preserveAll(const void **this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void **v18;
  const char *v19;
  unint64_t v20;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v18 = this;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v10 = v9;
    this = v18;
    if (v10)
    {
      v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::PreservedAnalyses::AllAnalysesType]";
      v20 = 98;
      v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v11)
        v12 = v11;
      else
        v12 = v20;
      v13 = &v19[v12];
      v14 = v20 - v12;
      if (v20 - v12 >= 0x12)
        v15 = 18;
      else
        v15 = v20 - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      this = v18;
    }
  }
  v3 = (const void *)v2[129];
  v4 = this[1];
  if (v4 != *this)
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)this, v3);
  v5 = *((unsigned int *)this + 5);
  if (!(_DWORD)v5)
  {
LABEL_13:
    if (v5 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v5 + 1;
      v4[v5] = v3;
      return this;
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)this, v3);
  }
  v6 = 0;
  v7 = 8 * v5;
  v8 = this[1];
  while ((const void *)*v8 != v3)
  {
    if (*v8 == -2)
      v6 = v8;
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6)
        goto LABEL_13;
      *v6 = v3;
      --*((_DWORD *)this + 6);
      return this;
    }
  }
  return this;
}

const void **mlir::detail::PreservedAnalyses::preserve<mlir::DominanceInfo>(const void **result)
{
  unsigned __int8 v1;
  uint64_t *v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void **v18;
  const char *v19;
  unint64_t v20;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v18 = result;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v10 = v9;
    result = v18;
    if (v10)
    {
      v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DominanceInfo]";
      v20 = 69;
      v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v11)
        v12 = v11;
      else
        v12 = v20;
      v13 = &v19[v12];
      v14 = v20 - v12;
      if (v20 - v12 >= 0x12)
        v15 = 18;
      else
        v15 = v20 - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<mlir::DominanceInfo,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      result = v18;
    }
  }
  v3 = (const void *)v2[135];
  v4 = result[1];
  if (v4 != *result)
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v3);
  v5 = *((unsigned int *)result + 5);
  if (!(_DWORD)v5)
  {
LABEL_13:
    if (v5 < *((_DWORD *)result + 4))
    {
      *((_DWORD *)result + 5) = v5 + 1;
      v4[v5] = v3;
      return result;
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v3);
  }
  v6 = 0;
  v7 = 8 * v5;
  v8 = result[1];
  while ((const void *)*v8 != v3)
  {
    if (*v8 == -2)
      v6 = v8;
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6)
        goto LABEL_13;
      *v6 = v3;
      --*((_DWORD *)result + 6);
      return result;
    }
  }
  return result;
}

const void **mlir::detail::PreservedAnalyses::preserve<mlir::PostDominanceInfo>(const void **result)
{
  unsigned __int8 v1;
  uint64_t *v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void **v18;
  const char *v19;
  unint64_t v20;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v18 = result;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v10 = v9;
    result = v18;
    if (v10)
    {
      v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PostDominanceInfo]";
      v20 = 73;
      v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v11)
        v12 = v11;
      else
        v12 = v20;
      v13 = &v19[v12];
      v14 = v20 - v12;
      if (v20 - v12 >= 0x12)
        v15 = 18;
      else
        v15 = v20 - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<mlir::PostDominanceInfo,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      result = v18;
    }
  }
  v3 = (const void *)v2[141];
  v4 = result[1];
  if (v4 != *result)
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v3);
  v5 = *((unsigned int *)result + 5);
  if (!(_DWORD)v5)
  {
LABEL_13:
    if (v5 < *((_DWORD *)result + 4))
    {
      *((_DWORD *)result + 5) = v5 + 1;
      v4[v5] = v3;
      return result;
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v3);
  }
  v6 = 0;
  v7 = 8 * v5;
  v8 = result[1];
  while ((const void *)*v8 != v3)
  {
    if (*v8 == -2)
      v6 = v8;
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6)
        goto LABEL_13;
      *v6 = v3;
      --*((_DWORD *)result + 6);
      return result;
    }
  }
  return result;
}

_QWORD *mlir::createInlinerPass@<X0>(_QWORD *a1@<X8>)
{
  void *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = operator new(0x520uLL);
  v6[0] = &unk_1E0E50040;
  v6[1] = defaultInlinerOptPipeline;
  v7 = v6;
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v5 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
  }
  *a1 = v3;
  return result;
}

uint64_t defaultInlinerOptPipeline(mlir::OpPassManager *a1)
{
  uint64_t result;
  uint64_t v3;

  mlir::createCanonicalizerPass(&v3);
  mlir::OpPassManager::addPass((_BYTE **)a1, &v3);
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `anonymous namespace'::InlinerPass::InlinerPass(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *Address;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;
  void *v11;
  __n128 v13;
  uint64_t v14;
  int v15;
  int *v16;

  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v4 = (_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x400000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E0E4D8F8;
  v13.n128_u64[0] = (unint64_t)"The default optimizer pipeline used for callables";
  v13.n128_u64[1] = 49;
  v16 = (int *)"canonicalize";
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc,llvm::cl::initializer<char [13]>>((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 152), (uint64_t)"default-pipeline", 16, &v13, (const char **)&v16);
  *(_QWORD *)(a1 + 344) = &off_1E0E4C260;
  *(_QWORD *)(a1 + 576) = &unk_1E0E4C2E0;
  v13.n128_u64[1] = 87;
  mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::ListOption<llvm::cl::desc>(a1 + 592, v4, (uint64_t)"op-pipelines", 12, &v13);
  *(_QWORD *)(a1 + 592) = &unk_1E0E4BF60;
  *(_QWORD *)(a1 + 840) = &unk_1E0E4BFE0;
  v13.n128_u64[0] = (unint64_t)"Maximum number of iterations when inlining within an SCC";
  v13.n128_u64[1] = 56;
  v15 = 4;
  v16 = &v15;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(a1 + 864), v4, (uint64_t)"max-iterations", 14, &v13, &v16);
  *(_QWORD *)(a1 + 864) = off_1E0E4C3E0;
  *(_QWORD *)(a1 + 1056) = &unk_1E0E4C460;
  *(_QWORD *)a1 = off_1E0E15280;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(a1 + 1096) = a1 + 1072;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 1096) = v5;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1096) = 0;
  }
  *(_QWORD *)(a1 + 1104) = a1 + 1120;
  *(_QWORD *)(a1 + 1112) = 0x800000000;
  v13 = 0uLL;
  v14 = 0x1000000000;
  Address = llvm::SmallVectorTemplateBase<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,false>::reserveForParamAndGetAddress(a1 + 1104, (unint64_t)&v13, 1);
  v7 = *(_QWORD *)(a1 + 1104) + 24 * *(unsigned int *)(a1 + 1112);
  *(_QWORD *)v7 = *(_QWORD *)Address;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(Address + 8);
  *(_QWORD *)Address = 0;
  *((_QWORD *)Address + 1) = 0;
  *((_DWORD *)Address + 4) = 0;
  ++*(_DWORD *)(a1 + 1112);
  if (v13.n128_u32[3] && v13.n128_u32[2])
  {
    v8 = 0;
    do
    {
      v9 = *(llvm **)(v13.n128_u64[0] + v8);
      if (v9 != (llvm *)-8 && v9 != 0)
      {
        v11 = (void *)(*(_QWORD *)v9 + 17);
        mlir::OpPassManager::~OpPassManager((llvm *)((char *)v9 + 8));
        llvm::deallocate_buffer(v9, v11);
      }
      v8 += 8;
    }
    while (8 * v13.n128_u32[2] != v8);
  }
  free((void *)v13.n128_u64[0]);
  return a1;
}

_QWORD *std::__function::__func<void (*)(mlir::OpPassManager &),std::allocator<void (*)(mlir::OpPassManager &)>,void ()(mlir::OpPassManager &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E0E50040;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(mlir::OpPassManager &),std::allocator<void (*)(mlir::OpPassManager &)>,void ()(mlir::OpPassManager &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E0E50040;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(mlir::OpPassManager &),std::allocator<void (*)(mlir::OpPassManager &)>,void ()(mlir::OpPassManager &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<void (*)(mlir::OpPassManager &),std::allocator<void (*)(mlir::OpPassManager &)>,void ()(mlir::OpPassManager &)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181245907)
    return a1 + 8;
  if (((v3 & 0x8000000181245907 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181245907))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181245907 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(mlir::OpPassManager &),std::allocator<void (*)(mlir::OpPassManager &)>,void ()(mlir::OpPassManager &)>::target_type()
{
}

void `anonymous namespace'::InlinerPass::~InlinerPass(_anonymous_namespace_::InlinerPass *this)
{
  _anonymous_namespace_::InlinerPass *v2;
  uint64_t v3;
  _anonymous_namespace_::InlinerPass *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  _anonymous_namespace_::InlinerPass *v8;
  uint64_t v9;
  void *v10;
  char *v11;

  *(_QWORD *)this = off_1E0E15280;
  llvm::SmallVector<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,8u>::~SmallVector((uint64_t)this + 1104);
  v2 = (_anonymous_namespace_::InlinerPass *)*((_QWORD *)this + 137);
  if (v2 == (_anonymous_namespace_::InlinerPass *)((char *)this + 1072))
  {
    v3 = 4;
    v2 = (_anonymous_namespace_::InlinerPass *)((char *)this + 1072);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  *(_QWORD *)this = off_1E0E4D8F8;
  *((_QWORD *)this + 108) = &unk_1E0E23658;
  v4 = (_anonymous_namespace_::InlinerPass *)*((_QWORD *)this + 131);
  if (v4 == (_anonymous_namespace_::InlinerPass *)((char *)this + 1024))
  {
    v5 = 4;
    v4 = (_anonymous_namespace_::InlinerPass *)((char *)this + 1024);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  *((_QWORD *)this + 108) = &unk_1E0E23930;
  v6 = (void *)*((_QWORD *)this + 120);
  if (v6 != *((void **)this + 119))
    free(v6);
  v7 = (char *)*((_QWORD *)this + 116);
  if (v7 != (char *)this + 944)
    free(v7);
  llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list((_QWORD *)this + 74);
  *((_QWORD *)this + 43) = &unk_1E0E23450;
  v8 = (_anonymous_namespace_::InlinerPass *)*((_QWORD *)this + 71);
  if (v8 == (_anonymous_namespace_::InlinerPass *)((char *)this + 544))
  {
    v9 = 4;
    v8 = (_anonymous_namespace_::InlinerPass *)((char *)this + 544);
  }
  else
  {
    if (!v8)
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_20:
  *((_QWORD *)this + 62) = &off_1E0E23088;
  if (*((char *)this + 527) < 0)
  {
    operator delete(*((void **)this + 63));
    if ((*((char *)this + 495) & 0x80000000) == 0)
    {
LABEL_22:
      *((_QWORD *)this + 43) = &unk_1E0E23930;
      v10 = (void *)*((_QWORD *)this + 55);
      if (v10 == *((void **)this + 54))
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  else if ((*((char *)this + 495) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(*((void **)this + 59));
  *((_QWORD *)this + 43) = &unk_1E0E23930;
  v10 = (void *)*((_QWORD *)this + 55);
  if (v10 != *((void **)this + 54))
LABEL_23:
    free(v10);
LABEL_24:
  v11 = (char *)*((_QWORD *)this + 51);
  if (v11 != (char *)this + 424)
    free(v11);
  mlir::Pass::~Pass(this);
}

{
  void *v1;

  operator delete(v1);
}

const char *mlir::impl::InlinerBase<`anonymous namespace'::InlinerPass>::getName()
{
  return "Inliner";
}

const char *mlir::impl::InlinerBase<`anonymous namespace'::InlinerPass>::getArgument()
{
  return "inline";
}

const char *mlir::impl::InlinerBase<`anonymous namespace'::InlinerPass>::getDescription()
{
  return "Inline function calls";
}

uint64_t `anonymous namespace'::InlinerPass::initializeOptions(uint64_t a1, __int8 *a2, unint64_t a3)
{
  const std::string::value_type **v4;
  std::string::size_type v6;
  std::string::size_type v7;
  char v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const mlir::detail::OpPassManagerImpl **v14;
  const mlir::detail::OpPassManagerImpl **v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  int8x16_t *OpAnchorName;
  const unsigned __int8 *v20;
  uint64_t v21;
  llvm *v22;
  void *v24;
  uint64_t v25;
  llvm *v26;
  void *v28;
  std::string __p;
  std::string v30;
  _QWORD v31[2];
  void *v32;
  __int128 v33;
  void **v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!mlir::Pass::initializeOptions(a1, a2, a3))
    return 0;
  v4 = (const std::string::value_type **)(a1 + 472);
  if (*(char *)(a1 + 495) < 0)
  {
    v6 = *(_QWORD *)(a1 + 480);
    if (v6)
    {
      std::string::__init_copy_ctor_external(&v30, *v4, v6);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  else if (*(_BYTE *)(a1 + 495))
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 488);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_5:
      __p = v30;
      goto LABEL_10;
    }
LABEL_9:
    std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
LABEL_10:
    v31[0] = __p.__r_.__value_.__l.__size_;
    v7 = __p.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    v9 = operator new(0x20uLL);
    *v9 = &off_1E0E50358;
    v9[1] = v7;
    v9[2] = v31[0];
    *(_QWORD *)((char *)v9 + 23) = *(_QWORD *)((char *)v31 + 7);
    *((_BYTE *)v9 + 31) = v8;
    v34 = (void **)v9;
    std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](&v32, (_QWORD *)(a1 + 1072));
    v10 = v34;
    if (v34 == &v32)
    {
      v11 = 4;
      v10 = &v32;
    }
    else
    {
      if (!v34)
        goto LABEL_19;
      v11 = 5;
    }
    (*((void (**)(void))*v10 + v11))();
LABEL_19:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_23:
        operator delete(v30.__r_.__value_.__l.__data_);
        goto LABEL_26;
      }
    }
    else if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if (*(_WORD *)(a1 + 352))
  {
    v12 = *(_QWORD **)(a1 + 1096);
    *(_QWORD *)(a1 + 1096) = 0;
    if (v12 == (_QWORD *)(a1 + 1072))
    {
      v13 = 4;
      v12 = (_QWORD *)(a1 + 1072);
    }
    else
    {
      if (!v12)
        goto LABEL_26;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
LABEL_26:
  v32 = 0;
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = 0x1000000000;
  v14 = *(const mlir::detail::OpPassManagerImpl ***)(a1 + 720);
  v15 = *(const mlir::detail::OpPassManagerImpl ***)(a1 + 728);
  if (v14 == v15)
  {
    v16 = 0;
    v17 = xmmword_181245870;
  }
  else
  {
    do
    {
      mlir::OpPassManager::OpPassManager((std::string **)&v30, v14);
      v18 = mlir::OpPassManager::begin((mlir::OpPassManager *)&v30);
      if (v18 != mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v30))
      {
        OpAnchorName = (int8x16_t *)mlir::OpPassManager::getOpAnchorName((mlir::OpPassManager *)&v30);
        llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::try_emplace<mlir::OpPassManager&>((uint64_t)&v32, OpAnchorName, v20, (const mlir::detail::OpPassManagerImpl **)&v30);
      }
      mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)&v30);
      ++v14;
    }
    while (v14 != v15);
    v16 = v32;
    v17 = v33;
  }
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  *(_OWORD *)&v30.__r_.__value_.__r.__words[1] = v17;
  v32 = 0;
  *(_QWORD *)&v33 = 0;
  DWORD2(v33) = 0;
  llvm::SmallVectorImpl<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>>::assign(a1 + 1104, (uint64_t *)&v30, 1);
  if (HIDWORD(v30.__r_.__value_.__r.__words[1]) && LODWORD(v30.__r_.__value_.__r.__words[1]))
  {
    v21 = 0;
    do
    {
      v22 = *(llvm **)(v30.__r_.__value_.__r.__words[0] + v21);
      if (v22 != (llvm *)-8 && v22 != 0)
      {
        v24 = (void *)(*(_QWORD *)v22 + 17);
        mlir::OpPassManager::~OpPassManager((llvm *)((char *)v22 + 8));
        llvm::deallocate_buffer(v22, v24);
      }
      v21 += 8;
    }
    while (8 * LODWORD(v30.__r_.__value_.__r.__words[1]) != v21);
  }
  free(v30.__r_.__value_.__l.__data_);
  if (DWORD1(v33) && (_DWORD)v33)
  {
    v25 = 0;
    do
    {
      v26 = *(llvm **)((char *)v32 + v25);
      if (v26 != (llvm *)-8 && v26 != 0)
      {
        v28 = (void *)(*(_QWORD *)v26 + 17);
        mlir::OpPassManager::~OpPassManager((llvm *)((char *)v26 + 8));
        llvm::deallocate_buffer(v26, v28);
      }
      v25 += 8;
    }
    while (8 * v33 != v25);
  }
  free(v32);
  return 1;
}

void `anonymous namespace'::InlinerPass::runOnOperation(_anonymous_namespace_::InlinerPass *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  mlir::MLIRContext *Context;
  uint64_t *v8;
  unint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  llvm *v13;
  llvm **v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  llvm *v26;
  unsigned int v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  char *v35;
  unint64_t v36;
  int64_t v37;
  llvm *v38;
  int32x2_t v39;
  int v40;
  llvm *v41[2];
  int v42;
  llvm **v43;
  llvm *v44[2];
  int v45;
  llvm *v46[18];
  mlir::CallGraphNode *v47;
  _QWORD v48[3];
  void *v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD v52[5];
  int v53;
  _BYTE v54[48];
  void *v55;
  _QWORD *v56;
  void *v57;
  void *__p;
  _QWORD **v59;
  char v60;
  uint64_t v61;
  llvm **v62;
  void *v63[4];
  __int16 v64;
  llvm *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 6);
  v48[0] = v2;
  v3 = *(_QWORD *)(v2 + 72);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) == 0 && v4)
  {
    do
    {
      v5 = *(_QWORD *)(v4 + 72);
      v4 = v5 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v5 & 4) == 0 && v4);
  }
  v6 = mlir::detail::AnalysisMap::getAnalysisImpl<mlir::CallGraph,mlir::Operation *>(v2 + 24, (std::recursive_mutex **)v4, *(mlir::Operation **)(v2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8)
                                                                               + 24));
  v8 = (uint64_t *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  if ((mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>(v8 + 6) & 1) != 0)
  {
    v44[0] = 0;
    v44[1] = 0;
    v45 = 0;
    mlir::DialectInterfaceCollection<mlir::DialectInlinerInterface>::DialectInterfaceCollection(v48, Context);
    v48[0] = off_1E0E1A630;
    v52[2] = v54;
    v52[3] = v54;
    v52[4] = 8;
    v53 = 0;
    v57 = &v59;
    __p = (void *)0x800000000;
    v61 = v6;
    v62 = v44;
    v9 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41[0] = 0;
    v41[1] = 0;
    v42 = 0;
    v43 = v44;
    LODWORD(v67) = 0;
    v63[0] = (void *)v6;
    v63[1] = &v38;
    v63[2] = v44;
    v63[3] = &v65;
    v10 = *(_QWORD *)(v9 + 16) == 0;
    v66 = 0;
    v65 = 0;
    v11 = v67;
    if ((_DWORD)v66)
    {
      if ((_DWORD)v67)
      {
        v12 = 16 * v67;
        v13 = v65;
        while ((*(_QWORD *)v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v13 = (llvm *)((char *)v13 + 16);
          v12 -= 16;
          if (!v12)
            goto LABEL_51;
        }
      }
      else
      {
        v13 = v65;
      }
      v26 = (llvm *)((char *)v65 + 16 * v67);
      if (v13 != v26)
      {
        if (v40)
        {
          v27 = v40 - 1;
          v28 = v39;
          do
          {
            v29 = *((_QWORD *)v13 + 1);
            LODWORD(v30) = ((v29 >> 4) ^ (v29 >> 9)) & v27;
            v31 = (char *)v38 + 16 * v30;
            v32 = *(_QWORD *)v31;
            if (v29 == *(_QWORD *)v31)
            {
LABEL_38:
              *(_QWORD *)v31 = -8192;
              v28 = vadd_s32(v28, (int32x2_t)0x1FFFFFFFFLL);
              v39 = v28;
              goto LABEL_39;
            }
            v33 = 1;
            while (v32 != -4096)
            {
              v34 = v30 + v33++;
              v30 = v34 & v27;
              v32 = *((_QWORD *)v38 + 2 * v30);
              if (v29 == v32)
              {
                v31 = (char *)v38 + 16 * v30;
                goto LABEL_38;
              }
            }
            do
            {
LABEL_39:
              v13 = (llvm *)((char *)v13 + 16);
              if (v13 == v26)
                goto LABEL_51;
            }
            while ((*(_QWORD *)v13 | 0x1000) == 0xFFFFFFFFFFFFF000);
          }
          while (v13 != v26);
        }
        else
        {
          do
            v13 = (llvm *)((char *)v13 + 16);
          while (v13 != v26 && ((*(_QWORD *)v13 | 0x1000) == 0xFFFFFFFFFFFFF000 || v13 != v26));
        }
      }
    }
LABEL_51:
    if (*(_DWORD *)(v6 + 32))
    {
      v47 = *(mlir::CallGraphNode **)(*(_QWORD *)(v6 + 24) + 8);
      v46[17] = *(llvm **)(mlir::CallGraphNode::getCallableRegion(v47) + 16);
      llvm::deallocate_buffer(*(llvm **)v35, (void *)(8 * *((unsigned int *)v35 + 4)));
    }
    llvm::deallocate_buffer(v65, (void *)(16 * v11));
  }
  v64 = 257;
  mlir::Operation::emitOpError(v8, (const void ***)v63, (uint64_t)v48);
  if (v48[0])
  {
    LODWORD(v46[0]) = 3;
    v46[1] = (llvm *)" was scheduled to run under the inliner, but does not define a symbol table";
    v46[2] = (llvm *)75;
    v14 = v46;
    v15 = (char *)v49;
    if (v50 >= v51)
    {
      v36 = v50 + 1;
      if (v49 <= v46 && (char *)v49 + 24 * v50 > (char *)v46)
      {
        v37 = (char *)v46 - (_BYTE *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v36, 24);
        v15 = (char *)v49;
        v14 = (llvm **)((char *)v49 + v37);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v36, 24);
        v14 = v46;
        v15 = (char *)v49;
      }
    }
    v16 = &v15[24 * v50];
    v17 = *(_OWORD *)v14;
    *((_QWORD *)v16 + 2) = v14[2];
    *(_OWORD *)v16 = v17;
    ++v50;
    if (v48[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
  }
  if (v60)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v59;
      v20 = __p;
      if (v59 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v59 = v18;
      operator delete(v20);
    }
    v21 = v55;
    if (v55)
    {
      v22 = v56;
      v23 = v55;
      if (v56 != v55)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v55;
      }
      v56 = v21;
      operator delete(v23);
    }
    if (v49 != v52)
      free(v49);
  }
  *((_QWORD *)this + 5) |= 4uLL;
}

uint64_t mlir::impl::InlinerBase<`anonymous namespace'::InlinerPass>::clonePass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int *v8;
  __n128 v9;

  v4 = operator new(0x520uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  *((_BYTE *)v4 + 40) = 0;
  *((_BYTE *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = (char *)v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = (char *)v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *(_QWORD *)v4 = off_1E0E4D8F8;
  *((_QWORD *)v4 + 1) = v5;
  v9.n128_u64[0] = (unint64_t)"The default optimizer pipeline used for callables";
  v9.n128_u64[1] = 49;
  v8 = (int *)"canonicalize";
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc,llvm::cl::initializer<char [13]>>((_QWORD *)v4 + 43, (_QWORD *)v4 + 19, (uint64_t)"default-pipeline", 16, &v9, (const char **)&v8);
  *((_QWORD *)v4 + 43) = &off_1E0E4C260;
  *((_QWORD *)v4 + 72) = &unk_1E0E4C2E0;
  v9.n128_u64[1] = 87;
  mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::ListOption<llvm::cl::desc>((uint64_t)(v4 + 37), (_QWORD *)v4 + 19, (uint64_t)"op-pipelines", 12, &v9);
  *((_QWORD *)v4 + 74) = &unk_1E0E4BF60;
  *((_QWORD *)v4 + 105) = &unk_1E0E4BFE0;
  v9.n128_u64[0] = (unint64_t)"Maximum number of iterations when inlining within an SCC";
  v9.n128_u64[1] = 56;
  v7 = 4;
  v8 = &v7;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)v4 + 108, (_QWORD *)v4 + 19, (uint64_t)"max-iterations", 14, &v9, &v8);
  *((_QWORD *)v4 + 108) = off_1E0E4C3E0;
  *((_QWORD *)v4 + 132) = &unk_1E0E4C460;
  *(_QWORD *)v4 = off_1E0E15280;
  result = *(_QWORD *)(a1 + 1096);
  if (result)
  {
    if (result == a1 + 1072)
    {
      *((_QWORD *)v4 + 137) = v4 + 67;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *((_QWORD *)v4 + 137) = result;
    }
  }
  else
  {
    *((_QWORD *)v4 + 137) = 0;
  }
  *((_QWORD *)v4 + 138) = v4 + 70;
  *((_QWORD *)v4 + 139) = 0x800000000;
  if (*(_DWORD *)(a1 + 1112))
    result = llvm::SmallVectorImpl<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>>::operator=((uint64_t)(v4 + 69), a1 + 1104);
  *a2 = v4;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc,llvm::cl::initializer<char [13]>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _OWORD *a5, const char **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v36[2];
  _QWORD v37[3];
  _QWORD *v38;
  const void *v39[3];
  const void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v36[0] = a3;
  v36[1] = a4;
  v39[0] = a2;
  v8 = llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<char [13]>>((uint64_t)a1, (uint64_t)v36, v39, a5, a6);
  *(_QWORD *)(v8 + 232) = &unk_1E0E4E088;
  v9 = v8 + 232;
  *(_BYTE *)(v8 + 240) = 0;
  *(_QWORD *)v8 = &off_1E0E4E008;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 < v10)
  {
    *v11 = v9;
    v13 = (uint64_t)(v11 + 1);
    goto LABEL_23;
  }
  v14 = (char *)a2[20];
  v15 = ((char *)v11 - v14) >> 3;
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) >> 61)
    abort();
  v17 = v10 - (_QWORD)v14;
  if (v17 >> 2 > v16)
    v16 = v17 >> 2;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
    v18 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = (char *)operator new(8 * v18);
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = (uint64_t)(v20 + 1);
    v22 = (char *)((char *)v11 - v14);
    if (v11 == (uint64_t *)v14)
      goto LABEL_21;
    goto LABEL_14;
  }
  v19 = 0;
  v20 = (uint64_t *)(8 * v15);
  v21 = 0;
  *(_QWORD *)(8 * v15) = v9;
  v13 = 8 * v15 + 8;
  v22 = (char *)((char *)v11 - v14);
  if (v11 != (uint64_t *)v14)
  {
LABEL_14:
    v23 = (unint64_t)(v22 - 8);
    if (v23 < 0x58)
      goto LABEL_38;
    if ((unint64_t)(v14 - v19) < 0x20)
      goto LABEL_38;
    v24 = (v23 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v12 = &v11[v25 / 0xFFFFFFFFFFFFFFF8];
    v20 = (uint64_t *)((char *)v20 - v25);
    v26 = &v19[8 * v15 - 16];
    v27 = v11 - 2;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 4;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_38:
      do
      {
        v30 = *--v12;
        *--v20 = v30;
      }
      while (v12 != (uint64_t *)v14);
    }
    v12 = (uint64_t *)a2[20];
  }
LABEL_21:
  a2[20] = v20;
  a2[21] = v13;
  a2[22] = v21;
  if (v12)
    operator delete(v12);
LABEL_23:
  a2[21] = v13;
  v37[0] = off_1E0E51470;
  v37[1] = a1;
  v38 = v37;
  v39[0] = off_1E0E51470;
  v40 = v39;
  v39[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v39, a1 + 25);
  v31 = v40;
  if (v40 == v39)
  {
    v32 = 4;
    v31 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_28;
    v32 = 5;
  }
  (*((void (**)(void))*v31 + v32))();
LABEL_28:
  v33 = v38;
  if (v38 == v37)
  {
    v34 = 4;
    v33 = v37;
    goto LABEL_32;
  }
  if (v38)
  {
    v34 = 5;
LABEL_32:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  return a1;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<char [13]>>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, const char **a5)
{
  __int16 v10;
  void *v11;
  uint64_t v12;
  llvm::SmallPtrSetImplBase *v13;
  uint64_t *GeneralCategory;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  v10 = *(_WORD *)(a1 + 10);
  v11 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v12 = a1 + 64;
  *(_WORD *)(a1 + 10) = v10 & 0x8000;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  v13 = (llvm::SmallPtrSetImplBase *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v12, v11, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = &unk_1E0E22F48;
  *(_QWORD *)a1 = &unk_1E0E23450;
  *(_QWORD *)(a1 + 192) = &unk_1E0E23B38;
  *(_QWORD *)(a1 + 200) = off_1E0E4FA58;
  *(_QWORD *)(a1 + 224) = a1 + 200;
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v16 = *a3;
  v17 = *(_QWORD *)(a1 + 96);
  if (v17 != *(_QWORD *)(a1 + 88))
  {
LABEL_4:
    llvm::SmallPtrSetImplBase::insert_imp_big(v13, v16);
    goto LABEL_5;
  }
  v19 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v19)
  {
LABEL_14:
    if (v19 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v19 + 1;
      *(_QWORD *)(v17 + 8 * v19) = v16;
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  v20 = 0;
  v21 = 8 * v19;
  v22 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v22 != v16)
  {
    if (*v22 == -2)
      v20 = v22;
    ++v22;
    v21 -= 8;
    if (!v21)
    {
      if (!v20)
        goto LABEL_14;
      *v20 = v16;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_5:
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::initializer<char [13]>::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>>(a5, a1);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void llvm::cl::initializer<char [13]>::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>>(const char **a1, uint64_t a2)
{
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string __dst;

  v3 = *a1;
  v4 = strlen(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  std::string::operator=((std::string *)(a2 + 128), &__dst);
  *(_BYTE *)(a2 + 184) = 1;
  std::string::operator=((std::string *)(a2 + 160), &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descENSD_11initializerIA13_cEEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISU_EEFvRKSB_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51470;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descENSD_11initializerIA13_cEEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISU_EEFvRKSB_EE7__cloneEPNS0_6__baseISY_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51470;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descENSD_11initializerIA13_cEEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISU_EEFvRKSB_EEclESX_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 240) = 1;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descENSD_11initializerIA13_cEEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISU_EEFvRKSB_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir6detail11PassOptions6OptionINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE"
                     "N4llvm2cl6parserIS9_EEEC1IJNSB_4descENSB_11initializerIA13_cEEEEERS1_NSA_9StringRefEDpOT_EUlRKT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir6detail11PassOptions6OptionINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allo"
                                "catorIcEEEEN4llvm2cl6parserIS9_EEEC1IJNSB_4descENSB_11initializerIA13_cEEEEERS1_NSA_9Str"
                                "ingRefEDpOT_EUlRKT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir6detail11PassOptions6OptionINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4llvm2cl6parserIS9_EEEC1IJNSB_4descENSB_11initializerIA13_cEEEEERS1_NSA_9StringRefEDpOT_EUlRKT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir6detail11PassOptions6OptionINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4llvm2cl6parserIS9_EEEC1IJNSB_4descENSB_11initializerIA13_cEEEEERS1_NSA_9StringRefEDpOT_EUlRKT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descENSD_11initializerIA13_cEEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISU_EEFvRKSB_EE11target_typeEv()
{
  return &_ZTIZN4mlir6detail11PassOptions6OptionINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4llvm2cl6parserIS9_EEEC1IJNSB_4descENSB_11initializerIA13_cEEEEERS1_NSA_9StringRefEDpOT_EUlRKT_E_;
}

uint64_t mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::ListOption<llvm::cl::desc>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void *v31;
  _QWORD v32[2];

  v32[0] = a3;
  v32[1] = a4;
  v31 = a2;
  v7 = llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::list<llvm::StringRef,llvm::cl::sub,llvm::cl::desc>(a1, (uint64_t)v32, &v31, a5);
  *(_QWORD *)(v7 + 248) = &unk_1E0E4DCE8;
  v8 = v7 + 248;
  *(_BYTE *)(v7 + 256) = 0;
  *(_QWORD *)v7 = &unk_1E0E4DC68;
  *(_QWORD *)(v7 + 264) = &unk_1E0E239E8;
  v10 = (uint64_t *)a2[21];
  v9 = a2[22];
  v11 = v10;
  if ((unint64_t)v10 < v9)
  {
    *v10 = v8;
    v12 = (uint64_t)(v10 + 1);
    goto LABEL_23;
  }
  v13 = (char *)a2[20];
  v14 = ((char *)v10 - v13) >> 3;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61)
    abort();
  v16 = v9 - (_QWORD)v13;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v18 = (char *)operator new(8 * v17);
    v19 = (uint64_t *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v8;
    v12 = (uint64_t)(v19 + 1);
    v21 = (char *)((char *)v10 - v13);
    if (v10 == (uint64_t *)v13)
      goto LABEL_21;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (uint64_t *)(8 * v14);
  v20 = 0;
  *(_QWORD *)(8 * v14) = v8;
  v12 = 8 * v14 + 8;
  v21 = (char *)((char *)v10 - v13);
  if (v10 != (uint64_t *)v13)
  {
LABEL_14:
    v22 = (unint64_t)(v21 - 8);
    if (v22 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v13 - v18) < 0x20)
      goto LABEL_28;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v11 = &v10[v24 / 0xFFFFFFFFFFFFFFF8];
    v19 = (uint64_t *)((char *)v19 - v24);
    v25 = &v18[8 * v14 - 16];
    v26 = v10 - 2;
    v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
      *(_OWORD *)v25 = v28;
      v25 -= 32;
      v26 -= 4;
      v27 -= 4;
    }
    while (v27);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v29 = *--v11;
        *--v19 = v29;
      }
      while (v11 != (uint64_t *)v13);
    }
    v11 = (uint64_t *)a2[20];
  }
LABEL_21:
  a2[20] = v19;
  a2[21] = v12;
  a2[22] = v20;
  if (v11)
    operator delete(v11);
LABEL_23:
  a2[21] = v12;
  return a1;
}

BOOL mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::handleOccurrence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t i;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[4];
  _QWORD v16[2];

  if (*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
    v12 = *(_QWORD *)(a1 + 128);
    for (i = *(_QWORD *)(a1 + 136); i != v12; mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)(i - 8)))
      ;
    *(_QWORD *)(a1 + 136) = v12;
    *(_BYTE *)(a1 + 176) = 0;
  }
  *(_BYTE *)(a1 + 256) = 1;
  v14 = a1;
  v15[0] = a1 + 264;
  v16[0] = a3;
  v16[1] = a4;
  v15[1] = a1;
  v15[2] = v16;
  v15[3] = &v14;
  return mlir::detail::pass_options::parseCommaSeparatedList(a1, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, unint64_t))llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>::callback_fn<mlir::LogicalResult mlir::detail::pass_options::parseCommaSeparatedList<llvm::cl::parser<mlir::OpPassManager>,mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(mlir::OpPassManager const&)#1}>(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::cl::parser<mlir::OpPassManager> &,mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(mlir::OpPassManager const&)#1} &&)::{lambda(llvm::StringRef)#1}>, (uint64_t)v15) == 0;
}

uint64_t llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::getValueExpectedFlagDefault()
{
  return 2;
}

void mlir::Pass::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::~ListOption(_QWORD *a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list(a1);
  operator delete(v1);
}

uint64_t llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 208, a1);
}

llvm::raw_ostream *llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 208), (const llvm::cl::Option *)a1, a2);
}

void llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::setDefault(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  const mlir::detail::OpPassManagerImpl **v7;

  v2 = (uint64_t **)(a1 + 16);
  v3 = (uint64_t *)a1[16];
  a1[24] = a1[23];
  for (i = (uint64_t *)a1[17]; i != v3; mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)(i - 1)))
    ;
  a1[17] = v3;
  v5 = a1[19];
  v6 = a1[20];
  while (v5 != v6)
  {
    v7 = *(const mlir::detail::OpPassManagerImpl ***)(v5 + 8);
    if ((unint64_t)v3 >= a1[18])
      v3 = std::vector<mlir::OpPassManager>::__push_back_slow_path<mlir::OpPassManager const&>(v2, v7);
    else
      mlir::OpPassManager::OpPassManager((std::string **)v3++, v7);
    a1[17] = v3;
    v5 += 16;
  }
}

llvm::raw_ostream *mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::print(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  llvm::raw_ostream *v6;
  const char **v7;
  const char **v8;
  const char **i;
  _BYTE *v10;

  if (*((_QWORD *)result + 17) == *((_QWORD *)result + 16))
    return result;
  v3 = result;
  v4 = (const void *)*((_QWORD *)result + 2);
  v5 = *((_QWORD *)result + 3);
  result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (v5)
    {
      memcpy(result, v4, v5);
      result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = result;
    }
    v6 = this;
    if ((unint64_t)result >= *((_QWORD *)this + 3))
    {
LABEL_4:
      result = llvm::raw_ostream::write(v6, 61);
      v7 = (const char **)*((_QWORD *)v3 + 16);
      v8 = (const char **)*((_QWORD *)v3 + 17);
      if (v7 == v8)
        return result;
      goto LABEL_10;
    }
  }
  else
  {
    v6 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
    if ((unint64_t)result >= *((_QWORD *)v6 + 3))
      goto LABEL_4;
  }
  *((_QWORD *)v6 + 4) = (char *)result + 1;
  *(_BYTE *)result = 61;
  v7 = (const char **)*((_QWORD *)v3 + 16);
  v8 = (const char **)*((_QWORD *)v3 + 17);
  if (v7 == v8)
    return result;
LABEL_10:
  result = llvm::cl::parser<mlir::OpPassManager>::print(this, v7);
  for (i = v7 + 1; i != v8; ++i)
  {
    while (1)
    {
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v10)
        break;
      *v10 = 44;
      ++*((_QWORD *)this + 4);
      result = llvm::cl::parser<mlir::OpPassManager>::print(this, i++);
      if (i == v8)
        return result;
    }
    llvm::raw_ostream::write(this, ",", 1uLL);
    result = llvm::cl::parser<mlir::OpPassManager>::print(this, i);
  }
  return result;
}

void mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  std::vector<mlir::OpPassManager>::__assign_with_size[abi:nn180100]<mlir::OpPassManager const*,mlir::OpPassManager const*>(a1 + 128, *(const mlir::detail::OpPassManagerImpl ***)(a2 - 120), *(const mlir::detail::OpPassManagerImpl ***)(a2 - 112), (uint64_t)(*(_QWORD *)(a2 - 112) - *(_QWORD *)(a2 - 120)) >> 3);
  *(_BYTE *)(a1 + 256) = 1;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 8);
}

_QWORD *`non-virtual thunk to'mlir::Pass::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::~ListOption(uint64_t a1)
{
  return llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list((_QWORD *)(a1 - 248));
}

void `non-virtual thunk to'mlir::Pass::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::~ListOption(uint64_t a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list((_QWORD *)(a1 - 248));
  operator delete(v1);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::print((llvm::raw_ostream *)(a1 - 248), a2);
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::getOption(uint64_t a1)
{
  return a1 - 248;
}

void `non-virtual thunk to'mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  std::vector<mlir::OpPassManager>::__assign_with_size[abi:nn180100]<mlir::OpPassManager const*,mlir::OpPassManager const*>(a1 - 120, *(const mlir::detail::OpPassManagerImpl ***)(a2 - 120), *(const mlir::detail::OpPassManagerImpl ***)(a2 - 112), (uint64_t)(*(_QWORD *)(a2 - 112) - *(_QWORD *)(a2 - 120)) >> 3);
  *(_BYTE *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
}

uint64_t llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::list<llvm::StringRef,llvm::cl::sub,llvm::cl::desc>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4)
{
  __int16 v8;
  void *v9;
  uint64_t v10;
  llvm::SmallPtrSetImplBase *v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  v8 = *(_WORD *)(a1 + 10);
  v9 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v10 = a1 + 64;
  *(_WORD *)(a1 + 10) = v8 & 0x8000 | 1;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  v11 = (llvm::SmallPtrSetImplBase *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v9, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)a1 = &unk_1E0E23790;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = &unk_1E0E239E8;
  *(_QWORD *)(a1 + 216) = &unk_1E0E4FCB8;
  *(_QWORD *)(a1 + 240) = a1 + 216;
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v14 = *a3;
  v15 = *(_QWORD *)(a1 + 96);
  if (v15 != *(_QWORD *)(a1 + 88))
  {
LABEL_4:
    llvm::SmallPtrSetImplBase::insert_imp_big(v11, v14);
    goto LABEL_5;
  }
  v17 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v17)
  {
LABEL_14:
    if (v17 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v17 + 1;
      *(_QWORD *)(v15 + 8 * v17) = v14;
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  v18 = 0;
  v19 = 8 * v17;
  v20 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v20 != v14)
  {
    if (*v20 == -2)
      v18 = v20;
    ++v20;
    v19 -= 8;
    if (!v19)
    {
      if (!v18)
        goto LABEL_14;
      *v18 = v14;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_5:
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::~ListOption(_QWORD *a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list(a1);
  operator delete(v1);
}

_QWORD *`non-virtual thunk to'mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::~ListOption(uint64_t a1)
{
  return llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list((_QWORD *)(a1 - 248));
}

void `non-virtual thunk to'mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::~ListOption(uint64_t a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list((_QWORD *)(a1 - 248));
  operator delete(v1);
}

BOOL llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::handleOccurrence(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, size_t a6)
{
  uint64_t i;
  uint64_t v13;
  _BOOL8 v14;
  std::string **v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  mlir::OpPassManager *v39;

  mlir::InFlightDiagnostic::abandon(&v39);
  if (*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
    v13 = *(_QWORD *)(a1 + 128);
    for (i = *(_QWORD *)(a1 + 136); i != v13; mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)(i - 8)))
      ;
    *(_QWORD *)(a1 + 136) = v13;
    *(_BYTE *)(a1 + 176) = 0;
  }
  v14 = llvm::cl::parser<mlir::OpPassManager>::parse((llvm *)(a1 + 208), a1, a3, a4, a5, a6, &v39);
  if (!v14)
  {
    v15 = *(std::string ***)(a1 + 136);
    if ((unint64_t)v15 >= *(_QWORD *)(a1 + 144))
    {
      *(_QWORD *)(a1 + 136) = std::vector<mlir::OpPassManager>::__push_back_slow_path<mlir::OpPassManager const&>((uint64_t **)(a1 + 128), (const mlir::detail::OpPassManagerImpl **)v39);
      *(_WORD *)(a1 + 12) = a2;
      v17 = *(char **)(a1 + 192);
      v16 = *(_QWORD *)(a1 + 200);
      if ((unint64_t)v17 >= v16)
      {
LABEL_8:
        v18 = *(char **)(a1 + 184);
        v19 = (v17 - v18) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          goto LABEL_33;
        v21 = v16 - (_QWORD)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v23 = operator new(4 * v22);
          v24 = &v23[4 * v19];
          v25 = &v23[4 * v22];
          *v24 = a2;
          v26 = (uint64_t)(v24 + 1);
          v27 = v17 - v18;
          if (v17 == v18)
            goto LABEL_27;
        }
        else
        {
          v23 = 0;
          v24 = (_DWORD *)(4 * v19);
          v25 = 0;
          *(_DWORD *)(4 * v19) = a2;
          v26 = 4 * v19 + 4;
          v27 = v17 - v18;
          if (v17 == v18)
          {
LABEL_27:
            *(_QWORD *)(a1 + 184) = v24;
            *(_QWORD *)(a1 + 192) = v26;
            *(_QWORD *)(a1 + 200) = v25;
            if (v18)
              operator delete(v18);
            goto LABEL_29;
          }
        }
        v28 = v27 - 4;
        if (v28 < 0x2C)
          goto LABEL_37;
        if ((unint64_t)(v18 - v23) < 0x20)
          goto LABEL_37;
        v29 = (v28 >> 2) + 1;
        v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
        v31 = &v17[-v30];
        v24 = (_DWORD *)((char *)v24 - v30);
        v32 = &v23[4 * v19 - 16];
        v33 = v17 - 16;
        v34 = v29 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 8;
        }
        while (v34);
        v17 = v31;
        if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_37:
          do
          {
            v36 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *--v24 = v36;
          }
          while (v17 != v18);
        }
        goto LABEL_27;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 136) = mlir::OpPassManager::OpPassManager(v15, (const mlir::detail::OpPassManagerImpl **)v39) + 1;
      *(_WORD *)(a1 + 12) = a2;
      v17 = *(char **)(a1 + 192);
      v16 = *(_QWORD *)(a1 + 200);
      if ((unint64_t)v17 >= v16)
        goto LABEL_8;
    }
    *(_DWORD *)v17 = a2;
    v26 = (uint64_t)(v17 + 4);
LABEL_29:
    *(_QWORD *)(a1 + 192) = v26;
    v37 = *(_QWORD *)(a1 + 240);
    if (v37)
    {
      (*(void (**)(uint64_t, mlir::OpPassManager **))(*(_QWORD *)v37 + 48))(v37, &v39);
      goto LABEL_31;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_33:
    abort();
  }
LABEL_31:
  llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager::~ParsedPassManager(&v39);
  return v14;
}

void llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list(_QWORD *a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list(a1);
  operator delete(v1);
}

_QWORD *std::__function::__func<llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::{lambda(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)#1},std::allocator<llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::{lambda(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)#1}>,void ()(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E0E4FCB8;
  return result;
}

void std::__function::__func<llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::{lambda(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)#1},std::allocator<llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::{lambda(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)#1}>,void ()(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E0E4FCB8;
}

uint64_t std::__function::__func<llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::{lambda(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)#1},std::allocator<llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::{lambda(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)#1}>,void ()(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181245D3ALL)
    return a1 + 8;
  if (((v3 & 0x8000000181245D3ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181245D3ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181245D3ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::{lambda(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)#1},std::allocator<llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::{lambda(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)#1}>,void ()(llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager const&)>::target_type()
{
}

uint64_t *std::vector<mlir::OpPassManager>::__push_back_slow_path<mlir::OpPassManager const&>(uint64_t **a1, const mlir::detail::OpPassManagerImpl **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  std::string **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  mlir::OpPassManager *v14;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v8 = (std::string **)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t *)&v8[v7];
  v10 = (uint64_t *)mlir::OpPassManager::OpPassManager(&v8[v2], a2);
  v11 = v10 + 1;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12)
      return v11;
    goto LABEL_16;
  }
  do
    v10 = mlir::OpPassManager::OpPassManager(v10 - 1, --v12);
  while (v12 != v13);
  v12 = *a1;
  v14 = (mlir::OpPassManager *)a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v9;
  while (v14 != (mlir::OpPassManager *)v12)
  {
    v14 = (mlir::OpPassManager *)((char *)v14 - 8);
    mlir::OpPassManager::~OpPassManager(v14);
  }
  if (v12)
LABEL_16:
    operator delete(v12);
  return v11;
}

_QWORD *llvm::cl::list<mlir::OpPassManager,BOOL,llvm::cl::parser<mlir::OpPassManager>>::~list(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;

  *a1 = &unk_1E0E23790;
  v2 = a1 + 27;
  v3 = (_QWORD *)a1[30];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[23];
  if (v5)
  {
    a1[24] = v5;
    operator delete(v5);
  }
  v6 = a1[19];
  if (v6)
  {
    v7 = a1[20];
    v8 = (void *)a1[19];
    if (v7 != v6)
    {
      do
        v7 = llvm::cl::OptionValue<mlir::OpPassManager>::~OptionValue(v7 - 16);
      while (v7 != v6);
      v8 = (void *)a1[19];
    }
    a1[20] = v6;
    operator delete(v8);
  }
  v9 = a1[16];
  if (v9)
  {
    v10 = a1[17];
    v11 = (void *)a1[16];
    if (v10 != v9)
    {
      do
        mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)(v10 - 8));
      while (v10 != v9);
      v11 = (void *)a1[16];
    }
    a1[17] = v9;
    operator delete(v11);
  }
  *a1 = &unk_1E0E23930;
  v12 = (void *)a1[12];
  if (v12 != (void *)a1[11])
    free(v12);
  v13 = (_QWORD *)a1[8];
  if (v13 != a1 + 10)
    free(v13);
  return a1;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>::callback_fn<mlir::LogicalResult mlir::detail::pass_options::parseCommaSeparatedList<llvm::cl::parser<mlir::OpPassManager>,mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(mlir::OpPassManager const&)#1}>(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::cl::parser<mlir::OpPassManager> &,mlir::detail::PassOptions::ListOption<mlir::OpPassManager,llvm::cl::parser<mlir::OpPassManager>>::handleOccurrence(unsigned int,llvm::StringRef,llvm::StringRef)::{lambda(mlir::OpPassManager const&)#1} &&)::{lambda(llvm::StringRef)#1}>(uint64_t a1, const char *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string **v8;
  uint64_t *v9;
  mlir::OpPassManager *v11;

  mlir::InFlightDiagnostic::abandon(&v11);
  if (llvm::cl::parser<mlir::OpPassManager>::parse(*(llvm **)a1, *(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2, a3, &v11))
  {
    v6 = 0;
  }
  else
  {
    v7 = **(_QWORD **)(a1 + 24);
    v8 = *(std::string ***)(v7 + 136);
    if ((unint64_t)v8 >= *(_QWORD *)(v7 + 144))
      v9 = std::vector<mlir::OpPassManager>::__push_back_slow_path<mlir::OpPassManager const&>((uint64_t **)(v7 + 128), (const mlir::detail::OpPassManagerImpl **)v11);
    else
      v9 = (uint64_t *)(mlir::OpPassManager::OpPassManager(v8, (const mlir::detail::OpPassManagerImpl **)v11) + 1);
    *(_QWORD *)(v7 + 136) = v9;
    v6 = 1;
  }
  llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager::~ParsedPassManager(&v11);
  return v6;
}

void std::vector<mlir::OpPassManager>::__assign_with_size[abi:nn180100]<mlir::OpPassManager const*,mlir::OpPassManager const*>(uint64_t a1, const mlir::detail::OpPassManagerImpl **a2, const mlir::detail::OpPassManagerImpl **a3, unint64_t a4)
{
  const mlir::detail::OpPassManagerImpl **v6;
  uint64_t v8;
  std::string **v9;
  std::string **v10;
  std::string **v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  std::string **v16;
  std::string **v17;
  std::string **v18;
  unint64_t v19;
  const mlir::detail::OpPassManagerImpl **v20;
  uint64_t v21;
  std::string **v22;
  std::string **v23;
  std::string **v24;
  std::string **v25;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string ***)a1;
  if (a4 <= (v8 - *(_QWORD *)a1) >> 3)
  {
    v18 = *(std::string ***)(a1 + 8);
    v19 = v18 - v9;
    if (v19 >= a4)
    {
      if (a2 == a3)
      {
        v25 = v9;
      }
      else
      {
        v25 = v9;
        do
        {
          mlir::OpPassManager::operator=(v9++, v6++);
          ++v25;
        }
        while (v6 != a3);
        v18 = *(std::string ***)(a1 + 8);
      }
      while (v18 != v25)
        mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)(v18 - 1));
      *(_QWORD *)(a1 + 8) = v25;
    }
    else
    {
      v20 = &a2[v19];
      if (v18 != v9)
      {
        v21 = 8 * v19;
        do
        {
          mlir::OpPassManager::operator=(v9++, v6++);
          v21 -= 8;
        }
        while (v21);
        v9 = *(std::string ***)(a1 + 8);
      }
      v22 = v9;
      if (v20 != a3)
      {
        v22 = v9;
        v23 = v9;
        do
        {
          v24 = mlir::OpPassManager::OpPassManager(v23, v20++);
          v23 = v24 + 1;
          ++v22;
        }
        while (v20 != a3);
      }
      *(_QWORD *)(a1 + 8) = v22;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string ***)(a1 + 8);
      v11 = v9;
      if (v10 != v9)
      {
        do
          mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)(v10 - 1));
        while (v10 != v9);
        v11 = *(std::string ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 61)
      goto LABEL_33;
    v12 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v12 = a4;
    v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 61)
LABEL_33:
      abort();
    v15 = v14;
    v16 = (std::string **)operator new(8 * v14);
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v16;
    for (*(_QWORD *)(a1 + 16) = &v16[v15]; v6 != a3; v16 = v17 + 1)
      v17 = mlir::OpPassManager::OpPassManager(v16, v6++);
    *(_QWORD *)(a1 + 8) = v16;
  }
}

char *llvm::SmallVectorTemplateBase<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v10;
  void *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - *(_QWORD *)a1) >> 3);
      v17 = 0;
      v14 = a1 + 16;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(_QWORD *)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      *(_DWORD *)(a1 + 12) = v16;
      return &v15[24 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 16;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(_QWORD *)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
    }
  }
  return (char *)v3;
}

void llvm::SmallVectorTemplateBase<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  void **v3;
  uint64_t v4;
  unsigned int v5;
  void **v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;
  void *v13;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void ***)a1;
    v4 = *(_QWORD *)a1 + 24 * v2;
    do
    {
      *(_QWORD *)a2 = *v3;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 1);
      *v3 = 0;
      v3[1] = 0;
      *((_DWORD *)v3 + 4) = 0;
      v3 += 3;
      a2 += 24;
    }
    while (v3 != (void **)v4);
    v5 = *(_DWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(void ***)a1;
      v7 = (void **)(*(_QWORD *)a1 + 24 * v5);
      do
      {
        v8 = v7;
        v7 -= 3;
        if (*((_DWORD *)v8 - 3))
        {
          v9 = *((unsigned int *)v8 - 4);
          if ((_DWORD)v9)
          {
            v10 = 0;
            do
            {
              v11 = *(llvm **)((char *)*v7 + v10);
              if (v11 != (llvm *)-8 && v11 != 0)
              {
                v13 = (void *)(*(_QWORD *)v11 + 17);
                mlir::OpPassManager::~OpPassManager((llvm *)((char *)v11 + 8));
                llvm::deallocate_buffer(v11, v13);
              }
              v10 += 8;
            }
            while (8 * v9 != v10);
          }
        }
        free(*v7);
      }
      while (v7 != v6);
    }
  }
}

uint64_t llvm::SmallVector<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,8u>::~SmallVector(uint64_t a1)
{
  void **v2;
  unsigned int v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  void *v10;

  v2 = *(void ***)a1;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3)
  {
    v4 = &v2[3 * v3];
    do
    {
      v5 = v4;
      v4 -= 3;
      if (*((_DWORD *)v5 - 3))
      {
        v6 = *((unsigned int *)v5 - 4);
        if ((_DWORD)v6)
        {
          v7 = 0;
          do
          {
            v8 = *(llvm **)((char *)*v4 + v7);
            if (v8 != (llvm *)-8 && v8 != 0)
            {
              v10 = (void *)(*(_QWORD *)v8 + 17);
              mlir::OpPassManager::~OpPassManager((llvm *)((char *)v8 + 8));
              llvm::deallocate_buffer(v8, v10);
            }
            v7 += 8;
          }
          while (8 * v6 != v7);
        }
      }
      free(*v4);
    }
    while (v4 != v2);
    v2 = *(void ***)a1;
  }
  if (v2 != (void **)(a1 + 16))
    free(v2);
  return a1;
}

std::string ***llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::try_emplace<mlir::OpPassManager&>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, const mlir::detail::OpPassManagerImpl **a4)
{
  uint64_t v8;
  std::string ***v9;
  std::string **v10;
  std::string **buffer;
  void *v12;
  BOOL v13;
  std::string **v14;
  std::string **v15;
  BOOL v16;
  std::string **v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (std::string ***)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == (std::string **)-8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (std::string **)llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == (std::string **)-8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = (std::string **)llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *buffer = (std::string *)a3;
  mlir::OpPassManager::OpPassManager(buffer + 1, a4);
  *v9 = buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (std::string ***)(*(_QWORD *)a1
                       + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 + 1 == 0;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 + 1 == 0;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

void llvm::SmallVectorImpl<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>>::assign(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  void *v14;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(void ***)a1;
    v8 = (void **)(*(_QWORD *)a1 + 24 * v6);
    do
    {
      v9 = v8;
      v8 -= 3;
      if (*((_DWORD *)v9 - 3))
      {
        v10 = *((unsigned int *)v9 - 4);
        if ((_DWORD)v10)
        {
          v11 = 0;
          do
          {
            v12 = *(llvm **)((char *)*v8 + v11);
            if (v12 != (llvm *)-8 && v12 != 0)
            {
              v14 = (void *)(*(_QWORD *)v12 + 17);
              mlir::OpPassManager::~OpPassManager((llvm *)((char *)v12 + 8));
              llvm::deallocate_buffer(v12, v14);
            }
            v11 += 8;
          }
          while (8 * v10 != v11);
        }
      }
      free(*v8);
    }
    while (v8 != v7);
  }
  *(_DWORD *)(a1 + 8) = 0;
  llvm::SmallVectorImpl<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>>::append<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator> const*,void>(a1, a2, &a2[3 * a3]);
}

uint64_t std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::~__func(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &off_1E0E50358;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::~__func(void **__p)
{
  void **v1;

  v1 = __p;
  *__p = &off_1E0E50358;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E0E50358;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = &off_1E0E50358;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::destroy_deallocate(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

BOOL std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::operator()(uint64_t a1, mlir::OpPassManager *a2)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  __n128 *v9;

  v5 = *(const char **)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  if (v6 >= 0)
    v7 = (const char *)v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 23);
  else
    v8 = *(_QWORD *)(v3 + 8);
  v9 = (__n128 *)llvm::errs((llvm *)v3);
  return mlir::parsePassPipeline(v7, v8, a2, v9);
}

uint64_t std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_111InlinerPass17initializeOptionsEN4llvm9StringRefEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_111InlinerPass17initializeOptionsEN4llvm9StringRefEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_111InlinerPass17initializeOptionsEN4llvm9StringRefEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_111InlinerPass17initializeOptionsEN4llvm9StringRefEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0,std::allocator<`anonymous namespace'::InlinerPass::initializeOptions(llvm::StringRef)::$_0>,void ()(mlir::OpPassManager &)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>>::append<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator> const*,void>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  llvm::StringMapImpl *v11;
  llvm::StringMapImpl *v12;
  unint64_t v13;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
  v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 <= *(unsigned int *)(a1 + 12))
  {
    v9 = *(char **)a1;
    if (a2 == a3)
      goto LABEL_10;
    goto LABEL_7;
  }
  v13 = 0;
  v8 = a1 + 16;
  v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v6 + v7, 24, &v13);
  llvm::SmallVectorTemplateBase<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v9);
  v10 = v13;
  if (*(_QWORD *)a1 != v8)
    free(*(void **)a1);
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 12) = v10;
  LODWORD(v7) = *(_DWORD *)(a1 + 8);
  if (v4 != a3)
  {
LABEL_7:
    v11 = (llvm::StringMapImpl *)&v9[24 * v7];
    do
    {
      v12 = llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::StringMap(v11, v4);
      v4 += 3;
      v11 = (llvm::StringMapImpl *)((char *)v12 + 24);
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v7 + v6;
}

llvm::StringMapImpl *llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::StringMap(llvm::StringMapImpl *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v11;
  char *buffer;
  std::string **v13;
  char *v14;
  uint64_t v16;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x1000000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    v4 = *(_QWORD *)this;
    v5 = *((unsigned int *)this + 2);
    v6 = *a2;
    *(_QWORD *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v16 = v4 + 8 * v5 + 8;
      v8 = v6 + 8 * v5 + 8;
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*a2 + 8 * v7);
          if (v9 && v9 != -8)
            break;
          *(_QWORD *)(*(_QWORD *)this + 8 * v7++) = v9;
          if (v5 == v7)
            return this;
        }
        v11 = *(_QWORD *)v9;
        buffer = (char *)llvm::allocate_buffer(*(_QWORD *)v9 + 17, (std::align_val_t)8uLL);
        v13 = (std::string **)buffer;
        v14 = buffer + 16;
        if (v11)
          memcpy(buffer + 16, (const void *)(v9 + 16), v11);
        v14[v11] = 0;
        *v13 = (std::string *)v11;
        mlir::OpPassManager::OpPassManager(v13 + 1, (const mlir::detail::OpPassManagerImpl **)(v9 + 8));
        *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v13;
        *(_DWORD *)(v16 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

void `anonymous namespace'::Inliner::~Inliner(_anonymous_namespace_::Inliner *this)
{
  char *v2;
  void *v3;

  *(_QWORD *)this = off_1E0E1A630;
  v2 = (char *)*((_QWORD *)this + 19);
  if (v2 != (char *)this + 168)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3 != *((void **)this + 7))
    free(v3);
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(this);
}

{
  char *v2;
  void *v3;

  *(_QWORD *)this = off_1E0E1A630;
  v2 = (char *)*((_QWORD *)this + 19);
  if (v2 != (char *)this + 168)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3 != *((void **)this + 7))
    free(v3);
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(this);
}

uint64_t mlir::detail::AnalysisMap::getAnalysisImpl<mlir::CallGraph,mlir::Operation *>(uint64_t a1, std::recursive_mutex **a2, mlir::Operation *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v29;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  if ((v6 & 1) == 0
  {
    v38 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallGraph]";
    v39 = 65;
    v31 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
    if (v39 >= v31)
      v32 = v31;
    else
      v32 = v39;
    v33 = &v38[v32];
    v34 = v39 - v32;
    if (v39 - v32 >= 0x12)
      v35 = 18;
    else
      v35 = v39 - v32;
    v36 = v34 - v35;
    if (v36 >= v36 - 1)
      v37 = v36 - 1;
    else
      v37 = v36;
    mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
  }
  v7 = mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id >> 4) ^ (mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id >> 9));
    v11 = (_QWORD *)(v8 + 16 * v10);
    v12 = *v11;
    if (mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id == *v11)
      goto LABEL_9;
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(_QWORD *)(v8 + 16 * v10);
      if (mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id == v12)
      {
        v11 = (_QWORD *)(v8 + 16 * v10);
        goto LABEL_9;
      }
    }
  }
  v11 = (_QWORD *)(v8 + 16 * v9);
LABEL_9:
  if (v11 == (_QWORD *)(v8 + 16 * v9))
    v15 = (unsigned int *)(a1 + 40);
  else
    v15 = (unsigned int *)(v11 + 1);
  v16 = *v15;
  if (*(_DWORD *)(a1 + 40) == (_DWORD)v16)
  {
    if (a2)
    {
      v38 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallGraph]";
      v39 = 65;
      v17 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
      if (v39 >= v17)
        v18 = v17;
      else
        v18 = v39;
      v19 = &v38[v18];
      v20 = v39 - v18;
      if (v39 - v18 >= 0x12)
        v21 = 18;
      else
        v21 = v39 - v18;
      v22 = (uint64_t)&v19[v21];
      v23 = v20 - v21;
      if (v23 >= v23 - 1)
        v24 = v23 - 1;
      else
        v24 = v23;
      if (v24 >= 6)
      {
        if (*(_DWORD *)v22 == 1919511661 && *(_WORD *)(v22 + 4) == 14906)
        {
          v22 += 6;
          v24 -= 6;
        }
        else if (v24 >= 0x17
               && *(_QWORD *)v22 == 0x6F6D796E6F6E6128
               && *(_QWORD *)(v22 + 8) == 0x73656D616E207375
               && *(_QWORD *)(v22 + 15) == 0x3A3A296563617073)
        {
          v22 += 23;
          v24 -= 23;
        }
      }
      mlir::PassInstrumentor::runBeforeAnalysis(a2, v22, v24, v7, *(_QWORD *)a1);
    }
    v29 = operator new(0xF0uLL);
    *v29 = &unk_1E0E4E330;
    mlir::CallGraph::CallGraph((mlir::CallGraph *)(v29 + 1), a3);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v16 + 8) + 8;
}

void mlir::detail::AnalysisModel<mlir::CallGraph>::~AnalysisModel(_QWORD *a1)
{
  *a1 = &unk_1E0E4E330;
  mlir::CallGraph::~CallGraph((mlir::CallGraph *)(a1 + 1));
}

{
  *a1 = &unk_1E0E4E330;
  mlir::CallGraph::~CallGraph((mlir::CallGraph *)(a1 + 1));
}

BOOL mlir::detail::AnalysisModel<mlir::CallGraph>::invalidate(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  _BOOL4 v3;

  v3 = mlir::detail::PreservedAnalyses::isPreserved<mlir::CallGraph>(a2);
  if (!v3)
    mlir::detail::PreservedAnalyses::unpreserve<mlir::CallGraph>(a2);
  return !v3;
}

void mlir::CallGraph::~CallGraph(mlir::CallGraph *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  if ((*((_BYTE *)this + 144) & 1) == 0)
    llvm::deallocate_buffer(*((llvm **)this + 19), (void *)(8 * *((unsigned int *)this + 40)));
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 != (char *)this + 104)
    free(v3);
  if ((*((_BYTE *)this + 48) & 1) == 0)
    llvm::deallocate_buffer(*((llvm **)this + 7), (void *)(8 * *((unsigned int *)this + 16)));
  v4 = (char *)*((_QWORD *)this + 3);
  v5 = *((unsigned int *)this + 8);
  if ((_DWORD)v5)
  {
    v6 = v4 - 8;
    v7 = 16 * v5;
    do
    {
      v8 = *(_QWORD *)&v6[v7];
      *(_QWORD *)&v6[v7] = 0;
      if (v8)
      {
        v9 = *(void **)(v8 + 48);
        if (v9 != (void *)(v8 + 64))
          free(v9);
        if ((*(_BYTE *)(v8 + 8) & 1) == 0)
          llvm::deallocate_buffer(*(llvm **)(v8 + 16), (void *)(8 * *(unsigned int *)(v8 + 24)));
        operator delete((void *)v8);
      }
      v7 -= 16;
    }
    while (v7);
    v4 = (char *)*((_QWORD *)this + 3);
  }
  if (v4 != (char *)this + 40)
    free(v4);
  llvm::deallocate_buffer(*(llvm **)this, (void *)(16 * *((unsigned int *)this + 4)));
}

uint64_t sub_1806FE3B4()
{
  uint64_t v0;

  return v0;
}

const void **mlir::detail::PreservedAnalyses::unpreserve<mlir::CallGraph>(llvm::SmallPtrSetImplBase *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  const void **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;

  if ((v2 & 1) == 0
  {
    v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallGraph]";
    v21 = 65;
    v13 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
    if (v21 >= v13)
      v14 = v13;
    else
      v14 = v21;
    v15 = &v20[v14];
    v16 = v21 - v14;
    if (v21 - v14 >= 0x12)
      v17 = 18;
    else
      v17 = v21 - v14;
    v18 = v16 - v17;
    if (v18 >= v18 - 1)
      v19 = v18 - 1;
    else
      v19 = v18;
    mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
  }
  v3 = mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id;
  v4 = *((_QWORD *)this + 1);
  if (v4 == *(_QWORD *)this)
  {
    v8 = *((unsigned int *)this + 5);
    result = (const void **)(v4 + 8 * v8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      while (*(_QWORD *)(v4 + v9) != mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id)
      {
        v9 += 8;
        if (v10 == v9)
          goto LABEL_13;
      }
      result = (const void **)(v4 + v9);
    }
LABEL_13:
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    result = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id);
    v4 = *(_QWORD *)this;
    v6 = *((_QWORD *)this + 1);
    if (*result != (const void *)v3)
    {
      v7 = 16;
      if (v6 == v4)
        v7 = 20;
      result = (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  v11 = v6 == v4;
  v12 = 16;
  if (v11)
    v12 = 20;
  if (result != (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v12)))
  {
    *result = (const void *)-2;
    ++*((_DWORD *)this + 6);
  }
  return result;
}

BOOL mlir::detail::PreservedAnalyses::isPreserved<mlir::CallGraph>(llvm::SmallPtrSetImplBase *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  const void **BucketFor;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;

  if ((v2 & 1) == 0
  {
    v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallGraph]";
    v22 = 65;
    v14 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
    if (v22 >= v14)
      v15 = v14;
    else
      v15 = v22;
    v16 = &v21[v15];
    v17 = v22 - v15;
    if (v22 - v15 >= 0x12)
      v18 = 18;
    else
      v18 = v22 - v15;
    v19 = v17 - v18;
    if (v19 >= v19 - 1)
      v20 = v19 - 1;
    else
      v20 = v19;
    mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
  }
  v3 = mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id;
  v4 = *((_QWORD *)this + 1);
  if (v4 == *(_QWORD *)this)
  {
    v8 = *((unsigned int *)this + 5);
    BucketFor = (const void **)(v4 + 8 * v8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      while (*(_QWORD *)(v4 + v9) != mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id)
      {
        v9 += 8;
        if (v10 == v9)
          goto LABEL_13;
      }
      BucketFor = (const void **)(v4 + v9);
    }
LABEL_13:
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)mlir::detail::TypeIDResolver<mlir::CallGraph,void>::resolveTypeID(void)::id);
    v4 = *(_QWORD *)this;
    v6 = *((_QWORD *)this + 1);
    if (*BucketFor != (const void *)v3)
    {
      v7 = 16;
      if (v6 == v4)
        v7 = 20;
      BucketFor = (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  v11 = v6 == v4;
  v12 = 16;
  if (v11)
    v12 = 20;
  return BucketFor != (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v12));
}

void sub_1806FE6EC(void *__p)
{
  operator delete(__p);
}

void `anonymous namespace'::Inliner::processInlinedBlocks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Block *v6;
  mlir::Region *Parent;
  uint64_t v8;
  uint64_t v9;

  if (a2)
    v6 = (mlir::Block *)(a2 - 8);
  else
    v6 = 0;
  Parent = (mlir::Region *)mlir::Block::getParent(v6);
  v8 = mlir::CallGraph::lookupNode(*(uint64_t **)(a1 + 424), (uint64_t)Parent);
  if (!v8)
  {
    do
    {
      Parent = mlir::Region::getParentRegion(Parent);
      v9 = mlir::CallGraph::lookupNode(*(uint64_t **)(a1 + 424), (uint64_t)Parent);
    }
    while (!v9);
    v8 = v9;
  }
  collectCallOps(a2, a3, v8, *(uint64_t **)(a1 + 424), *(_QWORD *)(a1 + 432), a1 + 152, 1);
}

uint64_t mlir::DialectInterfaceCollection<mlir::DialectInlinerInterface>::DialectInterfaceCollection(_QWORD *a1, mlir::MLIRContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v4 & 1) == 0
  {
    v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
    v15 = 79;
    v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
    if (v15 >= v7)
      v8 = v7;
    else
      v8 = v15;
    v9 = &v14[v8];
    v10 = v15 - v8;
    if (v15 - v8 >= 0x12)
      v11 = 18;
    else
      v11 = v15 - v8;
    v12 = v10 - v11;
    if (v12 >= v12 - 1)
      v13 = v12 - 1;
    else
      v13 = v12;
    mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id;
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
  v15 = 79;
  llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  result = mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase((uint64_t)a1, a2, v5);
  *a1 = &unk_1E0E47E10;
  return result;
}

void mlir::DialectInterfaceCollection<mlir::DialectInlinerInterface>::~DialectInterfaceCollection(mlir::detail::DialectInterfaceCollectionBase *a1)
{
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(a1);
}

void sub_1806FE8E0(void *__p)
{
  operator delete(__p);
}

void collectCallOps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  mlir::GenericProgramPoint *v19;
  mlir::GenericProgramPoint *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t InterfaceFor;
  uint64_t canMapOperands;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  char *v52;
  void *v53;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  void *v59;
  uint64_t v60;
  _QWORD v61[18];

  v61[16] = *MEMORY[0x1E0C80C00];
  v59 = v61;
  v60 = 0x800000000;
  if (a1 != a2)
  {
    v11 = a1;
    v12 = 0;
    do
    {
      while (1)
      {
        v13 = v11 ? v11 - 8 : 0;
        if (v12 >= HIDWORD(v60))
          break;
        v14 = (uint64_t *)((char *)v59 + 16 * v12);
        *v14 = v13;
        v14[1] = a3;
        LODWORD(v60) = ++v12;
        v11 = *(_QWORD *)(v11 + 8);
        if (v11 == a2)
          goto LABEL_10;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v12 + 1, 16);
      v15 = (uint64_t *)((char *)v59 + 16 * v60);
      *v15 = v13;
      v15[1] = a3;
      v12 = v60 + 1;
      LODWORD(v60) = v60 + 1;
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11 != a2);
LABEL_10:
    if (v12)
    {
      v53 = (void *)(a6 + 16);
      while (1)
      {
        v16 = (char *)v59 + 16 * v12;
        v17 = *((_QWORD *)v16 - 2);
        v18 = *((_QWORD *)v16 - 1);
        LODWORD(v60) = --v12;
        v19 = (mlir::GenericProgramPoint *)(v17 + 32);
        v20 = *(mlir::GenericProgramPoint **)(v17 + 40);
        if (v20 != (mlir::GenericProgramPoint *)(v17 + 32))
          break;
LABEL_13:
        if (!v12)
          goto LABEL_64;
      }
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v20);
        v23 = v22;
        if (!mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(v22))
          break;
        InterfaceFor = mlir::OpInterface<mlir::CallOpInterface,mlir::detail::CallOpInterfaceInterfaceTraits>::getInterfaceFor(v23);
        v56 = v23;
        v57 = InterfaceFor;
        if (!v23)
          goto LABEL_34;
        canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v56);
        if ((canMapOperands & 4) != 0)
          goto LABEL_27;
        v26 = canMapOperands & 0xFFFFFFFFFFFFFFF8;
        if ((canMapOperands & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_27;
        if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
          v26 = 0;
        v58[0] = v26;
        if (v26)
        {
          mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v58);
          if (!v27)
          {
LABEL_27:
            v28 = mlir::CallGraph::resolveCallable(a4, v56, v57, a5);
            if (!mlir::CallGraphNode::isExternal((mlir::CallGraphNode *)v28))
            {
              v29 = v57;
              v30 = *(unsigned int *)(a6 + 8);
              if (v30 < *(_DWORD *)(a6 + 12))
              {
                v21 = (_QWORD *)(*(_QWORD *)a6 + 32 * v30);
                *v21 = v56;
                v21[1] = v29;
                v21[2] = v18;
                v21[3] = v28;
              }
              else
              {
                v58[0] = v56;
                v58[1] = v57;
                v58[2] = v18;
                v58[3] = v28;
                v31 = v30 + 1;
                v32 = *(_QWORD *)a6 + 32 * v30 > (unint64_t)v58;
                if (*(_QWORD *)a6 <= (unint64_t)v58 && v32)
                {
                  v52 = (char *)v58 - *(_QWORD *)a6;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v53, v31, 32);
                  v33 = *(_QWORD *)a6;
                  v34 = &v52[*(_QWORD *)a6];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v53, v31, 32);
                  v33 = *(_QWORD *)a6;
                  v34 = (char *)v58;
                }
                v35 = (_OWORD *)(v33 + 32 * *(unsigned int *)(a6 + 8));
                v36 = *((_OWORD *)v34 + 1);
                *v35 = *(_OWORD *)v34;
                v35[1] = v36;
              }
              ++*(_DWORD *)(a6 + 8);
            }
          }
        }
LABEL_18:
        v20 = (mlir::GenericProgramPoint *)*((_QWORD *)v20 + 1);
        if (v20 == v19)
        {
          v12 = v60;
          goto LABEL_13;
        }
      }
      v56 = 0;
      v57 = 0;
LABEL_34:
      v37 = *(unsigned int *)(v23 + 44);
      if ((v37 & 0x7FFFFF) != 0)
      {
        v38 = ((v23 + 16 * ((v37 >> 23) & 1) + ((v37 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v23 + 40);
        v39 = v38 + 24 * (v37 & 0x7FFFFF);
        if ((a7 & 1) != 0)
        {
          do
          {
            v40 = mlir::CallGraph::lookupNode(a4, v38);
            if (v40)
              v41 = v40;
            else
              v41 = v18;
            v42 = *(_QWORD *)(v38 + 8);
            if (v42 != v38)
            {
              v43 = v60;
              do
              {
                while (1)
                {
                  v44 = v42 ? v42 - 8 : 0;
                  if (v43 >= HIDWORD(v60))
                    break;
                  v45 = (uint64_t *)((char *)v59 + 16 * v43);
                  *v45 = v44;
                  v45[1] = v41;
                  LODWORD(v60) = ++v43;
                  v42 = *(_QWORD *)(v42 + 8);
                  if (v42 == v38)
                    goto LABEL_37;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v43 + 1, 16);
                v46 = (uint64_t *)((char *)v59 + 16 * v60);
                *v46 = v44;
                v46[1] = v41;
                v43 = v60 + 1;
                LODWORD(v60) = v60 + 1;
                v42 = *(_QWORD *)(v42 + 8);
              }
              while (v42 != v38);
            }
LABEL_37:
            v38 += 24;
          }
          while (v38 != v39);
        }
        else
        {
          do
          {
            if (!mlir::CallGraph::lookupNode(a4, v38))
            {
              v47 = *(_QWORD *)(v38 + 8);
              if (v47 != v38)
              {
                v48 = v60;
                do
                {
                  while (1)
                  {
                    v49 = v47 ? v47 - 8 : 0;
                    if (v48 >= HIDWORD(v60))
                      break;
                    v50 = (uint64_t *)((char *)v59 + 16 * v48);
                    *v50 = v49;
                    v50[1] = v18;
                    LODWORD(v60) = ++v48;
                    v47 = *(_QWORD *)(v47 + 8);
                    if (v47 == v38)
                      goto LABEL_51;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v48 + 1, 16);
                  v51 = (uint64_t *)((char *)v59 + 16 * v60);
                  *v51 = v49;
                  v51[1] = v18;
                  v48 = v60 + 1;
                  LODWORD(v60) = v60 + 1;
                  v47 = *(_QWORD *)(v47 + 8);
                }
                while (v47 != v38);
              }
            }
LABEL_51:
            v38 += 24;
          }
          while (v38 != v39);
        }
      }
      goto LABEL_18;
    }
  }
LABEL_64:
  if (v59 != v61)
    free(v59);
}

mlir::GenericProgramPoint *llvm::function_ref<void ()(mlir::Operation *,BOOL)>::callback_fn<`anonymous namespace'::CGUseList::CGUseList(mlir::Operation *,mlir::CallGraph &,mlir::SymbolTableCollection &)::$_0>(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v5;
  mlir::Region *v6;
  uint64_t v7;
  mlir::GenericProgramPoint *result;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  mlir::SymbolTable *v11;
  uint64_t InterfaceFor;
  uint64_t *v13;
  uint64_t canMapOperands;
  uint64_t v15;
  uint64_t v16;
  uint64_t InherentAttr;
  char v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  mlir::SymbolTable *v39;
  uint64_t v40;
  mlir::SymbolTable *v41;
  uint64_t v42;
  __int128 v43;
  mlir::GenericProgramPoint *v44;
  uint64_t v45;
  mlir::GenericProgramPoint *v46;
  __int128 v47;
  mlir::GenericProgramPoint *v48;

  v5 = *(unsigned int *)(a2 + 44);
  if ((v5 & 0x7FFFFF) != 0)
    v6 = (mlir::Region *)(((a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(a2 + 40));
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  mlir::Region::OpIterator::OpIterator(&v47, v6, 0);
  mlir::Region::OpIterator::OpIterator(&v45, v6, 1);
  result = v48;
  v44 = v48;
  v43 = v47;
  v9 = v46;
  if (v48 != v46)
  {
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(result);
      v11 = (mlir::SymbolTable *)v10;
      if (!mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v10))
        break;
      if (!v11)
      {
        v41 = 0;
        v42 = 0;
        goto LABEL_6;
      }
      InterfaceFor = mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v11);
      v41 = v11;
      v42 = InterfaceFor;
      v13 = *(uint64_t **)a1;
      canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v41);
      v15 = mlir::CallGraph::lookupNode(v13, canMapOperands);
      if (!v15)
        goto LABEL_6;
      v16 = v15;
      InherentAttr = mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v11);
      if (!InherentAttr)
        goto LABEL_18;
      if (*((_BYTE *)v11 + 47)
        && (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)v11, (uint64_t)"sym_name", 8), v18))
      {
        if (!InherentAttr)
        {
LABEL_18:
          v39 = 0;
          v40 = InherentAttr;
          goto LABEL_7;
        }
      }
      else if (!mlir::DictionaryAttr::contains((uint64_t)v11 + 56, "sym_name", 8uLL))
      {
        v39 = 0;
        v40 = 0;
        goto LABEL_7;
      }
      v19 = mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v11);
      v39 = v11;
      v40 = v19;
      if ((a3 & 1) == 0 && !mlir::CallableOpInterface::getResAttrsAttr((mlir::CallableOpInterface *)&v39)
        || !mlir::SymbolOpInterface::canDiscardOnUseEmpty((mlir::SymbolOpInterface *)&v39))
      {
        goto LABEL_7;
      }
      v20 = *(_DWORD *)(v7 + 16);
      if (!v20)
        goto LABEL_45;
      v21 = (v20 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v22 = (_QWORD *)(*(_QWORD *)v7 + 16 * v21);
      v23 = *v22;
      if (v16 != *v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != -4096)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v23 == -8192;
          if (v26)
            v24 = v22;
          v27 = v21 + v25++;
          v21 = v27 & (v20 - 1);
          v22 = (_QWORD *)(*(_QWORD *)v7 + 16 * v21);
          v23 = *v22;
          if (v16 == *v22)
            goto LABEL_7;
        }
        if (v24)
          v29 = (uint64_t)v24;
        else
          v29 = (uint64_t)v22;
        v30 = *(_DWORD *)(v7 + 8);
        if (4 * v30 + 4 < 3 * v20)
        {
          if (v20 + ~v30 - *(_DWORD *)(v7 + 12) <= v20 >> 3)
            goto LABEL_46;
          v28 = *(_QWORD *)v29;
          ++*(_DWORD *)(v7 + 8);
          if (v28 != -4096)
            goto LABEL_39;
        }
        else
        {
LABEL_45:
          v20 *= 2;
LABEL_46:
          llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v7, v20);
          v31 = *(_DWORD *)(v7 + 16) - 1;
          v32 = v31 & ((v16 >> 4) ^ (v16 >> 9));
          v29 = *(_QWORD *)v7 + 16 * v32;
          v33 = *(_QWORD *)v29;
          if (v16 == *(_QWORD *)v29)
          {
LABEL_47:
            ++*(_DWORD *)(v7 + 8);
            if (v16 == -4096)
              goto LABEL_40;
          }
          else
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v29;
              v37 = v32 + v35++;
              v32 = v37 & v31;
              v29 = *(_QWORD *)v7 + 16 * (v37 & v31);
              v33 = *(_QWORD *)v29;
              if (v16 == *(_QWORD *)v29)
                goto LABEL_47;
            }
            if (v34)
              v29 = v34;
            v38 = *(_QWORD *)v29;
            ++*(_DWORD *)(v7 + 8);
            if (v38 == -4096)
              goto LABEL_40;
          }
LABEL_39:
          --*(_DWORD *)(v7 + 12);
        }
LABEL_40:
        *(_QWORD *)v29 = v16;
        *(_DWORD *)(v29 + 8) = 0;
      }
LABEL_7:
      mlir::Region::OpIterator::operator++((uint64_t *)&v47);
      result = v48;
      if (v48 == v9)
        return result;
    }
    v41 = 0;
    v42 = 0;
LABEL_6:
    goto LABEL_7;
  }
  return result;
}

void walkReferencedSymbolNodes(mlir::SymbolTable *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, _QWORD), uint64_t a6)
{
  mlir::Block *v12;
  mlir::SymbolTable *ParentOp;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t InterfaceFor;
  uint64_t v26;
  uint64_t canMapOperands;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  int v32;
  _QWORD *v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  _QWORD *v45;
  char v46;

  mlir::SymbolTable::getSymbolUses(a1, (uint64_t)&__p);
  v12 = (mlir::Block *)*((_QWORD *)a1 + 2);
  if (v12)
    ParentOp = (mlir::SymbolTable *)mlir::Block::getParentOp(v12);
  else
    ParentOp = 0;
  v14 = __p;
  v15 = v45;
  while (v14 != v15)
  {
    v16 = v14[1];
    v17 = *(_DWORD *)(a4 + 16);
    if (!v17)
      goto LABEL_35;
    v18 = *(_QWORD *)a4;
    v19 = ((v16 >> 4) ^ (v16 >> 9)) & (v17 - 1);
    v20 = (_QWORD *)(*(_QWORD *)a4 + 16 * v19);
    v21 = *v20;
    if (v16 == *v20)
    {
LABEL_9:
      v22 = *(_QWORD *)(v18 + 16 * v19 + 8);
      if (v22)
        goto LABEL_20;
      goto LABEL_5;
    }
    v29 = 0;
    v30 = 1;
    while (v21 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v21 == -8192;
      if (v31)
        v29 = v20;
      v32 = v19 + v30++;
      v19 = v32 & (v17 - 1);
      v20 = (_QWORD *)(v18 + 16 * v19);
      v21 = *v20;
      if (v16 == *v20)
        goto LABEL_9;
    }
    v33 = v29 ? v29 : v20;
    v34 = *(_DWORD *)(a4 + 8);
    if (4 * v34 + 4 < 3 * v17)
    {
      if (v17 + ~v34 - *(_DWORD *)(a4 + 12) > v17 >> 3)
        goto LABEL_13;
    }
    else
    {
LABEL_35:
      v17 *= 2;
    }
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a4, v17);
    v35 = *(_DWORD *)(a4 + 16) - 1;
    v36 = v35 & ((v16 >> 4) ^ (v16 >> 9));
    v33 = (_QWORD *)(*(_QWORD *)a4 + 16 * v36);
    v37 = *v33;
    if (v16 == *v33)
    {
LABEL_37:
      ++*(_DWORD *)(a4 + 8);
      if (v16 == -4096)
        goto LABEL_15;
LABEL_14:
      --*(_DWORD *)(a4 + 12);
      goto LABEL_15;
    }
    v38 = 0;
    v39 = 1;
    while (v37 != -4096)
    {
      if (v38)
        v40 = 0;
      else
        v40 = v37 == -8192;
      if (v40)
        v38 = v33;
      v41 = v36 + v39++;
      v36 = v41 & v35;
      v33 = (_QWORD *)(*(_QWORD *)a4 + 16 * v36);
      v37 = *v33;
      if (v16 == *v33)
        goto LABEL_37;
    }
    if (v38)
      v33 = v38;
LABEL_13:
    v23 = *v33;
    ++*(_DWORD *)(a4 + 8);
    if (v23 != -4096)
      goto LABEL_14;
LABEL_15:
    *v33 = v16;
    v33[1] = 0;
    v24 = v33 + 1;
    InterfaceFor = mlir::SymbolTableCollection::lookupNearestSymbolFrom(a3, ParentOp, v14[1]);
    v26 = InterfaceFor;
    if (InterfaceFor)
    {
      if (!mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor))
      {
        v42 = 0;
        v43 = 0;
        goto LABEL_5;
      }
      InterfaceFor = mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v26);
    }
    v42 = v26;
    v43 = InterfaceFor;
    if (v26)
    {
      canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v42);
      v28 = mlir::CallGraph::lookupNode(a2, canMapOperands);
      *v24 = v28;
      v22 = v28;
      if (v28)
LABEL_20:
        a5(a6, v22, *v14);
    }
LABEL_5:
    v14 += 2;
  }
  if (v46 && __p)
  {
    v45 = __p;
    operator delete(__p);
  }
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::CallGraphNode *,`anonymous namespace'::CGUseList::CGUser,llvm::DenseMapInfo<mlir::CallGraphNode *,void>,llvm::detail::DenseMapPair<mlir::CallGraphNode *,`anonymous namespace'::CGUseList::CGUser>>,mlir::CallGraphNode *,`anonymous namespace'::CGUseList::CGUser,llvm::DenseMapInfo<mlir::CallGraphNode *,void>,llvm::detail::DenseMapPair<mlir::CallGraphNode *,`anonymous namespace'::CGUseList::CGUser>>::operator[](uint64_t a1, uint64_t *a2)
{
  llvm *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  _QWORD *buffer;
  unsigned int v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  llvm *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  int v55;
  BOOL v56;
  unsigned int v57;

  v4 = *(llvm **)a1;
  v5 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v5)
    goto LABEL_23;
  v6 = v5 - 1;
  v7 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v5 - 1);
  v8 = (char *)v4 + 56 * v7;
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 == *a2)
    return v8 + 8;
  v10 = 0;
  v11 = 1;
  while (v9 != -4096)
  {
    if (v10)
      v12 = 0;
    else
      v12 = v9 == -8192;
    if (v12)
      v10 = v8;
    v13 = v7 + v11++;
    v7 = v13 & v6;
    v8 = (char *)v4 + 56 * (v13 & v6);
    v9 = *(_QWORD *)v8;
    if (*(_QWORD *)v8 == *a2)
      return v8 + 8;
  }
  if (v10)
    v8 = v10;
  v18 = *(_DWORD *)(a1 + 8);
  if (4 * v18 + 4 < (3 * v5))
  {
    v14 = (int)v5 + ~v18 - *(_DWORD *)(a1 + 12) > v5 >> 3;
    v15 = *(_DWORD *)(a1 + 16);
    if (v14)
      goto LABEL_15;
  }
  else
  {
LABEL_23:
    v15 = 2 * v5;
  }
  v19 = (v15 - 1) | ((unint64_t)(v15 - 1) >> 1);
  v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
  v21 = ((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8);
  if ((v21 + 1) > 0x40)
    v22 = v21 + 1;
  else
    v22 = 64;
  *(_DWORD *)(a1 + 16) = v22;
  buffer = llvm::allocate_buffer(56 * v22, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v24 = *(_DWORD *)(a1 + 16);
    if (!v24)
      goto LABEL_43;
    v25 = 56 * v24 - 56;
    if (v25 >= 0x38)
    {
      v33 = v25 / 0x38 + 1;
      v26 = &buffer[7 * (v33 & 0xFFFFFFFFFFFFFFELL)];
      v34 = v33 & 0xFFFFFFFFFFFFFFELL;
      v35 = buffer;
      do
      {
        *v35 = -4096;
        v35[7] = -4096;
        v35 += 14;
        v34 -= 2;
      }
      while (v34);
      if (v33 == (v33 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_43:
        if ((_DWORD)v5)
        {
          v37 = v4;
          do
          {
            v43 = *(_QWORD *)v37;
            if ((*(_QWORD *)v37 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v44 = *(_DWORD *)(a1 + 16) - 1;
              v45 = v44 & ((v43 >> 4) ^ (v43 >> 9));
              v38 = *(_QWORD *)a1 + 56 * v45;
              v46 = *(_QWORD *)v38;
              if (*(_QWORD *)v38 != v43)
              {
                v47 = 0;
                v48 = 1;
                while (v46 != -4096)
                {
                  if (v47)
                    v49 = 0;
                  else
                    v49 = v46 == -8192;
                  if (v49)
                    v47 = v38;
                  v50 = v45 + v48++;
                  v45 = v50 & v44;
                  v38 = *(_QWORD *)a1 + 56 * (v50 & v44);
                  v46 = *(_QWORD *)v38;
                  if (*(_QWORD *)v38 == v43)
                    goto LABEL_47;
                }
                if (v47)
                  v38 = v47;
              }
LABEL_47:
              *(_QWORD *)(v38 + 8) = 0;
              *(_QWORD *)(v38 + 16) = 0;
              *(_QWORD *)v38 = v43;
              *(_DWORD *)(v38 + 24) = 0;
              *(_QWORD *)(v38 + 8) = *((_QWORD *)v37 + 1);
              *((_QWORD *)v37 + 1) = 0;
              *(_DWORD *)(v38 + 16) = *((_DWORD *)v37 + 4);
              *((_DWORD *)v37 + 4) = 0;
              v39 = *(_DWORD *)(v38 + 20);
              *(_DWORD *)(v38 + 20) = *((_DWORD *)v37 + 5);
              *((_DWORD *)v37 + 5) = v39;
              v40 = *(_DWORD *)(v38 + 24);
              *(_DWORD *)(v38 + 24) = *((_DWORD *)v37 + 6);
              *((_DWORD *)v37 + 6) = v40;
              *(_QWORD *)(v38 + 32) = 0;
              *(_QWORD *)(v38 + 40) = 0;
              *(_DWORD *)(v38 + 48) = 0;
              *(_QWORD *)(v38 + 32) = *((_QWORD *)v37 + 4);
              *((_QWORD *)v37 + 4) = 0;
              *(_DWORD *)(v38 + 40) = *((_DWORD *)v37 + 10);
              *((_DWORD *)v37 + 10) = 0;
              v41 = *(_DWORD *)(v38 + 44);
              *(_DWORD *)(v38 + 44) = *((_DWORD *)v37 + 11);
              *((_DWORD *)v37 + 11) = v41;
              v42 = *(unsigned int *)(v38 + 48);
              *(_DWORD *)(v38 + 48) = *((_DWORD *)v37 + 12);
              *((_DWORD *)v37 + 12) = v42;
              ++*(_DWORD *)(a1 + 8);
              llvm::deallocate_buffer(0, (void *)(16 * v42));
            }
            v37 = (llvm *)((char *)v37 + 56);
          }
          while (v37 != (llvm *)((char *)v4 + 56 * v5));
        }
        llvm::deallocate_buffer(v4, (void *)(56 * v5));
      }
    }
    else
    {
      v26 = buffer;
    }
    v36 = &buffer[7 * v24];
    do
    {
      *v26 = -4096;
      v26 += 7;
    }
    while (v26 != v36);
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v27 = *(_DWORD *)(a1 + 16);
  if (v27)
  {
    v28 = 56 * v27 - 56;
    v29 = buffer;
    if (v28 < 0x38)
      goto LABEL_76;
    v30 = v28 / 0x38 + 1;
    v29 = &buffer[7 * (v30 & 0xFFFFFFFFFFFFFFELL)];
    v31 = v30 & 0xFFFFFFFFFFFFFFELL;
    v32 = buffer;
    do
    {
      *v32 = -4096;
      v32[7] = -4096;
      v32 += 14;
      v31 -= 2;
    }
    while (v31);
    if (v30 != (v30 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_76:
      do
      {
        *v29 = -4096;
        v29 += 7;
      }
      while (v29 != &buffer[7 * v27]);
    }
  }
  v16 = *a2;
  v51 = v27 - 1;
  v52 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v27 - 1);
  v8 = (char *)&buffer[7 * v52];
  v53 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 == *a2)
    goto LABEL_16;
  v54 = 0;
  v55 = 1;
  while (v53 != -4096)
  {
    if (v54)
      v56 = 0;
    else
      v56 = v53 == -8192;
    if (v56)
      v54 = v8;
    v57 = v52 + v55++;
    v52 = v57 & v51;
    v8 = (char *)&buffer[7 * (v57 & v51)];
    v53 = *(_QWORD *)v8;
    if (*(_QWORD *)v8 == v16)
      goto LABEL_16;
  }
  if (v54)
    v8 = v54;
LABEL_15:
  v16 = *(_QWORD *)v8;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v16 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v8 = *a2;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  return v8 + 8;
}

uint64_t `anonymous namespace'::CGUseList::decrementDiscardableUses(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;

  v2 = result;
  if (*(_DWORD *)(a2 + 8))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3)
    {
      v4 = 8 * v3;
      v5 = *(uint64_t **)a2;
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v5;
        v4 -= 8;
        if (!v4)
          goto LABEL_50;
      }
    }
    else
    {
      v5 = *(uint64_t **)a2;
    }
    v6 = *(_QWORD *)a2 + 8 * v3;
    if (v5 != (uint64_t *)v6)
    {
LABEL_9:
      v7 = *v5;
      v8 = *(_DWORD *)(v2 + 16);
      if (!v8)
        goto LABEL_33;
      v9 = v8 - 1;
      v10 = ((v7 >> 4) ^ (v7 >> 9)) & (v8 - 1);
      v11 = *(_QWORD *)v2 + 16 * v10;
      v12 = *(_QWORD *)v11;
      if (v7 == *(_QWORD *)v11)
        goto LABEL_25;
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v11;
        v16 = v10 + v14++;
        v10 = v16 & v9;
        v11 = *(_QWORD *)v2 + 16 * (v16 & v9);
        v12 = *(_QWORD *)v11;
        if (v7 == *(_QWORD *)v11)
          goto LABEL_25;
      }
      if (v13)
        v11 = v13;
      v18 = *(_DWORD *)(v2 + 8);
      if (4 * v18 + 4 < 3 * v8)
      {
        if (v8 + ~v18 - *(_DWORD *)(v2 + 12) > v8 >> 3)
          goto LABEL_22;
        v19 = v6;
        v20 = a2;
      }
      else
      {
LABEL_33:
        v19 = v6;
        v20 = a2;
        v8 *= 2;
      }
      result = (uint64_t)llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v2, v8);
      v21 = *(_DWORD *)(v2 + 16) - 1;
      v22 = v21 & ((v7 >> 4) ^ (v7 >> 9));
      v11 = *(_QWORD *)v2 + 16 * v22;
      v23 = *(_QWORD *)v11;
      if (v7 == *(_QWORD *)v11)
      {
LABEL_36:
        a2 = v20;
        v6 = v19;
        ++*(_DWORD *)(v2 + 8);
        if (v7 == -4096)
          goto LABEL_24;
        goto LABEL_23;
      }
      v24 = 0;
      v25 = 1;
      while (v23 != -4096)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -8192;
        if (v26)
          v24 = v11;
        v27 = v22 + v25++;
        v22 = v27 & v21;
        v11 = *(_QWORD *)v2 + 16 * v22;
        v23 = *(_QWORD *)v11;
        if (v7 == *(_QWORD *)v11)
          goto LABEL_36;
      }
      if (v24)
        v11 = v24;
      a2 = v20;
      v6 = v19;
LABEL_22:
      v17 = *(_QWORD *)v11;
      ++*(_DWORD *)(v2 + 8);
      if (v17 == -4096)
      {
LABEL_24:
        *(_QWORD *)v11 = v7;
        *(_DWORD *)(v11 + 8) = 0;
LABEL_25:
        --*(_DWORD *)(v11 + 8);
        while (1)
        {
          if (++v5 == (uint64_t *)v6)
            goto LABEL_50;
          if ((*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v5 != (uint64_t *)v6)
              goto LABEL_9;
            goto LABEL_50;
          }
        }
      }
LABEL_23:
      --*(_DWORD *)(v2 + 12);
      goto LABEL_24;
    }
  }
LABEL_50:
  if (*(_DWORD *)(a2 + 32))
  {
    v28 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v28)
    {
      v29 = 16 * v28;
      for (i = *(_QWORD *)(a2 + 24); (*(_QWORD *)i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 16)
      {
        v29 -= 16;
        if (!v29)
          return result;
      }
    }
    else
    {
      i = *(_QWORD *)(a2 + 24);
    }
    v31 = *(_QWORD *)(a2 + 24) + 16 * v28;
    if (i != v31)
    {
LABEL_58:
      v32 = *(_DWORD *)(i + 8);
      v33 = *(_DWORD *)(v2 + 16);
      if (v33)
      {
        v34 = v33 - 1;
        v35 = ((*(_QWORD *)i >> 4) ^ (*(_QWORD *)i >> 9)) & v34;
        result = *(_QWORD *)v2 + 16 * v35;
        v36 = *(_QWORD *)result;
        if (*(_QWORD *)i == *(_QWORD *)result)
          goto LABEL_71;
        v37 = 0;
        v38 = 1;
        while (v36 != -4096)
        {
          if (v37)
            v39 = 0;
          else
            v39 = v36 == -8192;
          if (v39)
            v37 = result;
          v40 = v35 + v38++;
          v35 = v40 & v34;
          result = *(_QWORD *)v2 + 16 * v35;
          v36 = *(_QWORD *)result;
          if (*(_QWORD *)i == *(_QWORD *)result)
            goto LABEL_71;
        }
        if (v37)
          v41 = v37;
        else
          v41 = result;
      }
      else
      {
        v41 = 0;
      }
      result = llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::InsertIntoBucket<mlir::TypeID const&>(v2, v41, (uint64_t *)i);
LABEL_71:
      *(_DWORD *)(result + 8) -= v32;
      while (1)
      {
        i += 16;
        if (i == v31)
          break;
        if ((*(_QWORD *)i | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (i != v31)
            goto LABEL_58;
          return result;
        }
      }
    }
  }
  return result;
}

int64x2_t *llvm::function_ref<void ()(mlir::CallGraphNode *,mlir::Operation *)>::callback_fn<`anonymous namespace'::CGUseList::recomputeUses(mlir::CallGraphNode *,mlir::CallGraph &)::$_0>(int64x2_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  _BYTE v33[31];

  v32 = a2;
  v4 = *(_QWORD *)result->i64[0];
  v5 = *(unsigned int *)(result->i64[0] + 16);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t *)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (uint64_t *)(v4 + 16 * v5);
LABEL_8:
  if (v7 != (uint64_t *)(v4 + 16 * v5))
  {
    v11 = result[1].i64[0];
    if (*(_QWORD *)result->i64[1] != a3)
    {
      result = (int64x2_t *)(v11 + 24);
      v12 = *(_QWORD *)(v11 + 24);
      v13 = *(_DWORD *)(v11 + 40);
      if (!v13)
        goto LABEL_33;
      v14 = v13 - 1;
      v15 = (v13 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v16 = (uint64_t *)(v12 + 16 * v15);
      v17 = *v16;
      if (*v16 == a2)
      {
LABEL_28:
        ++*((_DWORD *)v16 + 2);
        goto LABEL_29;
      }
      v18 = 0;
      v19 = 1;
      while (v17 != -4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -8192;
        if (v20)
          v18 = v16;
        v21 = v15 + v19++;
        v15 = v21 & v14;
        v16 = (uint64_t *)(v12 + 16 * (v21 & v14));
        v17 = *v16;
        if (*v16 == a2)
          goto LABEL_28;
      }
      if (v18)
        v16 = v18;
      v23 = *(_DWORD *)(v11 + 32);
      if (4 * v23 + 4 < 3 * v13)
      {
        if (v13 + ~v23 - *(_DWORD *)(v11 + 36) > v13 >> 3)
          goto LABEL_25;
      }
      else
      {
LABEL_33:
        v13 *= 2;
      }
      result = (int64x2_t *)llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)result, v13);
      v24 = *(_QWORD *)(v11 + 24);
      v25 = *(_DWORD *)(v11 + 40) - 1;
      v26 = v25 & ((a2 >> 4) ^ (a2 >> 9));
      v16 = (uint64_t *)(v24 + 16 * v26);
      v27 = *v16;
      if (*v16 == a2)
      {
LABEL_35:
        ++*(_DWORD *)(v11 + 32);
        if (a2 == -4096)
          goto LABEL_27;
        goto LABEL_26;
      }
      v28 = 0;
      v29 = 1;
      while (v27 != -4096)
      {
        if (v28)
          v30 = 0;
        else
          v30 = v27 == -8192;
        if (v30)
          v28 = v16;
        v31 = v26 + v29++;
        v26 = v31 & v25;
        v16 = (uint64_t *)(v24 + 16 * (v31 & v25));
        v27 = *v16;
        if (*v16 == a2)
          goto LABEL_35;
      }
      if (v28)
        v16 = v28;
LABEL_25:
      v22 = *v16;
      ++*(_DWORD *)(v11 + 32);
      if (v22 == -4096)
      {
LABEL_27:
        *v16 = a2;
        *((_DWORD *)v16 + 2) = 0;
        goto LABEL_28;
      }
LABEL_26:
      --*(_DWORD *)(v11 + 36);
      goto LABEL_27;
    }
    result = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)result[1].i64[0], &v32, (uint64_t)v33);
    if (v33[16])
LABEL_29:
      ++*((_DWORD *)v7 + 2);
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>>::resize(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  void *v14;
  unint64_t v15;
  char *Address;
  unsigned int v17;
  uint64_t *v18;
  llvm::StringMapImpl *v19;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = v3 - a2;
  if (v3 != a2)
  {
    v5 = a2;
    if (v3 > a2)
    {
      v7 = *(_QWORD *)a1 + 24 * a2;
      v8 = (void **)(*(_QWORD *)a1 + 24 * v3);
      do
      {
        v9 = v8;
        v8 -= 3;
        if (*((_DWORD *)v9 - 3))
        {
          v10 = *((unsigned int *)v9 - 4);
          if ((_DWORD)v10)
          {
            v11 = 0;
            do
            {
              v12 = *(llvm **)((char *)*v8 + v11);
              if (v12 != (llvm *)-8 && v12 != 0)
              {
                v14 = (void *)(*(_QWORD *)v12 + 17);
                mlir::OpPassManager::~OpPassManager((llvm *)((char *)v12 + 8));
                llvm::deallocate_buffer(v12, v14);
              }
              v11 += 8;
            }
            while (8 * v10 != v11);
          }
        }
        free(*v8);
      }
      while (v8 != (void **)v7);
    }
    else
    {
      v15 = a2 - v3;
      Address = llvm::SmallVectorTemplateBase<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,false>::reserveForParamAndGetAddress(a1, a3, a2 - v3);
      v17 = *(_DWORD *)(a1 + 8);
      if (v15)
      {
        v18 = (uint64_t *)Address;
        v19 = (llvm::StringMapImpl *)(*(_QWORD *)a1 + 24 * v17);
        do
          v19 = (llvm::StringMapImpl *)((char *)llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::StringMap(v19, v18)+ 24);
        while (!__CFADD__(v4++, 1));
        v17 = *(_DWORD *)(a1 + 8);
      }
      v5 = v17 + v15;
    }
    *(_DWORD *)(a1 + 8) = v5;
  }
}

uint64_t `anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0::operator()(unsigned __int8 ***a1, mlir::CallGraphNode *this)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *AttrData;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  int Key;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  int8x16_t *v19;
  const unsigned __int8 *v20;
  uint64_t *v21;
  uint64_t v22;

  v3 = a1[1];
  v5 = **a1;
  v4 = (*a1)[1];
  if (v5 == v4)
  {
    v4 = **a1;
  }
  else
  {
    do
    {
      while (__ldaxr(v5))
      {
        __clrex();
        if (++v5 == v4)
          goto LABEL_6;
      }
    }
    while (__stlxr(1u, v5));
    LODWORD(v4) = (_DWORD)v5;
LABEL_6:
    v5 = **a1;
  }
  v7 = ((_DWORD)v4 - (_DWORD)v5);
  v8 = (uint64_t)&v3[138][24 * v7];
  v9 = *(_QWORD *)(mlir::CallGraphNode::getCallableRegion(this) + 16);
  v22 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8);
  AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v22);
  v12 = v11;
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v8, AttrData, v11);
  v14 = Key;
  if (Key == -1)
    v14 = *(unsigned int *)(v8 + 8);
  if (v14 != *(_DWORD *)(v8 + 8))
  {
    v16 = (uint64_t *)(*(_QWORD *)v8 + 8 * v14);
    goto LABEL_15;
  }
  if (!v3[137])
  {
    result = 1;
    goto LABEL_16;
  }
  mlir::OpPassManager::OpPassManager(&v22, AttrData, v12, 1);
  v15 = v3[137];
  if (v15)
  {
    (*(void (**)(unsigned __int8 *, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v22);
    v16 = llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::try_emplace<mlir::OpPassManager>(v8, AttrData, v12, &v22);
    mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)&v22);
LABEL_15:
    result = ((uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v3[13])(v3[14], *v16 + 8, v9);
LABEL_16:
    atomic_store(0, &(**a1)[v7]);
    return result;
  }
  v18 = std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::try_emplace<mlir::OpPassManager>(v18, v19, v20, v21);
}

uint64_t *llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::try_emplace<mlir::OpPassManager>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *buffer;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *buffer = a3;
  mlir::OpPassManager::OpPassManager(buffer + 1, a4);
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0>(mlir::MLIRContext *,mlir::CallGraphNode **,mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_1E0E50EC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0>(mlir::MLIRContext *,mlir::CallGraphNode **,mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = off_1E0E50EC0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0>(mlir::MLIRContext *,mlir::CallGraphNode **,mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&>,void ()(void)>::operator()(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned __int8 v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = atomic_load(*(unsigned __int8 **)(a1 + 8));
  if ((v1 & 1) == 0)
  {
    do
    {
      v4 = *(unsigned int **)(a1 + 16);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      if (v5 >= **(_DWORD **)(a1 + 24))
        break;
      mlir::ParallelDiagnosticHandler::setOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(a1 + 32), v5);
      mlir::ParallelDiagnosticHandler::eraseOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(a1 + 32));
      v3 = atomic_load(*(unsigned __int8 **)(a1 + 8));
    }
    while ((v3 & 1) == 0);
  }
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0>(mlir::MLIRContext *,mlir::CallGraphNode **,mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir23failableParallelForEachIPPNS_13CallGraphNodeEZN12_GLOBAL__N_111InlinerPass16optimizeSCCAsy"
                     "ncEN4llvm15MutableArrayRefIS2_EEPNS_11MLIRContextEE3$_0EENS_13LogicalResultESA_T_SD_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir23failableParallelForEachIPPNS_13CallGraphNodeEZN12_GLOBAL__N_111InlinerPass16opt"
                                "imizeSCCAsyncEN4llvm15MutableArrayRefIS2_EEPNS_11MLIRContextEE3$_0EENS_13LogicalResultES"
                                "A_T_SD_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir23failableParallelForEachIPPNS_13CallGraphNodeEZN12_GLOBAL__N_111InlinerPass16optimizeSCCAsyncEN4llvm15MutableArrayRefIS2_EEPNS_11MLIRContextEE3$_0EENS_13LogicalResultESA_T_SD_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir23failableParallelForEachIPPNS_13CallGraphNodeEZN12_GLOBAL__N_111InlinerPass16optimizeSCCAsyncEN4llvm15MutableArrayRefIS2_EEPNS_11MLIRContextEE3$_0EENS_13LogicalResultESA_T_SD_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0>(mlir::MLIRContext *,mlir::CallGraphNode **,mlir::CallGraphNode **,`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::InlinerPass::optimizeSCCAsync(llvm::MutableArrayRef<mlir::CallGraphNode *>,mlir::MLIRContext *)::$_0 &&>,void ()(void)>::target_type()
{
}

void `anonymous namespace'::CGUseList::eraseNode(_anonymous_namespace_::CGUseList *this, mlir::CallGraphNode *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  int v10;
  unsigned int v11;

  v2 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)*((_QWORD *)a2 + 6);
    v4 = 8 * v2;
    do
    {
      if ((*v3 & 6) == 4)
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  v5 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)this + 10);
  if (v6)
  {
    v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = v5 + 56 * v7;
    v9 = *(mlir::CallGraphNode **)v8;
    if (*(mlir::CallGraphNode **)v8 == a2)
      goto LABEL_13;
    v10 = 1;
    while (v9 != (mlir::CallGraphNode *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v8 = v5 + 56 * v7;
      v9 = *(mlir::CallGraphNode **)v8;
      if (*(mlir::CallGraphNode **)v8 == a2)
        goto LABEL_13;
    }
  }
  v8 = v5 + 56 * v6;
LABEL_13:
  llvm::deallocate_buffer(*(llvm **)(v8 + 32), (void *)(16 * *(unsigned int *)(v8 + 48)));
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::SingleBlock>(void ***a1)
{
  unsigned __int8 v1;
  void **v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void ***v12;
  const char *v13;
  unint64_t v14;

  if ((v1 & 1) == 0)
  {
    v12 = a1;
    a1 = v12;
    if (v4)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v14 = 83;
      v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5)
        v6 = v5;
      else
        v6 = v14;
      v7 = &v13[v6];
      v8 = v14 - v6;
      if (v14 - v6 >= 0x12)
        v9 = 18;
      else
        v9 = v14 - v6;
      v10 = v8 - v9;
      if (v10 >= v10 - 1)
        v11 = v10 - 1;
      else
        v11 = v10;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      a1 = v12;
    }
  }
  v2 = *a1;
  if (v2[2] == &mlir::detail::TypeIDResolver<void,void>::id)
    return 1;
  else
    return (*((uint64_t (**)(void **, uint64_t))*v2 + 4))(v2, mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id);
}

uint64_t **llvm::function_ref<void ()(mlir::CallGraphNode *,mlir::Operation *)>::callback_fn<`anonymous namespace'::CGUseList::dropCallUses(mlir::CallGraphNode *,mlir::Operation *,mlir::CallGraph &)::$_0>(uint64_t **result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v3 = **result;
  v4 = *((unsigned int *)*result + 4);
  v5 = a2 >> 4;
  if ((_DWORD)v4)
  {
    LODWORD(v6) = (v4 - 1) & (v5 ^ (a2 >> 9));
    v7 = (uint64_t *)(v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(_QWORD *)(v3 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(v3 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  if (v7 == (uint64_t *)(v3 + 16 * v4))
    return result;
  v11 = (uint64_t)result[1];
  --*((_DWORD *)v7 + 2);
  v12 = *(_DWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_30;
  v13 = v12 - 1;
  v14 = (v12 - 1) & (v5 ^ (a2 >> 9));
  v15 = *(_QWORD *)v11 + 16 * v14;
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 != a2)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = *(_QWORD *)v11 + 16 * (v20 & v13);
      v16 = *(_QWORD *)v15;
      if (*(_QWORD *)v15 == a2)
        goto LABEL_25;
    }
    if (v17)
      v15 = v17;
    v22 = *(_DWORD *)(v11 + 8);
    if (4 * v22 + 4 < 3 * v12)
    {
      if (v12 + ~v22 - *(_DWORD *)(v11 + 12) > v12 >> 3)
        goto LABEL_22;
      goto LABEL_31;
    }
LABEL_30:
    v12 *= 2;
LABEL_31:
    result = (uint64_t **)llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v11, v12);
    v23 = *(_DWORD *)(v11 + 16) - 1;
    v24 = v23 & (v5 ^ (a2 >> 9));
    v15 = *(_QWORD *)v11 + 16 * v24;
    v25 = *(_QWORD *)v15;
    if (*(_QWORD *)v15 == a2)
    {
LABEL_32:
      ++*(_DWORD *)(v11 + 8);
      if (a2 == -4096)
        goto LABEL_24;
      goto LABEL_23;
    }
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = v15;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      v15 = *(_QWORD *)v11 + 16 * (v29 & v23);
      v25 = *(_QWORD *)v15;
      if (*(_QWORD *)v15 == a2)
        goto LABEL_32;
    }
    if (v26)
      v15 = v26;
LABEL_22:
    v21 = *(_QWORD *)v15;
    ++*(_DWORD *)(v11 + 8);
    if (v21 == -4096)
    {
LABEL_24:
      *(_QWORD *)v15 = a2;
      *(_DWORD *)(v15 + 8) = 0;
      goto LABEL_25;
    }
LABEL_23:
    --*(_DWORD *)(v11 + 12);
    goto LABEL_24;
  }
LABEL_25:
  --*(_DWORD *)(v15 + 8);
  return result;
}

int32x2_t *llvm::scc_iterator<mlir::CallGraph const*,llvm::GraphTraits<mlir::CallGraph const*>>::ReplaceNode(int32x2_t *result, uint64_t a2, uint64_t a3)
{
  int32x2_t *v5;
  int32x2_t v6;
  int32x2_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int32 v20;
  __int32 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  __int32 v30;
  int32x2_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  int v40;
  __int32 v41;
  int32x2_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  int v54;

  v5 = result;
  v7 = result + 1;
  v6 = result[1];
  v8 = result[3].u32[0];
  v9 = a2 >> 4;
  if (!v8)
    goto LABEL_52;
  v10 = v8 - 1;
  v11 = (v8 - 1) & (v9 ^ (a2 >> 9));
  v12 = *(_QWORD *)&v6 + 16 * v11;
  v13 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 != a2)
  {
    v35 = 0;
    v36 = 1;
    while (v13 != -4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v13 == -8192;
      if (v37)
        v35 = v12;
      v38 = v11 + v36++;
      v11 = v38 & v10;
      v12 = *(_QWORD *)&v6 + 16 * (v38 & v10);
      v13 = *(_QWORD *)v12;
      if (*(_QWORD *)v12 == a2)
        goto LABEL_9;
    }
    if (v35)
      v12 = v35;
    v41 = result[2].i32[0];
    if (4 * v41 + 4 < 3 * v8)
    {
      if (v8 + ~v41 - result[2].i32[1] > v8 >> 3)
        goto LABEL_6;
      goto LABEL_53;
    }
LABEL_52:
    v8 *= 2;
LABEL_53:
    result = (int32x2_t *)llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)&result[1], v8);
    v42 = v5[1];
    v43 = v5[3].i32[0] - 1;
    v44 = v43 & (v9 ^ (a2 >> 9));
    v12 = *(_QWORD *)&v42 + 16 * v44;
    v45 = *(_QWORD *)v12;
    if (*(_QWORD *)v12 == a2)
    {
LABEL_54:
      ++v5[2].i32[0];
      if (a2 == -4096)
        goto LABEL_8;
      goto LABEL_7;
    }
    v46 = 0;
    v47 = 1;
    while (v45 != -4096)
    {
      if (v46)
        v48 = 0;
      else
        v48 = v45 == -8192;
      if (v48)
        v46 = v12;
      v49 = v44 + v47++;
      v44 = v49 & v43;
      v12 = *(_QWORD *)&v42 + 16 * (v49 & v43);
      v45 = *(_QWORD *)v12;
      if (*(_QWORD *)v12 == a2)
        goto LABEL_54;
    }
    if (v46)
      v12 = v46;
LABEL_6:
    v15 = *(_QWORD *)v12;
    ++v5[2].i32[0];
    if (v15 == -4096)
    {
LABEL_8:
      *(_QWORD *)v12 = a2;
      *(_DWORD *)(v12 + 8) = 0;
      v6 = v5[1];
      v8 = v5[3].u32[0];
LABEL_9:
      v14 = *(_DWORD *)(v12 + 8);
      if (!v8)
        goto LABEL_32;
      goto LABEL_10;
    }
LABEL_7:
    --v5[2].i32[1];
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(v12 + 8);
LABEL_10:
  v16 = v8 - 1;
  v17 = (v8 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v18 = *(_QWORD *)&v6 + 16 * v17;
  v19 = *(_QWORD *)v18;
  if (*(_QWORD *)v18 == a3)
    goto LABEL_11;
  v26 = 0;
  v27 = 1;
  while (v19 != -4096)
  {
    if (v26)
      v28 = 0;
    else
      v28 = v19 == -8192;
    if (v28)
      v26 = v18;
    v29 = v17 + v27++;
    v17 = v29 & v16;
    v18 = *(_QWORD *)&v6 + 16 * (v29 & v16);
    v19 = *(_QWORD *)v18;
    if (*(_QWORD *)v18 == a3)
      goto LABEL_11;
  }
  if (v26)
    v18 = v26;
  v30 = v5[2].i32[0];
  if (4 * v30 + 4 < 3 * v8)
  {
    if (v8 + ~v30 - v5[2].i32[1] > v8 >> 3)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v8 *= 2;
LABEL_33:
  v54 = v14;
  result = (int32x2_t *)llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)v7, v8);
  v31 = v5[1];
  v32 = v5[3].i32[0] - 1;
  v33 = v32 & ((a3 >> 4) ^ (a3 >> 9));
  v18 = *(_QWORD *)&v31 + 16 * v33;
  v34 = *(_QWORD *)v18;
  if (*(_QWORD *)v18 == a3)
  {
LABEL_34:
    v14 = v54;
    ++v5[2].i32[0];
    if (a3 == -4096)
      goto LABEL_19;
    goto LABEL_18;
  }
  v50 = 0;
  v51 = 1;
  while (v34 != -4096)
  {
    if (v50)
      v52 = 0;
    else
      v52 = v34 == -8192;
    if (v52)
      v50 = v18;
    v53 = v33 + v51++;
    v33 = v53 & v32;
    v18 = *(_QWORD *)&v31 + 16 * (v53 & v32);
    v34 = *(_QWORD *)v18;
    if (*(_QWORD *)v18 == a3)
      goto LABEL_34;
  }
  if (v50)
    v18 = v50;
  v14 = v54;
LABEL_17:
  v25 = *(_QWORD *)v18;
  ++v5[2].i32[0];
  if (v25 != -4096)
LABEL_18:
    --v5[2].i32[1];
LABEL_19:
  *(_QWORD *)v18 = a3;
  *(_DWORD *)(v18 + 8) = 0;
  v6 = *v7;
LABEL_11:
  *(_DWORD *)(v18 + 8) = v14;
  v20 = v5[3].i32[0];
  if (v20)
  {
    v21 = v20 - 1;
    LODWORD(v22) = (v20 - 1) & (v9 ^ (a2 >> 9));
    v23 = (uint64_t *)(*(_QWORD *)&v6 + 16 * v22);
    v24 = *v23;
    if (*v23 == a2)
    {
LABEL_13:
      *v23 = -8192;
      v5[2] = vadd_s32(v5[2], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v39 = 1;
      while (v24 != -4096)
      {
        v40 = v22 + v39++;
        v22 = v40 & v21;
        v24 = *(_QWORD *)(*(_QWORD *)&v6 + 16 * v22);
        if (v24 == a2)
        {
          v23 = (uint64_t *)(*(_QWORD *)&v6 + 16 * v22);
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  void **i;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  llvm *v24;
  void *v26;
  llvm::StringMapImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  llvm::StringMapImpl *v30;
  char v32;
  unint64_t v33;
  char v34;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator> const*,llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator> const*,llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>*>((uint64_t)&v32, *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + 24 * v4), *(_QWORD *)a1);
        v15 = v14;
        v16 = *(_QWORD *)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v16 = *(_QWORD *)a1;
        v15 = *(_QWORD *)a1;
      }
      for (i = (void **)(v16 + 24 * v5); i != (void **)v15; free(*i))
      {
        v21 = i;
        i -= 3;
        if (*((_DWORD *)v21 - 3))
        {
          v22 = *((unsigned int *)v21 - 4);
          if ((_DWORD)v22)
          {
            v23 = 0;
            do
            {
              v24 = *(llvm **)((char *)*i + v23);
              if (v24 != (llvm *)-8 && v24 != 0)
              {
                v26 = (void *)(*(_QWORD *)v24 + 17);
                mlir::OpPassManager::~OpPassManager((llvm *)((char *)v24 + 8));
                llvm::deallocate_buffer(v24, v26);
              }
              v23 += 8;
            }
            while (8 * v22 != v23);
          }
        }
      }
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)a1;
        v7 = (void **)(*(_QWORD *)a1 + 24 * v5);
        do
        {
          v8 = v7;
          v7 -= 3;
          if (*((_DWORD *)v8 - 3))
          {
            v9 = *((unsigned int *)v8 - 4);
            if ((_DWORD)v9)
            {
              v10 = 0;
              do
              {
                v11 = *(llvm **)((char *)*v7 + v10);
                if (v11 != (llvm *)-8 && v11 != 0)
                {
                  v13 = (void *)(*(_QWORD *)v11 + 17);
                  mlir::OpPassManager::~OpPassManager((llvm *)((char *)v11 + 8));
                  llvm::deallocate_buffer(v11, v13);
                }
                v10 += 8;
              }
              while (8 * v9 != v10);
            }
          }
          free(*v7);
        }
        while (v7 != (void **)v6);
      }
      *(_DWORD *)(a1 + 8) = 0;
      v33 = 0;
      v17 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v4, 24, &v33);
      llvm::SmallVectorTemplateBase<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v17);
      v19 = v33;
      if (*(_QWORD *)a1 != a1 + 16)
        free(*(void **)a1);
      v5 = 0;
      *(_QWORD *)a1 = v17;
      *(_DWORD *)(a1 + 12) = v19;
      LODWORD(v18) = *(_DWORD *)(a2 + 8);
      if (!(_DWORD)v18)
        goto LABEL_41;
      goto LABEL_39;
    }
    v17 = *(char **)a1;
    if ((_DWORD)v5)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator> const*,llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator> const*,llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>*>((uint64_t)&v34, *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + 24 * v5), *(_QWORD *)a1);
      v17 = *(char **)a1;
      v18 = *(unsigned int *)(a2 + 8);
      if (v5 == v18)
        goto LABEL_41;
    }
    else
    {
      v5 = 0;
      LODWORD(v18) = *(_DWORD *)(a2 + 8);
      if (!(_DWORD)v18)
      {
LABEL_41:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
LABEL_39:
    v27 = (llvm::StringMapImpl *)&v17[24 * v5];
    v28 = (uint64_t *)(*(_QWORD *)a2 + 24 * v5);
    v29 = 24 * v18 - 24 * v5;
    do
    {
      v30 = llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::StringMap(v27, v28);
      v28 += 3;
      v27 = (llvm::StringMapImpl *)((char *)v30 + 24);
      v29 -= 24;
    }
    while (v29);
    goto LABEL_41;
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator> const*,llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator> const*,llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  llvm *v13;
  void *v15;
  void *v17;
  _BYTE v18[12];

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      llvm::StringMap<mlir::OpPassManager,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)&v17, v5);
      v7 = *(void **)a4;
      *(_QWORD *)a4 = v17;
      v17 = v7;
      v8 = *(unsigned int *)(a4 + 8);
      v9 = *(_QWORD *)v18;
      *(_DWORD *)v18 = *(_DWORD *)(a4 + 8);
      v10 = *(_DWORD *)&v18[8];
      v11 = *(_QWORD *)(a4 + 12);
      *(_QWORD *)(a4 + 8) = v9;
      *(_QWORD *)&v18[4] = v11;
      *(_DWORD *)(a4 + 16) = v10;
      if ((_DWORD)v11 && (_DWORD)v8)
      {
        v12 = 0;
        do
        {
          v13 = *(llvm **)((char *)v17 + v12);
          if (v13 != (llvm *)-8 && v13 != 0)
          {
            v15 = (void *)(*(_QWORD *)v13 + 17);
            mlir::OpPassManager::~OpPassManager((llvm *)((char *)v13 + 8));
            llvm::deallocate_buffer(v13, v15);
          }
          v12 += 8;
        }
        while (8 * v8 != v12);
        v7 = v17;
      }
      free(v7);
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_anonymous_namespace_::PrintOpPass *mlir::createPrintOpGraphPass@<X0>(mlir *this@<X0>, _anonymous_namespace_::PrintOpPass **a2@<X8>)
{
  _anonymous_namespace_::PrintOpPass *v5;
  _anonymous_namespace_::PrintOpPass *result;

  v5 = (_anonymous_namespace_::PrintOpPass *)operator new(0x620uLL);
  *a2 = result;
  return result;
}

_anonymous_namespace_::PrintOpPass *`anonymous namespace'::PrintOpPass::PrintOpPass(_anonymous_namespace_::PrintOpPass *this, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  int v6;
  int *v7;
  __n128 v8;

  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 120) = 0;
  v4 = (_QWORD *)((char *)this + 152);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = (char *)this + 200;
  *((_QWORD *)this + 24) = 0x400000000;
  *((_QWORD *)this + 29) = (char *)this + 248;
  *((_QWORD *)this + 30) = 0x400000000;
  *((_QWORD *)this + 37) = 0x1000000000;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = 0;
  *(_QWORD *)this = off_1E0E4D968;
  v8.n128_u64[0] = (unint64_t)"Limit attribute/type length to number of chars";
  v8.n128_u64[1] = 46;
  v6 = 20;
  v7 = &v6;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)this + 43, (_QWORD *)this + 19, (uint64_t)"max-label-len", 13, &v8, &v7);
  *((_QWORD *)this + 43) = off_1E0E4C3E0;
  *((_QWORD *)this + 67) = &unk_1E0E4C460;
  v8.n128_u64[0] = (unint64_t)"Print attributes of operations";
  v8.n128_u64[1] = 30;
  LOBYTE(v6) = 1;
  v7 = &v6;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)this + 69, v4, (uint64_t)"print-attrs", 11, &v8, (_BYTE **)&v7);
  *((_QWORD *)this + 69) = &off_1E0E4C320;
  *((_QWORD *)this + 93) = &unk_1E0E4C3A0;
  v8.n128_u64[0] = (unint64_t)"Print control flow edges";
  v8.n128_u64[1] = 24;
  LOBYTE(v6) = 0;
  v7 = &v6;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)this + 95, v4, (uint64_t)"print-control-flow-edges", 24, &v8, (_BYTE **)&v7);
  *((_QWORD *)this + 95) = &off_1E0E4C320;
  *((_QWORD *)this + 119) = &unk_1E0E4C3A0;
  v8.n128_u64[0] = (unint64_t)"Print data flow edges";
  v8.n128_u64[1] = 21;
  LOBYTE(v6) = 1;
  v7 = &v6;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)this + 121, v4, (uint64_t)"print-data-flow-edges", 21, &v8, (_BYTE **)&v7);
  *((_QWORD *)this + 121) = &off_1E0E4C320;
  *((_QWORD *)this + 145) = &unk_1E0E4C3A0;
  v8.n128_u64[0] = (unint64_t)"Print result types of operations";
  v8.n128_u64[1] = 32;
  LOBYTE(v6) = 1;
  v7 = &v6;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)this + 147, v4, (uint64_t)"print-result-types", 18, &v8, (_BYTE **)&v7);
  *((_QWORD *)this + 147) = &off_1E0E4C320;
  *((_QWORD *)this + 171) = &unk_1E0E4C3A0;
  *(_QWORD *)this = off_1E0E152F0;
  *((_DWORD *)this + 348) = 0;
  *((_BYTE *)this + 1424) = 0;
  *((_QWORD *)this + 179) = 0;
  *((_QWORD *)this + 175) = 0;
  *((_OWORD *)this + 88) = 0u;
  *((_QWORD *)this + 173) = &unk_1E0E2BD78;
  *((_QWORD *)this + 180) = 1;
  *((_DWORD *)this + 362) = 0;
  *((_OWORD *)this + 91) = 0u;
  *((_BYTE *)this + 1472) = 1;
  *((_QWORD *)this + 185) = a2;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)this + 1384, 0, 0, 0);
  *((_DWORD *)this + 384) = 0;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_DWORD *)this + 390) = 0;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *(_OWORD *)((char *)this + 1516) = 0u;
  return this;
}

void `anonymous namespace'::PrintOpPass::~PrintOpPass(_anonymous_namespace_::PrintOpPass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E0E152F0;
  v2 = *((unsigned int *)this + 390);
  v3 = *((_QWORD *)this + 193);
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    do
    {
      if ((*(_QWORD *)v3 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(char *)(v3 + 39) < 0)
        operator delete(*(void **)(v3 + 16));
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
    v3 = *((_QWORD *)this + 193);
    v5 = 40 * *((unsigned int *)this + 390);
  }
  else
  {
    v5 = 0;
  }
  llvm::deallocate_buffer((llvm *)v3, (void *)v5);
}

{
}

const char *mlir::impl::ViewOpGraphBase<`anonymous namespace'::PrintOpPass>::getName()
{
  return "ViewOpGraph";
}

const char *mlir::impl::ViewOpGraphBase<`anonymous namespace'::PrintOpPass>::getArgument()
{
  return "view-op-graph";
}

const char *mlir::impl::ViewOpGraphBase<`anonymous namespace'::PrintOpPass>::getDescription()
{
  return "Print Graphviz visualization of an operation";
}

llvm::raw_ostream *`anonymous namespace'::PrintOpPass::runOnOperation(_anonymous_namespace_::PrintOpPass *this)
{
  mlir::ForwardIterator *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  std::string v29;
  _QWORD v30[2];
  void *v31;
  uint64_t v32;
  _QWORD v33[7];

  v33[6] = *MEMORY[0x1E0C80C00];
  v2 = (mlir::ForwardIterator *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v3 = (uint64_t *)((char *)this + 1544);
  if (!*((_QWORD *)this + 194))
    goto LABEL_14;
  v4 = *((unsigned int *)this + 390);
  if (v4 <= 4 * *((_DWORD *)this + 388) || v4 < 0x41)
  {
    if (!(_DWORD)v4)
    {
LABEL_13:
      *((_QWORD *)this + 194) = 0;
      goto LABEL_14;
    }
    v5 = *v3;
    v6 = 40 * v4;
    while (1)
    {
      if (*(_QWORD *)v5 != -8192)
      {
        if (*(_QWORD *)v5 == -4096)
          goto LABEL_8;
        if (*(char *)(v5 + 39) < 0)
          operator delete(*(void **)(v5 + 16));
      }
      *(_QWORD *)v5 = -4096;
LABEL_8:
      v5 += 40;
      v6 -= 40;
      if (!v6)
        goto LABEL_13;
    }
  }
  llvm::DenseMap<mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>::shrink_and_clear((uint64_t)this + 1544);
LABEL_14:
  v31 = v33;
  v32 = 0x600000000;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  v29.__r_.__value_.__l.__size_ = (std::string::size_type)&v31;
  v8 = (char *)v31;
  if (!(_DWORD)v32)
    goto LABEL_38;
  v9 = 0;
  v10 = (char *)v31 + 8 * v32;
  do
  {
    LODWORD(v7) = v32;
    std::to_string(&v29, (double)v9 / (double)v7);
    v11 = std::string::append(&v29, " 1.0 1.0");
    v12 = v11->__r_.__value_.__r.__words[0];
    v30[0] = v11->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v14 = *(_QWORD *)(*(_QWORD *)v8 + 48);
    v28 = v14;
    v15 = *((_DWORD *)this + 390);
    if (v15)
    {
      v16 = *((_QWORD *)this + 193);
      v17 = v15 - 1;
      v18 = ((v14 >> 4) ^ (v14 >> 9)) & v17;
      v19 = (char *)(v16 + 40 * v18);
      v20 = *(_QWORD *)v19;
      if (v14 == *(_QWORD *)v19)
        goto LABEL_30;
      v21 = 0;
      v22 = 1;
      while (v20 != -4096)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v20 == -8192;
        if (v23)
          v21 = v19;
        v24 = v18 + v22++;
        v18 = v24 & v17;
        v19 = (char *)(v16 + 40 * v18);
        v20 = *(_QWORD *)v19;
        if (v14 == *(_QWORD *)v19)
          goto LABEL_30;
      }
      if (v21)
        v25 = v21;
      else
        v25 = v19;
    }
    else
    {
      v25 = 0;
    }
    v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>,mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>::InsertIntoBucket<mlir::OperationName>((uint64_t)v3, v25, &v28);
LABEL_30:
    if (v19[39] < 0)
      operator delete(*((void **)v19 + 2));
    v26 = v30[0];
    *((_QWORD *)v19 + 2) = v12;
    *((_QWORD *)v19 + 3) = v26;
    *(_QWORD *)(v19 + 31) = *(_QWORD *)((char *)v30 + 7);
    v19[39] = v13;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    ++v9;
    v8 += 8;
  }
  while (v8 != v10);
  v8 = (char *)v31;
LABEL_38:
  if (v8 != (char *)v33)
    free(v8);
  v31 = this;
}

_anonymous_namespace_::PrintOpPass *mlir::impl::ViewOpGraphBase<`anonymous namespace'::PrintOpPass>::clonePass@<X0>(uint64_t a1@<X0>, _anonymous_namespace_::PrintOpPass **a2@<X8>)
{
  llvm::raw_ostream *v3;
  _anonymous_namespace_::PrintOpPass *v4;
  _anonymous_namespace_::PrintOpPass *result;

  v3 = *(llvm::raw_ostream **)(a1 + 1480);
  v4 = (_anonymous_namespace_::PrintOpPass *)operator new(0x620uLL);
  *a2 = result;
  return result;
}

void mlir::raw_indented_ostream::~raw_indented_ostream(mlir::raw_indented_ostream *this)
{
  void *v1;

  llvm::raw_ostream::~raw_ostream(this);
  operator delete(v1);
}

_QWORD *mlir::raw_indented_ostream::write_impl(_QWORD *this, char *__s, size_t __n)
{
  size_t v3;
  _QWORD *v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t first_not_of;
  _BYTE *v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;

  v15 = this;
  if (__n)
  {
    v3 = __n;
    v5 = this;
    while (1)
    {
      this = memchr(__s, 10, v3);
      if (!this)
        break;
      v6 = (char *)this - __s;
      if ((char *)this - __s == -1)
        break;
      if (v6 >= v3)
        v7 = v3;
      else
        v7 = (char *)this - __s;
      if (v3 >= v6 + 1)
        v8 = v6 + 1;
      else
        v8 = v3;
      v11 = __s;
      v12 = v7;
      v13 = &__s[v8];
      v14 = v3 - v8;
      first_not_of = llvm::StringRef::find_first_not_of(&v11, " \t\n\v\f\r", 6, 0);
      if (v12 > first_not_of || v5[10])
        mlir::raw_indented_ostream::write_impl(char const*,unsigned long)::{lambda(llvm::StringRef)#1}::operator()((uint64_t *)&v15, (uint64_t)v11, v12);
      this = (_QWORD *)v5[12];
      v10 = (_BYTE *)this[4];
      if ((unint64_t)v10 < this[3])
      {
        this[4] = v10 + 1;
        *v10 = 10;
        *((_BYTE *)v5 + 88) = 1;
        __s = (char *)v13;
        v3 = v14;
        if (!v14)
          return this;
      }
      else
      {
        this = llvm::raw_ostream::write((llvm::raw_ostream *)this, 10);
        *((_BYTE *)v5 + 88) = 1;
        __s = (char *)v13;
        v3 = v14;
        if (!v14)
          return this;
      }
    }
    if (v3 > *((int *)v5 + 16))
    {
      this = mlir::raw_indented_ostream::write_impl(char const*,unsigned long)::{lambda(llvm::StringRef)#1}::operator()((uint64_t *)&v15, (uint64_t)__s, v3);
      *((_BYTE *)v5 + 88) = 0;
    }
  }
  return this;
}

uint64_t mlir::raw_indented_ostream::current_pos(mlir::raw_indented_ostream *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 12);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

llvm::raw_ostream *mlir::raw_indented_ostream::write_impl(char const*,unsigned long)::{lambda(llvm::StringRef)#1}::operator()(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  llvm::raw_ostream *v6;
  const void *v7;
  unint64_t v8;
  llvm::raw_ostream *result;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  size_t v13;
  unint64_t v14;

  v5 = *a1;
  v6 = *(llvm::raw_ostream **)(*a1 + 96);
  if (*(_BYTE *)(*a1 + 88))
  {
    v6 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)(*a1 + 96), *(_DWORD *)(v5 + 60));
    v7 = *(const void **)(v5 + 72);
    v8 = *(_QWORD *)(v5 + 80);
    result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
    if (v8 <= *((_QWORD *)v6 + 3) - (_QWORD)result)
    {
      if (v8)
      {
        memcpy(result, v7, *(_QWORD *)(v5 + 80));
        result = (llvm::raw_ostream *)(*((_QWORD *)v6 + 4) + v8);
        *((_QWORD *)v6 + 4) = result;
      }
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, (const char *)v7, *(_QWORD *)(v5 + 80));
      result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
    }
    v10 = *(int *)(v5 + 64);
    if (a3 >= v10)
      v14 = *(int *)(v5 + 64);
    else
      v14 = a3;
    v12 = (const char *)(a2 + v14);
    v13 = a3 - v14;
    if (a3 - v14 > *((_QWORD *)v6 + 3) - (_QWORD)result)
      return llvm::raw_ostream::write(v6, v12, v13);
  }
  else
  {
    v10 = *(int *)(v5 + 64);
    if (a3 >= v10)
      v11 = *(int *)(v5 + 64);
    else
      v11 = a3;
    v12 = (const char *)(a2 + v11);
    v13 = a3 - v11;
    result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
    if (a3 - v11 > *((_QWORD *)v6 + 3) - (_QWORD)result)
      return llvm::raw_ostream::write(v6, v12, v13);
  }
  if (a3 > v10)
  {
    result = (llvm::raw_ostream *)memcpy(result, v12, v13);
    *((_QWORD *)v6 + 4) += v13;
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::PrintOpPass::emitGraph(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *result;
  int v13;
  _WORD *v14;
  std::string __p;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  v6 = (llvm::raw_ostream *)(a1 + 1384);
  v7 = *(_QWORD *)(a1 + 1416);
  if ((unint64_t)(*(_QWORD *)(a1 + 1408) - v7) > 0xB)
  {
    *(_DWORD *)(v7 + 8) = 175841351;
    *(_QWORD *)v7 = *(_QWORD *)"digraph G {\n";
    *(_QWORD *)(a1 + 1416) += 12;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 1384), "digraph G {\n", 0xCuLL);
  }
  *(_DWORD *)(a1 + 1444) += 2;
  v16[0] = "compound";
  v16[2] = " = ";
  v17 = 771;
  v18[0] = v16;
  v18[2] = "true";
  v19 = 770;
  llvm::Twine::str((llvm::Twine *)v18, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = llvm::raw_ostream::write(v6, (const char *)p_p, size);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 2619;
    *((_QWORD *)v10 + 4) += 2;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else
  {
    llvm::raw_ostream::write(v10, ";\n", 2uLL);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_15:
  result = (llvm::raw_ostream *)a2(a3);
  v13 = *(_DWORD *)(a1 + 1444);
  if (v13 <= 2)
    v13 = 2;
  *(_DWORD *)(a1 + 1444) = v13 - 2;
  v14 = *(_WORD **)(a1 + 1416);
  if (*(_QWORD *)(a1 + 1408) - (_QWORD)v14 <= 1uLL)
    return llvm::raw_ostream::write(v6, "}\n", 2uLL);
  *v14 = 2685;
  *(_QWORD *)(a1 + 1416) += 2;
  return result;
}

void llvm::DenseMap<mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>::shrink_and_clear(uint64_t a1)
{
  uint64_t v2;
  int v3;
  llvm *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm *v8;
  unint64_t v9;
  llvm *v10;
  unint64_t v11;
  uint64_t v12;
  llvm *v13;
  llvm *v14;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = *(llvm **)a1;
    v5 = 40 * v2;
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000 && *((char *)v4 + 39) < 0)
        operator delete(*((void **)v4 + 2));
      v4 = (llvm *)((char *)v4 + 40);
      v5 -= 40;
    }
    while (v5);
  }
  v6 = 1 << (33 - __clz(v3 - 1));
  if (v6 <= 64)
    v6 = 64;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v7 != *(_DWORD *)(a1 + 16))
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(40 * v2));
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
  {
    v8 = *(llvm **)a1;
    v9 = 40 * v7 - 40;
    if (v9 < 0x28)
    {
      v10 = *(llvm **)a1;
LABEL_20:
      v14 = (llvm *)((char *)v8 + 40 * v7);
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 = (llvm *)((char *)v10 + 40);
      }
      while (v10 != v14);
      return;
    }
    v11 = v9 / 0x28 + 1;
    v10 = (llvm *)((char *)v8 + 40 * (v11 & 0xFFFFFFFFFFFFFFELL));
    v12 = v11 & 0xFFFFFFFFFFFFFFELL;
    v13 = *(llvm **)a1;
    do
    {
      *(_QWORD *)v13 = -4096;
      *((_QWORD *)v13 + 5) = -4096;
      v13 = (llvm *)((char *)v13 + 80);
      v12 -= 2;
    }
    while (v12);
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_20;
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<void `anonymous namespace'::PrintOpPass::initColorMapping<mlir::Operation>(mlir::Operation &)::{lambda(mlir::Operation *)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  v5 = *(_QWORD *)(a2 + 48);
  v20 = v5;
  v6 = *(_DWORD *)(v4 + 1560);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 1544);
    v8 = v6 - 1;
    v9 = ((v5 >> 4) ^ (v5 >> 9)) & v8;
    v10 = (char *)(v7 + 40 * v9);
    v11 = *(_QWORD *)v10;
    if (v5 == *(_QWORD *)v10)
      goto LABEL_14;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (char *)(v7 + 40 * v9);
      v11 = *(_QWORD *)v10;
      if (v5 == *(_QWORD *)v10)
        goto LABEL_14;
    }
    if (v12)
      v16 = v12;
    else
      v16 = v10;
  }
  else
  {
    v16 = 0;
  }
  v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>,mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>::InsertIntoBucket<mlir::OperationName>(v4 + 1544, v16, &v20);
LABEL_14:
  v17 = *((_DWORD *)v10 + 2);
  if (!v17)
  {
    v18 = a1[1];
    v19 = *(unsigned int *)(v18 + 8);
    if (v19 >= *(_DWORD *)(v18 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v18, (void *)(v18 + 16), v19 + 1, 8);
      LODWORD(v19) = *(_DWORD *)(v18 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = a2;
    ++*(_DWORD *)(v18 + 8);
    v17 = *((_DWORD *)v10 + 2);
  }
  *((_DWORD *)v10 + 2) = v17 + 1;
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>,mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>::InsertIntoBucket<mlir::OperationName>(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(40 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 5 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>,mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 40 * v17 - 40;
  v19 = buffer;
  if (v18 < 0x28)
    goto LABEL_34;
  v20 = v18 / 0x28 + 1;
  v19 = &buffer[5 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[5] = -4096;
    v22 += 10;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 5;
    }
    while (v19 != &buffer[5 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = (char *)&buffer[5 * v24];
  v25 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = (char *)&buffer[5 * v24];
      v25 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *((_DWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 2) = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>,mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  __int128 v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[5 * v6];
      do
      {
        *v9 = -4096;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x28 + 1;
    v9 = &v7[5 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[5] = -4096;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          v16 = v15 - 1;
          v17 = (v15 - 1) & ((v14 >> 4) ^ (v14 >> 9));
          v18 = *(_QWORD *)a1 + 40 * v17;
          v19 = *(_QWORD *)v18;
          if (v14 != *(_QWORD *)v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -4096)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -8192;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v16;
              v18 = *(_QWORD *)a1 + 40 * (v23 & v16);
              v19 = *(_QWORD *)v18;
              if (v14 == *(_QWORD *)v18)
                goto LABEL_25;
            }
            if (v20)
              v18 = v20;
          }
        }
        else
        {
          v18 = 0;
        }
LABEL_25:
        *(_QWORD *)v18 = v14;
        *(_DWORD *)(v18 + 8) = *((_DWORD *)v4 + 2);
        v24 = *((_OWORD *)v4 + 1);
        *(_QWORD *)(v18 + 32) = v4[4];
        *(_OWORD *)(v18 + 16) = v24;
        v4[3] = 0;
        v4[4] = 0;
        v4[2] = 0;
        ++*(_DWORD *)(a1 + 8);
        if (*((char *)v4 + 39) < 0)
          operator delete((void *)v4[2]);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

void llvm::function_ref<void ()(void)>::callback_fn<`anonymous namespace'::PrintOpPass::runOnOperation(void)::{lambda(void)#1}>(_anonymous_namespace_::PrintOpPass **a1)
{
  _anonymous_namespace_::PrintOpPass *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  const char *v5;
  size_t v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  uint64_t v9;

  v1 = *a1;
  v2 = *((_QWORD *)v1 + 186);
  v3 = *((_QWORD *)v1 + 187);
  if (v2 == v3)
    goto LABEL_13;
  do
  {
    while (1)
    {
      v4 = *(char *)(v2 + 23);
      v5 = v4 >= 0 ? (const char *)v2 : *(const char **)v2;
      v6 = v4 >= 0 ? *(unsigned __int8 *)(v2 + 23) : *(_QWORD *)(v2 + 8);
      v7 = llvm::raw_ostream::write((_anonymous_namespace_::PrintOpPass *)((char *)v1 + 1384), v5, v6);
      v8 = (_WORD *)*((_QWORD *)v7 + 4);
      if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
        break;
      *v8 = 2619;
      *((_QWORD *)v7 + 4) += 2;
      v2 += 24;
      if (v2 == v3)
        goto LABEL_12;
    }
    llvm::raw_ostream::write(v7, ";\n", 2uLL);
    v2 += 24;
  }
  while (v2 != v3);
LABEL_12:
  v2 = *((_QWORD *)v1 + 187);
  v9 = *((_QWORD *)v1 + 186);
  if (v2 == v9)
  {
LABEL_13:
    *((_QWORD *)v1 + 187) = v2;
  }
  else
  {
    do
    {
      if (*(char *)(v2 - 1) < 0)
        operator delete(*(void **)(v2 - 24));
      v2 -= 24;
    }
    while (v2 != v9);
    *((_QWORD *)v1 + 187) = v9;
  }
}

uint64_t `anonymous namespace'::PrintOpPass::processOperation(_anonymous_namespace_::PrintOpPass *this, mlir::Operation *a2)
{
  unint64_t v2;
  unint64_t v3;
  mlir::Operation *v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  char *v20;
  char *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  int v24;
  std::string::size_type v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  std::string v44;
  unint64_t v45;
  std::string v46;
  std::string __p;
  uint64_t v48[2];
  _QWORD v49[3];
  uint64_t v50;

  v4 = a2;
  v49[0] = a2;
  memset(&v49[1], 0, 12);
  if ((*((_DWORD *)a2 + 11) & 0x7FFFFF) == 0)
  {
    v9 = *((_QWORD *)v4 + 6);
    v48[0] = v9;
    v10 = *((_DWORD *)this + 390);
    if (v10)
    {
      v11 = *((_QWORD *)this + 193);
      v12 = v10 - 1;
      v13 = ((v9 >> 4) ^ (v9 >> 9)) & v12;
      v14 = (char *)(v11 + 40 * v13);
      v15 = *(_QWORD *)v14;
      if (v9 == *(_QWORD *)v14)
        goto LABEL_18;
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = v14;
        v19 = v13 + v17++;
        v13 = v19 & v12;
        v14 = (char *)(v11 + 40 * v13);
        v15 = *(_QWORD *)v14;
        if (v9 == *(_QWORD *)v14)
          goto LABEL_18;
      }
      if (v16)
        v20 = v16;
      else
        v20 = v14;
    }
    else
    {
      v20 = 0;
    }
    v14 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>,mlir::OperationName,std::pair<int,std::string>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::pair<int,std::string>>>::InsertIntoBucket<mlir::OperationName>((uint64_t)this + 1544, v20, v48);
LABEL_18:
    v23 = *((_QWORD *)v14 + 2);
    v21 = v14 + 16;
    v22 = v23;
    v24 = v21[23];
    if (v24 >= 0)
      v25 = (std::string::size_type)v21;
    else
      v25 = v22;
    if (v24 >= 0)
      v26 = v21[23];
    else
      v26 = *((_QWORD *)v21 + 1);
    v8 = v27;
    v49[1] = v6;
    LODWORD(v49[2]) = v27;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  v48[0] = (uint64_t)v49;
  v48[1] = (uint64_t)this;
  v8 = v7;
  v49[1] = v6;
  LODWORD(v49[2]) = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (mlir::Operation *)v49[0];
LABEL_26:
  if (!*((_BYTE *)this + 1096))
    goto LABEL_46;
  if ((*((_BYTE *)v4 + 46) & 0x80) == 0)
    goto LABEL_46;
  v28 = *((unsigned int *)v4 + 17);
  if (!(_DWORD)v28)
    goto LABEL_46;
  v29 = 0;
  v30 = 24;
  do
  {
    v31 = *(_QWORD *)(*(_QWORD *)(v49[0] + 72) + v30);
    v45 = v31;
    v50 = 0;
    v33 = v50;
    if ((v32 & 1) != 0)
      goto LABEL_37;
    v48[0] = v50;
    v34 = *((_DWORD *)this + 380);
    v35 = *((_DWORD *)this + 382);
    if (4 * v34 + 4 >= 3 * v35)
    {
      v35 *= 2;
LABEL_43:
      v33 = v48[0];
      ++*((_DWORD *)this + 380);
      if (*(_QWORD *)v33 == -4096)
        goto LABEL_36;
LABEL_35:
      --*((_DWORD *)this + 381);
      goto LABEL_36;
    }
    if (v35 + ~v34 - *((_DWORD *)this + 381) <= v35 >> 3)
      goto LABEL_43;
    *((_DWORD *)this + 380) = v34 + 1;
    if (*(_QWORD *)v33 != -4096)
      goto LABEL_35;
LABEL_36:
    *(_QWORD *)v33 = v31;
    *(_DWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 12) = 0;
LABEL_37:
    v36 = *(_QWORD *)(v33 + 8);
    v37 = *(unsigned int *)(v33 + 16);
    if ((_DWORD)v28 == 1)
    {
      *((_BYTE *)&v44.__r_.__value_.__s + 23) = 0;
      v44.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      std::to_string(&v44, v29);
    }
    v3 = v3 & 0xFFFFFFFF00000000 | v37;
    v2 = v2 & 0xFFFFFFFF00000000 | v8;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    ++v29;
    v30 += 32;
  }
  while (v28 != v29);
  v4 = (mlir::Operation *)v49[0];
LABEL_46:
  v38 = *((unsigned int *)v4 + 9);
  if ((_DWORD)v38)
    v39 = (uint64_t)v4 - 16;
  else
    v39 = 0;
  if ((_DWORD)v38)
  {
    v40 = 0;
    v41 = (char *)this + 1512;
    do
    {
      v48[0] = mlir::detail::OpResultImpl::getNextResultAtOffset(v39, v40);
      *(_QWORD *)v42 = v49[1];
      *(_DWORD *)(v42 + 8) = v49[2];
      ++v40;
    }
    while (v38 != v40);
    return v49[1];
  }
  return v6;
}

uint64_t `anonymous namespace'::PrintOpPass::emitClusterStmt(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  int v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  size_t size;
  llvm::raw_ostream *v19;
  _WORD *v20;
  int v21;
  _WORD *v22;
  void *v24[2];
  uint64_t v25;
  std::string v26;
  void *v27[2];
  std::string::size_type v28;
  std::string v29;
  void *__p;
  char v31;
  _QWORD v32[2];
  _QWORD v33[4];
  __int16 v34;
  std::string v35;
  __int16 v36;

  v8 = *(int *)(a1 + 1536) + 1;
  *(_DWORD *)(a1 + 1536) = v8;
  v9 = (llvm::raw_ostream *)(a1 + 1384);
  v10 = *(_QWORD *)(a1 + 1416);
  if ((unint64_t)(*(_QWORD *)(a1 + 1408) - v10) > 0x10)
  {
    *(_BYTE *)(v10 + 16) = 95;
    *(_OWORD *)v10 = *(_OWORD *)"subgraph cluster_";
    *(_QWORD *)(a1 + 1416) += 17;
    v12 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)(a1 + 1384), v8);
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 2)
      goto LABEL_3;
  }
  else
  {
    v11 = llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 1384), "subgraph cluster_", 0x11uLL);
    v12 = llvm::raw_ostream::operator<<(v11, v8);
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 2)
    {
LABEL_3:
      *(_BYTE *)(v13 + 2) = 10;
      *(_WORD *)v13 = 31520;
      *((_QWORD *)v12 + 4) += 3;
      goto LABEL_6;
    }
  }
  llvm::raw_ostream::write(v12, " {\n", 3uLL);
LABEL_6:
  *(_DWORD *)(a1 + 1444) += 2;
  v31 = 1;
  LOWORD(__p) = 32;
  if (v31 < 0)
    operator delete(__p);
  *(_OWORD *)v24 = *(_OWORD *)a4;
  v25 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  escapeString(&v26, (uint64_t)v24);
  std::operator+<char>();
  v15 = std::string::append(&v35, "\"");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v27 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v28 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v33[0] = "label";
  v33[2] = " = ";
  v34 = 771;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  v35.__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
  v36 = 1026;
  llvm::Twine::str((llvm::Twine *)&v35, &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v29;
  else
    v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  v19 = llvm::raw_ostream::write(v9, (const char *)v17, size);
  v20 = (_WORD *)*((_QWORD *)v19 + 4);
  if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 1uLL)
  {
    *v20 = 2619;
    *((_QWORD *)v19 + 4) += 2;
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else
  {
    llvm::raw_ostream::write(v19, ";\n", 2uLL);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
LABEL_21:
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_31:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_32;
  }
  operator delete(v27[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_23:
  if ((SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_32:
  operator delete(v24[0]);
LABEL_24:
  a2(a3);
  v21 = *(_DWORD *)(a1 + 1444);
  if (v21 <= 2)
    v21 = 2;
  *(_DWORD *)(a1 + 1444) = v21 - 2;
  v22 = *(_WORD **)(a1 + 1416);
  if (*(_QWORD *)(a1 + 1408) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 2685;
    *(_QWORD *)(a1 + 1416) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v9, "}\n", 2uLL);
  }
  LODWORD(v32[0]) = v14;
  *(_QWORD *)((char *)v32 + 4) = v8 | 0x100000000;
  return v32[0];
}

void `anonymous namespace'::PrintOpPass::getLabel(std::string *this, mlir::Operation *a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string::size_type v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  std::string *p_src;
  std::string::size_type size;
  std::string *p_dst;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *p_p;
  size_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  uint64_t v22;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  size_t v27;
  const void *AttrData;
  size_t v29;
  _WORD *v30;
  const char *v31;
  mlir::OpPrintingFlags *v32;
  uint64_t LargeElementsAttrLimit;
  char v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  void **p_b;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _DWORD *v45;
  __int128 v46;
  unsigned __int8 v47;
  unint64_t v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  size_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  size_t v63;
  llvm::raw_ostream *v64;
  llvm::raw_ostream *v65;
  uint64_t v66;
  std::string::size_type v67;
  unint64_t v68;
  std::string::size_type v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  std::string *v73;
  size_t v74;
  llvm::raw_ostream *v75;
  llvm::raw_ostream *v76;
  uint64_t v77;
  __int128 v78;
  void *v80;
  int v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  char v85;
  uint64_t v86;
  int v87;
  void **v88;
  void *v89[2];
  uint64_t v90;
  std::string __src;
  std::string __dst;
  uint64_t v93;
  std::string v94;
  std::string __p;
  const char *__b;
  size_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  int v103;
  void **p_ArgOperands;
  char *ArgOperands;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  _QWORD v111[2];

  v89[0] = 0;
  v89[1] = 0;
  v90 = 0;
  v81 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 1;
  v83 = 0;
  v84 = 0;
  v82 = 0;
  v80 = &unk_1E0E22B10;
  v88 = v89;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v80, 0, 0, 0);
  __b = *(const char **)(a3 + 48);
  mlir::OperationName::print((mlir::OperationName *)&__b, (llvm::raw_ostream *)&v80);
  if (!*((_BYTE *)a2 + 1304))
    goto LABEL_40;
  if ((unint64_t)(v83 - v84) > 3)
  {
    *(_DWORD *)v84 = 673200672;
    v84 += 4;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v80, " : (", 4uLL);
  }
  ArgOperands = 0;
  v106 = 0;
  v107 = 0;
  LODWORD(v97) = 0;
  v101 = 0;
  v102 = 0;
  v103 = 1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  __b = (const char *)&unk_1E0E22B10;
  p_ArgOperands = (void **)&ArgOperands;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&__b, 0, 0, 0);
  v5 = *(unsigned int *)(a3 + 36);
  v6 = a3 - 16;
  if (!(_DWORD)v5)
    v6 = 0;
  __p.__r_.__value_.__r.__words[0] = v6;
  __p.__r_.__value_.__l.__size_ = v5;
  mlir::OperandRange::getTypes((uint64_t *)&__p, (uint64_t *)&__dst);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)", ";
  __p.__r_.__value_.__l.__size_ = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,llvm::raw_string_ostream,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,llvm::raw_string_ostream &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,llvm::raw_string_ostream,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,llvm::raw_string_ostream &)::{lambda(mlir::Type const&)#1},llvm::raw_string_ostream,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,llvm::raw_string_ostream &,llvm::raw_string_ostream,llvm::StringRef const&)::{lambda(void)#1},void>((llvm::raw_ostream *)__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (llvm::raw_ostream *)__dst.__r_.__value_.__r.__words[2], v93, (llvm::raw_ostream *)&__b, (llvm::raw_ostream *)&__b, (uint64_t)&__p);
  if (*((char *)p_ArgOperands + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__src, (const std::string::value_type *)*p_ArgOperands, (std::string::size_type)p_ArgOperands[1]);
    v8 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      v9 = *((unsigned int *)a2 + 118);
      if (v9 < v8)
      {
        p_src = &__src;
        if (v8 >= v9)
          size = *((unsigned int *)a2 + 118);
        else
          size = v8;
        if (size < 0x17)
          goto LABEL_14;
LABEL_22:
        v14 = (size & 0xFFFFFFF8) + 8;
        if ((size | 7) != 0x17)
          v14 = size | 7;
        v15 = v14 + 1;
        p_dst = (std::string *)operator new(v14 + 1);
        __dst.__r_.__value_.__l.__size_ = size;
        __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        goto LABEL_25;
      }
LABEL_28:
      __p = __src;
      memset(&__src, 0, sizeof(__src));
      goto LABEL_29;
    }
  }
  else
  {
    v7 = *(_OWORD *)p_ArgOperands;
    __src.__r_.__value_.__r.__words[2] = (std::string::size_type)p_ArgOperands[2];
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v7;
    v8 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
  }
  v13 = *((unsigned int *)a2 + 118);
  if (__src.__r_.__value_.__l.__size_ <= v13)
    goto LABEL_28;
  p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  if (__src.__r_.__value_.__l.__size_ >= v13)
    size = *((unsigned int *)a2 + 118);
  else
    size = __src.__r_.__value_.__l.__size_;
  if (size >= 0x17)
    goto LABEL_22;
LABEL_14:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size;
  p_dst = &__dst;
  if (size)
LABEL_25:
    memmove(p_dst, p_src, size);
  p_dst->__r_.__value_.__s.__data_[size] = 0;
  v16 = std::string::append(&__dst, "...");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_29:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v19 = __p.__r_.__value_.__l.__size_;
  v20 = llvm::raw_ostream::write((llvm::raw_ostream *)&v80, (const char *)p_p, v19);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if (*((_BYTE **)v20 + 3) != v21)
  {
    *v21 = 41;
    ++*((_QWORD *)v20 + 4);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
  llvm::raw_ostream::write(v20, ")", 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_37:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_38:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__b);
    if (SHIBYTE(v107) < 0)
      goto LABEL_48;
LABEL_40:
    if (!*((_BYTE *)a2 + 680))
      goto LABEL_161;
LABEL_41:
    if (v83 == v84)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v80, "\n", 1uLL);
      if (!*(_BYTE *)(a3 + 47))
      {
LABEL_43:
        Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)(a3 + 56));
        if (!v22)
          goto LABEL_161;
        goto LABEL_52;
      }
    }
    else
    {
      *v84++ = 10;
      if (!*(_BYTE *)(a3 + 47))
        goto LABEL_43;
    }
    __b = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)a3);
    Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__b);
    if (!v22)
      goto LABEL_161;
LABEL_52:
    v24 = (mlir::CallGraphNode *)((char *)Value + 16 * v22);
    while (1)
    {
      v25 = v84;
      if (v84 >= v83)
      {
        v26 = llvm::raw_ostream::write((llvm::raw_ostream *)&v80, 10);
      }
      else
      {
        ++v84;
        *v25 = 10;
        v26 = (llvm::raw_ostream *)&v80;
      }
      __b = (const char *)mlir::CallGraphNode::getCallableRegion(Value);
      AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__b);
      v29 = v27;
      v30 = (_WORD *)*((_QWORD *)v26 + 4);
      if (v27 <= *((_QWORD *)v26 + 3) - (_QWORD)v30)
      {
        if (v27)
        {
          memcpy(v30, AttrData, v27);
          v30 = (_WORD *)(*((_QWORD *)v26 + 4) + v29);
          *((_QWORD *)v26 + 4) = v30;
        }
      }
      else
      {
        v26 = llvm::raw_ostream::write(v26, (const char *)AttrData, v27);
        v30 = (_WORD *)*((_QWORD *)v26 + 4);
      }
      if (*((_QWORD *)v26 + 3) - (_QWORD)v30 > 1uLL)
      {
        *v30 = 8250;
        *((_QWORD *)v26 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v26, ": ", 2uLL);
      }
      v31 = (const char *)*((_QWORD *)Value + 1);
      v111[0] = v31;
      v32 = (mlir::OpPrintingFlags *)mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&__b);
      LargeElementsAttrLimit = mlir::OpPrintingFlags::getLargeElementsAttrLimit(v32);
      if (v34)
        v35 = LargeElementsAttrLimit;
      else
        v35 = 16;
      if (mlir::DenseElementsAttr::classof((uint64_t)v31))
        v36 = v31;
      else
        v36 = 0;
      __b = v36;
      if (v36)
      {
        if ((mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&__b) & 1) != 0)
        {
          mlir::Attribute::print((mlir::Attribute *)v111, (llvm::raw_ostream *)&v80, 0);
          goto LABEL_54;
        }
        v31 = (const char *)v111[0];
      }
      if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v31 + 8))
      {
        v37 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v31 + 8);
        v109 = v31;
        v110 = v37;
        if (v31 && mlir::ElementsAttr::getNumElements((uint64_t)v31, v37) > v35)
        {
          ArgOperands = (char *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v109);
          v106 = v38;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_167;
          v40 = v39;
          if (v39 >= 0x17)
          {
            v60 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v60 = v39 | 7;
            v61 = v60 + 1;
            p_b = (void **)operator new(v60 + 1);
            v97 = v40;
            v98 = v61 | 0x8000000000000000;
            __b = (const char *)p_b;
          }
          else
          {
            HIBYTE(v98) = v39;
            p_b = (void **)&__b;
            if (!v39)
            {
LABEL_128:
              *((_BYTE *)p_b + v40) = 0;
              if (v98 >= 0)
                v62 = (const char *)&__b;
              else
                v62 = __b;
              if (v98 >= 0)
                v63 = HIBYTE(v98);
              else
                v63 = v97;
              v64 = llvm::raw_ostream::write((llvm::raw_ostream *)&v80, v62, v63);
              v65 = v64;
              v66 = *((_QWORD *)v64 + 4);
              if ((unint64_t)(*((_QWORD *)v64 + 3) - v66) > 2)
              {
                *(_BYTE *)(v66 + 2) = 46;
                *(_WORD *)v66 = 11822;
                *((_QWORD *)v64 + 4) += 3;
              }
              else
              {
                v65 = llvm::raw_ostream::write(v64, "...", 3uLL);
              }
              __p.__r_.__value_.__r.__words[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v109);
              __p.__r_.__value_.__l.__size_ = v67;
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p);
              if (v68 > 0x7FFFFFFFFFFFFFF7)
LABEL_167:
                abort();
              v69 = v68;
              if (v68 >= 0x17)
              {
                v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v68 | 7) != 0x17)
                  v71 = v68 | 7;
                v72 = v71 + 1;
                v70 = (std::string *)operator new(v71 + 1);
                __dst.__r_.__value_.__l.__size_ = v69;
                __dst.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v68;
                v70 = &__dst;
                if (!v68)
                {
LABEL_145:
                  v70->__r_.__value_.__s.__data_[v69] = 0;
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v73 = &__dst;
                  else
                    v73 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v74 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                  else
                    v74 = __dst.__r_.__value_.__l.__size_;
                  v75 = llvm::raw_ostream::write(v65, (const char *)v73, v74);
                  v76 = v75;
                  v77 = *((_QWORD *)v75 + 4);
                  if ((unint64_t)(*((_QWORD *)v75 + 3) - v77) > 2)
                  {
                    *(_BYTE *)(v77 + 2) = 32;
                    *(_WORD *)v77 = 14880;
                    *((_QWORD *)v75 + 4) += 3;
                  }
                  else
                  {
                    v76 = llvm::raw_ostream::write(v75, " : ", 3uLL);
                  }
                  v94.__r_.__value_.__r.__words[0] = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v109);
                  mlir::Type::print((llvm::raw_ostream *)&v94, v76);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v98) < 0)
                    {
LABEL_158:
                      v59 = (char *)__b;
                      goto LABEL_159;
                    }
                  }
                  else if (SHIBYTE(v98) < 0)
                  {
                    goto LABEL_158;
                  }
                  goto LABEL_54;
                }
              }
              memset(v70, 93, v69);
              goto LABEL_145;
            }
          }
          memset(p_b, 91, v40);
          goto LABEL_128;
        }
      }
      else
      {
        v109 = 0;
        v110 = 0;
      }
      v42 = v111[0];
      v43 = *(void **)(*(_QWORD *)v111[0] + 136);
      if (v43 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v42 = 0;
      v108 = v42;
      if (v43 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v108);
        if (v44 > v35)
        {
          v45 = v84;
          if ((unint64_t)(v83 - v84) > 4)
          {
            v84[4] = 93;
            *v45 = 774778459;
            v84 += 5;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v80, "[...]", 5uLL);
          }
          goto LABEL_54;
        }
      }
      ArgOperands = 0;
      v106 = 0;
      v107 = 0;
      LODWORD(v97) = 0;
      v101 = 0;
      v102 = 0;
      v103 = 1;
      v99 = 0;
      v100 = 0;
      v98 = 0;
      __b = (const char *)&unk_1E0E22B10;
      p_ArgOperands = (void **)&ArgOperands;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&__b, 0, 0, 0);
      mlir::Attribute::print((mlir::Attribute *)v111, (llvm::raw_ostream *)&__b, 0);
      if (*((char *)p_ArgOperands + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, (const std::string::value_type *)*p_ArgOperands, (std::string::size_type)p_ArgOperands[1]);
        v47 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_91:
          v48 = *((unsigned int *)a2 + 118);
          if (v48 < v47)
          {
            v49 = &v94;
            if (v47 >= v48)
              v50 = *((unsigned int *)a2 + 118);
            else
              v50 = v47;
            if (v50 >= 0x17)
              goto LABEL_104;
            goto LABEL_96;
          }
          goto LABEL_110;
        }
      }
      else
      {
        v46 = *(_OWORD *)p_ArgOperands;
        v94.__r_.__value_.__r.__words[2] = (std::string::size_type)p_ArgOperands[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v46;
        v47 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_91;
      }
      v52 = *((unsigned int *)a2 + 118);
      if (v94.__r_.__value_.__l.__size_ > v52)
      {
        v49 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if (v94.__r_.__value_.__l.__size_ >= v52)
          v50 = *((unsigned int *)a2 + 118);
        else
          v50 = v94.__r_.__value_.__l.__size_;
        if (v50 >= 0x17)
        {
LABEL_104:
          v53 = (v50 & 0xFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17)
            v53 = v50 | 7;
          v54 = v53 + 1;
          v51 = (std::string *)operator new(v53 + 1);
          __dst.__r_.__value_.__l.__size_ = v50;
          __dst.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
LABEL_107:
          memmove(v51, v49, v50);
LABEL_108:
          v51->__r_.__value_.__s.__data_[v50] = 0;
          v55 = std::string::append(&__dst, "...");
          v56 = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_111;
        }
LABEL_96:
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v50;
        v51 = &__dst;
        if (v50)
          goto LABEL_107;
        goto LABEL_108;
      }
LABEL_110:
      __p = v94;
      memset(&v94, 0, sizeof(v94));
LABEL_111:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &__p;
      else
        v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v58 = __p.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v80, (const char *)v57, v58);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_119:
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__b);
          if (SHIBYTE(v107) < 0)
            goto LABEL_123;
          goto LABEL_54;
        }
      }
      else if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_119;
      }
      operator delete(v94.__r_.__value_.__l.__data_);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__b);
      if (SHIBYTE(v107) < 0)
      {
LABEL_123:
        v59 = ArgOperands;
LABEL_159:
        operator delete(v59);
      }
LABEL_54:
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      if (Value == v24)
        goto LABEL_161;
    }
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__b);
  if ((SHIBYTE(v107) & 0x80000000) == 0)
    goto LABEL_40;
LABEL_48:
  operator delete(ArgOperands);
  if (*((_BYTE *)a2 + 680))
    goto LABEL_41;
LABEL_161:
  if ((*((char *)v88 + 23) & 0x80000000) == 0)
  {
    v78 = *(_OWORD *)v88;
    this->__r_.__value_.__r.__words[2] = (std::string::size_type)v88[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v78;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v80);
    if ((SHIBYTE(v90) & 0x80000000) == 0)
      return;
    goto LABEL_163;
  }
  std::string::__init_copy_ctor_external(this, (const std::string::value_type *)*v88, (std::string::size_type)v88[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v80);
  if (SHIBYTE(v90) < 0)
LABEL_163:
    operator delete(v89[0]);
}

uint64_t `anonymous namespace'::PrintOpPass::emitNodeStmt(uint64_t a1, uint64_t a2, const void *a3, std::string::size_type a4, std::string::size_type a5, uint64_t a6)
{
  int v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  uint64_t **v14;
  uint64_t **v15;
  std::string::size_type v16;
  void *p_dst;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  void **v21;
  uint64_t **v22;
  uint64_t **v23;
  void **v24;
  _WORD *v25;
  const void *v28[2];
  char v29;
  std::string __p;
  uint64_t v31;
  __int16 v32;
  std::string __dst;
  __int16 v34;
  void *v35[2];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38[2];
  _BYTE v39[12];
  const void **v40;
  std::string v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 1536) + 1;
  *(_DWORD *)(a1 + 1536) = v10;
  v38[0] = 0;
  v38[1] = 0;
  v37 = v38;
  *(_OWORD *)v35 = *(_OWORD *)a2;
  v36 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  escapeString(&__p, (uint64_t)v35);
  std::operator+<char>();
  v11 = std::string::append(&__dst, "\"");
  v12 = v11->__r_.__value_.__r.__words[0];
  v41.__r_.__value_.__r.__words[0] = v11->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__dst, "label");
  v28[0] = &__dst;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v37, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v28);
  v15 = v14;
  if (*((char *)v14 + 79) < 0)
    operator delete(v14[7]);
  v16 = v41.__r_.__value_.__r.__words[0];
  v15[7] = (uint64_t *)v12;
  v15[8] = (uint64_t *)v16;
  *(uint64_t **)((char *)v15 + 71) = *(uint64_t **)((char *)v41.__r_.__value_.__r.__words + 7);
  *((_BYTE *)v15 + 79) = v13;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v36) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_8:
    if (a3)
      goto LABEL_9;
LABEL_16:
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_22;
  }
LABEL_15:
  operator delete(v35[0]);
  if (!a3)
    goto LABEL_16;
LABEL_9:
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a4 >= 0x17)
  {
    v18 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v18 = a4 | 7;
    v19 = v18 + 1;
    p_dst = operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = a4;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a4;
    p_dst = &__dst;
    if (!a4)
      goto LABEL_21;
  }
  memmove(p_dst, a3, a4);
LABEL_21:
  *((_BYTE *)p_dst + a4) = 0;
LABEL_22:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "shape");
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v37, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v41);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
  {
    operator delete(*v21);
    *(std::string *)v21 = __dst;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      if (!a6)
        goto LABEL_35;
      goto LABEL_28;
    }
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    v20[9] = (uint64_t *)__dst.__r_.__value_.__r.__words[2];
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!a6)
    goto LABEL_35;
LABEL_28:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__dst, "style");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v37, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__p);
  MEMORY[0x186DA1308](v22 + 7, "filled");
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v32 = 1283;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"\"";
  __p.__r_.__value_.__r.__words[2] = a5;
  v31 = a6;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)"\"";
  v34 = 770;
  llvm::Twine::str((llvm::Twine *)&__dst, &v41);
  v29 = 9;
  strcpy((char *)v28, "fillcolor");
  v40 = v28;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v37, v28, (uint64_t)&std::piecewise_construct, (_OWORD **)&v40);
  v24 = (void **)(v23 + 7);
  if (*((char *)v23 + 79) < 0)
    operator delete(*v24);
  *(std::string *)v24 = v41;
  *((_BYTE *)&v41.__r_.__value_.__s + 23) = 0;
  v41.__r_.__value_.__s.__data_[0] = 0;
  if (v29 < 0)
  {
    operator delete((void *)v28[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
  }
LABEL_35:
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E20260;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"v%i ";
  LODWORD(__dst.__r_.__value_.__r.__words[2]) = v10;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)(a1 + 1384), (uint64_t)&__dst);
  v25 = *(_WORD **)(a1 + 1416);
  if (*(_QWORD *)(a1 + 1408) - (_QWORD)v25 > 1uLL)
  {
    *v25 = 2619;
    *(_QWORD *)(a1 + 1416) += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 1384), ";\n", 2uLL);
  }
  *(_DWORD *)v39 = v10;
  *(_QWORD *)&v39[4] = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v37, v38[0]);
  return *(_QWORD *)v39;
}

void `anonymous namespace'::PrintOpPass::emitEdgeStmt(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, __int128 *a6, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v17;
  size_t v18;
  uint64_t **v19;
  void **v20;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  std::string *v27;
  std::string::size_type v28;
  int v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  std::string *v33;
  std::string::size_type v34;
  char v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t *v38;
  void *v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  char *v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48[2];
  std::string *p_p;
  std::string __dst;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  __int128 *v56;
  std::string __p;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v48[0] = 0;
  v48[1] = 0;
  v47 = v48;
  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v17 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v17 = __len | 7;
    v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
LABEL_12:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "style");
  *(_QWORD *)&v58 = &__p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v47, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v58);
  v20 = (void **)(v19 + 7);
  if (*((char *)v19 + 79) < 0)
    operator delete(*v20);
  *(std::string *)v20 = __dst;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (a3)
      goto LABEL_16;
LABEL_23:
    if (a5)
      goto LABEL_34;
    v45 = *a6;
    v46 = *((_QWORD *)a6 + 2);
    *((_QWORD *)a6 + 1) = 0;
    *((_QWORD *)a6 + 2) = 0;
    *(_QWORD *)a6 = 0;
    escapeString(&__p, (uint64_t)&v45);
    std::operator+<char>();
    v27 = std::string::append(&__dst, "\"");
    v28 = v27->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v58 = v27->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v58 + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
    v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&__dst, "label");
    p_p = &__dst;
    v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v47, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
    v31 = v30;
    if (*((char *)v30 + 79) < 0)
      operator delete(v30[7]);
    v32 = (uint64_t *)v58;
    v31[7] = (uint64_t *)v28;
    v31[8] = v32;
    *(uint64_t **)((char *)v31 + 71) = *(uint64_t **)((char *)&v58 + 7);
    *((_BYTE *)v31 + 79) = v29;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(v46) & 0x80000000) == 0)
          goto LABEL_42;
LABEL_53:
        v39 = (void *)v45;
LABEL_41:
        operator delete(v39);
        goto LABEL_42;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_53;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!a3)
    goto LABEL_23;
LABEL_16:
  std::to_string(&__dst, SHIDWORD(a2));
  v21 = std::string::insert(&__dst, 0, "cluster_");
  v22 = v21->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v58 = v21->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v58 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "ltail");
  p_p = &__p;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v47, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  v25 = v24;
  if (*((char *)v24 + 79) < 0)
    operator delete(v24[7]);
  v26 = (uint64_t *)v58;
  v25[7] = (uint64_t *)v22;
  v25[8] = v26;
  *(uint64_t **)((char *)v25 + 71) = *(uint64_t **)((char *)&v58 + 7);
  *((_BYTE *)v25 + 79) = v23;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_33:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!a5)
      goto LABEL_42;
    goto LABEL_34;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
LABEL_20:
  if (a5)
  {
LABEL_34:
    std::to_string(&__dst, SHIDWORD(a4));
    v33 = std::string::insert(&__dst, 0, "cluster_");
    v34 = v33->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v58 = v33->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v58 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
    v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&__p, "lhead");
    p_p = &__p;
    v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v47, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
    v37 = v36;
    if (*((char *)v36 + 79) < 0)
      operator delete(v36[7]);
    v38 = (uint64_t *)v58;
    v37[7] = (uint64_t *)v34;
    v37[8] = v38;
    *(uint64_t **)((char *)v37 + 71) = *(uint64_t **)((char *)&v58 + 7);
    *((_BYTE *)v37 + 79) = v35;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_42;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_42;
    }
    v39 = (void *)__dst.__r_.__value_.__r.__words[0];
    goto LABEL_41;
  }
LABEL_42:
  v58 = 0uLL;
  v59 = 0;
  LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
  v53 = 0;
  v54 = 0;
  v55 = 1;
  v51 = 0;
  v52 = 0;
  __dst.__r_.__value_.__r.__words[2] = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
  v56 = &v58;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&__dst, 0, 0, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E202A0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"v%i -> v%i ";
  __p.__r_.__value_.__r.__words[2] = __PAIR64__(a4, a2);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__dst, (uint64_t)&__p);
  if ((*((char *)v56 + 23) & 0x80000000) == 0)
  {
    v40 = *v56;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v56 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_44;
LABEL_47:
    operator delete((void *)v58);
    v41 = *(_QWORD *)(a1 + 1496);
    if (v41 < *(_QWORD *)(a1 + 1504))
      goto LABEL_45;
    goto LABEL_48;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v56, *((_QWORD *)v56 + 1));
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
  if (SHIBYTE(v59) < 0)
    goto LABEL_47;
LABEL_44:
  v41 = *(_QWORD *)(a1 + 1496);
  if (v41 < *(_QWORD *)(a1 + 1504))
  {
LABEL_45:
    v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v41 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v41 = v42;
    *(_QWORD *)(a1 + 1496) = v41 + 24;
    goto LABEL_50;
  }
LABEL_48:
  v43 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 1488), (uint64_t)&__p);
  v44 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a1 + 1496) = v43;
  if (v44 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_50:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v47, v48[0]);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,`anonymous namespace'::Node,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::Node>>,mlir::Value,`anonymous namespace'::Node,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::Node>>::operator[](uint64_t a1, unint64_t *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v5 = v9;
  if ((v4 & 1) == 0)
  {
    v10 = v9;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (4 * v6 + 4 >= 3 * v7)
    {
      v7 *= 2;
    }
    else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
      *(_DWORD *)(a1 + 8) = v6 + 1;
      if (*(_QWORD *)v5 == -4096)
      {
LABEL_6:
        *(_QWORD *)v5 = *a2;
        *(_DWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 12) = 0;
        return v5 + 8;
      }
LABEL_5:
      --*(_DWORD *)(a1 + 12);
      goto LABEL_6;
    }
    v5 = v10;
    ++*(_DWORD *)(a1 + 8);
    if (*(_QWORD *)v5 == -4096)
      goto LABEL_6;
    goto LABEL_5;
  }
  return v5 + 8;
}

void escapeString(std::string *a1, uint64_t a2)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = &unk_1E0E22B10;
  v16 = v17;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v8, 0, 0, 0);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (unsigned __int8 *)a2;
  else
    v5 = *(unsigned __int8 **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  llvm::raw_ostream::write_escaped((uint64_t)&v8, v5, v6, 0);
  if ((*((char *)v16 + 23) & 0x80000000) == 0)
  {
    v7 = *(_OWORD *)v16;
    a1->__r_.__value_.__r.__words[2] = (std::string::size_type)v16[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v7;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v17[0]);
    return;
  }
  std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)*v16, (std::string::size_type)v16[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  if (SHIBYTE(v18) < 0)
    goto LABEL_11;
}

void llvm::function_ref<void ()(void)>::callback_fn<`anonymous namespace'::PrintOpPass::processOperation(mlir::Operation *)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *__p;
  char v9;
  _QWORD v10[2];

  v1 = **a1;
  v2 = *(unsigned int *)(v1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
  {
    v3 = (uint64_t)a1[1];
    v4 = ((v1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(v1 + 40);
    v5 = v4 + 24 * (v2 & 0x7FFFFF);
    do
    {
      for (i = *(_QWORD *)(v4 + 8); i != v4; i = *(_QWORD *)(i + 8))
      {
        v7 = i - 8;
        if (!i)
          v7 = 0;
        v10[0] = v7;
        v10[1] = v3;
        v9 = 0;
        LOBYTE(__p) = 0;
        if (v9 < 0)
          operator delete(__p);
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
}

void llvm::function_ref<void ()(void)>::callback_fn<`anonymous namespace'::PrintOpPass::processBlock(mlir::Block &)::{lambda(void)#1}>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  _anonymous_namespace_::PrintOpPass *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  mlir::Operation *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  std::string __p;
  std::string v23;

  v2 = *a1;
  v3 = (_anonymous_namespace_::PrintOpPass *)a1[1];
  v4 = *(_QWORD *)(*a1 + 48);
  v5 = *(_QWORD *)(*a1 + 56) - v4;
  if (v5)
  {
    v1 = (unint64_t)v3 + 1512;
    v7 = 8 * (v5 >> 3);
    do
    {
      std::to_string(&v23, *(_DWORD *)(*(_QWORD *)v4 + 24));
      v8 = std::string::insert(&v23, 0, "arg");
      __p = *v8;
      v8->__r_.__value_.__r.__words[0] = 0;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      v11 = v10;
      *(_QWORD *)v12 = v9;
      *(_DWORD *)(v12 + 8) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v4 += 8;
      v7 -= 8;
    }
    while (v7);
    v2 = *a1;
  }
  v13 = (mlir::GenericProgramPoint *)(v2 + 32);
  v14 = *(mlir::GenericProgramPoint **)(v2 + 40);
  if (v14 != (mlir::GenericProgramPoint *)(v2 + 32))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v14);
      v21 = v19;
      if (*((_BYTE *)v3 + 888))
      {
        if (v15)
        {
          *((_BYTE *)&v23.__r_.__value_.__s + 23) = 0;
          v23.__r_.__value_.__s.__data_[0] = 0;
          v1 = v1 & 0xFFFFFFFF00000000 | v16;
          v4 = v4 & 0xFFFFFFFF00000000 | v19;
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v23.__r_.__value_.__l.__data_);
          goto LABEL_12;
        }
      }
      else if (v15)
      {
        goto LABEL_12;
      }
      v15 = 1;
LABEL_12:
      v14 = (mlir::GenericProgramPoint *)*((_QWORD *)v14 + 1);
      v16 = v21;
      v17 = v20;
    }
    while (v14 != v13);
  }
}

llvm::raw_ostream *llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,llvm::raw_string_ostream,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,llvm::raw_string_ostream &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,llvm::raw_string_ostream,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,llvm::raw_string_ostream &)::{lambda(mlir::Type const&)#1},llvm::raw_string_ostream,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,llvm::raw_string_ostream &,llvm::raw_string_ostream,llvm::StringRef const&)::{lambda(void)#1},void>(llvm::raw_ostream *this, uint64_t a2, llvm::raw_ostream *a3, uint64_t a4, llvm::raw_ostream *a5, llvm::raw_ostream *a6, uint64_t a7)
{
  llvm::raw_ostream *v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  void *v17;
  const char *v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;

  v13 = this;
  if (this != a3 || a2 != a4)
  {
    v21 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, a2) + 8) & 0xFFFFFFFFFFFFFFF8;
    this = mlir::Type::print((llvm::raw_ostream *)&v21, a5);
    v14 = a2 + 1;
    if (v13 != a3 || v14 != a4)
    {
      if (v13 != a3)
      {
        while (1)
        {
          v15 = *(const char **)a7;
          v16 = *(_QWORD *)(a7 + 8);
          v17 = (void *)*((_QWORD *)a6 + 4);
          if (v16 > *((_QWORD *)a6 + 3) - (_QWORD)v17)
          {
            llvm::raw_ostream::write(a6, v15, *(_QWORD *)(a7 + 8));
          }
          else if (v16)
          {
            memcpy(v17, v15, *(_QWORD *)(a7 + 8));
            *((_QWORD *)a6 + 4) += v16;
          }
          v21 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v13, v14) + 8) & 0xFFFFFFFFFFFFFFF8;
          mlir::Type::print((llvm::raw_ostream *)&v21, a5);
          ++v14;
        }
      }
      do
      {
        v18 = *(const char **)a7;
        v19 = *(_QWORD *)(a7 + 8);
        v20 = (void *)*((_QWORD *)a6 + 4);
        if (v19 > *((_QWORD *)a6 + 3) - (_QWORD)v20)
        {
          llvm::raw_ostream::write(a6, v18, *(_QWORD *)(a7 + 8));
        }
        else if (v19)
        {
          memcpy(v20, v18, *(_QWORD *)(a7 + 8));
          *((_QWORD *)a6 + 4) += v19;
        }
        v21 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v13, v14) + 8) & 0xFFFFFFFFFFFFFFF8;
        this = mlir::Type::print((llvm::raw_ostream *)&v21, a5);
        ++v14;
      }
      while (a4 != v14);
    }
  }
  return this;
}

void `anonymous namespace'::PrintOpPass::emitAttrList(llvm::raw_ostream *this, _QWORD *a2)
{
  _BYTE *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *p_p;
  size_t size;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _WORD *v13;
  std::string *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE *v18;
  std::string __p;
  _QWORD v20[2];
  const char *v21;
  __int16 v22;
  _QWORD v23[2];
  _QWORD *v24;
  __int16 v25;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 == v5)
      goto LABEL_40;
LABEL_5:
    v20[0] = v6 + 4;
    v21 = " = ";
    v22 = 772;
    v23[0] = v20;
    v24 = v6 + 7;
    v25 = 1026;
    llvm::Twine::str((llvm::Twine *)v23, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(this, (const char *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v10 = (_QWORD *)v6[1];
      if (!v10)
        goto LABEL_17;
    }
    else
    {
      v10 = (_QWORD *)v6[1];
      if (!v10)
      {
        do
        {
LABEL_17:
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
        goto LABEL_19;
      }
    }
    do
    {
      v11 = v10;
      v10 = (_QWORD *)*v10;
    }
    while (v10);
LABEL_19:
    if (v11 == v5)
      goto LABEL_40;
    while (1)
    {
      v13 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 8236;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
      }
      v20[0] = v11 + 4;
      v21 = " = ";
      v22 = 772;
      v23[0] = v20;
      v24 = v11 + 7;
      v25 = 1026;
      llvm::Twine::str((llvm::Twine *)v23, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__p;
      else
        v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v15 = __p.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(this, (const char *)v14, v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v16 = (_QWORD *)v11[1];
        if (v16)
        {
          do
          {
LABEL_35:
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
          goto LABEL_21;
        }
      }
      else
      {
        v16 = (_QWORD *)v11[1];
        if (v16)
          goto LABEL_35;
      }
      do
      {
        v17 = (_QWORD *)v11[2];
        v12 = *v17 == (_QWORD)v11;
        v11 = v17;
      }
      while (!v12);
LABEL_21:
      v11 = v17;
      if (v17 == v5)
        goto LABEL_40;
    }
  }
  *v4 = 91;
  ++*((_QWORD *)this + 4);
  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
    goto LABEL_5;
LABEL_40:
  v18 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v18)
  {
    llvm::raw_ostream::write(this, "]", 1uLL);
  }
  else
  {
    *v18 = 93;
    ++*((_QWORD *)this + 4);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x50uLL);
    v24 = *a4;
    v25 = (uint64_t *)*((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v11[8] = 0;
    v11[9] = 0;
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t llvm::format_object<int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t llvm::format_object<int,int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,`anonymous namespace'::Node,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::Node>>,mlir::Value,`anonymous namespace'::Node,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::Node>>::LookupBucketFor<mlir::Value>(uint64_t a1, int a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;

  if (a2)
  {
    v4 = *a3;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v5 & 1) == 0)
    {
      v25 = a1;
      v22 = a3;
      v23 = a4;
      v24 = a2;
      v21 = *a3;
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v21;
      a3 = v22;
      a2 = v24;
      a4 = v23;
      v19 = v18;
      a1 = v25;
      if (v19)
      {
        v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v20 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v21;
        a3 = v22;
        a2 = v24;
        a1 = v25;
        a4 = v23;
      }
    }
    v7 = (v6[19] + 8 * v4) ^ HIDWORD(v4);
    v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    v9 = a2 - 1;
    v10 = (-348639895 * ((v8 >> 47) ^ v8)) & (a2 - 1);
    v11 = (_QWORD *)(a1 + 24 * v10);
    v12 = *v11;
    if (*a3 == *v11)
    {
LABEL_4:
      *a4 = v11;
      return 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(a1 + 24 * (v17 & v9));
        v12 = *v11;
        if (*a3 == *v11)
          goto LABEL_4;
      }
      if (v14)
        v11 = v14;
      *a4 = v11;
      return 0;
    }
  }
  else
  {
    *a4 = 0;
    return 0;
  }
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,`anonymous namespace'::Node,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::Node>>,mlir::Value,`anonymous namespace'::Node,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::Node>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  llvm *v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = -4096;
        v18[3] = -4096;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = v4;
          do
          {
            if ((*(_QWORD *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v28 = 0;
              v22 = v28;
              *v28 = *(_QWORD *)v21;
              v23 = *((_DWORD *)v21 + 4);
              v22[1] = *((_QWORD *)v21 + 1);
              *((_DWORD *)v22 + 4) = v23;
              ++*(_DWORD *)(a1 + 8);
            }
            v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = &result[3 * v10];
    do
    {
      *v12 = -4096;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_25:
      v27 = &result[3 * v13];
      do
      {
        *v15 = -4096;
        v15 += 3;
      }
      while (v15 != v27);
      return result;
    }
    v24 = v14 / 0x18 + 1;
    v15 = &result[3 * (v24 & 0x1FFFFFFFFFFFFFFELL)];
    v25 = v24 & 0x1FFFFFFFFFFFFFFELL;
    v26 = result;
    do
    {
      *v26 = -4096;
      v26[3] = -4096;
      v26 += 6;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_25;
  }
  return result;
}

void `anonymous namespace'::OperationTransactionState::resetOperation(_anonymous_namespace_::OperationTransactionState *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(*(_QWORD *)this + 24) = *((_QWORD *)this + 1);
  mlir::Operation::setAttrs(*(_QWORD *)this, *((_QWORD *)this + 2));
  v2 = *(uint64_t **)this;
  mlir::ValueRange::ValueRange((unint64_t *)&v7, *((_QWORD *)this + 3), *((unsigned int *)this + 8));
  mlir::Operation::setOperands(v2, v7, v8);
  v3 = *((unsigned int *)this + 28);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *((_QWORD *)this + 13);
    v6 = 8 * v3;
    do
    {
      mlir::Operation::setSuccessor(*(mlir::Operation **)this, *(mlir::Block **)(v5 + 8 * v4), v4);
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
}

void mlir::detail::ConversionPatternRewriterImpl::undoBlockActions(int32x2_t *this, unsigned __int32 a2)
{
  unsigned __int32 v2;
  int32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mlir::GenericProgramPoint *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  mlir::GenericProgramPoint *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t Parent;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  mlir::GenericProgramPoint *v55;
  int32x2_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  mlir::GenericProgramPoint *v60;
  int v61;
  int v62;
  int32x2_t *v63;
  uint64_t v64;
  _QWORD *v65;
  mlir::GenericProgramPoint *v66;
  uint64_t v67;
  _QWORD **v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int32 v82;
  int32x2_t v83;
  __int32 v84;
  uint64_t v85;
  mlir::GenericProgramPoint **v86;
  mlir::GenericProgramPoint *v87;
  int v88;
  int v89;
  unsigned __int32 v90;
  int32x2_t *v91;
  unint64_t v92;
  int32x2_t *v94;
  int32x2_t *v95;

  v2 = this[53].u32[0];
  if (v2 != a2)
  {
    v91 = this + 52;
    v92 = a2;
    v4 = this[52];
    v5 = *(_QWORD *)&v4 + 40 * a2;
    v6 = *(_QWORD *)&v4 + 40 * v2;
    v94 = this + 9;
    v95 = this + 13;
    v7 = v6;
    do
    {
      v15 = *(_DWORD *)(v7 - 40);
      v7 -= 40;
      switch(v15)
      {
        case 0:
          v16 = *(_QWORD *)(v6 - 32);
          v17 = v16 + 32;
          if (*(_QWORD *)(v16 + 32) != v16 + 32)
          {
            do
            {
              mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v16 + 40));
              v19 = (mlir::GenericProgramPoint *)v18;
              llvm::ilist_traits<mlir::Operation>::removeNodeFromList(v17, v18);
              mlir::GenericProgramPoint::~GenericProgramPoint(v19);
              v21 = *v20;
              v22 = (uint64_t *)v20[1];
              *v22 = *v20;
              *(_QWORD *)(v21 + 8) = v22;
              *v20 = 0;
              v20[1] = 0;
            }
            while (*(_QWORD *)(v16 + 32) != v17);
            v16 = *(_QWORD *)(v6 - 32);
          }
          v23 = (_QWORD *)v16;
          goto LABEL_35;
        case 1:
          v8 = *(_QWORD *)(v6 - 24);
          v9 = *(_QWORD *)(v6 - 16);
          v10 = *(_QWORD *)(v6 - 32);
          if (v9)
            v11 = (uint64_t **)(v9 + 16);
          else
            v11 = (uint64_t **)(v8 + 8);
          v12 = *v11;
          llvm::ilist_traits<mlir::Block>::addNodeToList(v8, *(_QWORD *)(v6 - 32));
          v13 = *v12;
          *(_QWORD *)(v10 + 8) = *v12;
          *(_QWORD *)(v10 + 16) = v12;
          v14 = v10 + 8;
          *(_QWORD *)(v13 + 8) = v14;
          *v12 = v14;
          goto LABEL_7;
        case 2:
          v24 = *(mlir::GenericProgramPoint **)(v6 - 16);
          if (v24)
          {
            v26 = *(_QWORD *)(v6 - 32);
            v25 = *(_QWORD *)(v6 - 24);
            v27 = *(uint64_t **)(v25 + 40);
            mlir::GenericProgramPoint::~GenericProgramPoint(v24);
            v29 = v28;
            mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v6 - 8));
            v31 = *(uint64_t **)(v30 + 8);
            v32 = v29 == v31 || v27 == v31;
            if (!v32)
            {
              llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v25 + 32, v26 + 32, (uint64_t)v29, (uint64_t)v31);
              v33 = *v31;
              v34 = *v29;
              *(_QWORD *)(v34 + 8) = v31;
              *v31 = v34;
              v35 = *v27;
              *(_QWORD *)(v33 + 8) = v27;
              *v29 = v35;
              *(_QWORD *)(v35 + 8) = v29;
              *v27 = v33;
            }
          }
          goto LABEL_7;
        case 3:
          v37 = *(_QWORD *)(v6 - 24);
          v36 = *(_QWORD *)(v6 - 16);
          v38 = (uint64_t *)v37;
          if (v36)
            v38 = *(uint64_t **)(v36 + 16);
          Parent = mlir::Block::getParent(*(mlir::Block **)(v6 - 32));
          v40 = *(_QWORD *)(v6 - 32);
          if (v40)
            v41 = (uint64_t *)(v40 + 8);
          else
            v41 = 0;
          v42 = (uint64_t *)v41[1];
          if (v41 != v38 && v42 != v38)
          {
            llvm::ilist_traits<mlir::Block>::transferNodesFromList(v37, Parent, (uint64_t)v41, v41[1]);
            if (v42 != v41)
            {
              v44 = *v42;
              v45 = *v41;
              *(_QWORD *)(v45 + 8) = v42;
              *v42 = v45;
              v46 = *v38;
              *(_QWORD *)(v44 + 8) = v38;
              *v41 = v46;
              *(_QWORD *)(v46 + 8) = v41;
              *v38 = v44;
            }
          }
          goto LABEL_7;
        case 4:
          v47 = *(_QWORD *)(v6 - 32);
          v48 = (uint64_t *)(v47 + 32);
          if (*(_QWORD *)(v47 + 32) != v47 + 32)
          {
            v49 = *(_QWORD *)(v6 - 24);
            if (v49 != v47)
            {
              v50 = (uint64_t *)(v49 + 32);
              v51 = *(uint64_t **)(v47 + 40);
              llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v49 + 32, (uint64_t)v48, (uint64_t)v51, (uint64_t)v48);
              if (v51 != v48)
              {
                v52 = *v48;
                v53 = *v51;
                *(_QWORD *)(v53 + 8) = v48;
                *v48 = v53;
                v54 = *v50;
                *(_QWORD *)(v52 + 8) = v50;
                *v51 = v54;
                *(_QWORD *)(v54 + 8) = v51;
                *v50 = v52;
              }
            }
          }
          v23 = *(_QWORD **)(v6 - 32);
LABEL_35:
          mlir::Block::dropAllDefinedValueUses(v23);
          mlir::Block::erase(*(mlir::Block **)(v6 - 32));
          goto LABEL_7;
        case 5:
          v55 = *(mlir::GenericProgramPoint **)(v6 - 32);
          v56 = this[9];
          v57 = this[11].u32[0];
          if (!(_DWORD)v57)
            goto LABEL_42;
          LODWORD(v58) = ((v55 >> 4) ^ (v55 >> 9)) & (v57 - 1);
          v59 = (_QWORD *)(*(_QWORD *)&v56 + 16 * v58);
          v60 = (mlir::GenericProgramPoint *)*v59;
          if ((mlir::GenericProgramPoint *)*v59 == v55)
            goto LABEL_43;
          v61 = 1;
          break;
        default:
          goto LABEL_7;
      }
      while (v60 != (mlir::GenericProgramPoint *)-4096)
      {
        v62 = v58 + v61++;
        v58 = v62 & (v57 - 1);
        v60 = *(mlir::GenericProgramPoint **)(*(_QWORD *)&v56 + 16 * v58);
        if (v60 == v55)
        {
          v59 = (_QWORD *)(*(_QWORD *)&v56 + 16 * v58);
          goto LABEL_43;
        }
      }
LABEL_42:
      v59 = (_QWORD *)(*(_QWORD *)&v56 + 16 * v57);
LABEL_43:
      v32 = v59 == (_QWORD *)(*(_QWORD *)&v56 + 16 * v57);
      v63 = v95;
      if (!v32)
        v63 = (int32x2_t *)(v59 + 1);
      v64 = v63->u32[0];
      if ((_DWORD)v64 != this[13].i32[0])
      {
        v65 = (_QWORD *)(*(_QWORD *)&this[12] + (v64 << 6));
        v66 = (mlir::GenericProgramPoint *)v65[1];
        v67 = ((*((_QWORD *)v55 + 7) - *((_QWORD *)v55 + 6)) >> 3) - 1;
        if ((int)v67 >= 0)
        {
          do
          {
            v69 = *(_QWORD ***)(*((_QWORD *)v55 + 6) + 8 * v67);
            while (1)
            {
              v70 = *v69;
              if (!*v69)
                break;
              v71 = (_QWORD *)v70[1];
              if (v71)
              {
                *v71 = *v70;
                if (*v70)
                  *(_QWORD *)(*v70 + 8) = v70[1];
              }
              *v70 = 0;
              v70[1] = 0;
              v70[3] = 0;
            }
          }
          while (v67-- > 0);
        }
        while (1)
        {
          v72 = *(uint64_t **)v55;
          if (!*(_QWORD *)v55)
            break;
          v73 = (uint64_t *)v72[1];
          if (v73)
          {
            *v73 = *v72;
            if (*v72)
              *(_QWORD *)(*v72 + 8) = v72[1];
          }
          v72[3] = (uint64_t)v66;
          mlir::GenericProgramPoint::~GenericProgramPoint(v66);
          v75 = *v74;
          *v72 = *v74;
          v72[1] = (uint64_t)v74;
          if (v75)
            *(_QWORD *)(v75 + 8) = v72;
          *v74 = (uint64_t)v72;
        }
        v76 = (uint64_t *)((char *)v55 + 32);
        if (*((mlir::GenericProgramPoint **)v55 + 4) != (mlir::GenericProgramPoint *)((char *)v55 + 32) && v66 != v55)
        {
          v77 = (uint64_t *)((char *)v66 + 32);
          v78 = (uint64_t *)*((_QWORD *)v55 + 5);
          llvm::ilist_traits<mlir::Operation>::transferNodesFromList((uint64_t)v66 + 32, (uint64_t)v55 + 32, (uint64_t)v78, (uint64_t)v55 + 32);
          if (v78 != v76)
          {
            v79 = *v76;
            v80 = *v78;
            *(_QWORD *)(v80 + 8) = v76;
            *v76 = v80;
            v81 = *v77;
            *(_QWORD *)(v79 + 8) = v77;
            *v78 = v81;
            *(_QWORD *)(v81 + 8) = v78;
            *v77 = v79;
          }
        }
        mlir::Block::moveBefore(v66, v55);
        mlir::Block::erase(v55);
        v82 = this[16].i32[0];
        if (v82)
        {
          v83 = this[14];
          v84 = v82 - 1;
          LODWORD(v85) = (v82 - 1) & ((v66 >> 4) ^ (v66 >> 9));
          v86 = (mlir::GenericProgramPoint **)(*(_QWORD *)&v83 + 8 * v85);
          v87 = *v86;
          if (v66 == *v86)
          {
LABEL_68:
            *v86 = (mlir::GenericProgramPoint *)-8192;
            this[15] = vadd_s32(this[15], (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v88 = 1;
            while (v87 != (mlir::GenericProgramPoint *)-4096)
            {
              v89 = v85 + v88++;
              v85 = v89 & v84;
              v87 = *(mlir::GenericProgramPoint **)(*(_QWORD *)&v83 + 8 * v85);
              if (v66 == v87)
              {
                v86 = (mlir::GenericProgramPoint **)(*(_QWORD *)&v83 + 8 * v85);
                goto LABEL_68;
              }
            }
          }
        }
      }
LABEL_7:
      v6 = v7;
    }
    while (v7 != v5);
    v90 = this[53].u32[0];
    if (v90 != a2)
    {
      if (v90 <= a2)
      {
        if (this[53].i32[1] < a2)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v91, &this[54], v92, 40);
          v90 = this[53].u32[0];
        }
        if (v90 != a2)
          bzero((void *)(*(_QWORD *)v91 + 40 * v90), 40 * ((40 * (v92 - v90) - 40) / 0x28) + 40);
      }
      this[53].i32[0] = a2;
    }
  }
}

void detachNestedAndErase(mlir::Operation *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t j;
  _QWORD **NextResultAtOffset;
  _QWORD *v16;
  _QWORD *v17;

  v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) != 0)
  {
    v3 = (((unint64_t)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
    v4 = v3 + 24 * (v2 & 0x7FFFFF);
    do
    {
      for (i = *(_QWORD *)(v3 + 8); i != v3; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v6 = i - 8;
        else
          v6 = 0;
        for (; *(_QWORD *)(v6 + 32) != v6 + 32; v9[1] = 0)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v6 + 40));
          v8 = (mlir::GenericProgramPoint *)v7;
          llvm::ilist_traits<mlir::Operation>::removeNodeFromList(v6 + 32, v7);
          mlir::GenericProgramPoint::~GenericProgramPoint(v8);
          v10 = *v9;
          v11 = (uint64_t *)v9[1];
          *v11 = *v9;
          *(_QWORD *)(v10 + 8) = v11;
          *v9 = 0;
        }
        mlir::Block::dropAllDefinedValueUses((_QWORD *)v6);
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
  v12 = *((unsigned int *)this + 9);
  if ((_DWORD)v12)
    v13 = (char *)this - 16;
  else
    v13 = 0;
  if ((_DWORD)v12)
  {
    for (j = 0; j != v12; ++j)
    {
      NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v13, j);
      while (1)
      {
        v16 = *NextResultAtOffset;
        if (!*NextResultAtOffset)
          break;
        v17 = (_QWORD *)v16[1];
        if (v17)
        {
          *v17 = *v16;
          if (*v16)
            *(_QWORD *)(*v16 + 8) = v16[1];
        }
        *v16 = 0;
        v16[1] = 0;
        v16[3] = 0;
      }
    }
  }
  mlir::Operation::erase(this);
}

void mlir::detail::ConversionPatternRewriterImpl::applyRewrites(mlir::detail::ConversionPatternRewriterImpl *this)
{
  uint64_t v2;
  mlir::Operation **v3;
  mlir::Operation *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t NextResultAtOffset;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ***v41;
  uint64_t ***v42;
  uint64_t Owner;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  mlir::Operation **v51;
  mlir::Operation **v52;
  mlir::Operation *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  _QWORD **v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  mlir::Operation **v61;
  mlir::Operation **v62;
  mlir::Operation *v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t j;
  _QWORD **v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  mlir::detail::OpResultImpl *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  unsigned __int8 v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unsigned __int8 v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unsigned __int8 v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  unsigned __int8 v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  mlir::Block **v142;
  uint64_t v143;
  void *v144;
  _anonymous_namespace_::ArgConverter *v145;
  mlir::Operation **v146;
  uint64_t v147;
  uint64_t v148;
  mlir::Operation **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  mlir::detail::OpResultImpl *v153;
  mlir::detail::OpResultImpl *v154;
  mlir::detail::OpResultImpl *v155;
  mlir::detail::OpResultImpl *v156;
  mlir::detail::OpResultImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[2];
  uint64_t v164;
  uint64_t v165;
  uint64_t **v166;

  v2 = *((unsigned int *)this + 90);
  if ((_DWORD)v2)
  {
    v3 = (mlir::Operation **)*((_QWORD *)this + 44);
    v145 = (mlir::detail::ConversionPatternRewriterImpl *)((char *)this + 72);
    v146 = &v3[2 * v2];
    while (1)
    {
      v4 = *v3;
      v5 = *((_DWORD *)*v3 + 9);
      v6 = (uint64_t)*v3 - 16;
      if (!v5)
        v6 = 0;
      v153 = (mlir::detail::OpResultImpl *)v6;
      v158 = *((unsigned int *)*v3 + 9);
      if (v5)
        break;
LABEL_60:
      if ((*((_DWORD *)v4 + 11) & 0x7FFFFF) != 0)
      v3 += 2;
      if (v3 == v146)
        goto LABEL_62;
    }
    v149 = v3;
    v7 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v153, v7);
      v9 = (_QWORD **)NextResultAtOffset;
      v10 = *(_QWORD *)this;
      LODWORD(v11) = *((_DWORD *)this + 4);
      v12 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v12)
      {
        v13 = 0;
        v14 = (_QWORD *)NextResultAtOffset;
        v15 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        do
        {
          v16 = (unint64_t)v14;
          if ((v14[1] & 0xFFFFFFFFFFFFFFF8) == v12)
            v13 = (unint64_t)v14;
          if (!(_DWORD)v11)
            break;
          if ((v17 & 1) == 0)
          {
            v15 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            if (v24)
            {
              v25 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v25 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v25;
              v15 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            }
          }
          v18 = 0x9DDFEA08EB382D69 * ((v15[19] + 8 * v16) ^ HIDWORD(v16));
          v19 = 0x9DDFEA08EB382D69 * (HIDWORD(v16) ^ (v18 >> 47) ^ v18);
          LODWORD(v19) = (-348639895 * ((v19 >> 47) ^ v19)) & (v11 - 1);
          v20 = (_QWORD *)(v10 + 16 * v19);
          v21 = (_QWORD *)*v20;
          if (v16 != *v20)
          {
            v22 = 1;
            while (v21 != (_QWORD *)-4096)
            {
              v23 = v19 + v22++;
              v19 = v23 & (v11 - 1);
              v21 = *(_QWORD **)(v10 + 16 * v19);
              if ((_QWORD *)v16 == v21)
              {
                v20 = (_QWORD *)(v10 + 16 * v19);
                v10 = *(_QWORD *)this;
                v11 = *((unsigned int *)this + 4);
                if (v20 != (_QWORD *)(*(_QWORD *)this + 16 * v11))
                  goto LABEL_17;
                goto LABEL_28;
              }
            }
            break;
          }
          v10 = *(_QWORD *)this;
          v11 = *((unsigned int *)this + 4);
          if (v20 == (_QWORD *)(*(_QWORD *)this + 16 * v11))
            break;
LABEL_17:
          v14 = (_QWORD *)v20[1];
        }
        while (v14);
LABEL_28:
        if (!v13)
          v13 = v16;
      }
      else
      {
        v26 = (_QWORD *)NextResultAtOffset;
        v27 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        do
        {
          v13 = (unint64_t)v26;
          if (!(_DWORD)v11)
            break;
          if ((v28 & 1) == 0)
          {
            v27 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            if (v35)
            {
              v36 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v36 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v36;
              v27 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            }
          }
          v29 = 0x9DDFEA08EB382D69 * ((v27[19] + 8 * v13) ^ HIDWORD(v13));
          v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ (v29 >> 47) ^ v29);
          LODWORD(v30) = (-348639895 * ((v30 >> 47) ^ v30)) & (v11 - 1);
          v31 = (_QWORD *)(v10 + 16 * v30);
          v32 = (_QWORD *)*v31;
          if (v13 != *v31)
          {
            v33 = 1;
            while (v32 != (_QWORD *)-4096)
            {
              v34 = v30 + v33++;
              v30 = v34 & (v11 - 1);
              v32 = *(_QWORD **)(v10 + 16 * v30);
              if ((_QWORD *)v13 == v32)
              {
                v31 = (_QWORD *)(v10 + 16 * v30);
                v10 = *(_QWORD *)this;
                v11 = *((unsigned int *)this + 4);
                if (v31 != (_QWORD *)(*(_QWORD *)this + 16 * v11))
                  goto LABEL_39;
                goto LABEL_30;
              }
            }
            break;
          }
          v10 = *(_QWORD *)this;
          v11 = *((unsigned int *)this + 4);
          if (v31 == (_QWORD *)(*(_QWORD *)this + 16 * v11))
            break;
LABEL_39:
          v26 = (_QWORD *)v31[1];
        }
        while (v26);
      }
LABEL_30:
      if ((_QWORD **)v13 == v9)
        goto LABEL_8;
      if (v12)
      {
        if ((*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) == v12)
          goto LABEL_53;
      }
      else if (v13)
      {
LABEL_53:
        while (1)
        {
          v37 = *v9;
          if (!*v9)
            break;
          v38 = (_QWORD *)v37[1];
          if (v38)
          {
            *v38 = *v37;
            if (*v37)
              *(_QWORD *)(*v37 + 8) = v37[1];
          }
          v37[3] = v13;
          v37[1] = v13;
          v39 = *(_QWORD *)v13;
          *v37 = *(_QWORD *)v13;
          if (v39)
            *(_QWORD *)(v39 + 8) = v37;
          *(_QWORD *)v13 = v37;
        }
      }
LABEL_8:
      if (++v7 == v158)
      {
        v3 = v149;
        v4 = *v149;
        goto LABEL_60;
      }
    }
  }
LABEL_62:
  v40 = *((unsigned int *)this + 94);
  if ((_DWORD)v40)
  {
    v41 = (uint64_t ***)*((_QWORD *)this + 46);
    v42 = &v41[v40];
    do
    {
      v166 = *v41;
      if (v44)
      {
        v45 = v44;
        if ((~*((_DWORD *)v44 + 2) & 7) != 0)
        {
          v165 = 0;
          Owner = mlir::detail::OpResultImpl::getOwner((mlir::detail::OpResultImpl *)v44);
          v164 = *(_QWORD *)(Owner + 16);
          v165 = Owner;
          v163[0] = &v164;
          v163[1] = &v165;
          mlir::Value::replaceUsesWithIf(&v166, v45, (uint64_t (*)(uint64_t, uint64_t *))llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::applyRewrites(void)::$_0>, (uint64_t)v163);
        }
        else
        {
          v46 = v166;
          while (1)
          {
            v47 = *v46;
            if (!*v46)
              break;
            v48 = (uint64_t *)v47[1];
            if (v48)
            {
              *v48 = *v47;
              if (*v47)
                *(_QWORD *)(*v47 + 8) = v47[1];
            }
            v47[3] = (uint64_t)v44;
            v47[1] = (uint64_t)v44;
            v49 = *v44;
            *v47 = *v44;
            if (v49)
              *(_QWORD *)(v49 + 8) = v47;
            *v44 = (uint64_t)v47;
          }
        }
      }
      ++v41;
    }
    while (v41 != v42);
  }
  v50 = *((_DWORD *)this + 68);
  if (v50)
  {
    v51 = (mlir::Operation **)*((_QWORD *)this + 33);
    v52 = &v51[3 * v50];
    do
    {
      v53 = *v51;
      v54 = *((unsigned int *)*v51 + 9);
      if ((_DWORD)v54)
        v55 = (uint64_t)*v51 - 16;
      else
        v55 = 0;
      if ((_DWORD)v54)
      {
        for (i = 0; i != v54; ++i)
        {
          v57 = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v55, i);
          while (1)
          {
            v58 = *v57;
            if (!*v57)
              break;
            v59 = (_QWORD *)v58[1];
            if (v59)
            {
              *v59 = *v58;
              if (*v58)
                *(_QWORD *)(*v58 + 8) = v58[1];
            }
            *v58 = 0;
            v58[1] = 0;
            v58[3] = 0;
          }
        }
        v53 = *v51;
      }
      mlir::Operation::erase(v53);
      v51 += 3;
    }
    while (v51 != v52);
  }
  v60 = *((unsigned int *)this + 90);
  if ((_DWORD)v60)
  {
    v61 = (mlir::Operation **)*((_QWORD *)this + 44);
    v62 = &v61[2 * v60];
    do
    {
      v64 = (unsigned int *)*(v62 - 2);
      v62 -= 2;
      v63 = (mlir::Operation *)v64;
      v65 = v64[9];
      v66 = (uint64_t)(v64 - 4);
      if ((_DWORD)v65)
        v67 = v66;
      else
        v67 = 0;
      if ((_DWORD)v65)
      {
        for (j = 0; j != v65; ++j)
        {
          v69 = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v67, j);
          while (1)
          {
            v70 = *v69;
            if (!*v69)
              break;
            v71 = (_QWORD *)v70[1];
            if (v71)
            {
              *v71 = *v70;
              if (*v70)
                *(_QWORD *)(*v70 + 8) = v70[1];
            }
            *v70 = 0;
            v70[1] = 0;
            v70[3] = 0;
          }
        }
        v63 = *v62;
      }
      mlir::Operation::erase(v63);
    }
    while (v62 != v61);
  }
  v72 = *((unsigned int *)this + 26);
  v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((_DWORD)v72)
  {
    v74 = *((_QWORD *)this + 12);
    v75 = v74 + (v72 << 6);
    while (1)
    {
      v76 = *(_QWORD *)(v74 + 8);
      v77 = *(_QWORD *)(v76 + 56) - *(_QWORD *)(v76 + 48);
      if ((v77 & 0x7FFFFFFF8) != 0)
        break;
LABEL_110:
      v74 += 64;
      if (v74 == v75)
        goto LABEL_210;
    }
    v78 = 0;
    v79 = (mlir::detail::OpResultImpl *)(v77 >> 3);
    while (1)
    {
      v80 = *(_QWORD *)(v74 + 16) + 24 * v78;
      v81 = *(_QWORD **)(*(_QWORD *)(v76 + 48) + 8 * v78);
      if (*(_BYTE *)(v80 + 16))
      {
        if (*v81)
        {
          v82 = *(_QWORD **)(v80 + 8);
          v83 = *(_QWORD *)this;
          LODWORD(v84) = *((_DWORD *)this + 4);
          v85 = v81[1] & 0xFFFFFFFFFFFFFFF8;
          if (v85)
          {
            v86 = 0;
            do
            {
              v87 = (unint64_t)v82;
              if ((v82[1] & 0xFFFFFFFFFFFFFFF8) == v85)
                v86 = v82;
              if (!(_DWORD)v84)
                break;
              if ((v88 & 1) == 0)
              {
                v147 = v75;
                v150 = v74;
                v154 = v79;
                v159 = v76;
                v79 = v154;
                v76 = v159;
                v75 = v147;
                v74 = v150;
                v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                if (v95)
                {
                  v96 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override)
                    v96 = 0xFF51AFD7ED558CCDLL;
                  llvm::hashing::detail::get_execution_seed(void)::seed = v96;
                  v79 = v154;
                  v76 = v159;
                  v75 = v147;
                  v74 = v150;
                  v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                }
              }
              v89 = 0x9DDFEA08EB382D69 * ((v73[19] + 8 * v87) ^ HIDWORD(v87));
              v90 = 0x9DDFEA08EB382D69 * (HIDWORD(v87) ^ (v89 >> 47) ^ v89);
              LODWORD(v90) = (-348639895 * ((v90 >> 47) ^ v90)) & (v84 - 1);
              v91 = (_QWORD *)(v83 + 16 * v90);
              v92 = (_QWORD *)*v91;
              if (v87 != *v91)
              {
                v93 = 1;
                while (v92 != (_QWORD *)-4096)
                {
                  v94 = v90 + v93++;
                  v90 = v94 & (v84 - 1);
                  v92 = *(_QWORD **)(v83 + 16 * v90);
                  if ((_QWORD *)v87 == v92)
                  {
                    v91 = (_QWORD *)(v83 + 16 * v90);
                    v83 = *(_QWORD *)this;
                    v84 = *((unsigned int *)this + 4);
                    if (v91 != (_QWORD *)(*(_QWORD *)this + 16 * v84))
                      goto LABEL_124;
                    goto LABEL_154;
                  }
                }
                break;
              }
              v83 = *(_QWORD *)this;
              v84 = *((unsigned int *)this + 4);
              if (v91 == (_QWORD *)(*(_QWORD *)this + 16 * v84))
                break;
LABEL_124:
              v82 = (_QWORD *)v91[1];
            }
            while (v82);
LABEL_154:
            if (v86)
              v112 = (unint64_t)v86;
            else
              v112 = v87;
          }
          else
          {
            do
            {
              v112 = (unint64_t)v82;
              if (!(_DWORD)v84)
                break;
              if ((v113 & 1) == 0)
              {
                v120 = v74;
                v121 = v75;
                v156 = v79;
                v161 = v76;
                v79 = v156;
                v76 = v161;
                v75 = v121;
                v74 = v120;
                v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                if (v122)
                {
                  v123 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override)
                    v123 = 0xFF51AFD7ED558CCDLL;
                  llvm::hashing::detail::get_execution_seed(void)::seed = v123;
                  v79 = v156;
                  v76 = v161;
                  v75 = v121;
                  v74 = v120;
                  v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                }
              }
              v114 = 0x9DDFEA08EB382D69 * ((v73[19] + 8 * v112) ^ HIDWORD(v112));
              v115 = 0x9DDFEA08EB382D69 * (HIDWORD(v112) ^ (v114 >> 47) ^ v114);
              LODWORD(v115) = (-348639895 * ((v115 >> 47) ^ v115)) & (v84 - 1);
              v116 = (_QWORD *)(v83 + 16 * v115);
              v117 = (_QWORD *)*v116;
              if (v112 != *v116)
              {
                v118 = 1;
                while (v117 != (_QWORD *)-4096)
                {
                  v119 = v115 + v118++;
                  v115 = v119 & (v84 - 1);
                  v117 = *(_QWORD **)(v83 + 16 * v115);
                  if ((_QWORD *)v112 == v117)
                  {
                    v116 = (_QWORD *)(v83 + 16 * v115);
                    v83 = *(_QWORD *)this;
                    v84 = *((unsigned int *)this + 4);
                    if (v116 != (_QWORD *)(*(_QWORD *)this + 16 * v84))
                      goto LABEL_167;
                    goto LABEL_179;
                  }
                }
                break;
              }
              v83 = *(_QWORD *)this;
              v84 = *((unsigned int *)this + 4);
              if (v116 == (_QWORD *)(*(_QWORD *)this + 16 * v84))
                break;
LABEL_167:
              v82 = (_QWORD *)v116[1];
            }
            while (v82);
          }
LABEL_179:
          while (1)
          {
            v124 = (_QWORD *)*v81;
            if (!*v81)
              break;
            v125 = (_QWORD *)v124[1];
            if (v125)
            {
              *v125 = *v124;
              if (*v124)
                *(_QWORD *)(*v124 + 8) = v124[1];
            }
            v124[3] = v112;
            v124[1] = v112;
            v126 = *(_QWORD *)v112;
            *v124 = *(_QWORD *)v112;
            if (v126)
              *(_QWORD *)(v126 + 8) = v124;
            *(_QWORD *)v112 = v124;
          }
        }
        goto LABEL_113;
      }
      v97 = *(_QWORD *)this;
      LODWORD(v98) = *((_DWORD *)this + 4);
      v99 = v81[1] & 0xFFFFFFFFFFFFFFF8;
      if (v99)
      {
        v100 = 0;
        v101 = *(_QWORD **)(*(_QWORD *)(v76 + 48) + 8 * v78);
        do
        {
          v102 = (unint64_t)v101;
          if ((v101[1] & 0xFFFFFFFFFFFFFFF8) == v99)
            v100 = (unint64_t)v101;
          if (!(_DWORD)v98)
            break;
          if ((v103 & 1) == 0)
          {
            v148 = v75;
            v151 = v74;
            v155 = v79;
            v160 = v76;
            v79 = v155;
            v76 = v160;
            v75 = v148;
            v74 = v151;
            v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            if (v110)
            {
              v111 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v111 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v111;
              v79 = v155;
              v76 = v160;
              v75 = v148;
              v74 = v151;
              v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            }
          }
          v104 = 0x9DDFEA08EB382D69 * ((v73[19] + 8 * v102) ^ HIDWORD(v102));
          v105 = 0x9DDFEA08EB382D69 * (HIDWORD(v102) ^ (v104 >> 47) ^ v104);
          LODWORD(v105) = (-348639895 * ((v105 >> 47) ^ v105)) & (v98 - 1);
          v106 = (_QWORD *)(v97 + 16 * v105);
          v107 = (_QWORD *)*v106;
          if (v102 != *v106)
          {
            v108 = 1;
            while (v107 != (_QWORD *)-4096)
            {
              v109 = v105 + v108++;
              v105 = v109 & (v98 - 1);
              v107 = *(_QWORD **)(v97 + 16 * v105);
              if ((_QWORD *)v102 == v107)
              {
                v106 = (_QWORD *)(v97 + 16 * v105);
                v97 = *(_QWORD *)this;
                v98 = *((unsigned int *)this + 4);
                if (v106 != (_QWORD *)(*(_QWORD *)this + 16 * v98))
                  goto LABEL_143;
                goto LABEL_157;
              }
            }
            break;
          }
          v97 = *(_QWORD *)this;
          v98 = *((unsigned int *)this + 4);
          if (v106 == (_QWORD *)(*(_QWORD *)this + 16 * v98))
            break;
LABEL_143:
          v101 = (_QWORD *)v106[1];
        }
        while (v101);
LABEL_157:
        if (!v100)
          v100 = v102;
      }
      else
      {
        v127 = *(_QWORD **)(*(_QWORD *)(v76 + 48) + 8 * v78);
        do
        {
          v100 = (unint64_t)v127;
          if (!(_DWORD)v98)
            break;
          if ((v128 & 1) == 0)
          {
            v152 = v74;
            v157 = v79;
            v135 = v75;
            v162 = v76;
            v79 = v157;
            v76 = v162;
            v75 = v135;
            v74 = v152;
            v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            if (v136)
            {
              v137 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v137 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v137;
              v79 = v157;
              v76 = v162;
              v75 = v135;
              v74 = v152;
              v73 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            }
          }
          v129 = 0x9DDFEA08EB382D69 * ((v73[19] + 8 * v100) ^ HIDWORD(v100));
          v130 = 0x9DDFEA08EB382D69 * (HIDWORD(v100) ^ (v129 >> 47) ^ v129);
          LODWORD(v130) = (-348639895 * ((v130 >> 47) ^ v130)) & (v98 - 1);
          v131 = (_QWORD *)(v97 + 16 * v130);
          v132 = (_QWORD *)*v131;
          if (v100 != *v131)
          {
            v133 = 1;
            while (v132 != (_QWORD *)-4096)
            {
              v134 = v130 + v133++;
              v130 = v134 & (v98 - 1);
              v132 = *(_QWORD **)(v97 + 16 * v130);
              if ((_QWORD *)v100 == v132)
              {
                v131 = (_QWORD *)(v97 + 16 * v130);
                v97 = *(_QWORD *)this;
                v98 = *((unsigned int *)this + 4);
                if (v131 != (_QWORD *)(*(_QWORD *)this + 16 * v98))
                  goto LABEL_190;
                goto LABEL_159;
              }
            }
            break;
          }
          v97 = *(_QWORD *)this;
          v98 = *((unsigned int *)this + 4);
          if (v131 == (_QWORD *)(*(_QWORD *)this + 16 * v98))
            break;
LABEL_190:
          v127 = (_QWORD *)v131[1];
        }
        while (v127);
      }
LABEL_159:
      if ((_QWORD *)v100 == v81)
        goto LABEL_113;
      if (v99)
      {
        if ((*(_QWORD *)(v100 + 8) & 0xFFFFFFFFFFFFFFF8) == v99)
          goto LABEL_204;
      }
      else if (v100)
      {
LABEL_204:
        while (1)
        {
          v138 = (_QWORD *)*v81;
          if (!*v81)
            break;
          v139 = (_QWORD *)v138[1];
          if (v139)
          {
            *v139 = *v138;
            if (*v138)
              *(_QWORD *)(*v138 + 8) = v138[1];
          }
          v138[3] = v100;
          v138[1] = v100;
          v140 = *(_QWORD *)v100;
          *v138 = *(_QWORD *)v100;
          if (v140)
            *(_QWORD *)(v140 + 8) = v138;
          *(_QWORD *)v100 = v138;
        }
      }
LABEL_113:
      if ((mlir::detail::OpResultImpl *)++v78 == v79)
        goto LABEL_110;
    }
  }
LABEL_210:
  v141 = *((unsigned int *)this + 106);
  if ((_DWORD)v141)
  {
    v142 = (mlir::Block **)(*((_QWORD *)this + 52) + 8);
    v143 = 40 * v141;
    do
    {
      if (*((_DWORD *)v142 - 2) == 1 && *v142)
      {
        mlir::Block::~Block(*v142);
        operator delete(v144);
      }
      v142 += 5;
      v143 -= 40;
    }
    while (v143);
  }
}

unint64_t `anonymous namespace'::ConversionValueMapping::lookupOrNull(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;

  if (a3)
  {
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = v7;
      if ((*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8) == a3)
        v6 = v7;
      v11 = v7;
      v12 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v11, &v12))break;
      if (v12 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
        break;
      v7 = *(_QWORD *)(v12 + 8);
    }
    while (v7);
    if (!v6)
      v6 = v8;
  }
  else
  {
    v9 = a2;
    do
    {
      v6 = v9;
      v11 = v9;
      v12 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v11, &v12))break;
      if (v12 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
        break;
      v9 = *(_QWORD *)(v12 + 8);
    }
    while (v9);
  }
  if (v6 == a2 || a3 && (*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8) != a3)
    return 0;
  return v6;
}

void `anonymous namespace'::ArgConverter::notifyOpRemoved(int32x2_t *this, mlir::Operation *a2)
{
  int32x2_t *v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v9;
  int32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  int32x2_t v14;
  int v15;
  int v16;
  int32x2_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD ***v21;
  _QWORD ***v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  int32x2_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _DWORD *v37;
  void **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int32x2_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;

  v2 = this + 4;
  if (this[4].i32[0])
  {
    v3 = *((unsigned int *)a2 + 11);
    if ((v3 & 0x7FFFFF) != 0)
    {
      v5 = (((unint64_t)a2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *((unsigned int *)a2 + 10);
      v53 = v5 + 24 * (v3 & 0x7FFFFF);
      while (1)
      {
        v6 = *(_QWORD *)(v5 + 8);
        v54 = v5;
        if (v6 != v5)
          break;
LABEL_4:
        v5 += 24;
        if (v5 == v53)
          return;
      }
      while (1)
      {
        if (v6)
          v7 = v6 - 8;
        else
          v7 = 0;
        for (i = *(mlir::GenericProgramPoint **)(v7 + 40);
              i != (mlir::GenericProgramPoint *)(v7 + 32);
              i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(i);
          if ((*((_DWORD *)v9 + 11) & 0x7FFFFF) != 0)
        }
        v10 = *this;
        v11 = this[2].u32[0];
        if ((_DWORD)v11)
        {
          LODWORD(v12) = (v11 - 1) & ((v7 >> 4) ^ (v7 >> 9));
          v13 = (int32x2_t *)(*(_QWORD *)&v10 + 16 * v12);
          v14 = *v13;
          if (*v13 == v7)
            goto LABEL_23;
          v15 = 1;
          while (*(_QWORD *)&v14 != -4096)
          {
            v16 = v12 + v15++;
            v12 = v16 & (v11 - 1);
            v14 = *(int32x2_t *)(*(_QWORD *)&v10 + 16 * v12);
            if (*(_QWORD *)&v14 == v7)
            {
              v13 = (int32x2_t *)(*(_QWORD *)&v10 + 16 * v12);
              goto LABEL_23;
            }
          }
        }
        v13 = (int32x2_t *)(*(_QWORD *)&v10 + 16 * v11);
LABEL_23:
        if (v13 == (int32x2_t *)(*(_QWORD *)&v10 + 16 * v11))
          v17 = v2;
        else
          v17 = v13 + 1;
        v18 = v17->u32[0];
        if ((_DWORD)v18 == this[4].i32[0])
          goto LABEL_7;
        v19 = (_QWORD *)(*(_QWORD *)&this[3] + (v18 << 6));
        v20 = v19[1];
        v21 = *(_QWORD ****)(v20 + 48);
        v22 = *(_QWORD ****)(v20 + 56);
        if (v22 == v21)
        {
          if ((_DWORD)v11)
            goto LABEL_38;
        }
        else
        {
          do
          {
            v23 = *v21;
            while (1)
            {
              v24 = *v23;
              if (!*v23)
                break;
              v25 = (_QWORD *)v24[1];
              if (v25)
              {
                *v25 = *v24;
                if (*v24)
                  *(_QWORD *)(*v24 + 8) = v24[1];
              }
              *v24 = 0;
              v24[1] = 0;
              v24[3] = 0;
            }
            ++v21;
          }
          while (v21 != v22);
          v10 = *this;
          LODWORD(v11) = this[2].i32[0];
          if ((_DWORD)v11)
          {
LABEL_38:
            v26 = v11 - 1;
            LODWORD(v11) = ((*v19 >> 4) ^ (*v19 >> 9)) & (v11 - 1);
            v27 = (uint64_t *)(*(_QWORD *)&v10 + 16 * v11);
            v28 = *v27;
            if (*v19 == *v27)
            {
LABEL_39:
              *v27 = -8192;
              this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v51 = 1;
              while (v28 != -4096)
              {
                v52 = v11 + v51++;
                v11 = v52 & v26;
                v28 = *(_QWORD *)(*(_QWORD *)&v10 + 16 * v11);
                if (*v19 == v28)
                {
                  v27 = (uint64_t *)(*(_QWORD *)&v10 + 16 * v11);
                  goto LABEL_39;
                }
              }
            }
          }
        }
        v29 = v19 + 8;
        v30 = this[3];
        v31 = this[4].u32[0];
        v32 = (_QWORD *)(*(_QWORD *)&v30 + (v31 << 6));
        if (v19 + 8 != v32)
        {
          v33 = v19;
          while (1)
          {
            *(_OWORD *)v33 = *((_OWORD *)v33 + 4);
            v35 = (_QWORD *)v33[10];
            if (v33 + 12 != v35)
            {
              v36 = (_QWORD *)v33[2];
              if (v33 + 4 != v36)
              {
                free(v36);
                v35 = (_QWORD *)v33[10];
              }
              v33[2] = v35;
              v37 = v29 + 3;
              v33[3] = v33[11];
              v33[10] = v33 + 12;
              *((_DWORD *)v33 + 23) = 0;
              goto LABEL_43;
            }
            v38 = (void **)(v33 + 2);
            v37 = v33 + 11;
            v39 = *((unsigned int *)v33 + 22);
            v40 = *((unsigned int *)v33 + 6);
            if (v40 >= v39)
            {
              if ((_DWORD)v39)
                memmove(*v38, v35, 24 * v39 - 7);
              goto LABEL_42;
            }
            if (*((_DWORD *)v33 + 7) >= v39)
            {
              if ((_DWORD)v40)
              {
                memmove(*v38, v35, 24 * v40 - 7);
                v41 = *v37;
                if (v40 != v41)
                  goto LABEL_58;
              }
              else
              {
                v40 = 0;
                LODWORD(v41) = *v37;
                if (*v37)
LABEL_58:
                  memcpy((void *)(v33[2] + 24 * v40), (const void *)(v33[10] + 24 * v40), 24 * v41 - 24 * v40);
              }
            }
            else
            {
              *((_DWORD *)v33 + 6) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v38, v33 + 4, v39, 24);
              v40 = 0;
              LODWORD(v41) = *v37;
              if (*v37)
                goto LABEL_58;
            }
LABEL_42:
            *((_DWORD *)v33 + 6) = v39;
LABEL_43:
            *v37 = 0;
            v33[7] = v33[15];
            v29 += 8;
            v34 = v33 + 16;
            v33 += 8;
            if (v34 == v32)
            {
              LODWORD(v31) = this[4].i32[0];
              v30 = this[3];
              v5 = v54;
              break;
            }
          }
        }
        v42 = (v31 - 1);
        v2->i32[0] = v42;
        v43 = *(_QWORD *)&v30 + (v42 << 6);
        v44 = *(void **)(v43 + 16);
        if (v44 != (void *)(v43 + 32))
        {
          free(v44);
          v30 = this[3];
          v42 = this[4].u32[0];
        }
        if ((_QWORD *)(*(_QWORD *)&v30 + (v42 << 6)) != v19 && this[1].i32[0])
        {
          v45 = this[2].u32[0];
          if ((_DWORD)v45)
          {
            v46 = 16 * v45;
            v47 = *this;
            while ((**(_QWORD **)&v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              *(_QWORD *)&v47 += 16;
              v46 -= 16;
              if (!v46)
                goto LABEL_7;
            }
          }
          else
          {
            v47 = *this;
          }
          v48 = *(_QWORD *)this + 16 * v45;
          if (*(_QWORD *)&v47 != v48)
          {
            v49 = ((uint64_t)v19 - *(_QWORD *)&v30) >> 6;
LABEL_72:
            v50 = *(unsigned int *)(*(_QWORD *)&v47 + 8);
            if (v49 < v50)
              *(_DWORD *)(*(_QWORD *)&v47 + 8) = v50 - 1;
            while (1)
            {
              *(_QWORD *)&v47 += 16;
              if (*(_QWORD *)&v47 == v48)
                break;
              if ((**(_QWORD **)&v47 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (*(_QWORD *)&v47 != v48)
                  goto LABEL_72;
                break;
              }
            }
          }
        }
LABEL_7:
        v6 = *(_QWORD *)(v6 + 8);
        if (v6 == v5)
          goto LABEL_4;
      }
    }
  }
}

uint64_t mlir::detail::ConversionPatternRewriterImpl::remapValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t Loc;
  mlir::Block *ParentBlock;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v55;
  uint64_t v58;
  unint64_t v59;
  mlir::detail::OpResultImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD v66[3];

  v12 = a9;
  v66[1] = *MEMORY[0x1E0C80C00];
  if (a8 > *(unsigned int *)(a9 + 12))
    llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), a8, 8);
  v64 = v66;
  v65 = 0x100000000;
  v61 = 0;
  v62 = a7;
  v63 = 0;
  if (!a8)
  {
LABEL_70:
    v52 = 1;
    v53 = v64;
    if (v64 != v66)
      goto LABEL_71;
    return v52;
  }
  v13 = 0;
  v55 = a5;
  while (1)
  {
    v14 = mlir::ValueRange::dereference_iterator(&v62, v13);
    v58 = v14;
    v15 = *(_QWORD *)(a1 + 1224);
    if (!v15)
    {
LABEL_27:
      v17 = 0;
      v18 = (mlir::GenericProgramPoint *)v58;
LABEL_28:
      v31 = *(_QWORD *)a1;
      LODWORD(v32) = *(_DWORD *)(a1 + 16);
      while (1)
      {
        v33 = (unint64_t)v18;
        if (!(_DWORD)v32)
          goto LABEL_66;
        if ((v34 & 1) == 0
        {
          v41 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v41 = 0xFF51AFD7ED558CCDLL;
          llvm::hashing::detail::get_execution_seed(void)::seed = v41;
        }
        v35 = 0x9DDFEA08EB382D69
            * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v33) ^ HIDWORD(v33));
        v36 = 0x9DDFEA08EB382D69 * (HIDWORD(v33) ^ (v35 >> 47) ^ v35);
        LODWORD(v36) = (-348639895 * ((v36 >> 47) ^ v36)) & (v32 - 1);
        v37 = (uint64_t *)(v31 + 16 * v36);
        v38 = *v37;
        if (v33 != *v37)
        {
          v39 = 1;
          while (v38 != -4096)
          {
            v40 = v36 + v39++;
            v36 = v40 & (v32 - 1);
            v38 = *(_QWORD *)(v31 + 16 * v36);
            if (v33 == v38)
            {
              v37 = (uint64_t *)(v31 + 16 * v36);
              v31 = *(_QWORD *)a1;
              v32 = *(unsigned int *)(a1 + 16);
              if (v37 != (uint64_t *)(*(_QWORD *)a1 + 16 * v32))
                goto LABEL_33;
              goto LABEL_66;
            }
          }
          goto LABEL_66;
        }
        v31 = *(_QWORD *)a1;
        v32 = *(unsigned int *)(a1 + 16);
        if (v37 == (uint64_t *)(*(_QWORD *)a1 + 16 * v32))
          goto LABEL_66;
LABEL_33:
        v18 = (mlir::GenericProgramPoint *)v37[1];
        if (!v18)
          goto LABEL_49;
      }
    }
    v16 = (void *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8);
    LODWORD(v65) = 0;
    if (!mlir::TypeConverter::convertType(v15, v16, (uint64_t)&v64))
      break;
    if ((_DWORD)v65 != 1)
      goto LABEL_27;
    v17 = (mlir::GenericProgramPoint *)*v64;
    v18 = (mlir::GenericProgramPoint *)v58;
    if (!*v64)
      goto LABEL_28;
    v19 = 0;
    v20 = *(_QWORD *)a1;
    LODWORD(v21) = *(_DWORD *)(a1 + 16);
    do
    {
      v22 = (unint64_t)v18;
      if (v17 == (mlir::GenericProgramPoint *)(*((_QWORD *)v18 + 1) & 0xFFFFFFFFFFFFFFF8))
        v19 = (unint64_t)v18;
      if (!(_DWORD)v21)
        break;
      if ((v23 & 1) == 0
      {
        v30 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v30 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v30;
      }
      v24 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v22) ^ HIDWORD(v22));
      v25 = 0x9DDFEA08EB382D69 * (HIDWORD(v22) ^ (v24 >> 47) ^ v24);
      LODWORD(v25) = (-348639895 * ((v25 >> 47) ^ v25)) & (v21 - 1);
      v26 = (uint64_t *)(v20 + 16 * v25);
      v27 = *v26;
      if (v22 != *v26)
      {
        v28 = 1;
        while (v27 != -4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v21 - 1);
          v27 = *(_QWORD *)(v20 + 16 * v25);
          if (v22 == v27)
          {
            v26 = (uint64_t *)(v20 + 16 * v25);
            v20 = *(_QWORD *)a1;
            v21 = *(unsigned int *)(a1 + 16);
            if (v26 != (uint64_t *)(*(_QWORD *)a1 + 16 * v21))
              goto LABEL_16;
            goto LABEL_45;
          }
        }
        break;
      }
      v20 = *(_QWORD *)a1;
      v21 = *(unsigned int *)(a1 + 16);
      if (v26 == (uint64_t *)(*(_QWORD *)a1 + 16 * v21))
        break;
LABEL_16:
      v18 = (mlir::GenericProgramPoint *)v26[1];
    }
    while (v18);
LABEL_45:
    if (v19)
      v33 = v19;
    else
      v33 = v22;
    v18 = v17;
    v12 = a9;
LABEL_49:
    if (v18)
    {
      v42 = *(_QWORD *)(a1 + 1224);
      if (v42 && v18 != (mlir::GenericProgramPoint *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        Loc = a4;
        if (!v55)
        {
          Loc = mlir::Value::getLoc((mlir::Value *)&v58);
          v42 = *(_QWORD *)(a1 + 1224);
        }
        v60 = (mlir::detail::OpResultImpl *)v33;
        ParentBlock = (mlir::Block *)mlir::Value::getParentBlock((mlir::Value *)&v60);
        v46 = (uint64_t *)((char *)ParentBlock + 40);
        if (v60 && (*((_QWORD *)v60 + 1) & 7) != 7)
          v46 = (uint64_t *)(mlir::detail::OpResultImpl::getOwner(v60) + 8);
        v47 = buildUnresolvedMaterialization(1u, ParentBlock, *v46, Loc, (uint64_t)&v60, 1, (uint64_t)v17, v17, v42, (uint64_t *)(a1 + 264));
        v12 = a9;
        do
        {
          v48 = v33;
          v59 = v33;
          v60 = 0;
          if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v59, &v60))break;
          if (v60 == (mlir::detail::OpResultImpl *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16)))
            break;
          v33 = *((_QWORD *)v60 + 1);
        }
        while (v33);
        v59 = v48;
        v60 = 0;
        v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v59, &v60);
        v50 = v60;
        if ((v49 & 1) == 0)
        {
          v50 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v59, &v59, v60);
          *v50 = v59;
          v50[1] = 0;
        }
        v50[1] = v47;
        v33 = v47;
      }
    }
LABEL_66:
    v51 = *(unsigned int *)(v12 + 8);
    if (v51 >= *(unsigned int *)(v12 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v12, (void *)(a9 + 16), v51 + 1, 8);
      v51 = *(unsigned int *)(v12 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v51) = v33;
    ++*(_DWORD *)(v12 + 8);
    v13 = v63 + 1;
    ++v61;
    ++v63;
    if (v62 == a7 && v13 == a8)
      goto LABEL_70;
  }
  if (v55)
  {
    v52 = 0;
    v53 = v64;
    if (v64 == v66)
      return v52;
  }
  else
  {
    mlir::Value::getLoc((mlir::Value *)&v58);
    v52 = 0;
    v53 = v64;
    if (v64 == v66)
      return v52;
  }
LABEL_71:
  free(v53);
  return v52;
}

BOOL mlir::TypeConverter::convertType(uint64_t a1, void *a2, uint64_t a3)
{
  pthread_rwlock_t **v5;
  mlir::MLIRContext *Context;
  int isMultithreadingEnabled;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  int v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  _BOOL8 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  int v25;
  unsigned int v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 v34;
  char v35;
  mlir::MLIRContext *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  void *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t *v60;
  void *v61;
  uint64_t *v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  void *v66;
  void *v67;
  uint64_t *v68;
  _QWORD *v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  void *v79;
  _QWORD *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  void *v89;
  _QWORD *v90;
  int v91;
  BOOL v92;
  unsigned int v93;
  void *v94;
  void *v95;
  uint64_t v96;
  _QWORD v97[3];

  v97[2] = *MEMORY[0x1E0C80C00];
  v94 = a2;
  v5 = (pthread_rwlock_t **)(a1 + 520);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v94);
  isMultithreadingEnabled = mlir::MLIRContext::isMultithreadingEnabled(Context);
  if (isMultithreadingEnabled)
    llvm::sys::RWMutexImpl::lock_shared(v5);
  v8 = *(_QWORD *)(a1 + 472);
  v9 = *(unsigned int *)(a1 + 488);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = ((v94 >> 4) ^ (v94 >> 9)) & (v9 - 1);
    v11 = (void **)(v8 + 16 * v10);
    v12 = *v11;
    if (v94 == *v11)
      goto LABEL_10;
    v13 = 1;
    while (v12 != (void *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(void **)(v8 + 16 * v10);
      if (v94 == v12)
      {
        v11 = (void **)(v8 + 16 * v10);
        goto LABEL_10;
      }
    }
  }
  v11 = (void **)(v8 + 16 * v9);
LABEL_10:
  if (v11 != (void **)(v8 + 16 * v9))
  {
    v15 = v11[1];
    if (v15)
    {
      v16 = *(unsigned int *)(a3 + 8);
      if (v16 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16 + 1, 8);
        LODWORD(v16) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v15;
      ++*(_DWORD *)(a3 + 8);
      v17 = v11[1];
      v18 = 0;
      v19 = v17 != 0;
      if (!isMultithreadingEnabled)
        goto LABEL_32;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      if (!isMultithreadingEnabled)
        goto LABEL_32;
    }
LABEL_31:
    llvm::sys::RWMutexImpl::unlock_shared(v5);
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(a1 + 496);
  v21 = *(_DWORD *)(a1 + 512);
  if (v21)
  {
    v22 = ((v94 >> 4) ^ (v94 >> 9)) & (v21 - 1);
    v23 = v20 + 40 * v22;
    v24 = *(void **)v23;
    if (v94 == *(void **)v23)
      goto LABEL_25;
    v25 = 1;
    while (v24 != (void *)-4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v23 = v20 + 40 * v22;
      v24 = *(void **)v23;
      if (v94 == *(void **)v23)
        goto LABEL_25;
    }
  }
  v23 = v20 + 40 * v21;
LABEL_25:
  if (v23 == v20 + 40 * v21)
  {
    v18 = 1;
    v19 = 1;
    if (!isMultithreadingEnabled)
      goto LABEL_32;
    goto LABEL_31;
  }
  v27 = *(const void **)(v23 + 8);
  v28 = *(unsigned int *)(v23 + 16);
  v29 = *(unsigned int *)(a3 + 8);
  if (v29 + v28 > (unint64_t)*(unsigned int *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v29 + v28, 8);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  if ((_DWORD)v28)
  {
    memcpy((void *)(*(_QWORD *)a3 + 8 * v29), v27, 8 * v28);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  v18 = 0;
  *(_DWORD *)(a3 + 8) = v29 + v28;
  v19 = 1;
  if (isMultithreadingEnabled)
    goto LABEL_31;
LABEL_32:
  if (!v18)
    return v19;
  v30 = *(unsigned int *)(a3 + 8);
  v31 = *(_QWORD *)(a1 + 8) + 32 * *(unsigned int *)(a1 + 16);
  v32 = -32 * *(unsigned int *)(a1 + 16);
  do
  {
    if (!v32)
      return 0;
    v95 = v94;
    v33 = *(_QWORD *)(v31 - 8);
    if (!v33)
      std::__throw_bad_function_call[abi:nn180100]();
    v31 -= 32;
    v34 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v33 + 48))(v33, &v95, a3);
    v32 += 32;
  }
  while (v34 < 0x100u);
  v35 = v34;
  v36 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v94);
  v37 = mlir::MLIRContext::isMultithreadingEnabled(v36);
  if (v37)
    llvm::sys::RWMutexImpl::lock(v5);
  if (!v35)
  {
    v50 = *(_DWORD *)(a1 + 488);
    if (!v50)
      goto LABEL_107;
    v51 = *(_QWORD *)(a1 + 472);
    v52 = ((v94 >> 4) ^ (v94 >> 9)) & (v50 - 1);
    v53 = (_QWORD *)(v51 + 16 * v52);
    v54 = (void *)*v53;
    if (v94 == (void *)*v53)
    {
      v19 = 0;
      goto LABEL_91;
    }
    v70 = 0;
    v71 = 1;
    while (v54 != (void *)-4096)
    {
      v19 = 0;
      if (v70)
        v72 = 0;
      else
        v72 = v54 == (void *)-8192;
      if (v72)
        v70 = v53;
      v73 = v52 + v71++;
      v52 = v73 & (v50 - 1);
      v53 = (_QWORD *)(v51 + 16 * v52);
      v54 = (void *)*v53;
      if (v94 == (void *)*v53)
        goto LABEL_91;
    }
    v74 = v70 ? v70 : v53;
    v75 = *(_DWORD *)(a1 + 480);
    if (4 * v75 + 4 < 3 * v50)
    {
      if (v50 + ~v75 - *(_DWORD *)(a1 + 484) > v50 >> 3)
        goto LABEL_76;
    }
    else
    {
LABEL_107:
      v50 *= 2;
    }
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 472, v50);
    v76 = *(_QWORD *)(a1 + 472);
    v66 = v94;
    v77 = *(_DWORD *)(a1 + 488) - 1;
    v78 = ((v94 >> 4) ^ (v94 >> 9)) & v77;
    v74 = (_QWORD *)(v76 + 16 * v78);
    v79 = (void *)*v74;
    if (v94 == (void *)*v74)
      goto LABEL_77;
    v80 = 0;
    v81 = 1;
    while (v79 != (void *)-4096)
    {
      if (v80)
        v82 = 0;
      else
        v82 = v79 == (void *)-8192;
      if (v82)
        v80 = v74;
      v83 = v78 + v81++;
      v78 = v83 & v77;
      v74 = (_QWORD *)(v76 + 16 * (v83 & v77));
      v79 = (void *)*v74;
      if (v94 == (void *)*v74)
        goto LABEL_77;
    }
    if (v80)
      v74 = v80;
LABEL_76:
    v66 = (void *)*v74;
LABEL_77:
    ++*(_DWORD *)(a1 + 480);
    if (v66 != (void *)-4096)
      --*(_DWORD *)(a1 + 484);
    v19 = 0;
    *v74 = v94;
    v74[1] = 0;
    goto LABEL_91;
  }
  v38 = *(unsigned int *)(a3 + 8);
  v39 = v38 - v30;
  v40 = (_QWORD *)(*(_QWORD *)a3 + 8 * v30);
  if (v38 - v30 != 1)
  {
    v95 = v97;
    v96 = 0x200000000;
    if ((unint64_t)(8 * v39) < 0x11)
    {
      v55 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v97, v38 - v30, 8);
      v55 = v96;
    }
    if ((_DWORD)v38 != (_DWORD)v30)
    {
      memcpy((char *)v95 + 8 * v55, v40, 8 * v39);
      v55 = v96;
    }
    LODWORD(v96) = v55 + v39;
    v56 = *(_DWORD *)(a1 + 512);
    if (v56)
    {
      v57 = *(_QWORD *)(a1 + 496);
      v58 = v56 - 1;
      v59 = ((v94 >> 4) ^ (v94 >> 9)) & v58;
      v60 = (uint64_t *)(v57 + 40 * v59);
      v61 = (void *)*v60;
      if (v94 == (void *)*v60)
        goto LABEL_88;
      v62 = 0;
      v63 = 1;
      while (v61 != (void *)-4096)
      {
        if (v62)
          v64 = 0;
        else
          v64 = v61 == (void *)-8192;
        if (v64)
          v62 = v60;
        v65 = v59 + v63++;
        v59 = v65 & v58;
        v60 = (uint64_t *)(v57 + 40 * v59);
        v61 = (void *)*v60;
        if (v94 == (void *)*v60)
          goto LABEL_88;
      }
      if (v62)
        v68 = v62;
      else
        v68 = v60;
    }
    else
    {
      v68 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<mlir::Type,llvm::SmallVector<mlir::Type,2u>,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,llvm::SmallVector<mlir::Type,2u>>>,mlir::Type,llvm::SmallVector<mlir::Type,2u>,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,llvm::SmallVector<mlir::Type,2u>>>::InsertIntoBucket<mlir::Type const&,llvm::SmallVector<mlir::Type,2u>>(a1 + 496, v68, (uint64_t *)&v94, (uint64_t)&v95);
LABEL_88:
    if (v95 != v97)
      free(v95);
    goto LABEL_90;
  }
  v41 = *(_DWORD *)(a1 + 488);
  if (!v41)
    goto LABEL_122;
  v42 = *(_QWORD *)(a1 + 472);
  v43 = ((v94 >> 4) ^ (v94 >> 9)) & (v41 - 1);
  v44 = (_QWORD *)(v42 + 16 * v43);
  v45 = (void *)*v44;
  if (v94 != (void *)*v44)
  {
    v46 = 0;
    v47 = 1;
    v19 = 1;
    while (v45 != (void *)-4096)
    {
      if (v46)
        v48 = 0;
      else
        v48 = v45 == (void *)-8192;
      if (v48)
        v46 = v44;
      v49 = v43 + v47++;
      v43 = v49 & (v41 - 1);
      v44 = (_QWORD *)(v42 + 16 * v43);
      v45 = (void *)*v44;
      if (v94 == (void *)*v44)
        goto LABEL_91;
    }
    if (v46)
      v84 = v46;
    else
      v84 = v44;
    v85 = *(_DWORD *)(a1 + 480);
    if (4 * v85 + 4 < 3 * v41)
    {
      if (v41 + ~v85 - *(_DWORD *)(a1 + 484) > v41 >> 3)
        goto LABEL_82;
      goto LABEL_123;
    }
LABEL_122:
    v41 *= 2;
LABEL_123:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 472, v41);
    v86 = *(_QWORD *)(a1 + 472);
    v67 = v94;
    v87 = *(_DWORD *)(a1 + 488) - 1;
    v88 = ((v94 >> 4) ^ (v94 >> 9)) & v87;
    v84 = (_QWORD *)(v86 + 16 * v88);
    v89 = (void *)*v84;
    if (v94 == (void *)*v84)
      goto LABEL_83;
    v90 = 0;
    v91 = 1;
    while (v89 != (void *)-4096)
    {
      if (v90)
        v92 = 0;
      else
        v92 = v89 == (void *)-8192;
      if (v92)
        v90 = v84;
      v93 = v88 + v91++;
      v88 = v93 & v87;
      v84 = (_QWORD *)(v86 + 16 * (v93 & v87));
      v89 = (void *)*v84;
      if (v94 == (void *)*v84)
        goto LABEL_83;
    }
    if (v90)
      v84 = v90;
LABEL_82:
    v67 = (void *)*v84;
LABEL_83:
    ++*(_DWORD *)(a1 + 480);
    if (v67 != (void *)-4096)
      --*(_DWORD *)(a1 + 484);
    *v84 = v94;
    v84[1] = *v40;
  }
LABEL_90:
  v19 = 1;
LABEL_91:
  if (v37)
    llvm::sys::RWMutexImpl::unlock_shared(v5);
  return v19;
}

mlir::Block *mlir::detail::ConversionPatternRewriterImpl::convertBlockSignature(uint64_t a1, mlir::Block *this, uint64_t a3, uint64_t a4)
{
  mlir::Block *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::Block **v18;
  mlir::Block *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  mlir::Block *v26;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  char *v33;
  void *v34[2];
  void *v35[3];
  void *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v4 = (mlir::Block *)a3;
  v39 = *MEMORY[0x1E0C80C00];
  v7 = a1 + 72;
  v8 = a1 + 368;
  if (!a4)
  {
    v15 = *(_QWORD *)(a1 + 72);
    v16 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((this >> 4) ^ (this >> 9));
      v18 = (mlir::Block **)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == this)
        goto LABEL_14;
      v20 = 1;
      while (v19 != (mlir::Block *)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(mlir::Block **)(v15 + 16 * v17);
        if (v19 == this)
        {
          v18 = (mlir::Block **)(v15 + 16 * v17);
          goto LABEL_14;
        }
      }
    }
    v18 = (mlir::Block **)(v15 + 16 * v16);
LABEL_14:
    if (v18 == (mlir::Block **)(v15 + 16 * v16))
    {
      v22 = *(_DWORD *)(a1 + 128);
      if (v22)
      {
        v23 = *(_QWORD *)(a1 + 112);
        v24 = v22 - 1;
        v25 = v24 & ((this >> 4) ^ (this >> 9));
        v26 = *(mlir::Block **)(v23 + 8 * v25);
        if (v26 == this)
          return this;
        v31 = 1;
        while (v26 != (mlir::Block *)-4096)
        {
          v32 = v25 + v31++;
          v25 = v32 & v24;
          v26 = *(mlir::Block **)(v23 + 8 * v25);
          if (v26 == this)
            return this;
        }
      }
      if (mlir::Block::getParent(this))
      {
        if (!v4)
          return v4;
        mlir::TypeConverter::convertBlockSignature(v4, this, (uint64_t)v34);
        if (!v38)
          return 0;
        if (v38)
        {
          if (v36 != &v37)
            free(v36);
          if (v34[0] != v35)
            free(v34[0]);
        }
        goto LABEL_3;
      }
    }
    return this;
  }
LABEL_3:
  if (v4 && v4 != this)
  {
    LODWORD(v34[0]) = 5;
    v34[1] = v4;
    memset(v35, 0, sizeof(v35));
    v9 = *(unsigned int *)(a1 + 424);
    v10 = *(_QWORD *)(a1 + 416);
    v11 = v34;
    if (v9 >= *(_DWORD *)(a1 + 428))
    {
      v28 = a1 + 416;
      v29 = v9 + 1;
      v30 = v10 + 40 * v9 > (unint64_t)v34;
      if (v10 <= (unint64_t)v34 && v30)
      {
        v33 = (char *)v34 - v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v28, (void *)(a1 + 432), v29, 40);
        v10 = *(_QWORD *)(a1 + 416);
        v11 = (void **)&v33[v10];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v28, (void *)(a1 + 432), v29, 40);
        v10 = *(_QWORD *)(a1 + 416);
        v11 = v34;
      }
    }
    v12 = v10 + 40 * *(unsigned int *)(a1 + 424);
    v13 = *(_OWORD *)v11;
    v14 = *((_OWORD *)v11 + 1);
    *(_QWORD *)(v12 + 32) = v11[4];
    *(_OWORD *)v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
    ++*(_DWORD *)(a1 + 424);
  }
  return v4;
}

mlir::Block *`anonymous namespace'::ArgConverter::applySignatureConversion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  mlir::Block *v10;
  _QWORD *v12;
  uint64_t v14;
  mlir::MLIRContext *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t UnknownLoc;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  void *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  unint64_t v89;
  char *v90;
  int v91;
  unint64_t Parent;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  BOOL v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t *v105;
  mlir::Operation *v106;
  mlir::Region *v107;
  void *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int v116;
  mlir::Block *v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  mlir::Block **v121;
  mlir::Block *v122;
  mlir::Block **v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  mlir::Block *v127;
  uint64_t v128;
  char **v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void **v133;
  unint64_t v134;
  BOOL v135;
  uint64_t v136;
  _BYTE *v137;
  void *v138;
  void *v139;
  uint64_t v141;
  int v142;
  int v143;
  unsigned int v144;
  mlir::Block *v145;
  char *v146;
  char *v147;
  void *v148;
  void **v149;
  unint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  int v162;
  uint64_t v163;
  int v164;
  BOOL v165;
  unsigned int v166;
  void *v167;
  __int128 v168;
  _QWORD *v169;
  mlir::Block *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v177;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183[2];
  uint64_t v184;
  void *__src;
  uint64_t v186;
  _BYTE v187[24];
  uint64_t v188;
  unint64_t v189[2];
  void *v190;
  uint64_t v191;
  _BYTE v192[32];
  int64x2_t *v193;
  uint64_t v194;
  _QWORD v195[6];
  __int128 v196;
  _BYTE *v197;
  uint64_t v198;
  _BYTE v199[24];
  uint64_t v200;
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48);
  v8 = v7 >> 3;
  v9 = *(unsigned int *)(a4 + 152);
  if (!((v7 >> 3) | v9))
    return (mlir::Block *)a2;
  v12 = (_QWORD *)a4;
  v14 = *(_QWORD *)(a4 + 144);
  v16 = mlir::Block::splitBlock((char *)a2, *(uint64_t **)(a2 + 40));
  while (1)
  {
    v17 = *(uint64_t **)a2;
    if (!*(_QWORD *)a2)
      break;
    v18 = (uint64_t *)v17[1];
    if (v18)
    {
      *v18 = *v17;
      if (*v17)
        *(_QWORD *)(*v17 + 8) = v17[1];
    }
    v17[3] = (uint64_t)v16;
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v16);
    v17[1] = (uint64_t)v19;
    v20 = *v19;
    *v17 = *v19;
    if (v20)
      *(_QWORD *)(v20 + 8) = v17;
    *v19 = (uint64_t)v17;
  }
  v180 = a2;
  UnknownLoc = mlir::Builder::getUnknownLoc((mlir::UnknownLoc **)(*(_QWORD *)(a1 + 112) + 8), v15);
  v22 = UnknownLoc;
  v193 = (int64x2_t *)v195;
  v194 = 0x600000000;
  if (v9 < 7)
  {
    if ((_DWORD)v9)
    {
      v195[0] = UnknownLoc;
      if ((_DWORD)v9 != 1)
      {
        v195[1] = UnknownLoc;
        if ((_DWORD)v9 != 2)
        {
          v195[2] = UnknownLoc;
          if ((_DWORD)v9 != 3)
          {
            v195[3] = UnknownLoc;
            if ((_DWORD)v9 != 4)
            {
              v195[4] = UnknownLoc;
              if ((_DWORD)v9 != 5)
                v195[5] = UnknownLoc;
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, v195, v9, 8);
    v23 = (unint64_t *)v193 + (v9 & 0xFFFFFFFC);
    v24 = v9 & 3;
    v25 = vdupq_n_s64(v22);
    v26 = v193 + 1;
    v27 = v9 & 0xFFFFFFFC;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    if ((v9 & 0xFFFFFFFC) != v9)
    {
      do
      {
        *v23++ = v22;
        --v24;
      }
      while (v24);
    }
  }
  LODWORD(v194) = v9;
  v28 = (v7 >> 3);
  if ((_DWORD)v8)
  {
    v29 = 0;
    do
    {
      v30 = *v12 + 32 * v29;
      if (*(_BYTE *)(v30 + 24))
        v31 = *(_QWORD *)(v30 + 16) == 0;
      else
        v31 = 0;
      if (v31)
      {
        v32 = *(_QWORD *)(v30 + 8);
        if (v32)
        {
          v33 = 0;
          v34 = *(_QWORD *)v30;
          v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v180 + 48) + 8 * v29) + 32);
          v36 = v34;
          do
            v193->i64[v33++ + v36] = v35;
          while (v32 > v33);
        }
      }
      ++v29;
    }
    while (v29 != v28);
  }
  mlir::ValueRange::ValueRange(v189, v14, v9);
  v37 = mlir::Block::addArguments(v16, v189[0], v189[1], (uint64_t)v193, v194);
  v38 = v37;
  v40 = v39;
  v41 = v192;
  v190 = v192;
  v191 = 0x400000000;
  v42 = (uint64_t)v40 - v37;
  if ((unint64_t)v40 - v37 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v192, v42 >> 3, 8);
    v43 = v191;
    v41 = (char *)v190;
    v44 = v191;
    v45 = a5;
    if ((uint64_t *)v38 != v40)
      goto LABEL_38;
LABEL_41:
    v174 = v41;
    goto LABEL_48;
  }
  v43 = 0;
  v44 = 0;
  v45 = a5;
  if ((uint64_t *)v37 == v40)
    goto LABEL_41;
LABEL_38:
  v46 = &v41[8 * v43];
  if ((unint64_t)(v42 - 8) >= 0x38)
  {
    v48 = &v41[8 * v43];
    v47 = (uint64_t *)v38;
    if ((unint64_t)&v48[-v38] >= 0x20)
    {
      v49 = ((unint64_t)(v42 - 8) >> 3) + 1;
      v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
      v46 += v50;
      v47 = (uint64_t *)(v38 + v50);
      v51 = (__int128 *)(v38 + 16);
      v52 = v48 + 16;
      v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v54 = *v51;
        *(v52 - 1) = *(v51 - 1);
        *v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_47;
    }
  }
  else
  {
    v47 = (uint64_t *)v38;
  }
  do
  {
    v55 = *v47++;
    *(_QWORD *)v46 = v55;
    v46 += 8;
  }
  while (v47 != v40);
LABEL_47:
  v174 = (char *)v190;
LABEL_48:
  LODWORD(v191) = v44 + ((unint64_t)v42 >> 3);
  v184 = v180;
  __src = v187;
  v186 = 0x100000000;
  v188 = a3;
  if (!(_DWORD)v8)
    goto LABEL_60;
  if ((_DWORD)v8 == 1)
  {
    v56 = 0;
    v57 = v187;
    if (!v28)
      goto LABEL_59;
LABEL_53:
    v58 = &v57[24 * v56];
    v59 = -24 * v56 + 24 * v28 - 24;
    if (v59 < 0x18)
      goto LABEL_57;
    v60 = v59 / 0x18 + 1;
    v58 += 24 * (v60 & 0x1FFFFFFFFFFFFFFELL);
    v61 = &v57[24 * v56 + 24];
    v62 = v60 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v61 - 24) = 0;
      *v61 = 0;
      *(v61 - 8) = 0;
      v61[16] = 0;
      v61 += 48;
      v62 -= 2;
    }
    while (v62);
    if (v60 != (v60 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_57:
      v63 = &v57[24 * v28];
      do
      {
        *v58 = 0;
        v58[16] = 0;
        v58 += 24;
      }
      while (v58 != v63);
    }
    goto LABEL_59;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v187, v28, 24);
  v56 = v186;
  v57 = __src;
  if (v186 != v28)
    goto LABEL_53;
LABEL_59:
  LODWORD(v186) = v8;
LABEL_60:
  v170 = (mlir::Block *)v16;
  v173 = a1;
  v64 = *(_QWORD *)(a1 + 112);
  v65 = *(_OWORD *)(v64 + 24);
  v64 += 24;
  v168 = v65;
  v66 = *((_QWORD *)v16 + 5);
  *(_QWORD *)v64 = v16;
  *(_QWORD *)(v64 + 8) = v66;
  v169 = (_QWORD *)v64;
  if ((_DWORD)v8)
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v167 = (void *)(a6 + 16);
    v70 = 32 * v28;
    v172 = a6;
    v171 = v70;
    do
    {
      v72 = (uint64_t *)(*v12 + v69);
      if (*((_BYTE *)v72 + 24))
      {
        v73 = v12;
        v74 = v72[2];
        v75 = *(_QWORD *)(v180 + 48);
        v76 = *(_QWORD *)(v75 + v68);
        if (!v74)
        {
          v79 = *v72;
          v80 = (uint64_t *)&v174[8 * *v72];
          v179 = v72[1];
          v177 = *v72;
          if (v179 == 1)
          {
            if (a3)
            {
              v81 = *v80;
              v82 = (void *)(*(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF8);
              if ((void *)(*(_QWORD *)(*v80 + 8) & 0xFFFFFFFFFFFFFFF8) != v82)
              {
                v175 = (uint64_t)&v174[8 * v79];
                goto LABEL_75;
              }
              v45 = a5;
            }
            else
            {
              v81 = *v80;
            }
LABEL_88:
            v182 = v76;
            *(_QWORD *)&v196 = 0;
            v87 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v45, &v182, &v196);
            v88 = (_QWORD *)v196;
            if ((v87 & 1) == 0)
            {
              v88 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v45, (uint64_t)&v182, &v182, (_QWORD *)v196);
              *v88 = v182;
              v88[1] = 0;
            }
            v88[1] = v81;
            v89 = *(unsigned int *)(a6 + 8);
            if (v89 >= *(unsigned int *)(a6 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v167, v89 + 1, 8);
              v89 = *(unsigned int *)(a6 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a6 + 8 * v89) = v76;
            ++*(_DWORD *)(a6 + 8);
            v90 = (char *)__src + v67;
            v91 = *((unsigned __int8 *)__src + v67 + 16);
            *(_DWORD *)v90 = v177;
            *((_DWORD *)v90 + 1) = v179;
            *((_QWORD *)v90 + 1) = v81;
            v12 = v73;
            if (!v91)
              v90[16] = 1;
            goto LABEL_65;
          }
          v175 = (uint64_t)&v174[8 * v79];
          v82 = (void *)(*(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF8);
LABEL_75:
          *(_QWORD *)&v196 = &v197;
          *((_QWORD *)&v196 + 1) = 0x100000000;
          if (mlir::TypeConverter::convertType(a3, v82, (uint64_t)&v196) && DWORD2(v196) == 1)
          {
            v84 = *(_QWORD *)v196;
            if ((_BYTE **)v196 != &v197)
              goto LABEL_82;
          }
          else
          {
            v84 = 0;
            if ((_BYTE **)v196 == &v197)
              goto LABEL_83;
LABEL_82:
            free((void *)v196);
          }
LABEL_83:
          if (!v84)
            v84 = (uint64_t)v82;
          v85 = *(_QWORD *)(v173 + 112);
          v86 = *(_QWORD *)(v76 + 32);
          mlir::ValueRange::ValueRange(v183, v175, v179);
          v81 = buildUnresolvedMaterialization(0, *(mlir::Block **)(v85 + 24), *(_QWORD *)(v85 + 32), v86, v183[0], v183[1], v84, (mlir::GenericProgramPoint *)v82, a3, *(uint64_t **)(v173 + 120));
          a6 = v172;
          v45 = a5;
          v70 = v171;
          goto LABEL_88;
        }
        v182 = *(_QWORD *)(v75 + v68);
        *(_QWORD *)&v196 = 0;
        v77 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v45, &v182, &v196);
        v78 = (_QWORD *)v196;
        if ((v77 & 1) == 0)
        {
          v78 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v45, (uint64_t)&v182, &v182, (_QWORD *)v196);
          *v78 = v182;
          v78[1] = 0;
        }
        v78[1] = v74;
        v71 = *(unsigned int *)(a6 + 8);
        if (v71 >= *(unsigned int *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v167, v71 + 1, 8);
          v71 = *(unsigned int *)(a6 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v71) = v76;
        ++*(_DWORD *)(a6 + 8);
        v12 = v73;
      }
LABEL_65:
      v69 += 32;
      v68 += 8;
      v67 += 24;
    }
    while (v70 != v69);
  }
  v10 = v170;
  Parent = mlir::Block::getParent(v170);
  v181 = Parent;
  v93 = v173;
  v94 = *(_QWORD *)(v173 + 64);
  v95 = *(_DWORD *)(v173 + 80);
  if (!v95)
  {
    v104 = 0;
LABEL_106:
    v98 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>,mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>::InsertIntoBucket<mlir::Region * const&>(v173 + 64, v104, (uint64_t *)&v181);
    goto LABEL_107;
  }
  v96 = v95 - 1;
  v97 = ((Parent >> 4) ^ (Parent >> 9)) & v96;
  v98 = (uint64_t *)(v94 + 16 * v97);
  v99 = *v98;
  if (Parent != *v98)
  {
    v100 = 0;
    v101 = 1;
    while (v99 != -4096)
    {
      if (v100)
        v102 = 0;
      else
        v102 = v99 == -8192;
      if (v102)
        v100 = v98;
      v103 = v97 + v101++;
      v97 = v103 & v96;
      v98 = (uint64_t *)(v94 + 16 * v97);
      v99 = *v98;
      if (Parent == *v98)
        goto LABEL_107;
    }
    if (v100)
      v104 = v100;
    else
      v104 = v98;
    goto LABEL_106;
  }
LABEL_107:
  v105 = (uint64_t *)v98[1];
  if (!v105)
  {
    v106 = *(mlir::Operation **)(v181 + 16);
    v105 = (uint64_t *)operator new(0x18uLL);
    mlir::Region::Region(v105, v106);
    v107 = (mlir::Region *)v98[1];
    v98[1] = (uint64_t)v105;
    if (v107)
    {
      mlir::Region::~Region(v107);
      operator delete(v108);
      v105 = (uint64_t *)v98[1];
    }
  }
  v109 = (uint64_t *)(v184 + 8);
  v110 = *(uint64_t **)(v184 + 16);
  if (v105 != (uint64_t *)(v184 + 8) && v110 != v105)
  {
    llvm::ilist_traits<mlir::Block>::transferNodesFromList((uint64_t)v105, v181, v184 + 8, *(_QWORD *)(v184 + 16));
    if (v110 != v109)
    {
      v112 = *v110;
      v113 = *v109;
      *(_QWORD *)(v113 + 8) = v110;
      *v110 = v113;
      v114 = *v105;
      *(_QWORD *)(v112 + 8) = v105;
      *v109 = v114;
      *(_QWORD *)(v114 + 8) = v109;
      *v105 = v112;
    }
  }
  v115 = (char *)(v173 + 40);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v173 + 40), &v184, (uint64_t)&v196);
  *(_QWORD *)&v196 = v170;
  *((_QWORD *)&v196 + 1) = v184;
  v197 = v199;
  v198 = 0x100000000;
  v116 = v186;
  v117 = v170;
  if (!(_DWORD)v186)
    goto LABEL_126;
  if (__src == v187)
  {
    if (v186 < 2)
    {
      v118 = v186;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v197, v199, v186, 24);
      v118 = v186;
      if (!(_DWORD)v186)
        goto LABEL_124;
    }
    memcpy(v197, __src, 24 * v118);
LABEL_124:
    LODWORD(v198) = v116;
    v117 = (mlir::Block *)v196;
    goto LABEL_125;
  }
  v197 = __src;
  v198 = v186;
  __src = v187;
  HIDWORD(v186) = 0;
  v117 = v170;
LABEL_125:
  LODWORD(v186) = 0;
LABEL_126:
  v200 = v188;
  v119 = *(_DWORD *)(v173 + 16);
  if (!v119)
    goto LABEL_176;
  v120 = (v119 - 1) & ((v117 >> 4) ^ (v117 >> 9));
  v121 = (mlir::Block **)(*(_QWORD *)v173 + 16 * v120);
  v122 = *v121;
  if (v117 == *v121)
    goto LABEL_157;
  v123 = 0;
  v124 = 1;
  while (v122 != (mlir::Block *)-4096)
  {
    if (v123)
      v125 = 0;
    else
      v125 = v122 == (mlir::Block *)-8192;
    if (v125)
      v123 = v121;
    v126 = v120 + v124++;
    v120 = v126 & (v119 - 1);
    v121 = (mlir::Block **)(*(_QWORD *)v173 + 16 * v120);
    v122 = *v121;
    if (v117 == *v121)
      goto LABEL_157;
  }
  v141 = (uint64_t)(v123 ? v123 : v121);
  v142 = *(_DWORD *)(v173 + 8);
  if (4 * v142 + 4 < 3 * v119)
  {
    if (v119 + ~v142 - *(_DWORD *)(v173 + 12) > v119 >> 3)
    {
LABEL_139:
      v127 = *(mlir::Block **)v141;
      goto LABEL_140;
    }
  }
  else
  {
LABEL_176:
    v119 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v173, v119);
  v143 = *(_DWORD *)(v173 + 16) - 1;
  v144 = v143 & ((v117 >> 4) ^ (v117 >> 9));
  v141 = *(_QWORD *)v173 + 16 * v144;
  v145 = *(mlir::Block **)v141;
  if (v117 != *(mlir::Block **)v141)
  {
    v163 = 0;
    v164 = 1;
    while (v145 != (mlir::Block *)-4096)
    {
      if (v163)
        v165 = 0;
      else
        v165 = v145 == (mlir::Block *)-8192;
      if (v165)
        v163 = v141;
      v166 = v144 + v164++;
      v144 = v166 & v143;
      v141 = *(_QWORD *)v173 + 16 * (v166 & v143);
      v145 = *(mlir::Block **)v141;
      if (v117 == *(mlir::Block **)v141)
      {
        v127 = v117;
        v93 = v173;
        goto LABEL_140;
      }
    }
    if (v163)
      v141 = v163;
    v93 = v173;
    goto LABEL_139;
  }
  v127 = v117;
LABEL_140:
  ++*(_DWORD *)(v93 + 8);
  if (v127 != (mlir::Block *)-4096)
    --*(_DWORD *)(v93 + 12);
  *(_QWORD *)v141 = v117;
  *(_DWORD *)(v141 + 8) = 0;
  v128 = v93;
  v129 = (char **)(v93 + 24);
  v130 = *(unsigned int *)(v128 + 32);
  *(_DWORD *)(v141 + 8) = v130;
  if (v130 < *(_DWORD *)(v128 + 36))
  {
    v131 = (uint64_t)&(*v129)[64 * v130];
    *(_OWORD *)v131 = v196;
    v132 = (void *)(v131 + 32);
    *(_QWORD *)(v131 + 16) = v131 + 32;
    v133 = (void **)(v131 + 16);
    *(_QWORD *)(v131 + 24) = 0x100000000;
    v134 = v198;
    v135 = (_BYTE **)(v131 + 16) == &v197 || (_DWORD)v198 == 0;
    v10 = v170;
    if (v135)
      goto LABEL_156;
    if (v197 != v199)
    {
      *v133 = v197;
      *(_DWORD *)(v131 + 24) = v134;
      *(_DWORD *)(v131 + 28) = HIDWORD(v198);
      v197 = v199;
      HIDWORD(v198) = 0;
LABEL_155:
      LODWORD(v198) = 0;
LABEL_156:
      *(_QWORD *)(v131 + 56) = v200;
      ++*(_DWORD *)(v173 + 32);
LABEL_157:
      v138 = v197;
      if (v197 == v199)
        goto LABEL_159;
      goto LABEL_158;
    }
    if (v198 < 2)
    {
      v137 = v199;
      v136 = v198;
    }
    else
    {
      *(_DWORD *)(v131 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v131 + 16, (void *)(v131 + 32), v134, 24);
      v136 = v198;
      if (!(_DWORD)v198)
      {
LABEL_154:
        *(_DWORD *)(v131 + 24) = v134;
        goto LABEL_155;
      }
      v137 = v197;
      v132 = *v133;
    }
    memcpy(v132, v137, 24 * v136);
    goto LABEL_154;
  }
  v182 = 0;
  v146 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v129, v115, 0, 64, &v182);
  v147 = &v146[64 * (unint64_t)*(unsigned int *)(v173 + 32)];
  *(_OWORD *)v147 = v196;
  v148 = v147 + 32;
  *((_QWORD *)v147 + 2) = v147 + 32;
  v149 = (void **)(v147 + 16);
  *((_QWORD *)v147 + 3) = 0x100000000;
  if (v147 + 16 != (char *)&v197)
  {
    v150 = v198;
    if ((_DWORD)v198)
    {
      if (v197 != v199)
      {
        *v149 = v197;
        *((_DWORD *)v147 + 6) = v150;
        *((_DWORD *)v147 + 7) = HIDWORD(v198);
        v197 = v199;
        HIDWORD(v198) = 0;
LABEL_189:
        LODWORD(v198) = 0;
        goto LABEL_190;
      }
      if (v198 < 2)
      {
        v152 = v199;
        v151 = v198;
      }
      else
      {
        *((_DWORD *)v147 + 6) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v147 + 16), v147 + 32, v150, 24);
        v151 = v198;
        if (!(_DWORD)v198)
        {
LABEL_188:
          *((_DWORD *)v147 + 6) = v150;
          goto LABEL_189;
        }
        v152 = v197;
        v148 = *v149;
      }
      memcpy(v148, v152, 24 * v151);
      goto LABEL_188;
    }
  }
LABEL_190:
  *((_QWORD *)v147 + 7) = v200;
  v153 = *(char **)(v173 + 24);
  v154 = *(unsigned int *)(v173 + 32);
  if ((_DWORD)v154)
  {
    v155 = &v153[64 * v154];
    v156 = v146 + 16;
    v157 = (uint64_t)(v153 + 16);
    do
    {
      v158 = v157 - 16;
      *((_OWORD *)v156 - 1) = *(_OWORD *)(v157 - 16);
      *v156 = v156 + 2;
      v156[1] = 0x100000000;
      if (*(_DWORD *)(v157 + 8))
      v156[5] = *(_QWORD *)(v157 + 40);
      v156 += 8;
      v157 += 64;
    }
    while ((char *)(v158 + 64) != v155);
    v153 = *(char **)(v173 + 24);
    v159 = *(unsigned int *)(v173 + 32);
    if ((_DWORD)v159)
    {
      v160 = v159 << 6;
      do
      {
        v161 = *(char **)&v153[v160 - 48];
        if (&v153[v160 - 32] != v161)
          free(v161);
        v160 -= 64;
      }
      while (v160);
      v153 = *v129;
    }
  }
  v162 = v182;
  if (v153 != v115)
    free(v153);
  *(_QWORD *)(v173 + 24) = v146;
  ++*(_DWORD *)(v173 + 32);
  *(_DWORD *)(v173 + 36) = v162;
  v10 = v170;
  v138 = v197;
  if (v197 != v199)
LABEL_158:
    free(v138);
LABEL_159:
  if (!(_QWORD)v168)
  {
    *v169 = 0;
    v169[1] = 0;
    v139 = __src;
    if (__src == v187)
      goto LABEL_162;
    goto LABEL_161;
  }
  *(_OWORD *)v169 = v168;
  v139 = __src;
  if (__src != v187)
LABEL_161:
    free(v139);
LABEL_162:
  if (v190 != v192)
    free(v190);
  if (v193 != (int64x2_t *)v195)
    free(v193);
  return v10;
}

mlir::Block *mlir::detail::ConversionPatternRewriterImpl::convertRegionTypes(uint64_t a1, mlir::Region *a2, const mlir::TypeConverter *a3, uint64_t a4)
{
  _anonymous_namespace_::ArgConverter *v8;
  mlir::Region *v9;
  mlir::Region *v10;
  mlir::Block *v11;
  char v12;
  uint64_t v13;
  mlir::Block *v14;

  v8 = (_anonymous_namespace_::ArgConverter *)(a1 + 72);
  if (*(mlir::Region **)a2 == a2)
    return 0;
  if (*(mlir::Region **)a2 != a2)
  {
    v9 = *(mlir::Region **)(*((_QWORD *)a2 + 1) + 8);
    while (v9 != a2)
    {
      v10 = (mlir::Region *)*((_QWORD *)v9 + 1);
      if (v9)
        v11 = (mlir::Region *)((char *)v9 - 8);
      else
        v11 = 0;
      mlir::detail::ConversionPatternRewriterImpl::convertBlockSignature(a1, v11, (uint64_t)a3, 0);
      v9 = v10;
      if (!v12)
        return 0;
    }
  }
  v13 = *((_QWORD *)a2 + 1);
  if (v13)
    v14 = (mlir::Block *)(v13 - 8);
  else
    v14 = 0;
  return mlir::detail::ConversionPatternRewriterImpl::convertBlockSignature(a1, v14, (uint64_t)a3, a4);
}

_QWORD *`anonymous namespace'::ArgConverter::setConverter(_anonymous_namespace_::ArgConverter *this, mlir::Region *a2, const mlir::TypeConverter *a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  mlir::Region **v12;
  mlir::Region *v13;
  mlir::Region *v14;
  mlir::Region **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  mlir::Region *v23;
  mlir::Region **v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v8 = *((_QWORD *)this + 11);
  result = (_QWORD *)((char *)this + 88);
  v7 = v8;
  v9 = *((_DWORD *)result + 4);
  if (!v9)
    goto LABEL_21;
  v10 = v9 - 1;
  v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (mlir::Region **)(v7 + 16 * v11);
  v13 = *v12;
  if (*v12 == a2)
  {
LABEL_3:
    v12[1] = a3;
    return result;
  }
  v15 = 0;
  v16 = 1;
  while (v13 != (mlir::Region *)-4096)
  {
    if (v15)
      v17 = 0;
    else
      v17 = v13 == (mlir::Region *)-8192;
    if (v17)
      v15 = v12;
    v18 = v11 + v16++;
    v11 = v18 & v10;
    v12 = (mlir::Region **)(v7 + 16 * (v18 & v10));
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_3;
  }
  if (v15)
    v12 = v15;
  v19 = *((_DWORD *)this + 24);
  if (4 * v19 + 4 < 3 * v9)
  {
    if (v9 + ~v19 - *((_DWORD *)this + 25) > v9 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v9 *= 2;
  }
  result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v9);
  v20 = *((_QWORD *)this + 11);
  v21 = *((_DWORD *)this + 26) - 1;
  v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (mlir::Region **)(v20 + 16 * v22);
  v23 = *v12;
  if (*v12 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 24);
    if (a2 == (mlir::Region *)-4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != (mlir::Region *)-4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == (mlir::Region *)-8192;
    if (v26)
      v24 = v12;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v12 = (mlir::Region **)(v20 + 16 * (v27 & v21));
    v23 = *v12;
    if (*v12 == a2)
      goto LABEL_23;
  }
  if (v24)
    v12 = v24;
LABEL_6:
  v14 = *v12;
  ++*((_DWORD *)this + 24);
  if (v14 != (mlir::Region *)-4096)
LABEL_7:
    --*((_DWORD *)this + 25);
LABEL_8:
  *v12 = a2;
  v12[1] = 0;
  v12[1] = a3;
  return result;
}

void mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int **v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int **v35;
  unsigned int **v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int **v42;
  unsigned int **v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = a2[9];
  v49 = a3;
  v50 = 0;
  if ((_DWORD)v6)
    v7 = (uint64_t)(a2 - 4);
  else
    v7 = 0;
  v51 = v7;
  v52 = 0;
  if (a4)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      if (v51 == v7 && v11 == v6)
        break;
      v15 = mlir::ValueRange::dereference_iterator(&v49, v10);
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v51, v52);
      if (v15)
      {
        v17 = NextResultAtOffset;
        v47 = NextResultAtOffset;
        v48 = 0;
        v18 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)&v47, &v48);
        v19 = v48;
        if ((v18 & 1) == 0)
        {
          v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v47, (unint64_t *)&v47, v48);
          *v19 = v47;
          v19[1] = 0;
        }
        v19[1] = v15;
        v12 |= (*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8);
      }
      else
      {
        v12 = 1;
      }
      v10 = v50 + 1;
      v11 = v52 + 1;
      ++v50;
      ++v52;
    }
    while (v49 != a3 || v10 != a4);
    if ((v12 & 1) != 0)
    {
      v20 = *(_DWORD *)(a1 + 360);
      v21 = *(unsigned int *)(a1 + 1200);
      if (v21 >= *(_DWORD *)(a1 + 1204))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1192, (void *)(a1 + 1208), v21 + 1, 4);
        LODWORD(v21) = *(_DWORD *)(a1 + 1200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 1192) + 4 * v21) = v20;
      ++*(_DWORD *)(a1 + 1200);
    }
  }
  v22 = *(unsigned int **)(a1 + 1224);
  v23 = *(_DWORD *)(a1 + 344);
  if (!v23)
    goto LABEL_48;
  v24 = *(_QWORD *)(a1 + 328);
  v25 = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v26 = (unsigned int **)(v24 + 16 * v25);
  v27 = *v26;
  if (*v26 == a2)
    goto LABEL_41;
  v28 = 0;
  v29 = 1;
  while (v27 != (unsigned int *)-4096)
  {
    if (v28)
      v30 = 0;
    else
      v30 = v27 == (unsigned int *)-8192;
    if (v30)
      v28 = v26;
    v31 = v25 + v29++;
    v25 = v31 & (v23 - 1);
    v26 = (unsigned int **)(v24 + 16 * v25);
    v27 = *v26;
    if (*v26 == a2)
      goto LABEL_41;
  }
  v36 = v28 ? v28 : v26;
  v37 = *(_DWORD *)(a1 + 336);
  if (4 * v37 + 4 < 3 * v23)
  {
    if (v23 + ~v37 - *(_DWORD *)(a1 + 340) > v23 >> 3)
      goto LABEL_36;
  }
  else
  {
LABEL_48:
    v23 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1 + 328, v23);
  v38 = *(_QWORD *)(a1 + 328);
  v39 = *(_DWORD *)(a1 + 344) - 1;
  v40 = v39 & ((a2 >> 4) ^ (a2 >> 9));
  v36 = (unsigned int **)(v38 + 16 * v40);
  v41 = *v36;
  if (*v36 == a2)
  {
LABEL_50:
    ++*(_DWORD *)(a1 + 336);
    if (a2 == (unsigned int *)-4096)
      goto LABEL_38;
    goto LABEL_37;
  }
  v43 = 0;
  v44 = 1;
  while (v41 != (unsigned int *)-4096)
  {
    if (v43)
      v45 = 0;
    else
      v45 = v41 == (unsigned int *)-8192;
    if (v45)
      v43 = v36;
    v46 = v40 + v44++;
    v40 = v46 & v39;
    v36 = (unsigned int **)(v38 + 16 * (v46 & v39));
    v41 = *v36;
    if (*v36 == a2)
      goto LABEL_50;
  }
  if (v43)
    v36 = v43;
LABEL_36:
  v32 = *v36;
  ++*(_DWORD *)(a1 + 336);
  if (v32 != (unsigned int *)-4096)
LABEL_37:
    --*(_DWORD *)(a1 + 340);
LABEL_38:
  *v36 = a2;
  *((_DWORD *)v36 + 2) = 0;
  v33 = (_QWORD *)(a1 + 352);
  v34 = *(unsigned int *)(a1 + 360);
  *((_DWORD *)v36 + 2) = v34;
  if (v34 >= *(_DWORD *)(a1 + 364))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v33, (void *)(a1 + 368), v34 + 1, 16);
    v42 = (unsigned int **)(*(_QWORD *)(a1 + 352) + 16 * *(unsigned int *)(a1 + 360));
    *v42 = a2;
    v42[1] = v22;
    LODWORD(v34) = *(_DWORD *)(a1 + 360);
  }
  else
  {
    v35 = (unsigned int **)(*v33 + 16 * v34);
    *v35 = a2;
    v35[1] = v22;
  }
  *(_DWORD *)(a1 + 360) = v34 + 1;
LABEL_41:
  if ((a2[11] & 0x7FFFFF) != 0)
  {
    v49 = a1;
    mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::markNestedOpsIgnored(mlir::Operation *)::$_0>, (uint64_t)&v49, 1);
  }
}

__n128 mlir::detail::ConversionPatternRewriterImpl::notifyBlockIsBeingErased(mlir::detail::ConversionPatternRewriterImpl *this, mlir::Block *a2)
{
  unint64_t Parent;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  mlir::Block *v20;
  unint64_t v21;
  uint64_t v22;

  Parent = mlir::Block::getParent(a2);
  v5 = *(_QWORD *)(mlir::Block::getParent(a2) + 8);
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
    v7 = v5 == (_QWORD)a2 + 8;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = v6 - 8;
  v19 = 1;
  v20 = a2;
  v21 = Parent;
  v22 = v8;
  v9 = *((unsigned int *)this + 106);
  v10 = *((_QWORD *)this + 52);
  v11 = &v19;
  if (v9 >= *((_DWORD *)this + 107))
  {
    v15 = (char *)this + 416;
    v16 = v9 + 1;
    v17 = v10 + 40 * v9 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v15, (char *)this + 432, v16, 40);
      v10 = *((_QWORD *)this + 52);
      v11 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v15, (char *)this + 432, v16, 40);
      v10 = *((_QWORD *)this + 52);
      v11 = &v19;
    }
  }
  v12 = v10 + 40 * *((unsigned int *)this + 106);
  result = *(__n128 *)v11;
  v14 = *((_OWORD *)v11 + 1);
  *(_QWORD *)(v12 + 32) = *((_QWORD *)v11 + 4);
  *(__n128 *)v12 = result;
  *(_OWORD *)(v12 + 16) = v14;
  ++*((_DWORD *)this + 106);
  return result;
}

__n128 mlir::detail::ConversionPatternRewriterImpl::notifyBlockBeingInlined(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::GenericProgramPoint *v5;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  char *v19;
  _QWORD v20[5];

  v20[1] = a2;
  v5 = (mlir::GenericProgramPoint *)(a3 + 32);
  if (*(_QWORD *)(a3 + 32) == a3 + 32)
  {
    v7 = 0;
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(a3 + 40));
    v7 = v6;
    v8 = *(mlir::GenericProgramPoint **)(a3 + 32);
    if (v8 != v5)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v8);
      goto LABEL_6;
    }
  }
  v9 = 0;
LABEL_6:
  v20[0] = 2;
  v20[2] = a3;
  v20[3] = v7;
  v20[4] = v9;
  v10 = *(unsigned int *)(a1 + 424);
  v11 = *(_QWORD *)(a1 + 416);
  v12 = (char *)v20;
  if (v10 >= *(_DWORD *)(a1 + 428))
  {
    v16 = a1 + 416;
    v17 = v10 + 1;
    v18 = v11 + 40 * v10 > (unint64_t)v20;
    if (v11 <= (unint64_t)v20 && v18)
    {
      v19 = (char *)v20 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(a1 + 432), v17, 40);
      v11 = *(_QWORD *)(a1 + 416);
      v12 = &v19[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(a1 + 432), v17, 40);
      v11 = *(_QWORD *)(a1 + 416);
      v12 = (char *)v20;
    }
  }
  v13 = v11 + 40 * *(unsigned int *)(a1 + 424);
  result = *(__n128 *)v12;
  v15 = *((_OWORD *)v12 + 1);
  *(_QWORD *)(v13 + 32) = *((_QWORD *)v12 + 4);
  *(__n128 *)v13 = result;
  *(_OWORD *)(v13 + 16) = v15;
  ++*(_DWORD *)(a1 + 424);
  return result;
}

__n128 mlir::detail::ConversionPatternRewriterImpl::notifyRegionIsBeingInlinedBefore(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  unsigned int v11;
  _QWORD *v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  __n128 result;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  char *v29;
  int v30;
  _QWORD *v31;
  _QWORD **v32;
  _QWORD *v33;

  v2 = *a2;
  if (*a2 != a2)
  {
    v5 = v2 == 0;
    v8 = (_QWORD *)*v2;
    v6 = v2 - 1;
    v7 = v8;
    if (v5)
      v9 = 0;
    else
      v9 = v6;
    if (v7 != a2)
    {
      v10 = (unint64_t *)(a1 + 416);
      v11 = *(_DWORD *)(a1 + 424);
      while (1)
      {
        v12 = v9;
        if (v7)
          v9 = v7 - 1;
        else
          v9 = 0;
        v30 = 3;
        v31 = v12;
        v32 = a2;
        v33 = v9;
        v13 = *(_QWORD *)(a1 + 416);
        if (v11 >= *(_DWORD *)(a1 + 428))
        {
          v18 = v11 + 1;
          v19 = v13 + 40 * v11 > (unint64_t)&v30;
          if (v13 <= (unint64_t)&v30 && v19)
          {
            v20 = (char *)&v30 - v13;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 416, (void *)(a1 + 432), v18, 40);
            v13 = *v10;
            v14 = (int *)&v20[*v10];
            goto LABEL_12;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 416, (void *)(a1 + 432), v18, 40);
          v13 = *v10;
        }
        v14 = &v30;
LABEL_12:
        v15 = v13 + 40 * *(unsigned int *)(a1 + 424);
        v16 = *(_OWORD *)v14;
        v17 = *((_OWORD *)v14 + 1);
        *(_QWORD *)(v15 + 32) = *((_QWORD *)v14 + 4);
        *(_OWORD *)v15 = v16;
        *(_OWORD *)(v15 + 16) = v17;
        v11 = *(_DWORD *)(a1 + 424) + 1;
        *(_DWORD *)(a1 + 424) = v11;
        v7 = (_QWORD *)*v7;
        if (v7 == a2)
          goto LABEL_19;
      }
    }
    v11 = *(_DWORD *)(a1 + 424);
LABEL_19:
    v30 = 3;
    v31 = v9;
    v32 = a2;
    v33 = 0;
    v21 = *(_QWORD *)(a1 + 416);
    v22 = &v30;
    if (v11 >= *(_DWORD *)(a1 + 428))
    {
      v26 = a1 + 416;
      v27 = v11 + 1;
      v28 = v21 + 40 * v11 > (unint64_t)&v30;
      if (v21 <= (unint64_t)&v30 && v28)
      {
        v29 = (char *)&v30 - v21;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v26, (void *)(a1 + 432), v27, 40);
        v21 = *(_QWORD *)(a1 + 416);
        v22 = (int *)&v29[v21];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v26, (void *)(a1 + 432), v27, 40);
        v21 = *(_QWORD *)(a1 + 416);
        v22 = &v30;
      }
    }
    v23 = v21 + 40 * *(unsigned int *)(a1 + 424);
    result = *(__n128 *)v22;
    v25 = *((_OWORD *)v22 + 1);
    *(_QWORD *)(v23 + 32) = *((_QWORD *)v22 + 4);
    *(__n128 *)v23 = result;
    *(_OWORD *)(v23 + 16) = v25;
    ++*(_DWORD *)(a1 + 424);
  }
  return result;
}

void mlir::ConversionPatternRewriter::~ConversionPatternRewriter(mlir::ConversionPatternRewriter *this)
{
  mlir::detail::ConversionPatternRewriterImpl *v2;

  v2 = (mlir::detail::ConversionPatternRewriterImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
}

{
  mlir::detail::ConversionPatternRewriterImpl *v2;
  void *v3;

  v2 = (mlir::detail::ConversionPatternRewriterImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v3);
}

void `non-virtual thunk to'mlir::ConversionPatternRewriter::~ConversionPatternRewriter(mlir::ConversionPatternRewriter *this)
{
  mlir::detail::ConversionPatternRewriterImpl *v2;

  v2 = (mlir::detail::ConversionPatternRewriterImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v2);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::ConversionPatternRewriter *)((char *)this - 40));
}

{
  mlir::detail::ConversionPatternRewriterImpl *v2;
  void *v3;

  v2 = (mlir::detail::ConversionPatternRewriterImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v2);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::ConversionPatternRewriter *)((char *)this - 40));
  operator delete(v3);
}

void mlir::ConversionPatternRewriter::replaceOp(mlir::ConversionPatternRewriter *this, mlir::Operation *a2, mlir::Operation *a3)
{
  char *v5;
  unint64_t v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a3 + 9))
    v5 = (char *)a3 - 16;
  else
    v5 = 0;
  mlir::ValueRange::ValueRange(v6, (uint64_t)v5, *((unsigned int *)a3 + 9));
  mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(*((_QWORD *)this + 7), (unsigned int *)a2, v6[0], v6[1]);
}

void mlir::ConversionPatternRewriter::replaceOp(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(*(_QWORD *)(a1 + 56), a2, a3, a4);
}

void mlir::ConversionPatternRewriter::eraseOp(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7[2];
  void *v8;
  int v9;
  int v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)a2 + 9);
  v8 = v11;
  v10 = 1;
  if (v4 < 2)
  {
    if ((_DWORD)v4 == 1)
      v11[0] = 0;
    v5 = v11;
  }
  else
  {
    v9 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8, v11, v4, 8);
    bzero(v8, 8 * v4);
    v5 = v8;
  }
  v9 = v4;
  v6 = *((_QWORD *)this + 7);
  mlir::ValueRange::ValueRange(v7, (uint64_t)v5, v4);
  mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(v6, (unsigned int *)a2, v7[0], v7[1]);
  if (v8 != v11)
    free(v8);
}

void mlir::ConversionPatternRewriter::eraseBlock(mlir::detail::ConversionPatternRewriterImpl **this, mlir::Block *a2)
{
  mlir::GenericProgramPoint *i;
  mlir::Operation *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t Parent;
  uint64_t v10;
  _QWORD *v11;

  mlir::detail::ConversionPatternRewriterImpl::notifyBlockIsBeingErased(this[7], a2);
  for (i = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 5);
        i != (mlir::Block *)((char *)a2 + 32);
        i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(i);
    mlir::ConversionPatternRewriter::eraseOp((mlir::ConversionPatternRewriter *)this, v5);
  }
  v6 = (char *)a2 + 8;
  if (!a2)
    v6 = 0;
  v7 = v6 - 8;
  if (a2)
    v8 = (uint64_t)v7;
  else
    v8 = 0;
  Parent = mlir::Block::getParent(a2);
  llvm::ilist_traits<mlir::Block>::removeNodeFromList(Parent, v8);
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD **)(v8 + 16);
  *v11 = v10;
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
}

uint64_t mlir::ConversionPatternRewriter::replaceUsesOfBlockArgument(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(unsigned int *)(v6 + 376);
  if (v7 >= *(_DWORD *)(v6 + 380))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 368, (void *)(v6 + 384), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 376);
  }
  *(_QWORD *)(*(_QWORD *)(v6 + 368) + 8 * v7) = a2;
  ++*(_DWORD *)(v6 + 376);
  v8 = *(_QWORD *)(a1 + 56);
  do
  {
    v9 = a2;
    v12 = a2;
    v13 = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v8, &v12, &v13))break;
    if (v13 == (_QWORD *)(*(_QWORD *)v8 + 16 * *(unsigned int *)(v8 + 16)))
      break;
    a2 = v13[1];
  }
  while (a2);
  v12 = v9;
  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v8, &v12, &v13);
  v11 = v13;
  if ((result & 1) == 0)
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(v8, (uint64_t)&v12, &v12, v13);
    v11 = (_QWORD *)result;
    *(_QWORD *)result = v12;
    *(_QWORD *)(result + 8) = 0;
  }
  v11[1] = a3;
  return result;
}

__n128 mlir::ConversionPatternRewriter::notifyBlockCreated(mlir::ConversionPatternRewriter *this, mlir::Block *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char *v12;
  int v13;
  mlir::Block *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 7);
  v13 = 0;
  v14 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v3 = *(unsigned int *)(v2 + 424);
  v4 = *(_QWORD *)(v2 + 416);
  v5 = (char *)&v13;
  if (v3 >= *(_DWORD *)(v2 + 428))
  {
    v9 = v2 + 416;
    v10 = v3 + 1;
    v11 = v4 + 40 * v3 > (unint64_t)&v13;
    if (v4 <= (unint64_t)&v13 && v11)
    {
      v12 = (char *)&v13 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v2 + 432), v10, 40);
      v4 = *(_QWORD *)(v2 + 416);
      v5 = &v12[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v2 + 432), v10, 40);
      v4 = *(_QWORD *)(v2 + 416);
      v5 = (char *)&v13;
    }
  }
  v6 = v4 + 40 * *(unsigned int *)(v2 + 424);
  result = *(__n128 *)v5;
  v8 = *((_OWORD *)v5 + 1);
  *(_QWORD *)(v6 + 32) = *((_QWORD *)v5 + 4);
  *(__n128 *)v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  ++*(_DWORD *)(v2 + 424);
  return result;
}

__n128 `non-virtual thunk to'mlir::ConversionPatternRewriter::notifyBlockCreated(mlir::ConversionPatternRewriter *this, mlir::Block *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char *v12;
  int v13;
  mlir::Block *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 2);
  v13 = 0;
  v14 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v3 = *(unsigned int *)(v2 + 424);
  v4 = *(_QWORD *)(v2 + 416);
  v5 = (char *)&v13;
  if (v3 >= *(_DWORD *)(v2 + 428))
  {
    v9 = v2 + 416;
    v10 = v3 + 1;
    v11 = v4 + 40 * v3 > (unint64_t)&v13;
    if (v4 <= (unint64_t)&v13 && v11)
    {
      v12 = (char *)&v13 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v2 + 432), v10, 40);
      v4 = *(_QWORD *)(v2 + 416);
      v5 = &v12[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v2 + 432), v10, 40);
      v4 = *(_QWORD *)(v2 + 416);
      v5 = (char *)&v13;
    }
  }
  v6 = v4 + 40 * *(unsigned int *)(v2 + 424);
  result = *(__n128 *)v5;
  v8 = *((_OWORD *)v5 + 1);
  *(_QWORD *)(v6 + 32) = *((_QWORD *)v5 + 4);
  *(__n128 *)v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  ++*(_DWORD *)(v2 + 424);
  return result;
}

char *mlir::ConversionPatternRewriter::splitBlock(uint64_t a1, char *a2, uint64_t *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  char *v17;
  _QWORD v18[5];

  v5 = mlir::RewriterBase::splitBlock(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 56);
  v18[0] = 4;
  v18[1] = v5;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = a2;
  v7 = *(unsigned int *)(v6 + 424);
  v8 = *(_QWORD *)(v6 + 416);
  v9 = (char *)v18;
  if (v7 >= *(_DWORD *)(v6 + 428))
  {
    v14 = v6 + 416;
    v15 = v7 + 1;
    v16 = v8 + 40 * v7 > (unint64_t)v18;
    if (v8 <= (unint64_t)v18 && v16)
    {
      v17 = (char *)v18 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v6 + 432), v15, 40);
      v8 = *(_QWORD *)(v6 + 416);
      v9 = &v17[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v6 + 432), v15, 40);
      v8 = *(_QWORD *)(v6 + 416);
      v9 = (char *)v18;
    }
  }
  v10 = v8 + 40 * *(unsigned int *)(v6 + 424);
  v11 = *(_OWORD *)v9;
  v12 = *((_OWORD *)v9 + 1);
  *(_QWORD *)(v10 + 32) = *((_QWORD *)v9 + 4);
  *(_OWORD *)v10 = v11;
  *(_OWORD *)(v10 + 16) = v12;
  ++*(_DWORD *)(v6 + 424);
  return v5;
}

void mlir::ConversionPatternRewriter::inlineBlockBefore(uint64_t *a1, _QWORD *a2, uint64_t a3, mlir::GenericProgramPoint *a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Parent;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  mlir::detail::ConversionPatternRewriterImpl::notifyBlockBeingInlined(a1[7], a3, (uint64_t)a2);
  v13 = (unint64_t *)a2[6];
  v12 = (unint64_t *)a2[7];
  v31 = v13;
  v32 = a5;
  v33 = 0;
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      if (v32 == a5 && v14 == a6)
        break;
      v16 = mlir::ValueRange::dereference_iterator(&v32, v14);
      mlir::ConversionPatternRewriter::replaceUsesOfBlockArgument((uint64_t)a1, *v13, v16);
      v13 = v31 + 1;
      v14 = v33 + 1;
      v31 = v13;
      ++v33;
    }
    while (v13 != v12);
  }
  v17 = (mlir::GenericProgramPoint *)(a2 + 4);
  if ((_QWORD *)a2[4] != a2 + 4 && v17 != a4)
  {
    v18 = a3 + 32;
    v19 = (mlir::GenericProgramPoint *)a2[5];
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v18, (uint64_t)(a2 + 4), (uint64_t)v19, (uint64_t)(a2 + 4));
    if (v19 != v17)
    {
      v20 = *(_QWORD *)v17;
      v21 = *(_QWORD *)v19;
      *(_QWORD *)(v21 + 8) = v17;
      *(_QWORD *)v17 = v21;
      v22 = *(_QWORD *)a4;
      *(_QWORD *)(v20 + 8) = a4;
      *(_QWORD *)v19 = v22;
      *(_QWORD *)(v22 + 8) = v19;
      *(_QWORD *)a4 = v20;
    }
  }
  mlir::detail::ConversionPatternRewriterImpl::notifyBlockIsBeingErased((mlir::detail::ConversionPatternRewriterImpl *)a1[7], (mlir::Block *)a2);
  for (i = (mlir::GenericProgramPoint *)a2[5]; i != v17; i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(i);
    mlir::ConversionPatternRewriter::eraseOp((mlir::ConversionPatternRewriter *)a1, v24);
  }
  v25 = a2 + 1;
  if (!a2)
    v25 = 0;
  v26 = (uint64_t)(v25 - 1);
  if (a2)
    v27 = v26;
  else
    v27 = 0;
  Parent = mlir::Block::getParent((mlir::Block *)a2);
  llvm::ilist_traits<mlir::Block>::removeNodeFromList(Parent, v27);
  v29 = *(_QWORD *)(v27 + 8);
  v30 = *(_QWORD **)(v27 + 16);
  *v30 = v29;
  *(_QWORD *)(v29 + 8) = v30;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
}

uint64_t mlir::ConversionPatternRewriter::inlineRegionBefore(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  mlir::detail::ConversionPatternRewriterImpl::notifyRegionIsBeingInlinedBefore(*(_QWORD *)(a1 + 56), (_QWORD **)a2);
  return mlir::RewriterBase::inlineRegionBefore(a1, a2, a3, a4);
}

void mlir::ConversionPatternRewriter::cloneRegionBefore(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *i;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  mlir::GenericProgramPoint *v38;
  mlir::GenericProgramPoint *v39;
  mlir::GenericProgramPoint *v40;
  mlir::ForwardIterator *v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  char *v45;
  void *v46;
  void *v47;
  const void *v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  const void *v54;
  void *__p;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  void *v60;
  _BYTE *v61;
  void *v62;
  void *v63;
  void *v64;
  _BYTE *v65;
  _QWORD v66[5];

  if ((_QWORD *)*a2 == a2)
    return;
  mlir::RewriterBase::cloneRegionBefore(a1, (uint64_t)a2, a3, a4, a5);
  mlir::ForwardDominanceIterator<false>::makeIterable(a2, (uint64_t)&v58);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v52, &v54, (const llvm::SmallPtrSetImplBase *)&v58);
  __p = 0;
  v56 = 0;
  v57 = 0;
  v8 = v60;
  v9 = v61 - (_BYTE *)v60;
  if (v61 != v60)
  {
    if (v9 < 0)
      goto LABEL_58;
    v10 = (char *)operator new(v61 - (_BYTE *)v60);
    __p = v10;
    v56 = v10;
    v57 = &v10[32 * (v9 >> 5)];
    v11 = v9 & 0xFFFFFFFFFFFFFFE0;
    memcpy(v10, v8, v11);
    v56 = &v10[v11];
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v46, &v48, (const llvm::SmallPtrSetImplBase *)&v62);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v12 = v64;
  v13 = v65 - (_BYTE *)v64;
  if (v65 != v64)
  {
    if ((v13 & 0x8000000000000000) == 0)
    {
      v14 = (char *)operator new(v65 - (_BYTE *)v64);
      v49 = v14;
      v50 = v14;
      v51 = &v14[32 * (v13 >> 5)];
      v15 = v13 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v14, v12, v15);
      i = &v14[v15];
      v50 = &v14[v15];
      goto LABEL_10;
    }
LABEL_58:
    abort();
  }
  v14 = 0;
  for (i = 0; ; i = v50)
  {
LABEL_10:
    if (v56 - (_BYTE *)__p != i - v14)
      goto LABEL_22;
    if (__p == v56)
      break;
    v17 = v14 + 16;
    v18 = (char *)__p + 16;
    while (1)
    {
      v19 = v18 - 16;
      if (*((_QWORD *)v18 - 2) != *((_QWORD *)v17 - 2))
        break;
      v20 = v17[8];
      if (v18[8])
        v21 = v20 == 0;
      else
        v21 = 1;
      if (v21)
      {
        if ((v18[8] != 0) != (v20 != 0))
          break;
      }
      else if (*((_QWORD *)v18 - 1) != *((_QWORD *)v17 - 1) || *(_QWORD *)v18 != *(_QWORD *)v17)
      {
        break;
      }
      v17 += 32;
      v18 += 32;
      if (v19 + 32 == v56)
        goto LABEL_41;
    }
LABEL_22:
    v22 = *(_QWORD *)(a5 + 24);
    v23 = *(unsigned int *)(a5 + 40);
    if ((_DWORD)v23)
    {
      v24 = *((_QWORD *)v56 - 4);
      LODWORD(v25) = ((v24 >> 4) ^ (v24 >> 9)) & (v23 - 1);
      v26 = (uint64_t *)(v22 + 16 * v25);
      v27 = *v26;
      if (*v26 == v24)
        goto LABEL_29;
      v28 = 1;
      while (v27 != -4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v23 - 1);
        v27 = *(_QWORD *)(v22 + 16 * v25);
        if (v27 == v24)
        {
          v26 = (uint64_t *)(v22 + 16 * v25);
          goto LABEL_29;
        }
      }
    }
    v26 = (uint64_t *)(v22 + 16 * v23);
LABEL_29:
    if (v26 == (uint64_t *)(v22 + 16 * v23))
      v30 = 0;
    else
      v30 = v26[1];
    v31 = *(_QWORD *)(a1 + 56);
    LODWORD(v66[0]) = 0;
    v66[1] = v30;
    memset(&v66[2], 0, 24);
    v32 = *(unsigned int *)(v31 + 424);
    v33 = *(_QWORD *)(v31 + 416);
    if (v32 < *(_DWORD *)(v31 + 428))
      goto LABEL_33;
    v42 = v31 + 416;
    v43 = v32 + 1;
    v44 = v33 + 40 * v32 > (unint64_t)v66;
    if (v33 > (unint64_t)v66 || !v44)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v42, (void *)(v31 + 432), v43, 40);
      v33 = *(_QWORD *)(v31 + 416);
LABEL_33:
      v34 = (char *)v66;
      goto LABEL_34;
    }
    v45 = (char *)v66 - v33;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v42, (void *)(v31 + 432), v43, 40);
    v33 = *(_QWORD *)(v31 + 416);
    v34 = &v45[v33];
LABEL_34:
    v35 = v33 + 40 * *(unsigned int *)(v31 + 424);
    v36 = *(_OWORD *)v34;
    v37 = *((_OWORD *)v34 + 1);
    *(_QWORD *)(v35 + 32) = *((_QWORD *)v34 + 4);
    *(_OWORD *)v35 = v36;
    *(_OWORD *)(v35 + 16) = v37;
    ++*(_DWORD *)(v31 + 424);
    v66[0] = a1;
    v38 = (mlir::GenericProgramPoint *)(v30 + 32);
    v39 = *(mlir::GenericProgramPoint **)(v30 + 40);
    if (v39 != (mlir::GenericProgramPoint *)(v30 + 32))
    {
      do
      {
        v40 = (mlir::GenericProgramPoint *)*((_QWORD *)v39 + 1);
        mlir::GenericProgramPoint::~GenericProgramPoint(v39);
        mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(v41, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ConversionPatternRewriter::cloneRegionBefore(mlir::Region &,mlir::Region &,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Block,false,false,void,false>,false,false>,mlir::IRMapping &)::$_0>, (uint64_t)v66, 0);
        v39 = v40;
      }
      while (v40 != v38);
    }
    llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::toNext((uint64_t)&v52);
    v14 = v49;
  }
LABEL_41:
  if (v14)
  {
    v50 = v14;
    operator delete(v14);
  }
  if (v47 != v46)
    free(v47);
  if (__p)
  {
    v56 = (char *)__p;
    operator delete(__p);
  }
  if (v53 != v52)
    free(v53);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v63 != v62)
    free(v63);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v59 != v58)
    free(v59);
}

void mlir::ForwardDominanceIterator<false>::makeIterable(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v17[64];
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if ((_QWORD *)*a1 == a1)
  {
    v18 = 0;
    v19 = 0;
    memset(v17, 0, sizeof(v17));
    v14 = &v17[8];
    v15 = &v17[8];
    v16 = 8;
    v20 = 0;
    v21 = 0;
    memset(v9, 0, sizeof(v9));
    v6 = (char *)v9 + 8;
    v7 = (char *)v9 + 8;
    v8 = 8;
    v10 = 0;
    __p = 0;
    v12 = 0;
    v13 = 0;
    llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v14, (uint64_t)&v6, (uint64_t)&v22);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    if (v7 != v6)
      free(v7);
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (v15 != v14)
      free(v15);
  }
  else
  {
    v3 = a1[1];
    if (v3)
      v4 = v3 - 8;
    else
      v4 = 0;
    v5 = v4;
    llvm::depth_first<mlir::Block *>(&v5, (uint64_t)&v22);
  }
  llvm::make_pointee_range<llvm::iterator_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>> &,llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((llvm::SmallPtrSetImplBase *)&v22, a2);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v27 != v26)
    free(v27);
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v23 != v22)
    free(v23);
}

void mlir::ConversionPatternRewriter::notifyOperationInserted(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 7);
  v4 = *(unsigned int *)(v3 + 208);
  if (v4 >= *(_DWORD *)(v3 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 200, (void *)(v3 + 216), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 208);
}

void `non-virtual thunk to'mlir::ConversionPatternRewriter::notifyOperationInserted(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 2);
  v4 = *(unsigned int *)(v3 + 208);
  if (v4 >= *(_DWORD *)(v3 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 200, (void *)(v3 + 216), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 208);
}

void mlir::ConversionPatternRewriter::startRootUpdate(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  uint64_t v3;
  unsigned int v4;
  char *v5;
  int v6;
  void *v7;
  unint64_t v8;

  v3 = *((_QWORD *)this + 7);
  v4 = *(_DWORD *)(v3 + 640);
  if (v4 >= *(_DWORD *)(v3 + 644))
  {
    v8 = 0;
    v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v3 + 632, (void *)(v3 + 648), 0, 136, &v8);
    v6 = v8;
    v7 = *(void **)(v3 + 632);
    if (v7 != (void *)(v3 + 648))
      free(v7);
    *(_QWORD *)(v3 + 632) = v5;
    *(_DWORD *)(v3 + 644) = v6;
  }
  else
  {
  }
  ++*(_DWORD *)(v3 + 640);
}

void mlir::ConversionPatternRewriter::cancelRootUpdate(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v2 = *((_QWORD *)this + 7);
  v3 = *(_QWORD *)(v2 + 632);
  v4 = 136 * *(unsigned int *)(v2 + 640);
  while (v4)
  {
    v5 = *(mlir::Operation **)(v3 + v4 - 136);
    v4 -= 136;
    if (v5 == a2)
    {
      v3 += v4 + 136;
      break;
    }
  }
  v6 = *(_QWORD *)(v2 + 632);
  v7 = v6 + 136 * (int)(-252645135 * ((unint64_t)(v3 - v6 - 136) >> 3));
  v8 = *(_DWORD *)(v2 + 640);
  v9 = v6 + 136 * v8;
  if (v7 + 136 != v9)
  {
    do
    {
      *(_OWORD *)v7 = *(_OWORD *)(v7 + 136);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 152);
      llvm::SmallVectorImpl<mlir::Value>::operator=(v7 + 24, v7 + 160);
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v7 + 104, v7 + 240);
      v10 = v7 + 272;
      v7 += 136;
    }
    while (v10 != v9);
    v8 = *(_DWORD *)(v2 + 640);
    v6 = *(_QWORD *)(v2 + 632);
  }
  v11 = v8 - 1;
  *(_DWORD *)(v2 + 640) = v8 - 1;
  v12 = v6 + 136 * (v8 - 1);
  v13 = *(void **)(v12 + 104);
  if (v13 != (void *)(v12 + 120))
    free(v13);
  v14 = v6 + 136 * v11;
  v15 = *(void **)(v14 + 24);
  if (v15 != (void *)(v14 + 40))
    free(v15);
}

uint64_t mlir::ConversionPatternRewriter::notifyMatchFailure()
{
  return 0;
}

uint64_t `non-virtual thunk to'mlir::ConversionPatternRewriter::notifyMatchFailure()
{
  return 0;
}

uint64_t mlir::ConversionPattern::matchAndRewrite(mlir::ConversionPattern *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v17[2];
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a3 + 7);
  v7 = *(_QWORD *)(v6 + 1224);
  *(_QWORD *)(v6 + 1224) = *((_QWORD *)this + 12);
  v18 = v20;
  v19 = 0x400000000;
  v8 = *((_QWORD *)a2 + 3);
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v9 = *((_QWORD *)a2 + 9);
    v10 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange(v17, v9, v10);
  if (!mlir::detail::ConversionPatternRewriterImpl::remapValues(v6, v11, v12, v8, 1u, v13, v17[0], v17[1], (uint64_t)&v18))
  {
    v14 = 0;
    v15 = v18;
    if (v18 == v20)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = (*(uint64_t (**)(mlir::ConversionPattern *, mlir::Operation *, void *, _QWORD, mlir::PatternRewriter *))(*(_QWORD *)this + 56))(this, a2, v18, v19, a3);
  v15 = v18;
  if (v18 != v20)
LABEL_5:
    free(v15);
LABEL_6:
  *(_QWORD *)(v6 + 1224) = v7;
  return v14;
}

uint64_t mlir::TypeConverter::convertType(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v5 = v7;
  v6 = 0x100000000;
  if (!mlir::TypeConverter::convertType(a1, a2, (uint64_t)&v5) || (_DWORD)v6 != 1)
  {
    v3 = 0;
    if (v5 == v7)
      return v3;
    goto LABEL_8;
  }
  v3 = *(_QWORD *)v5;
  if (v5 != v7)
LABEL_8:
    free(v5);
  return v3;
}

BOOL mlir::TypeConverter::isLegal(mlir::TypeConverter *this, mlir::Operation *a2)
{
  mlir::detail::OpResultImpl *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  char *v8;
  mlir::detail::OpResultImpl *v9;
  uint64_t v10;
  mlir::detail::OpResultImpl *v11;
  uint64_t v12;
  uint64_t v13[4];
  uint64_t v14[2];

  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = (mlir::detail::OpResultImpl *)*((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v9 = v4;
  v10 = v5;
  mlir::OperandRange::getTypes((uint64_t *)&v9, v13);
  result = _ZNSt3__16all_ofB8nn180100IN4mlir17ValueTypeIteratorIN4llvm6detail27indexed_accessor_range_baseINS1_12OperandRangeEPNS1_9OpOperandENS1_5ValueES9_S9_E8iteratorEEEZNKS1_13TypeConverter7isLegalINS1_14ValueTypeRangeIS6_EEEENS_9enable_ifIXaantsr3std14is_convertibleIT_NS1_4TypeEEE5valuentsr3std14is_convertibleISI_PNS1_9OperationEEE5valueEbE4typeEOSI_EUlSJ_E_EEbSI_SI_T0_(v13[0], v13[1], v13[2], v13[3], (uint64_t)this);
  if ((_DWORD)result)
  {
    v7 = *((unsigned int *)a2 + 9);
    v8 = (char *)a2 - 16;
    if (!(_DWORD)v7)
      v8 = 0;
    v14[0] = (uint64_t)v8;
    v14[1] = v7;
    mlir::OperandRange::getTypes(v14, (uint64_t *)&v9);
    return _ZNSt3__16all_ofB8nn180100IN4mlir17ValueTypeIteratorIN4llvm6detail27indexed_accessor_range_baseINS1_11ResultRangeEPNS1_6detail12OpResultImplENS1_8OpResultESA_SA_E8iteratorEEEZNKS1_13TypeConverter7isLegalINS1_14ValueTypeRangeIS6_EEEENS_9enable_ifIXaantsr3std14is_convertibleIT_NS1_4TypeEEE5valuentsr3std14is_convertibleISJ_PNS1_9OperationEEE5valueEbE4typeEOSJ_EUlSK_E_EEbSJ_SJ_T0_(v9, v10, v11, v12, (uint64_t)this);
  }
  return result;
}

BOOL mlir::TypeConverter::isSignatureLegal(uint64_t a1, uint64_t a2)
{
  uint64_t Inputs;
  uint64_t v4;
  uint64_t v5;
  uint64_t Results;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  _BOOL8 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v20);
  v5 = v4;
  Results = mlir::FunctionType::getResults((mlir::FunctionType *)&v20);
  v8 = v5 == 0;
  v9 = v7 == 0;
  if (!(v5 | v7))
    return 1;
  v10 = (void **)Results;
  v11 = Inputs + 8 * v5;
  v12 = Results + 8 * v7;
  while (1)
  {
    if (v9)
      v13 = 0;
    else
      v13 = v10;
    if (Inputs != 0 && !v8)
      v13 = (void **)Inputs;
    v14 = *v13;
    v21 = v23;
    v22 = 0x100000000;
    v15 = 0;
    if (mlir::TypeConverter::convertType(a1, v14, (uint64_t)&v21) && (_DWORD)v22 == 1)
      v15 = *(void **)v21;
    if (v21 != v23)
      free(v21);
    result = v15 == v14;
    if (v15 != v14)
      break;
    if (v8)
      v18 = (uint64_t)v10;
    else
      v18 = Inputs;
    v19 = v18 + 8;
    if (v8)
      v10 = (void **)v19;
    else
      Inputs = v19;
    v9 = v10 == (void **)v12;
    v8 = Inputs == v11;
    if (Inputs == v11 && v10 == (void **)v12)
      return 1;
  }
  return result;
}

uint64_t mlir::TypeConverter::convertSignatureArg(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *__src;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  __src = v18;
  v17 = 0x100000000;
  if (!mlir::TypeConverter::convertType(a1, a3, (uint64_t)&__src))
  {
    v13 = 0;
    v14 = __src;
    if (__src == v18)
      return v13;
    goto LABEL_8;
  }
  v6 = v17;
  if ((_DWORD)v17)
  {
    v7 = __src;
    v8 = *(_QWORD *)a4 + 32 * a2;
    v9 = *(unsigned __int8 *)(v8 + 24);
    *(_QWORD *)v8 = *(unsigned int *)(a4 + 152);
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(v8 + 16) = 0;
    if (v9)
    {
      v10 = 8 * v6;
      v11 = *(unsigned int *)(a4 + 152);
      v12 = v11 + v6;
      if (v11 + v6 <= (unint64_t)*(unsigned int *)(a4 + 156))
      {
LABEL_6:
        memcpy((void *)(*(_QWORD *)(a4 + 144) + 8 * v11), v7, v10);
        *(_DWORD *)(a4 + 152) += v6;
        goto LABEL_7;
      }
    }
    else
    {
      *(_BYTE *)(v8 + 24) = 1;
      v10 = 8 * v6;
      v11 = *(unsigned int *)(a4 + 152);
      v12 = v11 + v6;
      if (v11 + v6 <= (unint64_t)*(unsigned int *)(a4 + 156))
        goto LABEL_6;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 144, (void *)(a4 + 160), v12, 8);
    v11 = *(unsigned int *)(a4 + 152);
    goto LABEL_6;
  }
LABEL_7:
  v13 = 1;
  v14 = __src;
  if (__src != v18)
LABEL_8:
    free(v14);
  return v13;
}

void mlir::TypeConverter::convertBlockSignature(mlir::TypeConverter *this@<X0>, mlir::Block *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t ArgumentTypes;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  int v25;
  char v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void *__src;
  uint64_t v34;
  _BYTE v35[128];
  void *v36;
  uint64_t v37;
  _BYTE v38[32];
  unint64_t v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6);
  v7 = v6 >> 3;
  __src = v35;
  v34 = 0x400000000;
  if ((v6 >> 3))
  {
    v8 = (v6 >> 3);
    if (v7 < 5)
    {
      v9 = 0;
      v10 = v35;
      if (!v8)
      {
LABEL_12:
        LODWORD(v34) = v7;
        goto LABEL_13;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v35, (v6 >> 3), 32);
      v9 = v34;
      v10 = __src;
      if (v34 == v8)
        goto LABEL_12;
    }
    v11 = 32 * v9;
    v12 = &v10[32 * v9];
    v13 = 32 * v8 - 32 - v11;
    if (!v13)
      goto LABEL_10;
    v14 = (v13 >> 5) + 1;
    v12 += 32 * (v14 & 0xFFFFFFFFFFFFFFELL);
    v15 = &v10[v11 + 32];
    v16 = v14 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v15 - 32) = 0;
      *v15 = 0;
      *(v15 - 8) = 0;
      v15[24] = 0;
      v15 += 64;
      v16 -= 2;
    }
    while (v16);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_10:
      v17 = &v10[32 * v8];
      do
      {
        *v12 = 0;
        v12[24] = 0;
        v12 += 32;
      }
      while (v12 != v17);
    }
    goto LABEL_12;
  }
LABEL_13:
  v36 = v38;
  v37 = 0x400000000;
  ArgumentTypes = mlir::Block::getArgumentTypes(a2);
  mlir::ValueRange::ValueRange(v39, ArgumentTypes, (v19 - ArgumentTypes) >> 3);
  mlir::TypeRange::TypeRange((unint64_t *)&v31, v39[0], v39[1]);
  v20 = v32;
  if (!v32)
  {
LABEL_17:
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x400000000;
    v24 = v34;
    if ((_DWORD)v34 && &__src != (void **)a3)
    {
      if (__src == v35)
      {
        v27 = v34;
        if (v34 < 5
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v34, 32),
              (v27 = v34) != 0))
        {
          memcpy(*(void **)a3, __src, 32 * v27);
        }
        *(_DWORD *)(a3 + 8) = v24;
      }
      else
      {
        *(_QWORD *)a3 = __src;
        v25 = HIDWORD(v34);
        *(_DWORD *)(a3 + 8) = v24;
        *(_DWORD *)(a3 + 12) = v25;
        __src = v35;
        HIDWORD(v34) = 0;
      }
      LODWORD(v34) = 0;
    }
    *(_QWORD *)(a3 + 144) = a3 + 160;
    *(_QWORD *)(a3 + 152) = 0x400000000;
    v26 = 1;
    if (&__src == (void **)a3)
      goto LABEL_38;
    v28 = v37;
    if (!(_DWORD)v37)
      goto LABEL_38;
    if (v36 != v38)
    {
      *(_QWORD *)(a3 + 144) = v36;
      v29 = HIDWORD(v37);
      *(_DWORD *)(a3 + 152) = v28;
      *(_DWORD *)(a3 + 156) = v29;
      v36 = v38;
      HIDWORD(v37) = 0;
LABEL_37:
      LODWORD(v37) = 0;
      v26 = 1;
      goto LABEL_38;
    }
    if (v37 < 5)
    {
      v30 = v37;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 144, (void *)(a3 + 160), v37, 8);
      v30 = v37;
      if (!(_DWORD)v37)
        goto LABEL_36;
    }
    memcpy(*(void **)(a3 + 144), v36, 8 * v30);
LABEL_36:
    *(_DWORD *)(a3 + 152) = v28;
    goto LABEL_37;
  }
  v21 = 0;
  v22 = v31;
  while (1)
  {
    v23 = (void *)mlir::TypeRange::dereference_iterator(v22, v21);
    if (!mlir::TypeConverter::convertSignatureArg((uint64_t)this, v21, v23, (uint64_t)&__src))
      break;
    if (v20 == ++v21)
      goto LABEL_17;
  }
  v26 = 0;
  *(_BYTE *)a3 = 0;
LABEL_38:
  *(_BYTE *)(a3 + 192) = v26;
  if (v36 != v38)
    free(v36);
  if (__src != v35)
    free(__src);
}

void mlir::populateFunctionOpInterfaceTypeConversionPattern(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unint64_t v44;

  v8 = *a3;
  v9 = operator new(0x68uLL);
  mlir::PatternBenefit::PatternBenefit(&v43, 1);
  mlir::Pattern::Pattern((uint64_t)(v9 + 1), a1, a2, (__int16)v43, v8, 0, 0);
  v9[12] = a4;
  *v9 = off_1E0E1A3B8;
  if (v9[9])
  {
    v10 = *((unsigned int *)v9 + 22);
    if (v10 <= *((_DWORD *)v9 + 23))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 10), v9 + 12, v10, 16);
    *((_DWORD *)v9 + 22) = *((_DWORD *)v9 + 22);
    v12 = (char *)a3[2];
    v11 = a3[3];
    if ((unint64_t)v12 < v11)
      goto LABEL_4;
    goto LABEL_15;
  }
  v43 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FunctionOpInterfaceSignatureConversion]";
  v44 = 111;
  v14 = llvm::StringRef::find((uint64_t *)&v43, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44 >= v14)
    v15 = v14;
  else
    v15 = v44;
  v16 = &v43[v15];
  v17 = v44 - v15;
  if (v44 - v15 >= 0x12)
    v18 = 18;
  else
    v18 = v44 - v15;
  v19 = &v16[v18];
  v20 = v17 - v18;
  if (v20 >= v20 - 1)
    --v20;
  v9[8] = v19;
  v9[9] = v20;
  v10 = *((unsigned int *)v9 + 22);
  if (v10 > *((_DWORD *)v9 + 23))
    goto LABEL_14;
LABEL_3:
  *((_DWORD *)v9 + 22) = v10;
  v12 = (char *)a3[2];
  v11 = a3[3];
  if ((unint64_t)v12 < v11)
  {
LABEL_4:
    *(_QWORD *)v12 = v9;
    v13 = (uint64_t)(v12 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v21 = (char *)a3[1];
  v22 = (v12 - v21) >> 3;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 61)
    abort();
  v24 = v11 - (_QWORD)v21;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v26 = (char *)operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *(_QWORD *)v27 = v9;
    v13 = (uint64_t)(v27 + 8);
    v29 = (char *)(v12 - v21);
    if (v12 != v21)
      goto LABEL_24;
  }
  else
  {
    v26 = 0;
    v27 = (char *)(8 * v22);
    v28 = 0;
    *(_QWORD *)(8 * v22) = v9;
    v13 = 8 * v22 + 8;
    v29 = (char *)(v12 - v21);
    if (v12 != v21)
    {
LABEL_24:
      v30 = (unint64_t)(v29 - 8);
      if (v30 < 0x78
        || &v12[-(v30 & 0xFFFFFFFFFFFFFFF8) - 8] < v27 && &v26[v12 - v21 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
      {
        goto LABEL_44;
      }
      v31 = (v30 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v33 = &v12[-v32];
      v27 -= v32;
      v34 = &v26[8 * v22 - 16];
      v35 = v12 - 16;
      v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *((_OWORD *)v35 - 1);
        v37 = *(_OWORD *)v35;
        *((_OWORD *)v35 - 1) = 0uLL;
        *(_OWORD *)v35 = 0uLL;
        *((_OWORD *)v34 - 1) = v38;
        *(_OWORD *)v34 = v37;
        v34 -= 32;
        v35 -= 32;
        v36 -= 4;
      }
      while (v36);
      v12 = v33;
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v39 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v27 - 1) = v39;
          v27 -= 8;
        }
        while (v12 != v21);
      }
      v12 = (char *)a3[1];
      v40 = (char *)a3[2];
      a3[1] = (uint64_t)v27;
      a3[2] = v13;
      a3[3] = (uint64_t)v28;
      while (v40 != v12)
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        v41 = v42;
        *(_QWORD *)v40 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      }
      goto LABEL_37;
    }
  }
  a3[1] = (uint64_t)v27;
  a3[2] = v13;
  a3[3] = (uint64_t)v28;
LABEL_37:
  if (v12)
    operator delete(v12);
LABEL_39:
  a3[2] = v13;
}

_DWORD *mlir::ConversionTarget::setOpAction(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *result;
  uint64_t v5;

  v5 = a2;
  result = (_DWORD *)llvm::MapVector<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>>,llvm::SmallVector<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,0u>>::operator[](a1 + 8, &v5);
  *result = a3;
  return result;
}

uint64_t llvm::MapVector<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>>,llvm::SmallVector<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,0u>>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  char v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(_DWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_29;
  v6 = *(_QWORD *)a1;
  v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v5 - 1);
  v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v9 = *v8;
  if (*v8 != v4)
  {
    v18 = 0;
    v19 = 1;
    while (v9 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v9 == -8192;
      if (v20)
        v18 = v8;
      v21 = v7 + v19++;
      v7 = v21 & (v5 - 1);
      v8 = (_QWORD *)(v6 + 16 * v7);
      v9 = *v8;
      if (*v8 == v4)
        goto LABEL_3;
    }
    if (v18)
      v22 = (uint64_t)v18;
    else
      v22 = (uint64_t)v8;
    v23 = *(_DWORD *)(a1 + 8);
    if (4 * v23 + 4 < 3 * v5)
    {
      if (v5 + ~v23 - *(_DWORD *)(a1 + 12) > v5 >> 3)
        goto LABEL_6;
      goto LABEL_30;
    }
LABEL_29:
    v5 *= 2;
LABEL_30:
    llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v5);
    v24 = *(_DWORD *)(a1 + 16) - 1;
    v25 = v24 & ((v4 >> 4) ^ (v4 >> 9));
    v22 = *(_QWORD *)a1 + 16 * v25;
    v26 = *(_QWORD *)v22;
    if (*(_QWORD *)v22 == v4)
    {
      v11 = v4;
LABEL_7:
      ++*(_DWORD *)(a1 + 8);
      if (v11 != -4096)
        --*(_DWORD *)(a1 + 12);
      *(_QWORD *)v22 = v4;
      *(_DWORD *)(v22 + 8) = 0;
      v31 = *a2;
      v32 = 2;
      v33 = 0;
      v35 = 0;
      llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::push_back(a1 + 24, (unint64_t)&v31);
      v15 = v35;
      if (v35 == v34)
      {
        v16 = 4;
        v15 = v34;
      }
      else
      {
        if (!v35)
        {
LABEL_14:
          v10 = *(_DWORD *)(a1 + 32) - 1;
          *(_DWORD *)(v22 + 8) = v10;
          return *(_QWORD *)(a1 + 24) + 48 * v10 + 8;
        }
        v16 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v15 + 8 * v16))(v15, v12, v13, v14);
      goto LABEL_14;
    }
    v27 = 0;
    v28 = 1;
    while (v26 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = v22;
      v30 = v25 + v28++;
      v25 = v30 & v24;
      v22 = *(_QWORD *)a1 + 16 * v25;
      v26 = *(_QWORD *)v22;
      v11 = v4;
      if (*(_QWORD *)v22 == v4)
        goto LABEL_7;
    }
    if (v27)
      v22 = v27;
LABEL_6:
    v11 = *(_QWORD *)v22;
    goto LABEL_7;
  }
LABEL_3:
  v10 = *(_DWORD *)(v6 + 16 * v7 + 8);
  return *(_QWORD *)(a1 + 24) + 48 * v10 + 8;
}

uint64_t *mlir::ConversionTarget::setDialectAction(uint64_t *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  const unsigned __int8 *v9;

  if (a3)
  {
    v5 = a2;
    v6 = a2 + 16 * a3;
    v7 = (uint64_t)(result + 9);
    do
    {
      v8 = *(int8x16_t **)v5;
      v9 = *(const unsigned __int8 **)(v5 + 8);
      v5 += 16;
      result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v7, v8, v9);
      *(_DWORD *)(*result + 8) = a4;
    }
    while (v5 != v6);
  }
  return result;
}

_QWORD *mlir::ConversionTarget::getOpInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  int8x16_t *DialectNamespace;
  const unsigned __int8 *v16;
  int Key;
  uint64_t v18;
  _QWORD *result;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int8x16_t *v28;
  const unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t *v46;
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (_QWORD *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (_QWORD *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (_QWORD *)(v5 + 16 * v6);
LABEL_8:
  v12 = v8 == (_QWORD *)(v5 + 16 * v6);
  v13 = (unsigned int *)(a1 + 40);
  if (!v12)
    v13 = (unsigned int *)(v8 + 1);
  v14 = *v13;
  if (v14 != *(_DWORD *)(a1 + 40))
  {
    v22 = *(_QWORD *)(a1 + 32);
    v23 = v22 + 48 * v14;
    v24 = *(_BYTE *)(v23 + 12);
    *(_DWORD *)a3 = *(_DWORD *)(v23 + 8);
    *(_BYTE *)(a3 + 4) = v24;
    v26 = *(_QWORD **)(v23 + 40);
    v25 = (_QWORD *)(v23 + 40);
    result = v26;
    if (v26)
    {
      if (result == (_QWORD *)(v22 + 48 * v14 + 16))
      {
        *(_QWORD *)(a3 + 32) = a3 + 8;
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25);
LABEL_35:
        *(_BYTE *)(a3 + 40) = 1;
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
LABEL_33:
      *(_QWORD *)(a3 + 32) = result;
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  DialectNamespace = (int8x16_t *)mlir::OperationName::getDialectNamespace((mlir::OperationName *)&v43);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 72), DialectNamespace, v16);
  if (Key != -1)
  {
    v18 = Key;
    if (Key != (unint64_t)*(unsigned int *)(a1 + 80))
    {
      v27 = *(_QWORD *)(a1 + 72);
      v49 = 0;
      v28 = (int8x16_t *)mlir::OperationName::getDialectNamespace((mlir::OperationName *)&v43);
      v30 = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 96), v28, v29);
      if (v30 == -1 || v30 == (unint64_t)*(unsigned int *)(a1 + 104))
      {
        LODWORD(v44) = *(_DWORD *)(*(_QWORD *)(v27 + 8 * v18) + 8);
        BYTE4(v44) = 0;
LABEL_23:
        *(_DWORD *)a3 = v44;
        *(_BYTE *)(a3 + 4) = BYTE4(v44);
LABEL_24:
        *(_QWORD *)(a3 + 32) = 0;
LABEL_25:
        *(_BYTE *)(a3 + 40) = 1;
        goto LABEL_26;
      }
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v30);
      v35 = *(_QWORD *)(v34 + 32);
      if (v35)
      {
        v36 = v34 + 8;
        if (v35 == v36)
        {
          v46 = &v44;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 24))(v36, &v44);
        }
        else
        {
          v46 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        }
      }
      else
      {
        v46 = 0;
      }
      std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](&v44, v48);
      v37 = v46;
      if (v46 == &v44)
      {
        v38 = 4;
        v37 = &v44;
      }
      else
      {
        if (!v46)
          goto LABEL_54;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_54:
      LODWORD(v44) = *(_DWORD *)(*(_QWORD *)(v27 + 8 * v18) + 8);
      BYTE4(v44) = 0;
      if (!v49)
        goto LABEL_23;
      v39 = v45;
      if (v49 == v48)
      {
        v47 = v45;
        (*(void (**)(_QWORD *, _QWORD *))(v48[0] + 24))(v48, v45);
        v40 = v47;
      }
      else
      {
        v40 = (_QWORD *)(*(uint64_t (**)(void))(*v49 + 16))();
        v47 = v40;
      }
      *(_DWORD *)a3 = v44;
      *(_BYTE *)(a3 + 4) = BYTE4(v44);
      if (!v40)
        goto LABEL_24;
      if (v40 != v45)
      {
        *(_QWORD *)(a3 + 32) = v40;
        goto LABEL_25;
      }
      *(_QWORD *)(a3 + 32) = a3 + 8;
      (*(void (**)(_QWORD *))(v45[0] + 24))(v45);
      v41 = v47;
      *(_BYTE *)(a3 + 40) = 1;
      if (v41 == v45)
      {
        v42 = 4;
      }
      else
      {
        if (!v41)
          goto LABEL_26;
        v42 = 5;
        v39 = v41;
      }
      (*(void (**)(_QWORD *))(*v39 + 8 * v42))(v39);
LABEL_26:
      result = v49;
      if (v49 == v48)
      {
        v31 = 4;
        result = v48;
      }
      else
      {
        if (!v49)
          return result;
        v31 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
    }
  }
  result = *(_QWORD **)(a1 + 144);
  if (!result)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
    return result;
  }
  v20 = (_QWORD *)(a1 + 120);
  LODWORD(v44) = 1;
  BYTE4(v44) = 0;
  v21 = v45;
  if (result == v20)
  {
    v47 = v45;
    (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v45);
    result = v47;
    *(_DWORD *)a3 = v44;
    *(_BYTE *)(a3 + 4) = BYTE4(v44);
    if (result)
      goto LABEL_32;
LABEL_34:
    *(_QWORD *)(a3 + 32) = 0;
    goto LABEL_35;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  v47 = result;
  *(_DWORD *)a3 = v44;
  *(_BYTE *)(a3 + 4) = BYTE4(v44);
  if (!result)
    goto LABEL_34;
LABEL_32:
  if (result != v45)
    goto LABEL_33;
  *(_QWORD *)(a3 + 32) = a3 + 8;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v45[0] + 24))(v45);
  v32 = v47;
  *(_BYTE *)(a3 + 40) = 1;
  if (v32 == v45)
  {
    v33 = 4;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 8 * v33))(v21);
  }
  if (v32)
  {
    v33 = 5;
    v21 = v32;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 8 * v33))(v21);
  }
  return result;
}

_QWORD *mlir::ConversionTarget::isLegal(mlir::ConversionTarget *this, mlir::Operation *a2)
{
  int v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  mlir::Operation *v25;
  int v26;
  char v27;
  _BYTE v28[24];
  _BYTE *v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  mlir::ConversionTarget::getOpInfo((uint64_t)this, *((_QWORD *)a2 + 6), (uint64_t)&v26);
  if (!v30)
  {
    v7 = 0;
    v6 = 0;
    return (_QWORD *)(v6 | (v7 << 8));
  }
  v4 = v26;
  if (v26 != 1)
  {
LABEL_6:
    if (v4)
      goto LABEL_7;
    goto LABEL_11;
  }
  v25 = a2;
  if (!v29)
    goto LABEL_38;
  v5 = (*(uint64_t (**)(_BYTE *, mlir::Operation **))(*(_QWORD *)v29 + 48))(v29, &v25);
  if (v5 <= 0xFFu)
  {
    v4 = v26;
    goto LABEL_6;
  }
  if (!(_BYTE)v5)
  {
LABEL_7:
    v6 = 0;
    v7 = 0;
    if (!v30)
      return (_QWORD *)(v6 | (v7 << 8));
    goto LABEL_32;
  }
LABEL_11:
  if (!v27)
  {
    v6 = 0;
    v7 = 1;
    if (!v30)
      return (_QWORD *)(v6 | (v7 << 8));
    goto LABEL_32;
  }
  v8 = *((_QWORD *)this + 6);
  v9 = *((_DWORD *)this + 16);
  if (v9)
  {
    v10 = *((_QWORD *)a2 + 6);
    v11 = ((v10 >> 4) ^ (v10 >> 9)) & (v9 - 1);
    v12 = (uint64_t *)(v8 + 40 * v11);
    v13 = *v12;
    if (v10 == *v12)
      goto LABEL_21;
    v14 = 1;
    while (v13 != -4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v9 - 1);
      v12 = (uint64_t *)(v8 + 40 * v11);
      v13 = *v12;
      if (v10 == *v12)
        goto LABEL_21;
    }
  }
  v12 = (uint64_t *)(v8 + 40 * v9);
LABEL_21:
  if (v12 == (uint64_t *)(v8 + 40 * v9))
  {
    v6 = 1;
    v7 = 1;
    if (!v30)
      return (_QWORD *)(v6 | (v7 << 8));
    goto LABEL_32;
  }
  v25 = a2;
  v16 = v12[4];
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t, mlir::Operation **))(*(_QWORD *)v16 + 48))(v16, &v25);
    if ((_BYTE)v17)
      v18 = 0;
    else
      v18 = v17 >= 0x100u;
    v6 = !v18;
    v7 = 1;
    if (!v30)
      return (_QWORD *)(v6 | (v7 << 8));
LABEL_32:
    v19 = v29;
    if (v29 == v28)
    {
      v20 = 4;
      v19 = v28;
      goto LABEL_36;
    }
    if (v29)
    {
      v20 = 5;
LABEL_36:
      (*(void (**)(_QWORD *))(*v19 + 8 * v20))(v19);
    }
    return (_QWORD *)(v6 | (v7 << 8));
  }
LABEL_38:
  v22 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::ConversionTarget::setLegalityCallback(v22, v23, v24);
}

_QWORD *mlir::ConversionTarget::setLegalityCallback(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (_QWORD *)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (_QWORD *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (_QWORD *)(v4 + 16 * v5);
LABEL_8:
  if (v7 == (_QWORD *)(v4 + 16 * v5))
    v11 = (unsigned int *)(a1 + 40);
  else
    v11 = (unsigned int *)(v7 + 1);
  v12 = *(_QWORD *)(a1 + 32) + 48 * *v11;
  v13 = (_QWORD *)(v12 + 16);
  v14 = *(_QWORD **)(v12 + 40);
  if (!v14)
  {
    v27 = 0;
    v15 = (_QWORD *)a3[3];
    if (v15)
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v14 == v13)
  {
    v27 = v26;
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v26);
    v15 = (_QWORD *)a3[3];
    if (v15)
      goto LABEL_16;
LABEL_19:
    v25 = 0;
    goto LABEL_21;
  }
  v27 = v14;
  v13[3] = 0;
  v15 = (_QWORD *)a3[3];
  if (!v15)
    goto LABEL_19;
LABEL_16:
  if (v15 == a3)
  {
    v25 = v24;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v24);
  }
  else
  {
    v25 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
  }
LABEL_21:
  composeLegalityCallbacks(v28, v26, v24);
  v16 = (_QWORD *)v13[3];
  v13[3] = 0;
  if (v16 == v13)
  {
    v17 = 4;
    v16 = v13;
  }
  else
  {
    if (!v16)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  if (!v29)
  {
    v13[3] = 0;
    goto LABEL_35;
  }
  if (v29 != v28)
  {
    v13[3] = v29;
    v29 = 0;
    goto LABEL_35;
  }
  v13[3] = v13;
  (*(void (**)(_QWORD *, _QWORD *))(v28[0] + 24))(v28, v13);
  v18 = v29;
  if (v29 == v28)
  {
    v19 = 4;
    v18 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_35:
  v20 = v25;
  if (v25 == v24)
  {
    v21 = 4;
    v20 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_40;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_40:
  result = v27;
  if (v27 == v26)
  {
    v23 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v23 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
}

_QWORD *composeLegalityCallbacks(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v4 = result;
  v30 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a2[3];
  if (!v5)
  {
    v9 = (_QWORD *)a3[3];
    if (v9)
    {
      if (v9 == a3)
      {
        result[3] = result;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, result);
      }
      else
      {
        result[3] = v9;
        a3[3] = 0;
      }
    }
    else
    {
      result[3] = 0;
    }
    return result;
  }
  if (v5 != a2)
  {
    v27 = (_QWORD *)a2[3];
    a2[3] = 0;
    v6 = v28;
    v7 = (_QWORD *)a3[3];
    if (v7)
      goto LABEL_4;
LABEL_11:
    v29 = 0;
    v8 = v27;
    if (!v27)
      goto LABEL_16;
    goto LABEL_12;
  }
  v27 = v26;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v26);
  v6 = v28;
  v7 = (_QWORD *)a3[3];
  if (!v7)
    goto LABEL_11;
LABEL_4:
  if (v7 == a3)
  {
    v29 = v28;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v28);
    v8 = v27;
    if (!v27)
      goto LABEL_16;
  }
  else
  {
    v29 = v7;
    a3[3] = 0;
    v8 = v27;
    if (!v27)
    {
LABEL_16:
      v23 = 0;
      v10 = v24;
      v11 = v29;
      if (v29)
        goto LABEL_17;
LABEL_20:
      v25 = 0;
      goto LABEL_22;
    }
  }
LABEL_12:
  if (v8 != v26)
  {
    v23 = v8;
    v27 = 0;
    v10 = v24;
    v11 = v29;
    if (v29)
      goto LABEL_17;
    goto LABEL_20;
  }
  v23 = v22;
  (*(void (**)(_QWORD *, _QWORD *))(v26[0] + 24))(v26, v22);
  v10 = v24;
  v11 = v29;
  if (!v29)
    goto LABEL_20;
LABEL_17:
  if (v11 == v28)
  {
    v25 = v24;
    (*(void (**)(_QWORD *, _QWORD *))(v28[0] + 24))(v28, v24);
  }
  else
  {
    v25 = v11;
    v29 = 0;
  }
LABEL_22:
  v12 = operator new(0x48uLL);
  v13 = v12;
  *v12 = &off_1E0E50300;
  v14 = v12 + 1;
  if (!v23)
  {
    v12[4] = 0;
    v15 = v25;
    if (v25)
      goto LABEL_27;
    goto LABEL_30;
  }
  if (v23 == v22)
  {
    v12[4] = v14;
    (*(void (**)(_QWORD *))(v22[0] + 24))(v22);
    v15 = v25;
    if (v25)
      goto LABEL_27;
LABEL_30:
    v13[8] = 0;
    v4[3] = v13;
    goto LABEL_38;
  }
  v12[4] = v23;
  v23 = 0;
  v15 = v25;
  if (!v25)
    goto LABEL_30;
LABEL_27:
  if (v15 != v24)
  {
    v13[8] = v15;
    v25 = 0;
    v4[3] = v13;
    goto LABEL_38;
  }
  v13[8] = v13 + 5;
  (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
  v16 = v25;
  v4[3] = v13;
  if (v16 == v24)
  {
    v17 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_38;
    v17 = 5;
    v10 = v16;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v17))(v10);
LABEL_38:
  v18 = v23;
  if (v23 == v22)
  {
    v19 = 4;
    v18 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_43;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_43:
  if (v29 == v28)
  {
    v20 = 4;
    goto LABEL_47;
  }
  if (v29)
  {
    v20 = 5;
    v6 = v29;
LABEL_47:
    (*(void (**)(_QWORD *, _QWORD *))(*v6 + 8 * v20))(v6, v14);
  }
  result = v27;
  if (v27 == v26)
  {
    v21 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v21 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
}

_QWORD *mlir::ConversionTarget::setLegalityCallback(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  const unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = a2;
    v6 = (uint64_t)(result + 12);
    v7 = a2 + 16 * a3;
    do
    {
      v9 = *(int8x16_t **)v5;
      v10 = *(const unsigned __int8 **)(v5 + 8);
      v11 = llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::try_emplace<>(v6, *(int8x16_t **)v5, v10);
      v12 = *v11;
      v13 = *(_QWORD **)(*v11 + 32);
      if (v13)
      {
        if (v13 == (_QWORD *)(v12 + 8))
        {
          v27 = v26;
          (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v26);
          v14 = (_QWORD *)a4[3];
          if (!v14)
          {
LABEL_14:
            v25 = 0;
            goto LABEL_16;
          }
        }
        else
        {
          v27 = v13;
          *(_QWORD *)(v12 + 32) = 0;
          v14 = (_QWORD *)a4[3];
          if (!v14)
            goto LABEL_14;
        }
      }
      else
      {
        v27 = 0;
        v14 = (_QWORD *)a4[3];
        if (!v14)
          goto LABEL_14;
      }
      if (v14 == a4)
      {
        v25 = v24;
        (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v24);
      }
      else
      {
        v25 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
      }
LABEL_16:
      composeLegalityCallbacks(v28, v26, v24);
      v15 = llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::try_emplace<>(v6, v9, v10);
      v16 = *v15;
      v17 = *v15 + 8;
      v18 = *(_QWORD **)(*v15 + 32);
      *(_QWORD *)(v16 + 32) = 0;
      if (v18 == (_QWORD *)v17)
      {
        v18 = (_QWORD *)v17;
        v19 = 4;
      }
      else
      {
        if (!v18)
          goto LABEL_21;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_21:
      if (!v29)
      {
        *(_QWORD *)(v16 + 32) = 0;
        goto LABEL_30;
      }
      if (v29 != v28)
      {
        *(_QWORD *)(v16 + 32) = v29;
        v29 = 0;
        goto LABEL_30;
      }
      *(_QWORD *)(v16 + 32) = v17;
      (*(void (**)(_QWORD *, uint64_t))(v28[0] + 24))(v28, v17);
      v20 = v29;
      if (v29 == v28)
      {
        v20 = v28;
        v21 = 4;
      }
      else
      {
        if (!v29)
          goto LABEL_30;
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_30:
      v22 = v25;
      if (v25 == v24)
      {
        v22 = v24;
        v23 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_35;
        v23 = 5;
      }
      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_35:
      result = v27;
      if (v27 == v26)
      {
        result = v26;
        v8 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_5;
        v8 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_5:
      v5 += 16;
    }
    while (v5 != v7);
  }
  return result;
}

void `anonymous namespace'::OperationConverter::OperationConverter(uint64_t a1, uint64_t a2, mlir::FrozenRewritePatternSet *a3)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  int64x2_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 v30;
  unsigned int v31;
  llvm **v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  BOOL v43;
  int v44;
  uint64_t *v45;
  unint64_t v46;
  int64x2_t v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  char *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  const void **BucketFor;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64x2_t v65;
  unsigned int v66;
  char *v67;
  uint64_t v68;
  char *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  char *v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  BOOL v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  char *v115;
  int v116;
  BOOL v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  unsigned int v123;
  llvm *buffer;
  unsigned int v125;
  uint64_t v126;
  llvm *v127;
  unint64_t v128;
  uint64_t v129;
  llvm *v130;
  llvm *v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  char *v135;
  int v136;
  BOOL v137;
  unsigned int v138;
  int v139;
  int v140;
  uint64_t **v141;
  int64x2_t v142;
  int64x2_t v143;
  llvm *v144[2];
  int v145;
  llvm *v146;
  int32x2_t v147;
  unsigned int v148;
  void *v149;
  uint64_t v150;
  llvm *v151;
  uint64_t v152;
  unsigned int v153;
  llvm *v154[2];
  int v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  int64x2_t v159;
  llvm **v160;
  llvm **v161;
  llvm **v162;
  unsigned __int8 v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  v144[0] = 0;
  v144[1] = 0;
  v145 = 0;
  v156 = &v158;
  v157 = 0x100000000;
  v154[0] = 0;
  v154[1] = 0;
  v155 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = &v151;
  v150 = 0;
  v159.i64[0] = (uint64_t)&v156;
  v159.i64[1] = a1;
  v160 = &v151;
  v161 = v154;
  v162 = &v146;
  v141 = (uint64_t **)mlir::PatternApplicator::PatternApplicator((mlir::PatternApplicator *)(a1 + 104), a3);
  if ((_DWORD)v157)
  {
    if ((_DWORD)v150)
    {
      v4 = (char *)v149;
      v5 = (char *)v149 + 8 * v150;
      v142 = vdupq_n_s64(1uLL);
      while (1)
      {
        v6 = *(uint64_t **)v4;
        v7 = 0uLL;
        if (*(_DWORD *)(*(_QWORD *)v4 + 8) == 1)
        {
          v7.i64[1] = v142.i64[1];
          v7.i64[0] = *v6;
        }
        v159 = v7;
        if (!v145)
          break;
        v8 = (v145 - 1) & (((unsigned __int32)v7.i32[0] >> 4) ^ ((unsigned __int32)v7.i32[0] >> 9));
        v9 = (uint64_t *)((char *)v144[0] + 32 * v8);
        v10 = *v9;
        if (*v9 != v7.i64[0])
        {
          v11 = 0;
          v12 = 1;
          while (v10 != -4096)
          {
            if (v11)
              v13 = 0;
            else
              v13 = v10 == -8192;
            if (v13)
              v11 = v9;
            v14 = v8 + v12++;
            v8 = v14 & (v145 - 1);
            v9 = (uint64_t *)((char *)v144[0] + 32 * v8);
            v10 = *v9;
            if (*v9 == v7.i64[0])
              goto LABEL_19;
          }
          if (v11)
            v15 = v11;
          else
            v15 = v9;
          goto LABEL_18;
        }
LABEL_19:
        v16 = *((unsigned int *)v9 + 4);
        if (v16 >= *((unsigned int *)v9 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 1), v9 + 3, v16 + 1, 8);
          v16 = *((unsigned int *)v9 + 4);
        }
        *(_QWORD *)(v9[1] + 8 * v16) = v6;
        ++*((_DWORD *)v9 + 4);
        v4 += 8;
        if (v4 == v5)
          goto LABEL_250;
      }
      v15 = 0;
LABEL_18:
      v9 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>((uint64_t)v144, v15, v159.i64);
      goto LABEL_19;
    }
LABEL_250:
    if (v149 != &v151)
      free(v149);
    llvm::deallocate_buffer(v146, (void *)(8 * v148));
  }
  v17 = v150;
  if (!(_DWORD)v150)
    goto LABEL_250;
  v143 = vdupq_n_s64(1uLL);
LABEL_29:
  v18 = (_DWORD *)*((_QWORD *)v149 + v17 - 1);
  if (v148)
  {
    LODWORD(v19) = ((v18 >> 4) ^ (v18 >> 9)) & (v148 - 1);
    v20 = (char *)v146 + 8 * v19;
    v21 = *(_DWORD **)v20;
    if (v18 != *(_DWORD **)v20)
    {
      v139 = 1;
      do
      {
        if (v21 == (_DWORD *)-4096)
          goto LABEL_32;
        v140 = v19 + v139++;
        v19 = v140 & (v148 - 1);
        v21 = (_DWORD *)*((_QWORD *)v146 + v19);
      }
      while (v18 != v21);
      v20 = (char *)v146 + 8 * v19;
    }
    *(_QWORD *)v20 = -8192;
    v147 = vadd_s32(v147, (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_32:
  LODWORD(v150) = v17 - 1;
  v22 = v18[8];
  if ((_DWORD)v22)
  {
    v23 = (uint64_t *)*((_QWORD *)v18 + 3);
    v24 = &v23[v22];
    while (1)
    {
      v28 = *v23;
      mlir::ConversionTarget::getOpInfo(*(_QWORD *)(a1 + 96), *v23, (uint64_t)&v159);
      v29 = v163;
      if (!v163)
        break;
      v30 = v159.i8[0];
      v31 = (unsigned __int32)v159.i32[0] >> 8;
      v32 = v162;
      if (v162 == (llvm **)&v159.u64[1])
      {
        v32 = (llvm **)&v159.i64[1];
        v33 = 4;
      }
      else
      {
        if (!v162)
          goto LABEL_41;
        v33 = 5;
      }
      (*((void (**)(void))*v32 + v33))();
      v34 = v145;
      if (!v145)
        goto LABEL_45;
LABEL_34:
      v25 = v34 - 1;
      v26 = v25 & ((v28 >> 4) ^ (v28 >> 9));
      v27 = *((_QWORD *)v144[0] + 4 * v26);
      if (v27 != v28)
      {
        v35 = 1;
        while (v27 != -4096)
        {
          v36 = v26 + v35++;
          v26 = v36 & v25;
          v27 = *((_QWORD *)v144[0] + 4 * v26);
          if (v27 == v28)
            goto LABEL_35;
        }
LABEL_45:
        if (!v29 || (v30 | (v31 << 8)) == 2)
          goto LABEL_28;
      }
LABEL_35:
      if (++v23 == v24)
        goto LABEL_52;
    }
    v31 = 0;
    v30 = 0;
LABEL_41:
    v34 = v145;
    if (!v145)
      goto LABEL_45;
    goto LABEL_34;
  }
LABEL_52:
  v37 = 0uLL;
  if (v18[2] == 1)
  {
    v37.i64[1] = v143.i64[1];
    v37.i64[0] = *(_QWORD *)v18;
  }
  v159 = v37;
  if (v145)
  {
    v38 = (v145 - 1) & (((unsigned __int32)v37.i32[0] >> 4) ^ ((unsigned __int32)v37.i32[0] >> 9));
    v39 = (uint64_t *)((char *)v144[0] + 32 * v38);
    v40 = *v39;
    if (*v39 == v37.i64[0])
      goto LABEL_67;
    v41 = 0;
    v42 = 1;
    while (v40 != -4096)
    {
      if (v41)
        v43 = 0;
      else
        v43 = v40 == -8192;
      if (v43)
        v41 = v39;
      v44 = v38 + v42++;
      v38 = v44 & (v145 - 1);
      v39 = (uint64_t *)((char *)v144[0] + 32 * v38);
      v40 = *v39;
      if (*v39 == v37.i64[0])
        goto LABEL_67;
    }
    if (v41)
      v45 = v41;
    else
      v45 = v39;
  }
  else
  {
    v45 = 0;
  }
  v39 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>((uint64_t)v144, v45, v159.i64);
LABEL_67:
  v46 = *((unsigned int *)v39 + 4);
  if (v46 >= *((unsigned int *)v39 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v39 + 1), v39 + 3, v46 + 1, 8);
    v46 = *((unsigned int *)v39 + 4);
  }
  *(_QWORD *)(v39[1] + 8 * v46) = v18;
  ++*((_DWORD *)v39 + 4);
  v47 = 0uLL;
  if (v18[2] == 1)
  {
    v47 = vdupq_n_s64(1uLL);
    v47.i64[0] = *(_QWORD *)v18;
  }
  v159 = v47;
  if (v153)
  {
    v48 = (v153 - 1) & (((unsigned __int32)v47.i32[0] >> 4) ^ ((unsigned __int32)v47.i32[0] >> 9));
    v49 = (char *)v151 + 56 * v48;
    v50 = *(_QWORD *)v49;
    if (*(_QWORD *)v49 == v47.i64[0])
      goto LABEL_84;
    v51 = 0;
    v52 = 1;
    while (v50 != -4096)
    {
      if (v51)
        v53 = 0;
      else
        v53 = v50 == -8192;
      if (v53)
        v51 = v49;
      v54 = v48 + v52++;
      v48 = v54 & (v153 - 1);
      v49 = (char *)v151 + 56 * v48;
      v50 = *(_QWORD *)v49;
      if (*(_QWORD *)v49 == v47.i64[0])
        goto LABEL_84;
    }
    if (v51)
      v55 = v51;
    else
      v55 = v49;
  }
  else
  {
    v55 = 0;
  }
  v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>((uint64_t)&v151, v55, v159.i64);
LABEL_84:
  v56 = *((_QWORD *)v49 + 2);
  if (v56 == *((_QWORD *)v49 + 1))
  {
    v61 = *((unsigned int *)v49 + 7);
    BucketFor = (const void **)(v56 + 8 * v61);
    if ((_DWORD)v61)
    {
      v62 = 0;
      v63 = 8 * v61;
      while (*(_DWORD **)(v56 + v62) != v18)
      {
        v62 += 8;
        if (v63 == v62)
          goto LABEL_235;
      }
      BucketFor = (const void **)(v56 + v62);
LABEL_235:
      if (BucketFor != (const void **)(*((_QWORD *)v49 + 2) + 8 * *((unsigned int *)v49 + 7)))
        goto LABEL_104;
      goto LABEL_105;
    }
    v58 = *((_QWORD *)v49 + 2);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)(v49 + 8), v18);
    v56 = *((_QWORD *)v49 + 1);
    v58 = *((_QWORD *)v49 + 2);
    if (*BucketFor != v18)
    {
      if (v58 == v56)
        v59 = 28;
      else
        v59 = 24;
      BucketFor = (const void **)(v58 + 8 * *(unsigned int *)&v49[v59]);
      if (v58 == v56)
        v60 = 28;
      else
        v60 = 24;
      if (BucketFor == (const void **)(v58 + 8 * *(unsigned int *)&v49[v60]))
        goto LABEL_105;
LABEL_104:
      *BucketFor = (const void *)-2;
      ++*((_DWORD *)v49 + 8);
      goto LABEL_105;
    }
  }
  if (v58 == v56)
    v64 = 28;
  else
    v64 = 24;
  if (BucketFor != (const void **)(v58 + 8 * *(unsigned int *)&v49[v64]))
    goto LABEL_104;
LABEL_105:
  v65 = 0uLL;
  if (v18[2] == 1)
  {
    v65 = vdupq_n_s64(1uLL);
    v65.i64[0] = *(_QWORD *)v18;
  }
  v159 = v65;
  if (v155)
  {
    v66 = (v155 - 1) & (((unsigned __int32)v65.i32[0] >> 4) ^ ((unsigned __int32)v65.i32[0] >> 9));
    v67 = (char *)v154[0] + 56 * v66;
    v68 = *(_QWORD *)v67;
    if (*(_QWORD *)v67 == v65.i64[0])
    {
LABEL_120:
      v74 = *((_QWORD *)v67 + 2);
      if (v74 == *((_QWORD *)v67 + 1))
        v75 = 28;
      else
        v75 = 24;
      v76 = *(unsigned int *)&v67[v75];
      if ((_DWORD)v76)
      {
        v77 = 8 * v76;
        v78 = (uint64_t *)*((_QWORD *)v67 + 2);
        while ((unint64_t)*v78 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v78;
          v77 -= 8;
          if (!v77)
            goto LABEL_28;
        }
      }
      else
      {
        v78 = (uint64_t *)*((_QWORD *)v67 + 2);
      }
      v79 = (uint64_t *)(v74 + 8 * v76);
      if (v78 == v79)
        goto LABEL_28;
      v80 = *v78;
      while (1)
      {
        v81 = (uint64_t *)v151;
        v82 = v153;
        if (!v153)
          goto LABEL_206;
        v83 = v153 - 1;
        v84 = ((v80 >> 4) ^ (v80 >> 9)) & (v153 - 1);
        v85 = (char *)v151 + 56 * v84;
        v86 = *(_QWORD *)v85;
        if (v80 != *(_QWORD *)v85)
          break;
LABEL_147:
        v93 = (uint64_t *)*((_QWORD *)v85 + 1);
        v92 = (uint64_t *)*((_QWORD *)v85 + 2);
        v94 = v85 + 28;
        v95 = v85 + 24;
        if (v92 == v93)
          v95 = v94;
        v96 = *(unsigned int *)v95;
        if ((_DWORD)v96)
        {
          v97 = 8 * v96;
          v98 = v92;
          while ((unint64_t)*v98 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v98;
            v97 -= 8;
            if (!v97)
              goto LABEL_199;
          }
        }
        else
        {
          v98 = v92;
        }
        v99 = &v92[v96];
        if (v98 == v99)
          goto LABEL_199;
        v100 = *v98;
        do
        {
          v101 = v148;
          if (!v148)
            goto LABEL_183;
          v102 = ((v100 >> 4) ^ (v100 >> 9)) & (v148 - 1);
          v103 = (_QWORD *)((char *)v146 + 8 * v102);
          v104 = *v103;
          if (v100 == *v103)
            goto LABEL_175;
          v105 = 0;
          v106 = 1;
          while (v104 != -4096)
          {
            if (v105)
              v107 = 0;
            else
              v107 = v104 == -8192;
            if (v107)
              v105 = v103;
            v108 = v102 + v106++;
            v102 = v108 & (v148 - 1);
            v103 = (_QWORD *)((char *)v146 + 8 * v102);
            v104 = *v103;
            if (v100 == *v103)
              goto LABEL_175;
          }
          v111 = (char *)(v105 ? v105 : v103);
          if (4 * v147.i32[0] + 4 < 3 * v148)
          {
            if (v148 + ~v147.i32[0] - v147.i32[1] > v148 >> 3)
              goto LABEL_170;
          }
          else
          {
LABEL_183:
            v101 = 2 * v148;
          }
          llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow((uint64_t)&v146, v101);
          v112 = v148 - 1;
          v113 = (v148 - 1) & ((v100 >> 4) ^ (v100 >> 9));
          v111 = (char *)v146 + 8 * v113;
          v114 = *(_QWORD *)v111;
          if (v100 == *(_QWORD *)v111)
          {
LABEL_185:
            ++v147.i32[0];
            if (v100 == -4096)
              goto LABEL_172;
LABEL_171:
            --v147.i32[1];
            goto LABEL_172;
          }
          v115 = 0;
          v116 = 1;
          while (v114 != -4096)
          {
            if (v115)
              v117 = 0;
            else
              v117 = v114 == -8192;
            if (v117)
              v115 = v111;
            v118 = v113 + v116++;
            v113 = v118 & v112;
            v111 = (char *)v146 + 8 * (v118 & v112);
            v114 = *(_QWORD *)v111;
            if (v100 == *(_QWORD *)v111)
              goto LABEL_185;
          }
          if (v115)
            v111 = v115;
LABEL_170:
          v109 = *(_QWORD *)v111;
          ++v147.i32[0];
          if (v109 != -4096)
            goto LABEL_171;
LABEL_172:
          *(_QWORD *)v111 = v100;
          v110 = v150;
          if (v150 >= (unint64_t)HIDWORD(v150))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, &v151, v150 + 1, 8);
            v110 = v150;
          }
          *((_QWORD *)v149 + v110) = v100;
          LODWORD(v150) = v150 + 1;
          do
          {
LABEL_175:
            if (++v98 == v99)
              goto LABEL_199;
            v100 = *v98;
          }
          while ((unint64_t)*v98 >= 0xFFFFFFFFFFFFFFFELL);
        }
        while (v98 != v99);
        do
        {
LABEL_199:
          if (++v78 == v79)
            goto LABEL_28;
          v80 = *v78;
        }
        while ((unint64_t)*v78 >= 0xFFFFFFFFFFFFFFFELL);
        if (v78 == v79)
        {
LABEL_28:
          v17 = v150;
          if (!(_DWORD)v150)
            goto LABEL_250;
          goto LABEL_29;
        }
      }
      v87 = 0;
      v88 = 1;
      while (v86 != -4096)
      {
        if (v87)
          v89 = 0;
        else
          v89 = v86 == -8192;
        if (v89)
          v87 = v85;
        v90 = v84 + v88++;
        v84 = v90 & v83;
        v85 = (char *)v151 + 56 * (v90 & v83);
        v86 = *(_QWORD *)v85;
        if (v80 == *(_QWORD *)v85)
          goto LABEL_147;
      }
      if (v87)
        v85 = v87;
      if (4 * (int)v152 + 4 < 3 * v153)
      {
        if (v153 + ~(_DWORD)v152 - HIDWORD(v152) > v153 >> 3)
          goto LABEL_144;
        v119 = v153;
      }
      else
      {
LABEL_206:
        v119 = 2 * v153;
      }
      v120 = (v119 - 1) | ((unint64_t)(v119 - 1) >> 1);
      v121 = v120 | (v120 >> 2) | ((v120 | (v120 >> 2)) >> 4);
      v122 = ((v121 | (v121 >> 8)) >> 16) | v121 | (v121 >> 8);
      if ((v122 + 1) > 0x40)
        v123 = v122 + 1;
      else
        v123 = 64;
      v153 = v123;
      buffer = (llvm *)llvm::allocate_buffer(56 * v123, (std::align_val_t)8uLL);
      v151 = buffer;
      if (v81)
      {
        llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::moveFromOldBuckets((uint64_t)&v151, v81, &v81[7 * v82]);
        llvm::deallocate_buffer((llvm *)v81, (void *)(56 * v82));
      }
      v152 = 0;
      v125 = v153;
      v126 = 56 * v153;
      v127 = buffer;
      if ((unint64_t)(v126 - 56) < 0x38)
        goto LABEL_217;
      v128 = (v126 - 56) / 0x38uLL + 1;
      v127 = (llvm *)((char *)buffer + 56 * (v128 & 0xFFFFFFFFFFFFFFELL));
      v129 = v128 & 0xFFFFFFFFFFFFFFELL;
      v130 = buffer;
      do
      {
        *(_QWORD *)v130 = -4096;
        *((_QWORD *)v130 + 7) = -4096;
        v130 = (llvm *)((char *)v130 + 112);
        v129 -= 2;
      }
      while (v129);
      if (v128 != (v128 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_217:
        v131 = (llvm *)((char *)buffer + v126);
        do
        {
          *(_QWORD *)v127 = -4096;
          v127 = (llvm *)((char *)v127 + 56);
        }
        while (v127 != v131);
      }
      v132 = v125 - 1;
      v133 = (v125 - 1) & ((v80 >> 4) ^ (v80 >> 9));
      v85 = (char *)buffer + 56 * v133;
      v134 = *(_QWORD *)v85;
      if (v80 == *(_QWORD *)v85)
      {
LABEL_220:
        LODWORD(v152) = v152 + 1;
        if (v80 == -4096)
          goto LABEL_146;
        goto LABEL_145;
      }
      v135 = 0;
      v136 = 1;
      while (v134 != -4096)
      {
        if (v135)
          v137 = 0;
        else
          v137 = v134 == -8192;
        if (v137)
          v135 = v85;
        v138 = v133 + v136++;
        v133 = v138 & v132;
        v85 = (char *)buffer + 56 * (v138 & v132);
        v134 = *(_QWORD *)v85;
        if (v80 == *(_QWORD *)v85)
          goto LABEL_220;
      }
      if (v135)
        v85 = v135;
LABEL_144:
      v91 = *(_QWORD *)v85;
      LODWORD(v152) = v152 + 1;
      if (v91 == -4096)
      {
LABEL_146:
        *(_QWORD *)v85 = v80;
        *((_QWORD *)v85 + 1) = v85 + 40;
        *((_QWORD *)v85 + 2) = v85 + 40;
        *((_QWORD *)v85 + 3) = 2;
        *((_DWORD *)v85 + 8) = 0;
        goto LABEL_147;
      }
LABEL_145:
      --HIDWORD(v152);
      goto LABEL_146;
    }
    v69 = 0;
    v70 = 1;
    while (v68 != -4096)
    {
      if (v69)
        v71 = 0;
      else
        v71 = v68 == -8192;
      if (v71)
        v69 = v67;
      v72 = v66 + v70++;
      v66 = v72 & (v155 - 1);
      v67 = (char *)v154[0] + 56 * v66;
      v68 = *(_QWORD *)v67;
      if (*(_QWORD *)v67 == v65.i64[0])
        goto LABEL_120;
    }
    if (v69)
      v73 = v69;
    else
      v73 = v67;
  }
  else
  {
    v73 = 0;
  }
  v67 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>((uint64_t)v154, v73, v159.i64);
  goto LABEL_120;
}

uint64_t sub_18070CFF4()
{
  uint64_t v0;
  int v2;
  uint64_t v3;

  *(_DWORD *)(v0 + 168) = v2;
  *(_QWORD *)(v0 + 176) = v3;
  return v0;
}

uint64_t `anonymous namespace'::OperationConverter::convertOperations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  mlir::ForwardIterator *v12;
  uint64_t Context;
  mlir::ConversionPatternRewriter *v14;
  char *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;
  int v20;
  int64x2_t *v21;
  char *v22;
  int *v23;
  char *v24;
  __int128 v25;
  char *v26;
  int *v27;
  char *v28;
  __int128 v29;
  char v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  unsigned __int16 v39;
  _BOOL4 v40;
  char *v41;
  int *v42;
  char *v43;
  __int128 v44;
  char *v45;
  int *v46;
  char *v47;
  __int128 v48;
  _QWORD **v49;
  _QWORD **v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  _anonymous_namespace_::OperationTransactionState *v64;
  uint64_t v65;
  uint64_t v66;
  mlir::Operation **v67;
  uint64_t v68;
  mlir::Operation *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _anonymous_namespace_::OperationTransactionState *v76;
  uint64_t v77;
  uint64_t v78;
  mlir::Operation **v79;
  uint64_t v80;
  mlir::Operation *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int **v98;
  unsigned int **v99;
  unsigned int *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t i;
  uint64_t v105;
  uint64_t v106;
  mlir::GenericProgramPoint *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t j;
  _QWORD **NextResultAtOffset;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t k;
  uint64_t v126;
  uint64_t v127;
  mlir::GenericProgramPoint *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t m;
  _QWORD **v135;
  _QWORD *v136;
  _QWORD *v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  int32x2_t *v143;
  __int32 v144;
  int32x2_t v145;
  __int32 v146;
  mlir::detail::ConversionPatternRewriterImpl *v147;
  mlir *v149;
  mlir::Operation *v150;
  const mlir::ConversionTarget *v151;
  const mlir::FrozenRewritePatternSet *v152;
  _QWORD v153[3];
  __int128 v154;
  void *v155;
  int v156;
  mlir::detail::ConversionPatternRewriterImpl *v157;
  _QWORD v158[4];
  __int16 v159;
  uint64_t *v160;
  int v161;
  const char *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  _BYTE v166[48];
  void **v167;
  unsigned int v168[4];
  void *v169;
  unsigned int *v170;
  _BYTE v171[96];
  void *v172;
  _QWORD *v173;
  void *__p;
  _QWORD **v175;
  char v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 1;
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 96);
  v164 = v166;
  v165 = 0x600000000;
  v11 = 8 * a3;
  do
  {
    v12 = *(mlir::ForwardIterator **)(a2 + v9);
    v167 = &v164;
    *(_QWORD *)v168 = v10;
    v9 += 8;
  }
  while (v11 != v9);
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a2 + 24));
  v154 = 0u;
  v156 = 1;
  v153[0] = off_1E0E47C50;
  v153[1] = Context;
  v155 = &unk_1E0E47CF0;
  v15 = (char *)operator new(0x4E0uLL);
  *(_OWORD *)v15 = 0u;
  *((_DWORD *)v15 + 4) = 0;
  *(_OWORD *)(v15 + 24) = 0u;
  *((_DWORD *)v15 + 10) = 0;
  *((_OWORD *)v15 + 3) = 0u;
  *((_DWORD *)v15 + 16) = 0;
  *(_OWORD *)(v15 + 72) = 0u;
  *((_DWORD *)v15 + 22) = 0;
  *((_QWORD *)v15 + 12) = v15 + 112;
  *(_OWORD *)(v15 + 136) = 0u;
  *((_DWORD *)v15 + 38) = 0;
  *((_OWORD *)v15 + 10) = 0u;
  *((_DWORD *)v15 + 44) = 0;
  *(_OWORD *)(v15 + 104) = 0u;
  *((_DWORD *)v15 + 32) = 0;
  *((_QWORD *)v15 + 15) = 0;
  *((_QWORD *)v15 + 23) = v153;
  *((_QWORD *)v15 + 24) = v15 + 264;
  *((_QWORD *)v15 + 25) = v15 + 216;
  *((_QWORD *)v15 + 26) = 0x600000000;
  *((_QWORD *)v15 + 33) = v15 + 280;
  *((_QWORD *)v15 + 34) = 0x200000000;
  *((_DWORD *)v15 + 86) = 0;
  *(_OWORD *)(v15 + 328) = 0u;
  *((_QWORD *)v15 + 44) = v15 + 368;
  *((_QWORD *)v15 + 45) = 0;
  *((_QWORD *)v15 + 46) = v15 + 384;
  *((_QWORD *)v15 + 47) = 0x400000000;
  *((_QWORD *)v15 + 52) = v15 + 432;
  *((_QWORD *)v15 + 53) = 0x400000000;
  *((_DWORD *)v15 + 152) = 0;
  *((_OWORD *)v15 + 37) = 0u;
  *((_QWORD *)v15 + 77) = v15 + 632;
  *((_QWORD *)v15 + 78) = 0;
  *((_QWORD *)v15 + 79) = v15 + 648;
  *((_QWORD *)v15 + 80) = 0x400000000;
  *((_QWORD *)v15 + 149) = v15 + 1208;
  *((_QWORD *)v15 + 150) = 0x400000000;
  *((_QWORD *)v15 + 153) = 0;
  v157 = (mlir::detail::ConversionPatternRewriterImpl *)v15;
  v153[2] = &v155;
  *((_QWORD *)v15 + 154) = a4;
  *((_QWORD *)v15 + 155) = a5;
  if ((_DWORD)v165)
  {
    v16 = (uint64_t **)v164;
    v17 = (uint64_t **)((char *)v164 + 8 * v165);
    while (1)
    {
      v18 = *v16;
      v160 = v18;
      v20 = *(_DWORD *)(a1 + 168);
      if (!v19)
        break;
      if (v20 == 2)
      {
        v21 = *(int64x2_t **)(a1 + 176);
LABEL_11:
        llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v21, (uint64_t *)&v160, (uint64_t)&v167);
      }
LABEL_7:
      if (++v16 == v17)
        goto LABEL_94;
    }
    if (v20)
    {
      if (v20 != 1)
        goto LABEL_7;
      v159 = 257;
      mlir::Operation::emitError(v18, (uint64_t)v158, (uint64_t)&v167);
      if (v167)
      {
        v161 = 3;
        v162 = "failed to legalize operation '";
        v163 = 30;
        v22 = (char *)v169;
        if (v170 >= HIDWORD(v170))
        {
          v55 = v170 + 1;
          if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
          {
            v59 = (char *)&v161 - (_BYTE *)v169;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v55, 24);
            v22 = (char *)v169;
            v23 = (int *)((char *)v169 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v55, 24);
            v23 = &v161;
            v22 = (char *)v169;
          }
        }
        else
        {
          v23 = &v161;
        }
        v24 = &v22[24 * v170];
        v25 = *(_OWORD *)v23;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v23 + 2);
        *(_OWORD *)v24 = v25;
        LODWORD(v170) = (_DWORD)v170 + 1;
        if (v167)
        {
          mlir::Diagnostic::operator<<((uint64_t)v168, v160[6]);
          if (v167)
          {
            v161 = 3;
            v162 = "'";
            v163 = 1;
            v26 = (char *)v169;
            if (v170 >= HIDWORD(v170))
            {
              v56 = v170 + 1;
              if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
              {
                v60 = (char *)&v161 - (_BYTE *)v169;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v56, 24);
                v26 = (char *)v169;
                v27 = (int *)((char *)v169 + v60);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v56, 24);
                v27 = &v161;
                v26 = (char *)v169;
              }
            }
            else
            {
              v27 = &v161;
            }
            v28 = &v26[24 * v170];
            v29 = *(_OWORD *)v27;
            *((_QWORD *)v28 + 2) = *((_QWORD *)v27 + 2);
            *(_OWORD *)v28 = v29;
            LODWORD(v170) = (_DWORD)v170 + 1;
          }
        }
      }
      v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v167);
      if (v167)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v167);
      if (!v176)
        goto LABEL_6;
      v31 = (_QWORD **)__p;
      if (__p)
      {
        v32 = v175;
        v33 = __p;
        if (v175 != __p)
        {
          do
            v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          v33 = __p;
        }
        v175 = v31;
        operator delete(v33);
      }
      v34 = v172;
      if (!v172)
        goto LABEL_74;
      v35 = v173;
      v36 = v172;
      if (v173 == v172)
        goto LABEL_73;
      do
      {
        v38 = (void *)*--v35;
        v37 = v38;
        *v35 = 0;
        if (v38)
          operator delete[](v37);
      }
      while (v35 != v34);
      goto LABEL_72;
    }
    mlir::ConversionTarget::getOpInfo(*(_QWORD *)(a1 + 96), v18[6], (uint64_t)&v167);
    if (!v171[0])
      goto LABEL_47;
    if ((_DWORD)v167 == 1)
    {
      v158[0] = v18;
      if (!v170)
      {
        v149 = (mlir *)std::__throw_bad_function_call[abi:nn180100]();
        mlir::applyFullConversion(v149, v150, v151, v152);
      }
      v39 = (*(uint64_t (**)(unsigned int *, _QWORD *))(*(_QWORD *)v170 + 48))(v170, v158);
      if (v39 >= 0x100u)
      {
        v40 = v39 == 0;
        if (!v171[0])
          goto LABEL_49;
      }
      else
      {
        v40 = 0;
        if (!v171[0])
          goto LABEL_49;
      }
    }
    else
    {
      v40 = (_DWORD)v167 == 2;
    }
    if (v170 == v168)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v168 + 32))(v168);
      if (!v40)
      {
LABEL_47:
        v21 = *(int64x2_t **)(a1 + 176);
        if (!v21)
          goto LABEL_7;
        goto LABEL_11;
      }
      goto LABEL_50;
    }
    if (v170)
    {
      (*(void (**)(void))(*(_QWORD *)v170 + 40))();
      if (!v40)
        goto LABEL_47;
LABEL_50:
      v159 = 257;
      mlir::Operation::emitError(v160, (uint64_t)v158, (uint64_t)&v167);
      if (v167)
      {
        v161 = 3;
        v162 = "failed to legalize operation '";
        v163 = 30;
        v41 = (char *)v169;
        if (v170 >= HIDWORD(v170))
        {
          v57 = v170 + 1;
          if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
          {
            v61 = (char *)&v161 - (_BYTE *)v169;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v57, 24);
            v41 = (char *)v169;
            v42 = (int *)((char *)v169 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v57, 24);
            v42 = &v161;
            v41 = (char *)v169;
          }
        }
        else
        {
          v42 = &v161;
        }
        v43 = &v41[24 * v170];
        v44 = *(_OWORD *)v42;
        *((_QWORD *)v43 + 2) = *((_QWORD *)v42 + 2);
        *(_OWORD *)v43 = v44;
        LODWORD(v170) = (_DWORD)v170 + 1;
        if (v167)
        {
          mlir::Diagnostic::operator<<((uint64_t)v168, v160[6]);
          if (v167)
          {
            v161 = 3;
            v162 = "' that was explicitly marked illegal";
            v163 = 36;
            v45 = (char *)v169;
            if (v170 >= HIDWORD(v170))
            {
              v58 = v170 + 1;
              if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
              {
                v62 = (char *)&v161 - (_BYTE *)v169;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v58, 24);
                v45 = (char *)v169;
                v46 = (int *)((char *)v169 + v62);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v58, 24);
                v46 = &v161;
                v45 = (char *)v169;
              }
            }
            else
            {
              v46 = &v161;
            }
            v47 = &v45[24 * v170];
            v48 = *(_OWORD *)v46;
            *((_QWORD *)v47 + 2) = *((_QWORD *)v46 + 2);
            *(_OWORD *)v47 = v48;
            LODWORD(v170) = (_DWORD)v170 + 1;
          }
        }
      }
      v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v167);
      if (v167)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v167);
      if (!v176)
      {
LABEL_6:
        if (!v30)
        {
          v89 = *((_DWORD *)v15 + 160);
          if (v89)
          {
            v90 = (uint64_t *)*((_QWORD *)v15 + 79);
            v91 = &v90[17 * v89];
            do
            {
              *(_QWORD *)(*v90 + 24) = v90[1];
              mlir::Operation::setAttrs(*v90, v90[2]);
              v92 = (uint64_t *)*v90;
              mlir::ValueRange::ValueRange((unint64_t *)&v167, v90[3], *((unsigned int *)v90 + 8));
              mlir::Operation::setOperands(v92, (uint64_t)v167, v168[0]);
              v93 = *((unsigned int *)v90 + 28);
              if ((_DWORD)v93)
              {
                v94 = 0;
                v95 = v90[13];
                v96 = 8 * v93;
                do
                {
                  mlir::Operation::setSuccessor((mlir::Operation *)*v90, *(mlir::Block **)(v95 + 8 * v94), v94);
                  ++v94;
                  v96 -= 8;
                }
                while (v96);
              }
              v90 += 17;
            }
            while (v90 != v91);
          }
          mlir::detail::ConversionPatternRewriterImpl::undoBlockActions((int32x2_t *)v15, 0);
          v97 = *((_DWORD *)v15 + 68);
          if (v97)
          {
            v98 = (unsigned int **)*((_QWORD *)v15 + 33);
            v99 = &v98[3 * v97];
            do
            {
              v100 = *v98;
              v101 = (*v98)[11];
              if ((v101 & 0x7FFFFF) != 0)
              {
                v102 = (((unint64_t)&v100[4 * ((v101 >> 23) & 1) + 17] + ((v101 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v100[10];
                v103 = v102 + 24 * (v101 & 0x7FFFFF);
                do
                {
                  for (i = *(_QWORD *)(v102 + 8); i != v102; i = *(_QWORD *)(i + 8))
                  {
                    if (i)
                      v105 = i - 8;
                    else
                      v105 = 0;
                    for (; *(_QWORD *)(v105 + 32) != v105 + 32; v108[1] = 0)
                    {
                      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v105 + 40));
                      v107 = (mlir::GenericProgramPoint *)v106;
                      llvm::ilist_traits<mlir::Operation>::removeNodeFromList(v105 + 32, v106);
                      mlir::GenericProgramPoint::~GenericProgramPoint(v107);
                      v109 = *v108;
                      v110 = (uint64_t *)v108[1];
                      *v110 = *v108;
                      *(_QWORD *)(v109 + 8) = v110;
                      *v108 = 0;
                    }
                    mlir::Block::dropAllDefinedValueUses((_QWORD *)v105);
                  }
                  v102 += 24;
                }
                while (v102 != v103);
              }
              v111 = v100[9];
              if ((_DWORD)v111)
                v112 = (uint64_t)(v100 - 4);
              else
                v112 = 0;
              if ((_DWORD)v111)
              {
                for (j = 0; j != v111; ++j)
                {
                  NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v112, j);
                  while (1)
                  {
                    v115 = *NextResultAtOffset;
                    if (!*NextResultAtOffset)
                      break;
                    v116 = (_QWORD *)v115[1];
                    if (v116)
                    {
                      *v116 = *v115;
                      if (*v115)
                        *(_QWORD *)(*v115 + 8) = v115[1];
                    }
                    *v115 = 0;
                    v115[1] = 0;
                    v115[3] = 0;
                  }
                }
              }
              mlir::Operation::erase((mlir::Operation *)v100);
              v98 += 3;
            }
            while (v98 != v99);
          }
          v117 = *((unsigned int *)v15 + 52);
          if ((_DWORD)v117)
          {
            v118 = *((_QWORD *)v15 + 25);
            v119 = v118 + 8 * v117;
            do
            {
              v121 = *(unsigned int **)(v119 - 8);
              v119 -= 8;
              v120 = v121;
              v122 = v121[11];
              if ((v122 & 0x7FFFFF) != 0)
              {
                v123 = (((unint64_t)&v120[4 * ((v122 >> 23) & 1) + 17] + ((v122 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v120[10];
                v124 = v123 + 24 * (v122 & 0x7FFFFF);
                do
                {
                  for (k = *(_QWORD *)(v123 + 8); k != v123; k = *(_QWORD *)(k + 8))
                  {
                    if (k)
                      v126 = k - 8;
                    else
                      v126 = 0;
                    for (; *(_QWORD *)(v126 + 32) != v126 + 32; v129[1] = 0)
                    {
                      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v126 + 40));
                      v128 = (mlir::GenericProgramPoint *)v127;
                      llvm::ilist_traits<mlir::Operation>::removeNodeFromList(v126 + 32, v127);
                      mlir::GenericProgramPoint::~GenericProgramPoint(v128);
                      v130 = *v129;
                      v131 = (uint64_t *)v129[1];
                      *v131 = *v129;
                      *(_QWORD *)(v130 + 8) = v131;
                      *v129 = 0;
                    }
                    mlir::Block::dropAllDefinedValueUses((_QWORD *)v126);
                  }
                  v123 += 24;
                }
                while (v123 != v124);
              }
              v132 = v120[9];
              if ((_DWORD)v132)
                v133 = (uint64_t)(v120 - 4);
              else
                v133 = 0;
              if ((_DWORD)v132)
              {
                for (m = 0; m != v132; ++m)
                {
                  v135 = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v133, m);
                  while (1)
                  {
                    v136 = *v135;
                    if (!*v135)
                      break;
                    v137 = (_QWORD *)v136[1];
                    if (v137)
                    {
                      *v137 = *v136;
                      if (*v136)
                        *(_QWORD *)(*v136 + 8) = v136[1];
                    }
                    *v136 = 0;
                    v136[1] = 0;
                    v136[3] = 0;
                  }
                }
              }
              mlir::Operation::erase((mlir::Operation *)v120);
            }
            while (v119 != v118);
          }
LABEL_183:
          v74 = 0;
          goto LABEL_193;
        }
        goto LABEL_7;
      }
      v49 = (_QWORD **)__p;
      if (__p)
      {
        v50 = v175;
        v51 = __p;
        if (v175 != __p)
        {
          do
            v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          v51 = __p;
        }
        v175 = v49;
        operator delete(v51);
      }
      v34 = v172;
      if (!v172)
      {
LABEL_74:
        if (v169 != v171)
          free(v169);
        goto LABEL_6;
      }
      v52 = v173;
      v36 = v172;
      if (v173 == v172)
      {
LABEL_73:
        v173 = v34;
        operator delete(v36);
        goto LABEL_74;
      }
      do
      {
        v54 = (void *)*--v52;
        v53 = v54;
        *v52 = 0;
        if (v54)
          operator delete[](v53);
      }
      while (v52 != v34);
LABEL_72:
      v36 = v172;
      goto LABEL_73;
    }
LABEL_49:
    if (!v40)
      goto LABEL_47;
    goto LABEL_50;
  }
LABEL_94:
  {
    if (*(_DWORD *)(a1 + 168) == 2)
    {
      v63 = *((unsigned int *)v15 + 160);
      if ((_DWORD)v63)
      {
        v64 = (_anonymous_namespace_::OperationTransactionState *)*((_QWORD *)v15 + 79);
        v65 = 136 * v63;
        do
        {
          v64 = (_anonymous_namespace_::OperationTransactionState *)((char *)v64 + 136);
          v65 -= 136;
        }
        while (v65);
      }
      mlir::detail::ConversionPatternRewriterImpl::undoBlockActions((int32x2_t *)v15, 0);
      v66 = *((unsigned int *)v15 + 68);
      if ((_DWORD)v66)
      {
        v67 = (mlir::Operation **)*((_QWORD *)v15 + 33);
        v68 = 24 * v66;
        do
        {
          v69 = *v67;
          v67 += 3;
          detachNestedAndErase(v69);
          v68 -= 24;
        }
        while (v68);
      }
      v70 = *((unsigned int *)v15 + 52);
      if ((_DWORD)v70)
      {
        v71 = *((_QWORD *)v15 + 25);
        v72 = 8 * v70;
        v73 = v71 - 8;
        do
        {
          detachNestedAndErase(*(mlir::Operation **)(v73 + v72));
          v72 -= 8;
        }
        while (v72);
LABEL_192:
        v74 = 1;
        goto LABEL_193;
      }
    }
    else
    {
      mlir::detail::ConversionPatternRewriterImpl::applyRewrites((mlir::detail::ConversionPatternRewriterImpl *)v15);
      v85 = *(_QWORD *)(a1 + 176);
      if (v85)
      {
        v86 = *((unsigned int *)v15 + 90);
        if ((_DWORD)v86 && *(_DWORD *)(v85 + 16))
        {
          v87 = (_QWORD *)*((_QWORD *)v15 + 44);
          v88 = &v87[2 * v86];
          do
          {
            v143 = *(int32x2_t **)(a1 + 176);
            v144 = v143[2].i32[0];
            if (v144)
            {
              v145 = *v143;
              v146 = v144 - 1;
              LODWORD(v140) = ((*v87 >> 4) ^ (*v87 >> 9)) & (v144 - 1);
              v142 = (uint64_t *)(*(_QWORD *)v143 + 8 * v140);
              v141 = *v142;
              if (*v87 == *v142)
              {
LABEL_187:
                *v142 = -8192;
                v143[1] = vadd_s32(v143[1], (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                v139 = 1;
                while (v141 != -4096)
                {
                  v138 = v140 + v139++;
                  v140 = v138 & v146;
                  v141 = *(_QWORD *)(*(_QWORD *)&v145 + 8 * v140);
                  if (*v87 == v141)
                  {
                    v142 = (uint64_t *)(*(_QWORD *)&v145 + 8 * v140);
                    goto LABEL_187;
                  }
                }
              }
            }
            v87 += 2;
          }
          while (v87 != v88);
        }
        goto LABEL_192;
      }
    }
    v74 = 1;
    goto LABEL_193;
  }
  v75 = *((unsigned int *)v15 + 160);
  if ((_DWORD)v75)
  {
    v76 = (_anonymous_namespace_::OperationTransactionState *)*((_QWORD *)v15 + 79);
    v77 = 136 * v75;
    do
    {
      v76 = (_anonymous_namespace_::OperationTransactionState *)((char *)v76 + 136);
      v77 -= 136;
    }
    while (v77);
  }
  mlir::detail::ConversionPatternRewriterImpl::undoBlockActions((int32x2_t *)v15, 0);
  v78 = *((unsigned int *)v15 + 68);
  if ((_DWORD)v78)
  {
    v79 = (mlir::Operation **)*((_QWORD *)v15 + 33);
    v80 = 24 * v78;
    do
    {
      v81 = *v79;
      v79 += 3;
      detachNestedAndErase(v81);
      v80 -= 24;
    }
    while (v80);
  }
  v82 = *((unsigned int *)v15 + 52);
  if (!(_DWORD)v82)
    goto LABEL_183;
  v83 = *((_QWORD *)v15 + 25);
  v74 = 8 * v82;
  v84 = v83 - 8;
  do
  {
    detachNestedAndErase(*(mlir::Operation **)(v84 + v74));
    v74 -= 8;
  }
  while (v74);
LABEL_193:
  v147 = v157;
  v157 = 0;
  if (v147)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v147);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v153);
  if (v164 != v166)
    free(v164);
  return v74;
}

void mlir::applyFullConversion(mlir *this, mlir::Operation *a2, const mlir::ConversionTarget *a3, const mlir::FrozenRewritePatternSet *a4)
{
  _BYTE v4[184];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
}

void sub_18070DE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  mlir::PatternApplicator::~PatternApplicator((mlir::PatternApplicator *)(v6 + 104));
}

void mlir::applyAnalysisConversion(uint64_t a1, uint64_t a2, mlir::FrozenRewritePatternSet *a3)
{
  _BYTE v3[184];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
}

void sub_18070DEBC(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v4 = va_arg(va1, _QWORD);
  mlir::PatternApplicator::~PatternApplicator((mlir::PatternApplicator *)(v3 + 104));
}

uint64_t mlir::ConversionPatternRewriter::canRecoverFromRewriteFailure(mlir::ConversionPatternRewriter *this)
{
  return 1;
}

_QWORD *llvm::MapVector<mlir::Block *,`anonymous namespace'::ArgConverter::ConvertedBlockInfo,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>>,llvm::SmallVector<std::pair<mlir::Block *,`anonymous namespace'::ArgConverter::ConvertedBlockInfo>,0u>>::erase(int32x2_t *a1, _QWORD *a2)
{
  __int32 v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int32x2_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v24;
  int v25;

  v4 = a1[2].i32[0];
  if (v4)
  {
    v5 = *a1;
    v6 = v4 - 1;
    LODWORD(v7) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
    v8 = (uint64_t *)(*(_QWORD *)a1 + 16 * v7);
    v9 = *v8;
    if (*a2 == *v8)
    {
LABEL_3:
      *v8 = -8192;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v24 = 1;
      while (v9 != -4096)
      {
        v25 = v7 + v24++;
        v7 = v25 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v7);
        if (*a2 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
          goto LABEL_3;
        }
      }
    }
  }
  v10 = a2 + 8;
  v11 = a1[3];
  v12 = a1[4].u32[0];
  v13 = (_QWORD *)(*(_QWORD *)&v11 + (v12 << 6));
  if (a2 + 8 != v13)
  {
    do
    {
      *((_OWORD *)v10 - 4) = *(_OWORD *)v10;
      *(v10 - 1) = v10[7];
      v10 += 8;
    }
    while (v10 != v13);
    LODWORD(v12) = a1[4].i32[0];
    v11 = a1[3];
  }
  v14 = (v12 - 1);
  a1[4].i32[0] = v14;
  v15 = *(_QWORD *)&v11 + (v14 << 6);
  v16 = *(void **)(v15 + 16);
  if (v16 != (void *)(v15 + 32))
  {
    free(v16);
    v11 = a1[3];
    v14 = a1[4].u32[0];
  }
  if ((_QWORD *)(*(_QWORD *)&v11 + (v14 << 6)) != a2 && a1[1].i32[0])
  {
    v17 = a1[2].u32[0];
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      v19 = *a1;
      while ((**(_QWORD **)&v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)&v19 += 16;
        v18 -= 16;
        if (!v18)
          return a2;
      }
    }
    else
    {
      v19 = *a1;
    }
    v20 = *(_QWORD *)a1 + 16 * v17;
    if (*(_QWORD *)&v19 != v20)
    {
      v21 = ((uint64_t)a2 - *(_QWORD *)&v11) >> 6;
LABEL_19:
      v22 = *(unsigned int *)(*(_QWORD *)&v19 + 8);
      if (v21 < v22)
        *(_DWORD *)(*(_QWORD *)&v19 + 8) = v22 - 1;
      while (1)
      {
        *(_QWORD *)&v19 += 16;
        if (*(_QWORD *)&v19 == v20)
          break;
        if ((**(_QWORD **)&v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (*(_QWORD *)&v19 != v20)
            goto LABEL_19;
          return a2;
        }
      }
    }
  }
  return a2;
}

uint64_t llvm::SmallVectorImpl<std::optional<`anonymous namespace'::ArgConverter::ConvertedArgInfo>>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 24 * v8 - 7);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 24 * v9 - 7);
        v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *v7 = 0;
          return a1;
        }
      }
      else
      {
        v9 = 0;
        LODWORD(v10) = *v7;
        if (!*v7)
          goto LABEL_15;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      v9 = 0;
      LODWORD(v10) = *v7;
      if (!*v7)
        goto LABEL_15;
    }
    memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*(_QWORD *)a2 + 24 * v9), *(_QWORD *)a2 + 24 * v10 - (*(_QWORD *)a2 + 24 * v9));
    goto LABEL_15;
  }
  return a1;
}

uint64_t buildUnresolvedMaterialization(unsigned int a1, mlir::Block *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, mlir::GenericProgramPoint *a8, uint64_t a9, uint64_t *a10)
{
  mlir::Region *Parent;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v18;
  mlir::GenericProgramPoint **v19;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30[2];
  _QWORD v31[4];

  v31[3] = *MEMORY[0x1E0C80C00];
  v30[0] = a5;
  v30[1] = a6;
  v29 = a7;
  if (a6 == 1 && a7 == (*(_QWORD *)(mlir::ValueRange::dereference_iterator(v30, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return mlir::ValueRange::dereference_iterator(v30, 0);
  Parent = (mlir::Region *)mlir::Block::getParent(this);
  v28[0] = mlir::Region::getContext(Parent);
  v28[1] = 0;
  v28[2] = this;
  v28[3] = a3;
  v16 = mlir::OpBuilder::create<mlir::UnrealizedConversionCastOp,mlir::Type &,mlir::ValueRange &>((mlir::OpBuilder *)v28, a4, (uint64_t)&v29, v30);
  v17 = v16;
  v18 = *((unsigned int *)a10 + 2);
  if (v18 >= *((_DWORD *)a10 + 3))
  {
    v31[0] = v16;
    v31[1] = a9 & 0xFFFFFFFFFFFFFFFBLL | (4 * a1);
    v31[2] = a8;
    v21 = v18 + 1;
    v22 = *a10 + 24 * (unint64_t)v18 > (unint64_t)v31;
    if (*a10 <= (unint64_t)v31 && v22)
    {
      v27 = (char *)v31 - *a10;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a10, a10 + 2, v21, 24);
      v23 = *a10;
      v24 = &v27[*a10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a10, a10 + 2, v21, 24);
      v23 = *a10;
      v24 = (char *)v31;
    }
    v25 = v23 + 24 * *((unsigned int *)a10 + 2);
    v26 = *(_OWORD *)v24;
    *(_QWORD *)(v25 + 16) = *((_QWORD *)v24 + 2);
    *(_OWORD *)v25 = v26;
  }
  else
  {
    v19 = (mlir::GenericProgramPoint **)(*a10 + 24 * v18);
    *v19 = v16;
    v19[1] = (mlir::GenericProgramPoint *)(a9 & 0xFFFFFFFFFFFFFFFBLL | (4 * a1));
    v19[2] = a8;
  }
  ++*((_DWORD *)a10 + 2);
  return (uint64_t)v17 - 16;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::UnrealizedConversionCastOp,mlir::Type &,mlir::ValueRange &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  unint64_t v19[2];
  _QWORD v20[39];

  v20[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.unrealized_conversion_cast", (const unsigned __int8 *)0x22, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"builtin.unrealized_conversion_cast";
    v17[3] = 34;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::ValueRange::ValueRange(v19, a3, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v20, v19[0], v19[1], *a4, a4[1], 0, 0);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v12;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>,mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>::InsertIntoBucket<mlir::Region * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>,mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
  v20 = buffer + 2;
  v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 2) = -4096;
    *v20 = -4096;
    v20 += 4;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 2;
    }
    while (v18 != &buffer[2 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[2 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[2 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>,mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  mlir::Region *v21;
  void *v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v11 = &v7[2 * v10];
      v12 = v7 + 2;
      v13 = v10;
      do
      {
        *(v12 - 2) = -4096;
        *v12 = -4096;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[2 * v6];
    do
    {
      *v11 = -4096;
      v11 += 2;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v23 = 0;
          v24 = 1;
          while (v19 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v19 == -8192;
            if (v25)
              v23 = v18;
            v26 = v17 + v24++;
            v17 = v26 & v16;
            v18 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v26 & v16));
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_15;
          }
          if (v23)
            v18 = v23;
        }
LABEL_15:
        *v18 = v15;
        v20 = v4[1];
        v4[1] = 0;
        v18[1] = v20;
        ++*(_DWORD *)(a1 + 8);
        v21 = (mlir::Region *)v4[1];
        v4[1] = 0;
        if (v21)
        {
          mlir::Region::~Region(v21);
          operator delete(v22);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 __p;
  uint64_t v15;

  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a1);
  __p = *(_OWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a2);
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a3, (void *)(a3 + 32), 8, (uint64_t *)&v11);
  *(_OWORD *)(a3 + 96) = __p;
  *(_QWORD *)(a3 + 112) = v15;
  v15 = 0;
  __p = 0uLL;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a3 + 120, (void *)(a3 + 152), 8, (uint64_t *)&v6);
  *(_OWORD *)(a3 + 216) = v9;
  *(_QWORD *)(a3 + 232) = v10;
  v10 = 0;
  v9 = 0uLL;
  if (v7 != v6)
    free(v7);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v12 != v11)
    free(v12);
}

void llvm::depth_first<mlir::Block *>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _OWORD v8[4];
  uint64_t v9;
  void *__p;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD v17[8];
  void *v18;
  void *v19;
  char *v20;

  v3 = *a1;
  v13 = v17;
  v14 = v17;
  v16 = 0;
  v15 = 0x100000008;
  v17[0] = v3;
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = v3;
  v4[8] = 0;
  v4[24] = 0;
  v19 = v4 + 32;
  v20 = v4 + 32;
  v18 = v4;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  __p = 0;
  v5 = (char *)v8 + 8;
  v6 = (char *)v8 + 8;
  v7 = 8;
  v11 = 0;
  v12 = 0;
  llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v13, (uint64_t)&v5, a2);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v6 != v5)
    free(v6);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v14 != v13)
    free(v14);
}

void llvm::make_pointee_range<llvm::iterator_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>> &,llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>(llvm::SmallPtrSetImplBase *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  void *v14;
  void *v15;
  const void *v16;
  void *v17[2];
  char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  __int128 __p;
  char *v23;
  void *v24;
  void *v25;
  const void *v26;
  __int128 v27;
  char *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  void *v34;
  void *v35;
  _BYTE v36[64];
  __int128 v37;
  char *v38;

  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v24, &v26, a1);
  v27 = 0uLL;
  v28 = 0;
  v5 = (_BYTE *)*((_QWORD *)a1 + 12);
  v4 = (_BYTE *)*((_QWORD *)a1 + 13);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      goto LABEL_28;
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)&v27 = v7;
    *((_QWORD *)&v27 + 1) = v7;
    v28 = &v7[32 * (v6 >> 5)];
    v8 = v6 & 0xFFFFFFFFFFFFFFE0;
    memcpy(v7, v5, v8);
    *((_QWORD *)&v27 + 1) = &v7[v8];
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v34, v36, 8, (uint64_t *)&v24);
  v37 = v27;
  v38 = v28;
  v28 = 0;
  v27 = 0uLL;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v29, &v31, 8, (uint64_t *)&v34);
  v32 = v37;
  v33 = v38;
  v38 = 0;
  v37 = 0uLL;
  if (v35 != v34)
    free(v35);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v14, &v16, (llvm::SmallPtrSetImplBase *)((char *)a1 + 120));
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v10 = (_BYTE *)*((_QWORD *)a1 + 27);
  v9 = (_BYTE *)*((_QWORD *)a1 + 28);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      v12 = (char *)operator new(v9 - v10);
      v17[0] = v12;
      v17[1] = v12;
      v18 = &v12[32 * (v11 >> 5)];
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v12, v10, v13);
      v17[1] = &v12[v13];
      goto LABEL_9;
    }
LABEL_28:
    abort();
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v34, v36, 8, (uint64_t *)&v14);
  v37 = *(_OWORD *)v17;
  v38 = v18;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v19, &v21, 8, (uint64_t *)&v34);
  __p = v37;
  v23 = v38;
  v38 = 0;
  v37 = 0uLL;
  if (v35 != v34)
    free(v35);
  llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v29, (uint64_t)&v19, a2);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v20 != v19)
    free(v20);
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v15 != v14)
    free(v15);
  if ((_QWORD)v32)
  {
    *((_QWORD *)&v32 + 1) = v32;
    operator delete((void *)v32);
  }
  if (v30 != v29)
    free(v30);
  if ((_QWORD)v27)
  {
    *((_QWORD *)&v27 + 1) = v27;
    operator delete((void *)v27);
  }
  if (v25 != v24)
    free(v25);
}

_QWORD *std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E0E50300;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::~__func(char *__p)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)__p = &off_1E0E50300;
  v2 = __p + 8;
  v3 = __p + 40;
  v4 = (char *)*((_QWORD *)__p + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new(0x48uLL);
  *v2 = &off_1E0E50300;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    v2[4] = 0;
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      goto LABEL_6;
LABEL_10:
    v2[8] = 0;
    return v2;
  }
  if (v4 == a1 + 8)
  {
    v2[4] = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      goto LABEL_6;
    goto LABEL_10;
  }
  v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  v5 = *(_QWORD *)(a1 + 64);
  if (!v5)
    goto LABEL_10;
LABEL_6:
  if (v5 == a1 + 40)
  {
    v2[8] = v2 + 5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    v2[8] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  return v2;
}

uint64_t std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  *a2 = &off_1E0E50300;
  v4 = a2 + 1;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    a2[4] = 0;
    result = *(_QWORD *)(a1 + 64);
    if (result)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v5 == a1 + 8)
  {
    a2[4] = v4;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    result = *(_QWORD *)(a1 + 64);
    if (result)
      goto LABEL_6;
LABEL_9:
    a2[8] = 0;
    return result;
  }
  a2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v4);
  result = *(_QWORD *)(a1 + 64);
  if (!result)
    goto LABEL_9;
LABEL_6:
  if (result == a1 + 40)
  {
    a2[8] = a2 + 5;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    a2[8] = result;
  }
  return result;
}

uint64_t std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::destroy(uint64_t *a1)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = a1[4];
  if ((uint64_t *)result == v2)
    return (*(uint64_t (**)(uint64_t *))(*v2 + 32))(v2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = __p + 40;
  v4 = (char *)*((_QWORD *)__p + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v10 = *a2;
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v10);
    if (v5 > 0xFFu)
      return v5 | 0x100u;
    v10 = v3;
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v10);
      return v7 | (HIBYTE(v7) << 8);
    }
  }
  v9 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::target(v9);
}

uint64_t std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL24composeLegalityCallbacksNSt3__18functionIFNS_8optionalIbEEPN4mlir9OperationEEEES7_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL24composeLegalityCallbacksNSt3__18functionIFNS_8optionalIbEEPN4mlir9OperationEEEES7_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL24composeLegalityCallbacksNSt3__18functionIFNS_8optionalIbEEPN4mlir9OperationEEEES7_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL24composeLegalityCallbacksNSt3__18functionIFNS_8optionalIbEEPN4mlir9OperationEEEES7_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::target_type()
{
}

void llvm::function_ref<void ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::buildLegalizationGraph(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  char *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  void **v45;
  int64x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54[2];
  uint64_t v55;
  _BYTE v56[24];
  _BYTE *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *(_DWORD *)(a2 + 8) == 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v7 = (void *)v6;
  else
    v7 = 0;
  v54[0] = v7;
  v54[1] = (void *)v5;
  if (!v5)
  {
    v11 = *a1;
    v12 = *(unsigned int *)(*a1 + 8);
    if (v12 >= *(_DWORD *)(*a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v11 + 16), v12 + 1, 8);
      LODWORD(v12) = *(_DWORD *)(v11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = a2;
    ++*(_DWORD *)(v11 + 8);
    return;
  }
  mlir::ConversionTarget::getOpInfo(*(_QWORD *)(v4 + 96), v6, (uint64_t)&v55);
  if (v58)
  {
    v8 = v55;
    v9 = v57;
    if (v57 == v56)
    {
      v10 = 4;
      v9 = v56;
    }
    else
    {
      if (!v57)
        goto LABEL_15;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_15:
    if (!v8)
      return;
  }
  v13 = a1[2];
  v14 = *(_DWORD *)(v13 + 16);
  if (v14)
  {
    v15 = v14 - 1;
    v16 = ((LODWORD(v54[0]) >> 4) ^ (LODWORD(v54[0]) >> 9)) & v15;
    v17 = (char *)(*(_QWORD *)v13 + 56 * v16);
    v18 = *(void **)v17;
    if (v54[0] == *(void **)v17)
      goto LABEL_29;
    v19 = 0;
    v20 = 1;
    while (v18 != (void *)-4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == (void *)-8192;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & v15;
      v17 = (char *)(*(_QWORD *)v13 + 56 * v16);
      v18 = *(void **)v17;
      if (v54[0] == *(void **)v17)
        goto LABEL_29;
    }
    if (v19)
      v23 = v19;
    else
      v23 = v17;
  }
  else
  {
    v23 = 0;
  }
  v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>(a1[2], v23, (uint64_t *)v54);
LABEL_29:
  v24 = *((_QWORD *)v17 + 2);
  if (v24 != *((_QWORD *)v17 + 1))
  {
LABEL_30:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v17 + 8), (const void *)a2);
    goto LABEL_31;
  }
  v49 = *((unsigned int *)v17 + 7);
  if ((_DWORD)v49)
  {
    v50 = 0;
    v51 = 8 * v49;
    v52 = (uint64_t *)*((_QWORD *)v17 + 2);
    while (*v52 != a2)
    {
      if (*v52 == -2)
        v50 = v52;
      ++v52;
      v51 -= 8;
      if (!v51)
      {
        if (!v50)
          goto LABEL_75;
        *v50 = a2;
        --*((_DWORD *)v17 + 8);
        break;
      }
    }
  }
  else
  {
LABEL_75:
    if (v49 >= *((_DWORD *)v17 + 6))
      goto LABEL_30;
    *((_DWORD *)v17 + 7) = v49 + 1;
    *(_QWORD *)(v24 + 8 * v49) = a2;
  }
LABEL_31:
  v25 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v25)
  {
    v26 = *(uint64_t **)(a2 + 24);
    v27 = &v26[v25];
    while (1)
    {
      v28 = *v26;
      v55 = *v26;
      v29 = a1[3];
      v30 = *(_DWORD *)(v29 + 16);
      if (!v30)
        break;
      v31 = v30 - 1;
      v32 = v31 & ((v28 >> 4) ^ (v28 >> 9));
      v33 = (char *)(*(_QWORD *)v29 + 56 * v32);
      v34 = *(_QWORD *)v33;
      if (*(_QWORD *)v33 != v28)
      {
        v35 = 0;
        v36 = 1;
        while (v34 != -4096)
        {
          if (v35)
            v37 = 0;
          else
            v37 = v34 == -8192;
          if (v37)
            v35 = v33;
          v38 = v32 + v36++;
          v32 = v38 & v31;
          v33 = (char *)(*(_QWORD *)v29 + 56 * v32);
          v34 = *(_QWORD *)v33;
          if (*(_QWORD *)v33 == v28)
            goto LABEL_48;
        }
        if (v35)
          v39 = v35;
        else
          v39 = v33;
        goto LABEL_47;
      }
LABEL_48:
      v40 = *((_QWORD *)v33 + 2);
      v41 = v54[0];
      if (v40 != *((_QWORD *)v33 + 1))
        goto LABEL_33;
      v42 = *((unsigned int *)v33 + 7);
      if ((_DWORD)v42)
      {
        v43 = 0;
        v44 = 8 * v42;
        v45 = (void **)*((_QWORD *)v33 + 2);
        while (*v45 != v54[0])
        {
          if (*v45 == (void *)-2)
            v43 = v45;
          ++v45;
          v44 -= 8;
          if (!v44)
          {
            if (!v43)
              goto LABEL_57;
            *v43 = v54[0];
            --*((_DWORD *)v33 + 8);
            goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_57:
      if (v42 < *((_DWORD *)v33 + 6))
      {
        *((_DWORD *)v33 + 7) = v42 + 1;
        *(_QWORD *)(v40 + 8 * v42) = v41;
      }
      else
      {
LABEL_33:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v33 + 8), v54[0]);
      }
LABEL_34:
      if (++v26 == v27)
        goto LABEL_62;
    }
    v39 = 0;
LABEL_47:
    v33 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>(a1[3], v39, &v55);
    goto LABEL_48;
  }
LABEL_62:
  v46 = (int64x2_t *)a1[4];
  v53 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v46, &v53, (uint64_t)&v55);
  if (v56[8])
  {
    v47 = v53;
    v48 = v46[2].u32[0];
    if (v48 >= v46[2].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46[1].i64[1], &v46[2].u64[1], v48 + 1, 8);
      LODWORD(v48) = v46[2].i32[0];
    }
    *(_QWORD *)(v46[1].i64[1] + 8 * v48) = v47;
    ++v46[2].i32[0];
  }
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(56 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 7 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 56 * v17 - 56;
  v19 = buffer;
  if (v18 < 0x38)
    goto LABEL_34;
  v20 = v18 / 0x38 + 1;
  v19 = &buffer[7 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[7] = -4096;
    v22 += 14;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 7;
    }
    while (v19 != &buffer[7 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = (char *)&buffer[7 * v24];
  v25 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = (char *)&buffer[7 * v24];
      v25 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *((_QWORD *)a2 + 1) = a2 + 40;
  *((_QWORD *)a2 + 2) = a2 + 40;
  *((_QWORD *)a2 + 3) = 2;
  *((_DWORD *)a2 + 8) = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  void *v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 56 * v6 - 56;
    if (v8 < 0x38)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[7 * v6];
      do
      {
        *v9 = -4096;
        v9 += 7;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x38 + 1;
    v9 = &v7[7 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[7] = -4096;
      v12 += 14;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          v16 = v15 - 1;
          v17 = v16 & ((v14 >> 4) ^ (v14 >> 9));
          v18 = (_QWORD *)(*(_QWORD *)a1 + 56 * v17);
          v19 = *v18;
          if (v14 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -4096)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -8192;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v16;
              v18 = (_QWORD *)(*(_QWORD *)a1 + 56 * v17);
              v19 = *v18;
              if (v14 == *v18)
                goto LABEL_25;
            }
            if (v20)
              v18 = v20;
          }
        }
        else
        {
          v18 = 0;
        }
LABEL_25:
        *v18 = v14;
        llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v18 + 1), v18 + 5, 2, v4 + 1);
        ++*(_DWORD *)(a1 + 8);
        v24 = (void *)v4[2];
        if (v24 != (void *)v4[1])
          free(v24);
      }
      v4 += 7;
    }
    while (v4 != a3);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(32 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(32 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[4 * (v19 & 0xFFFFFFFFFFFFFFELL)];
  v20 = buffer + 4;
  v21 = v19 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 4) = -4096;
    *v20 = -4096;
    v20 += 8;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 4;
    }
    while (v18 != &buffer[4 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[4 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[4 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x100000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0xFFFFFFFFFFFFFFELL;
      v11 = &v7[4 * v10];
      v12 = v7 + 4;
      v13 = v10;
      do
      {
        *(v12 - 4) = -4096;
        *v12 = -4096;
        v12 += 8;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[4 * v6];
    do
    {
      *v11 = -4096;
      v11 += 4;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)a1 + 32 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v21 = 0;
          v22 = 1;
          while (v19 != -4096)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v19 == -8192;
            if (v23)
              v21 = v18;
            v24 = v17 + v22++;
            v17 = v24 & v16;
            v18 = (_QWORD *)(*(_QWORD *)a1 + 32 * v17);
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_15;
          }
          if (v21)
            v18 = v21;
        }
LABEL_15:
        *v18 = v15;
        v18[1] = v18 + 3;
        v18[2] = 0x100000000;
        if (*((_DWORD *)v4 + 4))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v18 + 1), (uint64_t)(v4 + 1));
        ++*(_DWORD *)(a1 + 8);
        v20 = (uint64_t *)v4[1];
        if (v20 != v4 + 3)
          free(v20);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t `anonymous namespace'::OperationLegalizer::computeOpLegalizationDepth(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;

  v5 = *(_QWORD *)a2;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v8 = (uint64_t *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a1)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a1)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  if (v8 != (uint64_t *)(v5 + 16 * v6))
    return *((unsigned int *)v8 + 2);
  v13 = *(_QWORD *)a3;
  v14 = *(unsigned int *)(a3 + 16);
  if (!(_DWORD)v14)
    goto LABEL_16;
  v15 = v14 - 1;
  v16 = (uint64_t *)(v13 + 32 * (((_DWORD)v14 - 1) & ((a1 >> 4) ^ (a1 >> 9))));
  v17 = *v16;
  if (*v16 != a1)
  {
    v18 = 1;
    LODWORD(v19) = v15 & ((a1 >> 4) ^ (a1 >> 9));
    while (v17 != -4096)
    {
      v20 = v19 + v18++;
      v19 = v20 & v15;
      v17 = *(_QWORD *)(v13 + 32 * v19);
      if (v17 == a1)
      {
        v16 = (uint64_t *)(v13 + 32 * v19);
        goto LABEL_17;
      }
    }
LABEL_16:
    v16 = (uint64_t *)(v13 + 32 * v14);
  }
LABEL_17:
  if (v16 == (uint64_t *)(v13 + 32 * v14) || !*((_DWORD *)v16 + 4))
    return 0;
  v21 = (uint64_t)(v16 + 1);
  if (!(_DWORD)v6)
    goto LABEL_59;
  v22 = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v23 = (_QWORD *)(v5 + 16 * v22);
  v24 = *v23;
  if (*v23 != a1)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = v23;
      v28 = v22 + v26++;
      v22 = v28 & (v6 - 1);
      v23 = (_QWORD *)(v5 + 16 * v22);
      v24 = *v23;
      if (*v23 == a1)
        goto LABEL_37;
    }
    if (v25)
      v40 = (uint64_t)v25;
    else
      v40 = (uint64_t)v23;
    v41 = *(_DWORD *)(a2 + 8);
    if (4 * v41 + 4 < (3 * v6))
    {
      if ((int)v6 + ~v41 - *(_DWORD *)(a2 + 12) > v6 >> 3)
        goto LABEL_33;
      goto LABEL_60;
    }
LABEL_59:
    LODWORD(v6) = 2 * v6;
LABEL_60:
    v57 = a3;
    v58 = v21;
    llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a2, v6);
    v42 = *(_DWORD *)(a2 + 16) - 1;
    v43 = v42 & ((a1 >> 4) ^ (a1 >> 9));
    v40 = *(_QWORD *)a2 + 16 * v43;
    v44 = *(_QWORD *)v40;
    if (*(_QWORD *)v40 == a1)
    {
      v29 = a1;
      a3 = v57;
      v21 = v58;
      goto LABEL_34;
    }
    v49 = 0;
    v50 = 1;
    a3 = v57;
    v21 = v58;
    while (v44 != -4096)
    {
      if (v49)
        v51 = 0;
      else
        v51 = v44 == -8192;
      if (v51)
        v49 = v40;
      v52 = v43 + v50++;
      v43 = v52 & v42;
      v40 = *(_QWORD *)a2 + 16 * (v52 & v42);
      v44 = *(_QWORD *)v40;
      v29 = a1;
      if (*(_QWORD *)v40 == a1)
        goto LABEL_34;
    }
    if (v49)
      v40 = v49;
    a3 = v57;
    v21 = v58;
LABEL_33:
    v29 = *(_QWORD *)v40;
LABEL_34:
    ++*(_DWORD *)(a2 + 8);
    if (v29 != -4096)
      --*(_DWORD *)(a2 + 12);
    *(_QWORD *)v40 = a1;
    *(_DWORD *)(v40 + 8) = -1;
  }
LABEL_37:
  v30 = *(_DWORD *)(a2 + 16);
  if (!v30)
    goto LABEL_65;
  v31 = v30 - 1;
  v32 = (v30 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v33 = *(_QWORD *)a2 + 16 * v32;
  v34 = *(_QWORD *)v33;
  if (*(_QWORD *)v33 == a1)
  {
LABEL_39:
    *(_DWORD *)(v33 + 8) = result;
    return result;
  }
  v36 = 0;
  v37 = 1;
  while (v34 != -4096)
  {
    if (v36)
      v38 = 0;
    else
      v38 = v34 == -8192;
    if (v38)
      v36 = v33;
    v39 = v32 + v37++;
    v32 = v39 & v31;
    v33 = *(_QWORD *)a2 + 16 * (v39 & v31);
    v34 = *(_QWORD *)v33;
    if (*(_QWORD *)v33 == a1)
      goto LABEL_39;
  }
  if (v36)
    v33 = v36;
  v45 = *(_DWORD *)(a2 + 8);
  if (4 * v45 + 4 < 3 * v30)
  {
    if (v30 + ~v45 - *(_DWORD *)(a2 + 12) > v30 >> 3)
      goto LABEL_42;
    v59 = result;
  }
  else
  {
LABEL_65:
    v59 = result;
    v30 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a2, v30);
  v46 = *(_DWORD *)(a2 + 16) - 1;
  v47 = v46 & ((a1 >> 4) ^ (a1 >> 9));
  v33 = *(_QWORD *)a2 + 16 * v47;
  v48 = *(_QWORD *)v33;
  if (*(_QWORD *)v33 == a1)
  {
    v35 = a1;
    result = v59;
    goto LABEL_43;
  }
  v53 = 0;
  v54 = 1;
  result = v59;
  while (v48 != -4096)
  {
    if (v53)
      v55 = 0;
    else
      v55 = v48 == -8192;
    if (v55)
      v53 = v33;
    v56 = v47 + v54++;
    v47 = v56 & v46;
    v33 = *(_QWORD *)a2 + 16 * (v56 & v46);
    v48 = *(_QWORD *)v33;
    v35 = a1;
    if (*(_QWORD *)v33 == a1)
      goto LABEL_43;
  }
  if (v53)
    v33 = v53;
LABEL_42:
  v35 = *(_QWORD *)v33;
LABEL_43:
  ++*(_DWORD *)(a2 + 8);
  if (v35 != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v33 = a1;
  *(_DWORD *)(v33 + 8) = 0;
  *(_DWORD *)(v33 + 8) = result;
  return result;
}

uint64_t `anonymous namespace'::OperationLegalizer::applyCostModelToPatterns(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  char *v20;
  const std::nothrow_t *v21;
  unint64_t v22;
  _OWORD *v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x1E0C80C00];
  v33 = v35;
  v34 = 0x400000000;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v6, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a1;
    v8 = *(_QWORD *)a1 + 8 * v6;
    LODWORD(v9) = -1;
    do
    {
      v10 = *v7;
      v32 = v10;
      v11 = 1;
      v31 = 1;
      v12 = *(unsigned int *)(v10 + 32);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t **)(v10 + 24);
        v14 = 8 * v12;
        do
        {
          v15 = *v13++;
          if (v31 <= v16 + 1)
            v11 = v16 + 1;
          else
            v11 = v31;
          v31 = v11;
          v14 -= 8;
        }
        while (v14);
      }
      v17 = v34;
      if (v34 >= HIDWORD(v34))
      {
        llvm::SmallVectorTemplateBase<std::pair<mlir::Pattern const*,unsigned int>,true>::growAndEmplaceBack<mlir::Pattern const*&,unsigned int &>((uint64_t)&v33, &v32, &v31);
      }
      else
      {
        v18 = (char *)v33 + 16 * v34;
        *(_QWORD *)v18 = v32;
        *((_DWORD *)v18 + 2) = v11;
        LODWORD(v34) = v17 + 1;
      }
      if (v31 >= v9)
        v9 = v9;
      else
        v9 = v31;
      ++v7;
    }
    while (v7 != (uint64_t *)v8);
  }
  else
  {
    v9 = 0xFFFFFFFFLL;
  }
  v19 = v34;
  v20 = (char *)v33;
  if ((_DWORD)v34 != 1)
  {
    if (!(_DWORD)v34)
    {
LABEL_25:
      *(_DWORD *)(a1 + 8) = 0;
      v20 = (char *)v33;
      v25 = v34;
      if (!(_DWORD)v34)
        goto LABEL_33;
      goto LABEL_28;
    }
    v21 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v22 = v34;
    while (1)
    {
      v23 = operator new(16 * v22, v21);
      if (v23)
        break;
      v24 = v22 > 1;
      v22 >>= 1;
      if (!v24)
        goto LABEL_25;
    }
    v26 = v23;
    operator delete(v26);
    *(_DWORD *)(a1 + 8) = 0;
    v20 = (char *)v33;
    v25 = v34;
    if ((_DWORD)v34)
    {
LABEL_28:
      v27 = 0;
      v28 = 16 * v25;
      do
      {
        v29 = *(_QWORD *)v20;
        if (v27 >= *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27 + 1, 8);
          v27 = *(_DWORD *)(a1 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29;
        v27 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v27;
        v20 += 16;
        v28 -= 16;
      }
      while (v28);
      v20 = (char *)v33;
    }
  }
LABEL_33:
  if (v20 != (char *)v35)
    free(v20);
  return v9;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<mlir::Pattern const*,unsigned int>,true>::growAndEmplaceBack<mlir::Pattern const*&,unsigned int &>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

char *std::__stable_sort<std::_ClassicAlgPolicy,`anonymous namespace'::OperationLegalizer::applyCostModelToPatterns(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0 &,std::pair<mlir::Pattern const*,unsigned int> *>(char *result, char *a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _OWORD *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int v29;
  char *v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = *((_QWORD *)a2 - 2);
    v8 = *((_DWORD *)a2 - 2);
    v9 = *(_QWORD *)result;
    v10 = *((_DWORD *)result + 2);
    if (v8 == v10)
    {
      if (*(unsigned __int16 *)(v9 + 12) >= *(unsigned __int16 *)(v7 + 12))
        return result;
    }
    else if (v8 >= v10)
    {
      return result;
    }
    *(_QWORD *)result = v7;
    *((_QWORD *)a2 - 2) = v9;
    *((_DWORD *)result + 2) = v8;
    *((_DWORD *)a2 - 2) = v10;
    return result;
  }
  if ((uint64_t)a3 <= 0)
  {
    if (result == a2)
      return result;
    v17 = result + 16;
    if (result + 16 == a2)
      return result;
    v18 = 0;
    v19 = result;
    while (1)
    {
      v21 = v19;
      v19 = v17;
      v22 = *((_QWORD *)v21 + 2);
      v23 = *((_DWORD *)v21 + 6);
      v24 = *((_DWORD *)v21 + 2);
      if (v23 != v24)
        break;
      if (*(unsigned __int16 *)(*(_QWORD *)v21 + 12) >= *(unsigned __int16 *)(v22 + 12))
        goto LABEL_17;
      *((_QWORD *)v21 + 2) = *(_QWORD *)v21;
      *((_DWORD *)v19 + 2) = v24;
      v20 = result;
      if (v21 != result)
        goto LABEL_24;
LABEL_16:
      *(_QWORD *)v20 = v22;
      *((_DWORD *)v20 + 2) = v23;
LABEL_17:
      v17 = v19 + 16;
      v18 += 16;
      if (v19 + 16 == a2)
        return result;
    }
    if (v23 >= v24)
      goto LABEL_17;
    *((_QWORD *)v21 + 2) = *(_QWORD *)v21;
    *((_DWORD *)v19 + 2) = v24;
    v20 = result;
    if (v21 == result)
      goto LABEL_16;
LABEL_24:
    v25 = v18;
    while (1)
    {
      while (1)
      {
        v28 = &result[v25];
        v29 = *(_DWORD *)&result[v25 - 8];
        if (v23 == v29)
          break;
        if (v23 >= v29)
        {
          v20 = &result[v25];
          goto LABEL_16;
        }
        v21 -= 16;
        v30 = &result[v25];
        *(_QWORD *)v30 = *((_QWORD *)v28 - 2);
        *((_DWORD *)v30 + 2) = v29;
        v25 -= 16;
        if (!v25)
        {
LABEL_30:
          v20 = result;
          goto LABEL_16;
        }
      }
      v26 = *((_QWORD *)v28 - 2);
      if (*(unsigned __int16 *)(v26 + 12) >= *(unsigned __int16 *)(v22 + 12))
        break;
      v21 -= 16;
      v27 = &result[v25];
      *(_QWORD *)v27 = v26;
      *((_DWORD *)v27 + 2) = v29;
      v25 -= 16;
      if (!v25)
        goto LABEL_30;
    }
    v20 = v21;
    goto LABEL_16;
  }
  v13 = a4;
  v14 = a3 >> 1;
  v15 = &result[16 * (a3 >> 1)];
  v16 = a3 >> 1;
  if ((uint64_t)a3 <= a5)
  {
    v31 = &v13[v14];
    v32 = &v13[a3];
    v33 = v31;
    while (v33 != v32)
    {
      v34 = *(_QWORD *)v33;
      v35 = *((_DWORD *)v33 + 2);
      v36 = *(_QWORD *)v13;
      v37 = *((_DWORD *)v13 + 2);
      v38 = v35 >= v37;
      if (v35 == v37)
        v38 = *(unsigned __int16 *)(v36 + 12) >= *(unsigned __int16 *)(v34 + 12);
      if (v38)
      {
        *(_QWORD *)v6 = v36;
        *((_DWORD *)v6 + 2) = v37;
        ++v13;
        v6 += 16;
        if (v13 == v31)
        {
LABEL_40:
          if (v33 != v32)
          {
            v39 = 0;
            do
            {
              v40 = &v33[v39];
              v41 = &v6[v39 * 16];
              *(_QWORD *)v41 = *(_QWORD *)&v33[v39];
              *((_DWORD *)v41 + 2) = DWORD2(v33[v39++]);
            }
            while (v40 + 1 != v32);
          }
          return result;
        }
      }
      else
      {
        *(_QWORD *)v6 = v34;
        *((_DWORD *)v6 + 2) = v35;
        ++v33;
        v6 += 16;
        if (v13 == v31)
          goto LABEL_40;
      }
    }
    if (v13 != v31)
    {
      v42 = 0;
      do
      {
        v43 = &v6[v42 * 16];
        v44 = &v13[v42];
        *(_QWORD *)v43 = *(_QWORD *)&v13[v42];
        *((_DWORD *)v43 + 2) = DWORD2(v13[v42++]);
      }
      while (v44 + 1 != v31);
    }
  }
  else
  {
  }
  return result;
}

_DWORD *std::__stable_sort_move<std::_ClassicAlgPolicy,`anonymous namespace'::OperationLegalizer::applyCostModelToPatterns(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0 &,std::pair<mlir::Pattern const*,unsigned int> *>(_DWORD *result, _DWORD *a2, unint64_t a3, _OWORD *a4)
{
  _OWORD *v4;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  _DWORD *v16;
  _OWORD *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  __int128 v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;

  if (!a3)
    return result;
  v4 = a4;
  v7 = result;
  if (a3 == 2)
  {
    v8 = a2 - 4;
    v9 = *(a2 - 2);
    v10 = result[2];
    if (v9 == v10)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)result + 12) >= *(unsigned __int16 *)(*(_QWORD *)v8 + 12))
      {
LABEL_8:
        *a4 = *(_OWORD *)result;
        v11 = *(_OWORD *)v8;
LABEL_30:
        a4[1] = v11;
        return result;
      }
    }
    else if (v9 >= v10)
    {
      goto LABEL_8;
    }
    *a4 = *(_OWORD *)v8;
    v11 = *(_OWORD *)result;
    goto LABEL_30;
  }
  if (a3 == 1)
  {
    *a4 = *(_OWORD *)result;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v25 = a3 >> 1;
    v26 = 16 * (a3 >> 1);
    v27 = &result[(unint64_t)v26 / 4];
    v28 = &v7[(unint64_t)v26 / 4];
    while (v28 != a2)
    {
      v30 = v28[2];
      v31 = v7[2];
      v32 = v30 >= v31;
      if (v30 == v31)
        v32 = *(unsigned __int16 *)(*(_QWORD *)v7 + 12) >= *(unsigned __int16 *)(*(_QWORD *)v28 + 12);
      if (v32)
      {
        v33 = *(_OWORD *)v7;
        v7 += 4;
        *v4++ = v33;
        if (v7 == v27)
        {
LABEL_39:
          if (v28 != a2)
          {
            v34 = 0;
            do
            {
              v4[v34 / 4] = *(_OWORD *)&v28[v34];
              v34 += 4;
            }
            while (&v28[v34] != a2);
          }
          return result;
        }
      }
      else
      {
        v29 = *(_OWORD *)v28;
        v28 += 4;
        *v4++ = v29;
        if (v7 == v27)
          goto LABEL_39;
      }
    }
    if (v7 != v27)
    {
      v35 = 0;
      do
      {
        v4[v35 / 4] = *(_OWORD *)&v7[v35];
        v35 += 4;
      }
      while (&v7[v35] != v27);
    }
  }
  else if (result != a2)
  {
    *a4 = *(_OWORD *)result;
    v12 = result + 4;
    if (result + 4 != a2)
    {
      v13 = 0;
      v14 = a4;
      while (1)
      {
        v16 = v12;
        v17 = v14 + 4;
        v18 = v7[6];
        v19 = v14[2];
        if (v18 != v19)
          break;
        if (*(unsigned __int16 *)(*(_QWORD *)v14 + 12) < *(unsigned __int16 *)(*(_QWORD *)v16 + 12))
        {
LABEL_20:
          *v17 = *(_OWORD *)v14;
          v15 = (char *)a4;
          if (v14 == (_DWORD *)a4)
            goto LABEL_14;
          v20 = v13;
          while (1)
          {
            v22 = v7[6];
            v23 = *(_QWORD *)((char *)a4 + v20 - 16);
            v24 = *(_DWORD *)((char *)a4 + v20 - 8);
            if (v22 != v24)
              break;
            if (*(unsigned __int16 *)(v23 + 12) >= *(unsigned __int16 *)(*(_QWORD *)v16 + 12))
            {
              v15 = (char *)v14;
              goto LABEL_14;
            }
LABEL_23:
            v14 -= 4;
            v21 = (char *)a4 + v20;
            *(_QWORD *)v21 = v23;
            *((_DWORD *)v21 + 2) = v24;
            v20 -= 16;
            if (!v20)
            {
              v15 = (char *)a4;
              goto LABEL_14;
            }
          }
          if (v22 < v24)
            goto LABEL_23;
          v15 = (char *)a4 + v20;
LABEL_14:
          *(_QWORD *)v15 = *(_QWORD *)v16;
          *((_DWORD *)v15 + 2) = v7[6];
          v12 = v16 + 4;
          v13 += 16;
          v14 = v17;
          v7 = v16;
          if (v16 + 4 == a2)
            return result;
        }
        else
        {
LABEL_17:
          *v17 = *(_OWORD *)v16;
          v12 = v16 + 4;
          v13 += 16;
          v14 += 4;
          v7 = v16;
          if (v16 + 4 == a2)
            return result;
        }
      }
      if (v18 >= v19)
        goto LABEL_17;
      goto LABEL_20;
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,`anonymous namespace'::OperationLegalizer::applyCostModelToPatterns(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0 &,std::pair<mlir::Pattern const*,unsigned int> *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unsigned int v33;
  BOOL v34;
  char *v35;
  uint64_t v36;
  int v37;
  char *i;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  char *v64;
  unint64_t v65;
  unsigned int *v66;
  unint64_t v67;
  char *v68;
  uint64_t *v69;

  if (!a5)
    return result;
  while (2)
  {
    if (a5 <= a7 || a4 <= a7)
    {
      if (a4 <= a5)
      {
        if (result != a2)
        {
          v56 = 0;
          do
          {
            *(_OWORD *)&a6[v56] = *(_OWORD *)&result[v56 * 8];
            v56 += 2;
          }
          while (&result[v56 * 8] != a2);
          if (v56 * 8)
          {
            v57 = &a6[v56];
            v58 = (uint64_t)&a6[v56 - 2];
            while (a2 != a3)
            {
              v59 = *(_QWORD *)a2;
              v60 = *((_DWORD *)a2 + 2);
              v61 = *a6;
              v62 = *((_DWORD *)a6 + 2);
              v63 = v60 >= v62;
              if (v60 == v62)
                v63 = *(unsigned __int16 *)(v61 + 12) >= *(unsigned __int16 *)(v59 + 12);
              if (v63)
              {
                *(_QWORD *)result = v61;
                *((_DWORD *)result + 2) = v62;
                a6 += 2;
                result += 16;
                if (v57 == a6)
                  return result;
              }
              else
              {
                *(_QWORD *)result = v59;
                *((_DWORD *)result + 2) = v60;
                a2 += 16;
                result += 16;
                if (v57 == a6)
                  return result;
              }
            }
            v67 = 0;
            do
            {
              v68 = &result[v67 * 8];
              v69 = &a6[v67];
              *(_QWORD *)v68 = a6[v67];
              *((_DWORD *)v68 + 2) = a6[v67 + 1];
              v67 += 2;
            }
            while ((uint64_t *)v58 != v69);
          }
        }
      }
      else if (a2 != a3)
      {
        v48 = 0;
        do
        {
          *(_OWORD *)&a6[v48] = *(_OWORD *)&a2[v48 * 8];
          v48 += 2;
        }
        while (&a2[v48 * 8] != a3);
        if (v48 * 8)
        {
          v49 = &a6[v48];
          v50 = (unsigned int *)(a3 - 8);
          while (a2 != result)
          {
            v51 = a2 - 16;
            v52 = *((_QWORD *)a2 - 2);
            v53 = *((_DWORD *)a2 - 2);
            v54 = *((_DWORD *)v49 - 2);
            v55 = v54 >= v53;
            if (v54 == v53)
              v55 = *(unsigned __int16 *)(v52 + 12) >= *(unsigned __int16 *)(*(v49 - 2) + 12);
            if (v55)
            {
              v52 = *(v49 - 2);
              v53 = *((_DWORD *)v49 - 2);
              v51 = a2;
              v49 -= 2;
            }
            *((_QWORD *)v50 - 1) = v52;
            *v50 = v53;
            v50 -= 4;
            a2 = v51;
            if (v49 == a6)
              return result;
          }
          v65 = 0;
          do
          {
            v66 = &v50[v65 / 4];
            *((_QWORD *)v66 - 1) = v49[v65 / 8 - 2];
            *v66 = v49[v65 / 8 - 1];
            v65 -= 16;
          }
          while (&v49[v65 / 8] != a6);
        }
      }
      return result;
    }
    if (!a4)
      return result;
    v10 = 0;
    v11 = *(_QWORD *)a2;
    v12 = *((_DWORD *)a2 + 2);
    v13 = -a4;
    while (1)
    {
      v14 = *(_QWORD *)&result[v10];
      v15 = *(_DWORD *)&result[v10 + 8];
      if (v12 == v15)
      {
        if (*(unsigned __int16 *)(v14 + 12) < *(unsigned __int16 *)(v11 + 12))
          break;
        goto LABEL_7;
      }
      if (v12 < v15)
        break;
LABEL_7:
      v10 += 16;
      v34 = __CFADD__(v13++, 1);
      if (v34)
        return result;
    }
    v16 = &result[v10];
    if (-v13 < a5)
    {
      if (a5 >= 0)
        v17 = a5;
      else
        v17 = a5 + 1;
      v18 = v17 >> 1;
      v19 = &a2[16 * (v17 >> 1)];
      if (v16 != a2)
      {
        v20 = *((_DWORD *)v19 + 2);
        v21 = &result[v10];
        v22 = (a2 - result - v10) >> 4;
        v23 = v16;
        while (1)
        {
          v24 = v22 >> 1;
          v25 = &v23[16 * (v22 >> 1)];
          v26 = *((_DWORD *)v25 + 2);
          if (v26 == v20)
          {
            if (*(unsigned __int16 *)(*(_QWORD *)v25 + 12) < *(unsigned __int16 *)(*(_QWORD *)v19 + 12))
              goto LABEL_17;
          }
          else if (v26 > v20)
          {
            goto LABEL_17;
          }
          v23 = v25 + 16;
          v24 = v22 + ~v24;
LABEL_17:
          v22 = v24;
          if (!v24)
            goto LABEL_35;
        }
      }
      v21 = &result[v10];
      v23 = a2;
LABEL_35:
      v28 = (v23 - v21) >> 4;
      v35 = v19;
      if (v23 != a2)
        goto LABEL_39;
LABEL_55:
      a4 = -(v28 + v13);
      v45 = a5 - v18;
      if (v28 + v18 >= a5 - (v28 + v18) - v13)
      {
        a4 = v28;
        a3 = v35;
        a5 = v18;
        result = v16;
        a2 = v23;
        if (!v18)
          return result;
      }
      else
      {
        v46 = v16;
        v47 = a3;
        a3 = v47;
        a5 = v45;
        result = v35;
        a2 = v19;
        if (!v45)
          return result;
      }
      continue;
    }
    break;
  }
  if (v13 != -1)
  {
    if (v13 <= 0)
      v27 = -v13;
    else
      v27 = 1 - v13;
    v28 = v27 >> 1;
    v23 = &result[16 * (v27 >> 1) + v10];
    if (a3 == a2)
    {
      v19 = a3;
    }
    else
    {
      v29 = *((_DWORD *)v23 + 2);
      v30 = (a3 - a2) >> 4;
      v19 = a2;
      do
      {
        v31 = v30 >> 1;
        v32 = &v19[16 * (v30 >> 1)];
        v33 = *((_DWORD *)v32 + 2);
        v34 = v33 >= v29;
        if (v33 == v29)
          v34 = *(unsigned __int16 *)(*(_QWORD *)v23 + 12) >= *(unsigned __int16 *)(*(_QWORD *)v32 + 12);
        if (!v34)
        {
          v19 = v32 + 16;
          v31 = v30 + ~v31;
        }
        v30 = v31;
      }
      while (v31);
    }
    v18 = (v19 - a2) >> 4;
    v35 = v19;
    if (v23 == a2)
      goto LABEL_55;
LABEL_39:
    v35 = v23;
    if (a2 != v19)
    {
      v36 = *(_QWORD *)v23;
      *(_QWORD *)v23 = v11;
      *(_QWORD *)a2 = v36;
      v37 = *((_DWORD *)v23 + 2);
      *((_DWORD *)v23 + 2) = v12;
      *((_DWORD *)a2 + 2) = v37;
      v35 = v23 + 16;
      for (i = a2 + 16; i != v19; i += 16)
      {
        if (v35 == a2)
          a2 = i;
        v39 = *(_QWORD *)v35;
        *(_QWORD *)v35 = *(_QWORD *)i;
        *(_QWORD *)i = v39;
        LODWORD(v39) = *((_DWORD *)v35 + 2);
        *((_DWORD *)v35 + 2) = *((_DWORD *)i + 2);
        *((_DWORD *)i + 2) = v39;
        v35 += 16;
      }
      if (v35 != a2)
      {
        v40 = v35;
        v41 = a2;
        while (1)
        {
          v42 = *(_QWORD *)v40;
          *(_QWORD *)v40 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v42;
          LODWORD(v42) = *((_DWORD *)v40 + 2);
          *((_DWORD *)v40 + 2) = *((_DWORD *)a2 + 2);
          *((_DWORD *)a2 + 2) = v42;
          v40 += 16;
          a2 += 16;
          v43 = v40 == v41;
          if (a2 == v19)
          {
            if (v40 == v41)
              goto LABEL_55;
            a2 = v41 + 16;
            while (1)
            {
              v44 = *(_QWORD *)v40;
              *(_QWORD *)v40 = *(_QWORD *)v41;
              *(_QWORD *)v41 = v44;
              LODWORD(v44) = *((_DWORD *)v40 + 2);
              *((_DWORD *)v40 + 2) = *((_DWORD *)v41 + 2);
              *((_DWORD *)v41 + 2) = v44;
              v40 += 16;
              v43 = v40 == v41;
              if (a2 != v19)
                break;
              if (v40 == v41)
                goto LABEL_55;
            }
          }
          if (v43)
            v41 = a2;
        }
      }
      v35 = a2;
    }
    goto LABEL_55;
  }
  v64 = &result[v10];
  *(_QWORD *)v64 = v11;
  *(_QWORD *)a2 = v14;
  *((_DWORD *)v64 + 2) = v12;
  *((_DWORD *)a2 + 2) = v15;
  return result;
}

uint64_t llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::computeLegalizationGraphBenefit(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0>(uint64_t *a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26[2];

  v3 = *(_DWORD *)(a2 + 8) == 1;
  v4 = *(_QWORD *)a2;
  if (*(_DWORD *)(a2 + 8) == 1)
    v5 = *(_QWORD *)a2;
  else
    v5 = 0;
  v26[0] = v5;
  v26[1] = v3;
  if (v3)
  {
    v6 = *a1;
    v7 = *(_DWORD *)(v6 + 16);
    if (v7)
    {
      v8 = v7 - 1;
      v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
      v10 = (uint64_t *)(*(_QWORD *)v6 + 32 * v9);
      v11 = *v10;
      if (*v10 == v5)
        goto LABEL_26;
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (uint64_t *)(*(_QWORD *)v6 + 32 * v9);
        v11 = *v10;
        if (*v10 == v5)
          goto LABEL_26;
      }
      if (v12)
        v24 = v12;
      else
        v24 = v10;
    }
    else
    {
      v24 = 0;
    }
    v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>(v6, v24, v26);
LABEL_26:
    v25 = v10 + 1;
    v17 = (_QWORD *)v10[1];
    v18 = *((unsigned int *)v25 + 2);
    v19 = (uint64_t)&v17[v18];
    if ((_DWORD)v18)
      goto LABEL_18;
    return 0xFFFFLL;
  }
  v16 = a1[1];
  v17 = *(_QWORD **)v16;
  v18 = *(unsigned int *)(v16 + 8);
  v19 = *(_QWORD *)v16 + 8 * v18;
  if (!(_DWORD)v18)
    return 0xFFFFLL;
LABEL_18:
  v20 = 8 * v18;
  v21 = v17;
  while (*v21 != a2)
  {
    ++v21;
    v20 -= 8;
    if (!v20)
    {
      v21 = (_QWORD *)v19;
      break;
    }
  }
  v22 = v21 - v17;
  if (v22 == v18)
    return 0xFFFFLL;
  mlir::PatternBenefit::PatternBenefit(v26, (unint64_t)(v19 - (_QWORD)&v17[v22]) >> 3);
  return LOWORD(v26[0]);
}

uint64_t `anonymous namespace'::OperationConverter::finalize(_anonymous_namespace_::OperationConverter *this, mlir::ConversionPatternRewriter *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64x2_t v5;
  __guard *v6;
  uint64_t *v7;
  unint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  mlir::Block *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  mlir::Block *v49;
  int v50;
  uint64_t v51;
  int v52;
  __guard *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 v58;
  unint64_t v59;
  unint64_t v60;
  void **v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  mlir::GenericProgramPoint *DefiningOp;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm *v79;
  llvm *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  llvm *v90;
  void **v91;
  char *v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  void **v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  void **v101;
  void **v102;
  void **v103;
  __int128 v104;
  void **v105;
  char *v106;
  char *v107;
  __int128 v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t NextResultAtOffset;
  unint64_t v116;
  uint64_t **v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  mlir::Block *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  int v128;
  int v129;
  mlir::Block *ParentOp;
  int v131;
  uint64_t v132;
  int v133;
  llvm *v134;
  void **v135;
  char *v136;
  char *v137;
  __int128 v138;
  int v139;
  _BYTE *v140;
  _BYTE *v141;
  int v142;
  int v143;
  _BYTE *v144;
  _BYTE *v145;
  int v146;
  uint64_t v147;
  _QWORD **v148;
  _QWORD **v149;
  void *v150;
  _QWORD *v151;
  _QWORD *v152;
  void *v153;
  void *v154;
  void *v155;
  llvm **v156;
  char *v157;
  char *v158;
  __int128 v159;
  llvm **v160;
  char *v161;
  char *v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  llvm **v168;
  uint64_t v169;
  __int128 v170;
  _QWORD **v171;
  _QWORD **v172;
  void *v173;
  _QWORD *v174;
  _QWORD *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  _QWORD **v180;
  _QWORD **v181;
  void *v182;
  _QWORD *v183;
  _QWORD *v184;
  void *v185;
  void *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  llvm **v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  llvm **v199;
  uint64_t v200;
  __int128 v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  llvm **v205;
  uint64_t v206;
  __int128 v207;
  _QWORD **v208;
  _QWORD **v209;
  void *v210;
  _QWORD *v211;
  void *v212;
  void *v213;
  unint64_t v215;
  BOOL v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  BOOL v220;
  unint64_t v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  unint64_t v225;
  BOOL v226;
  unint64_t v227;
  BOOL v228;
  unint64_t v229;
  BOOL v230;
  unint64_t v231;
  char *v232;
  int64_t v233;
  int64_t v234;
  int64_t v235;
  int64_t v236;
  char *v237;
  int64_t v238;
  char *v239;
  char *v240;
  char *v241;
  int64_t v242;
  int64x2_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  __guard *v247;
  uint64_t v248;
  _QWORD *v249;
  llvm *v250;
  uint64_t *v251;
  _QWORD *v252;
  uint64_t **v253;
  mlir::detail::OpResultImpl *v254[2];
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  llvm *v260[2];
  uint64_t v261;
  llvm *v262;
  const char *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  _BYTE v267[96];
  __int128 v268;
  uint64_t v269;
  void *__p[2];
  uint64_t v271;
  unsigned __int8 v272;
  void *__dst[2];
  uint64_t v274;
  void *v275;
  uint64_t v276;
  _BYTE v277[96];
  __int128 v278;
  uint64_t v279;
  void *v280[2];
  uint64_t v281;
  char v282;
  uint64_t v283;

  v283 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 7);
  if (*(_DWORD *)(v2 + 272))
  {
    __dst[0] = 0;
    __dst[1] = 0;
    LODWORD(v274) = 0;
    llvm::deallocate_buffer(0, 0);
  }
  v3 = *(unsigned int *)(v2 + 104);
  if (!(_DWORD)v3)
  {
LABEL_111:
    v109 = *(_DWORD *)(v2 + 1200);
    v244 = 1;
    if (!v109)
      return v244;
    v110 = 0;
    while (1)
    {
      v246 = v110;
      v111 = *(_QWORD *)(v2 + 352) + 16 * *(unsigned int *)(*(_QWORD *)(v2 + 1192) + 4 * v110);
      v112 = *(unsigned int *)(*(_QWORD *)v111 + 36);
      v113 = *(_QWORD *)v111 - 16;
      if (!(_DWORD)v112)
        v113 = 0;
      v255 = v113;
      if ((_DWORD)v112)
        break;
LABEL_113:
      v110 = v246 + 1;
      if (v246 + 1 == v109)
        return 1;
    }
    v114 = 0;
    v253 = (uint64_t **)v111;
LABEL_119:
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v255, v114);
    if (v116)
    {
      if ((*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v116 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        __dst[0] = 0;
        __dst[1] = 0;
        LODWORD(v274) = 0;
        llvm::deallocate_buffer(0, 0);
      }
      goto LABEL_118;
    }
    v117 = *(uint64_t ***)NextResultAtOffset;
    if (!*(_QWORD *)NextResultAtOffset)
      goto LABEL_118;
    v251 = *v253;
    while (1)
    {
      v122 = v117[2];
      v123 = *(_QWORD *)(v2 + 328);
      v124 = *(unsigned int *)(v2 + 344);
      if (!(_DWORD)v124)
        goto LABEL_133;
      LODWORD(v125) = ((v122 >> 4) ^ (v122 >> 9)) & (v124 - 1);
      v126 = (uint64_t *)(v123 + 16 * v125);
      v127 = (uint64_t *)*v126;
      if ((uint64_t *)*v126 != v122)
        break;
LABEL_134:
      if (v126 == (uint64_t *)(v123 + 16 * v124))
      {
        ParentOp = (mlir::Block *)v122[2];
        if (ParentOp)
          ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
        v131 = *(_DWORD *)(v2 + 608);
        if (!v131)
          goto LABEL_140;
        v132 = *(_QWORD *)(v2 + 592);
        v133 = v131 - 1;
        v120 = ((ParentOp >> 4) ^ (ParentOp >> 9)) & v133;
        v121 = *(mlir::Block **)(v132 + 8 * v120);
        if (v121 != ParentOp)
        {
          v119 = 1;
          while (v121 != (mlir::Block *)-4096)
          {
            v118 = v120 + v119++;
            v120 = v118 & v133;
            v121 = *(mlir::Block **)(v132 + 8 * v120);
            if (v121 == ParentOp)
              goto LABEL_126;
          }
LABEL_140:
          if (v117)
          {
            v260[0] = (llvm *)"failed to legalize operation '";
            LOWORD(v261) = 259;
            mlir::Operation::emitError(v251, (uint64_t)v260, (uint64_t)&v262);
            v134 = v262;
            if (v262)
            {
              mlir::Diagnostic::operator<<((uint64_t)&v263, v251[6]);
              v134 = v262;
              if (v262)
              {
                LODWORD(__dst[0]) = 3;
                __dst[1] = "' marked as erased";
                v274 = 18;
                v135 = __dst;
                v136 = (char *)v265;
                if (v266 >= HIDWORD(v266))
                {
                  v231 = v266 + 1;
                  if (v265 <= __dst && (char *)v265 + 24 * v266 > (char *)__dst)
                  {
                    v242 = (char *)__dst - (_BYTE *)v265;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v231, 24);
                    v136 = (char *)v265;
                    v135 = (void **)((char *)v265 + v242);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v231, 24);
                    v135 = __dst;
                    v136 = (char *)v265;
                  }
                }
                v137 = &v136[24 * v266];
                v138 = *(_OWORD *)v135;
                *((_QWORD *)v137 + 2) = v135[2];
                *(_OWORD *)v137 = v138;
                LODWORD(v266) = v266 + 1;
                v134 = v262;
              }
            }
            __dst[0] = v134;
            LOBYTE(__dst[1]) = 0;
            v282 = 0;
            if (v272)
            {
              __dst[1] = (void *)v263;
              v139 = v266;
              LODWORD(v274) = v264;
              v140 = v277;
              v275 = v277;
              v276 = 0x400000000;
              if ((_DWORD)v266)
              {
                v141 = v267;
                if (v265 != v267)
                {
                  v275 = v265;
                  v276 = v266;
                  v265 = v267;
                  HIDWORD(v266) = 0;
                  v142 = 1;
                  goto LABEL_213;
                }
                if (v266 < 5)
                {
                  v179 = v266;
LABEL_211:
                  memcpy(v140, v141, 24 * v179);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v266, 24);
                  v179 = v266;
                  if ((_DWORD)v266)
                  {
                    v141 = v265;
                    v140 = v275;
                    goto LABEL_211;
                  }
                }
                LODWORD(v276) = v139;
                v142 = v272;
LABEL_213:
                LODWORD(v266) = 0;
              }
              else
              {
                v142 = 1;
              }
              v278 = v268;
              v279 = v269;
              v268 = 0uLL;
              *(_OWORD *)v280 = *(_OWORD *)__p;
              v281 = v271;
              v269 = 0;
              __p[0] = 0;
              __p[1] = 0;
              v271 = 0;
              v282 = 1;
              if (v142)
              {
                if (v265 != v267)
                  free(v265);
                v272 = 0;
              }
            }
            mlir::InFlightDiagnostic::abandon(&v262);
            if (v262)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v262);
            if (v272)
            {
              v180 = (_QWORD **)__p[0];
              if (__p[0])
              {
                v181 = (_QWORD **)__p[1];
                v182 = __p[0];
                if (__p[1] != __p[0])
                {
                  do
                    v181 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v181 - 1);
                  while (v181 != v180);
                  v182 = __p[0];
                }
                __p[1] = v180;
                operator delete(v182);
              }
              v183 = (_QWORD *)v268;
              if ((_QWORD)v268)
              {
                v184 = (_QWORD *)*((_QWORD *)&v268 + 1);
                v185 = (void *)v268;
                if (*((_QWORD *)&v268 + 1) != (_QWORD)v268)
                {
                  do
                  {
                    v187 = (void *)*--v184;
                    v186 = v187;
                    *v184 = 0;
                    if (v187)
                      operator delete[](v186);
                  }
                  while (v184 != v183);
                  v185 = (void *)v268;
                }
                *((_QWORD *)&v268 + 1) = v183;
                operator delete(v185);
              }
              if (v265 != v267)
                free(v265);
            }
            v188 = mlir::Diagnostic::attachNote((uint64_t *)&__dst[1], v117[2][3], 1);
            v189 = v188;
            v191 = v188 + 16;
            v190 = *(_QWORD *)(v188 + 16);
            LODWORD(v262) = 3;
            v263 = "found live user of result #";
            v264 = 27;
            v192 = *(unsigned int *)(v188 + 24);
            v193 = &v262;
            if (v192 >= *(_DWORD *)(v188 + 28))
            {
              v225 = v192 + 1;
              v226 = v190 + 24 * v192 > (unint64_t)&v262;
              if (v190 <= (unint64_t)&v262 && v226)
              {
                v239 = (char *)&v262 - v190;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v188 + 16, (void *)(v188 + 32), v225, 24);
                v190 = *(_QWORD *)(v189 + 16);
                v193 = (llvm **)&v239[v190];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v188 + 16, (void *)(v188 + 32), v225, 24);
                v190 = *(_QWORD *)(v189 + 16);
                v193 = &v262;
              }
            }
            v194 = v190 + 24 * *(unsigned int *)(v189 + 24);
            v195 = *(_OWORD *)v193;
            *(_QWORD *)(v194 + 16) = v193[2];
            *(_OWORD *)v194 = v195;
            v196 = (*(_DWORD *)(v189 + 24) + 1);
            *(_DWORD *)(v189 + 24) = v196;
            v197 = *(_QWORD *)(NextResultAtOffset + 8) & 7;
            if (v197 == 6)
              v197 = (*(_DWORD *)(NextResultAtOffset + 16) + 6);
            LODWORD(v262) = 5;
            v263 = (const char *)v197;
            v198 = *(_QWORD *)(v189 + 16);
            v199 = &v262;
            if (v196 >= *(_DWORD *)(v189 + 28))
            {
              v227 = v196 + 1;
              v228 = v198 + 24 * v196 > (unint64_t)&v262;
              if (v198 <= (unint64_t)&v262 && v228)
              {
                v240 = (char *)&v262 - v198;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v191, (void *)(v189 + 32), v227, 24);
                v198 = *(_QWORD *)(v189 + 16);
                v199 = (llvm **)&v240[v198];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v191, (void *)(v189 + 32), v227, 24);
                v198 = *(_QWORD *)(v189 + 16);
                v199 = &v262;
              }
            }
            v200 = v198 + 24 * *(unsigned int *)(v189 + 24);
            v201 = *(_OWORD *)v199;
            *(_QWORD *)(v200 + 16) = v199[2];
            *(_OWORD *)v200 = v201;
            v202 = *(_DWORD *)(v189 + 28);
            v203 = (*(_DWORD *)(v189 + 24) + 1);
            *(_DWORD *)(v189 + 24) = v203;
            LODWORD(v262) = 3;
            v263 = ": ";
            v264 = 2;
            v204 = *(_QWORD *)(v189 + 16);
            v205 = &v262;
            if (v203 >= v202)
            {
              v229 = v203 + 1;
              v230 = v204 + 24 * v203 > (unint64_t)&v262;
              if (v204 <= (unint64_t)&v262 && v230)
              {
                v241 = (char *)&v262 - v204;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v191, (void *)(v189 + 32), v229, 24);
                v204 = *(_QWORD *)(v189 + 16);
                v205 = (llvm **)&v241[v204];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v191, (void *)(v189 + 32), v229, 24);
                v204 = *(_QWORD *)(v189 + 16);
                v205 = &v262;
              }
            }
            v206 = v204 + 24 * *(unsigned int *)(v189 + 24);
            v207 = *(_OWORD *)v205;
            *(_QWORD *)(v206 + 16) = v205[2];
            *(_OWORD *)v206 = v207;
            ++*(_DWORD *)(v189 + 24);
            mlir::Diagnostic::operator<<((mlir::Diagnostic *)v189, (mlir::Operation *)v117[2]);
            if (__dst[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
            if (v282)
            {
              v208 = (_QWORD **)v280[0];
              if (v280[0])
              {
                v209 = (_QWORD **)v280[1];
                v210 = v280[0];
                if (v280[1] != v280[0])
                {
                  do
                    v209 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v209 - 1);
                  while (v209 != v208);
                  v210 = v280[0];
                }
                v280[1] = v208;
                operator delete(v210);
              }
              v174 = (_QWORD *)v278;
              if ((_QWORD)v278)
              {
                v211 = (_QWORD *)*((_QWORD *)&v278 + 1);
                v176 = (void *)v278;
                if (*((_QWORD *)&v278 + 1) == (_QWORD)v278)
                {
LABEL_256:
                  *((_QWORD *)&v278 + 1) = v174;
                  operator delete(v176);
                  goto LABEL_257;
                }
                do
                {
                  v213 = (void *)*--v211;
                  v212 = v213;
                  *v211 = 0;
                  if (v213)
                    operator delete[](v212);
                }
                while (v211 != v174);
LABEL_255:
                v176 = (void *)v278;
                goto LABEL_256;
              }
              goto LABEL_257;
            }
            return 0;
          }
LABEL_118:
          if (++v114 == v112)
            goto LABEL_113;
          goto LABEL_119;
        }
      }
LABEL_126:
      v117 = (uint64_t **)*v117;
      if (!v117)
        goto LABEL_118;
    }
    v128 = 1;
    while (v127 != (uint64_t *)-4096)
    {
      v129 = v125 + v128++;
      v125 = v129 & (v124 - 1);
      v127 = *(uint64_t **)(v123 + 16 * v125);
      if (v127 == v122)
      {
        v126 = (uint64_t *)(v123 + 16 * v125);
        goto LABEL_134;
      }
    }
LABEL_133:
    v126 = (uint64_t *)(v123 + 16 * v124);
    goto LABEL_134;
  }
  v4 = *(_QWORD **)(v2 + 96);
  v249 = &v4[8 * v3];
  v5 = vdupq_n_s64(1uLL);
  v5.i64[0] = (uint64_t)&v258;
  v243 = v5;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  while (1)
  {
    v252 = v4;
    v257 = v4[1];
    v8 = *(_QWORD *)(v257 + 56) - *(_QWORD *)(v257 + 48);
    if ((v8 & 0x7FFFFFFF8) != 0)
      break;
LABEL_5:
    v4 = v252 + 8;
    if (v252 + 8 == v249)
      goto LABEL_111;
  }
  v9 = 0;
  v248 = *v4;
  v256 = (v8 >> 3);
  while (1)
  {
    v10 = *(_QWORD **)(*(_QWORD *)(v257 + 48) + 8 * (_QWORD)v9);
    v11 = *(_QWORD *)v2;
    LODWORD(v12) = *(_DWORD *)(v2 + 16);
    v13 = v10[1] & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      v14 = 0;
      v15 = *(_QWORD **)(*(_QWORD *)(v257 + 48) + 8 * (_QWORD)v9);
      do
      {
        v16 = (unint64_t)v15;
        if ((v15[1] & 0xFFFFFFFFFFFFFFF8) == v13)
          v14 = (unint64_t)v15;
        if (!(_DWORD)v12)
          break;
        if ((v17 & 1) == 0)
        {
          v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
          if (v24)
          {
            v25 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v25 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v25;
            v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
          }
        }
        v18 = 0x9DDFEA08EB382D69 * ((v7[19] + 8 * v16) ^ HIDWORD(v16));
        v19 = 0x9DDFEA08EB382D69 * (HIDWORD(v16) ^ (v18 >> 47) ^ v18);
        LODWORD(v19) = (-348639895 * ((v19 >> 47) ^ v19)) & (v12 - 1);
        v20 = (_QWORD *)(v11 + 16 * v19);
        v21 = (_QWORD *)*v20;
        if (v16 != *v20)
        {
          v22 = 1;
          while (v21 != (_QWORD *)-4096)
          {
            v23 = v19 + v22++;
            v19 = v23 & (v12 - 1);
            v21 = *(_QWORD **)(v11 + 16 * v19);
            if ((_QWORD *)v16 == v21)
            {
              v20 = (_QWORD *)(v11 + 16 * v19);
              v11 = *(_QWORD *)v2;
              v12 = *(unsigned int *)(v2 + 16);
              if (v20 != (_QWORD *)(*(_QWORD *)v2 + 16 * v12))
                goto LABEL_18;
              goto LABEL_29;
            }
          }
          break;
        }
        v11 = *(_QWORD *)v2;
        v12 = *(unsigned int *)(v2 + 16);
        if (v20 == (_QWORD *)(*(_QWORD *)v2 + 16 * v12))
          break;
LABEL_18:
        v15 = (_QWORD *)v20[1];
      }
      while (v15);
LABEL_29:
      if (!v14)
        v14 = v16;
    }
    else
    {
      v27 = *(_QWORD **)(*(_QWORD *)(v257 + 48) + 8 * (_QWORD)v9);
      do
      {
        v14 = (unint64_t)v27;
        if (!(_DWORD)v12)
          break;
        if ((v28 & 1) == 0)
        {
          v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
          if (v35)
          {
            v36 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v36 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v36;
            v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
          }
        }
        v29 = 0x9DDFEA08EB382D69 * ((v7[19] + 8 * v14) ^ HIDWORD(v14));
        v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v14) ^ (v29 >> 47) ^ v29);
        LODWORD(v30) = (-348639895 * ((v30 >> 47) ^ v30)) & (v12 - 1);
        v31 = (_QWORD *)(v11 + 16 * v30);
        v32 = (_QWORD *)*v31;
        if (v14 != *v31)
        {
          v33 = 1;
          while (v32 != (_QWORD *)-4096)
          {
            v34 = v30 + v33++;
            v30 = v34 & (v12 - 1);
            v32 = *(_QWORD **)(v11 + 16 * v30);
            if ((_QWORD *)v14 == v32)
            {
              v31 = (_QWORD *)(v11 + 16 * v30);
              v11 = *(_QWORD *)v2;
              v12 = *(unsigned int *)(v2 + 16);
              if (v31 != (_QWORD *)(*(_QWORD *)v2 + 16 * v12))
                goto LABEL_41;
              goto LABEL_31;
            }
          }
          break;
        }
        v11 = *(_QWORD *)v2;
        v12 = *(unsigned int *)(v2 + 16);
        if (v31 == (_QWORD *)(*(_QWORD *)v2 + 16 * v12))
          break;
LABEL_41:
        v27 = (_QWORD *)v31[1];
      }
      while (v27);
    }
LABEL_31:
    if ((_QWORD *)v14 != v10)
    {
      if (v13)
      {
        if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) == v13)
          goto LABEL_9;
      }
      else if (v14)
      {
        goto LABEL_9;
      }
    }
    v26 = (_QWORD *)*v10;
    if (*v10)
      break;
LABEL_9:
    v9 = (char *)v9 + 1;
    if (v9 == (void *)v256)
      goto LABEL_5;
  }
  while (1)
  {
    v41 = v26[2];
    v42 = *(_QWORD *)(v2 + 328);
    v43 = *(unsigned int *)(v2 + 344);
    if (!(_DWORD)v43)
      goto LABEL_61;
    LODWORD(v44) = ((v41 >> 4) ^ (v41 >> 9)) & (v43 - 1);
    v45 = (uint64_t *)(v42 + 16 * v44);
    v46 = *v45;
    if (*v45 != v41)
    {
      v47 = 1;
      while (v46 != -4096)
      {
        v48 = v44 + v47++;
        v44 = v48 & (v43 - 1);
        v46 = *(_QWORD *)(v42 + 16 * v44);
        if (v46 == v41)
        {
          v45 = (uint64_t *)(v42 + 16 * v44);
          goto LABEL_62;
        }
      }
LABEL_61:
      v45 = (uint64_t *)(v42 + 16 * v43);
    }
LABEL_62:
    if (v45 == (uint64_t *)(v42 + 16 * v43))
    {
      v49 = *(mlir::Block **)(v41 + 16);
      if (v49)
      {
        v49 = (mlir::Block *)mlir::Block::getParentOp(v49);
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      }
      v50 = *(_DWORD *)(v2 + 608);
      if (!v50)
        goto LABEL_68;
      v51 = *(_QWORD *)(v2 + 592);
      v52 = v50 - 1;
      v39 = ((v49 >> 4) ^ (v49 >> 9)) & v52;
      v40 = *(mlir::Block **)(v51 + 8 * v39);
      if (v40 != v49)
        break;
    }
LABEL_54:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_9;
  }
  v38 = 1;
  while (v40 != (mlir::Block *)-4096)
  {
    v37 = v39 + v38++;
    v39 = v37 & v52;
    v40 = *(mlir::Block **)(v51 + 8 * v39);
    if (v40 == v49)
      goto LABEL_54;
  }
LABEL_68:
  if (!v26)
    goto LABEL_9;
  v53 = (__guard *)v26[2];
  if (!v53)
    goto LABEL_9;
  v54 = *(_QWORD *)v2;
  LODWORD(v55) = *(_DWORD *)(v2 + 16);
  v56 = v10;
  do
  {
    v57 = (unint64_t)v56;
    if (!(_DWORD)v55)
      break;
    if ((v58 & 1) == 0)
    {
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      if (v65)
      {
        v66 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v66 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v66;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      }
    }
    v59 = 0x9DDFEA08EB382D69 * ((v7[19] + 8 * v57) ^ HIDWORD(v57));
    v60 = 0x9DDFEA08EB382D69 * (HIDWORD(v57) ^ (v59 >> 47) ^ v59);
    LODWORD(v60) = (-348639895 * ((v60 >> 47) ^ v60)) & (v55 - 1);
    v61 = (void **)(v54 + 16 * v60);
    v62 = *v61;
    if ((void *)v57 != *v61)
    {
      v63 = 1;
      while (v62 != (void *)-4096)
      {
        v64 = v60 + v63++;
        v60 = v64 & (v55 - 1);
        v62 = *(void **)(v54 + 16 * v60);
        if ((void *)v57 == v62)
        {
          v61 = (void **)(v54 + 16 * v60);
          v54 = *(_QWORD *)v2;
          v55 = *(unsigned int *)(v2 + 16);
          if (v61 != (void **)(*(_QWORD *)v2 + 16 * v55))
            goto LABEL_75;
          goto LABEL_86;
        }
      }
      break;
    }
    v54 = *(_QWORD *)v2;
    v55 = *(unsigned int *)(v2 + 16);
    if (v61 == (void **)(*(_QWORD *)v2 + 16 * v55))
      break;
LABEL_75:
    v56 = v61[1];
  }
  while (v56);
LABEL_86:
  v258 = v57;
  v67 = *(_QWORD *)(v2 + 184);
  v250 = (llvm *)v10;
  v245 = v57;
  v247 = v53;
  if ((_QWORD *)v57 == v10)
  {
    v73 = *(_QWORD *)(v248 + 40);
    *(_QWORD *)(v67 + 24) = v248;
    *(_QWORD *)(v67 + 32) = v73;
    v72 = v252[7];
    if (!v72)
      goto LABEL_102;
    v74 = *(_QWORD *)(v2 + 184);
    v75 = v10[4];
    v76 = v10[1];
    mlir::ValueRange::ValueRange((unint64_t *)v260, 0, 0);
    *(_OWORD *)v254 = *(_OWORD *)v260;
  }
  else
  {
    __dst[0] = (void *)v57;
    DefiningOp = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)__dst);
    if (DefiningOp)
    {
      v69 = *((_QWORD *)DefiningOp + 2);
      mlir::GenericProgramPoint::~GenericProgramPoint(DefiningOp);
      v71 = *(_QWORD *)(v70 + 8);
      *(_QWORD *)(v67 + 24) = v69;
      *(_QWORD *)(v67 + 32) = v71;
      v72 = v252[7];
      if (!v72)
        goto LABEL_102;
    }
    else
    {
      v77 = *((_QWORD *)__dst[0] + 2);
      v78 = *(_QWORD *)(v77 + 40);
      *(_QWORD *)(v67 + 24) = v77;
      *(_QWORD *)(v67 + 32) = v78;
      v72 = v252[7];
      if (!v72)
        goto LABEL_102;
    }
    v74 = *(_QWORD *)(v2 + 184);
    v75 = *((_QWORD *)v250 + 4);
    v76 = *((_QWORD *)v250 + 1);
    *(int64x2_t *)v254 = v243;
    v260[0] = (llvm *)&v258;
    v260[1] = (llvm *)1;
  }
  v79 = (llvm *)(v74 + 8);
  v80 = (llvm *)(v76 & 0xFFFFFFFFFFFFFFF8);
  v81 = 32 * *(unsigned int *)(v72 + 240);
  v82 = *(_QWORD *)(v72 + 232) + v81;
  v83 = -v81;
  do
  {
    if (!v83)
      goto LABEL_102;
    v262 = v80;
    *(_OWORD *)__dst = *(_OWORD *)v254;
    v259 = v75;
    v84 = *(_QWORD *)(v82 - 8);
    if (!v84)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_277;
    }
    v82 -= 32;
    v85 = (*(uint64_t (**)(uint64_t, llvm *, llvm **, void **, uint64_t *))(*(_QWORD *)v84 + 48))(v84, v79, &v262, __dst, &v259);
    v83 += 32;
  }
  while (!v86);
  v87 = v85;
  if (v85)
  {
    v262 = v250;
    __dst[0] = 0;
    v88 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v2, (unint64_t *)&v262, __dst);
    v89 = __dst[0];
    if ((v88 & 1) == 0)
    {
      v89 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(v2, (uint64_t)&v262, (unint64_t *)&v262, (_QWORD *)__dst[0]);
      *v89 = v262;
      v89[1] = 0;
    }
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v89[1] = v87;
    goto LABEL_9;
  }
LABEL_102:
  mlir::emitError(*((_QWORD *)v250 + 4), (uint64_t)&v262);
  v90 = v262;
  if (v262)
  {
    v83 = (uint64_t)&v265;
    LODWORD(__dst[0]) = 3;
    __dst[1] = "failed to materialize conversion for block argument #";
    v274 = 53;
    v91 = __dst;
    v92 = (char *)v265;
    if (v266 >= HIDWORD(v266))
    {
      v217 = v266 + 1;
      if (v265 <= __dst && (char *)v265 + 24 * v266 > (char *)__dst)
      {
        v233 = (char *)__dst - (_BYTE *)v265;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v217, 24);
        v92 = (char *)v265;
        v91 = (void **)((char *)v265 + v233);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v217, 24);
        v91 = __dst;
        v92 = (char *)v265;
      }
    }
    v79 = (llvm *)v245;
    v6 = v247;
    v93 = &v92[24 * v266];
    v94 = *(_OWORD *)v91;
    *((_QWORD *)v93 + 2) = v91[2];
    *(_OWORD *)v93 = v94;
    v95 = (v266 + 1);
    LODWORD(v266) = v266 + 1;
    v90 = v262;
    if (v262)
    {
      LODWORD(__dst[0]) = 5;
      __dst[1] = v9;
      v96 = __dst;
      v97 = (char *)v265;
      if (v95 >= HIDWORD(v266))
      {
        v219 = v95 + 1;
        v220 = (char *)v265 + 24 * v95 > (char *)__dst;
        if (v265 <= __dst && v220)
        {
          v235 = (char *)__dst - (_BYTE *)v265;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v219, 24);
          v97 = (char *)v265;
          v96 = (void **)((char *)v265 + v235);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v219, 24);
          v96 = __dst;
          v97 = (char *)v265;
        }
      }
      v98 = &v97[24 * v266];
      v99 = *(_OWORD *)v96;
      *((_QWORD *)v98 + 2) = v96[2];
      *(_OWORD *)v98 = v99;
      v100 = (v266 + 1);
      LODWORD(v266) = v266 + 1;
      v90 = v262;
      if (v262)
      {
        LODWORD(__dst[0]) = 3;
        __dst[1] = " that remained live after conversion, type was ";
        v274 = 47;
        v101 = __dst;
        v102 = (void **)v265;
        if (v100 >= HIDWORD(v266))
        {
LABEL_277:
          v222 = v100 + 1;
          v223 = &v102[3 * v100] > v101;
          if (v102 <= v101 && v223)
          {
            v237 = (char *)((char *)__dst - (char *)v102);
            llvm::SmallVectorBase<unsigned int>::grow_pod(v83, v267, v222, 24);
            v102 = (void **)v265;
            v101 = (void **)&v237[(_QWORD)v265];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v83, v267, v222, 24);
            v101 = __dst;
            v102 = (void **)v265;
          }
        }
        v103 = &v102[3 * v266];
        v104 = *(_OWORD *)v101;
        v103[2] = v101[2];
        *(_OWORD *)v103 = v104;
        LODWORD(v266) = v266 + 1;
        v90 = v262;
        if (v262)
        {
          v105 = __dst;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)__dst, *((_QWORD *)v250 + 1) & 0xFFFFFFFFFFFFFFF8);
          v106 = (char *)v265;
          if (v266 >= HIDWORD(v266))
          {
            v224 = v266 + 1;
            if (v265 <= __dst && (char *)v265 + 24 * v266 > (char *)__dst)
            {
              v238 = (char *)__dst - (_BYTE *)v265;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v83, v267, v224, 24);
              v106 = (char *)v265;
              v105 = (void **)((char *)v265 + v238);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v83, v267, v224, 24);
              v105 = __dst;
              v106 = (char *)v265;
            }
          }
          v107 = &v106[24 * v266];
          v108 = *(_OWORD *)v105;
          *((_QWORD *)v107 + 2) = v105[2];
          *(_OWORD *)v107 = v108;
          LODWORD(v266) = v266 + 1;
          v90 = v262;
        }
      }
    }
  }
  else
  {
    v79 = (llvm *)v245;
    v6 = v247;
  }
  __dst[0] = v90;
  LOBYTE(__dst[1]) = 0;
  v282 = 0;
  if (v272)
  {
    __dst[1] = (void *)v263;
    v143 = v266;
    LODWORD(v274) = v264;
    v144 = v277;
    v275 = v277;
    v276 = 0x400000000;
    if ((_DWORD)v266)
    {
      v145 = v267;
      if (v265 != v267)
      {
        v275 = v265;
        v276 = v266;
        v265 = v267;
        HIDWORD(v266) = 0;
        v146 = 1;
        goto LABEL_162;
      }
      if (v266 < 5)
      {
        v147 = v266;
LABEL_160:
        memcpy(v144, v145, 24 * v147);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v266, 24);
        v147 = v266;
        if ((_DWORD)v266)
        {
          v145 = v265;
          v144 = v275;
          goto LABEL_160;
        }
      }
      LODWORD(v276) = v143;
      v146 = v272;
LABEL_162:
      LODWORD(v266) = 0;
    }
    else
    {
      v146 = 1;
    }
    v278 = v268;
    v279 = v269;
    v268 = 0uLL;
    *(_OWORD *)v280 = *(_OWORD *)__p;
    v281 = v271;
    v269 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v271 = 0;
    v282 = 1;
    if (v146)
    {
      if (v265 != v267)
        free(v265);
      v272 = 0;
    }
  }
  mlir::InFlightDiagnostic::abandon(&v262);
  if (v262)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v262);
  if (v272)
  {
    v148 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v149 = (_QWORD **)__p[1];
      v150 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v149 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v149 - 1);
        while (v149 != v148);
        v150 = __p[0];
      }
      __p[1] = v148;
      operator delete(v150);
    }
    v151 = (_QWORD *)v268;
    if ((_QWORD)v268)
    {
      v152 = (_QWORD *)*((_QWORD *)&v268 + 1);
      v153 = (void *)v268;
      if (*((_QWORD *)&v268 + 1) != (_QWORD)v268)
      {
        do
        {
          v155 = (void *)*--v152;
          v154 = v155;
          *v152 = 0;
          if (v155)
            operator delete[](v154);
        }
        while (v152 != v151);
        v153 = (void *)v268;
      }
      *((_QWORD *)&v268 + 1) = v151;
      operator delete(v153);
    }
    if (v265 != v267)
      free(v265);
  }
  if (v79 != v250 && __dst[0])
  {
    LODWORD(v262) = 3;
    v263 = ", with target type ";
    v264 = 19;
    v156 = &v262;
    v157 = (char *)v275;
    if (v276 >= HIDWORD(v276))
    {
      v218 = v276 + 1;
      if (v275 <= &v262 && (char *)v275 + 24 * v276 > (char *)&v262)
      {
        v234 = (char *)&v262 - (_BYTE *)v275;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v218, 24);
        v157 = (char *)v275;
        v156 = (llvm **)((char *)v275 + v234);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v218, 24);
        v156 = &v262;
        v157 = (char *)v275;
      }
    }
    v158 = &v157[24 * v276];
    v159 = *(_OWORD *)v156;
    *((_QWORD *)v158 + 2) = v156[2];
    *(_OWORD *)v158 = v159;
    LODWORD(v276) = v276 + 1;
    if (__dst[0])
    {
      v160 = &v262;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v262, *(_QWORD *)(v258 + 8) & 0xFFFFFFFFFFFFFFF8);
      v161 = (char *)v275;
      if (v276 >= HIDWORD(v276))
      {
        v221 = v276 + 1;
        if (v275 <= &v262 && (char *)v275 + 24 * v276 > (char *)&v262)
        {
          v236 = (char *)&v262 - (_BYTE *)v275;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v221, 24);
          v161 = (char *)v275;
          v160 = (llvm **)((char *)v275 + v236);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v221, 24);
          v160 = &v262;
          v161 = (char *)v275;
        }
      }
      v162 = &v161[24 * v276];
      v163 = *(_OWORD *)v160;
      *((_QWORD *)v162 + 2) = v160[2];
      *(_OWORD *)v162 = v163;
      LODWORD(v276) = v276 + 1;
    }
  }
  v164 = mlir::Diagnostic::attachNote((uint64_t *)&__dst[1], v6[3], 1);
  v165 = v164 + 16;
  v166 = *(_QWORD *)(v164 + 16);
  LODWORD(v262) = 3;
  v263 = "see existing live user here: ";
  v264 = 29;
  v167 = *(unsigned int *)(v164 + 24);
  v168 = &v262;
  if (v167 >= *(_DWORD *)(v164 + 28))
  {
    v215 = v167 + 1;
    v216 = v166 + 24 * v167 > (unint64_t)&v262;
    if (v166 <= (unint64_t)&v262 && v216)
    {
      v232 = (char *)&v262 - v166;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v165, (void *)(v164 + 32), v215, 24);
      v166 = *(_QWORD *)(v164 + 16);
      v168 = (llvm **)&v232[v166];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v165, (void *)(v164 + 32), v215, 24);
      v166 = *(_QWORD *)(v164 + 16);
      v168 = &v262;
    }
  }
  v169 = v166 + 24 * *(unsigned int *)(v164 + 24);
  v170 = *(_OWORD *)v168;
  *(_QWORD *)(v169 + 16) = v168[2];
  *(_OWORD *)v169 = v170;
  ++*(_DWORD *)(v164 + 24);
  mlir::Diagnostic::operator<<((mlir::Diagnostic *)v164, (mlir::Operation *)v6);
  if (__dst[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
  if (v282)
  {
    v171 = (_QWORD **)v280[0];
    if (v280[0])
    {
      v172 = (_QWORD **)v280[1];
      v173 = v280[0];
      if (v280[1] != v280[0])
      {
        do
          v172 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v172 - 1);
        while (v172 != v171);
        v173 = v280[0];
      }
      v280[1] = v171;
      operator delete(v173);
    }
    v174 = (_QWORD *)v278;
    if ((_QWORD)v278)
    {
      v175 = (_QWORD *)*((_QWORD *)&v278 + 1);
      v176 = (void *)v278;
      if (*((_QWORD *)&v278 + 1) == (_QWORD)v278)
        goto LABEL_256;
      do
      {
        v178 = (void *)*--v175;
        v177 = v178;
        *v175 = 0;
        if (v178)
          operator delete[](v177);
      }
      while (v175 != v174);
      goto LABEL_255;
    }
LABEL_257:
    if (v275 != v277)
      free(v275);
  }
  return 0;
}

uint64_t mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(mlir::ForwardIterator *a1, mlir::Operation *a2, uint64_t a3, int a4)
{
  uint64_t Iterable;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  mlir::GenericProgramPoint *v27;
  int v28;
  char v29;
  uint64_t result;
  mlir::ForwardIterator *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  const void *v35;
  void *__p;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  const void *v41;
  void *v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  void *v47;
  _BYTE *v48;
  void *v49;
  void *v50;
  void *v51;
  _BYTE *v52;

  if (!a4)
  {
    result = ((uint64_t (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
    if (!(_DWORD)result)
      return result;
    if ((_DWORD)result == 2)
      return 1;
  }
  v31 = a1;
  Iterable = mlir::ForwardIterator::makeIterable(a1, a2);
  if (!v9)
  {
LABEL_48:
    if (a4 == 1)
      return ((uint64_t (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, v31);
    return 1;
  }
  v10 = (_QWORD *)Iterable;
  v32 = (_QWORD *)(Iterable + 24 * v9);
  while (1)
  {
    mlir::ForwardDominanceIterator<false>::makeIterable(v10, (uint64_t)&v45);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v39, &v41, (const llvm::SmallPtrSetImplBase *)&v45);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v11 = v47;
    v12 = v48 - (_BYTE *)v47;
    if (v48 != v47)
    {
      if (v12 < 0)
        goto LABEL_55;
      v13 = (char *)operator new(v48 - (_BYTE *)v47);
      v42 = v13;
      v43 = v13;
      v44 = &v13[32 * (v12 >> 5)];
      v14 = v12 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v13, v11, v14);
      v43 = &v13[v14];
    }
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v33, &v35, (const llvm::SmallPtrSetImplBase *)&v49);
    __p = 0;
    v37 = 0;
    v38 = 0;
    v15 = v51;
    v16 = v52 - (_BYTE *)v51;
    if (v52 == v51)
    {
      v17 = 0;
      v19 = 0;
    }
    else
    {
      if (v16 < 0)
LABEL_55:
        abort();
      v17 = (char *)operator new(v52 - (_BYTE *)v51);
      __p = v17;
      v37 = v17;
      v38 = &v17[32 * (v16 >> 5)];
      v18 = v16 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v17, v15, v18);
      v19 = &v17[v18];
      v37 = &v17[v18];
    }
LABEL_12:
    if (v43 - (_BYTE *)v42 == v19 - v17)
    {
      if (v42 == v43)
      {
LABEL_46:
        v29 = 1;
        if (v17)
          goto LABEL_28;
        goto LABEL_29;
      }
      v20 = 0;
      while (1)
      {
        v21 = (char *)v42 + v20;
        if (*(_QWORD *)((char *)v42 + v20) != *(_QWORD *)&v17[v20])
          break;
        v22 = v17[v20 + 24];
        if (v21[24])
          v23 = v22 == 0;
        else
          v23 = 1;
        if (v23)
        {
          if ((v21[24] != 0) != (v22 != 0))
            break;
        }
        else if (*(_QWORD *)((char *)v42 + v20 + 8) != *(_QWORD *)&v17[v20 + 8]
               || *(_QWORD *)((char *)v42 + v20 + 16) != *(_QWORD *)&v17[v20 + 16])
        {
          break;
        }
        v20 += 32;
        if (v21 + 32 == v43)
          goto LABEL_46;
      }
    }
    v24 = *((_QWORD *)v43 - 4);
    v25 = (mlir::GenericProgramPoint *)(v24 + 32);
    v26 = *(mlir::GenericProgramPoint **)(v24 + 40);
    do
    {
      if (v26 == v25)
      {
        llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::toNext((uint64_t)&v39);
        v17 = (char *)__p;
        v19 = v37;
        goto LABEL_12;
      }
      v27 = (mlir::GenericProgramPoint *)*((_QWORD *)v26 + 1);
      mlir::GenericProgramPoint::~GenericProgramPoint(v26);
      v28 = mlir::detail::walk<mlir::ForwardDominanceIterator<false>>();
      v26 = v27;
    }
    while (v28);
    v29 = 0;
    v17 = (char *)__p;
    if (__p)
    {
LABEL_28:
      v37 = v17;
      operator delete(v17);
    }
LABEL_29:
    if (v34 != v33)
      free(v34);
    if (v42)
    {
      v43 = (char *)v42;
      operator delete(v42);
    }
    if (v40 != v39)
      free(v40);
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v50 != v49)
      free(v50);
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v46 != v45)
      free(v46);
    if ((v29 & 1) == 0)
      return 0;
    v10 += 3;
    if (v10 == v32)
      goto LABEL_48;
  }
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation *>,llvm::function_ref<void ()(mlir::Diagnostic &)>)::$_0>(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  BOOL v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 8);
  if (v5 >= *(_DWORD *)(*a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v4 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = a2;
  ++*(_DWORD *)(v4 + 8);
  v6 = (unsigned __int16)mlir::ConversionTarget::isLegal((mlir::ConversionTarget *)a1[1], a2);
  if ((_BYTE)v6)
    v7 = v6 >= 0x100u;
  else
    v7 = 0;
  if (v7)
    return 2;
  else
    return 1;
}

BOOL `anonymous namespace'::OperationLegalizer::legalize(mlir::ConversionTarget **this, mlir::Block **a2, mlir::ConversionPatternRewriter *a3)
{
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::Operation **v11;
  mlir::Operation *v12;
  int v13;
  int v14;
  uint64_t v15;
  mlir::Block *ParentOp;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  mlir::Block *v21;
  int v22;
  unsigned int v23;
  int32x2_t *v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  mlir::Block *v28;
  uint64_t v29;
  uint64_t v30;
  __int32 v31;
  unsigned __int32 v32;
  int v33;
  _DWORD *v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v42;
  __int32 v43;
  __int32 v44;
  __int32 v45;
  _QWORD v46[3];
  __int32 v47;
  __int32 v48;
  __int32 v49;
  __int32 v50;
  __int32 v51;
  __int32 v52;
  __int32 v53;
  mlir::Operation *v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[3];
  _anonymous_namespace_::OperationLegalizer *v58;
  mlir::Operation **v59;
  mlir::ConversionPatternRewriter *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)mlir::ConversionTarget::isLegal(this[12], (mlir::Operation *)a2);
  if (v6 < 0x100u)
  {
    v7 = *((_QWORD *)a3 + 7);
    v8 = *(_QWORD *)(v7 + 328);
    v9 = *(unsigned int *)(v7 + 344);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v11 = (mlir::Operation **)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == (mlir::Operation *)a2)
        goto LABEL_12;
      v13 = 1;
      while (v12 != (mlir::Operation *)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(mlir::Operation **)(v8 + 16 * v10);
        if (v12 == (mlir::Operation *)a2)
        {
          v11 = (mlir::Operation **)(v8 + 16 * v10);
          goto LABEL_12;
        }
      }
    }
    v11 = (mlir::Operation **)(v8 + 16 * v9);
LABEL_12:
    if (v11 != (mlir::Operation **)(v8 + 16 * v9))
      return 1;
    ParentOp = a2[2];
    if (ParentOp)
      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    v17 = *(_DWORD *)(v7 + 608);
    if (v17)
    {
      v18 = *(_QWORD *)(v7 + 592);
      v19 = v17 - 1;
      v20 = ((ParentOp >> 4) ^ (ParentOp >> 9)) & v19;
      v21 = *(mlir::Block **)(v18 + 8 * v20);
      if (v21 == ParentOp)
        return 1;
      v22 = 1;
      v15 = 1;
      while (v21 != (mlir::Block *)-4096)
      {
        v23 = v20 + v22++;
        v20 = v23 & v19;
        v21 = *(mlir::Block **)(v18 + 8 * v20);
        if (v21 == ParentOp)
          return v15;
      }
    }
    v24 = (int32x2_t *)*((_QWORD *)a3 + 7);
    v25 = v24[26].i32[0];
    v26 = v24[45].i32[0];
    v27 = v24[47].i32[0];
    v44 = v24[53].i32[0];
    v45 = v24[34].i32[0];
    v42 = v24[80].i32[0];
    v43 = v24[78].i32[0];
    v55 = v57;
    v56 = 0x200000000;
    v28 = a2[2];
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
    *((_QWORD *)a3 + 3) = v28;
    *((_QWORD *)a3 + 4) = v29;
    if (mlir::OpBuilder::tryFold((_QWORD *)a3 + 1, (uint64_t)a2, (uint64_t)&v55))
    {
      mlir::ValueRange::ValueRange((unint64_t *)&v58, (uint64_t)v55, v56);
      mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(*((_QWORD *)a3 + 7), (unsigned int *)a2, (uint64_t)v58, (uint64_t)v59);
      v31 = v24[26].i32[0];
      if (v25 == v31)
      {
LABEL_26:
        v33 = 0;
        goto LABEL_29;
      }
      v32 = v25;
      {
        if (v31 == ++v32)
          goto LABEL_26;
      }
      v47 = v25;
      v48 = v45;
      v49 = v26;
      v50 = v27;
      v51 = v44;
      v52 = v43;
      v53 = v42;
      mlir::detail::ConversionPatternRewriterImpl::resetState(v24, &v47);
    }
    v33 = 1;
LABEL_29:
    if (v55 != v57)
      free(v55);
    if (v33)
    {
      v54 = (mlir::Operation *)a2;
      v34 = (_DWORD *)*((_QWORD *)a3 + 7);
      v58 = (_anonymous_namespace_::OperationLegalizer *)this;
      v59 = &v54;
      v60 = a3;
      v35 = v34[68];
      v36 = v34[90];
      v37 = v34[94];
      v38 = v34[106];
      v39 = v34[156];
      v40 = v34[160];
      v47 = v34[52];
      v48 = v35;
      v49 = v36;
      v50 = v37;
      v51 = v38;
      v52 = v39;
      v53 = v40;
      v46[0] = v34;
      v46[1] = &v47;
      v46[2] = this;
      v55 = this;
      v56 = (uint64_t)&v54;
      v57[0] = a3;
      v57[1] = &v47;
      v57[2] = v34;
    }
    return 1;
  }
  if (!(_BYTE)v6 || (*((_DWORD *)a2 + 11) & 0x7FFFFF) == 0)
    return 1;
  v55 = (void *)*((_QWORD *)a3 + 7);
  v15 = 1;
  mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::markNestedOpsIgnored(mlir::Operation *)::$_0>, (uint64_t)&v55, 1);
  return v15;
}

void mlir::detail::ConversionPatternRewriterImpl::resetState(int32x2_t *this, _DWORD *a2)
{
  _DWORD *v2;
  unsigned int v4;
  __int32 v5;
  int32x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  __int32 v14;
  int32x2_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t NextResultAtOffset;
  __int32 v32;
  unint64_t v33;
  int32x2_t v34;
  unsigned __int8 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  __int32 v43;
  __int32 v44;
  uint64_t v45;
  unsigned int v46;
  __int32 v47;
  __int32 v48;
  unsigned __int32 v49;
  uint64_t *v50;
  int32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned __int32 v57;
  unsigned int j;
  __int32 v59;
  unsigned __int32 v60;
  __int32 v61;
  unsigned __int32 v62;
  int32x2_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int32 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int32x2_t v79;
  unsigned __int8 v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unint64_t v89;
  unsigned __int32 v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  unint64_t v96;
  _QWORD *v97;

  v2 = a2;
  v4 = a2[6];
  v5 = this[80].i32[0];
  if (v4 != v5)
  {
    v6 = this + 79;
    do
    while (v5 != v4);
    v7 = v2[6];
    v8 = this[80].u32[0];
    if ((_DWORD)v8 != (_DWORD)v7)
    {
      if (v8 > v7)
      {
        v9 = 136 * v8;
        v10 = v9 + *(_QWORD *)v6 - 112;
        v11 = 136 * v7 - v9;
        do
        {
          v12 = *(void **)(v10 + 80);
          if ((void *)(v10 + 96) != v12)
            free(v12);
          if (v10 + 16 != *(_QWORD *)v10)
            free(*(void **)v10);
          v10 -= 136;
          v11 += 136;
        }
        while (v11);
        goto LABEL_20;
      }
      if (this[80].i32[1] >= v7)
      {
        v13 = (char *)*v6;
        if (v8 == v7)
        {
LABEL_20:
          this[80].i32[0] = v7;
          goto LABEL_21;
        }
      }
      else
      {
        v97 = 0;
        v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&this[79], &this[81], v7, 136, (unint64_t *)&v97);
        v14 = (int)v97;
        v15 = (int32x2_t *)this[79];
        if (v15 != &this[81])
          free(v15);
        this[79] = (int32x2_t)v13;
        this[80].i32[1] = v14;
        v8 = this[80].u32[0];
        if (v8 == v7)
          goto LABEL_20;
      }
      v16 = &v13[136 * v8];
      do
      {
        *((_OWORD *)v16 + 6) = 0uLL;
        *((_OWORD *)v16 + 7) = 0uLL;
        *((_QWORD *)v16 + 16) = 0;
        *((_OWORD *)v16 + 4) = 0uLL;
        *((_OWORD *)v16 + 5) = 0uLL;
        *((_OWORD *)v16 + 2) = 0uLL;
        *((_OWORD *)v16 + 3) = 0uLL;
        *(_OWORD *)v16 = 0uLL;
        *((_OWORD *)v16 + 1) = 0uLL;
        *((_QWORD *)v16 + 3) = v16 + 40;
        *((_DWORD *)v16 + 9) = 8;
        *((_QWORD *)v16 + 13) = v16 + 120;
        *((_DWORD *)v16 + 29) = 2;
        v16 += 136;
      }
      while (v16 != &v13[136 * v7]);
      goto LABEL_20;
    }
  }
LABEL_21:
  v17 = v2[3];
  v18 = this[47].u32[0];
  if ((_DWORD)v17 != (_DWORD)v18)
  {
    v19 = 8 * v17;
    v20 = (unint64_t *)(*(_QWORD *)&this[46] + v19);
    v21 = 8 * v18 - v19;
    do
    {
      v96 = *v20;
      v97 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v96, &v97))
      {
        *v97 = -8192;
        this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
    v22 = v2[3];
    v23 = this[47].u32[0];
    if (v23 != (_DWORD)v22)
    {
      if (v23 <= v22)
      {
        if (this[47].i32[1] < v22)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[46], &this[48], v2[3], 8);
          v23 = this[47].u32[0];
        }
        if (v23 != (_DWORD)v22)
          bzero((void *)(*(_QWORD *)&this[46] + 8 * v23), 8 * (v22 - v23));
      }
      this[47].i32[0] = v22;
    }
  }
  mlir::detail::ConversionPatternRewriterImpl::undoBlockActions(this, v2[4]);
  v24 = v2[2];
  v25 = this[45].u32[0];
  v95 = v2;
  if ((_DWORD)v24 != (_DWORD)v25)
  {
    v26 = this[44];
    v93 = *(_QWORD *)&v26 + 16 * v25;
    v27 = *(_QWORD *)&v26 + 16 * v24;
    do
    {
      v28 = *(unsigned int *)(*(_QWORD *)v27 + 36);
      if ((_DWORD)v28)
        v29 = *(_QWORD *)v27 - 16;
      else
        v29 = 0;
      if ((_DWORD)v28)
      {
        for (i = 0; i != v28; ++i)
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v29, i);
          v32 = this[2].i32[0];
          if (v32)
          {
            v33 = NextResultAtOffset;
            v34 = *this;
            if ((v35 & 1) == 0
            {
              v42 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v42 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v42;
            }
            v36 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v33) ^ HIDWORD(v33));
            v37 = 0x9DDFEA08EB382D69 * (HIDWORD(v33) ^ (v36 >> 47) ^ v36);
            LODWORD(v37) = (-348639895 * ((v37 >> 47) ^ v37)) & (v32 - 1);
            v38 = (uint64_t *)(*(_QWORD *)&v34 + 16 * v37);
            v39 = *v38;
            if (v33 != *v38)
            {
              v40 = 1;
              do
              {
                if (v39 == -4096)
                  goto LABEL_42;
                v41 = v37 + v40++;
                v37 = v41 & (v32 - 1);
                v39 = *(_QWORD *)(*(_QWORD *)&v34 + 16 * v37);
              }
              while (v33 != v39);
              v38 = (uint64_t *)(*(_QWORD *)&v34 + 16 * v37);
            }
            *v38 = -8192;
            this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
          }
LABEL_42:
          ;
        }
      }
      v27 += 16;
    }
    while (v27 != v93);
    v43 = v2[2];
    v44 = this[45].i32[0];
    if (v44 == v43)
      goto LABEL_65;
    v45 = this[43].u32[0];
    v46 = v45 - 1;
    v47 = this[42].i32[0] + v43;
    v48 = v44 + this[42].i32[1];
    v49 = this[45].u32[0];
    while (1)
    {
      v51 = this[41];
      if ((_DWORD)v45)
      {
        v52 = *(_QWORD *)(*(_QWORD *)&this[44] + 16 * v49 - 16);
        LODWORD(v53) = ((v52 >> 4) ^ (v52 >> 9)) & v46;
        v50 = (uint64_t *)(*(_QWORD *)&v51 + 16 * v53);
        v54 = *v50;
        if (*v50 == v52)
          goto LABEL_57;
        v55 = 1;
        while (v54 != -4096)
        {
          v56 = v53 + v55++;
          v53 = v56 & v46;
          v54 = *(_QWORD *)(*(_QWORD *)&v51 + 16 * v53);
          if (v54 == v52)
          {
            v50 = (uint64_t *)(*(_QWORD *)&v51 + 16 * v53);
            goto LABEL_57;
          }
        }
      }
      v50 = (uint64_t *)(*(_QWORD *)&v51 + 16 * v45);
LABEL_57:
      *v50 = -8192;
      if (--v49 == v43)
      {
        this[45].i32[0] = v43;
        this[42].i32[0] = v47 - v44;
        this[42].i32[1] = v48 - v43;
        break;
      }
    }
  }
LABEL_65:
  v57 = this[34].u32[0];
  if (v57 != v2[1])
  {
    v70 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    do
    {
      v71 = *(_QWORD *)&this[33] + 24 * v57;
      v72 = *(_QWORD *)(v71 - 24);
      v73 = *(_QWORD *)(v71 - 16);
      this[34].i32[0] = v57 - 1;
      if ((v73 & 4) != 0 && (*(_BYTE *)(v72 + 46) & 0x80) != 0)
      {
        v74 = *(unsigned int *)(v72 + 68);
        if ((_DWORD)v74)
        {
          v75 = this[2].i32[0];
          if (v75)
          {
            v76 = 0;
            v77 = *(_QWORD *)(v72 + 72);
LABEL_86:
            v78 = *(_QWORD *)(v77 + 32 * v76 + 24);
            v79 = *this;
            if ((v80 & 1) == 0)
            {
              v94 = v72;
              v70 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
              v88 = v87;
              v72 = v94;
              if (v88)
              {
                v89 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v89 = 0xFF51AFD7ED558CCDLL;
                llvm::hashing::detail::get_execution_seed(void)::seed = v89;
                v70 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                v72 = v94;
              }
            }
            v81 = 0x9DDFEA08EB382D69 * ((v70[19] + 8 * v78) ^ HIDWORD(v78));
            v82 = 0x9DDFEA08EB382D69 * (HIDWORD(v78) ^ (v81 >> 47) ^ v81);
            LODWORD(v82) = (-348639895 * ((v82 >> 47) ^ v82)) & (v75 - 1);
            v83 = (uint64_t *)(*(_QWORD *)&v79 + 16 * v82);
            v84 = *v83;
            if (v78 == *v83)
            {
LABEL_88:
              *v83 = -8192;
              this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
              goto LABEL_89;
            }
            v85 = 1;
            while (v84 != -4096)
            {
              v86 = v82 + v85++;
              v82 = v86 & (v75 - 1);
              v84 = *(_QWORD *)(*(_QWORD *)&v79 + 16 * v82);
              if (v78 == v84)
              {
                v83 = (uint64_t *)(*(_QWORD *)&v79 + 16 * v82);
                goto LABEL_88;
              }
            }
LABEL_89:
            while (++v76 != v74)
            {
              v75 = this[2].i32[0];
              if (v75)
                goto LABEL_86;
            }
          }
        }
      }
      detachNestedAndErase((mlir::Operation *)v72);
      v70 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v57 = this[34].u32[0];
      v2 = v95;
    }
    while (v57 != v95[1]);
  }
  for (j = this[26].u32[0]; j != *v2; this[26].i32[0] = j)
  {
    detachNestedAndErase(*(mlir::Operation **)(*(_QWORD *)&this[25] + 8 * j - 8));
    j = this[26].i32[0] - 1;
  }
  v59 = v2[5];
  v60 = this[78].u32[0];
  if (v60 != v59)
  {
    v61 = this[76].i32[0];
    if (v61)
    {
      v62 = v61 - 1;
      do
      {
        v63 = this[74];
        v64 = *(_QWORD *)(*(_QWORD *)&this[77] + 8 * v60 - 8);
        LODWORD(v65) = ((v64 >> 4) ^ (v64 >> 9)) & v62;
        v66 = (uint64_t *)(*(_QWORD *)&v63 + 8 * v65);
        v67 = *v66;
        if (v64 == *v66)
        {
LABEL_72:
          *v66 = -8192;
          this[75] = vadd_s32(this[75], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v68 = 1;
          while (v67 != -4096)
          {
            v69 = v65 + v68++;
            v65 = v69 & v62;
            v67 = *(_QWORD *)(*(_QWORD *)&v63 + 8 * v65);
            if (v64 == v67)
            {
              v66 = (uint64_t *)(*(_QWORD *)&v63 + 8 * v65);
              goto LABEL_72;
            }
          }
        }
        --v60;
      }
      while (v60 != v59);
    }
    this[78].i32[0] = v59;
  }
  v90 = this[150].u32[0];
  if (v90)
  {
    v91 = *(_QWORD *)&this[149] - 4;
    v92 = v2[2];
    do
    {
      if (*(_DWORD *)(v91 + 4 * v90) < v92)
        break;
      this[150].i32[0] = --v90;
    }
    while (v90);
  }
}

void llvm::SmallVectorTemplateBase<`anonymous namespace'::OperationTransactionState,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 136 * v2;
    do
    {
      v8 = v6 + v5;
      v9 = a2 + v5;
      v10 = *(_OWORD *)(v6 + v5);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + v5 + 16);
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(a2 + v5 + 24) = a2 + v5 + 40;
      *(_QWORD *)(v9 + 32) = 0x800000000;
      if (*(_DWORD *)(v6 + v5 + 32))
        llvm::SmallVectorImpl<mlir::Value>::operator=(a2 + v5 + 24, v8 + 24);
      *(_QWORD *)(v9 + 104) = v9 + 120;
      v11 = v9 + 104;
      *(_QWORD *)(v11 + 8) = 0x200000000;
      if (*(_DWORD *)(v8 + 112))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v11, v6 + v5 + 104);
      v5 += 136;
    }
    while (v8 + 136 != v7);
    v12 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v12)
    {
      v13 = *a1;
      v14 = 136 * v12;
      do
      {
        v15 = v13 + v14;
        v16 = *(void **)(v13 + v14 - 32);
        if ((void *)(v13 + v14 - 16) != v16)
          free(v16);
        v17 = *(void **)(v15 - 112);
        if ((void *)(v15 - 96) != v17)
          free(v17);
        v14 -= 136;
      }
      while (v14);
    }
  }
}

BOOL llvm::function_ref<BOOL ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::legalizeWithPattern(mlir::Operation *,mlir::ConversionPatternRewriter &)::$_0>(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if ((a2[16] & 4) != 0)
    return 1;
  v2 = *a1;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 != *(_QWORD *)v2)
    goto LABEL_3;
  v6 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 8 * v6;
    v9 = *(_QWORD **)(v2 + 8);
    while ((_BYTE *)*v9 != a2)
    {
      if (*v9 == -2)
        v7 = v9;
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        if (!v7)
          goto LABEL_14;
        *v7 = a2;
        --*(_DWORD *)(v2 + 24);
        return 1;
      }
    }
    return 0;
  }
LABEL_14:
  if (v6 >= *(_DWORD *)(v2 + 16))
  {
LABEL_3:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)v2, a2);
    return v4 != 0;
  }
  *(_DWORD *)(v2 + 20) = v6 + 1;
  *(_QWORD *)(v3 + 8 * v6) = a2;
  return 1;
}

const void **llvm::function_ref<void ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::legalizeWithPattern(mlir::Operation *,mlir::ConversionPatternRewriter &)::$_1>(uint64_t a1, const void *a2)
{
  _OWORD *v3;
  llvm::SmallPtrSetImplBase *v4;
  int32x2_t *v5;
  uint64_t v6;
  const void **result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];

  v3 = *(_OWORD **)(a1 + 8);
  v4 = *(llvm::SmallPtrSetImplBase **)(a1 + 16);
  v5 = *(int32x2_t **)a1;
  v15[0] = *v3;
  *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)((char *)v3 + 12);
  mlir::detail::ConversionPatternRewriterImpl::resetState(v5, v15);
  v6 = *((_QWORD *)v4 + 1);
  if (v6 == *(_QWORD *)v4)
  {
    v10 = *((unsigned int *)v4 + 5);
    result = (const void **)(v6 + 8 * v10);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      while (*(const void **)(v6 + v11) != a2)
      {
        v11 += 8;
        if (v12 == v11)
          goto LABEL_12;
      }
      result = (const void **)(v6 + v11);
    }
LABEL_12:
    v8 = *((_QWORD *)v4 + 1);
  }
  else
  {
    result = llvm::SmallPtrSetImplBase::FindBucketFor(v4, a2);
    v6 = *(_QWORD *)v4;
    v8 = *((_QWORD *)v4 + 1);
    if (*result != a2)
    {
      v9 = 16;
      if (v8 == v6)
        v9 = 20;
      result = (const void **)(v8 + 8 * *(unsigned int *)((char *)v4 + v9));
    }
  }
  v13 = v8 == v6;
  v14 = 16;
  if (v13)
    v14 = 20;
  if (result != (const void **)(v8 + 8 * *(unsigned int *)((char *)v4 + v14)))
  {
    *result = (const void *)-2;
    ++*((_DWORD *)v4 + 6);
  }
  return result;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::legalizeWithPattern(mlir::Operation *,mlir::ConversionPatternRewriter &)::$_2>(uint64_t **a1, void *a2)
{
  const void *v2;
  uint64_t **v3;
  _anonymous_namespace_::OperationLegalizer *v4;
  uint64_t v5;
  unsigned int *v6;
  mlir::ConversionPatternRewriter *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Block **v17;
  mlir::Block *v18;
  uint64_t ParentOp;
  BOOL v20;
  void *v21;
  unint64_t Parent;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  const void **v37;
  const void **i;
  const void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  int v53;
  uint64_t v54;
  int v55;
  const void **BucketFor;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int32x2_t *v63;
  uint64_t *v64;
  int v66;
  int v69;
  unsigned int *v70;
  _BYTE v71[28];
  _BYTE v72[144];

  v2 = a2;
  v3 = a1;
  v4 = (_anonymous_namespace_::OperationLegalizer *)*a1;
  v5 = *a1[1];
  v7 = (mlir::ConversionPatternRewriter *)a1[2];
  v6 = (unsigned int *)a1[3];
  v8 = *((_QWORD *)v7 + 7);
  v69 = *(_DWORD *)(v8 + 208);
  v9 = *(_DWORD *)(v8 + 424);
  v10 = *(_DWORD *)(v8 + 640);
  *(_QWORD *)v71 = v72;
  *(_QWORD *)&v71[8] = v72;
  *(_QWORD *)&v71[16] = 16;
  *(_DWORD *)&v71[24] = 0;
  v70 = v6;
  v11 = (int)v6[4];
  if ((_DWORD)v11 == v9)
  {
    v12 = (int *)v6;
    v13 = (int)v6[6];
    if (v10 == (_DWORD)v13)
      goto LABEL_56;
LABEL_53:
    v46 = v10 - v13;
    v47 = 136 * v13;
    {
      v47 += 136;
      if (!--v46)
        goto LABEL_56;
    }
    v50 = 0;
    v49 = 1;
    v51 = *((_QWORD *)v4 + 1);
    if (v51 == *(_QWORD *)v4)
      goto LABEL_74;
    goto LABEL_67;
  }
  v66 = v10;
  do
  {
    v15 = *(_QWORD *)(v8 + 416);
    if ((*(_DWORD *)(v15 + 40 * v11) | 4) == 5)
      goto LABEL_6;
    v16 = v15 + 40 * v11;
    v18 = *(mlir::Block **)(v16 + 8);
    v17 = (mlir::Block **)(v16 + 8);
    ParentOp = mlir::Block::getParentOp(v18);
    v20 = !ParentOp || ParentOp == v5;
    if (v20)
      goto LABEL_6;
    v21 = (void *)ParentOp;
    if (((*((_QWORD *)*v17 + 7) - *((_QWORD *)*v17 + 6)) & 0x7FFFFFFF8) == 0)
      goto LABEL_6;
    Parent = mlir::Block::getParent(*v17);
    v23 = *(_DWORD *)(v8 + 176);
    if (v23)
    {
      v24 = *(_QWORD *)(v8 + 160);
      v25 = v23 - 1;
      v26 = ((Parent >> 4) ^ (Parent >> 9)) & (v23 - 1);
      v27 = *(_QWORD *)(v24 + 16 * v26);
      if (v27 == Parent)
      {
LABEL_15:
        v28 = *(_QWORD *)(v24 + 16 * v26 + 8);
        if (v28)
        {
          mlir::detail::ConversionPatternRewriterImpl::convertBlockSignature(v8, *v17, v28, 0);
          if (!v14)
            goto LABEL_71;
          goto LABEL_6;
        }
      }
      else
      {
        v44 = 1;
        while (v27 != -4096)
        {
          v45 = v26 + v44++;
          v26 = v45 & v25;
          v27 = *(_QWORD *)(v24 + 16 * v26);
          if (v27 == Parent)
            goto LABEL_15;
        }
      }
    }
    if (*(_DWORD *)&v71[20] == *(_DWORD *)&v71[24])
    {
      v29 = *(unsigned int *)(v8 + 208);
      v30 = *v70;
      if ((_DWORD)v30 != (_DWORD)v29)
      {
        v36 = *(_QWORD *)(v8 + 200);
        v37 = (const void **)(v36 + 8 * v29);
        for (i = (const void **)(v36 + 8 * v30); i != v37; ++i)
        {
          v39 = *i;
          if (*(_QWORD *)&v71[8] != *(_QWORD *)v71)
            goto LABEL_31;
          v40 = *(unsigned int *)&v71[20];
          if (*(_DWORD *)&v71[20])
          {
            v41 = 0;
            v42 = 8 * *(unsigned int *)&v71[20];
            v43 = *(_QWORD **)&v71[8];
            while ((const void *)*v43 != v39)
            {
              if (*v43 == -2)
                v41 = v43;
              ++v43;
              v42 -= 8;
              if (!v42)
              {
                if (!v41)
                  goto LABEL_42;
                *v41 = v39;
                --*(_DWORD *)&v71[24];
                goto LABEL_32;
              }
            }
            continue;
          }
LABEL_42:
          if (*(_DWORD *)&v71[20] < *(_DWORD *)&v71[16])
          {
            ++*(_DWORD *)&v71[20];
            *(_QWORD *)(*(_QWORD *)&v71[8] + 8 * v40) = v39;
          }
          else
          {
LABEL_31:
            llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)v71, v39);
          }
LABEL_32:
          ;
        }
      }
    }
    if (*(_QWORD *)&v71[8] != *(_QWORD *)v71)
      goto LABEL_19;
    v32 = *(unsigned int *)&v71[20];
    if (*(_DWORD *)&v71[20])
    {
      v33 = 0;
      v34 = 8 * *(unsigned int *)&v71[20];
      v35 = *(_QWORD **)&v71[8];
      while ((void *)*v35 != v21)
      {
        if (*v35 == -2)
          v33 = v35;
        ++v35;
        v34 -= 8;
        if (!v34)
        {
          if (!v33)
            goto LABEL_44;
          *v33 = v21;
          --*(_DWORD *)&v71[24];
          goto LABEL_20;
        }
      }
      goto LABEL_6;
    }
LABEL_44:
    if (*(_DWORD *)&v71[20] < *(_DWORD *)&v71[16])
    {
      ++*(_DWORD *)&v71[20];
      *(_QWORD *)(*(_QWORD *)&v71[8] + 8 * v32) = v21;
    }
    else
    {
LABEL_19:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)v71, v21);
      if (!v31)
        goto LABEL_6;
    }
LABEL_20:
    {
LABEL_71:
      if (*(_QWORD *)&v71[8] != *(_QWORD *)v71)
        free(*(void **)&v71[8]);
      v50 = 0;
      v49 = 1;
      v2 = a2;
      v3 = a1;
      v51 = *((_QWORD *)v4 + 1);
      if (v51 == *(_QWORD *)v4)
        goto LABEL_74;
      goto LABEL_67;
    }
LABEL_6:
    ++v11;
  }
  while (v9 != (_DWORD)v11);
  if (*(_QWORD *)&v71[8] != *(_QWORD *)v71)
    free(*(void **)&v71[8]);
  v2 = a2;
  v3 = a1;
  v12 = (int *)v70;
  v10 = v66;
  v13 = (int)v70[6];
  if (v66 != (_DWORD)v13)
    goto LABEL_53;
LABEL_56:
  v48 = *v12;
  if (v69 != (_DWORD)v48)
  {
    v52 = v2;
    v53 = v69 - v48;
    v54 = 8 * v48;
    while (1)
    {
      v49 = v55 == 0;
      if (!v55)
        break;
      v54 += 8;
      if (!--v53)
      {
        v49 = 0;
        v50 = 1;
        v2 = v52;
        v51 = *((_QWORD *)v4 + 1);
        if (v51 != *(_QWORD *)v4)
          goto LABEL_67;
        goto LABEL_74;
      }
    }
    v50 = 0;
    v2 = v52;
    v51 = *((_QWORD *)v4 + 1);
    if (v51 == *(_QWORD *)v4)
      goto LABEL_74;
    goto LABEL_67;
  }
  v49 = 0;
  v50 = 1;
  v51 = *((_QWORD *)v4 + 1);
  if (v51 != *(_QWORD *)v4)
  {
LABEL_67:
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor(v4, v2);
    v51 = *(_QWORD *)v4;
    v57 = *((_QWORD *)v4 + 1);
    if (*BucketFor != v2)
    {
      v58 = 16;
      if (v57 == v51)
        v58 = 20;
      BucketFor = (const void **)(v57 + 8 * *(unsigned int *)((char *)v4 + v58));
    }
    goto LABEL_81;
  }
LABEL_74:
  v59 = *((unsigned int *)v4 + 5);
  BucketFor = (const void **)(v51 + 8 * v59);
  if ((_DWORD)v59)
  {
    v60 = 0;
    v61 = 8 * v59;
    while (*(const void **)(v51 + v60) != v2)
    {
      v60 += 8;
      if (v61 == v60)
        goto LABEL_80;
    }
    BucketFor = (const void **)(v51 + v60);
  }
LABEL_80:
  v57 = v51;
LABEL_81:
  v20 = v57 == v51;
  v62 = 16;
  if (v20)
    v62 = 20;
  if (BucketFor != (const void **)(v57 + 8 * *(unsigned int *)((char *)v4 + v62)))
  {
    *BucketFor = (const void *)-2;
    ++*((_DWORD *)v4 + 6);
  }
  if (v49)
  {
    v64 = v3[3];
    v63 = (int32x2_t *)v3[4];
    *(_OWORD *)v71 = *(_OWORD *)v64;
    *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v64 + 12);
    mlir::detail::ConversionPatternRewriterImpl::resetState(v63, v71);
  }
  return v50;
}

void `anonymous namespace'::ConversionValueMapping::getInverse(_anonymous_namespace_::ConversionValueMapping *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      for (i = *(_QWORD **)a2; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
      {
        v4 -= 16;
        if (!v4)
          return;
      }
    }
    else
    {
      i = *(_QWORD **)a2;
    }
    v6 = *(_QWORD *)a2 + 16 * v3;
    if (i != (_QWORD *)v6)
    {
LABEL_9:
      v13 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)this, i + 1, &v13) & 1) != 0)
      {
        v8 = v13 + 2;
        v7 = *((unsigned int *)v13 + 4);
        v9 = v13 + 1;
        v10 = *i;
        if (v7 >= *((unsigned int *)v13 + 5))
        {
          v11 = v13;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v13 + 1), v13 + 3, v7 + 1, 8);
          v7 = *((unsigned int *)v11 + 4);
        }
      }
      else
      {
        v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)(i + 1), i + 1, v13);
        v7 = 0;
        *v12 = i[1];
        v12[1] = v12 + 3;
        v9 = v12 + 1;
        v12[2] = 0x600000000;
        v8 = v12 + 2;
        v10 = *i;
      }
      *(_QWORD *)(*v9 + 8 * v7) = v10;
      ++*v8;
      while (1)
      {
        i += 2;
        if (i == (_QWORD *)v6)
          break;
        if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (i != (_QWORD *)v6)
            goto LABEL_9;
          return;
        }
      }
    }
  }
}

uint64_t legalizeUnresolvedMaterialization(uint64_t *a1, uint64_t *a2, uint64_t a3, int64x2_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t DefiningOp;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v33;
  mlir::GenericProgramPoint *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  int v74;
  int v75;
  uint64_t v76;
  _QWORD **v77;
  _QWORD **v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  mlir::Block *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  mlir::Block *ParentOp;
  __int32 v104;
  uint64_t v105;
  __int32 v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  _QWORD **v115;
  _QWORD **v116;
  void *v117;
  _QWORD *v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t (**v123)(uint64_t);
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  BOOL v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v131;
  int64_t v132;
  int64_t v133;
  char *v134;
  int64_t v135;
  int64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146[2];
  _QWORD *v147[2];
  uint64_t v148;
  unint64_t v149;
  _OWORD v150[2];
  uint64_t v151;
  __int128 v152;
  void *__src[2];
  uint64_t v154;
  uint64_t v155[4];
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  void *__p[2];
  uint64_t v160;
  unsigned __int8 v161;
  __int128 v162;
  uint64_t v163;
  void *__dst;
  uint64_t v165;
  _BYTE v166[96];
  __int128 v167;
  uint64_t v168;
  void *v169[2];
  uint64_t v170;
  char v171;
  __int128 v172;
  __int128 v173;
  llvm *v174[2];
  unint64_t v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
     + 2;
  v174[0] = (llvm *)a4;
       + 2;
  v10 = *a1;
  *(_QWORD *)&v152 = *a1;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a4 + 37, (uint64_t *)&v152, (uint64_t)&v162);
  if (!(_BYTE)v163)
  {
    v38 = 1;
       + 2 >= 8)
      goto LABEL_147;
    return v38;
  }
  v12 = v152;
  v13 = a4[39].u32[0];
  if (v13 >= a4[39].i32[1])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a4[38].i64[1], &a4[39].u64[1], v13 + 1, 8);
    LODWORD(v13) = a4[39].i32[0];
  }
  *(_QWORD *)(a4[38].i64[1] + 8 * v13) = v12;
  ++a4[39].i32[0];
  v138 = v10 - 16;
  if ((*(_BYTE *)(v10 + 46) & 0x80) != 0)
  {
    v14 = *(_QWORD *)(v10 + 72);
    v15 = *(unsigned int *)(v10 + 68);
    v148 = v14;
    v149 = v15;
    v16 = v10;
    v17 = *(_QWORD *)(v10 - 8);
    if ((_DWORD)v15)
    {
      v18 = 0;
      while (1)
      {
        *(_QWORD *)&v162 = *(_QWORD *)(v14 + 32 * v18 + 24);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v162);
        if (DefiningOp)
        {
          v20 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
          v21 = v20 == &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id ? DefiningOp : 0;
          if (v20 == &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id)
            break;
        }
LABEL_7:
        if (++v18 == v15)
          goto LABEL_23;
      }
      v22 = *a2;
      v23 = *((unsigned int *)a2 + 4);
      if ((_DWORD)v23)
      {
        LODWORD(v24) = (v23 - 1) & ((DefiningOp >> 4) ^ (DefiningOp >> 9));
        v25 = (uint64_t *)(v22 + 16 * v24);
        v26 = *v25;
        if (*v25 == v21)
        {
LABEL_20:
          if (v25 != (uint64_t *)(v22 + 16 * v23)
            && !legalizeUnresolvedMaterialization(v25[1], a2, a3, a4, a5))
          {
            goto LABEL_145;
          }
          goto LABEL_7;
        }
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v24 + v27++;
          v24 = v28 & (v23 - 1);
          v26 = *(_QWORD *)(v22 + 16 * v24);
          if (v26 == v21)
          {
            v25 = (uint64_t *)(v22 + 16 * v24);
            goto LABEL_20;
          }
        }
      }
      v25 = (uint64_t *)(v22 + 16 * v23);
      goto LABEL_20;
    }
LABEL_23:
    v29 = v17 & 0xFFFFFFFFFFFFFFF8;
    if (v149 == 1)
    {
      v30 = (v175 & 2) != 0 ? (uint64_t *)v174 : (uint64_t *)v174[0];
      v31 = (*(unint64_t (**)(uint64_t *, unint64_t, uint64_t))(v175 & 0xFFFFFFFFFFFFFFF8))(v30, *(_QWORD *)(v148 + 24), v17 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)&v162 = v31;
      if (v31 && v138 != v31)
      {
        mlir::ResultRange::ResultRange(v147, v138);
        v38 = 1;
        replaceMaterialization((uint64_t)a4, v147[0], (uint64_t)v147[1], (uint64_t)&v162, 1, a5);
        goto LABEL_146;
      }
    }
    v10 = v16;
    v33 = a1[1] & 0xFFFFFFFFFFFFFFF8;
    if (!v33)
      goto LABEL_54;
  }
  else
  {
    v148 = 0;
    v149 = 0;
    v29 = *(_QWORD *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8;
    v33 = a1[1] & 0xFFFFFFFFFFFFFFF8;
    if (!v33)
      goto LABEL_54;
  }
  v137 = v10;
  if (v149 == 1)
  {
    *(_QWORD *)&v162 = *(_QWORD *)(v148 + 24);
    v34 = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)&v162);
    if (v34)
    {
      v35 = *((_QWORD *)v34 + 2);
      mlir::GenericProgramPoint::~GenericProgramPoint(v34);
      v37 = (uint64_t *)(v36 + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v162 + 16);
      v37 = (uint64_t *)(v35 + 40);
    }
    v41 = *v37;
    *(_QWORD *)(a3 + 24) = v35;
    *(_QWORD *)(a3 + 32) = v41;
    if ((a1[1] & 4) == 0)
      goto LABEL_42;
  }
  else
  {
    v39 = *(_QWORD *)(v10 + 16);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v10);
    *(_QWORD *)(a3 + 24) = v39;
    *(_QWORD *)(a3 + 32) = v40;
    if ((a1[1] & 4) == 0)
    {
LABEL_42:
      v42 = *(_QWORD *)(v10 + 24);
      v43 = a1[2];
      mlir::ValueRange::ValueRange((unint64_t *)&v173, v148, v149);
      v140 = v173;
      v44 = *(_QWORD *)(v33 + 152) + 32 * *(unsigned int *)(v33 + 160);
      v45 = -32 * *(unsigned int *)(v33 + 160);
      do
      {
        if (!v45)
          goto LABEL_47;
        *(_QWORD *)&v152 = v43;
        v162 = v140;
        *(_QWORD *)&v150[0] = v42;
        v46 = *(_QWORD *)(v44 - 8);
        if (!v46)
LABEL_172:
          std::__throw_bad_function_call[abi:nn180100]();
        v44 -= 32;
        v47 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *, _OWORD *))(*(_QWORD *)v46 + 48))(v46, a3 + 8, &v152, &v162, v150);
        v45 += 32;
      }
      while (!v48);
      v142 = v47;
      if (v47)
      {
LABEL_52:
        mlir::ResultRange::ResultRange(v146, v138);
        v38 = 1;
        replaceMaterialization((uint64_t)a4, v146[0], (uint64_t)v146[1], (uint64_t)&v142, 1, a5);
        goto LABEL_146;
      }
    }
  }
LABEL_47:
  v49 = a3 + 8;
  v50 = *(_QWORD *)(v137 + 24);
  mlir::ValueRange::ValueRange((unint64_t *)&v172, v148, v149);
  v141 = v172;
  v51 = *(_QWORD *)(v33 + 312) + 32 * *(unsigned int *)(v33 + 320);
  v52 = -32 * *(unsigned int *)(v33 + 320);
  do
  {
    if (!v52)
      goto LABEL_53;
    *(_QWORD *)&v152 = v29;
    v162 = v141;
    *(_QWORD *)&v150[0] = v50;
    v53 = *(_QWORD *)(v51 - 8);
    if (!v53)
      goto LABEL_172;
    v51 -= 32;
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *, _OWORD *))(*(_QWORD *)v53 + 48))(v53, v49, &v152, &v162, v150);
    v52 += 32;
  }
  while (!v55);
  v142 = v54;
  if (v54)
    goto LABEL_52;
LABEL_53:
  v10 = v137;
LABEL_54:
  LOWORD(v151) = 257;
  mlir::Operation::emitError((uint64_t *)v10, (uint64_t)v150, (uint64_t)&v152);
  if ((_QWORD)v152)
  {
    LODWORD(v162) = 3;
    *((_QWORD *)&v162 + 1) = "failed to legalize unresolved materialization from ";
    v163 = 51;
    v56 = (char *)&v162;
    v57 = (char *)__src[1];
    if (v154 >= HIDWORD(v154))
    {
      v125 = v154 + 1;
      if (__src[1] <= &v162 && (char *)__src[1] + 24 * v154 > (char *)&v162)
      {
        v132 = (char *)&v162 - (char *)__src[1];
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v125, 24);
        v57 = (char *)__src[1];
        v56 = (char *)__src[1] + v132;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v125, 24);
        v56 = (char *)&v162;
        v57 = (char *)__src[1];
      }
    }
    v58 = &v57[24 * v154];
    v59 = *(_OWORD *)v56;
    *((_QWORD *)v58 + 2) = *((_QWORD *)v56 + 2);
    *(_OWORD *)v58 = v59;
    LODWORD(v154) = v154 + 1;
  }
  mlir::OperandRange::getTypes(&v148, &v142);
  v60 = v152;
  if ((_QWORD)v152)
  {
    *(_QWORD *)&v162 = ", ";
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::OperandRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(void)#1},void>(v142, v143, v144, v145, (uint64_t)&v152 + 8, (uint64_t)&v152 + 8, (const char **)&v162);
    v60 = v152;
    if ((_QWORD)v152)
    {
      LODWORD(v162) = 3;
      *((_QWORD *)&v162 + 1) = " to ";
      v163 = 4;
      v61 = (char *)&v162;
      v62 = (char *)__src[1];
      if (v154 >= HIDWORD(v154))
      {
        v126 = v154 + 1;
        if (__src[1] <= &v162 && (char *)__src[1] + 24 * v154 > (char *)&v162)
        {
          v133 = (char *)&v162 - (char *)__src[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v126, 24);
          v62 = (char *)__src[1];
          v61 = (char *)__src[1] + v133;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v126, 24);
          v61 = (char *)&v162;
          v62 = (char *)__src[1];
        }
      }
      v63 = &v62[24 * v154];
      v64 = *(_OWORD *)v61;
      *((_QWORD *)v63 + 2) = *((_QWORD *)v61 + 2);
      *(_OWORD *)v63 = v64;
      LODWORD(v154) = v154 + 1;
      v60 = v152;
      if ((_QWORD)v152)
      {
        v65 = (char *)&v162;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v162, v29);
        v66 = (char *)__src[1];
        if (v154 >= HIDWORD(v154))
        {
          v129 = v154 + 1;
          if (__src[1] <= &v162 && (char *)__src[1] + 24 * v154 > (char *)&v162)
          {
            v135 = (char *)&v162 - (char *)__src[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v129, 24);
            v66 = (char *)__src[1];
            v65 = (char *)__src[1] + v135;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v129, 24);
            v65 = (char *)&v162;
            v66 = (char *)__src[1];
          }
        }
        v67 = &v66[24 * v154];
        v68 = *(_OWORD *)v65;
        *((_QWORD *)v67 + 2) = *((_QWORD *)v65 + 2);
        *(_OWORD *)v67 = v68;
        v69 = (v154 + 1);
        LODWORD(v154) = v154 + 1;
        v60 = v152;
        if ((_QWORD)v152)
        {
          LODWORD(v162) = 3;
          *((_QWORD *)&v162 + 1) = " that remained live after conversion";
          v163 = 36;
          v70 = (char *)&v162;
          v71 = (char *)__src[1];
          if (v69 >= HIDWORD(v154))
          {
            v130 = v69 + 1;
            v131 = (char *)__src[1] + 24 * v69 > (char *)&v162;
            if (__src[1] <= &v162 && v131)
            {
              v136 = (char *)&v162 - (char *)__src[1];
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v130, 24);
              v71 = (char *)__src[1];
              v70 = (char *)__src[1] + v136;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v130, 24);
              v70 = (char *)&v162;
              v71 = (char *)__src[1];
            }
          }
          v72 = &v71[24 * v154];
          v73 = *(_OWORD *)v70;
          *((_QWORD *)v72 + 2) = *((_QWORD *)v70 + 2);
          *(_OWORD *)v72 = v73;
          LODWORD(v154) = v154 + 1;
          v60 = v152;
        }
      }
    }
  }
  *(_QWORD *)&v162 = v60;
  BYTE8(v162) = 0;
  v171 = 0;
  if (!v161)
    goto LABEL_81;
  *((_QWORD *)&v162 + 1) = *((_QWORD *)&v152 + 1);
  v74 = v154;
  LODWORD(v163) = __src[0];
  __dst = v166;
  v165 = 0x400000000;
  if (!(_DWORD)v154)
  {
    v75 = 1;
    goto LABEL_77;
  }
  if (__src[1] == v155)
  {
    if (v154 < 5)
    {
      v76 = v154;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v166, v154, 24);
      v76 = v154;
      if (!(_DWORD)v154)
        goto LABEL_75;
    }
    memcpy(__dst, __src[1], 24 * v76);
LABEL_75:
    LODWORD(v165) = v74;
    v75 = v161;
    goto LABEL_76;
  }
  __dst = __src[1];
  v165 = v154;
  __src[1] = v155;
  HIDWORD(v154) = 0;
  v75 = 1;
LABEL_76:
  LODWORD(v154) = 0;
LABEL_77:
  v167 = v157;
  v168 = v158;
  v157 = 0uLL;
  *(_OWORD *)v169 = *(_OWORD *)__p;
  v170 = v160;
  v158 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v160 = 0;
  v171 = 1;
  if (v75)
  {
    if (__src[1] != v155)
      free(__src[1]);
    v161 = 0;
  }
LABEL_81:
  mlir::InFlightDiagnostic::abandon(&v152);
  if ((_QWORD)v152)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v152);
  if (v161)
  {
    v77 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v78 = (_QWORD **)__p[1];
      v79 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
        while (v78 != v77);
        v79 = __p[0];
      }
      __p[1] = v77;
      operator delete(v79);
    }
    v80 = (_QWORD *)v157;
    if ((_QWORD)v157)
    {
      v81 = (_QWORD *)*((_QWORD *)&v157 + 1);
      v82 = (void *)v157;
      if (*((_QWORD *)&v157 + 1) != (_QWORD)v157)
      {
        do
        {
          v84 = (void *)*--v81;
          v83 = v84;
          *v81 = 0;
          if (v84)
            operator delete[](v83);
        }
        while (v81 != v80);
        v82 = (void *)v157;
      }
      *((_QWORD *)&v157 + 1) = v80;
      operator delete(v82);
    }
    if (__src[1] != v155)
      free(__src[1]);
  }
  v85 = *(unsigned int *)(v10 + 36);
  if ((_DWORD)v85)
    v86 = v138;
  else
    v86 = 0;
  v142 = v86;
  v143 = v85;
  mlir::ResultRange::use_begin(&v142, (uint64_t *)v150);
  v87 = *(unsigned int *)(v10 + 36);
  if ((_DWORD)v87)
    v88 = v138;
  else
    v88 = 0;
  v142 = v88;
  v143 = v87;
  mlir::ResultRange::use_end(&v142, v155);
  v89 = v151;
  v154 = v151;
  v152 = v150[0];
  *(_OWORD *)__src = v150[1];
  v90 = v156;
  while (v89 != v90)
  {
    v95 = *(_QWORD *)(v89 + 16);
    v96 = a4[20].i64[1];
    v97 = a4[21].u32[2];
    if (!(_DWORD)v97)
      goto LABEL_116;
    LODWORD(v98) = ((v95 >> 4) ^ (v95 >> 9)) & (v97 - 1);
    v99 = (uint64_t *)(v96 + 16 * v98);
    v100 = *v99;
    if (*v99 != v95)
    {
      v101 = 1;
      while (v100 != -4096)
      {
        v102 = v98 + v101++;
        v98 = v102 & (v97 - 1);
        v100 = *(_QWORD *)(v96 + 16 * v98);
        if (v100 == v95)
        {
          v99 = (uint64_t *)(v96 + 16 * v98);
          goto LABEL_117;
        }
      }
LABEL_116:
      v99 = (uint64_t *)(v96 + 16 * v97);
    }
LABEL_117:
    if (v99 == (uint64_t *)(v96 + 16 * v97))
    {
      ParentOp = *(mlir::Block **)(v95 + 16);
      if (ParentOp)
        ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
      v104 = a4[38].i32[0];
      if (!v104)
        break;
      v105 = a4[37].i64[0];
      v106 = v104 - 1;
      v93 = ((ParentOp >> 4) ^ (ParentOp >> 9)) & v106;
      v94 = *(mlir::Block **)(v105 + 8 * v93);
      if (v94 != ParentOp)
      {
        v92 = 1;
        while (v94 != (mlir::Block *)-4096)
        {
          v91 = v93 + v92++;
          v93 = v91 & v106;
          v94 = *(mlir::Block **)(v105 + 8 * v93);
          if (v94 == ParentOp)
            goto LABEL_108;
        }
        break;
      }
    }
LABEL_108:
    mlir::ResultRange::UseIterator::operator++((uint64_t *)v150);
    v89 = v151;
  }
  if (v151 != v156)
  {
    v107 = *(uint64_t **)(v151 + 16);
    if (v107)
    {
      v108 = mlir::Diagnostic::attachNote((uint64_t *)&v162 + 1, v107[3], 1);
      v109 = v108 + 16;
      v110 = *(_QWORD *)(v108 + 16);
      LODWORD(v152) = 3;
      *((_QWORD *)&v152 + 1) = "see existing live user here: ";
      __src[0] = (void *)29;
      v111 = *(unsigned int *)(v108 + 24);
      v112 = (char *)&v152;
      if (v111 >= *(_DWORD *)(v108 + 28))
      {
        v127 = v111 + 1;
        v128 = v110 + 24 * v111 > (unint64_t)&v152;
        if (v110 <= (unint64_t)&v152 && v128)
        {
          v134 = (char *)&__src[-2] - v110;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v109, (void *)(v108 + 32), v127, 24);
          v110 = *(_QWORD *)(v108 + 16);
          v112 = &v134[v110];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v109, (void *)(v108 + 32), v127, 24);
          v110 = *(_QWORD *)(v108 + 16);
          v112 = (char *)&v152;
        }
      }
      v113 = v110 + 24 * *(unsigned int *)(v108 + 24);
      v114 = *(_OWORD *)v112;
      *(_QWORD *)(v113 + 16) = *((_QWORD *)v112 + 2);
      *(_OWORD *)v113 = v114;
      ++*(_DWORD *)(v108 + 24);
      mlir::Diagnostic::operator<<((mlir::Diagnostic *)v108, (mlir::Operation *)v107);
    }
  }
  if ((_QWORD)v162)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
  if (v171)
  {
    v115 = (_QWORD **)v169[0];
    if (v169[0])
    {
      v116 = (_QWORD **)v169[1];
      v117 = v169[0];
      if (v169[1] != v169[0])
      {
        do
          v116 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v116 - 1);
        while (v116 != v115);
        v117 = v169[0];
      }
      v169[1] = v115;
      operator delete(v117);
    }
    v118 = (_QWORD *)v167;
    if ((_QWORD)v167)
    {
      v119 = (_QWORD *)*((_QWORD *)&v167 + 1);
      v120 = (void *)v167;
      if (*((_QWORD *)&v167 + 1) != (_QWORD)v167)
      {
        do
        {
          v122 = (void *)*--v119;
          v121 = v122;
          *v119 = 0;
          if (v122)
            operator delete[](v121);
        }
        while (v119 != v118);
        v120 = (void *)v167;
      }
      *((_QWORD *)&v167 + 1) = v118;
      operator delete(v120);
    }
    if (__dst != v166)
      free(__dst);
  }
LABEL_145:
  v38 = 0;
LABEL_146:
  v9 = v175;
  if (v175 >= 8)
  {
LABEL_147:
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0)
        v123 = (uint64_t (**)(uint64_t))v174;
      else
        v123 = (uint64_t (**)(uint64_t))v174[0];
      (*(void (**)(uint64_t (**)(uint64_t), uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v123, v11);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v174[0], v174[1]);
  }
  return v38;
}

uint64_t llvm::SetVector<`anonymous namespace'::UnresolvedMaterialization *,llvm::SmallVector<`anonymous namespace'::UnresolvedMaterialization *,0u>,llvm::DenseSet<`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<`anonymous namespace'::UnresolvedMaterialization *,void>>,0u>::insert(uint64_t a1, uint64_t *a2)
{
  llvm *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  char *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  int64x2_t *buffer;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  int64x2_t *v30;
  int64x2_t v31;
  uint64_t v32;
  int v33;
  int v34;
  llvm *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  int v55;
  BOOL v56;
  unsigned int v57;

  v4 = *(llvm **)a1;
  v5 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v5)
    goto LABEL_27;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v5 - 1);
  v7 = (_QWORD *)((char *)v4 + 8 * v6);
  v8 = *v7;
  if (*v7 == *a2)
    return 0;
  v15 = 0;
  v16 = 1;
  while (v8 != -4096)
  {
    result = 0;
    if (v15)
      v17 = 0;
    else
      v17 = v8 == -8192;
    if (v17)
      v15 = v7;
    v18 = v6 + v16++;
    v6 = v18 & (v5 - 1);
    v7 = (_QWORD *)((char *)v4 + 8 * v6);
    v8 = *v7;
    if (*v7 == *a2)
      return result;
  }
  v19 = (char *)(v15 ? v15 : v7);
  v20 = *(_DWORD *)(a1 + 8);
  if (4 * v20 + 4 < (3 * v5))
  {
    v10 = (int)v5 + ~v20 - *(_DWORD *)(a1 + 12) > v5 >> 3;
    v11 = v5;
    if (v10)
      goto LABEL_8;
  }
  else
  {
LABEL_27:
    v11 = 2 * v5;
  }
  v21 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
  v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
  v23 = ((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8);
  if ((v23 + 1) > 0x40)
    v24 = v23 + 1;
  else
    v24 = 64;
  *(_DWORD *)(a1 + 16) = v24;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v24, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v26 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v26)
    {
      v27 = (v26 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v28 = (char *)buffer;
      if (v27 < 3)
        goto LABEL_78;
      v29 = v27 + 1;
      v28 = &buffer->i8[8 * (v29 & 0x3FFFFFFFFFFFFFFCLL)];
      v30 = buffer + 1;
      v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30[-1] = v31;
        *v30 = v31;
        v30 += 2;
        v32 -= 4;
      }
      while (v32);
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_78:
        do
        {
          *(_QWORD *)v28 = -4096;
          v28 += 8;
        }
        while (v28 != (char *)buffer + 8 * v26);
      }
    }
    if ((_DWORD)v5)
    {
      v33 = 0;
      v34 = v26 - 1;
      v35 = v4;
      do
      {
        v44 = *(_QWORD *)v35;
        if ((*(_QWORD *)v35 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v45 = ((v44 >> 4) ^ (v44 >> 9)) & v34;
          v43 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
          v46 = *v43;
          if (*v43 != v44)
          {
            v47 = 0;
            v48 = 1;
            while (v46 != -4096)
            {
              if (v47)
                v49 = 0;
              else
                v49 = v46 == -8192;
              if (v49)
                v47 = v43;
              v50 = v45 + v48++;
              v45 = v50 & v34;
              v43 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v50 & v34));
              v46 = *v43;
              if (*v43 == v44)
                goto LABEL_49;
            }
            if (v47)
              v43 = v47;
          }
LABEL_49:
          *v43 = v44;
          *(_DWORD *)(a1 + 8) = ++v33;
        }
        v35 = (llvm *)((char *)v35 + 8);
      }
      while (v35 != (llvm *)((char *)v4 + 8 * v5));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v5));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v36 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v36)
  {
    v37 = (v36 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v38 = (char *)buffer;
    if (v37 < 3)
      goto LABEL_79;
    v39 = v37 + 1;
    v38 = &buffer->i8[8 * (v39 & 0x3FFFFFFFFFFFFFFCLL)];
    v40 = buffer + 1;
    v41 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40[-1] = v41;
      *v40 = v41;
      v40 += 2;
      v42 -= 4;
    }
    while (v42);
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_79:
      do
      {
        *(_QWORD *)v38 = -4096;
        v38 += 8;
      }
      while (v38 != (char *)buffer + 8 * v36);
    }
  }
  v12 = *a2;
  v51 = v36 - 1;
  v52 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v36 - 1);
  v19 = &buffer->i8[8 * v52];
  v53 = *(_QWORD *)v19;
  if (*(_QWORD *)v19 == *a2)
    goto LABEL_9;
  v54 = 0;
  v55 = 1;
  while (v53 != -4096)
  {
    if (v54)
      v56 = 0;
    else
      v56 = v53 == -8192;
    if (v56)
      v54 = v19;
    v57 = v52 + v55++;
    v52 = v57 & v51;
    v19 = &buffer->i8[8 * (v57 & v51)];
    v53 = *(_QWORD *)v19;
    if (*(_QWORD *)v19 == v12)
      goto LABEL_9;
  }
  if (v54)
    v19 = v54;
LABEL_8:
  v12 = *(_QWORD *)v19;
LABEL_9:
  ++*(_DWORD *)(a1 + 8);
  if (v12 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v19 = *a2;
  v13 = *a2;
  v14 = *(unsigned int *)(a1 + 32);
  if (v14 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v14) = v13;
  ++*(_DWORD *)(a1 + 32);
  return 1;
}

_QWORD *replaceMaterialization(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t NextResultAtOffset;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  unint64_t *v51;
  int v52;
  int v53;
  unint64_t *v54;
  int v55;
  unint64_t v56;
  unint64_t *v57;
  int v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v68 = a2;
  v69 = a3;
  v76 = a4;
  v77 = a5;
  result = mlir::ResultRange::replaceAllUsesWith<mlir::ValueRange &>(&v68, &v76);
  v63 = v76;
  v64 = v68;
  v72 = v68;
  v73 = 0;
  v74 = v76;
  v75 = 0;
  v62 = v69;
  if (v69)
  {
    v8 = 0;
    v9 = 0;
    v61 = v77;
    result = v68;
    while (1)
    {
      if (v74 == v63 && v9 == v61)
        return result;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)result, v8);
      v13 = mlir::ValueRange::dereference_iterator(&v74, v75);
      v66 = NextResultAtOffset;
      v67 = v13;
      v71 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)&v66, &v71))
      {
        if (v71 != *(_QWORD *)a6 + 72 * *(unsigned int *)(a6 + 16))
        {
          v14 = *(unsigned int *)(v71 + 16);
          if ((_DWORD)v14)
            break;
        }
      }
LABEL_3:
      result = v72;
      v8 = v73 + 1;
      v9 = v75 + 1;
      ++v73;
      ++v75;
      if (v72 == v64 && v8 == v62)
        return result;
    }
    v15 = *(unint64_t **)(v71 + 8);
    v16 = &v15[v14];
    while (1)
    {
      v17 = *v15;
      v18 = v67;
      if (v67)
      {
        v19 = v67;
        while (1)
        {
          v20 = *(_QWORD *)a1;
          v21 = *(_DWORD *)(a1 + 16);
          if (v19 == v17)
            break;
          if (!v21)
          {
            v44 = 0;
            v70 = v17;
            goto LABEL_61;
          }
          if ((v22 & 1) == 0)
          {
            v60 = v16;
            v16 = v60;
            if (v30)
            {
              v31 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v31 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v31;
              v16 = v60;
            }
          }
          v23 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v19) ^ HIDWORD(v19));
          v24 = 0x9DDFEA08EB382D69 * (HIDWORD(v19) ^ (v23 >> 47) ^ v23);
          LODWORD(v24) = (-348639895 * ((v24 >> 47) ^ v24)) & (v21 - 1);
          v25 = (uint64_t *)(v20 + 16 * v24);
          v26 = *v25;
          if (v19 != *v25)
          {
            v28 = 1;
            while (v26 != -4096)
            {
              v29 = v24 + v28++;
              v24 = v29 & (v21 - 1);
              v26 = *(_QWORD *)(v20 + 16 * v24);
              if (v19 == v26)
              {
                v25 = (uint64_t *)(v20 + 16 * v24);
                v27 = *(unsigned int *)(a1 + 16);
                if (v25 != (uint64_t *)(*(_QWORD *)a1 + 16 * v27))
                  goto LABEL_25;
                goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
          v27 = *(unsigned int *)(a1 + 16);
          if (v25 == (uint64_t *)(*(_QWORD *)a1 + 16 * v27))
            goto LABEL_37;
LABEL_25:
          v19 = v25[1];
          if (!v19)
            goto LABEL_36;
        }
        if (v21)
        {
          if ((v45 & 1) == 0)
          {
            v57 = v16;
            v16 = v57;
            if (v58)
            {
              v59 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v59 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v59;
              v16 = v57;
            }
          }
          v46 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v17) ^ HIDWORD(v17));
          v47 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v46 >> 47) ^ v46);
          LODWORD(v47) = (-348639895 * ((v47 >> 47) ^ v47)) & (v21 - 1);
          v48 = (uint64_t *)(v20 + 16 * v47);
          v49 = *v48;
          if (v17 == *v48)
          {
LABEL_53:
            *v48 = -8192;
            *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v52 = 1;
            while (v49 != -4096)
            {
              v53 = v47 + v52++;
              v47 = v53 & (v21 - 1);
              v49 = *(_QWORD *)(v20 + 16 * v47);
              if (v17 == v49)
              {
                v48 = (uint64_t *)(v20 + 16 * v47);
                goto LABEL_53;
              }
            }
          }
        }
        goto LABEL_17;
      }
LABEL_36:
      LODWORD(v27) = *(_DWORD *)(a1 + 16);
LABEL_37:
      v70 = v17;
      if (!(_DWORD)v27)
        break;
      v32 = *(_QWORD *)a1;
      if ((v33 & 1) == 0)
      {
        v54 = v16;
        v16 = v54;
        if (v55)
        {
          v56 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v56 = 0xFF51AFD7ED558CCDLL;
          llvm::hashing::detail::get_execution_seed(void)::seed = v56;
          v16 = v54;
        }
      }
      v34 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v17) ^ HIDWORD(v17));
      v35 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v34 >> 47) ^ v34);
      v36 = v27 - 1;
      v37 = (-348639895 * ((v35 >> 47) ^ v35)) & (v27 - 1);
      v38 = (_QWORD *)(v32 + 16 * v37);
      v39 = *v38;
      if (v70 == *v38)
        goto LABEL_16;
      v40 = 0;
      v41 = 1;
      while (v39 != -4096)
      {
        if (v40)
          v42 = 0;
        else
          v42 = v39 == -8192;
        if (v42)
          v40 = v38;
        v43 = v37 + v41++;
        v37 = v43 & v36;
        v38 = (_QWORD *)(v32 + 16 * (v43 & v36));
        v39 = *v38;
        if (v70 == *v38)
          goto LABEL_16;
      }
      if (v40)
        v38 = v40;
      v44 = *(_DWORD *)(a1 + 16);
      v50 = *(_DWORD *)(a1 + 8);
      if (4 * v50 + 4 >= 3 * v44)
        goto LABEL_61;
      if (v44 + ~v50 - *(_DWORD *)(a1 + 12) <= v44 >> 3)
        goto LABEL_62;
      ++*(_DWORD *)(a1 + 8);
      if (*v38 != -4096)
        goto LABEL_57;
LABEL_15:
      *v38 = v70;
      v38[1] = 0;
LABEL_16:
      v38[1] = v18;
LABEL_17:
      if (++v15 == v16)
        goto LABEL_3;
    }
    v44 = 0;
LABEL_61:
    v44 *= 2;
LABEL_62:
    v51 = v16;
    llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow(a1, v44);
    v71 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v70, &v71);
    v16 = v51;
    v38 = (_QWORD *)v71;
    ++*(_DWORD *)(a1 + 8);
    if (*v38 == -4096)
      goto LABEL_15;
LABEL_57:
    --*(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::Value,mlir::Value,mlir::Value,mlir::Type>::CallImpl<computeNecessaryMaterializations(llvm::DenseMap<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization *>> &,mlir::ConversionPatternRewriter &,mlir::detail::ConversionPatternRewriterImpl &,llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>> &,llvm::SetVector<`anonymous namespace'::UnresolvedMaterialization *,llvm::SmallVector<`anonymous namespace'::UnresolvedMaterialization *,0u>,llvm::DenseSet<`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<`anonymous namespace'::UnresolvedMaterialization *,void>>,0u> &)::$_1>(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t DefiningOp;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v16 = a3;
  v7 = *a1;
  if (a4)
  {
    v8 = 0;
    do
    {
      v9 = a3;
      if ((*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) == a4)
        v8 = a3;
      v17 = a3;
      v18 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v7, &v17, &v18))break;
      if (v18 == *(_QWORD *)v7 + 16 * *(unsigned int *)(v7 + 16))
        break;
      a3 = *(_QWORD *)(v18 + 8);
    }
    while (a3);
    if (!v8)
      v8 = v9;
  }
  else
  {
    do
    {
      v8 = a3;
      v17 = a3;
      v18 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v7, &v17, &v18))break;
      if (v18 == *(_QWORD *)v7 + 16 * *(unsigned int *)(v7 + 16))
        break;
      a3 = *(_QWORD *)(v18 + 8);
    }
    while (a3);
  }
  if ((*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8) != a4 || v8 == a2)
  {
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
    if (DefiningOp
      && (v12 = DefiningOp,
          *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id)
      && (*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 1)
    {
      v13 = (_QWORD *)a1[1];
      v14 = v13[3];
      if ((v14 & 2) == 0)
        v13 = (_QWORD *)*v13;
      return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(v14 & 0xFFFFFFFFFFFFFFF8))(v13, a2, *(_QWORD *)(*(_QWORD *)(v12 + 72) + 24), a4);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

_QWORD *mlir::ResultRange::replaceAllUsesWith<mlir::ValueRange &>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **NextResultAtOffset;
  uint64_t *i;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = (_QWORD *)*result;
  v4 = result[1];
  v16 = (_QWORD *)*result;
  v17 = 0;
  v18 = *a2;
  v19 = 0;
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = a2[1];
    result = v3;
    do
    {
      if (v18 == v2 && v7 == v8)
        break;
      NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)result, v6);
      for (i = (uint64_t *)mlir::ValueRange::dereference_iterator(&v18, v19); ; *i = (uint64_t)v13)
      {
        v13 = *NextResultAtOffset;
        if (!*NextResultAtOffset)
          break;
        v14 = (uint64_t *)v13[1];
        if (v14)
        {
          *v14 = *v13;
          if (*v13)
            *(_QWORD *)(*v13 + 8) = v13[1];
        }
        v13[3] = (uint64_t)i;
        v13[1] = (uint64_t)i;
        v15 = *i;
        *v13 = *i;
        if (v15)
          *(_QWORD *)(v15 + 8) = v13;
      }
      result = v16;
      v6 = v17 + 1;
      v7 = v19 + 1;
      ++v17;
      ++v19;
    }
    while (v16 != v3 || v6 != v4);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 72 * v3;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 72 * v11 - 72;
    if (v12 < 0x48)
    {
      v13 = result;
LABEL_12:
      v17 = &result[9 * v11];
      do
      {
        *v13 = -4096;
        v13 += 9;
      }
      while (v13 != v17);
      return result;
    }
    v14 = v12 / 0x48 + 1;
    v13 = &result[9 * (v14 & 0x7FFFFFFFFFFFFFELL)];
    v15 = v14 & 0x7FFFFFFFFFFFFFELL;
    v16 = result;
    do
    {
      *v16 = -4096;
      v16[9] = -4096;
      v16 += 18;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = (_QWORD *)(v7 + 72 * v6);
      do
      {
        *v9 = -4096;
        v9 += 9;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x48 + 1;
    v9 = (_QWORD *)(v7 + 72 * (v10 & 0x7FFFFFFFFFFFFFELL));
    v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[9] = -4096;
      v12 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v4, &v17);
        v14 = v17;
        *v17 = *(_QWORD *)v4;
        v14[2] = 0x600000000;
        v14[1] = v14 + 3;
        v15 = (uint64_t)(v14 + 1);
        if (*(_DWORD *)(v4 + 16))
          llvm::SmallVectorImpl<mlir::Value>::operator=(v15, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v16 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v16)
          free(v16);
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

_QWORD *llvm::find_if_not<llvm::iterator_range<mlir::ValueUserIterator<mlir::ValueUseIterator<mlir::OpOperand>,mlir::OpOperand>>,computeNecessaryMaterializations(llvm::DenseMap<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization *>> &,mlir::ConversionPatternRewriter &,mlir::detail::ConversionPatternRewriterImpl &,llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>> &,llvm::SetVector<`anonymous namespace'::UnresolvedMaterialization *,llvm::SmallVector<`anonymous namespace'::UnresolvedMaterialization *,0u>,llvm::DenseSet<`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<`anonymous namespace'::UnresolvedMaterialization *,void>>,0u> &)::$_0::operator() const(mlir::Value)::{lambda(mlir::Operation *)#1}>(_QWORD *a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  mlir::Block *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  mlir::Block *ParentOp;
  int v35;
  uint64_t v36;
  int v37;

  v3 = a1;
  if (a1 == a2)
    return v3;
  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  while (1)
  {
    v12 = v3[2];
    v13 = *v5;
    v14 = *((unsigned int *)v5 + 4);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = ((v12 >> 4) ^ (v12 >> 9)) & (v14 - 1);
      v16 = (uint64_t *)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == v12)
        goto LABEL_13;
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(_QWORD *)(v13 + 16 * v15);
        if (v17 == v12)
        {
          v16 = (uint64_t *)(v13 + 16 * v15);
          goto LABEL_13;
        }
      }
    }
    v16 = (uint64_t *)(v13 + 16 * v14);
LABEL_13:
    if (v16 == (uint64_t *)(v13 + 16 * v14))
      break;
    v20 = *((_DWORD *)v6 + 4);
    if (v20)
    {
      v21 = v16[1];
      v22 = v20 - 1;
      v23 = ((v21 >> 4) ^ (v21 >> 9)) & v22;
      v24 = *(_QWORD *)(*v6 + 8 * v23);
      if (v24 == v21)
        return v3;
      v25 = 1;
      while (v24 != -4096)
      {
        v26 = v23 + v25++;
        v23 = v26 & v22;
        v24 = *(_QWORD *)(*v6 + 8 * v23);
        if (v24 == v21)
          return v3;
      }
    }
LABEL_5:
    v3 = (_QWORD *)*v3;
    if (v3 == a2)
      return a2;
  }
  v27 = v7[41];
  v28 = *((unsigned int *)v7 + 86);
  if (!(_DWORD)v28)
    goto LABEL_26;
  LODWORD(v29) = (v28 - 1) & ((v12 >> 4) ^ (v12 >> 9));
  v30 = (uint64_t *)(v27 + 16 * v29);
  v31 = *v30;
  if (*v30 != v12)
  {
    v32 = 1;
    while (v31 != -4096)
    {
      v33 = v29 + v32++;
      v29 = v33 & (v28 - 1);
      v31 = *(_QWORD *)(v27 + 16 * v29);
      if (v31 == v12)
      {
        v30 = (uint64_t *)(v27 + 16 * v29);
        goto LABEL_27;
      }
    }
LABEL_26:
    v30 = (uint64_t *)(v27 + 16 * v28);
  }
LABEL_27:
  if (v30 != (uint64_t *)(v27 + 16 * v28))
    goto LABEL_5;
  ParentOp = *(mlir::Block **)(v12 + 16);
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  v35 = *((_DWORD *)v7 + 152);
  if (!v35)
    return v3;
  v36 = v7[74];
  v37 = v35 - 1;
  v10 = ((ParentOp >> 4) ^ (ParentOp >> 9)) & v37;
  v11 = *(mlir::Block **)(v36 + 8 * v10);
  if (v11 == ParentOp)
    goto LABEL_5;
  v9 = 1;
  while (v11 != (mlir::Block *)-4096)
  {
    v8 = v10 + v9++;
    v10 = v8 & v37;
    v11 = *(mlir::Block **)(v36 + 8 * v10);
    if (v11 == ParentOp)
      goto LABEL_5;
  }
  return v3;
}

unint64_t llvm::detail::UniqueFunctionBase<mlir::Value,mlir::Value,mlir::Type>::CallImpl<legalizeUnresolvedMaterialization(`anonymous namespace'::UnresolvedMaterialization &,llvm::DenseMap<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization*,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization*>> &,mlir::ConversionPatternRewriter &,mlir::detail::ConversionPatternRewriterImpl &,llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>> &)::$_1>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v4 = *a1;
  if (a3)
  {
    v5 = 0;
    do
    {
      v6 = a2;
      if ((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) == a3)
        v5 = a2;
      v8 = a2;
      v9 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v4, &v8, &v9))break;
      if (v9 == *(_QWORD *)v4 + 16 * *(unsigned int *)(v4 + 16))
        break;
      a2 = *(_QWORD *)(v9 + 8);
    }
    while (a2);
    if (!v5)
      v5 = v6;
  }
  else
  {
    do
    {
      v5 = a2;
      v8 = a2;
      v9 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v4, &v8, &v9))break;
      if (v9 == *(_QWORD *)v4 + 16 * *(unsigned int *)(v4 + 16))
        break;
      a2 = *(_QWORD *)(v9 + 8);
    }
    while (a2);
  }
  if ((*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) == a3)
    return v5;
  else
    return 0;
}

void llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::OperandRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(void)#1},void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char **a7)
{
  int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  BOOL v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  unint64_t *v46;
  unint64_t *v47;
  int v48;
  const char *v49;
  size_t v50;

  if (a1 != a3 || a2 != a4)
  {
    v14 = &v48;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, *(_QWORD *)(*(_QWORD *)(a1 + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v15 = *(_QWORD *)(a5 + 16);
    v47 = (unint64_t *)(a5 + 16);
    v16 = *(unsigned int *)(a5 + 24);
    if (v16 >= *(_DWORD *)(a5 + 28))
    {
      v39 = v16 + 1;
      v40 = v15 + 24 * v16 > (unint64_t)&v48;
      if (v15 <= (unint64_t)&v48 && v40)
      {
        v41 = (char *)&v48 - v15;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, (void *)(a5 + 32), v39, 24);
        v15 = *(_QWORD *)(a5 + 16);
        v14 = (int *)&v41[v15];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, (void *)(a5 + 32), v39, 24);
        v15 = *(_QWORD *)(a5 + 16);
        v14 = &v48;
      }
    }
    v17 = v15 + 24 * *(unsigned int *)(a5 + 24);
    v18 = *(_OWORD *)v14;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v17 = v18;
    ++*(_DWORD *)(a5 + 24);
    if (a1 != a3 || a2 + 1 != a4)
    {
      v45 = (void *)(a6 + 32);
      v46 = (unint64_t *)(a6 + 16);
      v44 = (void *)(a5 + 32);
      v19 = a4 - a2 - 2;
      v20 = a1 + 32 * a2 + 56;
      do
      {
        v21 = *a7;
        if (*a7)
        {
          v22 = strlen(*a7);
          v48 = 3;
          v49 = v21;
          v50 = v22;
          v23 = *(unsigned int *)(a6 + 24);
          v24 = *(_QWORD *)(a6 + 16);
          if (v23 < *(_DWORD *)(a6 + 28))
            goto LABEL_12;
        }
        else
        {
          v48 = 3;
          v49 = 0;
          v50 = 0;
          v23 = *(unsigned int *)(a6 + 24);
          v24 = *(_QWORD *)(a6 + 16);
          if (v23 < *(_DWORD *)(a6 + 28))
            goto LABEL_12;
        }
        v35 = v23 + 1;
        v36 = v24 + 24 * v23 > (unint64_t)&v48;
        if (v24 <= (unint64_t)&v48 && v36)
        {
          v42 = (char *)&v48 - v24;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v45, v35, 24);
          v24 = *v46;
          v25 = (int *)&v42[*v46];
          goto LABEL_13;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v45, v35, 24);
        v24 = *v46;
LABEL_12:
        v25 = &v48;
LABEL_13:
        v26 = v24 + 24 * *(unsigned int *)(a6 + 24);
        v27 = *(_OWORD *)v25;
        *(_QWORD *)(v26 + 16) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v26 = v27;
        ++*(_DWORD *)(a6 + 24);
        v28 = &v48;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, *(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF8);
        v29 = *(unsigned int *)(a5 + 24);
        v30 = *(_QWORD *)(a5 + 16);
        if (v29 >= *(_DWORD *)(a5 + 28))
        {
          v37 = v29 + 1;
          v38 = v30 + 24 * v29 > (unint64_t)&v48;
          if (v30 <= (unint64_t)&v48 && v38)
          {
            v43 = (char *)&v48 - v30;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, v44, v37, 24);
            v30 = *v47;
            v28 = (int *)&v43[*v47];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, v44, v37, 24);
            v30 = *v47;
            v28 = &v48;
          }
        }
        v31 = v30 + 24 * *(unsigned int *)(a5 + 24);
        v32 = *(_OWORD *)v28;
        *(_QWORD *)(v31 + 16) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v31 = v32;
        ++*(_DWORD *)(a5 + 24);
        v34 = v19-- != 0;
        v20 += 32;
      }
      while (a1 != a3 || v34);
    }
  }
}

uint64_t `anonymous namespace'::OperationConverter::legalizeChangedResultType(mlir::Operation *,mlir::OpResult,mlir::Value,mlir::TypeConverter const*,mlir::ConversionPatternRewriter &,mlir::detail::ConversionPatternRewriterImpl &,llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>> const&)::$_0::operator()(mlir::Operation ***a1)
{
  uint64_t *v2;
  char *v3;
  char *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  _WORD v63[20];
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void *__src;
  uint64_t v68;
  _BYTE v69[96];
  __int128 v70;
  uint64_t v71;
  __int128 __p;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *__dst;
  uint64_t v79;
  _BYTE v80[96];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)**a1;
  v63[16] = 257;
  mlir::Operation::emitError(v2, (uint64_t)v63, (uint64_t)&v64);
  if (v64)
  {
    LODWORD(v75) = 3;
    v76 = "failed to materialize conversion for result #";
    v77 = 45;
    v3 = (char *)&v75;
    v4 = (char *)__src;
    if (v68 >= HIDWORD(v68))
    {
      v53 = v68 + 1;
      if (__src <= &v75 && (char *)__src + 24 * v68 > (char *)&v75)
      {
        v59 = (char *)&v75 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v53, 24);
        v4 = (char *)__src;
        v3 = (char *)__src + v59;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v53, 24);
        v3 = (char *)&v75;
        v4 = (char *)__src;
      }
    }
    v5 = &v4[24 * v68];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    LODWORD(v68) = v68 + 1;
  }
  v7 = (uint64_t)*a1[1];
  v8 = *(_QWORD *)(v7 + 8) & 7;
  if (v7)
    v9 = v8 == 6;
  else
    v9 = 0;
  if (v9)
    v8 = *(_QWORD *)(v7 + 16) + 6;
  if (v64)
  {
    LODWORD(v75) = 5;
    v76 = (const char *)v8;
    v10 = (char *)&v75;
    v11 = (char *)__src;
    if (v68 >= HIDWORD(v68))
    {
      v54 = v68 + 1;
      if (__src <= &v75 && (char *)__src + 24 * v68 > (char *)&v75)
      {
        v60 = (char *)&v75 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v54, 24);
        v11 = (char *)__src;
        v10 = (char *)__src + v60;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v54, 24);
        v10 = (char *)&v75;
        v11 = (char *)__src;
      }
    }
    v12 = &v11[24 * v68];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    v14 = (v68 + 1);
    LODWORD(v68) = v68 + 1;
    v15 = v64;
    if (v64)
    {
      LODWORD(v75) = 3;
      v76 = " of operation '";
      v77 = 15;
      v16 = (char *)&v75;
      v17 = (char *)__src;
      if (v14 >= HIDWORD(v68))
      {
        v55 = v14 + 1;
        v56 = (char *)__src + 24 * v14 > (char *)&v75;
        if (__src <= &v75 && v56)
        {
          v61 = (char *)&v75 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v55, 24);
          v17 = (char *)__src;
          v16 = (char *)__src + v61;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v55, 24);
          v16 = (char *)&v75;
          v17 = (char *)__src;
        }
      }
      v18 = &v17[24 * v68];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      LODWORD(v68) = v68 + 1;
      v15 = v64;
      if (v64)
      {
        mlir::Diagnostic::operator<<((uint64_t)&v65, *((_QWORD *)**a1 + 6));
        v15 = v64;
        if (v64)
        {
          LODWORD(v75) = 3;
          v76 = "' that remained live after conversion";
          v77 = 37;
          v20 = (char *)&v75;
          v21 = (char *)__src;
          if (v68 >= HIDWORD(v68))
          {
            v57 = v68 + 1;
            if (__src <= &v75 && (char *)__src + 24 * v68 > (char *)&v75)
            {
              v62 = (char *)&v75 - (_BYTE *)__src;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v57, 24);
              v21 = (char *)__src;
              v20 = (char *)__src + v62;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v57, 24);
              v20 = (char *)&v75;
              v21 = (char *)__src;
            }
          }
          v22 = &v21[24 * v68];
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          LODWORD(v68) = v68 + 1;
          v15 = v64;
        }
      }
    }
  }
  else
  {
    v15 = 0;
  }
  v75 = v15;
  LOBYTE(v76) = 0;
  v85 = 0;
  if (v74)
  {
    v76 = v65;
    v24 = v68;
    LODWORD(v77) = v66;
    __dst = v80;
    v79 = 0x400000000;
    if (!(_DWORD)v68)
    {
      v25 = 1;
      goto LABEL_31;
    }
    if (__src != v69)
    {
      __dst = __src;
      v79 = v68;
      __src = v69;
      HIDWORD(v68) = 0;
      v25 = 1;
LABEL_30:
      LODWORD(v68) = 0;
LABEL_31:
      v81 = v70;
      v70 = 0uLL;
      v83 = __p;
      v82 = v71;
      v84 = v73;
      v71 = 0;
      __p = 0uLL;
      v73 = 0;
      v85 = 1;
      if (v25)
      {
        if (__src != v69)
          free(__src);
        v74 = 0;
      }
      goto LABEL_35;
    }
    if (v68 < 5)
    {
      v26 = v68;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v80, v68, 24);
      v26 = v68;
      if (!(_DWORD)v68)
        goto LABEL_29;
    }
    memcpy(__dst, __src, 24 * v26);
LABEL_29:
    LODWORD(v79) = v24;
    v25 = v74;
    goto LABEL_30;
  }
LABEL_35:
  mlir::InFlightDiagnostic::abandon(&v64);
  if (v64)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
  if (v74)
  {
    v27 = (_QWORD **)__p;
    if ((_QWORD)__p)
    {
      v28 = (_QWORD **)*((_QWORD *)&__p + 1);
      v29 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v27;
      operator delete(v29);
    }
    v30 = (_QWORD *)v70;
    if ((_QWORD)v70)
    {
      v31 = (_QWORD *)*((_QWORD *)&v70 + 1);
      v32 = (void *)v70;
      if (*((_QWORD *)&v70 + 1) != (_QWORD)v70)
      {
        do
        {
          v34 = (void *)*--v31;
          v33 = v34;
          *v31 = 0;
          if (v34)
            operator delete[](v33);
        }
        while (v31 != v30);
        v32 = (void *)v70;
      }
      *((_QWORD *)&v70 + 1) = v30;
      operator delete(v32);
    }
    if (__src != v69)
      free(__src);
  }
  v35 = mlir::Diagnostic::attachNote((uint64_t *)&v76, *((_QWORD *)*a1[2] + 3), 1);
  v36 = v35 + 16;
  v37 = *(_QWORD *)(v35 + 16);
  LODWORD(v64) = 3;
  v65 = "see existing live user here: ";
  v66 = 29;
  v38 = *(unsigned int *)(v35 + 24);
  v39 = (char *)&v64;
  if (v38 >= *(_DWORD *)(v35 + 28))
  {
    v51 = v38 + 1;
    v52 = v37 + 24 * v38 > (unint64_t)&v64;
    if (v37 <= (unint64_t)&v64 && v52)
    {
      v58 = (char *)&v64 - v37;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v36, (void *)(v35 + 32), v51, 24);
      v37 = *(_QWORD *)(v35 + 16);
      v39 = &v58[v37];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v36, (void *)(v35 + 32), v51, 24);
      v37 = *(_QWORD *)(v35 + 16);
      v39 = (char *)&v64;
    }
  }
  v40 = v37 + 24 * *(unsigned int *)(v35 + 24);
  v41 = *(_OWORD *)v39;
  *(_QWORD *)(v40 + 16) = *((_QWORD *)v39 + 2);
  *(_OWORD *)v40 = v41;
  ++*(_DWORD *)(v35 + 24);
  mlir::Diagnostic::operator<<((mlir::Diagnostic *)v35, *a1[2]);
  if (v75)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
  if (v85)
  {
    v42 = (_QWORD **)v83;
    if ((_QWORD)v83)
    {
      v43 = (_QWORD **)*((_QWORD *)&v83 + 1);
      v44 = (void *)v83;
      if (*((_QWORD *)&v83 + 1) != (_QWORD)v83)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = (void *)v83;
      }
      *((_QWORD *)&v83 + 1) = v42;
      operator delete(v44);
    }
    v45 = (_QWORD *)v81;
    if ((_QWORD)v81)
    {
      v46 = (_QWORD *)*((_QWORD *)&v81 + 1);
      v47 = (void *)v81;
      if (*((_QWORD *)&v81 + 1) != (_QWORD)v81)
      {
        do
        {
          v49 = (void *)*--v46;
          v48 = v49;
          *v46 = 0;
          if (v49)
            operator delete[](v48);
        }
        while (v46 != v45);
        v47 = (void *)v81;
      }
      *((_QWORD *)&v81 + 1) = v45;
      operator delete(v47);
    }
    if (__dst != v80)
      free(__dst);
  }
  return 0;
}

BOOL llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::applyRewrites(void)::$_0>(uint64_t a1, uint64_t a2)
{
  mlir::Operation *v2;

  v2 = *(mlir::Operation **)(a2 + 16);
  return *((_QWORD *)v2 + 2) != **(_QWORD **)a1 || mlir::Operation::isBeforeInBlock(**(mlir::Block ****)(a1 + 8), v2);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::markNestedOpsIgnored(mlir::Operation *)::$_0>(int64x2_t **a1, uint64_t a2)
{
  int64x2_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[31];

  v2 = *a1;
  v10 = a2;
  v3 = *(unsigned int *)(a2 + 44);
  v4 = v3 & 0x7FFFFF;
  if ((v3 & 0x7FFFFF) != 0)
  {
    v5 = (_QWORD *)(((a2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40));
    v6 = 24 * v4;
    while (v5 == (_QWORD *)*v5)
    {
      v5 += 3;
      v6 -= 24;
      if (!v6)
        return;
    }
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v2 + 37, &v10, (uint64_t)v11);
    if (v11[16])
    {
      v7 = v10;
      v8 = v2[39].u32[0];
      if (v8 >= v2[39].i32[1])
      {
        v9 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2[38].i64[1], &v2[39].u64[1], v8 + 1, 8);
        v7 = v9;
        LODWORD(v8) = v2[39].i32[0];
      }
      *(_QWORD *)(v2[38].i64[1] + 8 * v8) = v7;
      ++v2[39].i32[0];
    }
  }
}

void mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(mlir::detail::ConversionPatternRewriterImpl *this)
{
  char *v2;
  void **v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  void **v10;

  v2 = (char *)*((_QWORD *)this + 149);
  if (v2 != (char *)this + 1208)
    free(v2);
  v3 = (void **)((char *)this + 632);
  v4 = (char *)*((_QWORD *)this + 79);
  v5 = *((unsigned int *)this + 160);
  if ((_DWORD)v5)
  {
    v6 = 136 * v5;
    do
    {
      v7 = &v4[v6];
      v8 = *(char **)&v4[v6 - 32];
      if (&v4[v6 - 16] != v8)
        free(v8);
      v9 = (char *)*((_QWORD *)v7 - 14);
      if (v7 - 96 != v9)
        free(v9);
      v6 -= 136;
    }
    while (v6);
    v4 = (char *)*v3;
  }
  if (v4 != (char *)this + 648)
    free(v4);
  v10 = (void **)*((_QWORD *)this + 77);
  if (v10 != v3)
    free(v10);
  llvm::deallocate_buffer(*((llvm **)this + 74), (void *)(8 * *((unsigned int *)this + 152)));
}

void sub_18071868C()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 48), (void *)(16 * *(unsigned int *)(v0 + 64)));
}

void sub_1807186A0()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 24), (void *)(16 * *(unsigned int *)(v0 + 40)));
}

void sub_1807186B4()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)v0, (void *)(16 * *(unsigned int *)(v0 + 16)));
}

uint64_t sub_1807186C8()
{
  uint64_t v0;

  return v0;
}

void llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::toNext(uint64_t a1)
{
  uint64_t v2;
  mlir::Block *v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD v27[2];

  v2 = *(_QWORD *)(a1 + 104);
  while (2)
  {
    v3 = *(mlir::Block **)(v2 - 32);
    if (!*(_BYTE *)(v2 - 8))
    {
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v27, *(mlir::Block **)(v2 - 32));
      *(_QWORD *)(v2 - 24) = v27[0];
      *(_QWORD *)(v2 - 16) = 0;
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v27, v3);
      v6 = *(_QWORD *)(v2 - 24);
      v7 = *(_QWORD *)(v2 - 16);
      if (v6 == v27[0] && v7 == v27[1])
        break;
      *(_QWORD *)(v2 - 16) = v7 + 1;
      v9 = *(const void **)(v6 + 32 * v7 + 24);
      v10 = *(_QWORD *)(a1 + 8);
      if (v10 != *(_QWORD *)a1)
        goto LABEL_4;
      v11 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 8 * v11;
        v14 = *(_QWORD **)(a1 + 8);
        do
        {
          if ((const void *)*v14 == v9)
          {
            v5 = 0;
            goto LABEL_5;
          }
          if (*v14 == -2)
            v12 = v14;
          ++v14;
          v13 -= 8;
        }
        while (v13);
        if (!v12)
          goto LABEL_19;
        *v12 = v9;
        --*(_DWORD *)(a1 + 24);
        v5 = 1;
        goto LABEL_5;
      }
LABEL_19:
      if (v11 < *(_DWORD *)(a1 + 16))
      {
        *(_DWORD *)(a1 + 20) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
        v5 = 1;
      }
      else
      {
LABEL_4:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, v9);
        v5 = v4;
      }
LABEL_5:
      if (v5)
      {
        v17 = *(_BYTE **)(a1 + 104);
        v16 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v17 >= v16)
        {
          v19 = *(_BYTE **)(a1 + 96);
          v20 = (v17 - v19) >> 5;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 59)
            abort();
          v22 = v16 - (_QWORD)v19;
          if (v22 >> 4 > v21)
            v21 = v22 >> 4;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
            v23 = 0x7FFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            if (v23 >> 59)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v24 = (char *)operator new(32 * v23);
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[32 * v20];
          *(_QWORD *)v25 = v9;
          v25[8] = 0;
          v25[24] = 0;
          v18 = v25 + 32;
          if (v17 != v19)
          {
            do
            {
              v26 = *((_OWORD *)v17 - 1);
              *((_OWORD *)v25 - 2) = *((_OWORD *)v17 - 2);
              *((_OWORD *)v25 - 1) = v26;
              v25 -= 32;
              v17 -= 32;
            }
            while (v17 != v19);
            v17 = *(_BYTE **)(a1 + 96);
          }
          *(_QWORD *)(a1 + 96) = v25;
          *(_QWORD *)(a1 + 104) = v18;
          *(_QWORD *)(a1 + 112) = &v24[32 * v23];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_QWORD *)v17 = v9;
          v17[8] = 0;
          v18 = v17 + 32;
          v17[24] = 0;
        }
        *(_QWORD *)(a1 + 104) = v18;
        return;
      }
    }
    v15 = *(_QWORD *)(a1 + 96);
    v2 = *(_QWORD *)(a1 + 104) - 32;
    *(_QWORD *)(a1 + 104) = v2;
    if (v15 != v2)
      continue;
    break;
  }
}

void mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(mlir::ForwardIterator *a1, mlir::Operation *a2, uint64_t a3, int a4)
{
  uint64_t Iterable;
  uint64_t v9;
  mlir::Operation *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  char *i;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  mlir::GenericProgramPoint *v27;
  mlir::GenericProgramPoint *v28;
  mlir::GenericProgramPoint *v29;
  mlir::ForwardIterator *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  const void *v34;
  char *v35;
  char *v36;
  char *v37;
  void *v38;
  void *v39;
  const void *v40;
  void *__p;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  void *v46;
  _BYTE *v47;
  void *v48;
  void *v49;
  void *v50;
  _BYTE *v51;

  if (!a4)
  {
    ((void (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
    v30 = a1;
    Iterable = mlir::ForwardIterator::makeIterable(a1, v10);
    if (!v9)
      goto LABEL_46;
    goto LABEL_5;
  }
  v30 = a1;
  Iterable = mlir::ForwardIterator::makeIterable(a1, a2);
  if (v9)
  {
LABEL_5:
    v11 = (_QWORD *)Iterable;
    v31 = (_QWORD *)(Iterable + 24 * v9);
    do
    {
      mlir::ForwardDominanceIterator<false>::makeIterable(v11, (uint64_t)&v44);
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v38, &v40, (const llvm::SmallPtrSetImplBase *)&v44);
      __p = 0;
      v42 = 0;
      v43 = 0;
      v12 = v46;
      v13 = v47 - (_BYTE *)v46;
      if (v47 != v46)
      {
        if (v13 < 0)
          goto LABEL_49;
        v14 = (char *)operator new(v47 - (_BYTE *)v46);
        __p = v14;
        v42 = v14;
        v43 = &v14[32 * (v13 >> 5)];
        v15 = v13 & 0xFFFFFFFFFFFFFFE0;
        memcpy(v14, v12, v15);
        v42 = &v14[v15];
      }
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v32, &v34, (const llvm::SmallPtrSetImplBase *)&v48);
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = v50;
      v17 = v51 - (_BYTE *)v50;
      if (v51 != v50)
      {
        if ((v17 & 0x8000000000000000) == 0)
        {
          v18 = (char *)operator new(v51 - (_BYTE *)v50);
          v35 = v18;
          v36 = v18;
          v37 = &v18[32 * (v17 >> 5)];
          v19 = v17 & 0xFFFFFFFFFFFFFFE0;
          memcpy(v18, v16, v19);
          i = &v18[v19];
          v36 = &v18[v19];
          goto LABEL_15;
        }
LABEL_49:
        abort();
      }
      v18 = 0;
      for (i = 0; ; i = v36)
      {
LABEL_15:
        if (v42 - (_BYTE *)__p != i - v18)
          goto LABEL_27;
        if (__p == v42)
          break;
        v21 = v18 + 16;
        v22 = (char *)__p + 16;
        while (1)
        {
          v23 = v22 - 16;
          if (*((_QWORD *)v22 - 2) != *((_QWORD *)v21 - 2))
            break;
          v24 = v21[8];
          if (v22[8])
            v25 = v24 == 0;
          else
            v25 = 1;
          if (v25)
          {
            if ((v22[8] != 0) != (v24 != 0))
              break;
          }
          else if (*((_QWORD *)v22 - 1) != *((_QWORD *)v21 - 1) || *(_QWORD *)v22 != *(_QWORD *)v21)
          {
            break;
          }
          v21 += 32;
          v22 += 32;
          if (v23 + 32 == v42)
            goto LABEL_30;
        }
LABEL_27:
        v26 = *((_QWORD *)v42 - 4);
        v27 = (mlir::GenericProgramPoint *)(v26 + 32);
        v28 = *(mlir::GenericProgramPoint **)(v26 + 40);
        if (v28 != (mlir::GenericProgramPoint *)(v26 + 32))
        {
          do
          {
            v29 = (mlir::GenericProgramPoint *)*((_QWORD *)v28 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v28);
            mlir::detail::walk<mlir::ForwardDominanceIterator<false>>();
            v28 = v29;
          }
          while (v29 != v27);
        }
        llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::toNext((uint64_t)&v38);
        v18 = v35;
      }
LABEL_30:
      if (v18)
      {
        v36 = v18;
        operator delete(v18);
      }
      if (v33 != v32)
        free(v33);
      if (__p)
      {
        v42 = (char *)__p;
        operator delete(__p);
      }
      if (v39 != v38)
        free(v39);
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      if (v49 != v48)
        free(v49);
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v45 != v44)
        free(v45);
      v11 += 3;
    }
    while (v11 != v31);
  }
LABEL_46:
  if (a4 == 1)
    ((void (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, v30);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ConversionPatternRewriter::cloneRegionBefore(mlir::Region &,mlir::Region &,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Block,false,false,void,false>,false,false>,mlir::IRMapping &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v4 = *(unsigned int *)(v3 + 208);
  if (v4 >= *(_DWORD *)(v3 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 200, (void *)(v3 + 216), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 208);
}

_anonymous_namespace_::OperationTransactionState *`anonymous namespace'::OperationTransactionState::OperationTransactionState(_anonymous_namespace_::OperationTransactionState *this, mlir::Operation *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v11;
  const double *v12;
  unsigned __int128 *v13;
  unint64_t v14;
  const double *v15;
  unsigned __int128 v16;
  unsigned __int128 v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int128 *v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const double *v31;
  unsigned __int128 *v32;
  unint64_t v33;
  const double *v34;
  unsigned __int128 v35;
  unsigned __int128 v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v41[2];

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = mlir::Operation::getAttrDictionary(a2);
  if ((*((_BYTE *)a2 + 46) & 0x80) == 0)
  {
    LODWORD(v5) = 0;
    v21 = 0;
    *((_QWORD *)this + 3) = (char *)this + 40;
    *((_DWORD *)this + 9) = 8;
    goto LABEL_21;
  }
  v4 = *((_QWORD *)a2 + 9);
  v5 = *((unsigned int *)a2 + 17);
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 0x800000000;
  if (v5 < 9)
  {
    if (!(_DWORD)v5)
    {
      v21 = 0;
      goto LABEL_21;
    }
    v8 = (_QWORD *)((char *)this + 40);
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 24, (char *)this + 40, v5, 8);
    v6 = *((unsigned int *)this + 8);
    v7 = *((_QWORD *)this + 3);
    v8 = (_QWORD *)(v7 + 8 * v6);
    if (v5 >= 0xD && ((unint64_t)v8 >= v4 + 32 * v5 || v4 + 24 >= v7 + 8 * (v6 + v5)))
    {
      v10 = v5 & 3;
      if ((v5 & 3) == 0)
        v10 = 4;
      v11 = v5 - v10;
      v8 += v11;
      v12 = (const double *)(v4 + 88);
      v13 = (unsigned __int128 *)(v7 + 8 * v6 + 16);
      v14 = v11;
      do
      {
        v15 = v12 - 8;
        v16 = (unsigned __int128)vld4q_f64(v15);
        v17 = (unsigned __int128)vld4q_f64(v12);
        *(v13 - 1) = v16;
        *v13 = v17;
        v12 += 16;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      goto LABEL_18;
    }
  }
  v11 = 0;
LABEL_18:
  v18 = v5 - v11;
  v19 = (uint64_t *)(v4 + 32 * v11 + 24);
  do
  {
    v20 = *v19;
    v19 += 4;
    *v8++ = v20;
    --v18;
  }
  while (v18);
  v21 = *((_DWORD *)this + 8);
LABEL_21:
  *((_DWORD *)this + 8) = v21 + v5;
  mlir::SuccessorRange::SuccessorRange(v41, a2);
  v22 = v41[0];
  mlir::SuccessorRange::SuccessorRange(v41, a2);
  v24 = v41[0];
  v23 = v41[1];
  v25 = (unsigned __int128 *)((char *)this + 120);
  *((_QWORD *)this + 13) = (char *)this + 120;
  *((_QWORD *)this + 14) = 0x200000000;
  if (v23 < 3)
  {
    if (!v23 && v22 == v24)
    {
      LODWORD(v26) = 0;
      goto LABEL_43;
    }
    if (v22 == v24)
    {
      LODWORD(v26) = 0;
      goto LABEL_35;
    }
LABEL_29:
    for (i = (uint64_t *)(v22 + 24); ; i += 4)
    {
      v28 = *i;
      *(_QWORD *)v25 = v28;
      v25 = (unsigned __int128 *)((char *)v25 + 8);
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 104, v25, v23, 8);
  v26 = *((unsigned int *)this + 28);
  v25 = (unsigned __int128 *)(*((_QWORD *)this + 13) + 8 * v26);
  if (v22 != v24)
    goto LABEL_29;
  if (v23 > 0xA && ((unint64_t)v25 >= v22 + 32 * v23 || v22 + 24 >= (unint64_t)v25 + 8 * v23))
  {
    v30 = v23 & 3;
    if ((v23 & 3) == 0)
      v30 = 4;
    v29 = v23 - v30;
    v31 = (const double *)(v22 + 88);
    v32 = v25 + 1;
    v33 = v29;
    do
    {
      v34 = v31 - 8;
      v35 = (unsigned __int128)vld4q_f64(v34);
      v36 = (unsigned __int128)vld4q_f64(v31);
      *(v32 - 1) = v35;
      *v32 = v36;
      v31 += 16;
      v32 += 2;
      v33 -= 4;
    }
    while (v33);
    v25 = (unsigned __int128 *)((char *)v25 + 8 * v29);
    goto LABEL_41;
  }
LABEL_35:
  v29 = 0;
LABEL_41:
  v37 = v23 - v29;
  v38 = (uint64_t *)(v22 + 32 * v29 + 24);
  do
  {
    v39 = *v38;
    v38 += 4;
    *(_QWORD *)v25 = v39;
    v25 = (unsigned __int128 *)((char *)v25 + 8);
    --v37;
  }
  while (v37);
LABEL_43:
  *((_DWORD *)this + 28) = v26 + v23;
  return this;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Type,llvm::SmallVector<mlir::Type,2u>,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,llvm::SmallVector<mlir::Type,2u>>>,mlir::Type,llvm::SmallVector<mlir::Type,2u>,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,llvm::SmallVector<mlir::Type,2u>>>::InsertIntoBucket<mlir::Type const&,llvm::SmallVector<mlir::Type,2u>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *buffer;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v12 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      v10 = *a2;
      goto LABEL_4;
    }
    v12 = *(_DWORD *)(a1 + 16);
  }
  v13 = *(uint64_t **)a1;
  v14 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1);
  v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
  v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
  if ((v16 + 1) > 0x40)
    v17 = v16 + 1;
  else
    v17 = 64;
  *(_DWORD *)(a1 + 16) = v17;
  buffer = llvm::allocate_buffer(40 * v17, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v13)
  {
    v19 = 5 * v8;
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets(a1, v13, &v13[v19]);
    llvm::deallocate_buffer((llvm *)v13, (void *)(v19 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  v21 = 40 * v20 - 40;
  v22 = buffer;
  if (v21 < 0x28)
    goto LABEL_36;
  v23 = v21 / 0x28 + 1;
  v22 = &buffer[5 * (v23 & 0xFFFFFFFFFFFFFFELL)];
  v24 = v23 & 0xFFFFFFFFFFFFFFELL;
  v25 = buffer;
  do
  {
    *v25 = -4096;
    v25[5] = -4096;
    v25 += 10;
    v24 -= 2;
  }
  while (v24);
  if (v23 != (v23 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_36:
    do
    {
      *v22 = -4096;
      v22 += 5;
    }
    while (v22 != &buffer[5 * v20]);
  }
  v10 = *a3;
  v26 = v20 - 1;
  v27 = ((*a3 >> 4) ^ (*a3 >> 9)) & v26;
  a2 = &buffer[5 * v27];
  v28 = *a2;
  if (*a3 != *a2)
  {
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = a2;
      v32 = v27 + v30++;
      v27 = v32 & v26;
      a2 = &buffer[5 * v27];
      v28 = *a2;
      if (v10 == *a2)
        goto LABEL_4;
    }
    if (v29)
      a2 = v29;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x200000000;
  if (*(_DWORD *)(a4 + 8))
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a2 + 1), a4);
  return a2;
}

BOOL _ZNSt3__16all_ofB8nn180100IN4mlir17ValueTypeIteratorIN4llvm6detail27indexed_accessor_range_baseINS1_12OperandRangeEPNS1_9OpOperandENS1_5ValueES9_S9_E8iteratorEEEZNKS1_13TypeConverter7isLegalINS1_14ValueTypeRangeIS6_EEEENS_9enable_ifIXaantsr3std14is_convertibleIT_NS1_4TypeEEE5valuentsr3std14is_convertibleISI_PNS1_9OperationEEE5valueEbE4typeEOSI_EUlSJ_E_EEbSI_SI_T0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v13;
  BOOL v15;
  void *v16;
  void *v18;
  uint64_t i;
  void *v20;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  if (a1 == a3 && a2 == a4)
    return 1;
  if (a1 == a3)
  {
    v9 = ~a2 + a4;
    v10 = a1 + 32 * a2 + 24;
    while (1)
    {
      v11 = (void *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF8);
      v23 = v25;
      v24 = 0x100000000;
      if (!mlir::TypeConverter::convertType(a5, v11, (uint64_t)&v23) || (_DWORD)v24 != 1)
        break;
      v13 = *(void **)v23;
      if (v23 != v25)
        goto LABEL_13;
LABEL_14:
      v15 = v9-- != 0;
      result = v13 == v11;
      if (v13 == v11)
      {
        v10 += 32;
        if (v15)
          continue;
      }
      return result;
    }
    v13 = 0;
    if (v23 == v25)
      goto LABEL_14;
LABEL_13:
    free(v23);
    goto LABEL_14;
  }
  v16 = (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v23 = v25;
  v24 = 0x100000000;
  if (mlir::TypeConverter::convertType(a5, v16, (uint64_t)&v23) && (_DWORD)v24 == 1)
  {
    v18 = *(void **)v23;
    if (v23 == v25)
      goto LABEL_28;
    goto LABEL_27;
  }
  v18 = 0;
  if (v23 != v25)
LABEL_27:
    free(v23);
LABEL_28:
  if (v18 == v16)
  {
    for (i = a1 + 32 * a2 + 56; ; i += 32)
    {
      v20 = (void *)(*(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8);
      v23 = v25;
      v24 = 0x100000000;
      if (!mlir::TypeConverter::convertType(a5, v20, (uint64_t)&v23) || (_DWORD)v24 != 1)
        break;
      v22 = *(void **)v23;
      if (v23 != v25)
        goto LABEL_40;
LABEL_32:
      if (v22 != v20)
        return 0;
    }
    v22 = 0;
    if (v23 == v25)
      goto LABEL_32;
LABEL_40:
    free(v23);
    goto LABEL_32;
  }
  return 0;
}

BOOL _ZNSt3__16all_ofB8nn180100IN4mlir17ValueTypeIteratorIN4llvm6detail27indexed_accessor_range_baseINS1_11ResultRangeEPNS1_6detail12OpResultImplENS1_8OpResultESA_SA_E8iteratorEEEZNKS1_13TypeConverter7isLegalINS1_14ValueTypeRangeIS6_EEEENS_9enable_ifIXaantsr3std14is_convertibleIT_NS1_4TypeEEE5valuentsr3std14is_convertibleISJ_PNS1_9OperationEEE5valueEbE4typeEOSJ_EUlSK_E_EEbSJ_SJ_T0_(mlir::detail::OpResultImpl *this, uint64_t a2, mlir::detail::OpResultImpl *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v9;
  void *v11;
  void *v13;
  void *v14;
  void *v16;
  uint64_t i;
  void *v18;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];

  v6 = a2;
  v23[1] = *MEMORY[0x1E0C80C00];
  if (this == a3 && a2 == a4)
    return 1;
  if (this == a3)
  {
    v9 = a4 - 1;
    while (1)
    {
      v11 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v6) + 8) & 0xFFFFFFFFFFFFFFF8);
      v21 = v23;
      v22 = 0x100000000;
      if (!mlir::TypeConverter::convertType(a5, v11, (uint64_t)&v21) || (_DWORD)v22 != 1)
        break;
      v13 = *(void **)v21;
      if (v21 != v23)
        goto LABEL_17;
LABEL_6:
      result = v13 == v11;
      if (v13 != v11 || v9 == v6++)
        return result;
    }
    v13 = 0;
    if (v21 == v23)
      goto LABEL_6;
LABEL_17:
    free(v21);
    goto LABEL_6;
  }
  v14 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, a2) + 8) & 0xFFFFFFFFFFFFFFF8);
  v21 = v23;
  v22 = 0x100000000;
  if (mlir::TypeConverter::convertType(a5, v14, (uint64_t)&v21) && (_DWORD)v22 == 1)
  {
    v16 = *(void **)v21;
    if (v21 == v23)
      goto LABEL_26;
    goto LABEL_25;
  }
  v16 = 0;
  if (v21 != v23)
LABEL_25:
    free(v21);
LABEL_26:
  if (v16 == v14)
  {
    for (i = v6 + 1; ; ++i)
    {
      v18 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, i) + 8) & 0xFFFFFFFFFFFFFFF8);
      v21 = v23;
      v22 = 0x100000000;
      if (!mlir::TypeConverter::convertType(a5, v18, (uint64_t)&v21) || (_DWORD)v22 != 1)
        break;
      v20 = *(void **)v21;
      if (v21 != v23)
        goto LABEL_38;
LABEL_30:
      if (v20 != v18)
        return 0;
    }
    v20 = 0;
    if (v21 == v23)
      goto LABEL_30;
LABEL_38:
    free(v21);
    goto LABEL_30;
  }
  return 0;
}

void `anonymous namespace'::FunctionOpInterfaceSignatureConversion::~FunctionOpInterfaceSignatureConversion(_anonymous_namespace_::FunctionOpInterfaceSignatureConversion *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::FunctionOpInterfaceSignatureConversion::matchAndRewrite(uint64_t a1, uint64_t InterfaceFor, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;

  v6 = InterfaceFor;
  if (InterfaceFor)
    InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
  return convertFuncOpTypes(v6, InterfaceFor, *(const mlir::TypeConverter **)(a1 + 96), a5);
}

uint64_t convertFuncOpTypes(uint64_t a1, uint64_t a2, const mlir::TypeConverter *a3, _QWORD *a4)
{
  uint64_t canMapOperands;
  uint64_t v7;
  unsigned int Kind;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t Inputs;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t Results;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  char v34;
  mlir::MLIRContext *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44[2];
  unint64_t v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[128];
  void *v56;
  uint64_t v57;
  _QWORD v58[5];

  v58[4] = *MEMORY[0x1E0C80C00];
  v42 = a1;
  v43 = a2;
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v42);
  if (*(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
    v7 = canMapOperands;
  else
    v7 = 0;
  v41 = v7;
  if (!v7)
    return 0;
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v41);
  v53 = v55;
  v54 = 0x400000000;
  if (Kind)
  {
    v9 = Kind;
    v10 = Kind;
    if (Kind < 5)
    {
      v11 = 0;
      v12 = v55;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, Kind, 32);
      v11 = v54;
      v12 = v53;
      if (v54 == v10)
      {
LABEL_17:
        LODWORD(v54) = v9;
        goto LABEL_18;
      }
    }
    v14 = 32 * v11;
    v15 = &v12[32 * v11];
    v16 = 32 * v10 - 32 - v14;
    if (!v16)
      goto LABEL_15;
    v17 = (v16 >> 5) + 1;
    v15 += 32 * (v17 & 0xFFFFFFFFFFFFFFELL);
    v18 = &v12[v14 + 32];
    v19 = v17 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v18 - 32) = 0;
      *v18 = 0;
      *(v18 - 8) = 0;
      v18[24] = 0;
      v18 += 64;
      v19 -= 2;
    }
    while (v19);
    if (v17 != (v17 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_15:
      v20 = &v12[32 * v10];
      do
      {
        *v15 = 0;
        v15[24] = 0;
        v15 += 32;
      }
      while (v15 != v20);
    }
    goto LABEL_17;
  }
LABEL_18:
  v56 = v58;
  v57 = 0x400000000;
  v50 = &v52;
  v51 = 0x100000000;
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v41);
  mlir::ValueRange::ValueRange((unint64_t *)&v48, Inputs, v22);
  v23 = v49;
  if (v49)
  {
    v24 = 0;
    v25 = v48;
    while (1)
    {
      v26 = (void *)mlir::TypeRange::dereference_iterator(v25, v24);
      if (!mlir::TypeConverter::convertSignatureArg((uint64_t)a3, v24, v26, (uint64_t)&v53))
        break;
      if (v23 == ++v24)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    Results = mlir::FunctionType::getResults((mlir::FunctionType *)&v41);
    mlir::ValueRange::ValueRange((unint64_t *)&v46, Results, v28);
    v29 = v47;
    if (!v47)
    {
LABEL_26:
      v33 = *(unsigned int *)(v42 + 44);
      if ((v33 & 0x7FFFFF) != 0)
      {
        mlir::detail::ConversionPatternRewriterImpl::convertRegionTypes(a4[7], (mlir::Region *)(((v42 + 16 * ((v33 >> 23) & 1) + ((v33 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v42 + 40)), a3, (uint64_t)&v53);
        if (!v34)
          goto LABEL_31;
      }
      else
      {
        mlir::detail::ConversionPatternRewriterImpl::convertRegionTypes(a4[7], 0, a3, (uint64_t)&v53);
        if (!v39)
          goto LABEL_31;
      }
      v35 = (mlir::MLIRContext *)a4[1];
      mlir::ValueRange::ValueRange(v45, (uint64_t)v56, v57);
      mlir::ValueRange::ValueRange(v44, (uint64_t)v50, v51);
      v36 = mlir::FunctionType::get(v35, v45[0], v45[1], v44[0], v44[1]);
      v37 = v42;
      (*(void (**)(_QWORD *, uint64_t))(*a4 + 72))(a4, v42);
      mlir::function_interface_impl::setFunctionType(v42, v43, v36);
      (*(void (**)(_QWORD *, uint64_t))(*a4 + 80))(a4, v37);
      v13 = 1;
      v38 = v50;
      if (v50 == &v52)
        goto LABEL_33;
      goto LABEL_32;
    }
    v30 = 0;
    v31 = v46;
    while (1)
    {
      v32 = (void *)mlir::TypeRange::dereference_iterator(v31, v30);
      if (!mlir::TypeConverter::convertType((uint64_t)a3, v32, (uint64_t)&v50))
        break;
      if (v29 == ++v30)
        goto LABEL_26;
    }
  }
LABEL_31:
  v13 = 0;
  v38 = v50;
  if (v50 != &v52)
LABEL_32:
    free(v38);
LABEL_33:
  if (v56 != v58)
    free(v56);
  if (v53 != v55)
    free(v53);
  return v13;
}

void llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::push_back(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v4 + 1;
    v12 = v5 + 48 * v4;
    if (v5 <= a2 && v12 > a2)
    {
      v14 = a2 - v5;
      llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::grow(a1, v11);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v14;
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::grow(a1, v11);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = v5 + 48 * v6;
  *(_QWORD *)v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(v7 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(v7 + 8) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  if (v9)
  {
    v10 = (_QWORD *)(v5 + 48 * v6 + 40);
    if (v9 == a2 + 16)
    {
      *v10 = v7 + 16;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
    }
    else
    {
      *v10 = v9;
      *(_QWORD *)(a2 + 40) = 0;
    }
    ++*(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)(v5 + 48 * v6 + 40) = 0;
    ++*(_DWORD *)(a1 + 8);
  }
}

uint64_t *llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 41), (std::align_val_t)8uLL);
    v10 = buffer + 5;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 41), (std::align_val_t)8uLL);
    v10 = buffer + 5;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *buffer = a3;
  buffer[4] = 0;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

uint64_t mlir::OperationFolder::tryToFold(int32x2_t *this, mlir::Operation *a2, BOOL *a3)
{
  __int32 v6;
  int32x2_t v7;
  __int32 v8;
  unsigned int v9;
  mlir::Operation *v10;
  uint64_t v11;
  mlir::Operation *v12;
  uint64_t v13;
  __int32 v14;
  int32x2_t v15;
  __int32 v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  mlir::Operation *v22;
  int v23;
  unsigned int v24;
  _BOOL8 v25;
  void *v26;
  void *v27;
  uint64_t v29;
  unint64_t v30[2];
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x1E0C80C00];
  if (a3)
    *a3 = 0;
  v6 = this[5].i32[0];
  if (!v6)
    goto LABEL_21;
  v7 = this[3];
  v8 = v6 - 1;
  v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = *(mlir::Operation **)(*(_QWORD *)&v7 + 40 * v9);
  if (v10 != a2)
  {
    v23 = 1;
    while (v10 != (mlir::Operation *)-4096)
    {
      v24 = v9 + v23++;
      v9 = v24 & v8;
      v10 = *(mlir::Operation **)(*(_QWORD *)&v7 + 40 * v9);
      if (v10 == a2)
        goto LABEL_5;
    }
LABEL_21:
    v31 = v33;
    v32 = 0x800000000;
    v34 = v36;
    v35 = 0x800000000;
    if (mlir::Operation::fold((uint64_t)a2, (uint64_t)&v34))
    {
      v25 = mlir::OperationFolder::processFoldResults(this, (uint64_t)a2, (uint64_t)&v31, (uint64_t)v34, v35) != 0;
      v26 = v34;
      if (v34 == v36)
        goto LABEL_24;
    }
    else
    {
      v25 = 0;
      v26 = v34;
      if (v34 == v36)
      {
LABEL_24:
        if (!v25)
        {
          v20 = 0;
          v27 = v31;
          if (v31 == v33)
            return v20;
          goto LABEL_28;
        }
        if ((_DWORD)v32)
        {
          mlir::OperationFolder::notifyRemoval(this, a2);
          mlir::ValueRange::ValueRange(v30, (uint64_t)v31, v32);
          mlir::RewriterBase::replaceOp(&this[13], (uint64_t)a2, v30[0], v30[1]);
        }
        else
        {
          if (a3)
            *a3 = 1;
          v29 = (uint64_t)this[15];
          if (v29 && mlir::RewriterBase::Listener::classof(v29))
          {
            (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v29 + 32))(v29, a2);
            v20 = 1;
            v27 = v31;
            if (v31 == v33)
              return v20;
            goto LABEL_28;
          }
        }
        v20 = 1;
        v27 = v31;
        if (v31 == v33)
          return v20;
LABEL_28:
        free(v27);
        return v20;
      }
    }
    free(v26);
    goto LABEL_24;
  }
LABEL_5:
  v11 = *((_QWORD *)a2 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v11 + 40));
  if (v12 != a2)
  {
    if (*(mlir::Operation **)(*((_QWORD *)a2 + 2) + 40) == a2)
    {
      v13 = 0;
      v14 = this[5].i32[0];
      if (!v14)
      {
LABEL_15:
        mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v11 + 40));
        mlir::Operation::moveBefore(a2, v22);
        return 0;
      }
    }
    else
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)a2);
      v14 = this[5].i32[0];
      if (!v14)
        goto LABEL_15;
    }
    v15 = this[3];
    v16 = v14 - 1;
    v17 = ((v13 >> 4) ^ (v13 >> 9)) & v16;
    v18 = *(_QWORD *)(*(_QWORD *)&v15 + 40 * v17);
    if (v18 != v13)
    {
      v19 = 1;
      while (v18 != -4096)
      {
        v20 = 0;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        v18 = *(_QWORD *)(*(_QWORD *)&v15 + 40 * v17);
        if (v18 == v13)
          return v20;
      }
      goto LABEL_15;
    }
  }
  return 0;
}

void mlir::OperationFolder::notifyRemoval(int32x2_t *this, mlir::Operation *a2)
{
  int32x2_t v4;
  unsigned __int32 v5;
  unsigned int v6;
  uint64_t v7;
  mlir::Operation *v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD *i;
  uint64_t v13;
  uint64_t InterfaceFor;
  __int32 v15;
  __int32 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  BOOL v22;
  int v23;
  char *v24;
  void **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int64x2_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v4 = this[3];
  v5 = this[5].u32[0];
  if (v5)
  {
    v6 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = *(_QWORD *)&v4 + 40 * v6;
    v8 = *(mlir::Operation **)v7;
    if (*(mlir::Operation **)v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != (mlir::Operation *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v7 = *(_QWORD *)&v4 + 40 * v6;
      v8 = *(mlir::Operation **)v7;
      if (*(mlir::Operation **)v7 == a2)
        goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)&v4 + 40 * v5;
LABEL_8:
  if (v7 == *(_QWORD *)&v4 + 40 * v5)
    return;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)a2 + 6))
  {
    v32 = v34;
    v33 = 0x100000000;
    mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)&v32);
    v11 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
    if (v32 != v34)
      free(v32);
  }
  else
  {
    v11 = 0;
  }
  for (i = (_QWORD *)mlir::Block::getParent(*((mlir::Block **)a2 + 2));
        i;
        i = (_QWORD *)mlir::Block::getParent(*(mlir::Block **)(v13 + 16)))
  {
    v13 = i[2];
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsIsolatedFromAbove>((void ***)(v13 + 48)) & 1) != 0)
      break;
    if (!*(_QWORD *)(v13 + 16))
      break;
    InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor((mlir::detail::DialectInterfaceCollectionBase *)&this[6], (mlir::Operation *)v13);
    if (InterfaceFor)
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)InterfaceFor + 24))(InterfaceFor, i) & 1) != 0)
        break;
    }
  }
  v32 = i;
  v15 = this[2].i32[0];
  if (!v15)
  {
    v24 = 0;
LABEL_32:
    v18 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::InsertIntoBucket<mlir::Region * const&>((uint64_t)this, v24, (uint64_t *)&v32);
    goto LABEL_33;
  }
  v16 = v15 - 1;
  v17 = ((i >> 4) ^ (i >> 9)) & v16;
  v18 = (char *)(*(_QWORD *)this + 32 * v17);
  v19 = *(_QWORD *)v18;
  if (i != *(_QWORD **)v18)
  {
    v20 = 0;
    v21 = 1;
    while (v19 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & v16;
      v18 = (char *)(*(_QWORD *)this + 32 * v17);
      v19 = *(_QWORD *)v18;
      if (i == *(_QWORD **)v18)
        goto LABEL_33;
    }
    if (v20)
      v24 = v20;
    else
      v24 = v18;
    goto LABEL_32;
  }
LABEL_33:
  v25 = *(void ***)(v7 + 8);
  v26 = *(unsigned int *)(v7 + 16);
  if ((_DWORD)v26)
  {
    v27 = *((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8;
    v28 = 8 * v26;
    v30 = vdupq_n_s64(0xFFFFFFFFFFFFE000);
    do
    {
      v32 = *v25;
      v33 = v11;
      v34[0] = v27;
      v31 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t *)v18 + 1, &v32, &v31))
      {
        v29 = v31;
        *v31 = -8192;
        *(int64x2_t *)(v29 + 1) = v30;
        *((int32x2_t *)v18 + 2) = vadd_s32(*(int32x2_t *)(v18 + 16), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v25;
      v28 -= 8;
    }
    while (v28);
    v25 = *(void ***)(v7 + 8);
  }
  if (v25 != (void **)(v7 + 24))
    free(v25);
  *(_QWORD *)v7 = -8192;
  this[4] = vadd_s32(this[4], (int32x2_t)0x1FFFFFFFFLL);
}

uint64_t mlir::OperationFolder::insertKnownConstant(int32x2_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  mlir::GenericProgramPoint **v6;
  int32x2_t v7;
  uint64_t v8;
  __int32 v9;
  __int32 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int32 v15;
  int32x2_t v16;
  __int32 v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  mlir::Operation *v23;
  int v24;
  unsigned int v25;
  unint64_t i;
  uint64_t v27;
  uint64_t InterfaceFor;
  __int32 v29;
  __int32 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  BOOL v36;
  int v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t Values;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  mlir::Operation *v46;
  int32x2_t *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  mlir::GenericProgramPoint **v52;
  mlir::Operation *v53;
  mlir::Operation *v54;
  __int32 v55;
  int32x2_t v56;
  __int32 v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  mlir::Operation *v65;
  uint64_t v66;
  __int32 v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int32x2_t v73;
  __int32 v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  mlir::Operation *v83;
  uint64_t v84[2];
  unint64_t v85[2];
  void *v86;
  uint64_t v87;
  _QWORD v88[3];

  v3 = a3;
  v88[2] = *MEMORY[0x1E0C80C00];
  v83 = (mlir::Operation *)a2;
  v6 = *(mlir::GenericProgramPoint ***)(a2 + 16);
  v8 = (uint64_t)&a1[3];
  v7 = a1[3];
  v9 = a1[5].i32[0];
  if (v9)
  {
    v10 = v9 - 1;
    v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
    v12 = *(_QWORD *)(*(_QWORD *)&v7 + 40 * v11);
    if (v12 == a2)
    {
LABEL_3:
      mlir::GenericProgramPoint::~GenericProgramPoint(v6[5]);
      if (v13 != a2)
      {
        if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == a2)
        {
          v14 = 0;
          v15 = a1[5].i32[0];
          if (!v15)
          {
LABEL_13:
            mlir::GenericProgramPoint::~GenericProgramPoint(v6[5]);
            mlir::Operation::moveBefore((mlir::Operation *)a2, v23);
            return 1;
          }
        }
        else
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)a2);
          v15 = a1[5].i32[0];
          if (!v15)
            goto LABEL_13;
        }
        v16 = a1[3];
        v17 = v15 - 1;
        v18 = ((v14 >> 4) ^ (v14 >> 9)) & (v15 - 1);
        v19 = *(_QWORD *)(*(_QWORD *)&v16 + 40 * v18);
        if (v19 != v14)
        {
          v20 = 1;
          while (v19 != -4096)
          {
            v21 = v18 + v20++;
            v18 = v21 & v17;
            v19 = *(_QWORD *)(*(_QWORD *)&v16 + 40 * (v21 & v17));
            v22 = 1;
            if (v19 == v14)
              return v22;
          }
          goto LABEL_13;
        }
      }
      return 1;
    }
    v24 = 1;
    while (v12 != -4096)
    {
      v25 = v11 + v24++;
      v11 = v25 & v10;
      v12 = *(_QWORD *)(*(_QWORD *)&v7 + 40 * v11);
      if (v12 == a2)
        goto LABEL_3;
    }
  }
  if (!a3 && mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(a2 + 48)))
  {
    v86 = v88;
    v87 = 0x100000000;
    mlir::Operation::fold(a2, 0, 0, (uint64_t)&v86);
    if ((*(_QWORD *)v86 & 0xFFFFFFFFFFFFFFF8) != 0)
      v3 = *(_QWORD *)v86 & 0xFFFFFFFFFFFFFFF8;
    if (v86 != v88)
      free(v86);
  }
  v82 = 0;
  for (i = mlir::Block::getParent((mlir::Block *)v6); i; i = mlir::Block::getParent(*(mlir::Block **)(v27 + 16)))
  {
    v27 = *(_QWORD *)(i + 16);
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsIsolatedFromAbove>((void ***)(v27 + 48)) & 1) != 0)
      break;
    if (!*(_QWORD *)(v27 + 16))
      break;
    InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor((mlir::detail::DialectInterfaceCollectionBase *)&a1[6], (mlir::Operation *)v27);
    if (InterfaceFor)
    {
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)InterfaceFor + 24))(InterfaceFor, i) & 1) != 0)
        break;
    }
  }
  v82 = i;
  v29 = a1[2].i32[0];
  if (v29)
  {
    v30 = v29 - 1;
    v31 = ((i >> 4) ^ (i >> 9)) & v30;
    v32 = (char *)(*(_QWORD *)a1 + 32 * v31);
    v33 = *(_QWORD *)v32;
    if (i == *(_QWORD *)v32)
      goto LABEL_44;
    v34 = 0;
    v35 = 1;
    while (v33 != -4096)
    {
      if (v34)
        v36 = 0;
      else
        v36 = v33 == -8192;
      if (v36)
        v34 = v32;
      v37 = v31 + v35++;
      v31 = v37 & v30;
      v32 = (char *)(*(_QWORD *)a1 + 32 * v31);
      v33 = *(_QWORD *)v32;
      if (i == *(_QWORD *)v32)
        goto LABEL_44;
    }
    if (v34)
      v38 = v34;
    else
      v38 = v32;
  }
  else
  {
    v38 = 0;
  }
  v32 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::InsertIntoBucket<mlir::Region * const&>((uint64_t)a1, v38, (uint64_t *)&v82);
LABEL_44:
  v39 = (uint64_t *)(v32 + 8);
  v40 = *(_QWORD *)(a2 + 48);
  if (*(_UNKNOWN **)(v40 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v86 = *(void **)(v40 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v86);
  }
  else
  {
    Values = *(_QWORD *)(v40 + 24);
  }
  v42 = *(unsigned int *)(a2 + 36);
  v43 = a2 - 16;
  if (!(_DWORD)v42)
    v43 = 0;
  v84[0] = v43;
  v84[1] = v42;
  mlir::OperandRange::getTypes(v84, (uint64_t *)&v86);
  v44 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v86, v87) + 8) & 0xFFFFFFFFFFFFFFF8;
  v79 = Values;
  v80 = v3;
  v81 = v44;
  v86 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(v39, &v79, &v86) & 1) == 0)
  {
    v50 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::InsertIntoBucketImpl<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t)v39, (uint64_t)&v79, &v79, v86);
    *v50 = v79;
    v50[1] = v80;
    v50[2] = v81;
    v50[3] = 0;
    v45 = (char *)(v50 + 3);
LABEL_56:
    v51 = *(_QWORD *)(v82 + 8);
    if (v51)
      v52 = (mlir::GenericProgramPoint **)(v51 - 8);
    else
      v52 = 0;
    if (v6 != v52)
    {
      v53 = v83;
LABEL_61:
      mlir::GenericProgramPoint::~GenericProgramPoint(v52[5]);
      mlir::Operation::moveBefore(v53, v54);
      goto LABEL_62;
    }
    mlir::GenericProgramPoint::~GenericProgramPoint(v6[5]);
    v53 = v83;
    if (v65 == v83)
    {
      v53 = v65;
    }
    else
    {
      if (*(mlir::Operation **)(*((_QWORD *)v83 + 2) + 40) == v83)
      {
        v66 = 0;
        v67 = a1[5].i32[0];
        if (!v67)
          goto LABEL_61;
      }
      else
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)v83);
        v67 = a1[5].i32[0];
        if (!v67)
          goto LABEL_61;
      }
      v73 = a1[3];
      v74 = v67 - 1;
      v75 = ((v66 >> 4) ^ (v66 >> 9)) & v74;
      v76 = *(_QWORD *)(*(_QWORD *)&v73 + 40 * v75);
      if (v76 != v66)
      {
        v77 = 1;
        while (v76 != -4096)
        {
          v78 = v75 + v77++;
          v75 = v78 & v74;
          v76 = *(_QWORD *)(*(_QWORD *)&v73 + 40 * v75);
          if (v76 == v66)
            goto LABEL_62;
        }
        goto LABEL_61;
      }
    }
LABEL_62:
    *(_QWORD *)v45 = v53;
    v55 = a1[5].i32[0];
    if (v55)
    {
      v56 = a1[3];
      v57 = v55 - 1;
      v58 = ((v53 >> 4) ^ (v53 >> 9)) & v57;
      v59 = (uint64_t *)(*(_QWORD *)&v56 + 40 * v58);
      v60 = *v59;
      if (v53 == (mlir::Operation *)*v59)
        goto LABEL_79;
      v61 = 0;
      v62 = 1;
      while (v60 != -4096)
      {
        if (v61)
          v63 = 0;
        else
          v63 = v60 == -8192;
        if (v63)
          v61 = v59;
        v64 = v58 + v62++;
        v58 = v64 & v57;
        v59 = (uint64_t *)(*(_QWORD *)&v56 + 40 * v58);
        v60 = *v59;
        if (v53 == (mlir::Operation *)*v59)
          goto LABEL_79;
      }
      if (v61)
        v68 = v61;
      else
        v68 = v59;
    }
    else
    {
      v68 = 0;
    }
    v59 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(v8, v68, (uint64_t *)&v83);
    v53 = v83;
LABEL_79:
    v69 = *((_QWORD *)v53 + 6);
    if (*(_UNKNOWN **)(v69 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v86 = *(void **)(v69 + 8);
      v70 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v86);
      v71 = *((unsigned int *)v59 + 4);
      if (v71 < *((_DWORD *)v59 + 5))
        goto LABEL_81;
    }
    else
    {
      v70 = *(_QWORD *)(v69 + 24);
      v71 = *((unsigned int *)v59 + 4);
      if (v71 < *((_DWORD *)v59 + 5))
      {
LABEL_81:
        *(_QWORD *)(v59[1] + 8 * v71) = v70;
        ++*((_DWORD *)v59 + 4);
        return 1;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v59 + 1), v59 + 3, v71 + 1, 8);
    LODWORD(v71) = *((_DWORD *)v59 + 4);
    goto LABEL_81;
  }
  v45 = (char *)v86 + 24;
  if (!*((_QWORD *)v86 + 3))
    goto LABEL_56;
  v46 = v83;
  mlir::OperationFolder::notifyRemoval(a1, v83);
  v47 = a1 + 13;
  v48 = *(unsigned int *)(*(_QWORD *)v45 + 36);
  if ((_DWORD)v48)
    v49 = *(_QWORD *)v45 - 16;
  else
    v49 = 0;
  mlir::ValueRange::ValueRange(v85, v49, v48);
  mlir::RewriterBase::replaceOp(v47, (uint64_t)v46, v85[0], v85[1]);
  return 0;
}

mlir::Operation *mlir::OperationFolder::tryGetOrCreateConstant(int32x2_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  _QWORD *v13;
  mlir::Operation *result;
  mlir::Operation **v15;
  uint64_t v16;
  uint64_t Values;
  mlir::Operation *v18;
  int32x2_t v19;
  uint64_t v20;
  int32x2_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  int32x2_t v31;
  uint64_t v32;
  int32x2_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  int32x2_t v43;
  uint64_t v44;
  int32x2_t v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  mlir::Operation *v58;
  char v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  mlir::Operation *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  mlir::Operation *v73;

  v70 = a3;
  v71 = a4;
  v72 = a5;
  *(_QWORD *)&v65 = 0;
  v12 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(a2, &v70, &v65);
  v13 = (_QWORD *)v65;
  if ((v12 & 1) != 0)
  {
    result = *(mlir::Operation **)(v65 + 24);
    if (result)
      return result;
  }
  else
  {
    v13 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::InsertIntoBucketImpl<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t)a2, (uint64_t)&v70, &v70, (_QWORD *)v65);
    *v13 = v70;
    v13[1] = v71;
    v13[2] = v72;
    v13[3] = 0;
  }
  result = (mlir::Operation *)(*(uint64_t (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, a1 + 14, a4, a5, a6);
  v13[3] = result;
  v15 = (mlir::Operation **)(v13 + 3);
  if (result)
  {
    v16 = *((_QWORD *)result + 6);
    if (*(_UNKNOWN **)(v16 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      *(_QWORD *)&v65 = *(_QWORD *)(v16 + 8);
      Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v65);
      if (Values != a3)
        goto LABEL_8;
    }
    else
    {
      Values = *(_QWORD *)(v16 + 24);
      if (Values != a3)
      {
LABEL_8:
        *(_QWORD *)&v68 = Values;
        *((_QWORD *)&v68 + 1) = a4;
        v69 = a5;
        *(_QWORD *)&v65 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(a2, &v68, &v65) & 1) != 0)
        {
          v18 = *(mlir::Operation **)(v65 + 24);
          v73 = v18;
          if (v18)
          {
            mlir::OperationFolder::notifyRemoval(a1, *v15);
            mlir::RewriterBase::eraseOp((mlir::RewriterBase *)&a1[13], *v15);
            v21 = a1[3];
            v20 = (uint64_t)&a1[3];
            v19 = v21;
            v22 = *(_DWORD *)(v20 + 16);
            if (v22)
            {
              v23 = v22 - 1;
              v24 = ((v18 >> 4) ^ (v18 >> 9)) & v23;
              v25 = (uint64_t *)(*(_QWORD *)&v19 + 40 * v24);
              v26 = *v25;
              if (v18 == (mlir::Operation *)*v25)
              {
LABEL_59:
                v64 = *((unsigned int *)v25 + 4);
                if (v64 >= *((_DWORD *)v25 + 5))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v25 + 1), v25 + 3, v64 + 1, 8);
                  LODWORD(v64) = *((_DWORD *)v25 + 4);
                }
                *(_QWORD *)(v25[1] + 8 * v64) = a3;
                ++*((_DWORD *)v25 + 4);
                result = v73;
                *v15 = v73;
                return result;
              }
              v27 = 0;
              v28 = 1;
              while (v26 != -4096)
              {
                if (v27)
                  v29 = 0;
                else
                  v29 = v26 == -8192;
                if (v29)
                  v27 = v25;
                v30 = v24 + v28++;
                v24 = v30 & v23;
                v25 = (uint64_t *)(*(_QWORD *)&v19 + 40 * v24);
                v26 = *v25;
                if (v18 == (mlir::Operation *)*v25)
                  goto LABEL_59;
              }
              if (v27)
                v63 = v27;
              else
                v63 = v25;
            }
            else
            {
              v63 = 0;
            }
            v25 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(v20, v63, (uint64_t *)&v73);
            goto LABEL_59;
          }
        }
        v33 = a1[3];
        v32 = (uint64_t)&a1[3];
        v31 = v33;
        v34 = *(_DWORD *)(v32 + 16);
        if (v34)
        {
          v35 = v34 - 1;
          v36 = ((*v15 >> 4) ^ (*v15 >> 9)) & v35;
          v37 = (uint64_t *)(*(_QWORD *)&v31 + 40 * v36);
          v38 = *v37;
          if (*v15 == (mlir::Operation *)*v37)
          {
LABEL_46:
            *((_DWORD *)v37 + 4) = 0;
            if (*((_DWORD *)v37 + 5) > 1u)
            {
              v56 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 1), v37 + 3, 2uLL, 8);
              v56 = *((unsigned int *)v37 + 4);
            }
            v57 = (_QWORD *)(v37[1] + 8 * v56);
            *v57 = a3;
            v57[1] = Values;
            *((_DWORD *)v37 + 4) += 2;
            v65 = v68;
            v58 = *v15;
            v66 = v69;
            v67 = v58;
            v73 = 0;
            v59 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(a2, &v65, &v73);
            v60 = v73;
            if ((v59 & 1) == 0)
            {
              v60 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::InsertIntoBucketImpl<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t)a2, (uint64_t)&v65, &v65, v73);
              *(_OWORD *)v60 = v65;
              v60[2] = v66;
              v60[3] = v67;
            }
            return (mlir::Operation *)v60[3];
          }
          v39 = 0;
          v40 = 1;
          while (v38 != -4096)
          {
            if (v39)
              v41 = 0;
            else
              v41 = v38 == -8192;
            if (v41)
              v39 = v37;
            v42 = v36 + v40++;
            v36 = v42 & v35;
            v37 = (uint64_t *)(*(_QWORD *)&v31 + 40 * v36);
            v38 = *v37;
            if (*v15 == (mlir::Operation *)*v37)
              goto LABEL_46;
          }
          if (v39)
            v55 = v39;
          else
            v55 = v37;
        }
        else
        {
          v55 = 0;
        }
        v37 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(v32, v55, (uint64_t *)v15);
        goto LABEL_46;
      }
    }
    v45 = a1[3];
    v44 = (uint64_t)&a1[3];
    v43 = v45;
    v46 = *(_DWORD *)(v44 + 16);
    if (v46)
    {
      v47 = v46 - 1;
      v48 = ((*v15 >> 4) ^ (*v15 >> 9)) & v47;
      v49 = (uint64_t *)(*(_QWORD *)&v43 + 40 * v48);
      v50 = *v49;
      if (*v15 == (mlir::Operation *)*v49)
      {
LABEL_54:
        v62 = *((unsigned int *)v49 + 4);
        if (v62 >= *((_DWORD *)v49 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v49 + 1), v49 + 3, v62 + 1, 8);
          LODWORD(v62) = *((_DWORD *)v49 + 4);
        }
        *(_QWORD *)(v49[1] + 8 * v62) = a3;
        ++*((_DWORD *)v49 + 4);
        return *v15;
      }
      v51 = 0;
      v52 = 1;
      while (v50 != -4096)
      {
        if (v51)
          v53 = 0;
        else
          v53 = v50 == -8192;
        if (v53)
          v51 = v49;
        v54 = v48 + v52++;
        v48 = v54 & v47;
        v49 = (uint64_t *)(*(_QWORD *)&v43 + 40 * v48);
        v50 = *v49;
        if (*v15 == (mlir::Operation *)*v49)
          goto LABEL_54;
      }
      if (v51)
        v61 = v51;
      else
        v61 = v49;
    }
    else
    {
      v61 = 0;
    }
    v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(v44, v61, (uint64_t *)v15);
    goto LABEL_54;
  }
  return result;
}

uint64_t mlir::OperationFolder::processFoldResults(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t i;
  uint64_t v9;
  uint64_t InterfaceFor;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  __int32 v14;
  __int32 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  BOOL v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  mlir::Operation *Constant;
  mlir::Operation *v36;
  uint64_t v37;
  mlir::Operation *v38;
  mlir::Operation *v39;
  unint64_t v40;
  uint64_t result;
  mlir::GenericProgramPoint *v42;
  mlir::GenericProgramPoint *v43;
  mlir::GenericProgramPoint *v44;
  mlir::Operation *v45;
  mlir::Operation *v46;
  void *v47;
  int32x2_t v48;
  uint64_t Values;
  unint64_t v51;
  uint64_t v52;

  if (!a5)
    return 1;
  for (i = mlir::Block::getParent(*(mlir::Block **)(a2 + 16)); i; i = mlir::Block::getParent(*(mlir::Block **)(v9 + 16)))
  {
    v9 = *(_QWORD *)(i + 16);
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsIsolatedFromAbove>((void ***)(v9 + 48)) & 1) != 0)
      break;
    if (!*(_QWORD *)(v9 + 16))
      break;
    InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor((mlir::detail::DialectInterfaceCollectionBase *)&a1[6], (mlir::Operation *)v9);
    if (InterfaceFor)
    {
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)InterfaceFor + 24))(InterfaceFor, i) & 1) != 0)
        break;
    }
  }
  v51 = i;
  v11 = *(_QWORD *)(i + 8);
  if (v11)
    v12 = (int32x2_t)(v11 - 8);
  else
    v12 = 0;
  v13 = *(int32x2_t *)(*(_QWORD *)&v12 + 40);
  a1[16] = v12;
  a1[17] = v13;
  v14 = a1[2].i32[0];
  if (!v14)
  {
    v23 = 0;
LABEL_24:
    v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::InsertIntoBucket<mlir::Region * const&>((uint64_t)a1, v23, (uint64_t *)&v51);
    goto LABEL_25;
  }
  v15 = v14 - 1;
  v16 = v15 & ((i >> 4) ^ (i >> 9));
  v17 = (char *)(*(_QWORD *)a1 + 32 * v16);
  v18 = *(_QWORD *)v17;
  if (i != *(_QWORD *)v17)
  {
    v19 = 0;
    v20 = 1;
    while (v18 != -4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == -8192;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & v15;
      v17 = (char *)(*(_QWORD *)a1 + 32 * v16);
      v18 = *(_QWORD *)v17;
      if (i == *(_QWORD *)v17)
        goto LABEL_25;
    }
    if (v19)
      v23 = v19;
    else
      v23 = v17;
    goto LABEL_24;
  }
LABEL_25:
  v24 = *(_QWORD *)(a2 + 48);
  if (*(_UNKNOWN **)(v24 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v52 = *(_QWORD *)(v24 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v52);
    v25 = *(unsigned int *)(a2 + 36);
    if (!(_DWORD)v25)
      return 1;
  }
  else
  {
    Values = *(_QWORD *)(v24 + 24);
    v25 = *(unsigned int *)(a2 + 36);
    if (!(_DWORD)v25)
      return 1;
  }
  v26 = 0;
  v48 = v12;
  v27 = (uint64_t *)(v17 + 8);
  v47 = (void *)(a3 + 16);
  v28 = a2 - 16;
  for (j = a2 + 24; ; j -= 24)
  {
    v30 = *(_QWORD *)(a4 + 8 * v26);
    v31 = v30 & 0xFFFFFFFFFFFFFFF8;
    if ((v30 & 4) == 0 || !v31)
      break;
    if (v26 >= 6)
      v32 = j;
    else
      v32 = v28;
    if ((*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_54;
    v33 = *(unsigned int *)(a3 + 8);
    if (v33 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v47, v33 + 1, 8);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v31;
LABEL_50:
      LODWORD(v33) = *(_DWORD *)(a3 + 8);
      goto LABEL_31;
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v33) = v31;
LABEL_31:
    *(_DWORD *)(a3 + 8) = v33 + 1;
    ++v26;
    v28 -= 16;
    if (v25 == v26)
      return 1;
  }
  if (v26 >= 6)
    v34 = j;
  else
    v34 = v28;
  Constant = mlir::OperationFolder::tryGetOrCreateConstant(a1, v27, Values, v31, *(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a2 + 24));
  if (Constant)
  {
    v36 = Constant;
    v37 = *(_QWORD *)(a2 + 16);
    if (v37 == *((_QWORD *)Constant + 2))
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v37 + 40));
      if (v38 != v36)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v37 + 40));
        mlir::Operation::moveBefore(v36, v39);
      }
    }
    v40 = *(unsigned int *)(a3 + 8);
    if (v40 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v47, v40 + 1, 8);
      v40 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v40) = (char *)v36 - 16;
    goto LABEL_50;
  }
  v42 = *(mlir::GenericProgramPoint **)(*(_QWORD *)&v48 + 40);
  v43 = (mlir::GenericProgramPoint *)a1[17];
  if (v42 != v43)
  {
    do
    {
      v44 = (mlir::GenericProgramPoint *)*((_QWORD *)v42 + 1);
      mlir::GenericProgramPoint::~GenericProgramPoint(v42);
      v46 = v45;
      mlir::OperationFolder::notifyRemoval(a1, v45);
      mlir::RewriterBase::eraseOp((mlir::RewriterBase *)&a1[13], v46);
      v42 = v44;
    }
    while (v44 != v43);
  }
LABEL_54:
  result = 0;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::InsertIntoBucket<mlir::Region * const&>(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *buffer;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  BOOL v28;
  int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v10 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v10 = *(_DWORD *)(a1 + 16);
  }
  v11 = *(uint64_t **)a1;
  v12 = (v10 - 1) | ((unint64_t)(v10 - 1) >> 1);
  v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
  v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
  if ((v14 + 1) > 0x40)
    v15 = v14 + 1;
  else
    v15 = 64;
  *(_DWORD *)(a1 + 16) = v15;
  buffer = llvm::allocate_buffer(32 * v15, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v11)
  {
    v17 = (char *)(32 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::moveFromOldBuckets(a1, v11, (uint64_t *)&v17[(_QWORD)v11]);
    llvm::deallocate_buffer((llvm *)v11, v17);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  v19 = buffer;
  if (((v18 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v20 = ((v18 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  v19 = &buffer[4 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = buffer + 4;
  v22 = v20 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v21 - 4) = -4096;
    *v21 = -4096;
    v21 += 8;
    v22 -= 2;
  }
  while (v22);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 4;
    }
    while (v19 != &buffer[4 * v18]);
  }
  v7 = *a3;
  v23 = v18 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = (char *)&buffer[4 * v24];
  v25 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = (char *)&buffer[4 * v24];
      v25 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  v8 = *a3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = v8;
  *((_DWORD *)a2 + 6) = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;

  v3 = a2;
  *(_QWORD *)(result + 8) = 0;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)result;
    v6 = (v4 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0xFFFFFFFFFFFFFFELL;
      v9 = &v5[4 * v8];
      v10 = v5 + 4;
      v11 = v8;
      do
      {
        *(v10 - 4) = -4096;
        *v10 = -4096;
        v10 += 8;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        goto LABEL_10;
    }
    else
    {
      v9 = *(_QWORD **)result;
    }
    v12 = &v5[4 * v4];
    do
    {
      *v9 = -4096;
      v9 += 4;
    }
    while (v9 != v12);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v16 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = *(_DWORD *)(result + 16) - 1;
        v18 = v17 & ((v16 >> 4) ^ (v16 >> 9));
        v13 = *(_QWORD *)result + 32 * v18;
        v19 = *(_QWORD *)v13;
        if (v16 != *(_QWORD *)v13)
        {
          v20 = 0;
          v21 = 1;
          while (v19 != -4096)
          {
            if (v20)
              v22 = 0;
            else
              v22 = v19 == -8192;
            if (v22)
              v20 = v13;
            v23 = v18 + v21++;
            v18 = v23 & v17;
            v13 = *(_QWORD *)result + 32 * v18;
            v19 = *(_QWORD *)v13;
            if (v16 == *(_QWORD *)v13)
              goto LABEL_14;
          }
          if (v20)
            v13 = v20;
        }
LABEL_14:
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)v13 = v16;
        *(_DWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 8) = v3[1];
        v3[1] = 0;
        *(_DWORD *)(v13 + 16) = *((_DWORD *)v3 + 4);
        *((_DWORD *)v3 + 4) = 0;
        v14 = *(_DWORD *)(v13 + 20);
        *(_DWORD *)(v13 + 20) = *((_DWORD *)v3 + 5);
        *((_DWORD *)v3 + 5) = v14;
        v15 = *(unsigned int *)(v13 + 24);
        *(_DWORD *)(v13 + 24) = *((_DWORD *)v3 + 6);
        *((_DWORD *)v3 + 6) = v15;
        ++*(_DWORD *)(result + 8);
        llvm::deallocate_buffer(0, (void *)(32 * v15));
      }
      v3 += 4;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v25;
  unsigned int v27;
  uint64_t result;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v4 = 0;
  v5 = *a1;
  v6 = a2[1];
  v7 = a2[2];
  v8 = ((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32) - 1;
  v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v11 = ((v10 + ~(v10 << 27)) >> 31) ^ ((_DWORD)v10 + ~((_DWORD)v10 << 27));
  v12 = (v11 | ((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32)) + ~(v11 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = ((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27));
  v16 = (v15 | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32)) + ~(v15 << 32);
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v3 - 1;
  v20 = v19 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v21 = 1;
  v22 = (_QWORD *)(*a1 + 32 * v20);
  v23 = *v22;
  if (*a2 != *v22)
    goto LABEL_7;
LABEL_3:
  if (v6 == v22[1] && v7 == v22[2])
  {
    result = 1;
    *a3 = v22;
    return result;
  }
  while (1)
  {
LABEL_7:
    if (v23 != -4096)
    {
      v25 = v23 == -8192 && v22[1] == -8192 && v22[2] == -8192;
      goto LABEL_19;
    }
    v25 = 0;
    if (v22[1] == -4096 && v22[2] == -4096)
      break;
LABEL_19:
    if (v25 && v4 == 0)
      v4 = v22;
    v27 = v20 + v21++;
    v20 = v27 & v19;
    v22 = (_QWORD *)(v5 + 32 * v20);
    v23 = *v22;
    if (*a2 == *v22)
      goto LABEL_3;
  }
  result = 0;
  if (v4)
    v22 = v4;
  *a3 = v22;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::InsertIntoBucketImpl<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 != -4096)
      goto LABEL_4;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
  {
LABEL_4:
    --*(_DWORD *)(a1 + 12);
    return a4;
  }
LABEL_8:
  if (a4[1] != -4096 || a4[2] != -4096)
    goto LABEL_4;
  return a4;
}

char *llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t v14;
  uint64_t v15;
  char *v16;
  int64x2_t v17;
  void *v18;
  uint64_t v19;
  llvm *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  int64x2_t v28;
  _QWORD *v29;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[32 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = (int64x2_t *)(result + 40);
      v14 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v15 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v13[-3].i64[1] = -4096;
        v13[-1].i64[1] = -4096;
        v13[-2] = v14;
        *v13 = v14;
        v13 += 4;
        v15 -= 2;
      }
      while (v15);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v16 = &result[32 * v11];
        v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *(_QWORD *)v10 = -4096;
          *(int64x2_t *)(v10 + 8) = v17;
          v10 += 32;
        }
        while (v10 != v16);
      }
    }
    v18 = (void *)(32 * v3);
    if (!(_DWORD)v3)
LABEL_24:
      llvm::deallocate_buffer(v4, v18);
    v19 = 32 * v3;
    v20 = v4;
    while (1)
    {
      if (*(_QWORD *)v20 == -8192)
      {
        if (*((_QWORD *)v20 + 1) == -8192 && *((_QWORD *)v20 + 2) == -8192)
          goto LABEL_15;
      }
      else if (*(_QWORD *)v20 == -4096 && *((_QWORD *)v20 + 1) == -4096 && *((_QWORD *)v20 + 2) == -4096)
      {
        goto LABEL_15;
      }
      v29 = 0;
      llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t *)a1, v20, &v29);
      v21 = v29;
      *v29 = *(_QWORD *)v20;
      v21[1] = *((_QWORD *)v20 + 1);
      v21[2] = *((_QWORD *)v20 + 2);
      v21[3] = *((_QWORD *)v20 + 3);
      ++*(_DWORD *)(a1 + 8);
LABEL_15:
      v20 = (llvm *)((char *)v20 + 32);
      v19 -= 32;
      if (!v19)
        goto LABEL_24;
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  v22 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v22)
  {
    if (((v22 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_30;
    v23 = ((v22 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[32 * (v23 & 0xFFFFFFFFFFFFFFELL)];
    v24 = (int64x2_t *)(result + 40);
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v24[-3].i64[1] = -4096;
      v24[-1].i64[1] = -4096;
      v24[-2] = v25;
      *v24 = v25;
      v24 += 4;
      v26 -= 2;
    }
    while (v26);
    if (v23 != (v23 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_30:
      v27 = &result[32 * v22];
      v28 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(_QWORD *)v10 = -4096;
        *(int64x2_t *)(v10 + 8) = v28;
        v10 += 32;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(40 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 5 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 40 * v17 - 40;
  v19 = buffer;
  if (v18 < 0x28)
    goto LABEL_34;
  v20 = v18 / 0x28 + 1;
  v19 = &buffer[5 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[5] = -4096;
    v22 += 10;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 5;
    }
    while (v19 != &buffer[5 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[5 * v24];
  v25 = *a2;
  if (*a3 != *a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = &buffer[5 * v24];
      v25 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x200000000;
  return a2;
}

void mlir::applyPatternsAndFoldGreedily(mlir::Region **this, const mlir::FrozenRewritePatternSet *a2, __int128 *a3, BOOL *a4)
{
  __int128 v8;
  __int128 v9;
  mlir::Region *i;
  _QWORD *v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  mlir::ForwardIterator *v15;
  uint64_t *v16;
  uint64_t v17;
  mlir::PatternApplicator *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  llvm *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm *v28;
  _QWORD *v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm *v35;
  _QWORD *v36;
  uint64_t v37;
  llvm *v38;
  llvm *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  mlir::GenericProgramPoint *v43;
  mlir::GenericProgramPoint *v44;
  mlir::GenericProgramPoint *v45;
  mlir::ForwardIterator *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  char *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  char *v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t j;
  uint64_t v77;
  mlir::GenericProgramPoint *v78;
  mlir::GenericProgramPoint *v79;
  mlir::GenericProgramPoint *v80;
  mlir::ForwardIterator *v81;
  mlir::Operation *v82;
  _anonymous_namespace_::GreedyPatternRewriteDriver *v83;
  char v84;
  uint64_t **v85;
  uint64_t (***v86)();
  _anonymous_namespace_::GreedyPatternRewriteDriver *v87;
  char v88;
  uint64_t (***v89)();
  uint64_t (**v90)();
  mlir::MLIRContext *Context;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  int v96;
  char *v97;
  char *v98;
  char *v99;
  llvm *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _QWORD v109[12];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD v120[3];

  v120[1] = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a3 + 3))
    *((_QWORD *)a3 + 3) = this;
  v92 = 0;
  v93 = 0;
  v96 = 1;
  v90 = off_1E0E19858;
  Context = (mlir::MLIRContext *)mlir::Region::getContext((mlir::Region *)this);
  v94 = 0;
  v95 = &unk_1E0E19910;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v97 = (char *)operator new(0x200uLL);
  v98 = v97;
  v103 = 0;
  v104 = 0;
  v99 = v97 + 512;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  mlir::DialectInterfaceCollection<mlir::DialectFoldInterface>::DialectInterfaceCollection(v109, Context);
  v8 = a3[2];
  v9 = *a3;
  v111 = a3[1];
  v112 = v8;
  v109[10] = 0;
  v109[11] = 0;
  v109[9] = &v95;
  v109[7] = off_1E0E25938;
  v109[8] = Context;
  v110 = v9;
  v114 = -4096;
  v115 = -4096;
  v116 = -4096;
  v117 = -4096;
  v113 = 1;
  v85 = (uint64_t **)mlir::PatternApplicator::PatternApplicator((mlir::PatternApplicator *)&v118, a2);
  mlir::PatternApplicator::applyCostModel(v85, llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>::callback_fn<mlir::PatternApplicator::applyDefaultCostModel(void)::{lambda(mlir::Pattern const&)#1}>, (uint64_t)&v86);
  v92 = &v95;
  v90 = off_1E0E19968;
  v95 = &unk_1E0E19A20;
  v119 = (unint64_t)this;
  if (*((_DWORD *)a3 + 8))
  {
    v86 = &v90;
    for (i = this[1]; i != (mlir::Region *)this; i = (mlir::Region *)*((_QWORD *)i + 1))
    {
      v11 = (_QWORD *)((char *)i - 8);
      if (!i)
        v11 = 0;
      v12 = (mlir::GenericProgramPoint *)(v11 + 4);
      v13 = (mlir::GenericProgramPoint *)v11[5];
      if (v13 != (mlir::GenericProgramPoint *)(v11 + 4))
      {
        do
        {
          v14 = (mlir::GenericProgramPoint *)*((_QWORD *)v13 + 1);
          mlir::GenericProgramPoint::~GenericProgramPoint(v13);
          v13 = v14;
        }
        while (v14 != v12);
      }
    }
  }
  v89 = &v90;
  v88 = 0;
  v16 = (uint64_t *)Context;
  if (*((uint64_t *)&v110 + 1) <= 0 && *((_QWORD *)&v110 + 1) != -1)
  {
    v17 = 0;
    v18 = (mlir::PatternApplicator *)v85;
    if (a4)
      goto LABEL_117;
    goto LABEL_118;
  }
  v17 = 0;
  v19 = 1;
  while (1)
  {
    v20 = v19;
    v98 = v97;
    if (!v101)
      goto LABEL_45;
    v21 = v102;
    if (v102 <= 4 * (int)v101 || v102 < 0x41)
    {
      if (v102)
      {
        v31 = v100;
        v32 = (v102 - 1) & 0xFFFFFFFFFFFFFFFLL;
        if (v32)
        {
          v33 = v32 + 1;
          v34 = (v32 + 1) & 0x1FFFFFFFFFFFFFFELL;
          v35 = (llvm *)((char *)v100 + 16 * v34);
          v36 = (_QWORD *)((char *)v100 + 16);
          v37 = v34;
          do
          {
            *(v36 - 2) = -4096;
            *v36 = -4096;
            v36 += 4;
            v37 -= 2;
          }
          while (v37);
          if (v33 == v34)
            goto LABEL_41;
        }
        else
        {
          v35 = v100;
        }
        v38 = (llvm *)((char *)v31 + 16 * v21);
        do
        {
          *(_QWORD *)v35 = -4096;
          v35 = (llvm *)((char *)v35 + 16);
        }
        while (v35 != v38);
      }
LABEL_41:
      v101 = 0;
      goto LABEL_45;
    }
    v22 = 1 << (33 - __clz(v101 - 1));
    if (v22 <= 64)
      v22 = 64;
    if ((_DWORD)v101)
      v23 = v22;
    else
      v23 = 0;
    if (v23 != v102)
      llvm::deallocate_buffer(v100, (void *)(16 * v102));
    v101 = 0;
    v24 = v100;
    v25 = (v102 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v25)
      break;
    v26 = v25 + 1;
    v27 = (v25 + 1) & 0x1FFFFFFFFFFFFFFELL;
    v28 = (llvm *)((char *)v100 + 16 * v27);
    v29 = (_QWORD *)((char *)v100 + 16);
    v30 = v27;
    do
    {
      *(v29 - 2) = -4096;
      *v29 = -4096;
      v29 += 4;
      v30 -= 2;
    }
    while (v30);
    if (v26 != v27)
      goto LABEL_43;
LABEL_45:
    v40 = v119;
    if ((_BYTE)v110)
    {
      v86 = (uint64_t (***)())&v89;
      v87 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v90;
      v41 = *(_QWORD **)(v119 + 8);
      if (v41 != (_QWORD *)v119)
      {
        do
        {
          v42 = v41 - 1;
          if (!v41)
            v42 = 0;
          v43 = (mlir::GenericProgramPoint *)(v42 + 4);
          v44 = (mlir::GenericProgramPoint *)v42[5];
          while (v44 != v43)
          {
            v45 = (mlir::GenericProgramPoint *)*((_QWORD *)v44 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v44);
            v44 = v45;
            if (!v47)
              goto LABEL_54;
          }
          v41 = (_QWORD *)v41[1];
        }
        while (v41 != (_QWORD *)v40);
      }
LABEL_54:
      v48 = v97;
      v49 = v98;
      v50 = v98 - 8;
      if (v97 != v98 && v50 > v97)
      {
        v52 = v97 + 8;
        do
        {
          v53 = *((_QWORD *)v52 - 1);
          *((_QWORD *)v52 - 1) = *(_QWORD *)v50;
          *(_QWORD *)v50 = v53;
          v50 -= 8;
          v54 = v52 >= v50;
          v52 += 8;
        }
        while (!v54);
        v48 = v97;
        v49 = v98;
      }
      if (v49 != v48)
      {
        v55 = 0;
        v56 = (v49 - v48) >> 3;
        while (1)
        {
          v62 = v97;
          v63 = v102;
          if (!v102)
            goto LABEL_86;
          v57 = *(_QWORD *)&v97[8 * v55];
          v58 = v102 - 1;
          v59 = ((v57 >> 4) ^ (v57 >> 9)) & (v102 - 1);
          v60 = (char *)v100 + 16 * v59;
          v61 = *(_QWORD *)v60;
          if (v57 != *(_QWORD *)v60)
            break;
LABEL_66:
          *((_DWORD *)v60 + 2) = v55++;
          if (v55 == v56)
            goto LABEL_108;
        }
        v65 = 0;
        v66 = 1;
        while (v61 != -4096)
        {
          if (v65)
            v67 = 0;
          else
            v67 = v61 == -8192;
          if (v67)
            v65 = v60;
          v68 = v59 + v66++;
          v59 = v68 & v58;
          v60 = (char *)v100 + 16 * (v68 & v58);
          v61 = *(_QWORD *)v60;
          if (v57 == *(_QWORD *)v60)
            goto LABEL_66;
        }
        if (v65)
          v60 = v65;
        if (4 * (int)v101 + 4 < 3 * v102)
        {
          if (v102 + ~(_DWORD)v101 - HIDWORD(v101) <= v102 >> 3)
            goto LABEL_87;
LABEL_70:
          v64 = *(_QWORD *)v60;
        }
        else
        {
LABEL_86:
          v63 = 2 * v102;
LABEL_87:
          llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)&v100, v63);
          v64 = *(_QWORD *)&v62[8 * v55];
          v69 = v102 - 1;
          v70 = ((v64 >> 4) ^ (v64 >> 9)) & (v102 - 1);
          v60 = (char *)v100 + 16 * v70;
          v71 = *(_QWORD *)v60;
          if (v64 != *(_QWORD *)v60)
          {
            v72 = 0;
            v73 = 1;
            while (v71 != -4096)
            {
              if (v72)
                v74 = 0;
              else
                v74 = v71 == -8192;
              if (v74)
                v72 = v60;
              v75 = v70 + v73++;
              v70 = v75 & v69;
              v60 = (char *)v100 + 16 * (v75 & v69);
              v71 = *(_QWORD *)v60;
              if (v64 == *(_QWORD *)v60)
                goto LABEL_71;
            }
            if (v72)
              v60 = v72;
            goto LABEL_70;
          }
        }
LABEL_71:
        LODWORD(v101) = v101 + 1;
        if (v64 != -4096)
          --HIDWORD(v101);
        *(_QWORD *)v60 = *(_QWORD *)&v62[8 * v55];
        *((_DWORD *)v60 + 2) = 0;
        goto LABEL_66;
      }
    }
    else
    {
      v86 = (uint64_t (***)())&v89;
      v87 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v90;
      for (j = *(_QWORD *)(v119 + 8); j != v40; j = *(_QWORD *)(j + 8))
      {
        v77 = j - 8;
        if (!j)
          v77 = 0;
        v78 = (mlir::GenericProgramPoint *)(v77 + 32);
        v79 = *(mlir::GenericProgramPoint **)(v77 + 40);
        if (v79 != (mlir::GenericProgramPoint *)(v77 + 32))
        {
          do
          {
            v80 = (mlir::GenericProgramPoint *)*((_QWORD *)v79 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v79);
            v79 = v80;
          }
          while (v80 != v78);
        }
      }
    }
LABEL_108:
    v86 = (uint64_t (***)())&v88;
    v87 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v90;
    v120[0] = v119 & 0xFFFFFFFFFFFFFFF9 | 2;
    if (mlir::MLIRContext::hasActionHandler((mlir::MLIRContext *)v16))
    {
      if (!v88)
        goto LABEL_116;
    }
    else
    {
      v83 = v87;
      *(_BYTE *)v86 = v84;
      if (*((_BYTE *)v83 + 249))
        mlir::simplifyRegions((uint64_t)v83, *((_QWORD **)v83 + 50), 1uLL);
      if (!v88)
        goto LABEL_116;
    }
    v19 = v20 + 1;
    v17 = v20;
    if (v20 >= *((uint64_t *)&v110 + 1))
    {
      v17 = v20;
      if (*((_QWORD *)&v110 + 1) != -1)
      {
        v17 = 1;
LABEL_116:
        v18 = (mlir::PatternApplicator *)v85;
        if (a4)
LABEL_117:
          *a4 = v17 != 0;
LABEL_118:
        v90 = off_1E0E19858;
        v95 = &unk_1E0E19910;
        mlir::PatternApplicator::~PatternApplicator(v18);
      }
    }
  }
  v28 = v100;
LABEL_43:
  v39 = (llvm *)((char *)v24 + 16 * v21);
  do
  {
    *(_QWORD *)v28 = -4096;
    v28 = (llvm *)((char *)v28 + 16);
  }
  while (v28 != v39);
  goto LABEL_45;
}

void sub_18071C1BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,llvm *a55,unsigned int a56)
{
  mlir::OperationFolder *v56;

  if ((a54 & 1) == 0)
    llvm::deallocate_buffer(a55, (void *)(8 * a56));
  mlir::OperationFolder::~OperationFolder(v56);
}

void sub_18071C1E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,llvm *a27,uint64_t a28,unsigned int a29)
{
  llvm::deallocate_buffer(a27, (void *)(16 * a29));
}

uint64_t sub_18071C1F4()
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  if (v3)
  {
    v4 = v3;
    operator delete(v3);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
  return v1;
}

void `anonymous namespace'::RegionPatternRewriteDriver::~RegionPatternRewriteDriver(_anonymous_namespace_::RegionPatternRewriteDriver *this)
{
  *(_QWORD *)this = off_1E0E19858;
  *((_QWORD *)this + 5) = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::RegionPatternRewriteDriver *)((char *)this + 336));
}

{
  *(_QWORD *)this = off_1E0E19858;
  *((_QWORD *)this + 5) = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::RegionPatternRewriteDriver *)((char *)this + 336));
}

void sub_18071C278()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_18071C29C()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_18071C2B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  void *v13;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

uint64_t mlir::applyOpPatternsAndFold(mlir::Operation **a1, uint64_t a2, const mlir::FrozenRewritePatternSet *a3, __int128 *a4, _BYTE *a5, BOOL *a6)
{
  BOOL *v6;
  mlir::Operation **v10;
  mlir::Block *ParentRegion;
  unint64_t Parent;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  mlir::Block *v16;
  size_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  mlir::Block *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t Context;
  mlir::MLIRContext *v38;
  int64x2_t *v39;
  __int128 v40;
  __int128 v41;
  uint64_t **v42;
  mlir::Operation **i;
  int v44;
  uint64_t *v45;
  int v46;
  unsigned int v47;
  int *v48;
  uint64_t v49;
  int *v50;
  int *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int64x2_t *v61;
  int64x2_t v62;
  uint64_t v63;
  mlir::Operation **v64;
  int v65;
  uint64_t *v66;
  int v67;
  unsigned int v68;
  int *v69;
  uint64_t v70;
  int *v71;
  int *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t v76;
  mlir::Operation *v77;
  mlir::Operation *v78;
  char v79;
  char *v80;
  BOOL v81;
  const mlir::FrozenRewritePatternSet *v83;
  int v84;
  char v87;
  void *__b;
  uint64_t v89;
  _QWORD v90[3];
  void *v91;
  int v92;
  void *__p;
  char *v94;
  char *v95;
  llvm *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD v105[12];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[9];
  int64x2_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v6 = a6;
  v119 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v10 = a1;
    if (*((_QWORD *)a4 + 3))
      goto LABEL_70;
    ParentRegion = (mlir::Block *)*((_QWORD *)*a1 + 2);
    if (a2 == 1)
    {
      if (ParentRegion)
        Parent = mlir::Block::getParent(ParentRegion);
      else
        Parent = 0;
LABEL_69:
      *((_QWORD *)a4 + 3) = Parent;
LABEL_70:
      v115.i64[0] = 1;
      v115.i64[1] = -4096;
      v116 = -4096;
      v117 = -4096;
      v118 = -4096;
      Context = mlir::Attribute::getContext((mlir::Operation *)((char *)*v10 + 24));
      v38 = (mlir::MLIRContext *)Context;
      if (v6)
        v39 = &v115;
      else
        v39 = 0;
      memset(v90, 0, sizeof(v90));
      v92 = 1;
      __b = off_1E0E19858;
      v89 = Context;
      v91 = &unk_1E0E19910;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      __p = operator new(0x200uLL);
      v94 = (char *)__p;
      v99 = 0;
      v100 = 0;
      v95 = (char *)__p + 512;
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v104 = 0;
      mlir::DialectInterfaceCollection<mlir::DialectFoldInterface>::DialectInterfaceCollection(v105, v38);
      v40 = a4[2];
      v41 = *a4;
      v107 = a4[1];
      v108 = v40;
      v105[10] = 0;
      v105[11] = 0;
      v105[9] = &v91;
      v105[7] = off_1E0E25938;
      v105[8] = v38;
      v106 = v41;
      v109 = 1;
      v110 = -4096;
      v111 = -4096;
      v112 = -4096;
      v113 = -4096;
      v42 = (uint64_t **)mlir::PatternApplicator::PatternApplicator((mlir::PatternApplicator *)v114, a3);
      mlir::PatternApplicator::applyCostModel(v42, llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>::callback_fn<mlir::PatternApplicator::applyDefaultCostModel(void)::{lambda(mlir::Pattern const&)#1}>, (uint64_t)&v87);
      v90[0] = &v91;
      __b = off_1E0E19C78;
      v91 = &unk_1E0E19D30;
      v114[8] = v39;
      if (*((_DWORD *)a4 + 8))
      {
        for (i = v10; i != &v10[a2]; ++i)
        {
          if ((v109 & 1) != 0)
          {
            v44 = 4;
            v45 = &v110;
          }
          else
          {
            v44 = v111;
            if (!(_DWORD)v111)
            {
              v50 = 0;
LABEL_82:
              llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((int *)&v109, v50, i);
              continue;
            }
            v45 = (uint64_t *)v110;
          }
          v46 = v44 - 1;
          v47 = ((*i >> 4) ^ (*i >> 9)) & v46;
          v48 = (int *)&v45[v47];
          v49 = *(_QWORD *)v48;
          if (*i != *(mlir::Operation **)v48)
          {
            v51 = 0;
            v52 = 1;
            while (v49 != -4096)
            {
              if (v51)
                v53 = 0;
              else
                v53 = v49 == -8192;
              if (v53)
                v51 = v48;
              v54 = v47 + v52++;
              v47 = v54 & v46;
              v48 = (int *)&v45[v47];
              v49 = *(_QWORD *)v48;
              if (*i == *(mlir::Operation **)v48)
                goto LABEL_77;
            }
            if (v51)
              v50 = v51;
            else
              v50 = v48;
            goto LABEL_82;
          }
LABEL_77:
          ;
        }
      }
      if (a6)
      {
        if (v115.i32[0] <= 1u && !v115.i32[1])
          goto LABEL_112;
        if ((v115.i8[0] & 1) != 0)
        {
          v56 = &v119;
          v57 = &v115.i64[1];
          v58 = 24;
        }
        else
        {
          v55 = v116;
          if (((2 * v115.i32[0]) & 0xFFFFFFFC) < v116 && v116 >= 0x41)
          {
            llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(&v115);
LABEL_112:
            v64 = v10;
            while (1)
            {
              if ((v39->i8[0] & 1) != 0)
              {
                v65 = 4;
                v66 = &v115.i64[1];
              }
              else
              {
                v65 = v116;
                if (!(_DWORD)v116)
                {
                  v71 = 0;
LABEL_120:
                  llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v39->i32, v71, v64);
                  goto LABEL_115;
                }
                v66 = (uint64_t *)v115.i64[1];
              }
              v67 = v65 - 1;
              v68 = ((*v64 >> 4) ^ (*v64 >> 9)) & v67;
              v69 = (int *)&v66[v68];
              v70 = *(_QWORD *)v69;
              if (*v64 != *(mlir::Operation **)v69)
              {
                v72 = 0;
                v73 = 1;
                while (v70 != -4096)
                {
                  if (v72)
                    v74 = 0;
                  else
                    v74 = v70 == -8192;
                  if (v74)
                    v72 = v69;
                  v75 = v68 + v73++;
                  v68 = v75 & v67;
                  v69 = (int *)&v66[v68];
                  v70 = *(_QWORD *)v69;
                  if (*v64 == *(mlir::Operation **)v69)
                    goto LABEL_115;
                }
                if (v72)
                  v71 = v72;
                else
                  v71 = v69;
                goto LABEL_120;
              }
LABEL_115:
              if (++v64 == &v10[a2])
                goto LABEL_133;
            }
          }
          if (!(_DWORD)v116)
          {
LABEL_111:
            v39->i32[0] = v55;
            v115.i32[1] = 0;
            goto LABEL_112;
          }
          v57 = (uint64_t *)v115.i64[1];
          v56 = (uint64_t *)(v115.i64[1] + 8 * v116);
          v58 = 8 * v116 - 8;
          if (v58 < 0x18)
          {
            v59 = (uint64_t *)v115.i64[1];
            do
LABEL_109:
              *v59++ = -4096;
            while (v59 != v56);
LABEL_110:
            v55 = v39->i32[0] & 1;
            goto LABEL_111;
          }
        }
        v60 = (v58 >> 3) + 1;
        v59 = &v57[v60 & 0x3FFFFFFFFFFFFFFCLL];
        v61 = (int64x2_t *)(v57 + 2);
        v62 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v61[-1] = v62;
          *v61 = v62;
          v61 += 2;
          v63 -= 4;
        }
        while (v63);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_110;
        goto LABEL_109;
      }
LABEL_133:
      v76 = 8 * a2;
      do
      {
        v77 = *v10++;
        v76 -= 8;
      }
      while (v76);
      if (a5)
        *a5 = v79;
      if (__p == v94)
      {
        if (a6)
LABEL_145:
          *a6 = v115.i32[0] < 2u;
      }
      else
      {
        v80 = (char *)__p + 8;
        do
        {
          if (*((_QWORD *)v80 - 1))
            v81 = 1;
          else
            v81 = v80 == v94;
          v80 += 8;
        }
        while (!v81);
        if (a6)
          goto LABEL_145;
      }
      __b = off_1E0E19858;
      v91 = &unk_1E0E19910;
      mlir::PatternApplicator::~PatternApplicator((mlir::PatternApplicator *)v114);
    }
    if (ParentRegion)
      ParentRegion = (mlir::Block *)mlir::Block::getParent(ParentRegion);
    v84 = a2 - 1;
    v13 = a2 + 62;
    v14 = (a2 + 62) >> 6;
    v15 = v90;
    __b = v90;
    HIDWORD(v89) = 6;
    v83 = a3;
    if ((a2 + 62) < 0x1C0)
    {
      if (v13 < 0x40)
      {
LABEL_17:
        LODWORD(v89) = (a2 + 62) >> 6;
        LODWORD(v94) = a2 - 1;
        if ((v84 & 0x3F) != 0)
          v15[v14 - 1] &= ~(-1 << (v84 & 0x3F));
        a3 = v83;
        if (ParentRegion)
        {
          if ((_DWORD)a2 == 1)
          {
            Parent = 0;
            while ((_DWORD)v89)
            {
              v35 = __b;
              v36 = 8 * v89;
              while (!*v35)
              {
                ++v35;
                v36 -= 8;
                if (!v36)
                  goto LABEL_65;
              }
              ParentRegion = mlir::Region::getParentRegion(ParentRegion);
              if (!ParentRegion)
                goto LABEL_66;
            }
          }
          else
          {
            v18 = (a2 - 2) >> 6;
            while (1)
            {
              v19 = 0;
              do
              {
                v20 = v19 >> 6;
                v21 = __b;
                if (v20 > v18)
                  goto LABEL_48;
                v22 = v19 & 0x3F;
                v53 = v22 == 0;
                v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
                if (v53)
                  v24 = -1;
                else
                  v24 = ~v23;
                if ((_DWORD)v20 == (_DWORD)v18)
                  v25 = 0xFFFFFFFFFFFFFFFFLL >> ~(a2 - 2);
                else
                  v25 = -1;
                v26 = v25 & v24 & *((_QWORD *)__b + v20);
                if (v26)
                {
                  v27 = __clz(__rbit64(v26));
                  v28 = v27 | ((_DWORD)v20 << 6);
                  if (v28 == -1)
                    goto LABEL_48;
                }
                else
                {
                  if (v20 + 1 == (_DWORD)v18 + 1)
                    goto LABEL_48;
                  v30 = 0;
                  while (1)
                  {
                    v31 = v30 == -1 ? v24 : -1;
                    v32 = v18 - v20 - 1 == v30 ? 0xFFFFFFFFFFFFFFFFLL >> ~(a2 - 2) : -1;
                    v33 = v31 & v32 & *((_QWORD *)__b + v20 + v30 + 1);
                    if (v33)
                      break;
                    if (v18 - v20 == ++v30)
                      goto LABEL_48;
                  }
                  LODWORD(v20) = v20 + v30 + 1;
                  v27 = __clz(__rbit64(v33));
                  v28 = v27 | ((_DWORD)v20 << 6);
                  if (v28 == -1)
                    goto LABEL_48;
                }
                v29 = ParentRegion;
                if (mlir::Region::findAncestorOpInRegion(ParentRegion, v10[v28 + 1]))
                  *((_QWORD *)__b + v20) &= ~(1 << v27);
                v19 = v28 + 1;
                ParentRegion = v29;
                a3 = v83;
              }
              while (v28 + 1 != v84);
              v21 = __b;
LABEL_48:
              if (!(_DWORD)v89)
                break;
              v34 = 8 * v89;
              while (!*v21)
              {
                ++v21;
                v34 -= 8;
                if (!v34)
                  goto LABEL_65;
              }
              ParentRegion = mlir::Region::getParentRegion(ParentRegion);
              Parent = 0;
              if (!ParentRegion)
                goto LABEL_66;
            }
          }
LABEL_65:
          Parent = (unint64_t)ParentRegion;
        }
        else
        {
          Parent = 0;
        }
LABEL_66:
        if (__b != v90)
          free(__b);
        v6 = a6;
        goto LABEL_69;
      }
      v17 = 8 * v14;
      v16 = ParentRegion;
    }
    else
    {
      LODWORD(v89) = 0;
      v16 = ParentRegion;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v90, v13 >> 6, 8);
      v15 = __b;
      v17 = 8 * v14;
    }
    memset(v15, 255, v17);
    ParentRegion = v16;
    goto LABEL_17;
  }
  if (a5)
    *a5 = 0;
  if (a6)
    *a6 = 1;
  return 1;
}

void `anonymous namespace'::MultiOpPatternRewriteDriver::~MultiOpPatternRewriteDriver(_anonymous_namespace_::MultiOpPatternRewriteDriver *this)
{
  *(_QWORD *)this = off_1E0E19858;
  *((_QWORD *)this + 5) = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::MultiOpPatternRewriteDriver *)((char *)this + 336));
}

{
  *(_QWORD *)this = off_1E0E19858;
  *((_QWORD *)this + 5) = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::MultiOpPatternRewriteDriver *)((char *)this + 336));
}

void sub_18071CAF0()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_18071CB14()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_18071CB28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  void *v13;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

void sub_18071CB74()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_18071CB98()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_18071CBAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  void *v13;
  void *v14;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v14);
}

uint64_t mlir::PatternRewriter::canRecoverFromRewriteFailure(mlir::PatternRewriter *this)
{
  return 0;
}

void `anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationModified(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 36);
  if (v4)
    (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v4 + 32))(v4, a2);
}

void `anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationInserted(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  mlir::Operation *v2;
  uint64_t v4;
  int v5;
  char *v6;
  int v7;
  unsigned int v8;
  int *v9;
  mlir::Operation *v10;
  int *v11;
  int *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  mlir::Operation *v16;

  v2 = a2;
  v16 = a2;
  v4 = *((_QWORD *)this + 36);
  if (v4)
    (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v4 + 16))(v4, a2);
  if (*((_DWORD *)this + 70) == 1)
  {
    if ((*((_BYTE *)this + 296) & 1) != 0)
    {
      v6 = (char *)this + 304;
      v5 = 4;
    }
    else
    {
      v5 = *((_DWORD *)this + 78);
      if (!v5)
      {
        v11 = 0;
        goto LABEL_11;
      }
      v6 = (char *)*((_QWORD *)this + 38);
    }
    v7 = v5 - 1;
    v8 = ((v2 >> 4) ^ (v2 >> 9)) & v7;
    v9 = (int *)&v6[8 * v8];
    v10 = *(mlir::Operation **)v9;
    if (*(mlir::Operation **)v9 == v2)
      goto LABEL_9;
    v12 = 0;
    v13 = 1;
    while (v10 != (mlir::Operation *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v10 == (mlir::Operation *)-8192;
      if (v14)
        v12 = v9;
      v15 = v8 + v13++;
      v8 = v15 & v7;
      v9 = (int *)&v6[8 * v8];
      v10 = *(mlir::Operation **)v9;
      if (*(mlir::Operation **)v9 == v2)
        goto LABEL_9;
    }
    if (v12)
      v11 = v12;
    else
      v11 = v9;
LABEL_11:
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((int *)this + 74, v11, &v16);
    v2 = v16;
  }
LABEL_9:
}

void `anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationRemoved(int32x2_t *this, mlir::Operation *a2)
{
  int32x2_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  mlir::Operation *DefiningOp;
  int32x2_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  mlir::Operation *v16;
  int v17;
  int v18;
  int v19;
  int32x2_t *v20;
  int v21;
  uint64_t v22;
  mlir::Operation **v23;
  mlir::Operation *v24;
  int v25;
  int v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = this[36];
  if (v4)
    (*(void (**)(int32x2_t, mlir::Operation *))(**(_QWORD **)&v4 + 56))(v4, a2);
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    mlir::ValueRange::ValueRange(&v28, *((_QWORD *)a2 + 9), *((unsigned int *)a2 + 17));
    v5 = v28;
    v6 = v29;
    v30 = v28;
    v31 = 0;
    if (!v29)
      goto LABEL_16;
  }
  else
  {
    mlir::ValueRange::ValueRange(&v28, 0, 0);
    v5 = v28;
    v6 = v29;
    v30 = v28;
    v31 = 0;
    if (!v29)
      goto LABEL_16;
  }
  v7 = 0;
  do
  {
    v9 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v30, v7);
    v27 = v9;
    if (v9 && (!*v9 || !*(_QWORD *)*v9))
    {
      DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
      if (DefiningOp)
    }
    v7 = ++v31;
  }
  while (v30 != v5 || v7 != v6);
LABEL_16:
  v11 = this[10];
  v12 = this[12].u32[0];
  v13 = a2 >> 4;
  if ((_DWORD)v12)
  {
    LODWORD(v14) = (v12 - 1) & (v13 ^ (a2 >> 9));
    v15 = *(_QWORD *)&v11 + 16 * v14;
    v16 = *(mlir::Operation **)v15;
    if (*(mlir::Operation **)v15 == a2)
      goto LABEL_23;
    v17 = 1;
    while (v16 != (mlir::Operation *)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v12 - 1);
      v16 = *(mlir::Operation **)(*(_QWORD *)&v11 + 16 * v14);
      if (v16 == a2)
      {
        v15 = *(_QWORD *)&v11 + 16 * v14;
        goto LABEL_23;
      }
    }
  }
  v15 = *(_QWORD *)&v11 + 16 * v12;
LABEL_23:
  if (v15 != *(_QWORD *)&v11 + 16 * v12)
  {
    *(_QWORD *)(*(_QWORD *)&this[7] + 8 * *(unsigned int *)(v15 + 8)) = 0;
    *(_QWORD *)v15 = -8192;
    this[11] = vadd_s32(this[11], (int32x2_t)0x1FFFFFFFFLL);
  }
  mlir::OperationFolder::notifyRemoval(this + 13, a2);
  if (this[35].i32[0])
  {
    if ((this[37].i8[0] & 1) != 0)
    {
      v20 = this + 38;
      v19 = 4;
    }
    else
    {
      v19 = this[39].i32[0];
      if (!v19)
        return;
      v20 = (int32x2_t *)this[38];
    }
    v21 = v19 - 1;
    LODWORD(v22) = (v19 - 1) & (v13 ^ (a2 >> 9));
    v23 = (mlir::Operation **)&v20[v22];
    v24 = *v23;
    if (*v23 == a2)
    {
LABEL_31:
      *v23 = (mlir::Operation *)-8192;
      this[37].i32[0] -= 2;
      ++this[37].i32[1];
    }
    else
    {
      v25 = 1;
      while (v24 != (mlir::Operation *)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & v21;
        v24 = (mlir::Operation *)v20[v22];
        if (v24 == a2)
        {
          v23 = (mlir::Operation **)&v20[v22];
          goto LABEL_31;
        }
      }
    }
  }
}

void `anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationReplaced(_anonymous_namespace_::GreedyPatternRewriteDriver *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *j;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  mlir::Block *v12;
  unint64_t Parent;
  mlir::Operation **v14;
  uint64_t v15;
  mlir::Operation *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 36);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
  v5 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v5)
    v6 = a2 - 16;
  else
    v6 = 0;
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      for (j = *(_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v6, i); j; j = (_QWORD *)*j)
      {
        v9 = j[2];
        v17 = v19;
        v18 = 0x800000000;
        while (1)
        {
          v10 = v18;
          if (v18 >= (unint64_t)HIDWORD(v18))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v18 + 1, 8);
            v10 = v18;
          }
          *((_QWORD *)v17 + v10) = v9;
          v11 = v18 + 1;
          LODWORD(v18) = v18 + 1;
          v12 = *(mlir::Block **)(v9 + 16);
          if (!v12)
            break;
          Parent = mlir::Block::getParent(v12);
          if (*((_QWORD *)a1 + 34) == Parent)
          {
            v11 = v18;
            if (!(_DWORD)v18)
              goto LABEL_26;
            goto LABEL_24;
          }
          if (Parent)
          {
            v9 = *(_QWORD *)(Parent + 16);
            if (v9)
              continue;
          }
          goto LABEL_26;
        }
        if (!*((_QWORD *)a1 + 34) && v11)
        {
LABEL_24:
          v14 = (mlir::Operation **)v17;
          v15 = 8 * v11;
          do
          {
            v16 = *v14++;
            v15 -= 8;
          }
          while (v15);
        }
LABEL_26:
        if (v17 != v19)
          free(v17);
      }
    }
  }
}

uint64_t `anonymous namespace'::GreedyPatternRewriteDriver::notifyBlockCreated(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Block *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 36);
  if (result)
    return (*(uint64_t (**)(uint64_t, mlir::Block *))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

uint64_t `anonymous namespace'::GreedyPatternRewriteDriver::notifyMatchFailure(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 288);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

void `non-virtual thunk to'`anonymous namespace'::RegionPatternRewriteDriver::~RegionPatternRewriteDriver(_anonymous_namespace_::RegionPatternRewriteDriver *this)
{
  *((_QWORD *)this - 5) = off_1E0E19858;
  *(_QWORD *)this = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::RegionPatternRewriteDriver *)((char *)this + 296));
}

{
  *((_QWORD *)this - 5) = off_1E0E19858;
  *(_QWORD *)this = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::RegionPatternRewriteDriver *)((char *)this + 296));
}

void sub_18071D15C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_18071D180()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_18071D194(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  void *v14;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

void sub_18071D1E4()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_18071D208()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_18071D21C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v15);
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationInserted(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
}

uint64_t `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyBlockCreated(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Block *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 31);
  if (result)
    return (*(uint64_t (**)(uint64_t, mlir::Block *))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationModified(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 31);
  if (v4)
    (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v4 + 32))(v4, a2);
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationReplaced(uint64_t a1, uint64_t a2)
{
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationRemoved(int32x2_t *this, mlir::Operation *a2)
{
}

uint64_t `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyMatchFailure(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 248);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

void `anonymous namespace'::GreedyPatternRewriteDriver::~GreedyPatternRewriteDriver(_anonymous_namespace_::GreedyPatternRewriteDriver *this)
{
  *(_QWORD *)this = off_1E0E19858;
  *((_QWORD *)this + 5) = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 336));
}

{
  *(_QWORD *)this = off_1E0E19858;
  *((_QWORD *)this + 5) = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 336));
}

void sub_18071D2F4()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_18071D318()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_18071D32C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  void *v13;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

void sub_18071D378()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_18071D39C()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_18071D3B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  void *v13;
  void *v14;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v14);
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::~GreedyPatternRewriteDriver(_anonymous_namespace_::GreedyPatternRewriteDriver *this)
{
  *((_QWORD *)this - 5) = off_1E0E19858;
  *(_QWORD *)this = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 296));
}

{
  *((_QWORD *)this - 5) = off_1E0E19858;
  *(_QWORD *)this = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 296));
}

void sub_18071D404()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_18071D428()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_18071D43C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  void *v14;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

void sub_18071D48C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_18071D4B0()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_18071D4C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v15);
}

uint64_t mlir::DialectInterfaceCollection<mlir::DialectFoldInterface>::DialectInterfaceCollection(_QWORD *a1, mlir::MLIRContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v4 & 1) == 0
  {
    v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
    v15 = 76;
    v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
    if (v15 >= v7)
      v8 = v7;
    else
      v8 = v15;
    v9 = &v14[v8];
    v10 = v15 - v8;
    if (v15 - v8 >= 0x12)
      v11 = 18;
    else
      v11 = v15 - v8;
    v12 = v10 - v11;
    if (v12 >= v12 - 1)
      v13 = v12 - 1;
    else
      v13 = v12;
    mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id;
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
  v15 = 76;
  llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  result = mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase((uint64_t)a1, a2, v5);
  *a1 = off_1E0E47DD0;
  return result;
}

uint64_t llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>::callback_fn<mlir::PatternApplicator::applyDefaultCostModel(void)::{lambda(mlir::Pattern const&)#1}>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 12);
}

int *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::RegionPatternRewriteDriver::RegionPatternRewriteDriver(mlir::MLIRContext *,mlir::FrozenRewritePatternSet const&,mlir::GreedyRewriteConfig const&,mlir::Region &)::$_0>(int *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;

  v2 = *(_QWORD *)result;
  v14 = a2;
  if ((*(_BYTE *)(v2 + 296) & 1) != 0)
  {
    v4 = v2 + 304;
    v3 = 4;
  }
  else
  {
    v3 = *(_DWORD *)(v2 + 312);
    if (!v3)
    {
      v9 = 0;
      return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((int *)(v2 + 296), v9, &v14);
    }
    v4 = *(_QWORD *)(v2 + 304);
  }
  v5 = v3 - 1;
  v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (int *)(v4 + 8 * v6);
  v8 = *(_QWORD *)v7;
  if (*(_QWORD *)v7 != a2)
  {
    v10 = 0;
    v11 = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (int *)(v4 + 8 * v6);
      v8 = *(_QWORD *)v7;
      if (*(_QWORD *)v7 == a2)
        return result;
    }
    if (v10)
      v9 = v10;
    else
      v9 = v7;
    return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((int *)(v2 + 296), v9, &v14);
  }
  return result;
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(int *a1, int *a2, _QWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int *v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *a1;
  v7 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v8 = 4;
  else
    v8 = a1[4];
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - a1[1] > v8 >> 3)
  {
    v9 = *a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::grow(a1, v8);
  v11 = a1 + 2;
  v6 = *a1;
  if ((*a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = a1[4];
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = (int *)*((_QWORD *)a1 + 1);
  }
  v9 = *a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = &v11[2 * v14];
  v15 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = &v11[2 * (v19 & v13)];
      v15 = *(_QWORD *)a2;
      if (*a3 == *(_QWORD *)a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(_QWORD *)a2 != -4096)
    --a1[1];
  *(_QWORD *)a2 = *a3;
  return a2;
}

_QWORD *llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::grow(_QWORD *result, unsigned int a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  _QWORD *v8;
  uint64_t v9;
  llvm *v10;
  int64x2_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int64x2_t *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t *buffer;
  int v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  int64x2_t *v28;
  int64x2_t v29;
  uint64_t v30;
  llvm *v31;
  _QWORD *v32;
  int v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  int64x2_t *v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64x2_t *v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD v60[4];

  v2 = a2;
  v3 = result;
  v60[3] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v8 = result + 1;
    v7 = (llvm *)result[1];
    v9 = *((unsigned int *)result + 4);
    if (v2 > 4)
    {
      buffer = (int64x2_t *)llvm::allocate_buffer(8 * v2, (std::align_val_t)8uLL);
      v3[1] = buffer;
      v3[2] = v2;
      v23 = *(_DWORD *)v3;
      v10 = (llvm *)((char *)v7 + 8 * v9);
      *v3 = *(_DWORD *)v3 & 1;
      if ((v23 & 1) == 0)
      {
        v24 = &buffer->i8[8 * v2];
        v25 = 8 * v2 - 8;
        if (v25 < 0x18)
        {
          v27 = (char *)buffer;
          goto LABEL_24;
        }
LABEL_18:
        v26 = (v25 >> 3) + 1;
        v27 = &buffer->i8[8 * (v26 & 0x3FFFFFFFFFFFFFFCLL)];
        v28 = buffer + 1;
        v29 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28[-1] = v29;
          *v28 = v29;
          v28 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_25:
          if ((_DWORD)v9)
          {
            v31 = v7;
            do
            {
              v38 = *(_QWORD *)v31;
              if ((*(_QWORD *)v31 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if ((*(_BYTE *)v3 & 1) != 0)
                {
                  v33 = 4;
                  v32 = v3 + 1;
                }
                else
                {
                  v32 = (_QWORD *)*v8;
                  v33 = v2;
                }
                v34 = v33 - 1;
                v35 = (v33 - 1) & ((v38 >> 4) ^ (v38 >> 9));
                v36 = &v32[v35];
                v37 = *v36;
                if (v38 != *v36)
                {
                  v39 = 0;
                  v40 = 1;
                  while (v37 != -4096)
                  {
                    if (v39)
                      v41 = 0;
                    else
                      v41 = v37 == -8192;
                    if (v41)
                      v39 = v36;
                    v42 = v35 + v40++;
                    v35 = v42 & v34;
                    v36 = &v32[v42 & v34];
                    v37 = *v36;
                    if (v38 == *v36)
                      goto LABEL_29;
                  }
                  if (v39)
                    v36 = v39;
                }
LABEL_29:
                *v36 = v38;
                *(_DWORD *)v3 += 2;
              }
              v31 = (llvm *)((char *)v31 + 8);
            }
            while (v31 != v10);
          }
          llvm::deallocate_buffer(v7, (void *)(8 * v9));
        }
        do
        {
LABEL_24:
          *(_QWORD *)v27 = -4096;
          v27 += 8;
        }
        while (v27 != v24);
        goto LABEL_25;
      }
    }
    else
    {
      v10 = (llvm *)((char *)v7 + 8 * v9);
      *result = 1;
      v2 = v9;
    }
    v24 = (char *)(v3 + 5);
    buffer = (int64x2_t *)(v3 + 1);
    v25 = 24;
    goto LABEL_18;
  }
  v11 = (int64x2_t **)(result + 1);
  v12 = &v59;
  if ((result[1] | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v13 = result[2];
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v59 = result[1];
    v12 = v60;
    v13 = result[2];
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v14 = result[3];
      if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_49;
    }
  }
  *v12++ = v13;
  v14 = result[3];
  if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v15 = result[4];
    if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  *v12++ = v14;
  v15 = result[4];
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    v16 = *(_DWORD *)result;
    if (v2 >= 5)
      goto LABEL_13;
LABEL_51:
    v2 = v13;
    *result = v16 & 1;
    if ((v16 & 1) != 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_50:
  *v12++ = v15;
  v16 = *(_DWORD *)result;
  if (v2 < 5)
    goto LABEL_51;
LABEL_13:
  *(_DWORD *)result = v16 & 0xFFFFFFFE;
  result = llvm::allocate_buffer(8 * v2, (std::align_val_t)8uLL);
  v3[1] = result;
  v3[2] = v2;
  v17 = *(_DWORD *)v3;
  *v3 = *(_DWORD *)v3 & 1;
  if ((v17 & 1) != 0)
  {
LABEL_14:
    v18 = (uint64_t)(v3 + 5);
    v19 = (int64x2_t *)(v3 + 1);
    v20 = 24;
    goto LABEL_54;
  }
LABEL_52:
  if (!v2)
    goto LABEL_58;
  v19 = *v11;
  v18 = (uint64_t)&(*v11)->i64[v2];
  v20 = 8 * v2 - 8;
  if (v20 < 0x18)
  {
    v21 = *v11;
    do
    {
LABEL_57:
      v21->i64[0] = -4096;
      v21 = (int64x2_t *)((char *)v21 + 8);
    }
    while (v21 != (int64x2_t *)v18);
    goto LABEL_58;
  }
LABEL_54:
  v43 = (v20 >> 3) + 1;
  v21 = (int64x2_t *)((char *)v19 + 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL));
  v44 = v19 + 1;
  v45 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v44[-1] = v45;
    *v44 = v45;
    v44 += 2;
    v46 -= 4;
  }
  while (v46);
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_57;
LABEL_58:
  if (&v59 != v12)
  {
    v47 = &v59;
    do
    {
      v54 = *v47;
      if ((*v47 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((*(_BYTE *)v3 & 1) != 0)
        {
          v49 = 4;
          v48 = (int64x2_t *)(v3 + 1);
        }
        else
        {
          v48 = *v11;
          v49 = v2;
        }
        v50 = v49 - 1;
        v51 = (v49 - 1) & ((v54 >> 4) ^ (v54 >> 9));
        v52 = &v48->i64[v51];
        v53 = *v52;
        if (v54 != *v52)
        {
          v55 = 0;
          v56 = 1;
          while (v53 != -4096)
          {
            if (v55)
              v57 = 0;
            else
              v57 = v53 == -8192;
            if (v57)
              v55 = v52;
            v58 = v51 + v56++;
            v51 = v58 & v50;
            v52 = &v48->i64[v58 & v50];
            v53 = *v52;
            if (v54 == *v52)
              goto LABEL_62;
          }
          if (v55)
            v52 = v55;
        }
LABEL_62:
        *v52 = v54;
        *(_DWORD *)v3 += 2;
      }
      ++v47;
    }
    while (v47 != v12);
  }
  return result;
}

void `anonymous namespace'::GreedyPatternRewriteDriver::addToWorklist(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  uint64_t v4;
  unsigned int v5;
  mlir::Block *v6;
  unint64_t Parent;
  mlir::Operation **v8;
  uint64_t v9;
  mlir::Operation *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x800000000;
  while (1)
  {
    v4 = v12;
    if (v12 >= (unint64_t)HIDWORD(v12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, v12 + 1, 8);
      v4 = v12;
    }
    *((_QWORD *)v11 + v4) = a2;
    v5 = v12 + 1;
    LODWORD(v12) = v12 + 1;
    v6 = (mlir::Block *)*((_QWORD *)a2 + 2);
    if (!v6)
      break;
    Parent = mlir::Block::getParent(v6);
    if (*((_QWORD *)this + 34) == Parent)
    {
      v5 = v12;
      if (!(_DWORD)v12)
        goto LABEL_15;
      goto LABEL_13;
    }
    if (Parent)
    {
      a2 = *(mlir::Operation **)(Parent + 16);
      if (a2)
        continue;
    }
    goto LABEL_15;
  }
  if (!*((_QWORD *)this + 34) && v5)
  {
LABEL_13:
    v8 = (mlir::Operation **)v11;
    v9 = 8 * v5;
    do
    {
      v10 = *v8++;
      v9 -= 8;
    }
    while (v9);
  }
LABEL_15:
  if (v11 != v13)
    free(v11);
}

void `anonymous namespace'::GreedyPatternRewriteDriver::addSingleOpToWorklist(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  int v4;
  char *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _anonymous_namespace_::GreedyPatternRewriteDriver *v11;
  mlir::Operation *v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  mlir::Operation *v21;
  int v22;
  mlir::Operation *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t v27;
  mlir::Operation *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  mlir::Operation *v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  unsigned int v62;

  if (!*((_DWORD *)this + 70))
    goto LABEL_21;
  v4 = *((_DWORD *)this + 74);
  if ((v4 & 1) != 0)
  {
    v5 = (char *)this + 304;
    v6 = 4;
LABEL_8:
    v9 = v6 - 1;
    LODWORD(v10) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v11 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v5[8 * v10];
    v12 = *(mlir::Operation **)v11;
    if (*(mlir::Operation **)v11 == a2)
    {
      if ((v4 & 1) == 0)
      {
LABEL_10:
        if (v11 == (_anonymous_namespace_::GreedyPatternRewriteDriver *)(*((_QWORD *)this + 38)
                                                                        + 8 * *((unsigned int *)this + 78)))
          return;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = 1;
      while (v12 != (mlir::Operation *)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & v9;
        v12 = *(mlir::Operation **)&v5[8 * v10];
        if (v12 == a2)
        {
          v11 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v5[8 * v10];
          if ((v4 & 1) == 0)
            goto LABEL_10;
          goto LABEL_20;
        }
      }
      if ((v4 & 1) == 0)
      {
        v5 = (char *)*((_QWORD *)this + 38);
        v7 = *((_DWORD *)this + 78);
        v8 = v7;
        goto LABEL_5;
      }
      v11 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 336);
    }
LABEL_20:
    if (v11 == (_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 336))
      return;
LABEL_21:
    v15 = (char *)this + 80;
    v16 = *((_QWORD *)this + 10);
    v17 = *((_DWORD *)this + 24);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v20 = v16 + 16 * v19;
      v21 = *(mlir::Operation **)v20;
      if (*(mlir::Operation **)v20 == a2)
        return;
      v22 = 1;
      v23 = *(mlir::Operation **)v20;
      v24 = v18 & ((a2 >> 4) ^ (a2 >> 9));
      while (v23 != (mlir::Operation *)-4096)
      {
        v25 = v24 + v22++;
        v24 = v25 & v18;
        v23 = *(mlir::Operation **)(v16 + 16 * v24);
        if (v23 == a2)
          return;
      }
      v50 = 0;
      v26 = (uint64_t *)((char *)this + 64);
      v29 = (char *)*((_QWORD *)this + 8);
      v27 = (unint64_t)&v29[-*((_QWORD *)this + 7)] >> 3;
      v51 = 1;
      while (v21 != (mlir::Operation *)-4096)
      {
        if (v50)
          v52 = 0;
        else
          v52 = v21 == (mlir::Operation *)-8192;
        if (v52)
          v50 = v20;
        v53 = v19 + v51++;
        v19 = v53 & v18;
        v20 = v16 + 16 * (v53 & v18);
        v21 = *(mlir::Operation **)v20;
        if (*(mlir::Operation **)v20 == a2)
          goto LABEL_32;
      }
      if (v50)
        v20 = v50;
      v54 = *((_DWORD *)this + 22);
      if (4 * v54 + 4 < 3 * v17)
      {
        if (v17 + ~v54 - *((_DWORD *)this + 23) > v17 >> 3)
          goto LABEL_29;
        goto LABEL_70;
      }
    }
    else
    {
      v26 = (uint64_t *)((char *)this + 64);
      v27 = (*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
    }
    v17 *= 2;
LABEL_70:
    llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)v15, v17);
    v55 = *((_QWORD *)this + 10);
    v56 = *((_DWORD *)this + 24) - 1;
    v57 = v56 & ((a2 >> 4) ^ (a2 >> 9));
    v20 = v55 + 16 * v57;
    v58 = *(mlir::Operation **)v20;
    if (*(mlir::Operation **)v20 == a2)
    {
LABEL_71:
      ++*((_DWORD *)this + 22);
      if (a2 == (mlir::Operation *)-4096)
        goto LABEL_31;
      goto LABEL_30;
    }
    v59 = 0;
    v60 = 1;
    while (v58 != (mlir::Operation *)-4096)
    {
      if (v59)
        v61 = 0;
      else
        v61 = v58 == (mlir::Operation *)-8192;
      if (v61)
        v59 = v20;
      v62 = v57 + v60++;
      v57 = v62 & v56;
      v20 = v55 + 16 * (v62 & v56);
      v58 = *(mlir::Operation **)v20;
      if (*(mlir::Operation **)v20 == a2)
        goto LABEL_71;
    }
    if (v59)
      v20 = v59;
LABEL_29:
    v28 = *(mlir::Operation **)v20;
    ++*((_DWORD *)this + 22);
    if (v28 == (mlir::Operation *)-4096)
    {
LABEL_31:
      *(_QWORD *)v20 = a2;
      *(_DWORD *)(v20 + 8) = 0;
      v29 = (char *)*v26;
LABEL_32:
      *(_DWORD *)(v20 + 8) = v27;
      v30 = *((_QWORD *)this + 9);
      if ((unint64_t)v29 < v30)
      {
        *(_QWORD *)v29 = a2;
        v31 = (uint64_t)(v29 + 8);
LABEL_56:
        *v26 = v31;
        return;
      }
      v32 = (char *)*((_QWORD *)this + 7);
      v33 = (v29 - v32) >> 3;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
        abort();
      v35 = v30 - (_QWORD)v32;
      if (v35 >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        if (v36 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v37 = (char *)operator new(8 * v36);
        v38 = &v37[8 * v33];
        v39 = &v37[8 * v36];
        *(_QWORD *)v38 = a2;
        v31 = (uint64_t)(v38 + 8);
        v40 = (char *)(v29 - v32);
        if (v29 == v32)
          goto LABEL_54;
      }
      else
      {
        v37 = 0;
        v38 = (char *)(8 * v33);
        v39 = 0;
        *(_QWORD *)(8 * v33) = a2;
        v31 = 8 * v33 + 8;
        v40 = (char *)(v29 - v32);
        if (v29 == v32)
          goto LABEL_54;
      }
      v41 = (unint64_t)(v40 - 8);
      if (v41 >= 0x58)
      {
        if ((unint64_t)(v32 - v37) >= 0x20)
        {
          v43 = (v41 >> 3) + 1;
          v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
          v42 = &v29[-v44];
          v38 -= v44;
          v45 = &v37[8 * v33 - 16];
          v46 = v29 - 16;
          v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
            *(_OWORD *)v45 = v48;
            v45 -= 32;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_53;
        }
        else
        {
          v42 = v29;
        }
      }
      else
      {
        v42 = v29;
      }
      do
      {
        v49 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v38 - 1) = v49;
        v38 -= 8;
      }
      while (v42 != v32);
LABEL_53:
      v29 = (char *)*((_QWORD *)this + 7);
LABEL_54:
      *((_QWORD *)this + 7) = v38;
      *((_QWORD *)this + 8) = v31;
      *((_QWORD *)this + 9) = v39;
      if (v29)
        operator delete(v29);
      goto LABEL_56;
    }
LABEL_30:
    --*((_DWORD *)this + 23);
    goto LABEL_31;
  }
  v5 = (char *)*((_QWORD *)this + 38);
  v6 = *((_DWORD *)this + 78);
  if (v6)
    goto LABEL_8;
  v7 = 0;
  v8 = 0;
LABEL_5:
  if (&v5[8 * v8] != &v5[8 * v7])
    goto LABEL_21;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::RegionPatternRewriteDriver::simplify(BOOL *)::$_0>(uint64_t a1, mlir::Operation *a2)
{
  _anonymous_namespace_::GreedyPatternRewriteDriver *v3;
  int32x2_t *v4;
  unint64_t v5;
  void *v6[2];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_anonymous_namespace_::GreedyPatternRewriteDriver **)(a1 + 8);
  v4 = **(int32x2_t ***)a1;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)a2 + 6))
    goto LABEL_6;
  v6[0] = v7;
  v6[1] = (void *)0x100000000;
  mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)v6);
  v5 = *(_QWORD *)v6[0] & 0xFFFFFFFFFFFFFFF8;
  if (v6[0] != v7)
    free(v6[0]);
  if (!v5 || mlir::OperationFolder::insertKnownConstant(v4 + 13, (uint64_t)a2, v5))
LABEL_6:
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::RegionPatternRewriteDriver::simplify(BOOL *)::$_1>(uint64_t a1, mlir::Operation *a2)
{
  _anonymous_namespace_::GreedyPatternRewriteDriver *v3;
  int32x2_t *v4;
  unint64_t v5;
  void *v7[2];
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_anonymous_namespace_::GreedyPatternRewriteDriver **)(a1 + 8);
  v4 = **(int32x2_t ***)a1;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)a2 + 6))
  {
    v7[0] = v8;
    v7[1] = (void *)0x100000000;
    mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)v7);
    v5 = *(_QWORD *)v7[0] & 0xFFFFFFFFFFFFFFF8;
    if (v7[0] != v8)
      free(v7[0]);
    if (v5 && !mlir::OperationFolder::insertKnownConstant(v4 + 13, (uint64_t)a2, v5))
      return 2;
  }
  return 1;
}

uint64_t mlir::MLIRContext::executeActionInternal<`anonymous namespace'::GreedyPatternRewriteIteration,long long &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[5];

  v7[2] = a4;
  v7[3] = a5;
  v7[0] = off_1E0E19EE0;
  v7[4] = a6;
  return mlir::MLIRContext::executeActionInternal(a1, a2, a3, (uint64_t)v7);
}

const char *mlir::tracing::ActionImpl<`anonymous namespace'::GreedyPatternRewriteIteration>::getTag()
{
  return "GreedyPatternRewriteIteration";
}

llvm::raw_ostream *`anonymous namespace'::GreedyPatternRewriteIteration::print(_anonymous_namespace_::GreedyPatternRewriteIteration *this, llvm::raw_ostream *a2)
{
  void *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;

  v3 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v3 > 0x1DuLL)
  {
    qmemcpy(v3, "GreedyPatternRewriteIteration(", 30);
    *((_QWORD *)a2 + 4) += 30;
    result = llvm::raw_ostream::operator<<(a2, *((_QWORD *)this + 4));
    v6 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) != v6)
      goto LABEL_3;
  }
  else
  {
    v4 = llvm::raw_ostream::write(a2, "GreedyPatternRewriteIteration(", 0x1EuLL);
    result = llvm::raw_ostream::operator<<(v4, *((_QWORD *)this + 4));
    v6 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) != v6)
    {
LABEL_3:
      *v6 = 41;
      ++*((_QWORD *)result + 4);
      return result;
    }
  }
  return llvm::raw_ostream::write(result, ")", 1uLL);
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<`anonymous namespace'::RegionPatternRewriteDriver::simplify(BOOL *)::$_2>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  **(_BYTE **)a1 = result;
  if (*(_BYTE *)(v3 + 249))
    mlir::simplifyRegions(v3, *(_QWORD **)(v3 + 400), 1uLL);
  return result;
}

uint64_t `anonymous namespace'::GreedyPatternRewriteDriver::processWorklist(int32x2_t *this, mlir::Operation *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char v5;
  uint64_t v6;
  int32x2_t *v7;
  int32x2_t *v8;
  _QWORD *v9;
  int32x2_t v10;
  BOOL v11;
  int32x2_t v12;
  mlir::Operation *v13;
  mlir::Operation *v14;
  mlir::Operation *v15;
  __int32 v16;
  int32x2_t v17;
  __int32 v18;
  uint64_t v19;
  mlir::Operation **v20;
  mlir::Operation *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;

  v2 = (_QWORD *)this[7];
  v3 = (_QWORD *)this[8];
  if (v2 == v3)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = this + 13;
    v8 = this + 42;
    while (1)
    {
      v9 = v2;
      while (!*v9)
      {
        if (++v9 == v3)
          return v5 & 1;
      }
      v10 = this[33];
      v11 = v6 < *(_QWORD *)&v10 || *(_QWORD *)&v10 == -1;
      if (!v11)
        break;
      v14 = (mlir::Operation *)*(v3 - 1);
      v12 = (int32x2_t)(v3 - 1);
      v13 = v14;
      if (!v14)
      {
        do
        {
          this[8] = v12;
          v15 = *(mlir::Operation **)(*(_QWORD *)&v12 - 8);
          *(_QWORD *)&v12 -= 8;
          v13 = v15;
        }
        while (!v15);
      }
      this[8] = v12;
      v16 = this[12].i32[0];
      if (v16)
      {
        v17 = this[10];
        v18 = v16 - 1;
        LODWORD(v19) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        v20 = (mlir::Operation **)(*(_QWORD *)&v17 + 16 * v19);
        v21 = *v20;
        if (v13 == *v20)
        {
LABEL_16:
          *v20 = (mlir::Operation *)-8192;
          this[11] = vadd_s32(this[11], (int32x2_t)0x1FFFFFFFFLL);
          v2 = (_QWORD *)this[7];
          v12 = this[8];
        }
        else
        {
          v25 = 1;
          while (v21 != (mlir::Operation *)-4096)
          {
            v26 = v19 + v25++;
            v19 = v26 & v18;
            v21 = *(mlir::Operation **)(*(_QWORD *)&v17 + 16 * v19);
            if (v13 == v21)
            {
              v20 = (mlir::Operation **)(*(_QWORD *)&v17 + 16 * v19);
              goto LABEL_16;
            }
          }
        }
      }
      if (v2 != *(_QWORD **)&v12)
      {
        v22 = (_QWORD *)(*(_QWORD *)&v12 - 8);
        do
        {
          if (*v22)
            break;
          this[8] = (int32x2_t)v22;
          v11 = v22-- == v2;
        }
        while (!v11);
      }
      if (mlir::isOpTriviallyDead((void ***)v13, a2))
      {
        (*(void (**)(int32x2_t *, mlir::Operation *))(*(_QWORD *)this + 40))(this, v13);
        v5 = 1;
        v2 = (_QWORD *)this[7];
        v3 = (_QWORD *)this[8];
        if (v2 == v3)
          return v5 & 1;
      }
      else if (mlir::OperationFolder::tryToFold(v7, v13, 0))
      {
        v5 = 1;
        v2 = (_QWORD *)this[7];
        v3 = (_QWORD *)this[8];
        if (v2 == v3)
          return v5 & 1;
      }
      else
      {
        v24 = mlir::PatternApplicator::matchAndRewrite((uint64_t)v8, (uint64_t)v13, (uint64_t)this, 0, 0, 0, 0, v23, 0, 0);
        if (v24)
          ++v6;
        v5 |= v24 != 0;
        v2 = (_QWORD *)this[7];
        v3 = (_QWORD *)this[8];
        if (v2 == v3)
          return v5 & 1;
      }
    }
  }
  return v5 & 1;
}

void sub_18071E7C8()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_18071E7EC()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_18071E800(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  void *v13;
  void *v14;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v14);
}

void `anonymous namespace'::MultiOpPatternRewriteDriver::notifyOperationRemoved(int32x2_t *this, mlir::Operation *a2)
{
  int32x2_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  mlir::Operation **v9;
  mlir::Operation *v10;
  int v11;
  int v12;
  int v13;

  v4 = this[50];
  if (v4)
  {
    v5 = *(_QWORD *)&v4 + 8;
    if ((**(_BYTE **)&v4 & 1) != 0)
    {
      v6 = 4;
    }
    else
    {
      v6 = *(_DWORD *)(*(_QWORD *)&v4 + 16);
      if (!v6)
        return;
      v5 = *(_QWORD *)(*(_QWORD *)&v4 + 8);
    }
    v7 = v6 - 1;
    LODWORD(v8) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (mlir::Operation **)(v5 + 8 * v8);
    v10 = *v9;
    if (*v9 == a2)
    {
LABEL_7:
      *v9 = (mlir::Operation *)-8192;
      v11 = *(_DWORD *)(*(_QWORD *)&v4 + 4) + 1;
      **(_DWORD **)&v4 -= 2;
      *(_DWORD *)(*(_QWORD *)&v4 + 4) = v11;
    }
    else
    {
      v12 = 1;
      while (v10 != (mlir::Operation *)-4096)
      {
        v13 = v8 + v12++;
        v8 = v13 & v7;
        v10 = *(mlir::Operation **)(v5 + 8 * v8);
        if (v10 == a2)
        {
          v9 = (mlir::Operation **)(v5 + 8 * v8);
          goto LABEL_7;
        }
      }
    }
  }
}

void `non-virtual thunk to'`anonymous namespace'::MultiOpPatternRewriteDriver::~MultiOpPatternRewriteDriver(_anonymous_namespace_::MultiOpPatternRewriteDriver *this)
{
  *((_QWORD *)this - 5) = off_1E0E19858;
  *(_QWORD *)this = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::MultiOpPatternRewriteDriver *)((char *)this + 296));
}

{
  *((_QWORD *)this - 5) = off_1E0E19858;
  *(_QWORD *)this = &unk_1E0E19910;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::MultiOpPatternRewriteDriver *)((char *)this + 296));
}

void sub_18071E904()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_18071E928()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_18071E93C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  void *v14;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

void sub_18071E98C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_18071E9B0()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_18071E9C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v15);
}

void `non-virtual thunk to'`anonymous namespace'::MultiOpPatternRewriteDriver::notifyOperationRemoved(int32x2_t *this, mlir::Operation *a2)
{
  int32x2_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  mlir::Operation **v9;
  mlir::Operation *v10;
  int v11;
  int v12;
  int v13;

  v4 = this[45];
  if (v4)
  {
    v5 = *(_QWORD *)&v4 + 8;
    if ((**(_BYTE **)&v4 & 1) != 0)
    {
      v6 = 4;
    }
    else
    {
      v6 = *(_DWORD *)(*(_QWORD *)&v4 + 16);
      if (!v6)
        return;
      v5 = *(_QWORD *)(*(_QWORD *)&v4 + 8);
    }
    v7 = v6 - 1;
    LODWORD(v8) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (mlir::Operation **)(v5 + 8 * v8);
    v10 = *v9;
    if (*v9 == a2)
    {
LABEL_7:
      *v9 = (mlir::Operation *)-8192;
      v11 = *(_DWORD *)(*(_QWORD *)&v4 + 4) + 1;
      **(_DWORD **)&v4 -= 2;
      *(_DWORD *)(*(_QWORD *)&v4 + 4) = v11;
    }
    else
    {
      v12 = 1;
      while (v10 != (mlir::Operation *)-4096)
      {
        v13 = v8 + v12++;
        v8 = v13 & v7;
        v10 = *(mlir::Operation **)(v5 + 8 * v8);
        if (v10 == a2)
        {
          v9 = (mlir::Operation **)(v5 + 8 * v8);
          goto LABEL_7;
        }
      }
    }
  }
}

int64x2_t *llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(int64x2_t *result)
{
  int64x2_t *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int64x2_t *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int64x2_t *v20;
  int64x2_t v21;
  uint64_t v22;

  v1 = result;
  v2 = result->i32[0];
  v3 = __clz(((unsigned __int32)result->i32[0] >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    result->i32[0] &= 1u;
    result->i32[1] = 0;
    v6 = (int64x2_t *)&result->u64[1];
    v7 = &result[2].i8[8];
    v8 = 24;
    goto LABEL_15;
  }
  if ((v2 & 1) != 0)
  {
    if (v5 <= 4)
    {
      result->i64[0] = 1;
    }
    else
    {
      result->i32[0] &= ~1u;
      result = (int64x2_t *)llvm::allocate_buffer(8 * v5, (std::align_val_t)8uLL);
      v1->i64[1] = (uint64_t)result;
      v1[1].i64[0] = v5;
      v15 = v1->i32[0];
      v1->i64[0] = v1->i32[0] & 1;
      if ((v15 & 1) == 0)
      {
        v16 = &result->i8[8 * v5];
        v17 = 8 * v5 - 8;
        if (v17 < 0x18)
        {
          v19 = (char *)result;
          goto LABEL_31;
        }
LABEL_24:
        v18 = (v17 >> 3) + 1;
        v19 = &result->i8[8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
        v20 = result + 1;
        v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20[-1] = v21;
          *v20 = v21;
          v20 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
          return result;
        do
        {
LABEL_31:
          *(_QWORD *)v19 = -4096;
          v19 += 8;
        }
        while (v19 != v16);
        return result;
      }
    }
    result = (int64x2_t *)&v1->u64[1];
    v16 = &v1[2].i8[8];
    v17 = 24;
    goto LABEL_24;
  }
  v10 = result[1].u32[0];
  if ((_DWORD)v5 != (_DWORD)v10)
    llvm::deallocate_buffer((llvm *)result->i64[1], (void *)(8 * v10));
  result->i64[0] = 0;
  if (!(_DWORD)v5)
    return result;
  v6 = (int64x2_t *)result->i64[1];
  v7 = &v6->i8[8 * v5];
  v8 = 8 * v5 - 8;
  if (v8 < 0x18)
  {
    v9 = (char *)result->i64[1];
    do
    {
LABEL_18:
      *(_QWORD *)v9 = -4096;
      v9 += 8;
    }
    while (v9 != v7);
    return result;
  }
LABEL_15:
  v11 = (v8 >> 3) + 1;
  v9 = &v6->i8[8 * (v11 & 0x3FFFFFFFFFFFFFFCLL)];
  v12 = v6 + 1;
  v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v12[-1] = v13;
    *v12 = v13;
    v12 += 2;
    v14 -= 4;
  }
  while (v14);
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_18;
  return result;
}

uint64_t mlir::InlinerInterface::isLegalToInline(mlir::InlinerInterface *this, mlir::Operation *a2, mlir::Operation *a3, uint64_t a4)
{
  uint64_t result;

  result = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(this, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::Operation *, uint64_t))(*(_QWORD *)result + 16))(result, a2, a3, a4);
  return result;
}

uint64_t mlir::InlinerInterface::isLegalToInline(mlir::InlinerInterface *this, mlir::Operation **a2, mlir::Region *a3, uint64_t a4, mlir::IRMapping *a5)
{
  uint64_t result;

  result = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(this, a2[2]);
  if (result)
    return (*(uint64_t (**)(uint64_t, mlir::Operation **, mlir::Region *, uint64_t, mlir::IRMapping *))(*(_QWORD *)result + 24))(result, a2, a3, a4, a5);
  return result;
}

uint64_t mlir::InlinerInterface::isLegalToInline(mlir::InlinerInterface *this, mlir::Operation *a2, mlir::Region *a3, uint64_t a4, mlir::IRMapping *a5)
{
  uint64_t result;

  result = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(this, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::Region *, uint64_t, mlir::IRMapping *))(*(_QWORD *)result + 32))(result, a2, a3, a4, a5);
  return result;
}

uint64_t mlir::InlinerInterface::shouldAnalyzeRecursively(mlir::InlinerInterface *this, mlir::Operation *a2)
{
  uint64_t InterfaceFor;

  InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(this, a2);
  if (InterfaceFor)
    return (*(uint64_t (**)(uint64_t, mlir::Operation *))(*(_QWORD *)InterfaceFor + 40))(InterfaceFor, a2);
  else
    return 1;
}

uint64_t mlir::InlinerInterface::handleTerminator(mlir::InlinerInterface *this, mlir::Operation *a2, mlir::Block *a3)
{
  uint64_t InterfaceFor;

  InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(this, a2);
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::Block *))(*(_QWORD *)InterfaceFor + 48))(InterfaceFor, a2, a3);
}

uint64_t mlir::InlinerInterface::handleTerminator(mlir::detail::DialectInterfaceCollectionBase *a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t InterfaceFor;

  InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(a1, a2);
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(*(_QWORD *)InterfaceFor + 56))(InterfaceFor, a2, a3, a4);
}

uint64_t mlir::InlinerInterface::handleArgument(mlir::detail::DialectInterfaceCollectionBase *a1, uint64_t a2, uint64_t a3, mlir::Operation *a4, uint64_t a5, uint64_t a6)
{
  uint64_t InterfaceFor;

  InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(a1, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, mlir::Operation *, uint64_t, uint64_t))(*(_QWORD *)InterfaceFor + 72))(InterfaceFor, a2, a3, a4, a5, a6);
}

uint64_t mlir::InlinerInterface::handleResult(mlir::detail::DialectInterfaceCollectionBase *a1, uint64_t a2, uint64_t a3, mlir::Operation *a4, uint64_t a5, uint64_t a6)
{
  uint64_t InterfaceFor;

  InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(a1, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, mlir::Operation *, uint64_t, uint64_t))(*(_QWORD *)InterfaceFor + 80))(InterfaceFor, a2, a3, a4, a5, a6);
}

uint64_t mlir::InlinerInterface::processInlinedCallBlocks(mlir::detail::DialectInterfaceCollectionBase *a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t InterfaceFor;

  InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(a1, a2);
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(*(_QWORD *)InterfaceFor + 88))(InterfaceFor, a2, a3, a4);
}

uint64_t inlineRegionImpl(mlir::InlinerInterface *a1, uint64_t *a2, mlir::Block *this, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  mlir::Region *Parent;
  mlir::Region *v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  mlir::GenericProgramPoint **v44;
  uint64_t *v45;
  uint64_t *v46;
  mlir::GenericProgramPoint *v47;
  mlir::GenericProgramPoint *v48;
  mlir::GenericProgramPoint *v49;
  mlir::ForwardIterator *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  uint64_t Loc;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  mlir::GenericProgramPoint **i;
  mlir::GenericProgramPoint **v63;
  uint64_t v64;
  mlir::GenericProgramPoint *v65;
  mlir::GenericProgramPoint *v66;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  mlir::GenericProgramPoint *v77;
  uint64_t *v78;
  mlir::GenericProgramPoint *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t InterfaceFor;
  mlir::GenericProgramPoint **v86;
  mlir::Block *v87;
  uint64_t v88;
  mlir::DictionaryAttr *v89[2];
  void *v90;
  uint64_t *v91;
  unint64_t v92[2];
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96[4];

  v96[2] = *MEMORY[0x1E0C80C00];
  if ((uint64_t *)*a2 == a2)
    return 0;
  v22 = a2[1];
  if (v22)
    v23 = v22 - 8;
  else
    v23 = 0;
  v24 = *(unint64_t **)(v23 + 48);
  v25 = *(_QWORD *)(v23 + 56) - (_QWORD)v24;
  if (!v25)
    goto LABEL_95;
  v26 = 8 * (v25 >> 3) - 8;
  do
  {
    v27 = *v24++;
    v93 = v27;
    v89[0] = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a5, &v93, v89);
    if (!(_DWORD)result)
      break;
    v29 = v26;
    v26 -= 8;
  }
  while (v29);
  if ((_DWORD)result)
  {
LABEL_95:
    v87 = this;
    Parent = (mlir::Region *)mlir::Block::getParent(this);
    result = (*(uint64_t (**)(mlir::InlinerInterface *, mlir::Region *, uint64_t *, _QWORD, uint64_t *))(*(_QWORD *)a1 + 32))(a1, Parent, a2, a13, a5);
    if ((_DWORD)result)
    {
      result = isLegalToInline(a1, (uint64_t)a2, Parent, a13, (mlir::IRMapping *)a5);
      if ((_DWORD)result)
      {
        v31 = (mlir::Region *)mlir::Block::getParent(v87);
        v89[0] = (mlir::DictionaryAttr *)mlir::Region::getContext(v31);
        v89[1] = 0;
        v90 = v87;
        v91 = a4;
        v32 = a2[2];
        if (mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v32))
        {
          if (v32)
          {
            InterfaceFor = mlir::OpInterface<mlir::CallableOpInterface,mlir::detail::CallableOpInterfaceInterfaceTraits>::getInterfaceFor(v32);
            if (a14)
              v33 = v32 == 0;
            else
              v33 = 1;
            v34 = !v33;
            v84 = v34;
            if (v33)
              goto LABEL_34;
            goto LABEL_33;
          }
        }
        else
        {
          v32 = 0;
        }
        InterfaceFor = 0;
        if (a14)
          v35 = v32 == 0;
        else
          v35 = 1;
        v36 = !v35;
        v84 = v36;
        if (v35)
          goto LABEL_34;
LABEL_33:
        handleArgumentImpl((uint64_t)a1, v89, a14, a15, v32, InterfaceFor, (uint64_t)a5);
LABEL_34:
        v83 = v32;
        v37 = mlir::Block::splitBlock((char *)v87, a4);
        v38 = (uint64_t *)(v37 + 8);
        if (a13)
        {
          mlir::Region::cloneInto((uint64_t)a2, (uint64_t)Parent, v38, (uint64_t)a5);
        }
        else
        {
          v39 = (uint64_t *)a2[1];
          if (v39 != a2 && v38 != a2)
          {
            llvm::ilist_traits<mlir::Block>::transferNodesFromList((uint64_t)Parent, (uint64_t)a2, a2[1], (uint64_t)a2);
            v40 = (_QWORD *)*a2;
            v41 = *v39;
            *(_QWORD *)(v41 + 8) = a2;
            *a2 = v41;
            v42 = *v38;
            v40[1] = v38;
            *v39 = v42;
            *(_QWORD *)(v42 + 8) = v39;
            *v38 = (uint64_t)v40;
          }
        }
        v43 = *((_QWORD *)v87 + 2);
        v44 = (mlir::GenericProgramPoint **)(v43 - 8);
        if (!v43)
          v44 = 0;
        v86 = v44;
        if ((_BYTE)a12
          && *(_UNKNOWN **)(*(_QWORD *)a11 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
        {
          remapInlinedLocations(v43, (uint64_t)v38, a11);
        }
        if ((a13 & 1) == 0)
        {
          v93 = (unint64_t)a5;
          if ((uint64_t *)v43 != v38)
          {
            v45 = (uint64_t *)v43;
            do
            {
              v46 = v45 - 1;
              if (!v45)
                v46 = 0;
              v47 = (mlir::GenericProgramPoint *)(v46 + 4);
              v48 = (mlir::GenericProgramPoint *)v46[5];
              if (v48 != (mlir::GenericProgramPoint *)(v46 + 4))
              {
                do
                {
                  v49 = (mlir::GenericProgramPoint *)*((_QWORD *)v48 + 1);
                  mlir::GenericProgramPoint::~GenericProgramPoint(v48);
                  mlir::detail::walk<mlir::ForwardIterator>(v50, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<remapInlinedOperands(llvm::iterator_range<llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Block,false,false,void,false>,false,false>>,mlir::IRMapping &)::$_0>, (uint64_t)&v93, 1);
                  v48 = v49;
                }
                while (v49 != v47);
              }
              v45 = (uint64_t *)v45[1];
            }
            while (v45 != v38);
          }
        }
        if (a14)
          (*(void (**)(mlir::InlinerInterface *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 88))(a1, a14, v43, v38);
        (*(void (**)(mlir::InlinerInterface *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, v43, v38);
        if (*(uint64_t **)(v43 + 8) == v38)
        {
          i = v86;
          mlir::Block::getTerminator(v86);
          v66 = v65;
          v67 = (void *)*((_QWORD *)v65 + 2);
          mlir::GenericProgramPoint::~GenericProgramPoint(v65);
          v90 = v67;
          v91 = v68;
          if (v84)
          {
            if ((*((_BYTE *)v66 + 46) & 0x80) != 0)
            {
              v69 = *((_QWORD *)v66 + 9);
              v70 = *((unsigned int *)v66 + 17);
            }
            else
            {
              v69 = 0;
              v70 = 0;
            }
            mlir::ValueRange::ValueRange(v96, v69, v70);
            handleResultImpl((uint64_t)a1, v89, a14, a15, v83, InterfaceFor, v96[0], v96[1]);
          }
          (*(void (**)(mlir::InlinerInterface *, mlir::GenericProgramPoint *, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v66, a6, a7);
          mlir::Operation::erase(v66);
          v71 = (uint64_t *)(v37 + 32);
          if (*((char **)v37 + 4) != v37 + 32 && v86 != (mlir::GenericProgramPoint **)v37)
          {
            v72 = (uint64_t *)(v86 + 4);
            v73 = (uint64_t *)*((_QWORD *)v37 + 5);
            llvm::ilist_traits<mlir::Operation>::transferNodesFromList((uint64_t)(v86 + 4), (uint64_t)(v37 + 32), (uint64_t)v73, (uint64_t)(v37 + 32));
            if (v73 != v71)
            {
              v74 = *v71;
              v75 = *v73;
              *(_QWORD *)(v75 + 8) = v71;
              *v71 = v75;
              v76 = *v72;
              *(_QWORD *)(v74 + 8) = v72;
              *v73 = v76;
              *(_QWORD *)(v76 + 8) = v73;
              *v72 = v74;
            }
          }
          mlir::Block::erase((mlir::Block *)v37);
        }
        else
        {
          v93 = 0;
          v94 = a6;
          v95 = 0;
          if (a7)
          {
            v51 = 0;
            v52 = 0;
            do
            {
              v88 = mlir::ValueRange::dereference_iterator(&v94, v51);
              v54 = mlir::TypeRange::dereference_iterator(a9, v52);
              Loc = mlir::Value::getLoc((mlir::Value *)&v88);
              v56 = mlir::Block::addArgument(v37, v54, Loc);
              v57 = (uint64_t **)v88;
              while (1)
              {
                v58 = *v57;
                if (!*v57)
                  break;
                v59 = (uint64_t *)v58[1];
                if (v59)
                {
                  *v59 = *v58;
                  if (*v58)
                    *(_QWORD *)(*v58 + 8) = v58[1];
                }
                v58[3] = (uint64_t)v56;
                v58[1] = (uint64_t)v56;
                v60 = *v56;
                *v58 = *v56;
                if (v60)
                  *(_QWORD *)(v60 + 8) = v58;
                *v56 = (uint64_t)v58;
              }
              v52 = v93 + 1;
              v51 = v95 + 1;
              ++v93;
              ++v95;
            }
            while (v94 != a6 || v51 != a7);
          }
          v61 = (uint64_t *)*((_QWORD *)v37 + 5);
          v90 = v37;
          v91 = v61;
          if ((v84 & 1) != 0)
          {
            mlir::ValueRange::ValueRange(v92, *((_QWORD *)v37 + 6), (uint64_t)(*((_QWORD *)v37 + 7) - *((_QWORD *)v37 + 6)) >> 3);
            handleResultImpl((uint64_t)a1, v89, a14, a15, v83, InterfaceFor, v92[0], v92[1]);
          }
          for (i = v86; (uint64_t *)v43 != v38; v43 = *(_QWORD *)(v43 + 8))
          {
            if (v43)
              v63 = (mlir::GenericProgramPoint **)(v43 - 8);
            else
              v63 = 0;
            mlir::Block::getTerminator(v63);
            (*(void (**)(mlir::InlinerInterface *, uint64_t, char *))(*(_QWORD *)a1 + 56))(a1, v64, v37);
          }
        }
        v77 = (mlir::GenericProgramPoint *)(i + 4);
        if (i[4] != (mlir::GenericProgramPoint *)(i + 4) && i != (mlir::GenericProgramPoint **)v87)
        {
          v78 = (uint64_t *)((char *)v87 + 32);
          v79 = i[5];
          llvm::ilist_traits<mlir::Operation>::transferNodesFromList((uint64_t)v87 + 32, (uint64_t)(i + 4), (uint64_t)v79, (uint64_t)(i + 4));
          if (v79 != v77)
          {
            v80 = *(_QWORD *)v77;
            v81 = *(_QWORD *)v79;
            *(_QWORD *)(v81 + 8) = v77;
            *(_QWORD *)v77 = v81;
            v82 = *v78;
            *(_QWORD *)(v80 + 8) = v78;
            *(_QWORD *)v79 = v82;
            *(_QWORD *)(v82 + 8) = v79;
            *v78 = v80;
          }
        }
        mlir::Block::erase((mlir::Block *)i);
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::inlineCall(mlir::InlinerInterface *a1, mlir::GenericProgramPoint *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int a7)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *ArgOperands;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  const double *v19;
  unsigned __int128 *v20;
  unint64_t v21;
  const double *v22;
  unsigned __int128 v23;
  unsigned __int128 v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  unint64_t v40;
  mlir::GenericProgramPoint *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ValueImpl *Values;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD *impl;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t DefiningOp;
  Value v62;
  Value v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  mlir::Operation **v72;
  mlir::Operation **v73;
  mlir::Operation *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  mlir::Operation **v79;
  mlir::Operation **v80;
  mlir::Operation *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  mlir::Block *v92;
  uint64_t *v93;
  int v94;
  unint64_t v96;
  llvm *v99[2];
  int v100;
  llvm *v101;
  uint64_t v102;
  int v103;
  llvm *v104;
  uint64_t v105;
  unsigned int v106;
  _QWORD v107[2];
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  mlir::GenericProgramPoint *v111;
  uint64_t v112;
  unint64_t v113;
  Value v114;
  unint64_t v115[2];
  unint64_t v116[2];
  void *v117;
  uint64_t v118;
  _BYTE v119[32];
  void *v120;
  uint64_t v121;
  _BYTE v122[64];
  char *v123;
  uint64_t v124;
  _QWORD v125[10];

  v125[8] = *MEMORY[0x1E0C80C00];
  v111 = a2;
  v112 = a3;
  v110[0] = a4;
  v110[1] = a5;
  if ((uint64_t *)*a6 == a6)
    return 0;
  v8 = a6[1];
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  ArgOperands = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v110);
  v12 = v11;
  v14 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v111);
  v15 = v13;
  v123 = (char *)v125;
  v124 = 0x800000000;
  if (v13 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, v125, v13, 8);
    v16 = &v123[8 * v124];
    if (v15 >= 0xD
      && ((unint64_t)v16 >= v14 + 32 * v15
       || v14 + 24 >= (unint64_t)&v123[8 * v15 + 8 * v124]))
    {
      v18 = v15 & 3;
      if ((v15 & 3) == 0)
        v18 = 4;
      v17 = v15 - v18;
      v16 += 8 * v17;
      v19 = (const double *)(v14 + 88);
      v20 = (unsigned __int128 *)&v123[8 * v124 + 16];
      v21 = v17;
      do
      {
        v22 = v19 - 8;
        v23 = (unsigned __int128)vld4q_f64(v22);
        v24 = (unsigned __int128)vld4q_f64(v19);
        *(v20 - 1) = v23;
        *v20 = v24;
        v19 += 16;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      goto LABEL_18;
    }
LABEL_13:
    v17 = 0;
LABEL_18:
    v25 = v15 - v17;
    v26 = (uint64_t *)(v14 + 32 * v17 + 24);
    do
    {
      v27 = *v26;
      v26 += 4;
      *(_QWORD *)v16 = v27;
      v16 += 8;
      --v25;
    }
    while (v25);
    v28 = v124;
    goto LABEL_21;
  }
  if (v13)
  {
    v16 = (char *)v125;
    goto LABEL_13;
  }
  v28 = 0;
LABEL_21:
  v29 = v28 + v15;
  LODWORD(v124) = v29;
  v30 = *((unsigned int *)v111 + 9);
  if ((_DWORD)v30)
    v31 = (char *)v111 - 16;
  else
    v31 = 0;
  v120 = v122;
  v121 = 0x800000000;
  if (v30 >= 9)
  {
    v32 = v12;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, v122, v30, 8);
    v33 = v121;
    v34 = v120;
    goto LABEL_28;
  }
  if ((_DWORD)v30)
  {
    v32 = v12;
    v33 = 0;
    v34 = v122;
LABEL_28:
    v35 = 0;
    v36 = &v34[8 * v33];
    do
    {
      *(_QWORD *)&v36[8 * v35] = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v31, v35);
      ++v35;
    }
    while (v30 != v35);
    v37 = v121;
    v29 = v124;
    v12 = v32;
    goto LABEL_31;
  }
  v37 = 0;
LABEL_31:
  v38 = (v37 + v30);
  LODWORD(v121) = v38;
  if (v29 == ((*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3) && v12 == v38)
  {
    v117 = v119;
    v118 = 0x400000000;
    v96 = v12;
    v40 = v12 + v29;
    if (v40 >= 5)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v40, 8);
    v41 = v111;
    v108 = 0;
    v109 = 0;
    v107[0] = mlir::Attribute::getContext((mlir::GenericProgramPoint *)((char *)v111 + 24));
    v107[1] = 0;
    v42 = *((_QWORD *)v41 + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(v41);
    v108 = v42;
    v109 = v43;
    v44 = *((_QWORD *)v111 + 6);
    if (*(_UNKNOWN **)(v44 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v99[0] = *(llvm **)(v44 + 8);
      Values = (ValueImpl *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v99);
    }
    else
    {
      Values = *(ValueImpl **)(v44 + 24);
    }
    v114.impl = Values;
    v99[0] = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::Dialect *>((uint64_t *)a1 + 1, (unint64_t *)&v114, v99)|| v99[0] == (llvm *)(*((_QWORD *)a1 + 1) + 8 * *((unsigned int *)a1 + 6)))
    {
      v46 = 0;
    }
    else
    {
      v46 = *(_QWORD *)v99[0];
    }
    v99[0] = 0;
    v99[1] = 0;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    if ((_DWORD)v124)
    {
      v47 = 0;
      v48 = 8 * v124;
      do
      {
        v49 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + v47);
        v50 = *(_QWORD *)&v123[v47];
        if ((*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          if (!v46
            || (v51 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v46 + 64))(v46, v107, *(_QWORD *)&v123[v47])) == 0)
          {
            if ((_DWORD)v118)
            {
              v72 = (mlir::Operation **)v117;
              v73 = (mlir::Operation **)((char *)v117 + 8 * v118);
              do
              {
                v74 = *v72;
                v75 = (uint64_t *)*((_QWORD *)*v72 - 2);
                if (v75)
                {
                  v76 = *(uint64_t **)(*((_QWORD *)v74 + 9) + 24);
                  do
                  {
                    v77 = (uint64_t *)v75[1];
                    if (v77)
                    {
                      *v77 = *v75;
                      if (*v75)
                        *(_QWORD *)(*v75 + 8) = v75[1];
                    }
                    v75[3] = (uint64_t)v76;
                    v75[1] = (uint64_t)v76;
                    v78 = *v76;
                    *v75 = *v76;
                    if (v78)
                      *(_QWORD *)(v78 + 8) = v75;
                    *v76 = (uint64_t)v75;
                    v75 = (uint64_t *)*((_QWORD *)v74 - 2);
                  }
                  while (v75);
                }
                mlir::Operation::erase(v74);
                ++v72;
              }
              while (v72 != v73);
            }
LABEL_106:
            llvm::deallocate_buffer(v104, (void *)(16 * v106));
          }
          v52 = v51;
          v53 = v118;
          if (v118 >= (unint64_t)HIDWORD(v118))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v118 + 1, 8);
            v53 = v118;
          }
          *((_QWORD *)v117 + v53) = v52;
          LODWORD(v118) = v118 + 1;
          v50 = v52 - 16;
        }
        v113 = v49;
        v114.impl = 0;
        v54 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v99, &v113, &v114);
        impl = v114.impl;
        if ((v54 & 1) == 0)
        {
          impl = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v99, (uint64_t)&v113, &v113, v114.impl);
          *impl = v113;
          impl[1] = 0;
        }
        impl[1] = v50;
        v47 += 8;
      }
      while (v48 != v47);
    }
    v56 = *((_QWORD *)v111 + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(v111);
    v58 = *(_QWORD *)(v57 + 8);
    v108 = v56;
    v109 = v58;
    v59 = v121;
    if ((_DWORD)v121)
    {
      if (v46)
      {
        v60 = 0;
        while (1)
        {
          v64 = *((_QWORD *)v120 + v60);
          if (ArgOperands[v60] != (*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8))
          {
            v65 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v46 + 64))(v46, v107, *((_QWORD *)v120 + v60));
            if (!v65)
              goto LABEL_87;
            v66 = v65;
            v67 = v118;
            if (v118 >= (unint64_t)HIDWORD(v118))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v118 + 1, 8);
              v67 = v118;
            }
            *((_QWORD *)v117 + v67) = v66;
            LODWORD(v118) = v118 + 1;
            v68 = (uint64_t *)(v66 - 16);
            v114.impl = (ValueImpl *)(v66 - 16);
            while (1)
            {
              v69 = *(uint64_t **)v64;
              if (!*(_QWORD *)v64)
                break;
              v70 = (uint64_t *)v69[1];
              if (v70)
              {
                *v70 = *v69;
                if (*v69)
                  *(_QWORD *)(*v69 + 8) = v69[1];
              }
              v69[3] = (uint64_t)v68;
              v69[1] = (uint64_t)v68;
              v71 = *v68;
              *v69 = *v68;
              if (v71)
                *(_QWORD *)(v71 + 8) = v69;
              *v68 = (uint64_t)v69;
            }
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v114);
            v62.impl = v114.impl;
            v63.impl = (ValueImpl *)v64;
            mlir::Operation::replaceUsesOfWith(DefiningOp, v62, v63);
          }
          if (++v60 == v59)
            goto LABEL_103;
        }
      }
      if (*ArgOperands != (*(_QWORD *)(*(_QWORD *)v120 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_87:
        v114.impl = 0;
        if ((_DWORD)v118)
        {
          v79 = (mlir::Operation **)v117;
          v80 = (mlir::Operation **)((char *)v117 + 8 * v118);
          do
          {
            v81 = *v79;
            v82 = (uint64_t *)*((_QWORD *)*v79 - 2);
            if (v82)
            {
              v83 = *(uint64_t **)(*((_QWORD *)v81 + 9) + 24);
              do
              {
                v84 = (uint64_t *)v82[1];
                if (v84)
                {
                  *v84 = *v82;
                  if (*v82)
                    *(_QWORD *)(*v82 + 8) = v82[1];
                }
                v82[3] = (uint64_t)v83;
                v82[1] = (uint64_t)v83;
                v85 = *v83;
                *v82 = *v83;
                if (v85)
                  *(_QWORD *)(v85 + 8) = v82;
                *v83 = (uint64_t)v82;
                v82 = (uint64_t *)*((_QWORD *)v81 - 2);
              }
              while (v82);
            }
            mlir::Operation::erase(v81);
            ++v79;
          }
          while (v79 != v80);
        }
        goto LABEL_106;
      }
      v86 = (uint64_t *)((char *)v120 + 8);
      v87 = ArgOperands + 1;
      v88 = v121 - 1;
      if (v121 != 1)
      {
        do
        {
          v89 = *v86++;
          v90 = *(_QWORD *)(v89 + 8) & 0xFFFFFFFFFFFFFFF8;
          v91 = *v87++;
          --v88;
          if (v91 != v90)
            goto LABEL_87;
        }
        while (v88);
      }
    }
LABEL_103:
    if (((*(uint64_t (**)(mlir::InlinerInterface *, mlir::GenericProgramPoint *, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, v111, v110[0], a7) & 1) == 0|| (v93 = (uint64_t *)*((_QWORD *)v111 + 1), v92 = (mlir::Block *)*((_QWORD *)v111 + 2), mlir::ValueRange::ValueRange(v116, (uint64_t)v120, v121), mlir::ValueRange::ValueRange(v115, (uint64_t)ArgOperands, v96), !inlineRegionImpl(a1, a6, v92, v93, (uint64_t *)v99, v116[0], v116[1], v94, v115[0], v115[1],
                              *((_QWORD *)v111 + 3),
                              1,
                              a7,
                              (uint64_t)v111,
                              v112)))
    {
      mlir::inlineCall(mlir::InlinerInterface &,mlir::CallOpInterface,mlir::CallableOpInterface,mlir::Region *,BOOL)::$_0::operator()((mlir::Operation **)v117, v118);
    }
    goto LABEL_106;
  }
  if (v120 != v122)
    free(v120);
  if (v123 != (char *)v125)
    free(v123);
  return 0;
}

uint64_t mlir::inlineCall(mlir::InlinerInterface &,mlir::CallOpInterface,mlir::CallableOpInterface,mlir::Region *,BOOL)::$_0::operator()(mlir::Operation **a1, int a2)
{
  mlir::Operation **v2;
  mlir::Operation **v3;
  mlir::Operation *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  if (a2)
  {
    v2 = a1;
    v3 = &a1[a2];
    do
    {
      v4 = *v2;
      v5 = (uint64_t *)*((_QWORD *)*v2 - 2);
      if (v5)
      {
        v6 = *(uint64_t **)(*((_QWORD *)v4 + 9) + 24);
        do
        {
          v7 = (uint64_t *)v5[1];
          if (v7)
          {
            *v7 = *v5;
            if (*v5)
              *(_QWORD *)(*v5 + 8) = v5[1];
          }
          v5[3] = (uint64_t)v6;
          v8 = *v6;
          *v5 = *v6;
          v5[1] = (uint64_t)v6;
          if (v8)
            *(_QWORD *)(v8 + 8) = v5;
          *v6 = (uint64_t)v5;
          v5 = (uint64_t *)*((_QWORD *)v4 - 2);
        }
        while (v5);
      }
      mlir::Operation::erase(v4);
      ++v2;
    }
    while (v2 != v3);
  }
  return 0;
}

uint64_t isLegalToInline(mlir::InlinerInterface *a1, uint64_t a2, mlir::Region *a3, _BOOL8 a4, mlir::IRMapping *a5)
{
  uint64_t v5;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  mlir::Region *v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5 != a2)
  {
    while (2)
    {
      v11 = v5 - 8;
      if (!v5)
        v11 = 0;
      v12 = (mlir::GenericProgramPoint *)(v11 + 32);
      for (i = *(mlir::GenericProgramPoint **)(v11 + 40); i != v12; i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(i);
        v15 = v14;
        result = (*(uint64_t (**)(mlir::InlinerInterface *, uint64_t, mlir::Region *, _BOOL8, mlir::IRMapping *))(*(_QWORD *)a1 + 40))(a1, v14, a3, a4, a5);
        if (!(_DWORD)result)
          return result;
        if ((*(unsigned int (**)(mlir::InlinerInterface *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v15))
        {
          v17 = *(unsigned int *)(v15 + 44);
          if ((v17 & 0x7FFFFF) != 0)
          {
            v18 = (mlir::Region *)(((v15 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                                 + 32 * *(unsigned int *)(v15 + 40));
            v19 = 24 * (v17 & 0x7FFFFF);
            while ((isLegalToInline(a1, v18, a3, a4, a5) & 1) != 0)
            {
              v18 = (mlir::Region *)((char *)v18 + 24);
              v19 -= 24;
              if (!v19)
                goto LABEL_5;
            }
            return 0;
          }
        }
LABEL_5:
        ;
      }
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 != a2)
        continue;
      break;
    }
  }
  return 1;
}

void handleArgumentImpl(uint64_t a1, mlir::DictionaryAttr **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *canMapOperands;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DictionaryAttr;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t *v21;
  uint64_t v22;
  uint64_t Value;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[2];
  unint64_t v45;
  _QWORD *ArgAttrsAttr;
  void *v47;
  uint64_t v48;
  _QWORD v49[7];

  v49[6] = *MEMORY[0x1E0C80C00];
  v44[0] = a5;
  v44[1] = a6;
  canMapOperands = (_QWORD *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v44);
  if ((_QWORD *)*canMapOperands == canMapOperands)
  {
    LODWORD(v14) = 0;
  }
  else
  {
    v12 = canMapOperands[1];
    if (v12)
      v13 = v12 - 8;
    else
      v13 = 0;
    v14 = (*(_QWORD *)(v13 + 56) - *(_QWORD *)(v13 + 48)) >> 3;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(a2, 0, 0);
  v16 = DictionaryAttr;
  v47 = v49;
  v48 = 0x600000000;
  if (v14 < 7)
  {
    if ((_DWORD)v14)
    {
      v49[0] = DictionaryAttr;
      if ((_DWORD)v14 != 1)
      {
        v49[1] = DictionaryAttr;
        if ((_DWORD)v14 != 2)
        {
          v49[2] = DictionaryAttr;
          if ((_DWORD)v14 != 3)
          {
            v49[3] = DictionaryAttr;
            if ((_DWORD)v14 != 4)
            {
              v49[4] = DictionaryAttr;
              if ((_DWORD)v14 != 5)
                v49[5] = DictionaryAttr;
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v14, 8);
    v17 = v14 & 0xFFFFFFFC;
    v18 = (unint64_t *)((char *)v47 + 8 * v17);
    v19 = v14 & 3;
    v20 = vdupq_n_s64(v16);
    v21 = (int64x2_t *)((char *)v47 + 16);
    v22 = v17;
    do
    {
      v21[-1] = v20;
      *v21 = v20;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v17 != v14)
    {
      do
      {
        *v18++ = v16;
        --v19;
      }
      while (v19);
    }
  }
  LODWORD(v48) = v14;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
  if (ArgAttrsAttr)
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    v24 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    v26 = v24 + 8 * v25;
    if (v26 != Value)
    {
      v27 = 0;
      do
      {
        *(_QWORD *)((char *)v47 + v27) = *(_QWORD *)(Value + v27);
        v27 += 8;
      }
      while (Value + v27 != v26);
    }
  }
  v28 = (_QWORD *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v44);
  if ((_QWORD *)*v28 == v28)
    goto LABEL_40;
  v29 = v28[1];
  if (v29)
    v30 = v29 - 8;
  else
    v30 = 0;
  v32 = *(unint64_t **)(v30 + 48);
  v31 = *(unint64_t **)(v30 + 56);
  v33 = v47;
  if (v31 != v32 && (_DWORD)v48 != 0)
  {
    v35 = 8 * (v31 - v32) - 8;
    v36 = 8 * v48 - 8;
    do
    {
      v37 = v44[0];
      v45 = *v32;
      ArgAttrsAttr = 0;
      v38 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a7, &v45, &ArgAttrsAttr);
      v39 = 0;
      if (v38 && ArgAttrsAttr != (_QWORD *)(*(_QWORD *)a7 + 16 * *(unsigned int *)(a7 + 16)))
        v39 = ArgAttrsAttr[1];
      v40 = (*(uint64_t (**)(uint64_t, mlir::DictionaryAttr **, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, a3, v37, v39, *v33);
      v45 = *v32;
      ArgAttrsAttr = 0;
      v41 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a7, &v45, &ArgAttrsAttr);
      v42 = ArgAttrsAttr;
      if ((v41 & 1) == 0)
      {
        v42 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a7, (uint64_t)&v45, &v45, ArgAttrsAttr);
        *v42 = v45;
        v42[1] = 0;
      }
      v42[1] = v40;
      if (!v35)
        break;
      ++v32;
      ++v33;
      v35 -= 8;
      v43 = v36;
      v36 -= 8;
    }
    while (v43);
LABEL_40:
    v33 = v47;
  }
  if (v33 != v49)
    free(v33);
}

void remapInlinedLocations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::GenericProgramPoint *v6;
  mlir::GenericProgramPoint *v7;
  mlir::GenericProgramPoint *v8;
  mlir::ForwardIterator *v9;
  llvm *v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[2];
  unsigned int v14;
  uint64_t v15;

  v15 = a3;
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v12[0] = v13;
  v12[1] = &v15;
  if (a1 == a2)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4 - 8;
      if (!v4)
        v5 = 0;
      v6 = (mlir::GenericProgramPoint *)(v5 + 32);
      v7 = *(mlir::GenericProgramPoint **)(v5 + 40);
      if (v7 != (mlir::GenericProgramPoint *)(v5 + 32))
      {
        do
        {
          v8 = (mlir::GenericProgramPoint *)*((_QWORD *)v7 + 1);
          mlir::GenericProgramPoint::~GenericProgramPoint(v7);
          mlir::detail::walk<mlir::ForwardIterator>(v9, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<remapInlinedLocations(llvm::iterator_range<llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Block,false,false,void,false>,false,false>>,mlir::Location)::$_0>, (uint64_t)v12, 1);
          v7 = v8;
        }
        while (v8 != v6);
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2);
    v10 = (llvm *)v13[0];
    v11 = (void *)(16 * v14);
  }
  llvm::deallocate_buffer(v10, v11);
}

void handleResultImpl(uint64_t a1, mlir::DictionaryAttr **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t DictionaryAttr;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int64x2_t v17;
  int64x2_t *v18;
  unint64_t v19;
  uint64_t Value;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  char *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t **v47;
  uint64_t *v48;
  llvm **v49;
  llvm *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t **v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  uint64_t **v56;
  void *v57[2];
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[8];

  v61[6] = *MEMORY[0x1E0C80C00];
  v54[0] = a5;
  v54[1] = a6;
  DictionaryAttr = mlir::Builder::getDictionaryAttr(a2, 0, 0);
  v14 = DictionaryAttr;
  v59 = v61;
  v60 = 0x600000000;
  if (a8 < 7)
  {
    if (a8)
    {
      v61[0] = DictionaryAttr;
      if (a8 != 1)
      {
        v61[1] = DictionaryAttr;
        if (a8 != 2)
        {
          v61[2] = DictionaryAttr;
          if (a8 != 3)
          {
            v61[3] = DictionaryAttr;
            if (a8 != 4)
            {
              v61[4] = DictionaryAttr;
              if (a8 != 5)
                v61[5] = DictionaryAttr;
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, a8, 8);
    v15 = (unint64_t *)((char *)v59 + 8 * (a8 & 0xFFFFFFFFFFFFFFFCLL));
    v16 = a8 & 3;
    v17 = vdupq_n_s64(v14);
    v18 = (int64x2_t *)((char *)v59 + 16);
    v19 = a8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 4;
    }
    while (v19);
    if (a8 != (a8 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        *v15++ = v14;
        --v16;
      }
      while (v16);
    }
  }
  LODWORD(v60) = a8;
  v57[0] = (void *)mlir::CallableOpInterface::getResAttrsAttr((mlir::CallableOpInterface *)v54);
  if (v57[0])
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v57);
    v21 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v57);
    v23 = v21 + 8 * v22;
    if (v23 != Value)
    {
      v24 = 0;
      do
      {
        *(_QWORD *)((char *)v59 + v24) = *(_QWORD *)(Value + v24);
        v24 += 8;
      }
      while (Value + v24 != v23);
    }
  }
  v57[1] = (void *)0x600000000;
  v55[0] = a7;
  v55[1] = 0;
  v56 = (uint64_t **)v59;
  v57[0] = &v58;
  if (a8 && (_DWORD)v60)
  {
    v25 = (uint64_t **)mlir::ValueRange::dereference_iterator(v55, 0);
    v26 = v56;
    v53[0] = v25;
    v53[1] = v56;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v27 = *v25;
    if (!*v25)
    {
      v47 = v25;
LABEL_61:
      v48 = (uint64_t *)(*(uint64_t (**)(uint64_t, mlir::DictionaryAttr **, uint64_t, _QWORD, uint64_t **, uint64_t *))(*(_QWORD *)a1 + 80))(a1, a2, a3, v54[0], v47, *v26);
      v49 = &v50;
      mlir::Value::replaceUsesWithIf(v53, v48, (uint64_t (*)(uint64_t, uint64_t *))llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<handleResultImpl(mlir::InlinerInterface &,mlir::OpBuilder &,mlir::CallOpInterface,mlir::CallableOpInterface,mlir::ValueRange)::$_0>, (uint64_t)&v49);
      llvm::deallocate_buffer(v50, (void *)(8 * v52));
    }
    v28 = 0;
    v29 = 0;
    while (1)
    {
      v33 = v27[2];
      if (!v29)
        goto LABEL_43;
      v30 = ((v33 >> 4) ^ (v33 >> 9)) & (v29 - 1);
      v31 = (char *)v50 + 8 * v30;
      v32 = *(_QWORD *)v31;
      if (v33 != *(_QWORD *)v31)
        break;
LABEL_23:
      v27 = (uint64_t *)*v27;
      if (!v27)
      {
        v47 = v53[0];
        goto LABEL_61;
      }
    }
    v35 = 0;
    v36 = 1;
    while (v32 != -4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v32 == -8192;
      if (v37)
        v35 = v31;
      v38 = v30 + v36++;
      v30 = v38 & (v29 - 1);
      v31 = (char *)v50 + 8 * v30;
      v32 = *(_QWORD *)v31;
      if (v33 == *(_QWORD *)v31)
        goto LABEL_23;
    }
    if (v35)
      v39 = v35;
    else
      v39 = v31;
    if (4 * v28 + 4 < 3 * v29)
    {
      if (v29 + ~v28 - HIDWORD(v51) > v29 >> 3)
        goto LABEL_27;
    }
    else
    {
LABEL_43:
      v29 *= 2;
    }
    llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow((uint64_t)&v50, v29);
    v29 = v52;
    v40 = v52 - 1;
    v41 = (v52 - 1) & ((v33 >> 4) ^ (v33 >> 9));
    v39 = (char *)v50 + 8 * v41;
    v42 = *(_QWORD *)v39;
    if (v33 == *(_QWORD *)v39)
    {
LABEL_45:
      v28 = v51 + 1;
      LODWORD(v51) = v51 + 1;
      if (v33 == -4096)
        goto LABEL_29;
      goto LABEL_28;
    }
    v43 = 0;
    v44 = 1;
    while (v42 != -4096)
    {
      if (v43)
        v45 = 0;
      else
        v45 = v42 == -8192;
      if (v45)
        v43 = v39;
      v46 = v41 + v44++;
      v41 = v46 & v40;
      v39 = (char *)v50 + 8 * (v46 & v40);
      v42 = *(_QWORD *)v39;
      if (v33 == *(_QWORD *)v39)
        goto LABEL_45;
    }
    if (v43)
      v39 = v43;
LABEL_27:
    v34 = *(_QWORD *)v39;
    v28 = v51 + 1;
    LODWORD(v51) = v51 + 1;
    if (v34 == -4096)
    {
LABEL_29:
      *(_QWORD *)v39 = v33;
      goto LABEL_23;
    }
LABEL_28:
    --HIDWORD(v51);
    goto LABEL_29;
  }
  if (v59 != v61)
    free(v59);
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<remapInlinedLocations(llvm::iterator_range<llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Block,false,false,void,false>,false,false>>,mlir::Location)::$_0>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t **v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;

  v4 = *a1;
  result = *(uint64_t **)(a2 + 24);
  v6 = *v4;
  v7 = *((unsigned int *)v4 + 4);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = ((result >> 4) ^ (result >> 9)) & (v7 - 1);
    v9 = (uint64_t **)(v6 + 16 * v8);
    v10 = *v9;
    if (result == *v9)
      goto LABEL_8;
    v11 = 1;
    while (v10 != (uint64_t *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(uint64_t **)(v6 + 16 * v8);
      if (result == v10)
      {
        v9 = (uint64_t **)(v6 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t **)(v6 + 16 * v7);
LABEL_8:
  if (v9 != (uint64_t **)(v6 + 16 * v7))
  {
LABEL_9:
    *(_QWORD *)(a2 + 24) = v9[1];
    return result;
  }
  v24 = mlir::CallSiteLoc::get((uint64_t)result, *a1[1]);
  result = *a1;
  v13 = *(uint64_t **)(a2 + 24);
  v23 = v13;
  v14 = *((_DWORD *)result + 4);
  if (v14)
  {
    v15 = v14 - 1;
    v16 = ((v13 >> 4) ^ (v13 >> 9)) & (v14 - 1);
    v9 = (uint64_t **)(*result + 16 * v16);
    v17 = *v9;
    if (v13 == *v9)
      goto LABEL_9;
    v18 = 0;
    v19 = 1;
    while (v17 != (uint64_t *)-4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == (uint64_t *)-8192;
      if (v20)
        v18 = v9;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      v9 = (uint64_t **)(*result + 16 * (v21 & v15));
      v17 = *v9;
      if (v13 == *v9)
        goto LABEL_9;
    }
    if (v18)
      v22 = v18;
    else
      v22 = v9;
  }
  else
  {
    v22 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Location,mlir::Location,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseMapPair<mlir::Location,mlir::Location>>,mlir::Location,mlir::Location,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseMapPair<mlir::Location,mlir::Location>>::InsertIntoBucket<mlir::Location,mlir::CallSiteLoc &>((uint64_t)result, v22, &v23, &v24);
  *(_QWORD *)(a2 + 24) = result[1];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Location,mlir::Location,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseMapPair<mlir::Location,mlir::Location>>,mlir::Location,mlir::Location,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseMapPair<mlir::Location,mlir::Location>>::InsertIntoBucket<mlir::Location,mlir::CallSiteLoc &>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  unsigned int v9;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow(a1, v9);
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v11 - 1);
    a2 = (_QWORD *)(*(_QWORD *)a1 + 16 * v13);
    v14 = *a2;
    if (*a3 != *a2)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = a2;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        a2 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v18 & v12));
        v14 = *a2;
        if (*a3 == *a2)
          goto LABEL_3;
      }
      if (v15)
        a2 = v15;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = *a4;
  return a2;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<remapInlinedOperands(llvm::iterator_range<llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Block,false,false,void,false>,false,false>>,mlir::IRMapping &)::$_0>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v2 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v2)
    {
      v3 = (uint64_t *)result;
      v4 = *(uint64_t **)(a2 + 72);
      v5 = 32 * v2;
      do
      {
        v6 = *v3;
        v11 = v4[3];
        v12 = 0;
        result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, (unint64_t *)&v11, &v12);
        if ((_DWORD)result)
          v7 = v12 == *(_QWORD *)v6 + 16 * *(unsigned int *)(v6 + 16);
        else
          v7 = 1;
        if (!v7)
        {
          v8 = *(uint64_t **)(v12 + 8);
          if (v8)
          {
            v9 = (uint64_t *)v4[1];
            if (v9)
            {
              *v9 = *v4;
              if (*v4)
                *(_QWORD *)(*v4 + 8) = v4[1];
            }
            v4[3] = (uint64_t)v8;
            v4[1] = (uint64_t)v8;
            v10 = *v8;
            *v4 = *v8;
            if (v10)
              *(_QWORD *)(v10 + 8) = v4;
            *v8 = (uint64_t)v4;
          }
        }
        v4 += 4;
        v5 -= 32;
      }
      while (v5);
    }
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<handleResultImpl(mlir::InlinerInterface &,mlir::OpBuilder &,mlir::CallOpInterface,mlir::CallableOpInterface,mlir::ValueRange)::$_0>(uint64_t **a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 result;
  int v9;
  unsigned int v10;

  v2 = *((_DWORD *)*a1 + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = **a1;
  v5 = v2 - 1;
  v6 = ((v3 >> 4) ^ (v3 >> 9)) & v5;
  v7 = *(_QWORD *)(v4 + 8 * v6);
  if (v7 == v3)
    return 1;
  v9 = 1;
  do
  {
    result = v7 != -4096;
    if (v7 == -4096)
      break;
    v10 = v6 + v9++;
    v6 = v10 & v5;
    v7 = *(_QWORD *)(v4 + 8 * v6);
    result = 1;
  }
  while (v7 != v3);
  return result;
}

uint64_t mlir::eraseUnreachableBlocks(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *j;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  llvm::SmallPtrSetImplBase *v23;
  unint64_t v24;
  char *v25;
  size_t v26;
  int64_t v27;
  char *v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  _QWORD *v33;
  const void **BucketFor;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  mlir::GenericProgramPoint *v39;
  mlir::GenericProgramPoint *i;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  _BYTE v53[128];
  llvm::SmallPtrSetImplBase *v54;
  char *v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[2];

  v60[1] = *MEMORY[0x1E0C80C00];
  v49 = v53;
  v50 = v53;
  v51 = 16;
  v52 = 0;
  v58 = v60;
  v59 = 0x100000000;
  if (a3 < 2)
  {
    v6 = 0;
    if (!a3)
    {
      v8 = 0;
      goto LABEL_79;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, a3, 8);
    v6 = v59;
  }
  v7 = 24 * a3;
  do
  {
    if (v6 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v6 + 1, 8);
      v6 = v59;
    }
    v58[v6] = a2;
    v6 = v59 + 1;
    LODWORD(v59) = v59 + 1;
    a2 += 24;
    v7 -= 24;
  }
  while (v7);
  v8 = 0;
  while (v6)
  {
    v9 = (_QWORD *)v58[--v6];
    LODWORD(v59) = v6;
    if ((_QWORD *)*v9 != v9)
    {
      v10 = v9[1];
      if (*(_QWORD **)(v10 + 8) != v9)
      {
        if (v50 != v49)
        {
          if (v51 >= 0x21 && 4 * (HIDWORD(v51) - v52) < v51)
          {
            llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v49);
            goto LABEL_29;
          }
          memset(v50, 255, 8 * v51);
        }
        HIDWORD(v51) = 0;
        v52 = 0;
LABEL_29:
        v20 = v9[1];
        if (v20)
          v21 = (void *)(v20 - 8);
        else
          v21 = 0;
        llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,16u>,true,llvm::GraphTraits<mlir::Block *>>::df_iterator(&v54, v21, (llvm::SmallPtrSetImplBase *)&v49);
        v23 = v54;
        v22 = v55;
        v24 = v56 - v55;
        if (v56 != v55)
        {
          if ((v24 & 0x8000000000000000) == 0)
          {
            v25 = (char *)operator new(v56 - v55);
            v26 = v24 & 0xFFFFFFFFFFFFFFE0;
            memcpy(v25, v22, v26);
            v24 = (unint64_t)&v25[v26];
            if (v22)
              goto LABEL_35;
            goto LABEL_36;
          }
LABEL_84:
          abort();
        }
        v25 = 0;
        if (v55)
        {
LABEL_35:
          v56 = v22;
          operator delete(v22);
        }
LABEL_36:
        v54 = v23;
        v27 = v24 - (_QWORD)v25;
        if (v27)
        {
          if (v27 < 0)
            goto LABEL_84;
          v28 = (char *)operator new(v27);
          v55 = v28;
          v57 = &v28[32 * (v27 >> 5)];
          v29 = v27 & 0xFFFFFFFFFFFFFFE0;
          memcpy(v28, v25, v29);
          v56 = &v28[v29];
          if (!v29)
            goto LABEL_41;
          do
          {
            llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,16u>,true,llvm::GraphTraits<mlir::Block *>>::toNext(&v54);
            v28 = v56;
          }
          while (v56 != v55);
          if (v56)
          {
LABEL_41:
            v56 = v28;
            operator delete(v28);
          }
        }
        if (v25)
          operator delete(v25);
        v30 = (_QWORD *)v9[1];
        while (1)
        {
          if (v30 == v9)
            goto LABEL_10;
          v31 = v30 - 1;
          v32 = v30 == 0;
          v30 = (_QWORD *)v30[1];
          if (v32)
            v33 = 0;
          else
            v33 = v31;
          if (v50 == v49)
          {
            v37 = &v50[8 * HIDWORD(v51)];
            if (HIDWORD(v51))
            {
              v38 = 0;
              while (*(_QWORD **)&v50[v38] != v33)
              {
                v38 += 8;
                if (8 * HIDWORD(v51) == v38)
                  goto LABEL_66;
              }
              v37 = &v50[v38];
            }
LABEL_66:
            if (v37 == &v50[8 * HIDWORD(v51)])
            {
LABEL_45:
              mlir::Block::dropAllDefinedValueUses(v33);
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 48))(a1, v33);
              v8 = 1;
              continue;
            }
          }
          else
          {
            BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v49, v33);
            if (*BucketFor != v33)
            {
              v35 = v51;
              if (v50 == v49)
                v35 = HIDWORD(v51);
              BucketFor = (const void **)&v50[8 * v35];
            }
            if (v50 == v49)
              v36 = HIDWORD(v51);
            else
              v36 = v51;
            if (BucketFor == (const void **)&v50[8 * v36])
              goto LABEL_45;
          }
          v39 = (mlir::GenericProgramPoint *)(v33 + 4);
          for (i = (mlir::GenericProgramPoint *)v33[5]; i != v39; i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
          {
            mlir::GenericProgramPoint::~GenericProgramPoint(i);
            v42 = *(unsigned int *)(v41 + 44);
            v43 = v42 & 0x7FFFFF;
            if ((v42 & 0x7FFFFF) != 0)
            {
              v44 = (v41 + 16 * ((v42 >> 23) & 1) + ((v42 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
              v45 = v59;
              v46 = 24 * v43;
              v47 = v44 + 32 * *(unsigned int *)(v41 + 40);
              do
              {
                if (v45 >= HIDWORD(v59))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v45 + 1, 8);
                  v45 = v59;
                }
                v58[v45] = v47;
                v45 = v59 + 1;
                LODWORD(v59) = v59 + 1;
                v47 += 24;
                v46 -= 24;
              }
              while (v46);
            }
          }
        }
      }
      v11 = (mlir::GenericProgramPoint *)(v10 + 24);
      for (j = *(mlir::GenericProgramPoint **)(v10 + 32); j != v11; j = (mlir::GenericProgramPoint *)*((_QWORD *)j + 1))
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(j);
        v14 = *(unsigned int *)(v13 + 44);
        v15 = v14 & 0x7FFFFF;
        if ((v14 & 0x7FFFFF) != 0)
        {
          v16 = (v13 + 16 * ((v14 >> 23) & 1) + ((v14 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
          v17 = v59;
          v18 = 24 * v15;
          v19 = v16 + 32 * *(unsigned int *)(v13 + 40);
          do
          {
            if (v17 >= HIDWORD(v59))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v17 + 1, 8);
              v17 = v59;
            }
            v58[v17] = v19;
            v17 = v59 + 1;
            LODWORD(v59) = v59 + 1;
            v19 += 24;
            v18 -= 24;
          }
          while (v18);
        }
      }
LABEL_10:
      v6 = v59;
    }
  }
LABEL_79:
  if (v58 != v60)
    free(v58);
  if (v50 != v49)
    free(v50);
  return v8 & 1;
}

void propagateLiveness(_QWORD *a1, int64x2_t *a2)
{
  uint64_t v3;
  mlir::Block *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  mlir::GenericProgramPoint **v14;
  mlir::GenericProgramPoint *v15;
  mlir::detail::OpResultImpl **v16;
  mlir::detail::OpResultImpl **j;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  mlir::Operation *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  unint64_t NextResultAtOffset;
  uint64_t v39;
  uint64_t InterfaceFor;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  char v48;
  unint64_t v49;
  __int32 v50;
  uint64_t v51;
  unsigned __int8 v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  char *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  char *v63;
  __int32 v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  __int32 v73;
  uint64_t v74;
  unsigned __int8 v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;
  _QWORD *v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  _QWORD *v86;
  __int32 v87;
  int v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  BOOL v99;
  unsigned int v100;
  uint64_t *v101;
  __int32 v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  uint64_t *v111;
  __int32 v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  uint64_t *v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  unint64_t v132;
  BOOL v133;
  __int32 v134;
  uint64_t v135;
  unsigned __int8 v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t Owner;
  __int32 v144;
  uint64_t v145;
  __int32 v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  unint64_t v151;
  uint64_t i64;
  uint64_t *v153;
  mlir::Block *v154;
  mlir::GenericProgramPoint **v155;
  mlir::GenericProgramPoint *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  const void *v164;
  void *v165;
  uint64_t v166;
  _BYTE v167[320];
  mlir::Block *v168;
  void *v169;
  const void *v170;
  void *v171;
  uint64_t v172;
  _BYTE v173[320];
  void *v174;
  void *v175;
  void *__src;
  unsigned int v177;
  uint64_t v178;
  void *v179;
  void *v180;
  void *v181;
  unsigned int v182;
  uint64_t v183;
  const char *v184;
  unint64_t v185;
  _QWORD *v186;
  _QWORD v187[5];

  v187[3] = *MEMORY[0x1E0C80C00];
  if ((_QWORD *)*a1 == a1)
    return;
  v3 = a1[1];
  if (v3)
    v4 = (mlir::Block *)(v3 - 8);
  else
    v4 = 0;
  v168 = v4;
  llvm::post_order<mlir::Block *>(&v168, &v174);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v168, &v170, (const llvm::SmallPtrSetImplBase *)&v174);
  v171 = v173;
  v172 = 0x800000000;
  v5 = v177;
  if (v177)
  {
    if (v177 < 9)
    {
      v7 = v173;
      v6 = v177;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v171, v173, v177, 40);
      v6 = v177;
      if (!v177)
      {
LABEL_11:
        LODWORD(v172) = v5;
        goto LABEL_12;
      }
      v7 = v171;
    }
    memcpy(v7, __src, 40 * v6);
    goto LABEL_11;
  }
LABEL_12:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v162, &v164, (const llvm::SmallPtrSetImplBase *)&v179);
  v165 = v167;
  v166 = 0x800000000;
  v8 = v182;
  if (v182)
  {
    if (v182 < 9uLL)
    {
      v10 = v167;
      v9 = v182;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, v167, v182, 40);
      v9 = v182;
      if (!v182)
      {
LABEL_18:
        LODWORD(v166) = v8;
        goto LABEL_19;
      }
      v10 = v165;
    }
    memcpy(v10, v181, 40 * v9);
    goto LABEL_18;
  }
LABEL_19:
  i64 = (uint64_t)a2[2].i64;
  v153 = &a2->i64[1];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  while (1)
  {
    if (v172 != v8)
      goto LABEL_31;
    if (!v8)
      break;
    v12 = v165;
    v13 = v171;
    while (*v13 == *v12 && v13[1] == v12[1] && v13[2] == v12[2] && v13[3] == v12[3] && v13[4] == v12[4])
    {
      v13 += 5;
      v12 += 5;
      if (v13 == (_QWORD *)((char *)v171 + 40 * v8))
        goto LABEL_244;
    }
LABEL_31:
    v14 = (mlir::GenericProgramPoint **)(*((_QWORD *)v171 + 5 * v172 - 5) + 32);
    v15 = *v14;
    v154 = (mlir::Block *)*((_QWORD *)v171 + 5 * v172 - 5);
    v155 = v14;
    if (*v14 != (mlir::GenericProgramPoint *)v14)
    {
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v15);
        v19 = v18;
        v20 = *(unsigned int *)(v18 + 44);
        if ((v20 & 0x7FFFFF) != 0)
        {
          v21 = ((v18 + 16 * ((v20 >> 23) & 1) + ((v20 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(v18 + 40);
          v22 = 24 * (v20 & 0x7FFFFF);
          do
          {
            propagateLiveness(v21, a2);
            v21 += 24;
            v22 -= 24;
          }
          while (v22);
        }
        if ((v23 & 1) == 0
        {
          v184 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
          v185 = 84;
          v117 = llvm::StringRef::find((uint64_t *)&v184, "DesiredTypeName = ", 0x12uLL, 0);
          if (v185 >= v117)
            v118 = v117;
          else
            v118 = v185;
          v119 = &v184[v118];
          v120 = v185 - v118;
          v121 = 18;
          if (v120 < 0x12)
            v121 = v120;
          v122 = v120 - v121;
          if (v122 >= v122 - 1)
            v123 = v122 - 1;
          else
            v123 = v122;
          v11[190] = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
        }
        v24 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v19 + 48) + 32))(*(_QWORD *)(v19 + 48), v11[190]);
        v25 = a2[2].i64[0];
        v26 = (mlir::Operation *)a2[3].u32[0];
        if ((v24 & 1) != 0)
          break;
        if (!(_DWORD)v26)
          goto LABEL_52;
        v31 = ((_DWORD)v26 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        v32 = *(_QWORD *)(v25 + 8 * v31);
        if (v32 != v19)
        {
          v33 = 1;
          while (v32 != -4096)
          {
            v34 = v31 + v33++;
            v31 = v34 & ((_DWORD)v26 - 1);
            v32 = *(_QWORD *)(v25 + 8 * v31);
            if (v32 == v19)
              goto LABEL_37;
          }
LABEL_52:
          if ((mlir::wouldOpBeTriviallyDead((void ***)v19, v26) & 1) != 0)
          {
            v35 = *(unsigned int *)(v19 + 36);
            if ((_DWORD)v35)
              v36 = v19 - 16;
            else
              v36 = 0;
            if ((_DWORD)v35)
            {
              for (i = 0; i != v35; ++i)
              {
                NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, i);
                processValue(NextResultAtOffset, a2);
              }
            }
            goto LABEL_37;
          }
          v90 = a2[3].u32[0];
          if (!v90)
            goto LABEL_183;
          v91 = a2[2].i64[0];
          v92 = (v90 - 1) & ((v19 >> 4) ^ (v19 >> 9));
          v93 = (_QWORD *)(v91 + 8 * v92);
          v94 = *v93;
          if (v19 == *v93)
          {
            v95 = 0;
LABEL_152:
            a2->i8[0] |= v95;
            goto LABEL_37;
          }
          v107 = 0;
          v108 = 1;
          while (v94 != -4096)
          {
            v95 = 0;
            if (v107)
              v109 = 0;
            else
              v109 = v94 == -8192;
            if (v109)
              v107 = v93;
            v110 = v92 + v108++;
            v92 = v110 & (v90 - 1);
            v93 = (_QWORD *)(v91 + 8 * v92);
            v94 = *v93;
            if (v19 == *v93)
              goto LABEL_152;
          }
          v111 = v107 ? v107 : v93;
          v112 = a2[2].i32[2];
          if (4 * v112 + 4 < 3 * v90)
          {
            if (v90 + ~v112 - a2[2].i32[3] <= v90 >> 3)
              goto LABEL_184;
          }
          else
          {
LABEL_183:
            v90 *= 2;
LABEL_184:
            llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(i64, v90);
            v113 = a2[2].i64[0];
            v114 = a2[3].i32[0] - 1;
            v115 = v114 & ((v19 >> 4) ^ (v19 >> 9));
            v111 = (uint64_t *)(v113 + 8 * v115);
            v116 = *v111;
            if (v19 == *v111)
            {
              v96 = v19;
              goto LABEL_149;
            }
            v128 = 0;
            v129 = 1;
            while (v116 != -4096)
            {
              if (v128)
                v130 = 0;
              else
                v130 = v116 == -8192;
              if (v130)
                v128 = v111;
              v131 = v115 + v129++;
              v115 = v131 & v114;
              v111 = (uint64_t *)(v113 + 8 * (v131 & v114));
              v116 = *v111;
              if (v19 == *v111)
              {
                v96 = v19;
                v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                v14 = v155;
                goto LABEL_149;
              }
            }
            if (v128)
              v111 = v128;
            v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            v14 = v155;
          }
          v96 = *v111;
LABEL_149:
          ++a2[2].i32[2];
          if (v96 != -4096)
            --a2[2].i32[3];
          *v111 = v19;
          v95 = 1;
          goto LABEL_152;
        }
LABEL_37:
        v15 = *(mlir::GenericProgramPoint **)v15;
        if (v15 == (mlir::GenericProgramPoint *)v14)
          goto LABEL_32;
      }
      if (!(_DWORD)v26)
        goto LABEL_166;
      v27 = ((_DWORD)v26 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      v28 = (_QWORD *)(v25 + 8 * v27);
      v29 = *v28;
      if (v19 == *v28)
      {
        v30 = 0;
        goto LABEL_65;
      }
      v97 = 0;
      v98 = 1;
      while (v29 != -4096)
      {
        v30 = 0;
        if (v97)
          v99 = 0;
        else
          v99 = v29 == -8192;
        if (v99)
          v97 = v28;
        v100 = v27 + v98++;
        v27 = v100 & ((_DWORD)v26 - 1);
        v28 = (_QWORD *)(v25 + 8 * v27);
        v29 = *v28;
        if (v19 == *v28)
          goto LABEL_65;
      }
      v101 = v97 ? v97 : v28;
      v102 = a2[2].i32[2];
      if (4 * v102 + 4 < (3 * (_DWORD)v26))
      {
        if ((int)v26 + ~v102 - a2[2].i32[3] <= v26 >> 3)
          goto LABEL_167;
      }
      else
      {
LABEL_166:
        LODWORD(v26) = 2 * (_DWORD)v26;
LABEL_167:
        llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(i64, (int)v26);
        v103 = a2[2].i64[0];
        v104 = a2[3].i32[0] - 1;
        v105 = v104 & ((v19 >> 4) ^ (v19 >> 9));
        v101 = (uint64_t *)(v103 + 8 * v105);
        v106 = *v101;
        if (v19 == *v101)
        {
LABEL_168:
          ++a2[2].i32[2];
          if (v19 == -4096)
            goto LABEL_64;
LABEL_63:
          --a2[2].i32[3];
LABEL_64:
          *v101 = v19;
          v30 = 1;
LABEL_65:
          a2->i8[0] |= v30;
          if (mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v19))
          {
            if (v19)
              InterfaceFor = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v19);
            else
              InterfaceFor = 0;
            v156 = v15;
            v158 = v19;
            v159 = InterfaceFor;
            if (v19)
            {
              v157 = *(unsigned int *)(v19 + 40);
              if ((_DWORD)v157)
              {
                v67 = 0;
                while (1)
                {
                  mlir::BranchOpInterface::getSuccessorOperands((mlir::BranchOpInterface *)&v158, v67);
                  v68 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                  v69 = v184;
                  if ((_DWORD)v184)
                    break;
LABEL_141:
                  if (v186 != v187)
                    free(v186);
                  if (++v67 == v157)
                    goto LABEL_36;
                }
                v70 = 0;
                while (2)
                {
                  v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(((v19
                                                            + 64
                                                            + 16
                                                            * (((unint64_t)*(unsigned int *)(v19 + 44) >> 23) & 1)
                                                            + (((unint64_t)*(unsigned int *)(v19 + 44) >> 21) & 0x7F8)
                                                            + 7) & 0xFFFFFFFFFFFFFFF8)
                                                          + 32 * v67
                                                          + 24)
                                              + 48)
                                  + 8 * v70);
                  v160 = v72;
                  v73 = a2[1].i32[2];
                  if (!v73)
                  {
                    v81 = 0;
                    goto LABEL_134;
                  }
                  v74 = a2->i64[1];
                  if ((v75 & 1) == 0)
                  {
                    v68 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                    if (v88)
                    {
                      v89 = llvm::hashing::detail::fixed_seed_override;
                      if (!llvm::hashing::detail::fixed_seed_override)
                        v89 = 0xFF51AFD7ED558CCDLL;
                      llvm::hashing::detail::get_execution_seed(void)::seed = v89;
                      v68 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                    }
                  }
                  v76 = 0x9DDFEA08EB382D69 * ((v68[19] + 8 * v72) ^ HIDWORD(v72));
                  v77 = 0x9DDFEA08EB382D69 * (HIDWORD(v72) ^ (v76 >> 47) ^ v76);
                  v78 = (-348639895 * ((v77 >> 47) ^ v77)) & (v73 - 1);
                  v79 = (_QWORD *)(v74 + 8 * v78);
                  v80 = *v79;
                  if (v160 == *v79)
                  {
                    v71 = 0;
LABEL_112:
                    a2->i8[0] |= v71;
                    if (++v70 == v69)
                      goto LABEL_141;
                    continue;
                  }
                  break;
                }
                v82 = 0;
                v83 = 1;
                while (v80 != -4096)
                {
                  v71 = 0;
                  if (v82)
                    v84 = 0;
                  else
                    v84 = v80 == -8192;
                  if (v84)
                    v82 = v79;
                  v85 = v78 + v83++;
                  v78 = v85 & (v73 - 1);
                  v79 = (_QWORD *)(v74 + 8 * v78);
                  v80 = *v79;
                  if (v160 == *v79)
                    goto LABEL_112;
                }
                if (v82)
                  v86 = v82;
                else
                  v86 = v79;
                v81 = a2[1].u32[2];
                v87 = a2[1].i32[0];
                if (4 * v87 + 4 < 3 * v81)
                {
                  if (v81 + ~v87 - a2[1].i32[1] <= v81 >> 3)
                    goto LABEL_135;
                  ++a2[1].i32[0];
                  if (*v86 == -4096)
                  {
LABEL_111:
                    *v86 = v160;
                    v71 = 1;
                    goto LABEL_112;
                  }
                }
                else
                {
LABEL_134:
                  v81 *= 2;
LABEL_135:
                  llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v153, v81);
                  v161 = 0;
                  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v153, &v160, &v161);
                  v68 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                  v86 = v161;
                  ++a2[1].i32[0];
                  if (*v86 == -4096)
                    goto LABEL_111;
                }
                --a2[1].i32[1];
                goto LABEL_111;
              }
LABEL_36:
              v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
              v14 = v155;
              v15 = v156;
              goto LABEL_37;
            }
          }
          else
          {
            v156 = v15;
            v158 = 0;
            v159 = 0;
          }
          mlir::SuccessorRange::SuccessorRange((unint64_t *)&v184, (Operation *)v19);
          v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
          v42 = v185;
          if (v185)
          {
            v43 = 0;
            v44 = v184;
            while (1)
            {
              v45 = *(_QWORD *)&v44[32 * v43 + 24];
              v46 = *(unint64_t **)(v45 + 48);
              v47 = *(unint64_t **)(v45 + 56);
              if (v47 != v46)
                break;
LABEL_71:
              if (++v43 == v42)
                goto LABEL_36;
            }
            while (2)
            {
              v49 = *v46;
              v161 = (_QWORD *)*v46;
              v50 = a2[1].i32[2];
              if (!v50)
              {
                v58 = 0;
                goto LABEL_97;
              }
              v51 = a2->i64[1];
              if ((v52 & 1) == 0)
              {
                v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                if (v65)
                {
                  v66 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override)
                    v66 = 0xFF51AFD7ED558CCDLL;
                  llvm::hashing::detail::get_execution_seed(void)::seed = v66;
                  v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
                }
              }
              v53 = 0x9DDFEA08EB382D69 * ((v41[19] + 8 * v49) ^ HIDWORD(v49));
              v54 = 0x9DDFEA08EB382D69 * (HIDWORD(v49) ^ (v53 >> 47) ^ v53);
              v55 = (-348639895 * ((v54 >> 47) ^ v54)) & (v50 - 1);
              v56 = (char *)(v51 + 8 * v55);
              v57 = *(_QWORD *)v56;
              if (v161 == *(_QWORD **)v56)
              {
                v48 = 0;
LABEL_75:
                a2->i8[0] |= v48;
                if (++v46 == v47)
                  goto LABEL_71;
                continue;
              }
              break;
            }
            v59 = 0;
            v60 = 1;
            while (v57 != -4096)
            {
              v48 = 0;
              if (v59)
                v61 = 0;
              else
                v61 = v57 == -8192;
              if (v61)
                v59 = v56;
              v62 = v55 + v60++;
              v55 = v62 & (v50 - 1);
              v56 = (char *)(v51 + 8 * v55);
              v57 = *(_QWORD *)v56;
              if (v161 == *(_QWORD **)v56)
                goto LABEL_75;
            }
            if (v59)
              v63 = v59;
            else
              v63 = v56;
            v58 = a2[1].u32[2];
            v64 = a2[1].i32[0];
            if (4 * v64 + 4 < 3 * v58)
            {
              if (v58 + ~v64 - a2[1].i32[1] <= v58 >> 3)
                goto LABEL_98;
              ++a2[1].i32[0];
              if (*(_QWORD *)v63 == -4096)
              {
LABEL_74:
                *(_QWORD *)v63 = v161;
                v48 = 1;
                goto LABEL_75;
              }
            }
            else
            {
LABEL_97:
              v58 *= 2;
LABEL_98:
              llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v153, v58);
              v184 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v153, (unint64_t *)&v161, &v184);
              v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
              v63 = (char *)v184;
              ++a2[1].i32[0];
              if (*(_QWORD *)v63 == -4096)
                goto LABEL_74;
            }
            --a2[1].i32[1];
            goto LABEL_74;
          }
          goto LABEL_36;
        }
        v124 = 0;
        v125 = 1;
        while (v106 != -4096)
        {
          if (v124)
            v126 = 0;
          else
            v126 = v106 == -8192;
          if (v126)
            v124 = v101;
          v127 = v105 + v125++;
          v105 = v127 & v104;
          v101 = (uint64_t *)(v103 + 8 * (v127 & v104));
          v106 = *v101;
          if (v19 == *v101)
            goto LABEL_168;
        }
        if (v124)
          v101 = v124;
      }
      v39 = *v101;
      ++a2[2].i32[2];
      if (v39 != -4096)
        goto LABEL_63;
      goto LABEL_64;
    }
LABEL_32:
    if (!mlir::Block::isEntryBlock(v154))
    {
      v16 = (mlir::detail::OpResultImpl **)*((_QWORD *)v154 + 6);
      for (j = (mlir::detail::OpResultImpl **)*((_QWORD *)v154 + 7); v16 != j; ++v16)
      {
        v132 = (unint64_t)*v16;
        if (*v16)
          v133 = (*((_QWORD *)*v16 + 1) & 7) == 7;
        else
          v133 = 1;
        if (v133)
        {
          v134 = a2[1].i32[2];
          if (v134)
          {
            v135 = a2->i64[1];
            if ((v136 & 1) == 0
            {
              v151 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v151 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v151;
            }
            v137 = 0x9DDFEA08EB382D69
                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v132) ^ HIDWORD(v132));
            v138 = 0x9DDFEA08EB382D69 * (HIDWORD(v132) ^ (v137 >> 47) ^ v137);
            v139 = (-348639895 * ((v138 >> 47) ^ v138)) & (v134 - 1);
            v140 = *(_QWORD *)(v135 + 8 * v139);
            if (v132 == v140)
              continue;
            v141 = 1;
            while (v140 != -4096)
            {
              v142 = v139 + v141++;
              v139 = v142 & (v134 - 1);
              v140 = *(_QWORD *)(v135 + 8 * v139);
              if (v132 == v140)
                goto LABEL_221;
            }
          }
        }
        else
        {
          Owner = mlir::detail::OpResultImpl::getOwner(*v16);
          v144 = a2[3].i32[0];
          if (v144)
          {
            v145 = a2[2].i64[0];
            v146 = v144 - 1;
            v147 = ((Owner >> 4) ^ (Owner >> 9)) & v146;
            v148 = *(_QWORD *)(v145 + 8 * v147);
            if (v148 == Owner)
              continue;
            v149 = 1;
            while (v148 != -4096)
            {
              v150 = v147 + v149++;
              v147 = v150 & v146;
              v148 = *(_QWORD *)(v145 + 8 * v147);
              if (v148 == Owner)
                goto LABEL_221;
            }
          }
        }
        processValue(v132, a2);
LABEL_221:
        ;
      }
    }
    LODWORD(v172) = v172 - 1;
    if ((_DWORD)v172)
      llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)&v168);
    v8 = v166;
  }
LABEL_244:
  if (v165 != v167)
    free(v165);
  if (v163 != v162)
    free(v163);
  if (v171 != v173)
    free(v171);
  if (v169 != v168)
    free(v169);
  if (v181 != &v183)
    free(v181);
  if (v180 != v179)
    free(v180);
  if (__src != &v178)
    free(__src);
  if (v175 != v174)
    free(v175);
}

uint64_t deleteDeadness(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  mlir::Block *v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  mlir::GenericProgramPoint **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t InterfaceFor;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  mlir::GenericProgramPoint *v40;
  mlir::GenericProgramPoint *v41;
  mlir::GenericProgramPoint *v42;
  mlir::GenericProgramPoint *v43;
  unsigned int *v44;
  unsigned int *v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t j;
  _QWORD **NextResultAtOffset;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *i;
  uint64_t v62;
  _QWORD *v64;
  _QWORD *v65;
  mlir::GenericProgramPoint **v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  const void *v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[320];
  mlir::Block *v80;
  void *v81;
  const void *v82;
  void *__dst;
  uint64_t v84;
  _BYTE v85[320];
  void *v86;
  void *v87;
  void *__src;
  unsigned int v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  _QWORD v100[5];

  v100[3] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = a2;
    v6 = a1;
    v7 = 0;
    v64 = &a2[3 * a3];
    while ((_QWORD *)*v5 == v5)
    {
LABEL_3:
      v5 += 3;
      if (v5 == v64)
        return v7 & 1;
    }
    v8 = (_QWORD *)v5[1];
    v69 = v8 != v5 && v8[1] == (_QWORD)v5;
    if (v8)
      v9 = (mlir::Block *)(v8 - 1);
    else
      v9 = 0;
    v80 = v9;
    llvm::post_order<mlir::Block *>(&v80, &v86);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v80, &v82, (const llvm::SmallPtrSetImplBase *)&v86);
    __dst = v85;
    v84 = 0x800000000;
    v10 = v89;
    if (!v89)
    {
LABEL_17:
      v65 = v5;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v74, &v76, (const llvm::SmallPtrSetImplBase *)&v91);
      v77 = v79;
      v78 = 0x800000000;
      v13 = v94;
      if (!v94)
        goto LABEL_24;
      v14 = v79;
      v15 = v94;
      if (v94 >= 9uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v94, 40);
        v15 = v94;
        if (!v94)
        {
LABEL_22:
          LODWORD(v78) = v13;
          while (1)
          {
LABEL_24:
            if (v84 == v13)
            {
              if (!v13)
              {
LABEL_88:
                if (v77 != v79)
                  free(v77);
                v5 = v65;
                if (v75 != v74)
                  free(v75);
                if (__dst != v85)
                  free(__dst);
                if (v81 != v80)
                  free(v81);
                if (v93 != &v95)
                  free(v93);
                if (v92 != v91)
                  free(v92);
                if (__src != &v90)
                  free(__src);
                if (v87 != v86)
                  free(v87);
                for (i = *(_QWORD **)(v65[1] + 8); i != v65; i = (_QWORD *)i[1])
                {
                  if (i)
                    v62 = (uint64_t)(i - 1);
                  else
                    v62 = 0;
                  v86 = (void *)a4;
                }
                goto LABEL_3;
              }
              v16 = v77;
              v17 = __dst;
              while (*v17 == *v16 && v17[1] == v16[1] && v17[2] == v16[2] && v17[3] == v16[3] && v17[4] == v16[4])
              {
                v17 += 5;
                v16 += 5;
                if (v17 == (_QWORD *)((char *)__dst + 40 * v13))
                  goto LABEL_88;
              }
            }
            v18 = (mlir::GenericProgramPoint **)*((_QWORD *)__dst + 5 * v84 - 5);
            if (!v69)
            {
              mlir::Block::getTerminator(v18);
              v20 = v19;
              v68 = v7;
              v67 = v18;
              v70 = v19;
              if (mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v19))
              {
                if (v20)
                {
                  InterfaceFor = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v20);
                  v72 = v20;
                  v73 = InterfaceFor;
                  v22 = *(_DWORD *)(v70 + 40);
                  if (v22)
                  {
                    v23 = 0;
                    v71 = *(unsigned int *)(v70 + 40);
                    while (1)
                    {
                      v24 = (v22 + ~(_DWORD)v23);
                      mlir::BranchOpInterface::getSuccessorOperands((mlir::BranchOpInterface *)&v72, v24);
                      v25 = (v98 + v96);
                      if (v98 + v96)
                        break;
LABEL_58:
                      if (v99 != v100)
                        free(v99);
                      ++v23;
                      v22 = v71;
                      if (v23 == v71)
                        goto LABEL_60;
                    }
                    v26 = 0;
                    v27 = *(_QWORD *)(((v70
                                      + 64
                                      + 16 * (((unint64_t)*(unsigned int *)(v70 + 44) >> 23) & 1)
                                      + (((unint64_t)*(unsigned int *)(v70 + 44) >> 21) & 0x7F8)
                                      + 7) & 0xFFFFFFFFFFFFFFF8)
                                    + 32 * v24
                                    + 24);
                    while (1)
                    {
                      v28 = v25 + ~(_DWORD)v26;
                      v29 = *(_DWORD *)(a4 + 24);
                      if (v29)
                      {
                        v30 = *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * v28);
                        v31 = *(_QWORD *)(a4 + 8);
                        if ((v32 & 1) == 0
                        {
                          v39 = llvm::hashing::detail::fixed_seed_override;
                          if (!llvm::hashing::detail::fixed_seed_override)
                            v39 = 0xFF51AFD7ED558CCDLL;
                          llvm::hashing::detail::get_execution_seed(void)::seed = v39;
                        }
                        v33 = 0x9DDFEA08EB382D69
                            * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v30) ^ HIDWORD(v30));
                        v34 = 0x9DDFEA08EB382D69 * (HIDWORD(v30) ^ (v33 >> 47) ^ v33);
                        v35 = (-348639895 * ((v34 >> 47) ^ v34)) & (v29 - 1);
                        v36 = *(_QWORD *)(v31 + 8 * v35);
                        if (v30 == v36)
                          goto LABEL_46;
                        v37 = 1;
                        while (v36 != -4096)
                        {
                          v38 = v35 + v37++;
                          v35 = v38 & (v29 - 1);
                          v36 = *(_QWORD *)(v31 + 8 * v35);
                          if (v30 == v36)
                            goto LABEL_46;
                        }
                      }
                      mlir::MutableOperandRange::erase((mlir::MutableOperandRange *)&v97, v28 - v96, 1u);
LABEL_46:
                      if (++v26 == v25)
                        goto LABEL_58;
                    }
                  }
                }
                else
                {
                  v72 = 0;
                  v73 = 0;
                }
              }
              else
              {
                v72 = 0;
                v73 = 0;
              }
LABEL_60:
              v6 = a1;
              v18 = v67;
              v7 = v68;
            }
            v42 = v18[4];
            v41 = (mlir::GenericProgramPoint *)(v18 + 4);
            v40 = v42;
            if (v42 != v41)
            {
              do
              {
                while (1)
                {
                  v43 = *(mlir::GenericProgramPoint **)v40;
                  mlir::GenericProgramPoint::~GenericProgramPoint(v40);
                  v45 = v44;
                  v46 = *(_DWORD *)(a4 + 48);
                  if (v46)
                    break;
LABEL_76:
                  v55 = v44[9];
                  if ((_DWORD)v55)
                    v56 = (uint64_t)(v44 - 4);
                  else
                    v56 = 0;
                  if ((_DWORD)v55)
                  {
                    for (j = 0; j != v55; ++j)
                    {
                      NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v56, j);
                      while (1)
                      {
                        v59 = *NextResultAtOffset;
                        if (!*NextResultAtOffset)
                          break;
                        v60 = (_QWORD *)v59[1];
                        if (v60)
                        {
                          *v60 = *v59;
                          if (*v59)
                            *(_QWORD *)(*v59 + 8) = v59[1];
                        }
                        *v59 = 0;
                        v59[1] = 0;
                        v59[3] = 0;
                      }
                    }
                  }
                  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v6 + 40))(v6, v45);
                  v7 = 1;
                  v40 = v43;
                  if (v43 == v41)
                    goto LABEL_62;
                }
                v47 = *(_QWORD *)(a4 + 32);
                v48 = v46 - 1;
                v49 = ((v44 >> 4) ^ (v44 >> 9)) & v48;
                v50 = *(unsigned int **)(v47 + 8 * v49);
                if (v50 != v44)
                {
                  v53 = 1;
                  while (v50 != (unsigned int *)-4096)
                  {
                    v54 = v49 + v53++;
                    v49 = v54 & v48;
                    v50 = *(unsigned int **)(v47 + 8 * v49);
                    if (v50 == v44)
                      goto LABEL_67;
                  }
                  goto LABEL_76;
                }
LABEL_67:
                v51 = v44[11];
                if ((v51 & 0x7FFFFF) != 0)
                  v52 = (((unint64_t)&v44[4 * ((v51 >> 23) & 1) + 17] + ((v51 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * v44[10];
                else
                  v52 = 0;
                v7 |= deleteDeadness(v6, v52) != 0;
                v40 = v43;
              }
              while (v43 != v41);
            }
LABEL_62:
            LODWORD(v84) = v84 - 1;
            if ((_DWORD)v84)
              llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)&v80);
            v13 = v78;
          }
        }
        v14 = v77;
      }
      memcpy(v14, v93, 40 * v15);
      goto LABEL_22;
    }
    v11 = v85;
    v12 = v89;
    if (v89 >= 9uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v85, v89, 40);
      v12 = v89;
      if (!v89)
      {
LABEL_16:
        LODWORD(v84) = v10;
        goto LABEL_17;
      }
      v11 = __dst;
    }
    memcpy(v11, __src, 40 * v12);
    goto LABEL_16;
  }
  LOBYTE(v7) = 0;
  return v7 & 1;
}

void mlir::simplifyRegions(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  llvm *v8[2];
  uint64_t v9;
  int v10;
  llvm *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  mlir::eraseUnreachableBlocks(a1, (uint64_t)a2, a3);
  v9 = 0;
  v8[1] = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  v13 = 0;
  if (a3)
  {
    do
    {
      LOBYTE(v8[0]) = 0;
      v6 = 24 * a3;
      v7 = a2;
      do
      {
        propagateLiveness(v7, (int64x2_t *)v8);
        v7 += 3;
        v6 -= 24;
      }
      while (v6);
    }
    while (LOBYTE(v8[0]));
  }
  else
  {
    LOBYTE(v8[0]) = 0;
  }
  deleteDeadness(a1, a2, a3, (uint64_t)v8);
  llvm::deallocate_buffer(v11, (void *)(8 * v13));
}

void llvm::post_order<mlir::Block *>(mlir::Block **a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  _OWORD v6[4];
  void *v7[2];
  _OWORD v8[20];
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[41];

  v13[40] = *MEMORY[0x1E0C80C00];
  llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>::po_iterator((uint64_t)&v10, *a1);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v7[0] = 0;
  memset(v6, 0, sizeof(v6));
  v3 = (char *)v6 + 8;
  v4 = (char *)v6 + 8;
  v5 = 8;
  v7[1] = (char *)v8 + 8;
  DWORD1(v8[0]) = 8;
  llvm::make_range<llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v10, (uint64_t)&v3, a2);
  if (v7[1] != (char *)v8 + 8)
    free(v7[1]);
  if (v4 != v3)
    free(v4);
  if (v12 != v13)
    free(v12);
  if (v11 != v10)
    free(v11);
}

unint64_t processValue(unint64_t result, int64x2_t *a2)
{
  _QWORD *v2;
  mlir::detail::OpResultImpl *v4;
  uint64_t *v5;
  int64x2_t *v6;
  _QWORD *v7;
  unint64_t OperandNumber;
  uint64_t InterfaceFor;
  char v10;
  __int32 v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  mlir::detail::OpResultImpl *Owner;

  v2 = *(_QWORD **)result;
  if (!*(_QWORD *)result)
    return result;
  v4 = (mlir::detail::OpResultImpl *)result;
  v5 = &a2->i64[1];
  v6 = a2 + 2;
  while (1)
  {
    v7 = (_QWORD *)v2[2];
    OperandNumber = mlir::OpOperand::getOperandNumber((unint64_t)v2);
    result = mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>(v7 + 6);
    if ((_DWORD)result)
    {
      result = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v7);
      if (result)
      {
        if (v7)
        {
          InterfaceFor = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v7);
          v21 = v7;
          v22 = InterfaceFor;
          result = mlir::BranchOpInterface::getSuccessorBlockArgument((mlir::BranchOpInterface *)&v21, OperandNumber);
          if (v10)
          {
            v20 = result;
            Owner = 0;
            result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v5, &v20, &Owner);
            if (!(_DWORD)result)
              goto LABEL_17;
          }
        }
        else
        {
          result = 0;
          v21 = 0;
          v22 = 0;
        }
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    v11 = a2[3].i32[0];
    if (v11)
      break;
LABEL_17:
    v2 = (_QWORD *)*v2;
    if (!v2)
      return result;
  }
  v12 = v2[2];
  v13 = a2[2].i64[0];
  v14 = v11 - 1;
  v15 = ((v12 >> 4) ^ (v12 >> 9)) & v14;
  v16 = *(_QWORD *)(v13 + 8 * v15);
  if (v16 != v12)
  {
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v15 + v17++;
      v15 = v18 & v14;
      v16 = *(_QWORD *)(v13 + 8 * v15);
      if (v16 == v12)
        goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_19:
  if (!v4 || (*((_QWORD *)v4 + 1) & 7) == 7)
  {
    Owner = v4;
    v21 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v5, (unint64_t *)&Owner, &v21);
    if ((result & 1) != 0)
    {
      v19 = 0;
    }
    else
    {
      result = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v5, (uint64_t)&Owner, (unint64_t *)&Owner, v21);
      *(_QWORD *)result = Owner;
      v19 = 1;
    }
  }
  else
  {
    Owner = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getOwner(v4);
    result = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v6, (uint64_t *)&Owner, (uint64_t)&v21);
    v19 = v23;
  }
  a2->i8[0] |= v19;
  return result;
}

uint64_t llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<deleteDeadness(mlir::RewriterBase &,llvm::MutableArrayRef<mlir::Region>,`anonymous namespace'::LiveMap &)::$_0>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v4 = a2;
  v5 = 0;
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)(v2 + 8), &v4, &v5) ^ 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>,mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::LookupBucketFor<mlir::SuccessorRange>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  unsigned int v48;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>(*a2, 0, *a2, a2[1]);
    v8 = v4 - 1;
    v9 = (v4 - 1) & v7;
    v11 = *a2;
    v10 = a2[1];
    if (v10)
    {
      if (v11 == -8192)
      {
        v12 = 0;
        v13 = 1;
        v14 = (_QWORD *)(v6 + 40 * v9);
        v15 = *v14;
        if (*v14 == -4096)
          goto LABEL_11;
LABEL_5:
        if (v15 != -8192)
        {
          if (v10 != v14[1])
            goto LABEL_11;
          v16 = (_QWORD *)(v15 + 24);
          v17 = -8168;
          v18 = a2[1];
          while (*(_QWORD *)v17 == *v16)
          {
            v16 += 4;
            v17 += 32;
            if (!--v18)
              goto LABEL_33;
          }
LABEL_11:
          while (v15 != -4096)
          {
            if (v12)
              v19 = 0;
            else
              v19 = v15 == -8192;
            if (v19)
              v12 = v14;
            v20 = v9 + v13++;
            v9 = v20 & v8;
            v14 = (_QWORD *)(v6 + 40 * v9);
            v15 = *v14;
            if (*v14 != -4096)
              goto LABEL_5;
          }
LABEL_86:
          result = 0;
          if (v12)
            v14 = v12;
          *a3 = v14;
          return result;
        }
      }
      else
      {
        if (v11 != -4096)
        {
          v12 = 0;
          v37 = (_QWORD *)(v11 + 24);
          v38 = 1;
          v14 = (_QWORD *)(v6 + 40 * v9);
          v39 = *v14;
          if ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
            goto LABEL_68;
LABEL_63:
          if (v10 != v14[1])
            goto LABEL_68;
          v40 = (_QWORD *)(v39 + 24);
          v41 = v37;
          v42 = a2[1];
          while (*v41 == *v40)
          {
            v40 += 4;
            v41 += 4;
            result = 1;
            if (!--v42)
              goto LABEL_20;
          }
LABEL_68:
          while (v39 != -4096)
          {
            if (v12)
              v43 = 0;
            else
              v43 = v39 == -8192;
            if (v43)
              v12 = v14;
            v44 = v9 + v38++;
            v9 = v44 & v8;
            v14 = (_QWORD *)(v6 + 40 * v9);
            v39 = *v14;
            if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_63;
          }
          goto LABEL_86;
        }
        v12 = 0;
        v26 = 1;
        v14 = (_QWORD *)(v6 + 40 * v9);
        v27 = *v14;
        if (*v14 == -8192)
          goto LABEL_42;
LABEL_36:
        if (v27 != -4096)
        {
          if (v10 != v14[1])
            goto LABEL_42;
          v28 = (_QWORD *)(v27 + 24);
          v29 = -4072;
          v30 = a2[1];
          while (*(_QWORD *)v29 == *v28)
          {
            v28 += 4;
            v29 += 32;
            result = 1;
            if (!--v30)
              goto LABEL_20;
          }
LABEL_42:
          while (v27 != -4096)
          {
            if (v12)
              v31 = 0;
            else
              v31 = v27 == -8192;
            if (v31)
              v12 = v14;
            v32 = v9 + v26++;
            v9 = v32 & v8;
            v14 = (_QWORD *)(v6 + 40 * v9);
            v27 = *v14;
            if (*v14 != -8192)
              goto LABEL_36;
          }
          goto LABEL_86;
        }
      }
    }
    else if (v11 == -8192)
    {
      v12 = 0;
      v22 = 1;
      v14 = (_QWORD *)(v6 + 40 * v9);
      v23 = *v14;
      if (*v14 == -4096)
        goto LABEL_25;
LABEL_23:
      if (v23 != -8192 && v14[1])
      {
LABEL_25:
        while (v23 != -4096)
        {
          if (v12)
            v24 = 0;
          else
            v24 = v23 == -8192;
          if (v24)
            v12 = v14;
          v25 = v9 + v22++;
          v9 = v25 & v8;
          v14 = (_QWORD *)(v6 + 40 * v9);
          v23 = *v14;
          if (*v14 != -4096)
            goto LABEL_23;
        }
        goto LABEL_86;
      }
    }
    else if (v11 == -4096)
    {
      v12 = 0;
      v33 = 1;
      v14 = (_QWORD *)(v6 + 40 * v9);
      v34 = *v14;
      if (*v14 == -8192)
        goto LABEL_54;
LABEL_52:
      if (v34 != -4096 && v14[1])
      {
LABEL_54:
        while (v34 != -4096)
        {
          if (v12)
            v35 = 0;
          else
            v35 = v34 == -8192;
          if (v35)
            v12 = v14;
          v36 = v9 + v33++;
          v9 = v36 & v8;
          v14 = (_QWORD *)(v6 + 40 * v9);
          v34 = *v14;
          if (*v14 != -8192)
            goto LABEL_52;
        }
        goto LABEL_86;
      }
    }
    else
    {
      v12 = 0;
      v45 = 1;
      v14 = (_QWORD *)(v6 + 40 * v9);
      v46 = *v14;
      if ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_78;
LABEL_77:
      if (v14[1])
      {
LABEL_78:
        while (v46 != -4096)
        {
          if (v12)
            v47 = 0;
          else
            v47 = v46 == -8192;
          if (v47)
            v12 = v14;
          v48 = v9 + v45++;
          v9 = v48 & v8;
          v14 = (_QWORD *)(v6 + 40 * v9);
          v46 = *v14;
          if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_77;
        }
        goto LABEL_86;
      }
    }
LABEL_33:
    result = 1;
    *a3 = v14;
    return result;
  }
  v14 = 0;
  result = 0;
LABEL_20:
  *a3 = v14;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char v53;
  uint64_t v55;
  __int128 *v56;
  char v57;
  char v58;
  __int128 *v59;
  __int128 *v60;
  __int128 *v61;
  BOOL v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[2];

  v95[1] = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0)
  {
    v83 = a1;
    v84 = a4;
    v85 = a3;
    v86 = a2;
    a2 = v86;
    a3 = v85;
    a4 = v84;
    v88 = v87;
    a1 = v83;
    if (v88)
    {
      v89 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v89 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v89;
      a2 = v86;
      a1 = v83;
      a3 = v85;
      a4 = v84;
    }
  }
  if (a1 == a3)
  {
    if (a2 == a4)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)&v91 = *(_QWORD *)(a1 + 32 * a2 + 24);
      if (a2 + 1 == a4)
      {
        v14 = 8;
        ++a2;
      }
      else
      {
        *((_QWORD *)&v91 + 1) = *(_QWORD *)(a1 + 32 * (a2 + 1) + 24);
        if (a2 + 2 == a4)
        {
          v14 = 16;
          a2 += 2;
        }
        else
        {
          *(_QWORD *)&v92 = *(_QWORD *)(a1 + 32 * (a2 + 2) + 24);
          if (a2 + 3 == a4)
          {
            v14 = 24;
            a2 += 3;
          }
          else
          {
            *((_QWORD *)&v92 + 1) = *(_QWORD *)(a1 + 32 * (a2 + 3) + 24);
            if (a2 + 4 == a4)
            {
              v14 = 32;
              a2 += 4;
            }
            else
            {
              *(_QWORD *)&v93 = *(_QWORD *)(a1 + 32 * (a2 + 4) + 24);
              if (a2 + 5 == a4)
              {
                v14 = 40;
                a2 += 5;
              }
              else
              {
                *((_QWORD *)&v93 + 1) = *(_QWORD *)(a1 + 32 * (a2 + 5) + 24);
                if (a2 + 6 == a4)
                {
                  v14 = 48;
                  a2 += 6;
                }
                else
                {
                  *(_QWORD *)&v94 = *(_QWORD *)(a1 + 32 * (a2 + 6) + 24);
                  if (a2 + 7 == a4)
                  {
                    v14 = 56;
                    a2 += 7;
                  }
                  else
                  {
                    *((_QWORD *)&v94 + 1) = *(_QWORD *)(a1 + 32 * (a2 + 7) + 24);
                    a2 += 8;
                    v14 = 64;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (a2 == a4)
      return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v91, v14, llvm::hashing::detail::get_execution_seed(void)::seed);
    v7 = *((_QWORD *)&v91 + 1);
    v6 = v91;
    v9 = *((_QWORD *)&v92 + 1);
    v8 = v92;
    v11 = *((_QWORD *)&v93 + 1);
    v10 = v93;
    v13 = *((_QWORD *)&v94 + 1);
    v12 = v94;
  }
  else
  {
    v5 = (_QWORD *)(a1 + 32 * a2);
    v6 = v5[3];
    *(_QWORD *)&v91 = v6;
    v7 = v5[7];
    *((_QWORD *)&v91 + 1) = v7;
    v8 = v5[11];
    *(_QWORD *)&v92 = v8;
    v9 = v5[15];
    *((_QWORD *)&v92 + 1) = v9;
    v10 = v5[19];
    *(_QWORD *)&v93 = v10;
    v11 = v5[23];
    *((_QWORD *)&v93 + 1) = v11;
    v12 = v5[27];
    *(_QWORD *)&v94 = v12;
    v13 = v5[31];
    *((_QWORD *)&v94 + 1) = v13;
    a2 += 8;
  }
  v16 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v17 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
  v19 = 0x9DDFEA08EB382D69
      * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                  * (v18 ^ (0xB492B66FBE98F273
                                                                          * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v18 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
  v20 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
  v21 = (0xB492B66FBE98F273 * __ROR8__(v17 + llvm::hashing::detail::get_execution_seed(void)::seed + v7, 37)) ^ v20;
  v22 = v11
      + v17
      - 0x4B6D499041670D8DLL
      * __ROR8__(v12+ llvm::hashing::detail::get_execution_seed(void)::seed- 0x4B6D499041670D8DLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
  v23 = 0xB492B66FBE98F273 * __ROR8__(v18 - 0x622015F714C7D297 * (v16 ^ (v16 >> 47)), 33);
  v24 = v6 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
  v25 = v24 + v7 + v8;
  v26 = __ROR8__(v25, 44) + v24 + __ROR8__(v21 + v18 + v24 + v9, 21);
  v27 = v25 + v9;
  v28 = v22 + v8;
  v29 = v20 + v10 + v23;
  v30 = v11 + v12 + v29;
  v31 = __ROR8__(v30, 44) + v29 + __ROR8__(v28 + v13 + v29, 21);
  v32 = v30 + v13;
  if (a1 != a3 || a2 != a4)
  {
    v90 = (char *)&v92 + 8;
    v33 = 64;
    while (1)
    {
      if (a1 == a3 && a2 == a4)
      {
        v37 = 0;
        a2 = a4;
      }
      else
      {
        *(_QWORD *)&v91 = *(_QWORD *)(a1 + 32 * a2 + 24);
        v38 = a2 + 1;
        if (a1 == a3 && v38 == a4)
        {
          v39 = 0;
          v37 = 8;
          ++a2;
          v40 = (char *)&v91 + 8;
        }
        else
        {
          *((_QWORD *)&v91 + 1) = *(_QWORD *)(a1 + 32 * v38 + 24);
          v41 = a2 + 2;
          if (a1 == a3 && v41 == a4)
          {
            v39 = 8;
            v37 = 16;
            a2 += 2;
            v40 = (char *)&v92;
          }
          else
          {
            *(_QWORD *)&v92 = *(_QWORD *)(a1 + 32 * v41 + 24);
            v42 = a2 + 3;
            if (a1 == a3 && v42 == a4)
            {
              v39 = 16;
              v37 = 24;
              a2 += 3;
              v40 = v90;
            }
            else
            {
              *((_QWORD *)&v92 + 1) = *(_QWORD *)(a1 + 32 * v42 + 24);
              v43 = a2 + 4;
              if (a1 == a3 && v43 == a4)
              {
                v39 = 24;
                v37 = 32;
                a2 += 4;
                v40 = (char *)&v93;
              }
              else
              {
                *(_QWORD *)&v93 = *(_QWORD *)(a1 + 32 * v43 + 24);
                v44 = a2 + 5;
                if (a1 == a3 && v44 == a4)
                {
                  v39 = 32;
                  v37 = 40;
                  a2 += 5;
                  v40 = (char *)&v93 + 8;
                }
                else
                {
                  *((_QWORD *)&v93 + 1) = *(_QWORD *)(a1 + 32 * v44 + 24);
                  v45 = a2 + 6;
                  if (a1 == a3 && v45 == a4)
                  {
                    v39 = 40;
                    v37 = 48;
                    a2 += 6;
                    v40 = (char *)&v94;
                  }
                  else
                  {
                    *(_QWORD *)&v94 = *(_QWORD *)(a1 + 32 * v45 + 24);
                    v46 = a2 + 7;
                    if (a1 == a3 && v46 == a4)
                    {
                      v39 = 48;
                      v37 = 56;
                      a2 += 7;
                      v40 = (char *)&v94 + 8;
                    }
                    else
                    {
                      *((_QWORD *)&v94 + 1) = *(_QWORD *)(a1 + 32 * v46 + 24);
                      a2 += 8;
                      v39 = 56;
                      v37 = 64;
                      v40 = (char *)v95;
                    }
                  }
                }
              }
            }
          }
        }
        if ((v37 & 0x38) == 0)
          goto LABEL_82;
        v47 = 56 - v39;
        v48 = v37;
        if (v37 != 56 - v39)
        {
          do
          {
            v55 = v48;
            v48 = v47;
            v47 = v55 % v47;
          }
          while (v47);
          if (v48)
          {
            v56 = (__int128 *)((char *)&v91 + v48);
            do
            {
              v58 = *((_BYTE *)v56 - 1);
              v56 = (__int128 *)((char *)v56 - 1);
              v57 = v58;
              v59 = (__int128 *)((char *)v56 + v37);
              v60 = v56;
              do
              {
                v61 = v60;
                v60 = v59;
                *(_BYTE *)v61 = *(_BYTE *)v59;
                v62 = v37 < (char *)v95 - (char *)v59;
                v63 = (char *)&v91 + v37 - ((char *)v95 - (char *)v59);
                v59 = (__int128 *)((char *)v59 + v37);
                if (!v62)
                  v59 = (__int128 *)v63;
              }
              while (v59 != v56);
              *(_BYTE *)v60 = v57;
            }
            while (v56 != &v91);
          }
          goto LABEL_82;
        }
        v49 = v39 | 7;
        if (55 - v39 < (v39 | 7uLL))
          v49 = 55 - v39;
        v50 = (char *)&v91;
        if (&v91 < (__int128 *)((char *)&v91 + v39 + v49 + 9))
        {
          v51 = v37;
          if (v40 < (char *)&v91 + v49 + 1)
            goto LABEL_60;
        }
        if (v49 >= 0x1F)
        {
          v65 = v49 + 1;
          v64 = (v49 + 1) & 0x60;
          v66 = (__int128 *)((char *)&v91 + v37);
          v67 = v91;
          v68 = v92;
          v69 = *(__int128 *)((char *)&v91 + v37 + 16);
          v91 = *(__int128 *)((char *)&v91 + v37);
          v92 = v69;
          *v66 = v67;
          v66[1] = v68;
          if (v64 != 32)
          {
            v70 = (__int128 *)((char *)&v93 + v37);
            v71 = v93;
            v72 = v94;
            v73 = *(__int128 *)((char *)&v93 + v37 + 16);
            v93 = *(__int128 *)((char *)&v93 + v37);
            v94 = v73;
            *v70 = v71;
            v70[1] = v72;
          }
          if (v65 == v64)
            goto LABEL_82;
          if ((v65 & 0x18) == 0)
          {
            v50 = (char *)&v91 + v64;
            v51 = v37 + v64;
LABEL_60:
            v52 = v50 + 1;
            do
            {
              v53 = *(v52 - 1);
              *(v52 - 1) = *((_BYTE *)&v91 + v51);
              *((_BYTE *)&v91 + v51) = v53;
              if (v52 == v40)
                break;
              ++v52;
            }
            while (v51++ != 63);
            goto LABEL_82;
          }
        }
        else
        {
          v64 = 0;
        }
        v74 = (uint64_t *)((char *)&v91 + v64);
        v75 = v49 - v64 + 1;
        do
        {
          v76 = *v74;
          *v74 = v74[(unint64_t)v37 / 8];
          v74[(unint64_t)v37 / 8] = v76;
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
LABEL_82:
      v77 = v22 + v27 + v23 + *((_QWORD *)&v91 + 1);
      v22 = *((_QWORD *)&v93 + 1) + v27 - 0x4B6D499041670D8DLL * __ROR8__(v22 + v26 + v94, 42);
      v78 = v21 + v32;
      v79 = v91 - 0x4B6D499041670D8DLL * v26;
      v80 = v79 + *((_QWORD *)&v91 + 1) + v92;
      v21 = (0xB492B66FBE98F273 * __ROR8__(v77, 37)) ^ v31;
      v26 = __ROR8__(v80, 44) + v79 + __ROR8__(v21 + v32 + v79 + *((_QWORD *)&v92 + 1), 21);
      v23 = 0xB492B66FBE98F273 * __ROR8__(v78, 33);
      v81 = v23 + v31 + v93;
      v82 = *((_QWORD *)&v93 + 1) + v94 + v81;
      v27 = v80 + *((_QWORD *)&v92 + 1);
      v31 = __ROR8__(v22 + v92 + v81 + *((_QWORD *)&v94 + 1), 21) + v81 + __ROR8__(v82, 44);
      v32 = v82 + *((_QWORD *)&v94 + 1);
      v33 += v37;
      if (a1 == a3 && a2 == a4)
        goto LABEL_27;
    }
  }
  v33 = 64;
LABEL_27:
  v34 = 0x9DDFEA08EB382D69
      * (v31 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v31)));
  v35 = v23 - 0x4B6D499041670D8DLL * (v33 ^ (v33 >> 47)) - 0x622015F714C7D297 * (v34 ^ (v34 >> 47));
  v36 = 0x9DDFEA08EB382D69
      * (v35 ^ (v21
              - 0x4B6D499041670D8DLL * (v22 ^ (v22 >> 47))
              - 0x622015F714C7D297
              * ((0x9DDFEA08EB382D69
                * (v32 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v32)))) ^ ((0x9DDFEA08EB382D69 * (v32 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v32)))) >> 47))));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v35 ^ (v36 >> 47) ^ v36)) ^ ((0x9DDFEA08EB382D69 * (v35 ^ (v36 >> 47) ^ v36)) >> 47));
}

_OWORD *llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 40 * v3;
    llvm::DenseMapBase<llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>,mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 40 * v11 - 40;
    if (v12 < 0x28)
    {
      v13 = result;
LABEL_12:
      v17 = (_OWORD *)((char *)result + 40 * v11);
      do
      {
        *v13 = xmmword_181235230;
        v13 = (_OWORD *)((char *)v13 + 40);
      }
      while (v13 != v17);
      return result;
    }
    v14 = v12 / 0x28 + 1;
    v13 = (_OWORD *)((char *)result + 40 * (v14 & 0xFFFFFFFFFFFFFFELL));
    v15 = v14 & 0xFFFFFFFFFFFFFFELL;
    v16 = result;
    do
    {
      *v16 = xmmword_181235230;
      *(_OWORD *)((char *)v16 + 40) = xmmword_181235230;
      v16 += 5;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>,mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  void *v16;
  _OWORD *v17;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      v9 = *(_OWORD **)a1;
LABEL_7:
      v13 = (_OWORD *)(v7 + 40 * v6);
      do
      {
        *v9 = xmmword_181235230;
        v9 = (_OWORD *)((char *)v9 + 40);
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x28 + 1;
    v9 = (_OWORD *)(v7 + 40 * (v10 & 0xFFFFFFFFFFFFFFELL));
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_OWORD **)a1;
    do
    {
      *v12 = xmmword_181235230;
      *(_OWORD *)((char *)v12 + 40) = xmmword_181235230;
      v12 += 5;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>,mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::LookupBucketFor<mlir::SuccessorRange>((uint64_t *)a1, (uint64_t *)v4, &v17);
        v14 = v17;
        *v17 = *(_OWORD *)v4;
        *((_QWORD *)v14 + 3) = 0x100000000;
        *((_QWORD *)v14 + 2) = v14 + 2;
        v15 = (uint64_t)(v14 + 1);
        if (*(_DWORD *)(v4 + 24))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v15, v4 + 16);
        ++*(_DWORD *)(a1 + 8);
        v16 = *(void **)(v4 + 16);
        if ((void *)(v4 + 32) != v16)
          free(v16);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::OperationEquivalence::ignoreValueEquivalence()
{
  return 1;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(mlir::Value,mlir::Value)>::callback_fn<mlir::LogicalResult ()(mlir::Value,mlir::Value)>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::Value,8u>>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  unint64_t v20;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,8u>,false>::growAndAssign(a1, a2, a3);
    return;
  }
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= a2)
    v7 = a2;
  else
    v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)a1;
    while (1)
    {
      if (v8 == a3)
        goto LABEL_9;
      v9 = *(unsigned int *)(a3 + 8);
      v10 = *(unsigned int *)(v8 + 8);
      if (v10 >= v9)
      {
        if ((_DWORD)v9)
          memmove(*(void **)v8, *(const void **)a3, 8 * v9);
        goto LABEL_8;
      }
      if (*(_DWORD *)(v8 + 12) >= v9)
      {
        if ((_DWORD)v10)
        {
          memmove(*(void **)v8, *(const void **)a3, 8 * v10);
          v11 = *(unsigned int *)(a3 + 8);
          if (v10 != v11)
            goto LABEL_21;
        }
        else
        {
          v10 = 0;
          v11 = *(unsigned int *)(a3 + 8);
          if (*(_DWORD *)(a3 + 8))
LABEL_21:
            memcpy((void *)(*(_QWORD *)v8 + 8 * v10), (const void *)(*(_QWORD *)a3 + 8 * v10), *(_QWORD *)a3 + 8 * v11 - (*(_QWORD *)a3 + 8 * v10));
        }
      }
      else
      {
        *(_DWORD *)(v8 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v9, 8);
        v10 = 0;
        v11 = *(unsigned int *)(a3 + 8);
        if (*(_DWORD *)(a3 + 8))
          goto LABEL_21;
      }
LABEL_8:
      *(_DWORD *)(v8 + 8) = v9;
LABEL_9:
      v8 += 80;
      if (!--v7)
      {
        v6 = *(unsigned int *)(a1 + 8);
        break;
      }
    }
  }
  v12 = v6 - a2;
  if (v6 < a2)
  {
    v13 = (_QWORD *)(*(_QWORD *)a1 + 80 * v6);
    while (1)
    {
      v16 = v13 + 2;
      *v13 = v13 + 2;
      v13[1] = 0x800000000;
      if (v13 == (_QWORD *)a3)
        goto LABEL_28;
      v17 = *(unsigned int *)(a3 + 8);
      if (!*(_DWORD *)(a3 + 8))
        goto LABEL_28;
      if (v17 < 9)
      {
        v14 = *(unsigned int *)(a3 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v13 + 2, *(unsigned int *)(a3 + 8), 8);
        v14 = *(unsigned int *)(a3 + 8);
        if (!(_DWORD)v14)
          goto LABEL_27;
        v16 = (void *)*v13;
      }
      memcpy(v16, *(const void **)a3, 8 * v14);
LABEL_27:
      *((_DWORD *)v13 + 2) = v17;
LABEL_28:
      v13 += 10;
      if (__CFADD__(v12++, 1))
        goto LABEL_39;
    }
  }
  if (v6 > a2)
  {
    v18 = 80 * v6;
    v19 = (void **)(v18 + *(_QWORD *)a1 - 80);
    v20 = 80 * a2 - v18;
    do
    {
      if (v19 + 2 != *v19)
        free(*v19);
      v19 -= 10;
      v20 += 80;
    }
    while (v20);
  }
LABEL_39:
  *(_DWORD *)(a1 + 8) = a2;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,8u>,false>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t i;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;

  v19 = 0;
  v6 = (char *)(a1 + 16);
  v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 80, &v19);
  v8 = v7;
  if (a2)
  {
    v9 = v7;
    for (i = a2; i; --i)
    {
      v12 = v9 + 2;
      *v9 = v9 + 2;
      v9[1] = 0x800000000;
      if (v9 == (_QWORD *)a3)
        goto LABEL_6;
      v13 = *(unsigned int *)(a3 + 8);
      if (!*(_DWORD *)(a3 + 8))
        goto LABEL_6;
      if (v13 < 9)
      {
        v11 = *(unsigned int *)(a3 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v9 + 2, *(unsigned int *)(a3 + 8), 8);
        v11 = *(unsigned int *)(a3 + 8);
        if (!(_DWORD)v11)
          goto LABEL_5;
        v12 = (void *)*v9;
      }
      memcpy(v12, *(const void **)a3, 8 * v11);
LABEL_5:
      *((_DWORD *)v9 + 2) = v13;
LABEL_6:
      v9 += 10;
    }
  }
  v14 = *(char **)a1;
  v15 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v15)
  {
    v16 = 80 * v15;
    do
    {
      v17 = *(char **)&v14[v16 - 80];
      if (&v14[v16 - 64] != v17)
        free(v17);
      v16 -= 80;
    }
    while (v16);
    v14 = *(char **)a1;
  }
  v18 = v19;
  if (v14 != v6)
    free(v14);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v18;
}

_QWORD *llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,16u>,true,llvm::GraphTraits<mlir::Block *>>::df_iterator(_QWORD *a1, void *a2, llvm::SmallPtrSetImplBase *this)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;

  a1[1] = 0;
  v5 = a1 + 1;
  *a1 = this;
  a1[2] = 0;
  a1[3] = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6 != *(_QWORD *)this)
    goto LABEL_2;
  v11 = *((unsigned int *)this + 5);
  if (!(_DWORD)v11)
  {
LABEL_22:
    if (v11 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v11 + 1;
      *(_QWORD *)(v6 + 8 * v11) = a2;
LABEL_3:
      v9 = (_BYTE *)a1[2];
      v8 = a1[3];
      if ((unint64_t)v9 >= v8)
      {
        v15 = (_BYTE *)*v5;
        v16 = (uint64_t)&v9[-*v5] >> 5;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59)
          abort();
        v18 = v8 - (_QWORD)v15;
        if (v18 >> 4 > v17)
          v17 = v18 >> 4;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
          v19 = 0x7FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = (char *)operator new(32 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[32 * v16];
        *(_QWORD *)v21 = a2;
        v21[8] = 0;
        v21[24] = 0;
        v10 = v21 + 32;
        if (v9 != v15)
        {
          do
          {
            v22 = *((_OWORD *)v9 - 1);
            *((_OWORD *)v21 - 2) = *((_OWORD *)v9 - 2);
            *((_OWORD *)v21 - 1) = v22;
            v21 -= 32;
            v9 -= 32;
          }
          while (v9 != v15);
          v9 = (_BYTE *)*v5;
        }
        a1[1] = v21;
        a1[2] = v10;
        a1[3] = &v20[32 * v19];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_QWORD *)v9 = a2;
        v9[8] = 0;
        v10 = v9 + 32;
        v9[24] = 0;
      }
      a1[2] = v10;
      return a1;
    }
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
    if (!v7)
      return a1;
    goto LABEL_3;
  }
  v12 = 0;
  v13 = 8 * v11;
  v14 = (_QWORD *)*((_QWORD *)this + 1);
  while ((void *)*v14 != a2)
  {
    if (*v14 == -2)
      v12 = v14;
    ++v14;
    v13 -= 8;
    if (!v13)
    {
      if (!v12)
        goto LABEL_22;
      *v12 = a2;
      --*((_DWORD *)this + 6);
      goto LABEL_3;
    }
  }
  return a1;
}

void llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,16u>,true,llvm::GraphTraits<mlir::Block *>>::toNext(llvm::SmallPtrSetImplBase **a1)
{
  uint64_t v2;
  mlir::Block *v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  llvm::SmallPtrSetImplBase *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm::SmallPtrSetImplBase *v16;
  unint64_t v17;
  llvm::SmallPtrSetImplBase *v18;
  llvm::SmallPtrSetImplBase *v19;
  llvm::SmallPtrSetImplBase *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD v28[2];

  v2 = (uint64_t)a1[2];
  while (2)
  {
    v3 = *(mlir::Block **)(v2 - 32);
    if (!*(_BYTE *)(v2 - 8))
    {
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v28, *(mlir::Block **)(v2 - 32));
      *(_QWORD *)(v2 - 24) = v28[0];
      *(_QWORD *)(v2 - 16) = 0;
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v28, v3);
      v6 = *(_QWORD *)(v2 - 24);
      v7 = *(_QWORD *)(v2 - 16);
      if (v6 == v28[0] && v7 == v28[1])
        break;
      *(_QWORD *)(v2 - 16) = v7 + 1;
      v9 = *(const void **)(v6 + 32 * v7 + 24);
      v10 = *a1;
      v11 = *((_QWORD *)*a1 + 1);
      if (v11 != *(_QWORD *)*a1)
        goto LABEL_4;
      v12 = *((unsigned int *)v10 + 5);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = 8 * v12;
        v15 = (_QWORD *)*((_QWORD *)*a1 + 1);
        do
        {
          if ((const void *)*v15 == v9)
          {
            v5 = 0;
            goto LABEL_5;
          }
          if (*v15 == -2)
            v13 = v15;
          ++v15;
          v14 -= 8;
        }
        while (v14);
        if (!v13)
          goto LABEL_19;
        *v13 = v9;
        --*((_DWORD *)v10 + 6);
        v5 = 1;
        goto LABEL_5;
      }
LABEL_19:
      if (v12 < *((_DWORD *)v10 + 4))
      {
        *((_DWORD *)v10 + 5) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v9;
        v5 = 1;
      }
      else
      {
LABEL_4:
        llvm::SmallPtrSetImplBase::insert_imp_big(v10, v9);
        v5 = v4;
      }
LABEL_5:
      if (v5)
      {
        v18 = a1[2];
        v17 = (unint64_t)a1[3];
        if ((unint64_t)v18 >= v17)
        {
          v20 = a1[1];
          v21 = (v18 - v20) >> 5;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 59)
            abort();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 4 > v22)
            v22 = v23 >> 4;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
            v24 = 0x7FFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 59)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v25 = (char *)operator new(32 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[32 * v21];
          *(_QWORD *)v26 = v9;
          v26[8] = 0;
          v26[24] = 0;
          v19 = (llvm::SmallPtrSetImplBase *)(v26 + 32);
          if (v18 != v20)
          {
            do
            {
              v27 = *((_OWORD *)v18 - 1);
              *((_OWORD *)v26 - 2) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v26 - 1) = v27;
              v26 -= 32;
              v18 = (llvm::SmallPtrSetImplBase *)((char *)v18 - 32);
            }
            while (v18 != v20);
            v18 = a1[1];
          }
          a1[1] = (llvm::SmallPtrSetImplBase *)v26;
          a1[2] = v19;
          a1[3] = (llvm::SmallPtrSetImplBase *)&v25[32 * v24];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v18 = v9;
          *((_BYTE *)v18 + 8) = 0;
          v19 = (llvm::SmallPtrSetImplBase *)((char *)v18 + 32);
          *((_BYTE *)v18 + 24) = 0;
        }
        a1[2] = v19;
        return;
      }
    }
    v16 = a1[1];
    v2 = (uint64_t)a1[2] - 32;
    a1[2] = (llvm::SmallPtrSetImplBase *)v2;
    if (v16 != (llvm::SmallPtrSetImplBase *)v2)
      continue;
    break;
  }
}

uint64_t mlir::OffsetSizeAndStrideOpInterface::getMixedOffsets(mlir::OffsetSizeAndStrideOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 64))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::OffsetSizeAndStrideOpInterface::getMixedSizes(mlir::OffsetSizeAndStrideOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 72))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::OffsetSizeAndStrideOpInterface::getMixedStrides(mlir::OffsetSizeAndStrideOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 80))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::OffsetSizeAndStrideOpInterface::getDynamicSize(mlir::OffsetSizeAndStrideOpInterface *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*((_QWORD *)this + 1) + 168))(*((_QWORD *)this + 1), *(_QWORD *)this, a2);
}

uint64_t mlir::verifyListOfOperandsOrIntegers(uint64_t *a1, const void **a2, const char *a3, unsigned int a4, int64x2_t *a5, const char *a6, uint64_t a7, uint64_t a8)
{
  const char *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  const void ***v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  const void ***v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  int64x2_t *v44;
  int64x2_t v45;
  int64x2_t v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  const char *v50;
  const void ***v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  const void ***v56;
  char *v57;
  char *v58;
  __int128 v59;
  const void ***v60;
  char *v61;
  char *v62;
  __int128 v63;
  _QWORD **v64;
  _QWORD **v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  _QWORD v88[4];
  __int16 v89;
  const void **v90;
  const char *v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  _BYTE v95[16];
  void *v96;
  unsigned int v97;
  unsigned int v98;
  _BYTE v99[96];
  void *v100;
  _QWORD *v101;
  void *__p;
  _QWORD **v103;
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v11 = (const char *)a4;
  if (a6 == (const char *)a4)
  {
    if (!a6)
    {
      v13 = 0;
      goto LABEL_36;
    }
    v12 = (unint64_t)(a6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 >= 3)
    {
      v42 = v12 + 1;
      v43 = (v12 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v14 = &a5->i64[v43];
      v44 = a5 + 1;
      v45 = 0uLL;
      v46 = vdupq_n_s64(0x8000000000000000);
      v47 = v43;
      v48 = 0uLL;
      do
      {
        v45 = vsubq_s64(v45, vceqq_s64(v44[-1], v46));
        v48 = vsubq_s64(v48, vceqq_s64(*v44, v46));
        v44 += 2;
        v47 -= 4;
      }
      while (v47);
      v13 = vaddvq_s64(vaddq_s64(v48, v45));
      if (v42 == v43)
        goto LABEL_36;
    }
    else
    {
      v13 = 0;
      v14 = (uint64_t *)a5;
    }
    do
    {
      v49 = *v14++;
      if (v49 == 0x8000000000000000)
        ++v13;
    }
    while (v14 != (uint64_t *)((char *)a5 + 8 * (_QWORD)a6));
LABEL_36:
    v50 = (const char *)v13;
    if (a8 == v13)
      return 1;
    v88[0] = "expected ";
    v89 = 259;
    mlir::Operation::emitError(a1, (uint64_t)v88, (uint64_t)&v94);
    if (v94)
    {
      LODWORD(v90) = 5;
      v91 = v50;
      v51 = &v90;
      v52 = (char *)v96;
      if (v97 >= v98)
      {
        v74 = v97 + 1;
        if (v96 <= &v90 && (char *)v96 + 24 * v97 > (char *)&v90)
        {
          v83 = (char *)&v90 - (_BYTE *)v96;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v74, 24);
          v52 = (char *)v96;
          v51 = (const void ***)((char *)v96 + v83);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v74, 24);
          v51 = &v90;
          v52 = (char *)v96;
        }
      }
      v53 = &v52[24 * v97];
      v54 = *(_OWORD *)v51;
      *((_QWORD *)v53 + 2) = v51[2];
      *(_OWORD *)v53 = v54;
      v55 = ++v97;
      if (v94)
      {
        LODWORD(v90) = 3;
        v91 = " dynamic ";
        v92 = 9;
        v56 = &v90;
        v57 = (char *)v96;
        if (v55 >= v98)
        {
          v75 = v55 + 1;
          v76 = (char *)v96 + 24 * v55 > (char *)&v90;
          if (v96 <= &v90 && v76)
          {
            v84 = (char *)&v90 - (_BYTE *)v96;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v75, 24);
            v57 = (char *)v96;
            v56 = (const void ***)((char *)v96 + v84);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v75, 24);
            v56 = &v90;
            v57 = (char *)v96;
          }
        }
        v58 = &v57[24 * v97];
        v59 = *(_OWORD *)v56;
        *((_QWORD *)v58 + 2) = v56[2];
        *(_OWORD *)v58 = v59;
        ++v97;
        if (v94)
        {
          v93 = 261;
          v90 = a2;
          v91 = a3;
          mlir::Diagnostic::operator<<((uint64_t)v95, &v90);
          if (v94)
          {
            LODWORD(v90) = 3;
            v91 = " values";
            v92 = 7;
            v60 = &v90;
            v61 = (char *)v96;
            if (v97 >= v98)
            {
              v80 = v97 + 1;
              if (v96 <= &v90 && (char *)v96 + 24 * v97 > (char *)&v90)
              {
                v87 = (char *)&v90 - (_BYTE *)v96;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v80, 24);
                v61 = (char *)v96;
                v60 = (const void ***)((char *)v96 + v87);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v80, 24);
                v60 = &v90;
                v61 = (char *)v96;
              }
            }
            v62 = &v61[24 * v97];
            v63 = *(_OWORD *)v60;
            *((_QWORD *)v62 + 2) = v60[2];
            *(_OWORD *)v62 = v63;
            ++v97;
          }
        }
      }
    }
    v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v94);
    if (v94)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v94);
    if (v104)
    {
      v64 = (_QWORD **)__p;
      if (__p)
      {
        v65 = v103;
        v66 = __p;
        if (v103 != __p)
        {
          do
            v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
          while (v65 != v64);
          v66 = __p;
        }
        v103 = v64;
        operator delete(v66);
      }
      v37 = v100;
      if (!v100)
        goto LABEL_62;
      v67 = v101;
      v39 = v100;
      if (v101 == v100)
      {
LABEL_61:
        v101 = v37;
        operator delete(v39);
LABEL_62:
        if (v96 != v99)
          free(v96);
        return v33;
      }
      do
      {
        v69 = (void *)*--v67;
        v68 = v69;
        *v67 = 0;
        if (v69)
          operator delete[](v68);
      }
      while (v67 != v37);
LABEL_60:
      v39 = v100;
      goto LABEL_61;
    }
    return v33;
  }
  v88[0] = "expected ";
  v89 = 259;
  mlir::Operation::emitError(a1, (uint64_t)v88, (uint64_t)&v94);
  if (v94)
  {
    LODWORD(v90) = 5;
    v91 = v11;
    v15 = &v90;
    v16 = (char *)v96;
    if (v97 >= v98)
    {
      v71 = v97 + 1;
      if (v96 <= &v90 && (char *)v96 + 24 * v97 > (char *)&v90)
      {
        v81 = (char *)&v90 - (_BYTE *)v96;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v71, 24);
        v16 = (char *)v96;
        v15 = (const void ***)((char *)v96 + v81);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v71, 24);
        v15 = &v90;
        v16 = (char *)v96;
      }
    }
    v17 = &v16[24 * v97];
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v17 + 2) = v15[2];
    *(_OWORD *)v17 = v18;
    v19 = ++v97;
    if (v94)
    {
      LODWORD(v90) = 3;
      v91 = " ";
      v92 = 1;
      v20 = &v90;
      v21 = (char *)v96;
      if (v19 >= v98)
      {
        v72 = v19 + 1;
        v73 = (char *)v96 + 24 * v19 > (char *)&v90;
        if (v96 <= &v90 && v73)
        {
          v82 = (char *)&v90 - (_BYTE *)v96;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v72, 24);
          v21 = (char *)v96;
          v20 = (const void ***)((char *)v96 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v72, 24);
          v20 = &v90;
          v21 = (char *)v96;
        }
      }
      v22 = &v21[24 * v97];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = v20[2];
      *(_OWORD *)v22 = v23;
      ++v97;
      if (v94)
      {
        v93 = 261;
        v90 = a2;
        v91 = a3;
        mlir::Diagnostic::operator<<((uint64_t)v95, &v90);
        if (v94)
        {
          LODWORD(v90) = 3;
          v91 = " values, got ";
          v92 = 13;
          v24 = &v90;
          v25 = (char *)v96;
          if (v97 >= v98)
          {
            v77 = v97 + 1;
            if (v96 <= &v90 && (char *)v96 + 24 * v97 > (char *)&v90)
            {
              v85 = (char *)&v90 - (_BYTE *)v96;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v77, 24);
              v25 = (char *)v96;
              v24 = (const void ***)((char *)v96 + v85);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v77, 24);
              v24 = &v90;
              v25 = (char *)v96;
            }
          }
          v26 = &v25[24 * v97];
          v27 = *(_OWORD *)v24;
          *((_QWORD *)v26 + 2) = v24[2];
          *(_OWORD *)v26 = v27;
          v28 = ++v97;
          if (v94)
          {
            LODWORD(v90) = 5;
            v91 = a6;
            v29 = &v90;
            v30 = (char *)v96;
            if (v28 >= v98)
            {
              v78 = v28 + 1;
              v79 = (char *)v96 + 24 * v28 > (char *)&v90;
              if (v96 <= &v90 && v79)
              {
                v86 = (char *)&v90 - (_BYTE *)v96;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v78, 24);
                v30 = (char *)v96;
                v29 = (const void ***)((char *)v96 + v86);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v78, 24);
                v29 = &v90;
                v30 = (char *)v96;
              }
            }
            v31 = &v30[24 * v97];
            v32 = *(_OWORD *)v29;
            *((_QWORD *)v31 + 2) = v29[2];
            *(_OWORD *)v31 = v32;
            ++v97;
          }
        }
      }
    }
  }
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v94);
  if (v94)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v94);
  if (v104)
  {
    v34 = (_QWORD **)__p;
    if (__p)
    {
      v35 = v103;
      v36 = __p;
      if (v103 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v103 = v34;
      operator delete(v36);
    }
    v37 = v100;
    if (!v100)
      goto LABEL_62;
    v38 = v101;
    v39 = v100;
    if (v101 == v100)
      goto LABEL_61;
    do
    {
      v41 = (void *)*--v38;
      v40 = v41;
      *v38 = 0;
      if (v41)
        operator delete[](v40);
    }
    while (v38 != v37);
    goto LABEL_60;
  }
  return v33;
}

uint64_t mlir::detail::verifyOffsetSizeAndStrideOp(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  _BOOL4 v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  unsigned int v38;
  int64x2_t *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  unint64_t v43;
  int64x2_t *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  unint64_t v48;
  int64x2_t *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  unint64_t v53;
  const char **v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  const char **v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  int *v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  int *v76;
  char *v77;
  char *v78;
  __int128 v79;
  _QWORD **v80;
  _QWORD **v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  _QWORD **v90;
  _QWORD **v91;
  void *v92;
  _QWORD *v93;
  void *v94;
  void *v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  _QWORD **v100;
  _QWORD **v101;
  void *v102;
  _QWORD *v103;
  void *v104;
  void *v105;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  BOOL v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  _QWORD v131[4];
  __int16 v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136[2];
  unint64_t v137[2];
  unint64_t v138[2];
  void *v139;
  int v140;
  uint64_t v141;
  void *v142;
  unsigned int v143;
  unsigned int v144;
  _BYTE v145[96];
  void *v146;
  _QWORD *v147;
  void *__p;
  _QWORD **v149;
  char v150;
  _QWORD *v151;
  unint64_t v152;
  _QWORD v153[4];
  char *v154;
  unsigned int v155;
  _BYTE v156[16];
  __int16 v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 8))(a2, a1);
  v6 = v5;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(a2 + 64))(&v139, a2, a1);
  if (v140 == 1 && (_DWORD)v4 == 1)
  {
    v9 = 0;
  }
  else
  {
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t *))(a2 + 64))(&v154, a2, a1);
    v8 = v155;
    (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t *))(a2 + 72))(&v151, a2, a1);
    v9 = v8 != v152;
    if (v151 != v153)
      free(v151);
    if (v154 != v156)
      free(v154);
  }
  if (v139 != &v141)
    free(v139);
  if (v9)
  {
    v131[0] = "expected mixed offsets rank to match mixed sizes rank (";
    v132 = 259;
    mlir::Operation::emitError(a1, (uint64_t)v131, (uint64_t)&v139);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t *))(a2 + 64))(&v154, a2, a1);
    if (v139)
    {
      LODWORD(v151) = 5;
      v152 = v155;
      v10 = (char *)&v151;
      v11 = (char *)v142;
      if (v143 >= v144)
      {
        v107 = v143 + 1;
        if (v142 <= &v151 && (char *)v142 + 24 * v143 > (char *)&v151)
        {
          v121 = (char *)&v151 - (_BYTE *)v142;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v107, 24);
          v11 = (char *)v142;
          v10 = (char *)v142 + v121;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v107, 24);
          v10 = (char *)&v151;
          v11 = (char *)v142;
        }
      }
      v12 = &v11[24 * v143];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      v14 = ++v143;
      if (v139)
      {
        LODWORD(v151) = 3;
        v152 = (unint64_t)" vs ";
        v153[0] = 4;
        v15 = (char *)&v151;
        v16 = (char *)v142;
        if (v14 >= v144)
        {
          v109 = v14 + 1;
          v110 = (char *)v142 + 24 * v14 > (char *)&v151;
          if (v142 <= &v151 && v110)
          {
            v123 = (char *)&v151 - (_BYTE *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v109, 24);
            v16 = (char *)v142;
            v15 = (char *)v142 + v123;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v109, 24);
            v15 = (char *)&v151;
            v16 = (char *)v142;
          }
        }
        v17 = &v16[24 * v143];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        ++v143;
      }
    }
    (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t *))(a2 + 72))(&v151, a2, a1);
    if (v139)
    {
      v133 = 5;
      v134 = v152;
      v19 = &v133;
      v20 = (char *)v142;
      if (v143 >= v144)
      {
        v108 = v143 + 1;
        if (v142 <= &v133 && (char *)v142 + 24 * v143 > (char *)&v133)
        {
          v122 = (char *)&v133 - (_BYTE *)v142;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v108, 24);
          v20 = (char *)v142;
          v19 = (int *)((char *)v142 + v122);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v108, 24);
          v19 = &v133;
          v20 = (char *)v142;
        }
      }
      v21 = &v20[24 * v143];
      v22 = *(_OWORD *)v19;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v21 = v22;
      v23 = ++v143;
      if (v139)
      {
        v133 = 3;
        v134 = (unint64_t)") so the rank of the result type is well-formed.";
        v135 = 48;
        v24 = &v133;
        v25 = (char *)v142;
        if (v23 >= v144)
        {
          v111 = v23 + 1;
          v112 = (char *)v142 + 24 * v23 > (char *)&v133;
          if (v142 <= &v133 && v112)
          {
            v124 = (char *)&v133 - (_BYTE *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v111, 24);
            v25 = (char *)v142;
            v24 = (int *)((char *)v142 + v124);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v111, 24);
            v24 = &v133;
            v25 = (char *)v142;
          }
        }
        v26 = &v25[24 * v143];
        v27 = *(_OWORD *)v24;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
        *(_OWORD *)v26 = v27;
        ++v143;
      }
    }
    v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v139);
    if (v151 != v153)
      free(v151);
    if (v154 != v156)
      free(v154);
    if (v139)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v139);
    if (v150)
    {
      v29 = (_QWORD **)__p;
      if (__p)
      {
        v30 = v149;
        v31 = __p;
        if (v149 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v149 = v29;
        operator delete(v31);
      }
      v32 = v146;
      if (!v146)
        goto LABEL_124;
      v33 = v147;
      v34 = v146;
      if (v147 == v146)
      {
LABEL_123:
        v147 = v32;
        operator delete(v34);
LABEL_124:
        if (v142 != v145)
          free(v142);
        return v28;
      }
      do
      {
        v36 = (void *)*--v33;
        v35 = v36;
        *v33 = 0;
        if (v36)
          operator delete[](v35);
      }
      while (v33 != v32);
LABEL_122:
      v34 = v146;
      goto LABEL_123;
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(a2 + 72))(&v139, a2, a1);
    v37 = v140;
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t *))(a2 + 80))(&v154, a2, a1);
    v38 = v155;
    if (v154 != v156)
      free(v154);
    if (v139 != &v141)
      free(v139);
    if (v37 == v38)
    {
      v39 = (int64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 40))(a2, a1);
      v41 = v40;
      v42 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 16))(a2, a1);
      mlir::ValueRange::ValueRange(v138, v42, v43);
      if (!mlir::verifyListOfOperandsOrIntegers(a1, (const void **)"offset", (const char *)6, v4, v39, v41, v138[0], v138[1]))return 0;
      v44 = (int64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 48))(a2, a1);
      v46 = v45;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 24))(a2, a1);
      mlir::ValueRange::ValueRange(v137, v47, v48);
      if (!mlir::verifyListOfOperandsOrIntegers(a1, (const void **)"size", (const char *)4, HIDWORD(v4), v44, v46, v137[0], v137[1]))return 0;
      v49 = (int64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 56))(a2, a1);
      v51 = v50;
      v52 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 32))(a2, a1);
      mlir::ValueRange::ValueRange(v136, v52, v53);
      if (!mlir::verifyListOfOperandsOrIntegers(a1, (const void **)"stride", (const char *)6, v6, v49, v51, v136[0], v136[1]))return 0;
      v54 = (const char **)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 40))(a2, a1);
      if (v55)
      {
        v56 = 8 * v55;
        while (1)
        {
          v57 = *v54;
          if ((unint64_t)*v54 >= 0x8000000000000001)
            break;
          ++v54;
          v56 -= 8;
          if (!v56)
            goto LABEL_53;
        }
        v154 = "expected offsets to be non-negative, but got ";
        v157 = 259;
        mlir::Operation::emitError(a1, (uint64_t)&v154, (uint64_t)&v139);
        if (v139)
        {
          LODWORD(v151) = 2;
          v152 = (unint64_t)v57;
          v86 = (char *)&v151;
          v87 = (char *)v142;
          if (v143 >= v144)
          {
            v119 = v143 + 1;
            if (v142 <= &v151 && (char *)v142 + 24 * v143 > (char *)&v151)
            {
              v129 = (char *)&v151 - (_BYTE *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v119, 24);
              v87 = (char *)v142;
              v86 = (char *)v142 + v129;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v119, 24);
              v86 = (char *)&v151;
              v87 = (char *)v142;
            }
          }
          v88 = &v87[24 * v143];
          v89 = *(_OWORD *)v86;
          *((_QWORD *)v88 + 2) = *((_QWORD *)v86 + 2);
          *(_OWORD *)v88 = v89;
          ++v143;
        }
        v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v139);
        if (v139)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v139);
        if (v150)
        {
          v90 = (_QWORD **)__p;
          if (__p)
          {
            v91 = v149;
            v92 = __p;
            if (v149 != __p)
            {
              do
                v91 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v91 - 1);
              while (v91 != v90);
              v92 = __p;
            }
            v149 = v90;
            operator delete(v92);
          }
          v32 = v146;
          if (!v146)
            goto LABEL_124;
          v93 = v147;
          v34 = v146;
          if (v147 == v146)
            goto LABEL_123;
          do
          {
            v95 = (void *)*--v93;
            v94 = v95;
            *v93 = 0;
            if (v95)
              operator delete[](v94);
          }
          while (v93 != v32);
          goto LABEL_122;
        }
      }
      else
      {
LABEL_53:
        v58 = (const char **)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 48))(a2, a1);
        if (!v59)
          return 1;
        v60 = 8 * v59;
        while (1)
        {
          v61 = *v58;
          if ((unint64_t)*v58 >= 0x8000000000000001)
            break;
          ++v58;
          v28 = 1;
          v60 -= 8;
          if (!v60)
            return v28;
        }
        v154 = "expected sizes to be non-negative, but got ";
        v157 = 259;
        mlir::Operation::emitError(a1, (uint64_t)&v154, (uint64_t)&v139);
        if (v139)
        {
          LODWORD(v151) = 2;
          v152 = (unint64_t)v61;
          v96 = (char *)&v151;
          v97 = (char *)v142;
          if (v143 >= v144)
          {
            v120 = v143 + 1;
            if (v142 <= &v151 && (char *)v142 + 24 * v143 > (char *)&v151)
            {
              v130 = (char *)&v151 - (_BYTE *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v120, 24);
              v97 = (char *)v142;
              v96 = (char *)v142 + v130;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v120, 24);
              v96 = (char *)&v151;
              v97 = (char *)v142;
            }
          }
          v98 = &v97[24 * v143];
          v99 = *(_OWORD *)v96;
          *((_QWORD *)v98 + 2) = *((_QWORD *)v96 + 2);
          *(_OWORD *)v98 = v99;
          ++v143;
        }
        v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v139);
        if (v139)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v139);
        if (v150)
        {
          v100 = (_QWORD **)__p;
          if (__p)
          {
            v101 = v149;
            v102 = __p;
            if (v149 != __p)
            {
              do
                v101 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v101 - 1);
              while (v101 != v100);
              v102 = __p;
            }
            v149 = v100;
            operator delete(v102);
          }
          v32 = v146;
          if (!v146)
            goto LABEL_124;
          v103 = v147;
          v34 = v146;
          if (v147 == v146)
            goto LABEL_123;
          do
          {
            v105 = (void *)*--v103;
            v104 = v105;
            *v103 = 0;
            if (v105)
              operator delete[](v104);
          }
          while (v103 != v32);
          goto LABEL_122;
        }
      }
    }
    else
    {
      v131[0] = "expected mixed sizes rank to match mixed strides rank (";
      v132 = 259;
      mlir::Operation::emitError(a1, (uint64_t)v131, (uint64_t)&v139);
      (*(void (**)(char **__return_ptr, uint64_t, uint64_t *))(a2 + 72))(&v154, a2, a1);
      if (v139)
      {
        LODWORD(v151) = 5;
        v152 = v155;
        v62 = (char *)&v151;
        v63 = (char *)v142;
        if (v143 >= v144)
        {
          v113 = v143 + 1;
          if (v142 <= &v151 && (char *)v142 + 24 * v143 > (char *)&v151)
          {
            v125 = (char *)&v151 - (_BYTE *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v113, 24);
            v63 = (char *)v142;
            v62 = (char *)v142 + v125;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v113, 24);
            v62 = (char *)&v151;
            v63 = (char *)v142;
          }
        }
        v64 = &v63[24 * v143];
        v65 = *(_OWORD *)v62;
        *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
        *(_OWORD *)v64 = v65;
        v66 = ++v143;
        if (v139)
        {
          LODWORD(v151) = 3;
          v152 = (unint64_t)" vs ";
          v153[0] = 4;
          v67 = (char *)&v151;
          v68 = (char *)v142;
          if (v66 >= v144)
          {
            v115 = v66 + 1;
            v116 = (char *)v142 + 24 * v66 > (char *)&v151;
            if (v142 <= &v151 && v116)
            {
              v127 = (char *)&v151 - (_BYTE *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v115, 24);
              v68 = (char *)v142;
              v67 = (char *)v142 + v127;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v115, 24);
              v67 = (char *)&v151;
              v68 = (char *)v142;
            }
          }
          v69 = &v68[24 * v143];
          v70 = *(_OWORD *)v67;
          *((_QWORD *)v69 + 2) = *((_QWORD *)v67 + 2);
          *(_OWORD *)v69 = v70;
          ++v143;
        }
      }
      (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t *))(a2 + 80))(&v151, a2, a1);
      if (v139)
      {
        v133 = 5;
        v134 = v152;
        v71 = &v133;
        v72 = (char *)v142;
        if (v143 >= v144)
        {
          v114 = v143 + 1;
          if (v142 <= &v133 && (char *)v142 + 24 * v143 > (char *)&v133)
          {
            v126 = (char *)&v133 - (_BYTE *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v114, 24);
            v72 = (char *)v142;
            v71 = (int *)((char *)v142 + v126);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v114, 24);
            v71 = &v133;
            v72 = (char *)v142;
          }
        }
        v73 = &v72[24 * v143];
        v74 = *(_OWORD *)v71;
        *((_QWORD *)v73 + 2) = *((_QWORD *)v71 + 2);
        *(_OWORD *)v73 = v74;
        v75 = ++v143;
        if (v139)
        {
          v133 = 3;
          v134 = (unint64_t)") so the rank of the result type is well-formed.";
          v135 = 48;
          v76 = &v133;
          v77 = (char *)v142;
          if (v75 >= v144)
          {
            v117 = v75 + 1;
            v118 = (char *)v142 + 24 * v75 > (char *)&v133;
            if (v142 <= &v133 && v118)
            {
              v128 = (char *)&v133 - (_BYTE *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v117, 24);
              v77 = (char *)v142;
              v76 = (int *)((char *)v142 + v128);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v117, 24);
              v76 = &v133;
              v77 = (char *)v142;
            }
          }
          v78 = &v77[24 * v143];
          v79 = *(_OWORD *)v76;
          *((_QWORD *)v78 + 2) = *((_QWORD *)v76 + 2);
          *(_OWORD *)v78 = v79;
          ++v143;
        }
      }
      v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v139);
      if (v151 != v153)
        free(v151);
      if (v154 != v156)
        free(v154);
      if (v139)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v139);
      if (v150)
      {
        v80 = (_QWORD **)__p;
        if (__p)
        {
          v81 = v149;
          v82 = __p;
          if (v149 != __p)
          {
            do
              v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
            while (v81 != v80);
            v82 = __p;
          }
          v149 = v80;
          operator delete(v82);
        }
        v32 = v146;
        if (!v146)
          goto LABEL_124;
        v83 = v147;
        v34 = v146;
        if (v147 == v146)
          goto LABEL_123;
        do
        {
          v85 = (void *)*--v83;
          v84 = v85;
          *v83 = 0;
          if (v85)
            operator delete[](v84);
        }
        while (v83 != v32);
        goto LABEL_122;
      }
    }
  }
  return v28;
}

llvm::raw_ostream *mlir::printDynamicIndexList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  char v14;
  unsigned int v15;
  unsigned int v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  llvm::raw_ostream *v22;
  _WORD *v23;
  unint64_t v24;
  llvm::raw_ostream *result;
  _BYTE *v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[6];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v29[0] = a3;
  v29[1] = a4;
  v31[0] = a7;
  v31[1] = a8;
  v28[0] = a9;
  v28[1] = a10;
  v14 = 8 * a11 - 8;
  v15 = 0x7B3C5B28u >> v14;
  v16 = 0x7D3E5D29u >> v14;
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, v15);
    if (a6)
    {
LABEL_3:
      v27 = 0;
      v30[0] = v28;
      v30[1] = &v27;
      v30[2] = a1;
      v30[3] = v29;
      v30[4] = (char *)&v27 + 4;
      v30[5] = v31;
      mlir::printDynamicIndexList(mlir::OpAsmPrinter &,mlir::Operation *,mlir::OperandRange,llvm::ArrayRef<long long>,mlir::TypeRange,llvm::ArrayRef<BOOL>,mlir::AsmParser::Delimiter)::$_0::operator()((uint64_t)v30, *a5);
      if (a6 != 1)
      {
        v19 = a5 + 1;
        v20 = 8 * a6 - 8;
        do
        {
          while (1)
          {
            v22 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
            v23 = (_WORD *)*((_QWORD *)v22 + 4);
            if (*((_QWORD *)v22 + 3) - (_QWORD)v23 <= 1uLL)
              break;
            *v23 = 8236;
            *((_QWORD *)v22 + 4) += 2;
            v21 = *v19++;
            mlir::printDynamicIndexList(mlir::OpAsmPrinter &,mlir::Operation *,mlir::OperandRange,llvm::ArrayRef<long long>,mlir::TypeRange,llvm::ArrayRef<BOOL>,mlir::AsmParser::Delimiter)::$_0::operator()((uint64_t)v30, v21);
            v20 -= 8;
            if (!v20)
              goto LABEL_8;
          }
          llvm::raw_ostream::write(v22, ", ", 2uLL);
          v24 = *v19++;
          mlir::printDynamicIndexList(mlir::OpAsmPrinter &,mlir::Operation *,mlir::OperandRange,llvm::ArrayRef<long long>,mlir::TypeRange,llvm::ArrayRef<BOOL>,mlir::AsmParser::Delimiter)::$_0::operator()((uint64_t)v30, v24);
          v20 -= 8;
        }
        while (v20);
      }
LABEL_8:
      result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v26 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v26 >= *((_QWORD *)result + 3))
        return llvm::raw_ostream::write(result, v16);
      goto LABEL_12;
    }
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = v15;
    if (a6)
      goto LABEL_3;
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v26 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v26 < *((_QWORD *)result + 3))
  {
LABEL_12:
    *((_QWORD *)result + 4) = v26 + 1;
    *v26 = v16;
    return result;
  }
  return llvm::raw_ostream::write(result, v16);
}

uint64_t mlir::parseDynamicIndexList(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  mlir::MLIRContext **v9;
  mlir::MLIRContext **v10;
  uint64_t v11;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  char v28[32];
  __int16 v29;
  _QWORD v30[5];
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x1E0C80C00];
  v34 = a5;
  v48 = v50;
  v49 = 0x400000000;
  v32 = xmmword_181234800;
  v30[0] = a1;
  v30[1] = &v31;
  v30[2] = a2;
  v30[3] = &v48;
  v30[4] = &v34;
  v31 = &v33;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t, BOOL (*)(uint64_t *), _QWORD *, const char *, uint64_t))(*(_QWORD *)a1 + 360))(a1, a6, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::parseDynamicIndexList(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::detail::DenseArrayAttrImpl<long long> &,mlir::detail::DenseArrayAttrImpl<BOOL> &,llvm::SmallVectorImpl<mlir::Type> *,mlir::AsmParser::Delimiter)::$_0>, v30, " in dynamic index list", 22))
  {
    v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    *a3 = mlir::Builder::getDenseI64ArrayAttr(v9, (uint64_t)v48, v49);
    v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    *a4 = mlir::Builder::getDenseBoolArrayAttr(v10, (uint64_t)v31, v32);
    v11 = 1;
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v29 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(v38, a1, v13, v28);
    if (v38[0])
    {
      v35 = 3;
      v36 = "expected SSA value or integer";
      v37 = 29;
      v14 = &v35;
      v15 = (char *)v39;
      if (v40 >= v41)
      {
        v26 = v40 + 1;
        if (v39 <= &v35 && (char *)v39 + 24 * v40 > (char *)&v35)
        {
          v27 = (char *)&v35 - (_BYTE *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
          v15 = (char *)v39;
          v14 = (int *)((char *)v39 + v27);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
          v14 = &v35;
          v15 = (char *)v39;
        }
      }
      v16 = &v15[24 * v40];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v40;
    }
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v38);
    if (v38[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    if (v47)
    {
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v46;
        v20 = __p;
        if (v46 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v46 = v18;
        operator delete(v20);
      }
      v21 = v43;
      if (v43)
      {
        v22 = v44;
        v23 = v43;
        if (v44 != v43)
        {
          do
          {
            v25 = (void *)*--v22;
            v24 = v25;
            *v22 = 0;
            if (v25)
              operator delete[](v24);
          }
          while (v22 != v21);
          v23 = v43;
        }
        v44 = v21;
        operator delete(v23);
      }
      if (v39 != v42)
        free(v39);
    }
  }
  if (v31 != &v33)
    free(v31);
  if (v48 != v50)
    free(v48);
  return v11;
}

uint64_t mlir::detail::sameOffsetsSizesAndStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;
  uint64_t v56;
  _BYTE v57[32];
  void *__src;
  uint64_t v59;
  _BYTE v60[32];
  void *__dst;
  uint64_t v62;
  _BYTE v63[32];
  void *v64;
  uint64_t v65;
  _QWORD v66[6];

  v66[4] = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a2, a1);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a4, a3);
  if (v12 != v13)
    return 0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a2, a1);
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a4, a3);
  if (v15 != v16)
    return 0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a2, a1);
  v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a4, a3);
  if (v18 != v19)
    return 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 64))(&__src, a2, a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a4 + 64))(&v55, a4, a3);
  __dst = v63;
  v62 = 0x400000000;
  v20 = v59;
  if ((_DWORD)v59)
  {
    if (__src == v60)
    {
      v21 = v59;
      if (v59 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v63, v59, 8), (v21 = v59) != 0))
      {
        memcpy(__dst, __src, 8 * v21);
      }
      LODWORD(v62) = v20;
    }
    else
    {
      __dst = __src;
      v62 = v59;
      __src = v60;
      HIDWORD(v59) = 0;
    }
    LODWORD(v59) = 0;
  }
  v64 = v66;
  v65 = 0x400000000;
  v22 = v56;
  v23 = v55;
  if ((_DWORD)v56)
  {
    if (v55 != v57)
    {
      v64 = v55;
      v65 = v56;
      v55 = v57;
      HIDWORD(v56) = 0;
      v23 = v57;
LABEL_21:
      LODWORD(v56) = 0;
      goto LABEL_22;
    }
    if (v56 < 5)
    {
      v24 = v56;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v56, 8);
      v24 = v56;
      v23 = v55;
      if (!(_DWORD)v56)
        goto LABEL_20;
    }
    memcpy(v64, v23, 8 * v24);
    v23 = v55;
LABEL_20:
    LODWORD(v65) = v22;
    goto LABEL_21;
  }
LABEL_22:
  if (v23 != v57)
    free(v23);
  if (__src != v60)
    free(__src);
  v25 = v64;
  v26 = 1;
  if ((_DWORD)v62 && (_DWORD)v65)
  {
    v27 = __dst;
    v28 = 8 * v65 - 8;
    v29 = 8 * v62 - 8;
    do
    {
      v26 = a5(a6, *v27, *v25);
      if (!v26)
        break;
      if (!v29)
        break;
      ++v27;
      ++v25;
      v30 = v28;
      v28 -= 8;
      v29 -= 8;
    }
    while (v30);
    v25 = v64;
  }
  if (v25 != v66)
    free(v25);
  if (__dst != v63)
    free(__dst);
  if (!v26)
    return 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 72))(&__src, a2, a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a4 + 72))(&v55, a4, a3);
  __dst = v63;
  v62 = 0x400000000;
  v31 = v59;
  if ((_DWORD)v59)
  {
    if (__src == v60)
    {
      v32 = v59;
      if (v59 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v63, v59, 8), (v32 = v59) != 0))
      {
        memcpy(__dst, __src, 8 * v32);
      }
      LODWORD(v62) = v31;
    }
    else
    {
      __dst = __src;
      v62 = v59;
      __src = v60;
      HIDWORD(v59) = 0;
    }
    LODWORD(v59) = 0;
  }
  v64 = v66;
  v65 = 0x400000000;
  v33 = v56;
  v34 = v55;
  if ((_DWORD)v56)
  {
    if (v55 != v57)
    {
      v64 = v55;
      v65 = v56;
      v55 = v57;
      HIDWORD(v56) = 0;
      v34 = v57;
LABEL_55:
      LODWORD(v56) = 0;
      goto LABEL_56;
    }
    if (v56 < 5)
    {
      v35 = v56;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v56, 8);
      v35 = v56;
      v34 = v55;
      if (!(_DWORD)v56)
        goto LABEL_54;
    }
    memcpy(v64, v34, 8 * v35);
    v34 = v55;
LABEL_54:
    LODWORD(v65) = v33;
    goto LABEL_55;
  }
LABEL_56:
  if (v34 != v57)
    free(v34);
  if (__src != v60)
    free(__src);
  v36 = v64;
  v37 = 1;
  if ((_DWORD)v62 && (_DWORD)v65)
  {
    v38 = __dst;
    v39 = 8 * v65 - 8;
    v40 = 8 * v62 - 8;
    do
    {
      v37 = a5(a6, *v38, *v36);
      if (!v37)
        break;
      if (!v40)
        break;
      ++v38;
      ++v36;
      v41 = v39;
      v39 -= 8;
      v40 -= 8;
    }
    while (v41);
    v36 = v64;
  }
  if (v36 != v66)
    free(v36);
  if (__dst != v63)
    free(__dst);
  if (!v37)
    return 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 80))(&__src, a2, a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a4 + 80))(&v55, a4, a3);
  __dst = v63;
  v62 = 0x400000000;
  v42 = v59;
  if ((_DWORD)v59)
  {
    if (__src == v60)
    {
      v45 = v59;
      if (v59 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v63, v59, 8), (v45 = v59) != 0))
      {
        memcpy(__dst, __src, 8 * v45);
      }
      LODWORD(v62) = v42;
    }
    else
    {
      __dst = __src;
      v62 = v59;
      __src = v60;
      HIDWORD(v59) = 0;
    }
    LODWORD(v59) = 0;
  }
  v64 = v66;
  v65 = 0x400000000;
  v46 = v56;
  v47 = v55;
  if (!(_DWORD)v56)
    goto LABEL_92;
  if (v55 == v57)
  {
    if (v56 < 5)
    {
      v48 = v56;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v56, 8);
      v48 = v56;
      v47 = v55;
      if (!(_DWORD)v56)
        goto LABEL_90;
    }
    memcpy(v64, v47, 8 * v48);
    v47 = v55;
LABEL_90:
    LODWORD(v65) = v46;
    goto LABEL_91;
  }
  v64 = v55;
  v65 = v56;
  v55 = v57;
  HIDWORD(v56) = 0;
  v47 = v57;
LABEL_91:
  LODWORD(v56) = 0;
LABEL_92:
  if (v47 != v57)
    free(v47);
  if (__src != v60)
    free(__src);
  v49 = v64;
  v43 = 1;
  if ((_DWORD)v62 && (_DWORD)v65)
  {
    v50 = __dst;
    v51 = 8 * v62 - 8;
    v52 = 8 * v65 - 8;
    do
    {
      v43 = a5(a6, *v50, *v49);
      if (!(_DWORD)v43)
        break;
      if (!v51)
        break;
      ++v50;
      ++v49;
      v51 -= 8;
      v53 = v52;
      v52 -= 8;
    }
    while (v53);
    v49 = v64;
  }
  if (v49 != v66)
    free(v49);
  if (__dst != v63)
    free(__dst);
  return v43;
}

uint64_t mlir::detail::getNumDynamicEntriesUpToIdx(int64x2_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v7;
  uint64_t v8;
  int64x2_t *v9;
  int32x4_t v10;
  int64x2_t v11;
  uint64_t v12;
  int32x4_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  uint64_t v18;

  if (!a3)
    return 0;
  v3 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v3 < 7)
  {
    LODWORD(v4) = 0;
    v5 = (uint64_t *)a1;
    do
    {
LABEL_8:
      v18 = *v5++;
      if (v18 == 0x8000000000000000)
        v4 = (v4 + 1);
      else
        v4 = v4;
    }
    while (v5 != (uint64_t *)((char *)a1 + 8 * a3));
    return v4;
  }
  v7 = v3 + 1;
  v8 = (v3 + 1) & 0x3FFFFFFFFFFFFFF8;
  v5 = &a1->i64[v8];
  v9 = a1 + 2;
  v10 = 0uLL;
  v11 = vdupq_n_s64(0x8000000000000000);
  v12 = v8;
  v13 = 0uLL;
  do
  {
    v14 = v9[-2];
    v15 = v9[-1];
    v16 = *v9;
    v17 = v9[1];
    v9 += 4;
    v10 = vsubq_s32(v10, vuzp1q_s32((int32x4_t)vceqq_s64(v14, v11), (int32x4_t)vceqq_s64(v15, v11)));
    v13 = vsubq_s32(v13, vuzp1q_s32((int32x4_t)vceqq_s64(v16, v11), (int32x4_t)vceqq_s64(v17, v11)));
    v12 -= 8;
  }
  while (v12);
  v4 = vaddvq_s32(vaddq_s32(v13, v10));
  if (v7 != v8)
    goto LABEL_8;
  return v4;
}

llvm::raw_ostream *mlir::printDynamicIndexList(mlir::OpAsmPrinter &,mlir::Operation *,mlir::OperandRange,llvm::ArrayRef<long long>,mlir::TypeRange,llvm::ArrayRef<BOOL>,mlir::AsmParser::Delimiter)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  llvm::raw_ostream *result;
  uint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _QWORD *v12;
  unint64_t v13;
  _BYTE *v14;

  if (!*(_QWORD *)(*(_QWORD *)a1 + 8) || !*(_BYTE *)(**(_QWORD **)a1 + **(unsigned int **)(a1 + 8)))
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 16);
    if (a2 == 0x8000000000000000)
      goto LABEL_6;
LABEL_10:
    v11 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    result = llvm::raw_ostream::operator<<(v11, a2);
    v12 = *(_QWORD **)a1;
    if (!*(_QWORD *)(*(_QWORD *)a1 + 8))
      goto LABEL_19;
    goto LABEL_15;
  }
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) != v5)
  {
    *v5 = 91;
    ++*((_QWORD *)v4 + 4);
    goto LABEL_5;
  }
  llvm::raw_ostream::write(v4, "[", 1uLL);
  v6 = *(_QWORD *)(a1 + 16);
  if (a2 != 0x8000000000000000)
    goto LABEL_10;
LABEL_6:
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 160))(v6, *(_QWORD *)(**(_QWORD **)(a1 + 24) + 32 * **(unsigned int **)(a1 + 32) + 24));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v10 = *((_QWORD *)v9 + 4);
    if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) > 2)
    {
      *(_BYTE *)(v10 + 2) = 32;
      *(_WORD *)v10 = 14880;
      *((_QWORD *)v9 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v9, " : ", 3uLL);
    }
    v13 = mlir::TypeRange::dereference_iterator(**(_QWORD **)(a1 + 40), **(unsigned int **)(a1 + 32));
    result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 32))(v8, v13);
  }
  ++**(_DWORD **)(a1 + 32);
  v12 = *(_QWORD **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 8))
  {
LABEL_15:
    if (*(_BYTE *)(*v12 + **(unsigned int **)(a1 + 8)))
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
      v14 = (_BYTE *)*((_QWORD *)result + 4);
      if (*((_BYTE **)result + 3) == v14)
      {
        result = llvm::raw_ostream::write(result, "]", 1uLL);
      }
      else
      {
        *v14 = 93;
        ++*((_QWORD *)result + 4);
      }
    }
  }
LABEL_19:
  ++**(_DWORD **)(a1 + 8);
  return result;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::parseDynamicIndexList(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::detail::DenseArrayAttrImpl<long long> &,mlir::detail::DenseArrayAttrImpl<BOOL> &,llvm::SmallVectorImpl<mlir::Type> *,mlir::AsmParser::Delimiter)::$_0>(uint64_t *a1)
{
  unsigned __int16 v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[4];

  memset(v28, 0, 24);
  v2 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)*a1 + 680))(*a1, v28, 1);
  v3 = (_QWORD *)a1[1];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 304))(*a1);
  v5 = v3[1];
  if ((unint64_t)(v5 + 1) > v3[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v3, v3 + 3, v5 + 1, 1);
    v5 = v3[1];
  }
  *(_BYTE *)(*v3 + v5) = v4 != 0;
  ++v3[1];
  if (v2 < 0x100u || v2 == 0)
  {
    v27 = 0;
    if (!mlir::AsmParser::parseInteger<long long>(*a1, &v27))
      return 0;
    v7 = a1[3];
    v8 = v27;
    v9 = *(unsigned int *)(v7 + 8);
    if (v9 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1[3], (void *)(v7 + 16), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v9) = v8;
    ++*(_DWORD *)(v7 + 8);
  }
  else
  {
    v10 = a1[2];
    v11 = *(unsigned int *)(v10 + 8);
    v12 = *(_QWORD *)v10;
    v13 = (char *)v28;
    if (v11 >= *(_DWORD *)(v10 + 12))
    {
      v24 = v11 + 1;
      v25 = v12 + 32 * v11 > (unint64_t)v28;
      if (v12 <= (unint64_t)v28 && v25)
      {
        v26 = (char *)v28 - v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1[2], (void *)(v10 + 16), v24, 32);
        v12 = *(_QWORD *)v10;
        v13 = &v26[*(_QWORD *)v10];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1[2], (void *)(v10 + 16), v24, 32);
        v12 = *(_QWORD *)v10;
        v13 = (char *)v28;
      }
    }
    v14 = (_OWORD *)(v12 + 32 * *(unsigned int *)(v10 + 8));
    v15 = *((_OWORD *)v13 + 1);
    *v14 = *(_OWORD *)v13;
    v14[1] = v15;
    ++*(_DWORD *)(v10 + 8);
    v16 = a1[3];
    v17 = *(unsigned int *)(v16 + 8);
    if (v17 >= *(_DWORD *)(v16 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1[3], (void *)(v16 + 16), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(v16 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = 0x8000000000000000;
    ++*(_DWORD *)(v16 + 8);
    v18 = *(_QWORD *)a1[4];
    if (v18)
    {
      v19 = *a1;
      v20 = *(unsigned int *)(v18 + 8);
      if (v20 >= *(_DWORD *)(v18 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v18, (void *)(v18 + 16), v20 + 1, 8);
        *(_QWORD *)(*(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8)) = 0;
        LODWORD(v20) = *(_DWORD *)(v18 + 8);
        v21 = *(_QWORD *)v18;
      }
      else
      {
        v21 = *(_QWORD *)v18;
        *(_QWORD *)(*(_QWORD *)v18 + 8 * v20) = 0;
      }
      v22 = v20 + 1;
      *(_DWORD *)(v18 + 8) = v22;
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 544))(v19, v21 + 8 * v22 - 8))
        return 0;
    }
  }
  return !*(_BYTE *)(*(_QWORD *)a1[1] + *(_QWORD *)(a1[1] + 8) - 1)
      || (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)*a1 + 320))(*a1);
}

uint64_t mlir::mps::createConvertF32ToF16Pass@<X0>(_QWORD *a1@<X8>)
{
  char *v3;
  llvm::APFloatBase *v4;
  llvm::APFloatBase *v5;
  llvm::detail::DoubleAPFloat *v6;
  _QWORD *v7;
  llvm::detail::DoubleAPFloat *v8;
  llvm::APFloatBase *Largest;
  void *v10;
  uint64_t result;

  v3 = (char *)operator new(0x1A8uLL);
  *((_QWORD *)v3 + 2) = "builtin.module";
  *((_QWORD *)v3 + 3) = 14;
  v3[32] = 1;
  v3[40] = 0;
  v3[120] = 0;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_QWORD *)v3 + 22) = 0;
  *((_QWORD *)v3 + 23) = v3 + 200;
  *((_QWORD *)v3 + 24) = 0x400000000;
  *((_QWORD *)v3 + 29) = v3 + 248;
  *((_QWORD *)v3 + 30) = 0x400000000;
  *((_QWORD *)v3 + 35) = 0;
  *((_QWORD *)v3 + 36) = 0;
  *((_QWORD *)v3 + 37) = 0x1000000000;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *(_OWORD *)(v3 + 330) = 0u;
  *(_QWORD *)v3 = off_1E0E28758;
  *((_WORD *)v3 + 173) = 1;
  v4 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)v3);
  v5 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v4);
  if (v5 == v4)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)v3 + 45, (uint64_t)v4);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)(v3 + 360), (uint64_t)v4);
  v6 = (llvm::detail::DoubleAPFloat *)(v3 + 360);
  if (v5 == *((llvm::APFloatBase **)v3 + 45))
    llvm::detail::DoubleAPFloat::makeLargest(v6, 0);
  else
    llvm::detail::IEEEFloat::makeLargest(v6, 0);
  v7 = v3 + 392;
  if (v5 == v4)
    v8 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (uint64_t)v4);
  else
    v8 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v7, (uint64_t)v4);
  if (v5 == *(llvm::APFloatBase **)v8)
    llvm::detail::DoubleAPFloat::makeLargest(v8, 1);
  else
    Largest = (llvm::APFloatBase *)llvm::detail::IEEEFloat::makeLargest(v8, 1);
  v10 = llvm::APFloatBase::IEEEsingle(Largest);
  *((_DWORD *)v3 + 104) = llvm::APFloat::convert((uint64_t)(v3 + 352), v10, v3[346], v3 + 347);
  result = llvm::APFloat::convert((uint64_t)(v3 + 384), v10, v3[346], v3 + 347);
  *((_DWORD *)v3 + 105) = result;
  *a1 = v3;
  return result;
}

void mlir::`anonymous namespace'::ConvertF32ToF16Pass::~ConvertF32ToF16Pass(mlir::_anonymous_namespace_::ConvertF32ToF16Pass *this)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;

  *(_QWORD *)this = off_1E0E28758;
  v2 = (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 392);
  v3 = (void *)*((_QWORD *)this + 49);
  v4 = llvm::APFloatBase::PPCDoubleDouble(this);
  if (v4 == v3)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  else
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
  v5 = (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 360);
  if (v4 == *((void **)this + 45))
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
  else
    llvm::detail::IEEEFloat::~IEEEFloat(v5);
  mlir::Pass::~Pass(this);
}

{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;

  *(_QWORD *)this = off_1E0E28758;
  v2 = (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 392);
  v3 = (void *)*((_QWORD *)this + 49);
  v4 = llvm::APFloatBase::PPCDoubleDouble(this);
  if (v4 == v3)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  else
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
  v5 = (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 360);
  if (v4 == *((void **)this + 45))
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
  else
    llvm::detail::IEEEFloat::~IEEEFloat(v5);
  mlir::Pass::~Pass(this);
  operator delete(v6);
}

const char *mlir::PassWrapper<mlir::`anonymous namespace'::ConvertF32ToF16Pass,mlir::OperationPass<mlir::ModuleOp>>::getName()
{
  unint64_t v0;
  unint64_t v1;
  const char *v2;
  uint64_t v3;
  const char *v5;
  unint64_t v6;

  v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertF32ToF16Pass]";
  v6 = 98;
  v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0)
    v1 = v0;
  else
    v1 = v6;
  v2 = &v5[v1];
  if (v6 - v1 >= 0x12)
    v3 = 18;
  else
    v3 = v6 - v1;
  return &v2[v3];
}

const char *mlir::`anonymous namespace'::ConvertF32ToF16Pass::getArgument(mlir::_anonymous_namespace_::ConvertF32ToF16Pass *this)
{
  return "vin-f32-to-f16";
}

const char *mlir::`anonymous namespace'::ConvertF32ToF16Pass::getDescription(mlir::_anonymous_namespace_::ConvertF32ToF16Pass *this)
{
  return "Convert fp32 tensors to fp16.";
}

mlir::GenericProgramPoint *mlir::`anonymous namespace'::ConvertDataTypePassBase<mlir::`anonymous namespace'::ConvertF32ToF16Pass>::runOnOperation(_QWORD *a1)
{
  mlir::GenericProgramPoint *result;
  uint64_t v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[2];
  unint64_t v14;

  v14 = 0;
  result = (mlir::GenericProgramPoint *)(*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  v3 = a1[5];
  if ((_BYTE)result)
  {
    v13[0] = a1;
    v13[1] = &v14;
    if (v14)
    {
      v4 = (llvm::raw_ostream *)llvm::errs(result);
      v5 = v4;
      v6 = (void *)*((_QWORD *)v4 + 4);
      if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 0x25uLL)
      {
        qmemcpy(v6, "WARNING: Data Type Conversion in pass ", 38);
        *((_QWORD *)v4 + 4) += 38;
      }
      else
      {
        v5 = llvm::raw_ostream::write(v4, "WARNING: Data Type Conversion in pass ", 0x26uLL);
      }
      v8 = (const void *)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
      v9 = v7;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v7 <= *((_QWORD *)v5 + 3) - (_QWORD)v10)
      {
        if (v7)
        {
          memcpy(v10, v8, v7);
          v10 = (void *)(*((_QWORD *)v5 + 4) + v9);
          *((_QWORD *)v5 + 4) = v10;
        }
      }
      else
      {
        v5 = llvm::raw_ostream::write(v5, (const char *)v8, v7);
        v10 = (void *)*((_QWORD *)v5 + 4);
      }
      if (*((_QWORD *)v5 + 3) - (_QWORD)v10 > 0xCuLL)
      {
        qmemcpy(v10, " encountered ", 13);
        *((_QWORD *)v5 + 4) += 13;
      }
      else
      {
        v5 = llvm::raw_ostream::write(v5, " encountered ", 0xDuLL);
      }
      result = llvm::raw_ostream::operator<<(v5, v14);
      v11 = (void *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v11 > 0x24uLL)
      {
        qmemcpy(v11, " instances of overflow and have been ", 37);
        v12 = (void *)(*((_QWORD *)result + 4) + 37);
        *((_QWORD *)result + 4) = v12;
      }
      else
      {
        result = llvm::raw_ostream::write(result, " instances of overflow and have been ", 0x25uLL);
        v12 = (void *)*((_QWORD *)result + 4);
      }
      if (*((_QWORD *)result + 3) - (_QWORD)v12 > 0x21uLL)
      {
        qmemcpy(v12, "clamped to fit the target ranges.\n", 34);
        *((_QWORD *)result + 4) += 34;
      }
      else
      {
        return llvm::raw_ostream::write(result, "clamped to fit the target ranges.\n", 0x22uLL);
      }
    }
  }
  else
  {
    a1[5] = v3 | 4;
  }
  return result;
}

llvm::detail::DoubleAPFloat *mlir::PassWrapper<mlir::`anonymous namespace'::ConvertF32ToF16Pass,mlir::OperationPass<mlir::ModuleOp>>::clonePass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  void *v8;
  llvm::detail::DoubleAPFloat *v9;
  const llvm::detail::DoubleAPFloat *v10;
  llvm::detail::DoubleAPFloat *result;

  v4 = operator new(0x1A8uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  *((_BYTE *)v4 + 40) = 0;
  *((_BYTE *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = (char *)v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = (char *)v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *((_DWORD *)v4 + 86) = *(_DWORD *)(a1 + 344);
  *(_QWORD *)v4 = off_1E0E28758;
  *((_QWORD *)v4 + 1) = v5;
  v6 = (llvm::detail::DoubleAPFloat *)((char *)v4 + 360);
  v7 = *(void **)(a1 + 360);
  v8 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v4);
  if (v8 == v7)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, (const llvm::detail::DoubleAPFloat *)(a1 + 360));
  else
    llvm::detail::IEEEFloat::IEEEFloat(v6, (const llvm::detail::IEEEFloat *)(a1 + 360));
  v9 = (llvm::detail::DoubleAPFloat *)((char *)v4 + 392);
  v10 = (const llvm::detail::DoubleAPFloat *)(a1 + 392);
  if (v8 == *(void **)(a1 + 392))
    result = llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v10);
  else
    result = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v9, v10);
  *((_QWORD *)v4 + 52) = *(_QWORD *)(a1 + 416);
  *a2 = v4;
  return result;
}

BOOL mlir::`anonymous namespace'::ConvertF32ToF16Pass::isTypeConvertable(mlir::_anonymous_namespace_::ConvertF32ToF16Pass *this, const mlir::Type *a2)
{
  return mlir::Type::isF32(a2);
}

uint64_t mlir::`anonymous namespace'::ConvertF32ToF16Pass::getConvertType(mlir::_anonymous_namespace_::ConvertF32ToF16Pass *this, mlir::Operation *a2, const mlir::Type *a3)
{
  mlir::Float16Type *Context;
  mlir::MLIRContext *v5;

  mlir::Type::isF32(a3);
  Context = (mlir::Float16Type *)mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  return mlir::Float16Type::get(Context, v5);
}

BOOL mlir::`anonymous namespace'::ConvertF32ToF16Pass::isValidConversion(mlir::_anonymous_namespace_::ConvertF32ToF16Pass *this)
{
  BOOL v1;
  _BOOL8 result;

  if (*((_DWORD *)this + 104))
    v1 = (*((_DWORD *)this + 104) & 0x10) == 0;
  else
    v1 = 0;
  result = 0;
  if (!v1 && (!*((_DWORD *)this + 105) || (*((_DWORD *)this + 105) & 0x10) != 0))
    return 1;
  return result;
}

_QWORD *mlir::`anonymous namespace'::ConvertDataTypePassBase<mlir::`anonymous namespace'::ConvertF32ToF16Pass>::convertElementsAttrRawData(int a1, mlir::CallOpInterface *this, mlir::MemoryMapperInterface *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NumElements;
  uint64_t *ArgAttrsAttr;
  uint64_t v11;
  int32x4_t *v12;
  int32x4_t *v13;
  uint64_t v14;
  int32x4_t *v15;
  int32x4_t *v16;
  uint64_t v17;
  int32x4_t *v18;
  int32x4_t *v19;
  uint64_t v20;
  int32x4_t *v21;
  int32x4_t *v22;
  unint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  __int32 *v29;
  uint64_t *v30;
  uint64_t v31;
  float32x4_t *v32;
  float16x8_t *v33;
  unint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  __int16 *v40;
  __int32 *v41;
  int v42;
  int32x4_t *v48;
  int32x4_t *v49;
  unint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  uint64_t v55;
  __int32 *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *ElementsAttr;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  unint64_t v68;
  void *v70[5];
  int32x4_t *v71;
  void *v72[5];
  int32x4_t *v73;
  uint64_t v74;
  uint64_t OperandRange;

  v72[0] = (void *)mlir::CallOpInterface::getArgOperands(this);
  v72[1] = v5;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v72);
  v74 = mlir::MemoryMapperInterface::getOperandRange(a3);
  mlir::mps::CPUNDArray::CPUNDArray(v72, *(_QWORD *)this);
  v6 = *(_QWORD *)a3;
  v7 = *((_QWORD *)a3 + 1);
  v8 = mlir::MemoryMapperInterface::getOperandRange(this);
  mlir::mps::CPUNDArray::CPUNDArray(v70, v6, v7, v8);
  if ((mlir::MemoryMapperInterface::getOperandRange(this) & 1) != 0)
  {
    NumElements = 1;
  }
  else
  {
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr(a3);
    NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
  }
  if (!mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
    && !mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 64)
    || !mlir::Type::isSignedInteger((mlir::Type *)&v74, 32) && !mlir::Type::isSignlessInteger((mlir::Type *)&v74, 32))
  {
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
      && mlir::Type::isUnsignedInteger((mlir::Type *)&v74, 32))
    {
      if (NumElements < 1)
        goto LABEL_36;
      v15 = v73;
      v16 = v71;
      if ((unint64_t)NumElements >= 8)
      {
        v17 = NumElements & 0x7FFFFFFFFFFFFFF8;
        v48 = v73 + 2;
        v49 = v71 + 1;
        v50 = NumElements & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v52 = v48[-2];
          v51 = v48[-1];
          v54 = *v48;
          v53 = v48[1];
          v48 += 4;
          v49[-1] = vuzp1q_s32(v52, v51);
          *v49 = vuzp1q_s32(v54, v53);
          v49 += 2;
          v50 -= 8;
        }
        while (v50);
        if (NumElements == v17)
          goto LABEL_36;
      }
      else
      {
        v17 = 0;
      }
      v55 = NumElements - v17;
      v56 = &v16->i32[v17];
      v57 = &v15->i64[v17];
      do
      {
        v58 = *v57++;
        *v56++ = v58;
        --v55;
      }
      while (v55);
      goto LABEL_36;
    }
    mlir::Type::isF32((mlir::Type *)&OperandRange);
    mlir::Type::isF16((mlir::Type *)&v74);
    if (NumElements < 1)
      goto LABEL_36;
    v18 = v73;
    v19 = v71;
    if ((unint64_t)NumElements >= 0x10)
    {
      v20 = NumElements & 0x7FFFFFFFFFFFFFF0;
      v32 = (float32x4_t *)&v73[2];
      v33 = (float16x8_t *)&v71[1];
      v34 = NumElements & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v36 = v32[-2];
        v35 = v32[-1];
        v38 = *v32;
        v37 = v32[1];
        v32 += 4;
        v33[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v36), v35);
        *v33 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v38), v37);
        v33 += 2;
        v34 -= 16;
      }
      while (v34);
      if (NumElements == v20)
        goto LABEL_36;
    }
    else
    {
      v20 = 0;
    }
    v39 = NumElements - v20;
    v40 = &v19->i16[v20];
    v41 = &v18->i32[v20];
    do
    {
      v42 = *v41++;
      _S0 = v42;
      __asm { FCVT            H0, S0 }
      *v40++ = _S0;
      --v39;
    }
    while (v39);
    goto LABEL_36;
  }
  if (NumElements < 1)
    goto LABEL_36;
  v12 = v73;
  v13 = v71;
  if ((unint64_t)NumElements < 8)
  {
    v14 = 0;
LABEL_22:
    v28 = NumElements - v14;
    v29 = &v13->i32[v14];
    v30 = &v12->i64[v14];
    do
    {
      v31 = *v30++;
      *v29++ = v31;
      --v28;
    }
    while (v28);
    goto LABEL_36;
  }
  v14 = NumElements & 0x7FFFFFFFFFFFFFF8;
  v21 = v73 + 2;
  v22 = v71 + 1;
  v23 = NumElements & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v25 = v21[-2];
    v24 = v21[-1];
    v27 = *v21;
    v26 = v21[1];
    v21 += 4;
    v22[-1] = vuzp1q_s32(v25, v24);
    *v22 = vuzp1q_s32(v27, v26);
    v22 += 2;
    v23 -= 8;
  }
  while (v23);
  if (NumElements != v14)
    goto LABEL_22;
LABEL_36:
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v70, 1, 0);
  v60 = ElementsAttr;
  if (ElementsAttr)
  {
    v61 = *ElementsAttr;
    v62 = mlir::TypeID::get<mlir::ElementsAttr>();
    v63 = *(unsigned int *)(v61 + 16);
    if ((_DWORD)v63)
    {
      v64 = *(_QWORD **)(v61 + 8);
      do
      {
        v65 = v63 >> 1;
        v66 = &v64[2 * (v63 >> 1)];
        v68 = *v66;
        v67 = v66 + 2;
        v63 += ~(v63 >> 1);
        if (v68 < v62)
          v64 = v67;
        else
          v63 = v65;
      }
      while (v63);
    }
  }
  mlir::mps::CPUNDArray::~CPUNDArray(v70);
  mlir::mps::CPUNDArray::~CPUNDArray(v72);
  return v60;
}

void *mlir::`anonymous namespace'::ConvertDataTypePassBase<mlir::`anonymous namespace'::ConvertF32ToF16Pass>::mapIntValueWithOverflowCounts@<X0>(uint64_t a1@<X1>, llvm::APInt *a2@<X8>)
{
  unsigned int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 8);
  *((_DWORD *)a2 + 2) = v2;
  if (v2 > 0x40)
    return llvm::APInt::initSlowCase(a2, (const void **)a1);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  return result;
}

void mlir::`anonymous namespace'::ConvertF32ToF16Pass::mapFloatValueWithOverflowCounts(mlir::_anonymous_namespace_::ConvertF32ToF16Pass *this@<X0>, const llvm::APFloat *a2@<X1>, unint64_t *a3@<X2>, llvm::APInt *a4@<X8>)
{
  llvm::detail::DoubleAPFloat *v7;
  void *v8;
  void *v9;
  llvm::detail::IEEEFloat *v10;
  int v11;
  int v12;
  const llvm::detail::DoubleAPFloat *v13;
  int v14;
  uint64_t v15;
  llvm::detail::IEEEFloat *v16;
  int v17;
  llvm::APInt *v18;
  llvm::detail::DoubleAPFloat *v19;

  v7 = (const llvm::APFloat *)((char *)a2 + 8);
  v8 = (void *)*((_QWORD *)a2 + 1);
  v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  v10 = (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 360);
  if (v9 == v8)
  {
    llvm::detail::DoubleAPFloat::compare(v7, (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 360));
    if (v12 == 2)
      goto LABEL_10;
  }
  else
  {
    llvm::detail::IEEEFloat::compare(v7, (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 360));
    if (v11 == 2)
      goto LABEL_10;
  }
  v10 = (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 392);
  v13 = (mlir::_anonymous_namespace_::ConvertF32ToF16Pass *)((char *)this + 392);
  if (v9 == *(void **)v7)
  {
    llvm::detail::DoubleAPFloat::compare(v7, v13);
    if (v17)
      goto LABEL_7;
LABEL_10:
    ++*a3;
    if (v9 != *(void **)v10)
    {
      v15 = (uint64_t)a4;
      v16 = v10;
      goto LABEL_12;
    }
    v18 = a4;
    v19 = v10;
    goto LABEL_15;
  }
  llvm::detail::IEEEFloat::compare(v7, v13);
  if (!v14)
    goto LABEL_10;
LABEL_7:
  if (v9 != *(void **)v7)
  {
    v15 = (uint64_t)a4;
    v16 = v7;
LABEL_12:
    llvm::detail::IEEEFloat::bitcastToAPInt(v16, v15);
    return;
  }
  v18 = a4;
  v19 = v7;
LABEL_15:
  llvm::detail::DoubleAPFloat::bitcastToAPInt(v19, v18);
}

uint64_t mlir::`anonymous namespace'::ConvertDataTypePassBase<mlir::`anonymous namespace'::ConvertF32ToF16Pass>::convertElementsAttr(uint64_t a1, uint64_t a2, mlir::CallOpInterface *this, mlir::CallOpInterface *a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t ArgAttrsAttr;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t ArgOperands;
  uint64_t *p_OperandRange;
  uint64_t *v57;
  uint64_t v58;
  uint64_t OperandRange;

  ArgOperands = mlir::CallOpInterface::getArgOperands(this);
  p_OperandRange = v14;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, &OperandRange))
    return 0;
  if (!(_DWORD)a6)
  {
    *(_OWORD *)a4 = *(_OWORD *)this;
    if (!a7)
      return a6;
    goto LABEL_28;
  }
  v15 = *(_QWORD *)this;
  if (mlir::DenseElementsAttr::classof(v15))
    v16 = v15;
  else
    v16 = 0;
  v58 = v16;
  if (*(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = a1;
    p_OperandRange = &OperandRange;
    v57 = a5;
    v18 = v28;
    if (v28)
    {
      v29 = *v28;
      v20 = mlir::TypeID::get<mlir::ElementsAttr>();
      v30 = *(unsigned int *)(v29 + 16);
      if ((_DWORD)v30)
      {
        v22 = *(_QWORD **)(v29 + 8);
        v23 = &v22[2 * v30];
        do
        {
          v31 = v30 >> 1;
          v32 = &v22[2 * (v30 >> 1)];
          v34 = *v32;
          v33 = v32 + 2;
          v30 += ~(v30 >> 1);
          if (v34 < v20)
            v22 = v33;
          else
            v30 = v31;
        }
        while (v30);
        goto LABEL_25;
      }
    }
LABEL_27:
    *(_QWORD *)a4 = v18;
    *((_QWORD *)a4 + 1) = 0;
    if (!a7)
      return a6;
    goto LABEL_28;
  }
  ArgOperands = a1;
  p_OperandRange = a5;
  v18 = v17;
  if (!v17)
    goto LABEL_27;
  v19 = *v17;
  v20 = mlir::TypeID::get<mlir::ElementsAttr>();
  v21 = *(unsigned int *)(v19 + 16);
  if (!(_DWORD)v21)
    goto LABEL_27;
  v22 = *(_QWORD **)(v19 + 8);
  v23 = &v22[2 * v21];
  do
  {
    v24 = v21 >> 1;
    v25 = &v22[2 * (v21 >> 1)];
    v27 = *v25;
    v26 = v25 + 2;
    v21 += ~(v21 >> 1);
    if (v27 < v20)
      v22 = v26;
    else
      v21 = v24;
  }
  while (v21);
LABEL_25:
  if (v22 == v23 || *v22 != v20)
    goto LABEL_27;
  v54 = v22[1];
  *(_QWORD *)a4 = v18;
  *((_QWORD *)a4 + 1) = v54;
  if (!a7)
    return a6;
LABEL_28:
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, &OperandRange))
  {
    ArgOperands = mlir::CallOpInterface::getArgOperands(a4);
    p_OperandRange = v35;
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
    v38 = v37;
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, a2, &OperandRange);
    v40 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v38, v39, 0);
    v41 = v40;
    if (!v40)
      goto LABEL_38;
    v42 = *v40;
    v43 = mlir::TypeID::get<mlir::ShapedType>();
    v44 = *(unsigned int *)(v42 + 16);
    if (!(_DWORD)v44)
      goto LABEL_38;
    v45 = *(_QWORD **)(v42 + 8);
    v46 = &v45[2 * v44];
    do
    {
      v47 = v44 >> 1;
      v48 = &v45[2 * (v44 >> 1)];
      v50 = *v48;
      v49 = v48 + 2;
      v44 += ~(v44 >> 1);
      if (v50 < v43)
        v45 = v49;
      else
        v44 = v47;
    }
    while (v44);
    if (v45 != v46 && *v45 == v43)
      v51 = (uint64_t *)v45[1];
    else
LABEL_38:
      v51 = 0;
    ArgOperands = (uint64_t)v41;
    p_OperandRange = v51;
    *(_QWORD *)a4 = (*(uint64_t (**)(uint64_t, mlir::CallOpInterface *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a4, &ArgOperands);
    *((_QWORD *)a4 + 1) = v52;
    return 1;
  }
  return a6;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::ConvertDataTypePassBase<mlir::`anonymous namespace'::ConvertF32ToF16Pass>::runOnOperation(void)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  char v5;
  unsigned int *v6;
  uint64_t Inputs;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Results;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  mlir::MLIRContext *Context;
  uint64_t v44;
  unsigned int *v45;
  uint64_t InterfaceFor;
  uint64_t *v47;
  mlir::Attribute *v48;
  uint64_t v49;
  uint64_t v50;
  mlir::StringAttr *v51;
  uint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t InherentAttr;
  char v56;
  void *v57;
  BOOL v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t ArgAttrsAttr;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t j;
  uint64_t NextResultAtOffset;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *i;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t OperandRange;
  uint64_t v118[2];
  uint64_t FunctionType;
  unsigned int *v120;
  __int128 v121;
  _OWORD v122[3];
  unint64_t v123[2];
  _QWORD *v124;
  uint64_t v125;
  void *Value;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  _BYTE v130[16];
  __int16 v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 **)a1;
  if (!*(_BYTE *)(a2 + 47) || (mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v5))
    mlir::DictionaryAttr::get(a2 + 56, "name", 4uLL);
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
    v6 = (unsigned int *)a2;
  else
    v6 = 0;
  v120 = v6;
  if (v6)
  {
    FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v120);
    *(_QWORD *)&v129 = v130;
    *((_QWORD *)&v129 + 1) = 0x100000000;
    Value = &v128;
    v127 = 0x100000000;
    Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionType);
    if (v8)
    {
      v9 = (_QWORD **)Inputs;
      v10 = (_QWORD **)(Inputs + 8 * v8);
      do
      {
        v11 = *v9;
        if (!*v9)
          goto LABEL_19;
        v12 = *v11;
        v13 = mlir::TypeID::get<mlir::ShapedType>();
        v14 = *(unsigned int *)(v12 + 16);
        if (!(_DWORD)v14)
          goto LABEL_19;
        v15 = *(_QWORD **)(v12 + 8);
        v16 = &v15[2 * v14];
        do
        {
          v17 = v14 >> 1;
          v18 = &v15[2 * (v14 >> 1)];
          v20 = *v18;
          v19 = v18 + 2;
          v14 += ~(v14 >> 1);
          if (v20 < v13)
            v15 = v19;
          else
            v14 = v17;
        }
        while (v14);
        if (v15 != v16 && *v15 == v13)
          v21 = v15[1];
        else
LABEL_19:
          v21 = 0;
        v124 = v11;
        v125 = v21;
        *(_QWORD *)&v121 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v124);
        if ((*(unsigned int (**)(unsigned __int8 *, __int128 *))(*(_QWORD *)v4 + 96))(v4, &v121))
        {
          v123[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v124);
          v22 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, unint64_t *))(*(_QWORD *)v4 + 104))(v4, a2, v123);
          LOBYTE(v121) = 0;
          LOBYTE(v122[0]) = 0;
          v23 = mlir::ShapedType::cloneWith((uint64_t *)&v124, &v121, v22);
        }
        else
        {
          v23 = (uint64_t)v124;
        }
        v24 = DWORD2(v129);
        if (DWORD2(v129) >= (unint64_t)HIDWORD(v129))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v130, DWORD2(v129) + 1, 8);
          v24 = DWORD2(v129);
        }
        *(_QWORD *)(v129 + 8 * v24) = v23;
        ++DWORD2(v129);
        ++v9;
      }
      while (v9 != v10);
    }
    Results = mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionType);
    if (v26)
    {
      v27 = (_QWORD **)Results;
      v28 = (_QWORD **)(Results + 8 * v26);
      do
      {
        v29 = *v27;
        if (!*v27)
          goto LABEL_39;
        v30 = *v29;
        v31 = mlir::TypeID::get<mlir::ShapedType>();
        v32 = *(unsigned int *)(v30 + 16);
        if (!(_DWORD)v32)
          goto LABEL_39;
        v33 = *(_QWORD **)(v30 + 8);
        v34 = &v33[2 * v32];
        do
        {
          v35 = v32 >> 1;
          v36 = &v33[2 * (v32 >> 1)];
          v38 = *v36;
          v37 = v36 + 2;
          v32 += ~(v32 >> 1);
          if (v38 < v31)
            v33 = v37;
          else
            v32 = v35;
        }
        while (v32);
        if (v33 != v34 && *v33 == v31)
          v39 = v33[1];
        else
LABEL_39:
          v39 = 0;
        v124 = v29;
        v125 = v39;
        *(_QWORD *)&v121 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v124);
        if ((*(unsigned int (**)(unsigned __int8 *, __int128 *))(*(_QWORD *)v4 + 96))(v4, &v121))
        {
          v123[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v124);
          v40 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, unint64_t *))(*(_QWORD *)v4 + 104))(v4, a2, v123);
          LOBYTE(v121) = 0;
          LOBYTE(v122[0]) = 0;
          v41 = mlir::ShapedType::cloneWith((uint64_t *)&v124, &v121, v40);
        }
        else
        {
          v41 = (uint64_t)v124;
        }
        v42 = v127;
        if (v127 >= (unint64_t)HIDWORD(v127))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, &v128, v127 + 1, 8);
          v42 = v127;
        }
        *((_QWORD *)Value + v42) = v41;
        LODWORD(v127) = v127 + 1;
        ++v27;
      }
      while (v27 != v28);
    }
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v120 + 6));
    mlir::ValueRange::ValueRange((unint64_t *)&v124, v129, DWORD2(v129));
    mlir::ValueRange::ValueRange(v123, (uint64_t)Value, v127);
    v44 = mlir::FunctionType::get(Context, (uint64_t)v124, v125, v123[0], v123[1]);
    v45 = v120;
    if (v120)
      InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v120);
    else
      InterfaceFor = 0;
    mlir::function_interface_impl::setFunctionType((uint64_t)v45, InterfaceFor, v44);
    v96 = v120[11];
    if ((v96 & 0x7FFFFF) != 0)
      v97 = (_QWORD *)((((unint64_t)&v120[4 * ((v96 >> 23) & 1) + 17] + ((v96 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v120[10]);
    else
      v97 = 0;
    if ((_QWORD *)*v97 != v97)
    {
      v98 = v97[1];
      v99 = v98 ? v98 - 8 : 0;
      v100 = *(uint64_t **)(v99 + 48);
      for (i = *(uint64_t **)(v99 + 56); v100 != i; ++v100)
      {
        v104 = *v100;
        v105 = (uint64_t *)(*(_QWORD *)(*v100 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v105)
          goto LABEL_128;
        v106 = *v105;
        v107 = mlir::TypeID::get<mlir::ShapedType>();
        v108 = *(unsigned int *)(v106 + 16);
        if (!(_DWORD)v108)
          goto LABEL_128;
        v109 = *(_QWORD **)(v106 + 8);
        v110 = &v109[2 * v108];
        do
        {
          v111 = v108 >> 1;
          v112 = &v109[2 * (v108 >> 1)];
          v114 = *v112;
          v113 = v112 + 2;
          v108 += ~(v108 >> 1);
          if (v114 < v107)
            v109 = v113;
          else
            v108 = v111;
        }
        while (v108);
        if (v109 != v110 && *v109 == v107)
          v115 = v109[1];
        else
LABEL_128:
          v115 = 0;
        v118[0] = (uint64_t)v105;
        v118[1] = v115;
        *(_QWORD *)&v121 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
        if ((*(unsigned int (**)(unsigned __int8 *, __int128 *))(*(_QWORD *)v4 + 96))(v4, &v121))
        {
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
          v116 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t *))(*(_QWORD *)v4 + 104))(v4, a2, &OperandRange);
          LOBYTE(v121) = 0;
          LOBYTE(v122[0]) = 0;
          *(_QWORD *)(v104 + 8) = *(_QWORD *)(v104 + 8) & 7 | mlir::ShapedType::cloneWith(v118, &v121, v116);
        }
      }
    }
    if (Value != &v128)
      free(Value);
    v95 = (void *)v129;
    if ((_BYTE *)v129 == v130)
      goto LABEL_111;
LABEL_110:
    free(v95);
    goto LABEL_111;
  }
  v47 = (uint64_t *)v122;
  *(_QWORD *)&v121 = v122;
  v122[0] = xmmword_1E0E54B00;
  v122[1] = *(_OWORD *)&off_1E0E54B10;
  v122[2] = xmmword_1E0E54B20;
  *((_QWORD *)&v121 + 1) = 0x300000003;
  v48 = (mlir::Attribute *)(a2 + 24);
  do
  {
    v54 = (const void *)*v47;
    v53 = v47[1];
    if (!*(_BYTE *)(a2 + 47) || (InherentAttr = mlir::Operation::getInherentAttr(a2, *v47, v47[1]), !v56))
      InherentAttr = mlir::DictionaryAttr::get(a2 + 56, v54, v53);
    if (InherentAttr)
    {
      v57 = *(void **)(*(_QWORD *)InherentAttr + 136);
      v58 = v57 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
      v59 = v57 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id ? InherentAttr : 0;
      v124 = (_QWORD *)v59;
      if (v58)
      {
        *(_QWORD *)&v129 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v124);
        if ((*(unsigned int (**)(unsigned __int8 *, __int128 *))(*(_QWORD *)v4 + 96))(v4, &v129))
        {
          Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v124);
          v49 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, void **))(*(_QWORD *)v4 + 104))(v4, a2, &Value);
          v50 = mlir::TypeAttr::get(v49);
LABEL_52:
          v51 = (mlir::StringAttr *)mlir::Attribute::getContext(v48);
          v131 = 261;
          *(_QWORD *)&v129 = v54;
          *((_QWORD *)&v129 + 1) = v53;
          v52 = mlir::StringAttr::get(v51, (mlir::MLIRContext *)&v129);
          mlir::Operation::setAttr(a2, v52, v50);
          goto LABEL_53;
        }
        v60 = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v124);
        *(_QWORD *)&v129 = mlir::getElementTypeOrSelf(v60);
        if ((*(unsigned int (**)(unsigned __int8 *, __int128 *))(*(_QWORD *)v4 + 96))(v4, &v129))
        {
          v61 = (uint64_t *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v124);
          v62 = v61;
          if (!v61)
            goto LABEL_74;
          v63 = *v61;
          v64 = mlir::TypeID::get<mlir::ShapedType>();
          v65 = *(unsigned int *)(v63 + 16);
          if (!(_DWORD)v65)
            goto LABEL_74;
          v66 = *(_QWORD **)(v63 + 8);
          v67 = &v66[2 * v65];
          do
          {
            v68 = v65 >> 1;
            v69 = &v66[2 * (v65 >> 1)];
            v71 = *v69;
            v70 = v69 + 2;
            v65 += ~(v65 >> 1);
            if (v71 < v64)
              v66 = v70;
            else
              v65 = v68;
          }
          while (v65);
          if (v66 != v67 && *v66 == v64)
            v72 = v66[1];
          else
LABEL_74:
            v72 = 0;
          Value = v62;
          v127 = v72;
          ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
          v75 = v74;
          v76 = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v124);
          v123[0] = mlir::getElementTypeOrSelf(v76);
          v77 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, unint64_t *))(*(_QWORD *)v4 + 104))(v4, a2, v123);
          v78 = mlir::RankedTensorType::get(ArgAttrsAttr, v75, v77, 0);
          v50 = mlir::TypeAttr::get(v78);
          v48 = (mlir::Attribute *)(a2 + 24);
          goto LABEL_52;
        }
      }
    }
LABEL_53:
    v47 += 2;
  }
  while (v47 != (uint64_t *)v123);
  v79 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v79)
    v80 = a2 - 16;
  else
    v80 = 0;
  if ((_DWORD)v79)
  {
    for (j = 0; j != v79; ++j)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v80, j);
      v83 = (uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v83)
        goto LABEL_92;
      v84 = *v83;
      v85 = mlir::TypeID::get<mlir::ShapedType>();
      v86 = *(unsigned int *)(v84 + 16);
      if (!(_DWORD)v86)
        goto LABEL_92;
      v87 = *(_QWORD **)(v84 + 8);
      v88 = &v87[2 * v86];
      do
      {
        v89 = v86 >> 1;
        v90 = &v87[2 * (v86 >> 1)];
        v92 = *v90;
        v91 = v90 + 2;
        v86 += ~(v86 >> 1);
        if (v92 < v85)
          v87 = v91;
        else
          v86 = v89;
      }
      while (v86);
      if (v87 != v88 && *v87 == v85)
        v93 = v87[1];
      else
LABEL_92:
        v93 = 0;
      Value = v83;
      v127 = v93;
      v124 = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
      if ((*(unsigned int (**)(unsigned __int8 *, _QWORD **))(*(_QWORD *)v4 + 96))(v4, &v124))
      {
        v94 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD **))(*(_QWORD *)v4 + 104))(v4, a2, &v124);
        LOBYTE(v129) = 0;
        v130[0] = 0;
        *(_QWORD *)(NextResultAtOffset + 8) = *(_QWORD *)(NextResultAtOffset + 8) & 7 | mlir::ShapedType::cloneWith((uint64_t *)&Value, &v129, v94);
      }
    }
  }
  v95 = (void *)v121;
  if ((_OWORD *)v121 != v122)
    goto LABEL_110;
LABEL_111:
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
    v102 = (void *)a2;
  else
    v102 = 0;
  Value = v102;
  if (v102)
  {
    v121 = 0uLL;
    *(_QWORD *)&v129 = mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)&Value);
    *((_QWORD *)&v129 + 1) = v103;
    if ((*(unsigned __int8 (**)(unsigned __int8 *, uint64_t, __int128 *, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 144))(v4, a2, &v129, &v121, *(_QWORD *)(a1 + 8), v4[344], v4[345]))
    {
      mlir::mps::ConstantOp::updateValue((uint64_t *)&Value, (_QWORD *)v121);
    }
  }
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&)>::callback_fn<mlir::`anonymous namespace'::ConvertDataTypePassBase<mlir::`anonymous namespace'::ConvertF32ToF16Pass>::convertElementsAttr(mlir::Operation *,mlir::ElementsAttr const&,mlir::ElementsAttr&,unsigned long &,BOOL,BOOL)::{lambda(llvm::APInt const&)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 isUnsignedInteger;

  v4 = *a1;
  isUnsignedInteger = mlir::Type::isUnsignedInteger((mlir::Type *)a1[1]);
  return (*(uint64_t (**)(uint64_t, uint64_t, _BOOL8, uint64_t))(*(_QWORD *)v4 + 128))(v4, a2, isUnsignedInteger, a1[2]);
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APFloat const&)>::callback_fn<mlir::`anonymous namespace'::ConvertDataTypePassBase<mlir::`anonymous namespace'::ConvertF32ToF16Pass>::convertElementsAttr(mlir::Operation *,mlir::ElementsAttr const&,mlir::ElementsAttr&,unsigned long &,BOOL,BOOL)::{lambda(llvm::APFloat const&)#1}>(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 136))(*a1, a2, a1[1]);
}

void mlir::MPSToANECOpCreator::MPSToANECOpCreator(mlir::MPSToANECTypeConverter **a1, uint64_t a2, uint64_t a3, char a4, int a5, char a6, char a7, char a8, char a9, char a10, unsigned int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  mlir::MPSToANECTypeConverter *v21;
  mlir::MPSToANECTypeConverter *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  mlir::MPSToANECTypeConverter *v28;
  uint64_t *v31;
  char v32;
  char v33[2];
  int v34;
  uint64_t v35[2];
  uint64_t v36;
  void *v37[2];
  _OWORD v38[2];
  mlir::MPSToANECTypeConverter *v39;
  uint64_t v40;
  void *__p[2];
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[8];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v35[0] = a14;
  v35[1] = a15;
  v34 = a3;
  v33[1] = a4;
  v33[0] = a9;
  v32 = a10;
  v21 = (mlir::MPSToANECTypeConverter *)operator new(0x218uLL);
  *a1 = mlir::MPSToANECTypeConverter::MPSToANECTypeConverter(v21);
  a1[1] = (mlir::MPSToANECTypeConverter *)off_1E0E2B708;
  a1[2] = 0;
  a1[3] = 0;
  *((_DWORD *)a1 + 8) = 0;
  a1[7] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[5] = (mlir::MPSToANECTypeConverter *)(a1 + 7);
  a1[6] = 0;
  a1[8] = 0;
  *((_DWORD *)a1 + 18) = 0;
  a1[12] = (mlir::MPSToANECTypeConverter *)0x1000000000;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = (mlir::MPSToANECTypeConverter *)0x2800000000;
  a1[19] = 0;
  a1[20] = (mlir::MPSToANECTypeConverter *)a2;
  a1[21] = (mlir::MPSToANECTypeConverter *)a2;
  *((_BYTE *)a1 + 200) = 1;
  v22 = (mlir::MPSToANECTypeConverter *)(a1 + 25);
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  *(_OWORD *)((char *)a1 + 204) = 0u;
  *(_OWORD *)((char *)a1 + 220) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  a1[31] = (mlir::MPSToANECTypeConverter *)978433816;
  *((_BYTE *)a1 + 256) = 0;
  *((_BYTE *)a1 + 272) = 0;
  a1[35] = 0;
  v40 = a2;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  v43 = v45;
  v44 = 0x600000000;
  v45[6] = 0;
  v45[7] = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0x2800000000;
  v50 = 0;
  v51 = 0;
  v52 = 0x2800000000;
  mlir::populateMPSToANECConversionPatterns(a3, a4, &v40, (uint64_t)v21);
  *(_QWORD *)&v38[0] = "func";
  *((_QWORD *)&v38[0] + 1) = 4;
  mlir::ConversionTarget::setDialectAction((uint64_t *)a1 + 1, (uint64_t)v38, 1, 2);
  *(_QWORD *)&v38[0] = "memref";
  *((_QWORD *)&v38[0] + 1) = 6;
  mlir::ConversionTarget::setDialectAction((uint64_t *)a1 + 1, (uint64_t)v38, 1, 2);
  *(_QWORD *)&v38[0] = "mps";
  *((_QWORD *)&v38[0] + 1) = 3;
  v37[1] = (void *)0x200000000;
  mlir::ConversionTarget::setDialectAction((uint64_t *)a1 + 1, (uint64_t)v38, 1, 2);
  v37[0] = off_1E0DFB868;
  *((_QWORD *)&v38[0] + 1) = v37;
  mlir::OperationName::OperationName(&v36, "mps.constant", 12, a1[20]);
  v23 = v36;
  mlir::ConversionTarget::setOpAction((uint64_t)(a1 + 1), v36, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)(a1 + 1), v23, v37);
  v24 = (void **)*((_QWORD *)&v38[0] + 1);
  if (*((void ***)&v38[0] + 1) == v37)
  {
    v25 = 4;
    v24 = v37;
  }
  else
  {
    if (!*((_QWORD *)&v38[0] + 1))
      goto LABEL_6;
    v25 = 5;
  }
  (*((void (**)(void))*v24 + v25))();
LABEL_6:
  if (a5)
  {
    mlir::getDeviceInfo(a3, a11, (uint64_t)v37);
    v26 = v38[0];
    *(_OWORD *)v22 = *(_OWORD *)v37;
    *(_OWORD *)(a1 + 27) = v26;
    *(_OWORD *)(a1 + 29) = v38[1];
    a1[31] = v39;
    v27 = *((unsigned __int8 *)a1 + 272);
    a1[32] = 0;
    if (!v27)
      *((_BYTE *)a1 + 272) = 1;
    *((_BYTE *)a1 + 256) = a6;
    *((_BYTE *)a1 + 257) = a7;
    *((_BYTE *)a1 + 258) = a8;
    a1[33] = v22;
  }
  v28 = *a1;
  v31 = (uint64_t *)(a1 + 25);
  v37[0] = "mps";
  v37[1] = (void *)3;
  std::make_unique[abi:nn180100]<mlir::ANECRegionOpCreator,mlir::OpBuilder &,mlir::ConversionTarget &,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family &,mlir::DeviceInfo *,llvm::StringLiteral,long long &,long long &,BOOL &,BOOL &,llvm::StringRef &,BOOL &>((uint64_t)(a1 + 21), (mlir::ConversionTarget *)(a1 + 1), (uint64_t)&v40, (int)v28, &v34, &v31, (uint64_t *)v37, &a12, &a13, &v32, v33, v35);
}

void std::make_unique[abi:nn180100]<mlir::ANECRegionOpCreator,mlir::OpBuilder &,mlir::ConversionTarget &,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family &,mlir::DeviceInfo *,llvm::StringLiteral,long long &,long long &,BOOL &,BOOL &,llvm::StringRef &,BOOL &>(uint64_t a1, mlir::ConversionTarget *a2, uint64_t a3, int a4, int *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10, char *a11, uint64_t *a12)
{
  int v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  void *__p[2];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[8];
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v17 = operator new(0x128uLL);
  v18 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)__p = *(_OWORD *)a3;
  v25 = v18;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v19 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v26 = v19;
  v27[0] = v28;
  v27[1] = 0x600000000;
  if (*(_DWORD *)(a3 + 48))
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v27, a3 + 40);
  v28[6] = *(_QWORD *)(a3 + 104);
  v28[7] = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  v29 = *(_DWORD *)(a3 + 120);
  *(_DWORD *)(a3 + 120) = 0;
  v30 = *(_QWORD *)(a3 + 128);
  v31 = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_DWORD *)(a3 + 144) = 0;
  v32 = *(_QWORD *)(a3 + 152);
  v33 = *(_OWORD *)(a3 + 160);
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_DWORD *)(a3 + 168) = 0;
  mlir::ANECRegionOpCreator::ANECRegionOpCreator((uint64_t)v17, a1, a2, (int)__p, a4, *a5, *a6, v16, *a7, a7[1], *a8, *a9, *a10, *a11, *a12, a12[1]);
}

uint64_t mlir::createMPSToANECPass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  int v23;

  v4 = (char *)operator new(0xDB8uLL);
  *(_QWORD *)v5 = off_1E0E2B348;
  *(_DWORD *)(v5 + 472) = *(_DWORD *)(a1 + 56);
  v6 = *(_QWORD *)(v5 + 936);
  if (!v6)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a1 + 56);
  *((_QWORD *)v4 + 292) = *(_QWORD *)(a1 + 16);
  v7 = *((_QWORD *)v4 + 300);
  if (!v7)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1 + 16);
  *((_QWORD *)v4 + 319) = *(_QWORD *)(a1 + 24);
  v8 = *((_QWORD *)v4 + 327);
  if (!v8)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, a1 + 24);
  v4[1088] = *(_BYTE *)(a1 + 4);
  v9 = *((_QWORD *)v4 + 143);
  if (!v9)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, a1 + 4);
  v4[1296] = *(_BYTE *)a1;
  v10 = *((_QWORD *)v4 + 169);
  if (!v10)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, a1);
  v4[1712] = *(_BYTE *)(a1 + 1);
  v11 = *((_QWORD *)v4 + 221);
  if (!v11)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a1 + 1);
  v4[1504] = *(_BYTE *)(a1 + 2);
  v12 = *((_QWORD *)v4 + 195);
  if (!v12)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, a1 + 2);
  v4[1920] = *(_BYTE *)(a1 + 3);
  v13 = *((_QWORD *)v4 + 247);
  if (!v13)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, a1 + 3);
  v14 = *(_DWORD *)(a1 + 8);
  *((_DWORD *)v4 + 692) = v14;
  v23 = v14;
  v15 = *((_QWORD *)v4 + 353);
  if (!v15)
    goto LABEL_14;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v15 + 48))(v15, &v23);
  v4[2976] = *(_BYTE *)(a1 + 5);
  v16 = *((_QWORD *)v4 + 379);
  if (!v16)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, a1 + 5);
  std::string::operator=((std::string *)(v4 + 3184), (const std::string *)(a1 + 32));
  v17 = *((_QWORD *)v4 + 410);
  if (!v17)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, a1 + 32);
  v19 = *(_BYTE *)(a1 + 60);
  v18 = a1 + 60;
  v4[3432] = v19;
  v20 = *((_QWORD *)v4 + 436);
  if (v20)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 48))(v20, v18);
    *a2 = v4;
  }
  else
  {
LABEL_14:
    v22 = std::__throw_bad_function_call[abi:nn180100]();
    return mlir::createMPSPlacementPass(v22);
  }
  return result;
}

mlir::MPSToANECTypeConverter *mlir::createMPSPlacementPass@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mlir::MPSToANECTypeConverter *result;
  mlir::MPSToANECTypeConverter *v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;

  v10 = operator new(0x978uLL);
  v20 = a1;
  v19 = a3;
  v18 = a4;
  *(_QWORD *)v11 = off_1E0E26538;
  *(_DWORD *)(v11 + 472) = a1;
  v12 = *(_QWORD *)(v11 + 936);
  if (!v12)
    goto LABEL_6;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v20);
  v10[376] = a2;
  v21 = a2;
  v13 = *((_QWORD *)v10 + 195);
  if (!v13)
    goto LABEL_6;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v21);
  *((_QWORD *)v10 + 292) = a3;
  v14 = *((_QWORD *)v10 + 300);
  if (v14
    && ((*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(v14, &v19),
        *((_BYTE *)v10 + 1296) = a4,
        (v15 = *((_QWORD *)v10 + 169)) != 0))
  {
    result = (mlir::MPSToANECTypeConverter *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v15 + 48))(v15, &v18);
    *a5 = v10;
  }
  else
  {
LABEL_6:
    v17 = (mlir::MPSToANECTypeConverter *)std::__throw_bad_function_call[abi:nn180100]();
    return mlir::MPSToANECTypeConverter::MPSToANECTypeConverter(v17);
  }
  return result;
}

mlir::MPSToANECTypeConverter *mlir::MPSToANECTypeConverter::MPSToANECTypeConverter(mlir::MPSToANECTypeConverter *this)
{
  char *v2;
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t (**v14)();
  void *v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  v2 = (char *)this + 232;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_QWORD *)this = off_1E0E2B630;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 0x400000000;
  *((_QWORD *)this + 19) = (char *)this + 168;
  *((_DWORD *)this + 41) = 2;
  *((_QWORD *)this + 29) = (char *)this + 248;
  *((_DWORD *)this + 61) = 2;
  *((_QWORD *)this + 39) = (char *)this + 328;
  *((_DWORD *)this + 81) = 2;
  *((_QWORD *)this + 49) = (char *)this + 408;
  *((_DWORD *)this + 101) = 2;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_DWORD *)this + 122) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  llvm::sys::RWMutexImpl::RWMutexImpl((mlir::MPSToANECTypeConverter *)((char *)this + 520));
  *((_QWORD *)this + 66) = 0;
  *(_QWORD *)this = off_1E0E2BE18;
  v14 = off_1E0E51B50;
  v15 = mlir::MPSToANECTypeConverter::canonicalizeType;
  v16 = &v14;
  mlir::TypeConverter::registerConversion((unsigned int *)this, (uint64_t)&v14);
  v3 = v16;
  if (v16 == &v14)
  {
    v4 = 4;
    v3 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_6:
  v14 = off_1E0E51B08;
  v15 = mlir::MPSToANECTypeConverter::tensorToMemRef;
  v16 = &v14;
  mlir::TypeConverter::registerConversion((unsigned int *)this, (uint64_t)&v14);
  v5 = v16;
  if (v16 == &v14)
  {
    v6 = 4;
    v5 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_11:
  v14 = &off_1E0E51BE0;
  v15 = mlir::MPSToANECTypeConverter::materializeTypeChange;
  v16 = &v14;
  v7 = *((unsigned int *)this + 60);
  if (v7 >= *((_DWORD *)this + 61))
  {
    llvm::SmallVectorTemplateBase<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>,false>::growAndEmplaceBack<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>((uint64_t)v2, (uint64_t)&v14);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 29) + 32 * v7 + 24) = *((_QWORD *)this + 29) + 32 * v7;
    ((void (*)(uint64_t (***)()))(*v16)[3])(v16);
    ++*((_DWORD *)this + 60);
  }
  v8 = v16;
  if (v16 == &v14)
  {
    v9 = 4;
    v8 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_18;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_18:
  v14 = &off_1E0E51BE0;
  v15 = mlir::MPSToANECTypeConverter::materializeTypeChangeWithPromotion;
  v16 = &v14;
  v10 = *((unsigned int *)this + 80);
  if (v10 >= *((_DWORD *)this + 81))
  {
    llvm::SmallVectorTemplateBase<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>,false>::growAndEmplaceBack<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>((uint64_t)this + 312, (uint64_t)&v14);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 39) + 32 * v10 + 24) = *((_QWORD *)this + 39) + 32 * v10;
    ((void (*)(uint64_t (***)()))(*v16)[3])(v16);
    ++*((_DWORD *)this + 80);
  }
  v11 = v16;
  if (v16 == &v14)
  {
    v12 = 4;
    v11 = &v14;
    goto LABEL_24;
  }
  if (v16)
  {
    v12 = 5;
LABEL_24:
    (*v11)[v12]();
  }
  return this;
}

uint64_t mlir::MPSToANECTypeConverter::canonicalizeType(uint64_t a1)
{
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return mlir::MPSToANECTypeConverter::canonicalizeIntegerType(a1);
  return a1;
}

uint64_t mlir::MPSToANECTypeConverter::tensorToMemRef(uint64_t a1)
{
  uint64_t ElementType;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *ArgAttrsAttr;
  mlir::AffineMap *v17;
  mlir::AffineMap *v18;
  uint64_t OperandRange;
  uint64_t v21;
  _QWORD v22[2];
  char v23;

  v21 = a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v21);
  v2 = ElementType;
  if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v2 = mlir::MPSToANECTypeConverter::canonicalizeIntegerType(ElementType);
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v21))
    return mlir::UnrankedMemRefType::get(v2, 0);
  LOBYTE(v22[0]) = 0;
  v23 = 0;
  v3 = (uint64_t *)mlir::TensorType::cloneWith((uint64_t)&v21, (uint64_t)v22, v2);
  v4 = (uint64_t)v3;
  if (!v3)
    goto LABEL_13;
  v5 = *v3;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_13:
    v14 = 0;
  v22[0] = mlir::getRankPromotionTypeForANE(v4, v14);
  v22[1] = v15;
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  v18 = v17;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
  return mlir::MemRefType::get(ArgAttrsAttr, v18, OperandRange, 0, 0, 0);
}

char *mlir::MPSToANECTypeConverter::materializeTypeChange(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10[0] = a3;
  v10[1] = a4;
  v8 = mlir::ValueRange::dereference_iterator(v10, 0);
  return (char *)mlir::OpBuilder::create<mlir::anec::UnrealizedConversionCast,mlir::Type &,mlir::Value>(a1, a5, &v9, &v8)- 16;
}

char *mlir::MPSToANECTypeConverter::materializeTypeChangeWithPromotion(mlir::OpBuilder *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[2];
  _QWORD v21[3];

  v6 = (uint64_t)a2;
  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a3;
  v21[1] = a4;
  if (a2)
  {
    v8 = *a2;
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *(unsigned int *)(v8 + 16);
    if (!(_DWORD)v10)
      goto LABEL_10;
    v11 = *(_QWORD **)(v8 + 8);
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      a2 = (uint64_t *)v11[1];
    else
LABEL_10:
      a2 = 0;
  }
  v20[0] = mlir::getRankPromotionTypeForANE(v6, (uint64_t)a2);
  v20[1] = v17;
  v19 = mlir::ValueRange::dereference_iterator(v21, 0);
  return (char *)mlir::OpBuilder::create<mlir::anec::UnrealizedConversionCast,mlir::Type &,mlir::Value>(a1, a5, v20, &v19)- 16;
}

void mlir::MPSToANECTypeConverter::~MPSToANECTypeConverter(pthread_rwlock_t **this)
{
  mlir::TypeConverter::~TypeConverter(this);
}

void sub_18072B47C(void *__p)
{
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51B50;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_E7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51B50;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_EclEOS5_SJ_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;

  if (*a2)
  {
    v4 = (*(uint64_t (**)(void))(a1 + 8))();
    if (v4)
    {
      v5 = *(unsigned int *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5 + 1, 8);
        LODWORD(v5) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    v6 = v4 != 0;
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return v6 | (v7 << 8);
}

uint64_t mlir::MPSToANECTypeConverter::canonicalizeIntegerType(uint64_t a1)
{
  uint64_t v1;
  unsigned int Width;
  uint64_t Context;
  uint64_t v5;

  v5 = a1;
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v5) > 7)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v5))
      return v5;
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v5);
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v5);
    v1 = Context;
  }
  else
  {
    v1 = mlir::Attribute::getContext((mlir::Attribute *)&v5);
    Width = 8;
  }
  return mlir::IntegerType::get(v1, Width, 1u);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51B08;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_E7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51B08;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_EclEOS8_SL_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  BOOL v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  uint64_t v12;

  v3 = *(void **)(**(_QWORD **)a2 + 136);
  v4 = v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (v4 && (v6 = (*(uint64_t (**)(void))(a1 + 8))(), v7))
  {
    if (v6)
    {
      v8 = *(unsigned int *)(a3 + 8);
      if (v8 >= *(_DWORD *)(a3 + 12))
      {
        v12 = v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
        v6 = v12;
        LODWORD(v8) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v6;
      ++*(_DWORD *)(a3 + 8);
    }
    v9 = v6 != 0;
    v10 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  return v9 | (v10 << 8);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::UnrealizedConversionCast,mlir::Type &,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.unrealized_conversion_cast", (const unsigned __int8 *)0x1F, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.unrealized_conversion_cast";
    v17[3] = 31;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::UnrealizedConversionCast,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_BYTE *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_18MPSToANECOpCreatorC1EPNS2_11MLIRContextENS2_4anec6FamilyEbbbbbbbjxxN4llvm9StringRefEE3__0EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSG_EUlSI_E_NS_9allocatorISM_EEFNS_8optionalIbEESI_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1E0DFB868;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_18MPSToANECOpCreatorC1EPNS2_11MLIRContextENS2_4anec6FamilyEbbbbbbbjxxN4llvm9StringRefEE3__0EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSG_EUlSI_E_NS_9allocatorISM_EEFNS_8optionalIbEESI_EE7__cloneEPNS0_6__baseISR_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E0DFB868;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_18MPSToANECOpCreatorC1EPNS2_11MLIRContextENS2_4anec6FamilyEbbbbbbbjxxN4llvm9StringRefEE3__0EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSG_EUlSI_E_NS_9allocatorISM_EEFNS_8optionalIbEESI_EEclEOSI_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;

  v2 = *(_QWORD *)(*a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v2 = 0;
  v5 = v2;
  if (v2)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
    LODWORD(v2) = v3 > 3;
  }
  return v2 | 0x100;
}

uint64_t llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v16 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v17 = &v4[8 * v5];
        do
        {
          v18 = *(_QWORD *)v4;
          *(_QWORD *)v4 = 0;
          v19 = *(unsigned int **)v16;
          *(_QWORD *)v16 = v18;
          if (v19)
          {
            v20 = *(unsigned int **)v19;
            v21 = v19[2];
            if ((_DWORD)v21)
            {
              v22 = 8 * v21;
              v23 = (char *)(v20 - 2);
              do
              {
                v24 = *(_QWORD *)&v23[v22];
                *(_QWORD *)&v23[v22] = 0;
                if (v24)
                  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                v22 -= 8;
              }
              while (v22);
              v20 = *(unsigned int **)v19;
            }
            if (v20 != v19 + 4)
              free(v20);
            operator delete(v19);
          }
          v4 += 8;
          v16 += 8;
        }
        while (v4 != v17);
        v25 = v16;
        v16 = *(char **)a1;
        v6 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v25 = *(char **)a1;
      }
      v62 = &v16[8 * v6];
      while (v62 != v25)
      {
        v64 = (unsigned int *)*((_QWORD *)v62 - 1);
        v62 -= 8;
        v63 = v64;
        *(_QWORD *)v62 = 0;
        if (v64)
        {
          v65 = *(unsigned int **)v63;
          v66 = v63[2];
          if ((_DWORD)v66)
          {
            v67 = 8 * v66;
            v68 = (char *)(v65 - 2);
            do
            {
              v69 = *(_QWORD *)&v68[v67];
              *(_QWORD *)&v68[v67] = 0;
              if (v69)
                (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
              v67 -= 8;
            }
            while (v67);
            v65 = *(unsigned int **)v63;
          }
          if (v65 != v63 + 4)
            free(v65);
          operator delete(v63);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v70 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v70)
      {
        v71 = *(char **)a2;
        v72 = (char *)(*(_QWORD *)a2 + 8 * v70);
        do
        {
          v74 = (unsigned int *)*((_QWORD *)v72 - 1);
          v72 -= 8;
          v73 = v74;
          *(_QWORD *)v72 = 0;
          if (v74)
          {
            v75 = *(unsigned int **)v73;
            v76 = v73[2];
            if ((_DWORD)v76)
            {
              v77 = 8 * v76;
              v78 = (char *)(v75 - 2);
              do
              {
                v79 = *(_QWORD *)&v78[v77];
                *(_QWORD *)&v78[v77] = 0;
                if (v79)
                  (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
                v77 -= 8;
              }
              while (v77);
              v75 = *(unsigned int **)v73;
            }
            if (v75 != v73 + 4)
              free(v75);
            operator delete(v73);
          }
        }
        while (v72 != v71);
      }
      goto LABEL_97;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v26 = &v4[8 * v6];
        v27 = *(char **)a1;
        do
        {
          v28 = *(_QWORD *)v4;
          *(_QWORD *)v4 = 0;
          v29 = *(unsigned int **)v27;
          *(_QWORD *)v27 = v28;
          if (v29)
          {
            v30 = *(unsigned int **)v29;
            v31 = v29[2];
            if ((_DWORD)v31)
            {
              v32 = 8 * v31;
              v33 = (char *)(v30 - 2);
              do
              {
                v34 = *(_QWORD *)&v33[v32];
                *(_QWORD *)&v33[v32] = 0;
                if (v34)
                  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                v32 -= 8;
              }
              while (v32);
              v30 = *(unsigned int **)v29;
            }
            if (v30 != v29 + 4)
              free(v30);
            operator delete(v29);
          }
          v4 += 8;
          v27 += 8;
        }
        while (v4 != v26);
        goto LABEL_48;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = (char *)(*(_QWORD *)a1 + 8 * v6);
        do
        {
          v10 = (unsigned int *)*((_QWORD *)v8 - 1);
          v8 -= 8;
          v9 = v10;
          *(_QWORD *)v8 = 0;
          if (v10)
          {
            v11 = *(unsigned int **)v9;
            v12 = v9[2];
            if ((_DWORD)v12)
            {
              v13 = 8 * v12;
              v14 = (char *)(v11 - 2);
              do
              {
                v15 = *(_QWORD *)&v14[v13];
                *(_QWORD *)&v14[v13] = 0;
                if (v15)
                  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
                v13 -= 8;
              }
              while (v13);
              v11 = *(unsigned int **)v9;
            }
            if (v11 != v9 + 4)
              free(v11);
            operator delete(v9);
          }
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::PDLPatternConfigSet>,false>::grow(a1, v5);
    }
    v6 = 0;
LABEL_48:
    v35 = *(char **)a2;
    v36 = *(unsigned int *)(a2 + 8);
    if (v6 != v36)
    {
      v37 = *(char **)a1;
      v38 = 8 * v6;
      v39 = (char *)(*(_QWORD *)a1 + 8 * v6);
      v40 = &v35[8 * v6];
      v41 = 8 * v36;
      v42 = 8 * v36 - 8 * v6 - 8;
      if (v42 < 0x78 || v40 < &v37[v41] && v39 < &v35[v41])
        goto LABEL_55;
      v43 = (v42 >> 3) + 1;
      v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      v39 += v44;
      v40 += v44;
      v45 = v38 + 16;
      v46 = &v35[v38 + 16];
      v47 = &v37[v45];
      v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v50 = *(_OWORD *)v46;
        *((_OWORD *)v46 - 1) = 0uLL;
        *(_OWORD *)v46 = 0uLL;
        *((_OWORD *)v47 - 1) = v49;
        *(_OWORD *)v47 = v50;
        v46 += 32;
        v47 += 32;
        v48 -= 4;
      }
      while (v48);
      if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_55:
        v51 = &v35[8 * v36];
        do
        {
          v52 = *(_QWORD *)v40;
          *(_QWORD *)v40 = 0;
          v40 += 8;
          *(_QWORD *)v39 = v52;
          v39 += 8;
        }
        while (v40 != v51);
      }
      v35 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v53 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v53)
    {
      v54 = &v35[8 * v53];
      do
      {
        v56 = (unsigned int *)*((_QWORD *)v54 - 1);
        v54 -= 8;
        v55 = v56;
        *(_QWORD *)v54 = 0;
        if (v56)
        {
          v57 = *(unsigned int **)v55;
          v58 = v55[2];
          if ((_DWORD)v58)
          {
            v59 = 8 * v58;
            v60 = (char *)(v57 - 2);
            do
            {
              v61 = *(_QWORD *)&v60[v59];
              *(_QWORD *)&v60[v59] = 0;
              if (v61)
                (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
              v59 -= 8;
            }
            while (v59);
            v57 = *(unsigned int **)v55;
          }
          if (v57 != v55 + 4)
            free(v57);
          operator delete(v55);
        }
      }
      while (v54 != v35);
    }
LABEL_97:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::PDLPatternConfigSet>,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  char *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;

  v30 = 0;
  v3 = (uint64_t *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v30);
  v5 = *(_QWORD *)a1;
  v6 = *(uint64_t **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v7)
    goto LABEL_27;
  v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v8 < 0xB)
  {
    v9 = v4;
LABEL_12:
    v18 = (uint64_t *)(v5 + 8 * v7);
    do
    {
      v19 = *v6;
      *v6++ = 0;
      *(_QWORD *)v9 = v19;
      v9 += 8;
    }
    while (v6 != v18);
    goto LABEL_14;
  }
  v10 = v5 >= (unint64_t)&v4[8 * v7] || (unint64_t)v4 >= v5 + 8 * v7;
  v9 = v4;
  if (!v10)
    goto LABEL_12;
  v11 = v8 + 1;
  v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
  v9 = &v4[v12];
  v6 = (uint64_t *)(v5 + v12);
  v13 = (__int128 *)(v5 + 16);
  v14 = v4 + 16;
  v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16 = *(v13 - 1);
    v17 = *v13;
    *(v13 - 1) = 0uLL;
    *v13 = 0uLL;
    *(v14 - 1) = v16;
    *v14 = v17;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_12;
LABEL_14:
  v20 = *(_QWORD **)a1;
  v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v7);
  do
  {
    v23 = (unsigned int *)*--v21;
    v22 = v23;
    *v21 = 0;
    if (v23)
    {
      v24 = *(unsigned int **)v22;
      v25 = v22[2];
      if ((_DWORD)v25)
      {
        v26 = 8 * v25;
        v27 = (char *)(v24 - 2);
        do
        {
          v28 = *(_QWORD *)&v27[v26];
          *(_QWORD *)&v27[v26] = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v26 -= 8;
        }
        while (v26);
        v24 = *(unsigned int **)v22;
      }
      if (v24 != v22 + 4)
        free(v24);
      operator delete(v22);
    }
  }
  while (v21 != v20);
  v6 = *(uint64_t **)a1;
LABEL_27:
  v29 = v30;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v29;
}

void mlir::ANECRegionOpCreator::ANECRegionOpCreator(uint64_t a1, uint64_t a2, mlir::ConversionTarget *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  *(_QWORD *)(a1 + 16) = a11;
  *(_QWORD *)(a1 + 24) = a12;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E0E2BBD8;
  *(_QWORD *)(a1 + 8) = a2;
  mlir::ConversionTarget::ConversionTarget((mlir::ConversionTarget *)(a1 + 40), a3);
}

uint64_t sub_18072BF9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  int v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (***v52)();
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (***v56)();
  uint64_t v57;
  uint64_t v58;
  uint64_t (***v59)();
  uint64_t v60;
  uint64_t v61;
  uint64_t (***v62)();
  uint64_t v63;
  uint64_t v64;
  uint64_t (***v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t (***v68)();
  uint64_t v69;
  uint64_t v70;
  uint64_t (***v71)();
  uint64_t v72;
  uint64_t v73;
  uint64_t (***v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t (***v77)();
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t (**v82)();
  int v83;
  uint64_t (***v84)();
  uint64_t (**v85)();
  uint64_t v86;
  const char *v87;
  uint64_t v88;

  *(_QWORD *)(v36 + 200) = v39;
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(v36 + 208, v42, 0, 0, 0, 0);
  *(_QWORD *)(v36 + 224) = &unk_1E0E480D0;
  *(_QWORD *)(v36 + 232) = v38;
  *(_QWORD *)(v36 + 240) = v45;
  *(_DWORD *)(v36 + 248) = v41;
  *(_BYTE *)(v36 + 252) = v44;
  *(_BYTE *)(v36 + 253) = v43;
  *(_QWORD *)(v36 + 256) = v80;
  if (v40 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v47 = v41;
  v48 = *(_BYTE *)(v46 + 72);
  if (v40 >= 0x17)
  {
    v50 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v50 = v40 | 7;
    v51 = v50 + 1;
    v49 = operator new(v50 + 1);
    *(_QWORD *)(v36 + 272) = v40;
    *(_QWORD *)(v36 + 280) = v51 | 0x8000000000000000;
    *(_QWORD *)(v36 + 264) = v49;
    goto LABEL_8;
  }
  v49 = (void *)(v36 + 264);
  *(_BYTE *)(v36 + 287) = v40;
  if (v40)
LABEL_8:
    memmove(v49, *(const void **)(v46 + 56), v40);
  *((_BYTE *)v49 + v40) = 0;
  *(_BYTE *)(v36 + 288) = v48;
  v82 = off_1E0E50E20;
  v83 = v47;
  v84 = &v82;
  v85 = (uint64_t (**)())&v87;
  v87 = "anec";
  v88 = 4;
  v86 = 0x200000001;
  mlir::ConversionTarget::setDialectAction(v37, (uint64_t)&v87, 1, 1);
  mlir::ConversionTarget::setLegalityCallback(v37, (uint64_t)v85, v86, &v82);
  if (v85 != (uint64_t (**)())&v87)
    free(v85);
  v52 = v84;
  if (v84 == &v82)
  {
    v54 = 4;
    v52 = &v82;
    v53 = v39;
  }
  else
  {
    v53 = v39;
    if (!v84)
      goto LABEL_16;
    v54 = 5;
  }
  (*v52)[v54]();
LABEL_16:
  v85 = off_1E0E50C28;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A12", 8, *(_QWORD *)(v36 + 192));
  v55 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v55, &v85);
  v56 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v57 = 4;
    v56 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_21;
    v57 = 5;
  }
  (*v56)[v57]();
LABEL_21:
  v85 = off_1E0E50C70;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A13", 8, *(_QWORD *)(v36 + 192));
  v58 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v58, &v85);
  v59 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v60 = 4;
    v59 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_26;
    v60 = 5;
  }
  (*v59)[v60]();
LABEL_26:
  v85 = off_1E0E50CB8;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A14", 8, *(_QWORD *)(v36 + 192));
  v61 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v61, &v85);
  v62 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v63 = 4;
    v62 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_31;
    v63 = 5;
  }
  (*v62)[v63]();
LABEL_31:
  v85 = off_1E0E50D00;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A15", 8, *(_QWORD *)(v36 + 192));
  v64 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v64, &v85);
  v65 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v66 = 4;
    v65 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_36;
    v66 = 5;
  }
  (*v65)[v66]();
LABEL_36:
  v85 = off_1E0E50D48;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A16", 8, *(_QWORD *)(v36 + 192));
  v67 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v67, &v85);
  v68 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v69 = 4;
    v68 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_41;
    v69 = 5;
  }
  (*v68)[v69]();
LABEL_41:
  v85 = off_1E0DFB8B0;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A17", 8, *(_QWORD *)(v36 + 192));
  v70 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v70, &v85);
  v71 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v72 = 4;
    v71 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_46;
    v72 = 5;
  }
  (*v71)[v72]();
LABEL_46:
  v85 = off_1E0E50D90;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A11Legacy", 14, *(_QWORD *)(v36 + 192));
  v73 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v73, &v85);
  v74 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v75 = 4;
    v74 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_51;
    v75 = 5;
  }
  (*v74)[v75]();
LABEL_51:
  v85 = off_1E0E50BE0;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.region_return", 18, *(_QWORD *)(v36 + 192));
  v76 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v76, &v85);
  v77 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v78 = 4;
    v77 = &v85;
    goto LABEL_55;
  }
  if (v88)
  {
    v78 = 5;
LABEL_55:
    (*v77)[v78]();
  }
  mlir::OperationName::OperationName(&v85, "anec.unrealized_conversion_cast", 31, *(_QWORD *)(v36 + 192));
  mlir::ConversionTarget::setOpAction((uint64_t)v37, (uint64_t)v85, 2);
  return v36;
}

_DWORD *std::__function::__func<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1},std::allocator<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1E0E50E20;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1},std::allocator<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E0E50E20;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1},std::allocator<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}::operator()((int *)(a1 + 8), *a2) | 0x100u;
}

BOOL mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}::operator()(int *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t (*v6)();
  uint64_t (*v7)();
  __guard v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t DefiningOp;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4) & 1) != 0)
    return 1;
  if (!mlir::verifyCompatibleTypesWithANE(a2, *a1, 1, 1))
    return 0;
  v6 = mlir::TypeID::get<mlir::anec::VerifyAttributesWithFamilyInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::anec::VerifyAttributesWithFamilyInterface::Trait>(void)::Empty>>();
  if ((*(unsigned int (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v6))
  {
    v14[0] = a2;
    v14[1] = mlir::OpInterface<mlir::anec::VerifyAttributesWithFamilyInterface,mlir::anec::detail::VerifyAttributesWithFamilyInterfaceInterfaceTraits>::getInterfaceFor(a2);
    if (!mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v14, *a1))return 0;
  }
  v7 = mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v7) & 1) == 0)
  {
    v8 = mlir::TypeID::get<mlir::OpTrait::anec::ConstantFoldable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::ConstantFoldable>(void)::Empty>>();
    if (((*(uint64_t (**)(_QWORD, __guard))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v8) & 1) == 0
      && (*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v9 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v9)
      {
        for (i = (_QWORD *)(*(_QWORD *)(a2 + 72) + 24); ; i += 4)
        {
          v14[0] = *i;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v14);
          if (!DefiningOp)
            break;
          v12 = DefiningOp;
          v13 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 48) + 32))(*(_QWORD *)(v12 + 48), v13) & 1) == 0)break;
          result = 0;
          if (!--v9)
            return result;
        }
      }
    }
  }
  return mlir::anec::isCompatibleWithFamily(a2, *a1);
}

uint64_t mlir::OpInterface<mlir::anec::VerifyAttributesWithFamilyInterface,mlir::anec::detail::VerifyAttributesWithFamilyInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::anec::VerifyAttributesWithFamilyInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::anec::VerifyAttributesWithFamilyInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::anec::VerifyAttributesWithFamilyInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A12EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50C28;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A12EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50C28;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A12EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A13EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50C70;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A13EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50C70;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A13EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A14EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50CB8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A14EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50CB8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A14EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A15EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50D00;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A15EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50D00;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A15EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A16EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50D48;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A16EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50D48;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A16EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A17EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0DFB8B0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A17EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0DFB8B0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A17EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec9A11LegacyEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50D90;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec9A11LegacyEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50D90;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec9A11LegacyEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec12RegionReturnEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50BE0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec12RegionReturnEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50BE0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec12RegionReturnEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  return mlir::TypeConverter::isLegal(*(mlir::TypeConverter **)(a1 + 8), *a2) | 0x100u;
}

uint64_t mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::MPSToANECBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int32 v4;
  unint64_t v5;
  int v7;
  uint64_t v8;
  __int128 v9;
  __n128 v10;
  _QWORD v11[21];

  v11[20] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = "builtin.module";
  *(_QWORD *)(a1 + 24) = 14;
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v2 = (_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x400000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E0E2B3E8;
  v3 = (_QWORD *)(a1 + 344);
  *(_QWORD *)&v9 = "The family to target for ANEC region formation (default A12).";
  *((_QWORD *)&v9 + 1) = 61;
  v7 = 0;
  v8 = (uint64_t)&v7;
  v10.n128_u64[0] = (unint64_t)v11;
  v10.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10, v11, 7uLL, 40);
  v4 = v10.n128_u32[2];
  v5 = v10.n128_u64[0] + 40 * v10.n128_u32[2];
  *(_QWORD *)v5 = "A12";
  *(_QWORD *)(v5 + 8) = 3;
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = "A12 family";
  *(_QWORD *)(v5 + 32) = 10;
  *(_QWORD *)(v5 + 40) = "A13";
  *(_QWORD *)(v5 + 48) = 3;
  *(_DWORD *)(v5 + 56) = 1;
  *(_QWORD *)(v5 + 64) = "A13 family";
  *(_QWORD *)(v5 + 72) = 10;
  *(_QWORD *)(v5 + 80) = "A14";
  *(_QWORD *)(v5 + 88) = 3;
  *(_DWORD *)(v5 + 96) = 2;
  *(_QWORD *)(v5 + 104) = "A14 family";
  *(_QWORD *)(v5 + 112) = 10;
  *(_QWORD *)(v5 + 120) = "A15";
  *(_QWORD *)(v5 + 128) = 3;
  *(_DWORD *)(v5 + 136) = 3;
  *(_QWORD *)(v5 + 144) = "A15 family";
  *(_QWORD *)(v5 + 152) = 10;
  *(_QWORD *)(v5 + 160) = "A16";
  *(_QWORD *)(v5 + 168) = 3;
  *(_DWORD *)(v5 + 176) = 4;
  *(_QWORD *)(v5 + 184) = "A16 family";
  *(_QWORD *)(v5 + 192) = 10;
  *(_QWORD *)(v5 + 200) = "A17";
  *(_QWORD *)(v5 + 208) = 3;
  *(_DWORD *)(v5 + 216) = 5;
  *(_QWORD *)(v5 + 224) = "A17 family";
  *(_QWORD *)(v5 + 232) = 10;
  *(_QWORD *)(v5 + 240) = "A11Legacy";
  *(_QWORD *)(v5 + 248) = 9;
  *(_DWORD *)(v5 + 256) = 6;
  *(_QWORD *)(v5 + 264) = "A11 Legacy family";
  *(_QWORD *)(v5 + 272) = 17;
  v10.n128_u32[2] = v4 + 7;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(v3, v2, (uint64_t)"target-family", 13, &v9, (_DWORD **)&v8, (uint64_t *)&v10);
  *(_QWORD *)(a1 + 344) = off_1E0E4C1A0;
  *(_QWORD *)(a1 + 944) = &unk_1E0E4C220;
  if ((_QWORD *)v10.n128_u64[0] != v11)
    free((void *)v10.n128_u64[0]);
  v10.n128_u64[0] = (unint64_t)"If device hints cannot be followed then compilation has failed.";
  v10.n128_u64[1] = 63;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 960), v2, (uint64_t)"strict-hints", 12, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 960) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 1152) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"If true, placement uses the cost model.";
  v10.n128_u64[1] = 39;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1168), v2, (uint64_t)"use-cost-model", 14, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1168) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 1360) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"If true, everything will be placed on the host. (requires use-cost-model)";
  v10.n128_u64[1] = 73;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1376), v2, (uint64_t)"force-host-placement", 20, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1376) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 1568) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"If true, everything will be placed on the ane if possible. (requires use-cost-model)";
  v10.n128_u64[1] = 84;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1584), v2, (uint64_t)"force-ane-placement", 19, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1584) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 1776) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"If true, print the estimated cost of the resulting module (requires use-cost-model).";
  v10.n128_u64[1] = 84;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1792), v2, (uint64_t)"print-estimated-cost", 20, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1792) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 1984) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"Insert instrumentation to enable performance recording.";
  v10.n128_u64[1] = 55;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 2000), v2, (uint64_t)"insert-instrumentation", 22, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 2000) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 2192) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"The maximum number of mps operations that will be used to create an ANE region.";
  v10.n128_u64[1] = 79;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(a1 + 2208), v2, (uint64_t)"ane-max-ops", 11, &v10, (_QWORD **)&v9);
  *(_QWORD *)(a1 + 2208) = off_1E0E4C4A0;
  *(_QWORD *)(a1 + 2408) = &unk_1E0E4C520;
  v10.n128_u64[0] = (unint64_t)"The maximum number of cumulative liveIns and liveOuts for an ANE region.";
  v10.n128_u64[1] = 72;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(a1 + 2424), v2, (uint64_t)"ane-max-liveio", 14, &v10, (_QWORD **)&v9);
  *(_QWORD *)(a1 + 2424) = off_1E0E4C4A0;
  *(_QWORD *)(a1 + 2624) = &unk_1E0E4C520;
  v10.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v10.n128_u64[1] = 24;
  LODWORD(v8) = 1;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(a1 + 2640), v2, (uint64_t)"gpu-core-count", 14, &v10, (int **)&v9);
  *(_QWORD *)(a1 + 2640) = off_1E0E4C3E0;
  *(_QWORD *)(a1 + 2832) = &unk_1E0E4C460;
  v10.n128_u64[0] = (unint64_t)"If true, print a report of which ops failed to be placed on ANE.";
  v10.n128_u64[1] = 64;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 2848), v2, (uint64_t)"print-placement-report", 22, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 2848) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 3040) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"Postfix appended to the name of the ANE regions created.";
  v10.n128_u64[1] = 56;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((_QWORD *)(a1 + 3056), v2, (uint64_t)"region-name-postfix", 19, &v10);
  *(_QWORD *)(a1 + 3056) = &off_1E0E4C260;
  *(_QWORD *)(a1 + 3288) = &unk_1E0E4C2E0;
  v10.n128_u64[0] = (unint64_t)"If true, use GOC and quantimization patterns to optimzie the ANEC IR.";
  v10.n128_u64[1] = 69;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 3304), v2, (uint64_t)"legacy-quant-conversion", 23, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 3304) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 3496) = &unk_1E0E4C3A0;
  return a1;
}

void mlir::`anonymous namespace'::MPSToANEC::~MPSToANEC(mlir::_anonymous_namespace_::MPSToANEC *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  mlir::_anonymous_namespace_::MPSToANEC *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  mlir::_anonymous_namespace_::MPSToANEC *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  mlir::_anonymous_namespace_::MPSToANEC *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  mlir::_anonymous_namespace_::MPSToANEC *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  mlir::_anonymous_namespace_::MPSToANEC *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  mlir::_anonymous_namespace_::MPSToANEC *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  mlir::_anonymous_namespace_::MPSToANEC *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  mlir::_anonymous_namespace_::MPSToANEC *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  mlir::_anonymous_namespace_::MPSToANEC *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  mlir::_anonymous_namespace_::MPSToANEC *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  mlir::_anonymous_namespace_::MPSToANEC *v47;
  uint64_t v48;
  char *v49;
  void *v50;
  char *v51;

  *(_QWORD *)this = off_1E0E2B3E8;
  *((_QWORD *)this + 413) = &unk_1E0E23520;
  v2 = (char *)this + 3464;
  v3 = (char *)*((_QWORD *)this + 436);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 413) = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)this + 425);
  if (v5 != *((void **)this + 424))
    free(v5);
  v6 = (char *)*((_QWORD *)this + 421);
  if (v6 != (char *)this + 3384)
    free(v6);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 3056);
  *((_QWORD *)this + 356) = &unk_1E0E23520;
  v7 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 379);
  if (v7 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 3008))
  {
    v8 = 4;
    v7 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 3008);
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_15:
  *((_QWORD *)this + 356) = &unk_1E0E23930;
  v9 = (void *)*((_QWORD *)this + 368);
  if (v9 != *((void **)this + 367))
    free(v9);
  v10 = (char *)*((_QWORD *)this + 364);
  if (v10 != (char *)this + 2928)
    free(v10);
  *((_QWORD *)this + 330) = &unk_1E0E23658;
  v11 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 353);
  if (v11 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2800))
  {
    v12 = 4;
    v11 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2800);
  }
  else
  {
    if (!v11)
      goto LABEL_24;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_24:
  *((_QWORD *)this + 330) = &unk_1E0E23930;
  v13 = (void *)*((_QWORD *)this + 342);
  if (v13 != *((void **)this + 341))
    free(v13);
  v14 = (char *)*((_QWORD *)this + 338);
  if (v14 != (char *)this + 2720)
    free(v14);
  *((_QWORD *)this + 303) = off_1E0E236C0;
  v15 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 327);
  if (v15 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2592))
  {
    v16 = 4;
    v15 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2592);
  }
  else
  {
    if (!v15)
      goto LABEL_33;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_33:
  *((_QWORD *)this + 303) = &unk_1E0E23930;
  v17 = (void *)*((_QWORD *)this + 315);
  if (v17 != *((void **)this + 314))
    free(v17);
  v18 = (char *)*((_QWORD *)this + 311);
  if (v18 != (char *)this + 2504)
    free(v18);
  *((_QWORD *)this + 276) = off_1E0E236C0;
  v19 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 300);
  if (v19 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2376))
  {
    v20 = 4;
    v19 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2376);
  }
  else
  {
    if (!v19)
      goto LABEL_42;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_42:
  *((_QWORD *)this + 276) = &unk_1E0E23930;
  v21 = (void *)*((_QWORD *)this + 288);
  if (v21 != *((void **)this + 287))
    free(v21);
  v22 = (char *)*((_QWORD *)this + 284);
  if (v22 != (char *)this + 2288)
    free(v22);
  *((_QWORD *)this + 250) = &unk_1E0E23520;
  v23 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 273);
  if (v23 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2160))
  {
    v24 = 4;
    v23 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2160);
  }
  else
  {
    if (!v23)
      goto LABEL_51;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_51:
  *((_QWORD *)this + 250) = &unk_1E0E23930;
  v25 = (void *)*((_QWORD *)this + 262);
  if (v25 != *((void **)this + 261))
    free(v25);
  v26 = (char *)*((_QWORD *)this + 258);
  if (v26 != (char *)this + 2080)
    free(v26);
  *((_QWORD *)this + 224) = &unk_1E0E23520;
  v27 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 247);
  if (v27 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1952))
  {
    v28 = 4;
    v27 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1952);
  }
  else
  {
    if (!v27)
      goto LABEL_60;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_60:
  *((_QWORD *)this + 224) = &unk_1E0E23930;
  v29 = (void *)*((_QWORD *)this + 236);
  if (v29 != *((void **)this + 235))
    free(v29);
  v30 = (char *)*((_QWORD *)this + 232);
  if (v30 != (char *)this + 1872)
    free(v30);
  *((_QWORD *)this + 198) = &unk_1E0E23520;
  v31 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 221);
  if (v31 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1744))
  {
    v32 = 4;
    v31 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1744);
  }
  else
  {
    if (!v31)
      goto LABEL_69;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_69:
  *((_QWORD *)this + 198) = &unk_1E0E23930;
  v33 = (void *)*((_QWORD *)this + 210);
  if (v33 != *((void **)this + 209))
    free(v33);
  v34 = (char *)*((_QWORD *)this + 206);
  if (v34 != (char *)this + 1664)
    free(v34);
  *((_QWORD *)this + 172) = &unk_1E0E23520;
  v35 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 195);
  if (v35 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1536))
  {
    v36 = 4;
    v35 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1536);
  }
  else
  {
    if (!v35)
      goto LABEL_78;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_78:
  *((_QWORD *)this + 172) = &unk_1E0E23930;
  v37 = (void *)*((_QWORD *)this + 184);
  if (v37 != *((void **)this + 183))
    free(v37);
  v38 = (char *)*((_QWORD *)this + 180);
  if (v38 != (char *)this + 1456)
    free(v38);
  *((_QWORD *)this + 146) = &unk_1E0E23520;
  v39 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 169);
  if (v39 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1328))
  {
    v40 = 4;
    v39 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1328);
  }
  else
  {
    if (!v39)
      goto LABEL_87;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_87:
  *((_QWORD *)this + 146) = &unk_1E0E23930;
  v41 = (void *)*((_QWORD *)this + 158);
  if (v41 != *((void **)this + 157))
    free(v41);
  v42 = (char *)*((_QWORD *)this + 154);
  if (v42 != (char *)this + 1248)
    free(v42);
  *((_QWORD *)this + 120) = &unk_1E0E23520;
  v43 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 143);
  if (v43 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1120))
  {
    v44 = 4;
    v43 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1120);
  }
  else
  {
    if (!v43)
      goto LABEL_96;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_96:
  *((_QWORD *)this + 120) = &unk_1E0E23930;
  v45 = (void *)*((_QWORD *)this + 132);
  if (v45 != *((void **)this + 131))
    free(v45);
  v46 = (char *)*((_QWORD *)this + 128);
  if (v46 != (char *)this + 1040)
    free(v46);
  *((_QWORD *)this + 43) = off_1E0E23318;
  v47 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 117);
  if (v47 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 912))
  {
    v48 = 4;
    v47 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 912);
  }
  else
  {
    if (!v47)
      goto LABEL_105;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_105:
  *((_QWORD *)this + 62) = &off_1E0E23A68;
  v49 = (char *)*((_QWORD *)this + 64);
  if (v49 != (char *)this + 528)
    free(v49);
  *((_QWORD *)this + 43) = &unk_1E0E23930;
  v50 = (void *)*((_QWORD *)this + 55);
  if (v50 != *((void **)this + 54))
    free(v50);
  v51 = (char *)*((_QWORD *)this + 51);
  if (v51 != (char *)this + 424)
    free(v51);
  mlir::Pass::~Pass(this);
}

{
  void *v1;

  operator delete(v1);
}

const char *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::getName()
{
  return "MPSToANEC";
}

_QWORD *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::getDependentDialects(int a1, uint64_t **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = off_1E0E50A68;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, "placement", 9uLL, v11);
  v3 = v12;
  if (v12 == v11)
  {
    v4 = 4;
    v3 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v11[0] = off_1E0E50900;
  v12 = v11;
  v5 = 4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id, "anec", 4uLL, v11);
  v6 = v12;
  if (v12 == v11)
  {
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v5))();
LABEL_11:
  v11[0] = off_1E0E50870;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v11[0] = off_1E0E509D8;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, "memref", 6uLL, v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

const char *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::getArgument()
{
  return "mps-to-anec";
}

const char *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::getDescription()
{
  return "Convert mps ops to anec ops if possible and create regions for ane";
}

void mlir::`anonymous namespace'::MPSToANEC::runOnOperation(mlir::_anonymous_namespace_::MPSToANEC *this)
{
  uint64_t Context;
  char *v3;
  uint64_t v4;
  mlir::MPSToANECTypeConverter *v5[37];

  v5[36] = *(mlir::MPSToANECTypeConverter **)MEMORY[0x1E0C80C00];
  Context = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v3 = (char *)this + 3184;
  v4 = *((unsigned __int8 *)this + 3207);
  if ((v4 & 0x80u) != 0)
  {
    v3 = (char *)*((_QWORD *)this + 398);
    v4 = *((_QWORD *)this + 399);
  }
  mlir::MPSToANECOpCreator::MPSToANECOpCreator(v5, Context, *((unsigned int *)this + 118), *((_BYTE *)this + 3432), *((unsigned __int8 *)this + 1296), *((_BYTE *)this + 1712), *((_BYTE *)this + 1504), *((_BYTE *)this + 1920), *((_BYTE *)this + 2128), *((_BYTE *)this + 1088), *((_DWORD *)this + 692), *((_QWORD *)this + 292), *((_QWORD *)this + 319), (uint64_t)v3, v4);
}

void sub_18072DBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t v71;

  v71 = a71;
  a71 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)&a37);
}

uint64_t sub_18072DC00()
{
  uint64_t result;
  uint64_t v1;

  result = v1;
  if (v1)
    return (*(uint64_t (**)())(*(_QWORD *)v1 + 8))();
  return result;
}

_QWORD *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::clonePass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int32 v7;
  unint64_t v8;
  _QWORD *result;
  int v10;
  uint64_t v11;
  __int128 v12;
  __n128 v13;
  _QWORD v14[22];

  v14[20] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0xDB8uLL);
  v5 = *(_QWORD *)(a1 + 8);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  v4[40] = 0;
  v4[120] = 0;
  v6 = v4 + 152;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *(_QWORD *)v4 = off_1E0E2B3E8;
  *((_QWORD *)v4 + 1) = v5;
  *(_QWORD *)&v12 = "The family to target for ANEC region formation (default A12).";
  *((_QWORD *)&v12 + 1) = 61;
  v10 = 0;
  v11 = (uint64_t)&v10;
  v13.n128_u64[0] = (unint64_t)v14;
  v13.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v14, 7uLL, 40);
  v7 = v13.n128_u32[2];
  v8 = v13.n128_u64[0] + 40 * v13.n128_u32[2];
  *(_QWORD *)v8 = "A12";
  *(_QWORD *)(v8 + 8) = 3;
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = "A12 family";
  *(_QWORD *)(v8 + 32) = 10;
  *(_QWORD *)(v8 + 40) = "A13";
  *(_QWORD *)(v8 + 48) = 3;
  *(_DWORD *)(v8 + 56) = 1;
  *(_QWORD *)(v8 + 64) = "A13 family";
  *(_QWORD *)(v8 + 72) = 10;
  *(_QWORD *)(v8 + 80) = "A14";
  *(_QWORD *)(v8 + 88) = 3;
  *(_DWORD *)(v8 + 96) = 2;
  *(_QWORD *)(v8 + 104) = "A14 family";
  *(_QWORD *)(v8 + 112) = 10;
  *(_QWORD *)(v8 + 120) = "A15";
  *(_QWORD *)(v8 + 128) = 3;
  *(_DWORD *)(v8 + 136) = 3;
  *(_QWORD *)(v8 + 144) = "A15 family";
  *(_QWORD *)(v8 + 152) = 10;
  *(_QWORD *)(v8 + 160) = "A16";
  *(_QWORD *)(v8 + 168) = 3;
  *(_DWORD *)(v8 + 176) = 4;
  *(_QWORD *)(v8 + 184) = "A16 family";
  *(_QWORD *)(v8 + 192) = 10;
  *(_QWORD *)(v8 + 200) = "A17";
  *(_QWORD *)(v8 + 208) = 3;
  *(_DWORD *)(v8 + 216) = 5;
  *(_QWORD *)(v8 + 224) = "A17 family";
  *(_QWORD *)(v8 + 232) = 10;
  *(_QWORD *)(v8 + 240) = "A11Legacy";
  *(_QWORD *)(v8 + 248) = 9;
  *(_DWORD *)(v8 + 256) = 6;
  *(_QWORD *)(v8 + 264) = "A11 Legacy family";
  *(_QWORD *)(v8 + 272) = 17;
  v13.n128_u32[2] = v7 + 7;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((_QWORD *)v4 + 43, (_QWORD *)v4 + 19, (uint64_t)"target-family", 13, &v12, (_DWORD **)&v11, (uint64_t *)&v13);
  *((_QWORD *)v4 + 43) = off_1E0E4C1A0;
  *((_QWORD *)v4 + 118) = &unk_1E0E4C220;
  if ((_QWORD *)v13.n128_u64[0] != v14)
    free((void *)v13.n128_u64[0]);
  v13.n128_u64[0] = (unint64_t)"If device hints cannot be followed then compilation has failed.";
  v13.n128_u64[1] = 63;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 120, v6, (uint64_t)"strict-hints", 12, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 120) = &off_1E0E4C320;
  *((_QWORD *)v4 + 144) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"If true, placement uses the cost model.";
  v13.n128_u64[1] = 39;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 146, v6, (uint64_t)"use-cost-model", 14, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 146) = &off_1E0E4C320;
  *((_QWORD *)v4 + 170) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"If true, everything will be placed on the host. (requires use-cost-model)";
  v13.n128_u64[1] = 73;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 172, v6, (uint64_t)"force-host-placement", 20, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 172) = &off_1E0E4C320;
  *((_QWORD *)v4 + 196) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"If true, everything will be placed on the ane if possible. (requires use-cost-model)";
  v13.n128_u64[1] = 84;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 198, v6, (uint64_t)"force-ane-placement", 19, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 198) = &off_1E0E4C320;
  *((_QWORD *)v4 + 222) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"If true, print the estimated cost of the resulting module (requires use-cost-model).";
  v13.n128_u64[1] = 84;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 224, v6, (uint64_t)"print-estimated-cost", 20, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 224) = &off_1E0E4C320;
  *((_QWORD *)v4 + 248) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"Insert instrumentation to enable performance recording.";
  v13.n128_u64[1] = 55;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 250, v6, (uint64_t)"insert-instrumentation", 22, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 250) = &off_1E0E4C320;
  *((_QWORD *)v4 + 274) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"The maximum number of mps operations that will be used to create an ANE region.";
  v13.n128_u64[1] = 79;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)v4 + 276, v6, (uint64_t)"ane-max-ops", 11, &v13, (_QWORD **)&v12);
  *((_QWORD *)v4 + 276) = off_1E0E4C4A0;
  *((_QWORD *)v4 + 301) = &unk_1E0E4C520;
  v13.n128_u64[0] = (unint64_t)"The maximum number of cumulative liveIns and liveOuts for an ANE region.";
  v13.n128_u64[1] = 72;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)v4 + 303, v6, (uint64_t)"ane-max-liveio", 14, &v13, (_QWORD **)&v12);
  *((_QWORD *)v4 + 303) = off_1E0E4C4A0;
  *((_QWORD *)v4 + 328) = &unk_1E0E4C520;
  v13.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v13.n128_u64[1] = 24;
  LODWORD(v11) = 1;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)v4 + 330, v6, (uint64_t)"gpu-core-count", 14, &v13, (int **)&v12);
  *((_QWORD *)v4 + 330) = off_1E0E4C3E0;
  *((_QWORD *)v4 + 354) = &unk_1E0E4C460;
  v13.n128_u64[0] = (unint64_t)"If true, print a report of which ops failed to be placed on ANE.";
  v13.n128_u64[1] = 64;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 356, v6, (uint64_t)"print-placement-report", 22, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 356) = &off_1E0E4C320;
  *((_QWORD *)v4 + 380) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"Postfix appended to the name of the ANE regions created.";
  v13.n128_u64[1] = 56;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((_QWORD *)v4 + 382, v6, (uint64_t)"region-name-postfix", 19, &v13);
  *((_QWORD *)v4 + 382) = &off_1E0E4C260;
  *((_QWORD *)v4 + 411) = &unk_1E0E4C2E0;
  v13.n128_u64[0] = (unint64_t)"If true, use GOC and quantimization patterns to optimzie the ANEC IR.";
  v13.n128_u64[1] = 69;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 413, v6, (uint64_t)"legacy-quant-conversion", 23, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 413) = &off_1E0E4C320;
  *((_QWORD *)v4 + 437) = &unk_1E0E4C3A0;
  *(_QWORD *)v4 = off_1E0E2B348;
  *a2 = v4;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _OWORD *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v36[2];
  _QWORD v37[3];
  _QWORD *v38;
  const void *v39[3];
  const void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v36[0] = a3;
  v36[1] = a4;
  v39[0] = a2;
  v9 = llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((uint64_t)a1, (uint64_t)v36, v39, a5, a6, a7);
  v10 = v9 + 600;
  *(_BYTE *)(v9 + 608) = 0;
  *(_QWORD *)v9 = off_1E0E4DF48;
  *(_QWORD *)(v9 + 600) = &unk_1E0E4DFC8;
  v12 = (uint64_t *)a2[21];
  v11 = a2[22];
  v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    v15 = (uint64_t *)a2[20];
    v16 = v12 - v15;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      abort();
    v18 = v11 - (_QWORD)v15;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = (char *)operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (uint64_t *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v10;
    v14 = v21 + 1;
    if (v12 != v15)
    {
      v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v15 - v20) < 0x20)
        goto LABEL_38;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      v21 = (uint64_t *)((char *)v21 - v25);
      v26 = &v20[8 * v16 - 16];
      v27 = v12 - 2;
      v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v30 = *--v13;
          *--v21 = v30;
        }
        while (v13 != v15);
      }
      v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v12 = v10;
    v14 = v12 + 1;
  }
  a2[21] = v14;
  v37[0] = off_1E0E513E0;
  v37[1] = a1;
  v38 = v37;
  v39[0] = off_1E0E513E0;
  v40 = v39;
  v39[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v39, a1 + 71);
  v31 = v40;
  if (v40 == v39)
  {
    v32 = 4;
    v31 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_28;
    v32 = 5;
  }
  (*((void (**)(void))*v31 + v32))();
LABEL_28:
  v33 = v38;
  if (v38 == v37)
  {
    v34 = 4;
    v33 = v37;
    goto LABEL_32;
  }
  if (v38)
  {
    v34 = 5;
LABEL_32:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  return a1;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::parse(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getValueExpectedFlagDefault(v11);
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

_QWORD *mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_1E0E23318;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E0E23A68;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_1E0E23930;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  return a1;
}

void mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;

  *(_QWORD *)__p = off_1E0E23318;
  v2 = __p + 568;
  v3 = (char *)*((_QWORD *)__p + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)__p + 19) = &off_1E0E23A68;
  v5 = (char *)*((_QWORD *)__p + 21);
  if (v5 != __p + 184)
    free(v5);
  *(_QWORD *)__p = &unk_1E0E23930;
  v6 = (void *)*((_QWORD *)__p + 12);
  if (v6 != *((void **)__p + 11))
    free(v6);
  v7 = (char *)*((_QWORD *)__p + 8);
  if (v7 != __p + 80)
    free(v7);
  operator delete(__p);
}

unint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if ((a3 & 1) != 0 || !*((_BYTE *)result + 148) || *((_DWORD *)result + 36) != *((_DWORD *)result + 32))
  {
    v3 = *((_DWORD *)result + 32);
    v4 = &off_1E0E22EE8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  return result;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getExtraOptionNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
  {
    v3 = a1 + 152;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 152) + 16))(a1 + 152);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      do
      {
        v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v6);
        v9 = v8;
        v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10 + 1, 16);
          v10 = *(unsigned int *)(a2 + 8);
        }
        v11 = (uint64_t *)(*(_QWORD *)a2 + 16 * v10);
        *v11 = v7;
        v11[1] = v9;
        ++*(_DWORD *)(a2 + 8);
        v6 = (v6 + 1);
      }
      while (v5 != (_DWORD)v6);
    }
  }
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *result;

  v4 = *(const void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  v8 = (_BYTE *)(*(_QWORD *)(a1 + 168) + 44);
  v9 = 48 * *(unsigned int *)(a1 + 176);
  while (1)
  {
    v9 -= 48;
    if (*v8)
    {
      if (*((_DWORD *)v8 - 1) == *(_DWORD *)(a1 + 128))
        break;
    }
    v8 += 48;
  }
  v10 = *(const char **)(v8 - 44);
  v11 = *(_QWORD *)(v8 - 36);
  result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  if (v11 > *((_QWORD *)this + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(this, v10, *(_QWORD *)(v8 - 36));
  if (v11)
  {
    result = (llvm::raw_ostream *)memcpy(result, v10, v11);
    *((_QWORD *)this + 4) += v11;
  }
  return result;
}

uint64_t mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 - 472);
  *(_BYTE *)(result + 608) = *(_BYTE *)(a2 + 8);
  return result;
}

void `non-virtual thunk to'mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 - 600);
  *(_QWORD *)(a1 - 600) = off_1E0E23318;
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 448) = &off_1E0E23A68;
  v6 = *(void **)(a1 - 432);
  if (v6 != (void *)(a1 - 416))
    free(v6);
  *v2 = &unk_1E0E23930;
  v7 = *(void **)(a1 - 504);
  if (v7 != *(void **)(a1 - 512))
    free(v7);
  v8 = *(void **)(a1 - 536);
  if (v8 != (void *)(a1 - 520))
    free(v8);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 - 600);
  *(_QWORD *)(a1 - 600) = off_1E0E23318;
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 448) = &off_1E0E23A68;
  v6 = *(void **)(a1 - 432);
  if (v6 != (void *)(a1 - 416))
    free(v6);
  *v2 = &unk_1E0E23930;
  v7 = *(void **)(a1 - 504);
  if (v7 != *(void **)(a1 - 512))
    free(v7);
  v8 = *(void **)(a1 - 536);
  if (v8 != (void *)(a1 - 520))
    free(v8);
  operator delete(v2);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(a1 - 600, a2);
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getOption(uint64_t a1)
{
  return a1 - 600;
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result - 472) = *(_DWORD *)(a2 - 472);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22EE8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_1E0E23318;
  *(_QWORD *)(a1 + 160) = a1;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0x800000000;
  *(_QWORD *)(a1 + 152) = &off_1E0E4DE38;
  *(_QWORD *)(a1 + 568) = off_1E0E4F960;
  *(_QWORD *)(a1 + 592) = a1 + 568;
  llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_1E0E23318;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E0E23A68;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_1E0E23930;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  return a1;
}

void mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;

  *(_QWORD *)__p = off_1E0E23318;
  v2 = __p + 568;
  v3 = (char *)*((_QWORD *)__p + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)__p + 19) = &off_1E0E23A68;
  v5 = (char *)*((_QWORD *)__p + 21);
  if (v5 != __p + 184)
    free(v5);
  *(_QWORD *)__p = &unk_1E0E23930;
  v6 = (void *)*((_QWORD *)__p + 12);
  if (v6 != *((void **)__p + 11))
    free(v6);
  v7 = (char *)*((_QWORD *)__p + 8);
  if (v7 != __p + 80)
    free(v7);
  operator delete(__p);
}

void `non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 - 600);
  *(_QWORD *)(a1 - 600) = off_1E0E23318;
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 448) = &off_1E0E23A68;
  v6 = *(void **)(a1 - 432);
  if (v6 != (void *)(a1 - 416))
    free(v6);
  *v2 = &unk_1E0E23930;
  v7 = *(void **)(a1 - 504);
  if (v7 != *(void **)(a1 - 512))
    free(v7);
  v8 = *(void **)(a1 - 536);
  if (v8 != (void *)(a1 - 520))
    free(v8);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 - 600);
  *(_QWORD *)(a1 - 600) = off_1E0E23318;
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 448) = &off_1E0E23A68;
  v6 = *(void **)(a1 - 432);
  if (v6 != (void *)(a1 - 416))
    free(v6);
  *v2 = &unk_1E0E23930;
  v7 = *(void **)(a1 - 504);
  if (v7 != *(void **)(a1 - 512))
    free(v7);
  v8 = *(void **)(a1 - 536);
  if (v8 != (void *)(a1 - 520))
    free(v8);
  operator delete(v2);
}

void llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v11 = *a3;
  v12 = *(_QWORD *)(a1 + 96);
  if (v12 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v12 + 8 * v13) = v11;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v11)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v11;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(a1, a5, a6);
}

_QWORD *llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_1E0E23318;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E0E23A68;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_1E0E23930;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  return a1;
}

void llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;

  *(_QWORD *)__p = off_1E0E23318;
  v2 = __p + 568;
  v3 = (char *)*((_QWORD *)__p + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)__p + 19) = &off_1E0E23A68;
  v5 = (char *)*((_QWORD *)__p + 21);
  if (v5 != __p + 184)
    free(v5);
  *(_QWORD *)__p = &unk_1E0E23930;
  v6 = (void *)*((_QWORD *)__p + 12);
  if (v6 != *((void **)__p + 11))
    free(v6);
  v7 = (char *)*((_QWORD *)__p + 8);
  if (v7 != __p + 80)
    free(v7);
  operator delete(__p);
}

BOOL llvm::cl::OptionValueCopy<mlir::anec::Family>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

_QWORD *mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>::~GenericOptionParser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E0E23A68;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>::~GenericOptionParser(_QWORD *__p)
{
  _QWORD *v2;

  *__p = &off_1E0E23A68;
  v2 = (_QWORD *)__p[2];
  if (v2 != __p + 4)
    free(v2);
  operator delete(__p);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

_QWORD *llvm::cl::parser<mlir::anec::Family>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E0E23A68;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void llvm::cl::parser<mlir::anec::Family>::~parser(_QWORD *__p)
{
  _QWORD *v2;

  *__p = &off_1E0E23A68;
  v2 = (_QWORD *)__p[2];
  if (v2 != __p + 4)
    free(v2);
  operator delete(__p);
}

_QWORD *std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4F960;
  return result;
}

void std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4F960;
}

void llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, _DWORD **a2, uint64_t *a3)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  const unsigned __int8 *v10;
  __int128 v11;
  int v12;
  char *Address;
  uint64_t v14;
  __int128 v15;
  char v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t (**v19)();
  int v20;
  char v21;

  v3 = *a2;
  *(_DWORD *)(a1 + 128) = **a2;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v3;
  v4 = *((_DWORD *)a3 + 2);
  if (v4)
  {
    v6 = *a3;
    v7 = *a3 + 40 * v4;
    v8 = a1 + 168;
    do
    {
      v10 = *(const unsigned __int8 **)(v6 + 8);
      v11 = *(_OWORD *)(v6 + 24);
      v12 = *(_DWORD *)(v6 + 16);
      v17[0] = *(_QWORD *)v6;
      v9 = (int8x16_t *)v17[0];
      v17[1] = v10;
      v18 = v11;
      v19 = &off_1E0E22EE8;
      v21 = 1;
      v20 = v12;
      Address = llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::anec::Family>::OptionInfo,false>::reserveForParamAndGetAddress(v8, (unint64_t)v17, 1);
      v14 = *(_QWORD *)(a1 + 168) + 48 * *(unsigned int *)(a1 + 176);
      v15 = *((_OWORD *)Address + 1);
      *(_OWORD *)v14 = *(_OWORD *)Address;
      *(_OWORD *)(v14 + 16) = v15;
      *(_QWORD *)(v14 + 32) = &off_1E0E23048;
      v16 = Address[44];
      *(_DWORD *)(v14 + 40) = *((_DWORD *)Address + 10);
      *(_BYTE *)(v14 + 44) = v16;
      *(_QWORD *)(v14 + 32) = &off_1E0E22EE8;
      ++*(_DWORD *)(a1 + 176);
      llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 160), v9, v10);
      v6 += 40;
    }
    while (v6 != v7);
  }
}

char *llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::anec::Family>::OptionInfo,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v10;
  _OWORD *v11;
  char *v12;
  unsigned int v13;
  char *v14;
  _OWORD *v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v19 = (uint64_t)(a2 - *(_QWORD *)a1) >> 4;
      v30 = 0;
      v20 = (char *)(a1 + 16);
      v21 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v30);
      v22 = *(char **)a1;
      v23 = *(_DWORD *)(a1 + 8);
      if (v23)
      {
        v24 = &v22[48 * v23];
        v25 = v21;
        do
        {
          v26 = *((_OWORD *)v22 + 1);
          *(_OWORD *)v25 = *(_OWORD *)v22;
          *((_OWORD *)v25 + 1) = v26;
          *((_QWORD *)v25 + 4) = &off_1E0E23048;
          v27 = *((_DWORD *)v22 + 10);
          v25[44] = v22[44];
          *((_DWORD *)v25 + 10) = v27;
          *((_QWORD *)v25 + 4) = &off_1E0E22EE8;
          v22 += 48;
          v25 += 48;
        }
        while (v22 != v24);
        v22 = *(char **)a1;
      }
      v28 = 0xAAAAAAAAAAAAAAABLL * v19;
      v29 = v30;
      if (v22 != v20)
        free(v22);
      *(_QWORD *)a1 = v21;
      *(_DWORD *)(a1 + 12) = v29;
      return &v21[48 * v28];
    }
    else
    {
      v30 = 0;
      v10 = (char *)(a1 + 16);
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v30);
      v12 = *(char **)a1;
      v13 = *(_DWORD *)(a1 + 8);
      if (v13)
      {
        v14 = &v12[48 * v13];
        v15 = v11;
        do
        {
          v16 = *((_OWORD *)v12 + 1);
          *v15 = *(_OWORD *)v12;
          v15[1] = v16;
          *((_QWORD *)v15 + 4) = &off_1E0E23048;
          v17 = *((_DWORD *)v12 + 10);
          *((_BYTE *)v15 + 44) = v12[44];
          *((_DWORD *)v15 + 10) = v17;
          *((_QWORD *)v15 + 4) = &off_1E0E22EE8;
          v12 += 48;
          v15 += 3;
        }
        while (v12 != v14);
        v12 = *(char **)a1;
      }
      v18 = v30;
      if (v12 != v10)
        free(v12);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v18;
    }
  }
  return (char *)v3;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E513E0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E513E0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EEclESU_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 608) = 1;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, _QWORD **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[3];
  _QWORD *v37;
  const void *v38[3];
  const void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35[0] = a3;
  v35[1] = a4;
  v38[0] = a2;
  v8 = llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<long long>>((uint64_t)a1, (uint64_t)v35, v38, a5, a6);
  *(_QWORD *)(v8 + 200) = &unk_1E0E4E2C8;
  v9 = v8 + 200;
  *(_BYTE *)(v8 + 208) = 0;
  *(_QWORD *)v8 = off_1E0E4E248;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    v14 = (uint64_t *)a2[20];
    v15 = v11 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 != v14)
    {
      v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v14 - v19) < 0x20)
        goto LABEL_38;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      v20 = (uint64_t *)((char *)v20 - v24);
      v25 = &v19[8 * v15 - 16];
      v26 = v11 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *--v12;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v11 = v9;
    v13 = v11 + 1;
  }
  a2[21] = v13;
  v36[0] = off_1E0E51750;
  v36[1] = a1;
  v37 = v36;
  v38[0] = off_1E0E51750;
  v39 = v38;
  v38[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v38, a1 + 21);
  v30 = v39;
  if (v39 == v38)
  {
    v31 = 4;
    v30 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_28;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_28:
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v33 = 5;
LABEL_32:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<long long>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, _QWORD **a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FC8;
  *(_QWORD *)a1 = off_1E0E236C0;
  *(_QWORD *)(a1 + 160) = &unk_1E0E23BF8;
  *(_QWORD *)(a1 + 168) = off_1E0E4FC28;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<long long>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<long long>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, _QWORD **a5)
{
  const void *v9;
  uint64_t v10;
  __n128 result;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v9 = *a3;
  v10 = *(_QWORD *)(a1 + 96);
  if (v10 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v9);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v10 + 8 * v13) = v9;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v9)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v9;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = *a5;
  *(_QWORD *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = *v12;
  return result;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIxEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51750;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIxEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51750;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIxEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEEclESR_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 208) = 1;
  return result;
}

_QWORD *std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E50900;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E50900;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"anec", 4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::anec::ANECDialect * mlir::MLIRContext::getOrLoadDialect<mlir::anec::ANECDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

mlir::anec::ANECDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::anec::ANECDialect * mlir::MLIRContext::getOrLoadDialect<mlir::anec::ANECDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::anec::ANECDialect **a2@<X8>)
{
  mlir::MLIRContext *v3;
  mlir::anec::ANECDialect *v4;
  mlir::anec::ANECDialect *result;

  v3 = *a1;
  v4 = (mlir::anec::ANECDialect *)operator new(0x60uLL);
  result = mlir::anec::ANECDialect::ANECDialect(v4, v3);
  *a2 = result;
  return result;
}

_QWORD *std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E509D8;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E509D8;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"memref", 6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::memref::MemRefDialect * mlir::MLIRContext::getOrLoadDialect<mlir::memref::MemRefDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

mlir::memref::MemRefDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::memref::MemRefDialect * mlir::MLIRContext::getOrLoadDialect<mlir::memref::MemRefDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::memref::MemRefDialect **a2@<X8>)
{
  mlir::MLIRContext *v3;
  mlir::memref::MemRefDialect *v4;
  mlir::memref::MemRefDialect *result;

  v3 = *a1;
  v4 = (mlir::memref::MemRefDialect *)operator new(0x60uLL);
  result = mlir::memref::MemRefDialect::MemRefDialect(v4, v3);
  *a2 = result;
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorERZNS1_12_GLOBAL__N_19MPSToANEC14runOnOperationEvEUlNS1_4func6FuncOpEE_SF_S2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESP_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t InherentAttr;
  char v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
  {
    v3 = *a1;
    if (!*(_BYTE *)(a2 + 47) || (InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"io_info", 7), !v5))
      InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "io_info", 7uLL);
    **(_QWORD **)v3 = InherentAttr;
    if (**(_QWORD **)v3)
    {
      v8[1] = *(_QWORD *)v3;
      v6 = *(_QWORD *)(v3 + 8);
      v8[0] = *(_QWORD *)(v3 + 16);
      v8[2] = v6;
      v9 = v8;
      mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_12_GLOBAL__N_19MPSToANEC14runOnOperationEvENKUlNS1_4func6FuncOpEE_clESE_EUlNS1_9placement10RegionCallEE_SH_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESQ_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v9, 1);
    }
  }
  return 1;
}

double _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_12_GLOBAL__N_19MPSToANEC14runOnOperationEvENKUlNS1_4func6FuncOpEE_clESE_EUlNS1_9placement10RegionCallEE_SH_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESQ_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t v2;
  char *Callee;
  size_t v4;
  size_t v5;
  unsigned int *v6;
  mlir::StringAttr *Context;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::StringAttr *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int HashValue;
  double result;
  _QWORD *v18;
  int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  const void *v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  mlir::Operation *v28;
  const char *v29;
  uint64_t v30;
  __int16 v31;

  if (a2
    && *(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
  {
    v2 = *a1;
    v28 = a2;
    Callee = (char *)mlir::placement::RegionCall::getCallee(&v28);
    v5 = v4;
    *(_QWORD *)&v27 = Callee;
    *((_QWORD *)&v27 + 1) = v4;
    v6 = **(unsigned int ***)v2;
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v6 + 6));
    v31 = 261;
    v29 = Callee;
    v30 = v5;
    v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v29);
    v9 = mlir::SymbolTable::lookupSymbolIn(v6, v8);
    v10 = **(_QWORD **)(v2 + 8);
    v11 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v9 + 24));
    v31 = 261;
    v29 = "io_info";
    v30 = 7;
    v12 = mlir::StringAttr::get(v11, (mlir::MLIRContext *)&v29);
    mlir::Operation::setAttr(v9, v12, v10);
    v13 = *(_QWORD *)(v2 + 16);
    v14 = *(_DWORD *)(v13 + 16);
    if (v14)
    {
      v15 = *(_QWORD *)v13;
      HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(Callee, v5);
      v18 = 0;
      v19 = v14 - 1;
      for (i = 1; ; ++i)
      {
        v21 = HashValue & v19;
        v22 = v15 + 16 * (HashValue & v19);
        v23 = *(const void **)v22;
        if (*(_QWORD *)v22 == -2)
        {
          if (Callee == (char *)-2)
            return result;
        }
        else if (v23 == (const void *)-1)
        {
          if (Callee == (char *)-1)
            return result;
        }
        else if (v5 == *(_QWORD *)(v22 + 8) && (!v5 || !memcmp(Callee, *(const void **)v22, v5)))
        {
          return result;
        }
        if (v23 == (const void *)-1)
          break;
        if (v18)
          v24 = 0;
        else
          v24 = v23 == (const void *)-2;
        if (v24)
          v18 = (_QWORD *)(v15 + 16 * v21);
        HashValue = i + v21;
      }
      if (v18)
        v25 = v18;
      else
        v25 = (_QWORD *)(v15 + 16 * v21);
    }
    else
    {
      v25 = 0;
    }
    v26 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(v13, (uint64_t)&v27, (uint64_t)&v27, v25);
    result = *(double *)&v27;
    *(_OWORD *)v26 = v27;
  }
  return result;
}

uint64_t mlir::MPSPlacementBase<mlir::`anonymous namespace'::MPSPlacement>::MPSPlacementBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int32 v4;
  unint64_t v5;
  int v7;
  int *v8;
  __int128 v9;
  __n128 v10;
  _QWORD v11[21];

  v11[20] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = "builtin.module";
  *(_QWORD *)(a1 + 24) = 14;
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v2 = (_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x400000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_1E0E2B758;
  v3 = (_QWORD *)(a1 + 344);
  *(_QWORD *)&v9 = "The family to target for ANEC region formation (default A12).";
  *((_QWORD *)&v9 + 1) = 61;
  v7 = 0;
  v8 = &v7;
  v10.n128_u64[0] = (unint64_t)v11;
  v10.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10, v11, 7uLL, 40);
  v4 = v10.n128_u32[2];
  v5 = v10.n128_u64[0] + 40 * v10.n128_u32[2];
  *(_QWORD *)v5 = "A12";
  *(_QWORD *)(v5 + 8) = 3;
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = "A12 family";
  *(_QWORD *)(v5 + 32) = 10;
  *(_QWORD *)(v5 + 40) = "A13";
  *(_QWORD *)(v5 + 48) = 3;
  *(_DWORD *)(v5 + 56) = 1;
  *(_QWORD *)(v5 + 64) = "A13 family";
  *(_QWORD *)(v5 + 72) = 10;
  *(_QWORD *)(v5 + 80) = "A14";
  *(_QWORD *)(v5 + 88) = 3;
  *(_DWORD *)(v5 + 96) = 2;
  *(_QWORD *)(v5 + 104) = "A14 family";
  *(_QWORD *)(v5 + 112) = 10;
  *(_QWORD *)(v5 + 120) = "A15";
  *(_QWORD *)(v5 + 128) = 3;
  *(_DWORD *)(v5 + 136) = 3;
  *(_QWORD *)(v5 + 144) = "A15 family";
  *(_QWORD *)(v5 + 152) = 10;
  *(_QWORD *)(v5 + 160) = "A16";
  *(_QWORD *)(v5 + 168) = 3;
  *(_DWORD *)(v5 + 176) = 4;
  *(_QWORD *)(v5 + 184) = "A16 family";
  *(_QWORD *)(v5 + 192) = 10;
  *(_QWORD *)(v5 + 200) = "A17";
  *(_QWORD *)(v5 + 208) = 3;
  *(_DWORD *)(v5 + 216) = 5;
  *(_QWORD *)(v5 + 224) = "A17 family";
  *(_QWORD *)(v5 + 232) = 10;
  *(_QWORD *)(v5 + 240) = "A11Legacy";
  *(_QWORD *)(v5 + 248) = 9;
  *(_DWORD *)(v5 + 256) = 6;
  *(_QWORD *)(v5 + 264) = "A11 Legacy family";
  *(_QWORD *)(v5 + 272) = 17;
  v10.n128_u32[2] = v4 + 7;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(v3, v2, (uint64_t)"target-family", 13, &v9, &v8, (uint64_t *)&v10);
  *(_QWORD *)(a1 + 344) = off_1E0E4C1A0;
  *(_QWORD *)(a1 + 944) = &unk_1E0E4C220;
  if ((_QWORD *)v10.n128_u64[0] != v11)
    free((void *)v10.n128_u64[0]);
  v10.n128_u64[0] = (unint64_t)"Insert instrumentation to enable performance recording.";
  v10.n128_u64[1] = 55;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 960), v2, (uint64_t)"insert-instrumentation", 22, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 960) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 1152) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"If true the GPU is the host device, otherwise it is the CPU. Defaults to false.";
  v10.n128_u64[1] = 79;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1168), v2, (uint64_t)"gpu-host", 8, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1168) = &off_1E0E4C320;
  *(_QWORD *)(a1 + 1360) = &unk_1E0E4C3A0;
  v10.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v10.n128_u64[1] = 24;
  LODWORD(v8) = 1;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(a1 + 1376), v2, (uint64_t)"gpu-core-count", 14, &v10, (int **)&v9);
  *(_QWORD *)(a1 + 1376) = off_1E0E4C3E0;
  *(_QWORD *)(a1 + 1568) = &unk_1E0E4C460;
  v10.n128_u64[0] = (unint64_t)"Number of thresholds for TA algorithm. Generally expect to use the default value.";
  v10.n128_u64[1] = 81;
  v7 = 1;
  LODWORD(v8) = 25;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((_QWORD *)(a1 + 1584), v2, (uint64_t)"num-thresholds", 14, &v10, (int **)&v9, &v7);
  *(_QWORD *)(a1 + 1584) = off_1E0E4C3E0;
  *(_QWORD *)(a1 + 1776) = &unk_1E0E4C460;
  v10.n128_u64[0] = (unint64_t)"Number of steps for a single threshold for TA algorithm. Generally expect to use t"
                                      "he default value.";
  v10.n128_u64[1] = 99;
  v7 = 1;
  LODWORD(v8) = 10;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((_QWORD *)(a1 + 1792), v2, (uint64_t)"num-steps", 9, &v10, (int **)&v9, &v7);
  *(_QWORD *)(a1 + 1792) = off_1E0E4C3E0;
  *(_QWORD *)(a1 + 1984) = &unk_1E0E4C460;
  v10.n128_u64[0] = (unint64_t)"Number of steps required for convergence. Generally expect to use the default value.";
  v10.n128_u64[1] = 84;
  v7 = 1;
  LODWORD(v8) = 10;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((_QWORD *)(a1 + 2000), v2, (uint64_t)"convergence-threshold", 21, &v10, (int **)&v9, &v7);
  *(_QWORD *)(a1 + 2000) = off_1E0E4C3E0;
  *(_QWORD *)(a1 + 2192) = &unk_1E0E4C460;
  v10.n128_u64[0] = (unint64_t)"The seed to use for the RNG. This will ensure that the random numbers can be gener"
                                      "ated deterministically.";
  v10.n128_u64[1] = 105;
  v7 = 1;
  LODWORD(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((_QWORD *)(a1 + 2208), v2, (uint64_t)"rng-seed", 8, &v10, (int **)&v9, &v7);
  *(_QWORD *)(a1 + 2208) = off_1E0E4C4A0;
  *(_QWORD *)(a1 + 2408) = &unk_1E0E4C520;
  return a1;
}

void mlir::`anonymous namespace'::MPSPlacement::~MPSPlacement(mlir::_anonymous_namespace_::MPSPlacement *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  mlir::_anonymous_namespace_::MPSPlacement *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  mlir::_anonymous_namespace_::MPSPlacement *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  mlir::_anonymous_namespace_::MPSPlacement *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  mlir::_anonymous_namespace_::MPSPlacement *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  mlir::_anonymous_namespace_::MPSPlacement *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  mlir::_anonymous_namespace_::MPSPlacement *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  mlir::_anonymous_namespace_::MPSPlacement *v31;
  uint64_t v32;
  char *v33;
  void *v34;
  char *v35;

  *(_QWORD *)this = off_1E0E2B758;
  *((_QWORD *)this + 276) = off_1E0E236C0;
  v2 = (char *)this + 2376;
  v3 = (char *)*((_QWORD *)this + 300);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 276) = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)this + 288);
  if (v5 != *((void **)this + 287))
    free(v5);
  v6 = (char *)*((_QWORD *)this + 284);
  if (v6 != (char *)this + 2288)
    free(v6);
  *((_QWORD *)this + 250) = &unk_1E0E23658;
  v7 = (mlir::_anonymous_namespace_::MPSPlacement *)*((_QWORD *)this + 273);
  if (v7 == (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 2160))
  {
    v8 = 4;
    v7 = (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 2160);
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_15:
  *((_QWORD *)this + 250) = &unk_1E0E23930;
  v9 = (void *)*((_QWORD *)this + 262);
  if (v9 != *((void **)this + 261))
    free(v9);
  v10 = (char *)*((_QWORD *)this + 258);
  if (v10 != (char *)this + 2080)
    free(v10);
  *((_QWORD *)this + 224) = &unk_1E0E23658;
  v11 = (mlir::_anonymous_namespace_::MPSPlacement *)*((_QWORD *)this + 247);
  if (v11 == (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1952))
  {
    v12 = 4;
    v11 = (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1952);
  }
  else
  {
    if (!v11)
      goto LABEL_24;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_24:
  *((_QWORD *)this + 224) = &unk_1E0E23930;
  v13 = (void *)*((_QWORD *)this + 236);
  if (v13 != *((void **)this + 235))
    free(v13);
  v14 = (char *)*((_QWORD *)this + 232);
  if (v14 != (char *)this + 1872)
    free(v14);
  *((_QWORD *)this + 198) = &unk_1E0E23658;
  v15 = (mlir::_anonymous_namespace_::MPSPlacement *)*((_QWORD *)this + 221);
  if (v15 == (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1744))
  {
    v16 = 4;
    v15 = (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1744);
  }
  else
  {
    if (!v15)
      goto LABEL_33;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_33:
  *((_QWORD *)this + 198) = &unk_1E0E23930;
  v17 = (void *)*((_QWORD *)this + 210);
  if (v17 != *((void **)this + 209))
    free(v17);
  v18 = (char *)*((_QWORD *)this + 206);
  if (v18 != (char *)this + 1664)
    free(v18);
  *((_QWORD *)this + 172) = &unk_1E0E23658;
  v19 = (mlir::_anonymous_namespace_::MPSPlacement *)*((_QWORD *)this + 195);
  if (v19 == (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1536))
  {
    v20 = 4;
    v19 = (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1536);
  }
  else
  {
    if (!v19)
      goto LABEL_42;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_42:
  *((_QWORD *)this + 172) = &unk_1E0E23930;
  v21 = (void *)*((_QWORD *)this + 184);
  if (v21 != *((void **)this + 183))
    free(v21);
  v22 = (char *)*((_QWORD *)this + 180);
  if (v22 != (char *)this + 1456)
    free(v22);
  *((_QWORD *)this + 146) = &unk_1E0E23520;
  v23 = (mlir::_anonymous_namespace_::MPSPlacement *)*((_QWORD *)this + 169);
  if (v23 == (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1328))
  {
    v24 = 4;
    v23 = (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1328);
  }
  else
  {
    if (!v23)
      goto LABEL_51;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_51:
  *((_QWORD *)this + 146) = &unk_1E0E23930;
  v25 = (void *)*((_QWORD *)this + 158);
  if (v25 != *((void **)this + 157))
    free(v25);
  v26 = (char *)*((_QWORD *)this + 154);
  if (v26 != (char *)this + 1248)
    free(v26);
  *((_QWORD *)this + 120) = &unk_1E0E23520;
  v27 = (mlir::_anonymous_namespace_::MPSPlacement *)*((_QWORD *)this + 143);
  if (v27 == (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1120))
  {
    v28 = 4;
    v27 = (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 1120);
  }
  else
  {
    if (!v27)
      goto LABEL_60;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_60:
  *((_QWORD *)this + 120) = &unk_1E0E23930;
  v29 = (void *)*((_QWORD *)this + 132);
  if (v29 != *((void **)this + 131))
    free(v29);
  v30 = (char *)*((_QWORD *)this + 128);
  if (v30 != (char *)this + 1040)
    free(v30);
  *((_QWORD *)this + 43) = off_1E0E23318;
  v31 = (mlir::_anonymous_namespace_::MPSPlacement *)*((_QWORD *)this + 117);
  if (v31 == (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 912))
  {
    v32 = 4;
    v31 = (mlir::_anonymous_namespace_::MPSPlacement *)((char *)this + 912);
  }
  else
  {
    if (!v31)
      goto LABEL_69;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_69:
  *((_QWORD *)this + 62) = &off_1E0E23A68;
  v33 = (char *)*((_QWORD *)this + 64);
  if (v33 != (char *)this + 528)
    free(v33);
  *((_QWORD *)this + 43) = &unk_1E0E23930;
  v34 = (void *)*((_QWORD *)this + 55);
  if (v34 != *((void **)this + 54))
    free(v34);
  v35 = (char *)*((_QWORD *)this + 51);
  if (v35 != (char *)this + 424)
    free(v35);
  mlir::Pass::~Pass(this);
}

{
  void *v1;

  operator delete(v1);
}

const char *mlir::MPSPlacementBase<mlir::`anonymous namespace'::MPSPlacement>::getName()
{
  return "MPSPlacement";
}

_QWORD *mlir::MPSPlacementBase<mlir::`anonymous namespace'::MPSPlacement>::getDependentDialects(int a1, uint64_t **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = off_1E0E50A68;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, "placement", 9uLL, v11);
  v3 = v12;
  if (v12 == v11)
  {
    v4 = 4;
    v3 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v11[0] = off_1E0E50900;
  v12 = v11;
  v5 = 4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id, "anec", 4uLL, v11);
  v6 = v12;
  if (v12 == v11)
  {
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v5))();
LABEL_11:
  v11[0] = off_1E0E50870;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v11[0] = off_1E0E509D8;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, "memref", 6uLL, v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

const char *mlir::MPSPlacementBase<mlir::`anonymous namespace'::MPSPlacement>::getArgument()
{
  return "mps-placement";
}

const char *mlir::MPSPlacementBase<mlir::`anonymous namespace'::MPSPlacement>::getDescription()
{
  return "Place ops across the various IP available on the Apple SoC.";
}

void mlir::`anonymous namespace'::MPSPlacement::runOnOperation(mlir::_anonymous_namespace_::MPSPlacement *this)
{
  uint64_t Context;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (**v6)(mlir::ConversionTarget *__hidden);
  void **v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t (**v15)();
  __int128 v16;
  void (***v17)(mlir::ConversionTarget *__hidden);
  __int128 v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[2];
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void (**v26)(mlir::ConversionTarget *__hidden);
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  _DWORD v45[136];
  _QWORD v46[3];
  _QWORD *v47;
  uint64_t v48[3];
  int v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[2];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[536];
  uint64_t v63;
  __int128 __p;
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD v68[8];
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  Context = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  __p = 0u;
  v65 = 0u;
  v63 = Context;
  v66 = v68;
  v67 = 0x600000000;
  v68[7] = 0;
  v68[6] = 0;
  v69 = 0;
  v71 = 0;
  v70 = 0;
  v72 = 0x2800000000;
  v73 = 0;
  v74 = 0;
  v75 = 0x2800000000;
  mlir::MPSToANECTypeConverter::MPSToANECTypeConverter((mlir::MPSToANECTypeConverter *)v62);
  mlir::populateMPSToANECConversionPatterns(*((unsigned int *)this + 118), 1, &v63, (uint64_t)v62);
  v3 = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v48[2] = 0;
  v48[0] = (uint64_t)off_1E0E2B708;
  v48[1] = 0;
  v49 = 0;
  v55 = 0;
  v54 = 0;
  v50 = v52;
  v51 = 0;
  v52[1] = 0;
  v52[0] = 0;
  v53 = 0;
  v56 = 0x1000000000;
  v57 = 0;
  v58 = 0;
  v59 = 0x2800000000;
  v60 = 0;
  v61 = v3;
  *((_QWORD *)&v43 + 1) = "func";
  v44 = 4;
  mlir::ConversionTarget::setDialectAction(v48, (uint64_t)&v43 + 8, 1, 2);
  *((_QWORD *)&v43 + 1) = "memref";
  v44 = 6;
  mlir::ConversionTarget::setDialectAction(v48, (uint64_t)&v43 + 8, 1, 2);
  v42 = (char *)&v43 + 8;
  *((_QWORD *)&v43 + 1) = "mps";
  v44 = 3;
  *(_QWORD *)&v43 = 0x200000001;
  mlir::ConversionTarget::setDialectAction(v48, (uint64_t)&v43 + 8, 1, 2);
  mlir::OperationName::OperationName(&v42, "anec.unrealized_conversion_cast", 31, v61);
  mlir::ConversionTarget::setOpAction((uint64_t)v48, (uint64_t)v42, 2);
  mlir::OperationName::OperationName(&v42, "placement.region_call", 21, v61);
  mlir::ConversionTarget::setOpAction((uint64_t)v48, (uint64_t)v42, 2);
  v46[0] = off_1E0E506C8;
  v46[1] = this;
  v47 = v46;
  v42 = (char *)&v43 + 8;
  *((_QWORD *)&v43 + 1) = "anec";
  v44 = 4;
  *(_QWORD *)&v43 = 0x200000001;
  mlir::ConversionTarget::setDialectAction(v48, (uint64_t)&v43 + 8, 1, 1);
  mlir::ConversionTarget::setLegalityCallback(v48, (uint64_t)v42, v43, v46);
  if (v42 != (char *)&v43 + 8)
    free(v42);
  v4 = v47;
  if (v47 == v46)
  {
    v5 = 4;
    v4 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  v42 = off_1E0E50B08;
  LOBYTE(v43) = 0;
  v44 = (uint64_t)&v42;
  mlir::OperationName::OperationName(&v26, "mps.constant", 12, v61);
  v6 = v26;
  mlir::ConversionTarget::setOpAction((uint64_t)v48, (uint64_t)v26, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v48, (uint64_t)v6, &v42);
  v7 = (void **)v44;
  if ((void **)v44 == &v42)
  {
    v8 = 4;
    v7 = &v42;
  }
  else
  {
    if (!v44)
      goto LABEL_13;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_13:
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v18, &v63, 0, 0, 0, 0);
  v9 = *((_DWORD *)this + 118);
  v10 = v18;
  v18 = 0uLL;
  v43 = v10;
  v26 = 0;
  v27 = 0;
  v44 = (uint64_t)v48;
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v26);
  v42 = &off_1E0E28368;
  mlir::MPSToANECTypeConverter::MPSToANECTypeConverter((mlir::MPSToANECTypeConverter *)v45);
  v45[134] = v9;
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v18);
  v11 = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v27 = 0;
  v28 = 0;
  v26 = off_1E0E2B708;
  v29 = 0;
  v34 = 0;
  v35 = 0;
  v30 = v32;
  v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v36 = 0x1000000000;
  v37 = 0;
  v38 = 0;
  v39 = 0x2800000000;
  v40 = 0;
  v41 = v11;
  v22 = &v24;
  v24 = "func";
  v25 = 4;
  v23 = 0x200000001;
  mlir::ConversionTarget::setDialectAction((uint64_t *)&v26, (uint64_t)&v24, 1, 2);
  if (v22 != &v24)
    free(v22);
  mlir::OperationName::OperationName(&v22, "placement.region_call", 21, v41);
  mlir::ConversionTarget::setOpAction((uint64_t)&v26, (uint64_t)v22, 2);
  mlir::OperationName::OperationName(&v22, "placement.tensor_to_memref", 26, v41);
  mlir::ConversionTarget::setOpAction((uint64_t)&v26, (uint64_t)v22, 2);
  v22 = &v24;
  v24 = "mps";
  v25 = 3;
  v23 = 0x200000001;
  mlir::ConversionTarget::setDialectAction((uint64_t *)&v26, (uint64_t)&v24, 1, 0);
  if (v22 != &v24)
    free(v22);
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v14);
  v12 = v14;
  v14 = 0uLL;
  v16 = v12;
  v22 = 0;
  v23 = 0;
  v17 = &v26;
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v22);
  v15 = &off_1E0E28640;
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v14);
  mlir::getDeviceInfo(*((_DWORD *)this + 118), *((unsigned int *)this + 376), (uint64_t)&v22);
  LOBYTE(v22) = *((_BYTE *)this + 1296);
  v19 = v21;
  v21[0] = &v42;
  v20 = 0x200000001;
  if ((_BYTE)v22)
  {
    v13 = 1;
  }
  else
  {
    v21[1] = &v15;
    v13 = 2;
    LODWORD(v20) = 2;
  }
  if (!mlir::doPlacement((uint64_t *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8), *((unsigned int *)this + 428), *((unsigned int *)this + 480), *((unsigned int *)this + 532), (uint64_t)v21, v13))*((_QWORD *)this + 5) |= 4uLL;
  if (v19 != v21)
    free(v19);
  v15 = (uint64_t (**)())&unk_1E0E2B6D0;
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v16);
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)&v26);
}

_QWORD *mlir::MPSPlacementBase<mlir::`anonymous namespace'::MPSPlacement>::clonePass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int32 v7;
  unint64_t v8;
  _QWORD *result;
  int v10;
  int *v11;
  __int128 v12;
  __n128 v13;
  _QWORD v14[21];

  v14[20] = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x978uLL);
  v5 = *(_QWORD *)(a1 + 8);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  v4[40] = 0;
  v4[120] = 0;
  v6 = v4 + 152;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *(_QWORD *)v4 = off_1E0E2B758;
  *((_QWORD *)v4 + 1) = v5;
  *(_QWORD *)&v12 = "The family to target for ANEC region formation (default A12).";
  *((_QWORD *)&v12 + 1) = 61;
  v10 = 0;
  v11 = &v10;
  v13.n128_u64[0] = (unint64_t)v14;
  v13.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v14, 7uLL, 40);
  v7 = v13.n128_u32[2];
  v8 = v13.n128_u64[0] + 40 * v13.n128_u32[2];
  *(_QWORD *)v8 = "A12";
  *(_QWORD *)(v8 + 8) = 3;
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = "A12 family";
  *(_QWORD *)(v8 + 32) = 10;
  *(_QWORD *)(v8 + 40) = "A13";
  *(_QWORD *)(v8 + 48) = 3;
  *(_DWORD *)(v8 + 56) = 1;
  *(_QWORD *)(v8 + 64) = "A13 family";
  *(_QWORD *)(v8 + 72) = 10;
  *(_QWORD *)(v8 + 80) = "A14";
  *(_QWORD *)(v8 + 88) = 3;
  *(_DWORD *)(v8 + 96) = 2;
  *(_QWORD *)(v8 + 104) = "A14 family";
  *(_QWORD *)(v8 + 112) = 10;
  *(_QWORD *)(v8 + 120) = "A15";
  *(_QWORD *)(v8 + 128) = 3;
  *(_DWORD *)(v8 + 136) = 3;
  *(_QWORD *)(v8 + 144) = "A15 family";
  *(_QWORD *)(v8 + 152) = 10;
  *(_QWORD *)(v8 + 160) = "A16";
  *(_QWORD *)(v8 + 168) = 3;
  *(_DWORD *)(v8 + 176) = 4;
  *(_QWORD *)(v8 + 184) = "A16 family";
  *(_QWORD *)(v8 + 192) = 10;
  *(_QWORD *)(v8 + 200) = "A17";
  *(_QWORD *)(v8 + 208) = 3;
  *(_DWORD *)(v8 + 216) = 5;
  *(_QWORD *)(v8 + 224) = "A17 family";
  *(_QWORD *)(v8 + 232) = 10;
  *(_QWORD *)(v8 + 240) = "A11Legacy";
  *(_QWORD *)(v8 + 248) = 9;
  *(_DWORD *)(v8 + 256) = 6;
  *(_QWORD *)(v8 + 264) = "A11 Legacy family";
  *(_QWORD *)(v8 + 272) = 17;
  v13.n128_u32[2] = v7 + 7;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((_QWORD *)v4 + 43, (_QWORD *)v4 + 19, (uint64_t)"target-family", 13, &v12, &v11, (uint64_t *)&v13);
  *((_QWORD *)v4 + 43) = off_1E0E4C1A0;
  *((_QWORD *)v4 + 118) = &unk_1E0E4C220;
  if ((_QWORD *)v13.n128_u64[0] != v14)
    free((void *)v13.n128_u64[0]);
  v13.n128_u64[0] = (unint64_t)"Insert instrumentation to enable performance recording.";
  v13.n128_u64[1] = 55;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 120, v6, (uint64_t)"insert-instrumentation", 22, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 120) = &off_1E0E4C320;
  *((_QWORD *)v4 + 144) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"If true the GPU is the host device, otherwise it is the CPU. Defaults to false.";
  v13.n128_u64[1] = 79;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)v4 + 146, v6, (uint64_t)"gpu-host", 8, &v13, (_BYTE **)&v12);
  *((_QWORD *)v4 + 146) = &off_1E0E4C320;
  *((_QWORD *)v4 + 170) = &unk_1E0E4C3A0;
  v13.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v13.n128_u64[1] = 24;
  LODWORD(v11) = 1;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)v4 + 172, v6, (uint64_t)"gpu-core-count", 14, &v13, (int **)&v12);
  *((_QWORD *)v4 + 172) = off_1E0E4C3E0;
  *((_QWORD *)v4 + 196) = &unk_1E0E4C460;
  v13.n128_u64[0] = (unint64_t)"Number of thresholds for TA algorithm. Generally expect to use the default value.";
  v13.n128_u64[1] = 81;
  v10 = 1;
  LODWORD(v11) = 25;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((_QWORD *)v4 + 198, v6, (uint64_t)"num-thresholds", 14, &v13, (int **)&v12, &v10);
  *((_QWORD *)v4 + 198) = off_1E0E4C3E0;
  *((_QWORD *)v4 + 222) = &unk_1E0E4C460;
  v13.n128_u64[0] = (unint64_t)"Number of steps for a single threshold for TA algorithm. Generally expect to use t"
                                      "he default value.";
  v13.n128_u64[1] = 99;
  v10 = 1;
  LODWORD(v11) = 10;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((_QWORD *)v4 + 224, v6, (uint64_t)"num-steps", 9, &v13, (int **)&v12, &v10);
  *((_QWORD *)v4 + 224) = off_1E0E4C3E0;
  *((_QWORD *)v4 + 248) = &unk_1E0E4C460;
  v13.n128_u64[0] = (unint64_t)"Number of steps required for convergence. Generally expect to use the default value.";
  v13.n128_u64[1] = 84;
  v10 = 1;
  LODWORD(v11) = 10;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((_QWORD *)v4 + 250, v6, (uint64_t)"convergence-threshold", 21, &v13, (int **)&v12, &v10);
  *((_QWORD *)v4 + 250) = off_1E0E4C3E0;
  *((_QWORD *)v4 + 274) = &unk_1E0E4C460;
  v13.n128_u64[0] = (unint64_t)"The seed to use for the RNG. This will ensure that the random numbers can be gener"
                                      "ated deterministically.";
  v13.n128_u64[1] = 105;
  v10 = 1;
  LODWORD(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  result = mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((_QWORD *)v4 + 276, v6, (uint64_t)"rng-seed", 8, &v13, (int **)&v12, &v10);
  *((_QWORD *)v4 + 276) = off_1E0E4C4A0;
  *((_QWORD *)v4 + 301) = &unk_1E0E4C520;
  *(_QWORD *)v4 = off_1E0E26538;
  *a2 = v4;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, int **a6, _WORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v36[2];
  _QWORD v37[3];
  _QWORD *v38;
  const void *v39[3];
  const void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v36[0] = a3;
  v36[1] = a4;
  v39[0] = a2;
  v9 = llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((uint64_t)a1, (uint64_t)v36, v39, a5, a6, a7);
  *(_QWORD *)(v9 + 192) = &unk_1E0E4E208;
  v10 = v9 + 192;
  *(_BYTE *)(v9 + 200) = 0;
  *(_QWORD *)v9 = off_1E0E4E188;
  v12 = (uint64_t *)a2[21];
  v11 = a2[22];
  v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    v15 = (uint64_t *)a2[20];
    v16 = v12 - v15;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      abort();
    v18 = v11 - (_QWORD)v15;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = (char *)operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (uint64_t *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v10;
    v14 = v21 + 1;
    if (v12 != v15)
    {
      v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v15 - v20) < 0x20)
        goto LABEL_38;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      v21 = (uint64_t *)((char *)v21 - v25);
      v26 = &v20[8 * v16 - 16];
      v27 = v12 - 2;
      v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v30 = *--v13;
          *--v21 = v30;
        }
        while (v13 != v15);
      }
      v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v12 = v10;
    v14 = v12 + 1;
  }
  a2[21] = v14;
  v37[0] = off_1E0E515E8;
  v37[1] = a1;
  v38 = v37;
  v39[0] = off_1E0E515E8;
  v40 = v39;
  v39[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v39, a1 + 20);
  v31 = v40;
  if (v40 == v39)
  {
    v32 = 4;
    v31 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_28;
    v32 = 5;
  }
  (*((void (**)(void))*v31 + v32))();
LABEL_28:
  v33 = v38;
  if (v38 == v37)
  {
    v34 = 4;
    v33 = v37;
    goto LABEL_32;
  }
  if (v38)
  {
    v34 = 5;
LABEL_32:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  return a1;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5, _WORD *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FA8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23658;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23BC8;
  *(_QWORD *)(a1 + 160) = off_1E0E4FBE0;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5, _WORD *a6)
{
  const void *v11;
  uint64_t v12;
  __n128 result;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v11 = *a3;
  v12 = *(_QWORD *)(a1 + 96);
  if (v12 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
    goto LABEL_3;
  }
  v15 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v15)
  {
LABEL_12:
    if (v15 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v15 + 1;
      *(_QWORD *)(v12 + 8 * v15) = v11;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v16 = 0;
  v17 = 8 * v15;
  v18 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v18 != v11)
  {
    if (*v18 == -2)
      v16 = v18;
    ++v18;
    v17 -= 8;
    if (!v17)
    {
      if (!v16)
        goto LABEL_12;
      *v16 = v11;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v14 = **a5;
  *(_DWORD *)(a1 + 128) = v14;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v14;
  *(_WORD *)(a1 + 10) = (32 * (*a6 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIjN4llvm2cl6parserIjEEEC1IJNS7_4descENS7_11initializerIiEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKjEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E515E8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIjN4llvm2cl6parserIjEEEC1IJNS7_4descENS7_11initializerIiEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKjEE7__cloneEPNS0_6__baseIST_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E515E8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIjN4llvm2cl6parserIjEEEC1IJNS7_4descENS7_11initializerIiEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKjEEclESS_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 200) = 1;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, int **a6, _WORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v36[2];
  _QWORD v37[3];
  _QWORD *v38;
  const void *v39[3];
  const void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v36[0] = a3;
  v36[1] = a4;
  v39[0] = a2;
  v9 = llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>((uint64_t)a1, (uint64_t)v36, v39, a5, a6, a7);
  *(_QWORD *)(v9 + 200) = &unk_1E0E4E2C8;
  v10 = v9 + 200;
  *(_BYTE *)(v9 + 208) = 0;
  *(_QWORD *)v9 = off_1E0E4E248;
  v12 = (uint64_t *)a2[21];
  v11 = a2[22];
  v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    v15 = (uint64_t *)a2[20];
    v16 = v12 - v15;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      abort();
    v18 = v11 - (_QWORD)v15;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = (char *)operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (uint64_t *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v10;
    v14 = v21 + 1;
    if (v12 != v15)
    {
      v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v15 - v20) < 0x20)
        goto LABEL_38;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      v21 = (uint64_t *)((char *)v21 - v25);
      v26 = &v20[8 * v16 - 16];
      v27 = v12 - 2;
      v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v30 = *--v13;
          *--v21 = v30;
        }
        while (v13 != v15);
      }
      v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v12 = v10;
    v14 = v12 + 1;
  }
  a2[21] = v14;
  v37[0] = off_1E0E51708;
  v37[1] = a1;
  v38 = v37;
  v39[0] = off_1E0E51708;
  v40 = v39;
  v39[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v39, a1 + 21);
  v31 = v40;
  if (v40 == v39)
  {
    v32 = 4;
    v31 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_28;
    v32 = 5;
  }
  (*((void (**)(void))*v31 + v32))();
LABEL_28:
  v33 = v38;
  if (v38 == v37)
  {
    v34 = 4;
    v33 = v37;
    goto LABEL_32;
  }
  if (v38)
  {
    v34 = 5;
LABEL_32:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  return a1;
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5, _WORD *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FC8;
  *(_QWORD *)a1 = off_1E0E236C0;
  *(_QWORD *)(a1 + 160) = &unk_1E0E23BF8;
  *(_QWORD *)(a1 + 168) = off_1E0E4FC28;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>,llvm::cl::OptionHidden>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5, _WORD *a6)
{
  const void *v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v11 = *a3;
  v12 = *(_QWORD *)(a1 + 96);
  if (v12 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
    goto LABEL_3;
  }
  v15 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v15)
  {
LABEL_12:
    if (v15 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v15 + 1;
      *(_QWORD *)(v12 + 8 * v15) = v11;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v16 = 0;
  v17 = 8 * v15;
  v18 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v18 != v11)
  {
    if (*v18 == -2)
      v16 = v18;
    ++v18;
    v17 -= 8;
    if (!v17)
    {
      if (!v16)
        goto LABEL_12;
      *v16 = v11;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v14 = **a5;
  *(_QWORD *)(a1 + 128) = v14;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = v14;
  *(_WORD *)(a1 + 10) = (32 * (*a6 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKxEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51708;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKxEE7__cloneEPNS0_6__baseIST_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51708;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIiEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKxEEclESS_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 208) = 1;
  return result;
}

_QWORD *std::__function::__func<mlir::`anonymous namespace'::MPSPlacement::runOnOperation(void)::{lambda(mlir::Operation *)#1},std::allocator<mlir::`anonymous namespace'::MPSPlacement::runOnOperation(void)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E506C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlir::`anonymous namespace'::MPSPlacement::runOnOperation(void)::{lambda(mlir::Operation *)#1},std::allocator<mlir::`anonymous namespace'::MPSPlacement::runOnOperation(void)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E506C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlir::`anonymous namespace'::MPSPlacement::runOnOperation(void)::{lambda(mlir::Operation *)#1},std::allocator<mlir::`anonymous namespace'::MPSPlacement::runOnOperation(void)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  uint64_t (*v6)();
  _BOOL4 v7;
  _QWORD v9[2];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = mlir::verifyCompatibleTypesWithANE(*a2, *(_DWORD *)(v3 + 472), 1, 1);
  v5 = v4;
  v6 = mlir::TypeID::get<mlir::anec::VerifyAttributesWithFamilyInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::anec::VerifyAttributesWithFamilyInterface::Trait>(void)::Empty>>();
  if ((*(unsigned int (**)(_QWORD, uint64_t (*)()))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48), v6))
  {
    v7 = v4;
    v9[0] = v2;
    v9[1] = mlir::OpInterface<mlir::anec::VerifyAttributesWithFamilyInterface,mlir::anec::detail::VerifyAttributesWithFamilyInterfaceInterfaceTraits>::getInterfaceFor(v2);
    if (mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v9, *(unsigned int *)(v3 + 472)))v5 = v7;
    else
      v5 = 0;
  }
  return (mlir::anec::isCompatibleWithFamily(v2, *(_DWORD *)(v3 + 472)) && v5) | 0x100u;
}

_BYTE *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_112MPSPlacement14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1E0E50B08;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_112MPSPlacement14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EE7__cloneEPNS0_6__baseISM_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E0E50B08;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_112MPSPlacement14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EEclEOSD_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;

  v2 = *(_QWORD *)(*a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v2 = 0;
  v6 = v2;
  if (v2)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v6);
    if (v3)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v6);
      LODWORD(v2) = v4 > 3;
    }
    else
    {
      LODWORD(v2) = 1;
    }
  }
  return v2 | 0x100;
}

uint64_t mlir::`anonymous namespace'::ANEDeviceInterface::getConvertedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v16 = 0;
  if (a3)
  {
    v7 = 0;
    v8 = a1 + 32;
    v9 = (void *)(a4 + 16);
    do
    {
      v10 = mlir::ValueRange::dereference_iterator(&v15, v7);
      v11 = mlir::TypeConverter::convertType(v8, (void *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8));
      v12 = *(unsigned int *)(a4 + 8);
      if (v12 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v9, v12 + 1, 8);
        v12 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = v11;
      ++*(_DWORD *)(a4 + 8);
      v7 = ++v16;
    }
    while (v15 != a2 || v7 != a3);
  }
  return 1;
}

uint64_t mlir::`anonymous namespace'::ANEDeviceInterface::getConvertedType(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *a3 = mlir::TypeConverter::convertType(a1 + 32, (void *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8));
  return 1;
}

void mlir::`anonymous namespace'::ANEDeviceInterface::materializeRegion(uint64_t a1)
{
  __asm { BR              X12 }
}

mlir::GenericProgramPoint *sub_180732224@<X0>(mlir::OpBuilder *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  mlir::GenericProgramPoint *v4;
  mlir::GenericProgramPoint *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = mlir::OpBuilder::create<mlir::anec::A12,llvm::StringRef &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute> &>(a1, v2, (uint64_t)&v9, a2, v3 - 40, (uint64_t *)(v3 - 56), v3 - 72, &v10, (uint64_t)&v8, (uint64_t)&v7);
  v5 = v4;
  if (v4)
    mlir::OpInterface<mlir::FormableRegionOpInterface,mlir::detail::FormableRegionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v4);
  return v5;
}

uint64_t mlir::`anonymous namespace'::ANEDeviceInterface::materializeHostTypeConversion(uint64_t a1, mlir::UnknownLoc **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  return mlir::materializeMPSToANECHostTypeConversion(a2, a3, a4, a5, a6, a7);
}

mlir::GenericProgramPoint *mlir::`anonymous namespace'::ANEDeviceInterface::materializeCallOp(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, mlir::SymbolRefAttr *a4, uint64_t a5, uint64_t a6)
{
  int v7;
  mlir::SymbolRefAttr *v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v9[0] = a5;
  v9[1] = a6;
  v8 = a4;
  v7 = 1;
  return mlir::OpBuilder::create<mlir::placement::RegionCall,mlir::Operation *&,mlir::placement::RegionType,mlir::ValueRange &>(a2, a3, &v8, &v7, v9);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A12,llvm::StringRef &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  mlir::GenericProgramPoint *v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  _QWORD v30[40];

  v30[38] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v25);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A12", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v29 = 1283;
    v28[2] = (uint64_t)"anec.A12";
    v28[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v27 = 259;
    llvm::operator+(v28, (uint64_t *)&v26, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v19);
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v30, *(void **)a3, *(_QWORD *)(a3 + 8), a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v22 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v22 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id)
    v23 = v22;
  else
    v23 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v23;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A13,llvm::StringRef &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  mlir::GenericProgramPoint *v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  _QWORD v30[40];

  v30[38] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v25);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A13", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v29 = 1283;
    v28[2] = (uint64_t)"anec.A13";
    v28[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v27 = 259;
    llvm::operator+(v28, (uint64_t *)&v26, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v19);
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v30, *(void **)a3, *(_QWORD *)(a3 + 8), a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v22 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v22 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id)
    v23 = v22;
  else
    v23 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v23;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A14,llvm::StringRef &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  mlir::GenericProgramPoint *v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  _QWORD v30[40];

  v30[38] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v25);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A14", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v29 = 1283;
    v28[2] = (uint64_t)"anec.A14";
    v28[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v27 = 259;
    llvm::operator+(v28, (uint64_t *)&v26, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v19);
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v30, *(void **)a3, *(_QWORD *)(a3 + 8), a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v22 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v22 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id)
    v23 = v22;
  else
    v23 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v23;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A15,llvm::StringRef &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  mlir::GenericProgramPoint *v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  _QWORD v30[40];

  v30[38] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v25);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A15", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v29 = 1283;
    v28[2] = (uint64_t)"anec.A15";
    v28[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v27 = 259;
    llvm::operator+(v28, (uint64_t *)&v26, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v19);
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v30, *(void **)a3, *(_QWORD *)(a3 + 8), a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v22 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v22 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id)
    v23 = v22;
  else
    v23 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v23;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A16,llvm::StringRef &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  mlir::GenericProgramPoint *v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  _QWORD v30[40];

  v30[38] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v25);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A16", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v29 = 1283;
    v28[2] = (uint64_t)"anec.A16";
    v28[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v27 = 259;
    llvm::operator+(v28, (uint64_t *)&v26, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v19);
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v30, *(void **)a3, *(_QWORD *)(a3 + 8), a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v22 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v22 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id)
    v23 = v22;
  else
    v23 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v23;
}

